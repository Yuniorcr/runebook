<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="62af3497de478b3a592a72f79c3a04f47988257c" translate="yes" xml:space="preserve">
          <source>If no matches are found, the returned value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30427965176657d7da93bf4af87ad0225371d253" translate="yes" xml:space="preserve">
          <source>If no options are currently selected, the collection is empty and returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/length&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b6884f5bfc3c75441c01a27550430eb1cbd63f" translate="yes" xml:space="preserve">
          <source>If no record exists in this index for the given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e443587f32b0841ebd956161ec282cd87c376a42" translate="yes" xml:space="preserve">
          <source>If no records exist in this index for the requested key range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891c6504f184c5c15d7c40f0daebd942e2b7cd7a" translate="yes" xml:space="preserve">
          <source>If no records match the key range then then the &lt;code&gt;result&lt;/code&gt; property of the event is set to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819347bc9248c902b0ed6774d77afa3bd5b418b0" translate="yes" xml:space="preserve">
          <source>If no value is specified for replaceBox, we create a new ad element. The ad's new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element is created and its properties established by setting its class name to &lt;code&gt;&quot;ad&quot;&lt;/code&gt;. Next, the ad title element is created, along with the body and the visibility timer; these are an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2&quot;&gt;&lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt;, and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element, respectively. These elements are appended to the &lt;code&gt;adBox&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea6b7f8dd1dcbedac170ff03a4c94ce45717abc" translate="yes" xml:space="preserve">
          <source>If no value is specified for the body, a default value of &lt;code&gt;null&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb74434e1aabbad703752ec66b982ba7036f5a5" translate="yes" xml:space="preserve">
          <source>If noOverwrite was true, and a record exists in this index for the given key or this index is auto-populated; or if no record exists with the given key in the index's referenced object store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2456988966b93e0904747e98b9cd8cb6d2ca5a3" translate="yes" xml:space="preserve">
          <source>If normalized, the resulting wave will have a maximum absolute peak value of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e12e482e4bbeef0e1b280d070b07d2081cd516b" translate="yes" xml:space="preserve">
          <source>If not &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;sdpMLineIndex&lt;/code&gt; indicates the zero-based index number of the media description (as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc4566&quot;&gt;RFC 4566&lt;/a&gt;) in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SDP&quot;&gt;SDP&lt;/a&gt; with which the candidate is associated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee33bd66ebef3140ffba047848ee7ec482f8395" translate="yes" xml:space="preserve">
          <source>If not set, the default value 1 will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673e986e95c294aa14e9d3c0610fae9875f84456" translate="yes" xml:space="preserve">
          <source>If not specified in the constructor, this value will be an empty string and the &lt;code&gt;SourceBuffer&lt;/code&gt; can contain any tracks of the specified &lt;a href=&quot;type&quot;&gt;&lt;code&gt;TrackDefault.type&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0757f832bf39081ea7ab5064fc1602123ef490de" translate="yes" xml:space="preserve">
          <source>If not specified when the request is created, it takes the default value of &lt;code&gt;follow&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7ee2dab6b475dd92fa72c0049991d455ec9876" translate="yes" xml:space="preserve">
          <source>If not, fetch the request from the network, then also open the cache created in the first block and add a clone of the request to it using &lt;a href=&quot;cache/put&quot;&gt;&lt;code&gt;Cache.put&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;cache.put(event.request, response.clone())&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a790e2cf5cfbfa96f694b234d76e150780049c" translate="yes" xml:space="preserve">
          <source>If not, open the &lt;code&gt;v1&lt;/code&gt; cache using &lt;a href=&quot;open&quot;&gt;&lt;code&gt;CacheStorage.open()&lt;/code&gt;&lt;/a&gt;, put the default network request in the cache using &lt;a href=&quot;../cache/put&quot;&gt;&lt;code&gt;Cache.put()&lt;/code&gt;&lt;/a&gt; and return a clone of the default network request using &lt;code&gt;return response.clone()&lt;/code&gt;. The last is necessary because &lt;code&gt;put()&lt;/code&gt; consumes the response body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e02a06eba67509888efb6e898cf9b0bcedbd6e" translate="yes" xml:space="preserve">
          <source>If not, open the &lt;code&gt;v1&lt;/code&gt; cache using &lt;code&gt;open()&lt;/code&gt;, put the default network request in the cache using &lt;a href=&quot;../cache/put&quot;&gt;&lt;code&gt;Cache.put()&lt;/code&gt;&lt;/a&gt; and return a clone of the default network request using &lt;code&gt;return response.clone()&lt;/code&gt;. The last is necessary because &lt;code&gt;put()&lt;/code&gt; consumes the response body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d83aa88da97ab64afd0199340b7c276b84cef23" translate="yes" xml:space="preserve">
          <source>If not, open the &lt;code&gt;v1&lt;/code&gt; cache using &lt;code&gt;open()&lt;/code&gt;, put the default network request in the cache using &lt;a href=&quot;put&quot;&gt;&lt;code&gt;Cache.put()&lt;/code&gt;&lt;/a&gt; and return a clone of the default network request using &lt;code&gt;return response.clone()&lt;/code&gt;. Clone is needed because &lt;code&gt;put()&lt;/code&gt; consumes the response body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b232fc56252bc65472dc0eb0dc0783d4d8a07df5" translate="yes" xml:space="preserve">
          <source>If omitted, &lt;code&gt;count()&lt;/code&gt; outputs the number of times it has been called at that line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5ff69c02f06de5945a1c2edc80cc69443c01f6" translate="yes" xml:space="preserve">
          <source>If omitted, &lt;code&gt;count()&lt;/code&gt; resets the default counter to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8900db9c12a487fb7bffb8b2e896ec3a34d539" translate="yes" xml:space="preserve">
          <source>If on, the new created window floats below, under its own parent when the parent window is not minimized. alwaysLowered windows are often referred as pop-under windows. The alwaysLowered window can not be on top of the parent but the parent window can be minimized. In NS 6.x, the alwaysLowered window has no minimize system command icon and no restore/maximize system command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b84813b12f564ed09e107932338337e21e57594" translate="yes" xml:space="preserve">
          <source>If on, the new window is said to be dependent of its parent window. A dependent window closes when its parent window closes. A dependent window is minimized on the Windows task bar only when its parent window is minimized. On Windows platforms, a dependent window does not show on the task bar. A dependent window also stays in front of the parent window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fb6e9083adda333ef3c6d186a7ec472a199a27" translate="yes" xml:space="preserve">
          <source>If on, the new window is said to be modal. The user cannot return to the main window until the modal window is closed. A typical modal window is created by the &lt;a href=&quot;alert&quot;&gt;alert() function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97df8056330640a40aabffb2410b7a88183a50f3" translate="yes" xml:space="preserve">
          <source>If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781e8ecebe1c06e51767b036f57f3fc7ea116bb1" translate="yes" xml:space="preserve">
          <source>If on, the page is loaded as window's only content, without any of the browser's interface elements. There will be no context menu defined by default and none of the standard keyboard shortcuts will work. The page is supposed to provide a user interface of its own, usually this feature is used to open XUL documents (standard dialogs like the JavaScript Console are opened this way).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad98bfc4635851a5c494597a5c58c4bdf5293cdb" translate="yes" xml:space="preserve">
          <source>If one of the following conditions is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10059bc20cf5e5b6b0eaaf317b9c39d4bef7b92d" translate="yes" xml:space="preserve">
          <source>If permission to display notifications hasn't been granted yet, the application needs to use the &lt;a href=&quot;../notification/requestpermission&quot;&gt;&lt;code&gt;Notification.requestPermission()&lt;/code&gt;&lt;/a&gt; method to request this from the user. In its simplest form, we just include the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c9b451808a0ddb60d5449d6e5e08efb79a0265" translate="yes" xml:space="preserve">
          <source>If possible, you may also include the file URL of the file using both the &lt;code&gt;text/uri-list&lt;/code&gt; and/or &lt;code&gt;text/plain&lt;/code&gt; types. These types should be added last so that the more specific &lt;code&gt;application/x-moz-file&lt;/code&gt; type has higher priority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d445890bc7ffe3155003cb09a1109f2a60504d" translate="yes" xml:space="preserve">
          <source>If present, this &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; is a string describing the validation error from which the payer's email address&amp;mdash;as given by &lt;a href=&quot;paymentresponse/payeremail&quot;&gt;&lt;code&gt;PaymentResponse.payerEmail&lt;/code&gt;&lt;/a&gt;&amp;mdash;currently suffers. If this property is absent from the &lt;code&gt;PayerErrors&lt;/code&gt; object, the email address passed validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd45e4cf02462d4d6108a75158909734a981627" translate="yes" xml:space="preserve">
          <source>If present, this string is an error message explaining why the payer's phone number (&lt;a href=&quot;paymentresponse/payerphone&quot;&gt;&lt;code&gt;PaymentResponse.payerPhone&lt;/code&gt;&lt;/a&gt;) failed validation. This property is absent if the phone number passed validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f7a4318b7d5cc217a600fb8f036e6e510d922c" translate="yes" xml:space="preserve">
          <source>If provided, this must be a method which is caled when an error occurs while trying to create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileWriter&quot;&gt;&lt;code&gt;FileWriter&lt;/code&gt;&lt;/a&gt;. This callback receives as input a &lt;a href=&quot;../fileerror&quot;&gt;&lt;code&gt;FileError&lt;/code&gt;&lt;/a&gt; object describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4bb2b985058da2efc0d3d91df476880db0435dc" translate="yes" xml:space="preserve">
          <source>If provided, this must be a method which is called when an error occurs while trying to create the &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;. This callback receives as input a &lt;a href=&quot;../fileerror&quot;&gt;&lt;code&gt;FileError&lt;/code&gt;&lt;/a&gt; object describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9455402622d1806532a4d052e9477a14392631" translate="yes" xml:space="preserve">
          <source>If requested via payment options, returns the shipping address chosen by the user for the purposes of calculating shipping. This property is only populated if the constructor is called with the &lt;code&gt;requestShipping&lt;/code&gt; flag set to true. Additionally, in some browsers, the parts of the address will be redacted for privacy until the user indicates they are ready to complete the transaction (i.e., they hit &quot;Pay&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a4bab9445dd332bdc20512261008b57b4512f8" translate="yes" xml:space="preserve">
          <source>If reserving all the database objects identified in &lt;code&gt;storeNames&lt;/code&gt; takes longer than the &lt;code&gt;timeout&lt;/code&gt; interval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7905a651ecd1c2a4b475f1721ea4b893482f716a" translate="yes" xml:space="preserve">
          <source>If resetting the playback position to the beginning of the media actually changes the playback position (that is, it was not already at the beginning), a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/timeupdate&quot;&gt;timeupdate&lt;/a&gt;&lt;/code&gt; event is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9103382182cb540627a2cfe55b6121004db25389" translate="yes" xml:space="preserve">
          <source>If set by the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-controller&quot;&gt;controller&lt;/a&gt;, the value of the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dom-presentation-defaultrequest&quot;&gt;&lt;code&gt;defaultRequest&lt;/code&gt;&lt;/a&gt; attribute &lt;em&gt;SHOULD&lt;/em&gt; be used by the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent&quot;&gt;controlling user agent&lt;/a&gt; as the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57db2d1824f473e0120c9f7346d808ebe974ba48" translate="yes" xml:space="preserve">
          <source>If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb91d299881ca8a03047c046e456b9daf1e61584" translate="yes" xml:space="preserve">
          <source>If set to a value greater than the maximum that the content can be scrolled, &lt;code&gt;scrollLeft&lt;/code&gt; is set to the maximum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b396ce3d017fc9b2c19f5b6ecd02ed00a95f2d7c" translate="yes" xml:space="preserve">
          <source>If set to a value less than 0 (greater than 0 for right-to-left elements), &lt;code&gt;scrollLeft&lt;/code&gt; is set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20ad3ba204c16518563a1e89e5313e670617f08" translate="yes" xml:space="preserve">
          <source>If several listeners are attached to the same element for the same event type, they are called in order in which they have been added. If during one such call, &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt; is called, no remaining listeners will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b5236ddb8c1e86cee0e6e3a47eb9b45c67ca6c" translate="yes" xml:space="preserve">
          <source>If something is wrong with the payment response's data (and there is a recoverable error), this method allows a merchant to request that the user retry the payment. The method takes an object as argument, which is used to signal to the user exactly what is wrong with the payment response so they can try to correct any issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be25b915ad492818ccc0a90ff29e4909bdcbee3" translate="yes" xml:space="preserve">
          <source>If successful, a service worker registration ties the provided script URL to a &lt;em&gt;scope&lt;/em&gt;, which is subsequently used for navigation matching. You can call this method unconditionally from the controlled page. I.e., you don't need to first check whether there's an active registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b40b913e651bc52768b8e11d27ea91344c12177" translate="yes" xml:space="preserve">
          <source>If successful, the service worker is executed in a &lt;a href=&quot;../serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;; this is basically a special kind of worker context, running off the main script execution thread, with no DOM access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9081954b4c110a74945574cdfa52488cc159078" translate="yes" xml:space="preserve">
          <source>If such a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#idl-def-presentationconnection&quot;&gt;&lt;code&gt;PresentationConnection&lt;/code&gt;&lt;/a&gt; exists, let &lt;var&gt;E&lt;/var&gt; be that &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#idl-def-presentationconnection&quot;&gt;&lt;code&gt;PresentationConnection&lt;/code&gt;&lt;/a&gt;, and run the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e045ee12cdba29edc14fdfb41ec85089ea437df5" translate="yes" xml:space="preserve">
          <source>If such a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#idl-def-presentationconnection&quot;&gt;&lt;code&gt;PresentationConnection&lt;/code&gt;&lt;/a&gt; exists, run the following steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5cc2b3dba6329bbde109de70c136061c024392" translate="yes" xml:space="preserve">
          <source>If supplied, &lt;code&gt;count()&lt;/code&gt; outputs the number of times it has been called with that label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266e96376daac2c6e1295fb39d8130f08852f6f2" translate="yes" xml:space="preserve">
          <source>If supplied, &lt;code&gt;countReset()&lt;/code&gt; resets the count for that label to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67deff97c272dd559905ecc53a9a6b1c2e4d3a21" translate="yes" xml:space="preserve">
          <source>If supported, textures can be stored in a compressed format in video memory. This allows for additional detail while limiting the added video memory necessary. Textures are uncompressed on the fly when being accessed by a shader. Note that this advantage doesn't translate to network bandwidth: while the formats are better than uncompressed data, they are in general far worse than standard image formats such as PNG and JPG.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b93ee17acdbc0845f734e081d623635e29ce30" translate="yes" xml:space="preserve">
          <source>If that sounds a little abstract open up the vertex shader and play around with the scale factor and watch how it shrinks vertices more towards the surface. Completely change the w component values for really trippy representations of space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d3af265bcb9d0fc118daea86fec2e567fdcc08" translate="yes" xml:space="preserve">
          <source>If that succeeds, the resulting stream is assigned as the source for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element which is referenced by the variable &lt;code&gt;previewElement&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552646da16e9421915901fe0d602e6a8c2986cf1" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../datatransfer/dropeffect&quot;&gt;&lt;code&gt;dropEffect&lt;/code&gt;&lt;/a&gt; property has the value &lt;code&gt;none&lt;/code&gt; during a &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragend&quot;&gt;dragend&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;, then the drag was cancelled. Otherwise, the effect specifies which operation was performed. The source can use this information after a move operation to remove the dragged item from the old location. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozUserCancelled&quot;&gt;&lt;code&gt;mozUserCancelled&lt;/code&gt;&lt;/a&gt; property will be set to true if the user cancelled the drag (by pressing Escape), and false if the drag was cancelled for other reasons such as an invalid drop target, or if it was successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850f709d69110a028fc27f525e30dd0912e70d18" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../filelist&quot;&gt;&lt;code&gt;FileList&lt;/code&gt;&lt;/a&gt; object passed to &lt;code&gt;handleFiles()&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, we simply set the inner HTML of the block to display &quot;No files selected!&quot;. Otherwise, we start building our file list, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e38e4fe6edbb31e95aca1c7ed3d70a2c18db85" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../idledeadline&quot;&gt;&lt;code&gt;IdleDeadline&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;didtimeout&quot;&gt;&lt;code&gt;didTimeout&lt;/code&gt;&lt;/a&gt; property is true, this method returns zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbcb836f3eed0a7056887092176acf49e0abfdf9" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;code&gt;addressLine&lt;/code&gt; property was determined to be valid, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2af40f5ae124449fe954dd48d2226f2d44386e" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;code&gt;country&lt;/code&gt; property was determined to be valid, this property is not included in the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147001a0dd626060b5ebef5188516293700b62b1" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../vrdisplay&quot;&gt;&lt;code&gt;VRDisplay&lt;/code&gt;&lt;/a&gt; is already presenting when &lt;code&gt;requestPresent()&lt;/code&gt; is called, the &lt;code&gt;VRDisplay&lt;/code&gt; will update the &lt;code&gt;VRLayer&lt;/code&gt; array being presented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3806601b4e059fb4c4ca55753bcdc1ee0676736" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;attributes&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; permission is &lt;code&gt;true&lt;/code&gt; but no &lt;code&gt;attributeFilter&lt;/code&gt; is included in the options object, all attributes' values are watched for changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb275930f1061739bc18098b953c6f9451d6f87" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent&lt;/a&gt; is configured not to allow automatic or script-initiated playback of media, calling &lt;code&gt;play()&lt;/code&gt; will cause the returned promise to be immediately rejected with a &lt;code&gt;&quot;NotAllowedError&quot;&lt;/code&gt;. Web sites should be prepared to handle this situation. For example, a site should not present a user interface that assumes playback has begun automatically, but should instead update their UI based on whether the returned promise is resolved or rejected. See the &lt;a href=&quot;#Example&quot;&gt;example&lt;/a&gt; below for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd594667e78a6fa64cff5b8bb1c94bc6daf6d29a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay&quot;&gt;&lt;code&gt;VRDevice&lt;/code&gt;&lt;/a&gt; is presenting, this method returns an array of the &lt;a href=&quot;../vrlayerinit&quot;&gt;&lt;code&gt;VRLayerInit&lt;/code&gt;&lt;/a&gt; objects currently being presented (this will currently be one, as &lt;a href=&quot;../vrdisplaycapabilities/maxlayers&quot;&gt;&lt;code&gt;VRDisplayCapabilities.maxLayers&lt;/code&gt;&lt;/a&gt; is currently always 1). If the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay&quot;&gt;&lt;code&gt;VRDevice&lt;/code&gt;&lt;/a&gt; is not presenting, this method returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35afa1749068f2dd5a35f2a3b7200a410102be2a" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-presentation-connection-state&quot;&gt;presentation connection state&lt;/a&gt; of &lt;var&gt;S&lt;/var&gt; is &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dom-presentationconnectionstate-connecting&quot;&gt;&lt;code&gt;connecting&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dom-presentationconnectionstate-connected&quot;&gt;&lt;code&gt;connected&lt;/code&gt;&lt;/a&gt;, then abort all remaining steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937ed090721e2ea0391316f94d0dd9b47e9984b4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;signalingstate&quot;&gt;&lt;code&gt;signalingState&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;&quot;closed&quot;&lt;/code&gt;, an &lt;code&gt;InvalidStateError&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc90ccbada8465faad295c30739efd78a07f2c7c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;signalingstate&quot;&gt;&lt;code&gt;signalingState&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;&quot;closed&quot;&lt;/code&gt;, an &lt;code&gt;InvalidStateError&lt;/code&gt; is raised. If the &lt;a href=&quot;signalingstate&quot;&gt;&lt;code&gt;signalingState&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;&quot;stable&quot;&lt;/code&gt;, the event &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; is sent on the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154467d5185149ce6030b4c343b1a8951daa09bc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; event has a non-&lt;code&gt;null&lt;/code&gt;&lt;code&gt;candidate&lt;/code&gt; property, we create a new &lt;a href=&quot;../rtcicecandidate&quot;&gt;&lt;code&gt;RTCIceCandidate&lt;/code&gt;&lt;/a&gt; object from the &lt;code&gt;event.candidate&lt;/code&gt; string and &quot;transmit&quot; it to the receiver by calling &lt;code&gt;receiverPC.addIceCandidate()&lt;/code&gt;, providing the new &lt;code&gt;RTCIceCandidate&lt;/code&gt; as its input. If &lt;code&gt;addIceCandidate()&lt;/code&gt; fails, the &lt;code&gt;catch()&lt;/code&gt; clause outputs the error to our log box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bb3fd68aa97085da7c77670b122abad7d92577" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/icecandidate&quot;&gt;icecandidate&lt;/a&gt;&lt;/code&gt; event has a non-&lt;code&gt;null&lt;/code&gt;&lt;code&gt;candidate&lt;/code&gt; property, we create a new &lt;a href=&quot;../rtcicecandidate&quot;&gt;&lt;code&gt;RTCIceCandidate&lt;/code&gt;&lt;/a&gt; object from the &lt;code&gt;event.candidate&lt;/code&gt; string and deliver it to the caller by passing that into &lt;code&gt;callerPC.addIceCandidate()&lt;/code&gt;. If &lt;code&gt;addIceCandidate()&lt;/code&gt; fails, the &lt;code&gt;catch()&lt;/code&gt; clause outputs the error to our log box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61907a2193549e017737a0bc858aab7b262312fe" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchmove&quot;&gt;touchmove&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchend&quot;&gt;touchend&lt;/a&gt;&lt;/code&gt; event is canceled during an interaction, no mouse or click events will be fired, and the resulting sequence of events would just be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da49398878425a1e4181d8a76c02744b7e35a5a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;KeyboardEvent&lt;/code&gt; represents the press of a dead key, the key value must be &quot;&lt;code&gt;Dead&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f4df284e122bd46a3fc059bf8c646d816769ed" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;MediaStreamTrack&lt;/code&gt; represents the video input from a camera, disabling the track by setting &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; also updates device activity indicators to show that the camera is not currently recording or streaming. For example, the green &quot;in use&quot; light next to the camera in iMac and MacBook computers turns off while the track is muted in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f5858ccbbf61914693339db15ad5e6587f7312" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RTCIceServer&lt;/code&gt; is a TURN server, then this is the username to use during the authentication process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa781dbb3aca3f09c671c730da73e5a0bd07502" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RTCIceServer&lt;/code&gt; represents a TURN server, this attribute specifies what kind of &lt;code&gt;credential&lt;/code&gt; is to be used when connecting. This must be one of the values defined by the &lt;code&gt;RTCIceCredentialType&lt;/code&gt; enum. The default is &lt;code&gt;&quot;password&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3416e8b9a2b178ec7ab156212f5e6c38aa09fe" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;async&lt;/code&gt; attribute is absent but the &lt;code&gt;defer&lt;/code&gt; attribute is present, then the script is executed when &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded&quot;&gt;the page has finished parsing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e06d2690f2ff1420955636e525ef334bd1352a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;async&lt;/code&gt; attribute is present, then the script will be executed asynchronously as soon as it downloads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cb74258537346ac8f16a0e8125693397340709" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;buffer&lt;/code&gt; property is set to the value &lt;code&gt;null&lt;/code&gt;, the node generates a single channel containing silence (that is, every sample is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfa90ac41a3a175221eb921021a385e77d0e95d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;child&lt;/code&gt; doesn't exist on the DOM of the page, the method throws the following exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ede2751aec83cb11a0e817b77622903e4103696" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;child&lt;/code&gt; was in fact a child of &lt;code&gt;element&lt;/code&gt; and so existing on the DOM, but was removed the method throws the following exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e531e72a34cc8bff16b010c034f954b0db3cc7f8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;contextType&lt;/code&gt; doesn't match a possible drawing context, &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c4917312544c76ca5c39bc9f9df2d97441b930" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;dependentLocality&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7f7685bba3422c84509946e21a88cd450e99f7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;document.write()&lt;/code&gt; call is embedded within an inlined HTML &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, then it will not call &lt;code&gt;document.open()&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bd8299c8d3d71b7260c66277a5b70b78dfc195" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;endContainer&lt;/code&gt; is a &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; of type &lt;a href=&quot;../text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../comment&quot;&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../cdatasection&quot;&gt;&lt;code&gt;CDATASection&lt;/code&gt;&lt;/a&gt;, then the offset is the number of characters from the start of the &lt;code&gt;endContainer&lt;/code&gt; to the boundary point of the &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;. For other &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; types, the &lt;code&gt;endOffset&lt;/code&gt; is the number of child nodes between the start of the &lt;code&gt;endContainer&lt;/code&gt; and the boundary point of the &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;. This property is read-only. To change the &lt;code&gt;endOffset&lt;/code&gt; of a &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;, use one of the &lt;a href=&quot;setend&quot;&gt;&lt;code&gt;Range.setEnd&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f734f0ef40676a1d239fdcb2a0ced2a420782cb4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;endNode&lt;/code&gt; is a &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;Text&lt;/code&gt;, &lt;code&gt;Comment&lt;/code&gt;, or &lt;code&gt;CDATASection&lt;/code&gt;, then &lt;code&gt;endOffset&lt;/code&gt; is the number of characters from the start of &lt;code&gt;endNode&lt;/code&gt;. For other &lt;code&gt;Node&lt;/code&gt; types, &lt;code&gt;endOffset&lt;/code&gt; is the number of child nodes between the start of the &lt;code&gt;endNode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99796ccd1921a170e78e16ad12fe763f3cf03e66" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gp&lt;/code&gt; variable has a &lt;code&gt;Gamepad&lt;/code&gt; object inside it and it can return position values (&lt;code&gt;gpPose.hasPosition&lt;/code&gt;), indicating a 6DoF controller, we modify the cube position using position and orientation values. If only the former is true, indicating a 3DoF controller, we modify the cube position using the orientation values only. If there is no gamepad connected, we don't modify the cube position at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ff240d2335b9f6b06fde4c774aefb08dd98d84" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;id&lt;/code&gt; value is not the empty string, it must be unique in a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612f9d2bfece4c6ecaca7f76a3d38f4661ce8100" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;name&lt;/code&gt; given to this method already exists in the &lt;a href=&quot;../performancetiming&quot;&gt;&lt;code&gt;PerformanceTiming&lt;/code&gt;&lt;/a&gt; interface, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1474ab86baac3e51954b73a343158a03f3f8347a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;name&lt;/code&gt; parameter is not valid. A valid name is any string including the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d55fde6d71468dc4793b7632ff099a349fefe44" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;onupgradeneeded&lt;/code&gt; event exits successfully, the &lt;code&gt;onsuccess&lt;/code&gt; handler of the open database request will then be triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ddedf502327359b06114a37bb187b33abe9659" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;organization&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d8248f778961c2c069d5ca7381782fd60f9bc4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;phone&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b00406b5ca625324a0c3f8db1abeaa0036e2914" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;playing&lt;/code&gt; variable indicates we're already playing the oscillators, we change the &lt;code&gt;playButton&lt;/code&gt;'s content to be the Unicode character &quot;right-pointing triangle&quot; (▶️) and call &lt;code&gt;stopOscillators()&lt;/code&gt; to shut down the oscillators. See &lt;a href=&quot;#Stopping_the_oscillators&quot;&gt;Stopping the oscillators&lt;/a&gt; below for that code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4678c1c298a943f6f4182a8b4327a1c925d47ab4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;postalCode&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98356b360d46075dafec025bd26f9aeb9d911252" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;recipient&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ccdba3d0edea256f566bff38489f7bdef95934" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;region&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f21e66609609257a05fc4cfc0f857c778cbcfba" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;regionCode&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdcda45eb8bee31b3a8b7cc5dc6395720bb5e45d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;sampleRate&lt;/code&gt; property is not included in the options, or the options are not specified when creating the audio context, the new context's output device's preferred sample rate is used by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a626db748018ba8ca4fa451beb2883b26d873c38" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;sortingCode&lt;/code&gt; value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dfc88e251bb17b6eefff65ccd790d111409c29" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;startContainer&lt;/code&gt; is a &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; of type &lt;a href=&quot;../text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../comment&quot;&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../cdatasection&quot;&gt;&lt;code&gt;CDATASection&lt;/code&gt;&lt;/a&gt;, then the offset is the number of characters from the start of the &lt;code&gt;startContainer&lt;/code&gt; to the boundary point of the &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;. For other &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; types, the &lt;code&gt;startOffset&lt;/code&gt; is the number of child nodes between the start of the &lt;code&gt;startContainer&lt;/code&gt; and the boundary point of the &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b737755b5d29d380cf499e73e1ea4a82c9bd3c4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;startNode&lt;/code&gt; is a &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;Text&lt;/code&gt;, &lt;code&gt;Comment&lt;/code&gt;, or &lt;code&gt;CDATASection&lt;/code&gt;, then &lt;code&gt;startOffset&lt;/code&gt; is the number of characters from the start of &lt;code&gt;startNode&lt;/code&gt;. For other &lt;code&gt;Node&lt;/code&gt; types, &lt;code&gt;startOffset&lt;/code&gt; is the number of child nodes between the start of the &lt;code&gt;startNode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c200527f7b69ccd69fadaa893be84683753494" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;strWindowFeatures&lt;/code&gt; parameter is used and if no position features are defined, then the left and top coordinates of the new window dimension will be 22 pixels from where the most recently rendered window was. An offset is universally implemented by browser manufacturers (it is 29 pixels in IE6 SP2 with the default theme) and its purpose is to help users to notice new windows opening. If the most recently used window was maximized, then there is no offset: the new window will be maximized as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b04c1e3237593f02813827889a19f08e9be20ea" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;strWindowFeatures&lt;/code&gt; parameter is used and no size features are defined, then the new window dimensions will be the same as the dimensions of the most recently rendered window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11922ccf3d56f6dc8b1dcc46f4fd38e5ef1b723e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;strWindowName&lt;/code&gt; parameter is omitted, a new window or tab is opened. If a window with the same name already exists, the existing window is refreshed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7d297a0426f31e01c4a5a2ee4d6d717fde579c" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;contextType&lt;/em&gt; doesn't match a possible drawing context, &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e63b0d4896c41e3c2830742679de562845a345" translate="yes" xml:space="preserve">
          <source>If the &lt;em&gt;reference node&lt;/em&gt; is a &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; of type &lt;a href=&quot;../text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../comment&quot;&gt;&lt;code&gt;Comment&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../cdatasection&quot;&gt;&lt;code&gt;CDATASection&lt;/code&gt;&lt;/a&gt;, then offset is the number of characters from the start of &lt;em&gt;reference node&lt;/em&gt;. For other &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; types, offset is the number of child nodes between the start of the &lt;em&gt;reference node&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8caedf5d5871cf4f4afbeb74025f947953855e3" translate="yes" xml:space="preserve">
          <source>If the API isn't implemented in the browser, you can use other signals to detect if you are offline including using service workers and &lt;a href=&quot;http://www.html5rocks.com/en/mobile/workingoffthegrid.html#toc-xml-http-request&quot;&gt;responses from XMLHttpRequest&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552b0a8793b13ad735b41db4deac0b2a8b847770" translate="yes" xml:space="preserve">
          <source>If the MASK bit was set (and it should be, for client-to-server messages), read the next 4 octets (32 bits); this is the masking key. Once the payload length and masking key is decoded, you can go ahead and read that number of bytes from the socket. Let's call the data &lt;strong&gt;ENCODED&lt;/strong&gt;, and the key &lt;strong&gt;MASK&lt;/strong&gt;. To get &lt;strong&gt;DECODED&lt;/strong&gt;, loop through the octets (bytes a.k.a. characters for text data) of &lt;strong&gt;ENCODED&lt;/strong&gt; and XOR the octet with the (i modulo 4)th octet of MASK. In pseudo-code (that happens to be valid JavaScript):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482b2ebc47e42d28a7c48524e8f5e17b70e7d786" translate="yes" xml:space="preserve">
          <source>If the URL has an invalid syntax or if the same-origin policy is violated a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;SECURITY_ERR&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ff4e59534a6bb3f075b5729d1ec63cd3b1f877a" translate="yes" xml:space="preserve">
          <source>If the URL has an invalid syntax or if the same-origin policy is violated, a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;SECURITY_ERR&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f7e25b8818be35a85a2c19f7d791c3868e380f" translate="yes" xml:space="preserve">
          <source>If the URL of your page is &lt;code&gt;https://example.com/?name=Jonathan&amp;amp;age=18&lt;/code&gt; you could parse out the 'name' and 'age' parameters using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07a36af48c5ef7edc30ec764c289aa91ceea849" translate="yes" xml:space="preserve">
          <source>If the WebGL context is lost, this error is returned on the first call to &lt;code&gt;getError&lt;/code&gt;. Afterwards and until the context has been restored, it returns &lt;code&gt;gl.NO_ERROR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5ce9b5b5a89f2e322e6f1e769e84967539a9f5" translate="yes" xml:space="preserve">
          <source>If the WebVTT file is being used for chapters (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track&quot;&gt;&lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-kind&quot;&gt;kind&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;chapters&lt;/code&gt;) then the file cannot have overlapping timings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152df01d5c4fa4f138c736a94f238ec447adf5ad" translate="yes" xml:space="preserve">
          <source>If the ad has transitioned to the not-intersecting state, we remove the ad from the set of visible ads. Then we have one special behavior: we look to see if &lt;a href=&quot;../intersectionobserverentry/intersectionratio&quot;&gt;&lt;code&gt;entry.ratio&lt;/code&gt;&lt;/a&gt; is 0.0; if it is, that means the element has become totally obscured. If that's the case, and the ad has been visible for at least a minute total, we call a function we'll create called &lt;code&gt;replaceAd()&lt;/code&gt; to replace the existing ad with a new one. This way, the user sees a variety of ads over time, but the ads are only replaced while they can't be seen, resulting in a smooth experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a3ab7fad98a3343a3d7facbbba109bc2164e18" translate="yes" xml:space="preserve">
          <source>If the animation effect the fill mode is being applied to is a keyframe effect (&lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../keyframeeffect&quot;&gt;&lt;code&gt;KeyframeEffectReadOnly&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;&quot;auto&quot;&lt;/code&gt; is equivalent to &lt;code&gt;&quot;none&quot;&lt;/code&gt;. Otherwise, the result is &lt;code&gt;&quot;both&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9c8dc5ef9cfd6f343fad0344d4fb6b6e1d5da0" translate="yes" xml:space="preserve">
          <source>If the animation lacks a &lt;a href=&quot;../animationtimeline&quot;&gt;&lt;code&gt;timeline&lt;/code&gt;&lt;/a&gt;, is inactive, or hasn't been played yet, &lt;code&gt;currentTime&lt;/code&gt;'s return value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d7c44f734a5f453c946fbda93ef1a681b4903d" translate="yes" xml:space="preserve">
          <source>If the area of the target's bounds rectangle is zero, the returned value is 1 if &lt;a href=&quot;isintersecting&quot;&gt;&lt;code&gt;isIntersecting&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt; or 0 if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c13d1b512614002f52e5a605fd5d1b354eb4de1" translate="yes" xml:space="preserve">
          <source>If the argument referenced an existing node on the DOM tree, the node will be detached from its current position and attached at the new position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ef74beb0a39f7ac73db0a91cc9552e28ba36d4" translate="yes" xml:space="preserve">
          <source>If the array has fewer elements than the &lt;a href=&quot;fftsize&quot;&gt;&lt;code&gt;AnalyserNode.fftSize&lt;/code&gt;&lt;/a&gt;, excess elements are dropped. If it has more elements than needed, excess elements are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ce299ecfa0e73c325ea6f58a82857f025cd881" translate="yes" xml:space="preserve">
          <source>If the array has fewer elements than the &lt;a href=&quot;frequencybincount&quot;&gt;&lt;code&gt;AnalyserNode.frequencyBinCount&lt;/code&gt;&lt;/a&gt;, excess elements are dropped. If it has more elements than needed, excess elements are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca057b425a4e46e8d53c7dcc26446c7f7f9b59bd" translate="yes" xml:space="preserve">
          <source>If the array's length is zero, meaning there are no tracks left in the stream, we end the call by calling &lt;code&gt;closeVideoCall()&lt;/code&gt;. This cleanly restores our app to a state in which it's ready to start or receive another call. See &lt;a href=&quot;#Ending_the_call&quot;&gt;Ending the call&lt;/a&gt; to learn how &lt;code&gt;closeVideoCall()&lt;/code&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4627a6f4182d7b38e87c63b046b707d1c1e0d475" translate="yes" xml:space="preserve">
          <source>If the assignment can't happen because of a security violation, a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; of the &lt;code&gt;SECURITY_ERROR&lt;/code&gt; type is thrown. This happens if the origin of the script calling the method is different from the origin of the page originally described by the &lt;a href=&quot;../location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; object, mostly when the script is hosted on a different domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc25010fe5f7ee170af69236aa6cc4f52fc31d46" translate="yes" xml:space="preserve">
          <source>If the associated stream is errored when the lock is released, the reader will appear errored in that same way subsequently; otherwise, the reader will appear closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa51c34318d419535bdbb47de3da051b4b18cd8b" translate="yes" xml:space="preserve">
          <source>If the attribute named already exists on the element, that attribute is replaced with the new one and the replaced one is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359e7b9700e1defcab34a8b0efe3280a9c26a158" translate="yes" xml:space="preserve">
          <source>If the browser can't determine the region code, or the country doesn't use regions for postal addresses, it returns an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62a4c97f48c7619624519a944138b94c4bb0135" translate="yes" xml:space="preserve">
          <source>If the browser doesn't support &lt;code&gt;navigator.onLine&lt;/code&gt; the above example will always come out as &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81352ea51b05fbfd866655a6bef919be07894c26" translate="yes" xml:space="preserve">
          <source>If the browser fires both touch and mouse events because of a single user input, the browser &lt;em&gt;must &lt;/em&gt; fire a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; before any mouse events. Consequently, if an application does not want mouse events fired on a specific touch &lt;a href=&quot;../touch/target&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; element, the element's touch event handlers should call &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; and no additional mouse events will be dispatched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484e00f2cba1d453836310121e8d9053678d4b47" translate="yes" xml:space="preserve">
          <source>If the browser is not processing a user gesture, reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23126cfde0cf0f39eef6837b664f8ed878e5010" translate="yes" xml:space="preserve">
          <source>If the buffer size is not defined, which is recommended, the browser will pick one that its heuristic deems appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f70ad3d833233ebc5a5ff55a95ed867421914c" translate="yes" xml:space="preserve">
          <source>If the button is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the &lt;code&gt;null&lt;/code&gt; value if none matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3652bd8312c8c05387ca717f9d0229fa97662793" translate="yes" xml:space="preserve">
          <source>If the candidate is derived from another candidate, &lt;code&gt;relatedAddress&lt;/code&gt; is a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing that host candidate's IP address. For host candidates, this value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c0a06425572cf3cc5570d2317923d99ce9f25c" translate="yes" xml:space="preserve">
          <source>If the canvas or source rectangle width or height is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99d827b5ca95fa7f1c497bb95d77fd66e143a29" translate="yes" xml:space="preserve">
          <source>If the channel's state has changed to &quot;open&quot;, that indicates that we have finished establishing the link between the two peers. The user interface is updated correspondingly by enabling the text input box for the message to send, focusing the input box so that the user can immediately begin to type, enabling the &quot;Send&quot; and &quot;Disconnect&quot; buttons, now that they're usable, and disabling the &quot;Connect&quot; button, since it is not needed when the conneciton is open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4aeb7e87b1d811cc155d66e1f2d656171a465d" translate="yes" xml:space="preserve">
          <source>If the character encoding is declared in the HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&quot;&gt;&lt;code&gt;Content-Type&lt;/code&gt;&lt;/a&gt; header, that character encoding is used. Failing that, if there is a byte order mark, the encoding indicated by the byte order mark is used. Failing that, if there is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta&quot;&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;&lt;/a&gt; element that declares the encoding within the first 1024 bytes of the file, that encoding is used. Otherwise, the file is decoded as UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a829a9ccd2e7cbfd9e0a39766198ae8212c85d" translate="yes" xml:space="preserve">
          <source>If the checkout flow needs to know whether &lt;a href=&quot;../paymentrequest/canmakepayment&quot;&gt;&lt;code&gt;PaymentRequest.canMakePayment()&lt;/code&gt;&lt;/a&gt; will return &lt;code&gt;true&lt;/code&gt; even before all line items and their prices are known, you can instantiate &lt;code&gt;PaymentRequest&lt;/code&gt; with dummy data and pre-query &lt;code&gt;.canMakePayment()&lt;/code&gt;. If you call &lt;code&gt;.canMakePayment()&lt;/code&gt; multiple times, keep in mind that the first parameter to the &lt;code&gt;PaymentRequest&lt;/code&gt; constructor should contain the same method names and data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6551f5952a0f5a0e7912eb0c18c67e4f93b17a" translate="yes" xml:space="preserve">
          <source>If the city value was validated successfully, this property is not included in the &lt;code&gt;AddressErrors&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86063f0e1608a0c1ba7ad6db877cf137c5e7c2fd" translate="yes" xml:space="preserve">
          <source>If the clipboard is empty or doesn't contain text, the &lt;code&gt;&quot;cliptext&quot;&lt;/code&gt; element's contents are cleared. This happens because &lt;a href=&quot;../clipboard/readtext&quot;&gt;&lt;code&gt;readText()&lt;/code&gt;&lt;/a&gt; returns an empty string if the clipboard is empty or doesn't contain text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c294da18f8dc3701bc9bd9a8175d651ae846fe" translate="yes" xml:space="preserve">
          <source>If the code is running in a context which is receiving a presentation, the returned value is a &lt;a href=&quot;../presentationreceiver&quot;&gt;&lt;code&gt;PresentationReceiver&lt;/code&gt;&lt;/a&gt; which can then be used to communicate with the context which is the source of the presentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442b7e99f582081d33d8c786585eec1c027eba44" translate="yes" xml:space="preserve">
          <source>If the connection has already been negotiated (&lt;a href=&quot;signalingstate&quot;&gt;&lt;code&gt;signalingState&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;&quot;stable&quot;&lt;/code&gt;), it is marked as needing to be negotiated again; the remote peer won't experience the change until this negotiation occurs. A &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event is sent to the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; to let the local end know this negotiation must occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d1c04666f0561c37db74a403bd5c3e5fde32a6" translate="yes" xml:space="preserve">
          <source>If the context is successfully initialized, the variable &lt;code&gt;gl&lt;/code&gt; is our reference to it. In this case, we set the clear color to black, and clear the context to that color (redrawing the canvas with the background color).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe88502393416ea9707f74f16662ac5eed07ddd" translate="yes" xml:space="preserve">
          <source>If the current &lt;a href=&quot;document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; is the first one loaded in the &lt;code&gt;Window&lt;/code&gt;, the time origin is the time at which the browser context was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2f89c7351b507bc1079c9509d8e33f67a6fec4" translate="yes" xml:space="preserve">
          <source>If the current context is a &lt;a href=&quot;worker&quot;&gt;&lt;code&gt;worker&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;performanceresourcetiming/workerstart&quot;&gt;&lt;code&gt;workerStart&lt;/code&gt;&lt;/a&gt; property can be used to obtain a &lt;a href=&quot;domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; when the worker was started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cab1529b79786e6b64e0452fabcd57b27d9ad0" translate="yes" xml:space="preserve">
          <source>If the current context is not receiving a presentation, &lt;code&gt;receiver&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6fc989d3c13a0e08d0a8abb319e4c2752e5bca" translate="yes" xml:space="preserve">
          <source>If the current document is not in a browsing context, the returned value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f471623934614be61e0084cfb07bb480d4a36bd" translate="yes" xml:space="preserve">
          <source>If the current maximum value of the progress bar is different from the current total number of enqueued tasks (&lt;code&gt;totalTaskCount&lt;/code&gt;), then we update the contents of the displayed total number of tasks (&lt;code&gt;totalTaskCountElem&lt;/code&gt;) and the maximum value of the progress bar, so that it scales properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b573b138c312bfb71c4676c4429dd8b92d83d051" translate="yes" xml:space="preserve">
          <source>If the data being stored could not be deserialized by the internal structured cloning algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3284f6956e080f7c12920878cb64c7e656352581" translate="yes" xml:space="preserve">
          <source>If the data being stored could not be serialized by the internal structured cloning algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dceccc0a8c9416e8140f5c189d346516a88311d" translate="yes" xml:space="preserve">
          <source>If the database is successfully deleted, then a &lt;code&gt;success&lt;/code&gt; event is fired on the request object returned from this method, with its &lt;code&gt;result&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt;. If an error occurs while the database is being deleted, then an &lt;code&gt;error&lt;/code&gt; event is fired on the request object that is returned from this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed030c1685430c9805bfc5c79061adcf66226bf8" translate="yes" xml:space="preserve">
          <source>If the default values of the properties are acceptable, you can optionally use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createOscillator&quot;&gt;&lt;code&gt;AudioContext.createOscillator()&lt;/code&gt;&lt;/a&gt; factory method instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8d806904159a10d0d9f35cc207119f1dc0c64b" translate="yes" xml:space="preserve">
          <source>If the destination is a node, &lt;code&gt;connect()&lt;/code&gt; returns a reference to the destination &lt;a href=&quot;../audionode&quot;&gt;&lt;code&gt;AudioNode&lt;/code&gt;&lt;/a&gt; object, allowing you to chain multiple &lt;code&gt;connect()&lt;/code&gt; calls. In some browsers, older implementations of this interface return &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined&quot;&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2078a485ce4450b4ba91c455cc52a5971f74a576" translate="yes" xml:space="preserve">
          <source>If the destination is an &lt;code&gt;AudioParam&lt;/code&gt;, &lt;code&gt;connect()&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a681242eefde57cd0b9efa4211ff24eb1624b486" translate="yes" xml:space="preserve">
          <source>If the device type cannot be detected by the browser, the value can be an empty string (&quot;&quot;). If the browser supports pointer device types other than those listed above, the value should be &lt;em&gt;vendor prefixed&lt;/em&gt; to avoid conflicting names for different types of devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2694d6e07b4a11ae0daee67d589f3f2aff2fc15" translate="yes" xml:space="preserve">
          <source>If the dialog is already open (i.e. if the &lt;code&gt;open&lt;/code&gt; attribute is already set on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog&quot;&gt;&lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt;&lt;/a&gt; element), an &lt;code&gt;InvalidStateError&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0802c2f531dd572220c1586f956d196c1cd3f9" translate="yes" xml:space="preserve">
          <source>If the display is not already presenting, we use the &lt;a href=&quot;../vrdisplay/requestpresent&quot;&gt;&lt;code&gt;VRDisplay.requestPresent()&lt;/code&gt;&lt;/a&gt; method to request that the browser start presenting content to the display. This takes as a parameter an array of the &lt;a href=&quot;../vrlayerinit&quot;&gt;&lt;code&gt;VRLayerInit&lt;/code&gt;&lt;/a&gt; objects representing the layers you want to present in the display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8248f941fb19868b947ed305eede768e975177" translate="yes" xml:space="preserve">
          <source>If the document already has been granted access, resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d92ab2ffb73b2719f093be8bf506d045f1a857" translate="yes" xml:space="preserve">
          <source>If the document contains &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XML/xml:base&quot;&gt;xml:base&lt;/a&gt;&lt;/code&gt; attributes (which you shouldn't do in HTML documents), the &lt;code&gt;&lt;em&gt;element&lt;/em&gt;.baseURI&lt;/code&gt; takes the &lt;code&gt;xml:base&lt;/code&gt; attributes of element's parents into account when computing the base URL. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XML/xml:base&quot;&gt;xml:base&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774b4edcc9665405008ed71d447c9c0115fd51ae" translate="yes" xml:space="preserve">
          <source>If the document has a null origin, reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71677b8e55b892dc8ca7fb7741dcb9088be61a4e" translate="yes" xml:space="preserve">
          <source>If the document has just become visible, we reverse this process: first we go through &lt;code&gt;previouslyVisibleAds&lt;/code&gt; and set each one's &lt;code&gt;dataset.lastViewStarted&lt;/code&gt; to the current document's time (in milliseconds since the document was created) using the &lt;a href=&quot;../performance/now&quot;&gt;&lt;code&gt;performance.now()&lt;/code&gt;&lt;/a&gt; method. Then we set &lt;code&gt;visibleAds&lt;/code&gt; back to &lt;code&gt;previouslyVisibleAds&lt;/code&gt; and set the latter to &lt;code&gt;null&lt;/code&gt;. Now the ads are all restarted, and configured to know that they became visible at the current time, so that they will not add up the duration of time the page was tabbed away the next time they're updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6ae13fe44eab60c6bc9aa8f3992c39aa10f23a" translate="yes" xml:space="preserve">
          <source>If the document has no forms, the returned collection is empty, with a length of zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5024b0850c90c5227f4dad5da48ac5a71c542f5" translate="yes" xml:space="preserve">
          <source>If the document isn't already in full-screen mode&amp;mdash;detected by looking to see if &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/fullscreenElement&quot;&gt;&lt;code&gt;document.fullscreenElement&lt;/code&gt;&lt;/a&gt; has a value&amp;mdash;we call the video's &lt;code&gt;requestFullscreen()&lt;/code&gt; method. We don't need to do anything special if successful, but if the request fails, our promise's &lt;code&gt;catch()&lt;/code&gt; handler presents an alert with an appropriate error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53dc535b27a14210405f61eb3e29719b7aa8cd6" translate="yes" xml:space="preserve">
          <source>If the document object's &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-active-sandboxing-flag-set&quot;&gt;active sandboxing flag set&lt;/a&gt; has the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#sandboxed-presentation-browsing-context-flag&quot;&gt;sandboxed presentation browsing context flag&lt;/a&gt; set, then return a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-promise&quot;&gt;Promise&lt;/a&gt; rejected with a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-securityerror&quot;&gt;&lt;code&gt;SecurityError&lt;/code&gt;&lt;/a&gt; and abort these steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e254923b358c091b810b376ffab0e1a255d8743" translate="yes" xml:space="preserve">
          <source>If the document's frame is the main frame, resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfed3ee5e1130dd2d1a79383dc3d28fae520ff96" translate="yes" xml:space="preserve">
          <source>If the drag data item is a file, a &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object is returned; otherwise &lt;code&gt;null&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4d043f7f2a5eb85686949b69c274be996ab1ed" translate="yes" xml:space="preserve">
          <source>If the drag data item is a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920098d2db447efc82a006061103c436df372c7d" translate="yes" xml:space="preserve">
          <source>If the element at the specified point belongs to another document (for example, the document of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;), that document's parent element is returned (the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; itself). If the element at the given point is anonymous or XBL generated content, such as a textbox's scroll bars, then the first non-anonymous ancestor element (for example, the textbox) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3a6878c6317c033a2643ea60eefaa914664422" translate="yes" xml:space="preserve">
          <source>If the element being observed is removed from the DOM and then subsequently released by the browser's garbage collection mechanism, the &lt;code&gt;MutationObserver&lt;/code&gt; is likewise deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8080ce97d3c162414e0234cfaeac7ac3820b9535" translate="yes" xml:space="preserve">
          <source>If the element can't be scrolled (e.g. it has no overflow or if the element has a property of &quot;&lt;strong&gt;non-scrollable&quot;&lt;/strong&gt;), &lt;code&gt;scrollTop&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5a18b17e331dcc36dcc4852c51297132b9f609" translate="yes" xml:space="preserve">
          <source>If the element can't be scrolled (e.g. it has no overflow), &lt;code&gt;scrollLeft&lt;/code&gt; is set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590fcbd8250c6d0a953f2748beda684fa985faed" translate="yes" xml:space="preserve">
          <source>If the element has already been initialized with media, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/emptied&quot;&gt;emptied&lt;/a&gt;&lt;/code&gt; event is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8305a717df89769ad215c455beb7697f22ca5cc0" translate="yes" xml:space="preserve">
          <source>If the element has no parent element, setting its &lt;code&gt;outerHTML&lt;/code&gt; property will not change it or its descendants. Many browsers will also throw an exception. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644bf1ca310a4ad622e5ac146411d4de479e7f18" translate="yes" xml:space="preserve">
          <source>If the element is already in the process of loading media, that load process is aborted and the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/abort&quot;&gt;abort&lt;/a&gt;&lt;/code&gt; event is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bf64afaaefa24ed055bff1ca25537ffbc10051" translate="yes" xml:space="preserve">
          <source>If the element is hidden (for example, by setting &lt;code&gt;style.display&lt;/code&gt; on the element or one of its ancestors to &lt;code&gt;&quot;none&quot;&lt;/code&gt;), then &lt;code&gt;0&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f592507dfe087637473cd93366686fc2c1b3df" translate="yes" xml:space="preserve">
          <source>If the element is in default mode when the descendants of the element are changed in any way, the &lt;code&gt;defaultValue&lt;/code&gt; property is set to the value of the &lt;a href=&quot;node/textcontent&quot;&gt;&lt;code&gt;textContent&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7551d7938d802a5cfdd6cf1e7b97629948b9497" translate="yes" xml:space="preserve">
          <source>If the element whose contents are being replaced is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template&quot;&gt;&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;&lt;/a&gt; element, then the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element's &lt;a href=&quot;../htmltemplateelement/content&quot;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; attribute is replaced with the new &lt;code&gt;DocumentFragment&lt;/code&gt; created in step 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a44ba2a6822678e2a13542384ad24e9b985c0d7" translate="yes" xml:space="preserve">
          <source>If the elements in the array, or properties in the object, are themselves arrays or objects, then their elements or properties are enumerated in the row, one per column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece0f8bed319f490c33d49190567c1a008d28f50" translate="yes" xml:space="preserve">
          <source>If the embedded origin &lt;code&gt;tracker.example&lt;/code&gt; has already obtained first-party storage access on the top-level origin &lt;code&gt;foo.example&lt;/code&gt;, and the user visits a page from &lt;code&gt;foo.example&lt;/code&gt; embedding a page from &lt;code&gt;tracker.example&lt;/code&gt; again in less than 30 days, the embedded origin will have storage access immediately when loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4138345301a79b99ab47d7ab08512478dfeeec" translate="yes" xml:space="preserve">
          <source>If the encoding type label argument is invalid, then a &lt;code&gt;RangeError&lt;/code&gt; exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86389fc5f4e50196c07da8cf7843eedbbae1c375" translate="yes" xml:space="preserve">
          <source>If the encoding type label argument is invalid, then a &lt;code&gt;TypeError&lt;/code&gt; exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5ceb5b4dc34ab8a6ecdde75c314d7ca3c1a968" translate="yes" xml:space="preserve">
          <source>If the event generator script is hosted on a different domain, a new &lt;code&gt;EventSource&lt;/code&gt; object should be created that specifies both the URI and options dictionary. For example, assuming the client script is on example.com:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e23333ed89480767e6c6382f8ebd8944fcd3090" translate="yes" xml:space="preserve">
          <source>If the event's candidate property is &lt;code&gt;null&lt;/code&gt;, ICE gathering has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fdcae6f8453282ba30ceec9b5dc9b23abf3ba3" translate="yes" xml:space="preserve">
          <source>If the field set is not a descendant of a form element, then the attribute can be the ID of any form element in the same document it is related to, or the &lt;code&gt;null&lt;/code&gt; value if none matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da9834c4d7f6524b67c6f43f2f7e2a8564d5a5c" translate="yes" xml:space="preserve">
          <source>If the file is named &lt;code&gt;detect.html&lt;/code&gt;, the following function can be used for detecting HTML parsing support:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a76a6c10befaa2637268133d7ddf80de7d16b0" translate="yes" xml:space="preserve">
          <source>If the font face is still not loaded, the fallback font will be shown. When the font face loads, the fallback will be swaped for the downloaded font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b999a871e8883cc43a497570b59b609eba1d7e0" translate="yes" xml:space="preserve">
          <source>If the font face still is not loaded, the fallback font will be shown and no swap will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b04273301dfed09833c9a838f53e02f7f5af72" translate="yes" xml:space="preserve">
          <source>If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, contains the same value as &lt;code&gt;baseVal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6db4a11c76a7ee07e5de28aef8642b65b9cee6e" translate="yes" xml:space="preserve">
          <source>If the given base URL or the resulting URL are not valid URLs, a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; of type &lt;code&gt;SYNTAX_ERROR&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2b2316ccbbeaf806d2e863b9793f3ab6a250e8" translate="yes" xml:space="preserve">
          <source>If the given child is a &lt;a href=&quot;../documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt;, the entire contents of the &lt;a href=&quot;../documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; are moved into the child list of the specified parent node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5117ff72862f9843c6819f158d70704e0e8b36" translate="yes" xml:space="preserve">
          <source>If the header has multiple values associated with it, the array will contain all the values, in the order they were added to the Headers object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a786d78a3e866655c566ffb7b55371e8e56916" translate="yes" xml:space="preserve">
          <source>If the header has multiple values associated with it, the byte string will contain all the values, in the order they were added to the Headers object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c45af1972899b394fbdadef919607186a7b2eb1" translate="yes" xml:space="preserve">
          <source>If the height or width of the canvas is &lt;code&gt;0&lt;/code&gt;, the string &lt;code&gt;&quot;data:,&quot;&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4e2fffd12b69a8f3c7559db75db40075b1db88" translate="yes" xml:space="preserve">
          <source>If the index with the given name does not exist in the connected database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad518920a5e1002e600352f85bc4e3edc1f2d13e" translate="yes" xml:space="preserve">
          <source>If the initial view was a link into a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view&quot;&gt;&lt;code&gt;&amp;lt;view&amp;gt;&lt;/code&gt;&lt;/a&gt; element, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721337c6e06ac1a5e23c0ec577674adddf8d428d" translate="yes" xml:space="preserve">
          <source>If the initial view was a link into another element (i.e., other than a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view&quot;&gt;&lt;code&gt;&amp;lt;view&amp;gt;&lt;/code&gt;&lt;/a&gt;), then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5f1cd17e4d23f6220fd86c6ffc7e369ce48996" translate="yes" xml:space="preserve">
          <source>If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(...)), then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ea37f22490165c0e52a641f39be9a587814177" translate="yes" xml:space="preserve">
          <source>If the initiator is a &lt;a href=&quot;../css&quot;&gt;&lt;code&gt;CSS&lt;/code&gt;&lt;/a&gt; resource, the property returns &quot;&lt;code&gt;css&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f030af4d0dd6deea5ed265bbc5c9c1b31d1a47e" translate="yes" xml:space="preserve">
          <source>If the initiator is a &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, the property returns the element's &lt;a href=&quot;../node/localname&quot;&gt;&lt;code&gt;localName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9d5ac16de099b000d2229ce4a74b516207c882" translate="yes" xml:space="preserve">
          <source>If the initiator is a &lt;a href=&quot;../performancenavigationtiming&quot;&gt;&lt;code&gt;PerformanceNavigationTiming&lt;/code&gt;&lt;/a&gt; object, the property returns an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902a0d8e42f2d06eb5b2e95e0c887060319780fe" translate="yes" xml:space="preserve">
          <source>If the initiator is a &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; object, the property returns &quot;&lt;code&gt;xmlhttprequest&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5638c8f55d14655d89fbc2f9de7a47d33e6dcfdc" translate="yes" xml:space="preserve">
          <source>If the input device isn't a physical keyboard, but is instead a virtual keyboard or accessibility device, the returned value will be set by the browser to match as closely as possible to what would happen with a physical keyboard, to maximize compatibility between physical and virtual input devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bbc614f0c64982ba785cfc2a74980fbe642888" translate="yes" xml:space="preserve">
          <source>If the input hardware cannot report the contact geometry to the browser, the height defaults to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a536ad0b547415216083762c8f217d6a301bd37e" translate="yes" xml:space="preserve">
          <source>If the input hardware cannot report the contact geometry to the browser, the width defaults to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cb1aa3e758fab1377f4815fa6b1077cc8586f7" translate="yes" xml:space="preserve">
          <source>If the item is a file, the &lt;code&gt;DataTransferItem.getAsFile()&lt;/code&gt; method returns the drag data item's &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object. If the item is not a file, this method returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528d58d9bc1c5a537f920d2538380aaae2f76d50" translate="yes" xml:space="preserve">
          <source>If the key cannot be identified, the returned value is &lt;code&gt;&quot;Unidentified&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da818d3d30eeb31464569d85224eb60cff513c7" translate="yes" xml:space="preserve">
          <source>If the key is not a modifier key, the &lt;code&gt;keypress&lt;/code&gt; event is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df119461d018d736ffa1e7804037aeb8f9cad7bc" translate="yes" xml:space="preserve">
          <source>If the key produces a character key that would result in a character being inserted into possibly an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; or an element with &lt;a href=&quot;../htmlelement/contenteditable&quot;&gt;&lt;code&gt;HTMLElement.contentEditable&lt;/code&gt;&lt;/a&gt; set to true, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeinput&quot;&gt;beforeinput&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/input&quot;&gt;input&lt;/a&gt;&lt;/code&gt; event types are fired in that order. Note that some other implementations may fire &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;keypress&lt;/a&gt;&lt;/code&gt; event if supported. The events will be fired repeatedly while the key is held down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c322e9793430d8ec2aed9fd75eb983dabc21b8" translate="yes" xml:space="preserve">
          <source>If the key range is not specified or is null, then the range includes all the keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11af57dec4d2c6f3a77201437ab0493ed9c243f" translate="yes" xml:space="preserve">
          <source>If the key range is not specified or is null, then the range includes all the records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6207fbf560215ae6060b14b0ffac26db2eea4a4" translate="yes" xml:space="preserve">
          <source>If the kind of drag data item is a &lt;em&gt;plain Unicode string&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7fc90ea5f81a5d0c3e6a368ad9f32f77108ac0" translate="yes" xml:space="preserve">
          <source>If the log was scrolled to the end when we started, we make sure it still is. Then we set &lt;code&gt;statusRefreshScheduled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to indicate that we've handled the refresh and that it's safe to request a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc030d07de2795bee690695f0731fc91baabe89" translate="yes" xml:space="preserve">
          <source>If the media element's source isn't a &lt;code&gt;MediaStream&lt;/code&gt;, the output from this method isn't compatible with the spec, and if you change the source after starting capture, the output capture stream can't accept the new source data due to that incompatibility, so no &lt;a href=&quot;../mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt;s from the new source &lt;code&gt;MediaStream&lt;/code&gt; are added to the captured stream, resulting in output that doesn't capture the updated source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4f18aa60bd466eb3c0e62b649c7df02ca74d46" translate="yes" xml:space="preserve">
          <source>If the media is an audio file, the &lt;a href=&quot;audioconfiguration&quot;&gt;audio configuration&lt;/a&gt; must include a valid audio MIME type as &lt;code&gt;contentType&lt;/code&gt;, the number of channels, the bitrate, and the sample rate. &lt;a href=&quot;videoconfiguration&quot;&gt;Video configurations&lt;/a&gt; mush include a valid video MIME type as contentType, the bitrate, and framerate, along with the width and the height of the video file. All of these must be present, as in the examples below, or a TypeError will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bd6986f5768dc2a6c11d48d625e1ee01adb03e" translate="yes" xml:space="preserve">
          <source>If the merchant desires to collect additional information not part of the API (e.g., additional delivery instructions), the merchant can show a page with additional &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; fields after the checkout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c103684d9fd743cbcd40f7ef58d3f4c876f42fe9" translate="yes" xml:space="preserve">
          <source>If the method is run on another document (like an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;'s subdocument), the coordinates are relative to the document where the method is being called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4475f2314362d6928ba75984fdb17e7b9f868e3b" translate="yes" xml:space="preserve">
          <source>If the method was unable to vibrate because of invalid parameters, it will return &lt;code&gt;false&lt;/code&gt;, else it returns &lt;code&gt;true&lt;/code&gt;. If the pattern leads to a too long vibration, it is truncated: the max length depends on the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d4007231b404440b87846630914de42fe63edc" translate="yes" xml:space="preserve">
          <source>If the mouse button is in fact down, we get the pressed key's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-dataset&quot;&gt;dataset&lt;/a&gt;&lt;/code&gt; attribute; this makes it easy to access the custom data attributes on the element. We look for a &lt;code&gt;data-pressed&lt;/code&gt; attribute; if there isn't one (which indicates that the note isn't already playing), we call &lt;code&gt;playTone()&lt;/code&gt; to start playing the note, passing in the value of the element's &lt;code&gt;data-frequency&lt;/code&gt; attribute. The returned oscillator is stored into &lt;code&gt;oscList&lt;/code&gt; for future reference, and &lt;code&gt;data-pressed&lt;/code&gt; is set to &lt;code&gt;yes&lt;/code&gt; to indicate that the note is playing so we don't start it again next time this is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f5dae8e8ad76e798b110b2d2eedf3b035cd41f" translate="yes" xml:space="preserve">
          <source>If the new data channel is the first one added to the connection, renegotiation is started by delivering a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339d3c6e2d8e43bb63542ae77fe5df6ae3d75aa4" translate="yes" xml:space="preserve">
          <source>If the new node is a document fragment, the children of the document fragment are inserted instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa2a44f7ee53ab4b00da030a6a710d8eefa1c01" translate="yes" xml:space="preserve">
          <source>If the new value of &lt;code&gt;direction&lt;/code&gt; is in fact different from the existing value, renegotiation of the connection is required, so a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/notificationneeded&quot;&gt;notificationneeded&lt;/a&gt;&lt;/code&gt; event is sent to the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc125eb6703e6c335bc867ab13fbf4e4c0e63a8d" translate="yes" xml:space="preserve">
          <source>If the node has no element children, then &lt;code&gt;children&lt;/code&gt; is an empty list with a &lt;code&gt;length&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11a1f8c9de98426e67d2cee172b83870a6a3d0a" translate="yes" xml:space="preserve">
          <source>If the node is a CDATA section, comment, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction&quot;&gt;processing instruction&lt;/a&gt;, or &lt;a href=&quot;../document/createtextnode&quot;&gt;text node&lt;/a&gt;, &lt;code&gt;textContent&lt;/code&gt; returns the text inside this node (the &lt;a href=&quot;nodevalue&quot;&gt;nodeValue&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a40711e4ba5795c11668d69dbfbaae16b0e8573" translate="yes" xml:space="preserve">
          <source>If the object exists, geolocation services are available. You can test for the presence of geolocation thusly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892b43ba877b01e3c2ce26ad407019eb997ba43d" translate="yes" xml:space="preserve">
          <source>If the object exists, the media capabilities interface is available. You can test for the presence of mediaCapabilities object like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb581029ad6b983bc4b932a2bb70b18e0f15783" translate="yes" xml:space="preserve">
          <source>If the object store with the given name (based on case-sensitive comparison) does not exist in the connected database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e83a3302f67aa5e258506554f2cf03f3b83a19d" translate="yes" xml:space="preserve">
          <source>If the offer is created successfully, we pass the blob along to the local connection's &lt;a href=&quot;../rtcpeerconnection/setlocaldescription&quot;&gt;&lt;code&gt;RTCPeerConnection.setLocalDescription()&lt;/code&gt;&lt;/a&gt; method. This configures the local end of the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70eaa76f1b2f017f038db253d4b8d098d1bb6be2" translate="yes" xml:space="preserve">
          <source>If the operation failed for reasons unrelated to the database itself. A failure due to disk IO errors is such an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fb279d0c49bab23945c27f8df5188257f5764f" translate="yes" xml:space="preserve">
          <source>If the option is a descendent of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element, then this property has the same value as the &lt;code&gt;form&lt;/code&gt; property of the corresponding &lt;a href=&quot;htmlselectelement&quot;&gt;&lt;code&gt;HTMLSelectElement&lt;/code&gt;&lt;/a&gt; object; otherwise, it is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f08198b8852e745f058290978c5f6b65700fba" translate="yes" xml:space="preserve">
          <source>If the origin is not a scheme/host/port tuple (say you are trying to run it locally, i.e. via &lt;code&gt;file://&lt;/code&gt; URL), &lt;code&gt;origin&lt;/code&gt; will return the string &lt;code&gt;&quot;null&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee99f63de43f0b740de01d514360a3e3c958ca5" translate="yes" xml:space="preserve">
          <source>If the original node has an ID and the clone is to be placed in the same document, the ID of the clone should be modified to be unique. Name attributes may need to be modified also, depending on whether duplicate names are expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972bd1e68819b5923594c810f8b4e3e6a18c8425" translate="yes" xml:space="preserve">
          <source>If the parent &lt;a href=&quot;../mediasource&quot;&gt;&lt;code&gt;MediaSource&lt;/code&gt;&lt;/a&gt; is in its &lt;code&gt;&quot;ended&quot;&lt;/code&gt;&lt;a href=&quot;../mediasource/readystate&quot;&gt;&lt;code&gt;readyState&lt;/code&gt;&lt;/a&gt;, calling &lt;code&gt;changeType()&lt;/code&gt; will transition the media source to the &lt;code&gt;&quot;open&quot;&lt;/code&gt;&lt;code&gt;readyState&lt;/code&gt; and fire a simple event named &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/sourceopen&quot;&gt;sourceopen&lt;/a&gt;&lt;/code&gt; at the parent media source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1080cad9ba7ff341b57f31fe3f5fea58cd5e828" translate="yes" xml:space="preserve">
          <source>If the payment handler validates the address and determines that the value of &lt;code&gt;country&lt;/code&gt; is invalid, a call to &lt;a href=&quot;../paymentrequestupdateevent/updatewith&quot;&gt;&lt;code&gt;PaymentRequestUpdateEvent.updateWith()&lt;/code&gt;&lt;/a&gt; will be made with a &lt;code&gt;details&lt;/code&gt; object containing a &lt;a href=&quot;../paymentdetailsupdate/shippingaddresserrors&quot;&gt;&lt;code&gt;shippingAddressErrors&lt;/code&gt;&lt;/a&gt; field. That field contains an &lt;a href=&quot;../addresserrors&quot;&gt;&lt;code&gt;AddressErrors&lt;/code&gt;&lt;/a&gt;-compliant object whose &lt;a href=&quot;../addresserrors/country&quot;&gt;&lt;code&gt;country&lt;/code&gt;&lt;/a&gt; property is a string indicating the validation error that occurred and, if possible, suggests how to fix it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece7d055709319a98ae103f80d660b79ff7e887d" translate="yes" xml:space="preserve">
          <source>If the position data changes (either by device movement or if more accurate geo information arrives), you can set up a callback function that is called with that updated position information. This is done using the &lt;a href=&quot;geolocation/watchposition&quot;&gt;&lt;code&gt;watchPosition()&lt;/code&gt;&lt;/a&gt; function, which has the same input parameters as &lt;a href=&quot;geolocation/getcurrentposition&quot;&gt;&lt;code&gt;getCurrentPosition()&lt;/code&gt;&lt;/a&gt;. The callback function is called multiple times, allowing the browser to either update your location as you move, or provide a more accurate location as different techniques are used to geolocate you. The error callback function, which is optional just as it is for &lt;a href=&quot;geolocation/getcurrentposition&quot;&gt;&lt;code&gt;getCurrentPosition()&lt;/code&gt;&lt;/a&gt;, can be called repeatedly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48e90f87ce85801906da2d7e4c6bda4c8b39317" translate="yes" xml:space="preserve">
          <source>If the pressed key has a printed representation, the returned value is a non-empty Unicode character string containing the printable representation of the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce9fa358346bc7e0ab71760bafb891312d6ba44" translate="yes" xml:space="preserve">
          <source>If the pressed key is a control or special character, the returned value is one of the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key/Key_Values&quot;&gt;pre-defined key values&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc4408f3adeed862f9606e442d4e2a83489965a" translate="yes" xml:space="preserve">
          <source>If the promise gets resolved and a user gesture event was being processed when the function was originally called, the resolve handler will run as if a user gesture was being processed, so it will be able to call APIs that require user activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2027cec69ba6b9e9f3e3e51a83ca942a01011b54" translate="yes" xml:space="preserve">
          <source>If the promise gets resolved, the resolve handler will run as if a user gesture was being processed, so it will be able to call APIs that require user activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2f8e6cc729bbf46b715af579773d52876bcd3e" translate="yes" xml:space="preserve">
          <source>If the promise is rejected, the install fails, and the worker won&amp;rsquo;t do anything. This is ok, as you can fix your code and then try again the next time registration occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae4ad494c7f8e07e1642802e461817ee83a5649" translate="yes" xml:space="preserve">
          <source>If the promise returned by &lt;code&gt;getUserMedia()&lt;/code&gt; concludes in a failure, our &lt;code&gt;handleGetUserMediaError()&lt;/code&gt; function performs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf5b44b29e580ea2a2291e153b572b13e34c2f6" translate="yes" xml:space="preserve">
          <source>If the provided URL is not valid, a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; of the &lt;code&gt;SYNTAX_ERROR&lt;/code&gt; type is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fcee47c0e6d2665926a8eac16be8c95ebaa2ee" translate="yes" xml:space="preserve">
          <source>If the provided name is not a &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;valid custom element name&lt;/a&gt;, the promise rejects with a &lt;code&gt;SyntaxError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9a98db4951f2dd6726afa0ca84f2e174417815" translate="yes" xml:space="preserve">
          <source>If the reference node is &lt;code&gt;null&lt;/code&gt;, the specified node is added to the end of the list of children of the specified parent node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf2e311fa78b0d7bcada7aac3c4807d02d823ab" translate="yes" xml:space="preserve">
          <source>If the removed Attribute has a default value it is immediately replaced. The replacing attribute has the same namespace URI and local name, as well as the original prefix, when applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc562a0b6e22d8fe8ce6c85e1e2075e480b7593" translate="yes" xml:space="preserve">
          <source>If the request succeeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4126c6dca65e5c94e101f03be97518ce321170af" translate="yes" xml:space="preserve">
          <source>If the requested header doesn't exist in the &lt;code&gt;Headers&lt;/code&gt; object, it returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0464f77cdfb670e06af1c08691d0ff125b5c6c1f" translate="yes" xml:space="preserve">
          <source>If the requested object store is not in this transaction's scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0198d53270ee5f8bd9fb1bbaddfc70d3695f25" translate="yes" xml:space="preserve">
          <source>If the requested type is not &lt;code&gt;image/png&lt;/code&gt;, but the returned value starts with &lt;code&gt;data:image/png&lt;/code&gt;, then the requested type is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a227173f477eeff81ba0214e0b24cbff25cc2add" translate="yes" xml:space="preserve">
          <source>If the resource is fetched from a local cache, or if it is a cross-origin resource, this property returns zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69af8e04edb9605338375d39006ccb5fcf36cfe9" translate="yes" xml:space="preserve">
          <source>If the resource is fetched over a secure connection, a &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; immediately before the browser starts the handshake process to secure the current connection. If a secure connection is not used, this property returns zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ad4c5924c1aa59e53eabc35721ce6900686e2a" translate="yes" xml:space="preserve">
          <source>If the resource is retrieved from an application cache or a local resource, it must return the size of the payload body before removing any applied content-codings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0a0ee1015f1743713c72ad7844f695b152b66e" translate="yes" xml:space="preserve">
          <source>If the resources isn't in the cache, it is requested from the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e953df958a87ba27e1107216732cf10b6e40ef" translate="yes" xml:space="preserve">
          <source>If the result of the algorithm is &lt;code&gt;&quot;Prohibits Mixed Security Contexts&quot;&lt;/code&gt; and the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-presentation-request-urls&quot;&gt;presentation request URL&lt;/a&gt; of &lt;var&gt;presentationRequest&lt;/var&gt; is an &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-a-priori-unauthenticated-url&quot;&gt;a priori unauthenticated URL&lt;/a&gt;, then return a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-promise&quot;&gt;Promise&lt;/a&gt; rejected with a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-securityerror&quot;&gt;&lt;code&gt;SecurityError&lt;/code&gt;&lt;/a&gt; and abort these steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553d54b63c45f4a8f7353d356bfa0c62ac9b0aeb" translate="yes" xml:space="preserve">
          <source>If the returned promise is rejected, one of the following exceptions is provided to the rejection handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df483121a201de732f5f193d0e2fb7961dd2296" translate="yes" xml:space="preserve">
          <source>If the same &lt;code&gt;MutationObserver&lt;/code&gt; is not already in use on the target, then the existing observers are left alone and the new one is added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1dd5d6752805c823a56964d9a1d2d0a192965a" translate="yes" xml:space="preserve">
          <source>If the script's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/global_object&quot;&gt;global object&lt;/a&gt; is a &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt;, the time origin is determined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261f92f3456fe3fecbdf5f6073d0b039553a2e2e" translate="yes" xml:space="preserve">
          <source>If the script's global object is a &lt;a href=&quot;workerglobalscope&quot;&gt;&lt;code&gt;WorkerGlobalScope&lt;/code&gt;&lt;/a&gt; (that is, the script is running as a web worker), the time origin is the moment at which the worker was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc4fd98d27a89d44707ceba4d020981d032b680" translate="yes" xml:space="preserve">
          <source>If the second byte minus 128 is between 0 and 125, this is the length of the message. If it is 126, the following 2 bytes (16-bit unsigned integer), if 127, the following 8 bytes (64-bit unsigned integer, the most significant bit MUST be 0) are the length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1506ec3c3109e55c992b50e3bc4bb8cb18bcb7b2" translate="yes" xml:space="preserve">
          <source>If the selector matches an ID and this ID is erroneously used several times in the document, it returns the first matching element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f0071f198f2aa75236fc70b18c3769d9468ff3" translate="yes" xml:space="preserve">
          <source>If the selectors specified in parameter are invalid a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;SYNTAX_ERR&lt;/code&gt; value is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07a7edc640e573f5da8eef1ed81ea139879d91a" translate="yes" xml:space="preserve">
          <source>If the server doesn't specify the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type&quot;&gt;&lt;code&gt;Content-Type&lt;/code&gt;&lt;/a&gt; header as &lt;code&gt;&quot;text/xml&quot;&lt;/code&gt; or &lt;code&gt;&quot;application/xml&quot;&lt;/code&gt;, you can use &lt;a href=&quot;overridemimetype&quot;&gt;&lt;code&gt;XMLHttpRequest.overrideMimeType()&lt;/code&gt;&lt;/a&gt; to force &lt;code&gt;XMLHttpRequest&lt;/code&gt; to parse it as XML anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34e0a20793454ed450c90374405951a8a44ea62" translate="yes" xml:space="preserve">
          <source>If the server doesn't want to use any subprotocol, &lt;code&gt;Sec-WebSocket-Protocol&lt;/code&gt;. Sending a blank header is incorrect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a074d0876df80fe9557f8257f04788e582b0d4a2" translate="yes" xml:space="preserve">
          <source>If the server response doesn't explicitly specify a status text, &lt;code&gt;statusText&lt;/code&gt; will assume the default value &quot;OK&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027b6e08ec84d8475650273deab26f17f7df68a2" translate="yes" xml:space="preserve">
          <source>If the shader was loaded and successfully compiled, the compiled shader is returned to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f891387e39401d47d4961f389ee9b98e370e6f30" translate="yes" xml:space="preserve">
          <source>If the site or app has the &lt;code&gt;&quot;persistent-storage&quot;&lt;/code&gt; feature permission, it can use the &lt;a href=&quot;storagemanager/persist&quot;&gt;&lt;code&gt;StorageManager.persist()&lt;/code&gt;&lt;/a&gt; method to request that its box be made persistent. It's also possible for the user agent to decide to make the site's storage unit persistent due to usage characteristics or other metrics. The &lt;code&gt;&quot;persistent-storage&quot;&lt;/code&gt; feature's permission-related flags, algorithms, and types are all set to the standard defaults for a permission, except that the &lt;strong&gt;permission state&lt;/strong&gt; must be the same across the entire origin, and that if the permission state isn't &lt;code&gt;&quot;granted&quot;&lt;/code&gt; (meaning that for whatever reason, access to the persistent storage feature was denied), the origin's site storage unit's box mode is always &lt;code&gt;&quot;best-effort&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6511a5e1a2a68769c1c067bf11ee106387722c5" translate="yes" xml:space="preserve">
          <source>If the source of the media is a &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt;, this value is &lt;code&gt;true&lt;/code&gt; if the value of the stream's &lt;a href=&quot;../mediastream/active&quot;&gt;&lt;code&gt;active&lt;/code&gt;&lt;/a&gt; property is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a4644597b5f032bfcb017dc906f04a3e6a400b" translate="yes" xml:space="preserve">
          <source>If the specified &lt;code&gt;selector&lt;/code&gt; matches an ID that is incorrectly used more than once in the document, the first element with that ID is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604168fbf6bac17953ab3c90392e9afd9a0066b4" translate="yes" xml:space="preserve">
          <source>If the specified header already exists, &lt;code&gt;append()&lt;/code&gt; will change its value to the specified value. If the specified header already exists and accepts multiple values, &lt;code&gt;append()&lt;/code&gt; will append the new value to the end of the value set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fc2b539365980e5c4afe513d5b82474a971851" translate="yes" xml:space="preserve">
          <source>If the specified header does not already exist, &lt;code&gt;set()&lt;/code&gt; will create it and set its value to the specified value. If the specified header does already exist and does accept multiple values, &lt;code&gt;set()&lt;/code&gt; will overwrite the existing value with the new one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87272e15bcaa2508bc2f67930773c4a3896f989d" translate="yes" xml:space="preserve">
          <source>If the specified point is outside the visible bounds of the document or either coordinate is negative, the result is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d707534b6e9a527cd45a11d3edd6f5f02f440cff" translate="yes" xml:space="preserve">
          <source>If the specified track is already in the stream's track set, this method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d476936db3635d00305416d788fe40fe176db1b" translate="yes" xml:space="preserve">
          <source>If the state changes to &lt;code&gt;&quot;failed&quot;&lt;/code&gt;, a new offer is created with &lt;code&gt;iceRestart&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;, then that offer is set as the new local description for the connection. After that, the offer is sent to the server by calling a custom function &lt;code&gt;sendOfferToServer()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d4bb00728a066afd9fbc6930f6444a3eb4ce69" translate="yes" xml:space="preserve">
          <source>If the state has changed to &quot;closed&quot;, the opposite set of actions occurs: the input box and &quot;Send&quot; button are disabled, the &quot;Connect&quot; button is enabled so that the user can open a new connection if they wish to do so, and the &quot;Disconnect&quot; button is disabled, since it's not useful when no connection exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fae4dd9fea196d4a06676a05510ac1a4c5de23" translate="yes" xml:space="preserve">
          <source>If the stream becomes closed, the promise will be fulfilled with an object of the form &lt;code&gt;{ value: undefined, done: true }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89670c469f906abefda75ed9ed50cbf526ae2d1f" translate="yes" xml:space="preserve">
          <source>If the stream becomes closed, the promise will be fulfilled with an object of the form { value: undefined, done: true }.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566441170e8953387f5f17ff68b8ac5d1164ed03" translate="yes" xml:space="preserve">
          <source>If the stream becomes errored, the promise will be rejected with the relevant error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe36e08248bf6396082621376d5acf9d2e8d2ee" translate="yes" xml:space="preserve">
          <source>If the string is empty, the browser will create a new window every time (this behaviour doesn't work when the string is replaced with NULL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0312db640c541921da0beb4a785a653be94cdbaf" translate="yes" xml:space="preserve">
          <source>If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f1541f97accdfcf2a961808cbb70fc3467e056" translate="yes" xml:space="preserve">
          <source>If the sub frame doesn't have the token &lt;code&gt;allow-storage-access-by-user-activation&lt;/code&gt;, reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52386d7b1c36cb9280d9bccb3b6735923c450b25" translate="yes" xml:space="preserve">
          <source>If the sub frame is not sandboxed, skip to step 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6671cf3f979f917ea98fec33ed677572b43a070c" translate="yes" xml:space="preserve">
          <source>If the sub frame's origin is equal to the main frame's, resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="466bc6e304d2fc285f629064198042f822a1f5f6" translate="yes" xml:space="preserve">
          <source>If the sub frame's parent frame is not the top frame, reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0ffe693685e996f2472ce60213272d8606997f" translate="yes" xml:space="preserve">
          <source>If the transition is removed from its target node before the transition completes execution, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionend&quot;&gt;transitionend&lt;/a&gt;&lt;/code&gt; event won't be generated. One way this can happen is by changing the value of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/transition-property&quot;&gt;&lt;code&gt;transition-property&lt;/code&gt;&lt;/a&gt; attribute which applies to the target. Another is if the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; attribute is set to &lt;code&gt;&quot;none&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59a3addeb062afb59c0c7c031435da10f14e4dd" translate="yes" xml:space="preserve">
          <source>If the transport was closed with an error, the &lt;code&gt;RTCDataChannel&lt;/code&gt; is sent a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/NetworkError&quot;&gt;NetworkError&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2a8917a40ba9bd922f362c890e9e6d0cd33356" translate="yes" xml:space="preserve">
          <source>If the underlying element collection contains radio buttons, the &lt;code&gt;RadioNodeList.value&lt;/code&gt; property represents the checked radio button. On retrieving the &lt;code&gt;value&lt;/code&gt; property, the &lt;code&gt;value&lt;/code&gt; of the currently &lt;code&gt;checked&lt;/code&gt; radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in &lt;code&gt;checked&lt;/code&gt; state, the empty string is returned. On setting the &lt;code&gt;value&lt;/code&gt; property, the first radio button input element whose &lt;code&gt;value&lt;/code&gt; property is equal to the new value will be set to &lt;code&gt;checked&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bd3127e1708ce32cf539d0c2a7bdea2319c655" translate="yes" xml:space="preserve">
          <source>If the underlying element collection contains radio buttons, the &lt;code&gt;value&lt;/code&gt; property represents the checked radio button. On retrieving the &lt;code&gt;value&lt;/code&gt; property, the &lt;code&gt;value&lt;/code&gt; of the currently &lt;code&gt;checked&lt;/code&gt; radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in &lt;code&gt;checked&lt;/code&gt; state, the empty string is returned. On setting the &lt;code&gt;value&lt;/code&gt; property, the first radio button input element whose &lt;code&gt;value&lt;/code&gt; property is equal to the new value will be set to &lt;code&gt;checked&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7018075337b02a24503f4a206562077a3aed93c" translate="yes" xml:space="preserve">
          <source>If the underlying index or object store does not support updating the record because it is open in the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBObjectStoreSync#const_read_only&quot;&gt;READ_ONLY&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBCursorSync#const_snapshot_read&quot;&gt;SNAPSHOT_READ&lt;/a&gt;&lt;/code&gt; mode, or if an index record cannot be changed because the underlying index is &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_auto-populated&quot;&gt;auto-populated&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a944b1d975bf8ae48248590d9216cf975e1d00f4" translate="yes" xml:space="preserve">
          <source>If the underlying index or object store does not support updating the record because it is open in the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBObjectStoreSync#const_read_only&quot;&gt;READ_ONLY&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBCursorSync#const_snapshot_read&quot;&gt;SNAPSHOT_READ&lt;/a&gt;&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43ca054c962d08ef308d27005619c9234ccde41" translate="yes" xml:space="preserve">
          <source>If the underlying object store uses &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_in-line_key&quot;&gt;in-line keys&lt;/a&gt; and the property at the &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_key_path&quot;&gt;key path&lt;/a&gt; does not match the key in this cursor's position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcf6ea95d9373715153d2cf3c9509e6a8e382ae" translate="yes" xml:space="preserve">
          <source>If the user agent has the domain information in cache, &lt;a href=&quot;domainlookupstart&quot;&gt;&lt;code&gt;domainLookupStart&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;domainlookupend&quot;&gt;&lt;code&gt;domainLookupEnd&lt;/code&gt;&lt;/a&gt; represent the times when the user agent starts and ends the domain data retrieval from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1ec083da336d1b62f8e9809d6dfb1bad4f7491" translate="yes" xml:space="preserve">
          <source>If the user agent is unable to &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-monitor-the-list-of-available-presentation-displays&quot;&gt;monitor the list of available presentation displays&lt;/a&gt; for the entire duration of the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-controlling-browsing-context&quot;&gt;controlling browsing context&lt;/a&gt; (e.g., because the user has disabled this feature), then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecf9daa903466d73226771e875cf81ca55e43b8" translate="yes" xml:space="preserve">
          <source>If the user agent is unable to continuously &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-monitor-the-list-of-available-presentation-displays&quot;&gt;monitor the list of available presentation displays&lt;/a&gt; but can find presentation displays in order to start a connection, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ba9360eeda9db498e8663496200a1e03fd308f" translate="yes" xml:space="preserve">
          <source>If the user selects just one file, it is then only necessary to consider the first file of the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b34e587eb3d7e748ad2fd143e8be14701870094" translate="yes" xml:space="preserve">
          <source>If the user's finger wanders into browser UI, or the touch otherwise needs to be canceled, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointercancel&quot;&gt;pointercancel&lt;/a&gt;&lt;/code&gt; event is sent, and we call the &lt;code&gt;handleCancel()&lt;/code&gt; function below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9123b6f66738bd01363f84c4cc4ee7292594eee9" translate="yes" xml:space="preserve">
          <source>If the user's finger wanders into browser UI, or the touch otherwise needs to be canceled, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchcancel&quot;&gt;touchcancel&lt;/a&gt;&lt;/code&gt; event is sent, and we call the &lt;code&gt;handleCancel()&lt;/code&gt; function below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9f9cbe83399e245637bda5272420221c2a66de" translate="yes" xml:space="preserve">
          <source>If the value for &lt;em&gt;utfLabel&lt;/em&gt; is unknown, or is one of the two values leading to a &lt;code&gt;'replacement'&lt;/code&gt; decoding algorithm ( &quot;&lt;code&gt;iso-2022-cn&lt;/code&gt;&quot; or &quot;&lt;code&gt;iso-2022-cn-ext&lt;/code&gt;&quot;), a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;&quot;TypeError&quot;&lt;/code&gt; value is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ef5978d50c45d7e801d26bb61c827f2f708cbf" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;a href=&quot;../audiocontextoptions/latencyhint&quot;&gt;&lt;code&gt;latencyHint&lt;/code&gt;&lt;/a&gt; property isn't valid, Chrome throws a &lt;code&gt;TypeError&lt;/code&gt; exception with the message &quot;The provided value '...' is not a valid enum value of type AudioContextLatencyCategory&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4e2464859c75c1810e95dd7be6fbbfccf68ff9" translate="yes" xml:space="preserve">
          <source>If the value of the parameter is invalid, a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;NOT_SUPPORTED_ERR&lt;/code&gt; code is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31eadbc09979099f9b59046d40f3711cb2653e0" translate="yes" xml:space="preserve">
          <source>If the value of the specified object's &lt;a href=&quot;../rtcicecandidate/candidate&quot;&gt;&lt;code&gt;candidate&lt;/code&gt;&lt;/a&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), it signals that all remote candidates have been delivered (end-of-candidates).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4e6e7309a44b537c97aea48f6042adfe051a7e" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/city&quot;&gt;&lt;code&gt;city&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf111c273846069b7c35ad05b8d635f0f05735f" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/dependentlocality&quot;&gt;&lt;code&gt;dependentLocality&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0986a0c232c32322ea9cf2f5332587d3ba094171" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/organization&quot;&gt;&lt;code&gt;organization&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f345d1fc7b32ca24688f71ca78ffbc8712fa5d76" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/phone&quot;&gt;&lt;code&gt;phone&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171d811683e436063b8f0b02ede2962405661a51" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/postalcode&quot;&gt;&lt;code&gt;postalCode&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b365062e9be38502d1718ab66821736aa4d27aa" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/recipient&quot;&gt;&lt;code&gt;recipient&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005ae79e360db82f38bb35694e6a9057b9db6351" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/region&quot;&gt;&lt;code&gt;region&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f152458ffda49d75c274c88910297fec84415e18" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/regioncode&quot;&gt;&lt;code&gt;regionCode&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15210b9946278c0bf7452412648a610bd6c87ef" translate="yes" xml:space="preserve">
          <source>If the value specified in the &lt;a href=&quot;../paymentaddress&quot;&gt;&lt;code&gt;PaymentAddress&lt;/code&gt;&lt;/a&gt; object's &lt;a href=&quot;../paymentaddress/sortingcode&quot;&gt;&lt;code&gt;sortingCode&lt;/code&gt;&lt;/a&gt; property could not be validated, this property contains a &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; offering a human-readable explanation of the validation error and offers suggestions for correcting it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3c857b3e1285cc8df07982d8f3d43dbfbeb06e" translate="yes" xml:space="preserve">
          <source>If the writer is active, the &lt;code&gt;abort()&lt;/code&gt; method behaves the same as that for the associated stream (&lt;a href=&quot;../writablestream/abort&quot;&gt;&lt;code&gt;WritableStream.abort()&lt;/code&gt;&lt;/a&gt;). If not, it returns a rejected promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a06bd2dee6c236f039361936f3b2e9173d62438" translate="yes" xml:space="preserve">
          <source>If the writer is active, the &lt;code&gt;abort()&lt;/code&gt; method behaves the same as that for the associated stream (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WriteableStream/abort&quot;&gt;&lt;code&gt;WriteableStream.abort()&lt;/code&gt;&lt;/a&gt;). If not, it returns a rejected promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ee524a9a65784f68fab67841ef31d323a2139e" translate="yes" xml:space="preserve">
          <source>If there are HTTP redirects the property returns the time immediately before the user agent starts to fetch the final resource in the redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf7560a4cee50ad8e297df5d0a3b43c0c938270" translate="yes" xml:space="preserve">
          <source>If there are HTTP redirects when fetching the resource and if any of the redirects are not from the same origin as the current document, but the timing allow check algorithm passes for each redirected resource, this property returns the starting time of the fetch that initiates the redirect; otherwise, zero is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe82e7dcdabaa9e171f554127a4df9902ad5dae4" translate="yes" xml:space="preserve">
          <source>If there are too few &lt;code&gt;easing&lt;/code&gt; or &lt;code&gt;composite&lt;/code&gt; values, the corresponding list will be repeated as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f6317da545edbbcb114c319cf13dd42271eeb1" translate="yes" xml:space="preserve">
          <source>If there exists a tuple &lt;em&gt;(&lt;var&gt;A&lt;/var&gt;, &lt;var&gt;presentationUrls&lt;/var&gt;)&lt;/em&gt; in the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-set-of-availability-objects&quot;&gt;set of availability objects&lt;/a&gt;, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52d7d91f58e4c7b1ac69cff6f1d13697b2ce25c" translate="yes" xml:space="preserve">
          <source>If there is a match and it is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#Freshness&quot;&gt;fresh&lt;/a&gt;, it will be returned from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb46736602ef20dd723befc03d87f1b639b1bf3" translate="yes" xml:space="preserve">
          <source>If there is a match but it is stale, the browser will make a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests&quot;&gt;conditional request&lt;/a&gt; to the remote server. If the server indicates that the resource has not changed, it will be returned from the cache. Otherwise the resource will be downloaded from the server and the cache will be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c184c7e27124a9a5130780d639f79aba75a6f8" translate="yes" xml:space="preserve">
          <source>If there is a match, &lt;em&gt;fresh or stale&lt;/em&gt;, if will be returned from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba01aaae6e64da528294b78bfa3ec11b04e9aa3" translate="yes" xml:space="preserve">
          <source>If there is a match, &lt;em&gt;fresh or stale&lt;/em&gt;, it will be returned from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605a5f5a97f57eac7ca714d543b0e368d2d8d57d" translate="yes" xml:space="preserve">
          <source>If there is a match,&lt;em&gt; fresh or stale, &lt;/em&gt;the browser will make a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Conditional_requests&quot;&gt;conditional request&lt;/a&gt; to the remote server. If the server indicates that the resource has not changed, it will be returned from the cache. Otherwise the resource will be downloaded from the server and the cache will be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080e1a1618428d791d1462c5c8de21de435cbe82" translate="yes" xml:space="preserve">
          <source>If there is a possibility that your logic could take longer to execute than the interval time, it is recommended that you recursively call a named function using &lt;a href=&quot;settimeout&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.setTimeout&lt;/code&gt;&lt;/a&gt;. For example, if using &lt;code&gt;setInterval&lt;/code&gt; to poll a remote server every 5 seconds, network latency, an unresponsive server, and a host of other issues could prevent the request from completing in its allotted time. As such, you may find yourself with queued up XHR requests that won't necessarily return in order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0af820cb0b573cfbaf7ee3b9f4831fdaafc986c" translate="yes" xml:space="preserve">
          <source>If there is an error linking the program or you wish to delete an existing program, then it is as simple as running &lt;a href=&quot;webglrenderingcontext/deleteprogram&quot;&gt;&lt;code&gt;WebGLRenderingContext.deleteProgram()&lt;/code&gt;&lt;/a&gt;. This frees the memory of the linked program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8be0dcf4d9d4b44a32556cf5870315d6cf5c40" translate="yes" xml:space="preserve">
          <source>If there is an existing service worker available, the new version is installed in the background, but not yet activated &amp;mdash; at this point it is called the &lt;em&gt;worker in waiting&lt;/em&gt;. It is only activated when there are no longer any pages loaded that are still using the old service worker. As soon as there are no more pages to be loaded, the new service worker activates (becoming the &lt;em&gt;active worker&lt;/em&gt;). Activation can happen sooner using &lt;a href=&quot;serviceworkerglobalscope/skipwaiting&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.skipWaiting()&lt;/code&gt;&lt;/a&gt; and existing pages can be claimed by the active worker using &lt;a href=&quot;clients/claim&quot;&gt;&lt;code&gt;Clients.claim()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5079274803c2f4f02634943141d2e5f9eafe543f" translate="yes" xml:space="preserve">
          <source>If there is more stream to read, you process the current chunk then run the function again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b213948714d53687fe3aa6a1fcf5261d9e1f1144" translate="yes" xml:space="preserve">
          <source>If there is no element with the given &lt;code&gt;id&lt;/code&gt;, this function returns &lt;code&gt;null&lt;/code&gt;. Note that the &lt;code&gt;id&lt;/code&gt; parameter is case-sensitive, so &lt;code&gt;document.getElementById(&quot;&lt;strong&gt;M&lt;/strong&gt;ain&quot;)&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt; instead of the element &lt;code&gt;&amp;lt;div id=&quot;&lt;strong&gt;m&lt;/strong&gt;ain&quot;&amp;gt;&lt;/code&gt; because &quot;M&quot; and &quot;m&quot; are different for the purposes of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bfd689eecd2fa73d797ef0f9b0516f088d8408" translate="yes" xml:space="preserve">
          <source>If there is no match, the browser will make a normal request, and will update the cache with the downloaded resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c51b052363029470e7a6212722d3c2812c7a306" translate="yes" xml:space="preserve">
          <source>If there is no match, the browser will respond with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504&quot;&gt;504 Gateway timeout&lt;/a&gt; status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e475422af2a1953a620060324ed8d116d4e32563" translate="yes" xml:space="preserve">
          <source>If there is no more stream to read, you return out of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d219723115687809e2f8b1e9aae50a0a67e02b6" translate="yes" xml:space="preserve">
          <source>If there is no running timer, &lt;code&gt;timeLog()&lt;/code&gt; returns the warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d924916dca84f5a1dfadad0f32a3febaa3128be6" translate="yes" xml:space="preserve">
          <source>If there isn't a preferred style sheet set defined by the author, the empty string (&quot;&quot;) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7680df971ac3fa46b266177fea3d1cc1283a98bc" translate="yes" xml:space="preserve">
          <source>If there isn't a valid image available (that is, the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are both 0), we clear the contents of the captured frame box by calling &lt;code&gt;clearphoto()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6524fd633dfcf18fbfc542e6496007f4cb0955fd" translate="yes" xml:space="preserve">
          <source>If this &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; is present in the object, the &lt;a href=&quot;paymentresponse/payername&quot;&gt;&lt;code&gt;PaymentResponse.payerName&lt;/code&gt;&lt;/a&gt; property failed validation, and this string explains what needs to be corrected. If this property is absent, the paer name is fine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a41f6e3f28fba23d9631f491d7b24477a7e3a2" translate="yes" xml:space="preserve">
          <source>If this animation is canceled, remove its element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0171c5cf4461072061bba042d1d36e25dc22a9c8" translate="yes" xml:space="preserve">
          <source>If this argument is anything else, the default value for image quality is used. The default value is &lt;code&gt;0.92&lt;/code&gt;. Other arguments are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3ffd184bbe212df5e2921c1596c7888c2eea16" translate="yes" xml:space="preserve">
          <source>If this argument's value is &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, or 1, the dialog window can be resized by the user; otherwise its size is fixed. The default value is &lt;code&gt;no&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476daec3d24b23fbb0e3dbeb9142d7c4dfc8def9" translate="yes" xml:space="preserve">
          <source>If this argument's value is &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, or 1, the dialog window has scroll bars; otherwise its size is fixed. The default value is &lt;code&gt;no&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ed163736fd898142df00d7aaa54fccbfad2347" translate="yes" xml:space="preserve">
          <source>If this argument's value is &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;yes&lt;/code&gt;, or 1, the dialog window is centered on the desktop; otherwise it's hidden. The default value is &lt;code&gt;yes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e14faf77a60253c199ae9ef4a40dab82e49789" translate="yes" xml:space="preserve">
          <source>If this fails (e.g. because the network is down), return a fallback response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c379c9ee070c7f6f678ee0a3f09c2c6868119602" translate="yes" xml:space="preserve">
          <source>If this fails (e.g., because the network is down), return a fallback response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940066c9a6b8ae66a7e27417c620d8b83e6bc996" translate="yes" xml:space="preserve">
          <source>If this feature is on, the new secondary window will be resizable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facf8d1e8ce8de558c083152eb0dc31987e4ab06" translate="yes" xml:space="preserve">
          <source>If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca4d44c46a156b0de72cd5b4170f2b8d9cbaf91" translate="yes" xml:space="preserve">
          <source>If this feature is on, then the new secondary window has a status bar. Users can force the rendering of status bar in all Mozilla-based browsers, in MSIE 6 SP2 (&lt;a href=&quot;#Note_on_security_issues_of_the_status_bar_presence&quot;&gt;Note on status bar in XP SP2&lt;/a&gt;) and in Opera 6+. The default preference setting in recent Mozilla-based browser releases and in Firefox 1.0 is to force the presence of the status bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236a67f9910dde46006aa43411af4cb644ea099c" translate="yes" xml:space="preserve">
          <source>If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. MSIE 5+ and Opera 7.x renders the Address Bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daffac61170e470bcb5d9b422ba35a7107b7de1d" translate="yes" xml:space="preserve">
          <source>If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). In addition to the Navigation Toolbar, Mozilla-based browsers will render the Tab Bar if it is visible, present in the parent window. (If this feature is set to &lt;var&gt;no&lt;/var&gt; all toolbars in the window will be invisible, for example extension toolbars).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d90c55ba5ed164930927b7d82c5762556c899c5" translate="yes" xml:space="preserve">
          <source>If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. It renders the Bookmarks Toolbar in Firefox. In addition to the Personal Toolbar, Mozilla browser will render the Site Navigation Bar if such toolbar is visible, present in the parent window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087e8ff75c4eb87c34451dd62f6e4f246cdf0c8c" translate="yes" xml:space="preserve">
          <source>If this feature is on, then the new secondary window renders the menubar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fe624c3135904ee191ddd48fd3224a5b14b3d2" translate="yes" xml:space="preserve">
          <source>If this feature is set, the newly-opened window will open as normal, except that it will not have access back to the originating window (via &lt;a href=&quot;opener&quot;&gt;&lt;code&gt;Window.opener&lt;/code&gt;&lt;/a&gt; &amp;mdash; it returns &lt;code&gt;null&lt;/code&gt;). In addition, the &lt;code&gt;window.open()&lt;/code&gt; call will also return &lt;code&gt;null&lt;/code&gt;, so the originating window will not have access to the new one either. This is useful for preventing untrusted sites opened via &lt;code&gt;window.open()&lt;/code&gt; from tampering with the originating window, and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701648fd73e7f1a6f02764f20cda1722229f8910" translate="yes" xml:space="preserve">
          <source>If this feature is specified, the window is able to open even if another application is already in the foreground. This feature is for Firefox OS applications only, and is currently restricted to certified applications. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/Firefox_OS_apps/App_permissions#Internal_(Certified)_app_permissions&quot;&gt;Internal (Certified) app permissions&lt;/a&gt; in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Archive/B2G_OS/Firefox_OS_apps/App_permissions&quot;&gt;App permissions&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d5bd703412fbd62a8ded562b61ee04ba158550" translate="yes" xml:space="preserve">
          <source>If this is indeed the first run, we set the video's height based on the size difference between the video's actual size, &lt;code&gt;video.videoWidth&lt;/code&gt;, and the width at which we're going to render it, &lt;code&gt;width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b180deedaea6a91c7daff36c44079c9d7d121f" translate="yes" xml:space="preserve">
          <source>If this is the first time a service worker has been made available, installation is attempted, then after a successful installation, it is activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d814e0810c2015afa9bf42b943daebfe1543e9" translate="yes" xml:space="preserve">
          <source>If this method is called with no arguments or the format is an empty &lt;a href=&quot;../domstring&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;, the data of all types will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ee32e7963556cdd7dd6324e0f3751eca9e8b85" translate="yes" xml:space="preserve">
          <source>If this object exists on another origin to the constructor call, the &lt;a href=&quot;referrer&quot;&gt;&lt;code&gt;Request.referrer&lt;/code&gt;&lt;/a&gt; is stripped out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9b9a145de2a6314619e2cd2750576161bdbcf7" translate="yes" xml:space="preserve">
          <source>If this object has a &lt;a href=&quot;mode&quot;&gt;&lt;code&gt;Request.mode&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;navigate&lt;/code&gt;, the &lt;code&gt;mode&lt;/code&gt; value is converted to &lt;code&gt;same-origin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8464d5b656f662a859d9305d0b31c405ed9563b7" translate="yes" xml:space="preserve">
          <source>If this object store uses &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_out-of-line_key&quot;&gt;out-of-line keys&lt;/a&gt;, and the &lt;em&gt;key&lt;/em&gt; parameter was not passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988aae973788bf72d536a95c5394081256c4ab29" translate="yes" xml:space="preserve">
          <source>If this object store uses &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_out-of-line_key&quot;&gt;out-of-line&lt;/a&gt; keys and no &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_key_generator&quot;&gt;key generator&lt;/a&gt;, but no key was given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a675912f6c8281883efae164dab5be8901f71b5" translate="yes" xml:space="preserve">
          <source>If this parameter is provided, the copy is given this string as its new file or directory name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef9ceff27b1beac0d374916027f5d8c097cb9ec" translate="yes" xml:space="preserve">
          <source>If this parameter is provided, the entry is renamed to have this string as its new file or directory name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e88e09071a50b44c9024d17eed27919a85367c5" translate="yes" xml:space="preserve">
          <source>If this property exists on the options object when the &lt;a href=&quot;../mutationobserver/mutationobserver&quot;&gt;&lt;code&gt;MutationObserver()&lt;/code&gt;&lt;/a&gt; constructor is used to create a new &lt;code&gt;MutationObserver&lt;/code&gt;, attribute monitoring is enabled regardless of whether or not the &lt;a href=&quot;attributes&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; property is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa4d4e330e18f43f3252f26f43d41377f124b08" translate="yes" xml:space="preserve">
          <source>If this property has a value, the &lt;a href=&quot;control&quot;&gt;&lt;code&gt;HTMLLabelElement.control&lt;/code&gt;&lt;/a&gt; property must refer to the same control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a4cb5f92c5198381d5035daeb106335e31a1ae" translate="yes" xml:space="preserve">
          <source>If this property has a value, the &lt;a href=&quot;htmlfor&quot;&gt;&lt;code&gt;HTMLLabelElement.htmlFor&lt;/code&gt;&lt;/a&gt; property must refer to the same control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6dce5ee2fa6492c276b6a1f5d3b57b25339b9d" translate="yes" xml:space="preserve">
          <source>If this property is &lt;code&gt;true&lt;/code&gt;, and the requested file or directory doesn't exist, the user agent should create it. The default is &lt;code&gt;false&lt;/code&gt;. The parent directory must already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cbd842e5de84c065c75762857bf957d850825b" translate="yes" xml:space="preserve">
          <source>If this property is missing when the &lt;code&gt;DOMPointInit&lt;/code&gt; object is passed into &lt;code&gt;fromPoint()&lt;/code&gt;, the value is assumed to be 0 by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea473389e69020a736003e04ee4fcf09d7091bf" translate="yes" xml:space="preserve">
          <source>If this property is null, the application must provide a key for each modification operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4ea43080775bc58b76d136bccd2e5b77d3de49" translate="yes" xml:space="preserve">
          <source>If this property is present, its value is always &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc0fa5180c50f85445e92045ffcab44b7b15877" translate="yes" xml:space="preserve">
          <source>If this property is successfully set, the port part of the origin is also set to null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f347986ebf46364c0dd1f82b2008dd8f9b713a" translate="yes" xml:space="preserve">
          <source>If this property's value is a number, the user agent will attempt to obtain media whose latency tends to be as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required latency (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3492b75ac61e72247d1dc6c2e274194874723c" translate="yes" xml:space="preserve">
          <source>If this style sheet is imported into the document using an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt;&lt;/a&gt; rule, the &lt;code&gt;ownerRule&lt;/code&gt; property will return that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSImportRule&quot;&gt;&lt;code&gt;CSSImportRule&lt;/code&gt;&lt;/a&gt;, otherwise it returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b9c17fea0e0239ebfd170d61a1f9909377c7a7" translate="yes" xml:space="preserve">
          <source>If this transaction has already been committed or aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02d9840f800de912e7d4d7e2fd53b49161158c3" translate="yes" xml:space="preserve">
          <source>If this transaction's scope is dynamic, and the browser cannot commit all of the changes due to another transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2683fa2968a3f29629366d628fde46f8f2231f" translate="yes" xml:space="preserve">
          <source>If this value is &lt;code&gt;false&lt;/code&gt;, the children of entity reference nodes (as well as all of their descendants) are rejected. This takes precedence over the value of the &lt;a href=&quot;whattoshow&quot;&gt;&lt;code&gt;TreeWalker.whatToShow&lt;/code&gt;&lt;/a&gt; method and the associated filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08d592b5865a2f3e455376b58da7bd81bf56aa9" translate="yes" xml:space="preserve">
          <source>If this value is &lt;code&gt;false&lt;/code&gt;, the shadow root will be the last node to be offered the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25e6eed1e63b22db02c1db9290155b8da8da76a" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose aspect ratio is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required aspect ratio (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eaca9fd692378e6e2f27b122f8cbc96660df0a0" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose channel count is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constrainlong&quot;&gt;&lt;code&gt;ConstrainLong&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required channel count (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0c20e1b7b73619c72aaf78865c40f5d1158610" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose frame rate is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required frame rate (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1370ba7eee25a5e460a344f9280339db2bd9a655" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose height is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constrainlong&quot;&gt;&lt;code&gt;ConstrainLong&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required height (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15acf76f62cbc2ad8a98b8a0ae681c657785db3" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose sample rate is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constrainlong&quot;&gt;&lt;code&gt;ConstrainLong&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required sample rate (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9461f678fa512ad88e94f7f44a1a48b4ae603ce1" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose sample size (in bits per linear sample) is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constrainlong&quot;&gt;&lt;code&gt;ConstrainLong&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required sample size (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cf5d6b1ccabb8b5669dc6c913cd9f5094bfeea" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose volume is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constraindouble&quot;&gt;&lt;code&gt;ConstrainDouble&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required volume (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0330a7cbf066a2ed1c5168d36c28d06e805b6d2c" translate="yes" xml:space="preserve">
          <source>If this value is a number, the user agent will attempt to obtain media whose width is as close as possible to this number given the capabilities of the hardware and the other constraints specified. Otherwise, the value of this &lt;a href=&quot;../constrainlong&quot;&gt;&lt;code&gt;ConstrainLong&lt;/code&gt;&lt;/a&gt; will guide the user agent in its efforts to provide an exact match to the required width (if &lt;code&gt;exact&lt;/code&gt; is specified or both &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; are provided and have the same value) or to a best-possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3934d693082aa4e12edff2c4a9832abc994ba459" translate="yes" xml:space="preserve">
          <source>If this value is a simple &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the user agent will attempt to obtain media with automatic gain control enabled or disabled as specified, if possible, but will not fail if this can't be done. If, instead, the value is given as an object with an &lt;code&gt;exact&lt;/code&gt; field, that field's Boolean value indicates a required setting for the automatic gain control feature; if it can't be met, then the request will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d0cae4f6f98234458bcff499825639c04af0fe" translate="yes" xml:space="preserve">
          <source>If this value is a simple &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the user agent will attempt to obtain media with echo cancellation enabled or disabled as specified, if possible, but will not fail if this can't be done. If, instead, the value is given as an object with an &lt;code&gt;exact&lt;/code&gt; field, that field's Boolean value indicates a required setting for the echo cancellation feature; if it can't be met, then the request will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d1cf6e8588fa2c1c00fd4d8ab5334007a32711" translate="yes" xml:space="preserve">
          <source>If this value is a simple &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the user agent will attempt to obtain media with noise suppression enabled or disabled as specified, if possible, but will not fail if this can't be done. If, instead, the value is given as an object with an &lt;code&gt;exact&lt;/code&gt; field, that field's Boolean value indicates a required setting for the noise suppression feature; if it can't be met, then the request will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d0a6eb920fbf28a566262066fad6a18776ff59" translate="yes" xml:space="preserve">
          <source>If this whitespace is removed from the source, the #text nodes are not inserted and the span element becomes the paragraph's first child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6e85a8fb95f1e5ed5752cf1c72d2f1a72f2f1c" translate="yes" xml:space="preserve">
          <source>If true, a key can have only one value within the index; if false, a key can have duplicate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b5ef1465c573a74b71c6509940035d807b09ff" translate="yes" xml:space="preserve">
          <source>If true, keys in the index must be unique; if false, duplicate keys are allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e46b9009b61994c41767f1dc3f9f0d452f53701" translate="yes" xml:space="preserve">
          <source>If true, the index will not allow duplicate values for a single key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6508d7d942e1ce228d883e27a5831c2a64188f7" translate="yes" xml:space="preserve">
          <source>If true, the object store uses a &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_key_generator&quot;&gt;key generator&lt;/a&gt;; if false, it does not use one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a94364fb15d022d914d7625d18ee1706dcc268a" translate="yes" xml:space="preserve">
          <source>If true, this transaction is &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_static&quot;&gt;static&lt;/a&gt;; if false, this transaction is &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#gloss_dynamic&quot;&gt;dynamic&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787fc547467955e7d9ff69cafccc5c41eff6e56a" translate="yes" xml:space="preserve">
          <source>If trying to insert an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt;&lt;/a&gt; at-rule after a style rule, then aborts with &lt;code&gt;HierarchyRequestError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7414a5f7be7d0708d8581f3d775e2d4ee76dd124" translate="yes" xml:space="preserve">
          <source>If unset, a default value of 1 will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba98aac542ba9ab8bcea5ed73d15e09f7f116441" translate="yes" xml:space="preserve">
          <source>If unset, the app's (i.e. the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html&quot;&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html#attr-lang&quot;&gt;lang&lt;/a&gt;&lt;/code&gt; value) lang will be used, or the user-agent default if that is unset too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ec04231d1c959c99f66d94119a9128c6dc59e6" translate="yes" xml:space="preserve">
          <source>If we add two &lt;code&gt;username&lt;/code&gt; values using &lt;a href=&quot;append&quot;&gt;&lt;code&gt;FormData.append&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8366613b40e6b5734855c52c6fdc953d4b64f9bf" translate="yes" xml:space="preserve">
          <source>If we click Back again, the URL will change to http://mozilla.org/foo.html, and the document will get a &lt;code&gt;popstate&lt;/code&gt; event, this time with a null state object. Here too, going back doesn't change the document's contents from what they were in the previous step, although the document might update its contents manually upon receiving the &lt;code&gt;popstate&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09814787827d8d9e075698c1079a803307130ada" translate="yes" xml:space="preserve">
          <source>If we compare clipping paths to the &lt;code&gt;globalCompositeOperation&lt;/code&gt; property we've seen above, we see two compositing modes that achieve more or less the same effect in &lt;code&gt;source-in&lt;/code&gt; and &lt;code&gt;source-atop&lt;/code&gt;. The most important differences between the two are that clipping paths are never actually drawn to the canvas and the clipping path is never affected by adding new shapes. This makes clipping paths ideal for drawing multiple shapes in a restricted area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b43a0f19fb5a3f27351c4eee26cf4be0fd0230d" translate="yes" xml:space="preserve">
          <source>If we connect this through our audio graph and play it &amp;mdash;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f374d6e55f71d7dc71e7a4a4087018fd67c159" translate="yes" xml:space="preserve">
          <source>If we had left her paused at the beginning of her animation, she&amp;rsquo;d start at half her full size, as if she&amp;rsquo;d drunk the entire bottle already! We want to set her animation&amp;rsquo;s &amp;ldquo;playhead&amp;rdquo; in the middle, so she&amp;rsquo;s already halfway done. We could do that by setting her &lt;a href=&quot;../animation/currenttime&quot;&gt;&lt;code&gt;Animation.currentTime&lt;/code&gt;&lt;/a&gt; to 4 seconds, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab754374d2a15cbb098f64e44eb3c12aa6184ff5" translate="yes" xml:space="preserve">
          <source>If we pass the &lt;code&gt;user&lt;/code&gt; variable as the &lt;code&gt;label&lt;/code&gt; argument to the first invocation of &lt;code&gt;count()&lt;/code&gt;, and the string &quot;alice&quot; to the second:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d4519876f16c973e699caecdedb2f99426107d" translate="yes" xml:space="preserve">
          <source>If we send &quot;MDN&quot;, we get these bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1525bf158e48f2e869db05d0e153b4b945df23d5" translate="yes" xml:space="preserve">
          <source>If we send &quot;abcdef&quot;, we get these bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4263f67352922999f5fcb234bf534a1f187e2e" translate="yes" xml:space="preserve">
          <source>If we used &lt;code&gt;IDBKeyRange.upperBound(&quot;F&quot;, true);&lt;/code&gt;, then the range excludes &quot;F&quot;; and instead only includes the values before it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b635034705d709476747d77292a6200e406b9d48" translate="yes" xml:space="preserve">
          <source>If we wanted to create an instance of this element programmatically, we'd use a call along the following lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030a680a1e30749f6317813c9f30736b70493e17" translate="yes" xml:space="preserve">
          <source>If we were being really clever, we would not only request the resource from the network; we would also save it into the cache so that later requests for that resource could be retrieved offline too! This would mean that if extra images were added to the Star Wars gallery, our app could automatically grab them and cache them. The following would do the trick:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b306d81f89e37cae5206bf0958e3404e2925328" translate="yes" xml:space="preserve">
          <source>If we're not replacing an existing ad, we need to append the element to the content area of the page using &lt;a href=&quot;../node/appendchild&quot;&gt;&lt;code&gt;Document.appendChild()&lt;/code&gt;&lt;/a&gt;. If we're replacing an ad, it's already there, with its contents replaced with the new ad's. Then we call the &lt;a href=&quot;../intersectionobserver/observe&quot;&gt;&lt;code&gt;observe()&lt;/code&gt;&lt;/a&gt; method on our Intersection Observer, &lt;code&gt;adObserver&lt;/code&gt;, to start watching the ad for changes to its intersection with the viewport. From now on, any time the ad becomes 100% obscured or even a single pixel becomes visible, or the ad passes through 75% visible in one way or another, the &lt;a href=&quot;#Handling_intersection_changes&quot;&gt;observer's callback&lt;/a&gt; is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ba3da20f469e40adbb25397dc52912ddf7883d" translate="yes" xml:space="preserve">
          <source>If you abort the transaction, then all requests still in progress receive this error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2410fdf552e64e1575f3dc6d527cb3c2b84c970" translate="yes" xml:space="preserve">
          <source>If you absolutely need to reach the target value by a specific time, you can use &lt;a href=&quot;exponentialramptovalueattime&quot;&gt;&lt;code&gt;AudioParam.exponentialRampToValueAtTime()&lt;/code&gt;&lt;/a&gt;. However, for mathematical reasons, that method does not work if the current value or the target value is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7055cfa5385f630e49a045f7b52e9411d59bbdab" translate="yes" xml:space="preserve">
          <source>If you already have an MP4, but it's not properly fragmented, you can again use ffmpeg:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2207f2255dc4f6a14937f654b20772bb333a4d" translate="yes" xml:space="preserve">
          <source>If you are creating a sandbox, and want &lt;code&gt;indexedDB&lt;/code&gt; to be available in it, use the &lt;code&gt;wantGlobalProperties&lt;/code&gt; option in the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Language_Bindings/Components.utils.Sandbox&quot;&gt;Sandbox&lt;/a&gt;&lt;/code&gt; constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd8337dc642f1528ec438dbd0731164bbbf1e37" translate="yes" xml:space="preserve">
          <source>If you are curious about the effect the &lt;code&gt;smoothingTimeConstant()&lt;/code&gt; has, try cloning the above example and setting &lt;code&gt;analyser.smoothingTimeConstant = 0;&lt;/code&gt; instead. You'll notice that the value changes are much more jarring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0001dee6353c2d2d91bea5ccfb1296fb48b2512" translate="yes" xml:space="preserve">
          <source>If you are looking for sound creation or a more instrument-based option, &lt;a href=&quot;https://tonejs.github.io/&quot;&gt;tone.js&lt;/a&gt; is a great library. It provides advanced scheduling capabilities, synths, and effects, and intuitive musical abstractions built on top of the Web Audio API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1c0b03dfe77fddf22e3a0c1f4f4c078e3cfb61" translate="yes" xml:space="preserve">
          <source>If you are looking to learn more there's some &lt;a href=&quot;http://www.eas.uccs.edu/~mwickert/ece2610/lecture_notes/ece2610_chap8.pdf&quot;&gt;information about the maths behind IIR filters here&lt;/a&gt;. This enters the realms of signal processing theory &amp;mdash; don't worry if you look at it and feel like it's not for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05e5f9f48859cd19de921ce6a726468b9e6a2a8" translate="yes" xml:space="preserve">
          <source>If you are more familiar with the musical side of things, are familiar with music theory concepts, want to start building instruments, then you can go ahead and start building things with the advance tutorial and others as a guide (the above linked tutorial covers scheduling notes, creating bespoke oscillators and envelopes, as well as an LFO among other things.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b9c1de10d5d30df3d031b715c337793e1f3b7c" translate="yes" xml:space="preserve">
          <source>If you are using WebGL 2, you can specify the index yourself in the vertex shader code and override the default used by the graphics card, e.g. &lt;code&gt;layout(location = 3) in vec4 position;&lt;/code&gt; would set the &lt;code&gt;&quot;position&quot;&lt;/code&gt; attribute to index 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e81e6135fc857f9359e901bba04031911dc8a57" translate="yes" xml:space="preserve">
          <source>If you are working with 3D games and/or WebXR it's a good idea to harness a 3D library to create such functionality, rather than trying to do this all yourself from first principles. We rolled our own in this article to give you an idea of how it works, but you'll save a lot of time by taking advantage of work others have done before you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b7320532a67868b56229485742f3322af62ec8" translate="yes" xml:space="preserve">
          <source>If you aren't familiar with the programming basics, you might want to consult some beginner's JavaScript tutorials first and then come back here &amp;mdash; see our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript&quot;&gt;Beginner's JavaScript learning module&lt;/a&gt; for a great place to begin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9761ab0d4ea2e47acf89062aeb015339328d406" translate="yes" xml:space="preserve">
          <source>If you attempt to add data twice with the same format, the new data will replace the old data, but in the same position within the list of types as the old data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afaa46a6d52eadf87678d2954da32d35205ea757" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;HTMLElement.focus()&lt;/code&gt; from a mousedown event handler, you must call &lt;code&gt;event.preventDefault()&lt;/code&gt; to keep the focus from leaving the &lt;code&gt;HTMLElement&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab5182ffbcd4070523ad1b98fb9fd7a5f3ab0b9" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;mozCaptureMediaStream()&lt;/code&gt; on a media element with no source media, its compatibility mode will be based on the first source that's added; for example, if it's a &lt;code&gt;MediaStream&lt;/code&gt;, then the capture stream will only work with MediaStream sources from then on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c4bfc8ec8de17db8cf0ec9ca954cce8013c199" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;observe()&lt;/code&gt; on a node that's already being observed by the same &lt;code&gt;MutationObserver&lt;/code&gt;, all existing observers are automatically removed from all targets being observed before the new observer is activated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3d70903ce458191517fa8b297bbe273c449c8f" translate="yes" xml:space="preserve">
          <source>If you called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d49c5983354ff778117cc6ae15e97799f7fd3b" translate="yes" xml:space="preserve">
          <source>If you called the following in a document served at &lt;code&gt;localhost:8000&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a1c6b82a7457caaaa0c3fbf3e5f5ea1aa2451a" translate="yes" xml:space="preserve">
          <source>If you conclude with an XMLHttpRequest receiving &lt;code&gt;status=0&lt;/code&gt; and &lt;code&gt;statusText=null&lt;/code&gt;, this means the request was not allowed to be performed. It was &lt;code&gt;&lt;a href=&quot;https://xhr.spec.whatwg.org/#dom-xmlhttprequest-unsent&quot;&gt;UNSENT&lt;/a&gt;&lt;/code&gt;. A likely cause for this is when the &lt;a href=&quot;https://www.w3.org/TR/2010/CR-XMLHttpRequest-20100803/#xmlhttprequest-origin&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt; origin&lt;/a&gt; (at the creation of the XMLHttpRequest) has changed when the XMLHttpRequest is subsequently &lt;code&gt;open()&lt;/code&gt;. This case can happen, for example, when one has an XMLHttpRequest that gets fired on an onunload event for a window, the expected XMLHttpRequest is created when the window to be closed is still there, and finally sending the request (in otherwords, &lt;code&gt;open()&lt;/code&gt;) when this window has lost its focus and another window gains focus. The most effective way to avoid this problem is to set a listener on the new window's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/activate&quot;&gt;activate&lt;/a&gt;&lt;/code&gt; event which is set once the terminated window has its &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/unload&quot;&gt;unload&lt;/a&gt;&lt;/code&gt; event triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661c81723acf947ee69db4acdda14884afb70b75" translate="yes" xml:space="preserve">
          <source>If you consider a path from (3,1) to (3,5) with a line thickness of &lt;code&gt;1.0&lt;/code&gt;, you end up with the situation in the second image. The actual area to be filled (dark blue) only extends halfway into the pixels on either side of the path. An approximation of this has to be rendered, which means that those pixels being only partially shaded, and results in the entire area (the light blue and dark blue) being filled in with a color only half as dark as the actual stroke color. This is what happens with the &lt;code&gt;1.0&lt;/code&gt; width line in the previous example code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3734c5c1f3e0c2ce2a977e9a0a9a21e528b0ab5" translate="yes" xml:space="preserve">
          <source>If you do expect to receive messages from other sites, &lt;strong&gt;always verify the sender's identity&lt;/strong&gt; using the &lt;code&gt;origin&lt;/code&gt; and possibly &lt;code&gt;source&lt;/code&gt; properties. Any window (including, for example, &lt;code&gt;http://evil.example.com&lt;/code&gt;) can send a message to any other window, and you have no guarantees that an unknown sender will not send malicious messages. Having verified identity, however, you still should &lt;strong&gt;always verify the syntax of the received message&lt;/strong&gt;. Otherwise, a security hole in the site you trusted to send only trusted messages could then open a cross-site scripting hole in your site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575cbc7335392e01427e6c47bcdd84e2f16293fe" translate="yes" xml:space="preserve">
          <source>If you do not require explicit control of video quality over time, the rate at which content is fetched, or the rate at which memory is evicted, then the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;&lt;/a&gt; tags may well be a simple and adequate solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d43ec9fc0d30b73ed2078791c13a040d0c62b7" translate="yes" xml:space="preserve">
          <source>If you don't provide certificates, new ones are generated automatically. One obvious benefit to providing your own is identity key continuity&amp;mdash;if you use the same certificate for subsequent calls, the remote peer can tell you're the same caller. This also avoids the cost of generating new keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38368e7efde0b743a004f5c93b88a6290e75dbb7" translate="yes" xml:space="preserve">
          <source>If you don't want any user interaction you can use the &lt;code&gt;setInterval()&lt;/code&gt; function which repeatedly executes the supplied code. If we wanted to make a game, we could use keyboard or mouse events to control the animation and use &lt;code&gt;setTimeout()&lt;/code&gt;. By setting &lt;a href=&quot;../../eventlistener&quot;&gt;&lt;code&gt;EventListener&lt;/code&gt;&lt;/a&gt;s, we catch any user interaction and execute our animation functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896b96919c447fa8937a6402f3678b56feea94ff" translate="yes" xml:space="preserve">
          <source>If you dont want to create a history entry, replace &lt;code&gt;open()&lt;/code&gt; with &lt;code&gt;open(&quot;text/html&quot;, &quot;replace&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be55dd52a47373be153ea036d27e6db2c1054994" translate="yes" xml:space="preserve">
          <source>If you find yourself repeating some of the same drawing operations on each animation frame, consider offloading them to an offscreen canvas. You can then render the offscreen image to your primary canvas as often as needed, without unnecessarily repeating the steps needed to generate it in the first place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a54c5e183d16edd92268d0af89ec0b5eafbbed1" translate="yes" xml:space="preserve">
          <source>If you had some functionality written in a separate script called &lt;code&gt;foo.js&lt;/code&gt; that you wanted to use inside worker.js, you could import it using the following line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a8473722895746b277ae74166995438d8c08fa" translate="yes" xml:space="preserve">
          <source>If you have a &lt;a href=&quot;../dompointreadonly&quot;&gt;&lt;code&gt;DOMPointReadOnly&lt;/code&gt;&lt;/a&gt; object, you can easily create a mutable copy of that point:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c933359e511b60e5d6abf0cae2ca1f259bce0d8c" translate="yes" xml:space="preserve">
          <source>If you have a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFileEntry&quot;&gt;&lt;code&gt;FileSystemFileEntry&lt;/code&gt;&lt;/a&gt; corresponding to an image file in a file system available to your Web site or app, you can call &lt;code&gt;toURL()&lt;/code&gt; to get its URL for use in HTML. If your site is located at &lt;code&gt;http://my-awesome-website.woot&lt;/code&gt;, and you have a temporary file system that contains an image file named &lt;code&gt;awesomesauce.jpg&lt;/code&gt;, the URL returned by &lt;code&gt;toURL()&lt;/code&gt; might be (depending on the browser's implementation) something like &lt;code&gt;&quot;filesystem:http://my-awesome-website.woot/temporary/awesomesauce.jpg&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b990e08e62a8943742c167bd89389b32a940d54" translate="yes" xml:space="preserve">
          <source>If you have a static background image, you can draw it onto a plain &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element using the CSS &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/background&quot;&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt; property and position it under the canvas. This will negate the need to render the background to the canvas on every tick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a83b9398cf36635c6523c8dd011e90d1ee027e1" translate="yes" xml:space="preserve">
          <source>If you have an asset that is not already an MP4, ffmpeg can handle emitting a properly fragmented MP4 during the transcode process, with the &lt;code&gt;-movflags frag_keyframe+empty_moov&lt;/code&gt; command line flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095a4a14ce354bc5e83f4d9876f2d411d3a15a89" translate="yes" xml:space="preserve">
          <source>If you have any comments about this tutorial or want to thank us, feel free to reach out to us!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4be0a31efd63f2b8928e0cc0238e6f8e03ebb5" translate="yes" xml:space="preserve">
          <source>If you have assumptions from working with other types of databases, you might get thrown off when working with IndexedDB. So keep the following important concepts in mind:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40285cca9db9203d6467d842288d85c4143eff0d" translate="yes" xml:space="preserve">
          <source>If you have buttons that switch audio on and off, using the ARIA &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Switch_role&quot;&gt;&lt;code&gt;role=&quot;switch&quot;&lt;/code&gt;&lt;/a&gt; attribute on them is a good option for signalling to assistive technology what the button's exact purpose is, and therefore making the app more accessible. There's a &lt;a href=&quot;https://codepen.io/Wilto/pen/ZoGoQm?editors=1100&quot;&gt;demo of how to use it here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa9e5e616be7ddff6bb867361e50d568a91d1ec" translate="yes" xml:space="preserve">
          <source>If you have gotten more than one ping before you get the chance to send a pong, you only send one pong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587c10e822b4a659a6cb91a86747aee1b61cc833" translate="yes" xml:space="preserve">
          <source>If you have to pass some complex data and have to call many different functions both on the main page and in the Worker, you can create a system which groups everything together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1d4bb579ef15b9c9b946a0608ad5df87732e7e" translate="yes" xml:space="preserve">
          <source>If you insert data that doesn't conform to a constraint. It's an exception type for creating stores and indexes. You get this error, for example, if you try to add a new key that already exists in the record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d74c81857d35741e3a98c0442070e0065715f2d" translate="yes" xml:space="preserve">
          <source>If you instead call &lt;code&gt;RTCIceCandidate()&lt;/code&gt; with a string parameter containing the &lt;code&gt;candidate&lt;/code&gt; m-line text, the value of &lt;code&gt;sdpMLineIndex&lt;/code&gt; is extracted from the m-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94da9b2290f0f749237a942c0a63a114a592b053" translate="yes" xml:space="preserve">
          <source>If you instead call &lt;code&gt;RTCIceCandidate()&lt;/code&gt; with a string parameter containing the &lt;code&gt;candidate&lt;/code&gt; m-line text, the value of &lt;code&gt;usernameFragment&lt;/code&gt; is extracted from the m-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c628510846b9d819f8a77d3bb444467a09ca4e" translate="yes" xml:space="preserve">
          <source>If you just want to specify a change of direction but not constrain the results shown, you can just pass in null as the first argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572cacbd155e449c86755706a608fcff885aba77" translate="yes" xml:space="preserve">
          <source>If you know the ID of the specific image you wish to use, you can use &lt;a href=&quot;../../document/getelementbyid&quot;&gt;&lt;code&gt;document.getElementById()&lt;/code&gt;&lt;/a&gt; to retrieve that specific image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58486dabf89a76ca2ffe2b1eac9040a0186b844" translate="yes" xml:space="preserve">
          <source>If you must ensure durability for some reason (e.g. you're storing critical data that cannot be recomputed later) you can force a transaction to flush to disk before delivering the &lt;code&gt;complete&lt;/code&gt; event by creating a transaction using the experimental (non-standard) &lt;code&gt;readwriteflush&lt;/code&gt; mode (see &lt;a href=&quot;idbdatabase/transaction&quot;&gt;&lt;code&gt;IDBDatabase.transaction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc6eac051ba468c4a5dd56682b19d0b27a81ffe" translate="yes" xml:space="preserve">
          <source>If you need a list of all elements matching the specified selectors, you should use &lt;a href=&quot;queryselectorall&quot;&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf75f1fea3f38b0c7e42cb8faa44f13755533c58" translate="yes" xml:space="preserve">
          <source>If you need all the elements matching the selector list, use &lt;a href=&quot;queryselectorall&quot;&gt;&lt;code&gt;querySelectorAll()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ff07e82a040db0ce34d8194bec389f1b7f6e26" translate="yes" xml:space="preserve">
          <source>If you need an integer value, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round&quot;&gt;&lt;code&gt;Math.round()&lt;/code&gt;&lt;/a&gt; to round it off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89ecf25e01c4fae1a27fed14cb23a70a447302f" translate="yes" xml:space="preserve">
          <source>If you need higher performance and don't care about precision, you can use &lt;a href=&quot;getbytefrequencydata&quot;&gt;&lt;code&gt;AnalyserNode.getByteFrequencyData()&lt;/code&gt;&lt;/a&gt; instead, which works on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Uint8Array&quot;&gt;&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca2958f8d093dcd6afd58681d1398d8695f90e5" translate="yes" xml:space="preserve">
          <source>If you need only a single result, consider the &lt;a href=&quot;queryselector&quot;&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/a&gt; method instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ba40678bd1f3dc6a55a9b0c372624ded2044a4" translate="yes" xml:space="preserve">
          <source>If you need or want to check to see if a specific MIME type is supported, that's possible as well. Just call &lt;a href=&quot;mediarecorder/istypesupported&quot;&gt;&lt;code&gt;MediaRecorder.isTypeSupported()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a412951be0f582bdcd1eb21eceec28e7472eb777" translate="yes" xml:space="preserve">
          <source>If you need to access all object stores in the database, you can use the property &lt;a href=&quot;objectstorenames&quot;&gt;&lt;code&gt;IDBDatabase.objectStoreNames&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20109a97e1a1ead50c602fd679ef49490718c3c" translate="yes" xml:space="preserve">
          <source>If you need to access all the entries with a given &lt;code&gt;name&lt;/code&gt; you can use a cursor. You can open two different types of cursors on indexes. A normal cursor maps the index property to the object in the object store. A key cursor maps the index property to the key used to store the object in the object store. The differences are illustrated here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dabd4b9a0c4d29db3a994484a94bd7887d5f3eb" translate="yes" xml:space="preserve">
          <source>If you need to access only one object store, you can specify its name as a string. Therefore the following lines are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f496d84cbc12af742e4a5beb314ffec77bc0f0fb" translate="yes" xml:space="preserve">
          <source>If you need to change the configuration of the connection in some way (such as changing to a different set of ICE servers), you can do so before restarting ICE by calling &lt;a href=&quot;../rtcpeerconnection/setconfiguration&quot;&gt;&lt;code&gt;RTCPeerConnection.setConfiguration()&lt;/code&gt;&lt;/a&gt; with an updated &lt;a href=&quot;../rtcconfiguration&quot;&gt;&lt;code&gt;RTCConfiguration&lt;/code&gt;&lt;/a&gt; dictionary before restarting ICE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b701e6b5756cd8deee58bc6832a89d2ea6f00088" translate="yes" xml:space="preserve">
          <source>If you need to find the specific position inside the element, use &lt;a href=&quot;caretpositionfrompoint&quot;&gt;&lt;code&gt;Document.caretPositionFromPoint()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1354f1280a873f6f3846bcee632318cd785e78" translate="yes" xml:space="preserve">
          <source>If you need to get access to an element which doesn't have an ID, you can use &lt;a href=&quot;queryselector&quot;&gt;&lt;code&gt;querySelector()&lt;/code&gt;&lt;/a&gt; to find the element using any &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSS_selector&quot;&gt;selector&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a24a5e0713af9bce31ddfda9678b3073cb3088c" translate="yes" xml:space="preserve">
          <source>If you need to get the raw string of all of the headers, use the &lt;a href=&quot;getallresponseheaders&quot;&gt;&lt;code&gt;getAllResponseHeaders()&lt;/code&gt;&lt;/a&gt; method, which returns the entire raw header string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c7f345f25cf22172b76f632a149677e6e77c92" translate="yes" xml:space="preserve">
          <source>If you need to immediately terminate a running worker from the main thread, you can do so by calling the worker's &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;terminate&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fbab80b532321fd24f8e49f12df965fde8497c" translate="yes" xml:space="preserve">
          <source>If you need to know how much space the actual displayed content takes up, including padding but not including the border, margins, or scrollbars, you want to use the &lt;a href=&quot;../element/clientwidth&quot;&gt;&lt;code&gt;Element.clientWidth&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../element/clientheight&quot;&gt;&lt;code&gt;Element.clientHeight&lt;/code&gt;&lt;/a&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a511cc7ffe90dd06690b4eec08b4d715860eb1a" translate="yes" xml:space="preserve">
          <source>If you need to know the actual size of the content, regardless of how much of it is currently visible, you need to use the &lt;a href=&quot;../element/scrollwidth&quot;&gt;&lt;code&gt;Element.scrollWidth&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../element/scrollheight&quot;&gt;&lt;code&gt;Element.scrollHeight&lt;/code&gt;&lt;/a&gt; properties. These return the width and height of the entire content of an element, even if only part of it is presently visible due to the use of scroll bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04f12470e88bb9f55d7c6738393e7677747c329" translate="yes" xml:space="preserve">
          <source>If you need to know the total amount of space an element occupies, including the width of the visible content, scrollbars (if any), padding, and border, you want to use the &lt;a href=&quot;../htmlelement/offsetwidth&quot;&gt;&lt;code&gt;HTMLElement.offsetWidth&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../htmlelement/offsetheight&quot;&gt;&lt;code&gt;HTMLElement.offsetHeight&lt;/code&gt;&lt;/a&gt; properties. Most of the time these are the same as width and height of &lt;a href=&quot;../element/getboundingclientrect&quot;&gt;&lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;&lt;/a&gt;, when there aren't any transforms applied to the element. In case of transforms, the &lt;code&gt;offsetWidth&lt;/code&gt; and &lt;code&gt;offsetHeight&lt;/code&gt; returns the element's layout width and height, while &lt;code&gt;getBoundingClientRect()&lt;/code&gt; returns the rendering width and height. As an example, if the element has &lt;code&gt;width: 100px;&lt;/code&gt; and &lt;code&gt;transform: scale(0.5);&lt;/code&gt; the &lt;code&gt;getBoundingClientRect()&lt;/code&gt; will return 50 as the width, while &lt;code&gt;offsetWidth&lt;/code&gt; will return 100.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce33da787e9811c6b4fc1017f89fe8ee63ff1c9" translate="yes" xml:space="preserve">
          <source>If you need to know whether or not a given constriant is supported by the user agent, you can find out by calling &lt;a href=&quot;../mediadevices/getsupportedconstraints&quot;&gt;&lt;code&gt;navigator.mediaDevices.getSupportedConstraints()&lt;/code&gt;&lt;/a&gt; to get a list of the constrainable properties which the browser knows, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17865f846646d03cbb05fcf04bdb6e6f9ba2f482" translate="yes" xml:space="preserve">
          <source>If you need to open the object store in &lt;code&gt;readwrite&lt;/code&gt; mode to change data, you would use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75b11efb32646a783c398e8e0ee4f0a37608a6d" translate="yes" xml:space="preserve">
          <source>If you need to pass one or more arguments to your callback function, but need it to work in browsers which don't support sending additional parameters using either &lt;code&gt;setTimeout()&lt;/code&gt; or &lt;code&gt;setInterval() &lt;/code&gt;(e.g. Internet Explorer 9 and below&lt;code&gt;)&lt;/code&gt;, you can include this polyfill which enables the HTML5 standard parameter-passing functionality. Just add this code to the top of your script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc9d74b2fc4b59d366cd8565acae9082bd0c112" translate="yes" xml:space="preserve">
          <source>If you only want to send credentials if the request URL is on the same origin as the calling script, add &lt;code&gt;credentials: 'same-origin'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373c2f6c1458db2cfb0512b470ed4d38fc1cee99" translate="yes" xml:space="preserve">
          <source>If you run out of disk quota and the user declined to grant you more space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e315bdfc1536a4c7d34fda0733639f532af94d3" translate="yes" xml:space="preserve">
          <source>If you select to pay with the BobPay demo payment provider on this merchant page, it tries to call &lt;code&gt;PaymentRequest.show()&lt;/code&gt;, while intercepting the &lt;code&gt;NOTSUPPORTEDERR&lt;/code&gt; exception. If this payment method is not supported, it redirects to the signup page for BobPay.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91e3c9519bc9580e50154d0481b21c6fdda6e21" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;characterDataOldValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;characterData&lt;/code&gt; is automatically assumed to be &lt;code&gt;true&lt;/code&gt;, even if you don't expressly set it as such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc58c99ac5444957f63a055920b1c261489a027" translate="yes" xml:space="preserve">
          <source>If you set either &lt;code&gt;attributeFilter&lt;/code&gt; or &lt;code&gt;attributeOldValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;attributes&lt;/code&gt; is automatically assumed to be &lt;code&gt;true&lt;/code&gt;, even if you don't expressly set it as such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0c6ecea1973b532755dffdaaaea7f377db47f5" translate="yes" xml:space="preserve">
          <source>If you set the &lt;a href=&quot;characterdata&quot;&gt;&lt;code&gt;MutationObserverInit.characterData&lt;/code&gt;&lt;/a&gt; property to &lt;code&gt;true&lt;/code&gt; but don't set &lt;code&gt;characterDataOldValue&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; as well, the &lt;code&gt;MutationRecord&lt;/code&gt; will not include information describing the prior state of the text node's contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbff80bded4dced1a9208f25c13c5f51d79ce5c" translate="yes" xml:space="preserve">
          <source>If you specify a &lt;code&gt;miterLimit&lt;/code&gt; value below 4.2 in this demo, none of the visible corners will join with a miter extension, but only with a small bevel near the blue lines; with a &lt;code&gt;miterLimit&lt;/code&gt; above 10, most corners in this demo should join with a miter far away from the blue lines, and whose height is decreasing between corners from left to right because they connect with growing angles; with intermediate values, the corners on the left side will only join with a bevel near the blue lines, and the corners on the right side with a miter extension (also with a decreasing height).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59544a7122f801112b8c40e30e34b8444220fc8a" translate="yes" xml:space="preserve">
          <source>If you try to call &lt;code&gt;drawImage()&lt;/code&gt; before the image has finished loading, it won't do anything (or, in older browsers, may even throw an exception). So you need to be sure to use the load event so you don't try this before the image has loaded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1864154225ab0c02c3c102ad6fd8abd898e460b" translate="yes" xml:space="preserve">
          <source>If you try to delete a directory which contains one or more files that can't be removed, or if an error occurs while deletion of a number of files is underway, some files may not be deleted. You should provide an &lt;code&gt;errorCallback&lt;/code&gt; to watch for and handle this, perhaps by trying again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee77a122b2a4cd38ca29ebca14e7687a1617273b" translate="yes" xml:space="preserve">
          <source>If you try to open a database with a version lower than the one it already has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41066a91637e3388e02ac0bb488fa21d4aae1072" translate="yes" xml:space="preserve">
          <source>If you try to set the &lt;code&gt;mode&lt;/code&gt; property value to &lt;code&gt;segments&lt;/code&gt; when the initial value is &lt;code&gt;sequence&lt;/code&gt;, an error will be thrown. The existing segment order must be maintained in &lt;code&gt;sequence&lt;/code&gt; mode. You can, however, change the value from &lt;code&gt;segments&lt;/code&gt; to &lt;code&gt;sequence&lt;/code&gt;. It just means the play order will be fixed, and new timestamps generated to reflect this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32db42c6327ed5ef9bea10be19fc5174c7b0eec5" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;XMLHttpRequest&lt;/code&gt; to get the content of a remote HTML webpage, the &lt;a href=&quot;responsetext&quot;&gt;&lt;code&gt;responseText&lt;/code&gt;&lt;/a&gt; property is a string containing the raw HTML. This could prove difficult to manipulate and analyze. There are three primary ways to analyze and parse this raw HTML string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a245a00eef954eafa3364e113b4beb937ab1dd88" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;XMLHttpRequest&lt;/code&gt; to get the content of a remote XML document, the &lt;a href=&quot;responsexml&quot;&gt;&lt;code&gt;responseXML&lt;/code&gt;&lt;/a&gt; property will be a DOM object containing a parsed XML document. This could prove difficult to manipulate and analyze. There are four primary ways of analyzing this XML document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403d17f5204da19c83ed5ced5aed4cd02443a81b" translate="yes" xml:space="preserve">
          <source>If you use a relatively large radius, the arc may appear in a place you didn't expect. In this example, the arc's connecting line goes above, instead of below, the coordinate specified by &lt;code&gt;moveTo()&lt;/code&gt;. This happens because the radius is too large for the arc to fit entirely below the starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3262eb12d94596219a3db95d69c9fc86682fec80" translate="yes" xml:space="preserve">
          <source>If you use an asynchronous &lt;code&gt;XMLHttpRequest&lt;/code&gt;, you receive a callback when the data has been received. This lets the browser continue to work as normal while your request is being handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2a0e52c15500fecfcaef1e39851f471f11e5fd" translate="yes" xml:space="preserve">
          <source>If you use the callback to monitor these changes, you don't need to call this method. Calling this method clears the pending intersection list, so the callback will not be run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e168a0a2d7db564d30bec3141fbbc37c06af397c" translate="yes" xml:space="preserve">
          <source>If you use this call above, you will get a stereo buffer with two channels, that when played back on an AudioContext running at 44100Hz (very common, most normal sound cards run at this rate), will last for 0.5 seconds: 22050 frames/44100Hz = 0.5 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edf8c9f1bad76f5a3fbac856c14ab6b2096fd75" translate="yes" xml:space="preserve">
          <source>If you use this call, you will get a mono buffer (one channel), that, when played back on an &lt;code&gt;AudioContext&lt;/code&gt; running at 44100Hz, will be automatically *resampled* to 44100Hz (and therefore yield 44100 frames), and last for 1.0 second: 44100 frames / 44100Hz = 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef807d51c378c8fa4f7ac09b307f94619973f4fb" translate="yes" xml:space="preserve">
          <source>If you use this call, you will get a mono buffer with just one channel), that when played back on an AudioContext running at 44100Hz, will be automatically &lt;em&gt;resampled&lt;/em&gt; to 44100Hz (and therefore yield 44100 frames), and last for 1.0 second: 44100 frames/44100Hz = 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f23834ff1f257a028c0128d51ca216428a367c2" translate="yes" xml:space="preserve">
          <source>If you use this call, you will get a stereo buffer (two channels), that, when played back on an AudioContext running at 44100Hz (very common, most normal sound cards run at this rate), will last for 0.5 seconds: 22050 frames / 44100Hz = 0.5 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f69fcb9cf923a9b19705928aa11df83c731b431" translate="yes" xml:space="preserve">
          <source>If you want a completely unobtrusive hack for every other mobile or desktop browser, including IE 9 and below, you can either use JavaScript conditional comments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031b151057ab536e119a87cdc44fb926a17b3059" translate="yes" xml:space="preserve">
          <source>If you want to allow a drop, you must prevent the default handling by cancelling the event. You can do this either by returning &lt;code&gt;false&lt;/code&gt; from an attribute-defined event listener, or by calling the event's &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; method. The latter may be more feasible in a function defined in a separate script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b037687da6e5b7608e7f19311268baf6b25076dc" translate="yes" xml:space="preserve">
          <source>If you want to close your worker instance from inside the worker itself, you can call the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c930c2b706b22985b60fb3d920d7ede37a6e79" translate="yes" xml:space="preserve">
          <source>If you want to extract time, frequency, and other data from your audio, the &lt;code&gt;AnalyserNode&lt;/code&gt; is what you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00aa890b17684116773239824e0ad1dc9811b83" translate="yes" xml:space="preserve">
          <source>If you want to force e10s to be on &amp;mdash; to explicitly re-enable touch events support &amp;mdash; you need to go to &lt;code&gt;about:config&lt;/code&gt; and create a new Boolean preference &lt;code&gt;browser.tabs.remote.force-enable&lt;/code&gt;. Set it to &lt;code&gt;true&lt;/code&gt;, restart the browser, and e10s will be enabled regardless of any other settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73417a3b4af5ea677fdd853724c79ef4f22e085" translate="yes" xml:space="preserve">
          <source>If you want to know &lt;strong&gt;&lt;em&gt;if&lt;/em&gt; &lt;em&gt;the current page&lt;/em&gt; has changed&lt;/strong&gt;, please read the article about &lt;a href=&quot;../document/lastmodified&quot;&gt;&lt;code&gt;document.lastModified&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d59e541f7c401a5f93334d4a4c8249239c20768" translate="yes" xml:space="preserve">
          <source>If you want to know &lt;strong&gt;whether &lt;em&gt;an external page&lt;/em&gt; has changed&lt;/strong&gt;, please read &lt;a href=&quot;../xmlhttprequest/using_xmlhttprequest#Get_last_modified_date&quot;&gt;this paragraph about the &lt;code&gt;XMLHttpRequest()&lt;/code&gt; API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c75369ad01be29542cb331076b5c097628fce8" translate="yes" xml:space="preserve">
          <source>If you want to know how to serialize and submit a form using the &lt;a href=&quot;xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; API, please read &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files&quot;&gt;this paragraph&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca69d6b3603883071e19cc428964c12123072870" translate="yes" xml:space="preserve">
          <source>If you want to know how to serialize and submit a form via &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/AJAX&quot;&gt;AJAX&lt;/a&gt;&lt;em&gt;without&lt;/em&gt; using FormData objects, please read &lt;a href=&quot;../xmlhttprequest/using_xmlhttprequest#Submitting_forms_and_uploading_files&quot;&gt;this paragraph&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476db1c53ef9ace0c2a71480c52bd04db5f5e38c" translate="yes" xml:space="preserve">
          <source>If you want to let the user select multiple files, simply use the &lt;code&gt;multiple&lt;/code&gt; attribute on the &lt;code&gt;input&lt;/code&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c1e6be5daa92ed656206d0169bfddbaaa1cc6c" translate="yes" xml:space="preserve">
          <source>If you want to offer to open a link in a new window, then follow tested and recommendable usability and accessibility guidelines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04b37103ece0a5f8c3dbce1e30c156ee58dd55a" translate="yes" xml:space="preserve">
          <source>If you want to open a connection and are flexible about the protocols you support, you can specify an array of protocols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417e761dcad4f0a05ebae79173d26e974820044a" translate="yes" xml:space="preserve">
          <source>If you want to play with the IIR filter node and need some values to help along the way, there's &lt;a href=&quot;http://www.dspguide.com/CH20.PDF&quot;&gt;a table of already calculated values here&lt;/a&gt;; on pages 4 &amp;amp; 5 of the linked PDF the a&lt;em&gt;n&lt;/em&gt; values refer to the &lt;code&gt;feedForward&lt;/code&gt; values and the b&lt;em&gt;n&lt;/em&gt; values refer to the &lt;code&gt;feedback&lt;/code&gt;. &lt;a href=&quot;http://musicdsp.org/&quot;&gt;musicdsp.org&lt;/a&gt; is also a great resource if you want to read more about different filters and how they are implemented digitally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1fa3e4a65fd651ff4c15543632fa264d4a7d58" translate="yes" xml:space="preserve">
          <source>If you want to use the DOM File API from extensions or other browser chrome code, you can; however, note there are some additional features to be aware of. See &lt;a href=&quot;https://developer.mozilla.org/en/Extensions/Using_the_DOM_File_API_in_chrome_code&quot;&gt;Using the DOM File API in chrome code&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b21d969227ae7833d6beace1b3e69961c920c0" translate="yes" xml:space="preserve">
          <source>If you want your server to obey certain subprotocols, then naturally you'll need extra code on the server. Let's imagine we're using a subprotocol &lt;code&gt;json&lt;/code&gt;. In this subprotocol, all data is passed as &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt;. If the client solicits this protocol and the server wants to use it, the server will need to have a JSON parser. Practically speaking, this will be part of a library, but the server will need to pass the data around.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe63a224f7da01b8506a8616c49720ab5a0583b" translate="yes" xml:space="preserve">
          <source>If you wanted to completely get rid of the stream and discard any enqueued chunks, you'd use &lt;a href=&quot;../readablestream/cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../readablestreamdefaultreader/cancel&quot;&gt;&lt;code&gt;ReadableStreamDefaultReader.cancel()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7972945b190505edc93b3a72a6a3051719a81510" translate="yes" xml:space="preserve">
          <source>If you wish to have your function called &lt;em&gt;once&lt;/em&gt; after the specified delay, use &lt;a href=&quot;settimeout&quot;&gt;&lt;code&gt;WindowOrWorkerGlobalScope.setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436c48cee6c78a3a98319348367beb410466d6ba" translate="yes" xml:space="preserve">
          <source>If you wish to work with the bleeding edge of extensions, and want to keep working on upon ratification (assuming, of course, that the extension doesn't change in incompatible ways), that you query the canonical extension name as well as the vendor extension name. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84340bc76419803f7b903806a2680e2e81830e3" translate="yes" xml:space="preserve">
          <source>If you would like to limit the range of values you see in a cursor, you can use an &lt;code&gt;IDBKeyRange&lt;/code&gt; object and pass it as the first argument to &lt;code&gt;openCursor()&lt;/code&gt; or &lt;code&gt;openKeyCursor()&lt;/code&gt;. You can make a key range that only allows a single key, or one that has a lower or upper bound, or one that has both a lower and upper bound. The bound may be &quot;closed&quot; (i.e., the key range includes the given value(s)) or &quot;open&quot; (i.e., the key range does not include the given value(s)). Here's how it works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfcb48b563cec029bdb3ab2c7d04336d55ac239" translate="yes" xml:space="preserve">
          <source>If you would like to use the WebSocket API, it is useful if you have a server. In this article I will show you how to write one in C#. You can do it in any server-side language, but to keep things simple and more understandable, I chose Microsoft's language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37f1ae120d001a14724788664b70e6dc4f56d72" translate="yes" xml:space="preserve">
          <source>If you'd like to know more about how this works, read &lt;a href=&quot;https://tools.ietf.org/html/rfc3550&quot;&gt;RFC 3550: RTP: A Transport Protocol for Real-Time Applications&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc4733&quot;&gt;RFC 4733: RTP Payload for DTMF Digits, Telephony Tones, and Telephony Signals&lt;/a&gt;. The details of how DTMF payloads are handled on RTP are beyond the scope of this article. Instead, we'll focus on how to use DTMF within the context of an &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; by studying how an example works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f840e081d9f0ebcae0de36b162356281ee9601" translate="yes" xml:space="preserve">
          <source>If you'd like to see the connecting lines, you can remove the lines that call &lt;code&gt;moveTo()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7acced3c9b16de1eda6b7b6f0c50a452231c9b" translate="yes" xml:space="preserve">
          <source>If you'd prefer, you can use a third-party library like &lt;a href=&quot;https://modernizr.com/docs&quot;&gt;Modernizr&lt;/a&gt; or &lt;a href=&quot;https://github.com/rafrex/detect-it&quot;&gt;Detect It&lt;/a&gt; to do this test for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbad3b03344c34c2eb41cb5b96421a2d239d46d" translate="yes" xml:space="preserve">
          <source>If you're changing any setting (such as styles, transformations, etc.) which affect the canvas state and you want to make sure the original state is used each time a frame is drawn, you need to save that original state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68ce4960b627571a4ae244b26261a22f4865e8fd" translate="yes" xml:space="preserve">
          <source>If you're looking to follow the steps listed here, but don't have any media to experiment with, you can grab the trailer to Big Buck Bunny [0] &lt;a href=&quot;http://wayback.archive.org/web/20161102172252id_/http://video.blendertestbuilds.de/download.php?file=download.blender.org/peach/trailer_1080p.mov&quot;&gt;here&lt;/a&gt;. Big Buck Bunny is licensed under the &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/&quot;&gt;Creative Commons Attribution 3.0&lt;/a&gt; license. Throughout this tutorial, you'll see the filename trailer_1080p.mov which is the download.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131e8e960b239abcc0f1ee992ec6d71c417b3d22" translate="yes" xml:space="preserve">
          <source>If you're looking to work with audio from the user's camera or microphone you can access it via the &lt;a href=&quot;../media_streams_api&quot;&gt;Media Stream API&lt;/a&gt; and the &lt;a href=&quot;../mediastreamaudiosourcenode&quot;&gt;&lt;code&gt;MediaStreamAudioSourceNode&lt;/code&gt;&lt;/a&gt; interface. This is good for WebRTC and situations where you might want to record or possibly analyse audio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca4674bc4679ac2ad0e2484698eb22183ccc48f" translate="yes" xml:space="preserve">
          <source>If you're only using one external image this can be a good approach, but once you need to track more than one we need to resort to something more clever. It's beyond the scope of this tutorial to look at image pre-loading tactics, but you should keep that in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2640abfd6507fe25062ba55b582a1858886604" translate="yes" xml:space="preserve">
          <source>If you've just created a database, then you probably want to write to it. Here's what that looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1548cb22fbeaf614e5b9fd9d5299b85103f26114" translate="yes" xml:space="preserve">
          <source>If you've saved the state, restore it before drawing a new frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3995886a1c6a18fb15656ae2cab0d1ee421232d5" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form&quot;&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;&lt;/a&gt; element contains an element named &lt;em&gt;name&lt;/em&gt; then that element overrides the &lt;code&gt;form.name&lt;/code&gt; property, so that you can't access it. Internet Explorer (IE) does not allow the name attribute of an element created using &lt;code&gt;createElement()&lt;/code&gt; to be set or modified using the &lt;code&gt;name&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e214d6522442fe7f1254ef90966a4b48b3f4f4cc" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;ChannelSplitterNode&lt;/code&gt; always has one single input, the amount of outputs is defined by a parameter on its constructor and the call to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createChannelSplitter&quot;&gt;&lt;code&gt;AudioContext.createChannelSplitter()&lt;/code&gt;&lt;/a&gt;. In the case that no value is given, it will default to &lt;code&gt;6&lt;/code&gt;. If there are fewer channels in the input than there are outputs, supernumerary outputs are silent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b33283060e3e432d8eba04eb22d53564def9cb" translate="yes" xml:space="preserve">
          <source>If your application is running on Firefox OS, please take a look at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/navigator.requestWakeLock()&quot;&gt;geolocation wake lock&lt;/a&gt; to keep your application getting position updates while in the background or screen off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd72c47cee831f9854f2c36cd9fa4d966a0c9b7" translate="yes" xml:space="preserve">
          <source>If your application uses canvas and doesn&amp;rsquo;t need a transparent backdrop, set the &lt;code&gt;alpha&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; when creating a drawing context with &lt;a href=&quot;../../htmlcanvaselement/getcontext&quot;&gt;&lt;code&gt;HTMLCanvasElement.getContext()&lt;/code&gt;&lt;/a&gt;. This information can be used internally by the browser to optimize rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323df4c51c3e93f18a84f6b1f843c6816816829d" translate="yes" xml:space="preserve">
          <source>If your architecture doesn't necessarily have all of the data ready to go at the moment it instantiates the payment interface by calling &lt;code&gt;show()&lt;/code&gt;, specify the &lt;code&gt;detailsPromise&lt;/code&gt; parameter, providing a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that is fulfilled once the data is ready. If this is provided, &lt;code&gt;show()&lt;/code&gt; will not allow the user to interact with the payment interface until the promise is fulfilled, so that data can be updated prior to the user engaging with the payment process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2495a8efa829d160fed6735daa28561fcd80e355" translate="yes" xml:space="preserve">
          <source>If your browser supports &lt;code&gt;animationcancel&lt;/code&gt;, hiding the box using the button will cause a message to be displayed about the event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b8ad7e02b61dfdbebda110bee02fd2fe70b70d" translate="yes" xml:space="preserve">
          <source>If your browser supports it, you can &lt;a href=&quot;https://mdn.mozillademos.org/en-US/docs/Web/API/Touch_events%24samples/Example?revision=1408810&quot;&gt;see it live&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5083d6d753c431710d5ada096860531220eace" translate="yes" xml:space="preserve">
          <source>If your communication needs involve receiving event or message data from the server, consider using &lt;a href=&quot;server-sent_events&quot;&gt;server-sent events&lt;/a&gt; through the &lt;a href=&quot;eventsource&quot;&gt;&lt;code&gt;EventSource&lt;/code&gt;&lt;/a&gt; interface. For full-duplex communication, &lt;a href=&quot;websockets_api&quot;&gt;WebSockets&lt;/a&gt; may be a better choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1902d240942eaacb1d961664c9a7d0556020e55e" translate="yes" xml:space="preserve">
          <source>If your goal is to record camera and/or microphone input, you may wish to examine the available input devices before beginning the process of constructing the &lt;code&gt;MediaRecorder&lt;/code&gt;. To do so, you'll need to call &lt;a href=&quot;mediadevices/enumeratedevices&quot;&gt;&lt;code&gt;navigator.mediaDevices.enumerateDevices()&lt;/code&gt;&lt;/a&gt; to get a list of the available media devices. You can then examine that list and identify the potential input sources, and even filter the list based on desired criteria.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ad6454cb8eb50d68b79888fc02dbc28104f50c" translate="yes" xml:space="preserve">
          <source>If your object is a text node, you can use the data attribute and retrieve the text content of the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928774c703409e93284185ad3a9e4aa5662aa2dd" translate="yes" xml:space="preserve">
          <source>If your server worker is active on a client being served with the &lt;code&gt;Service-Worker-Allowed&lt;/code&gt; header, you can specify a list of max scopes for that worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa7872d7efb0b4aa058429a35ee098b246d1270" translate="yes" xml:space="preserve">
          <source>If your service worker has previously been installed, but then a new version of the worker is available on refresh or page load, the new version is installed in the background, but not yet activated. It is only activated when there are no longer any pages loaded that are still using the old service worker. As soon as there are no more such pages still loaded, the new service worker activates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76df2dff50c923af0a6405d710c7578a8c337839" translate="yes" xml:space="preserve">
          <source>If your web application is located at &lt;code&gt;http://burgers.example.com&lt;/code&gt;, you can register a protocol handler for it to handle &quot;web+burger&quot; links like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71319a867f98faf62cb623735c9564d15e7f874f" translate="yes" xml:space="preserve">
          <source>If your web application needs to open a new window, such as a tool palette which can contain multiple panels, and wants to position it so that it occupies the entire vertical space available, you can do so using code similar to what's seen here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a680d9483b3868a93a84513bcd595654a4f7ddc" translate="yes" xml:space="preserve">
          <source>If your website or application contains sound, you should allow the user control over it, otherwise again, it will become annoying. This can be achieved by play/stop and volume/mute controls. The &lt;a href=&quot;using_web_audio_api&quot;&gt;Using the Web Audio API&lt;/a&gt; tutorial goes over how to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec535b07f61356afe898f40b14788552c7417528" translate="yes" xml:space="preserve">
          <source>If, on the other hand, full-screen mode is already in effect, we call &lt;a href=&quot;../document/exitfullscreen&quot;&gt;&lt;code&gt;document.exitFullscreen()&lt;/code&gt;&lt;/a&gt; to disable full-screen mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e19fda0d5b4b74a4a1a1d584e56578693a4ea4" translate="yes" xml:space="preserve">
          <source>Image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67b58624e70884cd5de353ef28c3bbb3f37a0a4" translate="yes" xml:space="preserve">
          <source>Image Capture API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8058c6c0c0aa2f81cfb12c5a2bcf43626baa9eac" translate="yes" xml:space="preserve">
          <source>Image height used for reading pixel data from memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b809e76a21a719209ee49c813727e7e99304e7" translate="yes" xml:space="preserve">
          <source>Image quality parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f6c3ffdba16c05295820e4041709c6fed8c1df" translate="yes" xml:space="preserve">
          <source>Image smoothing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb38ec2700f360493809c3048ceffd73d54d64fa" translate="yes" xml:space="preserve">
          <source>Image smoothing mode; if disabled, images will not be smoothed if scaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef9de975cdef9d9d9b896b68103ad59db30e33a" translate="yes" xml:space="preserve">
          <source>ImageBitmap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a172a699ec49e865531d73b7ff007002bed3968" translate="yes" xml:space="preserve">
          <source>ImageBitmap as source image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ef406f9f61ca577f188d758aa109fead0b5ca8" translate="yes" xml:space="preserve">
          <source>ImageBitmap.close</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf57dcf8669982b860431d06057d5836299758a" translate="yes" xml:space="preserve">
          <source>ImageBitmap.height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea2645c6f967f0323119ce8124791a8376f8aeb" translate="yes" xml:space="preserve">
          <source>ImageBitmap.width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a39bdc5a33f203d5c2f138f0da931369fac84f" translate="yes" xml:space="preserve">
          <source>ImageBitmapRenderingContext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcf282e2a54020116d600d91b2efb28cb918414" translate="yes" xml:space="preserve">
          <source>ImageBitmapRenderingContext.transferFromImageBitmap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c336bfb3779001748cd68de43ea29f8f4e2569a" translate="yes" xml:space="preserve">
          <source>ImageCapture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a695339a52264bb2994df6ecb91dad6e435f6b8" translate="yes" xml:space="preserve">
          <source>ImageCapture.getPhotoCapabilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374d1f58469fe5602933c92421242cc8747d221e" translate="yes" xml:space="preserve">
          <source>ImageCapture.getPhotoSettings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e126b41711a703f83daf84c1eb49c4c3782628" translate="yes" xml:space="preserve">
          <source>ImageCapture.grabFrame</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc7753068a1704437db9b0f8e0afc5a1d89f952" translate="yes" xml:space="preserve">
          <source>ImageCapture.takePhoto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662f38ff55d3b6cd765669b3efdb2b563125e981" translate="yes" xml:space="preserve">
          <source>ImageCapture.track</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682b65e19d67a5e783299b757e21bec2832c6fb5" translate="yes" xml:space="preserve">
          <source>ImageData</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433ff3ce0a489a34348ec015a91ac57812bae7a7" translate="yes" xml:space="preserve">
          <source>ImageData.constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a6a7f4f47ce8116630d7d1001ca2096b4e0fc4" translate="yes" xml:space="preserve">
          <source>ImageData.data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3421601fdbdd23f2ad9b297dd2f67afe1f549c" translate="yes" xml:space="preserve">
          <source>ImageData.height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea11043e0fbc10e742c776244499730fa9dedae9" translate="yes" xml:space="preserve">
          <source>ImageData.width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09bb8217536875cfdc0cf5e6879fe4133d68af6" translate="yes" xml:space="preserve">
          <source>ImageElement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb8b6b3dbe77d633f235c892a1bfe52dc026eae" translate="yes" xml:space="preserve">
          <source>ImageSource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684812a1450c41e88a2cb1153fc732f6cb993fea" translate="yes" xml:space="preserve">
          <source>ImageValue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c10e289075f54ccf039276d9830b43d70658650" translate="yes" xml:space="preserve">
          <source>Imagine other ways we could use playbackRate, such as improving accessibility for users with vestibular disorders by letting them slow down animations across an entire site. That&amp;rsquo;s impossible to do with CSS without recalculating durations in every CSS rule, but with the Web Animations API, we could use the upcoming (not supported in browsers yet!) &lt;a href=&quot;../document/getanimations&quot;&gt;&lt;code&gt;document.getAnimations()&lt;/code&gt;&lt;/a&gt; method to loop over each animation on the page and halve their &lt;code&gt;playbackRate&lt;/code&gt;s, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1243e5f5f9ef2b40b2b0a0a62ea8ada7277c3647" translate="yes" xml:space="preserve">
          <source>Imagine that Naomi and Priya are engaged in a discussion using the chat software, and Naomi decides to open a video call between the two. Here's the expected sequence of events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c25d7b379891246cd58915a34a7659220f577d" translate="yes" xml:space="preserve">
          <source>Immediately after calling &lt;code&gt;stop()&lt;/code&gt;, the &lt;a href=&quot;readystate&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; state is set to &lt;code&gt;ended&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d810bee3172b9261e9eac941c91dc840d20d5aa" translate="yes" xml:space="preserve">
          <source>Immediately returns a transaction object (&lt;a href=&quot;idbtransaction&quot;&gt;&lt;code&gt;IDBTransaction&lt;/code&gt;&lt;/a&gt;) containing the &lt;a href=&quot;idbtransaction/objectstore&quot;&gt;&lt;code&gt;IDBTransaction.objectStore&lt;/code&gt;&lt;/a&gt; method, which you can use to access your object store. Runs in a separate thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b52a558205d7af53345cf107ceba8890735112" translate="yes" xml:space="preserve">
          <source>Immediately terminates the worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once. ServiceWorker instances do not support this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b33385dd6d86ef70719d6e10de5f1a2054743f" translate="yes" xml:space="preserve">
          <source>Immutability of the texture format and size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9efa870c9eb58ac7ec5d0106d206be5b17761ee" translate="yes" xml:space="preserve">
          <source>Implement Custom Gestures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c7f1f8651e55a0f3b93098c2dfb044a4d15453" translate="yes" xml:space="preserve">
          <source>Implementation and deployment status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c97711d45f1e786d989837b0e43e403cabab42" translate="yes" xml:space="preserve">
          <source>Implementation dependent number of maximum texture units. At least 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7562fff6a89b7185ca83a1afafada8cb2211bd3" translate="yes" xml:space="preserve">
          <source>Implementation differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad7939217fce1bf3517c4d7f04b40fec2aa121b" translate="yes" xml:space="preserve">
          <source>Implementation in Shadow DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bf2dc952ab6d2617aa9b9ee013534f9eeb5b62" translate="yes" xml:space="preserve">
          <source>Implementation notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58be97e0b51893ffcadc001b69f66a1581dcaca1" translate="yes" xml:space="preserve">
          <source>Implementation seems &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=19324&quot;&gt;defect&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5483d1883a3fb718909070b736ff9d0397a569" translate="yes" xml:space="preserve">
          <source>Implementation status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220c7622837d5d7cae9f7918c973f2a1cbe72e99" translate="yes" xml:space="preserve">
          <source>Implementation tracked in &lt;a href=&quot;https://bugzil.la/1290958&quot;&gt;bug 1290958&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a90de35060a0cc2b9770c959b6146dd7031ace" translate="yes" xml:space="preserve">
          <source>Implementation.createDocument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ca5b2dc56298eca7c2bced595749a236c8d727" translate="yes" xml:space="preserve">
          <source>Implementation.createDocumentType</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06020df99ff290a9493c8191ed7c2c6062e3214e" translate="yes" xml:space="preserve">
          <source>Implementation.createHTMLDocument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b7b4e6f46539a3eb03e2a39d84dff09faa0fc9" translate="yes" xml:space="preserve">
          <source>ImplementationList</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b1ea6a6f11c1f6ef7bf1265ba1e42e78f2f01c" translate="yes" xml:space="preserve">
          <source>Implemented a slightly different version of the spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a904e4fc692650dc2965e4983ec71e583e91f83" translate="yes" xml:space="preserve">
          <source>Implemented but disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89ae642b7cd47e1baa02eeafc53e2234054c503" translate="yes" xml:space="preserve">
          <source>Implemented from other places</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbbeb95ad4e9a2efc17a8aeec91d9b4ca7ed151" translate="yes" xml:space="preserve">
          <source>Implemented on &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/HTMLElement&quot;&gt;HTMLElement&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91713270fde79e05b406e666d19c7226fdae27e2" translate="yes" xml:space="preserve">
          <source>Implemented on &lt;code&gt;AudioContext&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0c940dda325630e616ff9c23c4dc64630b06c2" translate="yes" xml:space="preserve">
          <source>Implemented on the proprietary &lt;code&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hh826029(VS.85).aspx&quot;&gt;ClientRect&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c6f0ef5cb7c06f762c5402936f00c09119da66" translate="yes" xml:space="preserve">
          <source>Implemented via &lt;code&gt;ActiveXObject&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffbbd1f205a9acd3b6a1c4de5e7eb04225c5d98" translate="yes" xml:space="preserve">
          <source>Implementing &quot;infinite scrolling&quot; web sites, where more and more content is loaded and rendered as you scroll, so that the user doesn't have to flip through pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e62060d8bfcee57db088615e2645518fe8affb" translate="yes" xml:space="preserve">
          <source>Implementing controls using the Gamepad API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31309f5ed18c8823a30cc233e665b235c90da800" translate="yes" xml:space="preserve">
          <source>Implementing intersection detection in the past involved event handlers and loops calling methods like &lt;a href=&quot;element/getboundingclientrect&quot;&gt;&lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;&lt;/a&gt; to build up the needed information for every element affected. Since all this code runs on the main thread, even one of these can cause performance problems. When a site is loaded with these tests, things can get downright ugly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb52e57784810681740446b155dd8e8599f245b" translate="yes" xml:space="preserve">
          <source>Implements a general &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/infinite%20impulse%20response&quot;&gt;infinite impulse response&lt;/a&gt;&lt;/strong&gt; (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a94294f248c853b8d5834a66c58dd3b768af8a" translate="yes" xml:space="preserve">
          <source>Implements the document object model (DOM) representation of the font element. The HTML Font Element &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font&quot;&gt;&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt;&lt;/a&gt; defines the font size, font face and color of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974577006e52603b9cda5934d004c2ce6a39cbf1" translate="yes" xml:space="preserve">
          <source>Important Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39e930d0ac687b5ef91c92fd4b0d00ef6222ada8" translate="yes" xml:space="preserve">
          <source>Importing images into a canvas is basically a two step process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3332127ba0d69037527bca6aabf450833df70852" translate="yes" xml:space="preserve">
          <source>Importing scripts and libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824ccd6f23bc86a0f9b7c8ac337bcd06d1182948" translate="yes" xml:space="preserve">
          <source>Imports one or more scripts into the worker's scope. You can specify as many as you'd like, separated by commas. For example:&lt;code&gt; importScripts('foo.js', 'bar.js');&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec58694f82f582bcbd8a134122951729ea8fed8b" translate="yes" xml:space="preserve">
          <source>Improving HTML5 Canvas Performance &amp;ndash; HTML5 Rocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dc33df388b79e95964eb63f65372610e23edab" translate="yes" xml:space="preserve">
          <source>Improving compatibility using WebRTC adapter.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfb7efd6a8f89bcd77c65d86232cea4dc06d838" translate="yes" xml:space="preserve">
          <source>Improving scrolling performance with passive listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a480b0fbcba47707d27f84922b5a01fa531c028" translate="yes" xml:space="preserve">
          <source>In 1939 the &lt;a href=&quot;https://en.wikipedia.org/wiki/View-Master&quot;&gt;View-Master device&lt;/a&gt; was created, allowing people to see 3D pictures. The device displayed images stored on cardboard disks containing stereoscopic 3D pairs of small color photographs. After years of development the military got interested in using such technology, and Project Headsight was born in 1961 &amp;mdash; this involved a helmet incorporating a video screen with a head-tracking system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf771940420f8aa05cb387689da22ce33a2e7e17" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://caniuse.com/#search=noopener&quot;&gt;some browsers&lt;/a&gt;, a &lt;code&gt;rel=&quot;noopener&quot;&lt;/code&gt; attribute on the originating &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element will prevent the &lt;code&gt;window.opener&lt;/code&gt; reference from being set, in which case this property will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4f871c4dd93781ac9e0af814028225cdf965ef" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Selection/en/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, this method is called automatically when a function the selection object is passed to requires a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675d8600d33219a5208759d764f74ed5a33f8b8d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Quirks_Mode_and_Standards_Mode&quot;&gt;quirks mode&lt;/a&gt;, the class names are compared in a case-insensitive fashion. Otherwise, they're case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cdf692409a28e7be04db0cc7e1f36b8341f7b3" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://en.wikipedia.org/wiki/Through_the_Looking-Glass&quot;&gt;Through the Looking-Glass&lt;/a&gt;, Alice travels to a world where she must run to stay in place &amp;mdash; and run twice as fast to move forward! In the Red Queen&amp;rsquo;s Race example, Alice and the Red Queen are running to stay in place (check out the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV&quot;&gt;full code on Codepen&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18bcf12560be2ba38bc278505b142eae22a4ea5" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;getData()&lt;/code&gt; we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch an OGG music track. We also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource&quot;&gt;&lt;code&gt;AudioContext.createBufferSource&lt;/code&gt;&lt;/a&gt; to create an audio buffer source. When the fetch is successful, we read an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;arrayBuffer()&lt;/code&gt;, decode the audio data using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt;&lt;/a&gt;, set the decoded data as the audio buffer source's buffer (&lt;code&gt;source.buffer&lt;/code&gt;), then connect the source up to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination&quot;&gt;&lt;code&gt;AudioContext.destination&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b965fdcf008cc2931c67bac89c837499156f40cd" translate="yes" xml:space="preserve">
          <source>In Chrome 45, the ability to have multiple shadow roots was deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c49e3d00054aaf36ffaf34073be62eb34bdcd90" translate="yes" xml:space="preserve">
          <source>In Chrome 62 and newer you cannot request notification api at all unless the site is https:// secured. (see issue &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=779612&quot;&gt;779612&lt;/a&gt;) If you do have https on the site you should be able to use notifications &lt;em&gt;and&lt;/em&gt; background push notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c7b5b9c332ed1dc7e54d6b81e81ef5f66ccc46" translate="yes" xml:space="preserve">
          <source>In Chrome and Firefox, the 5th successive callback call is clamped; Safari clamps on the 6th call; in Edge its the 3rd one. Gecko started to treat &lt;code&gt;setInterval()&lt;/code&gt; like this in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/56&quot;&gt;version 56&lt;/a&gt; (it already did this with &lt;code&gt;setTimeout()&lt;/code&gt;; see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b285fb88d1d23e5c89ca38b0041fe0c0a19638a4" translate="yes" xml:space="preserve">
          <source>In Chrome and Safari, if the browser is not able to connect to a local area network (LAN) or a router, it is offline; all other conditions return &lt;code&gt;true&lt;/code&gt;. So while you can assume that the browser is offline when it returns a &lt;code&gt;false&lt;/code&gt; value, you cannot assume that a true value necessarily means that the browser can access the internet. You could be getting false positives, such as in cases where the computer is running a virtualization software that has virtual ethernet adapters that are always &quot;connected.&quot; Therefore, if you really want to determine the online status of the browser, you should develop additional means for checking. To learn more, see the HTML5 Rocks article, &lt;a href=&quot;http://www.html5rocks.com/en/mobile/workingoffthegrid.html&quot;&gt; Working Off the Grid&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f66ac87a18277292c16c81f87a3f7c412cce8a" translate="yes" xml:space="preserve">
          <source>In Chrome for Android, the method may instead open the URL in an existing browsing context provided by a &lt;a href=&quot;https://developer.mozilla.org/en-US/Apps/Progressive/Installable&quot;&gt;standalone web app&lt;/a&gt; previously added to the user's home screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54aee71f72439d923d73a00ea3b2c1b185da0b55" translate="yes" xml:space="preserve">
          <source>In Chrome, &lt;code&gt;navigator.language&lt;/code&gt; is the language of the browser UI, and is not guaranteed to be equal to &lt;code&gt;navigator.languages[0]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f067dc68dd1126ff144d4d0c9acd59e4a28c54da" translate="yes" xml:space="preserve">
          <source>In Chrome/Opera, the Quota Management API handles quota management for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Using_the_application_cache&quot;&gt;AppCache&lt;/a&gt;, &lt;a href=&quot;../indexeddb_api&quot;&gt;IndexedDB&lt;/a&gt;, WebSQL, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API&quot;&gt;File System API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4fbf0f99d809accdff4e6fe3d188b040258944" translate="yes" xml:space="preserve">
          <source>In DOM4 this API was moved from &lt;code&gt;Node&lt;/code&gt; to the &lt;a href=&quot;../element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../attr&quot;&gt;&lt;code&gt;Attr&lt;/code&gt;&lt;/a&gt; interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a2bb9868cd89f678d0493fad1f8fb986cade2e" translate="yes" xml:space="preserve">
          <source>In Development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337f02d9ef6a6531518b1f9943fb153f229afe90" translate="yes" xml:space="preserve">
          <source>In Firefox 2 through 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using &lt;a href=&quot;https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm&quot;&gt;the structured clone algorithm&lt;/a&gt;. This allows a wider variety of objects to be safely passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec52eda400278c480cefdfaffae5c0a720902ae" translate="yes" xml:space="preserve">
          <source>In Firefox 28, a default value of &lt;code&gt;false&lt;/code&gt; was added for &lt;code&gt;isRemote&lt;/code&gt;, to match a specification update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71824cc95a897064f08cc63ac731a61a7d1b839f" translate="yes" xml:space="preserve">
          <source>In Firefox 29 and later, enumeration of the &lt;code&gt;navigator.plugins&lt;/code&gt; array may be restricted as a privacy measure. Applications that must check for the presence of a browser plugin should query &lt;code&gt;navigator.plugins&lt;/code&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/navigator/mimeTypes&quot;&gt;&lt;code&gt;navigator.mimeTypes&lt;/code&gt;&lt;/a&gt; by exact name instead of enumerating the &lt;code&gt;navigator.plugins&lt;/code&gt; array and comparing every plugin's name. This privacy change does not disable any plugins; it just hides some plugin names from enumeration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d665de10575353f7b8c25c205e77d09dfd85a0" translate="yes" xml:space="preserve">
          <source>In Firefox 3, &lt;code&gt;dom.disable_window_open_feature.location&lt;/code&gt; now defaults to &lt;var&gt;true&lt;/var&gt;, forcing the presence of the Location Bar much like in IE7. See bug 337344 for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a997ba142dafe53ad096fa258086906b04dec7" translate="yes" xml:space="preserve">
          <source>In Firefox 3.5 and earlier, the namespace URI for HTML attributes in HTML documents is &lt;code&gt;null&lt;/code&gt;. In later versions, in compliance with HTML5, it is &lt;code&gt;&lt;a href=&quot;https://www.w3.org/1999/xhtml&quot;&gt;https://www.w3.org/1999/xhtml&lt;/a&gt;&lt;/code&gt; as in XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92861e335fdcf505b87df9fdca2bb30fa01f922" translate="yes" xml:space="preserve">
          <source>In Firefox 3.5 and earlier, the namespace URI for HTML elements in HTML documents is &lt;code&gt;null&lt;/code&gt;. In later versions, in compliance with HTML5, it is &lt;code&gt;&lt;a href=&quot;http://www.w3.org/1999/xhtml&quot;&gt;http://www.w3.org/1999/xhtml&lt;/a&gt;&lt;/code&gt; as in XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3080a7d69ecb124d6ce6db8bd6f6b51a7935923b" translate="yes" xml:space="preserve">
          <source>In Firefox 3.5 and earlier, the namespace URI for HTML elements in HTML documents is &lt;code&gt;null&lt;/code&gt;. In later versions, in compliance with HTML5, it is &lt;code&gt;&lt;a href=&quot;https://www.w3.org/1999/xhtml&quot;&gt;https://www.w3.org/1999/xhtml&lt;/a&gt;&lt;/code&gt; as in XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5ac43d4133318554d5c99a568d5233c7cc3fd3" translate="yes" xml:space="preserve">
          <source>In Firefox 55 and later, the standard &lt;code&gt;MessageEvent&lt;/code&gt; interface must be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c966bbb768e112ed78c63d897a665d7e5dd2e6" translate="yes" xml:space="preserve">
          <source>In Firefox 56, the implementation has been updated so that the &lt;code&gt;formAction&lt;/code&gt; property returns the correct form submission URL, as per spec, when the associated button is being used to submit a form (&lt;a href=&quot;https://bugzil.la/1366361&quot;&gt;bug 1366361&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1de833d68e13a376ac48787853f562a98b6e7e" translate="yes" xml:space="preserve">
          <source>In Firefox 57.0.4 the accuracy was reduced to 20 microseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c356bae3dabc646b737a05ce27657f53acb4ee2" translate="yes" xml:space="preserve">
          <source>In Firefox 59 the accuracy was reduced to 2 milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8e620e934ee8758c4c20b22973ebf3f61e4109" translate="yes" xml:space="preserve">
          <source>In Firefox 60 onwards, Mozilla resolves the relative URL against the global that owns the &lt;code&gt;fetch()&lt;/code&gt; function being used (see &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1432272&quot;&gt;bug 1432272&lt;/a&gt;). So in the case described above, it is resolved against the iframe's location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a8e43d431661433d21232663f89aa9969d6533" translate="yes" xml:space="preserve">
          <source>In Firefox and Internet Explorer, switching the browser to offline mode sends a &lt;code&gt;false&lt;/code&gt; value. Until Firefox 41, all other conditions return a &lt;code&gt;true&lt;/code&gt; value; since Firefox 41, on OS X and Windows, the value will follow the actual network connectivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c1940f3611c4b86f163e78b87bc7c85ba4d690" translate="yes" xml:space="preserve">
          <source>In Firefox versions prior to 21, when an element's content does not generate a vertical scrollbar, then its &lt;code&gt;scrollHeight&lt;/code&gt; property is equal to its &lt;code&gt;clientHeight&lt;/code&gt; property. This can mean either the content is too short to require a scrollbar or that the element has a CSS style &lt;code&gt;overflow&lt;/code&gt; value of &lt;code&gt;visible&lt;/code&gt; (non-scrollable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd08ef4cf82279418d308a11cc78804ac191030" translate="yes" xml:space="preserve">
          <source>In Firefox, IndexedDB used to be &lt;strong&gt;durable&lt;/strong&gt;, meaning that in a readwrite transaction &lt;a href=&quot;../idbtransaction/oncomplete&quot;&gt;&lt;code&gt;IDBTransaction.oncomplete&lt;/code&gt;&lt;/a&gt; was fired only when all data was guaranteed to have been flushed to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699566e86bfea718b81173da445b60d3b6f12670" translate="yes" xml:space="preserve">
          <source>In Firefox, Service Worker APIs are hidden and cannot be used when the user is in &lt;a href=&quot;https://support.mozilla.org/en-US/kb/private-browsing-use-firefox-without-history&quot;&gt;private browsing mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d8290f7debd4e56e886c8df3121b2adbf65a69" translate="yes" xml:space="preserve">
          <source>In Firefox, for example, the URL bar displays a pulsing red icon to indicate that recording is underway. The icon is gray if the permission is in place but recording is not currently underway. The device's physical light is used to indicate whether or not recording is currently active. If you've muted your camera (so-called &quot;facemuting&quot;), your camera's activity light goes out to indicate that the camera is not actively recording you, without discarding the permission to resume using the camera once muting is over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c82245bd95dcfac73cafd3ba3210594bc92f469" translate="yes" xml:space="preserve">
          <source>In Firefox, if you want to use workers in extensions and would like to have access to &lt;a href=&quot;https://developer.mozilla.org/en/js-ctypes&quot;&gt;js-ctypes&lt;/a&gt;, you should use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ChromeWorker&quot;&gt;&lt;code&gt;ChromeWorker&lt;/code&gt;&lt;/a&gt; object instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8914159442e80df8099ca51c082acb365bd61b" translate="yes" xml:space="preserve">
          <source>In Firefox, properties with the value &lt;code&gt;auto&lt;/code&gt; return the used value, not the value &lt;code&gt;auto&lt;/code&gt;. So if you apply &lt;code&gt;top:auto;&lt;/code&gt; and &lt;code&gt;bottom:0&lt;/code&gt;; on an element with &lt;code&gt;height:30px&lt;/code&gt; and its containing block is &lt;code&gt;height:100px;&lt;/code&gt;, upon requesting the computed style for &lt;code&gt;top&lt;/code&gt;, Firefox will return &lt;code&gt;top:70px&lt;/code&gt;, as &lt;code&gt;100px-30px=70px&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e17f5c2b6e442fb2a20335f450280528d3db72" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; interface was implemented under the name &lt;code&gt;DataChannel&lt;/code&gt; until Firefox 24, so this method was called &lt;code&gt;DataChannel.close()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4638eb6c3edc893c5f7e60a5d659564a141e1e6f" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;errorCallback&lt;/code&gt;'s input parameter is a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/DOMException&quot;&gt;DOMException&lt;/a&gt;&lt;/code&gt; rather than a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/FileError&quot;&gt;FileError&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc179879e4aed7054b76d3595ac19ab9fe7da77" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;navigator.languages&lt;/code&gt; property's value is taken from the &lt;code&gt;intl.accept_languages&lt;/code&gt; preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422c70e74377e61230d6ff77f5b81b2a0af614e5" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 1ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af97ad69484c392ea6d2c53e11669126d6b3def" translate="yes" xml:space="preserve">
          <source>In Firefox, the &lt;code&gt;privacy.reduceTimerPrecision&lt;/code&gt; preference is enabled by default and defaults to 20us in Firefox 59; in 60 it will be 2ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5019bc9c007e827a1c609f4fe3c72561adc0a10" translate="yes" xml:space="preserve">
          <source>In Firefox, the following technologies make use of browser data storage to store data when required. We term them &quot;quota clients&quot; in this context:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d953e2599e083f8092a3c98359d666f4ee108786" translate="yes" xml:space="preserve">
          <source>In Firefox, the method is allowed to show popups only when called as the result of a notification click event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f1a9d5d1c45766df33629813e914f98fb77bc9" translate="yes" xml:space="preserve">
          <source>In Firefox, the storage access grants are phased out after a number of days passing, whereas in Safari the storage access grants are phased out after a number of days of browser usage passed. This is currently a limitation of the Firefox implementation, which we may address in a future version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bf8d36e8b6b00e69eb29bddf9ff8c8692d9d2e" translate="yes" xml:space="preserve">
          <source>In Firefox, to have the PDF appear embedded in the iframe (rather than proposed as a downloaded file), the preference &lt;code&gt;pdfjs.disabled&lt;/code&gt; must be set to &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05fdf6b8b8b3dd7538d9f70f3454fb69d9c4491" translate="yes" xml:space="preserve">
          <source>In Firefox, touch events are disabled when e10s (electrolysis; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Multiprocess_Firefox&quot;&gt;multiprocess Firefox&lt;/a&gt;) is disabled. e10s is on by default in Firefox, but can end up becoming disabled in certain situations, for example when certain accessibility tools or Firefox add-ons are installed that require e10s to be disabled to work. This means that even on a touchscreen-enabled desktop/laptop, touch events won't be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d17a507e570927a04193dbc4eb28d7daed5ea77" translate="yes" xml:space="preserve">
          <source>In Firefox, when persistent storage is used, the user is given a UI popup to alert them that this data will persist, and asks if they are happy with that. Temporary data storage does not elicit any user prompts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226c00242c83a17c60505135221e72d92ae3a07a" translate="yes" xml:space="preserve">
          <source>In Firefox, when the promise returned from &lt;code&gt;requestStorageAccess()&lt;/code&gt; is resolved, the embedded page will gain access to its entire first-party storage, not just cookies. This includes access to APIs such as &lt;a href=&quot;web_storage_api&quot;&gt;Web Storage&lt;/a&gt;, &lt;a href=&quot;indexeddb_api&quot;&gt;IndexedDB&lt;/a&gt;, &lt;a href=&quot;cache&quot;&gt;DOM Cache&lt;/a&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f59e93c02ff648ca9cbab0045be7035480a65f" translate="yes" xml:space="preserve">
          <source>In Firefox, windows in background tabs each have their own time budget in milliseconds &amp;mdash; a max and a min value of +50 ms and -150 ms, respectively. Chrome is very similar except that the budget is specified in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814b66f8a38d60175752d4fa0ee4d1b4e2f7719f" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enable &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; &amp;mdash; this changes the precision to 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88be9b8c2e6a3862daa95b3e9e9a80626dc191ea" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enable &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;; the precision will be 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7ba06ca4f441cd2e83c2b7bd2b5b0d766466d1" translate="yes" xml:space="preserve">
          <source>In Firefox, you can also enabled &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt;, the precision will be 100ms or the value of &lt;code&gt;privacy.resistFingerprinting.reduceTimerPrecision.microseconds&lt;/code&gt;, whichever is larger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93f1f29a1a271317104252ea61346016bb795cb" translate="yes" xml:space="preserve">
          <source>In Firefox, you can change the preference &lt;code&gt;general.useragent.override&lt;/code&gt; in &lt;code&gt;about:config&lt;/code&gt;. Some Firefox extensions do that; however, this only changes the HTTP header that gets sent, and doesn't affect browser detection performed by JavaScript code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7070c56ceec36fc5064c9ae27adec33e00061e4d" translate="yes" xml:space="preserve">
          <source>In Gecko (the rendering engine of Firefox, Firefox OS and other Mozilla based applications), some &lt;a href=&quot;../../canvasrenderingcontext2d#Prefixed_APIs&quot;&gt;prefixed APIs&lt;/a&gt; were implemented in earlier versions to draw text on a canvas. These are now deprecated and removed, and are no longer guaranteed to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabe05e3b1671b55f141dc64b65baf19240eca59" translate="yes" xml:space="preserve">
          <source>In Gecko, since &lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Releases/26&quot;&gt;version 26&lt;/a&gt;, you can include a non-standard &lt;code&gt;options&lt;/code&gt; object as a parameter of &lt;a href=&quot;open&quot;&gt;&lt;code&gt;IDBFactory.open&lt;/code&gt;&lt;/a&gt; that contains the &lt;code&gt;version&lt;/code&gt; number of the database, plus a storage value that specifies whether you want to use &lt;code&gt;persistent&lt;/code&gt; or &lt;code&gt;temporary&lt;/code&gt; storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ac10976b8d679cc89930c3b91da392e3882a43" translate="yes" xml:space="preserve">
          <source>In Gecko, since &lt;a href=&quot;https://developer.mozilla.org/en-US/Firefox/Releases/26&quot;&gt;version 26&lt;/a&gt;, you can include a non-standard optional storage parameter that specifies whether you want to delete a &lt;code&gt;permanent&lt;/code&gt; (the default value) IndexedDB, or an indexedDB in &lt;code&gt;temporary&lt;/code&gt; storage (aka shared pool.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8baf31a352acff2b0105a6a3a42c4c1b4ee0661e" translate="yes" xml:space="preserve">
          <source>In Gecko, when you set a system font as the value of a canvas 2D context's &lt;a href=&quot;font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;menu&lt;/code&gt;), getting the font value fails to return the expected font (it returns nothing). This is fixed in Firefox's new parallel CSS engine (also known as &lt;a href=&quot;https://wiki.mozilla.org/Quantum&quot;&gt;Quantum CSS&lt;/a&gt; or &lt;a href=&quot;https://wiki.mozilla.org/Quantum/Stylo&quot;&gt;Stylo&lt;/a&gt;, planned for release in Firefox 57) (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1374885&quot;&gt;bug 1374885&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d9a6b8134d9d220bf49a22e472acda9ba45b4f" translate="yes" xml:space="preserve">
          <source>In Gecko, you can use this API from within chrome code. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Extensions/Using_the_DOM_File_API_in_chrome_code&quot;&gt;Using the DOM File API in chrome code&lt;/a&gt; for details. To use it from chrome code, JSM, and Bootstrap scope, you have to import it using &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Components.utils.importGlobalProperties&quot;&gt;Cu.importGlobalProperties&lt;/a&gt;(['File']);&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bce110ce739be1d88c2e456860bfff086fbce0" translate="yes" xml:space="preserve">
          <source>In Gecko-based browsers, such as Firefox, a non-standard and deprecated property &lt;code&gt;ctx.mozTextStyle&lt;/code&gt; is implemented besides this property. Don't use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b28a4edc686e5891a33eb10e5ea42bae6b298d" translate="yes" xml:space="preserve">
          <source>In HTML, apart from the default behavior for images, links, and selections, no other elements are draggable by default. In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL&quot;&gt;XUL&lt;/a&gt;, all elements are draggable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76df23da947ec4864d13fbce74cde6a0fc0ad596" translate="yes" xml:space="preserve">
          <source>In Internet Explorer (IE), the &lt;code&gt;name&lt;/code&gt; property of DOM objects created using &lt;a href=&quot;../document/createelement&quot;&gt;&lt;code&gt;document.createElement()&lt;/code&gt;&lt;/a&gt; can't be set or modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9af8f116b9548c08adfed9f852f67ef221a8d9" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 9, the host of an  always include the port (e.g. &lt;code&gt;developer.mozilla.org:443&lt;/code&gt;), even if there is no explicit port in the &lt;code&gt;href&lt;/code&gt; attribute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1012009e448d6962290cd860063c4efd310055f" translate="yes" xml:space="preserve">
          <source>In Internet Explorer versions before IE 9, you have to use &lt;a href=&quot;addeventlistener&quot;&gt;&lt;code&gt;attachEvent()&lt;/code&gt;&lt;/a&gt;, rather than the standard &lt;code&gt;addEventListener()&lt;/code&gt;. For IE, we modify the preceding example to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8769c75bfcdf612ab218af0d40562a89c5412a0" translate="yes" xml:space="preserve">
          <source>In Internet Explorer, all events are trusted except those that are created with the &lt;code&gt;createEvent()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbec194b620319b090f4ce9324ecfa2289e8f3e0" translate="yes" xml:space="preserve">
          <source>In Internet Explorer, the timeout property may be set only after calling the &lt;a href=&quot;open&quot;&gt;open()&lt;/a&gt; method and before calling the &lt;a href=&quot;send&quot;&gt;send()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f297f045e77efbbfc858432c4ae17eef0a17f00d" translate="yes" xml:space="preserve">
          <source>In Jake Archibald's &lt;a href=&quot;https://jsbin.com/gameboy/edit?js,console&quot;&gt;cancelling a fetch&lt;/a&gt; example, a stream is used to fetch the WHATWG HTML spec chunk by chunk; each chunk is searched for the string &quot;service workers&quot;. When the search terms is found, &lt;code&gt;cancel()&lt;/code&gt; is used to cancel the stream &amp;mdash; the job is finished so it is no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0731126fd7db6c280f7a82e9052bd221299fd507" translate="yes" xml:space="preserve">
          <source>In JavaScript there are two functions respectively for decoding and encoding &lt;em&gt;base64&lt;/em&gt; strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc530bc6a80cb9969b7735ef3f67e2e210f7e069" translate="yes" xml:space="preserve">
          <source>In JavaScript, this is achieved via the &lt;a href=&quot;../readablestream/tee&quot;&gt;&lt;code&gt;ReadableStream.tee()&lt;/code&gt;&lt;/a&gt; method &amp;mdash; it outputs an array containing two identical copies of the original readable stream, which can then be read independently by two separate readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe9f6a47bfe2501e2a412926d76d2aaecfa69a9" translate="yes" xml:space="preserve">
          <source>In JavaScript, using the array bracket syntax with a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, like &lt;code&gt;&lt;em&gt;selectElt&lt;/em&gt;[&quot;value&quot;]&lt;/code&gt; is equivalent to &lt;code&gt;&lt;em&gt;selectElt&lt;/em&gt;&lt;/code&gt;&lt;code&gt;.namedItem(&quot;value&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9b2583c45fb17c1e81601acfbe654df6c26f47" translate="yes" xml:space="preserve">
          <source>In JavaScript, using the array bracket syntax with an &lt;code&gt;unsigned long&lt;/code&gt;, like &lt;code&gt;&lt;em&gt;selectElt&lt;/em&gt;[&lt;em&gt;idx&lt;/em&gt;]&lt;/code&gt; is equivalent to &lt;code&gt;&lt;em&gt;selectElt&lt;/em&gt;&lt;/code&gt;&lt;code&gt;.namedItem(&lt;em&gt;idx&lt;/em&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50dc20d933b4a4d292b6163114bdc8dd4c81aeac" translate="yes" xml:space="preserve">
          <source>In JavaScript, when an object is passed to a function expecting a string (like &lt;a href=&quot;../window/alert&quot;&gt;&lt;code&gt;Window.alert()&lt;/code&gt;&lt;/a&gt;), the object's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method is called and the returned value is passed to the function. This can make the object appear to be a string when used with other functions when it is really an object with properties and methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ef7c9193969970e6994b69e5fb0fd8d3e972c7" translate="yes" xml:space="preserve">
          <source>In JavaScript, when an object is passed to a function expecting a string (like &lt;a href=&quot;alert&quot;&gt;&lt;code&gt;window.alert()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../document/write&quot;&gt;&lt;code&gt;document.write()&lt;/code&gt;&lt;/a&gt;), the object's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method is called and the returned value is passed to the function. This can make the object appear to be a string when used with other functions when it is really an object with properties and methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ee0b878e99dac03ea78cd3c1d63e034b7957af" translate="yes" xml:space="preserve">
          <source>In MSIE 6 for XP SP2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df60aa7e19fc5e9d9e114120ab6cf670903429b" translate="yes" xml:space="preserve">
          <source>In MSIE 6 for XP SP2: For windows opened using &lt;code&gt;window.open()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f428615ed91f21f66bab2fa33dcf7a79983a9f" translate="yes" xml:space="preserve">
          <source>In MSIE 6, the nearest equivalent to this feature is the &lt;code&gt;showModelessDialog()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b6710cc9fc9e013712902727fa9c243c7557e9" translate="yes" xml:space="preserve">
          <source>In Opera 32, the ability to have multiple shadow roots was deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe41eb685be5f16a3fc466a41fd05bfb2bb623f8" translate="yes" xml:space="preserve">
          <source>In Opera, this method is blocked inside an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; unless its sandbox attribute has the value &lt;code&gt;allow-modals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86711236e970b3355a2d317ba189dd9003d379b1" translate="yes" xml:space="preserve">
          <source>In React native simulator, navigator.geolocation.getCurrentPosition() returns coordinates of San Francisco (37,-122)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57ebac206e798efc3ba41d1708fdbf06e97a55b" translate="yes" xml:space="preserve">
          <source>In Web Audio, complex 3D spatializations are created using the &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt;, which in layman's terms is basically a whole lotta cool maths to make audio appear in 3D space. Think sounds flying over you, creeping up behind you, moving across in front of you. That sort of thing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbff28ee8699bb24155b33da2d8102ba2bac1b2f" translate="yes" xml:space="preserve">
          <source>In WebGL 2, other queries (such as occlusion queries and primitive queries) are possible using &lt;a href=&quot;webglquery&quot;&gt;&lt;code&gt;WebGLQuery&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8348b853532b86f3c4eb5f47e10226fb27c904" translate="yes" xml:space="preserve">
          <source>In WebGL 2, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GetQueryObject&quot;&gt;&lt;code&gt;getQueryObject&lt;/code&gt;&lt;/a&gt; was renamed to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GetQueryParameter&quot;&gt;&lt;code&gt;getQueryParameter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc74714e29fdf4ec27875e11090d544619ffa9c5" translate="yes" xml:space="preserve">
          <source>In WebGL, constant color and constant alpha cannot be used together as source and destination factors in the blend function. See section 6.13. of the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce407b6d7057cc13bbcddff930c372e00bfa466" translate="yes" xml:space="preserve">
          <source>In WebGL, objects are built using sets of vertices, each of which has a position and a color; by default, all other pixels' colors (and all its other attributes, including position) are computed using interpolation, automatically creating smooth gradients. Previously, our vertex shader didn't apply any specific colors to the vertices; between this and the fragment shader assigning the fixed color of white to each pixel, the entire square was rendered as solid white.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a56a78d439d3f52a2060db1bbf57b3913d73d7" translate="yes" xml:space="preserve">
          <source>In WebGL, values that apply to a specific vertex are stored in &lt;a href=&quot;../webgl_api/data#Attributes&quot;&gt;attributes&lt;/a&gt;. These are only available to the JavaScript code and the vertex shader. Attributes are referenced by an index number into the list of attributes maintained by the GPU. Some vertex attribute indices may have predefined purposes, depending on the platform and/or the GPU. Others are assigned by the WebGL layer when you create the attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babd0a286b77a2c23f030b96a8529cabcfa2a9ab" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based Browsers, a non-standard and deprecated method &lt;code&gt;ctx.setAlpha()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2886bdddd415bcc5f07f47da7635449fbd90295" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based Browsers, a non-standard and deprecated method &lt;code&gt;ctx.setCompositeOperation()&lt;/code&gt; is implemented besides this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56415221680b7086db38ccd799284c36ede7deb" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based Browsers, a non-standard and deprecated method &lt;code&gt;ctx.setLineCap()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7896c0e7fd6f0a6d6113498686b3685dd3d51f87" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based Browsers, a non-standard and deprecated method &lt;code&gt;ctx.setLineJoin()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee03c0fa2d47cbc2fcebfd38bae5706f114493db" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based Browsers, a non-standard and deprecated method &lt;code&gt;ctx.setLineWidth()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8136be5e0bd96f1c939cfedc3dbd53b9ba047ee1" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based Browsers, a non-standard and deprecated method &lt;code&gt;ctx.setMiterLimit()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08734d623b9332b4871d658938a3a76343b1edb7" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based browsers, the non-standard and deprecated method &lt;code&gt;ctx.setFillColor()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8345eea03606bb45a0d767293613aa7a52287b" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based browsers, the non-standard and deprecated method &lt;code&gt;ctx.setShadow()&lt;/code&gt; is implemented besides this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdee8e5c78a56e49134692ae4cbc4886d5332a0d" translate="yes" xml:space="preserve">
          <source>In WebKit- and Blink-based browsers, the non-standard and deprecated method &lt;code&gt;ctx.setStrokeColor()&lt;/code&gt; is implemented in addition to this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe23908f69dad5945cd3ab5739ac032c31234958" translate="yes" xml:space="preserve">
          <source>In WebKit-based browsers (e.g. Safari), the non-standard and deprecated property &lt;code&gt;webkitLineDashOffset&lt;/code&gt; is implemented besides this method. Use &lt;code&gt;lineDashOffset&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a41e07273af95e569869de7e5770c920a4b87b" translate="yes" xml:space="preserve">
          <source>In WebKit-based browsers (e.g., Safari), the non-standard and deprecated property &lt;code&gt;webkitLineDash&lt;/code&gt; is implemented besides this method. Use &lt;code&gt;getLineDash()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ac1306d5334fd03c474849a643e816f9249b43" translate="yes" xml:space="preserve">
          <source>In WebKit-based browsers (e.g., Safari), the non-standard and deprecated property &lt;code&gt;webkitLineDash&lt;/code&gt; is implemented besides this method. Use &lt;code&gt;setLineDash()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1074a9ad497a881350ea353edcc331a1bd919a52" translate="yes" xml:space="preserve">
          <source>In XHTML (or any other XML format), &lt;code&gt;text_field&lt;/code&gt;'s value would read &quot;div&quot;. However, in HTML, &lt;code&gt;text_field&lt;/code&gt;'s value would read &quot;DIV&quot;, because &lt;code&gt;nodeName&lt;/code&gt; and &lt;code&gt;tagName&lt;/code&gt; return in upper case on HTML elements in DOMs flagged as HTML documents. Read more &lt;a href=&quot;http://ejohn.org/blog/nodename-case-sensitivity/&quot;&gt;details on nodeName case sensitivity in different browsers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9408e22bb7885624859160370a74cf5240766138" translate="yes" xml:space="preserve">
          <source>In XHTML (or any other XML format), the original case will be maintained, so &lt;code&gt;&quot;span&quot;&lt;/code&gt; would be output in case the original tag name was created lowercase. In HTML, &lt;code&gt;&quot;SPAN&quot;&lt;/code&gt; would be output instead regardless of the case used while creating the original document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41343eca20c588bceac15e00f8699e4c3d55b35" translate="yes" xml:space="preserve">
          <source>In XML, a CDATA section looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d5c7dc1acb5bb6581d05b8004aa1fb5cfacb218" translate="yes" xml:space="preserve">
          <source>In XUL, accessing &lt;code&gt;document.title&lt;/code&gt; before the document is fully loaded has undefined behavior: &lt;code&gt;document.title&lt;/code&gt; may return an empty string and setting &lt;code&gt;document.title&lt;/code&gt; may have no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0379952f2f06b5c260c5c2c88513e5c5c920720" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL&quot;&gt;XUL&lt;/a&gt; document, it creates the specified XUL element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c412148edddbf3d435dd5db9ad1fe25a3c8283b" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-controlling-user-agent&quot;&gt;controlling user agent&lt;/a&gt;, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999ecf606391460770c476ca8a7251cfdf10dcb5" translate="yes" xml:space="preserve">
          <source>In a &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-receiving-user-agent&quot;&gt;receiving user agent&lt;/a&gt;, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa846a16d1454a185d63cdd88529d2c99daba49" translate="yes" xml:space="preserve">
          <source>In a WebGL program data is typically uploaded to the GPU with its own coordinate system and then the vertex shader transforms those points into a different coordinate system known as &lt;strong&gt;clip space&lt;/strong&gt;. If any data is outside of the clip space, then it is clipped off and not rendered. However, if a triangle straddles the border of this space then it is chopped up into new triangles, and only the parts of the new triangles that are in clip space are kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6805dd35b91a76558c3a720196f4d46750aaff29" translate="yes" xml:space="preserve">
          <source>In a few years, the &lt;a href=&quot;http://www.w3.org/TR/2004/WD-css3-hyperlinks-20040224/#target0&quot;&gt;target property of the CSS3 hyperlink module&lt;/a&gt; may be implemented (if CSS3 Hyperlink module as it is right now is approved). And even if and when this happens, you can expect developers of browsers with tab-browsing to give the user entire veto power and full control over how links can open web pages. How to open a link should always be entirely under the control of the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288257a333692380d62324a4e5d6b072936e1384" translate="yes" xml:space="preserve">
          <source>In a multi-pointer scenario (such as a touch screen that supports more than one touch point), this property is used to identify a &lt;em&gt;master pointer&lt;/em&gt; among the set of active pointers for each pointer type. Only a primary pointer will produce &lt;em&gt;compatibility mouse events&lt;/em&gt;. Authors who desire only single-pointer interaction can achieve that by ignoring non-primary pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217ea5cca9699504b57fcecb48b0029845d1abba" translate="yes" xml:space="preserve">
          <source>In a nutshell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d627150af604a4dbe3d4a3367b0a4a58b248d7b" translate="yes" xml:space="preserve">
          <source>In a previous version of the specification, the &lt;code&gt;dopplerFactor&lt;/code&gt; and &lt;code&gt;speedOfSound&lt;/code&gt; properties and the &lt;code&gt;setPosition()&lt;/code&gt; method could be used to control the doppler effect applied to &lt;a href=&quot;audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;s connected downstream &amp;mdash; these would be pitched up and down according to the relative speed of the &lt;a href=&quot;pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;audiolistener&quot;&gt;&lt;code&gt;AudioListener&lt;/code&gt;&lt;/a&gt;. These features had a number of problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf5e271e1a32d32d2624fbcd6515aea5ae46e57" translate="yes" xml:space="preserve">
          <source>In a sense, calling &lt;code&gt;pushState()&lt;/code&gt; is similar to setting &lt;code&gt;window.location = &quot;#foo&quot;&lt;/code&gt;, in that both will also create and activate another history entry associated with the current document. But &lt;code&gt;pushState()&lt;/code&gt; has a few advantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa6cf9c56e6ae6a4f5ab220b4d4141195d66294" translate="yes" xml:space="preserve">
          <source>In a tabbed browser, each tab is represented by its own &lt;code&gt;Window&lt;/code&gt; object; the global &lt;code&gt;window&lt;/code&gt; seen by JavaScript code running within a given tab always represents the tab in which the code is running. That said, even in a tabbed browser, some properties and methods still apply to the overall window that contains the tab, such as &lt;a href=&quot;window/resizeto&quot;&gt;&lt;code&gt;resizeTo()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;window/innerheight&quot;&gt;&lt;code&gt;innerHeight&lt;/code&gt;&lt;/a&gt;. Generally, anything that can't reasonably pertain to a tab pertains to the window instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0536baeee3d104653cc45d1fb8b1017731de67" translate="yes" xml:space="preserve">
          <source>In a traditional relational data store, you would have a table that stores a collection of rows of data and columns of named types of data. IndexedDB, on the other hand, requires you to create an object store for a type of data and simply persist JavaScript objects to that store. Each object store can have a collection of indexes that makes it efficient to query and iterate across. If you are not familiar with object-oriented database management systems, read the &lt;a href=&quot;https://en.wikipedia.org/wiki/Object_database&quot;&gt;Wikipedia article on object database&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8ade8105095ec309d14f4e476d9c3c6d2063ab" translate="yes" xml:space="preserve">
          <source>In a web page, you should call the &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; method of the event if you have accepted the drop so that the default browser handling does not handle the dropped data as well. For example, when a link is dragged to a web page, Firefox will open the link. By cancelling the event, this behavior will be prevented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff780bc261ece6b341c72d1d771a03d00ba330c3" translate="yes" xml:space="preserve">
          <source>In addition to &quot;clamping&quot;, the timeout can also fire later when the page (or the OS/browser itself) is busy with other tasks. One important case to note is that the function or code snippet cannot be executed until the thread that called &lt;code&gt;setTimeout()&lt;/code&gt; has terminated. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24e4392b4e9e9a4bbe883663a270f90bfeb2816" translate="yes" xml:space="preserve">
          <source>In addition to being able to obtain direct access to the audio tracks present on a media element, &lt;code&gt;AudioTrackList&lt;/code&gt; lets you set event handlers on the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/addtrack&quot;&gt;addtrack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/removetrack&quot;&gt;removetrack&lt;/a&gt;&lt;/code&gt; events, so that you can detect when tracks are added to or removed from the media element's stream. See &lt;a href=&quot;audiotracklist/onaddtrack&quot;&gt;&lt;code&gt;onaddtrack&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;audiotracklist/onremovetrack&quot;&gt;&lt;code&gt;onremovetrack&lt;/code&gt;&lt;/a&gt; for details and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656746f7a9df8510b6e10d45fa72ee932e5e8412" translate="yes" xml:space="preserve">
          <source>In addition to being able to obtain direct access to the video tracks present on a media element, &lt;code&gt;VideoTrackList&lt;/code&gt; lets you set event handlers on the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/addtrack&quot;&gt;addtrack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/removetrack&quot;&gt;removetrack&lt;/a&gt;&lt;/code&gt; events, so that you can detect when tracks are added to or removed from the media element's stream. See &lt;a href=&quot;videotracklist/onaddtrack&quot;&gt;&lt;code&gt;onaddtrack&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;videotracklist/onremovetrack&quot;&gt;&lt;code&gt;onremovetrack&lt;/code&gt;&lt;/a&gt; for details and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a2c464f89ef065a7335ebc826ecd5b324ced11" translate="yes" xml:space="preserve">
          <source>In addition to dedicated and shared web workers, there are other types of worker available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366c222257acfd309728f5961616ecb086e90c83" translate="yes" xml:space="preserve">
          <source>In addition to dedicated workers, there are other types of worker:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16392a45a9b827117cf70215450ef600443f2836" translate="yes" xml:space="preserve">
          <source>In addition to drawing opaque shapes to the canvas, we can also draw semi-transparent (or translucent) shapes. This is done by either setting the &lt;code&gt;globalAlpha&lt;/code&gt; property or by assigning a semi-transparent color to the stroke and/or fill style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd211c409f437601aaddd6ae22f663ba9462e483" translate="yes" xml:space="preserve">
          <source>In addition to listing each plugin as a pseudo-array by zero-indexed numeric properties, Firefox provides properties that are the plugin name directly on the &lt;a href=&quot;../pluginarray&quot;&gt;PluginArray&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48ba43945b2765441aa4000a7ca5686d0fbfef7" translate="yes" xml:space="preserve">
          <source>In addition to listing each plugin as a pseudo-array by zero-indexed numeric properties, Firefox provides properties that are the plugin name directly on the PluginArray object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782d6da4074fe0bad62b0b984bfe97ed5dd08cfe" translate="yes" xml:space="preserve">
          <source>In addition to multiplying a matrix and a point together, you can also multiply two matrices together. The function from above can be re-used to help out in this process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a600d92586516eb0a554a16b05080875a144db3a" translate="yes" xml:space="preserve">
          <source>In addition to pausing and playing, we can use the following Animation methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d940765c3ba878ab1b52a7410aa7947d98222158" translate="yes" xml:space="preserve">
          <source>In addition to the browser, the GPU itself also needs to support the feature. So, for example, S3 Texture Compression (S3TC) is only available on Tegra-based tablets. Most browsers make the WebGL context available through the &lt;code&gt;webgl&lt;/code&gt; context name, but older ones need &lt;code&gt;experimental-webgl&lt;/code&gt; as well. In addition, the upcoming &lt;a href=&quot;webgl2renderingcontext&quot;&gt;WebGL 2&lt;/a&gt; is fully backwards-compatible and will have the context name &lt;code&gt;webgl2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c0bca569bcdcf4d36d4b291e994357e7f94b1d" translate="yes" xml:space="preserve">
          <source>In addition to the error codes sent to the &lt;a href=&quot;../idbrequest&quot;&gt;&lt;code&gt;IDBRequest&lt;/code&gt;&lt;/a&gt; object, asynchronous operations can also raise exceptions. The list describes problems that could occur when the request is being executed, but you might also encounter other problems when the request is being made. For example, if the the request failed and the result is not available, the InvalidStateError exception is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882c413e72831d5bc1dee0fdf814b5854a71d7a0" translate="yes" xml:space="preserve">
          <source>In addition to the information below, you'll find a how-to guide for using HTML data attributes in our article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes&quot;&gt;Using data attributes.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233fbcddd9dcfa28b52108b770af9293069945a2" translate="yes" xml:space="preserve">
          <source>In addition to the properties listed below, &lt;code&gt;MediaStreamTrack&lt;/code&gt; has constrainable properties which can be set using &lt;a href=&quot;mediastreamtrack/applyconstraints&quot;&gt;&lt;code&gt;applyConstraints()&lt;/code&gt;&lt;/a&gt; and accessed using &lt;a href=&quot;mediastreamtrack/getconstraints&quot;&gt;&lt;code&gt;getConstraints()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mediastreamtrack/getsettings&quot;&gt;&lt;code&gt;getSettings()&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;media_streams_api/constraints&quot;&gt;Capabilities, constraints, and settings&lt;/a&gt; to learn how to correctly work with constrainable properties. Not doing so correctly will result in your code being unreliable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4b8f48d1b6d7f0c658305bdeada4735d6fe982" translate="yes" xml:space="preserve">
          <source>In addition to the question of whether a push notification is required at all, there are many different types of push notifications, ranging from casual-and-disappearing to persistent-and-requiring-interaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f081db8429990736e892b80ccdf39802333dd9d0" translate="yes" xml:space="preserve">
          <source>In addition to the standard &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt; set of functions (such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt;, etc), there are a variety of functions available from the DOM to workers. This article provides a list of those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3ed1a80b6001a6fb2d886c2c885ab83a15818a" translate="yes" xml:space="preserve">
          <source>In addition to the three escape sequences mentioned above, there are fours others. They are listed in the table below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678332ae18c9181f699c2ef17c9aeef68ae8aed2" translate="yes" xml:space="preserve">
          <source>In addition to the three methods we saw in &lt;a href=&quot;#Drawing_rectangles&quot;&gt;Drawing rectangles&lt;/a&gt;, which draw rectangular shapes directly to the canvas, there's also the &lt;code&gt;rect()&lt;/code&gt; method, which adds a rectangular path to a currently open path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af71e733a0e3aa7d70fda75c37b4fe99759ebe63" translate="yes" xml:space="preserve">
          <source>In addition, WebVR 1.1 adds a number of events on the &lt;a href=&quot;window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; object to allow JavaScript to respond to changes to the status of the display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d74eecff8ea822d543cc16c23a0996c92866252" translate="yes" xml:space="preserve">
          <source>In addition, be aware that browsers can wipe out the database, such as in the following conditions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9499549a09c42498f7ba40d50ef0a781d603f324" translate="yes" xml:space="preserve">
          <source>In addition, if something happens to cause a change in the streaming scenario, negotiation will begin again, with the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event being sent to the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;, and the entire process starts again as described before. This can happen in a variety of situations, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2d67e3af1cab52f24fd5c28ee15c8851650c06" translate="yes" xml:space="preserve">
          <source>In addition, navigating to another page, changing tabs, or switching to another application (using, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26511fef9e5a7866b7fae637d4ad155c717ea4dd" translate="yes" xml:space="preserve">
          <source>In addition, sandboxed &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;s cannot be granted storage access by default for security reasons. The API therefore also adds the &lt;code&gt;allow-storage-access-by-user-activation&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox&quot;&gt;sandbox token&lt;/a&gt;. The embedding website needs to add this to allow storage access requests to be successful, along with &lt;code&gt;allow-scripts&lt;/code&gt; and &lt;code&gt;allow-same-origin&lt;/code&gt; to allow it to call the API, and execute in an origin that can have cookies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2bccf95e98011193a03e5cd50f8e95faed75cc" translate="yes" xml:space="preserve">
          <source>In addition, starting in Firefox 55, if in &lt;code&gt;supportedConfigurations&lt;/code&gt;, either &lt;code&gt;audioCapabilities&lt;/code&gt;'s or &lt;code&gt;videoCapabilities&lt;/code&gt;'s &lt;code&gt;contentType&lt;/code&gt; value doesn't specify a &quot;codecs&quot; substring to define allowed codecs within the media wrapper, a warning is output to the web console. See note below table for example and correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd8b6852eb05e8e477b5291fe3d4b95397e235e" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; specified by the receiver's &lt;a href=&quot;rtcrtpreceiver/track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; is the same one specified by the event's &lt;a href=&quot;rtctrackevent/track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;, and the track has been added to any associated remote &lt;a href=&quot;mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4de5259e1444c83b1b5c70cb8a7ac4931bb3793" translate="yes" xml:space="preserve">
          <source>In addition, the Notifications API spec specifies a number of additions to the &lt;a href=&quot;service_worker_api&quot;&gt;ServiceWorker API&lt;/a&gt;, to allow service workers to fire notifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192681702116a96e9a96fed67ac3d7964193e0ca" translate="yes" xml:space="preserve">
          <source>In addition, the event's &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; method is called to ensure that the &lt;code&gt;mouseup&lt;/code&gt; event isn't triggered unnecessarily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc07687c787d20adb5f45f4b3b1ade1ef95614e" translate="yes" xml:space="preserve">
          <source>In addition, this flag is also used to indicate when cookies are to be ignored in the response. The default is &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;XMLHttpRequest&lt;/code&gt; from a different domain cannot set cookie values for their own domain unless &lt;code&gt;withCredentials&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; before making the request. The third-party cookies obtained by setting &lt;code&gt;withCredentials&lt;/code&gt; to true will still honor same-origin policy and hence can not be accessed by the requesting script through &lt;a href=&quot;../document/cookie&quot;&gt;document.cookie&lt;/a&gt; or from response headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790da41e2793ac0df68ea96f6bdad9a107400fab" translate="yes" xml:space="preserve">
          <source>In addition, we also use a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/click&quot;&gt;click&lt;/a&gt;&lt;/code&gt; event to make the box dissappear (&lt;code&gt;display: none;&lt;/code&gt;), showing how it triggers the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitioncancel&quot;&gt;transitioncancel&lt;/a&gt;&lt;/code&gt; event to fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5975aa89342b92cf68e8671b3386929a9b70c1" translate="yes" xml:space="preserve">
          <source>In addition, we have provided an &lt;a href=&quot;https://mdn.github.io/dom-examples/web-storage/event.html&quot;&gt;event output page&lt;/a&gt; &amp;mdash; if you load this page in another tab, then make changes to your choices in the landing page, you'll see the updated storage information outputted as the &lt;a href=&quot;storageevent&quot;&gt;&lt;code&gt;StorageEvent&lt;/code&gt;&lt;/a&gt; is fired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba2f2d42746dc7113697241e1f8d8e36ba979e2" translate="yes" xml:space="preserve">
          <source>In addition, when the value of this property changes, a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/signalingstatechange&quot;&gt;signalingstatechange&lt;/a&gt;&lt;/code&gt; event is sent to the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fad7fc10a00a22577d47c690afbf37af4d73ca" translate="yes" xml:space="preserve">
          <source>In addition, when we are done reading the fetch body we use the controller&amp;rsquo;s &lt;a href=&quot;../readablestreamdefaultcontroller/close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method to close the custom stream &amp;mdash; any previously-enqueued chunks can still be read from it, but no more can be enqueued, and the stream is closed when reading has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4cd7fcf0bf392583caf71224b2b73e97fd76f4" translate="yes" xml:space="preserve">
          <source>In additions to these specifications defining the API needed to use WebRTC, there are several protocols, listed under &lt;a href=&quot;#Protocols&quot;&gt;resources&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb91ee7606d2ee858eee8b96f42a6b48650c73fe" translate="yes" xml:space="preserve">
          <source>In all of our &lt;a href=&quot;transformations&quot;&gt;previous examples&lt;/a&gt;, shapes were always drawn one on top of the other. This is more than adequate for most situations, but it limits the order in which composite shapes are built. We can, however, change this behaviour by setting the &lt;code&gt;globalCompositeOperation&lt;/code&gt; property. In addition, the &lt;code&gt;clip&lt;/code&gt; property allows us to hide unwanted parts of shapes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6cfb20e3f5887abf169ebc8c75f1f9163d27c3" translate="yes" xml:space="preserve">
          <source>In all other cases, the time origin is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63651a9ada3befbb58fb6ad76a610a406eb9666d" translate="yes" xml:space="preserve">
          <source>In an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;&gt;HTML&lt;/a&gt; document, the &lt;code&gt;document.createElement()&lt;/code&gt; method creates the HTML element specified by &lt;var&gt;tagName&lt;/var&gt;, or an &lt;a href=&quot;../htmlunknownelement&quot;&gt;&lt;code&gt;HTMLUnknownElement&lt;/code&gt;&lt;/a&gt; if &lt;var&gt;tagName&lt;/var&gt; isn't recognized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8baddc945b3c8f1d6c4b84704583e8f4f1af1a8" translate="yes" xml:space="preserve">
          <source>In another example, the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV?editors=0010&quot;&gt;Red Queen's Race Game&lt;/a&gt;, Alice and the Red Queen are constantly slowing down:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04738823885b22029c34853da22a463fe296be8b" translate="yes" xml:space="preserve">
          <source>In audio terms, &lt;strong&gt;fan-in&lt;/strong&gt; describes the process by which a &lt;a href=&quot;../channelmergernode&quot;&gt;&lt;code&gt;ChannelMergerNode&lt;/code&gt;&lt;/a&gt; takes a series of mono input sources and outputs a single multi-channel signal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6c113a7cdaf32fdba0c8620de88add3b4495c1" translate="yes" xml:space="preserve">
          <source>In both cases, Chome may require an extra movie flag to be set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c91886a2fd338c14ee30ef8e10aa1c23539465" translate="yes" xml:space="preserve">
          <source>In browsers that support it, an instance of this interface may be passed in the &lt;code&gt;credential&lt;/code&gt; member of the &lt;code&gt;init&lt;/code&gt; object for global &lt;a href=&quot;windoworworkerglobalscope/fetch&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e518b14b157d9075471688f123070fcb6f5b67" translate="yes" xml:space="preserve">
          <source>In browsers, &lt;code&gt;document.defaultView&lt;/code&gt; returns the &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;window&lt;/code&gt;&lt;/a&gt; object associated with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context&quot;&gt;a document&lt;/a&gt;, or &lt;code&gt;null&lt;/code&gt; if none is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad663c9a1751b872c09fac79cfcdf47046fa8ddc" translate="yes" xml:space="preserve">
          <source>In case of an error, the returned &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; is rejected with a &lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; whose name indicates what kind of error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332213d33ce20840de5b4f1d7cb167be4547a2ee" translate="yes" xml:space="preserve">
          <source>In case you want to test your code in browsers that still use a prefix, you can use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d868186a76d05ac9a59dd6893aba220173fa221" translate="yes" xml:space="preserve">
          <source>In cases where &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;screenX&lt;/code&gt; (and/or &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;screenY&lt;/code&gt;) have conflicting values, then &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; have precedence over &lt;code&gt;screenX&lt;/code&gt; and &lt;code&gt;screenY&lt;/code&gt; respectively. If &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;screenX&lt;/code&gt; (and/or &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;screenY&lt;/code&gt;) are defined in the &lt;var&gt;features&lt;/var&gt; list, then &lt;code&gt;left&lt;/code&gt; (and/or &lt;code&gt;top&lt;/code&gt;) will be honored and rendered. In the following example the new window will be positioned at 100 pixels from the left side of the work area for applications of the user's operating system, not at 200 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a8719df0a15822a3784cb80af083c474ccf59d" translate="yes" xml:space="preserve">
          <source>In chrome or other privileged code, you may also use the &lt;code&gt;image/jpeg&lt;/code&gt;, &lt;code&gt;image/png&lt;/code&gt; or &lt;code&gt;image/gif&lt;/code&gt; types, depending on the type of image. The data should be an object which implements the &lt;a href=&quot;https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIInputStream&quot;&gt;nsIInputStream&lt;/a&gt; interface. When this stream is read, it should provide the data bits for the image, as if the image was a file of that type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e0032ad462e2d9566b70bb733535ef934719d2" translate="yes" xml:space="preserve">
          <source>In compliance with the specification, this property will return &lt;code&gt;null&lt;/code&gt; on Webkit if the element is hidden (the &lt;code&gt;style.display&lt;/code&gt; of this element or any ancestor is &lt;code&gt;&quot;none&quot;&lt;/code&gt;) or if the &lt;code&gt;style.position&lt;/code&gt; of the element itself is set to &lt;code&gt;&quot;fixed&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd25fb0b064dfd36be3bc05f334a139df064254" translate="yes" xml:space="preserve">
          <source>In context uses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c365ee48d8646bb3f03aa1bb71a33610b7ee92" translate="yes" xml:space="preserve">
          <source>In contrast to MSIE--in which almost all kinds of elements receive the blur event--almost all kinds of elements on Gecko browsers do NOT work with this event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f92fc056487532ce0b5e81f8f19a8aefa82472" translate="yes" xml:space="preserve">
          <source>In contrast, no such assignment is done for the second canvas. The internal &lt;a href=&quot;htmlcanvaselement/width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;htmlcanvaselement/height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; properties of the canvas remain at default values, which are different than the actual size of the canvas &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; in the browser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71162c2fddbc1881896b5ade2388c4f044610200" translate="yes" xml:space="preserve">
          <source>In controlling browsing context, the &lt;a href=&quot;https://www.w3.org/TR/presentation-api/#dfn-presentation&quot;&gt;&lt;code&gt;Presentation&lt;/code&gt;&lt;/a&gt; interface provides a mechanism to override the browser default behavior of launching presentation to external screen. In receiving browsing context, &lt;code&gt;Presentation&lt;/code&gt; interface provides the access to the available presentation connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5130a730796e56550ce8a9896c1e4855e4f3091a" translate="yes" xml:space="preserve">
          <source>In controlling browsing context, the &lt;code&gt;Presentation&lt;/code&gt; interface provides a mechanism to override the browser default behavior of launching presentation to external screen. In receiving browsing context, &lt;code&gt;Presentation&lt;/code&gt; interface provides the access to the available presentation connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1647190f46d845c8c2017ff5878c95c1e3cbd98b" translate="yes" xml:space="preserve">
          <source>In dedicated workers created from a &lt;a href=&quot;../window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; context, the value in the worker will be lower than &lt;code&gt;performance.now()&lt;/code&gt; in the window who spawned that worker. It used to be the same as &lt;code&gt;t0&lt;/code&gt; of the main context, but this was changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253e146cf2742f3d49fb43e195f4db85ed087d6d" translate="yes" xml:space="preserve">
          <source>In earlier browser versions, trying to load a cross-origin worker script threw a &lt;code&gt;SecurityError&lt;/code&gt;; in newer browsers an &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/error&quot;&gt;error&lt;/a&gt;&lt;/code&gt; event is thrown instead due to a spec change. Find out more information on how to deal with this in &lt;a href=&quot;https://www.fxsitecompat.com/en-CA/docs/2016/loading-cross-origin-worker-now-fires-error-event-instead-of-throwing-worker-in-sandboxed-iframe-no-longer-allowed/&quot;&gt;Loading cross-origin worker now fires error event instead of throwing; worker in sandboxed iframe no longer allowed&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d14b3fc64a95cf72ed7eb5fe2b2538f6baa9b4c" translate="yes" xml:space="preserve">
          <source>In early versions of the WebRTC specification, this property's name was &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;stream&lt;/code&gt;&lt;/a&gt;. Code that uses that property needs to be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3fccc5485350bc49eea58546866f393b52d76b" translate="yes" xml:space="preserve">
          <source>In environments that do not support interactivity (e.g., print media), then redraw shall not be suspended. Calls to &lt;code&gt;suspendRedraw()&lt;/code&gt; and &lt;code&gt;unsuspendRedraw()&lt;/code&gt; should, but need not be, made in balanced pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6cd54c5597275fc395347727fc08e1aa760741" translate="yes" xml:space="preserve">
          <source>In exactly the same way as our &lt;a href=&quot;https://github.com/mdn/webvr-tests/tree/master/raw-webgl-example&quot;&gt;raw-webgl-example&lt;/a&gt; (see &lt;a href=&quot;using_the_webvr_api&quot;&gt;Using the WebVR API&lt;/a&gt; for details), this renders a spinning 3D cube, which you can choose to present in a VR display. The only difference is that, while in VR presenting mode, this demo allows you to move the cube by moving a VR controller (the original demo moves the cube as you move your VR headset).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f457eaea055d30ab127ce4d0e8b0c9573945bff" translate="yes" xml:space="preserve">
          <source>In fact, there is no way to guarantee that IndexedDB transactions will complete, even with normal browser shutdown. See &lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=870645&quot;&gt;bug 870645&lt;/a&gt;. As a workaround for this normal shutdown notification, you might track your transactions and add a &lt;code&gt;beforeunload&lt;/code&gt; event to warn the user if any transactions have not yet completed at the time of unloading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737c6674fcba1a50c632bfaa53947ce63bee83e5" translate="yes" xml:space="preserve">
          <source>In following code snippet, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchmove&quot;&gt;touchmove&lt;/a&gt;&lt;/code&gt; event handler iterrates through the &lt;code&gt;changedTouches&lt;/code&gt; list and prints the identifier of each touch point that changed since the last event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea2644b664e6b04f6e87ac99f6798ae73beaacc" translate="yes" xml:space="preserve">
          <source>In following code snippet, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; event handler checks the length of the &lt;a href=&quot;touches&quot;&gt;&lt;code&gt;TouchEvent.touches&lt;/code&gt;&lt;/a&gt; list to determine the number of touch points that were activated and then invokes different handlers depending on the number of touch points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e625e355b76cacf20e174c5d656555b587e8f7" translate="yes" xml:space="preserve">
          <source>In following code snippet, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; event handler iterrates through the &lt;code&gt;targetTouches&lt;/code&gt; list and logs the &lt;code&gt;force&lt;/code&gt; value of each touch point but the code could invoke different processing depending on the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67d96d433944651e89541bfcc4c450a7fca0ab9" translate="yes" xml:space="preserve">
          <source>In following code snippet, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; event handler logs the state of the event's modifier keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92306a282839c357b2f1ddf5150f17729457e18b" translate="yes" xml:space="preserve">
          <source>In following code snippet, the function compares the length of the &lt;code&gt;touches&lt;/code&gt; list to the the length of the &lt;code&gt;targetTouches&lt;/code&gt; list and returns &lt;code&gt;true&lt;/code&gt; if the lengths are the same and returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f329872aea8d7ca69eedc6f4605ccd783f7fde8" translate="yes" xml:space="preserve">
          <source>In following simple code snippet, we assume the user initiates multiple touch contacts on an element with an id of &lt;code&gt;source&lt;/code&gt; and then releases contacts with the surface. When the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; event handler is invoked, each touch point's &lt;a href=&quot;screenx&quot;&gt;&lt;code&gt;Touch.screenX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;screeny&quot;&gt;&lt;code&gt;Touch.screenY&lt;/code&gt;&lt;/a&gt; coordinates are accessed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254ea6dbef92fc739d3302d1aaca8fa225cb6c91" translate="yes" xml:space="preserve">
          <source>In following simple code snippet, we assume the user initiates one or more touch contacts on the &lt;code&gt;source&lt;/code&gt; element, moves the touch points and then releases all contacts with the surface. When the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchmove&quot;&gt;touchmove&lt;/a&gt;&lt;/code&gt; event handler is invoked, each touch point's &lt;a href=&quot;pagex&quot;&gt;&lt;code&gt;Touch.pageX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pagey&quot;&gt;&lt;code&gt;Touch.pageY&lt;/code&gt;&lt;/a&gt; coordinates are accessed via the event's &lt;a href=&quot;../touchevent/changedtouches&quot;&gt;&lt;code&gt;TouchEvent.changedTouches&lt;/code&gt;&lt;/a&gt; list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387828167b0fa291417c19c0f75ac6a6d132ec6a" translate="yes" xml:space="preserve">
          <source>In following simple code snippet, we assume the user initiates one or more touch contacts on the &lt;code&gt;source&lt;/code&gt; element. When the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchstart&quot;&gt;touchstart&lt;/a&gt;&lt;/code&gt; event handler for this element is invoked, each touch point's &lt;a href=&quot;target&quot;&gt;&lt;code&gt;Touch.target&lt;/code&gt;&lt;/a&gt; property is accessed via the event's &lt;a href=&quot;../touchevent/targettouches&quot;&gt;&lt;code&gt;TouchEvent.targetTouches&lt;/code&gt;&lt;/a&gt; list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ff384a91996a27b9d1a0b40a2cc90a7a958a53" translate="yes" xml:space="preserve">
          <source>In general, a positive x component represents a position to the right of the origin, a positive y component is downward from the origin, and a positive z component extends outward from the screen (in other words, toward the user).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048691864c85b9374ea1acf4022d4c4aed6233b6" translate="yes" xml:space="preserve">
          <source>In general, a web page uses the Presentation Controller API to specify the web content to be rendered on presentation device and initiate the presentation session. With Presentation Receiver API, the presenting web content obtains the session status. With providing both the controller page and the receiver one with a messaged-based channel, a Web developer can implement the interaction between these two pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051bedf0a059c726c3ba200f4390a434e8675e08" translate="yes" xml:space="preserve">
          <source>In general, audio visualizations are achieved by accessing an output of audio data over time, usually gain or frequency data, and then using a graphical technology to turn that into a visual output, such as a graph. The Web Audio API has an &lt;a href=&quot;../analysernode&quot;&gt;&lt;code&gt;AnalyserNode&lt;/code&gt;&lt;/a&gt; available that doesn't alter the audio signal passing through it. Instead it outputs audio data that can be passed to a visualization technology such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a76f3e7126d5a95c8f046a12913c58948da569" translate="yes" xml:space="preserve">
          <source>In general, positive values &lt;code&gt;x&lt;/code&gt; mean to the right, and negative values of &lt;code&gt;x&lt;/code&gt; means to the left, assuming no transforms have resulted in a reversal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0586780dfd544b08f1c0a00ebe3c9d2adc2eb4fc" translate="yes" xml:space="preserve">
          <source>In general, positive values &lt;code&gt;x&lt;/code&gt; mean to the right, and negative values of &lt;code&gt;x&lt;/code&gt; means to the left, assuming that transforms have not altered the orientation of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84631ac21056293d2e65e006532b3c41e377717" translate="yes" xml:space="preserve">
          <source>In general, positive values of &lt;code&gt;y&lt;/code&gt; mean downward, and negative values of &lt;code&gt;y&lt;/code&gt; mean upward, assuming no transforms have resulted in a reversal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6131175892e4da16229c5200b4d3fab72f9f0b68" translate="yes" xml:space="preserve">
          <source>In general, positive values of &lt;code&gt;z&lt;/code&gt; mean toward the user (out from the screen), and negative values of &lt;code&gt;z&lt;/code&gt; mean away from the user (into the screen), assuming no transforms have resulted in a reversal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a04db3633042b40c24499a2fb3190f7a0d689c" translate="yes" xml:space="preserve">
          <source>In general, the path of least visual effort will give the user a less tiring experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e813548fe3d369a72fe457299611e348e412b256" translate="yes" xml:space="preserve">
          <source>In general, the strategy compares the size of the chunks in the queue to a value called the &lt;strong&gt;high water mark&lt;/strong&gt;, which is the largest total chunk size that the queue can realistically manage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0029dcb34f740ff7f0dc5d67aede26941e62446e" translate="yes" xml:space="preserve">
          <source>In general, the value of &lt;code&gt;y&lt;/code&gt; increases to the right and decreases to the left, becoming negative to the left of the origin. This may change if transforms have been applied causing the axes' orientation to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc247ab5331c70289527d7a889f7582eb7e88ee" translate="yes" xml:space="preserve">
          <source>In general, users usually disable moving and resizing of existing windows because allowing authors' scripts to do so has been abused overwhelmingly in the past and the rare scripts that do not abuse such feature are often wrong, inaccurate when resizing the window. 99% of all those scripts disable window resizability and disable scrollbars when in fact they should enable both of these features to allow a cautious and sane fallback mechanism if their calculations are wrong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19e2ecf3e8adb7c40c1e4e9c56e520b9f012791" translate="yes" xml:space="preserve">
          <source>In general, you won't create these yourself; they are delivered to your implementation of &lt;a href=&quot;../mediarecorder/onerror&quot;&gt;&lt;code&gt;MediaRecorder.onerror&lt;/code&gt;&lt;/a&gt; when errors occur while recording media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84df57b822d828bd65078def365bec19ebfdf033" translate="yes" xml:space="preserve">
          <source>In general, you won't need to use this constructor, as &lt;code&gt;RTCTrackEvent&lt;/code&gt; objects are created by WebRTC and delivered to your &lt;code&gt;RTCPeerConnector&lt;/code&gt;'s &lt;a href=&quot;../rtcpeerconnection/ontrack&quot;&gt;&lt;code&gt;ontrack&lt;/code&gt;&lt;/a&gt; event handler as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc92f8267a29d610ac81b2d49290b9b0da0aaa7" translate="yes" xml:space="preserve">
          <source>In here, we use &lt;code&gt;requestAnimationFrame()&lt;/code&gt; to keep looping the drawing function once it has been started:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7674896c6195d6a95ccaf5023b60734186db0ae9" translate="yes" xml:space="preserve">
          <source>In later implementations, elements that have a nonce attribute only expose it to scripts (and not to side-channels like CSS attribute selectors).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1971c187c2cb483aa00f477acbe4dd9aa578cb" translate="yes" xml:space="preserve">
          <source>In line 2, that frame of video is copied into the graphics context &lt;code&gt;ctx1&lt;/code&gt; of the first canvas, specifying as the height and width the values we previously saved to draw the frame at half size. Note that you can simply pass the video element into the context's &lt;code&gt;drawImage()&lt;/code&gt; method to draw the current video frame into the context. The result is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264177ae5e6b2be201a268a7ae3e427b56e34b3f" translate="yes" xml:space="preserve">
          <source>In majority of modern browsers, including recent versions of Firefox and Internet Explorer, this method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9f047109da7181cfc2e65a70f3da9699b0beef" translate="yes" xml:space="preserve">
          <source>In many cases, and where possible, it really is best practice to dynamically manipulate classes via the &lt;a href=&quot;../element/classname&quot;&gt;&lt;code&gt;className&lt;/code&gt;&lt;/a&gt; property since the ultimate appearance of all of the styling hooks can be controlled in a single stylesheet. One's JavaScript code also becomes cleaner since instead of being dedicated to styling details, it can focus on the overall semantics of each section it is creating or manipulating, leaving the precise style details to the stylesheet. However, there are cases where actually obtaining or manipulating the rules can be useful (whether for whole stylesheets or individual elements), and that is described in further detail below. Note also that, as with individual element's DOM styles, when speaking of manipulating the stylesheets, this is not actually manipulating the physical document(s), but merely the internal representation of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3369e54140654f3f2d6bfa9556a1acd92668e45" translate="yes" xml:space="preserve">
          <source>In many cases, you don't need to be this verbose. For example, in our &lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we simply run &lt;a href=&quot;notification/requestpermission&quot;&gt;&lt;code&gt;Notification.requestPermission&lt;/code&gt;&lt;/a&gt; regardless to make sure we can get permission to send notifications (this uses the newer promise-based method syntax):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3d4f714536a91787b726ddd603cf9c86d928fe" translate="yes" xml:space="preserve">
          <source>In many code samples online, &lt;code&gt;getComputedStyle&lt;/code&gt; is used from the &lt;code&gt;document.defaultView&lt;/code&gt; object. In nearly all cases, this is needless, as &lt;code&gt;getComputedStyle&lt;/code&gt; exists on the &lt;code&gt;window&lt;/code&gt; object as well. It's likely the defaultView pattern was some combination of (1) folks not wanting to write a spec for window and (2) making an API that was also usable in Java. However, there is &lt;a href=&quot;https://github.com/jquery/jquery/pull/524#issuecomment-2241183&quot;&gt;a single case&lt;/a&gt; where the &lt;code&gt;defaultView&lt;/code&gt;'s method must be used: when using Firefox 3.6 to access framed styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6741832d552415421f3c20860afb9f72cca2ae49" translate="yes" xml:space="preserve">
          <source>In modern browsers, &lt;code&gt;setTimeout()/&lt;/code&gt;&lt;a href=&quot;../windoworworkerglobalscope/setinterval&quot;&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/a&gt; calls are throttled to a minimum of once every 4ms when successive calls are triggered due to callback nesting (where the nesting level is at least a certain depth), or after certain number of successive intervals. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac8ce5501d76714e1c78b71b4dc610bf412d231" translate="yes" xml:space="preserve">
          <source>In modern implementations, the presence of this member with a value &lt;code&gt;true&lt;/code&gt;, will ensure there is at least one transceiver set to receive audio that has not been stopped, and if there isn't one, one will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0e502db7c13df6132b6c7fe0851e10a03868a3" translate="yes" xml:space="preserve">
          <source>In modern implementations, the presence of this member with a value &lt;code&gt;true&lt;/code&gt;, will ensure there is at least one transceiver set to receive video that has not been stopped, and if there isn't one, one will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2aa9ab3e9f7950af2b3b685de7d762e5fb0c3e" translate="yes" xml:space="preserve">
          <source>In more technical terms, &lt;code&gt;scrollX&lt;/code&gt; returns the X coordinate of the left edge of the current &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt;. If there is no viewport, the returned value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79505fba4dc5bcfb8dc396e041ff1b74ea444456" translate="yes" xml:space="preserve">
          <source>In more technical terms, &lt;code&gt;scrollY&lt;/code&gt; returns the Y coordinate of the top edge of the current &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt;. If there is no viewport, the returned value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3411bf2cefab55059a086ee802f375412a232931" translate="yes" xml:space="preserve">
          <source>In most browsers, calling &lt;code&gt;btoa()&lt;/code&gt; on a Unicode string will cause an &lt;code&gt;InvalidCharacterError&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba0afde8c7f992d74b74892633d16b8df0fb3b3" translate="yes" xml:space="preserve">
          <source>In most cases you can provide any response that the receiver understands. For example, if an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; initiates the request, the response body needs to be image data). For security reasons, there are a few global rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77f8fe95e61c7c7ca8962b83c424d78b1a5664a" translate="yes" xml:space="preserve">
          <source>In newer implementations, the value is a &lt;a href=&quot;../domhighrestimestamp&quot;&gt;&lt;code&gt;DOMHighResTimeStamp&lt;/code&gt;&lt;/a&gt; accurate to 5 microseconds (0.005 ms). In older implementations, the value is a &lt;a href=&quot;../domtimestamp&quot;&gt;&lt;code&gt;DOMTimeStamp&lt;/code&gt;&lt;/a&gt;, accurate to a millisecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a435abf519b87fd3c142c90a92d88bea97b8fad" translate="yes" xml:space="preserve">
          <source>In old browsers, as specified in old versions of the specifications, the method may throws the &lt;code&gt;INVALID_STATE_ERR&lt;/code&gt;&lt;a href=&quot;../domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; if this method is called after the &lt;a href=&quot;detach&quot;&gt;&lt;code&gt;NodeIterator.detach()&lt;/code&gt;&lt;/a&gt;method. Recent browsers never throw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcfe1ed7e2c95e956a98f1e61b44851dec42196" translate="yes" xml:space="preserve">
          <source>In old implementations and outdated specifications, it returned &lt;code&gt;true&lt;/code&gt; when a modifier which is the typical modifier key for the shortcut key is pressed. For example, on Windows, pressing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaf08a2082c6b4995077fbcbcdba4984f680189" translate="yes" xml:space="preserve">
          <source>In older code and documentation, you may see a callback-based version of this function used. This has been deprecated and its use is &lt;strong&gt;strongly&lt;/strong&gt; discouraged, as it will be removed in the future. You should update any existing code to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;-based version of &lt;code&gt;setLocalDescription()&lt;/code&gt; instead. The parameters for the older form of &lt;code&gt;setLocalDescription()&lt;/code&gt; are described below, to aid in updating existing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097d93f40ccaa3420700a832b93b35907150d579" translate="yes" xml:space="preserve">
          <source>In older code and documentation, you may see a callback-based version of this function used. This has been deprecated and its use is &lt;strong&gt;strongly&lt;/strong&gt; discouraged. You should update any existing code to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;-based version of &lt;code&gt;setRemoteDescription()&lt;/code&gt; instead. The parameters for the older form of &lt;code&gt;setRemoteDescription()&lt;/code&gt; are described below, to aid in updating existing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcb5b5a283b8492a38c052d458cc611438bb585" translate="yes" xml:space="preserve">
          <source>In older code and documentation, you may see a callback-based version of this function. This has been deprecated and its use is &lt;strong&gt;strongly&lt;/strong&gt; discouraged. You should update any existing code to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;-based version of &lt;code&gt;addIceCandidate()&lt;/code&gt; instead. The parameters for this form of &lt;code&gt;addIceCandidate()&lt;/code&gt; are described below, to aid in updating existing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134fdb11ab98c50f15c91878c647f37a94e7004e" translate="yes" xml:space="preserve">
          <source>In older code and documentation, you may see a callback-based version of this function. This has been deprecated and its use is &lt;strong&gt;strongly&lt;/strong&gt; discouraged. You should update any existing code to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;-based version of &lt;code&gt;createAnswer()&lt;/code&gt; instead. The parameters for this form of &lt;code&gt;createAnswer()&lt;/code&gt; are described below, to aid in updating existing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4b19a335993df1eded8e5fe44744d2f0b36700" translate="yes" xml:space="preserve">
          <source>In older code and documentation, you may see a callback-based version of this function. This has been deprecated and its use is &lt;strong&gt;strongly&lt;/strong&gt; discouraged. You should update any existing code to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt;-based version of &lt;code&gt;createOffer()&lt;/code&gt; instead. The parameters for this form of &lt;code&gt;createOffer()&lt;/code&gt; are described below, to aid in updating existing code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e59a85f6b027f3aa5a9fc1e39e76c7f8ac40b4" translate="yes" xml:space="preserve">
          <source>In older versions of the DOM specification, the third parameter of &lt;code&gt;addEventListener()&lt;/code&gt; was a Boolean value indicating whether or not to use capture. Over time, it became clear that more options were needed. Rather than adding more parameters to the function (complicating things enormously when dealing with optional values), the third parameter was changed to an object which can contain various properties defining the values of options to configure the process of removing the event listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41573554a09c12a4aff0b0a323d5d5c346b1ae26" translate="yes" xml:space="preserve">
          <source>In older versions of the Media Source specification, attaching a stream to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element required creating an object URL for the &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt;. This is no longer necessary, and browsers are removing support for doing this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c302bcb3cfbd3180e4e52b76824483193bf2e26" translate="yes" xml:space="preserve">
          <source>In older versions of the spec, the default for a &lt;a href=&quot;../channelsplitternode&quot;&gt;&lt;code&gt;ChannelSplitterNode&lt;/code&gt;&lt;/a&gt; was max.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86093cd00563053ec5d4bf439270969b2899fd9" translate="yes" xml:space="preserve">
          <source>In one of the examples on the previous page, we used a series of loops to create a pattern of images. There is, however, a much simpler method: the &lt;code&gt;createPattern()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1474b544bd087ffebb2c0693665591f47361763f" translate="yes" xml:space="preserve">
          <source>In order to be oriented about what we're trying to accomplish, let's have a look at the HTML. This establishes a box (ID &lt;code&gt;&quot;Container&quot;&lt;/code&gt;) that's used to present the progress of an operation (because you never know how long decoding &quot;quantum filament tachyon emissions&quot; will take, after all) as well as a second main box (with the ID &lt;code&gt;&quot;logBox&quot;&lt;/code&gt;), which is used to display textual output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc2348830420baea75c39165d0ecb114e4ddc39" translate="yes" xml:space="preserve">
          <source>In order to build a good offline-capable web application, you need to know when your application is actually offline. You also need to know when your application has returned to an 'online' status again. Effectively, the requirements break down as such:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec3d59e58079b971cb7a57156a0caea3e5e7a7d" translate="yes" xml:space="preserve">
          <source>In order to calculate the duration of a specific operation, Gecko 10 introduced the support of timers in the &lt;code&gt;console&lt;/code&gt; object. To start a timer, call the &lt;code&gt;console.time&lt;/code&gt;&lt;code&gt;()&lt;/code&gt; method, giving it a name as the only parameter. To stop the timer, and to get the elapsed time in milliseconds, just call the &lt;code&gt;console.timeEnd()&lt;/code&gt; method, again passing the timer's name as the parameter. Up to 10,000 timers can run simultaneously on a given page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c783e51b117fbff0f332f1103ec26b920b6cad" translate="yes" xml:space="preserve">
          <source>In order to communicate using the WebSocket protocol, you need to create a &lt;a href=&quot;https://developer.mozilla.org/en/WebSockets/WebSockets_reference/WebSocket&quot;&gt;&lt;code&gt;WebSocket&lt;/code&gt;&lt;/a&gt; object; this will automatically attempt to open the connection to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968c4b9960c33fa05ceac1ea8fc75f7051b9c265" translate="yes" xml:space="preserve">
          <source>In order to exchange signaling information, you can choose to send JSON objects back and forth over a WebSocket connection, or you could use XMPP or SIP over an appropriate channel, or you could use &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; over &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/HTTPS&quot;&gt;HTTPS&lt;/a&gt; with polling, or any other combination of technologies you can come up with. You could even use email as the signaling channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0291f8233557ffa64fa29c26e39344db5ec26225" translate="yes" xml:space="preserve">
          <source>In order to make each touch's drawing look different, the &lt;code&gt;colorForTouch()&lt;/code&gt; function is used to pick a color based on the touch's unique identifier. This identifier is an opaque number, but we can at least rely on it differing between the currently-active touches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b1318757166bbe18bececb3673b6b66bea857f" translate="yes" xml:space="preserve">
          <source>In order to more fully support audio/video conferencing, &lt;a href=&quot;../webrtc_api&quot;&gt;WebRTC&lt;/a&gt; supports sending &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/DTMF&quot;&gt;DTMF&lt;/a&gt; to the remote peer on an &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt;. This article offers a brief high-level overview of how DTMF works over WebRTC, then provides a guide for everyday developers about how to send DTMF over an &lt;code&gt;RTCPeerConnection&lt;/code&gt;. The DTMF system is often referred to as &quot;touch tone,&quot; after an old trade name for the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcd93125ff64c453149a5e27b785291649c0d94" translate="yes" xml:space="preserve">
          <source>In order to pick up the interpolated color for each pixel, we need to change this to fetch the value from the &lt;code&gt;vColor&lt;/code&gt; varying:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3b40a8dd6337c88081ee682aa292308f44907a" translate="yes" xml:space="preserve">
          <source>In order to properly stream MP4, we need the asset to be an &lt;a href=&quot;http://www.w3.org/TR/media-source/isobmff-byte-stream-format.html&quot;&gt;ISO BMF&lt;/a&gt; format MP4. Without proper fragmentation, any given mp4 file is not guaranteed to work with MSE. This means that metadata within the container is spread out and not lumped together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af63536a29b7f04f6fe5b16703c07ae972667359" translate="yes" xml:space="preserve">
          <source>In order to provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd0130ac638b46c8af330ae1a57e8e2b08f6e76" translate="yes" xml:space="preserve">
          <source>In order to resolve this issue, a new system of &lt;strong&gt;stream schedulers&lt;/strong&gt; (usually referred to as the &quot;SCTP ndata specification&quot;) has been designed to make it possible to interleave messages sent on different streams, including streams used to implement WebRTC data channels. This &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-tsvwg-sctp-ndata&quot;&gt;proposal&lt;/a&gt; is still in IETF draft form, but once implemented, it will make it possible to send messages with essentially no size limitations, since the SCTP layer will automatically interleave the underlying sub-messages to ensure that every channel's data has the opportunity to get through.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03fb24169c4ea52c52cb06ed130504936fb9ad4" translate="yes" xml:space="preserve">
          <source>In order to understand how the create() and get() methods fit into the bigger picture, it is important to understand that they sit between two components that are outside the browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13d4ddfa3ff40016f3768af5a565ed38516f5b9" translate="yes" xml:space="preserve">
          <source>In order to use adapter.js, you need to include adapter.js on any page that uses WebRTC APIs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a23f25a73b86a9f6c6e0de9db50c1290951ad7" translate="yes" xml:space="preserve">
          <source>In order to use the following code, please replace all occurrences of the word &lt;code&gt;doSomethingOnlyOnce&lt;/code&gt; (the name of the cookie) with a custom name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a3c163df8ffe471e9058c8dc2a2565970fda6b" translate="yes" xml:space="preserve">
          <source>In order to use this in the shader it must be set to a uniform location. The locations for the uniforms are saved in the &lt;code&gt;locations&lt;/code&gt; object shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa66a79c3fac37fc666142b8fe2063a97c0ac7a8" translate="yes" xml:space="preserve">
          <source>In other cases, the &lt;code&gt;NodeList&lt;/code&gt; is &lt;em&gt;static, &lt;/em&gt;where any changes in the DOM does not affect the content of the collection. &lt;a href=&quot;document/queryselectorall&quot;&gt;&lt;code&gt;document.querySelectorAll()&lt;/code&gt;&lt;/a&gt; returns a static &lt;code&gt;NodeList&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f3e56bcf0e803b1e079c87250fda38bf5f8da9" translate="yes" xml:space="preserve">
          <source>In other documents, it creates an element with a &lt;code&gt;null&lt;/code&gt; namespace URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780f4a3523e4be9fa0e5d39b80e3044abb2b825e" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;console.dir&lt;/code&gt; is the way to see all the properties of a specified JavaScript object in console by which the developer can easily get the properties of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f19ec1e06b9ae4900d618b18f622f02a09a801" translate="yes" xml:space="preserve">
          <source>In other words, any option contained within the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element may be part of the results, but option groups are not included in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a7c108b5c6140b4173059986003f1376e968b1" translate="yes" xml:space="preserve">
          <source>In other words, if window &lt;code&gt;A&lt;/code&gt; opens window &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;B.opener&lt;/code&gt; returns &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce78e8d1d2a0d50c2a376afec5e90ceb657b19e" translate="yes" xml:space="preserve">
          <source>In other words, the DOM tree for the following document will look like the image below (using &quot;\n&quot; to represent newlines):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1995dd1809228319a7049ef9140329c0aa7889" translate="yes" xml:space="preserve">
          <source>In other words, the current acceleration of the sensor's rotation around the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24aa6a1d2a326510cfb988f82d3d16ac3740449" translate="yes" xml:space="preserve">
          <source>In other words, the current acceleration of the sensor, along the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26342f65c936d9d1b499fb61c1d5657e37c0d6de" translate="yes" xml:space="preserve">
          <source>In other words, the current velocity at which the sensor is moving along the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8756d342164e2002ce05df955f382173498e783" translate="yes" xml:space="preserve">
          <source>In other words, the current velocity at which the sensor is rotating around the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5bb749fa017e61f3287c0d596f0a5cd62ab091" translate="yes" xml:space="preserve">
          <source>In other words, until you've been notified that nodes are being split off from your monitored subtree, you'll get notifications of changes to that split-off subtree and its nodes. This prevents you from missing changes that occur after the connection is severed and before you have a chance to specifically begin monitoring the moved node or subtree for changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1886b08f743d589301dd5bab055f2e5446d6484" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afbb59e3e9bdc76ed12c72cfc11652669eb6607" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;code&gt;Notification()&lt;/code&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d003531c911f7be4dd1c486c92d6ac6b8bf562" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-array-buffer/&quot;&gt;fetch array buffer live&lt;/a&gt;, we have a Play button. When pressed, the &lt;code&gt;getData()&lt;/code&gt; function is run. Note that before playing full audio file will be downloaded. If you need to play ogg during downloading (stream it) - consider &lt;a href=&quot;../htmlaudioelement&quot;&gt;&lt;code&gt;HTMLAudioElement&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3473029b722643bd0de6270c006a9471e3640d38" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/scrolltooptions&quot;&gt;scrolltooptions example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/dom-examples/scrolltooptions/&quot;&gt;see it live&lt;/a&gt;) we include a form that allows the user to enter three values &amp;mdash; two numbers representing the left and top properties (i.e. the positions to scroll to along the X and Y axes), and a checkbox indicating whether they want smooth scrolling enabled or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64086b9539917286e2d87d93d5db7c8c949df9f" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams&quot;&gt;dom-examples/streams&lt;/a&gt; repo you&amp;rsquo;ll find a &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/streams/simple-writer/index.html&quot;&gt;Simple writer example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-writer/&quot;&gt;see it live also&lt;/a&gt;). This takes a given message and writes it into a writable stream, displaying each chunk on the UI as it is written to the stream and also displaying the whole message on the UI when writing has finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85832bf0175fde6ba53c86bd83b82b6cef373f12" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/blob/master/fetch-with-init-then-request/index.html&quot;&gt;Fetch with init then Request example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-with-init-then-request/&quot;&gt;Fetch Request init live&lt;/a&gt;) we do the same thing except that we pass in an init object when we invoke &lt;code&gt;fetch()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5332e06ca745e4910ad89f54152ef29d7fe3c242" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request&quot;&gt;fetch request example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;fetch request live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a JPG. When the fetch is successful, we read a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;blob()&lt;/code&gt;, put it into an object URL using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and then set that URL as the source of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to display the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981ffc61170f85abb6ad923d558244f17fb966ec" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, extract a blob from the response using &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of it using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display this in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32986a6f47816d4bd1d2722cbc2f89d5eb06ee4c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response-clone&quot;&gt;Fetch Response clone example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response-clone/&quot;&gt;Fetch Response clone live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;. When the fetch resolves successfully, we clone it, extract a blob from both responses using two &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; calls, create object URLs out of the blobs using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display them in two separate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92cc65101815d73ef9b8d0210a121eef752599a" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/basic-fetch&quot;&gt;basic fetch example&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/fetch-examples/basic-fetch/&quot;&gt;run example live&lt;/a&gt;) we use a simple &lt;code&gt;fetch()&lt;/code&gt; call to grab an image and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; tag. The &lt;code&gt;fetch()&lt;/code&gt; call returns a promise, which resolves with the &lt;code&gt;Response&lt;/code&gt; object associated with the resource fetch operation. You'll notice that since we are requesting an image, we need to run &lt;a href=&quot;body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; implements body) to give the response its correct MIME type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a5837fac2c53936e626ad72a9dc42b1ca8ce3d" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-json&quot;&gt;fetch json example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-json/&quot;&gt;fetch json live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a &lt;code&gt;.json&lt;/code&gt; file. When the fetch is successful, we read and parse the data using &lt;code&gt;json()&lt;/code&gt;, then read values out of the resulting objects as you'd expect and insert them into list items to display our product data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33598b258d8cdb59feb13ce2af053fa7a45fa3e5" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;Fetch Request example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;Fetch Request live&lt;/a&gt;) we create a new &lt;code&gt;Request&lt;/code&gt; object using the constructor, then fetch it using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;GlobalFetch.fetch&lt;/code&gt;&lt;/a&gt; call. Since we are fetching an image, we run &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; on the response to give it the proper MIME type so it will be handled properly, then create an Object URL of it and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac15390cc020979be92c6b7e3dd8af32b67ef87" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;Fetch Request example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;Fetch Request live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the relevant constructor, then fetch it using a &lt;code&gt;fetch()&lt;/code&gt; call. Since we are fetching an image, we run &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob()&lt;/code&gt;&lt;/a&gt; on the response to give it the proper MIME type so it will be handled properly, then create an Object URL of it and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b73fce4a7cf8dd740fcaa9165fde287eca56939" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;fetch request example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;fetch request live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a JPG. When the fetch is successful, we read a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;blob()&lt;/code&gt;, put it into an object URL using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and then set that URL as the source of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to display the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49ee4ec9b5aad393af7294108af5db41d880394" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request-with-init&quot;&gt;Fetch Request with init example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request-with-init/&quot;&gt;Fetch Request init live&lt;/a&gt;) we do the same thing except that we pass in an init object when we invoke &lt;code&gt;fetch()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa15d07ba21295882ff149b53a3dba8adc14c5dc" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, extract a blob from the response using &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of it using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display this in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665c8210d0a86cdfd980ce3198e2c1e460bd929c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;code&gt;Response&lt;/code&gt; object using the constructor, passing it a new &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; as a body, and an init object containing a custom &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;statusText&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e27f02256264c5a91b2636219a5045584adc7e" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-text&quot;&gt;fetch text example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-text/&quot;&gt;fetch text live&lt;/a&gt;), we have an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot;&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/a&gt; element and three links (stored in the &lt;code&gt;myLinks&lt;/code&gt; array.) First, we loop through all of these and give each one an &lt;code&gt;onclick&lt;/code&gt; event handler so that the &lt;code&gt;getData()&lt;/code&gt; function is run &amp;mdash; with the link's &lt;code&gt;data-page&lt;/code&gt; identifier passed to it as an argument &amp;mdash; when one of the links is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74a1899d542a1f17ec28a78d061c7d3c322554c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/simple-shared-worker&quot;&gt;Basic shared worker example&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/simple-shared-worker/&quot;&gt;run shared worker&lt;/a&gt;), we have two HTML pages, each of which uses some JavaScript to perform a simple calculation. The different scripts are using the same worker file to perform the calculation &amp;mdash; they can both access it, even if their pages are running inside different windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a52dcb200ff811c53a01149609f176603f2ec40" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/web-components-examples/tree/master/simple-template&quot;&gt;simple-template example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/web-components-examples/simple-template/&quot;&gt;see it live&lt;/a&gt;), we create a trivial custom element example called &lt;code&gt;&amp;lt;my-paragraph&amp;gt;&lt;/code&gt; in which a shadow root is attached and then populated using the contents of a template that contains a slot named &lt;code&gt;my-text&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d243b03f6d86fe5242e67b052f046fa1fec14bc" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/dom-examples/screenleft-screentop/&quot;&gt;screenleft-screentop&lt;/a&gt; example, you'll see a canvas onto which has been drawn a circle. In this example we are using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenLeft&quot;&gt;&lt;code&gt;Window.screenLeft&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenTop&quot;&gt;&lt;code&gt;Window.screenTop&lt;/code&gt;&lt;/a&gt; plus &lt;a href=&quot;requestanimationframe&quot;&gt;&lt;code&gt;Window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; to constantly redraw the circle in the same physical position on the screen, even if the window position is moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c680f742b2a10e14602c5e84ba9854962bbedf" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/dom-examples/screenleft-screentop/&quot;&gt;screenleft-screentop&lt;/a&gt; example, you'll see a canvas onto which has been drawn a circle. In this example we are using &lt;code&gt;screenLeft&lt;/code&gt;/&lt;code&gt;screenTop&lt;/code&gt; plus &lt;a href=&quot;requestanimationframe&quot;&gt;&lt;code&gt;Window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; to constantly redraw the circle in the same physical position on the screen, even if the window position is moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4a5bddabd7d835f9e44b124c0a3fca92d1c53e" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-pump.html&quot;&gt;simple stream pump&lt;/a&gt; example we fetch an image, expose the response's stream using &lt;code&gt;response.body&lt;/code&gt;, create a reader using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Body/getReader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt;, then enqueue that stream's chunks into a second, custom readable stream &amp;mdash; effectively creating an identical copy of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e305a832fce0d83b4f9af63ebf0741e3108c8a" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5448b0c22b58314f5ef162c1128a5d091ccc5e7c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) HTML we have a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element along with a slider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; to increase and decrease pan value. In the JavaScript we create a &lt;a href=&quot;../mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;, and connect the two together using the &lt;code&gt;connect() &lt;/code&gt;method. We then use an &lt;code&gt;oninput&lt;/code&gt; event handler to change the value of the &lt;a href=&quot;../stereopannernode/pan&quot;&gt;&lt;code&gt;StereoPannerNode.pan&lt;/code&gt;&lt;/a&gt; parameter and update the pan value display when the slider is moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef472553ce51c5551cc764c780e04aeb0e15df5" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) HTML we have a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element along with a slider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; to increase and decrease pan value. In the JavaScript we create a &lt;a href=&quot;../mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;, and connect the two together using the &lt;code&gt;connect() &lt;/code&gt;method. We then use an &lt;code&gt;oninput&lt;/code&gt; event handler to change the value of the &lt;a href=&quot;pan&quot;&gt;&lt;code&gt;StereoPannerNode.pan&lt;/code&gt;&lt;/a&gt; parameter and update the pan value display when the slider is moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b1e8227913f5e438a96548e9512c9d7ab13215" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) HTML we have a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element along with a slider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; to increase and decrease pan value. In the JavaScript we create a &lt;a href=&quot;mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;, and connect the two together using the &lt;code&gt;connect() &lt;/code&gt;method. We then use an &lt;code&gt;oninput&lt;/code&gt; event handler to change the value of the &lt;a href=&quot;stereopannernode/pan&quot;&gt;&lt;code&gt;StereoPannerNode.pan&lt;/code&gt;&lt;/a&gt; parameter and update the pan value display when the slider is moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4843f354641ea241795a71b67236c07ac52c08d2" translate="yes" xml:space="preserve">
          <source>In our JavaScript file we get a reference to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; shown above, then log a reference to the name of the corresponding &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cdc4f6fb01a46a3f43555e37d60504ad6e6dd7" translate="yes" xml:space="preserve">
          <source>In our JavaScript file we get a reference to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; shown above, then log a reference to the original &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; was inserted in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceab9ce6de460ad33a9e2a0900d79499acae975c" translate="yes" xml:space="preserve">
          <source>In our Simple stream pump example, we consume the custom readable stream by passing it into a &lt;a href=&quot;../response/response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; constructor call, after which we consume it as a blob().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedc9de0305eebfbe50f45abf0dddefb92a97c35" translate="yes" xml:space="preserve">
          <source>In our basic &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speak-easy-synthesis&quot;&gt;Speech synthesiser demo&lt;/a&gt;, we first grab a reference to the SpeechSynthesis controller using &lt;code&gt;window.speechSynthesis&lt;/code&gt;. After defining some necessary variables, we retrieve a list of the voices available using &lt;a href=&quot;../speechsynthesis/getvoices&quot;&gt;&lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt;&lt;/a&gt; and populate a select menu with them so the user can choose what voice they want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bc88397b40f8468da95f606bd3cb1baa9c28c7" translate="yes" xml:space="preserve">
          <source>In our basic &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speak-easy-synthesis&quot;&gt;Speech synthesiser demo&lt;/a&gt;, we first grab a reference to the SpeechSynthesis controller using &lt;code&gt;window.speechSynthesis&lt;/code&gt;. After defining some necessary variables, we retrieve a list of the voices available using &lt;a href=&quot;speechsynthesis/getvoices&quot;&gt;&lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt;&lt;/a&gt; and populate a select menu with them so the user can choose what voice they want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3902c16a8973e44c8b4760bf85303af8be51ec" translate="yes" xml:space="preserve">
          <source>In our composed-composed-path example (see it live), we define two trivial custom elements, &lt;code&gt;&amp;lt;open-shadow&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;closed-shadow&amp;gt;&lt;/code&gt;, both of which take the contents of their text attribute and insert them into the element's shadow DOM as the text content of a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. The only difference between the two is that their shadow roots are attached with their modes set to &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548f7889383439313cf256bedd4737c1ccdb4456" translate="yes" xml:space="preserve">
          <source>In our example code we have defined a multiplication function &amp;mdash; &lt;code&gt;multiplyMatrixAndPoint()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b491f21954464f6fdc67aba99f7bb95bfd6f9f11" translate="yes" xml:space="preserve">
          <source>In our example we are using the controller&amp;rsquo;s &lt;a href=&quot;../readablestreamdefaultcontroller/enqueue&quot;&gt;&lt;code&gt;enqueue()&lt;/code&gt;&lt;/a&gt; method to enqueue a value into the custom stream after it is read from the fetch body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07f47e691c12ee34185e61f30d75659b3927288" translate="yes" xml:space="preserve">
          <source>In our example, we are testing the decoding capabilities of a video configuration. The configuration requires the type of media being tested &amp;mdash; e.g. a plain &lt;code&gt;file&lt;/code&gt; or &lt;a href=&quot;../mediasource&quot;&gt;&lt;code&gt;MediaSource&lt;/code&gt;&lt;/a&gt; &amp;mdash; and a &lt;a href=&quot;../videoconfiguration&quot;&gt;&lt;code&gt;VideoConfiguration&lt;/code&gt;&lt;/a&gt; including values for the&lt;code&gt;contentType&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;bitrate&lt;/code&gt;, and &lt;code&gt;framerate&lt;/code&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70c4cf3e23400c73ceb83819675631bf670e470" translate="yes" xml:space="preserve">
          <source>In our simple &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speech-color-changer&quot;&gt;Speech color changer&lt;/a&gt; example, we create a new &lt;code&gt;SpeechRecognition&lt;/code&gt; object instance using the &lt;a href=&quot;../speechrecognition/speechrecognition&quot;&gt;&lt;code&gt;SpeechRecognition()&lt;/code&gt;&lt;/a&gt; constructor, create a new &lt;a href=&quot;../speechgrammarlist&quot;&gt;&lt;code&gt;SpeechGrammarList&lt;/code&gt;&lt;/a&gt;, add our grammar string to it using the &lt;a href=&quot;addfromstring&quot;&gt;&lt;code&gt;SpeechGrammarList.addFromString&lt;/code&gt;&lt;/a&gt; method, and set it to be the grammar that will be recognised by the &lt;code&gt;SpeechRecognition&lt;/code&gt; instance using the &lt;a href=&quot;../speechrecognition/grammars&quot;&gt;&lt;code&gt;SpeechRecognition.grammars&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48357f57f72de62af8d9addacb9ecaa3d210de7b" translate="yes" xml:space="preserve">
          <source>In our simple &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speech-color-changer&quot;&gt;Speech color changer&lt;/a&gt; example, we create a new &lt;code&gt;SpeechRecognition&lt;/code&gt; object instance using the &lt;a href=&quot;speechrecognition/speechrecognition&quot;&gt;&lt;code&gt;SpeechRecognition()&lt;/code&gt;&lt;/a&gt; constructor, create a new &lt;a href=&quot;speechgrammarlist&quot;&gt;&lt;code&gt;SpeechGrammarList&lt;/code&gt;&lt;/a&gt;, add our grammar string to it using the &lt;a href=&quot;speechgrammarlist/addfromstring&quot;&gt;&lt;code&gt;SpeechGrammarList.addFromString&lt;/code&gt;&lt;/a&gt; method, and set it to be the grammar that will be recognised by the &lt;code&gt;SpeechRecognition&lt;/code&gt; instance using the &lt;a href=&quot;speechrecognition/grammars&quot;&gt;&lt;code&gt;SpeechRecognition.grammars&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af9da9369fc06dde854a8e586e239d409f0f40c" translate="yes" xml:space="preserve">
          <source>In our video decoding example, a &lt;code&gt;TypeError&lt;/code&gt; would be raised if the media configuration passed to the &lt;code&gt;decodingInfo()&lt;/code&gt;method was invalid. The error can be due to the &lt;code&gt;type&lt;/code&gt; not being one of the two possible values, the &lt;code&gt;contentType&lt;/code&gt; not being a valid codec MIMME type, or invalid or omitted definitions required in the &lt;a href=&quot;../videoconfiguration&quot;&gt;&lt;code&gt;VideoConfiguration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444a38410f8eee1ada6ea0e8209c29ec9a64dec4" translate="yes" xml:space="preserve">
          <source>In pages requiring many timers, it can often be difficult to keep track of all of the running timer events. One approach to solving this problem is to store information about the state of a timer in an object. Following is a minimal example of such an abstraction. The constructor architecture explicitly avoids the use of closures. It also offers an alternative way to pass the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; object to the callback function (see &lt;a href=&quot;#The_.22this.22_problem&quot;&gt;The &quot;this&quot; problem&lt;/a&gt; for details). The following code is also &lt;a href=&quot;https://github.com/madmurphy/minidaemon.js&quot;&gt;available on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4781153838b86061ae7ac471f555a0b2eeb6554" translate="yes" xml:space="preserve">
          <source>In particular, if a developer already has a method in place for connecting two devices, it doesn&amp;rsquo;t make sense for them to have to use another one, defined by the specification, just for WebRTC. Since WebRTC doesn&amp;rsquo;t live in a vacuum, there is likely other connectivity in play, so it makes sense to avoid having to add additional connection channels for signaling if an existing one can be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480b273d124987d12c16a0c8f4ff78bcac4ee760" translate="yes" xml:space="preserve">
          <source>In particular, note that usage of textures in vertex shaders is only possible if &lt;code&gt;webgl.getParameter(webgl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)&lt;/code&gt; is greater than zero. Typically, this fails on current mobile hardware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863023de54e429bfc0d9fe4e4a41838da46ee3d6" translate="yes" xml:space="preserve">
          <source>In particular, the specification doesn't indicate a maximum or minimum number of audio contexts that must be able to be open at the same time, so this is left up to the browser implementations to decide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57fac6451e79fec18e227cafa36d4d1a55b1f49" translate="yes" xml:space="preserve">
          <source>In plain words, all asynchronous methods return a request object. If the request has been completed successfully, the result is made available through the &lt;code&gt;result&lt;/code&gt; property and an event indicating success is fired at the request (&lt;a href=&quot;idbrequest/onsuccess&quot;&gt;&lt;code&gt;IDBRequest.onsuccess&lt;/code&gt;&lt;/a&gt;). If an error occurs while performing the operation, the exception is made available through the &lt;code&gt;result&lt;/code&gt; property and an error event is fired (&lt;a href=&quot;idbrequest/onerror&quot;&gt;&lt;code&gt;IDBRequest.onerror&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e59c71bda4325aef46faa4602d34b63b60de52" translate="yes" xml:space="preserve">
          <source>In practice this is easier to do with a library &amp;mdash; the Web Audio API was built to be built upon. If you are about to embark on building something more complex, &lt;a href=&quot;https://tonejs.github.io/&quot;&gt;tone.js&lt;/a&gt; would be a good place to start. However, we want to demonstrate how to build such a demo from first principles, as a learning exercise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32516160de0372f860bce99327d1d19a3ef70023" translate="yes" xml:space="preserve">
          <source>In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled horizontally from the origin, where a positive value means the content is scrolled to the left. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all left or right, then &lt;code&gt;scrollX&lt;/code&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e4c3224f024b670cafe3c2640c0a1d7b515001" translate="yes" xml:space="preserve">
          <source>In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled vertically from the origin, where a positive value means the content is scrolled to upward. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all up or down, then &lt;code&gt;scrollY&lt;/code&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295312640161fdff38c2b50bcde9aea3c51e2408" translate="yes" xml:space="preserve">
          <source>In previous DOM specifications this API was defined within the &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2c9022f0f0d8e5ecaf15700987363c21780126" translate="yes" xml:space="preserve">
          <source>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adeae07f8e178d7be0eacd5d918d3c410b86f38a" translate="yes" xml:space="preserve">
          <source>In sequence 1 &amp;amp; 3, the &lt;code&gt;KeyboardEvent.key&lt;/code&gt; attribute is defined and is set appropriately to a value according to the rules defined ealier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc146c3c739a1f1ab859df4b0940afcbe4e3c4fd" translate="yes" xml:space="preserve">
          <source>In shared or service workers, the value in the worker might be higher than that of the main context because that window can be created after those workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dd0af79438852a4f8d38f9d9dc72e257be0b7a" translate="yes" xml:space="preserve">
          <source>In short, the &lt;a href=&quot;../mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; method &lt;code&gt;stop()&lt;/code&gt; method stops the track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe9767585f5a6087e3eefc48ac674b59b8cc1d1" translate="yes" xml:space="preserve">
          <source>In simple words, a binary string is a sequence of 1's and 0's. Javascript is loaded with rich features to manipulate the raw binary data in lower level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a183e4146a1597816ed082d6fe201ce9f7aca4" translate="yes" xml:space="preserve">
          <source>In some GTK-based environments, auto-repeat dispatches a native key-up event automatically during auto-repeat, and there's no way for Gecko to know the difference between a repeated series of keypresses and an auto-repeat. On those platforms, then, an auto-repeat key will generate the following sequence of events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172174b9f593a512a9a6c6f3a6aa9205ede7b089" translate="yes" xml:space="preserve">
          <source>In some browsers, if a stylesheet is loaded from a different domain, calling &lt;code&gt;cssRules&lt;/code&gt; results in &lt;code&gt;SecurityError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce1dcc3b182fd4da4a701ed003a7bf79ced8b8f" translate="yes" xml:space="preserve">
          <source>In some cases, an animation may run on a separate thread or process and will continue updating even while long-running JavaScript delays the main thread. In such a case, setting the &lt;a href=&quot;playbackrate&quot;&gt;&lt;code&gt;playbackRate&lt;/code&gt;&lt;/a&gt; on the animation directly may cause the animation's playback position to jump since its playback position on the main thread may have drifted from the playback position where it is currently running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4655844bbc80dc899c798f617d6fd3597b928e06" translate="yes" xml:space="preserve">
          <source>In some cases, the &lt;code&gt;NodeList&lt;/code&gt; is &lt;em&gt;live&lt;/em&gt;, which means that changes in the DOM automatically update the collection. For example, &lt;a href=&quot;node/childnodes&quot;&gt;&lt;code&gt;Node.childNodes&lt;/code&gt;&lt;/a&gt; is live:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee0c3405328ac0a1e364e03bbe1b6759943b171" translate="yes" xml:space="preserve">
          <source>In some cases, the above conversion to UTF-8 and then to Base64 will not be very space efficient. UTF-8 produces longer output than UTF-16 when the text contains a large percentage of characters in the range U+0800-U+FFFF, which are encoded with three bytes in UTF-8 but two in UTF-16. In the case where the JavaScript string contains evenly-distributed UTF-16 code points, one might consider encoding to UTF-16 instead of UTF-8 before the conversion to Base64, for a 40% reduction in size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132eae7008230e83d3da8ea93f84689e6de2d4b3" translate="yes" xml:space="preserve">
          <source>In some cases, you must read many external files. This is a standard function which uses the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object asynchronously in order to switch the content of the read file to a specified listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b299ff99aea1bc61ce766adae31254860b288ce2" translate="yes" xml:space="preserve">
          <source>In some countries, like Belgium, it's uncommon for people to provide a region as part of their postal address. In such cases, the browser returns an empty string as the value of &lt;code&gt;region&lt;/code&gt;. However, the address should still be acceptable to use for its intended purpose (e.g., to ship a product). However, always verify addresses to make sure what the user provides is usable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6dea87d6416b39807b2dab77adc9ccde9c3b546" translate="yes" xml:space="preserve">
          <source>In some implementations, passing anything other than a number for the screen and client fields will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c947099d79761880f47f1b5181a546601c8aeb25" translate="yes" xml:space="preserve">
          <source>In some instances, &lt;code&gt;InputDeviceCapabilities&lt;/code&gt; represents the capabilities of logical devices rather than physical devices. This allows, for example, touchscreen keyboards and physical keyboards to be represented the same way when they produce the same input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455954cdb79d203d096072cc645e2352e3bacba8" translate="yes" xml:space="preserve">
          <source>In some rare cases, packing greyscale textures which belong together into the color channels of a single texture might help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8807053eb3061f5ccd904706d857bd4ee81c15de" translate="yes" xml:space="preserve">
          <source>In some scenarios there may be multiple pointers (for example a device with both a touchscreen and a mouse) or a pointer supports multiple contact points (for example a touchscreen that supports multiple finger touches). The application can use the &lt;a href=&quot;pointerevent/isprimary&quot;&gt;&lt;code&gt;isPrimary&lt;/code&gt;&lt;/a&gt; property to identify a master pointer among the set of &lt;em&gt;active pointers&lt;/em&gt; for each pointer type. If an application only wants to support a primary pointer, it can ignore all pointer events that are not primary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7e8dede71e0c3ed9e9fb5f42051be333943383" translate="yes" xml:space="preserve">
          <source>In tandem with appropriate HTML and CSS, the result is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87785b6aae731be29028f0420000582fe05b36af" translate="yes" xml:space="preserve">
          <source>In technical terms, we apply a &lt;a href=&quot;http://webaudio.github.io/web-audio-api/#blackman-window&quot;&gt;Blackman window&lt;/a&gt; and smooth the values over time. The default value is good enough for most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4569a112b815930f3f6110fdab139a3c9f156284" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Pool of Tears&lt;/a&gt; example, each tear is passed a random &lt;code&gt;duration&lt;/code&gt; via its timing object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84baeba554340df677d283c92acea536f934dd81" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Pool of Tears&lt;/a&gt; example, each tear is passed a random delay via its timing object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8840866ab7b70934813f8b44dc4d3acedd59684a" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV&quot;&gt;Red Queen Race&lt;/a&gt; example, we can inspect Alice and the RedQueen's animation to see its individual keyframes like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e53b83e14cfbf2b6cb2206f2d31afedefa47e79" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV?editors=0010&quot;&gt;Red Queen's Race&lt;/a&gt; example, we animate Alice and the Red Queen by passing an easing &lt;code&gt;of&amp;nbsp;steps(7, end)&lt;/code&gt; to &lt;code&gt;animate()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d48fff257a7eaf677c500603cba8675d9ec15a0" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Drink Me/Eat Me game&lt;/a&gt;, Alice's height is animated so it can go from small to large or large to small. At the start of the game, her height is set between the two extremes by setting her animation's &lt;code&gt;currentTime&lt;/code&gt; to half her &lt;a href=&quot;../effecttiming&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;'s duration&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff4039fcfe679b0dec49d92d0aba4320d8da9c3" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the bottle causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to play backwards, causing her to get smaller. It is done by setting &lt;code&gt;aliceChange&lt;/code&gt;'s &lt;a href=&quot;playbackrate&quot;&gt;&lt;code&gt;Animation.playbackRate&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;-1&lt;/code&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ccab065512a27e756e2ce4032133c4b2ab5ec4" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the bottle causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to reverse, causing her to shrink:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f044f5fc3c895453f3a3776f76e7cb90e07603" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the cake causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to play forward, causing her to get bigger, as well as triggering the cake's animation. Two &lt;code&gt;Animation.play()&lt;/code&gt;s, one &lt;code&gt;EventListener&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce47f4fbd44866013a3484c775bc335526230a6b" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, players can get an ending with &lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Alice crying into a pool of tears&lt;/a&gt;. In the game, for performance reasons, the tears should only be animating when they're visible. So they must be paused as soon as they are animated like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f97c5e22a8412f74172efbe4d3fc58e65eafcde" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;Forgotten Key&lt;/a&gt; example, Alice waves her arm up and down by passing her an &lt;code&gt;alternate&lt;/code&gt; value for her &lt;code&gt;direction&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8cbb2f566cba2fd38c09a4aa57733808943991" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;Forgotten Key&lt;/a&gt; example, Alice waves her arm up and down the entire time the page is open by passing &lt;code&gt;Infinity&lt;/code&gt; as the value for her &lt;code&gt;iterations&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c892ed1b4c2d80a928b1b6bc3d60c8e0ce6d8a0" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, &lt;code&gt;whiteRabbit&lt;/code&gt; sets the &lt;code&gt;target&lt;/code&gt; element to be animated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57f87a4c92a2dd36732c3007295e662906a7cb1" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the &lt;code&gt;Animation()&lt;/code&gt; constructor is used to create an &lt;code&gt;Animation&lt;/code&gt; for the &lt;code&gt;rabbitDownKeyframes&lt;/code&gt; using the document's &lt;code&gt;timeline&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e919e7052a1fb04189f5298ef0aeed5addb60a81" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the &lt;code&gt;KeyframeEffect&lt;/code&gt; constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc7d3f46c7c879ce882c77ba8667b3a8c0fcd98" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the KeyframeEffect constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071693fd0cc0ece3fcd2069423c95fa1c37f35fd" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, you can assign the &lt;code&gt;rabbitDownAnimation&lt;/code&gt; an &lt;code&gt;id&lt;/code&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e3f097211b1868c0e1036a1f521e423e1d689e" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;Follow the White Rabbit&lt;/a&gt; example, the White Rabbit's animation is formed by coupling a &lt;code&gt;KeyframeEffect&lt;/code&gt; with an &lt;code&gt;Animation&lt;/code&gt; object. The &lt;code&gt;keyframeEffect&lt;/code&gt; takes an object of &lt;a href=&quot;../effecttiming&quot;&gt;timing properties&lt;/a&gt;, which is where we pass in &lt;code&gt;fill&lt;/code&gt;. &lt;code&gt;Forwards&lt;/code&gt; makes the rabbit retain its last keyframe rather than reverting to its unanimated state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9e06b09ced74d19ee9f6966beb25606973889e" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/zxYexJ?editors=0010&quot;&gt;Running on Web Animations API example&lt;/a&gt;, the we can sync all new animated cats by giving them all the same &lt;code&gt;startTime&lt;/code&gt; as the original running cat:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748f5741c26a5bddcbc0305b56737ef101affdfe" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API/Introduction&quot;&gt;File System API&lt;/a&gt;, a &lt;code&gt;FileError&lt;/code&gt; represents error conditions that you might encounter while accessing the file system using the asynchronous API. It extends the &lt;code&gt;FileError&lt;/code&gt; interface described in &lt;a href=&quot;http://dev.w3.org/2009/dap/file-system/pub/FileSystem/#bib-FILE-WRITER&quot;&gt;File Writer&lt;/a&gt; and adds several new error codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b81cbbb80d238a2f89066bdaabab365cf298d7" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;webvr_api&quot;&gt;WebVR API&lt;/a&gt;, &lt;code&gt;DOMPoint&lt;/code&gt; values are used to represent points in the coordinate space that the user's head mounted display exists in. In the following snippet, the position of the VR HMD can be retrieved by first grabbing a reference to the position sensor's current state using &lt;a href=&quot;positionsensorvrdevice/getstate&quot;&gt;&lt;code&gt;PositionSensorVRDevice.getState()&lt;/code&gt;&lt;/a&gt;, then accessing the resulting &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRPositionState&quot;&gt;&lt;code&gt;VRPositionState&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property, which returns a &lt;code&gt;DOMPoint&lt;/code&gt;. Note below the usage of &lt;code&gt;position.x&lt;/code&gt;, &lt;code&gt;position.y&lt;/code&gt;, and &lt;code&gt;position.z&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1fc260c83966dd331019cec75ccb6c2f27f605" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;displayPoseStats()&lt;/code&gt; function, we grab all of the data we want to display out of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose&quot;&gt;&lt;code&gt;GamepadPose&lt;/code&gt;&lt;/a&gt; object passed into it, then print them into the UI panel that exists in the demo for displaying such data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c51818ebbd3921f216a6e778639df0d79c9f898" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;draw()&lt;/code&gt; function, we call the &lt;code&gt;fillRect()&lt;/code&gt; function nine times using two &lt;code&gt;for&lt;/code&gt; loops. In each loop, the canvas is translated, the rectangle is drawn, and the canvas is returned back to its original state. Note how the call to &lt;code&gt;fillRect()&lt;/code&gt; uses the same coordinates each time, relying on &lt;code&gt;translate()&lt;/code&gt; to adjust the drawing position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56af66348fd5d195d217eafa61955360f6eb10f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;readStream()&lt;/code&gt; function itself, we lock a reader to the stream using &lt;a href=&quot;../readablestream/getreader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt;, then follow the same kind of pattern we saw earlier &amp;mdash; reading each chunk with &lt;code&gt;read()&lt;/code&gt;, checking whether &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and then ending the process if so, and reading the next chunk and processing it if not, before running the &lt;code&gt;read()&lt;/code&gt; function again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb029e4341e6bd4f62bafbfdb2ab6af6d7d6b7b3" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;updateStyle()&lt;/code&gt; function itself, we get a reference to the shadow DOM using &lt;a href=&quot;element/shadowroot&quot;&gt;&lt;code&gt;Element.shadowRoot&lt;/code&gt;&lt;/a&gt;. From here we use standard DOM traversal techniques to find the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; element inside the shadow DOM and then update the CSS found inside it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6ff5af1334148b91029abc027cca914a15f932" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;updateStyle()&lt;/code&gt; function itself, we get a reference to the shadow DOM using &lt;a href=&quot;shadowroot&quot;&gt;&lt;code&gt;Element.shadowRoot&lt;/code&gt;&lt;/a&gt;. From here we use standard DOM traversal techniques to find the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; element inside the shadow DOM and then update the CSS found inside it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04650fa0d0cd02a07bf39fff451f43fb09793e92" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;worker.js&lt;/code&gt; script, a &lt;code&gt;DedicatedWorkerGlobalScope.onmessage&lt;/code&gt; handler is used to handle messages from the main script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0be8078e13bc0c5378221913e5c62968ec583b" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;worker.js&lt;/code&gt; script, an &lt;code&gt;onmessage&lt;/code&gt; handler is used the handle messages from the main script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c335918199385a46beee58c2f3e09cb27b9c1f" translate="yes" xml:space="preserve">
          <source>In the HTML we just need to hook our function to the `onkeypress` event and specify that our textarea does not accept pasting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eaf6573ce3ac8e6c6ba35bfea60e7baeeeb376e" translate="yes" xml:space="preserve">
          <source>In the Media Stream API, both &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; have constrainable properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159a217b1d19a1ba5a26df24bfe572fb5946b57a" translate="yes" xml:space="preserve">
          <source>In the above example it can be observed that we can use the identifier and pseudo class name for defining the language of caption, where &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag is for italics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea2b539c7a1c9b9602da25dfb485fd9becc08f6" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;#text&lt;/code&gt; nodes are inserted in the DOM where whitespace occurs between tags (i.e. after the closing tag of an element and before the opening tag of the next).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6ec540892c01e0fe46e63eef1516429f317e9b" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;selObj.toString()&lt;/code&gt; is automatically called when it is passed to &lt;a href=&quot;../window/alert&quot;&gt;&lt;code&gt;Window.alert()&lt;/code&gt;&lt;/a&gt;. However, attempting to use a JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String&lt;/a&gt; property or method such as &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; directly on a &lt;a href=&quot;../selection&quot;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt; object results in an error if it does not have that property or method and may return unexpected results if it does. To use a &lt;code&gt;Selection&lt;/code&gt; object as a string, call its &lt;code&gt;toString()&lt;/code&gt; method directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89d604b3477fbfe0e9e3f5d0a2727debd14b6b3" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;selObj.toString()&lt;/code&gt; is automatically called when it is passed to &lt;a href=&quot;alert&quot;&gt;&lt;code&gt;window.alert()&lt;/code&gt;&lt;/a&gt;. However, attempting to use a JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String&lt;/a&gt; property or method such as &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; directly on a &lt;a href=&quot;../selection&quot;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt; object will result in an error if it does not have that property or method and may return unexpected results if it does. To use a &lt;code&gt;Selection&lt;/code&gt; object as a string, call its &lt;code&gt;toString()&lt;/code&gt; method directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b312d18e2d1af2f83dda821db09d7aa9fdb45b7f" translate="yes" xml:space="preserve">
          <source>In the above examples &lt;code&gt;ws&lt;/code&gt; has replaced &lt;code&gt;http&lt;/code&gt;, similarly &lt;code&gt;wss&lt;/code&gt; replaces &lt;code&gt;https&lt;/code&gt;. Establishing a WebSocket relies on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism&quot;&gt;HTTP Upgrade mechanism&lt;/a&gt;, so the request for the protocol upgrade is implicit when we address the HTTP server as &lt;code&gt;ws://www.example.com&lt;/code&gt; or &lt;code&gt;wss://www.example.com&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca15d3b8cb4a4353208bf48eb6ce069f10ddff6" translate="yes" xml:space="preserve">
          <source>In the above snippet, a named function &lt;code&gt;loop()&lt;/code&gt; is declared and is immediately executed. &lt;code&gt;loop()&lt;/code&gt; is recursively called inside &lt;code&gt;setTimeout()&lt;/code&gt; after the logic has completed executing. While this pattern does not guarantee execution on a fixed interval, it does guarantee that the previous interval has completed before recursing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038d50dc49f2e3b4b746867cf1c760513919ead8" translate="yes" xml:space="preserve">
          <source>In the above, the &lt;a href=&quot;../console&quot;&gt;console&lt;/a&gt; will show '#text' because a text node is inserted to maintain the whitespace between the end of the opening &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags. &lt;strong&gt;Any&lt;/strong&gt;&lt;a href=&quot;../document_object_model/whitespace_in_the_dom&quot;&gt;whitespace&lt;/a&gt; will create a &lt;code&gt;#text&lt;/code&gt; node, from a single space to multiple spaces, returns, tabs, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367d14782071c764710cebf410d8d975d3cbc7b3" translate="yes" xml:space="preserve">
          <source>In the article &lt;a href=&quot;web_audio_api/controlling_multiple_parameters_with_constantsourcenode&quot;&gt;Controlling multiple parameters with ConstantSourceNode&lt;/a&gt;, a &lt;code&gt;ConstantSourceNode&lt;/code&gt; is created to allow one slider control to change the gain on two &lt;a href=&quot;gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt;s. The three nodes are set up like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b77e474bcf3ab917f6ed436e550316024843d15" translate="yes" xml:space="preserve">
          <source>In the beginning, JavaScript and the DOM were tightly intertwined, but eventually, they evolved into separate entities. The page content is stored in the DOM and may be accessed and manipulated via JavaScript, so that we may write this approximative equation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb136d61139a16fcd17f87f13d568e3b53f76eb" translate="yes" xml:space="preserve">
          <source>In the below sections we'll look at our raw-webgl-demo in detail, and see where exactly the above features are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710670cb1700ac6bed01130dcfab169685441a86" translate="yes" xml:space="preserve">
          <source>In the box demo an additional &lt;code&gt;.computeSimpleProjectionMatrix()&lt;/code&gt; method is added. This is called in the &lt;code&gt;.draw()&lt;/code&gt; method and has the scale factor passed to it. The result should be identical to the last example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23d9de14b710f223f240ff496d1dc7617be6575" translate="yes" xml:space="preserve">
          <source>In the case of an HTML document, you can also replace portions of the DOM with new DOM trees built from HTML by setting the value of the &lt;a href=&quot;element/innerhtml&quot;&gt;&lt;code&gt;Element.innerHTML&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;element/outerhtml&quot;&gt;&lt;code&gt;outerHTML&lt;/code&gt;&lt;/a&gt; properties. These properties can also be read to fetch HTML fragments corresponding to the corresponding DOM subtree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5881bd36ab53447d14d96fa581095cfc3ec7b3" translate="yes" xml:space="preserve">
          <source>In the case of audio, a disabled track generates frames of silence (that is, frames in which every sample's value is 0). For video tracks, every frame is filled entirely with black pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e954687ec9108d17a620e698e7b922f3826401" translate="yes" xml:space="preserve">
          <source>In the case of each cue:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134c6dc788f159c41ef3215b21caa99007fa1a6c" translate="yes" xml:space="preserve">
          <source>In the case of readable streams, these are the chunks that have been enqueued but not yet read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f53490f9424fcb6f6b4369c3cc51225440326d7" translate="yes" xml:space="preserve">
          <source>In the case of writable streams, these are chunks that have been written but not yet processed by the underlying sink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be56e67b0d7c13ff05b3c79f41df3127c8b70dd0" translate="yes" xml:space="preserve">
          <source>In the case you need to obtain more details about the text, the following method allows you to measure it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361649fe0478299dc207f1091242e89204e295a2" translate="yes" xml:space="preserve">
          <source>In the chapter about &lt;a href=&quot;drawing_shapes&quot;&gt;drawing shapes&lt;/a&gt; I only mentioned the &lt;code&gt;stroke()&lt;/code&gt; and &lt;code&gt;fill()&lt;/code&gt; methods, but there's a third method we can use with paths, called &lt;code&gt;clip()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a556f68a246f6b0190846f10137ad4c3abd05977" translate="yes" xml:space="preserve">
          <source>In the chapter about &lt;a href=&quot;drawing_shapes&quot;&gt;drawing shapes&lt;/a&gt;, we used only the default line and fill styles. Here we will explore the canvas options we have at our disposal to make our drawings a little more attractive. You will learn how to add different colors, line styles, gradients, patterns and shadows to your drawings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c631c29a2b75acd27f3b25ebe6d701570901afdb" translate="yes" xml:space="preserve">
          <source>In the code above &lt;var&gt;allCookies&lt;/var&gt; is a string containing a semicolon-separated list of all cookies (i.e. &lt;code&gt;&lt;var&gt;key&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; pairs). Note that each &lt;var&gt;key&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt; may be surrounded by whitespace (space and tab characters): in fact &lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt; mandates a single space after each semicolon, but some user agents may not abide by this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1beb82ea79fef09ff7e1a22efa54cee0599c7186" translate="yes" xml:space="preserve">
          <source>In the code above, &lt;code&gt;newCookie&lt;/code&gt; is a string of form &lt;code&gt;&lt;var&gt;key&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt;. Note that you can only set/update a single cookie at a time using this method. Consider also that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751430196020e462a1062f8a888bc205355532d9" translate="yes" xml:space="preserve">
          <source>In the code example, &quot;caches&quot; is an attribute of the service worker's &lt;code&gt;WorkerGlobalScope&lt;/code&gt;. It holds the &lt;code&gt;CacheStorage&lt;/code&gt; object, by which by can access the &lt;a href=&quot;cachestorage&quot;&gt;&lt;code&gt;CacheStorage&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790fbaf97cead8a6a45860bb674cff8e4c36ab8a" translate="yes" xml:space="preserve">
          <source>In the common case the base URL is simply the location of the document, but it can be affected by many factors, including the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;&lt;/a&gt; element in HTML and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XML/xml:base&quot;&gt;xml:base&lt;/a&gt;&lt;/code&gt; attribute in XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5efef753ebf52497839ffd70a6f90392e3a260d" translate="yes" xml:space="preserve">
          <source>In the console, the following trace will be displayed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184092cb6374f0fdb574e64edd6fa7228f3006f0" translate="yes" xml:space="preserve">
          <source>In the definition of &lt;code&gt;render()&lt;/code&gt; if &lt;code&gt;copyVideo&lt;/code&gt; is true, then we call &lt;code&gt;updateTexture()&lt;/code&gt; each time just before we call the &lt;code&gt;drawScene()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2b40f1952f87fed97f07552defd99596f27dfe" translate="yes" xml:space="preserve">
          <source>In the demo &lt;a href=&quot;https://codepen.io/rachelnabors/pen/rxpmJL/?editors=0010&quot;&gt;Down the Rabbit Hole (with the Web Animation API)&lt;/a&gt;, we use the convenient &lt;code&gt;animate()&lt;/code&gt; method to immediately create and play an animation on the &lt;code&gt;#tunnel&lt;/code&gt; element to make it flow upwards, infinitely. Notice the array of objects passed as keyframes and also the timing options block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202f4b98e2e457f51462bd23a0954aa84dff43bc" translate="yes" xml:space="preserve">
          <source>In the example below, 10 straight lines are drawn with increasing line widths. The line on the far left is 1.0 units wide. However, the leftmost and all other odd-integer-width thickness lines do not appear crisp, because of the path's positioning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4780447d1e77484538059276c40fc54c59ac1837" translate="yes" xml:space="preserve">
          <source>In the example below, &lt;code&gt;onpayerdetailchange&lt;/code&gt; is used to set up a listener for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/payerdetailchange&quot;&gt;payerdetailchange&lt;/a&gt;&lt;/code&gt; event in order to validate the information entered by the user, requesting that any mistakes be corrected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206c3c63cab7b422d50e2a3959c149ce7f63615b" translate="yes" xml:space="preserve">
          <source>In the example below, a data channel is established, and an &lt;code&gt;onerror&lt;/code&gt; handler is added to it. The error handler passes information about the error to a UI library's alert box function to present an error message to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc512e47a94228213beabd56b67ae6b89f92ac38" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaoptionchange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaoptionchange&lt;/code&gt;&lt;/a&gt; event is called. It calls &lt;code&gt;updateDetails()&lt;/code&gt; to toggle the shipping method between &quot;standard&quot; and &quot;express&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034961eecc07f0e41d6e1c8958f78f79a6d78deb" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;a href=&quot;onshippingoptionchange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingoptionchange&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaoptionchange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaoptionchange&lt;/code&gt;&lt;/a&gt; events are dispatched. In each calls to &lt;code&gt;updateDetails()&lt;/code&gt; are made, one using a promise, and the other with a plain JS object. This demotrates synchrounous and asynchronous updates to a payment sheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106802246ff2cba3885c494ae2d379522d6bdd57" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; attribute of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element is set to &lt;code&gt;_blank&lt;/code&gt; and when the link is clicked, it logs to notify whether the condition is met or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e4566e82bb56ea28b1e39a446bd27f432d4250" translate="yes" xml:space="preserve">
          <source>In the example below, the cost of shipping varies by geography. When the &lt;a href=&quot;../paymentrequest/onshippingaddresschange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaddresschange&lt;/code&gt;&lt;/a&gt; is called, &lt;code&gt;updateDetails()&lt;/code&gt; is called to update the details of the &lt;code&gt;PaymentRequest&lt;/code&gt;, using &lt;code&gt;shippingAddress&lt;/code&gt; to set the correct shipping cost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f2eefcbea9337ae5b9fac581b8e7748a4c155f" translate="yes" xml:space="preserve">
          <source>In the example below, the cost of shipping varies by geography. When the &lt;a href=&quot;onshippingaddresschange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaddresschange&lt;/code&gt;&lt;/a&gt; is called, &lt;code&gt;updateDetails()&lt;/code&gt; is called to update the details of the &lt;code&gt;PaymentRequest&lt;/code&gt;, using &lt;code&gt;shippingAddress&lt;/code&gt; to set the correct shipping cost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f834c92189fcef8cd83b56bd0f3787c0ffac414c" translate="yes" xml:space="preserve">
          <source>In the example below, we create a node with mixed display and whitespace characters and the attribute is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50f8120d66119424065d02349efc2de9a03cfe6" translate="yes" xml:space="preserve">
          <source>In the example below, we see the implementation of a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc943052673e05ede088a6d5deb6f01db9d4689" translate="yes" xml:space="preserve">
          <source>In the example here, once we have retrieved the data, we insert the string as the textual content of the target. This has the effect of inserting the dragged text where it was dropped, assuming that the drop target is an area of text such as a &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;div&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aace07f97eb3431fa0c4367c7c8f5e95ae0370e2" translate="yes" xml:space="preserve">
          <source>In the examples above we are already making use of the &lt;code&gt;font&lt;/code&gt; property to make the text a bit larger than the default size. There are some more properties which let you adjust the way the text gets displayed on the canvas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a8b02b028ba58b7dfd42bdea7a01498ef4c3a6" translate="yes" xml:space="preserve">
          <source>In the examples below, we'll refer to the peer which is turning &quot;hold&quot; mode on and off as the local peer and the user being placed on hold as the remote peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ca896ae7b838120090476440aeaef9eca87c3f" translate="yes" xml:space="preserve">
          <source>In the examples below, we'll use the &lt;a href=&quot;../../window/requestanimationframe&quot;&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; method to control the animation. The &lt;code&gt;requestAnimationFrame&lt;/code&gt; method provides a smoother and more efficient way for animating by calling the animation frame when the system is ready to paint the frame. The number of callbacks is usually 60 times per second and may be reduced to a lower rate when running in background tabs. For more information about the animation loop, especially for games, see the article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games/Anatomy&quot;&gt;Anatomy of a video game&lt;/a&gt; in our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games&quot;&gt;Game development zone&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ead6a925f82797217bc4febda9e2848c9ca16de" translate="yes" xml:space="preserve">
          <source>In the final example of this chapter, we'll build a little art gallery. The gallery consists of a table containing several images. When the page is loaded, a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element is inserted for each image and a frame is drawn around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f8f41bb21484324aa74a2ec592c179f7309a51" translate="yes" xml:space="preserve">
          <source>In the final part of the handler, we include an &lt;a href=&quot;../speechsynthesisutterance/onpause&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.onpause&lt;/code&gt;&lt;/a&gt; handler to demonstrate how &lt;a href=&quot;../speechsynthesisevent&quot;&gt;&lt;code&gt;SpeechSynthesisEvent&lt;/code&gt;&lt;/a&gt; can be put to good use. When &lt;a href=&quot;../speechsynthesis/pause&quot;&gt;&lt;code&gt;SpeechSynthesis.pause()&lt;/code&gt;&lt;/a&gt; is invoked, this returns a message reporting the character number and name that the speech was paused at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72204efa77b6140c17c0cf9a91bf2d8f8666f30" translate="yes" xml:space="preserve">
          <source>In the first case above, a new (anonymous) handler function is created with each iteration of the loop. In the second case, the same previously declared function is used as an event handler, which results in smaller memory consumption because there is only one handler function created. Moreover, in the first case, it is not possible to call &lt;a href=&quot;removeeventlistener&quot;&gt;&lt;code&gt;removeEventListener()&lt;/code&gt;&lt;/a&gt; because no reference to the anonymous function is kept (or here, not kept to any of the multiple anonymous functions the loop might create.) In the second case, it's possible to do &lt;code&gt;myElement.removeEventListener(&quot;click&quot;, processEvent, false)&lt;/code&gt; because &lt;code&gt;processEvent&lt;/code&gt; is the function reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a06616d2d1a79d80ad40c424ea14279868eba9" translate="yes" xml:space="preserve">
          <source>In the first example, we have to wait for &lt;code&gt;myFunction()&lt;/code&gt; to run and return &lt;code&gt;value&lt;/code&gt; before any more of the code can execute. In the second example, &lt;code&gt;myFunction()&lt;/code&gt; returns a promise for &lt;code&gt;value&lt;/code&gt;, then the rest of the code can carry on running. When the promise resolves, the code inside &lt;code&gt;then&lt;/code&gt; will be run, asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237bf8a80763a604c41a957e192af6c016815343" translate="yes" xml:space="preserve">
          <source>In the first few lines of code, we draw a black rectangle the size of the canvas as a backdrop, then translate the origin to the center. Next, we create the circular clipping path by drawing an arc and calling &lt;code&gt;clip()&lt;/code&gt;. Clipping paths are also part of the canvas save state. If we wanted to keep the original clipping path we could have saved the canvas state before creating the new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01d4fbb899e1c9bfb390594c1d8dfcfcc14fd99" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a &lt;code&gt;handleMessage&lt;/code&gt; handler function, run when a message is sent back to this document using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.addEventListener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d23ea443c6c17d8a7b8694e2f35584131bc5044" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a &lt;code&gt;handleMessage&lt;/code&gt; handler function, run when a message is sent back to this document using &lt;code&gt;onmessage&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef7b50d4cd728b13b1faa603128d4d510d733a4" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;../messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor. When the IFrame has loaded, we pass &lt;a href=&quot;../messagechannel/port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; to the IFrame using &lt;a href=&quot;../window/postmessage&quot;&gt;&lt;code&gt;window.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the IFrame using &lt;code&gt;onmessage&lt;/code&gt;, putting it into a paragraph &amp;mdash; &lt;a href=&quot;../messagechannel/port1&quot;&gt;&lt;code&gt;MessageChannel.port1&lt;/code&gt;&lt;/a&gt; is listened to, to check when the message arrives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25cf09426d4c6a9936cbd7dd3d621e9ca1d71c2" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;../messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor. When the IFrame has loaded, we pass &lt;a href=&quot;../messagechannel/port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; to the IFrame using &lt;a href=&quot;postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the IFrame using &lt;code&gt;onmessage&lt;/code&gt;, putting it into a paragraph &amp;mdash; &lt;a href=&quot;../messagechannel/port1&quot;&gt;&lt;code&gt;MessageChannel.port1&lt;/code&gt;&lt;/a&gt; is listened to, to check when the message arrives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238f0592be750da1ce24eabeb82568b629e83a6c" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;../messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor. When the IFrame has loaded, we pass &lt;code&gt;port2&lt;/code&gt; to the IFrame using &lt;a href=&quot;../messageport/postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the IFrame (using &lt;a href=&quot;../messageport/onmessage&quot;&gt;&lt;code&gt;MessagePort.onmessage&lt;/code&gt;&lt;/a&gt;), putting it into a paragraph. &lt;a href=&quot;port1&quot;&gt;&lt;code&gt;MessageChannel.port1&lt;/code&gt;&lt;/a&gt; is listened to, to check when the message arrives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c569cdb98e9ad9e8e436cf060158927e2b6214b" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;messagechannel&quot;&gt;&lt;code&gt;MessageChannel()&lt;/code&gt;&lt;/a&gt; constructor. When the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; has loaded, we pass &lt;a href=&quot;port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../messageport/postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; (using &lt;a href=&quot;../messageport/onmessage&quot;&gt;&lt;code&gt;MessagePort.onmessage&lt;/code&gt;&lt;/a&gt;), putting it into a paragraph. The &lt;code&gt;handleMessage&lt;/code&gt; method is associated to the &lt;code&gt;port1&lt;/code&gt; to listen when the message arrives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039a0c183e5267a50a7d7965f3b3a21f6386cb9c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cbca89f7feedc8066d85994128a264e3657052" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; interface. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420b628a66fb512c01a6129bb5bc84419417fe9e" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. Upon a version change (after an &lt;code&gt;upgradedneeded&lt;/code&gt; event), the &lt;code&gt;success&lt;/code&gt; event will implement the &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; interface. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62bc6fcc2be4b4f1f6f5c4e9f84a194400ac424f" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a database asynchronously (&lt;a href=&quot;idbfactory&quot;&gt;&lt;code&gt;IDBFactory&lt;/code&gt;&lt;/a&gt;), handle success and error cases, and create a new object store in the case that an upgrade is needed (&lt;a href=&quot;idbdatabase&quot;&gt;&lt;code&gt;IDBdatabase&lt;/code&gt;&lt;/a&gt;). For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5201c411fb9613fec411faeac1fccc27317c475e" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a database asynchronously and make a request; &lt;code&gt;onerror&lt;/code&gt; and &lt;code&gt;onsuccess&lt;/code&gt; functions are included to handle the success and error cases. For a full working example, see our &lt;a href=&quot;https://github.com/chrisdavidmills/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://chrisdavidmills.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6036a2ba927c9abc293afb9b69926b7f16b41102" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.autoIncrement to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccc72e4a6a99203b539f07581c3ddeb17ef1de9" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.indexNames to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91d5f62da27efa68634f15d76c6ace1df3b040d" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.keyPath to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8880b8fdee4d42f903cebcfe0d82afd6cc260c9b" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.name to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947b2b78865f74f8222655dfed99286833cbbf25" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.transaction to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9becddc2bb7ec90c0a3e3c9ece22246fe9674c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad57a299009527ac8f2dd1dbd0ecdab42e093614" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we return the associated database connection using &lt;code&gt;db&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75eb1d616f6d05a9fa0821f8947490f9ee9f24f8" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we simply abort any activity done under the current transaction using &lt;code&gt;abort()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f59a285e31ec4566d2471042003d4ea3a258b3" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we simply log the mode of the current transaction using &lt;code&gt;mode&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4e437b34ba4b47c7d721167ae38f8bc64c3026" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0396bfc53f463837f3f50ead91b4ccd0303058f" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.onabort = function(event) { };&lt;/code&gt; block, reporting when the transaction has been aborted. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9291a990b541f5f63cec02e040f4b041c8298814" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.oncomplete = function(event) { };&lt;/code&gt; block, which reports back when the transaction was successful. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d979572fd1f87f060179ec0c46d8d5416b88385" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.onerror = function(event) { };&lt;/code&gt; block, making use of &lt;code&gt;transaction.error&lt;/code&gt; to help in reporting what went wrong when the transaction was unsuccessful. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cadd885e1bfec1eafbd9f9798e746af01ce2da6" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and clear all the current data out of the object store using &lt;code&gt;clear()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a59db44b4f9b5e947b3716a6d848b8d1f98f87d3" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and delete one specific record out of our object store using &lt;code&gt;delete()&lt;/code&gt; &amp;mdash; a sample record with the key &quot;Walk dog&quot;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f30641085b558285bc8c95bc595644bdab0929" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and get one specific record from object store using &lt;code&gt;get()&lt;/code&gt; &amp;mdash; a sample record with the key &quot;Walk dog&quot;. Once this data object is retrieved, you could then update it using normal JavaScript, then put it back into the database using a &lt;a href=&quot;put&quot;&gt;&lt;code&gt;IDBObjectStore.put&lt;/code&gt;&lt;/a&gt; operation. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322feb9948540265079df18f99d48a9e2d37112d" translate="yes" xml:space="preserve">
          <source>In the following example (see &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/png-transform-stream/&quot;&gt;Unpack chunks of a PNG&lt;/a&gt; for the full code running live, and &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams/png-transform-stream&quot;&gt;png-transform-stream&lt;/a&gt; for the source code), an image is fetched and its body retrieved as a &lt;a href=&quot;../readablestream&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt;. Next, we log the contents of the readable stream, use &lt;code&gt;pipeThrough()&lt;/code&gt; to send it to a new function that creates a gray-scaled version of the stream, then log the new stream's contents too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287bf3de9023d80525000b897ab3a6b79e79ad05" translate="yes" xml:space="preserve">
          <source>In the following example we are using a biquad filter on a media stream (for the full demo, see our &lt;a href=&quot;http://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-buffer demo&lt;/a&gt; live, or &lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;read the source&lt;/a&gt;.) As part of this demo, we get the frequency responses for this biquad filter, for five sample frequencies. We first create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt;s we need, one containing the input frequencies, and two to receive the output magnitude and phase values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13dcb52783e92bbdc8c8fdc2ccc00529dab0bb8c" translate="yes" xml:space="preserve">
          <source>In the following example we are using an IIR filter on a media stream (for a complete full demo, see our &lt;a href=&quot;http://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-buffer demo&lt;/a&gt; live, or &lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;read its source&lt;/a&gt;.) As part of this demo, we get the frequency responses for this IIR filter, for five sample frequencies. We first create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; objects we need, one containing the input frequencies, and two to receive the output magnitude and phase values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8816669e8174eda20010d216bd1c027736021aeb" translate="yes" xml:space="preserve">
          <source>In the following example we create a two second buffer, fill it with white noise, and then play it via an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. The comments should clearly explain what is going on. You can also &lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-buffer/&quot;&gt;run the code live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples&quot;&gt;view the source&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bb5bc0782a7e14fcddc65635b72a17225427f8" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;../idbindex/opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad642637028d27153d859e39e2a13769514d21e8" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;idbindex/opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d39035e98ce578c166dc6ba88a351fd3b654900" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor()&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBObjectStore&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;openCursor()&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8694728b278a221349f924251115114166382831" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21af5877ddb1b88586e3b5af4da9dc9daac0d4b3" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt;. This works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
