<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="5079e3d431da34e17f51ffaa54dd7ef2654096f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_map&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3daecff2774ca781da783cafc7f153a374109626" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_multimap&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f19508666532022fef13bc38392999c400ffc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_multiset&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca370fc8c24a3e12bcb4e3d8d92db80276664014" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unordered_set&lt;/code&gt; meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/unorderedassociativecontainer&quot;&gt;UnorderedAssociativeContainer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040602002425ccc8f281fedb7657336bbbd830b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::unwrap_ref_decay&lt;/code&gt; performs the same transformation as used by &lt;code&gt;&lt;a href=&quot;../pair/make_pair&quot;&gt;std::make_pair&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../tuple/make_tuple&quot;&gt;std::make_tuple&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8db3a9ed4cca1914878705608c3f4ee37d3ab72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::valarray&lt;/code&gt; and helper classes are defined to be free of certain forms of aliasing, thus allowing operations on these classes to be optimized similar to the effect of the keyword &lt;a href=&quot;http://en.cppreference.com/w/c/language/restrict.html&quot;&gt;restrict&lt;/a&gt; in the C programming language. In addition, functions and operators that take &lt;code&gt;valarray&lt;/code&gt; arguments are allowed to return proxy objects to make it possible for the compiler to optimize an expression such as &lt;code&gt;v1 = a*v2 + v3;&lt;/code&gt; as a single loop that executes &lt;code&gt;v1[i] = a*v2[i] + v3[i];&lt;/code&gt; avoiding any temporaries or multiple passes. However, &lt;a href=&quot;https://en.wikipedia.org/wiki/Expression_templates&quot;&gt;expression templates&lt;/a&gt; make the same optimization technique available for any C++ container, and the majority of numeric libraries prefer expression templates to valarrays for flexibility. Some C++ standard library implementations use expression templates to implement efficient operations on &lt;code&gt;std::valarray&lt;/code&gt; (e.g. GNU libstdc++ and LLVM libc++). Only rarely are valarrays optimized any further, as in e.g. &lt;a href=&quot;https://software.intel.com/en-us/node/684140&quot;&gt;Intel Integrated Performance Primitives&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20d004774c851fdc0796598dc359ee1dd1fac93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::valarray&lt;/code&gt; is the class for representing and manipulating arrays of values. It supports element-wise mathematical operations and various forms of generalized subscript operators, slicing and indirect access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a79f67afe03ecaf3481e25bf09fad7741f31c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::vector&lt;/code&gt; (for &lt;code&gt;T&lt;/code&gt; other than &lt;code&gt;bool&lt;/code&gt;) meets the requirements of &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, &lt;a href=&quot;../named_req/allocatorawarecontainer&quot;&gt;AllocatorAwareContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/sequencecontainer&quot;&gt;SequenceContainer&lt;/a&gt;, &lt;a href=&quot;../named_req/contiguouscontainer&quot;&gt;ContiguousContainer&lt;/a&gt;(since C++17) and &lt;a href=&quot;../named_req/reversiblecontainer&quot;&gt;ReversibleContainer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68dae847aabbd16cd93d3f879e7971cdf10e709" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wbuffer_convert&lt;/code&gt; is a wrapper over stream buffer of type &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&amp;lt;char&amp;gt;&lt;/code&gt; which gives it the appearance of &lt;code&gt;&lt;a href=&quot;../io/basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&amp;lt;Elem&amp;gt;&lt;/code&gt;. All I/O performed through &lt;code&gt;std::wbuffer_convert&lt;/code&gt; undergoes character conversion as defined by the facet &lt;code&gt;Codecvt&lt;/code&gt;. &lt;code&gt;std::wbuffer_convert&lt;/code&gt; assumes ownership of the conversion facet, and cannot use a facet managed by a locale. The standard facets suitable for use with &lt;code&gt;std::wbuffer_convert&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;codecvt_utf8&quot;&gt;std::codecvt_utf8&lt;/a&gt;&lt;/code&gt; for UTF-8/UCS2 and UTF-8/UCS4 conversions and &lt;code&gt;&lt;a href=&quot;codecvt_utf8_utf16&quot;&gt;std::codecvt_utf8_utf16&lt;/a&gt;&lt;/code&gt; for UTF-8/UTF-16 conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa98bfc69be64ea7f590ca3281f0a779c81d2441" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wctrans_t&lt;/code&gt; object suitable for use with &lt;code&gt;&lt;a href=&quot;towctrans&quot;&gt;std::towctrans&lt;/a&gt;&lt;/code&gt; to map wide characters according to the named mapping of the current C locale or zero if &lt;code&gt;str&lt;/code&gt; does not name a mapping supported by the current C locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee24a8db61effffbf5bb45fcf3ddb9dfa64496df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wctype_t&lt;/code&gt; object suitable for use with &lt;code&gt;&lt;a href=&quot;iswctype&quot;&gt;std::iswctype&lt;/a&gt;&lt;/code&gt; to classify wide characters according to the named category of the current C locale or zero if &lt;code&gt;str&lt;/code&gt; does not name a category supported by the current C locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1864ac005fcbd2a93ddb1571e43e44be4412c438" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equal&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77f56bda7b2c39003f6704ac1a7716aeb8c07cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;nonequivalent&lt;/code&gt; or &lt;code&gt;nonequal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c506eefc85ae85f48bf0f4fc2f5830f0001145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3804df5f9a847e123ce8343bff6e9097fc73071b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;std::weak_equality::nonequivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;greater&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac1453ccae0097d87ebcd87f032b12287e72982" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_equality&lt;/code&gt; is the weakest comparison category type: it is not implicitly-convertible to any other comparison category, but the other four comparison categories (&lt;code&gt;std::strong_equality&lt;/code&gt;, &lt;code&gt;std::partial_ordering&lt;/code&gt;, &lt;code&gt;std::weak_ordering&lt;/code&gt;, &lt;code&gt;std::strong_ordering&lt;/code&gt;) are implicitly-convertible to &lt;code&gt;std::weak_equality&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9943353a2fae41e6e01e739d2c063eec3fad775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ordering::less&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;std::weak_ordering::greater&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;std::weak_ordering::equivalent&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equal&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa4827d40c046df632eebcc4aaf27a23a99c366" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ordering&lt;/code&gt; is implicitly-convertible to &lt;code&gt;std::weak_equality&lt;/code&gt; and &lt;code&gt;std::partial_ordering&lt;/code&gt;, while &lt;code&gt;std::strong_ordering&lt;/code&gt; is implicitly-convertible to &lt;code&gt;weak_ordering&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed6ce6014df72db0fd24242c93b9ed9e7cb3aec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ptr&lt;/code&gt; is a smart pointer that holds a non-owning (&quot;weak&quot;) reference to an object that is managed by &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;. It must be converted to &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; in order to access the referenced object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20112f6fadc4cc459253cb7dc0888944be0042a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weak_ptr&lt;/code&gt; models temporary ownership: when an object needs to be accessed only if it exists, and it may be deleted at any time by someone else, &lt;code&gt;std::weak_ptr&lt;/code&gt; is used to track the object, and it is converted to &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; to assume temporary ownership. If the original &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; is destroyed at this time, the object's lifetime is extended until the temporary &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; is destroyed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6353c433bc54cd97c2fc1bfe2d4c98a8b7060b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::weibull_distribution&lt;/code&gt; satisfies &lt;a href=&quot;../../named_req/randomnumberdistribution&quot;&gt;RandomNumberDistribution&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e91f7a19bd8ff768f38ce1406082b15581be4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;std::wint_t&lt;/code&gt; is also defined in the following headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adc953ee7471ea5c0f9a9b8a59866a1d47329a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; (reference to the stream after manipulation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca1b1119f74c8027d6a698cddd2f8621287cabd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; on an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8465c65bcc1337f8b180748b84ca0fcba853f24f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91a44d85f3bcd9436fc7535a5fe94b3b849eb2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;str&lt;/code&gt; on success, null pointer on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21622e3910fb74b6ee7ee52d4f92044495f1db4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee64be3381662ff0f135c2138d9a8a8326cb5cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streamoff&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;streamoff&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="084c321dc9490f55a8140c401932094a4b1f37d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;streampos&lt;/code&gt;(deprecated)</source>
          <target state="translated">&lt;code&gt;streampos&lt;/code&gt;(deprecated)</target>
        </trans-unit>
        <trans-unit id="429d6494a5962b61408966f06074e9d5accf58c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string_view&lt;/code&gt; overload causes ambiguity in some cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d147c625f9c05ae1ae1cdc4935ea2e562430c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strstream&lt;/code&gt; has been deprecated since C++98, &lt;code&gt;&lt;a href=&quot;basic_stringstream&quot;&gt;std::stringstream&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;http://www.boost.org/doc/libs/release/libs/iostreams/doc/classes/array.html#array&quot;&gt;boost::iostreams::array&lt;/a&gt; are the recommended replacements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25aeda6590fba592dce6baae63ea15f2c4d06097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sub_match&lt;/code&gt; inherits from &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;BidirIt, BidirIt&amp;gt;&lt;/code&gt;, although it cannot be treated as a &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; object because member functions such as swap and assignment will not work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1b70d5d87abfd9b6383734974030d74b7355ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subseconds()&lt;/code&gt; returns the integral number of fractional seconds &lt;code&gt;since_midnight&lt;/code&gt; is after &lt;code&gt;(00:00:00 + hours() + minutes() + seconds())&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3b6a00f8223f337fd1e49dff2412160c541b3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subtract_with_carry_engine&lt;/code&gt; is a random number engine that uses &lt;a href=&quot;https://en.wikipedia.org/wiki/subtract_with_carry&quot;&gt;subtract with carry&lt;/a&gt; algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af73ccbde7fe6b4935d451d20bedd896acc9824" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;condition&lt;code&gt;)&lt;/code&gt;statement</target>
        </trans-unit>
        <trans-unit id="93f0e9b4c17c3584eca8f331f5237ce885f1fe70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync()&lt;/code&gt; or its equivalent is implicitly called by &lt;code&gt;close()&lt;/code&gt;, &lt;code&gt;seekoff()&lt;/code&gt;, and &lt;code&gt;seekpos()&lt;/code&gt; and explicitly called by &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;std::basic_streambuf::pubsync()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679a3e4e6d2bfb15eb2d8b5c5738cb4f6396cdfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sync()&lt;/code&gt; or its equivalent is implicitly called for output streams by &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubseekoff&quot;&gt;seekoff()&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubseekpos&quot;&gt;seekpos()&lt;/a&gt;&lt;/code&gt; and explicitly called by &lt;code&gt;&lt;a href=&quot;../basic_streambuf/pubsync&quot;&gt;std::basic_streambuf::pubsync()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f095f3da868331adba8129bec9b1a69b1750d68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized&lt;/code&gt;compound-statement</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt;compound-statement</target>
        </trans-unit>
        <trans-unit id="84fc76b9652e4658fe7884a74c72cd38a463d744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized&lt;/code&gt;compound-statement.</source>
          <target state="translated">&lt;code&gt;synchronized&lt;/code&gt;compound-statement.</target>
        </trans-unit>
        <trans-unit id="054851ea09d5f2815e5123d31e8f59874d9d3c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;synchronized_pool_resource&lt;/code&gt; may be accessed from multiple threads without external synchronization, and may have thread-specific pools to reduce synchronization costs. If the memory resource is only accessed from one thread, &lt;a href=&quot;unsynchronized_pool_resource&quot;&gt;&lt;code&gt;unsynchronized_pool_resource&lt;/code&gt;&lt;/a&gt; is more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1198634d869eb8501699c0d2c005e9cbe2ef230b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;system_clock&lt;/code&gt; measures Unix Time (i.e., time since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January 1970, not counting leap seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975fc5dd020b3a62835d5173c6970e7eb1cfe4db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt;, a modifiable &lt;a href=&quot;../language/value_category&quot;&gt;lvalue expression&lt;/a&gt; of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4b1dcb80b90cf277b526a5334315150881931f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;t&lt;/code&gt;, an lvalue or const rvalue of type &lt;code&gt;X::value_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38259447ed982d05a15aa3ba189f25664f32d43e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;table_size&lt;/code&gt;(static const)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5c0793defdd57124cafb9905809907ddf8535c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tai_clock&lt;/code&gt; meets the &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; requirements. It does not meet the &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; requirements unless the implementation can guarantee that &lt;a href=&quot;tai_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; does not throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4fc1efa78ee5255898d3df98d6ec199babc3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;declaration</target>
        </trans-unit>
        <trans-unit id="cef4701fc60fb9db1676a3441c4bbdca08768e70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;concept&lt;/code&gt;concept-name&lt;code&gt;= &lt;/code&gt;constraint-expression&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd238e2b39add944be3fc34637a8b950b767690e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;requires&lt;/code&gt;constraintfunction-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;requires&lt;/code&gt;constraintfunction-declaration</target>
        </trans-unit>
        <trans-unit id="4ed12cb5824696f2f82dc9852fe33d25ef698375" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</target>
        </trans-unit>
        <trans-unit id="eb46ad9c8935ecee4a2243f54359151abf200cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;name(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;name(optional)</target>
        </trans-unit>
        <trans-unit id="d5eccbf394c6f73fe09755e2c36c060ddaca42b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)</target>
        </trans-unit>
        <trans-unit id="930be1c6b6df26e405d142037c1461164676a081" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)&lt;code&gt;=&lt;/code&gt;default</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;typename(C++17)|class&lt;/code&gt;name(optional)&lt;code&gt;=&lt;/code&gt;default</target>
        </trans-unit>
        <trans-unit id="6658b3ed79c02b4a958bf0b5e15db64b1b5a49b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-declaration</target>
        </trans-unit>
        <trans-unit id="f736579485815cfbe84869cb1d48765dd18d564c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-keyclass-head-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;class-keyclass-head-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</target>
        </trans-unit>
        <trans-unit id="c98897f309016293ec5eafb1df5701ee759926e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;decl-specifier-seqdeclarator&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;initializer(optional)</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;decl-specifier-seqdeclarator&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;initializer(optional)</target>
        </trans-unit>
        <trans-unit id="0ee15a833b8bfe2782d45e5e1f58950123cc161b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;declaration</target>
        </trans-unit>
        <trans-unit id="28e88f8bca8f7529eaa4eb74fb031f498b72a72b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;function-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;function-declaration</target>
        </trans-unit>
        <trans-unit id="3bced8978a9eec83b278bb70e57f6c78726997a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;requires-clause(C++20)(optional)declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;requires-clause(C++20)(optional)declaration</target>
        </trans-unit>
        <trans-unit id="bdba698e8040b1c5726158fac45c4ad1e7b9c43b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;variable-declaration</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;variable-declaration</target>
        </trans-unit>
        <trans-unit id="0ee65e78f54239d6be70a938940cf4da37aa6a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;template-parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;template-parameter-list&lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="31926f20abea388376d54e3542df3c3b972c58e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;&lt;code&gt;class|struct&lt;/code&gt;template-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&amp;nbsp;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;&lt;code&gt;class|struct&lt;/code&gt;template-name&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&amp;nbsp;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ed6d7cc9df0204a2a1cb436e21786938aebd872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;&amp;lt;&lt;/code&gt;argument-list&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36792954e2a87b9a2654165406419c9cfe4647dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt;return-typename&lt;code&gt;(&lt;/code&gt;parameter-list&lt;code&gt;)&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64c46d9da989307152254e779af06f6aa927ce80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this == &amp;amp;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64bb1972a884a64d9c938447deb510bc6797fa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c609c169c348c8de843d34491bbc9163ad341b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; on success, a null pointer on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1513e2cac5aaea270abb0d7ce912eea28af8c3fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt; pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbce60906bfffde46cd61b39564a9723741d068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;, if the class is a dependent type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dd7c7da4f2db512c36ff60aea324bbf46d7f1eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="08aa582f31c0d72a47b48b6014e9681e01c7d45b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread_local&lt;/code&gt; -</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699119966bdd1b85af68fc960d1b82c22d66a7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw &lt;/code&gt;object&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bf225abaa03f16050908b861154f0c280035fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;throw(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a08d21925c481be53c04af8bcf1210d5cae0c12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw(&lt;/code&gt;typeid, typeid, ...&lt;code&gt;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa4dfba6723ea3bd941615fc019dfa44a515828" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt; expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e984aa98a16d5f8c796f0fc5f05d8b5733366b89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt;-expression</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt;-expression</target>
        </trans-unit>
        <trans-unit id="111860c5720c2462723c7be35ea67cd3338eeee8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;throw&lt;/code&gt;expression</source>
          <target state="translated">&lt;code&gt;throw&lt;/code&gt;expression</target>
        </trans-unit>
        <trans-unit id="0893d51f0b8564356f4e175f506e1f035224a7a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_of_day&lt;/code&gt; splits a duration representing time elapsed since midnight into hours, minutes, seconds, and fractional seconds, as applicable. It is primarily a formatting tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41774b2b7834a7c9300db964e82aa508cd2a0f23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_point&lt;/code&gt; to convert from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c332ad4cbd24983bad1615133aa4a05f6df52a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_point_cast&lt;/code&gt; will only participate in overload resolution if &lt;code&gt;ToDuration&lt;/code&gt; is an instantiation of &lt;code&gt;duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e87fc979fdc276061810e2061ff505dce08a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time_zone&lt;/code&gt; is not copyable but does have a defaulted move constructor and a defaulted move assignment operator. However, as users have only &lt;code&gt;const&lt;/code&gt; access to &lt;code&gt;time_zone&lt;/code&gt; objects, these functions cannot be called in user code without invoking &lt;a href=&quot;../language/ub&quot;&gt;undefined behavior&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ed1571b14b52948622ae54ee17b9eb2346abfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_hour&lt;/code&gt;, &lt;code&gt;tm_min&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcef5aa07b56fab4d3d4675bab67cdc9dfcccbae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_hour&lt;/code&gt;, &lt;code&gt;tm_min&lt;/code&gt;, &lt;code&gt;tm_sec&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6bdfa63e81df26250a2e98f008c873a2fa67236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_mon&lt;/code&gt;, &lt;code&gt;tm_mday&lt;/code&gt;, &lt;code&gt;tm_year&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba4b8128692116b64dcf6ddb4289880069fe8f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tm_year&lt;/code&gt;, &lt;code&gt;tm_wday&lt;/code&gt;, &lt;code&gt;tm_yday&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08674887a45d43a5333632cd5641dfa15872c949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_sys&lt;/code&gt; and &lt;code&gt;from_sys&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb430c8f780a57e1fa2afa81dc729ec9cf4927dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;to_utc&lt;/code&gt; and &lt;code&gt;from_utc&lt;/code&gt;; or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2863c1409fb265e8989d65ec8fa7b3822629f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trivial-clock&lt;/code&gt; is an implementation-defined type that satisfies &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; and is sufficient to represent the resolution and range of the file time values offered by the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c758ae651b4b1b8f58cd6578ccb94902f484afd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; (the entire sequence is matched)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b337fa35a98c22ea1fef2a94b3acc654600c1dcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if *this refers to a shared state, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b61da87ca14a1ea93e23f30d760508222e39716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*obj&lt;/code&gt; is a lock-free atomic, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c806da6c27933be3771ba51bfd83f1f030953d68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; contains a value, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; does not contain a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02eeb5182d007bfa0f02b2d018a170329f05658" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; has a shared state, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897cf60c64bf6c8adf9c9f2a86f2b56069816509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; has an associated mutex and has acquired ownership of it, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64904471fddc80d155bcc3c1a8fbc8b6eebdd92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; has an associated mutex and has acquired shared ownership of it, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ecc1ea7a6675da55238f817af0748e552ccb14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; is the only &lt;code&gt;shared_ptr&lt;/code&gt; instance managing the current object, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a882da1b9219101479a684aa071a48b32d21f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; owns an object, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e3f46c4ddef883c52589ca44ce3c6082f9843b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; precedes &lt;code&gt;other&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise. Common implementations compare the addresses of the control blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e04b16279af2d729bbf6cd62d4eac83598ae689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; represents a leap year, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd04bed382509c381a323fcf9d8480497f19a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; stores a callable function target, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc78a5870c6f3c121fa269d0106efd29f247d601" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; stores a pointer, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7504e43d07538ac694058dac7796a005977fa99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;B&lt;/code&gt; has a member &lt;code&gt;::value&lt;/code&gt; that is &lt;code&gt;false&lt;/code&gt; when explicitly converted to &lt;code&gt;bool&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54718d3dce95fd672e8bd5fd850dfed66817adcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Derived&lt;/code&gt; is derived from &lt;code&gt;Base&lt;/code&gt; or if both are the same non-union class (in both cases ignoring cv-qualification), &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54db9751ef6490d27fa40e1f9becf5b364291cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;From&lt;/code&gt; is convertible to &lt;code&gt;To&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7977e38535151910cc2005a6cdb14f682feea5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;INVOKE&amp;lt;R&amp;gt;(declval&amp;lt;Fn&amp;gt;(), declval&amp;lt;ArgTypes&amp;gt;()...)&lt;/code&gt; is well formed when treated as an unevaluated operand , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3a8ee493790bf7c371c0f3450a29207c404245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num != R2::num || R1::den != R2::den&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a08e76506577efbeb03359b9d52d87b7ce810a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;gt; R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e8d910890e3034111d598805c5835c9d7a49fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;gt;= R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f87bfce095afdfbdcf90fdc6ddbf83770b7f8de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;lt; R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1fd7f25c867a50ecc417b26562c7513f389167" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num * R2::den &amp;lt;= R2::num * R1::den&lt;/code&gt;, or equivalent expression that avoids overflow , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3324c06c5e5ebd6613ba663481a8b0079f9bafa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;R1::num == R2::num &amp;amp;&amp;amp; R1::den == R2::den&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33656bb5f9fe41fe760e6396a3d5de0ea1b922bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; is the same type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d2a44b105fc2ea4ebdc7759f674772926f44cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has a virtual destructor , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1ea84e60254ccf0bc4d7b305a8fd07948179e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; has unique object representations , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e1d272aa759771f50df20c70a2a1821a276e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a &lt;a href=&quot;../language/objects#Polymorphic_objects&quot;&gt;polymorphic&lt;/a&gt; class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86841b918c3b5aa4bf6fc74125e065809f54b4ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a POD type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43256d3a170a8216ec596aadf18c944e03c3ed60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a compound type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a13bbc1373ef76774c00ac24575b9d248ef4411a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a const-qualified type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279886cc647fdc4cca818d9056acf5f16f60c12e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a final class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cb39a09cbf2fb91ae701cbc53458f4103c456a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a floating-point type (possibly cv-qualified) , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e398e25abbacd4f152b58b55b2aef70ff760978e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a function object generated by &lt;code&gt;&lt;a href=&quot;bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db029207e8fad628125a73e66af658bd7490544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a function type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa15bfdc348748fdd841cec9e3f10b601e80bdea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a fundamental type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5926e2c0d952fd494d2c25a2b92c6490fb93aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a literal type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b21c0d3bfcdd769318e02e20bf1655360865501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a member function pointer type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c5fb109382eb6d9136b4c98dda10aad8b5cf2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a member pointer type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9a692aec6f60f510972993792edb7ceb7df5f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a non-union class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2824cf3958551b1a80b8c2d2cd9b6be31d3d839b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a pointer to member object , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f846a03755bfee500bf1b837d438744fdfcb478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a pointer type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59994ac5601571758017d10da075720b84207343" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a reference type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c851cfdaae239a4932cf46a4bf49005fff543a7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a scalar type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e42e209b8dc9ce5c3a915b032c008bb4766af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a signed arithmetic type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f77b3c510bb9cdbe2e50d97cc8d0858f7b5a3f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a standard or implementation-defined execution policy type, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3375c55c67fb5ae89ea7f9c82c389ab4d7ac0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a standard-layout type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9b4b3f04f3269a9aa9306396a67df7352c4dc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a trivial type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fce0d9947325cbe66f55912b102dae643e80c2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a trivially copyable type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4aa77f49812db3b334e3b5180ef7d6667eefed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a union type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75dd5387fe28e777a5f982e97246bafb4257330" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is a volatile-qualified type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee52ffe3e1e9db1ab92779afa612a128eab077df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an &lt;a href=&quot;../language/abstract_class&quot;&gt;abstract class&lt;/a&gt; type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac70f06310b441c83c89b23ccd0c0202a32fa2bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an aggregate type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b902a3d8ac661c09ed64f9f9a7f16f605af31b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an arithmetic type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4d0c31fc9b80a52cc721fb10318915cfc64399" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746a1efd9c6be9574e5a3c051dea3c0d6cf9f762" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type of known bound , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4435b83f2f3a16ede189f4fb38973638ceac4a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type of unknown bound , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e494cf9a7b159e777048b9cbafffaffee8f0fb06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an empty class type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85977cd0c1de1cd0fc141622bcf061529af2b9ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an enumeration type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81682909c7e426be61907ad56980301f487845fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an error code enum, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506f07c315456ae21dc7facce92a56b94ea92085" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an error condition enum, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0659e11e4997678ec43608a5c78b47dfa6aee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an integral type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d306c4928199ac6fbd1a6c460c8bc2bf6a1340" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an lvalue reference type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ded384ef7e4fc508beb30fd6ff06ab75b813108" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an object type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d3754f063e3ddf7aefad55063a55ae0e36d800" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an rvalue reference type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4af62411a901ee93d4980d9a31b5d15a419aa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an unsigned arithmetic type , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b221cc0617be6c204f1353e23be2c22563ffd342" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is assignable from &lt;code&gt;U&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4134cd012a586b5444536b97bb0f38101fd897e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is constructible from &lt;code&gt;Args...&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1518f0d88691783a47c4afcf07fe97c56ed83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is copy-assignable, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3d5dacd9704415fc7ae19973a5eb670b1c240d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is copy-constructible , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7255ba501a7ea18af0e9a3ee9e275a102e3efe60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is default-constructible , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c90c0251b9cf81d28e241e382735232d932efea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is destructible, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064f1de49c7177f9dd8e9434d185c52649ed3243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is move-assignable, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f539d21334f1da6b7d57b70c873d27951c1760c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is move-constructible , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c0f7184a949f32a7ec895603b600e432bbe8fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is swappable with &lt;code&gt;U&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d448a819bcf27f4ec633cf0094aa1a7d2ee39cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is the type &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt; (possibly cv-qualified) , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17d7a11237304f4520a6f20f473ff3666a6df77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is the type &lt;code&gt;void&lt;/code&gt; (possibly cv-qualified) , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d63fe38bfcd036222292c5760431d3f80f9cb41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; satisfies the &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; requirements , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84579fe6f08f4d9738e271efa674582fbc88ee4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; uses allocator &lt;code&gt;Alloc&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c976f52872c9e7db630750172899cc9ba9d70657" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;[first2, last2)&lt;/code&gt; is a subsequence of &lt;code&gt;[first1, last1)&lt;/code&gt;; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3107a7616b2db76470a54bac83fcd6b7525b81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; has finite value, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da9c5ba40ea5b12b1d46ad9a5a9a785224aa8b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is a NaN, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2c60f7711706b0465ae8b89f2d3ec94073f688" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is infinite, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fa0c1018e3cb3f8bc1a88b2597787cda700f96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is negative, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fecb1cd84a1e1205e0e304db06b224b9ac956588" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;arg&lt;/code&gt; is normal, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa7833673d1c90323b97e307b34f34143d63144" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;c1&lt;/code&gt; is equal to &lt;code&gt;c2&lt;/code&gt; under the rules described above, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfde577449d3c931501c92f9f615c9fef117ab26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;c&lt;/code&gt; is classified by &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9471eccc5eceaefffe96fd9e74753f4fcf6ae633" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs != rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34c057f2b3c9d49a2fbba50809fc0b1f96df1d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;gt; rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d87881830cf931ab34fb8defb4e94a371a82589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;gt;= rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a3fb1ff563932ada0f7186267a650708df9c20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;lt; rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1815fa824b66b43983f869b0185ca44208eb0c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs &amp;lt;= rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5aa0c137d83e5a0625fa238a2db2cefb6108c15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs == rhs&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10124b38ef58c34919e2466e22dbc6f366279c37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121513d78d5683ce9aa8a6fef90e00b12683aca7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;s1&lt;/code&gt; is lexicographically less than &lt;code&gt;s2&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c80743604d10bb3b71ba8a58403f5e3d38167cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;t1 &amp;lt;= t2&lt;/code&gt; is always &lt;code&gt;true&lt;/code&gt; and the time between clock ticks is constant, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e460e2e5e079e5662b4e089f5c7009cf0329ad3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9fcef073d847fd38d855f9dd6d94e9a9d99ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;nonequivalent&lt;/code&gt; or &lt;code&gt;nonequal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9051662129b0f3a242c1fc7fd3934749e257f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cd71e9db7a3d6d42ce18717cc17a10b74519f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;greater&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a266773c69ddb66bead70edb14dd7a049288e42e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;nonequivalent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db4f4f0bc9f1a0dcd72631564298824e2e92327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt; or &lt;code&gt;equal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778d1d451ff063eb89d0eeb062b70547ec3f2c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3172d9505adf7149c196e4dda25da24ca250fd6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;unordered&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt;, or &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;equivalent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f95842d952618d968d8af18ffccae287456d293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;value != 0&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbbe6801d842b13ea984c2582992a4df054fef2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;weekday().ok() == true&lt;/code&gt; and &lt;code&gt;index()&lt;/code&gt; is in the range [1, 5]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3255749cce076a7c942ed9f7b8fbc3cd58aec8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;gt; y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243af8a752ac91218f7d49c89c0975cf342ec397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;gt;= y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8cb5e31412b0703f778e3fb0aa406771e46c3e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;lt; y || x &amp;gt; y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3901f105376f20d001995960f0199deb46e3ab9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;lt; y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2885ac2556988f547ff4eceb0b04382fefc5eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x &amp;lt;= y&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a5221dfda344f736e743802c2676734e20b3b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are in the same state (such that repeated future calls to &lt;code&gt;x()&lt;/code&gt; and &lt;code&gt;y()&lt;/code&gt; will produce identical sequences). Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52764c8952951fbe08c47ae1c319748495f62c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is an integral power of two; otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf77f8a170a0b7cf8e197edd700f2ee2f4bb8c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if a directory was created for the directory &lt;code&gt;p&lt;/code&gt; resolves to, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bece88ec75292f03199bedab744dd32715f9f3fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if a non-recoverable error has occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b5e95de12ba5f427bc8ef00820d95d83c03b6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if all of the following is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7feebd08c17d9d05f1b452049b1dcc58556833b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an element equal to &lt;code&gt;value&lt;/code&gt; is found, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e5e513c6d623da9a26a53e3347bbe0718a8a36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an end-of-file has occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bcc7f1ae93cb6825b5741398d2898147f778bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if an error has occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb7a945f2cf54748f4dc8cbe0d588d6f1b8dd0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if any two allocators of type &lt;code&gt;A&lt;/code&gt; always compare equal. If not provided, &lt;code&gt;&lt;a href=&quot;../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&lt;/code&gt; defaults this to equal &lt;code&gt;&lt;a href=&quot;../types/is_empty&quot;&gt;std::is_empty&lt;/a&gt;&amp;lt;A&amp;gt;::type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75e79f96736cec0da4422496d046ca43a70e271" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if both &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;it&lt;/code&gt; are valid, or both are invalid, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31889d3052d3523de793be538c512f07dc006883" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; is NaN, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8061fcebee76efb0b8e9ac2a22fa95246d06fcc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if instance contains a value, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9ae7df0b2daeb373a9564900c7b4397aab26e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if sub-expression n participated in the match, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d0d5062dc8915e17eac40523474e716b5a465c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;p1&lt;/code&gt; and &lt;code&gt;p2&lt;/code&gt; refer to the same file or directory and their file status is the same. &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40efafedf9595e8b040c61bd1fe3b8737ecb15bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the allocator of type &lt;code&gt;A&lt;/code&gt; needs to be copied when the container that uses it is copy-assigned. Note that if the allocators of the source and the target containers do not compare equal, copy assignment has to deallocate the target's memory using the old allocator and then allocate it using the new allocator before copying the elements (and the allocator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb4243227b7226e633bdbcd4bccf181169d0463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the allocator of type &lt;code&gt;A&lt;/code&gt; needs to be moved when the container that uses it is move-assigned. If this member is &lt;code&gt;false&lt;/code&gt; and the allocators of the source and the target containers do not compare equal, move assignment cannot take ownership of the source memory and must move-assign or move-construct the elements individually, resizing its own memory as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a989fc0f089a5f2c131ec55fc8697d2393cc43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the allocators of type &lt;code&gt;A&lt;/code&gt; need to be swapped when two containers that use them are swapped. If this member is &lt;code&gt;false&lt;/code&gt; and the allocators of the two containers do not compare equal, the behavior of container swap is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee4cc0fe61898eb81b940b710d64eb02581a195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the associated file is open, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae99d24f74b5f27a9747f1d3cab7010946cc1fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the atomic operations on the objects of this type are lock-free, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a044a836193b2fcd330a7eef9108235358717dfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the atomic operations on this object are lock-free, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9c546ffd5869e527989105c7215720bd4cc77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the comparison operation holds true, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c802c6770f394195ba68520f04a36dbb7d0900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the container doesn't have any element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303ff36ac39b8c4990f443a72372a2023f3f4237" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the container is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38fd6596dbb120ce644b9a46e404db9f612ea4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison holds as defined by &lt;code&gt;&lt;a href=&quot;compare&quot;&gt;std::sub_match::compare()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1836e5d6e1e7a62ca904ac434d76f8282910904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison holds, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7627d1e51ad70c5ee2cc9dd8de593da75ce7f349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison yields &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3248f847849692a6a913a9efef092510b6022911" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding comparison yields, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2fd32bb5096e718894f9ec6381a6279c5b27a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding path component is not empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435ba71d15fe35847d288669d7ffe64adaf2e965" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the corresponding relation holds, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e34dfd5278ce73774a6aadf8a971b3a87aca54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the day value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [1, 31]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade861a9f26fc914acd9e634902525dd6a953d53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the elements in the range are sorted in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37e3745ea8db57d240782b0e1208288841ed7ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the error code is equivalent to the given error condition for the error category represented by &lt;code&gt;*this&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabc4af8891e069a58fae80b1c67c853047fc2cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the evaluation of the call occurs within the evaluation of an expression or conversion that is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b753a908c7f39ef67704c38b88b576b17d7364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a FIFO pipe, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb296ce49a6b4b1ee3cdf1483ce9f110cf19507c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a block device. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1abad0e5c34ad61a53735cbc5cc10677251b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a character device, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5285a63242b06b02607f5c6e9847e68696cc861" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a directory, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c4658f587b6b5415938a087542db2e1d03af29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a file that is not regular file, directory, or a symlink, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a444768282eb1b92ae8ccae062b31180fc15fe7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a named socket. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803fdbe29d448217cc25db1a57957352277b853d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to a symbolic link. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511cfdc5bfa36df8669b7dd625f008c5da5a67e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated &lt;code&gt;s&lt;/code&gt; refers to an empty file or directory, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b18a5c93be2c1a6c3f4c03d3053ebed3c6dc6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file indicated by &lt;code&gt;p&lt;/code&gt; or if the type indicated by &lt;code&gt;s&lt;/code&gt; refers to a regular file, &lt;code&gt;false&lt;/code&gt; otherwise. The non-throwing overload returns &lt;code&gt;false&lt;/code&gt; if an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af666181e84886a66959b355855d2f51c65ea1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the file stream has an associated file, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813e4dc8203e2000a880994e7765d1083e858af9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the first range is lexicographically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774d06495aeafee6200a549323ec527e82d9d366" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given file status is a known file status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed3fc3725cb6878c89beee27879806a1bd02904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the given path or file status corresponds to an existing file or directory, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2d21e1658d176456b4e1fa0d48b7bdcd9cdfd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the initialization of the input stream was successful, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34bc9ab000349629a64c34fba20806bdafc5f19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was acquired successfully, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff41e350b367f7a3de8bc91240afaaa1c5a0fb19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was acquired, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed8e9e1aad9d50cab487c82cc96bf9a2d76504e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the lock was acquired, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d1e54d3b787c77666338119d196f840e48e1f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the managed object has already been deleted, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3777ed7fa1cc6d603efabbdf42cb72de04079673" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the match results are ready, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87ee071efee810a7e378350dc083eb150c477f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the month and day combination is valid, otherwise false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5a5de7c58b60d34d97d7aa15766326699bb85c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the month value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [1, 12]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3326a1a8b0006cb0d54e3b41e3129045db78d1a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the new permutation is lexicographically greater than the old. &lt;code&gt;false&lt;/code&gt; if the last permutation was reached and the range was reset to the first permutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78bf4c0f66bafc6942692c75330fcbb627cd5a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the new permutation precedes the old in lexicographical order. &lt;code&gt;false&lt;/code&gt; if the first permutation was reached and the range was reset to the last permutation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7bab2f9360fc758ef20de3e35f5aac543f29b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the next increment will iterate into the currently referred directory, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d76b62497880f5b40c16493988543b02bd069a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the ownership of the mutex has been acquired successfully, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f06c2e4e785e50910ebe499c6237c23507b67a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the path is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e365ddb5f6f998821c36060394be37e4901853f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the preparation of the output stream was successful, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0aff1ec423245460fcbe6f21acd5be965fe98d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range &lt;code&gt;[first, last)&lt;/code&gt; is empty or is partitioned by &lt;code&gt;p&lt;/code&gt;. &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6ccfbdc802abe5dfa166b5b5c67bf5853aa443" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range &lt;code&gt;[first1, last1)&lt;/code&gt; is a permutation of the range &lt;code&gt;[first2, last2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58330fe78a5001387856c05f256100f19ad78e79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the range is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3069cc79408f4d8e829ff11d845f47c4ee4786ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the referenced object was successfully changed, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a1a4bb5d5ae5450f52f36b17307ebe8739bdd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the requested bit is set, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9929406820c7779b502a413dafbbbaa8bbfc3bb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the shared lock ownership was acquired successfully, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd20391ffe9ee2218f1a41aa8879768386dd45a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the span is empty (i.e., &lt;code&gt;size() == 0&lt;/code&gt;); &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1de7a24712053b231df65723b4ec357d6680ae2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the stream has no errors occurred, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e08fcd7a0a4e227fde2ff7de33cc45fa4ca3d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the stream has no errors, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edac865f305e3b32d3d0afeb1b336cd21ba7d1cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string begins with the provided prefix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fc360715bdfada84f522a4dc85f82bff4674b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string ends with the provided suffix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edebbec2750e41c9fa1b31f94f56a7fbec8cbd98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b119bb7d305012320621645ec7d7b6036e3bf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string view begins with the provided prefix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1be56d1cdaa07eed47d303ee331017a8bc6a2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the string view ends with the provided suffix, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b463ac5fc5feae4718114e1642e26b6014b6569d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the thread object identifies an active thread of execution, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6424740ec90619dfa2062e4901878d09eef08776" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;file_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a630c6a3fed2983afdf951e2e600510907bf48e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;gps_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2489102da4d878fbb76a0b0fdf9a1793d05fdc9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;high_resolution_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077807af7dc617f9b0ac57a7837c08e8be3ce5e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;system_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ea55852419a54b76982a7674a5f38c1e663d44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;tai_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49aea1fc683785d84be61de2bb37d61b6c8adce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the time between ticks is always constant, i.e. calls to &lt;a href=&quot;utc_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; return values that increase monotonically even in case of some external clock adjustment, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff58a3c356ca070f6a1c170a72de9b83fe3547a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the type of this &lt;code&gt;type_info&lt;/code&gt; precedes the type of &lt;code&gt;rhs&lt;/code&gt; in the implementation's collation order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1c9abd2ced7b84aa1820e0f302f4bc7eb14bd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the underlying atomic value was successfully changed, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a514e3ff53d006e7cf424694f0f2f6778f8dfda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the underlying container is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98dc0a1dbecc18d60fbdf9198447d7ec1a406274" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the variant currently holds the alternative &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb2ccb5647e22ef6d4a62b2865f9acfc03d5256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the view is empty, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2cc5dc402f2a4907f306ce93d1cf2af04766403" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the weekday value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [0, 6]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b760143e6b082f23d6f84c8f41b51e6ba7c434f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if the year value stored in &lt;code&gt;*this&lt;/code&gt; is in the range [-32767, 32767]. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295f927c87d8ffc3644979227a1f101847767bb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if there is such an element, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef420065b2e0c8de6d4211fa9b75fd656e687cb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;year_month_day&lt;/code&gt; object represents a valid calendar date, that is, the stored year, month, and day values are all valid and the stored day value is within the number of days in the given year and month. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e10659de6feea748f52a5416bf587d731ebe80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;year_month_weekday&lt;/code&gt; object represents a valid date, that is, &lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok() &amp;amp;&amp;amp; weekday_indexed().ok()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and there are at least &lt;code&gt;index()&lt;/code&gt;&lt;code&gt;weekday()&lt;/code&gt;s in the specified year and month. Otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd06bf0d24487129e4b00e112b9056c8fbbc8a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this conversion facet performs no conversions, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4725d92516906e6f03e996e862a13abdd8a51577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if this iterator has encountered the end-of-file condition on output, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d65e4befd976a67a21d82aec175068938f6093c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; if whitespace should not be skipped</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83d2169879b0aa42483de374dcd2ac1ed3bab42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try-catch&lt;/code&gt; block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd6fd9312a844bbe6fce212b1683528ce3069e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;-&lt;code&gt;catch&lt;/code&gt; block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bc2057e5dbe568da2aabf57ac10b34a9cb934f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;compound-statementhandler-sequence</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt;compound-statementhandler-sequence</target>
        </trans-unit>
        <trans-unit id="a44587a235521ddc1cfdf9d009aa4374ac981518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;ctor-initializer(optional)compound-statementhandler-sequence</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt;ctor-initializer(optional)compound-statementhandler-sequence</target>
        </trans-unit>
        <trans-unit id="82eeb6a7ab38369f465c1d77559d0a5ec2f5ac15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts-&amp;gt;tv_nsec&lt;/code&gt; member is set to the integral number of nanoseconds, rounded to the resolution of the system clock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d525bc62418789da89010b3ec4eb3ba2c35c7de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ts-&amp;gt;tv_sec&lt;/code&gt; is set to the number of seconds since an implementation defined epoch, truncated to a whole value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d3e1b60310229ce03023299f1789fad98dd5bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type T::*&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d397f9b3cca04459a457f0f4508319254c8ba900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(T)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(T)&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="e9b225142a59874a5af48fb2cb2ff6c2036a07f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(T::*)()&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(T::*)()&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="a824328744413c39d2f7793ad3177ac500339f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(T::*)(T)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(T::*)(T)&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="4a584059349e3a582dae3c67017bbcdab8580b31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type(type::*)(T)&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type(type::*)(T)&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="aafc0b5f36ff54f028806207775987efb8d8b426" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is a value of type &lt;a href=&quot;event&quot;&gt;&lt;code&gt;ios_base::event&lt;/code&gt;&lt;/a&gt; which indicates the type of the event that will invoke this callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b7c304bd4784c39254973694bcec11e330084d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; is an &lt;a href=&quot;array#Arrays_of_unknown_bound&quot;&gt;array of unknown bound&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2995620a4f91ca2e21ef7e3da750d3147d16c3a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type[i]&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;type[i]&lt;/code&gt;;</target>
        </trans-unit>
        <trans-unit id="1dc0b9ef834cb16bbd5ef2267cd0cc18088cc036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type_identity&lt;/code&gt; can be used to block &lt;a href=&quot;../language/template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e63b5f60b1be86a2b3588590f005f1ac675fed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typedef&lt;/code&gt; - creates an alias that can be used anywhere in place of a (possibly complex) type name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7a9779f47003ed47e1df85596570bc18454a3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typedef&lt;/code&gt; declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de2cf9e83fbd80ae09f8fe29fd226e4ebadc219" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid(&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;typeid(&lt;/code&gt;expression&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac3cb88475920d8182df9d2ed2d5990f8869ec12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid(&lt;/code&gt;type&lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;typeid(&lt;/code&gt;type&lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="adf6128ae48441019db83a6f7bb8b02694f423e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid(T)&lt;/code&gt; if the stored function has type &lt;code&gt;T&lt;/code&gt;, otherwise &lt;code&gt;typeid(void)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517d87c5c43705d5a420aca2ea6263ee06628131" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typeid&lt;/code&gt; operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37a4b3b078f5755746bed488bc1678080b93c5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;typename|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</source>
          <target state="translated">&lt;code&gt;typename|class&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;Args(optional)</target>
        </trans-unit>
        <trans-unit id="d08f8111368f1ddb9c373cbdc2bcbe28b9ece2bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tzdb_list&lt;/code&gt; is a singleton list of &lt;code&gt;std::chrono::tzdb&lt;/code&gt;s, each of which represents a copy of the IANA time zone database. Users cannot construct a &lt;code&gt;tzdb_list&lt;/code&gt; and can only obtain access to one via the &lt;code&gt;std::chrono::get_tzdb_list&lt;/code&gt; free function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9128a24fc7b8ef6f6bf0d2717e3f62e0b25563" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tzdb_list&lt;/code&gt; is intended to be implementable as a singly linked list, and its interface resembles that of &lt;code&gt;&lt;a href=&quot;../../container/forward_list&quot;&gt;std::forward_list&lt;/a&gt;&lt;/code&gt;. It has no &lt;code&gt;before_begin()&lt;/code&gt;, however, and so it is not possible to erase the first element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f99d130506cd61b59950fb41e91e4a928c2778a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u.time_since_epoch() - t.time_since_epoch()&lt;/code&gt; is equal to the number of leap seconds that was inserted between &lt;code&gt;t&lt;/code&gt; and 1 January 1970. If &lt;code&gt;t&lt;/code&gt; is the exact date of a leap second insertion, that leap second is counted as inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe2c5b0ce0658607dcfb726e551be62e7f65f36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u16streampos&lt;/code&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4814eaac3d4ecd2429b4a776bb615b582ba3501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u2&lt;/code&gt;, a distinct object of type &lt;code&gt;T&lt;/code&gt; equal to &lt;code&gt;rv&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57db0a8466ac43fcd90a34e0c4547ad7239f6411" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u32streampos&lt;/code&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c9a8281869ac88661281bdab1dfa3ffd9a9cc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u8&lt;/code&gt;&lt;code&gt;&quot;&lt;/code&gt; (unescaped_character|escaped_character)* &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be344e3f5f32c095aa25477b5153de7ab3de0a74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u8&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u8&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0aed6e2a7b5f7ea363afed888d00510f5d4d0c34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u8streampos&lt;/code&gt;(since C++20)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b862923dfef5545e9fd093c00ccc69ff73d8717e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; has the same elements and an equal allocator as &lt;code&gt;rv&lt;/code&gt; had before the construction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da56dfd30f6deec8b4520bda102f2fe373ebdb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; is not modified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd56cfe051500d67db105f75e508c8c6a419ba0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt; or &lt;code&gt;U&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ab55407db5281155ee5bf30c58dbf9293ba77e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, a expression of type &lt;code&gt;T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051bf391911e4aab231cebc9601fc1c13c6c795f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, an &lt;a href=&quot;../language/value_category&quot;&gt;lvalue&lt;/a&gt; expression of type &lt;code&gt;Key&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2fda841c0ca87e969fe78f01d450f12e7c89faf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, an arbitrary identifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a19cf1d961c56713e870300433a23a8ba99133c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;, an object of type &lt;code&gt;X&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ee6b8b1a2bbac26dc6881470d3e7953a7748c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;&lt;code&gt;&quot;&lt;/code&gt; (unescaped_character|escaped_character)* &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6913183b4af1099459d7623d44ba81c41567a296" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;u&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;c-char&lt;code&gt;'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ae0f9caeed3c71ed2060f7d905673464c7a2045" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_function&lt;/code&gt; does not define &lt;code&gt;operator()&lt;/code&gt;; it is expected that derived classes will define this. &lt;code&gt;unary_function&lt;/code&gt; provides only two types - &lt;code&gt;argument_type&lt;/code&gt; and &lt;code&gt;result_type&lt;/code&gt; - defined by the template parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad2a10f0c1c9ea5ce7f234bd81d7359b3bf436d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_function&lt;/code&gt; is a base class for creating function objects with one argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1dc8652926eb2e6f9767a80ba13142785009506" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_function&lt;/code&gt; is deprecated in C++11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba5e8f5350c003d5c58ebd4b2607495cbf39edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_negate&lt;/code&gt; is a wrapper function object returning the complement of the unary predicate it holds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5a9365f8731c0cddb4511ae19e3c99dda4774b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_negate&lt;/code&gt; objects are easily constructed with helper function &lt;code&gt;&lt;a href=&quot;not1&quot;&gt;std::not1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ef3f8e5496a5592ae17a5cc6d803a81d4acc08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; and &lt;code&gt;binary_op&lt;/code&gt; must not have side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1575dd8d6c070f48e9f2e57b1ba9326e37fb9787" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; and &lt;code&gt;binary_op&lt;/code&gt; must not invalidate any iterators, including the end iterators, or modify any elements of the ranges involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64e195dd5d60a5b1b5780ff083112a2c11f8a45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; and &lt;code&gt;binary_op&lt;/code&gt; shall not invalidate iterators (including the end iterators) or subranges, nor modify elements in the ranges [first, last) or [d_first, d_first + (last - first)). Otherwise, the behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8104674065f73930b5cea90af0e6dec99838d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unary_op&lt;/code&gt; is not applied to &lt;code&gt;init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87af23090c499fa6f26f76442b03aa86764efc01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union&lt;/code&gt;&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e7d275f8c45e1582856069b6a949e604a62624" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;union&lt;/code&gt;attrclass-head-name&lt;code&gt;{ &lt;/code&gt;member-specification&lt;code&gt;} &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed95d00a85745136c8a23d993a6e6b42d1713b00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::element_type(*)[]&lt;/code&gt; is convertible to &lt;code&gt;element_type(*)[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518e3975526ba1045b4424be875670889b42cae7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::pointer&lt;/code&gt; is the same type as &lt;code&gt;unique_ptr&amp;lt;U,E&amp;gt;::element_type*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fe7af9266774360734e8f967fee38bcf7c2331" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unique_ptr&lt;/code&gt;s to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9dbe1f32aa4084ee5ab7dc348eda3409980535" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlock()&lt;/code&gt; is usually not called directly: &lt;code&gt;&lt;a href=&quot;../unique_lock&quot;&gt;std::unique_lock&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../lock_guard&quot;&gt;std::lock_guard&lt;/a&gt;&lt;/code&gt; are used to manage exclusive locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35662fb8108ff91f9281162bf4be4f02ae5e7b0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unlock_shared()&lt;/code&gt; is usually not called directly: &lt;code&gt;&lt;a href=&quot;../shared_lock&quot;&gt;std::shared_lock&lt;/a&gt;&lt;/code&gt; is used to manage shared locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6690db3689521fcd10086053cfb4efd5422d12f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned char&lt;/code&gt; - type for unsigned character representation. Also used to inspect &lt;a href=&quot;objects&quot;&gt;object representations&lt;/a&gt; (raw memory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34d10a02b0359dc23adffdddaee386ca253c6f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned char&lt;/code&gt;, &lt;code&gt;char8_t&lt;/code&gt;(since C++20) or &lt;code&gt;unsigned short&lt;/code&gt; can be converted to &lt;code&gt;int&lt;/code&gt; if it can hold its entire value range, and &lt;code&gt;unsigned int&lt;/code&gt; otherwise;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75b86f035bafc5645aea51fb33b9d4a7420a089" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long int&lt;/code&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0721b84a07f82cdd47d16de3f220f4e833f44da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long int&lt;/code&gt;(until C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7589747cd83f594d7fca7a6db8037e86e65ae4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long long int&lt;/code&gt;(since C++11)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7069f0c151b94b027488e32f2e344c48fcf6ce4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long long int&lt;/code&gt;(since C++11).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab52e38281fe2bd6f7decfe23d4fba0844cb64ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned long&lt;/code&gt; and &lt;code&gt;unsigned long long&lt;/code&gt; respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8455afbdd956b2a11aa3ea45d77ef2c6a1a600d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned&lt;/code&gt; - target type will have unsigned representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c057ee1fbd30414bcac97819eb080010b5363d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsigned&lt;/code&gt; type modifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57eb3c7ce1dddb1b2f7506cfccc04e826d27be1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unsynchronized_pool_resource&lt;/code&gt; is not thread-safe, and cannot be accessed from multiple threads simultaneously; use &lt;a href=&quot;synchronized_pool_resource&quot;&gt;&lt;code&gt;synchronized_pool_resource&lt;/code&gt;&lt;/a&gt; if access from multiple threads is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6fea5bc72f1892d15a8a447790f0ebd7ee1a8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;&lt;code&gt;namespace&lt;/code&gt;ns_name&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;&lt;code&gt;namespace&lt;/code&gt;ns_name&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d278c9edabfb9eda27d65de107001905dae6703c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;&lt;code&gt;typename&lt;/code&gt;(optional)nested-name-specifierunqualified-id&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;&lt;code&gt;typename&lt;/code&gt;(optional)nested-name-specifierunqualified-id&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa5e91139c765ba4f918441b3fb66f7d282dbe3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;declarator-list&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;declarator-list&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6f798a4897c77634336f49cdfbbb1fa0bae3515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;identifierattr(optional)&lt;code&gt;=&lt;/code&gt;type-id&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;identifierattr(optional)&lt;code&gt;=&lt;/code&gt;type-id&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d3b795ed7956b8bf4a1df7c2360d71f258a32e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;ns_name&lt;code&gt;::&lt;/code&gt;name&lt;code&gt;;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;ns_name&lt;code&gt;::&lt;/code&gt;name&lt;code&gt;;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="52d01fa5e2d0726e451cf4dabccd494e0f4a8b28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;utc_clock&lt;/code&gt; meets the &lt;a href=&quot;../named_req/clock&quot;&gt;Clock&lt;/a&gt; requirements. It does not meet the &lt;a href=&quot;../named_req/trivialclock&quot;&gt;TrivialClock&lt;/a&gt; requirements unless the implementation can guarantee that &lt;a href=&quot;utc_clock/now&quot;&gt;&lt;code&gt;now()&lt;/code&gt;&lt;/a&gt; does not throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f844ce61486a912c1ac6304ab652935722cd1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, a lvalue of type (possibly &lt;code&gt;const&lt;/code&gt;) &lt;code&gt;T&lt;/code&gt; or an rvalue of type &lt;code&gt;const T&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063424f5eee45c47ae79839aaa6c43b3b888a22a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, an &lt;a href=&quot;../language/value_category&quot;&gt;lvalue&lt;/a&gt; expression of type &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;const T&lt;/code&gt; or an &lt;a href=&quot;../language/value_category&quot;&gt;rvalue&lt;/a&gt; expression of type &lt;code&gt;const T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91503257136738c35307458d70330377812a8a3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, an lvalue of type &lt;code&gt;E&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba07318fc0c4f1af8149efdc02dbcd4b652776bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;, an object of type &lt;code&gt;const X&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34c4416f39e0878b444ba859de73a5b58e49d29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="29259b082f4f35d83ab5951b7527700fdf0f1013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;va_list&lt;/code&gt; is a complete object type suitable for holding the information needed by the macros &lt;code&gt;&lt;a href=&quot;va_start&quot;&gt;va_start&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;va_copy&quot;&gt;va_copy&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;va_end&quot;&gt;va_end&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b885d27c78d93d337bfa1d653693a6de532cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;va_start&lt;/code&gt; is required to support &lt;code&gt;parm_n&lt;/code&gt; with overloaded &lt;code&gt;operator&amp;amp;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244ea60427b7ea36d5e364f7880ab7ee9eeba132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;va_start&lt;/code&gt; should be invoked with an instance to a valid &lt;code&gt;&lt;a href=&quot;va_list&quot;&gt;va_list&lt;/a&gt;&lt;/code&gt; object &lt;code&gt;ap&lt;/code&gt; before any calls to &lt;code&gt;&lt;a href=&quot;va_arg&quot;&gt;va_arg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5e8da9dfaece9fca5c0e0b64e6fbf9c069f912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt;. If the corresponding comparison expression between &lt;code&gt;*opt&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; is not well-formed, or if its result is not convertible to &lt;code&gt;bool&lt;/code&gt;, the behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09f818c7afe536609ebe1148466b7ceb9252704" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_compare&lt;/code&gt;(C++17)</source>
          <target state="translated">&lt;code&gt;value_compare&lt;/code&gt;(C++17)</target>
        </trans-unit>
        <trans-unit id="96ec5806d68c61f73bf0a2d99a0203b3053cc09a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt; - the type of the values that can be obtained by dereferencing the iterator. This type is &lt;code&gt;void&lt;/code&gt; for output iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b203cb9a14e449e95d3ccffdaa7838d6fe39b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt; is intended for use with &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/iterator/Readable&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; types such as iterators. It is not intended for use with ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc796815e522cfcbede9c22e925c36e36dbbae67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;(only for &lt;code&gt;atomic&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt;and &lt;code&gt;atomic&amp;lt;&lt;i&gt;Floating&lt;/i&gt;&amp;gt;&lt;/code&gt;(since C++20) specializations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d677ae77ff8d9f5ec51a8a1019d4c25d92a1993" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;(only for &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Integral&lt;/i&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;atomic_ref&amp;lt;&lt;i&gt;Floating&lt;/i&gt;&amp;gt;&lt;/code&gt; specializations)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62290441f5cde5f7a330f16c5c46b5b2fa72c5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;, the type denoted by &lt;code&gt;&lt;a href=&quot;../iterator/iterator_traits&quot;&gt;std::iterator_traits&lt;/a&gt;&amp;lt;It&amp;gt;::value_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a714e5c088704d678835294f3bc2b29889803c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value_type&lt;/code&gt;&lt;a href=&quot;copyassignable&quot;&gt;CopyAssignable&lt;/a&gt; and &lt;a href=&quot;copyinsertable&quot;&gt;CopyInsertable&lt;/a&gt; into &lt;code&gt;X&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ff06c5aabc30348413625a644624552c13d1e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;variant&lt;/code&gt; objects whose values to swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b28e8b4fe0cba53749b278031f1b3ab35c4e81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vector&amp;lt;bool&amp;gt;&lt;/code&gt; specific modifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f239366cc019d108dd7f6f29b11e25d94f017d5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;virtual&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;virtual&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38054e2eb7f573a496877dd86276cd670d819f41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void*&lt;/code&gt; to any pointer-to-object type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b97b7b91d0799c052220d69f6aba03b7b5ec9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; - type with an empty set of values. It is an &lt;a href=&quot;incomplete_type&quot;&gt;incomplete type&lt;/a&gt; that cannot be completed (consequently, objects of type &lt;code&gt;void&lt;/code&gt; are disallowed). There are no &lt;a href=&quot;array&quot;&gt;arrays&lt;/a&gt; of &lt;code&gt;void&lt;/code&gt;, nor &lt;a href=&quot;reference&quot;&gt;references&lt;/a&gt; to &lt;code&gt;void&lt;/code&gt;. However, &lt;a href=&quot;pointer#Pointers_to_void&quot;&gt;pointers to &lt;code&gt;void&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;function&quot;&gt;functions&lt;/a&gt; returning type &lt;code&gt;void&lt;/code&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae27c766ee93a054f5ae2c4fa3798f5058d167fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; and the other is a pointer to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e916546e65b0242d16066ab188eac85febd1b6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef12088f7d72e3b257eb6db30f55f98b13ded92c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt;&quot;, where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00589ca6c611df0e84ab6cd8016e6600cebd5b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;volatile&lt;/code&gt; &amp;lt; &lt;code&gt;const volatile&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3781ea6e1d03e237f25c89033ea5d9eed218bdd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;volatile&lt;/code&gt; - defines that the type is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87be0d785341a8c6e6e48ac9a96cf29d54b7542" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;volatile&lt;/code&gt; type qualifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba989cd478e2d2eb7af631f638f0f9fd3fb9b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vptr&lt;/code&gt;, a value of type &lt;code&gt;allocator_traits&amp;lt;A&amp;gt;::void_pointer&lt;/code&gt;, obtained by conversion from &lt;code&gt;ptr&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb0dc0dea1148518594b201d69879ee202d263d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;w1&lt;/code&gt; and &lt;code&gt;w2&lt;/code&gt;, objects of type &lt;code&gt;X::void_pointer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd271a977e2bf6d3ca2dd5391bcb65ba6253f2a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; causes the current thread to block until the condition variable is notified or a spurious wakeup occurs, optionally looping until some predicate is satisfied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1860d86e57814b34cd16a0d8e560a229e623332b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait_until&lt;/code&gt; causes the current thread to block until the condition variable is notified, a specific time is reached, or a spurious wakeup occurs, optionally looping until some predicate is satisfied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283727972081fa440406b238620226685ae0c0f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait_until&lt;/code&gt; waits for a result to become available. It blocks until specified &lt;code&gt;timeout_time&lt;/code&gt; has been reached or the result becomes available, whichever comes first. The return value indicates why &lt;code&gt;wait_until&lt;/code&gt; returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227f3f7a4e52bd1b39031247c70c318577230e3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wchar_t&lt;/code&gt; - type for wide character representation (see &lt;a href=&quot;../string/wide&quot;&gt;wide strings&lt;/a&gt;). Required to be large enough to represent any supported character code point (32 bits on systems that support Unicode. A notable exception is Windows, where wchar_t is 16 bits and holds UTF-16 code units) It has the same size, signedness, and alignment as one of the integer types, but is a distinct type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbe03b5b4f46b5c3d05df7f45e8551e7692ae91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wchar_t&lt;/code&gt;, &lt;code&gt;char16_t&lt;/code&gt;, and &lt;code&gt;char32_t&lt;/code&gt;(since C++11) can be converted to the first type from the following list able to hold their entire value range: &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;unsigned int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;unsigned long&lt;/code&gt;, &lt;code&gt;long long&lt;/code&gt;, &lt;code&gt;unsigned long long&lt;/code&gt;(since C++11);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e47e76d1a12efd124c4f04f389d0690efb628b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weak_ptr::owner_before&lt;/code&gt; isn't noexcept while its &lt;code&gt;shared_ptr&lt;/code&gt; counterpart is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfdcbd980369eeb475f8a897f011a0a46e4015b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weak_this&lt;/code&gt;(private)(C++17)</source>
          <target state="translated">&lt;code&gt;weak_this&lt;/code&gt;(private)(C++17)</target>
        </trans-unit>
        <trans-unit id="147b5e88caa408397b030378173221842a717795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weak_type&lt;/code&gt;(since C++17)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a16a046ce017fbeee44f170a6a09877b100ff0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday().ok()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;weekday().ok()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="da3c2c9506b7585f9384eb7c9d7d843a0460b580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt; does not support the &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;gt;=&lt;/code&gt; operators because there is no universal consensus on which day is the first day of the week.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf95a66daedede5a021016f837333beb4248dffa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f5b55dff9019261f541df87079a8b862c3f6e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday_indexed&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9e853b620badffe7580fd13fcb6cd0ca45eb81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;weekday_last&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b91d4266ca1e0e6681dd746c58fddc43a8c91a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while (&lt;/code&gt;condition&lt;code&gt;) {&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26f0e02f3cf224c624ceb73917e56b416228fef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;lt;=&amp;gt; x&lt;/code&gt; is a valid expression of type &lt;code&gt;std::strong_ordering&lt;/code&gt; or &lt;code&gt;std::strong_equality&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1697cdbb4e445df18652fd50ce66db37d4a70d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;, objects of (possibly different) types &lt;code&gt;X::void_pointer&lt;/code&gt;, &lt;code&gt;X::const_void_pointer&lt;/code&gt;, &lt;code&gt;X::pointer&lt;/code&gt;, or &lt;code&gt;X::const_pointer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43f77e88a653d942e0823918bf4e2ee166c59e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, (possibly const) values of type &lt;code&gt;D&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1554ef8dede17deda94d594a8d3275646307e489" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, possibly const values of type &lt;code&gt;E&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd70e96c2f99fe42eefc9bea55555018f270bbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95586357e722cca209ca195703d25c6d2ae2414" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x==x&lt;/code&gt; is well-formed when contextually converted to bool, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2596512f87e015c1af109a05dd1a1d2d413b60e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;xptr&lt;/code&gt;, a dereferencable pointer to some cv-unqualified object type &lt;code&gt;X&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3de148c8aa14f6115723ac173d431f5d4e2358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok() &amp;amp;&amp;amp; weekday().ok()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e44aa3653c0e031deb6893126f89918ae2d122d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year().ok() &amp;amp;&amp;amp; month().ok()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bb543a61e65ca35a0bf87743f312f01082cfcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93154ed41e381754d187f27e3b576b0836a4437d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea540b3f619624b9c2166a63aa3bbe494ddf6bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_day&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539cce5a3a6b35d76a5b261db5828fe2abc36f3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_day_last&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32a9850aad2ce8e25c4abaf8fc3149e76ae589f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_weekday&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cec78f0d015c091194d3a2156b597deb7bdec3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;year_month_weekday_last&lt;/code&gt; is a &lt;a href=&quot;../named_req/triviallycopyable&quot;&gt;TriviallyCopyable&lt;/a&gt;&lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cd13d473ed5fc38b0e275923884fd359982fa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy&lt;/code&gt; - 4-digit year from &lt;code&gt;timeptr-&amp;gt;tm_year + 1900&lt;/code&gt; as if printed by &lt;code&gt;sprintf&lt;/code&gt; using &lt;code&gt;%4d&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9378d3a9dfca283bf98967e8546c637766701f85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yyyy&lt;/code&gt; - years</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560f1f3590105bf75381edb24d3eb03f9ac05308" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;z&lt;/code&gt;, a value of type &lt;code&gt;unsigned long long&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e3142bbe268171c386fc35bda121e902fe0a84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zone-&amp;gt;get_info(tp)&lt;/code&gt;, where &lt;code&gt;zone&lt;/code&gt; is the non-static data member holding the time zone pointer, and &lt;code&gt;tp&lt;/code&gt; is the non-static data member holding the stored time point (as a &lt;code&gt;&lt;a href=&quot;../system_clock&quot;&gt;std::chrono::sys_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee0c780e7d068c3b31b2c9dfeceb23e7bd42618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zoned_time&lt;/code&gt; does not have a move constructor and attempting to move one will perform a copy instead using the defaulted copy constructor (3). Thus, when &lt;code&gt;TimeZonePtr&lt;/code&gt; is a move-only type, &lt;code&gt;zoned_time&lt;/code&gt; is immovable: it can be neither moved nor copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0365fc220ec4659675a47cbf32ef27ee70178dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{ &lt;/code&gt;initializer-list&lt;code&gt;} &lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8733e5bebd3efb8967a3c95958ea98af29c097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{&lt;/code&gt;expression&lt;code&gt;} &lt;/code&gt;&lt;code&gt;noexcept&lt;/code&gt;(optional)return-type-requirement(optional)&lt;code&gt;;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb3e4b8b0c087ee5c6c6184486b98d926212f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt;class_name&lt;code&gt;();&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09706282683540bade3afc32ef6a567d9570f239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~&lt;/code&gt;rhs</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt;rhs</target>
        </trans-unit>
        <trans-unit id="d7932fc1b0fea0ce21603af1d6068a186b7ed999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; for the built-in atomic types that are never lock-free</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8e536304568023542773e9fe063f084de7f3a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37261588294ca7ee356026691cb04fa11731147e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if &lt;code&gt;ps&lt;/code&gt; is not a null pointer and does not represent the initial conversion state, nonzero value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c415628492a23576706c374175b7fea1c709b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if &lt;code&gt;s1&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e66bba4048ae66ec89f29af47761af206a35b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all &lt;code&gt;count&lt;/code&gt; bytes of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5296046e4ff3776a2227cc99562246c76cdc42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all &lt;code&gt;count&lt;/code&gt; wide characters of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb59e53e0ccb63dfdfbc44bcb505e617e783dc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all indicated exceptions were successfully cleared or if &lt;code&gt;excepts&lt;/code&gt; is zero. Returns a non-zero value on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a914abe33320a923cd695193c20cc7bf085ab6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if all listed exceptions were raised, non-zero value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece37d70924447cb2e2181b2d01b748688ca04fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;*pc16&lt;/code&gt; if non-null) was the null character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7020d6c04aeffb6b059d1c341b3ba094b22d54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;*pc32&lt;/code&gt; if non-null) was the null character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698a0d9c35386893d7fe5ac31222d3d3bd9ad0a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;*pc8&lt;/code&gt; if non-null) was the null character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47033aa3b25969c000aba5cf85e6545ef1dce198" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the character converted from &lt;code&gt;s&lt;/code&gt; (and stored in &lt;code&gt;pwc&lt;/code&gt; if non-null) was the null character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c8fb680806e009c8d40bf36b65357dea663124" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the macro was called by the original code and the execution context was saved to &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a18f5833c0887fa407bd79d2ddc5d106ce1f03bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the next &lt;code&gt;n&lt;/code&gt; or fewer bytes complete the null character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8fec550067ccb4777a2711c5e8cf6af313a5a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; if the registration succeeds, nonzero value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92d8e6b14f7155165ff9ca87fdc74df420ee004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; in case of success, &lt;code&gt;-1&lt;/code&gt; in case of failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a17fc6e51794f5aed7876fde1e62d146f44ab53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success or nonzero on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee3a370a5f11adc6d6a3e265cbc76ce74ac3f4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success, &lt;code&gt;-1&lt;/code&gt; on failure or if the stream does not support this operation (is unbuffered).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c51ca0f18151b653cbbd1987e211bdf0527d1b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success, &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b3574ac232ea1e748f9706cbe8074b413f87af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; on success, non-zero otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087c0288e3e5dcd9422b80d2b28fc2c457be72ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success or non-zero value on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5882faeb3b6aa8692d1cecc132bbb371a9ca6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, non-zero value on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50828e4f1a6516607804a376eecf2f160873f527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, nonzero value otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffd9a66825ddde10a2ec3ec7e9e16fab9f07dbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, nonzero value otherwise. Also sets &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc83bf7a04c5ef5607f314231fcba3a93d958bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;​0​&lt;/code&gt; upon success, nonzero value otherwise. Also, sets &lt;code&gt;&lt;a href=&quot;../../error/errno&quot;&gt;errno&lt;/a&gt;&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a99753c2ece599fb8a7453bd9d560a46a80ee81" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; emplace_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; emplace_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1039db3ded9f1b8efba5ccab789508423063a96b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; erase_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; erase_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ef0ed6a572805b96c73fa9768076791bd6660c73" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; insert_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; insert_after&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="44b8d0560f88e7059a3d9db52ef71135df178604" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; remove_if &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; remove_if &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="bc5f8291164c088f69c7271355567efea7aa0f05" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; splice_after &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; splice_after &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2c9c9ddaec816f735ad6bac682b8abeff585c093" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top &lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4c8f76c8010506393cdc465e4ee52f21d5c52888" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt; top&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f0f6eda813113951b07ba598258cb6c43a1d2ab6" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;array&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;array&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1595023cf3b80020f94c87c629b8b46832a64e9b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5f3827a61d952db2f416d9c192320602e3658eb5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;at&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;at&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="339fdfb633f07790991d8d49fb9c34d66b859b9f" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4dc7eab7ae27f4b811b0ac54f04a761a02c8579d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;begin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;cbegin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ea2d3025aa2d40752596636cd4d753fb3eaed1" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;bucket_count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;bucket_count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="19b157c54bf375804dec71b2734cee920508a287" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;capacity&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;capacity&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="dd4b7c89cb65790f4c90daee8c44a2d85606c0a9" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;clear&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="8456e0ff781f2b1ab2c8fa139111a61f449bf109" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;contains&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ad0c6c38c82ca89b7877e82458f021c9a28c8ff9" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;count&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a7fd443d0e47546b4937fc59eb1e2c3286e00b58" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;data&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;data&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="25fb09dd3e5784a1bd9e396b1a3363347a376e07" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4ad5f22c0958dbe3dd050166d55233d3e9831748" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9d0590c7bdd2e6f89051c14c6cb3bfeb1c2e4fec" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="e121808c98d12faa95b110838ae4bb7518b61184" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7a4638dbb2c7d80f70f0cfc827a3ada729ce6036" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_hint&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;emplace_hint&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7a07648691e6ba934807d3c92ebcf45fe3eb6085" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ecf1f805909efb15adb170ddd022ee3ca353e00b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;end&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;cend&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5c4f9df1e2e0a7f8606157b6de3a647f8814a5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;equal_range&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;equal_range&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="65fc852393e939e41f494df9e54a7469cfc62c3a" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;erase&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;erase&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9b19511d06f53aeac7b2d19ab9154ffd900dc77c" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;extract&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;extract&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5ed0c93f7d4e01d5d508ca7def9fffd528026469" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;find&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;find&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4c55f1852454bc5e380f3ef0cd1f78a461da36f6" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2e462a67d213d546b6c51a5bf45c63e630f90481" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="8d51877ea8b562a4a4b7d9dbfdbb510b76bcccab" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;get_allocator&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;get_allocator&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="db3a44033774ba9186609458ee5b20dfc7db8e91" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;hash_function&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;hash_function&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7033f2f454381e8cf8bd30b335786e04238ee0cb" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="e1c4baeec4f128d6767a28d8a040432edac70e7b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert_or_assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;insert_or_assign&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="6a59ce5493171a8820f4f5f4b4787f5c5a294d12" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="c251e4acde064c3fea584b047d538884b1e5a628" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_eq&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;key_eq&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1b0f47fa45059e7ac3088be12da38518526ecc61" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="e59fdaa82ef7dc4fdce5a68d150bebd5673c3500" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;lower_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;lower_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="39bb3ef104f3d2a7d210f5409d3897f32362eac5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7c535e5c0b32736143eea3306d527c279bbb4f89" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;max_size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;max_size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="abb2539f81832af375acbf3418794fb6bb04e262" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;merge&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;merge&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="65585c84def82d301f38d78baf1bdbad7aaaae76" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a3565006316fe624f2c22a25c89001ccae478ead" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5d0701462818f70a476672b2fa75dcef784a7b98" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator=&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator=&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="c6c0905988daa895e9ee8e8fdfe725ecacf39d37" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator[]&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;operator[]&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="05cc0629962cbf580a4bf4a3cbc4084505a90bc8" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="608f414b868178aa2f90d4a74def48bf184de33b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4d2c61dfe06c5424520a893a898d0d1999b10ebc" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;pop_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="0f0e0b5aedd040b47a9a7a15f380cf1045e6ffa3" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="84d65cd23047d1c38afd112e5f28fc991e1cd0b5" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2ca43da22744a13ae395a8ed92453f7783917a12" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_back&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="396bf1a8aa6daaedc36db8d87fa513dcdbe16a4d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;push_front&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="27ac608d5234380bfefa50e6762ce47c22921978" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f820bc789c47dbe8ed0f622d5036b7c5c21b3419" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;rbegin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;crbegin&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2365c6354339b1b40a14b24d42948bf97d18f10b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a1935680e56dc98666ded9bd0ac9353cfbef661e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;rend&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;crend&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f875272241a946eee59ba5279a4eb0d0a51e9a5c" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reserve&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reserve&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="db773fdfad37bfd8f4e42dad5f45137e7cccf6e3" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;resize&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="a198f2888104a0f10422154051a609c48619d593" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reverse&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;reverse&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="fc6a52808b3873b40bab572817d4b0f9036af357" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="3c1c2fd5d2b58b2b3f2e0fadfaba053ddee25491" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;shrink_to_fit&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;shrink_to_fit&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ee1c39bd42a332daa3c81c26a9437413b55422c4" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;size&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="0929261832a0463074650cffff77e84cec7c9a8e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="7d369548d816437770e8df34048ad8157250b6b9" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;splice&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9c3c4d02a07c81ce87c676b40752c1adf63f881d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="bc1d9a4a5578e80b60eccca7d96f0fcfe157428d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;swap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;swap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="27141b9bffd336360a39af9755a7021082366a6e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;try_emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;try_emplace&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ade09b53bf15505ca98a22c01bb0e6d00be2be88" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="698afbcf7a137318b5036ee63d3b0c09f0434a1e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="b07b888e1fe646846f37568aed45add0693b1f4e" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="0755f03baf3ebd5492ebd0300cf22ed181c9b043" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="478555da61974884338e46986de4798e4db817b7" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9ae1cdec6067877e372be92a741da6a734b44123" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;upper_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;upper_bound&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="441eb1b5428a3d4bffe4e5942f27e6adb5cf32cf" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;value_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;value_comp&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="9515246a479b696608ab6de7ad49cd576b828dbb" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="94bcd8dbd7c71dcceb4e771828c7cb63602aeef2" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~deque&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5206bf5efd9835c3812440183c45d7122100eb46" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~forward_list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="ba1b00224b70e58d9730943299ce0eb170a95327" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~list&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="6e08313bc988d15fd83dca0b08e3f7ef0cff64e4" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="2a6e204eeac6587a67b55de8ee9b41c71e9cced2" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="09d69c095b33a33c3570989830a85c1f98d26184" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5449a97d6fe5f8cf517f297d2446d6e0eb7b574d" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~priority_queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="1d3ed2d83c3b1f7fb0f2151d8293c4d927d6210f" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~queue&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="5dcfab48a50c90cb0d45fced8daca61713aba44b" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="08224dd6a20ce0c242d0f1dfc5d6b83e120508fd" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~stack&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4f8305b9b39f90a6956359d30a017b10c69b7696" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_map&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="73b53133a068b3e2eab1c27027e3615537c7e130" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multimap&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="f601c1f132e6afcec31730c7f77c33af41f5b3d4" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_multiset&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="4d27878fc104b2b866573b11c01bc86e59a3d1a0" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~unordered_set&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="b8e0211ff1dec650808acce19edb4d4b9c6e161c" translate="yes" xml:space="preserve">
          <source>&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</source>
          <target state="translated">&lt;div&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt; &lt;code&gt;~vector&lt;/code&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt; &lt;/div&gt;</target>
        </trans-unit>
        <trans-unit id="10e8babbe7f17544e7428f5a5692547c7d6c6563" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;(See also &lt;a href=&quot;language/type-id&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; for type system overview)&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96feca7b635ec24c159206129d87a2ee7bf9b264" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;(See also &lt;a href=&quot;type-id&quot;&gt;type&lt;/a&gt; for type system overview and &lt;a href=&quot;../types&quot;&gt; the list of type-related utilities&lt;/a&gt; that are provided by the C++ library)&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad2e997d2d0a61a8a4b7bb9a6bb901008f0dd2f" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;FE_DIVBYZERO, FE_INEXACT, FE_INVALID, FE_OVERFLOW, FE_UNDERFLOW, FE_ALL_EXCEPT&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba38749c5e6b67dd9354f5c899f43f42a91d903" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;FE_DOWNWARD, FE_TONEAREST, FE_TOWARDZERO, FE_UPWARD&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee96709da677b917693b6fb5d00a73fb2ed0dce" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;LC_ALL, LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae52889b7d8f6d01e7e58d29b1ffaad898ad8fc" translate="yes" xml:space="preserve">
          <source>&lt;small&gt;N/A&lt;/small&gt;</source>
          <target state="translated">&lt;small&gt;N/A&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="07b6fb7da60721dc2b32ebb573b22e308f9446fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; (constructor)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; (constructor)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="153efd22d0e3a6d22df13daf85901c581362a809" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; (destructor)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; (destructor)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10efdd3c2d7049538022820f79e0e37bd094fe06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; arithmetic&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; arithmetic&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e19ff83b6ec415b70737af40a6ed2c2d6b27413e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; assignment&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; assignment&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c375dfd990bd58d5c9dcb8640e80b7e6cea53f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; comparison&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec766f8c27808b6ffc35e0a36b2b84225aa5a5e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; fputws&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; fputws&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="00c59ef536a9cebe544605a2173393bc418fbbcb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; increment&lt;br/&gt;decrement&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; increment&lt;br/&gt;decrement&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26a0d3cc3592706ee85cb536674e68e9cdde3e1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; logical&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; logical&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dc3c883f0aa139e7be93514b09f8dc375a287f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; member&lt;br/&gt;access&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; member&lt;br/&gt;access&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfd04c55596e5ec0f8f02bca1a8be3350a5c1cd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator bool&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26122c150bc8519ade15b737afa2dc7f5a1423b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator partial_ordering&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0c7a5a9e37198bc2342f65dcc27840adcf92cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator strong_equality&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a87b3748298b8e66ce67b75219f04964bbf0dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator value_type&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c343cc79f9075b26e78c63861dc1ce158d69d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator weak_equality&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13875aa4b22f134be01bcbcd417de55150ca15cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator weak_ordering&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578aed685a05664fab89f7788198ac983624bbab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dc45177980127df3fe1b5389211625aca365f531" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator=&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator=&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="730279814bc8f4254fab280aa04c813f90f9df73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator==operator!=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator==operator!=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d02a711597ec84b06523f4f45d9fcd2747bb6134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; operator==operator!=operator&amp;lt;operator&amp;gt;operator&amp;lt;=operator&amp;gt;=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; operator==operator!=operator&amp;lt;operator&amp;gt;operator&amp;lt;=operator&amp;gt;=operator&amp;lt;=&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="46bf7c32b091bac31f177b6538a857bc4f99a593" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; other&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; other&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9b32461f08873ada69d54d94941c3a7c338cd6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; size&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; size&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d854b5fdfcf42d66b53f84ef33fb2e2bfea6df5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; startsizestride&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; startsizestride&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a5cdabacf237fbab2c12a67fd21865ad6a90a8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; try_lock&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; try_lock&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d1b225a45dd0a883a31aeb8e8fa7361f9fcfb31d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; try_lock_shared&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; try_lock_shared&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a132afaeab415796a3537044b4b2c136c0eddf36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt; what&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; what&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f200a0325ed69f6c1a09fb15a9e717939f5d390f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;adjustfield&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;adjustfield&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11d7829ab5f46ce0f1e5ab89f1cd27ac6b1b7bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;app&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;app&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="207ba86c7b820157628715f842616b5fe2b19795" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="797633d5d4189cf9a82cf1bb4a60ec90b86c343c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;bad()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;bad()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="94e8d7d8d59d3ea56b5859b8dd9901f5fff6f9a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;badbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;badbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="490d187214876ec1d6a6fa8b4d353d8e23ce7619" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;basefield&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;basefield&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8394a89164419e5ae8805758370d0bc591b0d398" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;beg&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;beg&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3b41f8787abad9f1de91bdf988f30d88b5cae27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca904f5a2bc637d2ab165d54ed63641b6b3d6a11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;boolalpha&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;boolalpha&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="39fd955930d5b6d2c04a3f3ae63e899990726e90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t, char, mbstate_t&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44cc1b44e806b4ecbf3ece838e1fcc86b3ad96c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t, char, mbstate_t&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1186ed3f9f3cb2913028b31e1785411aeb8ee32b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="6cc7fe315faaf26b76174e5e4960a0bc086c4d48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="16293df922894be5b54283c9c06b6d1cd695fb2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</target>
        </trans-unit>
        <trans-unit id="634e0b3a497880d753634d52388e3f4114c7dbfc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</target>
        </trans-unit>
        <trans-unit id="90619993abce6efa13e90d8c475577a28162c84a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="3c390eda96de3990966e6e3f5b70c34cff490b78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="8f1b37452d04e6b6366b9876df35ff435317878b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(Windows).</target>
        </trans-unit>
        <trans-unit id="2a89050cf0079a1ca971a87ce6bc682e36ce85fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;(non-Windows).</target>
        </trans-unit>
        <trans-unit id="96125c75dde278d8d0f871e4334afcdc27a36363" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char16_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="88a2b15ebbc68b5f82e81cc5ab58332d2967d38f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;char32_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="83fc04b422cb426c23c7cfcf467789b248ace939" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;codecvt_utf8_utf16&lt;/code&gt;&lt;/strong&gt;&amp;lt;wchar_t&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ae27c86baa41196f9ec215dbe1b5bc431716076c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="439fbf5155a1ea718b93b58268a1c57891eab887" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;dec&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;dec&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c1d04628c7923a69571836e8d89294d36abc3c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;end&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;end&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="905439cb453fef652fdc756024a420525ef3aff5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;eof()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;eof()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb18b1ab4b23021fe64c3c2b58e8c683cbf49ceb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;eofbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;eofbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c3ffa2dcebf476b8b2982919bee211ba06eb715" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;fail()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7bfe985904d6f7420e382db1aed815889e93c210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa30018e4e8957e4ddd74cc31e9493ab5311801c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="079f5f6da10ffb45eced653ff321fb2607004ded" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;floatfield&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;floatfield&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1159208dece7e8e3c44f57f1ac06f43db0839325" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;good()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="182d19ac93f9f5aef49ec907440a4810b670ddd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;goodbit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;goodbit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d1f428f94e61c6d958a957a41eaa9924236ea08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee49dcc63798c51cfdac1e9f8d68c932675b00cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;in&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="070cdcaac0aa985f0515fb4737a5b4140229081c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d1bfe18cb401bb305798e66198b3e97beee76dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ios_base::iostate&lt;/code&gt;&lt;/strong&gt; flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537b1d1edf82aeba0b417c8ba71838968c5a62b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isalnum&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isalnum&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f9eb092cbcfe95bdcd0259dd8a630d5021ccbbe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isalpha&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isalpha&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9ce04988731330541a991eb5e7d06dccb14ef08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isblank&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isblank&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a1eaa994d3269906b2a47c32a8e547fa6acd48b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iscntrl&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iscntrl&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6c38fada3181e93f98fd6a5cc64d639bb008f4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isdigit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isdigit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ee2ff1dcd24794fdc2eeb658a043d3eddab9f4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isgraph&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isgraph&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc805695234d5269f3894979b9d4d5055e0e4e03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;islower&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;islower&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d368a53b3e50cbe2b60f751d23c615e71f69a2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isprint&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isprint&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="edf5be6051afddc9d51019cf62964a443b980d31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;ispunct&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;ispunct&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dab79137a8c3f41f95cb2fdba1f4f613fc1cba2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isspace&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isspace&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2547b4f8a0a99767af9245458421d60678dfee26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isupper&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isupper&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92651ef970d99cc14c98cd615af602f9a84c504b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswalnum&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="a9721c714438e2959a6b2dd93edc8f3f8d158f25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswalpha&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="63cf242f16b8eed04f50e80e12b7fe53c7b60e96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswblank&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="ef1646ab343b83d122b0efbf0b1327ad179544ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswcntrl&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="57132c82e4d7dd23822d5e2b00c1360c20c46cad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswdigit&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="eaaeeeb6bf702b4f78258a052af4452dc2690218" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswgraph&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="eef504bf43cd6c27be30cb125fbc497a56a78de2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswlower&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="de60e8e30084fb3e157dd6de773b4737e7169d88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswprint&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="4615b2011e8d972dea535045f94bc13827ee65bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswpunct&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="c5fdebcc026d6a68db49f4b74165ce7f0d912453" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswspace&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="20e51610dd3a8beabcd2f164c21da31478eafe74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswupper&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="375e0bd774ab74de342f79f6cb82415b12d14f35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;iswxdigit&lt;/code&gt;&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="d84d8f51eeb0c0fa8768438cbf4a31a1157bc640" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;isxdigit&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;isxdigit&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e572948cf28b84dce522b683b04bae9479a39e3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7403dd93dfc53229e1ea0a9778cecb32e4c7e40a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f42a5932a495654a37e143884365c4537c3b8fbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;operator bool&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d000f0e64c90f633b97c4412053ddda15f10b1e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;operator!&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;operator!&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ac80db2beea97adbd46f76aabc716591057664f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;out&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;out&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b725f898e8732391b7386c81f074cb14a5160f42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a24c517c21a6fd0cbe1e2b0556452dcf2b565bbc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;scientific&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;scientific&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ab70d72589c80e1717023e9faae7f00ad127bdbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;showbase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;showbase&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bcc3287b88890731d4b680872287e29a7b38ed44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;showpoint&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;showpoint&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a98817f7bc4fc0d9a4209c60d30a7b6cc32d0f0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;showpos&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;showpos&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73ae238410dc063681db8a6b63f07ddca01cdec5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;skipws&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;skipws&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ecd433aa9bdbd6d7303e5311712ea1bfd7e3e27f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af054887e1b0ba5f251054b58298064ee68ae466" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;unitbuf&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;unitbuf&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9682821636709e0d7a2f13d6a2515da32bc44b2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="afcbb20a9dadf71e43a33169ab4cb2d482027a57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BinaryPredicate&lt;/strong&gt; is a set of requirements expected by some of the standard library facilities from the user-provided arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf7d8e16b0681bcc7c5063a26b9edcda88942c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;CharTraits&lt;/strong&gt; is a traits class that abstracts basic character and string operations for a given character type. Most standard library string and input/output classes require a CharTraits template type parameter alongside a corresponding character template type parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c13017e7e8f2d9adf08adb882b4db09b62cc37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compare&lt;/strong&gt; is a set of requirements expected by some of the standard library facilities from the user-provided function object types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb392e0f136e6afc3f20b792ae99c34e364dd5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;RegexTraits&lt;/strong&gt; is a traits class that abstracts operations needed for a given character type when as template type parameters for &lt;code&gt;&lt;a href=&quot;../regex/basic_regex&quot;&gt;std::basic_regex&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c351228e8e2cb7718bc5af2c6012b6ddb15f26" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-t2&lt;br/&gt;&lt;/sup&gt;d</source>
          <target state="translated">&lt;sup&gt;-t2&lt;br/&gt;&lt;/sup&gt;d</target>
        </trans-unit>
        <trans-unit id="fd164f598fc73f42c8916519c717c436b330ba1f" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-t&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;-t&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="06084185252914fb80c48390ac42871dd29d6c0a" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-t&lt;/sup&gt; d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60fc4d5c34892cba397c7ae6b1871dbbe57af08" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-x/2&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;-x/2&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="083ce944a9c81e89965f0e91e2f5e1f2b207c6a8" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-x2&lt;br/&gt;&lt;/sup&gt;, is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965d3f320957be3ad72e928e912186a77e19275b" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;-x&lt;/sup&gt;), is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149a72ad8e00441ffe95eba131c80e578d0adde4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x2&lt;br/&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;x2&lt;br/&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="2fcc36bd610640f21c1ee441c879323d8ee5aabd" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;x&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="0bfc5228282d755daf15fff800045061a14771e5" translate="yes" xml:space="preserve">
          <source>= -1 and the related exponents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c97bb15e4b25bdec35638f2b1bc7761899184bd" translate="yes" xml:space="preserve">
          <source>= -2nu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02defd0662f5031a7cb6eeb79c6b3ed327cf9329" translate="yes" xml:space="preserve">
          <source>= 0, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd4ff98d65c01bef15947a0dae533467a1e03a0" translate="yes" xml:space="preserve">
          <source>= 1,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76556565fc31fd629ab558daaa54df88fec792b4" translate="yes" xml:space="preserve">
          <source>= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a520a1e8ed14533a28c00393129807aaabdf3279" translate="yes" xml:space="preserve">
          <source>== !=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532c1bc43406f64ae3a933341259e4a3e66a150a" translate="yes" xml:space="preserve">
          <source>== != &amp;lt; &amp;gt; &amp;lt;= &amp;gt;=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb9d9cc5013291f759497f08cec925224751c83" translate="yes" xml:space="preserve">
          <source>=arg.</source>
          <target state="translated">=arg.</target>
        </trans-unit>
        <trans-unit id="d1e097af8f9be2971caa79bdfe9fa4c236c7094c" translate="yes" xml:space="preserve">
          <source>?:with a void can be lvalue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e980cc0d0cefbf7b079d7df0c9109a8a1af5c70" translate="yes" xml:space="preserve">
          <source>@a</source>
          <target state="translated">@a</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="59069913e8774ab5a94eb0c4b0e9875d089c7bb2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../language/data_members#Standard_layout&quot;&gt;standard-layout class&lt;/a&gt; is a class that satisfies &lt;a href=&quot;../named_req/standardlayouttype&quot;&gt;StandardLayoutType&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6b704dc30d966683c3fb7d0835b304be1d6931" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../language/union&quot;&gt;union&lt;/a&gt; can be marked &lt;code&gt;final&lt;/code&gt; (and &lt;code&gt;std::is_final&lt;/code&gt; will detect that), even though unions cannot be used as bases in any case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e331c264669e17c1ada1276954d97de48d813354" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../language/value_initialization&quot;&gt;value-initialized&lt;/a&gt; LegacyForwardIterator behaves like the past-the-end iterator of some unspecified empty container: it compares equal to all value-initialized LegacyForwardIterators of the same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a0caf1b58ecd7b529638ebaa55885c40a23bbe" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../named_req/bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; used to specify floating-point formatting for &lt;a href=&quot;to_chars&quot;&gt;&lt;code&gt;std::to_chars&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;from_chars&quot;&gt;&lt;code&gt;std::from_chars&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d46acba3408bb6e2bdc0002bf788ce2379719e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt; type providing a strict weak ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9c3b9454b4b9275159b43f9778c44bee18ad11" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../node_handle&quot;&gt;node handle&lt;/a&gt; that owns the extracted element, or empty node handle in case the element is not found in overload (2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12c64beefdbab4d8cfc39f0de5f154d31d8878c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;bitmasktype&quot;&gt;BitmaskType&lt;/a&gt; type that represents a particular character classification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db065190b60edd23d995ed1f71c3c8f1a8a40599" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;consteval&quot;&gt;&lt;code&gt;consteval&lt;/code&gt;&lt;/a&gt; virtual function must not override or be overidden by a non-&lt;code&gt;consteval&lt;/code&gt; virtual function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8401f79dfc902e5dee5b4604132f9b8a156fa3e2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt; type that represents the locale used by the traits class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d342e221a05a9be698f1bedcecd4188f19c14cba" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt; may appear in any scope, but a &lt;a href=&quot;function&quot;&gt;function definition&lt;/a&gt; may only appear in namespace scope or, for &lt;a href=&quot;member_functions&quot;&gt;member&lt;/a&gt; and &lt;a href=&quot;friend&quot;&gt;friend&lt;/a&gt; functions, in class scope. A function that is declared in a class body without a friend specifier is a class member function. Such functions have many additional properties, see &lt;a href=&quot;member_functions&quot;&gt;member functions&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bc573d7995338e82b2c28d9dfe52514d24a4e7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;name&quot;&gt;name&lt;/a&gt; can be declared to refer to a type by means of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedaf8c98056acf96dfaddd1299d4f039fe604ea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;namespace#Using-directives&quot;&gt;using-directive&lt;/a&gt; (does not define any entities)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9163fdc28977121d141ccf44bc7ada6509a9af52" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;statements#Labels&quot;&gt;label (and only a label)&lt;/a&gt; declared inside a function is in scope everywhere in that function, in all nested blocks, before and after its own declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b94cd720a0b9b666d8b797b4a606a381f288cd6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;static_assert&quot;&gt;static_assert&lt;/a&gt; declaration (does not define any entities)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328e0c692735d868d8afff33ca718835c5030894" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;structured_binding&quot;&gt;structured binding declaration&lt;/a&gt; is also a simple declaration.(since C++17).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccab5bb72be9677dc24a858f86edcb56f470cbd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;typedef&quot;&gt;typedef&lt;/a&gt; declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a0e54f0a399281d2a79bcb72537f48a28e653d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;types/byte&quot;&gt;byte type&lt;/a&gt; definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17026508a329cc2cdaa5428897328f21d76befcf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;using_declaration&quot;&gt;using-declaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116191517e8ca5619b7cc289a50c5d18452024d7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#glvalue&quot;&gt;glvalue&lt;/a&gt; of any non-function, non-array type &lt;code&gt;T&lt;/code&gt; can be implicitly converted to a &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of the same type. If &lt;code&gt;T&lt;/code&gt; is a non-class type, this conversion also removes cv-qualifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0f85c362fc8f1b2298be8e6762cb9b513d80c6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of a floating-point type can be converted to a prvalue of any other floating-point type. If the conversion is listed under floating-point promotions, it is a promotion and not a conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baac3f5f28f67e1840f0932b9f8a084aa8900efa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of an integer type or of an unscoped enumeration type can be converted to any other integer type. If the conversion is listed under integral promotions, it is a promotion and not a conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5e6ce4839d6a91b85d165b9801732b24cac54e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of any complete type &lt;code&gt;T&lt;/code&gt; can be converted to an xvalue of the same type &lt;code&gt;T&lt;/code&gt;. This conversion initializes a temporary object of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object. If &lt;code&gt;T&lt;/code&gt; is a class or array of class type, it must have an accessible and non-deleted destructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acddb420a369aaaea57c1ed0fa976136d77d295" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of floating-point type can be converted to a prvalue of any integer type. The fractional part is truncated, that is, the fractional part is discarded. If the value cannot fit into the destination type, the behavior is undefined (even when the destination type is unsigned, modulo arithmetic does not apply). If the destination type is &lt;code&gt;bool&lt;/code&gt;, this is a boolean conversion (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9595a48ce286bf7bb5ea683a992403b7e38c5b11" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of integral, floating-point, unscoped enumeration, pointer, and pointer-to-member types can be converted to a prvalue of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248c4d689ff54b4ebea54581d48f39f34d696cbb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of type &lt;code&gt;float&lt;/code&gt; can be converted to a prvalue of type &lt;code&gt;double&lt;/code&gt;. The value does not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050d671c38e77c9933a5b17936a6f05c42137e2c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of type pointer to &lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt; type &lt;code&gt;T&lt;/code&gt; can be converted to a prvalue pointer to a more cv-qualified same type &lt;code&gt;T&lt;/code&gt; (in other words, constness and volatility can be added).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6ca63328114163ca430edcfeff8a53f07a1eeb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; of type pointer to non-throwing function can be converted to a prvalue pointer to potentially-throwing function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2dae328679253c6053c8e9aa9baf65ddc220eb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; pointer to any (optionally cv-qualified) object type &lt;code&gt;T&lt;/code&gt; can be converted to a prvalue pointer to (identically cv-qualified) &lt;code&gt;void&lt;/code&gt;. The resulting pointer represents the same location in memory as the original pointer value. If the original pointer is a null pointer value, the result is a null pointer value of the destination type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c324e6feefa2419f089ec2e794b74acdf72faaea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; pointer to member of some type &lt;code&gt;T&lt;/code&gt; in a base class &lt;code&gt;B&lt;/code&gt; can be converted to a &lt;a href=&quot;value_category#prvalue&quot;&gt;prvalue&lt;/a&gt; pointer to member of the same type &lt;code&gt;T&lt;/code&gt; in its derived class &lt;code&gt;D&lt;/code&gt;. If &lt;code&gt;B&lt;/code&gt; is inaccessible, ambiguous, or virtual base of &lt;code&gt;D&lt;/code&gt; or is a base of some intermediate virtual base of &lt;code&gt;D&lt;/code&gt;, the conversion is ill-formed (won't compile). The resulting pointer can be dereferenced with a &lt;code&gt;D&lt;/code&gt; object, and it will access the member within the &lt;code&gt;B&lt;/code&gt; base subobject of that &lt;code&gt;D&lt;/code&gt; object. The null pointer value is converted to the null pointer value of the destination type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2034981a656fb7ac446092dcd3862bd1eb6e26a" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;code&gt;constexpr&lt;/code&gt; constructor&lt;/b&gt; must satisfy the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d85283fd2f80f425dad280d54b6a26e71f2409c" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;code&gt;constexpr&lt;/code&gt; function&lt;/b&gt; must satisfy the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32b24bd92dc157d8b5fd15f06fda38e09a3c372" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;&lt;code&gt;constexpr&lt;/code&gt; variable&lt;/b&gt; must satisfy the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfcd740d489150fc3da15e6802bd232839f4946" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;##&lt;/code&gt; operator between any two successive identifiers in the replacement-list runs parameter replacement on the two identifiers (which are not macro-expanded first) and then concatenates the result. This operation is called &quot;concatenation&quot; or &quot;token pasting&quot;. Only tokens that form a valid token together may be pasted: identifiers that form a longer identifier, digits that form a number, or operators &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; that form a &lt;code&gt;+=&lt;/code&gt;. A comment cannot be created by pasting &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; because comments are removed from text before macro substitution is considered. If the result of concatenation is not a valid token, the behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99eeaccfefc49e26835b8d22f35d5c39c1ab7ebf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;(&lt;/code&gt; token that follows &lt;code&gt;explicit&lt;/code&gt; is parsed as part of the explicit specifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4f371e6cfc089e9bad3fb9e1a02d3a3e6ebef8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../c/time_t&quot;&gt;std::time_t&lt;/a&gt;&lt;/code&gt; value representing &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868f119e73dbded620fe1cb16470762fa2e5a7d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing hours</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c42352645a8189c1429ee2696f10ca948be8349" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing microseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d107733f4e382adf585c4f075de4efa6ae36f9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b112595ead2793d19409cc024edaae36a28d8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing minutes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e49d7befae60139b94e7ed86e2cb104b8ee3a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing nanoseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1fb7aa42faa26b444faf1ccdd8c108d4443f14" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../chrono/duration&quot;&gt;std::chrono::duration&lt;/a&gt;&lt;/code&gt; literal representing seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584bf4d30ceb026e59fcdadf0dcfe7cc0edb19b2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; literal representing pure imaginary number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676046ceac2b10d24849718b854809bcbbdfe0db" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../local_t&quot;&gt;std::chrono::local_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; computed as if by &lt;code&gt;zone-&amp;gt;to_local(get_sys_time())&lt;/code&gt;, where &lt;code&gt;zone&lt;/code&gt; is the non-static data member holding the stored time zone pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905b7565ea1e869a495cf3fd31aebfd6122f657c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../numeric/complex&quot;&gt;std::complex&lt;/a&gt;&lt;/code&gt; literal representing pure imaginary number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b272a54de3b48f4175a4c0be9f62f50ee85ff8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../shared_future&quot;&gt;std::shared_future&lt;/a&gt;&lt;/code&gt; object containing the shared state previously held by &lt;code&gt;*this&lt;/code&gt;, if any, constructed as if by &lt;code&gt;&lt;a href=&quot;../shared_future&quot;&gt;std::shared_future&lt;/a&gt;&amp;lt;T&amp;gt;(std:move(*this))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ab3bbe2cbf6df55afb329345463883466fb77e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; that contains the version of the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5f16889ef84c8dc358ec78aeceb5df8087ed6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../system_clock&quot;&gt;std::chrono::sys_time&lt;/a&gt;&amp;lt;duration&amp;gt;&lt;/code&gt; representing the same point in time as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6409d3752b791019a403647eb2b007e5e6b67811" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object composed of all elements of all argument tuples constructed from &lt;code&gt;std::get&amp;lt;i&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Ti&amp;gt;(arg))&lt;/code&gt; for each individual element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438f3055a7496f3d32d7f973749edcad6fb07d47" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object containing lvalue references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6644b37c8775a359000eee0f3eb80abd2b3ebdc5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object containing the given values, created as if by &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;VTypes...&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Types&amp;gt;(t)...).&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7af38062d7eec7845bc9d7b866e1ba62f0bc955" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&lt;/code&gt; object created as if by &lt;code&gt;&lt;a href=&quot;../tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Types&amp;amp;&amp;amp;...&amp;gt;(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Types&amp;gt;(args)...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba570ad426b2cc7767aa08de7d3051fc4589c97" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&lt;/code&gt; constructed from the iterator to the end of the &lt;code&gt;d_first_true&lt;/code&gt; range and the iterator to the end of the &lt;code&gt;d_first_false&lt;/code&gt; range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a70af051214dc14db350ad174c3eee725d7ad2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;back_insert_iterator&quot;&gt;std::back_insert_iterator&lt;/a&gt;&lt;/code&gt; which can be used to add elements to the end of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75531b5cf7348a4e886834d0ef1434d8a57cad7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;front_insert_iterator&quot;&gt;std::front_insert_iterator&lt;/a&gt;&lt;/code&gt; which can be used to add elements to the beginning of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd677c01d58a2a294e686b8e803ad350dbbc522b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;insert_iterator&quot;&gt;std::insert_iterator&lt;/a&gt;&lt;/code&gt; which can be used to insert elements into the container &lt;code&gt;c&lt;/code&gt; at the position indicated by &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5376beac287220a0a9748f55af65f5c5bfa197" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;move_iterator&quot;&gt;std::move_iterator&lt;/a&gt;&lt;/code&gt; which can be used to move from the elements accessed through &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6cdf022bdbbe8ab886fea76cb81fdf2f05a841" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&lt;/code&gt; constructed from &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f13978d47a30d4f6eb9300a5a76627192cbeab4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;__has_include&lt;/code&gt; result of &lt;code&gt;1&lt;/code&gt; only means that a header or source file with the specified name exists. It does not mean that the header or source file, when included, would not cause an error or would contain anything useful. For example, on a C++ implementation that supports both C++14 and C++17 modes (and provides &lt;code&gt;__has_include&lt;/code&gt; in its C++14 mode as a conforming extension), &lt;code&gt;__has_include(&amp;lt;optional&amp;gt;)&lt;/code&gt; may be &lt;code&gt;1&lt;/code&gt; in C++14 mode, but actually &lt;code&gt;#include &amp;lt;optional&amp;gt;&lt;/code&gt; may cause an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae90f301d0c1ef74c9731aa90072e62f80ba7189" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;basic_streambuf&lt;/code&gt; object may support input (in which case the buffer described by the beginning, next, and end pointers is called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357b8db4e0d10e9f4ade042c2b099a74a9d9c6f5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;byte_string&lt;/code&gt; object containing the results of the wide to multibyte conversion. If the conversion failed and there was a user-supplied byte-error string provided to the constructor of this &lt;code&gt;wstring_convert&lt;/code&gt;, returns that byte-error string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f79b46b0a6455310e69f4eaaba2516ca3a8f9e1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;proxy&lt;/code&gt; object holds a &lt;code&gt;char_type&lt;/code&gt; character and a &lt;code&gt;streambuf_type*&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13c688bb7131c906343beee334bf6ea60a8e93d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;recursive_directory_iterator&lt;/code&gt; typically holds a reference-counted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63249cfc3e64169680f46ea81fd58bc53ce4f9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_future&lt;/code&gt; may be used to signal multiple threads simultaneously, similar to &lt;code&gt;&lt;a href=&quot;condition_variable/notify_all&quot;&gt;std::condition_variable::notify_all()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e789bb486beef08f12cb2eb86c0def84fdf724" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; can share ownership of an object while storing a pointer to another object. This feature can be used to point to member objects while owning the object they belong to. The stored pointer is the one accessed by &lt;code&gt;get()&lt;/code&gt;, the dereference and the comparison operators. The managed pointer is the one passed to the deleter when use count reaches zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f727339e73ce27b458015a2d537d9270fcfc075" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; may also own no objects, in which case it is called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318f5810ea278abe782814534eb028673b885280" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; may share ownership of an object while storing a pointer to another object. &lt;code&gt;get()&lt;/code&gt; returns the stored pointer, not the managed pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ac680d20b940dffdab9f9b4a8957e713db1ede" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;shared_ptr&lt;/code&gt; which shares ownership of the owned object if &lt;code&gt;&lt;a href=&quot;expired&quot;&gt;std::weak_ptr::expired&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. Else returns default-constructed &lt;code&gt;shared_ptr&lt;/code&gt; of type T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5fa36c01d32a099ce1778a4bedb47802628926" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;span&lt;/code&gt; is a non-owning view over a contiguous sequence of objects, the storage of which is owned by some other object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d6b0ee54de9a6e4ef517699a07a922b4703992" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::day&lt;/code&gt; literal representing a day of a month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b6218c6d097daeacfbc5012c160d59ef5eeba2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::day&lt;/code&gt; storing &lt;code&gt;d&lt;/code&gt;. If &lt;code&gt;d &amp;gt; 255&lt;/code&gt;, the stored value is unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67839b6284c5d13ec52f28b0361505200e7ade56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing hours</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5d53d49f6a9a88aadd40d22eb67960839368ec" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing microseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af480ece4f0a8f0c3051974ec0c02f5b5994684b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1805a5da80d0c2d5870f37bb85c5d81803674d25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing minutes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a1c47e010795bb4c005e19610cdd3ce0f3c7a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing nanoseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855d32b25ba236683ebd8c472ad73561e5953186" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::duration&lt;/code&gt; literal representing seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5a2b265260794d50833d832b95a07df9d40ae6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::gps_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and subtracting &lt;code&gt;315964809s&lt;/code&gt;. (315964809 is the number of seconds between the epochs of the two clocks: 1980-01-06 00:00:00 UTC for &lt;code&gt;gps_clock&lt;/code&gt; and 1970-01-01 00:00:00 UTC for &lt;code&gt;utc_clock&lt;/code&gt;.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bc347e689b7ed20fabc8c3eb986c42ba120d5f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::sys_seconds&lt;/code&gt; representing the date and time at which the leap second was inserted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0554d008c5ddcb923a07e86f2f8e3e45d810c460" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::tai_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and adding &lt;code&gt;378691210s&lt;/code&gt;. (378691210 is the number of seconds between the epochs of the two clocks: 1958-01-01 00:00:00 TAI and 1970-01-01 00:00:00 UTC.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1803e0676180e6423d4a462a6c44d55a10b0087d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::utc_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and adding &lt;code&gt;315964809s&lt;/code&gt;. (315964809 is the number of seconds between the epochs of the two clocks: 1980-01-06 00:00:00 UTC for &lt;code&gt;gps_clock&lt;/code&gt; and 1970-01-01 00:00:00 UTC for &lt;code&gt;utc_clock&lt;/code&gt;.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2a9c59e6ba4f0548b3c04909b0e8262184603f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::utc_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, computed as if by constructing a value of the return type from &lt;code&gt;t.time_since_epoch()&lt;/code&gt; and subtracting &lt;code&gt;378691210s&lt;/code&gt;. (378691210 is the number of seconds between the epochs of the two clocks: 1958-01-01 00:00:00 TAI and 1970-01-01 00:00:00 UTC.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cbd7a47650f6823fccd8a99b574e7080bec72c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::year&lt;/code&gt; initialized from &lt;code&gt;int(y)&lt;/code&gt;. If &lt;code&gt;y &amp;gt; 32767&lt;/code&gt;, the stored value is unspecified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2dd57acc931672f6fc13d7f0383403c2b9582b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::chrono::year&lt;/code&gt; literal representing a particular year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196182dc3cdc030f6309ac4496be42a5a51c133b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::complex&lt;/code&gt; literal representing pure imaginary number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03db70d5464af7188e0952d2cdd53f2ec7603f25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;std::initializer_list&lt;/code&gt; object is automatically constructed when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2416d5002cbb5c36f532d8063f03389d8b5422e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;sys_days&lt;/code&gt; in the range &lt;code&gt;[&lt;a href=&quot;../duration&quot;&gt;std::chrono::days&lt;/a&gt;{-12687428}, &lt;a href=&quot;../duration&quot;&gt;std::chrono::days&lt;/a&gt;{11248737}]&lt;/code&gt;, when converted to &lt;code&gt;year_month_day&lt;/code&gt; and back, yields the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cd92d06ec407b65d4b95f11cad94c00e4f216c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;sys_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;, or the last representable value prior to the insertion of the leap second if &lt;code&gt;t&lt;/code&gt; represents a time point during a leap second insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96937610b5550209f67220ea3c321e16035bef78" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;unique_ptr&lt;/code&gt; may alternatively own no object, in which case it is called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58dc72e1047681e454bfee09e90c66f270a4a56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;utc_time&lt;/code&gt; representing the same point in time as &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542de237e44dd13f9ee5ac62935835c294cf3b25" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wchar_t&lt;/code&gt; was found that does not correspond to a valid character in the current C locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bb2ad0d9cf240aee1dc9625749829b610808d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wchar_t&lt;/code&gt; was found that does not correspond to a valid character in the current C locale. &lt;code&gt;src&lt;/code&gt; is set to point at the first unconverted wide character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe2d528997a53b0e651a1fe67793c99a6a83a88" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;wide_string&lt;/code&gt; object containing the results of multibyte to wide conversion. If the conversion failed and there was a user-supplied wide-error string provided to the constructor of this &lt;code&gt;wstring_convert&lt;/code&gt;, returns that wide-error string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c39ad849bdf8414052e5eda92f3192e3921aba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_day&lt;/code&gt; can also be created by combining one of the partial-date types &lt;code&gt;std::chrono::year_month&lt;/code&gt; and &lt;code&gt;std::chrono::month_day&lt;/code&gt; with the missing component (day and year, respectively) using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77e4a0861a72036d329d2332c611ef2a3df46bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_day_last&lt;/code&gt; can also be created by combining a &lt;code&gt;std::chrono::year_month&lt;/code&gt; with &lt;code&gt;std::chrono::last&lt;/code&gt; using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e19abb7133397eac8a029f005bdd6aa33de7c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_weekday&lt;/code&gt; can also be created by combining one of the partial-date types &lt;code&gt;std::chrono::year_month&lt;/code&gt; and &lt;code&gt;std::chrono::month_weekday&lt;/code&gt; with the missing component (indexed weekday and year, respectively) using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d12761fa97badaf88ea57a4fa81d56a010780f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;year_month_weekday_last&lt;/code&gt; can also be created by combining one of the partial-date types &lt;code&gt;std::chrono::year_month&lt;/code&gt; and &lt;code&gt;std::chrono::month_weekday_last&lt;/code&gt; with the missing component (&lt;code&gt;weekday_last&lt;/code&gt; and year, respectively) using &lt;code&gt;operator/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0481828e02ad2ec4c7648d0ee942b6e9604e35" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;BinaryTypeTrait&lt;/strong&gt; is a class template that describes a relationship between its two template type parameters with a &lt;code&gt;intergral_constant&lt;/code&gt; (typically &lt;code&gt;bool_constant&lt;/code&gt;) specialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f77f7f5aa436f0fcd1d57f9aa83f10776767c6" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Callable&lt;/strong&gt; type is a type for which the INVOKE operation (used by, e.g., &lt;code&gt;&lt;a href=&quot;../utility/functional/function&quot;&gt;std::function&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../utility/functional/bind&quot;&gt;std::bind&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../thread/thread/thread&quot;&gt;std::thread::thread&lt;/a&gt;&lt;/code&gt;) is applicable. This operation may be performed explicitly using the library function &lt;code&gt;&lt;a href=&quot;../utility/functional/invoke&quot;&gt;std::invoke&lt;/a&gt;&lt;/code&gt;.(since C++17).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d906885655bf9a804f8f6a030da64ac3dddfa99a" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;ConstexprIterator&lt;/strong&gt; is an &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; that can be used during constant expression evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e302bba1d392155f11afdeef94647300309d97" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Container&lt;/strong&gt; is an object used to store other objects and taking care of the management of the memory used by the objects it contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef432d007eef64eda22fb23e994185bf687b8d41" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;ContiguousContainer&lt;/strong&gt; is a &lt;a href=&quot;container&quot;&gt;Container&lt;/a&gt; that stores objects in contiguous memory locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09782d636880ca6b88fb813351e643a436ea5022" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;FunctionObject&lt;/strong&gt; type is the type of an object that can be used on the left of the function call operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce0ce08aa8b9e16f4544254c56ba6d53a80310c" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Hash&lt;/strong&gt; is a function object for which the output depends only on the input and has a very low probability of yielding the same output given different input values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a24a0b458d4254da449bbaf9a811ad9e4046f8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyBidirectionalIterator&lt;/strong&gt; is a &lt;a href=&quot;forwarditerator&quot;&gt;LegacyForwardIterator&lt;/a&gt; that can be moved in both directions (i.e. incremented and decremented).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc607ab5fb7d859c4d05f308cf2a65173def1ca" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyContiguousIterator&lt;/strong&gt; is an &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; whose logically adjacent elements are also physically adjacent in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="470f4b69f83c016ce72b5ffeb5d57c01dcf088df" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyForwardIterator&lt;/strong&gt; is an &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; that can read data from the pointed-to element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269e94f6995b45ea6c1948760e89a0b4cf97fd0a" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyOutputIterator&lt;/strong&gt; is a &lt;a href=&quot;iterator&quot;&gt;LegacyIterator&lt;/a&gt; that can write to the pointed-to element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ac349e2997555b025f8b5baec08dce263c3b77" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;LegacyRandomAccessIterator&lt;/strong&gt; is a &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; that can be moved to point to any element in constant time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f238db312f77ddc75f63bcb2f4b7dd188b9ca0" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;RandomNumberDistribution&lt;/strong&gt; is a function object returning random numbers according to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;probability density function&lt;/a&gt; p(x) or a &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_probability_distribution&quot;&gt;discrete probability distribution&lt;/a&gt; P(x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50c4f828384cbf6b30efb948f97de179407962d" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;RandomNumberEngineAdaptor&lt;/strong&gt; is a &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt; that transforms the output of another &lt;a href=&quot;randomnumberengine&quot;&gt;RandomNumberEngine&lt;/a&gt;, the latter of which is termed a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a0778ec161ee7c0d8a33a4dfb6f3357c1123a8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;ReversibleContainer&lt;/strong&gt; is a &lt;a href=&quot;container&quot;&gt;Container&lt;/a&gt; that has iterators that meet the requirements of either &lt;a href=&quot;bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; or &lt;a href=&quot;randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;. Such iterators allow a ReversibleContainer to be iterated over in reverse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5735cf87b01303c0476fb7de6f428ad78085fd5f" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;SeedSequence&lt;/strong&gt; is an object that produces unsigned integer values i in the range 0 &amp;le; i &amp;lt; 232</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c52b339b2ee2ae49c5d3d6b7e0b4718f32c23b" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;SequenceContainer&lt;/strong&gt; is a &lt;a href=&quot;container&quot;&gt;Container&lt;/a&gt; that stores objects of the same type in a linear arrangement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7328a0a4485037a3849a794b3c3bf0b9d9a84375" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;TransformationTrait&lt;/strong&gt; is a class template that provides a transformation of its template type parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18442a98240e08beb497c9b7b1b7656978b79bbf" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;UnaryTypeTrait&lt;/strong&gt; is a class template that describes a property of its template type parameter with a &lt;code&gt;intergral_constant&lt;/code&gt; (typically &lt;code&gt;bool_constant&lt;/code&gt;) specialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e115ee910c23585c67e89a8fa2a35bf9d48204fc" translate="yes" xml:space="preserve">
          <source>A C++ program is a sequence of text files (typically header and source files) that contain &lt;a href=&quot;declarations&quot;&gt;declarations&lt;/a&gt;. They undergo &lt;a href=&quot;translation_phases&quot;&gt;translation&lt;/a&gt; to become an executable program, which is executed when the C++ implementation calls its &lt;a href=&quot;main_function&quot;&gt;main function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696e9ba46f0e89fbf8f3f739d39f78c01763ca69" translate="yes" xml:space="preserve">
          <source>A C++11 allocator, except for &lt;code&gt;[[nodiscard]]&lt;/code&gt; added to match C++20 style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4896bc1daebc0abb5b5e88f5eec065228bcfa2be" translate="yes" xml:space="preserve">
          <source>A FormattedInputFunction is a stream input function that performs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcd781c7737cdfafcc92cbcad2f562fc4c7ae70" translate="yes" xml:space="preserve">
          <source>A FormattedOutputFunction is a stream output function that performs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abbe7aacaeebe6afa784b8512377295c624db1f" translate="yes" xml:space="preserve">
          <source>A NaN never compares equal to itself. Copying a NaN is not required, by IEEE-754, to preserve its bit representation (sign and &lt;a href=&quot;../../numeric/math/nan.2&quot;&gt;payload&lt;/a&gt;), though most implementation do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1aff1a22674c9e44e7d2cb9b5dcdbeb2378294" translate="yes" xml:space="preserve">
          <source>A NaN never compares equal to itself. Copying a NaN may not preserve its bit representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9f955fcda8cac3ebcaac018b3d6fbc14010819" translate="yes" xml:space="preserve">
          <source>A UnformattedOutputFunction is a stream output function that performs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc097ea561cba47cf1b1abfdbd2daa3850ca001" translate="yes" xml:space="preserve">
          <source>A better matching explicit template specialization is declared after POR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec4f21972dcc25fc3dbe2eb02d679bc9aca14fb" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e1361ec1bfb3cf535277cfe534bfbac9726d9d" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR. The best matching explicit template specialization is declared after the better matching overload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a33a0b60462971da28748bdaa245589f197f0bc" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR. The best matching explicit template specialization is declared before the better matching overload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28e114d6ff514854c73183e6b9965eb392012a4" translate="yes" xml:space="preserve">
          <source>A better matching template overload is declared after POR. The best matching explicit template specialization is declared last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de42b146f2986694468b2fff709419625959a04c" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator does not have to be dereferenceable to be decrementable (in particular, the end iterator is not dereferenceable but is decrementable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcd7a03bb7e18117bc7d298831e7047b8a6eeaf" translate="yes" xml:space="preserve">
          <source>A bit field cannot be a &lt;a href=&quot;static&quot;&gt;static data member&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19fb2a2dadaaf50c7e2e46dd1749c808dab005d" translate="yes" xml:space="preserve">
          <source>A bit field declaration is a &lt;a href=&quot;data_members&quot;&gt;class data member declaration&lt;/a&gt; which uses the following declarator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a590718d11fd286b69f0c237198c6d1822013e63" translate="yes" xml:space="preserve">
          <source>A braced-init-list is not an expression and therefore has no type, e.g. &lt;code&gt;decltype({1,2})&lt;/code&gt; is ill-formed. Having no type implies that template type deduction cannot deduce a type that matches a braced-init-list, so given the declaration &lt;code&gt;template&amp;lt;class T&amp;gt; void f(T);&lt;/code&gt; the expression &lt;code&gt;f({1,2,3})&lt;/code&gt; is ill-formed. However, the template parameter can otherwise be deduced, as is the case for &lt;code&gt;&lt;a href=&quot;../container/vector&quot;&gt;std::vector&lt;/a&gt;&amp;lt;int&amp;gt; v(&lt;a href=&quot;../iterator/istream_iterator&quot;&gt;std::istream_iterator&lt;/a&gt;&amp;lt;int&amp;gt;(&lt;a href=&quot;../io/cin&quot;&gt;std::cin&lt;/a&gt;), {})&lt;/code&gt;, where the iterator type is deduced by the first argument but also used in the second parameter position. A special exception is made for &lt;a href=&quot;template_argument_deduction#Other_contexts&quot;&gt;type deduction using the keyword &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt;, which deduces any braced-init-list as &lt;code&gt;&lt;a href=&quot;../utility/initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25a945c48cf6f76f2a11977d7e5d96d55161783" translate="yes" xml:space="preserve">
          <source>A break statement cannot be used to break out of multiple nested loops. The &lt;a href=&quot;goto&quot;&gt;goto statement&lt;/a&gt; may be used for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66079261f595fa39ab0f9aaf1e689bbee78c00a3" translate="yes" xml:space="preserve">
          <source>A byte can be converted to a numeric value (such as to produce an integer hash of an object) using &lt;code&gt;std::to_integer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac00aaac3e166d5f02787d362ff61a7dbdfec8c" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;&lt;a href=&quot;deque/resize&quot;&gt;resize&lt;/a&gt;&lt;/code&gt; with a bigger size does not invalidate any references to elements of the deque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3bd25a45a77ef2cd90ffdff2bbd6a3f417bccc" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;&lt;a href=&quot;deque/resize&quot;&gt;resize&lt;/a&gt;&lt;/code&gt; with a smaller size does not invalidate any references to non-erased elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4085f69cdbe79bbedc544a370d8a6d054d8e3f" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;ranges::swap&lt;/code&gt; is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bf0ef2a40ed34d578e8eca5302265c933381c1" translate="yes" xml:space="preserve">
          <source>A call to the function &lt;code&gt;signal()&lt;/code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;synchronizes-with&lt;/a&gt; any resulting invocation of the signal handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957db833b4f5ab4bc58ee300bdf3f470c8067752" translate="yes" xml:space="preserve">
          <source>A call to this function that is the first reference to the time zone database will cause it to be initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d98bb60ccfb29934166b50b7654ddc55d041fb" translate="yes" xml:space="preserve">
          <source>A calling thread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88af58fe68e08793c307053c2cc426819b7e729a" translate="yes" xml:space="preserve">
          <source>A calling thread must not own the &lt;code&gt;mutex&lt;/code&gt; prior to calling &lt;a href=&quot;mutex/lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;mutex/try_lock&quot;&gt;&lt;code&gt;try_lock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457b0cebf001afcb67715849a7b3d5889a26f274" translate="yes" xml:space="preserve">
          <source>A capture with an initializer acts as if it declares and explicitly captures a variable declared with type &lt;a href=&quot;auto&quot;&gt;auto&lt;/a&gt;, whose declarative region is the body of the lambda expression (that is, it is not in scope within its initializer), except that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b1cdee087afad1d8f06a49a9f05eb930d33022" translate="yes" xml:space="preserve">
          <source>A character sequence consisting of &lt;code&gt;count1&lt;/code&gt; characters starting at &lt;code&gt;data1&lt;/code&gt; is compared to a character sequence consisting of &lt;code&gt;count2&lt;/code&gt; characters starting at &lt;code&gt;data2&lt;/code&gt; as follows. First, calculate the number of characters to compare, as if by &lt;code&gt;size_type rlen = &lt;a href=&quot;../../algorithm/min&quot;&gt;std::min&lt;/a&gt;(count1, count2)&lt;/code&gt;. Then compare the sequences by calling &lt;code&gt;Traits::compare(data1, data2, rlen)&lt;/code&gt;. For standard strings this function performs character-by-character lexicographical comparison. If the result is zero (the character sequences are equal so far), then their sizes are compared as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e69c116e40fb317f2e25cb8dbfec22a28aa6519" translate="yes" xml:space="preserve">
          <source>A character sequence in the format string that begins with a &lt;code&gt;%&lt;/code&gt; but does not match one of the conversion specifiers below is interpreted as ordinary characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666a543460952ac2d59725854a64fe41ab3657d8" translate="yes" xml:space="preserve">
          <source>A character sequence in the format string that begins with a &lt;code&gt;%&lt;/code&gt; but does not match one of the format specifiers below is interpreted as ordinary characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d718390377b6b62f30fd556cf96e27540adb5b7" translate="yes" xml:space="preserve">
          <source>A character sequence made of any source character but parentheses, backslash and &lt;a href=&quot;../string/byte/isspace&quot;&gt;spaces&lt;/a&gt; (can be empty, and at most 16 characters long)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2079fc01e090f90cbd9362f60edfe4448456c14" translate="yes" xml:space="preserve">
          <source>A class can have multiple copy assignment operators, e.g. both &lt;code&gt;T&amp;amp; T::operator=(const T&amp;amp;)&lt;/code&gt; and &lt;code&gt;T&amp;amp; T::operator=(T)&lt;/code&gt;. If some user-defined copy assignment operators are present, the user may still force the generation of the implicitly declared copy assignment operator with the keyword &lt;code&gt;default&lt;/code&gt;.(since C++11).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08294a0fbe1cdc67a6e89a0a3196176e7255ac69" translate="yes" xml:space="preserve">
          <source>A class can have multiple copy constructors, e.g. both &lt;code&gt;T::T(const T&amp;amp;)&lt;/code&gt; and &lt;code&gt;T::T(T&amp;amp;)&lt;/code&gt;. If some user-defined copy constructors are present, the user may still force the generation of the implicitly declared copy constructor with the keyword &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0fd74db644a3b140608452cb77e014bcf47686" translate="yes" xml:space="preserve">
          <source>A class can have multiple move assignment operators, e.g. both &lt;code&gt;T&amp;amp; T::operator=(const T&amp;amp;&amp;amp;)&lt;/code&gt; and &lt;code&gt;T&amp;amp; T::operator=(T&amp;amp;&amp;amp;)&lt;/code&gt;. If some user-defined move assignment operators are present, the user may still force the generation of the implicitly declared move assignment operator with the keyword &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec44d659593732e41afb1335fa632c9e9922aaf7" translate="yes" xml:space="preserve">
          <source>A class can have multiple move constructors, e.g. both &lt;code&gt;T::T(const T&amp;amp;&amp;amp;)&lt;/code&gt; and &lt;code&gt;T::T(T&amp;amp;&amp;amp;)&lt;/code&gt;. If some user-defined move constructors are present, the user may still force the generation of the implicitly declared move constructor with the keyword &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42002dfe680b51a69be519ba49b54f8867cdcf8" translate="yes" xml:space="preserve">
          <source>A class can have the following kinds of members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b609924b6cbf0e0eb45f7692c32df793ac93816" translate="yes" xml:space="preserve">
          <source>A class declaration can appear in namespace scope (in which case it defines an ordinary class), inside another class definition (in which case it defines a &lt;a href=&quot;nested_classes&quot;&gt;nested class&lt;/a&gt;), and inside the body of a function, in which case it defines a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3849ae6dd831af666fcb3de9bb2eb1299702a7" translate="yes" xml:space="preserve">
          <source>A class defined with the keyword &lt;code&gt;class&lt;/code&gt; has private access for its members and its base classes by default. A class defined with the keyword &lt;code&gt;struct&lt;/code&gt; has public access for its members and its base classes by default. A &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; has public access for its members by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1ff8f108445c52327d9383ef06a59f94e3314e" translate="yes" xml:space="preserve">
          <source>A class does not have to implement a &lt;a href=&quot;../language/move_constructor&quot;&gt;move constructor&lt;/a&gt; to satisfy this type requirement: a &lt;a href=&quot;../language/copy_constructor&quot;&gt;copy constructor&lt;/a&gt; that takes a &lt;code&gt;const T&amp;amp;&lt;/code&gt; argument can bind rvalue expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f68d393bb94a50c56452d4c3cf44c1268630ecc" translate="yes" xml:space="preserve">
          <source>A class is a user-defined type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9d6f5d743dcff79fee7ca9e10287f1a607fc17" translate="yes" xml:space="preserve">
          <source>A class or struct declared &lt;a href=&quot;final&quot;&gt;final&lt;/a&gt; cannot appear in base-clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c698751e9d04b7a69e80ad9f11830612c93f3b4" translate="yes" xml:space="preserve">
          <source>A class suitable for use with &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/named_req/Searcher&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;Searcher&lt;/a&gt; overload of &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt; that delegates the search operation to the pre-C++17 standard library's &lt;code&gt;&lt;a href=&quot;../../algorithm/search&quot;&gt;std::search&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9545590496a9d558d293c83054fde0d9082d80d1" translate="yes" xml:space="preserve">
          <source>A class template by itself is not a type, or an object, or any other entity. No code is generated from a source file that contains only template definitions. In order for any code to appear, a template must be instantiated: the template arguments must be provided so that the compiler can generate an actual class (or function, from a function template).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0844379dd4087d82f156f2ab29d7b71f6865d4d7" translate="yes" xml:space="preserve">
          <source>A class template defines a family of classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1368668d87864c4bddcbf53db914a3e9406651" translate="yes" xml:space="preserve">
          <source>A class type (such as &lt;code&gt;class X&lt;/code&gt;) might be incomplete at one point in a translation unit and complete later on; the type &lt;code&gt;class X&lt;/code&gt; is the same type at both points:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e03c028d42dc38b8cf8cd0fe8b5a855a9e6d9b" translate="yes" xml:space="preserve">
          <source>A class type is defined by class-specifier, which appears in decl-specifier-seq of the &lt;a href=&quot;declarations&quot;&gt;declaration&lt;/a&gt; syntax. The class specifier has the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06181cd201ffa4d51b2b613c3753e0ce34e5fade" translate="yes" xml:space="preserve">
          <source>A class where all non-static data members have the same access control and certain other conditions are satisfied is known as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dd9fa511a1f4bfc547397a6914049ad4c807de" translate="yes" xml:space="preserve">
          <source>A class with a &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; constructor is a &lt;a href=&quot;../named_req/literaltype&quot;&gt;LiteralType&lt;/a&gt;: objects of this type can be manipulated by &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; functions at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ede003b438e80024f7b8c4a5d601ed8d8879ed" translate="yes" xml:space="preserve">
          <source>A class with at least one declared or inherited &lt;a href=&quot;virtual&quot;&gt;virtual&lt;/a&gt; member function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebf84457058090a601656446d4e44106dd20573" translate="yes" xml:space="preserve">
          <source>A class with at least one declared or inherited pure virtual member function is an &lt;a href=&quot;abstract_class&quot;&gt;abstract class&lt;/a&gt;. Objects of this type cannot be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719ec93f6620db49be098a31ed71d87cddeed13b" translate="yes" xml:space="preserve">
          <source>A clock consists of a starting point (or epoch) and a tick rate. For example, a clock may have an epoch of January 1, 1970 and tick every second. C++ defines several clock types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e39b90a6cb653ffa38cbd92a158bb59c3fe2b6" translate="yes" xml:space="preserve">
          <source>A common error is setting the buffer of stdin or stdout to an array whose lifetime ends before the program terminates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc307299d5ed9d552e26de173efa748ec8760cfc" translate="yes" xml:space="preserve">
          <source>A common guideline is that a destructor for a base class must be &lt;a href=&quot;http://www.gotw.ca/publications/mill18.htm&quot;&gt;either public and virtual or protected and nonvirtual&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afac72f5ab6e0fcd2aca25cac87606b663fdcfca" translate="yes" xml:space="preserve">
          <source>A common idiom is to use expression SFINAE on the return type, where the expression uses the comma operator, whose left subexpression is the one that is being examined (cast to void to ensure the user-defined operator comma on the returned type is not selected), and the right subexpression has the type that the function is supposed to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7837d1b2ad2344135b3ced236eedd67243ea95ab" translate="yes" xml:space="preserve">
          <source>A common implementation for &lt;code&gt;enable_shared_from_this&lt;/code&gt; is to hold a weak reference (such as &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&lt;/code&gt;) to &lt;code&gt;this&lt;/code&gt;. The constructors of &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; detect the presence of an unambiguous and accessible(since C++17)&lt;code&gt;enable_shared_from_this&lt;/code&gt; base and assign the newly created &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; to the internally stored weak reference if not already owned by a live &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt;(since C++17). Constructing a &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; for an object that is already managed by another &lt;code&gt;&lt;a href=&quot;shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&lt;/code&gt; will not consult the internally stored weak reference and thus will lead to undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0627f677b6bfa79bd80b2e27378433051033d60" translate="yes" xml:space="preserve">
          <source>A common mistake is to declare two function templates that differ only in their default template arguments. This is illegal because default template arguments are not part of function template's signature, and declaring two different function templates with the same signature is illegal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903cfada6023cc984b76c527f017096ab2951ca5" translate="yes" xml:space="preserve">
          <source>A common requirement for &lt;a href=&quot;operators#Relational_operators&quot;&gt;user-defined operator&amp;lt;&lt;/a&gt; is &lt;a href=&quot;https://en.wikipedia.org/wiki/Strict_weak_ordering&quot;&gt;strict weak ordering&lt;/a&gt;. In particular, this is required by the standard algorithms and containers that work with &lt;a href=&quot;../named_req/compare&quot;&gt;Compare&lt;/a&gt; types: &lt;code&gt;&lt;a href=&quot;../algorithm/sort&quot;&gt;std::sort&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../algorithm/max_element&quot;&gt;std::max_element&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../container/map&quot;&gt;std::map&lt;/a&gt;&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb21f3ed0a362e2b913da91c1d4edf3f68ea44c" translate="yes" xml:space="preserve">
          <source>A common use case for &lt;code&gt;optional&lt;/code&gt; is the return value of a function that may fail. As opposed to other approaches, such as &lt;code&gt;&lt;a href=&quot;pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T,bool&amp;gt;&lt;/code&gt;, &lt;code&gt;optional&lt;/code&gt; handles expensive-to-construct objects well and is more readable, as the intent is expressed explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288296bf65cd832fd0b7a3defc250adc0a788f8f" translate="yes" xml:space="preserve">
          <source>A common use case for template friends is declaration of a non-member operator overload that acts on a class template, e.g. &lt;code&gt;operator&amp;lt;&amp;lt;(&lt;a href=&quot;../io/basic_ostream&quot;&gt;std::ostream&lt;/a&gt;&amp;amp;, const Foo&amp;lt;T&amp;gt;&amp;amp;)&lt;/code&gt; for some user-defined &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78a767c7077e09f1e58aaf3b98e4d2d1181c576" translate="yes" xml:space="preserve">
          <source>A comparison category type as defined above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c8e7e9442f401e4bb64c1c926d73cc5c662c80" translate="yes" xml:space="preserve">
          <source>A compound requirement has the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004add19ac089f9af13dd0de25e22e4dd4bf731c" translate="yes" xml:space="preserve">
          <source>A concept is a named set of requirements. The definition of a concept must appear at namespace scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ad6c9aef9077feccf8de5bd5a8137f3d35ccf1" translate="yes" xml:space="preserve">
          <source>A condition variable is a synchronization primitive that allows multiple threads to communicate with each other. It allows some number of threads to wait (possibly with a timeout) for notification from another thread that they may proceed. A condition variable is always associated with a mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ab0d471e579c2147626b7312bd2b1604067ff3" translate="yes" xml:space="preserve">
          <source>A conjunction of two constraints is satisfied only if both constraints are satisfied. Conjunctions are evaluated left to right and short-circuited (if the left constraint is not satisfied, template argument substitution into the right constraint is not attempted: this prevents failures due to substitution outside of immediate context).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e673a73d3eb19872ccad1f3f2d1fc1cc3cbd3451" translate="yes" xml:space="preserve">
          <source>A constrained declaration may only be redeclared using the same syntactic form. No diagnostic is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5bfc3eeaa1ced79aadc223c5464ddedf9364c5" translate="yes" xml:space="preserve">
          <source>A constraint &lt;code&gt;P&lt;/code&gt; is said to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75835360ca2a8c81162f02f752c4ad0955c3bbb3" translate="yes" xml:space="preserve">
          <source>A constraint is a sequence of logical operations and operands that specifies requirements on template arguments. They can appear within</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201d162ff74c75b39c099eafe0856ca091082e61" translate="yes" xml:space="preserve">
          <source>A constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc0004e44d74512bcd82773523e4ea2e9520116" translate="yes" xml:space="preserve">
          <source>A constructor (including default constructors) for a class is odr-used by the &lt;a href=&quot;initialization&quot;&gt;initialization&lt;/a&gt; that selects it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154f81a48f0df5cddfe21451d0ef22feca0bdd6b" translate="yes" xml:space="preserve">
          <source>A constructor is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf82d4cf1aa18950145c2a2e92b194366d9a05e9" translate="yes" xml:space="preserve">
          <source>A constructor is called a 'move constructor' when it takes an rvalue reference as a parameter. It is not obligated to move anything, the class is not required to have a resource to be moved and a 'move constructor' may not be able to move a resource as in the allowable (but maybe not sensible) case where the parameter is a const rvalue reference (const T&amp;amp;&amp;amp;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786a4fb43ed69e1b336387fd02859d1a82132b52" translate="yes" xml:space="preserve">
          <source>A constructor that is not declared with the specifier &lt;a href=&quot;explicit&quot;&gt;explicit&lt;/a&gt;and which can be called with a single parameter(until C++11) is called a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1831b55f122e16e65ae0cefc89a50ccdaa10e4" translate="yes" xml:space="preserve">
          <source>A constructor with a single non-default parameter(until C++11) that is declared without the function specifier &lt;code&gt;explicit&lt;/code&gt; is called a &lt;a href=&quot;converting_constructor&quot;&gt;converting constructor&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cb17190fa300b187e4a29716390493694b575f" translate="yes" xml:space="preserve">
          <source>A conversion-type-id in a &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion&lt;/a&gt; function name is first looked up in the scope of the class. If not found, the name is then looked up in the current scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e775fcf05b002de801de31f682bafa87ff617bac" translate="yes" xml:space="preserve">
          <source>A copy assignment operator for a class that holds resources that can handle multiple readers, but only one writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc22353bec9f50f8b299a8a8a723ea9e8cdc66a" translate="yes" xml:space="preserve">
          <source>A copy assignment operator of class &lt;code&gt;T&lt;/code&gt; is a non-template &lt;a href=&quot;member_functions&quot;&gt;non-static member function&lt;/a&gt; with the name &lt;code&gt;operator=&lt;/code&gt; that takes exactly one parameter of type &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;T&amp;amp;&lt;/code&gt;, &lt;code&gt;const T&amp;amp;&lt;/code&gt;, &lt;code&gt;volatile T&amp;amp;&lt;/code&gt;, or &lt;code&gt;const volatile T&amp;amp;&lt;/code&gt;. For a type to be &lt;a href=&quot;../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;, it must have a public copy assignment operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e583729bec2b79b7851639a4a20cb9009a77edb6" translate="yes" xml:space="preserve">
          <source>A copy constructor of class &lt;code&gt;T&lt;/code&gt; is a non-template &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt; whose first parameter is &lt;code&gt;T&amp;amp;&lt;/code&gt;&amp;zwj;, &lt;code&gt;const T&amp;amp;&lt;/code&gt;&amp;zwj;, &lt;code&gt;volatile T&amp;amp;&lt;/code&gt;&amp;zwj;, or &lt;code&gt;const volatile T&amp;amp;&lt;/code&gt;&amp;zwj;, and either there are no other parameters, or the rest of the parameters all have default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be82bccc96946d36b70dc97ec2624b93f79fe9d6" translate="yes" xml:space="preserve">
          <source>A copy of &lt;code&gt;&lt;a href=&quot;../basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt;, which may be a null pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dfe87d9637a86fea3e2c59b1422de774a3386b8" translate="yes" xml:space="preserve">
          <source>A copy of the &lt;code&gt;std::chrono::month&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3a37b6f13d1c644a8ead2349862e390c24471b" translate="yes" xml:space="preserve">
          <source>A copy of the &lt;code&gt;std::chrono::weekday&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f1bd488dfb48b629618e2a1d06482488ffb310" translate="yes" xml:space="preserve">
          <source>A copy of the returned string along with the category used in this call to &lt;code&gt;std::setlocale&lt;/code&gt; may be used later in the program to restore the locale back to the state at the end of this call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c62723db0b8ca37045a0c9bb3b70acae310e0c1" translate="yes" xml:space="preserve">
          <source>A copy of the stored time zone pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b693cce6ae5221a781b8a07c471b1f15ee61bea" translate="yes" xml:space="preserve">
          <source>A coroutine is a function that can suspend execution to be resumed later. Coroutines are stackless: they suspend execution by returning to the caller. This allows for sequential code that executes asynchronously (e.g. to handle non-blocking I/O without explicit callbacks), and also supports algorithms on lazy-computed infinite sequences and other uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba75a881abd2a6557e91f8b47ac8a6575d6bd0c9" translate="yes" xml:space="preserve">
          <source>A counted range &lt;code&gt;[i, n)&lt;/code&gt; is the &lt;code&gt;n&lt;/code&gt; elements starting with the element pointed to by &lt;code&gt;i&lt;/code&gt; and up to but not including the element, if any, pointed to by the result of &lt;code&gt;n&lt;/code&gt; applications of &lt;code&gt;++i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448d103896a72988a86efcfd3d4dff473c54647a" translate="yes" xml:space="preserve">
          <source>A counted view presents a &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; of the elements of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7756ec5996ae63b7229d1cb191ddbaa0002df17" translate="yes" xml:space="preserve">
          <source>A deallocation function for a class is odr-used by a &lt;a href=&quot;delete&quot;&gt;delete expression&lt;/a&gt; appearing in a potentially-evaluated expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c3d6d57bebaaed7123b28c5dc529f120ec4034" translate="yes" xml:space="preserve">
          <source>A declaration directly contained in a language linkage specification is treated as if it contains the &lt;a href=&quot;storage_duration&quot;&gt;extern specifier&lt;/a&gt; for the purpose of determining the &lt;a href=&quot;storage_duration#Linkage&quot;&gt;linkage&lt;/a&gt; of the declared name and whether it is a &lt;a href=&quot;definition&quot;&gt;definition&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ece06d6cbf7b0b2875beacd53b2ad0a1206cfd" translate="yes" xml:space="preserve">
          <source>A declaration is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bd7b84e776165bb84d865d05b5e10b11415e15" translate="yes" xml:space="preserve">
          <source>A declaration of a &lt;a href=&quot;class&quot;&gt;class/struct&lt;/a&gt; or &lt;a href=&quot;union&quot;&gt;union&lt;/a&gt; may appear in within another class. Such declaration declares a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1639813cef172042dde9fb318ca556d46fc2fb" translate="yes" xml:space="preserve">
          <source>A declaration of the following form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6c3d5789c9ebe1eee9600961b3add313476bfa" translate="yes" xml:space="preserve">
          <source>A declaration of the form &lt;code&gt;T a[N];&lt;/code&gt;, declares &lt;code&gt;a&lt;/code&gt; as an array object that consists of &lt;code&gt;N&lt;/code&gt; contiguously allocated objects of type &lt;code&gt;T&lt;/code&gt;. The elements of an array are numbered &lt;code&gt;0, &amp;hellip;, N - 1&lt;/code&gt;, and may be accessed with the &lt;a href=&quot;operator_member_access#Built-in_subscript_operator&quot;&gt;subscript operator []&lt;/a&gt;, as in &lt;code&gt;a[0]&lt;/code&gt;, &amp;hellip;, &lt;code&gt;a[N - 1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735d6ea64d95c8eae5f31d5fa950b36294f92359" translate="yes" xml:space="preserve">
          <source>A declarator is one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa37ccd8d8d756aada7ae1d3f6fecf8c8f8f3061" translate="yes" xml:space="preserve">
          <source>A deduction guide is not a function and does not have a body. Deduction guides are not found by name lookup and do not participate in overload resolution except for the &lt;a href=&quot;overload_resolution#Best_viable_function&quot;&gt;overload resolution against other deduction guides&lt;/a&gt; when deducing class template arguments. Deduction guides cannot be redeclared in the same translation unit for the same class template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b582f9b8089c8fad2b6aef72209d901f622aa9" translate="yes" xml:space="preserve">
          <source>A default constructor is a &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt; which can be called with no arguments (either defined with an empty parameter list, or with default arguments provided for every parameter). A type with a public default constructor is &lt;a href=&quot;../named_req/defaultconstructible&quot;&gt;DefaultConstructible&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b02953ca7f1049034ff96ba7a7ca2b845b9e42" translate="yes" xml:space="preserve">
          <source>A default constructor that stores an offset of zero and value-initializes the state object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c176eb04610d0c2c8b2b59432032e7462678854" translate="yes" xml:space="preserve">
          <source>A default-constructed &lt;code&gt;polymorphic_allocator&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0375fb83f5610006b9da824ecc4d5adbd26863" translate="yes" xml:space="preserve">
          <source>A default-constructed &lt;code&gt;std::exception_ptr&lt;/code&gt; is a null pointer; it does not point to an exception object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e2b61a7ee3861a6a6cf3d23e07970d73ec3a31" translate="yes" xml:space="preserve">
          <source>A default-constructed match result has no result state (is not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ada824ffc3c79281079e53b6cb3db89386ccf30" translate="yes" xml:space="preserve">
          <source>A defaulted copy assignment operator for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4fde283c8ff24d3d454915c90ed3c9ab54ae88" translate="yes" xml:space="preserve">
          <source>A deleted function is implicitly an inline function: its (deleted) definition can appear in more than one translation unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e46a775f8271d46ac8ba6c6f050dd4aa8321fc" translate="yes" xml:space="preserve">
          <source>A deleted implicitly-declared move assignment operator is ignored by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab7519b7a1ef3ffb0c871d7f2e721a2e2b8da2f" translate="yes" xml:space="preserve">
          <source>A dereferenceable pointer to &lt;code&gt;r&lt;/code&gt;, of the type pointer_traits&amp;lt;&amp;gt;::pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da43daef68b5251310c750e2919f29567a2f121" translate="yes" xml:space="preserve">
          <source>A destructor for a class is odr-used if it is potentially invoked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9913efa427029f2603afafd45776c72670630d06" translate="yes" xml:space="preserve">
          <source>A destructor is a special &lt;a href=&quot;member_functions&quot;&gt;member function&lt;/a&gt; that is called when the &lt;a href=&quot;lifetime&quot;&gt;lifetime of an object&lt;/a&gt; ends. The purpose of the destructor is to free the resources that the object may have acquired during its lifetime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233d8857531b55ad102039f2d423d152b10acdcd" translate="yes" xml:space="preserve">
          <source>A destructor is looked up as described above (in the scope of the name to the left of ::)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd75f21c22d3624cfc21c2eaf157652238adfd51" translate="yes" xml:space="preserve">
          <source>A destructor may be declared &lt;a href=&quot;abstract_class&quot;&gt;pure virtual&lt;/a&gt;, for example in a base class which needs to be made abstract, but has no other suitable functions that could be declared pure virtual. Such destructor must have a definition, since all base class destructors are always called when the derived class is destroyed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a0bdae03b190e366e55aaedf802460df63da63" translate="yes" xml:space="preserve">
          <source>A deterministic random number generator (e.g. a pseudo-random engine) has entropy zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba4368c481f7e07c3699c3a67e9a78a76dcb42e" translate="yes" xml:space="preserve">
          <source>A directory suitable for temporary files. The path is guaranteed to exist and to be a directory. The overload that takes &lt;code&gt;error_code&amp;amp;&lt;/code&gt; argument returns an empty path on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9c094be632a0a865a6166ec40c981fbc2b8fac" translate="yes" xml:space="preserve">
          <source>A disjunction of two constraints is satisfied if either constraint is satisfied. Disjunctions are evaluated left to right and short-circuited (if the left constraint is satisfied, template argument substitution into the right constraint is not attempted).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089c028655f5931200be1bc3ff6ad58ddd4abdfd" translate="yes" xml:space="preserve">
          <source>A domain error or range error may occur if &lt;code&gt;arg&lt;/code&gt; is zero, infinite, or NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e473a92e89597b00e7916dbd0a636020aa56b0" translate="yes" xml:space="preserve">
          <source>A downcast can also be performed with &lt;code&gt;static_cast&lt;/code&gt;, which avoids the cost of the runtime check, but it's only safe if the program can guarantee (through some other logic) that the object pointed to by expression is definitely &lt;code&gt;Derived&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a6c97456730ebe82433bded5f34157e8861bdc" translate="yes" xml:space="preserve">
          <source>A duration consists of a span of time, defined as some number of ticks of some time unit. For example, &quot;42 seconds&quot; could be represented by a duration consisting of 42 ticks of a 1-second time unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d5f985455aec9d5b30cd29942a2a8b4f2dc3ae" translate="yes" xml:space="preserve">
          <source>A friend class declaration cannot define a new class (&lt;code&gt;friend class X {};&lt;/code&gt; is an error).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c164b8418ab75a2e5bbac8718c7afdde0672f0ad" translate="yes" xml:space="preserve">
          <source>A fully-sorted range meets these criteria.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f4bc669919c7a0f9df3b62e5450b1a7ad8db7f" translate="yes" xml:space="preserve">
          <source>A function can be explicitly declared to be transaction-safe by using the keyword &lt;code&gt;transaction_safe&lt;/code&gt; in its declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4396153ec7254552c3bf758717ccd722434b42" translate="yes" xml:space="preserve">
          <source>A function can be re-declared without a linkage specification after it was declared with a language specification, the second declaration will reuse the first language linkage. The opposite is not true: if the first declaration has no language linkage, it is assumed &lt;code&gt;&quot;C++&quot;&lt;/code&gt;, and redeclaring with another language is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48dbb4188a44c75a7c9c9bb0ae4fd5694fac0ce" translate="yes" xml:space="preserve">
          <source>A function can terminate by &lt;a href=&quot;return&quot;&gt;returning&lt;/a&gt; or by &lt;a href=&quot;throw&quot;&gt;throwing&lt;/a&gt; an &lt;a href=&quot;exceptions&quot;&gt;exception&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e906d7d09117dff8da8e93d630b0ab6f1f193aed" translate="yes" xml:space="preserve">
          <source>A function declaration introduces the function name and its type. A function definition associates the function name/type with the function body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb38575cbb95e86066c28731cb8ece89ed7d8b5" translate="yes" xml:space="preserve">
          <source>A function declaration without a decl-specifier-seq:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64fee3be6cbfe3de470be017d74181e41a6c7c68" translate="yes" xml:space="preserve">
          <source>A function declaration without a function body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b426bce9474a4c0c0191d7e862f822ce490168" translate="yes" xml:space="preserve">
          <source>A function declarator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b921ac337f009bc154b162ea1a058102eaf4c7" translate="yes" xml:space="preserve">
          <source>A function declared &lt;code&gt;constexpr&lt;/code&gt; is implicitly an inline function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0d470a4bd8c8b0af0d879cf6c92c40a35e57cd" translate="yes" xml:space="preserve">
          <source>A function defined entirely inside a &lt;a href=&quot;classes&quot;&gt;class/struct/union definition&lt;/a&gt;, whether it's a member function or a non-member &lt;code&gt;friend&lt;/code&gt; function, is implicitly an inline function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec194f104337987654a52dcbe1e1e845c65a6e93" translate="yes" xml:space="preserve">
          <source>A function is a coroutine if its definition does any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecaa114236d48b6a12bf949ca33d8212d95b820c" translate="yes" xml:space="preserve">
          <source>A function may be a &lt;a href=&quot;coroutines&quot;&gt;coroutine&lt;/a&gt;, in which case it can suspend execution to be resumed later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c56d11a7df52c37599040edb3e3c979bb33e10d" translate="yes" xml:space="preserve">
          <source>A function object of type &lt;code&gt;T&lt;/code&gt; that is unspecified, except that the types of objects returned by two calls to &lt;code&gt;std::bind_front&lt;/code&gt; with the same arguments are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17217496cc5f94cbdfb5993024f235b2c8a86e13" translate="yes" xml:space="preserve">
          <source>A function object of unspecified type &lt;code&gt;T&lt;/code&gt;, for which &lt;code&gt;&lt;a href=&quot;is_bind_expression&quot;&gt;std::is_bind_expression&lt;/a&gt;&amp;lt;T&amp;gt;::value == true&lt;/code&gt;. It has the following members:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0c0b84b48029cbc70889b717ce5ad45fdf5e5a" translate="yes" xml:space="preserve">
          <source>A function object of unspecified type T. It has the following members:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9b21027ea5a8a4208fd40ea14715037c69c73e" translate="yes" xml:space="preserve">
          <source>A function object that binds an argument to a binary function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8beb5d22ba2ef9b675efbb24b26bb9c7feae1fbd" translate="yes" xml:space="preserve">
          <source>A function object wrapping &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8264f450d0f4a0eb5479a6403725c4e108a20b0" translate="yes" xml:space="preserve">
          <source>A function object wrapping &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29da7a46779a8fa96aa7886be30dbab4d7228995" translate="yes" xml:space="preserve">
          <source>A function template by itself is not a type, or a function, or any other entity. No code is generated from a source file that contains only template definitions. In order for any code to appear, a template must be instantiated: the template arguments must be determined so that the compiler can generate an actual function (or class, from a class template).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a399a5571cd60b0b35ad275684677bba886f47d6" translate="yes" xml:space="preserve">
          <source>A function template defines a family of functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb41387b211eb02fafa2b0588377b1b56a1f6afc" translate="yes" xml:space="preserve">
          <source>A function template generated from a guide is preferred over one implicitly generated from a constructor or constructor template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132a68593e81a964739bd14a8da36430256f7483" translate="yes" xml:space="preserve">
          <source>A function template implicitly generated from a non-template constructor is preferred over a function template implicitly generated from a constructor template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa81bf06ed5ca7fac6664a9eb3439cbd75e0bc5" translate="yes" xml:space="preserve">
          <source>A function whose name appears as a potentially-evaluated expression (including named function, overloaded operator, &lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion&lt;/a&gt;, user-defined placement forms of operator new, non-default initialization) is odr-used if it is selected by overload resolution, except when it is an unqualified pure virtual member function or a pointer-to-member to a pure virtual function(since C++17).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cff2e7a5d83d3ba9fb6bc996e4806115df5169" translate="yes" xml:space="preserve">
          <source>A function with the same name and the same argument list as a specialization is not a specialization (see template overloading in &lt;a href=&quot;function_template&quot;&gt;function template&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528dad90604f19a889e64c08e79cee382c5e3c31" translate="yes" xml:space="preserve">
          <source>A function with the same name but different parameter list does not override the base function of the same name, but</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32311fb20f46258c03d2446ebb5b51b21c54c36b" translate="yes" xml:space="preserve">
          <source>A future referring to the shared state of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4485a66d15239df845a6f9e93994e9cf8a6c68f" translate="yes" xml:space="preserve">
          <source>A future which shares the same shared state as &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c478b6ebdeb08cc8b5ae99d5822e50d913def2" translate="yes" xml:space="preserve">
          <source>A generic captureless lambda has a user-defined conversion function template with the same invented template parameter list as the function-call operator template. If the return type is empty or auto, it is obtained by return type deduction on the function template specialization, which, in turn, is obtained by &lt;a href=&quot;template_argument_deduction&quot;&gt;template argument deduction&lt;/a&gt; for conversion function templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faee911640b7bcb780b8ce78e1d67e4a8a1f4c11" translate="yes" xml:space="preserve">
          <source>A glvalue can have &lt;a href=&quot;type-id#Incomplete_type&quot;&gt;incomplete type&lt;/a&gt;, where permitted by the expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0fe9a2db69c91f90e3611345c407e88159cd56" translate="yes" xml:space="preserve">
          <source>A glvalue may be &lt;a href=&quot;objects#Polymorphic_objects&quot;&gt;polymorphic&lt;/a&gt;: the &lt;a href=&quot;type-id#Dynamic_type&quot;&gt;dynamic type&lt;/a&gt; of the object it identifies is not necessarily the static type of the expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0737b0db85c64af3308f6e0773890b7a42053f7" translate="yes" xml:space="preserve">
          <source>A glvalue may be implicitly converted to a prvalue with lvalue-to-rvalue, array-to-pointer, or function-to-pointer &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea983824512d3d15a34a2db0846ed086638210c" translate="yes" xml:space="preserve">
          <source>A hash value such that if for two paths, &lt;code&gt;p1 == p2&lt;/code&gt; then &lt;code&gt;hash_value(p1) == hash_value(p2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15292f4673498136ecff031fb3f30153a4dc7b04" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::bool_constant&lt;/code&gt; is defined for the common case where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3c2467c41e2b75c0a9c40219370cc5f3f2dacc" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::index_sequence&lt;/code&gt; is defined for the common case where &lt;code&gt;T&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4184acb56c1e7d627626f8d37bc2e5a0e6fcdbc2" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::index_sequence_for&lt;/code&gt; is defined to convert any type parameter pack into an index sequence of the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a32a1c6ab3b77893556fe5ee65c2d9a42a41be5" translate="yes" xml:space="preserve">
          <source>A helper alias template &lt;code&gt;std::make_integer_sequence&lt;/code&gt; is defined to simplify creation of &lt;code&gt;std::integer_sequence&lt;/code&gt; and &lt;code&gt;std::index_sequence&lt;/code&gt; types with 0, 1, 2, ..., &lt;code&gt;N-1&lt;/code&gt; as &lt;code&gt;Ints&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b96bb19789c3bb31d9a6d33b876372301de6683" translate="yes" xml:space="preserve">
          <source>A implicitly-declared copy assignment operator for class &lt;code&gt;T&lt;/code&gt; is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15422e25d782ee0aaf32e9d2f486b686dbdfbf2f" translate="yes" xml:space="preserve">
          <source>A is performed on an atomic object M, the longest continuous subsequence of the modification order of M that consists of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e61a00b266a84e226d1254d5beab581ed782765d" translate="yes" xml:space="preserve">
          <source>A lambda expression can read the value of a variable without capturing it if the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f802f1c1fef8ac6ac571575c62abeda5c0664b3" translate="yes" xml:space="preserve">
          <source>A lambda expression can use a variable without capturing it if the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465859edc342e145e6c5df96a92ee34ac4c2a74a" translate="yes" xml:space="preserve">
          <source>A literal type is any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970388d0171fba77b4f60c1b13ea5429bb78c066" translate="yes" xml:space="preserve">
          <source>A load operation with this memory order performs a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04adb94f807f9fc41a4b16df95c597991972fc35" translate="yes" xml:space="preserve">
          <source>A load operation with this memory order performs an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b21ef2a1cadb419bb1ba1c86579963e83c28347" translate="yes" xml:space="preserve">
          <source>A load operation with this memory order performs the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c57a71a01f996550e0f74266e8009688dfaf530" translate="yes" xml:space="preserve">
          <source>A local class cannot have static data members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a4d1e136eb143a0bef8fa64a6da1d5c7287563" translate="yes" xml:space="preserve">
          <source>A local class inside a function (including member function) can access the same names that the enclosing function can access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662fb60735dae12caa47ef3645a724e39bd9cdeb" translate="yes" xml:space="preserve">
          <source>A lookup that finds an injected-class-name can result in an ambiguity in certain cases (for example, if it is found in more than one base class). If all of the injected-class-names that are found refer to specializations of the same class template, and if the name is used as a template-name, the reference refers to the class template itself and not a specialization thereof, and is not ambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fefb521f44bd11a11c759eec7e0999f170af11" translate="yes" xml:space="preserve">
          <source>A member function template cannot be virtual, and a member function template in a derived class cannot override a virtual member function from the base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f230d1a09bc7b6bdfcbc967fa62f2a1068e4aa4" translate="yes" xml:space="preserve">
          <source>A member name found in a sub-object &lt;code&gt;B&lt;/code&gt; hides the same member name in any sub-object &lt;code&gt;A&lt;/code&gt; if &lt;code&gt;A&lt;/code&gt; is a base class sub-object of &lt;code&gt;B&lt;/code&gt;. (Note that this does not hide the name in any additional, non-virtual, copies of &lt;code&gt;A&lt;/code&gt; on the inheritance lattice that aren't bases of &lt;code&gt;B&lt;/code&gt;: this rule only has an effect on virtual inheritance.) Names introduced by using-declarations are treated as names in the class containing the declaration. After examining each base, the resulting set must either include declarations of a static member from subobjects of the same type, or declarations of non-static members from the same subobject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de0dced78d11272f963c83043ebca189594c138" translate="yes" xml:space="preserve">
          <source>A member of a class &lt;code&gt;T&lt;/code&gt; cannot use &lt;code&gt;T&lt;/code&gt; as its name if the member is a static data member, a member function, a member type, a member template , an enumerator of an unscoped enumeration, a member of a member anonymous union. However, a non-static data member may use the name &lt;code&gt;T&lt;/code&gt; as long as there are no user-declared constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ca9ae096395091286ce2f97b84c334ccf6644c" translate="yes" xml:space="preserve">
          <source>A member or a member template of a class template may be explicitly specialized for a given implicit instantiation of the class template, even if the member or member template is defined in the class template definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc4194447e3feb7759961528ba2acc170fa12c7" translate="yes" xml:space="preserve">
          <source>A modifiable lvalue may be used as the left-hand operand of the built-in assignment and compound assignment operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c00f6a72efb6556fa9292b04ea6629a5f0cab13" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;month_day&lt;/code&gt; is with &lt;code&gt;operator/&lt;/code&gt;, e.g., &lt;code&gt;&lt;a href=&quot;../month&quot;&gt;std::chrono::April&lt;/a&gt;/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e596eb0f0194c2c2e4167ab358138e5b60c14287" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;month_day_last&lt;/code&gt; is with &lt;code&gt;operator/&lt;/code&gt;, e.g., &lt;code&gt;&lt;a href=&quot;../month&quot;&gt;std::chrono::April&lt;/a&gt;/&lt;a href=&quot;../last_spec&quot;&gt;std::chrono::last&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8c5116dd01717b8a1f75b9620c596b6f5367a7" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;month_weekday&lt;/code&gt; is with &lt;code&gt;operator/&lt;/code&gt;, e.g., &lt;code&gt;&lt;a href=&quot;../month&quot;&gt;std::chrono::April&lt;/a&gt;/&lt;a href=&quot;../weekday&quot;&gt;std::chrono::Sunday&lt;/a&gt;[2]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4752a9f37cdb6658a9a8728cdd2291f0b5ec64d6" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;month_weekday_last&lt;/code&gt; is with &lt;code&gt;operator/&lt;/code&gt;, e.g., &lt;code&gt;&lt;a href=&quot;../month&quot;&gt;std::chrono::April&lt;/a&gt;/&lt;a href=&quot;../weekday&quot;&gt;std::chrono::Sunday&lt;/a&gt;[&lt;a href=&quot;../last_spec&quot;&gt;std::chrono::last&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7327a074e15b5c31502879c12e39a884355916ba" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;weekday_indexed&lt;/code&gt; is with &lt;code&gt;weekday&lt;/code&gt;'s &lt;code&gt;operator[]&lt;/code&gt;, i.e., &lt;code&gt;wd[index]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c209a7c3ca3ab0475649b12caaff743d2fbd1dd1" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;weekday_last&lt;/code&gt; is with &lt;code&gt;weekday&lt;/code&gt;'s &lt;code&gt;operator[]&lt;/code&gt;, i.e., &lt;code&gt;wd[&lt;a href=&quot;../last_spec&quot;&gt;std::chrono::last&lt;/a&gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653ca78a80e72fd3496d4da44b432d7ef45908d8" translate="yes" xml:space="preserve">
          <source>A more convenient way to construct a &lt;code&gt;year_month&lt;/code&gt; is with &lt;code&gt;operator/&lt;/code&gt;, e.g., &lt;code&gt;2007y/&lt;a href=&quot;../month&quot;&gt;std::chrono::April&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1d73be6c54e98a146e6c453de6dea68f79b357" translate="yes" xml:space="preserve">
          <source>A move assignment operator of class &lt;code&gt;T&lt;/code&gt; is a non-template &lt;a href=&quot;member_functions&quot;&gt;non-static member function&lt;/a&gt; with the name &lt;code&gt;operator=&lt;/code&gt; that takes exactly one parameter of type &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;const T&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;volatile T&amp;amp;&amp;amp;&lt;/code&gt;, or &lt;code&gt;const volatile T&amp;amp;&amp;amp;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7677c3fc7a7f1b5d05a4ba8d65de62c8c77ad6c9" translate="yes" xml:space="preserve">
          <source>A move constructor of class &lt;code&gt;T&lt;/code&gt; is a non-template &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt; whose first parameter is &lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;const T&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;volatile T&amp;amp;&amp;amp;&lt;/code&gt;, or &lt;code&gt;const volatile T&amp;amp;&amp;amp;&lt;/code&gt;, and either there are no other parameters, or the rest of the parameters all have default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16af80cf4cdc5acb425ed5fb5f2a532dceaaf925" translate="yes" xml:space="preserve">
          <source>A multibyte character string is layout-compatible with null-terminated byte string (NTBS), that is, can be stored, copied, and examined using the same facilities, except for calculating the number of characters. If the correct locale is in effect, I/O functions also handle multibyte strings. Multibyte strings can be converted to and from wide strings using the &lt;code&gt;&lt;a href=&quot;../locale/codecvt&quot;&gt;std::codecvt&lt;/a&gt;&lt;/code&gt; member functions, &lt;code&gt;&lt;a href=&quot;../locale/wstring_convert&quot;&gt;std::wstring_convert&lt;/a&gt;&lt;/code&gt;, or the following locale-dependent conversion functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98fb2bdc836fccaa6d115487be59107743d4bcc" translate="yes" xml:space="preserve">
          <source>A name declared non-deprecated may be redeclared deprecated. A name declared deprecated cannot be un-deprecated by redeclaring it without this attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9645e04714e8aeab4e16fb75044a74252ed38005" translate="yes" xml:space="preserve">
          <source>A name first declared in a friend declaration within class or class template X becomes a member of the innermost enclosing namespace of X, but is not visible for lookup (except argument-dependent lookup that considers X) unless a matching declaration at the namespace scope is provided - see &lt;a href=&quot;namespace#Namespaces&quot;&gt;namespaces&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3933fe1919f27704fb38fb769004562260d8099c" translate="yes" xml:space="preserve">
          <source>A name is classified as a member of the current instantiation if it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddc18654271b83daffe509c6b14c3572df5edd8" translate="yes" xml:space="preserve">
          <source>A name that denotes object, reference, function, type, template, namespace, or value, may have</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853d1578fabbd2c82d82a0fe09f5702733aba960" translate="yes" xml:space="preserve">
          <source>A name that is accessible through multiple paths in the inheritance graph has the access of the path with the most access:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e45514825dadadd15b3e67c603ee32f7155b58a" translate="yes" xml:space="preserve">
          <source>A name that is private according to unqualified &lt;a href=&quot;lookup&quot;&gt;name lookup&lt;/a&gt;, may be accessible through qualified name lookup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b86d73926de6a377e6b550b9b013a7e40df60f" translate="yes" xml:space="preserve">
          <source>A namespace member that was declared within a namespace body may be defined or redeclared outside of it using explicit qualification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039345001a9866dd339fc34b017f987d45772976" translate="yes" xml:space="preserve">
          <source>A narrow character string is created as if by a call to &lt;code&gt;&lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::printf&lt;/a&gt;(spec, v)&lt;/code&gt; in the &quot;C&quot; locale, where &lt;code&gt;spec&lt;/code&gt; is the chosen conversion specifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105e80128937d46ea748308c3640f225aa1f1163" translate="yes" xml:space="preserve">
          <source>A negative value of &lt;code&gt;time-&amp;gt;tm_isdst&lt;/code&gt; causes &lt;code&gt;mktime&lt;/code&gt; to attempt to determine if Daylight Saving Time was in effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b6295b9130f095206e2ffbf6e1a198ffb81cdb" translate="yes" xml:space="preserve">
          <source>A nested requirement has the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab04a416d50d68103518e61edffcc3d876b52d0" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;std::scoped_allocator_adaptor&lt;/code&gt; object, constructed from correctly copied allocators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fea0735582c1d92ba9ca4265c504066694d506" translate="yes" xml:space="preserve">
          <source>A newly constructed object of type &lt;code&gt;pos_type&lt;/code&gt; which stores the resulting file position, or &lt;code&gt;pos_type(off_type(-1))&lt;/code&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7812e17881f85045a11332d843939ff143d1510b" translate="yes" xml:space="preserve">
          <source>A newly opened stream has no orientation. The first call to &lt;code&gt;std::fwide&lt;/code&gt; or to any I/O function establishes the orientation: wide I/O function makes the stream wide-oriented, narrow I/O function makes the stream narrow-oriented. Once set, orientation can only be changed with &lt;code&gt;&lt;a href=&quot;c/freopen&quot;&gt;std::freopen&lt;/a&gt;&lt;/code&gt;. Narrow I/O functions cannot be called on a wide-oriented stream, wide I/O functions cannot be called on a narrow-oriented stream. Wide I/O functions convert between wide and multibyte characters as if by calling &lt;code&gt;&lt;a href=&quot;../string/multibyte/mbrtowc&quot;&gt;std::mbrtowc&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../string/multibyte/wcrtomb&quot;&gt;std::wcrtomb&lt;/a&gt;&lt;/code&gt;. Unlike the multibyte character strings that are valid in a program, multibyte characters in the file may contain embedded nulls and do not have to begin or end in the initial shift state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869a3424851c79242efec3e07d77e356612111d6" translate="yes" xml:space="preserve">
          <source>A noexcept-specification of a function is considered to be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aee1e7c886fbccbfdc8526a802aa2e4e5e0f970" translate="yes" xml:space="preserve">
          <source>A non-class non-array prvalue cannot be &lt;a href=&quot;cv&quot;&gt;cv-qualified&lt;/a&gt;. (Note: a function call or cast expression may result in a prvalue of non-class cv-qualified type, but the cv-qualifier is immediately stripped out.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c16e8da66b88facf18bcff094f8898640478943" translate="yes" xml:space="preserve">
          <source>A non-const rvalue of type &lt;code&gt;X::node_type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbfbc01b79d14846f146d50d1446c4035f6cd1b8" translate="yes" xml:space="preserve">
          <source>A non-explicit constructor that accepts an argument of type (possibly const) &lt;code&gt;&lt;a href=&quot;streamoff&quot;&gt;std::streamoff&lt;/a&gt;&lt;/code&gt;, which stores that offset and and value-initializes the state object. This constructor must also accept the special value &lt;code&gt;&lt;a href=&quot;streamoff&quot;&gt;std::streamoff&lt;/a&gt;(-1)&lt;/code&gt;: the &lt;code&gt;std::fpos&lt;/code&gt; constructed in this manner is returned by some stream operations to indicate errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5f2f406d4c6d5a6be68be9a352e598e29e63cd" translate="yes" xml:space="preserve">
          <source>A non-member function definition may appear at namespace scope only (there are no nested functions). A &lt;a href=&quot;member_functions&quot;&gt;member function&lt;/a&gt; definition may also appear in the body of a &lt;a href=&quot;class&quot;&gt;class definition&lt;/a&gt;. They have the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8537e5e8c50ad3a4da6590cf63b9c692c279951" translate="yes" xml:space="preserve">
          <source>A non-placement allocation or deallocation function for a class is odr-used by the definition of a constructor of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54709ac99fdc50ecc6383b09c5e6260c6f17f5a9" translate="yes" xml:space="preserve">
          <source>A non-placement deallocation function for a class is odr-used by the definition of the destructor of that class, or by being selected by the lookup at the point of definition of a virtual destructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57427d16d98090f308df82f3319c4bb23d4b400e" translate="yes" xml:space="preserve">
          <source>A non-static member function can be declared with a const, volatile, or const volatile qualifier (this qualifier appears after the parameter list in the &lt;a href=&quot;function&quot;&gt;function declaration&lt;/a&gt;). Differently cv-qualified functions have different types and so may overload each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6269d14f99ea7d83ea3dec1f28326b8c6d5c5ecd" translate="yes" xml:space="preserve">
          <source>A non-static member function can be declared with no ref-qualifier, with an lvalue ref-qualifier (the token &lt;code&gt;&amp;amp;&lt;/code&gt; after the parameter list) or the rvalue ref-qualifier (the token &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; after the parameter list). During &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, non-static cv-qualified member function of class X is treated as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58ef98b1f97443f7f30d89e9dea4b508149bdcf" translate="yes" xml:space="preserve">
          <source>A non-static member function is a function that is declared in a &lt;a href=&quot;class&quot;&gt;member specification&lt;/a&gt; of a class without a &lt;a href=&quot;static&quot;&gt;static&lt;/a&gt; or &lt;a href=&quot;friend&quot;&gt;friend&lt;/a&gt; specifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327b4ee07e641d05a96006e2735a0db3601ea014" translate="yes" xml:space="preserve">
          <source>A non-static member function may be declared</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8309388308c23f79d7667a2481e8485faf7c4b76" translate="yes" xml:space="preserve">
          <source>A non-static member function of class X may be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd8b8cff9d7f40f60c773d5633d2a93e250abe4" translate="yes" xml:space="preserve">
          <source>A non-template function is always distinct from a template specialization with the same type. Specializations of different function templates are always distinct from each other even if they have the same type. Two function templates with the same return type and the same parameter list are distinct and can be distinguished with explicit template argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8d1e0238ca169189cb132939968a32e225940d" translate="yes" xml:space="preserve">
          <source>A non-template member function and a template member function with the same name may be declared. In case of conflict (when some template specialization matches the non-template function signature exactly), use of that name and type refers to the non-template member unless an explicit template argument list is supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d14804af608dab04a2318dab2393b02651d54c9" translate="yes" xml:space="preserve">
          <source>A notable implementation where &lt;code&gt;std::random_device&lt;/code&gt; is deterministic is MinGW (&lt;a href=&quot;https://sourceforge.net/p/mingw-w64/bugs/338/&quot;&gt;bug 338&lt;/a&gt;), although replacement implementations exist, such as &lt;a href=&quot;https://github.com/euloanty/mingw-std-random_device&quot;&gt;mingw-std-random_device&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97541bdffeb4e63b35a3a02617d21fc06220467" translate="yes" xml:space="preserve">
          <source>A null pointer constant may be &lt;a href=&quot;../language/implicit_cast&quot;&gt;implicitly converted&lt;/a&gt; to any pointer type; such conversion results in the null pointer value of that type. If a null pointer constant has integer type, it may be converted to a prvalue of type &lt;code&gt;&lt;a href=&quot;nullptr_t&quot;&gt;std::nullptr_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1572c78e938eb0e97af4e78573d5ecf38073eb0" translate="yes" xml:space="preserve">
          <source>A null-terminated byte string (NTBS) is a sequence of nonzero bytes followed by a byte with value zero (the terminating null character). Each byte in a byte string encodes one character of some character set. For example, the character array &lt;code&gt;{'\x63', '\x61', '\x74', '\0'}&lt;/code&gt; is an NTBS holding the string &lt;code&gt;&quot;cat&quot;&lt;/code&gt; in ASCII encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3fe15454343ce4cbfa8b2d64edd72623154c83" translate="yes" xml:space="preserve">
          <source>A null-terminated multibyte string (NTMBS), or &quot;multibyte string&quot;, is a sequence of nonzero bytes followed by a byte with value zero (the terminating null character).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f369b83e123d7a5137bbdf57df583877994fe3" translate="yes" xml:space="preserve">
          <source>A null-terminated wide string is a sequence of valid wide characters, ending with a null character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f262d7c58008e0145d059876c3647b11a00b98dc" translate="yes" xml:space="preserve">
          <source>A numeric array containing elements with values obtained by applying corresponding operator to the values in &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477cf9e2034b21d56b53532edeb5fa0ff54341d3" translate="yes" xml:space="preserve">
          <source>A numeric array containing the results of computation of inverse tangent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d991ad4854aaf7bce85259a803aef1efb1b7db52" translate="yes" xml:space="preserve">
          <source>A numeric array containing the results of exponentiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3cfb0c9df6711008dfe1dd42137fa47903d378" translate="yes" xml:space="preserve">
          <source>A numeric array of &lt;code&gt;bool&lt;/code&gt; containing comparison results of corresponding elements.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
