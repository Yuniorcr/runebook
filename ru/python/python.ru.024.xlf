<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="edcc18ac436a03bd44d6ef6223e83024174e89fd" translate="yes" xml:space="preserve">
          <source>Typical uses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8bd79c1f65ce75577f89953181b5836814ced2" translate="yes" xml:space="preserve">
          <source>Typically Futures are used to enable low-level callback-based code (e.g. in protocols implemented using asyncio &lt;a href=&quot;asyncio-protocol#asyncio-transports-protocols&quot;&gt;transports&lt;/a&gt;) to interoperate with high-level async/await code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0d8913086c02de73375f9a037bf2d54a4d4b86" translate="yes" xml:space="preserve">
          <source>Typically, &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; is a list of directory names as strings. This module also allows an item of &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; to be a string naming a ZIP file archive. The ZIP archive can contain a subdirectory structure to support package imports, and a path within the archive can be specified to only import from a subdirectory. For example, the path &lt;code&gt;example.zip/lib/&lt;/code&gt; would only import from the &lt;code&gt;lib/&lt;/code&gt; subdirectory within the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307c90d60f24c34409c0cbbb907e2ebee94f9501" translate="yes" xml:space="preserve">
          <source>Typically, a mail user agent application moves all of the messages in the &lt;code&gt;new&lt;/code&gt; subdirectory to the &lt;code&gt;cur&lt;/code&gt; subdirectory after the first time the user opens and closes the mailbox, recording that the messages are old whether or not they&amp;rsquo;ve actually been read. Each message in &lt;code&gt;cur&lt;/code&gt; has an &amp;ldquo;info&amp;rdquo; section added to its file name to store information about its state. (Some mail readers may also add an &amp;ldquo;info&amp;rdquo; section to messages in &lt;code&gt;new&lt;/code&gt;.) The &amp;ldquo;info&amp;rdquo; section may take one of two forms: it may contain &amp;ldquo;2,&amp;rdquo; followed by a list of standardized flags (e.g., &amp;ldquo;2,FR&amp;rdquo;) or it may contain &amp;ldquo;1,&amp;rdquo; followed by so-called experimental information. Standard flags for Maildir messages are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9569066be942f47eac360ee7e9604e189cacf75" translate="yes" xml:space="preserve">
          <source>Typically, clamping occurs when an exponent falls outside the context&amp;rsquo;s &lt;code&gt;Emin&lt;/code&gt; and &lt;code&gt;Emax&lt;/code&gt; limits. If possible, the exponent is reduced to fit by adding zeros to the coefficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16226deec705b103a976d79100c8b31ccbd60936" translate="yes" xml:space="preserve">
          <source>Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys. This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI. For example, if there is a WSGI application at &lt;code&gt;/foo&lt;/code&gt;, and the request URI path is &lt;code&gt;/foo/bar/baz&lt;/code&gt;, and the WSGI application at &lt;code&gt;/foo&lt;/code&gt; calls &lt;a href=&quot;#wsgiref.util.shift_path_info&quot;&gt;&lt;code&gt;shift_path_info()&lt;/code&gt;&lt;/a&gt;, it will receive the string &amp;ldquo;bar&amp;rdquo;, and the environment will be updated to be suitable for passing to a WSGI application at &lt;code&gt;/foo/bar&lt;/code&gt;. That is, &lt;code&gt;SCRIPT_NAME&lt;/code&gt; will change from &lt;code&gt;/foo&lt;/code&gt; to &lt;code&gt;/foo/bar&lt;/code&gt;, and &lt;code&gt;PATH_INFO&lt;/code&gt; will change from &lt;code&gt;/bar/baz&lt;/code&gt; to &lt;code&gt;/baz&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c25227e4d8caebe673fedb75cae4fb249b96c0f" translate="yes" xml:space="preserve">
          <source>Typically, you should use an &amp;ldquo;/usr/bin/env python2&amp;rdquo; or &amp;ldquo;/usr/bin/env python3&amp;rdquo;, depending on whether your code is written for Python 2 or 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e713da74eea6cd17134e526d4f4bfa85ea29e095" translate="yes" xml:space="preserve">
          <source>U16, utf16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72fcac268773b2862516cee4a159e76b48faf49" translate="yes" xml:space="preserve">
          <source>U32, utf32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11edf3411c63e0f8d0db9d99f22c6d068007f5f" translate="yes" xml:space="preserve">
          <source>U7, unicode-1-1-utf-7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24ccdbf9775e02769365300203e1554ee400e3d" translate="yes" xml:space="preserve">
          <source>U8, UTF, utf8, cp65001</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acf01764f7a6626f0891a32f61a073dc0762d8b" translate="yes" xml:space="preserve">
          <source>UDP Echo Client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343e5cce60ceccd79ae37a898828ecb0fca0950a" translate="yes" xml:space="preserve">
          <source>UDP Echo Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0bd1a5584aa8e277199b8bce0be0eebe6eae7c" translate="yes" xml:space="preserve">
          <source>UNC drive names are not considered:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d532d59e790c855bac6f2fd3a3d63a663ac152d" translate="yes" xml:space="preserve">
          <source>UNC shares always have a root:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1754f7546fc5579a80084a7fbd2c4dbd78786101" translate="yes" xml:space="preserve">
          <source>UNC shares are also considered drives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46423b62f1108237d6637f21aa348b01ed444951" translate="yes" xml:space="preserve">
          <source>URL Parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac79cb4725903fc4cbc65532def1e7734288ed43" translate="yes" xml:space="preserve">
          <source>URL Quoting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b7ac1e2711f01d24c210e143cb9a34515550f7" translate="yes" xml:space="preserve">
          <source>URL linking to a comment from the server explaining the function of this cookie, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8681bd94130610c53bd7f38805813627eb6cdf42" translate="yes" xml:space="preserve">
          <source>URL opening with automatic cookie handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6ff6209d4df1bcf1d35de653b99ca192c7aa0c" translate="yes" xml:space="preserve">
          <source>URL scheme specifier</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fedebad85ba6d8c62697769bc62126e584a5f4b" translate="yes" xml:space="preserve">
          <source>URL with no fragment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5575b942a5f6d8077af646b856fee8b432912c99" translate="yes" xml:space="preserve">
          <source>UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or GMT). The acronym UTC is not a mistake but a compromise between English and French.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd3d96c46d2e3221efb69d9b12e15082127b8e4" translate="yes" xml:space="preserve">
          <source>UTC offset in the form &lt;code&gt;&amp;plusmn;HHMM[SS[.ffffff]]&lt;/code&gt; (empty string if the object is naive).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4a45e716017695cfee4bc84f1a4e0c8e1e9b9a" translate="yes" xml:space="preserve">
          <source>UTF-16BE</source>
          <target state="translated">UTF-16BE</target>
        </trans-unit>
        <trans-unit id="6af12beb19d40aa853839c482e864ce703f4d2a9" translate="yes" xml:space="preserve">
          <source>UTF-16LE</source>
          <target state="translated">UTF-16LE</target>
        </trans-unit>
        <trans-unit id="9e4d8d4f017185a065b570c771eb332a1c842bec" translate="yes" xml:space="preserve">
          <source>UTF-32BE</source>
          <target state="translated">UTF-32BE</target>
        </trans-unit>
        <trans-unit id="35cabe85c31dfe3f6b86974de33fef51a0f7276a" translate="yes" xml:space="preserve">
          <source>UTF-32LE</source>
          <target state="translated">UTF-32LE</target>
        </trans-unit>
        <trans-unit id="515451058797b204e188dd70f8d20f32dacca327" translate="yes" xml:space="preserve">
          <source>Ukrainian</source>
          <target state="translated">Ukrainian</target>
        </trans-unit>
        <trans-unit id="21c390ed919f285d1fbd2bc30ead55ffc59b9262" translate="yes" xml:space="preserve">
          <source>Unary addition and subtraction are shortcuts for adding an empty counter or subtracting from an empty counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f4685e58374089d5c55b4161cd981dc6132724" translate="yes" xml:space="preserve">
          <source>Unary numeric methods: &lt;code&gt;__neg__&lt;/code&gt;, &lt;code&gt;__pos__&lt;/code&gt; and &lt;code&gt;__invert__&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec04384d60dde2abd489f1b93a17f46f88408ec" translate="yes" xml:space="preserve">
          <source>Unary operations take the top of the stack, apply the operation, and push the result back on the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af724c9a541ce2ab11909206f58df607bfbac91b" translate="yes" xml:space="preserve">
          <source>UnboundLocalError</source>
          <target state="translated">UnboundLocalError</target>
        </trans-unit>
        <trans-unit id="0bbb24dbe913bf1acad1b3813b19242195efde3d" translate="yes" xml:space="preserve">
          <source>Uncomment Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09163dc46bc3ebc70b19a70c153e7b0ff2a536a0" translate="yes" xml:space="preserve">
          <source>Unconditionally skip the decorated test. &lt;em&gt;reason&lt;/em&gt; should describe why the test is being skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33dbdee390d46cbc4b2f0c8d71034b96e387e3a" translate="yes" xml:space="preserve">
          <source>Under System Preferences: Dock, one can set &amp;ldquo;Prefer tabs when opening documents&amp;rdquo; to &amp;ldquo;Always&amp;rdquo;. This setting is not compatible with the tk/tkinter GUI framework used by IDLE, and it breaks a few IDLE features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ff4fd5fd078f6a770a49eda709711308d815f4" translate="yes" xml:space="preserve">
          <source>Under Unix, graphical browsers are preferred under X11, but text-mode browsers will be used if graphical browsers are not available or an X11 display isn&amp;rsquo;t available. If text-mode browsers are used, the calling process will block until the user exits the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc774a2bad012898ce4ca44d59cd0ee58a92ba80" translate="yes" xml:space="preserve">
          <source>Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as &lt;a href=&quot;os#os.fdopen&quot;&gt;&lt;code&gt;os.fdopen()&lt;/code&gt;&lt;/a&gt;). Unix does not have this limitation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43487233aaa2dc1293a621ac76f9af16f9598bae" translate="yes" xml:space="preserve">
          <source>Under Windows, if the &lt;em&gt;winerror&lt;/em&gt; constructor argument is an integer, the &lt;a href=&quot;#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; attribute is determined from the Windows error code, and the &lt;em&gt;errno&lt;/em&gt; argument is ignored. On other platforms, the &lt;em&gt;winerror&lt;/em&gt; argument is ignored, and the &lt;a href=&quot;#OSError.winerror&quot;&gt;&lt;code&gt;winerror&lt;/code&gt;&lt;/a&gt; attribute does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122a25820ac6c0450f8cdb99f851d87ee3865318" translate="yes" xml:space="preserve">
          <source>Under Windows, this gives you the native Windows error code. The &lt;a href=&quot;#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; attribute is then an approximate translation, in POSIX terms, of that native error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a4f0c399ddd6228df271cff58e6d0b91d19d11" translate="yes" xml:space="preserve">
          <source>Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-32&quot;&gt;&lt;code&gt;PYTHONIOENCODING&lt;/code&gt;&lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-33&quot;&gt;&lt;code&gt;PYTHONUTF8&lt;/code&gt;&lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-34&quot;&gt;&lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt;&lt;/a&gt; is also set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c529a5c56c8e1acf4f20d73e1f5a6a05aad70c" translate="yes" xml:space="preserve">
          <source>Under composition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb49fa79f069f1e503b56cda42fc86a007f633b" translate="yes" xml:space="preserve">
          <source>Under some conditions &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; as well as the original values &lt;code&gt;__stdin__&lt;/code&gt;, &lt;code&gt;__stdout__&lt;/code&gt; and &lt;code&gt;__stderr__&lt;/code&gt; can be &lt;code&gt;None&lt;/code&gt;. It is usually the case for Windows GUI apps that aren&amp;rsquo;t connected to a console and Python apps started with &lt;strong&gt;pythonw&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793bf299721caabec9e054ab03d026686481a8fa" translate="yes" xml:space="preserve">
          <source>Under the covers, &lt;a href=&quot;#doctest.DocTestSuite&quot;&gt;&lt;code&gt;DocTestSuite()&lt;/code&gt;&lt;/a&gt; creates a &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; out of &lt;code&gt;doctest.DocTestCase&lt;/code&gt; instances, and &lt;code&gt;DocTestCase&lt;/code&gt; is a subclass of &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;DocTestCase&lt;/code&gt; isn&amp;rsquo;t documented here (it&amp;rsquo;s an internal detail), but studying its code can answer questions about the exact details of &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37c5cd1f45c987d07df9e3363045593abcab226" translate="yes" xml:space="preserve">
          <source>Underline mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc95b3422722b03a214a7379a614933ad297732" translate="yes" xml:space="preserve">
          <source>Underlying encoded files are always opened in binary mode. No automatic conversion of &lt;code&gt;'\n'&lt;/code&gt; is done on reading and writing. The &lt;em&gt;mode&lt;/em&gt; argument may be any binary mode acceptable to the built-in &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function; the &lt;code&gt;'b'&lt;/code&gt; is automatically added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c426c5d3245f89c66b8d44eb9a7418a57214883" translate="yes" xml:space="preserve">
          <source>Underlying file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fc72124884d6573e4f9f89585f071ed0782696" translate="yes" xml:space="preserve">
          <source>Undo</source>
          <target state="translated">Undo</target>
        </trans-unit>
        <trans-unit id="facdf490605511ac7953e25b9d58432a61076c4e" translate="yes" xml:space="preserve">
          <source>Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ffa2fcbfc6a89513586da0ea5253ed26d4950d" translate="yes" xml:space="preserve">
          <source>Undo the last change to the current window. A maximum of 1000 changes may be undone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5173f55ca599f2baa4e8cf060601f130743f6e5c" translate="yes" xml:space="preserve">
          <source>Undocumented Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afa636f1dcd288a19ebf51b051831aa190255a4" translate="yes" xml:space="preserve">
          <source>Unescape &lt;code&gt;'&amp;amp;amp;'&lt;/code&gt;, &lt;code&gt;'&amp;amp;lt;'&lt;/code&gt;, and &lt;code&gt;'&amp;amp;gt;'&lt;/code&gt; in a string of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae07519eb339aa0a6d65a7ecc51b6a9a2141e8c" translate="yes" xml:space="preserve">
          <source>Unfinished errata to &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760f925ad5f161e1f96d23cf3994740c822322b1" translate="yes" xml:space="preserve">
          <source>Unfortunately, a CGI script will generally not run when you try it from the command line, and a script that works perfectly from the command line may fail mysteriously when run from the server. There&amp;rsquo;s one reason why you should still test your script from the command line: if it contains a syntax error, the Python interpreter won&amp;rsquo;t execute it at all, and the HTTP server will most likely send a cryptic error to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb76619273a40dbd3b69446939d186f550fa921" translate="yes" xml:space="preserve">
          <source>Unfortunately, in the current implementation of &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; it is not possible to hand over an arbitrary Python variable to a widget through a &lt;code&gt;variable&lt;/code&gt; or &lt;code&gt;textvariable&lt;/code&gt; option. The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4109db22111ac0157ddd1a1b60ab5ea903954f" translate="yes" xml:space="preserve">
          <source>Unfreeze the objects in the permanent generation, put them back into the oldest generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fc7822d3ca51d28bdd7a9ee19f9336a4230d3b" translate="yes" xml:space="preserve">
          <source>Unicode character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8265bf80e6bc5985b5427e35abc3cdd9d7da17" translate="yes" xml:space="preserve">
          <source>Unicode issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b526768b1969cfa8a08fe014a311e1718f9ed9" translate="yes" xml:space="preserve">
          <source>UnicodeDecodeError</source>
          <target state="translated">UnicodeDecodeError</target>
        </trans-unit>
        <trans-unit id="f9973e2691d99be91e5b5ef9ad2cbe53ffe3fadc" translate="yes" xml:space="preserve">
          <source>UnicodeEncodeError</source>
          <target state="translated">UnicodeEncodeError</target>
        </trans-unit>
        <trans-unit id="58283ecfa32971a53446570a674574fdd0222dda" translate="yes" xml:space="preserve">
          <source>UnicodeError</source>
          <target state="translated">UnicodeError</target>
        </trans-unit>
        <trans-unit id="f1716ad72e62babae0b6ebd36034174f931ab674" translate="yes" xml:space="preserve">
          <source>UnicodeError.encoding</source>
          <target state="translated">UnicodeError.encoding</target>
        </trans-unit>
        <trans-unit id="fe9d3d97c338283ce266f47d2b1d395c73fb7f1d" translate="yes" xml:space="preserve">
          <source>UnicodeError.end</source>
          <target state="translated">UnicodeError.end</target>
        </trans-unit>
        <trans-unit id="656ba97916742be36d330b15af168cbc79f8a2ab" translate="yes" xml:space="preserve">
          <source>UnicodeError.object</source>
          <target state="translated">UnicodeError.object</target>
        </trans-unit>
        <trans-unit id="14cca87e64dbb585003f7df820b8f5a57f0aab80" translate="yes" xml:space="preserve">
          <source>UnicodeError.reason</source>
          <target state="translated">UnicodeError.reason</target>
        </trans-unit>
        <trans-unit id="3b8f61fae443c3cca69d6e573eb7e4f82cd7d379" translate="yes" xml:space="preserve">
          <source>UnicodeError.start</source>
          <target state="translated">UnicodeError.start</target>
        </trans-unit>
        <trans-unit id="86ef62e8ac070df397f526dd95d38ffc3c15aeee" translate="yes" xml:space="preserve">
          <source>UnicodeTranslateError</source>
          <target state="translated">UnicodeTranslateError</target>
        </trans-unit>
        <trans-unit id="b71d2cc5fd619eca3b73d5c3091b18067741280b" translate="yes" xml:space="preserve">
          <source>UnicodeWarning</source>
          <target state="translated">UnicodeWarning</target>
        </trans-unit>
        <trans-unit id="23e60ae32a7af57bd10051941d5faa9269e1cbba" translate="yes" xml:space="preserve">
          <source>Unified Chinese</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bf340eb1af34013d116721a6b365f7bd850c4d" translate="yes" xml:space="preserve">
          <source>Unified diffs are a compact way of showing just the lines that have changed plus a few lines of context. The changes are shown in an inline style (instead of separate before/after blocks). The number of context lines is set by &lt;em&gt;n&lt;/em&gt; which defaults to three.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23a036b5a5fc3d186211fcee99032ae543b0068" translate="yes" xml:space="preserve">
          <source>Union type; &lt;code&gt;Union[X, Y]&lt;/code&gt; means either X or Y.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb559f7d253f052b5fc0c24eb1006d8b21bb4e2" translate="yes" xml:space="preserve">
          <source>Unions of a single argument vanish, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e074348d912505b595223b5c9df37529adad25df" translate="yes" xml:space="preserve">
          <source>Unions of unions are flattened, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6013fd2beb609fb6c408bc5428b39a0ba92fa33" translate="yes" xml:space="preserve">
          <source>UniqueAddressHeader</source>
          <target state="translated">UniqueAddressHeader</target>
        </trans-unit>
        <trans-unit id="8cadb2b420289f9e588a18d9273812d40cde290f" translate="yes" xml:space="preserve">
          <source>UniqueDateHeader</source>
          <target state="translated">UniqueDateHeader</target>
        </trans-unit>
        <trans-unit id="f6e35626af402641832362022f7bb51f7666a5d5" translate="yes" xml:space="preserve">
          <source>UniqueSingleAddressHeader</source>
          <target state="translated">UniqueSingleAddressHeader</target>
        </trans-unit>
        <trans-unit id="5e5b15a19084f3693eb1aaa731c3bfb0eff4150a" translate="yes" xml:space="preserve">
          <source>UniqueUnstructuredHeader</source>
          <target state="translated">UniqueUnstructuredHeader</target>
        </trans-unit>
        <trans-unit id="3db9bdfab0f022f13a4bb48d254cae9da8cb6639" translate="yes" xml:space="preserve">
          <source>Unit separator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4f2bd7bfcffb7a6d6e83447eac85d3afa07920" translate="yes" xml:space="preserve">
          <source>Unittest API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e675c3dd2d602712e85f0cdbca3a0feb954afda6" translate="yes" xml:space="preserve">
          <source>Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5a7f4e3781a69dbf9bc8bde34477a22943eb3a" translate="yes" xml:space="preserve">
          <source>Unittest supports skipping individual test methods and even whole classes of tests. In addition, it supports marking a test as an &amp;ldquo;expected failure,&amp;rdquo; a test that is broken and will fail, but shouldn&amp;rsquo;t be counted as a failure on a &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="61269b47d1912b3422eba3f73aece2ef97a5b744" translate="yes" xml:space="preserve">
          <source>Unix Platforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e13810f1a14b62c949e081b6a7b9339dcbb5a03" translate="yes" xml:space="preserve">
          <source>Unix Signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6816141193a0e3dc3b48a84b10bea2489b164992" translate="yes" xml:space="preserve">
          <source>Unix Sockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdb0064b2fcd2fcd102a38464d440d9eff8fea9" translate="yes" xml:space="preserve">
          <source>Unix Specific Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847c5fad076a68d49660f9eb9a8817b853479991" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IRUSR&quot;&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c559c0bd7b52c6d5fcd6c4cdfa0164567d71c81" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IWUSR&quot;&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b7a407dbe01720c5581466e65e5d6766b08dcd" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IXUSR&quot;&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082c2a1389c9c2ea8c60ebb7f7c8a999f936e231" translate="yes" xml:space="preserve">
          <source>Unix shell-style path expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e32465c877196c71d88374d755b3b7baedfc11" translate="yes" xml:space="preserve">
          <source>Unix signals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4a3d86de027e8272c31e5a7f66ec8b0b49bbef" translate="yes" xml:space="preserve">
          <source>UnknownHandler Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd89cfc1a4e26f640c99600149f2caa1d397d8a" translate="yes" xml:space="preserve">
          <source>Unless explicitly noted, these functions support &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt;. Behaviour with other types (whether in the numeric tower or not) is currently unsupported. Collections with a mix of types are also undefined and implementation-dependent. If your input data consists of mixed types, you may be able to use &lt;a href=&quot;functions#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; to ensure a consistent result, for example: &lt;code&gt;map(float, input_data)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b245a8781f57e2ee32cd0bd7e365277ad5f0b91" translate="yes" xml:space="preserve">
          <source>Unless intentionally delayed, login is normally performed during the &lt;a href=&quot;#nntplib.NNTP&quot;&gt;&lt;code&gt;NNTP&lt;/code&gt;&lt;/a&gt; object initialization and separately calling this function is unnecessary. To force authentication to be delayed, you must not set &lt;em&gt;user&lt;/em&gt; or &lt;em&gt;password&lt;/em&gt; when creating the object, and must set &lt;em&gt;usenetrc&lt;/em&gt; to False.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7daaf11df16b200f419dc320e67a326ec4d10c2" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, the connection will be open even after an exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7339f074fcb0ea2ac52be61a728102c0e5798d94" translate="yes" xml:space="preserve">
          <source>Unless stated otherwise, all network methods accepting other network/address objects will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the argument&amp;rsquo;s IP version is incompatible to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993ab4594b8b02fc5860d357a6b3b9b2b3ab001e" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;--without-pip&lt;/code&gt; option is given, &lt;a href=&quot;ensurepip#module-ensurepip&quot;&gt;&lt;code&gt;ensurepip&lt;/code&gt;&lt;/a&gt; will be invoked to bootstrap &lt;code&gt;pip&lt;/code&gt; into the virtual environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a782d6fa682b46e8e886c88894b4beb34c1b11" translate="yes" xml:space="preserve">
          <source>Unless the &lt;em&gt;_charset&lt;/em&gt; argument is explicitly set to &lt;code&gt;None&lt;/code&gt;, the MIMEText object created will have both a &lt;em&gt;Content-Type&lt;/em&gt; header with a &lt;code&gt;charset&lt;/code&gt; parameter, and a &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header. This means that a subsequent &lt;code&gt;set_payload&lt;/code&gt; call will not result in an encoded payload, even if a charset is passed in the &lt;code&gt;set_payload&lt;/code&gt; command. You can &amp;ldquo;reset&amp;rdquo; this behavior by deleting the &lt;code&gt;Content-Transfer-Encoding&lt;/code&gt; header, after which a &lt;code&gt;set_payload&lt;/code&gt; call will automatically encode the new payload (and add a new &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41468c42a8b09a43651139d245a1d58ff2225ad6" translate="yes" xml:space="preserve">
          <source>Unless you set the &lt;a href=&quot;#weakref.finalize.atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; attribute to &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, a finalizer will be called when the program exits if it is still alive. For instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac92788612719ddd5c97ea10f0326dfc1c7c844" translate="yes" xml:space="preserve">
          <source>Unless you wish to use &lt;a href=&quot;#smtplib.SMTP.has_extn&quot;&gt;&lt;code&gt;has_extn()&lt;/code&gt;&lt;/a&gt; before sending mail, it should not be necessary to call this method explicitly. It will be implicitly called by &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;sendmail()&lt;/code&gt;&lt;/a&gt; when necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0c258f7bb0ea2dfce26a7399ef9cf54157425d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#asyncio.BoundedSemaphore&quot;&gt;&lt;code&gt;BoundedSemaphore&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; allows making more &lt;code&gt;release()&lt;/code&gt; calls than &lt;code&gt;acquire()&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33618204c6228bb2f08249a4999150db6c1a3c5a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#asyncio.wait_for&quot;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;wait()&lt;/code&gt; does not cancel the futures when a timeout occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e1ebd0e3d2c8e2ee24effe1aafb7d36dfc4f44" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#bytes.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; when a delimiter string &lt;em&gt;sep&lt;/em&gt; is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1293cddc7f4a5a7d63761eedfd744e93178c07" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#str.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; when a delimiter string &lt;em&gt;sep&lt;/em&gt; is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e82dc45fec18fee8381940667b7739fe395eba" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#str.swapcase&quot;&gt;&lt;code&gt;str.swapcase()&lt;/code&gt;&lt;/a&gt;, it is always the case that &lt;code&gt;bin.swapcase().swapcase() == bin&lt;/code&gt; for the binary versions. Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c95a6d7a10d383afd78d9c0e2a9a3a25e57da5e" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#tempfile.TemporaryFile&quot;&gt;&lt;code&gt;TemporaryFile()&lt;/code&gt;&lt;/a&gt;, the user of &lt;a href=&quot;#tempfile.mkstemp&quot;&gt;&lt;code&gt;mkstemp()&lt;/code&gt;&lt;/a&gt; is responsible for deleting the temporary file when done with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d713f1bbd5fe8d9d3ef65d626ba711d216ccc024" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt;&lt;code&gt;asyncore.dispatcher&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asynchat.async_chat&quot;&gt;&lt;code&gt;async_chat&lt;/code&gt;&lt;/a&gt; allows you to define a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c886da08a6499e65a78a1b5c0d1665bb125f558" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;, with &lt;code&gt;SimpleNamespace&lt;/code&gt; you can add and remove attributes. If a &lt;code&gt;SimpleNamespace&lt;/code&gt; object is initialized with keyword arguments, those are directly added to the underlying namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596d48dc2d054d385685290e71d4024b5251eff2" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marshal#module-marshal&quot;&gt;&lt;code&gt;marshal&lt;/code&gt;&lt;/a&gt;, JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to &lt;a href=&quot;#json.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; using the same &lt;em&gt;fp&lt;/em&gt; will result in an invalid JSON file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c3001ddb5896b3f0beaf0cf2b3057b6d86a8ca" translate="yes" xml:space="preserve">
          <source>Unlike GNU &lt;code&gt;getopt()&lt;/code&gt;, after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dec49b182e8d7603947a0985b2ecf4c1b9d6835" translate="yes" xml:space="preserve">
          <source>Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the &lt;a href=&quot;functions#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; mechanism from the class that overrides it. This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f16780c200014deeda946367354cdafa913c303" translate="yes" xml:space="preserve">
          <source>Unlike a dictionary, &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; objects do not raise an error when you try to get or delete a key that isn&amp;rsquo;t in the wrapped header list. Getting a nonexistent header just returns &lt;code&gt;None&lt;/code&gt;, and deleting a nonexistent header does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6f6aee98d471465b243d4e2fd41bf6e3854779" translate="yes" xml:space="preserve">
          <source>Unlike a unix shell, Python does not do any &lt;em&gt;automatic&lt;/em&gt; path expansions. Functions such as &lt;a href=&quot;#os.path.expanduser&quot;&gt;&lt;code&gt;expanduser()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.path.expandvars&quot;&gt;&lt;code&gt;expandvars()&lt;/code&gt;&lt;/a&gt; can be invoked explicitly when an application desires shell-like path expansion. (See also the &lt;a href=&quot;glob#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; module.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bd162bae41d85a4f9b40addad75b0dfc5f8ca4" translate="yes" xml:space="preserve">
          <source>Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed2b66476f9ed547b34b80c9bc1ba9db01e1b4b" translate="yes" xml:space="preserve">
          <source>Unlike normal generators, async generators cannot return a value, so there is no &lt;code&gt;ReturnType&lt;/code&gt; type parameter. As with &lt;a href=&quot;#typing.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;SendType&lt;/code&gt; behaves contravariantly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e5049358a9b6f903a818d8a1d172b104aa9a7e" translate="yes" xml:space="preserve">
          <source>Unlike other asyncio functions this function requires the &lt;em&gt;loop&lt;/em&gt; argument to be passed explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daabe887cf8afd0ee7dd85b067f7ffc7a6ff2139" translate="yes" xml:space="preserve">
          <source>Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an &lt;a href=&quot;#decimal.InvalidOperation&quot;&gt;&lt;code&gt;InvalidOperation&lt;/code&gt;&lt;/a&gt; is signaled. This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8eddae08f6656a48c18c114d2d80555ac88cc50" translate="yes" xml:space="preserve">
          <source>Unlike other representations of messages, file-like representations are not necessarily independent of the &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instance that created them or of the underlying mailbox. More specific documentation is provided by each subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1729cdad2c6448823f2a52f8dea629abf34cbd9d" translate="yes" xml:space="preserve">
          <source>Unlike pickle, deserializing untrusted JSON does not in itself create an arbitrary code execution vulnerability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c027bbb86d577787589ae4a2296400dfbc620f5d" translate="yes" xml:space="preserve">
          <source>Unlike some other popen functions, this implementation will never implicitly call a system shell. This means that all characters, including shell metacharacters, can safely be passed to child processes. If the shell is invoked explicitly, via &lt;code&gt;shell=True&lt;/code&gt;, it is the application&amp;rsquo;s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;shell injection&lt;/a&gt; vulnerabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326e5cb29ac1685ac6b6540756008303df0cd9e9" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; function, it does not make sense for the &lt;a href=&quot;#module-bisect&quot;&gt;&lt;code&gt;bisect()&lt;/code&gt;&lt;/a&gt; functions to have &lt;em&gt;key&lt;/em&gt; or &lt;em&gt;reversed&lt;/em&gt; arguments because that would lead to an inefficient design (successive calls to bisect functions would not &amp;ldquo;remember&amp;rdquo; all of the previous key lookups).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3793d0204514f0cecb268eaedd5865f0bf82163f" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module does not support leap seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e58a4913f53cdae8b1ea35f09013530b7aa1c4" translate="yes" xml:space="preserve">
          <source>Unlike the C function of the same name, &lt;a href=&quot;#time.asctime&quot;&gt;&lt;code&gt;asctime()&lt;/code&gt;&lt;/a&gt; does not add a trailing newline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f224bbef952cee89d776f9978fc11e4d77aacd93" translate="yes" xml:space="preserve">
          <source>Unlike the built-in &lt;code&gt;**&lt;/code&gt; operator, &lt;a href=&quot;#math.pow&quot;&gt;&lt;code&gt;math.pow()&lt;/code&gt;&lt;/a&gt; converts both its arguments to type &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;**&lt;/code&gt; or the built-in &lt;a href=&quot;functions#pow&quot;&gt;&lt;code&gt;pow()&lt;/code&gt;&lt;/a&gt; function for computing exact integer powers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e1fdb4abd6dd67c502fc5584b98310de24db38" translate="yes" xml:space="preserve">
          <source>Unlike the other methods, callbacks added this way cannot suppress exceptions (as they are never passed the exception details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200b8c21994a17a42d1321647abef543d47f7741" translate="yes" xml:space="preserve">
          <source>Unlike the standard library threading &lt;a href=&quot;queue#module-queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt;, the size of the queue is always known and can be returned by calling the &lt;a href=&quot;#asyncio.Queue.qsize&quot;&gt;&lt;code&gt;qsize()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e8b687ce1472cf64f559941f128998de28a367" translate="yes" xml:space="preserve">
          <source>Unlike with dictionaries, keyword arguments are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b295b1626651c0f81546df6b37a5a08b3d17b159" translate="yes" xml:space="preserve">
          <source>Unlinks all of the specified &lt;em&gt;items&lt;/em&gt; from the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228d085fb175c515aa2497f02a042daa9633e64b" translate="yes" xml:space="preserve">
          <source>Unlocks the specified bytes, which must have been previously locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048eced2fb1660f6cbfc326ec3236a428f12a1cc" translate="yes" xml:space="preserve">
          <source>Unmatched square brackets in the &lt;code&gt;netloc&lt;/code&gt; attribute will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b43c42ceb925094a8a1fcebdac4099acaace32" translate="yes" xml:space="preserve">
          <source>Unofficial XML-RPC Errata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e180d436cafe3018c8820226a888ae5caa7011f1" translate="yes" xml:space="preserve">
          <source>Unpack an archive. &lt;em&gt;filename&lt;/em&gt; is the full path of the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d093e02eacf25883f9dd3d7f93c744854d7c18ee" translate="yes" xml:space="preserve">
          <source>Unpack from &lt;em&gt;buffer&lt;/em&gt; starting at position &lt;em&gt;offset&lt;/em&gt;, according to the format string &lt;em&gt;format&lt;/em&gt;. The result is a tuple even if it contains exactly one item. The buffer&amp;rsquo;s size in bytes, starting at position &lt;em&gt;offset&lt;/em&gt;, must be at least the size required by the format, as reflected by &lt;a href=&quot;#struct.calcsize&quot;&gt;&lt;code&gt;calcsize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa5bd12750940524bd0d1cfbac26ffee31f5657" translate="yes" xml:space="preserve">
          <source>Unpack from the buffer &lt;em&gt;buffer&lt;/em&gt; (presumably packed by &lt;code&gt;pack(format, ...)&lt;/code&gt;) according to the format string &lt;em&gt;format&lt;/em&gt;. The result is a tuple even if it contains exactly one item. The buffer&amp;rsquo;s size in bytes must match the size required by the format, as reflected by &lt;a href=&quot;#struct.calcsize&quot;&gt;&lt;code&gt;calcsize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2adde7706bee77bb5b34b7f4130eb67fec002267" translate="yes" xml:space="preserve">
          <source>Unpacked fields can be named by assigning them to variables or by wrapping the result in a named tuple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d79ef8abbb1d3bae278d963c12afbc654d35da6" translate="yes" xml:space="preserve">
          <source>Unpacker Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0861b7332a50e0249c0fdf3780673bf2dce97c44" translate="yes" xml:space="preserve">
          <source>Unpacks TOS into &lt;em&gt;count&lt;/em&gt; individual values, which are put onto the stack right-to-left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02e0fc33103f5359830c43333262a8e84c26205" translate="yes" xml:space="preserve">
          <source>Unpacks a double-precision floating point number, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_float&quot;&gt;&lt;code&gt;unpack_float()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df6c980c62c8f14de2fd87d0d289322eb884d40" translate="yes" xml:space="preserve">
          <source>Unpacks a single-precision floating point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b95c1bc4e94907b6abeef024e6d5b6bf5bb8a71" translate="yes" xml:space="preserve">
          <source>Unpacks and returns (as a list) a fixed length array of homogeneous items. &lt;em&gt;n&lt;/em&gt; is number of list elements to expect in the buffer. As above, &lt;em&gt;unpack_item&lt;/em&gt; is the function used to unpack each element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c5b548d5976f90964462cd30f8809920479b37" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a fixed length opaque data stream, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt;&lt;code&gt;unpack_fstring()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df57ac4a973e9ba3f6bd5eaedcc74a144ce664b" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a fixed length string. &lt;em&gt;n&lt;/em&gt; is the number of characters expected. Padding with null bytes to guaranteed 4 byte alignment is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c5115d1baf6a3ec3a1fff4ab85bc77008c5914" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a list of homogeneous items. The list is unpacked one element at a time by first unpacking an unsigned integer flag. If the flag is &lt;code&gt;1&lt;/code&gt;, then the item is unpacked and appended to the list. A flag of &lt;code&gt;0&lt;/code&gt; indicates the end of the list. &lt;em&gt;unpack_item&lt;/em&gt; is the function that is called to unpack the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc4a7d8ee8262fa9d412c53ecbce94d54254aba" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length &lt;em&gt;list&lt;/em&gt; of homogeneous items. First, the length of the list is unpacked as an unsigned integer, then each element is unpacked as in &lt;a href=&quot;#xdrlib.Unpacker.unpack_farray&quot;&gt;&lt;code&gt;unpack_farray()&lt;/code&gt;&lt;/a&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7799cee99003d765f6427b7c1ace2dfb316c858" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length byte stream, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt;&lt;code&gt;unpack_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34766fddbfbc6bc1488290d0daec6b714af30a9b" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length opaque data string, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt;&lt;code&gt;unpack_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0b788676d3b41a1c5127c92dde79d487ede145" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length string. The length of the string is first unpacked as an unsigned integer, then the string data is unpacked with &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt;&lt;code&gt;unpack_fstring()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ee08b55fbca7f6d37e79386552db63d6525e57" translate="yes" xml:space="preserve">
          <source>Unregister a file object from selection, removing it from monitoring. A file object shall be unregistered prior to being closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84737bad5fde4cf5467cba5b10bfa3fac33dbc22" translate="yes" xml:space="preserve">
          <source>Unregister a user signal: uninstall the handler of the &lt;em&gt;signum&lt;/em&gt; signal installed by &lt;a href=&quot;#faulthandler.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;. Return &lt;code&gt;True&lt;/code&gt; if the signal was registered, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eeb11afbb54691f5e0783b93bd21e3897e4d244" translate="yes" xml:space="preserve">
          <source>Unregister an unpack format. &lt;em&gt;name&lt;/em&gt; is the name of the format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b92c7cba3823febabcbe4aaa8633bbc550444a" translate="yes" xml:space="preserve">
          <source>Unregisters a file handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe99f3a697d86fd74d01d0ec29562a573d784a93" translate="yes" xml:space="preserve">
          <source>Unset (delete) the environment variable named &lt;em&gt;key&lt;/em&gt;. Such changes to the environment affect subprocesses started with &lt;a href=&quot;#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.popen&quot;&gt;&lt;code&gt;popen()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f11e903da2827da2ff494dc45518a52073a6deb" translate="yes" xml:space="preserve">
          <source>Unset the flag(s) specified by &lt;em&gt;flag&lt;/em&gt; without changing other flags. To remove more than one flag at a time, &lt;em&gt;flag&lt;/em&gt; maybe a string of more than one character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9423b5564c4d3ab497eed5796bde589630c032b" translate="yes" xml:space="preserve">
          <source>Unset the flag(s) specified by &lt;em&gt;flag&lt;/em&gt; without changing other flags. To remove more than one flag at a time, &lt;em&gt;flag&lt;/em&gt; maybe a string of more than one character. If &amp;ldquo;info&amp;rdquo; contains experimental information rather than flags, the current &amp;ldquo;info&amp;rdquo; is not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5ce3b0587e5dfc574c05a997b77253d37b5a96" translate="yes" xml:space="preserve">
          <source>Unsigned, 16-bit big-endian audio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf888094dce0dff5dc88fdc3a8fdf414a7518f5" translate="yes" xml:space="preserve">
          <source>Unsigned, 16-bit little-endian audio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6c3f57facb20b402f0b1be0b10f27489e6c0cc" translate="yes" xml:space="preserve">
          <source>Unsigned, 8-bit audio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eebb997e8491e1bc2700306d597290b18c9bdb9" translate="yes" xml:space="preserve">
          <source>Unsubscribe from old mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c4c55a3d374ba63645f299181454728fde4b94" translate="yes" xml:space="preserve">
          <source>Untabify Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6124f32fdf4ba4b9425841e4026583849d20ed0f" translate="yes" xml:space="preserve">
          <source>Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0b27ec87edd9e5b151e783684c3250b5138da3" translate="yes" xml:space="preserve">
          <source>Up to the prompt, the output from the above is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c35290c06ff39f7f8240e3f8c98ffb7469e01ce" translate="yes" xml:space="preserve">
          <source>Up-arrow</source>
          <target state="translated">Up-arrow</target>
        </trans-unit>
        <trans-unit id="0a4cd8f9b0c49335833b73322f5129a273d0a57f" translate="yes" xml:space="preserve">
          <source>Update &lt;code id=&quot;index-3&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-4&quot;&gt;COLS&lt;/code&gt;. Useful for detecting manual screen resize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc3833644a8b3574bfb4234d0fb0ff4bb3d0c1b" translate="yes" xml:space="preserve">
          <source>Update &lt;em&gt;environ&lt;/em&gt; with trivial defaults for testing purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d43ded4f21a448758ca9de774778892a8573fef" translate="yes" xml:space="preserve">
          <source>Update a &lt;em&gt;wrapper&lt;/em&gt; function to look like the &lt;em&gt;wrapped&lt;/em&gt; function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants &lt;code&gt;WRAPPER_ASSIGNMENTS&lt;/code&gt; (which assigns to the wrapper function&amp;rsquo;s &lt;code&gt;__module__&lt;/code&gt;, &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__qualname__&lt;/code&gt;, &lt;code&gt;__annotations__&lt;/code&gt; and &lt;code&gt;__doc__&lt;/code&gt;, the documentation string) and &lt;code&gt;WRAPPER_UPDATES&lt;/code&gt; (which updates the wrapper function&amp;rsquo;s &lt;code&gt;__dict__&lt;/code&gt;, i.e. the instance dictionary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8eaa3caae0035d8d2b93d9ea5157036f5e890f4" translate="yes" xml:space="preserve">
          <source>Update and return a dictionary representing the current local symbol table. Free variables are returned by &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; when it is called in function blocks, but not in class blocks. Note that at the module level, &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; are the same dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e881f9b576f8d197b4c916699604917c6bea3ff" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;is_authenticated&lt;/code&gt; flag for the given &lt;em&gt;uri&lt;/em&gt; or list of URIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676722049af84191150c39b99ccf011847f430a6" translate="yes" xml:space="preserve">
          <source>Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f52facdafd3c7b416be3ca2987e689c01a20aeb" translate="yes" xml:space="preserve">
          <source>Update the dictionary with the key/value pairs from &lt;em&gt;other&lt;/em&gt;, overwriting existing keys. Return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844dd4fa8e5519fd020d3adb913a31ce577cec8e" translate="yes" xml:space="preserve">
          <source>Update the display immediately (sync actual screen with previous drawing/deleting methods).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72f3ad02a5bd1086e31aa55dc65f7726c021bb9" translate="yes" xml:space="preserve">
          <source>Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c77d232184003c8e5ef8dfe4a062a6ffc29da4" translate="yes" xml:space="preserve">
          <source>Update the hmac object with &lt;em&gt;msg&lt;/em&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a + b)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fcb28da96252d3143add7d524b059fc11f4dbf" translate="yes" xml:space="preserve">
          <source>Update the physical screen. The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state. The &lt;a href=&quot;#curses.doupdate&quot;&gt;&lt;code&gt;doupdate()&lt;/code&gt;&lt;/a&gt; ground updates the physical screen to match the virtual screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916502e64e45e8917403b3f7e2e4cb9240ec037b" translate="yes" xml:space="preserve">
          <source>Update the set, adding elements from all others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6527f15e4975da015ccaa43d3d4bfa51b09597" translate="yes" xml:space="preserve">
          <source>Update the set, keeping only elements found in either set, but not in both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efb006f7c16e37178e13286e3116f97a446042c" translate="yes" xml:space="preserve">
          <source>Update the set, keeping only elements found in it and all others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f938e1032dfc279fd2d4c9bbde2ed0d316e18d" translate="yes" xml:space="preserve">
          <source>Update the set, removing elements found in others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6ad5a4c112a979bb39e0daf27f6f78eab18230" translate="yes" xml:space="preserve">
          <source>Update the values in the Morsel dictionary with the values in the dictionary &lt;em&gt;values&lt;/em&gt;. Raise an error if any of the keys in the &lt;em&gt;values&lt;/em&gt; dict is not a valid &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403f8c83e34150e4e050e7802c9ae3b5c02baa0b" translate="yes" xml:space="preserve">
          <source>Updates the virtual screen after changes in the panel stack. This does not call &lt;a href=&quot;curses#curses.doupdate&quot;&gt;&lt;code&gt;curses.doupdate()&lt;/code&gt;&lt;/a&gt;, so you&amp;rsquo;ll have to do this yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbbdb84597aa8a194e7826194c031e681da3e5b" translate="yes" xml:space="preserve">
          <source>Updating Code For New Versions of Dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfc0fe1e7552b2208957be5568c4b831410776d" translate="yes" xml:space="preserve">
          <source>Upgrade an existing connection to TLS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c033cfa69d72d0506f0739c3dd946dac4f60d820" translate="yes" xml:space="preserve">
          <source>Upgrade an existing transport-based connection to TLS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c2d8026e88b79d364deb29293028e59014ecd4" translate="yes" xml:space="preserve">
          <source>Upgrading optparse code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6885989b161691127084226c65d60813ef15d1e3" translate="yes" xml:space="preserve">
          <source>Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt;; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt;. Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceeef23b43f204cd4fc87f8a0c602258f435ad5b" translate="yes" xml:space="preserve">
          <source>Upon unpickling, if the class defines &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt;, it is called with the unpickled state. In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance&amp;rsquo;s dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442c0ca432bba7bb5e9fddb35000be1fc0080e00" translate="yes" xml:space="preserve">
          <source>Upper left of keypad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26be040f98d4f92519d4f55adbafdaf27d0bf91c" translate="yes" xml:space="preserve">
          <source>Upper right of keypad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6984e58af99ef5098428fe251573a59542bd1a" translate="yes" xml:space="preserve">
          <source>Upper-left corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f899c21125a124680149002a215b010390a14035" translate="yes" xml:space="preserve">
          <source>Upper-right corner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412e31909b8ad1417c4a39495653fdeba58cd034" translate="yes" xml:space="preserve">
          <source>Urdu</source>
          <target state="translated">Urdu</target>
        </trans-unit>
        <trans-unit id="6c0f6c90b039eb2f8ccf225a7eea7326a1231177" translate="yes" xml:space="preserve">
          <source>Urgent data for read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="c54d06d3411c536072cc47249dd128a605cc382d" translate="yes" xml:space="preserve">
          <source>Usage as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e06c218123ecda4e08d6b8f0a242dd0c07ffde1" translate="yes" xml:space="preserve">
          <source>Usage example: &lt;code&gt;fi =
fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;,
&quot;surrogateescape&quot;))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a84570fc52dfd991c6774587f13dbfa3c6b304" translate="yes" xml:space="preserve">
          <source>Usage example: &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_compressed)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30417f716d6267476ad9fad028a2fc6e463880c9" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;KabulTz&lt;/code&gt; from above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2184f1d367ba383d26c0e300960fadb0d8272b" translate="yes" xml:space="preserve">
          <source>Usage of the DOM interface in Python is straight-forward. The following mapping rules apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="4b1f7ccf5dd79f8ee16571bf32c1e6c4007733ce" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#asyncio.WriteTransport.get_write_buffer_limits&quot;&gt;&lt;code&gt;get_write_buffer_limits()&lt;/code&gt;&lt;/a&gt; to get the limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bcdd77ca18769c76d2f648e31dbca518354ce9b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#asyncio.WriteTransport.set_write_buffer_limits&quot;&gt;&lt;code&gt;set_write_buffer_limits()&lt;/code&gt;&lt;/a&gt; to set the limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff19ffa16005ed393bb50a2fc301ae7c8434921" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;communicate()&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;#subprocess.Popen.stdin&quot;&gt;&lt;code&gt;.stdin.write&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#subprocess.Popen.stdout&quot;&gt;&lt;code&gt;.stdout.read&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#subprocess.Popen.stderr&quot;&gt;&lt;code&gt;.stderr.read&lt;/code&gt;&lt;/a&gt; to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd81adbbc79cd205fc1bc2737ce1e2085e7810fe" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#tokenize.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to open Python source files: it uses &lt;a href=&quot;#tokenize.detect_encoding&quot;&gt;&lt;code&gt;detect_encoding()&lt;/code&gt;&lt;/a&gt; to detect the file encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b266fadd2e7245f37c616a8922563663fb3b4d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; to reload the snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5773877b49b43db6bf7c94187009bb8144711130" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; as the value if you want &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; to create mocks for you. In this case the created mocks are passed into a decorated function by keyword, and a dictionary is returned when &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; is used as a context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801ec70715ed39b5c5c242a01eb2e137022a3645" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; to indicate that a value could be any type in a typesafe manner. Use &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; to indicate that a value is dynamically typed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d55b6e9ca90a032f6af3085cee74e97a5a82792" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.cmp_to_key&quot;&gt;&lt;code&gt;functools.cmp_to_key()&lt;/code&gt;&lt;/a&gt; to convert an old-style &lt;em&gt;cmp&lt;/em&gt; function to a &lt;em&gt;key&lt;/em&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae804c4e2566a021e2b7df1cb5f86d33af4f596" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;to pass keyword arguments&lt;/a&gt; to &lt;em&gt;callback&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faa606e98b27a2cbd434b59751dcf554bb80399" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;to pass keyword arguments&lt;/a&gt; to &lt;em&gt;func&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa6b6a91146066a6ab2e2391258412526412a60" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;importlib#importlib.util.module_from_spec&quot;&gt;&lt;code&gt;importlib.util.module_from_spec()&lt;/code&gt;&lt;/a&gt; to create a new module if you wish to set the various import-controlled attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92571159e076392f54e9a058f2068114f55f5d84" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;pickletools#pickletools.optimize&quot;&gt;&lt;code&gt;pickletools.optimize()&lt;/code&gt;&lt;/a&gt; if you need more compact pickles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977759ccf7fc3d35b1728ab61d457345039786ef" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;threading#threading.get_ident&quot;&gt;&lt;code&gt;threading.get_ident()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;threading#threading.Thread.ident&quot;&gt;&lt;code&gt;ident&lt;/code&gt;&lt;/a&gt; attribute of &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt; objects to get a suitable value for &lt;em&gt;thread_id&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f310326200524afa7764d68027ab6eeaeafc777" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Text&lt;/code&gt; to indicate that a value must contain a unicode string in a manner that is compatible with both Python 2 and Python 3:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea35a235eec9b227adb5fcb0a0c00435b41bfcb" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;N&lt;/em&gt; workers to compile the files within the given directory. If &lt;code&gt;0&lt;/code&gt; is used, then the result of &lt;a href=&quot;os#os.cpu_count&quot;&gt;&lt;code&gt;os.cpu_count()&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495d495d7facfbe6f23a76a082fc3a5f0950c5d6" translate="yes" xml:space="preserve">
          <source>Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ed25f85936d5ec93f7f6baaff0782bf76ef725" translate="yes" xml:space="preserve">
          <source>Use and behaviors of the &lt;em&gt;timeout&lt;/em&gt; argument are the same as in &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt;&lt;code&gt;Lock.acquire()&lt;/code&gt;&lt;/a&gt;. Note that some of these behaviors of &lt;em&gt;timeout&lt;/em&gt; differ from the implemented behaviors in &lt;a href=&quot;threading#threading.RLock.acquire&quot;&gt;&lt;code&gt;threading.RLock.acquire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f6b7836c3c9781322ac632c3472944cbf5882e" translate="yes" xml:space="preserve">
          <source>Use of Basic HTTP Authentication:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b1cfba601081732eb4d25b9f84434e8e55c28d" translate="yes" xml:space="preserve">
          <source>Use of a configuration file where logging configuration is just part of the overall application configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7aa6e5161d91c7285f5b1ed3868d5a6211a2320" translate="yes" xml:space="preserve">
          <source>Use of a configuration read from a file, and then modified by the using application (e.g. based on command-line parameters or other aspects of the runtime environment) before being passed to &lt;code&gt;fileConfig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28af66b770f56fa6175a1ed4bd8aca50a0212688" translate="yes" xml:space="preserve">
          <source>Use of the &lt;em&gt;requote&lt;/em&gt; parameter with &lt;a href=&quot;#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8807a8f268cd5a3fec930a6e701e4eec1a5a268" translate="yes" xml:space="preserve">
          <source>Use of the functions above is more portable than use of the first set of flags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee11de24afff11a85727ddbffb864bb44227fcd" translate="yes" xml:space="preserve">
          <source>Use of this function may introduce a security hole in your program. By the time you get around to doing anything with the file name it returns, someone else may have beaten you to the punch. &lt;a href=&quot;#tempfile.mktemp&quot;&gt;&lt;code&gt;mktemp()&lt;/code&gt;&lt;/a&gt; usage can be replaced easily with &lt;a href=&quot;#tempfile.NamedTemporaryFile&quot;&gt;&lt;code&gt;NamedTemporaryFile()&lt;/code&gt;&lt;/a&gt;, passing it the &lt;code&gt;delete=False&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f802f95d5b72b7e3d461f9294f782b8fe070b88f" translate="yes" xml:space="preserve">
          <source>Use of this setting requires a valid set of CA certificates to be passed, either to &lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt;&lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt;&lt;/a&gt; or as a value of the &lt;code&gt;ca_certs&lt;/code&gt; parameter to &lt;a href=&quot;#ssl.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086661bc0d18c4e4d7976acf67e710dca98ca570" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.communicate&quot;&gt;&lt;code&gt;communicate()&lt;/code&gt;&lt;/a&gt; method rather than &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdin&quot;&gt;&lt;code&gt;process.stdin.write()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdout&quot;&gt;&lt;code&gt;await process.stdout.read()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stderr&quot;&gt;&lt;code&gt;await process.stderr.read&lt;/code&gt;&lt;/a&gt;. This avoids deadlocks due to streams pausing reading or writing and blocking the child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cd98149cc9f937cb92cf3ef933c1d25a1d0470" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#typing.NewType&quot;&gt;&lt;code&gt;NewType()&lt;/code&gt;&lt;/a&gt; helper function to create distinct types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0f4760d676107d72f2532d197197a7035768be" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function (with the &lt;code&gt;doseq&lt;/code&gt; parameter set to &lt;code&gt;True&lt;/code&gt;) to convert such dictionaries into query strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77864b913c6ed2d3f7946296e1c4dd7eaea83b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function to convert such lists of pairs into query strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe5f8c7c68a5eb4c363855f9e618e8fc09e455f" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;headers&lt;/em&gt; argument to the &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; constructor, or:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397b1bdc25c901492de8340e267b2d32924dd46a" translate="yes" xml:space="preserve">
          <source>Use the config() method to update multiple attrs subsequent to object creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269f723392451288e2d733a8ac1b951a0f732cfc" translate="yes" xml:space="preserve">
          <source>Use the following functions to convert between time representations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0e3f6f824fb870d980396594c6ee74a24533bb" translate="yes" xml:space="preserve">
          <source>Use the high median when your data are discrete and you prefer the median to be an actual data point rather than interpolated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc76d8aaa9d87f83107351e712614efa5b9a4366" translate="yes" xml:space="preserve">
          <source>Use the high-level &lt;a href=&quot;#asyncio.create_task&quot;&gt;&lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/a&gt; function to create Tasks, or the low-level &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt;&lt;code&gt;loop.create_task()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-future#asyncio.ensure_future&quot;&gt;&lt;code&gt;ensure_future()&lt;/code&gt;&lt;/a&gt; functions. Manual instantiation of Tasks is discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac8913b6579e52d49bb894464f33a8f70139a5e9" translate="yes" xml:space="preserve">
          <source>Use the low median when your data are discrete and you prefer the median to be an actual data point rather than interpolated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fc6d08600772eccde5630b8b2095c84488dee1" translate="yes" xml:space="preserve">
          <source>Use the more secure APOP authentication to log into the POP3 server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2845b8ec29e4c6963ceba130325e617d9cc8d5" translate="yes" xml:space="preserve">
          <source>Use the real uid/gid to test for access to &lt;em&gt;path&lt;/em&gt;. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to &lt;em&gt;path&lt;/em&gt;. &lt;em&gt;mode&lt;/em&gt; should be &lt;a href=&quot;#os.F_OK&quot;&gt;&lt;code&gt;F_OK&lt;/code&gt;&lt;/a&gt; to test the existence of &lt;em&gt;path&lt;/em&gt;, or it can be the inclusive OR of one or more of &lt;a href=&quot;#os.R_OK&quot;&gt;&lt;code&gt;R_OK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.W_OK&quot;&gt;&lt;code&gt;W_OK&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.X_OK&quot;&gt;&lt;code&gt;X_OK&lt;/code&gt;&lt;/a&gt; to test permissions. Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if access is allowed, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if not. See the Unix man page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/access(2)&quot;&gt;access(2)&lt;/a&gt;&lt;/em&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d360059b352a3db9e680b1043a8ec5f3406a4a" translate="yes" xml:space="preserve">
          <source>Use the server&amp;rsquo;s cipher ordering preference, rather than the client&amp;rsquo;s. This option has no effect on client sockets and SSLv2 server sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de5b3b768e02c520630dfc4e4662871b8e86cb2" translate="yes" xml:space="preserve">
          <source>Use the specified date/time format, as accepted by &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2201f34bb8cca334db23ea9d46313e59f85d0d4" translate="yes" xml:space="preserve">
          <source>Use the specified format string for the handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213c03b10565262fbdcced639b5887e0adcb2562" translate="yes" xml:space="preserve">
          <source>Use the specified stream to initialize the StreamHandler. Note that this argument is incompatible with &lt;em&gt;filename&lt;/em&gt; - if both are present, a &lt;code&gt;ValueError&lt;/code&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fd056e5e1d4febf6b91464a41740d353dee2ec" translate="yes" xml:space="preserve">
          <source>Use this at the end of &lt;code&gt;test_main&lt;/code&gt; whenever sub-processes are started. This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286f91c9a880de7bf2bb606d7ce509a86af31f09" translate="yes" xml:space="preserve">
          <source>Use this check to guard CPython&amp;rsquo;s implementation-specific tests or to run them only on the implementations guarded by the arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce127e7831cfc938739483bdfbe497d108a0f467" translate="yes" xml:space="preserve">
          <source>Use this function to calculate the variance from the entire population. To estimate the variance from a sample, the &lt;a href=&quot;#statistics.variance&quot;&gt;&lt;code&gt;variance()&lt;/code&gt;&lt;/a&gt; function is usually a better choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113c4cd7a277e177b4ab8b221b14cfbf88cf5706" translate="yes" xml:space="preserve">
          <source>Use this function when your data is a sample from a population. To calculate the variance from the entire population, see &lt;a href=&quot;#statistics.pvariance&quot;&gt;&lt;code&gt;pvariance()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1722f7fbf19d23d96b7db6a746432471393e9f3d" translate="yes" xml:space="preserve">
          <source>Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as &amp;ldquo;virtual subclasses&amp;rdquo; &amp;ndash; these and their descendants will be considered subclasses of the registering ABC by the built-in &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; function, but the registering ABC won&amp;rsquo;t show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via &lt;a href=&quot;functions#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;). &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdab79877c9aff2232b3c33a22d6693c69abec8" translate="yes" xml:space="preserve">
          <source>Used as the return value of the callback function in &lt;a href=&quot;#ssl.SSLContext.set_servername_callback&quot;&gt;&lt;code&gt;SSLContext.set_servername_callback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82127a2c2d7d75bf1de72d48006249872b07dda" translate="yes" xml:space="preserve">
          <source>Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e979fe09b6bd0f001f9f5432c729b3ccb465bc9" translate="yes" xml:space="preserve">
          <source>Used by queue consumers. For each &lt;a href=&quot;#asyncio.Queue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; used to fetch a task, a subsequent call to &lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; tells the queue that the processing on the task is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8582ae1f2665fbf84f38cb456084728c223988" translate="yes" xml:space="preserve">
          <source>Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for &lt;em&gt;tenths&lt;/em&gt; tenths of seconds, raise an exception if nothing has been typed. The value of &lt;em&gt;tenths&lt;/em&gt; must be a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;. Use &lt;a href=&quot;#curses.nocbreak&quot;&gt;&lt;code&gt;nocbreak()&lt;/code&gt;&lt;/a&gt; to leave half-delay mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06f022628c2d1b93ae2cc8948d4d0af4d5ae00a" translate="yes" xml:space="preserve">
          <source>Used for implementing formatted literal strings (f-strings). Pops an optional &lt;em&gt;fmt_spec&lt;/em&gt; from the stack, then a required &lt;em&gt;value&lt;/em&gt;. &lt;em&gt;flags&lt;/em&gt; is interpreted as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc54f6a9aa92d7a088351515d65a7c819a35b89" translate="yes" xml:space="preserve">
          <source>Used internally for PIL-style arrays. The value is informational only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6491331167a81c53e5c33555dd1c8389a48d8445" translate="yes" xml:space="preserve">
          <source>Used to communicate with horizontal scrollbars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64f9f83dce5dde840388bdaecc8458dccd14e03" translate="yes" xml:space="preserve">
          <source>Used to communicate with vertical scrollbars. For some more information, see above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4ad9ddaa5df0e2aafe056836983124424bd313" translate="yes" xml:space="preserve">
          <source>Used to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a1d8f2678510dd75c3aa4dbdec84d9816a43ed" translate="yes" xml:space="preserve">
          <source>Used to compute initial rollover time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a327ec030bd193b20ca54e75819675f7371b1c" translate="yes" xml:space="preserve">
          <source>Used to indicate a set of characters. In a set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e9f07f7d6a756d8e0d078a5e0fe1a3f6b1b536" translate="yes" xml:space="preserve">
          <source>Useful constants representing internal nodes of the parse tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87be7f67261e2f0fefc8a90dca21ae95816dbf29" translate="yes" xml:space="preserve">
          <source>Useful constants representing leaf nodes of the parse tree and functions for testing node values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba015f21c7d53068a8d1713a783f9a4aa518b47d" translate="yes" xml:space="preserve">
          <source>Useful example of &lt;a href=&quot;#module-atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; to read and write &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; history files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819cd88d697fb04114357734d0a4953e1648cc70" translate="yes" xml:space="preserve">
          <source>Useful handlers included with the logging module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffb7bde8fb1030560f8c81be752d28554cebade" translate="yes" xml:space="preserve">
          <source>User ID of the user who originally stored this member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30e1fe7c0b6acd8745b10a765a7f4fb5c5ee0d0" translate="yes" xml:space="preserve">
          <source>User code can define additional warning categories by subclassing one of the standard warning categories. A warning category must always be a subclass of the &lt;a href=&quot;exceptions#Warning&quot;&gt;&lt;code&gt;Warning&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd76a6ef01344dc63fffbe020875acc447df8daf" translate="yes" xml:space="preserve">
          <source>User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition &amp;ldquo;just like&amp;rdquo; the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f14b6f0b236ede7621ba0fdd6909e518df52703" translate="yes" xml:space="preserve">
          <source>User code does not normally need to call &lt;code&gt;auth&lt;/code&gt; directly, but can instead call the &lt;a href=&quot;#smtplib.SMTP.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; method, which will try each of the above mechanisms in turn, in the order listed. &lt;code&gt;auth&lt;/code&gt; is exposed to facilitate the implementation of authentication methods not (or not yet) supported directly by &lt;a href=&quot;#module-smtplib&quot;&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a81fa60a53fd3f70212f8a883a1173635ab4b0" translate="yes" xml:space="preserve">
          <source>User command interpreter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5adf91ece726624b104dd2485c2a839a6328d16" translate="yes" xml:space="preserve">
          <source>User defined flags for file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837ac2f806f11ca580d1c3781163b0e72e002397" translate="yes" xml:space="preserve">
          <source>User defined generic type aliases are also supported. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74dd2344f56ad9942272568c160da474cef5e98" translate="yes" xml:space="preserve">
          <source>User defined value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae4b56a599d30541843d6111db279c8f6e56e71" translate="yes" xml:space="preserve">
          <source>User home directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050950cdf0452013f4526d6003822fc72d925c74" translate="yes" xml:space="preserve">
          <source>User id of the owner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f63eb061937021f51dba01e97a48c55059e9c6" translate="yes" xml:space="preserve">
          <source>User identifier of the file owner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542fc71480dec743e60c20434ec6dd5838fc4b52" translate="yes" xml:space="preserve">
          <source>User name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3704b9f36dfd77d888c25db447d4825601916a" translate="yes" xml:space="preserve">
          <source>User name or comment field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ef42a45644103797c878bfd194ec705ff80ac2" translate="yes" xml:space="preserve">
          <source>User name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c40247837db435c6ac2d3e4807fdb9eaa3fcfec" translate="yes" xml:space="preserve">
          <source>User output in Shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa0023bf437bb34f21239d1a3a528a2484c4b30" translate="yes" xml:space="preserve">
          <source>User-defined generic types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096a2210b655aeab11edc5d2a988883921409748" translate="yes" xml:space="preserve">
          <source>User-defined objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d237d99366c12cd2bbf976603224da547f3ec351" translate="yes" xml:space="preserve">
          <source>UserDict objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43496013c3e57310ccf58d32810be25b59dbdc0f" translate="yes" xml:space="preserve">
          <source>UserList objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbfc8c4e254851301cd44b01a7f822ceaae5ea4" translate="yes" xml:space="preserve">
          <source>UserString objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c41484c828a997d0c616496cb5a9ba5f11a17d" translate="yes" xml:space="preserve">
          <source>UserWarning</source>
          <target state="translated">UserWarning</target>
        </trans-unit>
        <trans-unit id="a53964d7702a603f5cc33f3432206f51279cc2ec" translate="yes" xml:space="preserve">
          <source>Users are expected to subclass &lt;a href=&quot;#xml.sax.handler.ContentHandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; to support their application. The following methods are called by the parser on the appropriate events in the input document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a5cf6473d9786c93e12f2179a5a34390bce117" translate="yes" xml:space="preserve">
          <source>Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ee2b4b00c59db46e2110ba3dfbbe7fc0fb5b55" translate="yes" xml:space="preserve">
          <source>Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1796fd07c3abc6b437c002199b8dec150da9d3ce" translate="yes" xml:space="preserve">
          <source>Uses the most efficient &lt;em&gt;selector&lt;/em&gt; available for the given platform. It is also possible to manually configure the exact selector implementation to be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e598218cf75820dbb2cd3bea919913cabb5e7e" translate="yes" xml:space="preserve">
          <source>Using 2to3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22ccfadca9ffaf0ddcc4fc0358c97c924012086" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt;&lt;code&gt;BZ2Compressor&lt;/code&gt;&lt;/a&gt; for incremental compression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eebc61ad3858b05e62f7bd808af37d63075ffd3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#bz2.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; to demonstrate round-trip compression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2029fedc2458a13f77c1f9a3bf4c5809903fcd63" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d26a426ee79b95bc796073c23282baef718e71" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3332153ff30b7216dceddba7970328bb03f8b0c5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#hashlib.new&quot;&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/a&gt; with an algorithm provided by OpenSSL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad62c774eb93ab84a6850c05f0ec364f019a5e7b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#module-json.tool&quot;&gt;&lt;code&gt;json.tool&lt;/code&gt;&lt;/a&gt; from the shell to validate and pretty-print:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d464f393105084bac6303efd2c33e015be5fe683" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt;&lt;code&gt;Pool&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7ad4acf32468f4df31858e1a7c38b2a8027571" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.access&quot;&gt;&lt;code&gt;access()&lt;/code&gt;&lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e46086069a4eb6aba79398aaeef75e0337d56c" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#os.listdir&quot;&gt;&lt;code&gt;listdir()&lt;/code&gt;&lt;/a&gt; can significantly increase the performance of code that also needs file type or file attribute information, because &lt;a href=&quot;#os.DirEntry&quot;&gt;&lt;code&gt;os.DirEntry&lt;/code&gt;&lt;/a&gt; objects expose this information if the operating system provides it when scanning a directory. All &lt;a href=&quot;#os.DirEntry&quot;&gt;&lt;code&gt;os.DirEntry&lt;/code&gt;&lt;/a&gt; methods may perform a system call, but &lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt;&lt;code&gt;is_dir()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.DirEntry.is_file&quot;&gt;&lt;code&gt;is_file()&lt;/code&gt;&lt;/a&gt; usually only require a system call for symbolic links; &lt;a href=&quot;#os.DirEntry.stat&quot;&gt;&lt;code&gt;os.DirEntry.stat()&lt;/code&gt;&lt;/a&gt; always requires a system call on Unix but only requires one for symbolic links on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3883f28289ce4c7d604b31aff5ba0b408a5bf2f7" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; to return a sequence of values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0de95702cc7230baa48c3cfd3852b48dab7f01" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3aeddb8fef1ed2a7cff5e13174b13353739c23" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2689ab8940d02d7de1ca68e6a4b43fe67530d0bc" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; as a context manager is a great way to ensure your file handles are closed properly and is becoming common:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ece5db0a196d8368913a7d8ebe30c4301fe19a" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; as the &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt;, it is easy to group a sequence of key-value pairs into a dictionary of lists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ff2511d6a7f0fa504c9e9bb252e706108d932f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt; is equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1c396214dc747fc568a18547cde7d0930db839" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;loop.create_connection()&lt;/code&gt; to &lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;connect a socket&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce11a3954da4ad24f2eda9c45c6a6a5ff16cff8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;loop.create_connection()&lt;/code&gt; to implement &lt;a href=&quot;asyncio-protocol#asyncio-example-tcp-echo-client-protocol&quot;&gt;an echo-client&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e73e77844e32168a133432fdc484125ad1e928e" translate="yes" xml:space="preserve">
          <source>Using Mock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988ffa6cf84925a7e2f11a2d4da93941ab8db1b3" translate="yes" xml:space="preserve">
          <source>Using Tix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b39b06fc36d238ca9fd0e34aa3702c74df4872" translate="yes" xml:space="preserve">
          <source>Using Ttk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2bfcfa7f0c89ae800d87806ee91ffdff6c2390" translate="yes" xml:space="preserve">
          <source>Using UTF-8 as the Default Source Encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4dafbddf83b4c5d5c51b21c48f00b8d136bed2" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;cumulative distribution function (cdf)&lt;/a&gt;, compute the probability that a random variable &lt;em&gt;X&lt;/em&gt; will be less than or equal to &lt;em&gt;x&lt;/em&gt;. Mathematically, it is written &lt;code&gt;P(X &amp;lt;= x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba910e1ce5f13f1f4ea2ed92206f282bf3b88194" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;probability density function (pdf)&lt;/a&gt;, compute the relative likelihood that a random variable &lt;em&gt;X&lt;/em&gt; will be near the given value &lt;em&gt;x&lt;/em&gt;. Mathematically, it is the limit of the ratio &lt;code&gt;P(x &amp;lt;=
X &amp;lt; x+dx) / dx&lt;/code&gt; as &lt;em&gt;dx&lt;/em&gt; approaches zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e9189c5263c54e966ddb0c0fcbf7b491be40a3" translate="yes" xml:space="preserve">
          <source>Using a callable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75220b874a1b14dcc1d9274c28e10a2768d28bff" translate="yes" xml:space="preserve">
          <source>Using a context manager as a function decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5214967f9aa69db8719e748debbab68f82aea5" translate="yes" xml:space="preserve">
          <source>Using a custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de60096a210691c18ae3d3da4e5e7f7f31853253" translate="yes" xml:space="preserve">
          <source>Using a custom timer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca12f2496ddb81117cd62c302718c441b5e7172" translate="yes" xml:space="preserve">
          <source>Using a descriptive string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb7c939cdae700f3a6eb60d7fb5128652ab012f" translate="yes" xml:space="preserve">
          <source>Using a generic class without specifying type parameters assumes &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; for each position. In the following example, &lt;code&gt;MyIterable&lt;/code&gt; is not generic but implicitly inherits from &lt;code&gt;Iterable[Any]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d307c55b385e0819ab9d20174ffebefe22e8b6b6" translate="yes" xml:space="preserve">
          <source>Using a list comprehension: &lt;code&gt;[x for x in iterable]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9615543c2d928cf50040f980706115431fc8728d" translate="yes" xml:space="preserve">
          <source>Using a pair of parentheses to denote the empty tuple: &lt;code&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc851502c6676f542b9ab198cbf3f862b23400c" translate="yes" xml:space="preserve">
          <source>Using a pair of square brackets to denote the empty list: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a75250125304baf8a8f8d2739eb842d37fc846" translate="yes" xml:space="preserve">
          <source>Using a pool of workers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8383415a2a10a3f8f1036870f131e3fe6f99e151" translate="yes" xml:space="preserve">
          <source>Using a remote manager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23700feacc3a477143f8b09438dc2426f25eecd" translate="yes" xml:space="preserve">
          <source>Using a separate test for &amp;ldquo;liveness&amp;rdquo; creates race conditions in threaded applications; another thread can cause a weak reference to become invalidated before the weak reference is called; the idiom shown above is safe in threaded applications as well as single-threaded applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38537e54bac1a305fb2ceea706898c0b3eab781f" translate="yes" xml:space="preserve">
          <source>Using a string as the value would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0514595eb268ee9e74173dda1049b389b853d97" translate="yes" xml:space="preserve">
          <source>Using a trailing comma for a singleton tuple: &lt;code&gt;a,&lt;/code&gt; or &lt;code&gt;(a,)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac783cf466229eb8f1ea0637db6e6bae53f92af8" translate="yes" xml:space="preserve">
          <source>Using a value in the configuration dict lets configurations to be sent over the wire as pickled dicts to a socket listener. Thus, the logging verbosity of a long-running application can be altered over time with no need to stop and restart the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f653044b0deb519381cad92e86f64dbb241a7b3" translate="yes" xml:space="preserve">
          <source>Using adapters to store additional Python types in SQLite databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed960171bb00be50b6cf25e8e3d2d57ed5e8c5b" translate="yes" xml:space="preserve">
          <source>Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9684f34bd96b132133b1597608ee067cffce7c3" translate="yes" xml:space="preserve">
          <source>Using any of these methods signifies to the user that these values are not important, and also enables one to add, remove, or reorder members without having to renumber the remaining members.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef4f4199027402c151a50d927a41c2996ff8f9f" translate="yes" xml:space="preserve">
          <source>Using automatic values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e18b23aa8166ee94001b3c568e708c504704e7c" translate="yes" xml:space="preserve">
          <source>Using dataclasses, &lt;em&gt;if&lt;/em&gt; this code was valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121ccf7d7533afb43d6d034aec33aed44552426e" translate="yes" xml:space="preserve">
          <source>Using default factory functions is a way to create new instances of mutable types as default values for fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6559d2f6f048a1637ae00fb7cb017f563475f7" translate="yes" xml:space="preserve">
          <source>Using different digest sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255ce6190840fec731e885d587707ae723af9b80" translate="yes" xml:space="preserve">
          <source>Using events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de77a822ff9b97844fd2f5eef17f93a224452770" translate="yes" xml:space="preserve">
          <source>Using importlib.metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94dd17d3eee91a6f460b34718a819c2ee9b54b47" translate="yes" xml:space="preserve">
          <source>Using locks, conditions, and semaphores in the &lt;code&gt;with&lt;/code&gt; statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72adde2953e72ee1f91517e883fc94f79d9bef65" translate="yes" xml:space="preserve">
          <source>Using long option names is equally easy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99afb1c0580e5c9200f58e2effc9e111e841402" translate="yes" xml:space="preserve">
          <source>Using maildir format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e9900bea0722fcf9bc91bc0b782f7afce3e773" translate="yes" xml:space="preserve">
          <source>Using partial objects is usually more convenient than using lambdas, as asyncio can render partial objects better in debug and error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799ae737f71621b7f1a5b1c9102fbd2295987f9d" translate="yes" xml:space="preserve">
          <source>Using screen events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f796650a131fcb2aa652625b99a9658f346ae5" translate="yes" xml:space="preserve">
          <source>Using separate &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instances instead of reusing a single instance avoids that problem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3442d5c13fd47976c3bf0ec76271111a44909d9e" translate="yes" xml:space="preserve">
          <source>Using shortcut methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d8da51afc83980ac89c6ca94ec45396b00f1ac" translate="yes" xml:space="preserve">
          <source>Using sqlite3 efficiently</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320599014228e813440efb4020e5b50ef5441b66" translate="yes" xml:space="preserve">
          <source>Using square brackets, separating items with commas: &lt;code&gt;[a]&lt;/code&gt;, &lt;code&gt;[a, b, c]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8c6027625bc1e5d809004bd3a7dfcd28685592" translate="yes" xml:space="preserve">
          <source>Using sysconfig as a script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c598912622c37d39a35330e55608828824a76ad7" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;&lt;code&gt;**&lt;/code&gt;&amp;rdquo; pattern in large directory trees may consume an inordinate amount of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b1a4d90df2ea292b0302f5e727d9dd477ac602" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#module-zipapp&quot;&gt;&lt;code&gt;zipapp&lt;/code&gt;&lt;/a&gt; module, it is possible to create self-contained Python programs, which can be distributed to end users who only need to have a suitable version of Python installed on their system. The key to doing this is to bundle all of the application&amp;rsquo;s dependencies into the archive, along with the application code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7864597e7acea55d09dd94985971ff805ed9a8a0" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;Process.terminate&lt;/code&gt;&lt;/a&gt; method to stop a process is liable to cause any shared resources (such as locks, semaphores, pipes and queues) currently being used by the process to become broken or unavailable to other processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b726411759353a962ae614ca51a43d068731b30e" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple()&lt;/code&gt;&lt;/a&gt; built-in: &lt;code&gt;tuple()&lt;/code&gt; or &lt;code&gt;tuple(iterable)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b90745245f4a0f18b1bf49ea4cccb202e2b1025" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;dev&lt;/code&gt; Python command line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd2d05a10558a5e6e11eb83de43bd2b9e3020b5" translate="yes" xml:space="preserve">
          <source>Using the Ttk widgets gives the application an improved look and feel. As discussed above, there are differences in how the styling is coded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b1f1cc65fb2aeb01222b99772f21a79b8f9f1c" translate="yes" xml:space="preserve">
          <source>Using the cgi module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414513cd2ccd5f659d92ac7be558ff20be654791" translate="yes" xml:space="preserve">
          <source>Using the comma as a thousands separator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be88d9241472398fa24fa0cf31272713a8b4373" translate="yes" xml:space="preserve">
          <source>Using the connection as a context manager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f82472d95e0faa8f20343f14d65c9d0b7f0391e" translate="yes" xml:space="preserve">
          <source>Using the file after calling &lt;code&gt;flush()&lt;/code&gt; or &lt;code&gt;close()&lt;/code&gt; on the &lt;a href=&quot;#mailbox.MMDF&quot;&gt;&lt;code&gt;MMDF&lt;/code&gt;&lt;/a&gt; instance may yield unpredictable results or raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99db02a945df11fe3bf69aa645bc3e8c058040d1" translate="yes" xml:space="preserve">
          <source>Using the file after calling &lt;code&gt;flush()&lt;/code&gt; or &lt;code&gt;close()&lt;/code&gt; on the &lt;a href=&quot;#mailbox.mbox&quot;&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; instance may yield unpredictable results or raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657776931d7a6faef6a4a5155f927f48b4e36008" translate="yes" xml:space="preserve">
          <source>Using the nonstandard &lt;code&gt;execute()&lt;/code&gt;, &lt;code&gt;executemany()&lt;/code&gt; and &lt;code&gt;executescript()&lt;/code&gt; methods of the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object, your code can be written more concisely because you don&amp;rsquo;t have to create the (often superfluous) &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; objects explicitly. Instead, the &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a &lt;code&gt;SELECT&lt;/code&gt; statement and iterate over it directly using only a single call on the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47aee112b6935fb523810f9a1f409db0f6fb290a" translate="yes" xml:space="preserve">
          <source>Using the standard (non-&lt;code&gt;compat32&lt;/code&gt;) policies, the returned value is an instance of a subclass of &lt;a href=&quot;email.headerregistry#email.headerregistry.BaseHeader&quot;&gt;&lt;code&gt;email.headerregistry.BaseHeader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3fe35d196e1ad26b58992b8e30d0a618b3d15e" translate="yes" xml:space="preserve">
          <source>Using the subprocess Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05aa4e92daaabfec4cab2e49b437833277ca4e0d" translate="yes" xml:space="preserve">
          <source>Using the type constructor: &lt;code&gt;list()&lt;/code&gt; or &lt;code&gt;list(iterable)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcc39a1df1cb3105fe567a435d77e0613cb83af" translate="yes" xml:space="preserve">
          <source>Using these ASCII based operations to manipulate binary data that is not stored in an ASCII based format may lead to data corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ffcc30a6ebac687ec14a0dec9c03c4874f525e" translate="yes" xml:space="preserve">
          <source>Using these methods you can write nice compact code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82a820d85f9921e73994a56e494b8359a6094ae" translate="yes" xml:space="preserve">
          <source>Using this attribute you can control what objects are returned for the &lt;code&gt;TEXT&lt;/code&gt; data type. By default, this attribute is set to &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module will return Unicode objects for &lt;code&gt;TEXT&lt;/code&gt;. If you want to return bytestrings instead, you can set it to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d5a4c73559123ffb06df00d967f9cd0b062c9f" translate="yes" xml:space="preserve">
          <source>Using this decorator requires that the class&amp;rsquo;s metaclass is &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; or is derived from it. A class that has a metaclass derived from &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract methods can be called using any of the normal &amp;lsquo;super&amp;rsquo; call mechanisms. &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt; may be used to declare abstract methods for properties and descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04978a627ce1975c2d08d1fe862ff2c396639ee3" translate="yes" xml:space="preserve">
          <source>Using type-specific formatting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a192d773066b752e8add03087aaa95e9d5840fd" translate="yes" xml:space="preserve">
          <source>Usually an IFF-type file consists of one or more chunks. The proposed usage of the &lt;a href=&quot;#chunk.Chunk&quot;&gt;&lt;code&gt;Chunk&lt;/code&gt;&lt;/a&gt; class defined here is to instantiate an instance at the start of each chunk and read from the instance until it reaches the end, after which a new instance can be instantiated. At the end of the file, creating a new instance will fail with an &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f0c83d353a2c88d75349acfedbc55986b5c477" translate="yes" xml:space="preserve">
          <source>Usually message passing between processes is done using queues or by using &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; objects returned by &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c3035b6a0c2c422567b7b94ec5c3d81b6f4353" translate="yes" xml:space="preserve">
          <source>Usually this option consists of the method &lt;code&gt;Scrollbar.set()&lt;/code&gt; of some scrollbar. This will cause the scrollbar to be updated whenever the view in the window changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948448f0d7e18600e63d50ac1f18a1bd083aad1f" translate="yes" xml:space="preserve">
          <source>Usually you can use &lt;a href=&quot;#unittest.TestCase.skipTest&quot;&gt;&lt;code&gt;TestCase.skipTest()&lt;/code&gt;&lt;/a&gt; or one of the skipping decorators instead of raising this directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7159aa4ebaad10cbad60df9f2f47fdab12006d8d" translate="yes" xml:space="preserve">
          <source>Usually you use the transformer like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8bb6feca38dd5baf6726db91fee35d699471bf" translate="yes" xml:space="preserve">
          <source>Usually your SQL operations will need to use values from Python variables. You shouldn&amp;rsquo;t assemble your query using Python&amp;rsquo;s string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack (see &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt; for humorous example of what can go wrong).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18aef760d202fd986f9f4b8de779ecd32a97e992" translate="yes" xml:space="preserve">
          <source>Usually, ctypes does strict type checking. This means, if you have &lt;code&gt;POINTER(c_int)&lt;/code&gt; in the &lt;code&gt;argtypes&lt;/code&gt; list of a function or as the type of a member field in a structure definition, only instances of exactly the same type are accepted. There are some exceptions to this rule, where ctypes accepts other objects. For example, you can pass compatible array instances instead of pointer types. So, for &lt;code&gt;POINTER(c_int)&lt;/code&gt;, ctypes accepts an array of c_int:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46defc487dd609e5e11afede6e42ed7efb746478" translate="yes" xml:space="preserve">
          <source>Usually, the number of elements output matches the input iterable. However, if the keyword argument &lt;em&gt;initial&lt;/em&gt; is provided, the accumulation leads off with the &lt;em&gt;initial&lt;/em&gt; value so that the output has one more element than the input iterable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="fdb7e6fac588b967be8115ae1239c9f13b01bc33" translate="yes" xml:space="preserve">
          <source>Utilities for working with ASCII characters, regardless of your locale settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102dc7d3bf538e66387889d7daeeb05e53a870a4" translate="yes" xml:space="preserve">
          <source>Utilities to compile all Python source files in a directory tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894c08b4d341d3181d652622edf583cdb792b50d" translate="yes" xml:space="preserve">
          <source>Utilities to help work with fonts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5439bb171dd02403cd4a0162c5e608f757fe9b" translate="yes" xml:space="preserve">
          <source>Utilities to run asyncio programs, create Tasks, and await on multiple things with timeouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fafea3320bd24aef44e569f108bcf7bb663fa8f" translate="yes" xml:space="preserve">
          <source>Utilities to spawn subprocesses and run shell commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16cdccb3faaa5e67faa6fdb65caa5cf29d51cbb" translate="yes" xml:space="preserve">
          <source>Utility functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7be9dc79ed50d8c704d7f221a2758927ee65a3" translate="yes" xml:space="preserve">
          <source>Uuencode file &lt;em&gt;in_file&lt;/em&gt; into file &lt;em&gt;out_file&lt;/em&gt;. The uuencoded file will have the header specifying &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;mode&lt;/em&gt; as the defaults for the results of decoding the file. The default defaults are taken from &lt;em&gt;in_file&lt;/em&gt;, or &lt;code&gt;'-'&lt;/code&gt; and &lt;code&gt;0o666&lt;/code&gt; respectively. If &lt;em&gt;backtick&lt;/em&gt; is true, zeros are represented by &lt;code&gt;'`'&lt;/code&gt; instead of spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51920a4103a076cddaea8c5320e3e3d41f0fe359" translate="yes" xml:space="preserve">
          <source>VRFY</source>
          <target state="translated">VRFY</target>
        </trans-unit>
        <trans-unit id="6ef9fae42b29329a1ed8c77701fe1700d757002f" translate="yes" xml:space="preserve">
          <source>Valid String Arg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9f1d564485db39fcd34520a7886185a9f3d9bb" translate="yes" xml:space="preserve">
          <source>Valid enum Arg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11dea5084c554faaf9051f680e8d26ff170b6ad" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;7bit&lt;/code&gt;, &lt;code&gt;8bit&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, and &lt;code&gt;quoted-printable&lt;/code&gt;. See &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed34a07f3d8b83630e9e822f76c6734a7177025" translate="yes" xml:space="preserve">
          <source>Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="0701d51e2238471096af133360d47b98e784ca3c" translate="yes" xml:space="preserve">
          <source>Value Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee2c05664be5bc3b7425a3cd5c2eaeb9af87ebe" translate="yes" xml:space="preserve">
          <source>Value if not present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd7eb81edd524ab9b2cc8166a90a72809941195" translate="yes" xml:space="preserve">
          <source>Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry. This helps the registry perform efficiently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4442e3ee6e85b03ce0d04c09a9f9afc7926b83" translate="yes" xml:space="preserve">
          <source>Value may be supplied as either a keyword or positional argument (this is the standard binding behaviour for functions implemented in Python.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e606eb6146ca90bd2780303c47db18287309d201" translate="yes" xml:space="preserve">
          <source>Value must be supplied as a keyword argument. Keyword only parameters are those which appear after a &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;*args&lt;/code&gt; entry in a Python function definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f281af900c7055431a7ba9336e9f5b33972ace2e" translate="yes" xml:space="preserve">
          <source>Value must be supplied as a positional argument. Positional only parameters are those which appear before a &lt;code&gt;/&lt;/code&gt; entry (if present) in a Python function definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d356e451eb275892ab84a0a8cabfd82d894744" translate="yes" xml:space="preserve">
          <source>Value of function key &lt;em&gt;n&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58abe8dc89cf79184a2726248be2244df3ce518b" translate="yes" xml:space="preserve">
          <source>Value too large for defined data type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f22edd532486ea6c69bc19fb1bb15eb52cfdba0" translate="yes" xml:space="preserve">
          <source>Value used to identify the event. The interpretation depends on the filter but it&amp;rsquo;s usually the file descriptor. In the constructor ident can either be an int or an object with a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method. kevent stores the integer internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5e1888f7ff9f4679a3377b455596a48d014681" translate="yes" xml:space="preserve">
          <source>ValueError</source>
          <target state="translated">ValueError</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="4ffc08181d2110828c38d18c73ceb4f5562de955" translate="yes" xml:space="preserve">
          <source>Values can be strings, integers, floats, booleans, tuples, lists, dictionaries (but only with string keys), &lt;a href=&quot;#plistlib.Data&quot;&gt;&lt;code&gt;Data&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;bytesarray&lt;/code&gt; or &lt;a href=&quot;datetime#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4af2aaf629c09c7b586c6140040cd042f1b5dae" translate="yes" xml:space="preserve">
          <source>Values from other sections can be fetched as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c8e3c3012e41d09c6656db5fddb8ed8d0ecd84" translate="yes" xml:space="preserve">
          <source>Values in the registry have name, type, and data components. This method retrieves the data for a key&amp;rsquo;s first value that has a &lt;code&gt;NULL&lt;/code&gt; name. But the underlying API call doesn&amp;rsquo;t return the type, so always use &lt;a href=&quot;#winreg.QueryValueEx&quot;&gt;&lt;code&gt;QueryValueEx()&lt;/code&gt;&lt;/a&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c44a2d0d8fe41ed1dbff4d435d6b3be6cd0c3f" translate="yes" xml:space="preserve">
          <source>Values of &lt;em&gt;n&lt;/em&gt; less than &lt;code&gt;0&lt;/code&gt; are treated as &lt;code&gt;0&lt;/code&gt; (which yields an empty sequence of the same type as &lt;em&gt;s&lt;/em&gt;). Note that items in the sequence &lt;em&gt;s&lt;/em&gt; are not copied; they are referenced multiple times. This often haunts new Python programmers; consider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99882406ebedbb37513cb23cc3017de1859ae178" translate="yes" xml:space="preserve">
          <source>Values that cannot be determined are returned as given by the parameter presets. If bits is given as &lt;code&gt;''&lt;/code&gt;, the &lt;code&gt;sizeof(pointer)&lt;/code&gt; (or &lt;code&gt;sizeof(long)&lt;/code&gt; on Python version &amp;lt; 1.5.2) is used as indicator for the supported pointer size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7fc44b31c7c9574a8212b50dbd39bc45209ed3f" translate="yes" xml:space="preserve">
          <source>Values to pass as the &lt;em&gt;mode&lt;/em&gt; parameter of &lt;a href=&quot;#os.access&quot;&gt;&lt;code&gt;access()&lt;/code&gt;&lt;/a&gt; to test the existence, readability, writability and executability of &lt;em&gt;path&lt;/em&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505c78fab28aa9b0b70f7dcbd71feb993b8ff277" translate="yes" xml:space="preserve">
          <source>Variable that specifies the user agent of the opener object. To get &lt;a href=&quot;urllib#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt; to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc4399a5b517cf7222cd58ad2c32cfd48aac016" translate="yes" xml:space="preserve">
          <source>Variable-sized data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25482e67402e6c3f5fe20df41e9dcae2a9ba2841" translate="yes" xml:space="preserve">
          <source>Various structures for implementing schedulers have been extensively studied, and heaps are good for this, as they are reasonably speedy, the speed is almost constant, and the worst case is not much different than the average case. However, there are other representations which are more efficient overall, yet the worst cases might be terrible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01dc65ed82215cf4434e1aca2d7412f6c775240" translate="yes" xml:space="preserve">
          <source>Vector example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965ef7e332ac200f4b5e70778db19b375745f0da" translate="yes" xml:space="preserve">
          <source>Verbose output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8830ff167eaa3505bc00fdd4111ea514743436" translate="yes" xml:space="preserve">
          <source>Verbose output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b257b1e9f0266480a6612a0d51d64c417b942e" translate="yes" xml:space="preserve">
          <source>Verify that &lt;em&gt;cert&lt;/em&gt; (in decoded format as returned by &lt;a href=&quot;#ssl.SSLSocket.getpeercert&quot;&gt;&lt;code&gt;SSLSocket.getpeercert()&lt;/code&gt;&lt;/a&gt;) matches the given &lt;em&gt;hostname&lt;/em&gt;. The rules applied are those for checking the identity of HTTPS servers as outlined in &lt;a href=&quot;https://tools.ietf.org/html/rfc2818.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2818&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc5280.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 5280&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc6125.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 6125&lt;/strong&gt;&lt;/a&gt;. In addition to HTTPS, this function should be suitable for checking the identity of servers in various SSL-based protocols such as FTPS, IMAPS, POPS and others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ba4e70726a4a91e073b0dd557344bd475a0a8b" translate="yes" xml:space="preserve">
          <source>Verifying certificates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f133e763468a73947f4629707ecc9c9d90bb76" translate="yes" xml:space="preserve">
          <source>Version interface for Jython.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e3aaed4d8f8b4a00e21a218ae1c005508d0951" translate="yes" xml:space="preserve">
          <source>Vertical highlight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26a73edd5911cc59d619f45a8244a225ed70c75" translate="yes" xml:space="preserve">
          <source>Vertical tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6b8a691f0d907efa971075035a145a937381ac" translate="yes" xml:space="preserve">
          <source>Vietnamese</source>
          <target state="translated">Vietnamese</target>
        </trans-unit>
        <trans-unit id="c72e003330b099c436ab550f7c7a659390de0b50" translate="yes" xml:space="preserve">
          <source>View Last Restart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f633d1002c0f5f6ce6be33d7377af0ab89993bbb" translate="yes" xml:space="preserve">
          <source>View Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8674ea8214e1ae57f3e50b4fb7b3ef79a1d1476a" translate="yes" xml:space="preserve">
          <source>Vincent Bernat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cb0e10bd78d0153cd1698ceb6ca31fb1f0f1e3" translate="yes" xml:space="preserve">
          <source>Virtual Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17939436623483b052de1e4d3f9d6c11ccdc98ad" translate="yes" xml:space="preserve">
          <source>Virtual events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9ff4f0de398581c4640bcbb6e536c355a391be" translate="yes" xml:space="preserve">
          <source>Visibility</source>
          <target state="translated">Visibility</target>
        </trans-unit>
        <trans-unit id="5a2efe7f1abb84c38f1725a2ecc3c4e87349a479" translate="yes" xml:space="preserve">
          <source>Visit a node. The default implementation calls the method called &lt;code&gt;self.visit_&lt;em&gt;classname&lt;/em&gt;&lt;/code&gt; where &lt;em&gt;classname&lt;/em&gt; is the name of the node class, or &lt;a href=&quot;#ast.NodeVisitor.generic_visit&quot;&gt;&lt;code&gt;generic_visit()&lt;/code&gt;&lt;/a&gt; if that method doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3c755d8a06e5cd333fac0016835f914045f69e" translate="yes" xml:space="preserve">
          <source>Visual inspection shows that the certificate does identify the desired service (that is, the HTTPS host &lt;code&gt;www.python.org&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eee88bfaa26b0b2250c40217a4675afbea5cd23" translate="yes" xml:space="preserve">
          <source>Volume number of file header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c328c0ed13eb319fbdea95de7337047e0b069c45" translate="yes" xml:space="preserve">
          <source>Voluntarily relinquish the CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e1c76ac6526fc5debd6d9e1463cc9f2e2c997b" translate="yes" xml:space="preserve">
          <source>VxWorks only supports setting &lt;a href=&quot;#resource.RLIMIT_NOFILE&quot;&gt;&lt;code&gt;RLIMIT_NOFILE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3645a420f6c8c0399ea11997839dc3fbde6f0ad" translate="yes" xml:space="preserve">
          <source>Wait for child process to terminate. Set and return &lt;a href=&quot;#subprocess.Popen.returncode&quot;&gt;&lt;code&gt;returncode&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4b0606dd5fd109342b9b5b4880dd14615482ba" translate="yes" xml:space="preserve">
          <source>Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf3a1c5971c4c21eec5eb16a888eb935b06df3a" translate="yes" xml:space="preserve">
          <source>Wait for events. timeout in seconds (float)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabdac1beb596d1e8239e59912c30fa91617e2d4" translate="yes" xml:space="preserve">
          <source>Wait for the &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; instances (possibly created by different &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; instances) given by &lt;em&gt;fs&lt;/em&gt; to complete. Returns a named 2-tuple of sets. The first set, named &lt;code&gt;done&lt;/code&gt;, contains the futures that completed (finished or cancelled futures) before the wait completed. The second set, named &lt;code&gt;not_done&lt;/code&gt;, contains the futures that did not complete (pending or running futures).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29151336d8a123354d0b207654c1c2fac16dbab5" translate="yes" xml:space="preserve">
          <source>Wait for the &lt;em&gt;aw&lt;/em&gt;&lt;a href=&quot;#asyncio-awaitables&quot;&gt;awaitable&lt;/a&gt; to complete with a timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bfcef6a02be7849ca322a1b7fa63807a4361ed" translate="yes" xml:space="preserve">
          <source>Wait for the child process to terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc57d83fd49bf3b1beb38bc11fe23ab63ce80444" translate="yes" xml:space="preserve">
          <source>Wait for the completion of one or more child processes. &lt;em&gt;idtype&lt;/em&gt; can be &lt;a href=&quot;#os.P_PID&quot;&gt;&lt;code&gt;P_PID&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.P_PGID&quot;&gt;&lt;code&gt;P_PGID&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.P_ALL&quot;&gt;&lt;code&gt;P_ALL&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;id&lt;/em&gt; specifies the pid to wait on. &lt;em&gt;options&lt;/em&gt; is constructed from the ORing of one or more of &lt;a href=&quot;#os.WEXITED&quot;&gt;&lt;code&gt;WEXITED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.WSTOPPED&quot;&gt;&lt;code&gt;WSTOPPED&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.WCONTINUED&quot;&gt;&lt;code&gt;WCONTINUED&lt;/code&gt;&lt;/a&gt; and additionally may be ORed with &lt;a href=&quot;#os.WNOHANG&quot;&gt;&lt;code&gt;WNOHANG&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.WNOWAIT&quot;&gt;&lt;code&gt;WNOWAIT&lt;/code&gt;&lt;/a&gt;. The return value is an object representing the data contained in the &lt;code&gt;siginfo_t&lt;/code&gt; structure, namely: &lt;code&gt;si_pid&lt;/code&gt;, &lt;code&gt;si_uid&lt;/code&gt;, &lt;code&gt;si_signo&lt;/code&gt;, &lt;code&gt;si_status&lt;/code&gt;, &lt;code&gt;si_code&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt; if &lt;a href=&quot;#os.WNOHANG&quot;&gt;&lt;code&gt;WNOHANG&lt;/code&gt;&lt;/a&gt; is specified and there are no children in a waitable state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec9481f9a89a7f37a291ebe888b480fa7b27740" translate="yes" xml:space="preserve">
          <source>Wait for the worker processes to exit. One must call &lt;a href=&quot;#multiprocessing.pool.Pool.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#multiprocessing.pool.Pool.terminate&quot;&gt;&lt;code&gt;terminate()&lt;/code&gt;&lt;/a&gt; before using &lt;a href=&quot;#multiprocessing.pool.Pool.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c2968b108d264170fd51a0470c595df02b5436" translate="yes" xml:space="preserve">
          <source>Wait till an object in &lt;em&gt;object_list&lt;/em&gt; is ready. Returns the list of those objects in &lt;em&gt;object_list&lt;/em&gt; which are ready. If &lt;em&gt;timeout&lt;/em&gt; is a float then the call blocks for at most that many seconds. If &lt;em&gt;timeout&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; then it will block for an unlimited period. A negative timeout is equivalent to a zero timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70307f0b7918be1c3ba2811e4af742880bd148cb" translate="yes" xml:space="preserve">
          <source>Wait until a condition evaluates to true. &lt;em&gt;predicate&lt;/em&gt; should be a callable which result will be interpreted as a boolean value. A &lt;em&gt;timeout&lt;/em&gt; may be provided giving the maximum time to wait.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cef329a9efde14e8d238168106e3ca5692ee07" translate="yes" xml:space="preserve">
          <source>Wait until a file descriptor received some data using the &lt;a href=&quot;#asyncio.loop.add_reader&quot;&gt;&lt;code&gt;loop.add_reader()&lt;/code&gt;&lt;/a&gt; method and then close the event loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ad20c64b497f2ca5ab845b7554279263b0f679" translate="yes" xml:space="preserve">
          <source>Wait until a predicate becomes &lt;em&gt;true&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ca18daf863b117483b5967387209392304958f" translate="yes" xml:space="preserve">
          <source>Wait until a socket receives data using the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt; method with a protocol:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a9261621d8e68aedbd16e18722b9a67f39cec1" translate="yes" xml:space="preserve">
          <source>Wait until all output written to file descriptor &lt;em&gt;fd&lt;/em&gt; has been transmitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe11ac9dce22748ac5bc6e88601147ef1f88fb6" translate="yes" xml:space="preserve">
          <source>Wait until it is appropriate to resume writing to the stream. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67b0cd8f0df8f71b4a7721db60c000c4a9aaff5" translate="yes" xml:space="preserve">
          <source>Wait until notified or until a timeout occurs. If the calling thread has not acquired the lock when this method is called, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0970419de06465ae0edf094213021ffbd86ca8c" translate="yes" xml:space="preserve">
          <source>Wait until notified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9622e8f50c22884aacc0c6a6c6d1d859b01b43" translate="yes" xml:space="preserve">
          <source>Wait until some registered file objects become ready, or the timeout expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ec2047d1b5f0f5a23a91d4267a89adebce9d94" translate="yes" xml:space="preserve">
          <source>Wait until the &lt;a href=&quot;#asyncio.Server.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc40d911794127c221170ea25e3065e9d790a27" translate="yes" xml:space="preserve">
          <source>Wait until the event is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29508508455305b1db6d27aa2e48c694fd3d730b" translate="yes" xml:space="preserve">
          <source>Wait until the result is available or until &lt;em&gt;timeout&lt;/em&gt; seconds pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056d3e2f705449186f7ac1299798e318e2219fbd" translate="yes" xml:space="preserve">
          <source>Wait until the sound device has played every byte in its buffer. (This happens implicitly when the device is closed.) The OSS documentation recommends closing and re-opening the device rather than using &lt;a href=&quot;#ossaudiodev.oss_audio_device.sync&quot;&gt;&lt;code&gt;sync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec111d4c42deb0f141e5bb12ebeed4601999588c" translate="yes" xml:space="preserve">
          <source>Wait until the stream is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba24cad077b45f2680eff0bdf9fd0536486f778" translate="yes" xml:space="preserve">
          <source>Wait until the thread terminates. This blocks the calling thread until the thread whose &lt;a href=&quot;#threading.Thread.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; method is called terminates &amp;ndash; either normally or through an unhandled exception &amp;ndash; or until the optional timeout occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e6575bce34aa7e829066c628e1bbe5ee1d226d" translate="yes" xml:space="preserve">
          <source>Waiting Primitives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bea4a4b6439483e8e78f429d91872ebd9c3c18" translate="yes" xml:space="preserve">
          <source>Wake only one epoll object when the associated fd has an event. The default (if this flag is not set) is to wake all epoll objects polling on a fd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8cfa9cdcc5cfd14c9ca062c6bc6c63f61f28de" translate="yes" xml:space="preserve">
          <source>Wake up all tasks waiting on this condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ae74426e9dc6545cb55c36b1af9d2f7460d6e8" translate="yes" xml:space="preserve">
          <source>Wake up all threads waiting on this condition. This method acts like &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt;, but wakes up all waiting threads instead of one. If the calling thread has not acquired the lock when this method is called, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4a765d51a4008bcc07316f2233df4d04edeb34" translate="yes" xml:space="preserve">
          <source>Wake up at most &lt;em&gt;n&lt;/em&gt; tasks (1 by default) waiting on this condition. The method is no-op if no tasks are waiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf340b925958411b04f22ec98ee18783d9a1e220" translate="yes" xml:space="preserve">
          <source>Walk a stack following &lt;code&gt;f.f_back&lt;/code&gt; from the given frame, yielding the frame and line number for each frame. If &lt;em&gt;f&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, the current stack is used. This helper is used with &lt;a href=&quot;#traceback.StackSummary.extract&quot;&gt;&lt;code&gt;StackSummary.extract()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a27a446a60fb72e15035278b0c8eb08c42135e9" translate="yes" xml:space="preserve">
          <source>Walk a traceback following &lt;code&gt;tb_next&lt;/code&gt; yielding the frame and line number for each frame. This helper is used with &lt;a href=&quot;#traceback.StackSummary.extract&quot;&gt;&lt;code&gt;StackSummary.extract()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="f0b8c638923d24a321f5c6972c05277cf144fb7b" translate="yes" xml:space="preserve">
          <source>Warning Categories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2c3cc9b73eb686d163d3880f8c1912f8b96956" translate="yes" xml:space="preserve">
          <source>Warning categories that are primarily of interest to Python developers (rather than end users of applications written in Python) are ignored by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847345091f804153cb593f84ad497f73b760d180" translate="yes" xml:space="preserve">
          <source>Warning messages are normally written to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;, but their disposition can be changed flexibly, from ignoring all warnings to turning them into exceptions. The disposition of warnings can vary based on the &lt;a href=&quot;#warning-categories&quot;&gt;warning category&lt;/a&gt;, the text of the warning message, and the source location where it is issued. Repetitions of a particular warning for the same source location are typically suppressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa8d6a7b1b2b2ba758f00991e78c8631d91fa69" translate="yes" xml:space="preserve">
          <source>Warning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesn&amp;rsquo;t warrant raising an exception and terminating the program. For example, one might want to issue a warning when a program uses an obsolete module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1430f976c596795274458abcfbc4f280cbfcebac" translate="yes" xml:space="preserve">
          <source>Warnings</source>
          <target state="translated">Warnings</target>
        </trans-unit>
        <trans-unit id="09505683c6b5bf3932806860c33becb79c315a18" translate="yes" xml:space="preserve">
          <source>Watch a file descriptor for read events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bdf1df2d6de2dce3cb70cc7a1d445ff547ab4f" translate="yes" xml:space="preserve">
          <source>Watch for events on a network device [not available on Mac OS X]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77a9f44b3dc9612388cdc66f0973471511ca754" translate="yes" xml:space="preserve">
          <source>Watch for events on a process id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8d444f092659996944c98103896607bf61afda" translate="yes" xml:space="preserve">
          <source>WatchedFileHandler</source>
          <target state="translated">WatchedFileHandler</target>
        </trans-unit>
        <trans-unit id="6c952491e9149238af6d5009db8cdd488e66dcb2" translate="yes" xml:space="preserve">
          <source>Watching file descriptors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853f81f21983a508519fe18408fdef4381a53c85" translate="yes" xml:space="preserve">
          <source>Wave_read Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b33acc387d819933f3a4e356b1224932bc5fe4" translate="yes" xml:space="preserve">
          <source>Wave_read objects, as returned by &lt;a href=&quot;#wave.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, have the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e5965f88e6bbc53b5aa0194a15009dfa785bfa" translate="yes" xml:space="preserve">
          <source>Wave_write Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2438cc47ac4cf690f00fb0bcb5a03c6f4fd235a" translate="yes" xml:space="preserve">
          <source>Wave_write objects, as returned by &lt;a href=&quot;#wave.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, have the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1d2fa5af87cd6de5bce19db6524cc1d529a3d0" translate="yes" xml:space="preserve">
          <source>Ways to reference it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85190bf88b389c7893fdc3f90cf47dcd9cbeca0" translate="yes" xml:space="preserve">
          <source>We can import this data by reading from a file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b789995e580ea25048a2285a5926e24768d9cf2" translate="yes" xml:space="preserve">
          <source>We can remove elements using &lt;a href=&quot;#xml.etree.ElementTree.Element.remove&quot;&gt;&lt;code&gt;Element.remove()&lt;/code&gt;&lt;/a&gt;. Let&amp;rsquo;s say we want to remove all countries with a rank higher than 50:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215e314610fefea13b5da68c465496bf961d967a" translate="yes" xml:space="preserve">
          <source>We can see that Python has loaded &lt;code&gt;8173 KiB&lt;/code&gt; of module data (bytecode and constants), and that this is &lt;code&gt;4428 KiB&lt;/code&gt; more than had been loaded before the tests, when the previous snapshot was taken. Similarly, the &lt;a href=&quot;linecache#module-linecache&quot;&gt;&lt;code&gt;linecache&lt;/code&gt;&lt;/a&gt; module has cached &lt;code&gt;940 KiB&lt;/code&gt; of Python source code to format tracebacks, all of it since the previous snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cfb793dfee5070acdfd0a536b9c921adeb6f59" translate="yes" xml:space="preserve">
          <source>We can see that Python loaded &lt;code&gt;4855 KiB&lt;/code&gt; data (bytecode and constants) from modules and that the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module allocated &lt;code&gt;244 KiB&lt;/code&gt; to build &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;namedtuple&lt;/code&gt;&lt;/a&gt; types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b16f5f4ffc8f56cb2bb30fa071edafeee046554" translate="yes" xml:space="preserve">
          <source>We can see that the most memory was allocated in the &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; module to load data (bytecode and constants) from modules: &lt;code&gt;870.1 KiB&lt;/code&gt;. The traceback is where the &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; loaded data most recently: on the &lt;code&gt;import pdb&lt;/code&gt; line of the &lt;a href=&quot;doctest#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; module. The traceback may change if a new module is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41498dcbefc1d323bf74e1d9ce5b53a4cc360514" translate="yes" xml:space="preserve">
          <source>We have defined the &lt;code&gt;struct _frozen&lt;/code&gt; data type, so we can get the pointer to the table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfcb5b8900d48c6735c6871c6773651f8b0c087" translate="yes" xml:space="preserve">
          <source>We might try to implement the class using a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__del__&quot;&gt;&lt;code&gt;__del__()&lt;/code&gt;&lt;/a&gt; method as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f330039a177b6f4ba692d81baa88bba27b8da4" translate="yes" xml:space="preserve">
          <source>We recommend that all application designers seriously consider doing this; we have seen many protocols where a hash that is computed in one part of the protocol can be used in an entirely different part because two hash computations were done on similar or related data, and the attacker can force the application to make the hash inputs the same. Personalizing each hash function used in the protocol summarily stops this type of attack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366243de9e8dd818c63915fa0eb00c27eb54fd4e" translate="yes" xml:space="preserve">
          <source>We say that an object is an &lt;strong&gt;awaitable&lt;/strong&gt; object if it can be used in an &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#await&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; expression. Many asyncio APIs are designed to accept awaitables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b5ab6e43e7e9a6b2ac86fe4eb61e522b2004b3" translate="yes" xml:space="preserve">
          <source>We want to implement the arithmetic operations so that mixed-mode operations either call an implementation whose author knew about the types of both arguments, or convert both to the nearest built in type and do the operation there. For subtypes of &lt;a href=&quot;#numbers.Integral&quot;&gt;&lt;code&gt;Integral&lt;/code&gt;&lt;/a&gt;, this means that &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__add__&quot;&gt;&lt;code&gt;__add__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__radd__&quot;&gt;&lt;code&gt;__radd__()&lt;/code&gt;&lt;/a&gt; should be defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d8571598e317c5f7d8abde12db88f57270cea2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be using the following XML document as the sample data for this section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498251e1ee5e102841353e28c1ae8f3a3c95d0ed" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re given a training dataset with measurements for eight people. The measurements are assumed to be normally distributed, so we summarize the data with &lt;a href=&quot;#statistics.NormalDist&quot;&gt;&lt;code&gt;NormalDist&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53fa691162f39e16d25e99147762bfdb99f7853f" translate="yes" xml:space="preserve">
          <source>Weak Reference Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee5214a04390535aa3407199b4313f1342ce933" translate="yes" xml:space="preserve">
          <source>Weak reference objects have no methods and no attributes besides &lt;a href=&quot;#weakref.ref.__callback__&quot;&gt;&lt;code&gt;ref.__callback__&lt;/code&gt;&lt;/a&gt;. A weak reference object allows the referent to be obtained, if it still exists, by calling it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269b06c67f58c7694dc71ae7f0afae036d4818c7" translate="yes" xml:space="preserve">
          <source>Weak references are &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt; if the &lt;em&gt;object&lt;/em&gt; is hashable. They will maintain their hash value even after the &lt;em&gt;object&lt;/em&gt; was deleted. If &lt;a href=&quot;functions#hash&quot;&gt;&lt;code&gt;hash()&lt;/code&gt;&lt;/a&gt; is called the first time only after the &lt;em&gt;object&lt;/em&gt; was deleted, the call will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5772b94a870ac2c2a272ce1b65b3d3ec5cdd0a" translate="yes" xml:space="preserve">
          <source>Weak references support tests for equality, but not ordering. If the referents are still alive, two references have the same equality relationship as their referents (regardless of the &lt;em&gt;callback&lt;/em&gt;). If either referent has been deleted, the references are equal only if the reference objects are the same object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160d43660c7e93a34cbf9e6d0683b3f1d070e0fc" translate="yes" xml:space="preserve">
          <source>WebDAV &lt;a href=&quot;https://tools.ietf.org/html/rfc2518.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2518&lt;/strong&gt;&lt;/a&gt;, Section 10.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a73d3d2fe230642eaf557fd34c51c84ef4ff1ba" translate="yes" xml:space="preserve">
          <source>WebDAV &lt;a href=&quot;https://tools.ietf.org/html/rfc4918.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4918&lt;/strong&gt;&lt;/a&gt;, Section 11.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f89d6c2e38467f5b13ae0091d9a8a51c1b16e1" translate="yes" xml:space="preserve">
          <source>WebDAV &lt;a href=&quot;https://tools.ietf.org/html/rfc4918.html&quot; id=&quot;index-41&quot;&gt;&lt;strong&gt;RFC 4918&lt;/strong&gt;&lt;/a&gt;, Section 11.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bff95c1e44c73456e7cae10cda54d6fa398f6f" translate="yes" xml:space="preserve">
          <source>WebDAV &lt;a href=&quot;https://tools.ietf.org/html/rfc4918.html&quot; id=&quot;index-42&quot;&gt;&lt;strong&gt;RFC 4918&lt;/strong&gt;&lt;/a&gt;, Section 11.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd468def379a57145ba45b0607d05b11370a29a3" translate="yes" xml:space="preserve">
          <source>WebDAV &lt;a href=&quot;https://tools.ietf.org/html/rfc4918.html&quot; id=&quot;index-43&quot;&gt;&lt;strong&gt;RFC 4918&lt;/strong&gt;&lt;/a&gt;, Section 11.4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98acc379abdeda29844b5028a71fa64b09754bd1" translate="yes" xml:space="preserve">
          <source>WebDAV &lt;a href=&quot;https://tools.ietf.org/html/rfc4918.html&quot; id=&quot;index-56&quot;&gt;&lt;strong&gt;RFC 4918&lt;/strong&gt;&lt;/a&gt;, Section 11.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98047a8d0918ebb9d2a9d3244b26fc929a5bcb7c" translate="yes" xml:space="preserve">
          <source>WebDAV Binding Extensions &lt;a href=&quot;https://tools.ietf.org/html/rfc5842.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 5842&lt;/strong&gt;&lt;/a&gt;, Section 7.1 (Experimental)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2525087157bd91fd05837fb713cd7d80f247559d" translate="yes" xml:space="preserve">
          <source>WebDAV Binding Extensions &lt;a href=&quot;https://tools.ietf.org/html/rfc5842.html&quot; id=&quot;index-57&quot;&gt;&lt;strong&gt;RFC 5842&lt;/strong&gt;&lt;/a&gt;, Section 7.2 (Experimental)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efaa49e0aaddcee60c9e56544c7c0972d0e98dcb" translate="yes" xml:space="preserve">
          <source>WebP files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe3f61ddecbabd9df7b81c596b0e344f7a9a1ef0" translate="yes" xml:space="preserve">
          <source>Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957344126e376dfec66a5865493968e5033a759d" translate="yes" xml:space="preserve">
          <source>Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aadb81eb1a1699671247b51c01b0cc44432b8bb" translate="yes" xml:space="preserve">
          <source>Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93371df01a8682d904d17bbc9258abc77e066be" translate="yes" xml:space="preserve">
          <source>Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027417f7bd7fb85e6bdc77ed8d873c5e62146b37" translate="yes" xml:space="preserve">
          <source>Weekday (0=Monday)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da94621ef8999a8ac972599f062234bc846d53f9" translate="yes" xml:space="preserve">
          <source>Weekday as a decimal number [0(Sunday),6].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149ccb2de453647267122d8a96dda7b0ae559978" translate="yes" xml:space="preserve">
          <source>Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0fc2dc3a75233397a7a28f15f9662ee67c106e" translate="yes" xml:space="preserve">
          <source>Weekday as locale&amp;rsquo;s abbreviated name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1e28b07531c9368250cf22e73ebdac9375108f" translate="yes" xml:space="preserve">
          <source>Weekday as locale&amp;rsquo;s full name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6103eca7ab314d7e7cfd58095933632e58c72c4" translate="yes" xml:space="preserve">
          <source>Weibull distribution. &lt;em&gt;alpha&lt;/em&gt; is the scale parameter and &lt;em&gt;beta&lt;/em&gt; is the shape parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74e5c5d315ff3f823c6f47d8fb4fc7d0c8fe3e0" translate="yes" xml:space="preserve">
          <source>Western Europe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6c63b0557e98944ebbf0299cfb303283e1e58e" translate="yes" xml:space="preserve">
          <source>What About Exceptions?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee52e14b570b091324e858324b60dbe6df01e5a" translate="yes" xml:space="preserve">
          <source>What Is Deterministic Profiling?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ac2d9156eb23a3dbdb1999476310a8ac6727e3" translate="yes" xml:space="preserve">
          <source>What can be pickled and unpickled?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf1ade96b2641b7f1c03643a78aaf7e4461cb47" translate="yes" xml:space="preserve">
          <source>What has happened is that &lt;code&gt;[[]]&lt;/code&gt; is a one-element list containing an empty list, so all three elements of &lt;code&gt;[[]] * 3&lt;/code&gt; are references to this single empty list. Modifying any of the elements of &lt;code&gt;lists&lt;/code&gt; modifies this single list. You can create a list of different lists this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea4146566e7e0cd8f5a8d4c34d120c18c585cf1" translate="yes" xml:space="preserve">
          <source>What the &lt;a href=&quot;#xml.dom.minidom.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#xml.dom.minidom.parseString&quot;&gt;&lt;code&gt;parseString()&lt;/code&gt;&lt;/a&gt; functions do is connect an XML parser with a &amp;ldquo;DOM builder&amp;rdquo; that can accept parse events from any SAX parser and convert them into a DOM tree. The name of the functions are perhaps misleading, but are easy to grasp when learning the interfaces. The parsing of the document will be completed before these functions return; it&amp;rsquo;s simply that these functions do not provide a parser implementation themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c2e61a8fe0f76312d3b9af5434565ee7de2ec5" translate="yes" xml:space="preserve">
          <source>What the new Enum class will record as its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0711f3c581dc5072b2cf9e260f7e705f68754df8" translate="yes" xml:space="preserve">
          <source>What this means in practice is that to support finding distribution package metadata in locations other than the file system, subclass &lt;code&gt;Distribution&lt;/code&gt; and implement the abstract methods. Then from a custom finder, return instances of this derived &lt;code&gt;Distribution&lt;/code&gt; in the &lt;code&gt;find_distributions()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5390d096f592c9ee00a6e75cd2a40d199772255f" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the Execution Context?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d433886770959c5f8b1c7316fb956a27baddc4" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt; is applied in combination with other method descriptors, it should be applied as the innermost decorator, as shown in the following usage examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f660ad4252bf5d8a48ac42ba8b9a8060d0a917e" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; generates help messages, it needs some way to refer to each expected argument. By default, ArgumentParser objects use the &lt;a href=&quot;#dest&quot;&gt;dest&lt;/a&gt; value as the &amp;ldquo;name&amp;rdquo; of each object. By default, for positional argument actions, the &lt;a href=&quot;#dest&quot;&gt;dest&lt;/a&gt; value is used directly, and for optional argument actions, the &lt;a href=&quot;#dest&quot;&gt;dest&lt;/a&gt; value is uppercased. So, a single positional argument with &lt;code&gt;dest='bar'&lt;/code&gt; will be referred to as &lt;code&gt;bar&lt;/code&gt;. A single optional argument &lt;code&gt;--foo&lt;/code&gt; that should be followed by a single command-line argument will be referred to as &lt;code&gt;FOO&lt;/code&gt;. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb7e98f193941e94a08737449c4a58a55c161fa" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; is called with &lt;code&gt;action='store_const'&lt;/code&gt; or &lt;code&gt;action='append_const'&lt;/code&gt;. These actions add the &lt;code&gt;const&lt;/code&gt; value to one of the attributes of the object returned by &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt;. See the &lt;a href=&quot;#action&quot;&gt;action&lt;/a&gt; description for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908430b67ffab7192c58d413878590107f99ac8a" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; is called with option strings (like &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--foo&lt;/code&gt;) and &lt;code&gt;nargs='?'&lt;/code&gt;. This creates an optional argument that can be followed by zero or one command-line arguments. When parsing the command line, if the option string is encountered with no command-line argument following it, the value of &lt;code&gt;const&lt;/code&gt; will be assumed instead. See the &lt;a href=&quot;#nargs&quot;&gt;nargs&lt;/a&gt; description for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02441c1f960fb0baf4239fae2d2c88d890e1b2fc" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; is called, optional arguments will be identified by the &lt;code&gt;-&lt;/code&gt; prefix, and the remaining arguments will be assumed to be positional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629de685613646d00ea10bd953237cc1c7924121" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; is available then backwards-compatible functionality is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d39c6fdaaf5a388a75f42af12f2c38b99a2423" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#importlib.reload&quot;&gt;&lt;code&gt;reload()&lt;/code&gt;&lt;/a&gt; is executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd23a56d325ff0bf7a6e61d85cd4f34a2147f5d5" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; is initialized the main process is assigned a random string using &lt;a href=&quot;os#os.urandom&quot;&gt;&lt;code&gt;os.urandom()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11aa0c7fff9e9b567a187a2e5b13f5a8d5be7181" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; is supported, assignments to items in &lt;code&gt;os.environ&lt;/code&gt; are automatically translated into corresponding calls to &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt;; however, calls to &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; don&amp;rsquo;t update &lt;code&gt;os.environ&lt;/code&gt;, so it is actually preferable to assign to items of &lt;code&gt;os.environ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01e42f0e3d04cc243dd7a57f8e10baf4c6db3b1" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#os.stat_result.st_file_attributes&quot;&gt;&lt;code&gt;st_file_attributes&lt;/code&gt;&lt;/a&gt; has the &lt;code&gt;FILE_ATTRIBUTE_REPARSE_POINT&lt;/code&gt; set, this field contains the tag identifying the type of reparse point. See the &lt;code&gt;IO_REPARSE_TAG_*&lt;/code&gt; constants in the &lt;a href=&quot;stat#module-stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf790e480175785930a548355dd8f5086f5c9b7a" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt; is supported, deletion of items in &lt;code&gt;os.environ&lt;/code&gt; is automatically translated into a corresponding call to &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt;; however, calls to &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt; don&amp;rsquo;t update &lt;code&gt;os.environ&lt;/code&gt;, so it is actually preferable to delete items of &lt;code&gt;os.environ&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e962e2ecd1be54236efb9b9cd0dcb1c0a6890061" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; detects a source request (see &lt;a href=&quot;#shlex.shlex.source&quot;&gt;&lt;code&gt;source&lt;/code&gt;&lt;/a&gt; below) this method is given the following token as argument, and expected to return a tuple consisting of a filename and an open file-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003413e572cb08fc012d56140cf949b7ac4b28b8" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#ssl.SSLContext.keylog_filename&quot;&gt;&lt;code&gt;keylog_filename&lt;/code&gt;&lt;/a&gt; is supported and the environment variable &lt;code id=&quot;index-2&quot;&gt;SSLKEYLOGFILE&lt;/code&gt; is set, &lt;a href=&quot;#ssl.create_default_context&quot;&gt;&lt;code&gt;create_default_context()&lt;/code&gt;&lt;/a&gt; enables key logging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae592f12245b7b672b2b312ad6a41430e2206fbb" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; is creating a mock for you, it is common that the first thing you need to do is to configure the mock. Some of that configuration can be done in the call to patch. Any arbitrary keywords you pass into the call will be used to set attributes on the created mock:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984f54d038232b41fa8fb278710d0228edce2b46" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, whitespace immediately following the &lt;em&gt;delimiter&lt;/em&gt; is ignored. The default is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbc90776622a0bcb40ca2bd0c844997d03d08a5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;COLUMNS&lt;/code&gt; or &lt;code&gt;LINES&lt;/code&gt; is not defined, which is the common case, the terminal connected to &lt;a href=&quot;sys#sys.__stdout__&quot;&gt;&lt;code&gt;sys.__stdout__&lt;/code&gt;&lt;/a&gt; is queried by invoking &lt;a href=&quot;os#os.get_terminal_size&quot;&gt;&lt;code&gt;os.get_terminal_size()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1c8634db85a77e79d600408825132f805fd2d9" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;None&lt;/code&gt; is passed, it&amp;rsquo;s up to the class designer to decide the best response. For example, returning &lt;code&gt;None&lt;/code&gt; is appropriate if the class wishes to say that time objects don&amp;rsquo;t participate in the &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; protocols. It may be more useful for &lt;code&gt;utcoffset(None)&lt;/code&gt; to return the standard UTC offset, as there is no other convention for discovering the standard offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d247f34d37a9741e0b40611aec77465bb0b0659a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;PATH_INFO&lt;/code&gt; is just a &amp;ldquo;/&amp;rdquo;, this routine returns an empty string and appends a trailing slash to &lt;code&gt;SCRIPT_NAME&lt;/code&gt;, even though empty path segments are normally ignored, and &lt;code&gt;SCRIPT_NAME&lt;/code&gt; doesn&amp;rsquo;t normally end in a slash. This is intentional behavior, to ensure that an application can tell the difference between URIs ending in &lt;code&gt;/x&lt;/code&gt; from ones ending in &lt;code&gt;/x/&lt;/code&gt; when using this routine to do object traversal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3259a3e106d026a974e471af3e09c6877af341cc" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;True&lt;/code&gt;, raise exception &lt;a href=&quot;#csv.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; on bad CSV input. The default is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7249093ec9e4d3cc83bc42119bb94a864c87dc19" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;punctuation_chars&lt;/code&gt; is specified, the &lt;a href=&quot;#shlex.shlex.wordchars&quot;&gt;&lt;code&gt;wordchars&lt;/code&gt;&lt;/a&gt; attribute is augmented with the characters &lt;code&gt;~-./*?=&lt;/code&gt;. That is because these characters can appear in file names (including wildcards) and command-line arguments (e.g. &lt;code&gt;--color=auto&lt;/code&gt;). Hence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18714bad76b2938b84e76ca6a48899884c985828" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;cmd&lt;/em&gt; is &lt;code&gt;LOCK_SH&lt;/code&gt; or &lt;code&gt;LOCK_EX&lt;/code&gt;, it can also be bitwise ORed with &lt;code&gt;LOCK_NB&lt;/code&gt; to avoid blocking on lock acquisition. If &lt;code&gt;LOCK_NB&lt;/code&gt; is used and the lock cannot be acquired, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; will be raised and the exception will have an &lt;em&gt;errno&lt;/em&gt; attribute set to &lt;code&gt;EACCES&lt;/code&gt; or &lt;code&gt;EAGAIN&lt;/code&gt; (depending on the operating system; for portability, check for both values). On at least some systems, &lt;code&gt;LOCK_EX&lt;/code&gt; can only be used if the file descriptor refers to a file opened for writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83c29eb631fb560f29f322bca1a715e76bddb07" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;converters&lt;/em&gt; is given, it should be a dictionary where each key represents the name of a type converter and each value is a callable implementing the conversion from string to the desired datatype. Every converter gets its own corresponding &lt;code&gt;get*()&lt;/code&gt; method on the parser object and section proxies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9e0a3c67c495e5f8455996a807bfc6861a7af3" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;decode&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; (the default) the body is returned as a string without decoding the &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;. However, for a &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; of 8bit, an attempt is made to decode the original bytes using the &lt;code&gt;charset&lt;/code&gt; specified by the &lt;em&gt;Content-Type&lt;/em&gt; header, using the &lt;code&gt;replace&lt;/code&gt; error handler. If no &lt;code&gt;charset&lt;/code&gt; is specified, or if the &lt;code&gt;charset&lt;/code&gt; given is not recognized by the email package, the body is decoded using the default ASCII charset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8896ffa0276b29fe5abcec59ab4dbb6132b4621" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;default_section&lt;/em&gt; is given, it specifies the name for the special section holding default values for other sections and interpolation purposes (normally named &lt;code&gt;&quot;DEFAULT&quot;&lt;/code&gt;). This value can be retrieved and changed on runtime using the &lt;code&gt;default_section&lt;/code&gt; instance attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec4070356db325dd5a3a1a7a7c4a6d9c8470430" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;delimiters&lt;/em&gt; is given, it is used as the set of substrings that divide keys from values. When &lt;em&gt;comment_prefixes&lt;/em&gt; is given, it will be used as the set of substrings that prefix comments in otherwise empty lines. Comments can be indented. When &lt;em&gt;inline_comment_prefixes&lt;/em&gt; is given, it will be used as the set of substrings that prefix comments in non-empty lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017422042ed5196395fe163f83a712b974664f00" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;fileobj&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt;, the &lt;em&gt;filename&lt;/em&gt; argument is only used to be included in the &lt;strong&gt;gzip&lt;/strong&gt; file header, which may include the original filename of the uncompressed file. It defaults to the filename of &lt;em&gt;fileobj&lt;/em&gt;, if discernible; otherwise, it defaults to the empty string, and in this case the original filename is not included in the header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e007940c1a1ac1b90ed239aaae563d08c3c83e5c" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;follow_symlinks&lt;/em&gt; is false, and &lt;em&gt;src&lt;/em&gt; is a symbolic link, &lt;a href=&quot;#shutil.copy2&quot;&gt;&lt;code&gt;copy2()&lt;/code&gt;&lt;/a&gt; attempts to copy all metadata from the &lt;em&gt;src&lt;/em&gt; symbolic link to the newly-created &lt;em&gt;dst&lt;/em&gt; symbolic link. However, this functionality is not available on all platforms. On platforms where some or all of this functionality is unavailable, &lt;a href=&quot;#shutil.copy2&quot;&gt;&lt;code&gt;copy2()&lt;/code&gt;&lt;/a&gt; will preserve all the metadata it can; &lt;a href=&quot;#shutil.copy2&quot;&gt;&lt;code&gt;copy2()&lt;/code&gt;&lt;/a&gt; never raises an exception because it cannot preserve file metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef749f2221652284c69ca1d8aca13dd2c69b4877" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;func&lt;/em&gt; is a descriptor (such as a normal Python function, &lt;a href=&quot;functions#classmethod&quot;&gt;&lt;code&gt;classmethod()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#staticmethod&quot;&gt;&lt;code&gt;staticmethod()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;abstractmethod()&lt;/code&gt; or another instance of &lt;a href=&quot;#functools.partialmethod&quot;&gt;&lt;code&gt;partialmethod&lt;/code&gt;&lt;/a&gt;), calls to &lt;code&gt;__get__&lt;/code&gt; are delegated to the underlying descriptor, and an appropriate &lt;a href=&quot;#partial-objects&quot;&gt;partial object&lt;/a&gt; returned as the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7099d0edd318bbd39005c2813b14b352de9cce" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;func&lt;/em&gt; is a non-descriptor callable, an appropriate bound method is created dynamically. This behaves like a normal Python function when used as a method: the &lt;em&gt;self&lt;/em&gt; argument will be inserted as the first positional argument, even before the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; supplied to the &lt;a href=&quot;#functools.partialmethod&quot;&gt;&lt;code&gt;partialmethod&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e75310ec28936ea5e8f063d0b326f7a35ceaaa" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;limits&lt;/em&gt; is not given the function returns the &lt;em&gt;resource&lt;/em&gt; limit of the process &lt;em&gt;pid&lt;/em&gt;. When &lt;em&gt;limits&lt;/em&gt; is given the &lt;em&gt;resource&lt;/em&gt; limit of the process is set and the former resource limit is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06b2c5a32e26f67b12baa218e1362803c4f76e3" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;operation&lt;/em&gt; is not specified or &lt;code&gt;'open'&lt;/code&gt;, this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the &lt;strong&gt;start&lt;/strong&gt; command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821a2ea402d2f70a801f8008ac1f17c8a85bc5fa" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;pathsegments&lt;/em&gt; is empty, the current directory is assumed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75967987830adb468980e21d08d3b79aba8262fe" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;section&lt;/em&gt; is not given, return a list of &lt;em&gt;section_name&lt;/em&gt;, &lt;em&gt;section_proxy&lt;/em&gt; pairs, including DEFAULTSECT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceee677568b16b47671c5f9b32ba5aa7d309179a" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;skipkeys&lt;/em&gt; is false (the default) the function raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; when a key of a dictionary is not a string, otherwise such keys are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472dd01686c20762dc7bf928e1bdbe2e019a8702" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;sort_keys&lt;/em&gt; is true (the default) the keys for dictionaries will be written to the plist in sorted order, otherwise they will be written in the iteration order of the dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f903cfa4c4022ca7d7343290d72e1caad4bcee" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;st&lt;/em&gt; represents an &lt;code&gt;'eval'&lt;/code&gt; form, this function returns &lt;code&gt;True&lt;/code&gt;, otherwise it returns &lt;code&gt;False&lt;/code&gt;. This is useful, since code objects normally cannot be queried for this information using existing built-in functions. Note that the code objects created by &lt;a href=&quot;#parser.compilest&quot;&gt;&lt;code&gt;compilest()&lt;/code&gt;&lt;/a&gt; cannot be queried like this either, and are identical to those created by the built-in &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4701dad121dbacff21ec8bfc48ee5a248faeaec" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; (the default), the mapping will be added to the official MIME types, otherwise to the non-standard ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8f2e3f887ca166194ca9ecc8d2f3c166b6328e" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;strict&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; (the default), the parser won&amp;rsquo;t allow for any section or option duplicates while reading from a single source (file, string or dictionary), raising &lt;a href=&quot;#configparser.DuplicateSectionError&quot;&gt;&lt;code&gt;DuplicateSectionError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#configparser.DuplicateOptionError&quot;&gt;&lt;code&gt;DuplicateOptionError&lt;/code&gt;&lt;/a&gt;. When &lt;em&gt;empty_lines_in_values&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; (default: &lt;code&gt;True&lt;/code&gt;), each empty line marks the end of an option. Otherwise, internal empty lines of a multiline option are kept as part of the value. When &lt;em&gt;allow_no_value&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt; (default: &lt;code&gt;False&lt;/code&gt;), options without values are accepted; the value held for these is &lt;code&gt;None&lt;/code&gt; and they are serialized without the trailing delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13434fcf0e93bac1cc2c94533fc5d1edd99c06f4" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;symlinks&lt;/em&gt; is false, if the file pointed by the symlink doesn&amp;rsquo;t exist, an exception will be added in the list of errors raised in an &lt;a href=&quot;#shutil.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; exception at the end of the copy process. You can set the optional &lt;em&gt;ignore_dangling_symlinks&lt;/em&gt; flag to true if you want to silence this exception. Notice that this option has no effect on platforms that don&amp;rsquo;t support &lt;a href=&quot;os#os.symlink&quot;&gt;&lt;code&gt;os.symlink()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2a3c9dea5d3009f072403af68bc41dbee55be1" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;topdown&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the caller can modify the &lt;em&gt;dirnames&lt;/em&gt; list in-place (perhaps using &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt; or slice assignment), and &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; will only recurse into the subdirectories whose names remain in &lt;em&gt;dirnames&lt;/em&gt;; this can be used to prune the search, impose a specific order of visiting, or even to inform &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; about directories the caller creates or renames before it resumes &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; again. Modifying &lt;em&gt;dirnames&lt;/em&gt; when &lt;em&gt;topdown&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt; has no effect on the behavior of the walk, because in bottom-up mode the directories in &lt;em&gt;dirnames&lt;/em&gt; are generated before &lt;em&gt;dirpath&lt;/em&gt; itself is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cb053f7928b5af0b380bb285ed3b898bb57205" translate="yes" xml:space="preserve">
          <source>When &lt;strong&gt;pydoc&lt;/strong&gt; generates documentation, it uses the current environment and path to locate modules. Thus, invoking &lt;strong&gt;pydoc spam&lt;/strong&gt; documents precisely the version of the module you would get if you started the Python interpreter and typed &lt;code&gt;import spam&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966d03fa55cf89b971f2711329e87cfb6a8d70ef" translate="yes" xml:space="preserve">
          <source>When DST ends (the &amp;ldquo;end&amp;rdquo; line), there&amp;rsquo;s a potentially worse problem: there&amp;rsquo;s an hour that can&amp;rsquo;t be spelled unambiguously in local wall time: the last hour of daylight time. In Eastern, that&amp;rsquo;s times of the form 5:MM UTC on the day daylight time ends. The local wall clock leaps from 1:59 (daylight time) back to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous. &lt;code&gt;astimezone()&lt;/code&gt; mimics the local clock&amp;rsquo;s behavior by mapping two adjacent UTC hours into the same local hour then. In the Eastern example, UTC times of the form 5:MM and 6:MM both map to 1:MM when converted to Eastern, but earlier times have the &lt;a href=&quot;#datetime.datetime.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; attribute set to 0 and the later times have it set to 1. For example, at the Fall back transition of 2016, we get:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e5d2b07f1f34036b37e1fe11345da1aa1e1630" translate="yes" xml:space="preserve">
          <source>When DST starts (the &amp;ldquo;start&amp;rdquo; line), the local wall clock leaps from 1:59 to 3:00. A wall time of the form 2:MM doesn&amp;rsquo;t really make sense on that day, so &lt;code&gt;astimezone(Eastern)&lt;/code&gt; won&amp;rsquo;t deliver a result with &lt;code&gt;hour == 2&lt;/code&gt; on the day DST begins. For example, at the Spring forward transition of 2016, we get:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607bcef959d2c892c1b6a1b372716350bf979b2f" translate="yes" xml:space="preserve">
          <source>When IDLE first starts, it attempts to read user configuration files in &lt;code&gt;~/.idlerc/&lt;/code&gt; (~ is one&amp;rsquo;s home directory). If there is a problem, an error message should be displayed. Leaving aside random disk glitches, this can be prevented by never editing the files by hand, using the configuration dialog, under Options, instead Options. Once it happens, the solution may be to delete one or more of the configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8cfacfb0ec66c495be055f582089d68c4b5869" translate="yes" xml:space="preserve">
          <source>When Python code uses the &lt;a href=&quot;#module-locale&quot;&gt;&lt;code&gt;locale&lt;/code&gt;&lt;/a&gt; module to change the locale, this also affects the embedding application. If the embedding application doesn&amp;rsquo;t want this to happen, it should remove the &lt;code&gt;_locale&lt;/code&gt; extension module (which does all the work) from the table of built-in modules in the &lt;code&gt;config.c&lt;/code&gt; file, and make sure that the &lt;code&gt;_locale&lt;/code&gt; module is not accessible as a shared library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f41d4f67b29d3c1098269b891e9bec309ad5e3" translate="yes" xml:space="preserve">
          <source>When Shell has the focus, it controls the keyboard and screen. This is normally transparent, but functions that directly access the keyboard and screen will not work. These include system-specific functions that determine whether a key has been pressed and if so, which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a359f4fa5e01180f16295319eaf53142e2c0994" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object is passed in response to a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;dt.tzinfo&lt;/code&gt; is the same object as &lt;em&gt;self&lt;/em&gt;. &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; methods can rely on this, unless user code calls &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; methods directly. The intent is that the &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; methods interpret &lt;em&gt;dt&lt;/em&gt; as being in local time, and not need worry about objects in other timezones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc52f05baa4394318109ef8dd16b0838e7819096" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87ed137d28adb4e7367125bf334be63876e2c24" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6e7fb6abd8fd4a202f9606c8570fc783915cb4" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance, the &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers are omitted and the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca33d6c3c9d25ed20394d7c3deaa901e7846bdec" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance&amp;rsquo;s original headers are modified, the visible headers are not automatically modified to correspond. This method updates the visible headers as follows: each visible header with a corresponding original header is set to the value of the original header, each visible header without a corresponding original header is removed, and any of &lt;em&gt;Date&lt;/em&gt;, &lt;em&gt;From&lt;/em&gt;, &lt;em&gt;Reply-To&lt;/em&gt;, &lt;em&gt;To&lt;/em&gt;, &lt;em&gt;CC&lt;/em&gt;, and &lt;em&gt;Subject&lt;/em&gt; that are present in the original headers but not the visible headers are added to the visible headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75531aef3bfb04565ed01de282e0e8a5dd90cd56" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a351f9e4fca060cf05b544590758e13c938d87a1" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1152ba9f8c4290368623aeaac928cca549892729" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance, the &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers are omitted and the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebde1da7e650fdde9e9869ca15dbe9af33e8273e" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance, the &amp;ldquo;From &amp;rdquo; line is copied and all flags directly correspond:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a451fe8c2a75c0a9d07b757e5b645a5db0c95a" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; object is created, it will inherit the authentication key of its parent process, although this may be changed by setting &lt;a href=&quot;#multiprocessing.Process.authkey&quot;&gt;&lt;code&gt;authkey&lt;/code&gt;&lt;/a&gt; to another byte string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd552e17015aa5c66496ae4f45468cddbe08da34" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object is created, it acquires a policy. If the message is created by a &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt;, a policy passed to the parser will be the policy used by the message it creates. If the message is created by the program, then the policy can be specified when it is created. When a message is passed to a &lt;a href=&quot;email.generator#module-email.generator&quot;&gt;&lt;code&gt;generator&lt;/code&gt;&lt;/a&gt;, the generator uses the policy from the message by default, but you can also pass a specific policy to the generator that will override the one stored on the message object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="796474d1752f90ea152f5dd6af4e1499894479a4" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt; function returns, a new &lt;a href=&quot;#StopIteration&quot;&gt;&lt;code&gt;StopIteration&lt;/code&gt;&lt;/a&gt; instance is raised, and the value returned by the function is used as the &lt;code&gt;value&lt;/code&gt; parameter to the constructor of the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43590acc1cf538fae98de86cea41d189b3c470b" translate="yes" xml:space="preserve">
          <source>When a Future object is &lt;em&gt;awaited&lt;/em&gt; it means that the coroutine will wait until the Future is resolved in some other place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a501ed1c9da143e744360045a70756ab3a3c2bbc" translate="yes" xml:space="preserve">
          <source>When a HTTP/1.1 compliant server receives an &lt;code&gt;Expect: 100-continue&lt;/code&gt; request header it responds back with a &lt;code&gt;100 Continue&lt;/code&gt; followed by &lt;code&gt;200
OK&lt;/code&gt; headers. This method can be overridden to raise an error if the server does not want the client to continue. For e.g. server can chose to send &lt;code&gt;417
Expectation Failed&lt;/code&gt; as a response header and &lt;code&gt;return False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f1159e7b0d3c34483e2df19f60fd60e258658c" translate="yes" xml:space="preserve">
          <source>When a binary (or in-place) method returns &lt;code&gt;NotImplemented&lt;/code&gt; the interpreter will try the reflected operation on the other type (or some other fallback, depending on the operator). If all attempts return &lt;code&gt;NotImplemented&lt;/code&gt;, the interpreter will raise an appropriate exception. Incorrectly returning &lt;code&gt;NotImplemented&lt;/code&gt; will result in a misleading error message or the &lt;code&gt;NotImplemented&lt;/code&gt; value being returned to Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fc5ba727ad83fc978cb83426ef44950fb22f0c" translate="yes" xml:space="preserve">
          <source>When a client connects, you&amp;rsquo;ll call &lt;code&gt;accept()&lt;/code&gt; on the socket to get the new socket from the other end, and use the context&amp;rsquo;s &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt; method to create a server-side SSL socket for the connection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14355459d065a2126b707c1cdaf9a9ce0eb37d01" translate="yes" xml:space="preserve">
          <source>When a coroutine function is called, but not awaited (e.g. &lt;code&gt;coro()&lt;/code&gt; instead of &lt;code&gt;await coro()&lt;/code&gt;) or the coroutine is not scheduled with &lt;a href=&quot;asyncio-task#asyncio.create_task&quot;&gt;&lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/a&gt;, asyncio will emit a &lt;a href=&quot;exceptions#RuntimeWarning&quot;&gt;&lt;code&gt;RuntimeWarning&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80027fbdb3d8bf1a0774de4650e2b1aab343032a" translate="yes" xml:space="preserve">
          <source>When a coroutine is wrapped into a &lt;em&gt;Task&lt;/em&gt; with functions like &lt;a href=&quot;#asyncio.create_task&quot;&gt;&lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/a&gt; the coroutine is automatically scheduled to run soon:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bdbe2316b1cfa1ea855e4c3c8a620f07d98c69" translate="yes" xml:space="preserve">
          <source>When a database is accessed by multiple connections, and one of the processes modifies the database, the SQLite database is locked until that transaction is committed. The &lt;em&gt;timeout&lt;/em&gt; parameter specifies how long the connection should wait for the lock to go away until raising an exception. The default for the timeout parameter is 5.0 (five seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58541f13ed67949530f68a704b5ad0ef345cd0ab" translate="yes" xml:space="preserve">
          <source>When a foreign function is called, each actual argument is passed to the &lt;code&gt;from_param()&lt;/code&gt; class method of the items in the &lt;a href=&quot;#ctypes._FuncPtr.argtypes&quot;&gt;&lt;code&gt;argtypes&lt;/code&gt;&lt;/a&gt; tuple, this method allows adapting the actual argument to an object that the foreign function accepts. For example, a &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt; item in the &lt;a href=&quot;#ctypes._FuncPtr.argtypes&quot;&gt;&lt;code&gt;argtypes&lt;/code&gt;&lt;/a&gt; tuple will convert a string passed as argument into a bytes object using ctypes conversion rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b49ea0d90c828ff025e45c681bc2ce260779892" translate="yes" xml:space="preserve">
          <source>When a form is submitted in the &amp;ldquo;old&amp;rdquo; format (as the query string or as a single data part of type &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt;), the items will actually be instances of the class &lt;code&gt;MiniFieldStorage&lt;/code&gt;. In this case, the &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, and &lt;code&gt;filename&lt;/code&gt; attributes are always &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8b51f9aced6e65bff3f4369665f2c727321580" translate="yes" xml:space="preserve">
          <source>When a header parameter is encoded in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; format, &lt;a href=&quot;email.compat32-message#email.message.Message.get_param&quot;&gt;&lt;code&gt;Message.get_param&lt;/code&gt;&lt;/a&gt; may return a 3-tuple containing the character set, language, and value. &lt;a href=&quot;#email.utils.collapse_rfc2231_value&quot;&gt;&lt;code&gt;collapse_rfc2231_value()&lt;/code&gt;&lt;/a&gt; turns this into a unicode string. Optional &lt;em&gt;errors&lt;/em&gt; is passed to the &lt;em&gt;errors&lt;/em&gt; argument of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;stdtypes#str.encode&quot;&gt;&lt;code&gt;encode()&lt;/code&gt;&lt;/a&gt; method; it defaults to &lt;code&gt;'replace'&lt;/code&gt;. Optional &lt;em&gt;fallback_charset&lt;/em&gt; specifies the character set to use if the one in the &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; header is not known by Python; it defaults to &lt;code&gt;'us-ascii'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d710381a25baff3243b6945ecd27556783f6e36" translate="yes" xml:space="preserve">
          <source>When a letter is first encountered, it is missing from the mapping, so the &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt; function calls &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/a&gt; to supply a default count of zero. The increment operation then builds up the count for each letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fdfac5d569cc8091912ece10591faa073940b3" translate="yes" xml:space="preserve">
          <source>When a logger is created, the level is set to &lt;code&gt;NOTSET&lt;/code&gt; (which causes all messages to be processed when the logger is the root logger, or delegation to the parent when the logger is a non-root logger). Note that the root logger is created with level &lt;code&gt;WARNING&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c121beda2f5083b1511f5b13c9899bd1d6ba9b6" translate="yes" xml:space="preserve">
          <source>When a module is reloaded, its dictionary (containing the module&amp;rsquo;s global variables) is retained. Redefinitions of names will override the old definitions, so this is generally not a problem. If the new version of a module does not define a name that was defined by the old version, the old definition remains. This feature can be used to the module&amp;rsquo;s advantage if it maintains a global table or cache of objects &amp;mdash; with a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; statement it can test for the table&amp;rsquo;s presence and skip its initialization if desired:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102ecaca0081733892ac9c0922de0ed7ff3dd82f" translate="yes" xml:space="preserve">
          <source>When a process exits, it attempts to terminate all of its daemonic child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f779be4e8bb9308b016d27968c5002b765b616cf" translate="yes" xml:space="preserve">
          <source>When a program outputs text, the result is determined by the corresponding output device. When IDLE executes user code, &lt;code&gt;sys.stdout&lt;/code&gt; and &lt;code&gt;sys.stderr&lt;/code&gt; are connected to the display area of IDLE&amp;rsquo;s Shell. Some of its features are inherited from the underlying Tk Text widget. Others are programmed additions. Where it matters, Shell is designed for development rather than production runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe3fda7a7625ed5821ce75af517849bfdd0407e" translate="yes" xml:space="preserve">
          <source>When a sequence of two-element tuples is used as the &lt;em&gt;query&lt;/em&gt; argument, the first element of each tuple is a key and the second is a value. The value element in itself can be a sequence and in that case, if the optional parameter &lt;em&gt;doseq&lt;/em&gt; is evaluates to &lt;code&gt;True&lt;/code&gt;, individual &lt;code&gt;key=value&lt;/code&gt; pairs separated by &lt;code&gt;'&amp;amp;'&lt;/code&gt; are generated for each element of the value sequence for the key. The order of parameters in the encoded string will match the order of parameter tuples in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4f273f661846773d9602c6e5e1ab50f3c31c65" translate="yes" xml:space="preserve">
          <source>When a snapshot is taken, tracebacks of traces are limited to &lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt;&lt;code&gt;get_traceback_limit()&lt;/code&gt;&lt;/a&gt; frames. See the &lt;a href=&quot;#tracemalloc.take_snapshot&quot;&gt;&lt;code&gt;take_snapshot()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0093f870eef1dbea47bfba379efd8c3efa29578" translate="yes" xml:space="preserve">
          <source>When a test needs to look more deeply into the warnings, rather than just checking whether or not they occurred, code like this can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace6e48a34ddec70b997e7ed4ef30cd1200e48dd" translate="yes" xml:space="preserve">
          <source>When a tuple is returned, it must be between two and six items long. Optional items can either be omitted, or &lt;code&gt;None&lt;/code&gt; can be provided as their value. The semantics of each item are in order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e91619aaae63d9b1d57efcb79896aa3fdd3e043" translate="yes" xml:space="preserve">
          <source>When a tuple with an incorrect length is passed to a function expecting a &lt;a href=&quot;#time.struct_time&quot;&gt;&lt;code&gt;struct_time&lt;/code&gt;&lt;/a&gt;, or having elements of the wrong type, a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122b5a9e98f973011f8c23604c35ee0744f01180" translate="yes" xml:space="preserve">
          <source>When a virtual environment is active (i.e., the virtual environment&amp;rsquo;s Python interpreter is running), the attributes &lt;a href=&quot;sys#sys.prefix&quot;&gt;&lt;code&gt;sys.prefix&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sys#sys.exec_prefix&quot;&gt;&lt;code&gt;sys.exec_prefix&lt;/code&gt;&lt;/a&gt; point to the base directory of the virtual environment, whereas &lt;a href=&quot;sys#sys.base_prefix&quot;&gt;&lt;code&gt;sys.base_prefix&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sys#sys.base_exec_prefix&quot;&gt;&lt;code&gt;sys.base_exec_prefix&lt;/code&gt;&lt;/a&gt; point to the non-virtual environment Python installation which was used to create the virtual environment. If a virtual environment is not active, then &lt;a href=&quot;sys#sys.prefix&quot;&gt;&lt;code&gt;sys.prefix&lt;/code&gt;&lt;/a&gt; is the same as &lt;a href=&quot;sys#sys.base_prefix&quot;&gt;&lt;code&gt;sys.base_prefix&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sys#sys.exec_prefix&quot;&gt;&lt;code&gt;sys.exec_prefix&lt;/code&gt;&lt;/a&gt; is the same as &lt;a href=&quot;sys#sys.base_exec_prefix&quot;&gt;&lt;code&gt;sys.base_exec_prefix&lt;/code&gt;&lt;/a&gt; (they all point to a non-virtual environment Python installation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49099fe8787d9b66d249172b5b8c16fae8d8776e" translate="yes" xml:space="preserve">
          <source>When a virtual environment is active, any options that change the installation path will be ignored from all &lt;a href=&quot;distutils#module-distutils&quot;&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; configuration files to prevent projects being inadvertently installed outside of the virtual environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73006af8303cac324a6bee6ebfb9a71386816b0" translate="yes" xml:space="preserve">
          <source>When activated, code entered in the Shell or run from an Editor will run under the debugger. In the Editor, breakpoints can be set with the context menu. This feature is still incomplete and somewhat experimental.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbdd2a51e4781c318a7a1a81e4c3eb4ba6ae291d" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc891f4c25b8225fd0001cdae26af6639e7537e" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46ed5b47728cdf79b8e4b0ea7954bf28bac75b9" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance, the &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers are omitted and the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e173b2ac8c61d6fbcc0ffb178a6f5c0aa5074e9e" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a95e85d749bc7be23343bcb5277621335a1948d" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance, a &amp;ldquo;From &amp;rdquo; line is generated based upon the &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance&amp;rsquo;s delivery date, and the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e255b577d6bbc86290e4f9d517b3ffbe62bbaae4" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d8c3d31070cdae2a2783c0d5f2693fbf078f89" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance, the &amp;ldquo;From &amp;rdquo; line is copied and all flags directly correspond:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286e3f12905a38714edf02bf122a3f8052a6268d" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4296d06ab3b5a40fe3f89cb3f43ef0aef304f8" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon a &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance, a &amp;ldquo;From &amp;rdquo; line is generated based upon the &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; instance&amp;rsquo;s delivery date, and the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0342e5504d800d945bf2084fb63194683176ac" translate="yes" xml:space="preserve">
          <source>When an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance is created based upon an &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; instance, the following conversions take place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ae3b18f623ec44c4c53a80c85290adab2b1644" translate="yes" xml:space="preserve">
          <source>When an array object is printed or converted to a string, it is represented as &lt;code&gt;array(typecode, initializer)&lt;/code&gt;. The &lt;em&gt;initializer&lt;/em&gt; is omitted if the array is empty, otherwise it is a string if the &lt;em&gt;typecode&lt;/em&gt; is &lt;code&gt;'u'&lt;/code&gt;, otherwise it is a list of numbers. The string is guaranteed to be able to be converted back to an array with the same type and value using &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;, so long as the &lt;a href=&quot;#array.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; class has been imported using &lt;code&gt;from array import array&lt;/code&gt;. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57a24f717690d606e0285653c2532690dac8586" translate="yes" xml:space="preserve">
          <source>When an auditing event is raised through the &lt;a href=&quot;#sys.audit&quot;&gt;&lt;code&gt;sys.audit()&lt;/code&gt;&lt;/a&gt; function, each hook will be called in the order it was added with the event name and the tuple of arguments. Native hooks added by &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_AddAuditHook&quot;&gt;&lt;code&gt;PySys_AddAuditHook()&lt;/code&gt;&lt;/a&gt; are called first, followed by hooks added in the current interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a060e94770f6ada605adcbe7b40294d9f24ee084" translate="yes" xml:space="preserve">
          <source>When an exception is raised and uncaught, the interpreter calls &lt;code&gt;sys.excepthook&lt;/code&gt; with three arguments, the exception class, exception instance, and a traceback object. In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits. The handling of such top-level exceptions can be customized by assigning another three-argument function to &lt;code&gt;sys.excepthook&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cb90ca3fe9c876d8490b4b2d59b0b2fc0154fc" translate="yes" xml:space="preserve">
          <source>When an interval timer fires, a signal is sent to the process. The signal sent is dependent on the timer being used; &lt;a href=&quot;#signal.ITIMER_REAL&quot;&gt;&lt;code&gt;signal.ITIMER_REAL&lt;/code&gt;&lt;/a&gt; will deliver &lt;code&gt;SIGALRM&lt;/code&gt;, &lt;a href=&quot;#signal.ITIMER_VIRTUAL&quot;&gt;&lt;code&gt;signal.ITIMER_VIRTUAL&lt;/code&gt;&lt;/a&gt; sends &lt;code&gt;SIGVTALRM&lt;/code&gt;, and &lt;a href=&quot;#signal.ITIMER_PROF&quot;&gt;&lt;code&gt;signal.ITIMER_PROF&lt;/code&gt;&lt;/a&gt; will deliver &lt;code&gt;SIGPROF&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d729011a0caf801b2d3090cac48b85a3ba68cf73" translate="yes" xml:space="preserve">
          <source>When an object is put on a queue, the object is pickled and a background thread later flushes the pickled data to an underlying pipe. This has some consequences which are a little surprising, but should not cause any practical difficulties &amp;ndash; if they really bother you then you can instead use a queue created with a &lt;a href=&quot;#multiprocessing-managers&quot;&gt;manager&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c6a7ab062a3f1ac7a1fa12015f2ab3e6c6e8ef" translate="yes" xml:space="preserve">
          <source>When an ordinary Python script raises an unhandled exception (for whatever reason: of a typo in a module name, a file that can&amp;rsquo;t be opened, etc.), the Python interpreter prints a nice traceback and exits. While the Python interpreter will still do this when your CGI script raises an exception, most likely the traceback will end up in one of the HTTP server&amp;rsquo;s log files, or be discarded altogether.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b18b0dca198469e2e5821b568a8af8553f7137" translate="yes" xml:space="preserve">
          <source>When another &lt;em&gt;operation&lt;/em&gt; is given, it must be a &amp;ldquo;command verb&amp;rdquo; that specifies what should be done with the file. Common verbs documented by Microsoft are &lt;code&gt;'print'&lt;/code&gt; and &lt;code&gt;'edit'&lt;/code&gt; (to be used on files) as well as &lt;code&gt;'explore'&lt;/code&gt; and &lt;code&gt;'find'&lt;/code&gt; (to be used on directories).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d9c23255dc7b8ca6f19ef5a940eb877d9642dd" translate="yes" xml:space="preserve">
          <source>When another data type is mixed in, the &lt;code&gt;value&lt;/code&gt; attribute is &lt;em&gt;not the same&lt;/em&gt; as the enum member itself, although it is equivalent and will compare equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782a74b6093e9a274767f8a985a07199d8c71046" translate="yes" xml:space="preserve">
          <source>When attempting to pack a non-integer using any of the integer conversion codes, if the non-integer has a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt; method then that method is called to convert the argument to an integer before packing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f8d78459f2077063513420c80633ee6ca35e36" translate="yes" xml:space="preserve">
          <source>When called as a program from the command line, the following form is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7774c1b19e4f3bda02017096fe4f300d221be9d7" translate="yes" xml:space="preserve">
          <source>When called with the entire population, this gives the population variance &amp;sigma;&amp;sup2;. When called on a sample instead, this is the biased sample variance s&amp;sup2;, also known as variance with N degrees of freedom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1510a977d9eec8bae218f453f2180521adfa1a6" translate="yes" xml:space="preserve">
          <source>When called without arguments this function removes the control-c handler if it has been installed. This function can also be used as a test decorator to temporarily remove the handler while the test is being executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b31def5bdc28465822c89803310f8ec7825150" translate="yes" xml:space="preserve">
          <source>When called, the generic function dispatches on the type of the first argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f7a0d990e54e7e4ff423f9bcf931e35657cbac" translate="yes" xml:space="preserve">
          <source>When calling the &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; constructor directly, &lt;a href=&quot;#ssl.CERT_NONE&quot;&gt;&lt;code&gt;CERT_NONE&lt;/code&gt;&lt;/a&gt; is the default. Since it does not authenticate the other peer, it can be insecure, especially in client mode where most of time you would like to ensure the authenticity of the server you&amp;rsquo;re talking to. Therefore, when in client mode, it is highly recommended to use &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt;. However, it is in itself not sufficient; you also have to check that the server certificate, which can be obtained by calling &lt;a href=&quot;#ssl.SSLSocket.getpeercert&quot;&gt;&lt;code&gt;SSLSocket.getpeercert()&lt;/code&gt;&lt;/a&gt;, matches the desired service. For many protocols and applications, the service can be identified by the hostname; in this case, the &lt;a href=&quot;#ssl.match_hostname&quot;&gt;&lt;code&gt;match_hostname()&lt;/code&gt;&lt;/a&gt; function can be used. This common check is automatically performed when &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;SSLContext.check_hostname&lt;/code&gt;&lt;/a&gt; is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc40bbe639d96f637bd93855f1791e60c735e90" translate="yes" xml:space="preserve">
          <source>When calling with the two argument form you omit the replacement object, and a mock is created for you and passed in as an extra argument to the decorated function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e0548d845776f7d9fb1bb48334763d7bb375ac" translate="yes" xml:space="preserve">
          <source>When compared to &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt;, this object lacks the following features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856a45270239471af6c5f0a357260107cdc44d90" translate="yes" xml:space="preserve">
          <source>When comparing the output of &lt;a href=&quot;#hmac.HMAC.hexdigest&quot;&gt;&lt;code&gt;hexdigest()&lt;/code&gt;&lt;/a&gt; to an externally-supplied digest during a verification routine, it is recommended to use the &lt;a href=&quot;#hmac.compare_digest&quot;&gt;&lt;code&gt;compare_digest()&lt;/code&gt;&lt;/a&gt; function instead of the &lt;code&gt;==&lt;/code&gt; operator to reduce the vulnerability to timing attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92028d8951df45be6cbda2380b77dd7080678d69" translate="yes" xml:space="preserve">
          <source>When comparing the output of &lt;a href=&quot;#hmac.digest&quot;&gt;&lt;code&gt;digest()&lt;/code&gt;&lt;/a&gt; to an externally-supplied digest during a verification routine, it is recommended to use the &lt;a href=&quot;#hmac.compare_digest&quot;&gt;&lt;code&gt;compare_digest()&lt;/code&gt;&lt;/a&gt; function instead of the &lt;code&gt;==&lt;/code&gt; operator to reduce the vulnerability to timing attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc34f0feb28081050c116e0b782b908cc2cd4bfa" translate="yes" xml:space="preserve">
          <source>When comparing unions, the argument order is ignored, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed05a329db63e10d1f8fb992f1545e7cd8c147c7" translate="yes" xml:space="preserve">
          <source>When compiling a string with multi-line code in &lt;code&gt;'single'&lt;/code&gt; or &lt;code&gt;'eval'&lt;/code&gt; mode, input must be terminated by at least one newline character. This is to facilitate detection of incomplete and complete statements in the &lt;a href=&quot;code#module-code&quot;&gt;&lt;code&gt;code&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696dab8a84aeff4c3a2e883a2314face9ba4d539" translate="yes" xml:space="preserve">
          <source>When computing the next rollover time for the first time (when the handler is created), the last modification time of an existing log file, or else the current time, is used to compute when the next rotation will occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d884d8babe5a567edcfd0ea18f46faab02d32494" translate="yes" xml:space="preserve">
          <source>When connected, &lt;a href=&quot;#nntplib.NNTP&quot;&gt;&lt;code&gt;NNTP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#nntplib.NNTP_SSL&quot;&gt;&lt;code&gt;NNTP_SSL&lt;/code&gt;&lt;/a&gt; objects support the following methods and attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060ff3bcb23f907c12e71640fb12cf92d2d0e3e5" translate="yes" xml:space="preserve">
          <source>When converting from a string, the string must not contain whitespace around the central &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; operator. For example, &lt;code&gt;complex('1+2j')&lt;/code&gt; is fine, but &lt;code&gt;complex('1 + 2j')&lt;/code&gt; raises &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c5e5ce837c0e22ffcd56a47571a9b383672bcb" translate="yes" xml:space="preserve">
          <source>When copying an existing archive, file objects supplied only need &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;readline&lt;/code&gt;, or &lt;code&gt;write&lt;/code&gt; methods. When creating an archive from a directory, if the target is a file object it will be passed to the &lt;code&gt;zipfile.ZipFile&lt;/code&gt; class, and must supply the methods needed by that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f08dfe8f53d7f93ca2ca215d1e0ef6f39c519e" translate="yes" xml:space="preserve">
          <source>When counting with floating point numbers, better accuracy can sometimes be achieved by substituting multiplicative code such as: &lt;code&gt;(start + step * i
for i in count())&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a51eebc4aef573b36497fe8c2650ded21d78cac" translate="yes" xml:space="preserve">
          <source>When creating &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; objects from scratch, you often need to encode the payloads for transport through compliant mail servers. This is especially true for &lt;em&gt;image/*&lt;/em&gt; and &lt;em&gt;text/*&lt;/em&gt; type messages containing binary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a423c248f1413b6e1e0f4f3faa51f5f733b512cd" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;DateHeader&lt;/code&gt;, &lt;em&gt;value&lt;/em&gt; may be &lt;a href=&quot;datetime#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instance. This means, for example, that the following code is valid and does what one would expect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4db0b5c5393d0800539c706fee74aab4223e2df" translate="yes" xml:space="preserve">
          <source>When creating a breakpoint, its associated filename should be in canonical form. If a &lt;em&gt;funcname&lt;/em&gt; is defined, a breakpoint hit will be counted when the first line of that function is executed. A conditional breakpoint always counts a hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672bf0c86c2581afe64984ce3a00746c2792ef5c" translate="yes" xml:space="preserve">
          <source>When creating new WSGI application objects, frameworks, servers, or middleware, it can be useful to validate the new code&amp;rsquo;s conformance using &lt;a href=&quot;#module-wsgiref.validate&quot;&gt;&lt;code&gt;wsgiref.validate&lt;/code&gt;&lt;/a&gt;. This module provides a function that creates WSGI application objects that validate communications between a WSGI server or gateway and a WSGI application object, to check both sides for protocol conformance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5bb3321cca6ff1fb46c71f838479a459fa1e5d" translate="yes" xml:space="preserve">
          <source>When decompressing a stream, the window size must not be smaller than the size originally used to compress the stream; using a too-small value may result in an &lt;a href=&quot;#zlib.error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; exception. The default &lt;em&gt;wbits&lt;/em&gt; value corresponds to the largest window size and requires a zlib header and trailer to be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d74f26e8d112aef4595ce1a87bdb3b198f7b5e3" translate="yes" xml:space="preserve">
          <source>When decompressing, the value of the last modification time field in the most recently read header may be read from this attribute, as an integer. The initial value before reading any headers is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02833f75f25f075b18c22a28c5aa2ba25a8444fc" translate="yes" xml:space="preserve">
          <source>When each key is encountered for the first time, it is not already in the mapping; so an entry is automatically created using the &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt; function which returns an empty &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;list.append()&lt;/code&gt; operation then attaches the value to the new list. When keys are encountered again, the look-up proceeds normally (returning the list for that key) and the &lt;code&gt;list.append()&lt;/code&gt; operation adds another value to the list. This technique is simpler and faster than an equivalent technique using &lt;a href=&quot;stdtypes#dict.setdefault&quot;&gt;&lt;code&gt;dict.setdefault()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9887fe8e3c1a8945458c737be092d9fc035304db" translate="yes" xml:space="preserve">
          <source>When enabled on client-side sockets, the client signals the server that it supports post-handshake authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b197cf7dc7faf88b3cb2e54d710a0d303daee67" translate="yes" xml:space="preserve">
          <source>When enabled on server-side sockets, &lt;a href=&quot;#ssl.SSLContext.verify_mode&quot;&gt;&lt;code&gt;SSLContext.verify_mode&lt;/code&gt;&lt;/a&gt; must be set to &lt;a href=&quot;#ssl.CERT_OPTIONAL&quot;&gt;&lt;code&gt;CERT_OPTIONAL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt;, too. The actual client cert exchange is delayed until &lt;a href=&quot;#ssl.SSLSocket.verify_client_post_handshake&quot;&gt;&lt;code&gt;SSLSocket.verify_client_post_handshake()&lt;/code&gt;&lt;/a&gt; is called and some I/O is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a621755ca7f41470229f75442067ad0d1c20faff" translate="yes" xml:space="preserve">
          <source>When encountering a &lt;code&gt;multipart/related&lt;/code&gt;, check the &lt;code&gt;start&lt;/code&gt; parameter and if a part with a matching &lt;em&gt;Content-ID&lt;/em&gt; is found, consider only it when looking for candidate matches. Otherwise consider only the first (default root) part of the &lt;code&gt;multipart/related&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d720d1be1de6b788b045c550171b49ace0d34e71" translate="yes" xml:space="preserve">
          <source>When executed without arguments &lt;a href=&quot;#unittest-test-discovery&quot;&gt;Test Discovery&lt;/a&gt; is started:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f5758875cf66a5a33444f0562ccc5e99c8db03" translate="yes" xml:space="preserve">
          <source>When first created the logger has level &lt;code&gt;logging.NOTSET&lt;/code&gt; and no default handler. Messages sent to this logger will not by default propagate to the root logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69309127fb83429d8269e5e345250adcff5991bf" translate="yes" xml:space="preserve">
          <source>When formatting a number (&lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#complex&quot;&gt;&lt;code&gt;complex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt; and subclasses) with the &lt;code&gt;n&lt;/code&gt; type (ex: &lt;code&gt;'{:n}'.format(1234)&lt;/code&gt;), the function temporarily sets the &lt;code&gt;LC_CTYPE&lt;/code&gt; locale to the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale to decode &lt;code&gt;decimal_point&lt;/code&gt; and &lt;code&gt;thousands_sep&lt;/code&gt; fields of &lt;code&gt;localeconv()&lt;/code&gt; if they are non-ASCII or longer than 1 byte, and the &lt;code&gt;LC_NUMERIC&lt;/code&gt; locale is different than the &lt;code&gt;LC_CTYPE&lt;/code&gt; locale. This temporary change affects other threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6c0444904253e2eedbaa36573956718aa2948c" translate="yes" xml:space="preserve">
          <source>When generating annotated listings, mark lines which were not executed with &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8e8b32da74a37571c34b0e9517346b53020b30" translate="yes" xml:space="preserve">
          <source>When identifying things (such as host names) in the internet, it is often necessary to compare such identifications for &amp;ldquo;equality&amp;rdquo;. Exactly how this comparison is executed may depend on the application domain, e.g. whether it should be case-insensitive or not. It may be also necessary to restrict the possible identifications, to allow only identifications consisting of &amp;ldquo;printable&amp;rdquo; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7e37fe6162273e5e4281cf61c42ffd2d46e957" translate="yes" xml:space="preserve">
          <source>When implementing coroutine schedulers and for other advanced uses of generators, it is useful to determine whether a generator is currently executing, is waiting to start or resume or execution, or has already terminated. &lt;a href=&quot;#inspect.getgeneratorstate&quot;&gt;&lt;code&gt;getgeneratorstate()&lt;/code&gt;&lt;/a&gt; allows the current state of a generator to be determined easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5376e91d28fee3241c94e60ac21eaf1934266aa4" translate="yes" xml:space="preserve">
          <source>When in non-blocking mode, a &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; is raised if the data needed to be written to the raw stream but it couldn&amp;rsquo;t accept all the data without blocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949c191a2b89d062d5cb3c84d7a255f7ab9b1114" translate="yes" xml:space="preserve">
          <source>When inheriting from &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; for threaded connection behavior, you should explicitly declare how you want your threads to behave on an abrupt shutdown. The &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; class defines an attribute &lt;em&gt;daemon_threads&lt;/em&gt;, which indicates whether or not the server should wait for thread termination. You should set the flag explicitly if you would like threads to behave autonomously; the default is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, meaning that Python will not exit until all threads created by &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; have exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4ce52ce81abe52a94c5ca1b4e84054f0c345e6" translate="yes" xml:space="preserve">
          <source>When inheriting from generic classes, some type variables could be fixed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d57a9f5d007446cdead859ca66e2d6075df536d" translate="yes" xml:space="preserve">
          <source>When instantiated, &lt;em&gt;msg&lt;/em&gt; should be a human-readable description of the error. The optional &lt;em&gt;exception&lt;/em&gt; parameter, if given, should be &lt;code&gt;None&lt;/code&gt; or an exception that was caught by the parsing code and is being passed along as information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a44c954d6ff4db8ecacb3e811d6941f43087b96" translate="yes" xml:space="preserve">
          <source>When interactive, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; streams are line-buffered. Otherwise, they are block-buffered like regular text files. You can override this value with the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-u&quot;&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/a&gt; command-line option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995afee8f4fa71b9b054d20a6203385ccf1bd50f" translate="yes" xml:space="preserve">
          <source>When invoked as a script, pdb will automatically enter post-mortem debugging if the program being debugged exits abnormally. After post-mortem debugging (or after normal exit of the program), pdb will restart the program. Automatic restarting preserves pdb&amp;rsquo;s state (such as breakpoints) and in most cases is more useful than quitting the debugger upon program&amp;rsquo;s exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2539ba7b8e0eee8855621eedd477ec61c17b8f6b" translate="yes" xml:space="preserve">
          <source>When invoked from the command line, &lt;code&gt;python -m pickletools&lt;/code&gt; will disassemble the contents of one or more pickle files. Note that if you want to see the Python object stored in the pickle rather than the details of pickle format, you may want to use &lt;code&gt;-m pickle&lt;/code&gt; instead. However, when the pickle file that you want to examine comes from an untrusted source, &lt;code&gt;-m pickletools&lt;/code&gt; is a safer option because it does not execute pickle bytecode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b61fed1c9136364f71b07a1ac9ee9de891cc79e" translate="yes" xml:space="preserve">
          <source>When invoked on an unlocked lock, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4c03388380d599f150c844d9f2270ba506b4b5" translate="yes" xml:space="preserve">
          <source>When invoked with &lt;em&gt;blocking&lt;/em&gt; set to false, do not block. If a call without an argument would block, return &lt;code&gt;False&lt;/code&gt; immediately; otherwise, do the same thing as when called without arguments, and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3215b0285b31a2e686d7f6ba8334728310827391" translate="yes" xml:space="preserve">
          <source>When invoked with a &lt;em&gt;timeout&lt;/em&gt; other than &lt;code&gt;None&lt;/code&gt;, it will block for at most &lt;em&gt;timeout&lt;/em&gt; seconds. If acquire does not complete successfully in that interval, return &lt;code&gt;False&lt;/code&gt;. Return &lt;code&gt;True&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e3e192edfe421df0ce1b99d20b60757870a5ac" translate="yes" xml:space="preserve">
          <source>When invoked with a positive, floating-point value for &lt;em&gt;timeout&lt;/em&gt;, block for at most the number of seconds specified by &lt;em&gt;timeout&lt;/em&gt; as long as the lock can not be acquired. Invocations with a negative value for &lt;em&gt;timeout&lt;/em&gt; are equivalent to a &lt;em&gt;timeout&lt;/em&gt; of zero. Invocations with a &lt;em&gt;timeout&lt;/em&gt; value of &lt;code&gt;None&lt;/code&gt; (the default) set the timeout period to infinite. Note that the treatment of negative or &lt;code&gt;None&lt;/code&gt; values for &lt;em&gt;timeout&lt;/em&gt; differs from the implemented behavior in &lt;a href=&quot;threading#threading.Lock.acquire&quot;&gt;&lt;code&gt;threading.Lock.acquire()&lt;/code&gt;&lt;/a&gt;. The &lt;em&gt;timeout&lt;/em&gt; argument has no practical implications if the &lt;em&gt;block&lt;/em&gt; argument is set to &lt;code&gt;False&lt;/code&gt; and is thus ignored. Returns &lt;code&gt;True&lt;/code&gt; if the lock has been acquired or &lt;code&gt;False&lt;/code&gt; if the timeout period has elapsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7920fec1db552b1e56262de88d29376efd098e4" translate="yes" xml:space="preserve">
          <source>When invoked with the &lt;em&gt;block&lt;/em&gt; argument set to &lt;code&gt;False&lt;/code&gt;, do not block. If the lock has already been acquired (and thus is owned) by another process or thread, the current process or thread does not take ownership and the recursion level within the lock is not changed, resulting in a return value of &lt;code&gt;False&lt;/code&gt;. If the lock is in an unlocked state, the current process or thread takes ownership and the recursion level is incremented, resulting in a return value of &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d84ac2fed2d1d6bf35aca2492e7a51b1254f22" translate="yes" xml:space="preserve">
          <source>When invoked with the &lt;em&gt;block&lt;/em&gt; argument set to &lt;code&gt;True&lt;/code&gt;, block until the lock is in an unlocked state (not owned by any process or thread) unless the lock is already owned by the current process or thread. The current process or thread then takes ownership of the lock (if it does not already have ownership) and the recursion level inside the lock increments by one, resulting in a return value of &lt;code&gt;True&lt;/code&gt;. Note that there are several differences in this first argument&amp;rsquo;s behavior compared to the implementation of &lt;a href=&quot;threading#threading.RLock.acquire&quot;&gt;&lt;code&gt;threading.RLock.acquire()&lt;/code&gt;&lt;/a&gt;, starting with the name of the argument itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adb7479baf4957251699e2c3f19fc3aa413e8ed" translate="yes" xml:space="preserve">
          <source>When invoked with the &lt;em&gt;blocking&lt;/em&gt; argument set to &lt;code&gt;False&lt;/code&gt;, do not block. If a call with &lt;em&gt;blocking&lt;/em&gt; set to &lt;code&gt;True&lt;/code&gt; would block, return &lt;code&gt;False&lt;/code&gt; immediately; otherwise, set the lock to locked and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00fee988fe737d2ff47fe5cb9ac426ebebb9888c" translate="yes" xml:space="preserve">
          <source>When invoked with the &lt;em&gt;blocking&lt;/em&gt; argument set to &lt;code&gt;True&lt;/code&gt; (the default), block until the lock is unlocked, then set it to locked and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530808d79c5fd710b7d8c76ae1e70cbe8c467712" translate="yes" xml:space="preserve">
          <source>When invoked with the &lt;em&gt;blocking&lt;/em&gt; argument set to false, do not block. If a call without an argument would block, return &lt;code&gt;False&lt;/code&gt; immediately; otherwise, do the same thing as when called without arguments, and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7b2e8b0136f5c21ccc0f8e3de7ab48e6ebe94d" translate="yes" xml:space="preserve">
          <source>When invoked with the &lt;em&gt;blocking&lt;/em&gt; argument set to true, do the same thing as when called without arguments, and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b710997372980f7c6061e22520300cdf15b9436e" translate="yes" xml:space="preserve">
          <source>When invoked with the floating-point &lt;em&gt;timeout&lt;/em&gt; argument set to a positive value, block for at most the number of seconds specified by &lt;em&gt;timeout&lt;/em&gt; and as long as the lock cannot be acquired. A &lt;em&gt;timeout&lt;/em&gt; argument of &lt;code&gt;-1&lt;/code&gt; specifies an unbounded wait. It is forbidden to specify a &lt;em&gt;timeout&lt;/em&gt; when &lt;em&gt;blocking&lt;/em&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2140b5f65b8ba6f4b2bd371613d7e60332a2c64a" translate="yes" xml:space="preserve">
          <source>When invoked with the floating-point &lt;em&gt;timeout&lt;/em&gt; argument set to a positive value, block for at most the number of seconds specified by &lt;em&gt;timeout&lt;/em&gt; and as long as the lock cannot be acquired. Return &lt;code&gt;True&lt;/code&gt; if the lock has been acquired, false if the timeout has elapsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec567edc06d3b9893b2e7ade359dacbc93eb18e" translate="yes" xml:space="preserve">
          <source>When invoked without arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c15ab576c9f7d8bf5867e09294955007cfb98cc" translate="yes" xml:space="preserve">
          <source>When invoked without arguments: if this thread already owns the lock, increment the recursion level by one, and return immediately. Otherwise, if another thread owns the lock, block until the lock is unlocked. Once the lock is unlocked (not owned by any thread), then grab ownership, set the recursion level to one, and return. If more than one thread is blocked waiting until the lock is unlocked, only one at a time will be able to grab ownership of the lock. There is no return value in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96b14764f1e6579b1b14032256583960d45abf4" translate="yes" xml:space="preserve">
          <source>When invoking external programs, make sure they can be found. Usually, this means using absolute path names &amp;mdash; &lt;code id=&quot;index-5&quot;&gt;PATH&lt;/code&gt; is usually not set to a very useful value in a CGI script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d49406082e5d3ef12b51588b4ee561e90642dbb" translate="yes" xml:space="preserve">
          <source>When more than one coroutine is blocked in &lt;a href=&quot;#asyncio.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; waiting for the lock to be unlocked, only one coroutine eventually proceeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d757253ec842e92c57d2efdf31bbd2d4624ea4d1" translate="yes" xml:space="preserve">
          <source>When more than one key is provided, then additional keys are used as secondary criteria when there is equality in all keys selected before them. For example, &lt;code&gt;sort_stats(SortKey.NAME, SortKey.FILE)&lt;/code&gt; will sort all the entries according to their function name, and resolve all ties (identical function names) by sorting by file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea00e1f9fb3773e02544a5c95c6a57b4665e0f48" translate="yes" xml:space="preserve">
          <source>When more than one pickle file are specified, print given preamble before each disassembly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a26198a4f09f3862bf0af3dbd7f4aeaa0993b74" translate="yes" xml:space="preserve">
          <source>When more than one thread is blocked in &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; waiting for the state to turn to unlocked, only one thread proceeds when a &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; call resets the state to unlocked; which one of the waiting threads proceeds is not defined, and may vary across implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9260c7b087d873e21d35d7eab19843d9322220" translate="yes" xml:space="preserve">
          <source>When multiple objects are disassembled, preserve memo between disassemblies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d053b7be9831593a88afbed3a5bc6fa5f8506a45" translate="yes" xml:space="preserve">
          <source>When multiple processes with differing UIDs assign sockets to an identical UDP socket address with &lt;code&gt;SO_REUSEADDR&lt;/code&gt;, incoming packets can become randomly distributed among the sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3978842d4de4c74136c46923ed77df9264119bc1" translate="yes" xml:space="preserve">
          <source>When no &lt;em&gt;path&lt;/em&gt; is specified, the results of &lt;a href=&quot;os#os.environ&quot;&gt;&lt;code&gt;os.environ()&lt;/code&gt;&lt;/a&gt; are used, returning either the &amp;ldquo;PATH&amp;rdquo; value or a fallback of &lt;a href=&quot;os#os.defpath&quot;&gt;&lt;code&gt;os.defpath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60fa2ee1d31958e02f93bc8b356815374fa1d19b" translate="yes" xml:space="preserve">
          <source>When no explicit alignment is given, preceding the &lt;em&gt;width&lt;/em&gt; field by a zero (&lt;code&gt;'0'&lt;/code&gt;) character enables sign-aware zero-padding for numeric types. This is equivalent to a &lt;em&gt;fill&lt;/em&gt; character of &lt;code&gt;'0'&lt;/code&gt; with an &lt;em&gt;alignment&lt;/em&gt; type of &lt;code&gt;'='&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6065b034a11abad3d959f6d6989348ca636780d3" translate="yes" xml:space="preserve">
          <source>When no match is found, return whatever is available instead, possibly empty bytes. Raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; if the connection is closed and no cooked data is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d974deeca1f469c2b5a6fa343cdf431c097d9b5" translate="yes" xml:space="preserve">
          <source>When one pastes code into Shell, it is not compiled and possibly executed until one hits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4178055aedbbbaa771fd15ebbc33ceeea78f97" translate="yes" xml:space="preserve">
          <source>When one uses &lt;a href=&quot;#multiprocessing.connection.Connection.recv&quot;&gt;&lt;code&gt;Connection.recv&lt;/code&gt;&lt;/a&gt;, the data received is automatically unpickled. Unfortunately unpickling data from an untrusted source is a security risk. Therefore &lt;a href=&quot;#multiprocessing.connection.Listener&quot;&gt;&lt;code&gt;Listener&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.connection.Client&quot;&gt;&lt;code&gt;Client()&lt;/code&gt;&lt;/a&gt; use the &lt;a href=&quot;hmac#module-hmac&quot;&gt;&lt;code&gt;hmac&lt;/code&gt;&lt;/a&gt; module to provide digest authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defeae2dfe201352a7bdcfddb389352110acc25b" translate="yes" xml:space="preserve">
          <source>When one wants to match a literal backslash, it must be escaped in the regular expression. With raw string notation, this means &lt;code&gt;r&quot;\\&quot;&lt;/code&gt;. Without raw string notation, one must use &lt;code&gt;&quot;\\\\&quot;&lt;/code&gt;, making the following lines of code functionally identical:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb74b28bda4099bc79fd005722acae57fc6872e" translate="yes" xml:space="preserve">
          <source>When opening a file for reading, the &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;filters&lt;/em&gt; arguments have the same meanings as for &lt;a href=&quot;#lzma.LZMADecompressor&quot;&gt;&lt;code&gt;LZMADecompressor&lt;/code&gt;&lt;/a&gt;. In this case, the &lt;em&gt;check&lt;/em&gt; and &lt;em&gt;preset&lt;/em&gt; arguments should not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa3b23d9c311bebcce2d82c3b6469767bdd03e8" translate="yes" xml:space="preserve">
          <source>When opening a file for reading, the input file may be the concatenation of multiple separate compressed streams. These are transparently decoded as a single logical stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40148ffbc845740f7452ddadab19f55d4a0a189" translate="yes" xml:space="preserve">
          <source>When opening a file for writing, the &lt;em&gt;format&lt;/em&gt;, &lt;em&gt;check&lt;/em&gt;, &lt;em&gt;preset&lt;/em&gt; and &lt;em&gt;filters&lt;/em&gt; arguments have the same meanings as for &lt;a href=&quot;#lzma.LZMACompressor&quot;&gt;&lt;code&gt;LZMACompressor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0673e8efa9150c8c2de8c19210f1833061eca945" translate="yes" xml:space="preserve">
          <source>When operating in POSIX mode, &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; will try to obey to the following parsing rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b63f3da75da4705f49d38fa15d535bbd4d2a24" translate="yes" xml:space="preserve">
          <source>When operating in non-POSIX mode, &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; will try to obey to the following rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45df7e43b0ea1fa603be77df6607a8c7e5ebe833" translate="yes" xml:space="preserve">
          <source>When packing a value &lt;code&gt;x&lt;/code&gt; using one of the integer formats (&lt;code&gt;'b'&lt;/code&gt;, &lt;code&gt;'B'&lt;/code&gt;, &lt;code&gt;'h'&lt;/code&gt;, &lt;code&gt;'H'&lt;/code&gt;, &lt;code&gt;'i'&lt;/code&gt;, &lt;code&gt;'I'&lt;/code&gt;, &lt;code&gt;'l'&lt;/code&gt;, &lt;code&gt;'L'&lt;/code&gt;, &lt;code&gt;'q'&lt;/code&gt;, &lt;code&gt;'Q'&lt;/code&gt;), if &lt;code&gt;x&lt;/code&gt; is outside the valid range for that format then &lt;a href=&quot;#struct.error&quot;&gt;&lt;code&gt;struct.error&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff53ce933cb55e5d195fd8da14f24a9ea8a7dec" translate="yes" xml:space="preserve">
          <source>When passing a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; instance as the &lt;em&gt;zinfo_or_arcname&lt;/em&gt; parameter, the compression method used will be that specified in the &lt;em&gt;compress_type&lt;/em&gt; member of the given &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; instance. By default, the &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; constructor sets this member to &lt;a href=&quot;#zipfile.ZIP_STORED&quot;&gt;&lt;code&gt;ZIP_STORED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfc7a1fdbd85a7a8af9ae652a598a7fb18209e5" translate="yes" xml:space="preserve">
          <source>When passing strings, characters special to XML such as &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;amp;&lt;/code&gt; will be automatically escaped. However, it&amp;rsquo;s the caller&amp;rsquo;s responsibility to ensure that the string is free of characters that aren&amp;rsquo;t allowed in XML, such as the control characters with ASCII values between 0 and 31 (except, of course, tab, newline and carriage return); failing to do this will result in an XML-RPC request that isn&amp;rsquo;t well-formed XML. If you have to pass arbitrary bytes via XML-RPC, use &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; classes or the &lt;a href=&quot;#xmlrpc.client.Binary&quot;&gt;&lt;code&gt;Binary&lt;/code&gt;&lt;/a&gt; wrapper class described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63bc2447bdc66517ffbc569605d6b0a283df40ef" translate="yes" xml:space="preserve">
          <source>When performing basic authentication, a &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; instance calls its &lt;a href=&quot;#urllib.request.FancyURLopener.prompt_user_passwd&quot;&gt;&lt;code&gt;prompt_user_passwd()&lt;/code&gt;&lt;/a&gt; method. The default implementation asks the users for the required information on the controlling terminal. A subclass may override this method to support more appropriate behavior if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd3028f0460b2a38b88a225adf972c3a4a4fe5b" translate="yes" xml:space="preserve">
          <source>When printing output to the console, &lt;strong&gt;pydoc&lt;/strong&gt; attempts to paginate the output for easier reading. If the &lt;code id=&quot;index-1&quot;&gt;PAGER&lt;/code&gt; environment variable is set, &lt;strong&gt;pydoc&lt;/strong&gt; will use its value as a pagination program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed1e3583fcf60dc14b51dea1fcf2276215158d1" translate="yes" xml:space="preserve">
          <source>When programming in a compiled language, shared libraries are accessed when compiling/linking a program, and when the program is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f1758f540eba7a39f832dfe0bdad388ef357ae" translate="yes" xml:space="preserve">
          <source>When provided, &lt;em&gt;extra_args&lt;/em&gt; is a sequence of &lt;code&gt;(name, value)&lt;/code&gt; tuples that will be passed as keywords arguments to the callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d590e3c7f8f976b86d3937ef37f23bbcf9e23b0" translate="yes" xml:space="preserve">
          <source>When raising (or re-raising) an exception in an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clause &lt;code&gt;__context__&lt;/code&gt; is automatically set to the last exception caught; if the new exception is not handled the traceback that is eventually displayed will include the originating exception(s) and the final exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84626ccb1f1b7c51c54d20b65a4d9d24bac172db" translate="yes" xml:space="preserve">
          <source>When raising a new exception (rather than using a bare &lt;code&gt;raise&lt;/code&gt; to re-raise the exception currently being handled), the implicit exception context can be supplemented with an explicit cause by using &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#from&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#raise&quot;&gt;&lt;code&gt;raise&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc416240914fa2f9d0a3585ee1b058f79fc51d82" translate="yes" xml:space="preserve">
          <source>When reading input from the stream, if &lt;em&gt;newline&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt; mode is enabled. Lines in the input can end in &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt;, or &lt;code&gt;'\r\n'&lt;/code&gt;, and these are translated into &lt;code&gt;'\n'&lt;/code&gt; before being returned to the caller. If it is &lt;code&gt;''&lt;/code&gt;, universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521e95b377d73dc55cb2baf5c5af8fdf1ed894f3" translate="yes" xml:space="preserve">
          <source>When reading input from the stream, if &lt;em&gt;newline&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, universal newlines mode is enabled. Lines in the input can end in &lt;code&gt;'\n'&lt;/code&gt;, &lt;code&gt;'\r'&lt;/code&gt;, or &lt;code&gt;'\r\n'&lt;/code&gt;, and these are translated into &lt;code&gt;'\n'&lt;/code&gt; before being returned to the caller. If it is &lt;code&gt;''&lt;/code&gt;, universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6664d6092937daced8b81f9ccf4a2841a1ee61" translate="yes" xml:space="preserve">
          <source>When reading or writing external files, make sure they can be read or written by the userid under which your CGI script will be running: this is typically the userid under which the web server is running, or some explicitly specified userid for a web server&amp;rsquo;s &lt;code&gt;suexec&lt;/code&gt; feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8df0ae7a831d2bc654fc7f26ceaddd0fec6a53d" translate="yes" xml:space="preserve">
          <source>When receiving host names from the wire (such as in reverse name lookup), no automatic conversion to Unicode is performed: applications wishing to present such host names to the user should decode them to Unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c249fada241449b7a8d98255500a026f1ff7ff6e" translate="yes" xml:space="preserve">
          <source>When rotating, rotate the current log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009f8f1003bd38ceb66bdf4766db141ef685c52a" translate="yes" xml:space="preserve">
          <source>When run with the appropriate arguments, it prints either the sum or the max of the command-line integers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c61737a1449cc5834b15d481c322aac953d7bb" translate="yes" xml:space="preserve">
          <source>When running a tkinter program from an IDLE editor, one can comment out the mainloop call. One then gets a shell prompt immediately and can interact with the live application. One just has to remember to re-enable the mainloop call when running in standard Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef04bb8c76c31bcff2e40b83fb3b51dbc495fd47" translate="yes" xml:space="preserve">
          <source>When serializing to JSON, beware any such limitations in applications that may consume your JSON. In particular, it is common for JSON numbers to be deserialized into IEEE 754 double precision numbers and thus subject to that representation&amp;rsquo;s range and precision limitations. This is especially relevant when serializing Python &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; values of extremely large magnitude, or when serializing instances of &amp;ldquo;exotic&amp;rdquo; numerical types such as &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3856e8bd6a5962d17cc2916a2ad00664a1e6d558" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;True&lt;/code&gt;, the parser will not allow for any section or option duplicates while reading from a single source (using &lt;code&gt;read_file()&lt;/code&gt;, &lt;code&gt;read_string()&lt;/code&gt; or &lt;code&gt;read_dict()&lt;/code&gt;). It is recommended to use strict parsers in new applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af553f6e77f3799cc572c24f6b17d618156fcd66" translate="yes" xml:space="preserve">
          <source>When set to a value other than &lt;code&gt;None&lt;/code&gt;, this variable defines the default value for the &lt;em&gt;dir&lt;/em&gt; argument to the functions defined in this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a651c4386e23ffbd8bc757cc1022ed6e854c9c0d" translate="yes" xml:space="preserve">
          <source>When set, all unreachable objects found will be appended to &lt;em&gt;garbage&lt;/em&gt; rather than being freed. This can be useful for debugging a leaking program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966461a5030c03e1d1f1351234001ea1acd1bcfd" translate="yes" xml:space="preserve">
          <source>When setting cookies, require a full &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; domain-match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962945e9937ea98d222513b922d5881fd1bf1687" translate="yes" xml:space="preserve">
          <source>When setting cookies, the &amp;lsquo;host prefix&amp;rsquo; must not contain a dot (eg. &lt;code&gt;www.foo.bar.com&lt;/code&gt; can&amp;rsquo;t set a cookie for &lt;code&gt;.bar.com&lt;/code&gt;, because &lt;code&gt;www.foo&lt;/code&gt; contains a dot).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1497d638ca2af8c9832a39909543a42d33c7e1e0" translate="yes" xml:space="preserve">
          <source>When several absolute paths are given, the last is taken as an anchor (mimicking &lt;a href=&quot;os.path#os.path.join&quot;&gt;&lt;code&gt;os.path.join()&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s behaviour):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef246b92ec78bbb2904be545cecaaa31079bddf" translate="yes" xml:space="preserve">
          <source>When specified, all sequences of whitespace (blanks and newlines) are treated as equal. Any sequence of whitespace within the expected output will match any sequence of whitespace within the actual output. By default, whitespace must match exactly. &lt;a href=&quot;#doctest.NORMALIZE_WHITESPACE&quot;&gt;&lt;code&gt;NORMALIZE_WHITESPACE&lt;/code&gt;&lt;/a&gt; is especially useful when a line of expected output is very long, and you want to wrap it across multiple lines in your source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b218a31cb42b5880f2b77432b336a4dc41d9aa7" translate="yes" xml:space="preserve">
          <source>When specified, an ellipsis marker (&lt;code&gt;...&lt;/code&gt;) in the expected output can match any substring in the actual output. This includes substrings that span line boundaries, and empty substrings, so it&amp;rsquo;s best to keep usage of this simple. Complicated uses can lead to the same kinds of &amp;ldquo;oops, it matched too much!&amp;rdquo; surprises that &lt;code&gt;.*&lt;/code&gt; is prone to in regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb31cc2903efca845f37ae06ecb0d7faead34bc" translate="yes" xml:space="preserve">
          <source>When specified, an example that expects an exception passes if an exception of the expected type is raised, even if the exception detail does not match. For example, an example expecting &lt;code&gt;ValueError: 42&lt;/code&gt; will pass if the actual exception raised is &lt;code&gt;ValueError: 3*14&lt;/code&gt;, but will fail, e.g., if &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506d23fee0102647e3e510ecb1828895d54af340" translate="yes" xml:space="preserve">
          <source>When specified, differences are computed by &lt;code&gt;difflib.Differ&lt;/code&gt;, using the same algorithm as the popular &lt;code&gt;ndiff.py&lt;/code&gt; utility. This is the only method that marks differences within lines as well as across lines. For example, if a line of expected output contains digit &lt;code&gt;1&lt;/code&gt; where actual output contains letter &lt;code&gt;l&lt;/code&gt;, a line is inserted with a caret marking the mismatching column positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725ed21a520fb4bdfd0c582f999632c3b3e1a3c6" translate="yes" xml:space="preserve">
          <source>When specified, display the first failing example in each doctest, but suppress output for all remaining examples. This will prevent doctest from reporting correct examples that break because of earlier failures; but it might also hide incorrect examples that fail independently of the first failure. When &lt;a href=&quot;#doctest.REPORT_ONLY_FIRST_FAILURE&quot;&gt;&lt;code&gt;REPORT_ONLY_FIRST_FAILURE&lt;/code&gt;&lt;/a&gt; is specified, the remaining examples are still run, and still count towards the total number of failures reported; only the output is suppressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb4572ffe4ed819ce94cd6722f54cd0aadb9fe4" translate="yes" xml:space="preserve">
          <source>When specified, do not run the example at all. This can be useful in contexts where doctest examples serve as both documentation and test cases, and an example should be included for documentation purposes, but should not be checked. E.g., the example&amp;rsquo;s output might be random; or the example might depend on resources which would be unavailable to the test driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1313668fddf2714b9e79f58afa68fecf0d72d780" translate="yes" xml:space="preserve">
          <source>When specified, exit after the first failing example and don&amp;rsquo;t attempt to run the remaining examples. Thus, the number of failures reported will be at most 1. This flag may be useful during debugging, since examples after the first failure won&amp;rsquo;t even produce debugging output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a165ac4e0fc877daf25b2fcfe0a4d6e37cd8566f" translate="yes" xml:space="preserve">
          <source>When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210d27f93a6ffbf0d54ba3a0a4a851f82c25d9b1" translate="yes" xml:space="preserve">
          <source>When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e021460883f1eef6780ecadd57bc2f7a8e86c36" translate="yes" xml:space="preserve">
          <source>When specified, the pattern character &lt;code&gt;'^'&lt;/code&gt; matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character &lt;code&gt;'$'&lt;/code&gt; matches at the end of the string and at the end of each line (immediately preceding each newline). By default, &lt;code&gt;'^'&lt;/code&gt; matches only at the beginning of the string, and &lt;code&gt;'$'&lt;/code&gt; only at the end of the string and immediately before the newline (if any) at the end of the string. Corresponds to the inline flag &lt;code&gt;(?m)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6508ccae0114f70101a39c1ade3be77f9a0e54cc" translate="yes" xml:space="preserve">
          <source>When subclassing &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, mix-in types must appear before &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; itself in the sequence of bases, as in the &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; example above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab9f2e0c84d1cef2e81d17d102b665c42c1b918" translate="yes" xml:space="preserve">
          <source>When symbolic link cycles occur, the returned path will be one member of the cycle, but no guarantee is made about which member that will be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda516a7e878443b38c4fe64189ee1bdd2488b07" translate="yes" xml:space="preserve">
          <source>When testing multiple operations that raise the same kind of warning, it is important to test them in a manner that confirms each operation is raising a new warning (e.g. set warnings to be raised as exceptions and check the operations raise exceptions, check that the length of the warning list continues to increase after each operation, or else delete the previous entries from the warnings list before each new operation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c986eba58685d8d5c5b9096bea3ea17575dc2a" translate="yes" xml:space="preserve">
          <source>When the &lt;a href=&quot;#doctest.IGNORE_EXCEPTION_DETAIL&quot;&gt;&lt;code&gt;IGNORE_EXCEPTION_DETAIL&lt;/code&gt;&lt;/a&gt; doctest option is specified, everything following the leftmost colon and any module information in the exception name is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3f49f30bcc7e091d5c01e4ab7c4d154fba44f7" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;noqiflush()&lt;/code&gt; routine is used, normal flush of input and output queues associated with the &lt;code&gt;INTR&lt;/code&gt;, &lt;code&gt;QUIT&lt;/code&gt; and &lt;code&gt;SUSP&lt;/code&gt; characters will not be done. You may want to call &lt;code&gt;noqiflush()&lt;/code&gt; in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f7176cdc28e8fabe1cc4ce9c92d06ff62a9627" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;value&lt;/code&gt; attribute is retrieved from a ctypes instance, usually a new object is returned each time. &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; does &lt;em&gt;not&lt;/em&gt; implement original object return, always a new object is constructed. The same is true for all other ctypes object instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba25eeaf6632c7ebc55efeeb8b1a2231818ee6e" translate="yes" xml:space="preserve">
          <source>When the &lt;em&gt;name&lt;/em&gt; variable is of the form &lt;code&gt;package.module&lt;/code&gt;, normally, the top-level package (the name up till the first dot) is returned, &lt;em&gt;not&lt;/em&gt; the module named by &lt;em&gt;name&lt;/em&gt;. However, when a non-empty &lt;em&gt;fromlist&lt;/em&gt; argument is given, the module named by &lt;em&gt;name&lt;/em&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0839b23fb2fd3debdac05fc9ae13ae6b565a4724" translate="yes" xml:space="preserve">
          <source>When the &lt;em&gt;timeout&lt;/em&gt; argument is not present or &lt;code&gt;None&lt;/code&gt;, the operation will block until the thread terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f2a083cefefece0f9a989089d273d2343db7c8" translate="yes" xml:space="preserve">
          <source>When the &lt;em&gt;timeout&lt;/em&gt; argument is present and not &lt;code&gt;None&lt;/code&gt;, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9427976e1510be53b2baa1d26a02bd7a239f5c51" translate="yes" xml:space="preserve">
          <source>When the &lt;em&gt;timeout&lt;/em&gt; argument is present and not &lt;code&gt;None&lt;/code&gt;, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof). As &lt;a href=&quot;#threading.Thread.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; always returns &lt;code&gt;None&lt;/code&gt;, you must call &lt;a href=&quot;#threading.Thread.is_alive&quot;&gt;&lt;code&gt;is_alive()&lt;/code&gt;&lt;/a&gt; after &lt;a href=&quot;#threading.Thread.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; to decide whether a timeout happened &amp;ndash; if the thread is still alive, the &lt;a href=&quot;#threading.Thread.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; call timed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efa641d2d18d3d35e2f53ff91c7db9472e3c6c4" translate="yes" xml:space="preserve">
          <source>When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82443f1c4eff35532245efa9cbc5d46a5e79a79" translate="yes" xml:space="preserve">
          <source>When the dataclass is being created by the &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; decorator, it looks through all of the class&amp;rsquo;s base classes in reverse MRO (that is, starting at &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;) and, for each dataclass that it finds, adds the fields from that base class to an ordered mapping of fields. After all of the base class fields are added, it adds its own fields to the ordered mapping. All of the generated methods will use this combined, calculated ordered mapping of fields. Because the fields are in insertion order, derived classes override base classes. An example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b66dd18ce1e12e4286175c7d8752f320de1be6" translate="yes" xml:space="preserve">
          <source>When the debug mode is enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d323c0b3abd37e8843f26f7250d48151ff4e9e4" translate="yes" xml:space="preserve">
          <source>When the deque is not empty, rotating one step to the right is equivalent to &lt;code&gt;d.appendleft(d.pop())&lt;/code&gt;, and rotating one step to the left is equivalent to &lt;code&gt;d.append(d.popleft())&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965bb2961456fd9ec18c155c435cd124d7f1e1f7" translate="yes" xml:space="preserve">
          <source>When the following functions return &amp;ldquo;frame records,&amp;rdquo; each record is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;FrameInfo(frame, filename, lineno, function, code_context, index)&lt;/code&gt;. The tuple contains the frame object, the filename, the line number of the current line, the function name, a list of lines of context from the source code, and the index of the current line within that list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a192ce7dd917b79cdadcecc69d15e0e840e3fac2" translate="yes" xml:space="preserve">
          <source>When the function raises a &lt;a href=&quot;exceptions#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;/code&gt;&lt;/a&gt; exception, it is silently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8af2d5b431a64609659111ed46cf47a5a6d0cb" translate="yes" xml:space="preserve">
          <source>When the function returns, the thread silently exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2939cf22671cec72fb407f91f1dd1da33466f4b0" translate="yes" xml:space="preserve">
          <source>When the function terminates with an unhandled exception, &lt;a href=&quot;sys#sys.unraisablehook&quot;&gt;&lt;code&gt;sys.unraisablehook()&lt;/code&gt;&lt;/a&gt; is called to handle the exception. The &lt;em&gt;object&lt;/em&gt; attribute of the hook argument is &lt;em&gt;function&lt;/em&gt;. By default, a stack trace is printed and then the thread exits (but other threads continue to run).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e1f7a5314c521814efab7673f88a014796119b" translate="yes" xml:space="preserve">
          <source>When the iterable is empty, return the start value. This function is intended specifically for use with numeric values and may reject non-numeric types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0619f802303d6a776090a8553bcded1600861c45" translate="yes" xml:space="preserve">
          <source>When the lock is &lt;em&gt;locked&lt;/em&gt;, reset it to &lt;em&gt;unlocked&lt;/em&gt; and return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b90fc7c45f662a12bf1ee8cea1898d278f7026" translate="yes" xml:space="preserve">
          <source>When the lock is locked, reset it to unlocked, and return. If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c398f7629217467760d733727be89698cfaee23" translate="yes" xml:space="preserve">
          <source>When the logging module is imported, it registers this function as an exit handler (see &lt;a href=&quot;atexit#module-atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt;), so normally there&amp;rsquo;s no need to do that manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd980ea6acc8763679979a08e2398cb455101b4" translate="yes" xml:space="preserve">
          <source>When the main thread exits, it does not do any of its usual cleanup (except that &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clauses are honored), and the standard I/O files are not flushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af7554aea463351096c790b6eebb65f8d0e1e78" translate="yes" xml:space="preserve">
          <source>When the main thread exits, it is system defined whether the other threads survive. On most systems, they are killed without executing &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clauses or executing object destructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8416c53a3fab417f18d34ff6b2c7c89921bb9b" translate="yes" xml:space="preserve">
          <source>When the number of data points is even, the median is interpolated by taking the average of the two middle values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3727a0d49a696958b7e7aedf6197c454a60d276" translate="yes" xml:space="preserve">
          <source>When the parser is instantiated it is ready to begin accepting data from the feed method immediately. After parsing has been finished with a call to close the reset method must be called to make the parser ready to accept new data, either from feed or using the parse method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512d3776530707ff872caf29c6b20b7211d9d8d5" translate="yes" xml:space="preserve">
          <source>When the path points to a directory, yield path objects of the directory contents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6ac2fad722ee466b6d6cb46713a1963668153e" translate="yes" xml:space="preserve">
          <source>When the program exits, each remaining live finalizer is called unless its &lt;a href=&quot;atexit#module-atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; attribute has been set to false. They are called in reverse order of creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67cebb1835e8e6bf7a770664e7365b4b2e21589" translate="yes" xml:space="preserve">
          <source>When the program starts and selects the &lt;em&gt;forkserver&lt;/em&gt; start method, a server process is started. From then on, whenever a new process is needed, the parent process connects to the server and requests that it fork a new process. The fork server process is single threaded so it is safe for it to use &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;os.fork()&lt;/code&gt;&lt;/a&gt;. No unnecessary resources are inherited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5136bd917b359254fcb25318d6cf9878572072" translate="yes" xml:space="preserve">
          <source>When the right argument is a dictionary (or other mapping type), then the formats in the bytes object &lt;em&gt;must&lt;/em&gt; include a parenthesised mapping key into that dictionary inserted immediately after the &lt;code&gt;'%'&lt;/code&gt; character. The mapping key selects the value to be formatted from the mapping. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b647f4b9964ada60f8adbae790c7e50f0a7417" translate="yes" xml:space="preserve">
          <source>When the right argument is a dictionary (or other mapping type), then the formats in the string &lt;em&gt;must&lt;/em&gt; include a parenthesised mapping key into that dictionary inserted immediately after the &lt;code&gt;'%'&lt;/code&gt; character. The mapping key selects the value to be formatted from the mapping. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c542987ce2fae3c5dd363658acde3db213bccc7" translate="yes" xml:space="preserve">
          <source>When the timeout argument is present and not &lt;code&gt;None&lt;/code&gt;, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaffd14aa04c2c35de2956e1ed898667e511dfc" translate="yes" xml:space="preserve">
          <source>When the underlying lock is an &lt;a href=&quot;#threading.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt;, it is not released using its &lt;a href=&quot;#threading.Condition.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; method, since this may not actually unlock the lock when it was acquired multiple times recursively. Instead, an internal interface of the &lt;a href=&quot;#threading.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt; class is used, which really unlocks it even when it has been recursively acquired several times. Another internal interface is then used to restore the recursion level when the lock is reacquired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a547e1586802e299eb73e97be7ee39d485999089" translate="yes" xml:space="preserve">
          <source>When the view in the widget&amp;rsquo;s window change, the widget will generate a Tcl command based on the scrollcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befa970eff3f7ebe6809143ffe66cd7843089ead" translate="yes" xml:space="preserve">
          <source>When there are two numbers in the first column (for example &lt;code&gt;3/1&lt;/code&gt;), it means that the function recursed. The second value is the number of primitive calls and the former is the total number of calls. Note that when the function does not recurse, these two values are the same, and only the single figure is printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab22dc5a231f8fc7cacd590361630a5e4a9cd4ba" translate="yes" xml:space="preserve">
          <source>When there are very small differences among your tests, for instance some parameters, unittest allows you to distinguish them inside the body of a test method using the &lt;a href=&quot;#unittest.TestCase.subTest&quot;&gt;&lt;code&gt;subTest()&lt;/code&gt;&lt;/a&gt; context manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c77d278084a249196dc8ad39e0428b94116b8a" translate="yes" xml:space="preserve">
          <source>When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in &lt;a href=&quot;https://docs.python.org/3.8/tutorial/interpreter.html#tut-interactive&quot;&gt;interactive mode&lt;/a&gt;. This is done after the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-16&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt; file is read, so that you can set this hook there. The &lt;a href=&quot;site#module-site&quot;&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt; module &lt;a href=&quot;site#rlcompleter-config&quot;&gt;sets this&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5561b0bcfc3026fbfdb899d58edadb60d7787f" translate="yes" xml:space="preserve">
          <source>When this module is imported on a Unix platform with the &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; module available, an instance of the &lt;code&gt;Completer&lt;/code&gt; class is automatically created and its &lt;code&gt;complete()&lt;/code&gt; method is set as the &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; completer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51abaa779be741115f9981dd161abaf14ca5f234" translate="yes" xml:space="preserve">
          <source>When this module is run as a script, the &lt;a href=&quot;#py_compile.main&quot;&gt;&lt;code&gt;main()&lt;/code&gt;&lt;/a&gt; is used to compile all the files named on the command line. The exit status is nonzero if one of the files could not be compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad505c5cec1abb554c0e70fe34e8dfe5e8ee251d" translate="yes" xml:space="preserve">
          <source>When this namespace is specified, the &lt;em&gt;name&lt;/em&gt; string is a URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4271730cf91863d7eba060c9ce05e17fb1e5d3d" translate="yes" xml:space="preserve">
          <source>When this namespace is specified, the &lt;em&gt;name&lt;/em&gt; string is a fully-qualified domain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df57f6bd5424a2b48ed53224b034c92f20111436" translate="yes" xml:space="preserve">
          <source>When this namespace is specified, the &lt;em&gt;name&lt;/em&gt; string is an ISO OID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b118949a5b99f77f5500b4d3f0d5939a3e84377f" translate="yes" xml:space="preserve">
          <source>When this namespace is specified, the &lt;em&gt;name&lt;/em&gt; string is an X.500 DN in DER or a text output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac5dffa9ac6727f876535e5fe1228a53748f38d" translate="yes" xml:space="preserve">
          <source>When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs. The default is &lt;code&gt;1000&lt;/code&gt;. When set to &lt;code&gt;0&lt;/code&gt; or less, all traceback information is suppressed and only the exception type and value are printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278cf1fb88404480dadf9b626eaab7ebb46fb611" translate="yes" xml:space="preserve">
          <source>When threads are enabled, this function can only be called from the main thread; attempting to call it from other threads will cause a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception to be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa49c23d5b633ba09194c60a98a0663082ee806f" translate="yes" xml:space="preserve">
          <source>When to use __new__() vs. __init__()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8e822e628357a56fee4e1e237f47916afdb25d" translate="yes" xml:space="preserve">
          <source>When trying to answer questions of the form &amp;ldquo;how do I do blah&amp;rdquo;, it is often best to find out how to do &amp;ldquo;blah&amp;rdquo; in straight Tk, and then convert this back into the corresponding &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; call. Python programmers can often guess at the correct Python command by looking at the Tk documentation. This means that in order to use Tkinter, you will have to know a little bit about Tk. This document can&amp;rsquo;t fulfill that role, so the best we can do is point you to the best documentation that exists. Here are some hints:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b7fde33d91393f4e37520e38b01684ea8be333" translate="yes" xml:space="preserve">
          <source>When trying to resolve a path that may contain links, use &lt;a href=&quot;os.path#os.path.realpath&quot;&gt;&lt;code&gt;realpath()&lt;/code&gt;&lt;/a&gt; to properly handle recursion and platform differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3811d14f89d59ba51a06a1a040db1eba48fe96" translate="yes" xml:space="preserve">
          <source>When used as a class decorator &lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt;&lt;code&gt;patch.dict()&lt;/code&gt;&lt;/a&gt; honours &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt; (default to &lt;code&gt;'test'&lt;/code&gt;) for choosing which methods to wrap:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705e7c80833fc33cb99db4df5a3694a333edc598" translate="yes" xml:space="preserve">
          <source>When used as a class decorator &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; honours &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt; for choosing which methods to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b03309707733138089592715f0e9b9ff4448b18" translate="yes" xml:space="preserve">
          <source>When used as a class decorator &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; honours &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt; for choosing which methods to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba105ce35abd2dc08e1a686f3ddd015c632904f" translate="yes" xml:space="preserve">
          <source>When used as a context manager, &lt;a href=&quot;#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt; accepts the additional keyword argument &lt;em&gt;msg&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83414cd2e98b72f702142fb8a769008e29f7a984" translate="yes" xml:space="preserve">
          <source>When used as a context manager, &lt;a href=&quot;#unittest.TestCase.assertWarns&quot;&gt;&lt;code&gt;assertWarns()&lt;/code&gt;&lt;/a&gt; accepts the additional keyword argument &lt;em&gt;msg&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a119452aa32cdce61667b0d150a3806d0c9b047c" translate="yes" xml:space="preserve">
          <source>When used with the &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; function, &lt;code&gt;%U&lt;/code&gt; and &lt;code&gt;%W&lt;/code&gt; are only used in calculations when the day of the week and the year are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c496b450e8c39131b7391ec30143aac02a4ea29" translate="yes" xml:space="preserve">
          <source>When used with the &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; function, the &lt;code&gt;%p&lt;/code&gt; directive only affects the output hour field if the &lt;code&gt;%I&lt;/code&gt; directive is used to parse the hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f6e3b18d54172809724ec98b1116def825fde0" translate="yes" xml:space="preserve">
          <source>When used with the &lt;code&gt;strptime()&lt;/code&gt; method, &lt;code&gt;%U&lt;/code&gt; and &lt;code&gt;%W&lt;/code&gt; are only used in calculations when the day of the week and the calendar year (&lt;code&gt;%Y&lt;/code&gt;) are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2ee1207071c0489d96d299dd458032cc3f29e2" translate="yes" xml:space="preserve">
          <source>When used with the &lt;code&gt;strptime()&lt;/code&gt; method, the &lt;code&gt;%f&lt;/code&gt; directive accepts from one to six digits and zero pads on the right. &lt;code&gt;%f&lt;/code&gt; is an extension to the set of format characters in the C standard (but implemented separately in datetime objects, and therefore always available).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1c5087fa82a6d1840533fce5b820256e369ddd" translate="yes" xml:space="preserve">
          <source>When used with the &lt;code&gt;strptime()&lt;/code&gt; method, the &lt;code&gt;%p&lt;/code&gt; directive only affects the output hour field if the &lt;code&gt;%I&lt;/code&gt; directive is used to parse the hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8a227fcef52e704757038bfb5a5f8a8ba80e0a" translate="yes" xml:space="preserve">
          <source>When used with the &lt;code&gt;strptime()&lt;/code&gt; method, the leading zero is optional for formats &lt;code&gt;%d&lt;/code&gt;, &lt;code&gt;%m&lt;/code&gt;, &lt;code&gt;%H&lt;/code&gt;, &lt;code&gt;%I&lt;/code&gt;, &lt;code&gt;%M&lt;/code&gt;, &lt;code&gt;%S&lt;/code&gt;, &lt;code&gt;%J&lt;/code&gt;, &lt;code&gt;%U&lt;/code&gt;, &lt;code&gt;%W&lt;/code&gt;, and &lt;code&gt;%V&lt;/code&gt;. Format &lt;code&gt;%y&lt;/code&gt; does require a leading zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8993c4db89e355448ee2758089ff089b6167f894" translate="yes" xml:space="preserve">
          <source>When user code raises SystemExit either directly or by calling sys.exit, IDLE returns to a Shell prompt instead of exiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d99d6e745dcc773c5780813fa3d777f5ab117b" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#cmdoption-trace-r&quot;&gt;&lt;code&gt;--report&lt;/code&gt;&lt;/a&gt;, write a brief summary to stdout for each file processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69285961c4bd67c93bcd61d97d840352615a6b6" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;#concurrent.futures.ProcessPoolExecutor&quot;&gt;&lt;code&gt;ProcessPoolExecutor&lt;/code&gt;&lt;/a&gt;, this method chops &lt;em&gt;iterables&lt;/em&gt; into a number of chunks which it submits to the pool as separate tasks. The (approximate) size of these chunks can be specified by setting &lt;em&gt;chunksize&lt;/em&gt; to a positive integer. For very long iterables, using a large value for &lt;em&gt;chunksize&lt;/em&gt; can significantly improve performance compared to the default size of 1. With &lt;a href=&quot;#concurrent.futures.ThreadPoolExecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;chunksize&lt;/em&gt; has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dbf8b14ab5b34c346cf0ec2ca601d364ad77a4" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;shell=True&lt;/code&gt;, the &lt;a href=&quot;shlex#shlex.quote&quot;&gt;&lt;code&gt;shlex.quote()&lt;/code&gt;&lt;/a&gt; function can be used to properly escape whitespace and shell metacharacters in strings that are going to be used to construct shell commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8018ded6871ec6f5c2db4b1df5eb57ea72056b" translate="yes" xml:space="preserve">
          <source>When using IDLE, tooltips show the signatures and first lines of the docstrings of typed in function-/method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5ee388e1f0b24ab337fb675482fe01a76a1b13" translate="yes" xml:space="preserve">
          <source>When using a &lt;code&gt;SharedMemoryManager&lt;/code&gt; in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, the shared memory blocks created using that manager are all released when the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement&amp;rsquo;s code block finishes execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff5871a771c52192ce76b27da8593fb1ba702e3" translate="yes" xml:space="preserve">
          <source>When using any of the policy objects derived from &lt;a href=&quot;email.policy#email.policy.EmailPolicy&quot;&gt;&lt;code&gt;EmailPolicy&lt;/code&gt;&lt;/a&gt;, all headers are produced by &lt;a href=&quot;#email.headerregistry.HeaderRegistry&quot;&gt;&lt;code&gt;HeaderRegistry&lt;/code&gt;&lt;/a&gt; and have &lt;a href=&quot;#email.headerregistry.BaseHeader&quot;&gt;&lt;code&gt;BaseHeader&lt;/code&gt;&lt;/a&gt; as their last base class. Each header class has an additional base class that is determined by the type of the header. For example, many headers have the class &lt;a href=&quot;#email.headerregistry.UnstructuredHeader&quot;&gt;&lt;code&gt;UnstructuredHeader&lt;/code&gt;&lt;/a&gt; as their other base class. The specialized second class for a header is determined by the name of the header, using a lookup table stored in the &lt;a href=&quot;#email.headerregistry.HeaderRegistry&quot;&gt;&lt;code&gt;HeaderRegistry&lt;/code&gt;&lt;/a&gt;. All of this is managed transparently for the typical application program, but interfaces are provided for modifying the default behavior for use by more complex applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05e16fdd139b928e5d9f97d7e26405bb10ad23a" translate="yes" xml:space="preserve">
          <source>When using array objects from code written in C or C++ (the only way to effectively make use of this information), it makes more sense to use the buffer interface supported by array objects. This method is maintained for backward compatibility and should be avoided in new code. The buffer interface is documented in &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;Buffer Protocol&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b80cace7f20688ab820fe8baf0df818b93de50" translate="yes" xml:space="preserve">
          <source>When using multiple processes, one generally uses message passing for communication between processes and avoids having to use any synchronization primitives like locks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfd6a46b825093b75110261b57205d3c8b35775e" translate="yes" xml:space="preserve">
          <source>When using the &lt;em&gt;spawn&lt;/em&gt; or &lt;em&gt;forkserver&lt;/em&gt; start methods many types from &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; need to be picklable so that child processes can use them. However, one should generally avoid sending shared objects to other processes using pipes or queues. Instead you should arrange the program so that a process which needs access to a shared resource created elsewhere can inherit it from an ancestor process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f3d8f9182ed3d95d5c0426514f0709e918d398" translate="yes" xml:space="preserve">
          <source>When using this pattern, remember that all classes that inherit from &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt; are run as tests. The &lt;code&gt;Mixin&lt;/code&gt; class in the example above does not have any data and so can&amp;rsquo;t be run by itself, thus it does not inherit from &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc63598e62f8448d98f0887d22314a85ab47257" translate="yes" xml:space="preserve">
          <source>When using weekday-based rotation, specify &amp;lsquo;W0&amp;rsquo; for Monday, &amp;lsquo;W1&amp;rsquo; for Tuesday, and so on up to &amp;lsquo;W6&amp;rsquo; for Sunday. In this case, the value passed for &lt;em&gt;interval&lt;/em&gt; isn&amp;rsquo;t used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6aea84bd51b5a34854466c47a84c480e9d183e1" translate="yes" xml:space="preserve">
          <source>When working in a command shell, users can make a virtual environment active by running an &lt;code&gt;activate&lt;/code&gt; script in the virtual environment&amp;rsquo;s executables directory (the precise filename and command to use the file is shell-dependent), which prepends the virtual environment&amp;rsquo;s directory for executables to the &lt;code&gt;PATH&lt;/code&gt; environment variable for the running shell. There should be no need in other circumstances to activate a virtual environment; scripts installed into virtual environments have a &amp;ldquo;shebang&amp;rdquo; line which points to the virtual environment&amp;rsquo;s Python interpreter. This means that the script will run with that interpreter regardless of the value of &lt;code&gt;PATH&lt;/code&gt;. On Windows, &amp;ldquo;shebang&amp;rdquo; line processing is supported if you have the Python Launcher for Windows installed (this was added to Python in 3.3 - see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0397&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 397&lt;/strong&gt;&lt;/a&gt; for more details). Thus, double-clicking an installed script in a Windows Explorer window should run the script with the correct interpreter without there needing to be any reference to its virtual environment in &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a8029dbde9896495f35f3b5cc6049139cf4061" translate="yes" xml:space="preserve">
          <source>When writing a docstring, choose docstring examples with care. There&amp;rsquo;s an art to this that needs to be learned&amp;mdash;it may not be natural at first. Examples should add genuine value to the documentation. A good example can often be worth many words. If done with care, the examples will be invaluable for your users, and will pay back the time it takes to collect them many times over as the years go by and things change. I&amp;rsquo;m still amazed at how often one of my &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; examples stops working after a &amp;ldquo;harmless&amp;rdquo; change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8592ae082c5c9b46046c7a2f018c32ed0f608909" translate="yes" xml:space="preserve">
          <source>When writing a file, if the file size is not known in advance but may exceed 2 GiB, pass &lt;code&gt;force_zip64=True&lt;/code&gt; to ensure that the header format is capable of supporting large files. If the file size is known in advance, construct a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; object with &lt;a href=&quot;#zipfile.ZipInfo.file_size&quot;&gt;&lt;code&gt;file_size&lt;/code&gt;&lt;/a&gt; set, and use that as the &lt;em&gt;name&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eabb64e4773edb5fffc016299f8bed93923cd8c" translate="yes" xml:space="preserve">
          <source>When writing output to the stream, if &lt;em&gt;newline&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, any &lt;code&gt;'\n'&lt;/code&gt; characters written are translated to the system default line separator, &lt;a href=&quot;os#os.linesep&quot;&gt;&lt;code&gt;os.linesep&lt;/code&gt;&lt;/a&gt;. If &lt;em&gt;newline&lt;/em&gt; is &lt;code&gt;''&lt;/code&gt; or &lt;code&gt;'\n'&lt;/code&gt;, no translation takes place. If &lt;em&gt;newline&lt;/em&gt; is any of the other legal values, any &lt;code&gt;'\n'&lt;/code&gt; characters written are translated to the given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067f2ecb8b6372c1f3e42f05250baae071a8c1df" translate="yes" xml:space="preserve">
          <source>When writing to the path fails because the path is read-only (&lt;a href=&quot;errno#errno.EACCES&quot;&gt;&lt;code&gt;errno.EACCES&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;exceptions#PermissionError&quot;&gt;&lt;code&gt;PermissionError&lt;/code&gt;&lt;/a&gt;), do not propagate the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aec152755409343dddc07ce07a2031e69c7060e" translate="yes" xml:space="preserve">
          <source>When you are finished with a DOM tree, you may optionally call the &lt;code&gt;unlink()&lt;/code&gt; method to encourage early cleanup of the now-unneeded objects. &lt;code&gt;unlink()&lt;/code&gt; is an &lt;a href=&quot;#module-xml.dom.minidom&quot;&gt;&lt;code&gt;xml.dom.minidom&lt;/code&gt;&lt;/a&gt;-specific extension to the DOM API that renders the node and its descendants are essentially useless. Otherwise, Python&amp;rsquo;s garbage collector will eventually take care of the objects in the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b4b9124db1d9506c6395b32b710d76c6d1388e" translate="yes" xml:space="preserve">
          <source>When you attach a mock as an attribute of another mock (or as the return value) it becomes a &amp;ldquo;child&amp;rdquo; of that mock. Calls to the child are recorded in the &lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt;&lt;code&gt;method_calls&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt; attributes of the parent. This is useful for configuring child mocks and then attaching them to the parent, or for attaching mocks to a parent that records all calls to the children and allows you to make assertions about the order of calls between mocks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be1b470500af8dd6da06d2ce49d4cefe28a83a6b" translate="yes" xml:space="preserve">
          <source>When you compile a node tree with &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;, the compiler expects &lt;code&gt;lineno&lt;/code&gt; and &lt;code&gt;col_offset&lt;/code&gt; attributes for every node that supports them. This is rather tedious to fill in for generated nodes, so this helper adds these attributes recursively where not already set, by setting them to the values of the parent node. It works recursively starting at &lt;em&gt;node&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8168a6e30b1a0dd14b3d6bed0aa248b7873034b1" translate="yes" xml:space="preserve">
          <source>When you have a consistent answer, there are three ways you can use it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980c6f4da1cfe70fd805b5d970a5223e7e867fdd" translate="yes" xml:space="preserve">
          <source>When you have finished providing data to the compressor, call the &lt;a href=&quot;#bz2.BZ2Compressor.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; method to finish the compression process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebaa64dbb3e64356296053a73cf19b2addb5348d" translate="yes" xml:space="preserve">
          <source>When you have placed your tests in a module, the module can itself be the test runner. When a test fails, you can arrange for your test runner to re-run only the failing doctest while you debug the problem. Here is a minimal example of such a test runner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bcd3b04b0d7cac7cf2e9d8396970c1121f17d6" translate="yes" xml:space="preserve">
          <source>When you nest patch decorators the mocks are passed in to the decorated function in the same order they applied (the normal &lt;em&gt;Python&lt;/em&gt; order that decorators are applied). This means from the bottom up, so in the example above the mock for &lt;code&gt;module.ClassName1&lt;/code&gt; is passed in first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0ae07c9462ed9e0e688008d531cdc33cae796d" translate="yes" xml:space="preserve">
          <source>When you use the context to connect to a server, &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;check_hostname&lt;/code&gt;&lt;/a&gt; validate the server certificate: it ensures that the server certificate was signed with one of the CA certificates, checks the signature for correctness, and verifies other properties like validity and identity of the hostname:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693ee6b490569d4d5711a3b5add559ce77978de6" translate="yes" xml:space="preserve">
          <source>When you write a new script, consider adding these lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205afaa9a1fee6195f966485ecd67e9562f2bb6a" translate="yes" xml:space="preserve">
          <source>Whenever &lt;em&gt;x&lt;/em&gt; or &lt;em&gt;y&lt;/em&gt; arguments to a function or a method are optional, they default to the current cursor location. Whenever &lt;em&gt;attr&lt;/em&gt; is optional, it defaults to &lt;code&gt;A_NORMAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8765d4b8962f94d6b6eef545316618c01d52eff3" translate="yes" xml:space="preserve">
          <source>Whenever the documentation mentions a &lt;em&gt;character string&lt;/em&gt; it can be specified as a Unicode string or a byte string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999400ad526ca682840c4c4ec0cf126c5252625e" translate="yes" xml:space="preserve">
          <source>Whenever the documentation mentions a &lt;em&gt;character&lt;/em&gt; it can be specified as an integer, a one-character Unicode string or a one-byte byte string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bfb2c4bd7e77dce0abe22138a5a1dba3fd4d8e" translate="yes" xml:space="preserve">
          <source>Where T is the total number of elements in both sequences, and M is the number of matches, this is 2.0*M / T. Note that this is &lt;code&gt;1.0&lt;/code&gt; if the sequences are identical, and &lt;code&gt;0.0&lt;/code&gt; if they have nothing in common.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0698d3446ab96f16d8d0f4a7d46e511ffaa1b1a" translate="yes" xml:space="preserve">
          <source>Where the components are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9043b61aa57de9fe6a9cd0fbf895ea057d46ea33" translate="yes" xml:space="preserve">
          <source>Where the following options are understood:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a5f04e05ccffc4c2734a94e36079f88e06a02b" translate="yes" xml:space="preserve">
          <source>Where there is no registered implementation for a specific type, its method resolution order is used to find a more generic implementation. The original function decorated with &lt;code&gt;@singledispatch&lt;/code&gt; is registered for the base &lt;code&gt;object&lt;/code&gt; type, which means it is used if no better implementation is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53573fb4e5abc3ff45094b0052fde922a5a87848" translate="yes" xml:space="preserve">
          <source>Where to patch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18e7a9c733c88bde9faa67d79db05fefdfd3ec9" translate="yes" xml:space="preserve">
          <source>Wherever the former background character appears, it is changed to the new background character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a042ada48fa9e3c00cffdff61a30274621080e2" translate="yes" xml:space="preserve">
          <source>Whether &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;check_hostname&lt;/code&gt;&lt;/a&gt; falls back to verify the cert&amp;rsquo;s subject common name in the absence of a subject alternative name extension (default: true).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd43d90a2c53503d089732d23dcac513590b751" translate="yes" xml:space="preserve">
          <source>Whether &lt;em&gt;K&lt;/em&gt; is a member of the set of keys of a &lt;a href=&quot;#http.cookies.Morsel&quot;&gt;&lt;code&gt;Morsel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d302d51b9f99d9aa32a01277d93fb96ac09ca34" translate="yes" xml:space="preserve">
          <source>Whether a frame is considered to originate in a certain module is determined by the &lt;code&gt;__name__&lt;/code&gt; in the frame globals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a943fe736644b8b8c93795478580ff25f5fcf6e7" translate="yes" xml:space="preserve">
          <source>Whether line buffering is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04435c32a748b091872ac0d2173dbfad57d8cf08" translate="yes" xml:space="preserve">
          <source>Whether or not two values are considered close is determined according to given absolute and relative tolerances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704f9ab62db9376e10128b17cb17cbd1569fe1d7" translate="yes" xml:space="preserve">
          <source>Whether output is buffered is usually determined by &lt;em&gt;file&lt;/em&gt;, but if the &lt;em&gt;flush&lt;/em&gt; keyword argument is true, the stream is forcibly flushed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9704f5d09c8a18f1f4b364c56355a76782182d8" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the &lt;em&gt;Application-Layer Protocol Negotiation&lt;/em&gt; TLS extension as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc7301.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 7301&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75f6bb7fcb11e2f45c69c0a7ca4c4682d4f5923" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the &lt;em&gt;Next Protocol Negotiation&lt;/em&gt; as described in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation&quot;&gt;Application Layer Protocol Negotiation&lt;/a&gt;. When true, you can use the &lt;a href=&quot;#ssl.SSLContext.set_npn_protocols&quot;&gt;&lt;code&gt;SSLContext.set_npn_protocols()&lt;/code&gt;&lt;/a&gt; method to advertise which protocols you want to support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2de0f65d5d2e9aa283fe9814ef530df9f4d7f4" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the &lt;em&gt;Server Name Indication&lt;/em&gt; extension (as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc6066.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 6066&lt;/strong&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10549c2669f338103d9d69275acd6ff0bb42f85" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the Elliptic Curve-based Diffie-Hellman key exchange. This should be true unless the feature was explicitly disabled by the distributor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189c811d0c4a89efbb0bd31d293ff4f4943d0dbe" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the SSL 2.0 protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2afc4d9cd37973dffe79768c99919a50576238" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the SSL 3.0 protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e2466bdf6938ea2d60c44e09f1c3edaea29f39" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the TLS 1.0 protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb5564adfd4cdc59e03f6665550cc56692d4f99" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the TLS 1.1 protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca6b49130e274478019943c2fbeb20a7cbc1d17" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the TLS 1.2 protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e350ddccc623cf6675373d55c31c906ec7237c92" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support for the TLS 1.3 protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7e4191f43e54b167216c9758819c2068bd3dfe" translate="yes" xml:space="preserve">
          <source>Whether the OpenSSL library has built-in support not checking subject common name and &lt;a href=&quot;#ssl.SSLContext.hostname_checks_common_name&quot;&gt;&lt;code&gt;SSLContext.hostname_checks_common_name&lt;/code&gt;&lt;/a&gt; is writeable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f23b4bf4e20fc7a9bdac4783297fabf3f1c246" translate="yes" xml:space="preserve">
          <source>Whether the currency symbol is separated from the value by a space (for positive resp. negative values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb65cdf22c5687fc74b96fb5b3b8c68399e1532" translate="yes" xml:space="preserve">
          <source>Whether the currency symbol precedes the value (for positive resp. negative values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6318ba22ae30ad3468f9876a3fd1a5745b34ced" translate="yes" xml:space="preserve">
          <source>Whether the data is buffered, chunked or reassembled depends on the transport. In general, you shouldn&amp;rsquo;t rely on specific semantics and instead make your parsing generic and flexible. However, data is always received in the correct order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728787761dd4dda0e68398ac7fa7afe469103a47" translate="yes" xml:space="preserve">
          <source>Whether the path points to an existing file or directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0b74000f7c6661d85ff5da8e8055be52233230" translate="yes" xml:space="preserve">
          <source>Whether the server will allow the reuse of an address. This defaults to &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, and can be set in subclasses to change the policy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4273367589a735b6de5ee51a98d1f45ef36ee8a3" translate="yes" xml:space="preserve">
          <source>Whether to match the peer cert&amp;rsquo;s hostname with &lt;a href=&quot;#ssl.match_hostname&quot;&gt;&lt;code&gt;match_hostname()&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#ssl.SSLSocket.do_handshake&quot;&gt;&lt;code&gt;SSLSocket.do_handshake()&lt;/code&gt;&lt;/a&gt;. The context&amp;rsquo;s &lt;a href=&quot;#ssl.SSLContext.verify_mode&quot;&gt;&lt;code&gt;verify_mode&lt;/code&gt;&lt;/a&gt; must be set to &lt;a href=&quot;#ssl.CERT_OPTIONAL&quot;&gt;&lt;code&gt;CERT_OPTIONAL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt;, and you must pass &lt;em&gt;server_hostname&lt;/em&gt; to &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt; in order to match the hostname. Enabling hostname checking automatically sets &lt;a href=&quot;#ssl.SSLContext.verify_mode&quot;&gt;&lt;code&gt;verify_mode&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;#ssl.CERT_NONE&quot;&gt;&lt;code&gt;CERT_NONE&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt;. It cannot be set back to &lt;a href=&quot;#ssl.CERT_NONE&quot;&gt;&lt;code&gt;CERT_NONE&lt;/code&gt;&lt;/a&gt; as long as hostname checking is enabled. The &lt;a href=&quot;#ssl.PROTOCOL_TLS_CLIENT&quot;&gt;&lt;code&gt;PROTOCOL_TLS_CLIENT&lt;/code&gt;&lt;/a&gt; protocol enables hostname checking by default. With other protocols, hostname checking must be enabled explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b724e20c7a82379a9a08525bdba888f74aefd96" translate="yes" xml:space="preserve">
          <source>Whether to try to verify other peers&amp;rsquo; certificates and how to behave if verification fails. This attribute must be one of &lt;a href=&quot;#ssl.CERT_NONE&quot;&gt;&lt;code&gt;CERT_NONE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.CERT_OPTIONAL&quot;&gt;&lt;code&gt;CERT_OPTIONAL&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25631d4668b3c0f9f32771f513f7cdbaf448ad8a" translate="yes" xml:space="preserve">
          <source>Whether writes are passed immediately to the underlying binary buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cfd83d887f9f86d88898814a6869aad231de3a" translate="yes" xml:space="preserve">
          <source>Which &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-package&quot;&gt;package&lt;/a&gt; a module belongs to. If the module is top-level (i.e. not a part of any specific package) then the attribute should be set to &lt;code&gt;''&lt;/code&gt;, else it should be set to the name of the package (which can be &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; if the module is a package itself). Defaults to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4040c278cd792b1142c2b0b1b82b0f58225cee15" translate="yes" xml:space="preserve">
          <source>Which Docstrings Are Examined?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422d9e85c4992821c007871473f5fa36c3b56c95" translate="yes" xml:space="preserve">
          <source>Which produces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a995c55c592cf94976c7d041d87c783ecf9451c8" translate="yes" xml:space="preserve">
          <source>Which solves the fundamental issue of processes colliding with each other resulting in a bad file descriptor error, but introduces a potential danger to applications which replace &lt;a href=&quot;sys#sys.stdin&quot;&gt;&lt;code&gt;sys.stdin()&lt;/code&gt;&lt;/a&gt; with a &amp;ldquo;file-like object&amp;rdquo; with output buffering. This danger is that if multiple processes call &lt;a href=&quot;io#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; on this file-like object, it could result in the same data being flushed to the object multiple times, resulting in corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddaaf09868cf6400cdcb648881000117dda08bc9" translate="yes" xml:space="preserve">
          <source>Whichever method you choose, you should provide a &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; that also hides the (unimportant) value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c646905a39f0ba1aaa09265f14adc54f064ca461" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; can have members of any type, once you mix in an additional type, all the members must have values of that type, e.g. &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; above. This restriction does not apply to mix-ins which only add methods and don&amp;rsquo;t specify another data type such as &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e556a67224525bf738669c6821725b3262368ed7" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; are expected to cover the majority of use-cases, they cannot cover them all. Here are recipes for some different types of enumerations that can be used directly, or as examples for creating one&amp;rsquo;s own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe708d810599cc0f179e22587c1998a55fa295c9" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; is part of the &lt;a href=&quot;#module-enum&quot;&gt;&lt;code&gt;enum&lt;/code&gt;&lt;/a&gt; module, it would be very simple to implement independently:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02cb7cf515d5ba420c468f846b2ed31c98f290b6" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;https://docs.python.org/3.8/reference/index.html#reference-index&quot;&gt;The Python Language Reference&lt;/a&gt; describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It also describes some of the optional components that are commonly included in Python distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0785829e0c8a5f6cee5eb7d590c1588c0e86596" translate="yes" xml:space="preserve">
          <source>While ConfigParser objects also use an &lt;code&gt;OPTCRE&lt;/code&gt; attribute for recognizing option lines, it&amp;rsquo;s not recommended to override it because that would interfere with constructor options &lt;em&gt;allow_no_value&lt;/em&gt; and &lt;em&gt;delimiters&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aea4fc9adcf74252cf54344d84df634df38ce92" translate="yes" xml:space="preserve">
          <source>While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that &lt;code&gt;0 &amp;lt;= x &amp;lt; 256&lt;/code&gt; (attempts to violate this restriction will trigger &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;). This is done deliberately to emphasise that while many binary formats include ASCII based elements and can be usefully manipulated with some text-oriented algorithms, this is not generally the case for arbitrary binary data (blindly applying text processing algorithms to binary data formats that are not ASCII compatible will usually lead to data corruption).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afca682adab62f0880b590c7e59b89279df102ab" translate="yes" xml:space="preserve">
          <source>While calling &lt;a href=&quot;#bz2.BZ2File.peek&quot;&gt;&lt;code&gt;peek()&lt;/code&gt;&lt;/a&gt; does not change the file position of the &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt;, it may change the position of the underlying file object (e.g. if the &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt; was constructed by passing a file object for &lt;em&gt;filename&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38177ebefc8686714a66d6d82cf4ee10e3058268" translate="yes" xml:space="preserve">
          <source>While calling &lt;a href=&quot;#gzip.GzipFile.peek&quot;&gt;&lt;code&gt;peek()&lt;/code&gt;&lt;/a&gt; does not change the file position of the &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt;, it may change the position of the underlying file object (e.g. if the &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; was constructed with the &lt;em&gt;fileobj&lt;/em&gt; parameter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6545af489ed1f20fcc9c3b27afc7248e80f9df3" translate="yes" xml:space="preserve">
          <source>While calling &lt;a href=&quot;#lzma.LZMAFile.peek&quot;&gt;&lt;code&gt;peek()&lt;/code&gt;&lt;/a&gt; does not change the file position of the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt;, it may change the position of the underlying file object (e.g. if the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; was constructed by passing a file object for &lt;em&gt;filename&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bb1fc2909ab24f32996f8a6e44f36be2000ff2" translate="yes" xml:space="preserve">
          <source>While curses is most widely used in the Unix environment, versions are available for Windows, DOS, and possibly other systems as well. This extension module is designed to match the API of ncurses, an open-source curses library hosted on Linux and the BSD variants of Unix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786cdfb379403ea4cce195f3dca6c17b6ee0052a" translate="yes" xml:space="preserve">
          <source>While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67281bc9ed61750f29460e86ce99cc6681899c14" translate="yes" xml:space="preserve">
          <source>While many objects natively support use in with statements, sometimes a resource needs to be managed that isn&amp;rsquo;t a context manager in its own right, and doesn&amp;rsquo;t implement a &lt;code&gt;close()&lt;/code&gt; method for use with &lt;code&gt;contextlib.closing&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93bfa21ab3a98f4858cf4bc1efde7812c899e149" translate="yes" xml:space="preserve">
          <source>While many useful operations may take place between parsing and bytecode generation, the simplest operation is to do nothing. For this purpose, using the &lt;a href=&quot;#module-parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; module to produce an intermediate data structure is equivalent to the code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b514cb7bc8722d4e70eacb8c91412ef7465d4c76" translate="yes" xml:space="preserve">
          <source>While other exceptions may still occur, this method is called &amp;ldquo;safe&amp;rdquo; because it always tries to return a usable string instead of raising an exception. In another sense, &lt;a href=&quot;#string.Template.safe_substitute&quot;&gt;&lt;code&gt;safe_substitute()&lt;/code&gt;&lt;/a&gt; may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a915d6b0d37f05b5affd54282cd5bb33c1eff648" translate="yes" xml:space="preserve">
          <source>While parsing the command line, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; checks for a variety of errors, including ambiguous options, invalid types, invalid options, wrong number of positional arguments, etc. When it encounters such an error, it exits and prints the error along with a usage message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0a5de79e2df6a8d199d3d065c11df24c028f5b" translate="yes" xml:space="preserve">
          <source>While symlinks are supported on Windows, they are not recommended. Of particular note is that double-clicking &lt;code&gt;python.exe&lt;/code&gt; in File Explorer will resolve the symlink eagerly and ignore the virtual environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e04edc4d322f07593d9595090717727de98239" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt; operations are used only for simple containment testing in the general case, some specialised sequences (such as &lt;a href=&quot;#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;) also use them for subsequence testing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d31855d6be2ba764837d00ac8c9c8aa85b873bb" translate="yes" xml:space="preserve">
          <source>While the above API is the most common and convenient usage, you can get all of that information from the &lt;code&gt;Distribution&lt;/code&gt; class. A &lt;code&gt;Distribution&lt;/code&gt; is an abstract object that represents the metadata for a Python package. You can get the &lt;code&gt;Distribution&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6319151ce24cde9d9afeaf68fdcdbec22e36ba3" translate="yes" xml:space="preserve">
          <source>While the builtin &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; and the associated &lt;a href=&quot;io#module-io&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt; module are the recommended approach for working with encoded text files, this module provides additional utility functions and classes that allow the use of a wider range of codecs when working with binary files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42821c116527a74cd5c9f35556c03beeb2cf5d8f" translate="yes" xml:space="preserve">
          <source>While the method has a default implementation, it is suggested that it be overridden if possible for performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14032b7a66889d07d3394faf5c484ef0cdf94cea" translate="yes" xml:space="preserve">
          <source>While these are technically &lt;a href=&quot;exceptions#warning-categories-as-exceptions&quot;&gt;built-in exceptions&lt;/a&gt;, they are documented here, because conceptually they belong to the warnings mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfc856d002acccc1fa089a7e19be1782a8e1118" translate="yes" xml:space="preserve">
          <source>While they are not listed below, the &lt;code&gt;camelCase&lt;/code&gt; names used for some methods and functions in this module in the Python 2.x series are still supported by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4b7324352db1ad0e38dfcfad84d64814555c92" translate="yes" xml:space="preserve">
          <source>While this decorator makes it easy to create well behaved totally ordered types, it &lt;em&gt;does&lt;/em&gt; come at the cost of slower execution and more complex stack traces for the derived comparison methods. If performance benchmarking indicates this is a bottleneck for a given application, implementing all six rich comparison methods instead is likely to provide an easy speed boost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8863d901011fb351d3633ca34f340a2828c5fea0" translate="yes" xml:space="preserve">
          <source>While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example). In such circumstances, it is likely that specialized &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;s would be used with particular &lt;a href=&quot;#logging.Handler&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="840def8eae0283a6cbfe40db44014f3c77b1c43b" translate="yes" xml:space="preserve">
          <source>While using a hierarchy of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;-derived classes can be convenient in sharing fixtures and helper functions, defining test methods on base classes that are not intended to be instantiated directly does not play well with this method. Doing so, however, can be useful when the fixtures are different and defined in subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988a0cff7503163f428287a56046c0bb09b3b7fd" translate="yes" xml:space="preserve">
          <source>While within the context manager all warnings will simply be ignored. This allows you to use known-deprecated code without having to see the warning while not suppressing the warning for other code that might not be aware of its use of deprecated code. Note: this can only be guaranteed in a single-threaded application. If two or more threads use the &lt;a href=&quot;#warnings.catch_warnings&quot;&gt;&lt;code&gt;catch_warnings&lt;/code&gt;&lt;/a&gt; context manager at the same time, the behavior is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37619fc13053f82b7cb7da3d24ceb1598ab6d05c" translate="yes" xml:space="preserve">
          <source>White</source>
          <target state="translated">White</target>
        </trans-unit>
        <trans-unit id="62d692a71777fd55efffbdb0ca5893dd735770aa" translate="yes" xml:space="preserve">
          <source>Whitebox testing (examining the code being tested when the tests are being written) is preferred. Blackbox testing (testing only the published user interface) is not complete enough to make sure all boundary and edge cases are tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931f4c5c75b75b488b411586b1c52d7e9f8da29c" translate="yes" xml:space="preserve">
          <source>Whiteout.</source>
          <target state="translated">Whiteout.</target>
        </trans-unit>
        <trans-unit id="b78a557954071d939474b0820ce2d887c5949beb" translate="yes" xml:space="preserve">
          <source>Whitespace characters between formats are ignored; a count and its format must not contain whitespace though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7e00ea7c678d4c6c68704506146cc03ff76587" translate="yes" xml:space="preserve">
          <source>Whitespace is not allowed between the &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; and the directive option name. The directive option name can be any of the option flag names explained above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fe1444c5cef2f1bf2942426dad26edc71785bf" translate="yes" xml:space="preserve">
          <source>Why is it printing &lt;code&gt;False&lt;/code&gt;? ctypes instances are objects containing a memory block plus some &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;descriptor&lt;/a&gt;s accessing the contents of the memory. Storing a Python object in the memory block does not store the object itself, instead the &lt;code&gt;contents&lt;/code&gt; of the object is stored. Accessing the contents again constructs a new Python object each time!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8f747f33b6f74dbe7fd5ac838801c9d72b22ac" translate="yes" xml:space="preserve">
          <source>Wide char variant of &lt;a href=&quot;#msvcrt.getch&quot;&gt;&lt;code&gt;getch()&lt;/code&gt;&lt;/a&gt;, returning a Unicode value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5be99ca3a70e3977f2f65814d98de5c5b56d2d2" translate="yes" xml:space="preserve">
          <source>Wide char variant of &lt;a href=&quot;#msvcrt.getche&quot;&gt;&lt;code&gt;getche()&lt;/code&gt;&lt;/a&gt;, returning a Unicode value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255f38720857b44ab5ff2e2d98e37a3c89e37d00" translate="yes" xml:space="preserve">
          <source>Wide char variant of &lt;a href=&quot;#msvcrt.putch&quot;&gt;&lt;code&gt;putch()&lt;/code&gt;&lt;/a&gt;, accepting a Unicode value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0779174f97c45da57524e6b209ae90dff53c3d" translate="yes" xml:space="preserve">
          <source>Wide char variant of &lt;a href=&quot;#msvcrt.ungetch&quot;&gt;&lt;code&gt;ungetch()&lt;/code&gt;&lt;/a&gt;, accepting a Unicode value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df15305cc141d8294713eba43aaee44d1edfe3bd" translate="yes" xml:space="preserve">
          <source>Widget</source>
          <target state="translated">Widget</target>
        </trans-unit>
        <trans-unit id="bfee860a8a5dc6ac74dd99d215ad1d51cce5c8c7" translate="yes" xml:space="preserve">
          <source>Widget States</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79beed1fb49764e8862ef327797df09e07c316a6" translate="yes" xml:space="preserve">
          <source>Widget has keyboard focus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2233730413ec55a5b571e7d775be44e6e3e013b3" translate="yes" xml:space="preserve">
          <source>Widget is being pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da46e3b7f16d7ede37378d1c431a4c43fb3ef6fc" translate="yes" xml:space="preserve">
          <source>Widget is disabled under program control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211f67af4e336b2c25b87952f14880aca797600a" translate="yes" xml:space="preserve">
          <source>Widget should not allow user modification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802f4ec2a7a115583d6e55e6d32a4beead4d14b2" translate="yes" xml:space="preserve">
          <source>Width of the terminal window in characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080323da0bfe1ab0191a174c2237858164d7cdaf" translate="yes" xml:space="preserve">
          <source>Wikipedia article with information on which algorithms have known issues and what that means regarding their use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b3cf193c6d821b49984f993d3ea75cf5a5a2be" translate="yes" xml:space="preserve">
          <source>Wikipedia entry for &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiset&quot;&gt;Multisets&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113f18f5469ce5347437610dd55d140a53fa09c6" translate="yes" xml:space="preserve">
          <source>Wikipedia has a &lt;a href=&quot;https://en.wikipedia.org/wiki/Naive_Bayes_classifier#Sex_classification&quot;&gt;nice example of a Naive Bayesian Classifier&lt;/a&gt;. The challenge is to predict a person&amp;rsquo;s gender from measurements of normally distributed features including height, weight, and foot size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fe06680d0563e4e9deb6c1d86aa445e8e5c908" translate="yes" xml:space="preserve">
          <source>Will add, among other things, a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; that looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d239e74c0170d39d6786ccf1a848d04c2c537ed2" translate="yes" xml:space="preserve">
          <source>Will call &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt;&lt;code&gt;found_terminator()&lt;/code&gt;&lt;/a&gt; when the indicated number of characters have been received</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4426413765c214020905681f96c46df4a803dd94" translate="yes" xml:space="preserve">
          <source>Will call &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt;&lt;code&gt;found_terminator()&lt;/code&gt;&lt;/a&gt; when the string is found in the input stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47374c257b33abb533116a9cb9651554e18faed7" translate="yes" xml:space="preserve">
          <source>Will generally raise &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; if executed on a 32-bit operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90c5925294b920cc6ddfbe599b541b3edf485fe" translate="yes" xml:space="preserve">
          <source>Will try to match with &lt;code&gt;yes-pattern&lt;/code&gt; if the group with given &lt;em&gt;id&lt;/em&gt; or &lt;em&gt;name&lt;/em&gt; exists, and with &lt;code&gt;no-pattern&lt;/code&gt; if it doesn&amp;rsquo;t. &lt;code&gt;no-pattern&lt;/code&gt; is optional and can be omitted. For example, &lt;code&gt;(&amp;lt;)?(\w+@\w+(?:\.\w+)+)(?(1)&amp;gt;|$)&lt;/code&gt; is a poor email matching pattern, which will match with &lt;code&gt;'&amp;lt;user@host.com&amp;gt;'&lt;/code&gt; as well as &lt;code&gt;'user@host.com'&lt;/code&gt;, but not with &lt;code&gt;'&amp;lt;user@host.com'&lt;/code&gt; nor &lt;code&gt;'user@host.com&amp;gt;'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dab24e3d9f50cff7ee608ff0514afa0cfa05b9" translate="yes" xml:space="preserve">
          <source>Window Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce658069fb4ffc6d3ca8e791633d8df32975802b" translate="yes" xml:space="preserve">
          <source>Window control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660e57fa2bc58f9dadba0b1f9648498cca7a58e4" translate="yes" xml:space="preserve">
          <source>Window menu (Shell and Editor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e449a2f3ba9b16acfab22bc1c12f4e17b45718" translate="yes" xml:space="preserve">
          <source>Window objects, as returned by &lt;a href=&quot;#curses.initscr&quot;&gt;&lt;code&gt;initscr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#curses.newwin&quot;&gt;&lt;code&gt;newwin()&lt;/code&gt;&lt;/a&gt; above, have the following methods and attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="e23575cabbcb9b7c4f9b7f51a07387fed98002f0" translate="yes" xml:space="preserve">
          <source>Windows Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733b53500cac45b1ccabfeea23e2dd3682ceafd7" translate="yes" xml:space="preserve">
          <source>Windows Platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707d9815b3e7e66dfa8de1e9a953cf814bb32ace" translate="yes" xml:space="preserve">
          <source>Windows Popen Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059cace6c4e4f2ba24a96dd77457fa820cea57be" translate="yes" xml:space="preserve">
          <source>Windows and Mac have a notion of an &amp;ldquo;active&amp;rdquo; or foreground window. The &lt;em&gt;background&lt;/em&gt; state is set for widgets in a background window, and cleared for those in the foreground window</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f8b33dac190c990211b26ccc6956c320800b74" translate="yes" xml:space="preserve">
          <source>Windows appends the usual &lt;code&gt;.dll&lt;/code&gt; file suffix automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fc7bf4a41cf349e493878f4d10064c2cb45383" translate="yes" xml:space="preserve">
          <source>Windows file attributes: &lt;code&gt;dwFileAttributes&lt;/code&gt; member of the &lt;code&gt;BY_HANDLE_FILE_INFORMATION&lt;/code&gt; structure returned by &lt;code&gt;GetFileInformationByHandle()&lt;/code&gt;. See the &lt;code&gt;FILE_ATTRIBUTE_*&lt;/code&gt; constants in the &lt;a href=&quot;stat#module-stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fbab09a7f617cae95132c649f8e0c1742cca65" translate="yes" xml:space="preserve">
          <source>Windows only: Creates &lt;a href=&quot;#ctypes.OleDLL&quot;&gt;&lt;code&gt;OleDLL&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612e01f22f9c1d88221548d271f8b961715eb8ed" translate="yes" xml:space="preserve">
          <source>Windows only: Creates &lt;a href=&quot;#ctypes.WinDLL&quot;&gt;&lt;code&gt;WinDLL&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c52f5bde98e844c1500dc7688f5098974c8782" translate="yes" xml:space="preserve">
          <source>Windows only: Encode the operand according to the ANSI codepage (CP_ACP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266fb264e8732c43ca999faee5d793005f28e1c9" translate="yes" xml:space="preserve">
          <source>Windows only: Encode the operand according to the OEM codepage (CP_OEMCP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb6ed45a1b723b7af51540eab62bf7ae64e1059" translate="yes" xml:space="preserve">
          <source>Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the &lt;code&gt;stdcall&lt;/code&gt; calling convention, and are assumed to return &lt;code&gt;int&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8baa6ebf95b244d430b0bac19d2d4be067fc743" translate="yes" xml:space="preserve">
          <source>Windows only: Instances of this class represent loaded shared libraries, functions in these libraries use the &lt;code&gt;stdcall&lt;/code&gt; calling convention, and are assumed to return the windows specific &lt;a href=&quot;#ctypes.HRESULT&quot;&gt;&lt;code&gt;HRESULT&lt;/code&gt;&lt;/a&gt; code. &lt;a href=&quot;#ctypes.HRESULT&quot;&gt;&lt;code&gt;HRESULT&lt;/code&gt;&lt;/a&gt; values contain information specifying whether the function call failed or succeeded, together with additional error code. If the return value signals a failure, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is automatically raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4996849541b713bd583a818c47de0918c05b035c" translate="yes" xml:space="preserve">
          <source>Windows only: Represents a &lt;code&gt;HRESULT&lt;/code&gt; value, which contains success or error information for a function or method call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdabf613004cb36f7b1c0e46576c928355e113b5" translate="yes" xml:space="preserve">
          <source>Windows only: Returns a textual description of the error code &lt;em&gt;code&lt;/em&gt;. If no error code is specified, the last error code is used by calling the Windows api function GetLastError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcbf3ad5bd151aa5b3e3fde3eb8d692caac57ec" translate="yes" xml:space="preserve">
          <source>Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows &lt;code&gt;GetLastError()&lt;/code&gt; function directly, it does not return the ctypes-private copy of the error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2511b1a5b947b91013c7afa28eb6b0b78fe0e385" translate="yes" xml:space="preserve">
          <source>Windows only: The returned function prototype creates functions that use the &lt;code&gt;stdcall&lt;/code&gt; calling convention, except on Windows CE where &lt;a href=&quot;#ctypes.WINFUNCTYPE&quot;&gt;&lt;code&gt;WINFUNCTYPE()&lt;/code&gt;&lt;/a&gt; is the same as &lt;a href=&quot;#ctypes.CFUNCTYPE&quot;&gt;&lt;code&gt;CFUNCTYPE()&lt;/code&gt;&lt;/a&gt;. The function will release the GIL during the call. &lt;em&gt;use_errno&lt;/em&gt; and &lt;em&gt;use_last_error&lt;/em&gt; have the same meaning as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08605ae2b964896441a344b5311963123c2e7022" translate="yes" xml:space="preserve">
          <source>Windows only: This function is a hook which allows implementing in-process COM servers with ctypes. It is called from the DllCanUnloadNow function that the _ctypes extension dll exports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29751233ae7d28491bf89fa51c323518e5fedbd3" translate="yes" xml:space="preserve">
          <source>Windows only: This function is a hook which allows implementing in-process COM servers with ctypes. It is called from the DllGetClassObject function that the &lt;code&gt;_ctypes&lt;/code&gt; extension dll exports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4880e94875e68f82bb6fce3490b9c97c9c5d775d" translate="yes" xml:space="preserve">
          <source>Windows only: return the filename of the VC runtime library used by Python, and by the extension modules. If the name of the library cannot be determined, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e388ef290e4bd8ff8d89808b87dad3695d974a" translate="yes" xml:space="preserve">
          <source>Windows only: returns the current value of the ctypes-private copy of the system &lt;code&gt;LastError&lt;/code&gt; variable in the calling thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8310fccfe554408a2574b1c48ddf84fd935b53" translate="yes" xml:space="preserve">
          <source>Windows only: set the current value of the ctypes-private copy of the system &lt;code&gt;LastError&lt;/code&gt; variable in the calling thread to &lt;em&gt;value&lt;/em&gt; and return the previous value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8358fc5d14e0fbf09bf3e54d163a390795bbe4f7" translate="yes" xml:space="preserve">
          <source>Windows only: this function is probably the worst-named thing in ctypes. It creates an instance of OSError. If &lt;em&gt;code&lt;/em&gt; is not specified, &lt;code&gt;GetLastError&lt;/code&gt; is called to determine the error code. If &lt;em&gt;descr&lt;/em&gt; is not specified, &lt;a href=&quot;#ctypes.FormatError&quot;&gt;&lt;code&gt;FormatError()&lt;/code&gt;&lt;/a&gt; is called to get a textual description of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db996879e3dc4634bda2abfa9ed3e517199ceb69" translate="yes" xml:space="preserve">
          <source>Windows will return one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd7eea9943b6fe344a02e8fbc71ef279241c91a" translate="yes" xml:space="preserve">
          <source>Windows/Cygwin</source>
          <target state="translated">Windows/Cygwin</target>
        </trans-unit>
        <trans-unit id="a807de5503cda53ca6fea19efe8608ddcb20996b" translate="yes" xml:space="preserve">
          <source>Windows: The &lt;a href=&quot;signal#signal.CTRL_C_EVENT&quot;&gt;&lt;code&gt;signal.CTRL_C_EVENT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;signal#signal.CTRL_BREAK_EVENT&quot;&gt;&lt;code&gt;signal.CTRL_BREAK_EVENT&lt;/code&gt;&lt;/a&gt; signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for &lt;em&gt;sig&lt;/em&gt; will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to &lt;em&gt;sig&lt;/em&gt;. The Windows version of &lt;a href=&quot;#os.kill&quot;&gt;&lt;code&gt;kill()&lt;/code&gt;&lt;/a&gt; additionally takes process handles to be killed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf309288e97790d19b86dd6d3f7067de5f4100b" translate="yes" xml:space="preserve">
          <source>WindowsError</source>
          <target state="translated">WindowsError</target>
        </trans-unit>
        <trans-unit id="a20440ab3aefcfb4bb482ffec0fe5d04e27395bf" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; event loop, the &lt;em&gt;pipe&lt;/em&gt; is set to non-blocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2504489b4771be876382108e6f7ae9120afc09b" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt;, each caller is preceded by three numbers: the number of times this specific call was made, and the total and cumulative times spent in the current function while it was invoked by this specific caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44b294510f145891db9e384bc38c4e88df7f7c7" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt;, a number is shown in parentheses after each caller to show how many times this specific call was made. For convenience, a second non-parenthesized number repeats the cumulative time spent in the function at the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab1487529e22885346d5098b46bd492a9089ff9" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt;&lt;code&gt;PureWindowsPath&lt;/code&gt;&lt;/a&gt;, return &lt;code&gt;True&lt;/code&gt; if the path is considered reserved under Windows, &lt;code&gt;False&lt;/code&gt; otherwise. With &lt;a href=&quot;#pathlib.PurePosixPath&quot;&gt;&lt;code&gt;PurePosixPath&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;False&lt;/code&gt; is always returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e771f57ddca6161f395e0eeba63e82d899e7d5f" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; it matters that you patch objects in the namespace where they are looked up. This is normally straightforward, but for a quick guide read &lt;a href=&quot;#where-to-patch&quot;&gt;where to patch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687dc08f377a2b328a8f70bc97535a43cc502f58" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;interpolation&lt;/code&gt; set to &lt;code&gt;None&lt;/code&gt;, the parser would simply return &lt;code&gt;%(my_dir)s/Pictures&lt;/code&gt; as the value of &lt;code&gt;my_pictures&lt;/code&gt; and &lt;code&gt;%(home_dir)s/lumberjack&lt;/code&gt; as the value of &lt;code&gt;my_dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bc87ebe549a152d95621af5e9d7461b775788e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;mode='w'&lt;/code&gt;, a writable file handle is returned, which supports the &lt;a href=&quot;io#io.BufferedIOBase.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; method. While a writable file handle is open, attempting to read or write other files in the ZIP file will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7953113e258fb4a03370e957ae379b0c21dcb8" translate="yes" xml:space="preserve">
          <source>With &lt;em&gt;mode&lt;/em&gt; you can specify which file mode will be passed to &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;. It must be one of &lt;code&gt;'r'&lt;/code&gt;, &lt;code&gt;'rU'&lt;/code&gt;, &lt;code&gt;'U'&lt;/code&gt; and &lt;code&gt;'rb'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da8c5473cf49716c34f3c81822b2920eb1d2993" translate="yes" xml:space="preserve">
          <source>With &lt;em&gt;mode&lt;/em&gt;&lt;code&gt;'r'&lt;/code&gt; the file-like object (&lt;code&gt;ZipExtFile&lt;/code&gt;) is read-only and provides the following methods: &lt;a href=&quot;io#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#io.IOBase.readline&quot;&gt;&lt;code&gt;readline()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;readlines()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#io.IOBase.seek&quot;&gt;&lt;code&gt;seek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#io.IOBase.tell&quot;&gt;&lt;code&gt;tell()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt;&lt;code&gt;__next__()&lt;/code&gt;&lt;/a&gt;. These objects can operate independently of the ZipFile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760bad3e7ab6068220380f26094e6c0104a0a57d" translate="yes" xml:space="preserve">
          <source>With IDLE&amp;rsquo;s Shell, one enters, edits, and recalls complete statements. Most consoles and terminals only work with a single physical line at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8624f48bb5849e7e5433618835e15f38bb647da" translate="yes" xml:space="preserve">
          <source>With SQLite versions before 3.6.5, &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt;&lt;code&gt;rowcount&lt;/code&gt;&lt;/a&gt; is set to 0 if you make a &lt;code&gt;DELETE FROM table&lt;/code&gt; without any condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ab21266758b5ede32eaf88e6036970613bdaaa" translate="yes" xml:space="preserve">
          <source>With a &lt;em&gt;filename:lineno&lt;/em&gt; argument, clear all the breakpoints at this line. With a space separated list of breakpoint numbers, clear those breakpoints. Without argument, clear all breaks (but first ask confirmation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f04d9aa94fac16f17c271f8cc6b74f5e423a9cf" translate="yes" xml:space="preserve">
          <source>With a &lt;em&gt;lineno&lt;/em&gt; argument, set a break there in the current file. With a &lt;em&gt;function&lt;/em&gt; argument, set a break at the first executable statement within that function. The line number may be prefixed with a filename and a colon, to specify a breakpoint in another file (probably one that hasn&amp;rsquo;t been loaded yet). The file is searched on &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;. Note that each breakpoint is assigned a number to which all the other breakpoint commands refer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2644e40930b324401a9a51c3ee62d4106eb004ee" translate="yes" xml:space="preserve">
          <source>With a line number, continue execution until a line with a number greater or equal to that is reached. In both cases, also stop when the current frame returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ea4c11846bc3197c60dd6b0099e4ae33231ccb" translate="yes" xml:space="preserve">
          <source>With all of these &lt;a href=&quot;#email.policy.EmailPolicy&quot;&gt;&lt;code&gt;EmailPolicies&lt;/code&gt;&lt;/a&gt;, the effective API of the email package is changed from the Python 3.2 API in the following ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96c4be50c56eb883550373721c030d4e8832643" translate="yes" xml:space="preserve">
          <source>With all these new widgets, you can introduce new interaction techniques into applications, creating more useful and more intuitive user interfaces. You can design your application by choosing the most appropriate widgets to match the special needs of your application and users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb01d15923e2347d124cf6810b6f7bbee6f12aa" translate="yes" xml:space="preserve">
          <source>With an explicit &lt;em&gt;encoding&lt;/em&gt;&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; argument, the result is a byte string in the specified encoding. With no &lt;em&gt;encoding&lt;/em&gt; argument, the result is a Unicode string, and the XML declaration in the resulting string does not specify an encoding. Encoding this string in an encoding other than UTF-8 is likely incorrect, since UTF-8 is the default encoding of XML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4880d188a38217b2e5a2d31451fe8eadcea721e6" translate="yes" xml:space="preserve">
          <source>With arguments, return a list of values that result from looking up each argument in the configuration variable dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764867c8bff630b1f0ada90f3f9eb8f138801c7b" translate="yes" xml:space="preserve">
          <source>With filtering on, &lt;code&gt;dir(some_mock)&lt;/code&gt; shows only useful attributes and will include any dynamically created attributes that wouldn&amp;rsquo;t normally be shown. If the mock was created with a &lt;em&gt;spec&lt;/em&gt; (or &lt;em&gt;autospec&lt;/em&gt; of course) then all the attributes from the original are shown, even if they haven&amp;rsquo;t been accessed yet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab53d4374bfcc2a7d9f8f2e07cc334e9b8d4ebe" translate="yes" xml:space="preserve">
          <source>With no &lt;em&gt;bpnumber&lt;/em&gt; argument, &lt;code&gt;commands&lt;/code&gt; refers to the last breakpoint set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d7fd252a8ac0acd7b9c9b4e24a97bf47857d8f" translate="yes" xml:space="preserve">
          <source>With no arguments, return a dictionary of all configuration variables relevant for the current platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd89a071ec612fcc528b4ebb7e35378e6acc199" translate="yes" xml:space="preserve">
          <source>With no arguments, run a full collection. The optional argument &lt;em&gt;generation&lt;/em&gt; may be an integer specifying which generation to collect (from 0 to 2). A &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if the generation number is invalid. The number of unreachable objects found is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5301520b7fd396ab2dfe6409c5f533e884e4c5" translate="yes" xml:space="preserve">
          <source>With one argument, return the natural logarithm of &lt;em&gt;x&lt;/em&gt; (to base &lt;em&gt;e&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5717389f2b0fe33f8fc1d55c281454fe06d5e2b" translate="yes" xml:space="preserve">
          <source>With one argument, return the type of an &lt;em&gt;object&lt;/em&gt;. The return value is a type object and generally the same object as returned by &lt;a href=&quot;stdtypes#instance.__class__&quot;&gt;&lt;code&gt;object.__class__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3010b34325387d6e0374de77099e8677662b587d" translate="yes" xml:space="preserve">
          <source>With one argument, returns a dictionary of column/value pairs for the specified &lt;em&gt;item&lt;/em&gt;. With two arguments, returns the current value of the specified &lt;em&gt;column&lt;/em&gt;. With three arguments, sets the value of given &lt;em&gt;column&lt;/em&gt; in given &lt;em&gt;item&lt;/em&gt; to the specified &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f254b557ac83471d6ca20286be89daa2ca79428b" translate="yes" xml:space="preserve">
          <source>With optional argument &lt;em&gt;i&lt;/em&gt;, &lt;a href=&quot;#email.message.Message.get_payload&quot;&gt;&lt;code&gt;get_payload()&lt;/code&gt;&lt;/a&gt; will return the &lt;em&gt;i&lt;/em&gt;-th element of the payload, counting from zero, if &lt;a href=&quot;#email.message.Message.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;True&lt;/code&gt;. An &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; will be raised if &lt;em&gt;i&lt;/em&gt; is less than 0 or greater than or equal to the number of items in the payload. If the payload is a string (i.e. &lt;a href=&quot;#email.message.Message.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;False&lt;/code&gt;) and &lt;em&gt;i&lt;/em&gt; is given, a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cfd380016562aed86b66b762be2eb99843bf08" translate="yes" xml:space="preserve">
          <source>With pickle protocol version 4 it is possible to easily pickle enums nested in other classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1839f1bd0fed63c796608b36a191d7890a7fee" translate="yes" xml:space="preserve">
          <source>With rare exceptions, the result of executing Python code with IDLE is intended to be the same as executing the same code by the default method, directly with Python in a text-mode system console or terminal window. However, the different interface and operation occasionally affect visible results. For instance, &lt;code&gt;sys.modules&lt;/code&gt; starts with more entries, and &lt;code&gt;threading.activeCount()&lt;/code&gt; returns 2 instead of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0015f869c31b401bfecbb86dbfba0c4047c9bd7" translate="yes" xml:space="preserve">
          <source>With server socket, this mode provides mandatory TLS client cert authentication. A client certificate request is sent to the client and the client must provide a valid and trusted certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44fbe6e65b12b51b031a5cae9513730c1dc7435" translate="yes" xml:space="preserve">
          <source>With sufficient knowledge of applicable algorithmic and political time adjustments, such as time zone and daylight saving time information, an &lt;strong&gt;aware&lt;/strong&gt; object can locate itself relative to other aware objects. An aware object represents a specific moment in time that is not open to interpretation. &lt;a href=&quot;#id5&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deac18952e93d68efd06227e703e6bf5a3115b23" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;'store_const'&lt;/code&gt; and &lt;code&gt;'append_const'&lt;/code&gt; actions, the &lt;code&gt;const&lt;/code&gt; keyword argument must be given. For other actions, it defaults to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194119009270c68f60a1104e8b4240dd2ceaff94" translate="yes" xml:space="preserve">
          <source>With the &lt;em&gt;block&lt;/em&gt; argument set to &lt;code&gt;False&lt;/code&gt;, the method call does not block. If the lock is currently in a locked state, return &lt;code&gt;False&lt;/code&gt;; otherwise set the lock to a locked state and return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e871eb88b98ae8c67b374e93e1e89a7c0c7dcd5" translate="yes" xml:space="preserve">
          <source>With the &lt;em&gt;block&lt;/em&gt; argument set to &lt;code&gt;True&lt;/code&gt; (the default), the method call will block until the lock is in an unlocked state, then set it to locked and return &lt;code&gt;True&lt;/code&gt;. Note that the name of this first argument differs from that in &lt;a href=&quot;threading#threading.Lock.acquire&quot;&gt;&lt;code&gt;threading.Lock.acquire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2269bdd62541838f898684dcd5142d85924bfe48" translate="yes" xml:space="preserve">
          <source>With the subsequent code object one can execute it in a module by running &lt;code&gt;exec(code, module.__dict__)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebbacdcf56db793c4cc45ee8691bf7b6605ec5c1" translate="yes" xml:space="preserve">
          <source>With this pattern, multiple factories could be chained, and as long as they don&amp;rsquo;t overwrite each other&amp;rsquo;s attributes or unintentionally overwrite the standard attributes listed above, there should be no surprises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a6ba4daa5a2342ad82ea7038d0c1a705a07197" translate="yes" xml:space="preserve">
          <source>With three arguments, compute &lt;code&gt;(x**y) % modulo&lt;/code&gt;. For the three argument form, the following restrictions on the arguments hold:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fab22f970395c672be8c4c452402f6883149c6e" translate="yes" xml:space="preserve">
          <source>With three arguments, return a new type object. This is essentially a dynamic form of the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#class&quot;&gt;&lt;code&gt;class&lt;/code&gt;&lt;/a&gt; statement. The &lt;em&gt;name&lt;/em&gt; string is the class name and becomes the &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; attribute; the &lt;em&gt;bases&lt;/em&gt; tuple itemizes the base classes and becomes the &lt;a href=&quot;stdtypes#class.__bases__&quot;&gt;&lt;code&gt;__bases__&lt;/code&gt;&lt;/a&gt; attribute; and the &lt;em&gt;dict&lt;/em&gt; dictionary is the namespace containing definitions for class body and is copied to a standard dictionary to become the &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute. For example, the following two statements create identical &lt;a href=&quot;#type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8885c6119b55f6917eee9f2b9372898c8263a3e" translate="yes" xml:space="preserve">
          <source>With two arguments, compute &lt;code&gt;x**y&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; is negative then &lt;code&gt;y&lt;/code&gt; must be integral. The result will be inexact unless &lt;code&gt;y&lt;/code&gt; is integral and the result is finite and can be expressed exactly in &amp;lsquo;precision&amp;rsquo; digits. The rounding mode of the context is used. Results are always correctly-rounded in the Python version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43cb0e0aa8bf5b547ad83f94e989da6ff98d438" translate="yes" xml:space="preserve">
          <source>With two arguments, return the logarithm of &lt;em&gt;x&lt;/em&gt; to the given &lt;em&gt;base&lt;/em&gt;, calculated as &lt;code&gt;log(x)/log(base)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a50c0d900159dbcd62b43debe7309bd2b37fad" translate="yes" xml:space="preserve">
          <source>With version 1 (provided for reproducing random sequences from older versions of Python), the algorithm for &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; generates a narrower range of seeds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b20bd639ded266fcc391752e271e39a98c7700d3" translate="yes" xml:space="preserve">
          <source>With version 2 (the default), a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; object gets converted to an &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and all of its bits are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec63c85650e7ada817c79ea880456525b435a75" translate="yes" xml:space="preserve">
          <source>With versions of OpenSSL older than 0.9.8m, it is only possible to set options, not to clear them. Attempting to clear an option (by resetting the corresponding bits) will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6887de87bb8914463818ce0668d423fe277ff788" translate="yes" xml:space="preserve">
          <source>Within an editor window containing Python code, code context can be toggled in order to show or hide a pane at the top of the window. When shown, this pane freezes the opening lines for block code, such as those beginning with &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;def&lt;/code&gt;, or &lt;code&gt;if&lt;/code&gt; keywords, that would have otherwise scrolled out of view. The size of the pane will be expanded and contracted as needed to show the all current levels of context, up to the maximum number of lines defined in the Configure IDLE dialog (which defaults to 15). If there are no current context lines and the feature is toggled on, a single blank line will display. Clicking on a line in the context pane will move that line to the top of the editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8b057e4c0feacb665a8a7757beb8aa22e2fdde" translate="yes" xml:space="preserve">
          <source>Without an argument, &lt;a href=&quot;#vars&quot;&gt;&lt;code&gt;vars()&lt;/code&gt;&lt;/a&gt; acts like &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt;. Note, the locals dictionary is only useful for reads since updates to the locals dictionary are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89afaf5902230f11dab6931656e83d660578a26d" translate="yes" xml:space="preserve">
          <source>Without an argument, an array of size 0 is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9879a08d72136016023f63f62288fdbd06d5e766" translate="yes" xml:space="preserve">
          <source>Without any optional argument, this method acquires the lock unconditionally, if necessary waiting until it is released by another thread (only one thread at a time can acquire a lock &amp;mdash; that&amp;rsquo;s their reason for existence).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb98828bb03ebff04d92f1d4995a6a336ce35b0c" translate="yes" xml:space="preserve">
          <source>Without argument, continue execution until the line with a number greater than the current one is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89138ed071a0b6e27259e35980ae9555134901d" translate="yes" xml:space="preserve">
          <source>Without argument, list all breaks, including for each breakpoint, the number of times that breakpoint has been hit, the current ignore count, and the associated condition if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eeedd2237cda7b0eb8c9cc1a204ca22979c1c18" translate="yes" xml:space="preserve">
          <source>Without argument, print the list of available commands. With a &lt;em&gt;command&lt;/em&gt; as argument, print help about that command. &lt;code&gt;help pdb&lt;/code&gt; displays the full documentation (the docstring of the &lt;a href=&quot;#module-pdb&quot;&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt; module). Since the &lt;em&gt;command&lt;/em&gt; argument must be an identifier, &lt;code&gt;help exec&lt;/code&gt; must be entered to get help on the &lt;code&gt;!&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f66cab56a49a5274a00828711f0d39b63586e1" translate="yes" xml:space="preserve">
          <source>Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769b9bb5176bd30fc5c9a906deb72757797c5114" translate="yes" xml:space="preserve">
          <source>Without expression, list all display expressions for the current frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f094cebe8a845676c5da8b2f31cd1951b0afca42" translate="yes" xml:space="preserve">
          <source>Without external information it&amp;rsquo;s impossible to reliably determine which encoding was used for encoding a string. Each charmap encoding can decode any random byte sequence. However that&amp;rsquo;s not possible with UTF-8, as UTF-8 byte sequences have a structure that doesn&amp;rsquo;t allow arbitrary byte sequences. To increase the reliability with which a UTF-8 encoding can be detected, Microsoft invented a variant of UTF-8 (that Python 2.5 calls &lt;code&gt;&quot;utf-8-sig&quot;&lt;/code&gt;) for its Notepad program: Before any of the Unicode characters is written to the file, a UTF-8 encoded BOM (which looks like this as a byte sequence: &lt;code&gt;0xef&lt;/code&gt;, &lt;code&gt;0xbb&lt;/code&gt;, &lt;code&gt;0xbf&lt;/code&gt;) is written. As it&amp;rsquo;s rather improbable that any charmap encoded file starts with these byte values (which would e.g. map to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7849a7a1c3473cfd49dc9807cf4c861c767d29df" translate="yes" xml:space="preserve">
          <source>Without the directive it would fail, both because the actual output doesn&amp;rsquo;t have two blanks before the single-digit list elements, and because the actual output is on a single line. This test also passes, and also requires a directive to do so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56f8f7059663881528e5f04cc607dbf57d02130" translate="yes" xml:space="preserve">
          <source>Without the use of this decorator factory, the name of the example function would have been &lt;code&gt;'wrapper'&lt;/code&gt;, and the docstring of the original &lt;code&gt;example()&lt;/code&gt; would have been lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fe2fe1baf1ec16cf5ceba69d9460d06d020a49" translate="yes" xml:space="preserve">
          <source>Without using a subtest, execution would stop after the first failure, and the error would be less easy to diagnose because the value of &lt;code&gt;i&lt;/code&gt; wouldn&amp;rsquo;t be displayed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea2ab24d7c35c5430a569d407bd85c65f4e85bc" translate="yes" xml:space="preserve">
          <source>Without using the lock output from the different processes is liable to get all mixed up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27c0f0558f8802b19cb669e94d2076c0c6c0fda" translate="yes" xml:space="preserve">
          <source>Worker processes within a &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt;&lt;code&gt;Pool&lt;/code&gt;&lt;/a&gt; typically live for the complete duration of the Pool&amp;rsquo;s work queue. A frequent pattern found in other systems (such as Apache, mod_wsgi, etc) to free resources held by workers is to allow a worker within a pool to complete only a set amount of work before being exiting, being cleaned up and a new process spawned to replace the old one. The &lt;em&gt;maxtasksperchild&lt;/em&gt; argument to the &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt;&lt;code&gt;Pool&lt;/code&gt;&lt;/a&gt; exposes this ability to the end user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89015cfdb27fab11c50f80e1f354316ca91c613f" translate="yes" xml:space="preserve">
          <source>Working with pipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bae363ed38dab1b6d087a54fbbd4f84ed78b18a" translate="yes" xml:space="preserve">
          <source>Working with socket objects directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6d7f52d1d150a89cde4bda127b7602fe0e15d9" translate="yes" xml:space="preserve">
          <source>Working with threads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bb3765ae259f479c80ae46b7c05de23c1886aa" translate="yes" xml:space="preserve">
          <source>Works as &lt;a href=&quot;#opcode-BUILD_TUPLE&quot;&gt;&lt;code&gt;BUILD_TUPLE&lt;/code&gt;&lt;/a&gt;, but creates a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8fe5d39fb592372defca4a7c0cdd14adfc931a" translate="yes" xml:space="preserve">
          <source>Works as &lt;a href=&quot;#opcode-BUILD_TUPLE&quot;&gt;&lt;code&gt;BUILD_TUPLE&lt;/code&gt;&lt;/a&gt;, but creates a set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4b35ffa278b6b960046684c3fd2fa34208fe21" translate="yes" xml:space="preserve">
          <source>Works as &lt;a href=&quot;#opcode-DELETE_NAME&quot;&gt;&lt;code&gt;DELETE_NAME&lt;/code&gt;&lt;/a&gt;, but deletes a global name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9391eb2e809296019b9e1392d2df6abc88491766" translate="yes" xml:space="preserve">
          <source>Works as &lt;a href=&quot;#opcode-STORE_NAME&quot;&gt;&lt;code&gt;STORE_NAME&lt;/code&gt;&lt;/a&gt;, but stores the name as a global.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b523701c081148b44a5e161316a03f46215499" translate="yes" xml:space="preserve">
          <source>Works like &lt;a href=&quot;#email.parser.BytesFeedParser&quot;&gt;&lt;code&gt;BytesFeedParser&lt;/code&gt;&lt;/a&gt; except that the input to the &lt;a href=&quot;#email.parser.BytesFeedParser.feed&quot;&gt;&lt;code&gt;feed()&lt;/code&gt;&lt;/a&gt; method must be a string. This is of limited utility, since the only way for such a message to be valid is for it to contain only ASCII text or, if &lt;code&gt;utf8&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, no binary attachments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185db21e361257c180478865bbb0efa3b0737049" translate="yes" xml:space="preserve">
          <source>Works the same way as &lt;a href=&quot;#inspect.Signature.bind&quot;&gt;&lt;code&gt;Signature.bind()&lt;/code&gt;&lt;/a&gt;, but allows the omission of some required arguments (mimics &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt; behavior.) Returns &lt;a href=&quot;#inspect.BoundArguments&quot;&gt;&lt;code&gt;BoundArguments&lt;/code&gt;&lt;/a&gt;, or raises a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the passed arguments do not match the signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1783e364fda74448269ebe2d7f239fb3ef7f871" translate="yes" xml:space="preserve">
          <source>Wrap &lt;em&gt;application&lt;/em&gt; and return a new WSGI application object. The returned application will forward all requests to the original &lt;em&gt;application&lt;/em&gt;, and will check that both the &lt;em&gt;application&lt;/em&gt; and the server invoking it are conforming to the WSGI specification and to &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ddf4360a796894dae0f6d5a9d4445df2e11d56" translate="yes" xml:space="preserve">
          <source>Wrap a &lt;a href=&quot;concurrent.futures#concurrent.futures.Future&quot;&gt;&lt;code&gt;concurrent.futures.Future&lt;/code&gt;&lt;/a&gt; object in a &lt;a href=&quot;#asyncio.Future&quot;&gt;&lt;code&gt;asyncio.Future&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b27f3224dafe97e6c0b3e8a8fa06d53cea4dc76" translate="yes" xml:space="preserve">
          <source>Wrap a &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; into a &lt;code&gt;(transport, protocol)&lt;/code&gt; pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c612d6e5f7981ee986eea5813673351e3cb45b2c" translate="yes" xml:space="preserve">
          <source>Wrap a read end of a pipe into a &lt;code&gt;(transport, protocol)&lt;/code&gt; pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3306add2272df4e9ce3ccf3f316e30e699743f" translate="yes" xml:space="preserve">
          <source>Wrap a write end of a pipe into a &lt;code&gt;(transport, protocol)&lt;/code&gt; pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76b940bb5be2bb8e2a70d99685e901b66b64693" translate="yes" xml:space="preserve">
          <source>Wrap an already accepted connection into a transport/protocol pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a18c9e5ad1f9bbb6b629543bc34a3ee5302486a" translate="yes" xml:space="preserve">
          <source>Wrap an existing Python socket &lt;em&gt;sock&lt;/em&gt; and return an instance of &lt;a href=&quot;#ssl.SSLContext.sslsocket_class&quot;&gt;&lt;code&gt;SSLContext.sslsocket_class&lt;/code&gt;&lt;/a&gt; (default &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt;). The returned SSL socket is tied to the context, its settings and certificates. &lt;em&gt;sock&lt;/em&gt; must be a &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt; socket; other socket types are unsupported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0016efeeb31ae253fc49cf82049e6b29fd8ba856" translate="yes" xml:space="preserve">
          <source>Wrap the &lt;em&gt;coro&lt;/em&gt;&lt;a href=&quot;#coroutine&quot;&gt;coroutine&lt;/a&gt; into a &lt;a href=&quot;#asyncio.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; and schedule its execution. Return the Task object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98244aacb2a997c25507ffd260f55a5828e5faa" translate="yes" xml:space="preserve">
          <source>Wrap the BIO objects &lt;em&gt;incoming&lt;/em&gt; and &lt;em&gt;outgoing&lt;/em&gt; and return an instance of &lt;a href=&quot;#ssl.SSLContext.sslobject_class&quot;&gt;&lt;code&gt;SSLContext.sslobject_class&lt;/code&gt;&lt;/a&gt; (default &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt;). The SSL routines will read input data from the incoming BIO and write data to the outgoing BIO.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
