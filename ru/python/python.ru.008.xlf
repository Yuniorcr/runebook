<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="1ae8227a6d858405cdc19e52f41986c677f8a382" translate="yes" xml:space="preserve">
          <source>Controls when quotes should be generated by the writer and recognised by the reader. It can take on any of the &lt;code&gt;QUOTE_*&lt;/code&gt; constants (see section &lt;a href=&quot;#csv-contents&quot;&gt;Module Contents&lt;/a&gt;) and defaults to &lt;a href=&quot;#csv.QUOTE_MINIMAL&quot;&gt;&lt;code&gt;QUOTE_MINIMAL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa1753421c43bce2cf76da03552a64c3dc7108a" translate="yes" xml:space="preserve">
          <source>Convenience Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a31248eb30950b155f880e1a5cb9e5b3a4f8198" translate="yes" xml:space="preserve">
          <source>Convenience factory functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928fb06ef1eb24ffa7732bb12c73c0eb13a55cbd" translate="yes" xml:space="preserve">
          <source>Convenience function to run a read-eval-print loop. This creates a new instance of &lt;a href=&quot;#code.InteractiveConsole&quot;&gt;&lt;code&gt;InteractiveConsole&lt;/code&gt;&lt;/a&gt; and sets &lt;em&gt;readfunc&lt;/em&gt; to be used as the &lt;a href=&quot;#code.InteractiveConsole.raw_input&quot;&gt;&lt;code&gt;InteractiveConsole.raw_input()&lt;/code&gt;&lt;/a&gt; method, if provided. If &lt;em&gt;local&lt;/em&gt; is provided, it is passed to the &lt;a href=&quot;#code.InteractiveConsole&quot;&gt;&lt;code&gt;InteractiveConsole&lt;/code&gt;&lt;/a&gt; constructor for use as the default namespace for the interpreter loop. The &lt;a href=&quot;#code.interact&quot;&gt;&lt;code&gt;interact()&lt;/code&gt;&lt;/a&gt; method of the instance is then run with &lt;em&gt;banner&lt;/em&gt; and &lt;em&gt;exitmsg&lt;/em&gt; passed as the banner and exit message to use, if provided. The console object is discarded after use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c4605f4a35954cda031381ba8d1ac5ffaee370" translate="yes" xml:space="preserve">
          <source>Convenience function which creates a TCP socket bound to &lt;em&gt;address&lt;/em&gt; (a 2-tuple &lt;code&gt;(host, port)&lt;/code&gt;) and return the socket object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a332dfada43a374b5f2f70e06e0a70d7a139fe6" translate="yes" xml:space="preserve">
          <source>Convenience functions for common terminal control operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b084aca8758c2c2befadfa579ba1195e2ef3a8ac" translate="yes" xml:space="preserve">
          <source>Convenience functions for use in SAX applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19d1eb62301de838590ba39efc78a8bad1fb648" translate="yes" xml:space="preserve">
          <source>Convenience instance. The same as &lt;code&gt;default&lt;/code&gt; except that &lt;code&gt;raise_on_defect&lt;/code&gt; is set to &lt;code&gt;True&lt;/code&gt;. This allows any policy to be made strict by writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0177e875647a42da87acdad37566962195fc7282" translate="yes" xml:space="preserve">
          <source>Conventional flags for MMDF messages are identical to those of mbox message and are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc47389be0712628e99ee9e04ba839ea274d30b2" translate="yes" xml:space="preserve">
          <source>Conventional flags for mbox messages are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9efcc6a11d1fdaf102d25bfa3de66afea1205d2" translate="yes" xml:space="preserve">
          <source>Conversely, &lt;a href=&quot;#asyncio.BaseProtocol.resume_writing&quot;&gt;&lt;code&gt;resume_writing()&lt;/code&gt;&lt;/a&gt; is called when the buffer size is equal or lower than the low watermark. These end conditions are important to ensure that things go as expected when either mark is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b6c9b5ee9503cb021b6f8aa97a1e91653d524f" translate="yes" xml:space="preserve">
          <source>Conversely, since the SSL layer has its own framing, a SSL socket may still have data available for reading without &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; being aware of it. Therefore, you should first call &lt;code&gt;SSLSocket.recv()&lt;/code&gt; to drain any potentially available data, and then only block on a &lt;a href=&quot;select#select.select&quot;&gt;&lt;code&gt;select()&lt;/code&gt;&lt;/a&gt; call if still necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5b6e49b0b984975d35923ac94e07d9bcb9f7c1" translate="yes" xml:space="preserve">
          <source>Conversely, the &lt;a href=&quot;#datetime.datetime.strptime&quot;&gt;&lt;code&gt;datetime.strptime()&lt;/code&gt;&lt;/a&gt; class method creates a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object from a string representing a date and time and a corresponding format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9151f8433f795cb0f0b5b6743aeb7de77ec49f00" translate="yes" xml:space="preserve">
          <source>Conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c09bbaf02343b1cdae4fba621229d4935542340" translate="yes" xml:space="preserve">
          <source>Conversion flags (optional), which affect the result of some conversion types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdac690f826ae5c6807a6486e7c50a8cdb1aa1a5" translate="yes" xml:space="preserve">
          <source>Conversion from floating point to integer may round or truncate as in C; see functions &lt;a href=&quot;math#math.floor&quot;&gt;&lt;code&gt;math.floor()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;math#math.ceil&quot;&gt;&lt;code&gt;math.ceil()&lt;/code&gt;&lt;/a&gt; for well-defined conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a582e8a0aad1d56899db2601edc214a33a93f8" translate="yes" xml:space="preserve">
          <source>Conversion to Strings and Integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad2785ad0e21a619a890fdd26418c74f509a34e" translate="yes" xml:space="preserve">
          <source>Conversion type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819f88cb45f2334e171fb1f2aa5a030cc2093a25" translate="yes" xml:space="preserve">
          <source>Conversions to and from polar coordinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ecaf34911cdbb1c77f12fd520c44a6a6ba6492" translate="yes" xml:space="preserve">
          <source>Convert 16-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1cab706ab8622a8a79f81a11a7c47745d63e47" translate="yes" xml:space="preserve">
          <source>Convert 16-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 2-byte swap operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13f00ee347b5d5dc7de1d28c6cbddbd417d48bc" translate="yes" xml:space="preserve">
          <source>Convert 32-bit positive integers from host to network byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ed1fd4aa910eb5a7ced6ffb1c95c7aec02c629" translate="yes" xml:space="preserve">
          <source>Convert 32-bit positive integers from network to host byte order. On machines where the host byte order is the same as network byte order, this is a no-op; otherwise, it performs a 4-byte swap operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793a48084677d41f5057465f31277062c8de47fd" translate="yes" xml:space="preserve">
          <source>Convert &lt;em&gt;data&lt;/em&gt; to floats and compute the arithmetic mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09de8989abf4c58d1b35996a928922c80f1f478" translate="yes" xml:space="preserve">
          <source>Convert &lt;em&gt;data&lt;/em&gt; to floats and compute the geometric mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dc1d8c4e0fbf76ba94a500955583cc8032f7ca" translate="yes" xml:space="preserve">
          <source>Convert &lt;em&gt;date_time&lt;/em&gt; to an IMAP4 &lt;code&gt;INTERNALDATE&lt;/code&gt; representation. The return value is a string in the form: &lt;code&gt;&quot;DD-Mmm-YYYY HH:MM:SS
+HHMM&quot;&lt;/code&gt; (including double-quotes). The &lt;em&gt;date_time&lt;/em&gt; argument can be a number (int or float) representing seconds since epoch (as returned by &lt;a href=&quot;time#time.time&quot;&gt;&lt;code&gt;time.time()&lt;/code&gt;&lt;/a&gt;), a 9-tuple representing local time an instance of &lt;a href=&quot;time#time.struct_time&quot;&gt;&lt;code&gt;time.struct_time&lt;/code&gt;&lt;/a&gt; (as returned by &lt;a href=&quot;time#time.localtime&quot;&gt;&lt;code&gt;time.localtime()&lt;/code&gt;&lt;/a&gt;), an aware instance of &lt;a href=&quot;datetime#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt;, or a double-quoted string. In the last case, it is assumed to already be in the correct format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830a0db2aab5c43f046277ae682f4cad7494e2bd" translate="yes" xml:space="preserve">
          <source>Convert &lt;em&gt;params&lt;/em&gt; into an XML-RPC request. or into a response if &lt;em&gt;methodresponse&lt;/em&gt; is true. &lt;em&gt;params&lt;/em&gt; can be either a tuple of arguments or an instance of the &lt;a href=&quot;#xmlrpc.client.Fault&quot;&gt;&lt;code&gt;Fault&lt;/code&gt;&lt;/a&gt; exception class. If &lt;em&gt;methodresponse&lt;/em&gt; is true, only a single value can be returned, meaning that &lt;em&gt;params&lt;/em&gt; must be of length 1. &lt;em&gt;encoding&lt;/em&gt;, if supplied, is the encoding to use in the generated XML; the default is UTF-8. Python&amp;rsquo;s &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; value cannot be used in standard XML-RPC; to allow using it via an extension, provide a true value for &lt;em&gt;allow_none&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac9e254e7ea98d89c5f9e591543c1874f485f3c" translate="yes" xml:space="preserve">
          <source>Convert a 32-bit packed IPv4 address (a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; four bytes in length) to its standard dotted-quad string representation (for example, &amp;lsquo;123.45.67.89&amp;rsquo;). This is useful when conversing with a program that uses the standard C library and needs objects of type &lt;code&gt;struct in_addr&lt;/code&gt;, which is the C type for the 32-bit packed binary data this function takes as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0a734c5a43d355bc4c71110501827b3219334d" translate="yes" xml:space="preserve">
          <source>Convert a &lt;em&gt;value&lt;/em&gt; to a &amp;ldquo;formatted&amp;rdquo; representation, as controlled by &lt;em&gt;format_spec&lt;/em&gt;. The interpretation of &lt;em&gt;format_spec&lt;/em&gt; will depend on the type of the &lt;em&gt;value&lt;/em&gt; argument, however there is a standard formatting syntax that is used by most built-in types: &lt;a href=&quot;string#formatspec&quot;&gt;Format Specification Mini-Language&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e388dd6fb0cc6eef67073e5025254acd36e3132d" translate="yes" xml:space="preserve">
          <source>Convert a binary file with filename &lt;em&gt;input&lt;/em&gt; to binhex file &lt;em&gt;output&lt;/em&gt;. The &lt;em&gt;output&lt;/em&gt; parameter can either be a filename or a file-like object (any object supporting a &lt;code&gt;write()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954b992b4ff25a50523b3f33f5c2125cc7ac6823" translate="yes" xml:space="preserve">
          <source>Convert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ff367a1b423d6a7df5d41f201cf817e18b1f31" translate="yes" xml:space="preserve">
          <source>Convert a block of quoted-printable data back to binary and return the binary data. More than one line may be passed at a time. If the optional argument &lt;em&gt;header&lt;/em&gt; is present and true, underscores will be decoded as spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c835da969cecd2c0849cf68c8bd27edea62370dd" translate="yes" xml:space="preserve">
          <source>Convert a file&amp;rsquo;s mode to a string of the form &amp;lsquo;-rwxrwxrwx&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a9bf1212d13a276da23df50b48b4a6c91d4611" translate="yes" xml:space="preserve">
          <source>Convert a label to ASCII, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc3490.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 3490&lt;/strong&gt;&lt;/a&gt;. &lt;code&gt;UseSTD3ASCIIRules&lt;/code&gt; is assumed to be false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be62576a4f19434f24f41afd226ba7b3d70abb9" translate="yes" xml:space="preserve">
          <source>Convert a label to Unicode, as specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc3490.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 3490&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f638a15bb79aa669a78950590c038ed0b7398a8" translate="yes" xml:space="preserve">
          <source>Convert a mapping object or a sequence of two-element tuples, which may contain &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects, to a percent-encoded ASCII text string. If the resultant string is to be used as a &lt;em&gt;data&lt;/em&gt; for POST operation with the &lt;a href=&quot;urllib.request#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt; function, then it should be encoded to bytes, otherwise it would result in a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afe0159c0dd6ae47853a7c780229b082a32dae2" translate="yes" xml:space="preserve">
          <source>Convert a non-&lt;code&gt;multipart&lt;/code&gt; message into a &lt;code&gt;multipart/related&lt;/code&gt; message, moving any existing &lt;em&gt;Content-&lt;/em&gt; headers and payload into a (new) first part of the &lt;code&gt;multipart&lt;/code&gt;. If &lt;em&gt;boundary&lt;/em&gt; is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7fdb4347edc15303e9c5a133e8a5f38c48d4db" translate="yes" xml:space="preserve">
          <source>Convert a non-&lt;code&gt;multipart&lt;/code&gt; or a &lt;code&gt;multipart/related&lt;/code&gt; into a &lt;code&gt;multipart/alternative&lt;/code&gt;, moving any existing &lt;em&gt;Content-&lt;/em&gt; headers and payload into a (new) first part of the &lt;code&gt;multipart&lt;/code&gt;. If &lt;em&gt;boundary&lt;/em&gt; is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6603e64616924e8304f1ee237cf3816262a077e3" translate="yes" xml:space="preserve">
          <source>Convert a non-&lt;code&gt;multipart&lt;/code&gt;, a &lt;code&gt;multipart/related&lt;/code&gt;, or a &lt;code&gt;multipart-alternative&lt;/code&gt; into a &lt;code&gt;multipart/mixed&lt;/code&gt;, moving any existing &lt;em&gt;Content-&lt;/em&gt; headers and payload into a (new) first part of the &lt;code&gt;multipart&lt;/code&gt;. If &lt;em&gt;boundary&lt;/em&gt; is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c271f596ad3a29beeda5f733194e618f0f49095" translate="yes" xml:space="preserve">
          <source>Convert a packed IP address (a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; of some number of bytes) to its standard, family-specific string representation (for example, &lt;code&gt;'7.10.0.5'&lt;/code&gt; or &lt;code&gt;'5aef:2b::8'&lt;/code&gt;). &lt;a href=&quot;#socket.inet_ntop&quot;&gt;&lt;code&gt;inet_ntop()&lt;/code&gt;&lt;/a&gt; is useful when a library or network protocol returns an object of type &lt;code&gt;struct in_addr&lt;/code&gt; (similar to &lt;a href=&quot;#socket.inet_ntoa&quot;&gt;&lt;code&gt;inet_ntoa()&lt;/code&gt;&lt;/a&gt;) or &lt;code&gt;struct in6_addr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886cc68df02368dde12fd7af026ffc90b3d6c135" translate="yes" xml:space="preserve">
          <source>Convert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7520afbf1b12461d5ae4573070e1a33c83b00b" translate="yes" xml:space="preserve">
          <source>Convert a stereo fragment to a mono fragment. The left channel is multiplied by &lt;em&gt;lfactor&lt;/em&gt; and the right channel by &lt;em&gt;rfactor&lt;/em&gt; before adding the two channels to give a mono signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790b1950ae3cc04ad1f6e18b67e03785c5d24bd5" translate="yes" xml:space="preserve">
          <source>Convert a time expressed in seconds since the epoch to a &lt;a href=&quot;#time.struct_time&quot;&gt;&lt;code&gt;struct_time&lt;/code&gt;&lt;/a&gt; in UTC in which the dst flag is always zero. If &lt;em&gt;secs&lt;/em&gt; is not provided or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the current time as returned by &lt;a href=&quot;#time.time&quot;&gt;&lt;code&gt;time()&lt;/code&gt;&lt;/a&gt; is used. Fractions of a second are ignored. See above for a description of the &lt;a href=&quot;#time.struct_time&quot;&gt;&lt;code&gt;struct_time&lt;/code&gt;&lt;/a&gt; object. See &lt;a href=&quot;calendar#calendar.timegm&quot;&gt;&lt;code&gt;calendar.timegm()&lt;/code&gt;&lt;/a&gt; for the inverse of this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8d739af212ea2f9952792a323ef7a1fce60865" translate="yes" xml:space="preserve">
          <source>Convert a time expressed in seconds since the epoch to a string of a form: &lt;code&gt;'Sun Jun 20 23:21:05 1993'&lt;/code&gt; representing local time. The day field is two characters long and is space padded if the day is a single digit, e.g.: &lt;code&gt;'Wed Jun&amp;nbsp; 9 04:26:40 1993'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97eb6016f65299bdd7b638dbb2ee9a73135f101" translate="yes" xml:space="preserve">
          <source>Convert a tuple or &lt;a href=&quot;#time.struct_time&quot;&gt;&lt;code&gt;struct_time&lt;/code&gt;&lt;/a&gt; representing a time as returned by &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to a string as specified by the &lt;em&gt;format&lt;/em&gt; argument. If &lt;em&gt;t&lt;/em&gt; is not provided, the current time as returned by &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; is used. &lt;em&gt;format&lt;/em&gt; must be a string. &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised if any field in &lt;em&gt;t&lt;/em&gt; is outside of the allowed range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08002f77b4da61b7142bd3fca97695e93a418877" translate="yes" xml:space="preserve">
          <source>Convert a tuple or &lt;a href=&quot;#time.struct_time&quot;&gt;&lt;code&gt;struct_time&lt;/code&gt;&lt;/a&gt; representing a time as returned by &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to a string of the following form: &lt;code&gt;'Sun Jun 20 23:21:05 1993'&lt;/code&gt;. The day field is two characters long and is space padded if the day is a single digit, e.g.: &lt;code&gt;'Wed Jun&amp;nbsp; 9 04:26:40 1993'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb78a8ff05bcad0bf1979fd75136d86f09f38b9e" translate="yes" xml:space="preserve">
          <source>Convert all named and numeric character references (e.g. &lt;code&gt;&amp;amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;amp;#x3e;&lt;/code&gt;) in the string &lt;em&gt;s&lt;/em&gt; to the corresponding Unicode characters. This function uses the rules defined by the HTML 5 standard for both valid and invalid character references, and the &lt;a href=&quot;html.entities#html.entities.html5&quot;&gt;&lt;code&gt;list of
HTML 5 named character references&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8a6ad81425f4130c783a5d7e53f7a3aea15719" translate="yes" xml:space="preserve">
          <source>Convert an IP address from its family-specific string format to a packed, binary format. &lt;a href=&quot;#socket.inet_pton&quot;&gt;&lt;code&gt;inet_pton()&lt;/code&gt;&lt;/a&gt; is useful when a library or network protocol calls for an object of type &lt;code&gt;struct in_addr&lt;/code&gt; (similar to &lt;a href=&quot;#socket.inet_aton&quot;&gt;&lt;code&gt;inet_aton()&lt;/code&gt;&lt;/a&gt;) or &lt;code&gt;struct in6_addr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f49e60070ea82cdfde379be94b82dd38a0d69f" translate="yes" xml:space="preserve">
          <source>Convert an IPv4 address from dotted-quad string format (for example, &amp;lsquo;123.45.67.89&amp;rsquo;) to 32-bit packed binary format, as a bytes object four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type &lt;code&gt;struct in_addr&lt;/code&gt;, which is the C type for the 32-bit packed binary this function returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcda6fdd8799244cdf11bba87dabc6084ce51ec" translate="yes" xml:space="preserve">
          <source>Convert an XML-RPC request or response into Python objects, a &lt;code&gt;(params,
methodname)&lt;/code&gt;. &lt;em&gt;params&lt;/em&gt; is a tuple of argument; &lt;em&gt;methodname&lt;/em&gt; is a string, or &lt;code&gt;None&lt;/code&gt; if no method name is present in the packet. If the XML-RPC packet represents a fault condition, this function will raise a &lt;a href=&quot;#xmlrpc.client.Fault&quot;&gt;&lt;code&gt;Fault&lt;/code&gt;&lt;/a&gt; exception. The &lt;em&gt;use_builtin_types&lt;/em&gt; flag can be used to cause date/time values to be presented as &lt;a href=&quot;datetime#datetime.datetime&quot;&gt;&lt;code&gt;datetime.datetime&lt;/code&gt;&lt;/a&gt; objects and binary data to be presented as &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects; this flag is false by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e83fe468b83d52ed48b5e1364950536bba7ac7b" translate="yes" xml:space="preserve">
          <source>Convert an integer number to a binary string prefixed with &amp;ldquo;0b&amp;rdquo;. The result is a valid Python expression. If &lt;em&gt;x&lt;/em&gt; is not a Python &lt;a href=&quot;#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; object, it has to define an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt; method that returns an integer. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbae29d960ee3dabb2f8e2354b698f0637f08473" translate="yes" xml:space="preserve">
          <source>Convert an integer number to a lowercase hexadecimal string prefixed with &amp;ldquo;0x&amp;rdquo;. If &lt;em&gt;x&lt;/em&gt; is not a Python &lt;a href=&quot;#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; object, it has to define an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt; method that returns an integer. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de093919974873ea65e8ff122a2cf2064593220c" translate="yes" xml:space="preserve">
          <source>Convert an integer number to an octal string prefixed with &amp;ldquo;0o&amp;rdquo;. The result is a valid Python expression. If &lt;em&gt;x&lt;/em&gt; is not a Python &lt;a href=&quot;#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; object, it has to define an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt; method that returns an integer. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852478a7946770b66673c38880b1a77fd52cf080" translate="yes" xml:space="preserve">
          <source>Convert angle &lt;em&gt;x&lt;/em&gt; from degrees to radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da86497504d116a34889df4ebb72c5c1a2189f55" translate="yes" xml:space="preserve">
          <source>Convert angle &lt;em&gt;x&lt;/em&gt; from radians to degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183a9e2bf7229734ff51dff081fc844593ead60a" translate="yes" xml:space="preserve">
          <source>Convert argument strings to objects and assign them as attributes of the namespace. Return the populated namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c76a33aa99fa425923e1d65ab0b017a4860f209" translate="yes" xml:space="preserve">
          <source>Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char if &lt;em&gt;newline&lt;/em&gt; is true. The output of this function conforms to &lt;a href=&quot;https://tools.ietf.org/html/rfc3548.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 3548&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e6f020003d7f85097ea1beba14caef996baa4f" translate="yes" xml:space="preserve">
          <source>Convert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of &lt;em&gt;data&lt;/em&gt; should be at most 45. If &lt;em&gt;backtick&lt;/em&gt; is true, zeros are represented by &lt;code&gt;'`'&lt;/code&gt; instead of spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bcd306cc75b0714b5611036305e52cac880cb5" translate="yes" xml:space="preserve">
          <source>Convert binary data to a line(s) of ASCII characters in quoted-printable encoding. The return value is the converted line(s). If the optional argument &lt;em&gt;quotetabs&lt;/em&gt; is present and true, all tabs and spaces will be encoded. If the optional argument &lt;em&gt;istext&lt;/em&gt; is present and true, newlines are not encoded but trailing whitespace will be encoded. If the optional argument &lt;em&gt;header&lt;/em&gt; is present and true, spaces will be encoded as underscores per &lt;a href=&quot;https://tools.ietf.org/html/rfc1522.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 1522&lt;/strong&gt;&lt;/a&gt;. If the optional argument &lt;em&gt;header&lt;/em&gt; is present and false, newline characters will be encoded as well; otherwise linefeed conversion might corrupt the binary data stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de036f59d80ddae362c68ae076e459ca4d27347" translate="yes" xml:space="preserve">
          <source>Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression. The string should contain a complete number of binary bytes, or (in case of the last portion of the binhex4 data) have the remaining bits zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04200b730e54aa8fda1c2f0e3d83b0cec5562f1a" translate="yes" xml:space="preserve">
          <source>Convert doctest tests for a module to a &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3513ce10a1e8b5c91591217637e3ce7497554bc" translate="yes" xml:space="preserve">
          <source>Convert doctest tests from one or more text files to a &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249700a957ff4e05ceac31555093d1ae747b5e8b" translate="yes" xml:space="preserve">
          <source>Convert object to a string according to a given format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3193af4217078835a18155edc559f523a70d9099" translate="yes" xml:space="preserve">
          <source>Convert samples between 1-, 2-, 3- and 4-byte formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c7ac0a30f1dc25ba940a9472b00d69153b4dfe" translate="yes" xml:space="preserve">
          <source>Convert samples in the audio fragment to a-LAW encoding and return this as a bytes object. a-LAW is an audio encoding format whereby you get a dynamic range of about 13 bits using only 8 bit samples. It is used by the Sun audio hardware, among others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d0c4fe052fcac899e3b9539073b8762aa3f91e" translate="yes" xml:space="preserve">
          <source>Convert samples in the audio fragment to u-LAW encoding and return this as a bytes object. u-LAW is an audio encoding format whereby you get a dynamic range of about 14 bits using only 8 bit samples. It is used by the Sun audio hardware, among others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7736d972e5f9012cc2871d5d1484390f3856332" translate="yes" xml:space="preserve">
          <source>Convert samples to 4 bit Intel/DVI ADPCM encoding. ADPCM coding is an adaptive coding scheme, whereby each 4 bit number is the difference between one sample and the next, divided by a (varying) step. The Intel/DVI ADPCM algorithm has been selected for use by the IMA, so it may well become a standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab4aa01477b1f7842c82627ac4db388b74f44ba" translate="yes" xml:space="preserve">
          <source>Convert sound fragments in a-LAW encoding to linearly encoded sound fragments. a-LAW encoding always uses 8 bits samples, so &lt;em&gt;width&lt;/em&gt; refers only to the sample width of the output fragment here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb6ce1bbecba57f293d7bc12450ea36a5ba42902" translate="yes" xml:space="preserve">
          <source>Convert sound fragments in u-LAW encoding to linearly encoded sound fragments. u-LAW encoding always uses 8 bits samples, so &lt;em&gt;width&lt;/em&gt; refers only to the sample width of the output fragment here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86b3040501d9f083081a27b294157cbb3ff193b" translate="yes" xml:space="preserve">
          <source>Convert text with examples to a script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8dc036031d5c10efddf6003f047699339357d88" translate="yes" xml:space="preserve">
          <source>Convert the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; to a value. If no valid value is found, raise &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. Extra bytes in the input are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d4cb1e606d371bcce38a465c4f585f2b9dd5f6" translate="yes" xml:space="preserve">
          <source>Convert the array to a unicode string. The array must be a type &lt;code&gt;'u'&lt;/code&gt; array; otherwise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. Use &lt;code&gt;array.tobytes().decode(enc)&lt;/code&gt; to obtain a unicode string from an array of some other type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b770c3eb749ebf28ac8c24480e4ea954418f7607" translate="yes" xml:space="preserve">
          <source>Convert the array to an array of machine values and return the bytes representation (the same sequence of bytes that would be written to a file by the &lt;a href=&quot;#array.array.tofile&quot;&gt;&lt;code&gt;tofile()&lt;/code&gt;&lt;/a&gt; method.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba9977bc92e5d95f8eba08a6e5c07eba06c1a0d" translate="yes" xml:space="preserve">
          <source>Convert the array to an ordinary list with the same items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783ba2f25b2dfa2e81e8f6faae8972ffad4f0575" translate="yes" xml:space="preserve">
          <source>Convert the characters &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; in string &lt;em&gt;s&lt;/em&gt; to HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML. If the optional flag &lt;em&gt;quote&lt;/em&gt; is true, the characters (&lt;code&gt;&quot;&lt;/code&gt;) and (&lt;code&gt;'&lt;/code&gt;) are also translated; this helps for inclusion in an HTML attribute value delimited by quotes, as in &lt;code&gt;&amp;lt;a href=&quot;...&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16c87d453e979b5a8dff93e5dce6bc75825215c" translate="yes" xml:space="preserve">
          <source>Convert the color from HLS coordinates to RGB coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10fd24ea499bdd108a243b4245a17f3b8449913e" translate="yes" xml:space="preserve">
          <source>Convert the color from HSV coordinates to RGB coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31160c94a6ac190f2b4a1b98cc87a08c294a947" translate="yes" xml:space="preserve">
          <source>Convert the color from RGB coordinates to HLS coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa7f2e8a5a671e64c6ca2fb89a9d4cb148af4c" translate="yes" xml:space="preserve">
          <source>Convert the color from RGB coordinates to HSV coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e358b1958a8b289fecb53bc6594a4203776def" translate="yes" xml:space="preserve">
          <source>Convert the color from RGB coordinates to YIQ coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8e62e36a1266f0b85a866079491c9a14041e1e" translate="yes" xml:space="preserve">
          <source>Convert the color from YIQ coordinates to RGB coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec963274513b67b6272f66be848371f604bb73f" translate="yes" xml:space="preserve">
          <source>Convert the doctest for an object to a script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6a5d71a424fad6145a7dbbefba47470a354e5c" translate="yes" xml:space="preserve">
          <source>Convert the frame rate of the input fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4936022dc7478649499a83a00f8580badee7f2ec" translate="yes" xml:space="preserve">
          <source>Convert the operand to MIME quoted printable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9350fd2306d007df8cd328a919a3924e230c8b9" translate="yes" xml:space="preserve">
          <source>Convert the operand to hexadecimal representation, with two digits per byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045ebeed376448c67a4d1d1cc32dfba3f66f61d9" translate="yes" xml:space="preserve">
          <source>Convert the operand to multiline MIME base64 (the result always includes a trailing &lt;code&gt;'\n'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e7101332a142d9e409f8d5ff04ccae1bde4202" translate="yes" xml:space="preserve">
          <source>Convert the operand using uuencode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b5b0354355111582bae438d6f7c9a0a956c253" translate="yes" xml:space="preserve">
          <source>Convert the path component &lt;em&gt;path&lt;/em&gt; from a percent-encoded URL to the local syntax for a path. This does not accept a complete URL. This function uses &lt;a href=&quot;urllib.parse#urllib.parse.unquote&quot;&gt;&lt;code&gt;unquote()&lt;/code&gt;&lt;/a&gt; to decode &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67fd9d1641c4138b9a7308b802549ad771a7daf4" translate="yes" xml:space="preserve">
          <source>Convert the pathname &lt;em&gt;path&lt;/em&gt; from the local syntax for a path to the form used in the path component of a URL. This does not produce a complete URL. The return value will already be quoted using the &lt;a href=&quot;urllib.parse#urllib.parse.quote&quot;&gt;&lt;code&gt;quote()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba9fd52ef9443c282b8e4ace63c6fb69cb910f4" translate="yes" xml:space="preserve">
          <source>Convert to a string, using engineering notation if an exponent is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e3e438e2d129d0ca5a1f5a1a49bb07f7f34ca7" translate="yes" xml:space="preserve">
          <source>Converter functions &lt;strong&gt;always&lt;/strong&gt; get called with a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object, no matter under which data type you sent the value to SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9821e72b37a5bd7fc0fd82570ba315962171520" translate="yes" xml:space="preserve">
          <source>Converting SQLite values to custom Python types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb70e6b413d743f89ad24f195333a92eb979884" translate="yes" xml:space="preserve">
          <source>Converting ST Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c38d8937ade198780acfab365380f6e3c9f6ff7" translate="yes" xml:space="preserve">
          <source>Converting an argument sequence to a string on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83e7dd5b4f333432327fb71dc0a4338f19ed4ad" translate="yes" xml:space="preserve">
          <source>Converting existing applications to use Tile widgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89abbbb3496d2c7f59360a19080507a46c4b6668" translate="yes" xml:space="preserve">
          <source>Converts a number to a string using scientific notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a677fb309d06855c881535a88393c9138dda99" translate="yes" xml:space="preserve">
          <source>Converts a string into a normalized number string, following the &lt;a href=&quot;#locale.LC_NUMERIC&quot;&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9392c5d9d21c023c825148d7d6880fad6f820bd0" translate="yes" xml:space="preserve">
          <source>Converts a string to a floating point number, following the &lt;a href=&quot;#locale.LC_NUMERIC&quot;&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af674bfa5f978838ee22e16ffa3c3184d8a76c14" translate="yes" xml:space="preserve">
          <source>Converts a string to an integer, following the &lt;a href=&quot;#locale.LC_NUMERIC&quot;&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt;&lt;/a&gt; conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e05cb1b5c92776e400e5237e95f05b4690afe8a" translate="yes" xml:space="preserve">
          <source>Converts an IMAP4 &lt;code&gt;FLAGS&lt;/code&gt; response to a tuple of individual flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7841f290919a90a4148f37d66fbb661fd54e17e4" translate="yes" xml:space="preserve">
          <source>Converts an integer into a string representation using characters from the set [&lt;code&gt;A&lt;/code&gt; .. &lt;code&gt;P&lt;/code&gt;].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36e1d603487abc1ea6d16cc8b0f752c70d65c43" translate="yes" xml:space="preserve">
          <source>Converts the dataclass &lt;code&gt;instance&lt;/code&gt; to a dict (by using the factory function &lt;code&gt;dict_factory&lt;/code&gt;). Each dataclass is converted to a dict of its fields, as &lt;code&gt;name: value&lt;/code&gt; pairs. dataclasses, dicts, lists, and tuples are recursed into. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f704416e5a654a33d040260946c17d7cb3c92b5a" translate="yes" xml:space="preserve">
          <source>Converts the dataclass &lt;code&gt;instance&lt;/code&gt; to a tuple (by using the factory function &lt;code&gt;tuple_factory&lt;/code&gt;). Each dataclass is converted to a tuple of its field values. dataclasses, dicts, lists, and tuples are recursed into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2042887b4bdf78bca20c16c7c59696a5605f3ea6" translate="yes" xml:space="preserve">
          <source>Converts the value (returned by &lt;a href=&quot;#string.Formatter.get_field&quot;&gt;&lt;code&gt;get_field()&lt;/code&gt;&lt;/a&gt;) given a conversion type (as in the tuple returned by the &lt;a href=&quot;#string.Formatter.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; method). The default version understands &amp;lsquo;s&amp;rsquo; (str), &amp;lsquo;r&amp;rsquo; (repr) and &amp;lsquo;a&amp;rsquo; (ascii) conversion types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2c154db269fd6f8622d4e95d75199eaa3ef467" translate="yes" xml:space="preserve">
          <source>Converts tokens back into Python source code. The &lt;em&gt;iterable&lt;/em&gt; must return sequences with at least two elements, the token type and the token string. Any additional sequence elements are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6bf9169d42e54152deba7c04ee86259ec61b9c" translate="yes" xml:space="preserve">
          <source>Cookie Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464e6d34a0b0c46265ab9e1e4c8d23b2453a6ce2" translate="yes" xml:space="preserve">
          <source>Cookie name (a string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c04dd991d89a96989bc9b3f19dc761065eefbf4" translate="yes" xml:space="preserve">
          <source>Cookie path (a string, eg. &lt;code&gt;'/acme/rocket_launchers'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959dd041a719bd3565789fed1d532641c9103bc2" translate="yes" xml:space="preserve">
          <source>Cookie value (a string), or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90aabebc649e7b1de6c686ae13007cf68d2cb03" translate="yes" xml:space="preserve">
          <source>CookieJar and FileCookieJar Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e668f405ecc9d697005f2b7160c135c9517ee4" translate="yes" xml:space="preserve">
          <source>CookiePolicy Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff00e7605204b977b786fce0c99eac65d0ccd91" translate="yes" xml:space="preserve">
          <source>Cookies may have additional non-standard cookie-attributes. These may be accessed using the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2928c3e251eec43ac98bbeb25b892b485c3a8950" translate="yes" xml:space="preserve">
          <source>Cookies that did not explicitly specify a &lt;code&gt;domain&lt;/code&gt; cookie-attribute can only be returned to a domain equal to the domain that set the cookie (eg. &lt;code&gt;spam.example.com&lt;/code&gt; won&amp;rsquo;t be returned cookies from &lt;code&gt;example.com&lt;/code&gt; that had no &lt;code&gt;domain&lt;/code&gt; cookie-attribute).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4061106759a3f1e3c0fd251397b079f59d1b6c08" translate="yes" xml:space="preserve">
          <source>Copied to another file or mailbox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e002f447c6abc4e47d2c7d5dd7ee78986e3fa88" translate="yes" xml:space="preserve">
          <source>Copies of these &lt;code&gt;.po&lt;/code&gt; files are then handed over to the individual human translators who write translations for every supported natural language. They send back the completed language-specific versions as a &lt;code&gt;&amp;lt;language-name&amp;gt;.po&lt;/code&gt; file that&amp;rsquo;s compiled into a machine-readable &lt;code&gt;.mo&lt;/code&gt; binary catalog file using the &lt;strong&gt;msgfmt&lt;/strong&gt; program. The &lt;code&gt;.mo&lt;/code&gt; files are used by the &lt;a href=&quot;#module-gettext&quot;&gt;&lt;code&gt;gettext&lt;/code&gt;&lt;/a&gt; module for the actual translation processing at run-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57924acb3adef866090c938ced573191bdcf6ffd" translate="yes" xml:space="preserve">
          <source>Copies the file &lt;em&gt;src&lt;/em&gt; to the file or directory &lt;em&gt;dst&lt;/em&gt;. &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; should be strings. If &lt;em&gt;dst&lt;/em&gt; specifies a directory, the file will be copied into &lt;em&gt;dst&lt;/em&gt; using the base filename from &lt;em&gt;src&lt;/em&gt;. Returns the path to the newly created file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8359c504f6b70cf14ececc9580c65ed0ecd74f5d" translate="yes" xml:space="preserve">
          <source>Copies the sign from &lt;em&gt;y&lt;/em&gt; to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1397a37bcdaf0f7cf2bf946b1f9c8b75ea2a8d3f" translate="yes" xml:space="preserve">
          <source>Coping with mutable arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af74f7c5362aaee985bf8cda3dd75fc80751ce51" translate="yes" xml:space="preserve">
          <source>Copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53adce157045d92751f7fb4b78cc8a1b4f25df45" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;count&lt;/em&gt; bytes from file descriptor &lt;em&gt;in&lt;/em&gt; to file descriptor &lt;em&gt;out&lt;/em&gt; starting at &lt;em&gt;offset&lt;/em&gt;. Return the number of bytes sent. When EOF is reached return 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06b21fad16797f7f26b90f083c54efd968b7604" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;count&lt;/em&gt; bytes from file descriptor &lt;em&gt;src&lt;/em&gt;, starting from offset &lt;em&gt;offset_src&lt;/em&gt;, to file descriptor &lt;em&gt;dst&lt;/em&gt;, starting from offset &lt;em&gt;offset_dst&lt;/em&gt;. If &lt;em&gt;offset_src&lt;/em&gt; is None, then &lt;em&gt;src&lt;/em&gt; is read from the current position; respectively for &lt;em&gt;offset_dst&lt;/em&gt;. The files pointed by &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; must reside in the same filesystem, otherwise an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised with &lt;a href=&quot;exceptions#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; set to &lt;a href=&quot;errno#errno.EXDEV&quot;&gt;&lt;code&gt;errno.EXDEV&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe5f250f7a137544758a92fc18e816d756d0ed9" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;infile&lt;/em&gt; to &lt;em&gt;outfile&lt;/em&gt; through the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76f78d8ca36e390b07caa8e4716dfeac0d8adbb" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;message_set&lt;/em&gt; messages onto end of &lt;em&gt;new_mailbox&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8276974b3d8569078c039739613afd9c074bbd" translate="yes" xml:space="preserve">
          <source>Copy a network object denoted by a URL to a local file. If the URL points to a local file, the object will not be copied unless filename is supplied. Return a tuple &lt;code&gt;(filename, headers)&lt;/code&gt; where &lt;em&gt;filename&lt;/em&gt; is the local file name under which the object can be found, and &lt;em&gt;headers&lt;/em&gt; is whatever the &lt;code&gt;info()&lt;/code&gt; method of the object returned by &lt;a href=&quot;#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt; returned (for a remote object). Exceptions are the same as for &lt;a href=&quot;#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21f279ba48715c09d45451e6a0f6ec3a5cc265d" translate="yes" xml:space="preserve">
          <source>Copy selection into the system-wide clipboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ba13be352e884543c1f510a794e66123cbcf32" translate="yes" xml:space="preserve">
          <source>Copy selection into the system-wide clipboard; then delete the selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd284c440e9ce6081a24cb000f33b71b26e7bdc" translate="yes" xml:space="preserve">
          <source>Copy source location (&lt;code&gt;lineno&lt;/code&gt;, &lt;code&gt;col_offset&lt;/code&gt;, &lt;code&gt;end_lineno&lt;/code&gt;, and &lt;code&gt;end_col_offset&lt;/code&gt;) from &lt;em&gt;old_node&lt;/em&gt; to &lt;em&gt;new_node&lt;/em&gt; if possible, and return &lt;em&gt;new_node&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acd90e6b0ebed13b40d6a81c43b791976f6d532" translate="yes" xml:space="preserve">
          <source>Copy the &lt;em&gt;count&lt;/em&gt; bytes starting at offset &lt;em&gt;src&lt;/em&gt; to the destination index &lt;em&gt;dest&lt;/em&gt;. If the mmap was created with &lt;code&gt;ACCESS_READ&lt;/code&gt;, then calls to move will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21748ffe5dec5ecd4262d258ae43a29d8115c2f" translate="yes" xml:space="preserve">
          <source>Copy the contents (no metadata) of the file named &lt;em&gt;src&lt;/em&gt; to a file named &lt;em&gt;dst&lt;/em&gt; and return &lt;em&gt;dst&lt;/em&gt; in the most efficient way possible. &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; are path-like objects or path names given as strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830e1a55378d7ec674e66bfa512d4e5a011dc28b" translate="yes" xml:space="preserve">
          <source>Copy the contents of the file-like object &lt;em&gt;fsrc&lt;/em&gt; to the file-like object &lt;em&gt;fdst&lt;/em&gt;. The integer &lt;em&gt;length&lt;/em&gt;, if given, is the buffer size. In particular, a negative &lt;em&gt;length&lt;/em&gt; value means to copy the data without looping over the source data in chunks; by default the data is read in chunks to avoid uncontrolled memory consumption. Note that if the current file position of the &lt;em&gt;fsrc&lt;/em&gt; object is not 0, only the contents from the current file position to the end of the file will be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b13984ced85c8b417ed51756b16a3ba9d054502" translate="yes" xml:space="preserve">
          <source>Copy the permission bits from &lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dst&lt;/em&gt;. The file contents, owner, and group are unaffected. &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; are path-like objects or path names given as strings. If &lt;em&gt;follow_symlinks&lt;/em&gt; is false, and both &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; are symbolic links, &lt;a href=&quot;#shutil.copymode&quot;&gt;&lt;code&gt;copymode()&lt;/code&gt;&lt;/a&gt; will attempt to modify the mode of &lt;em&gt;dst&lt;/em&gt; itself (rather than the file it points to). This functionality is not available on every platform; please see &lt;a href=&quot;#shutil.copystat&quot;&gt;&lt;code&gt;copystat()&lt;/code&gt;&lt;/a&gt; for more information. If &lt;a href=&quot;#shutil.copymode&quot;&gt;&lt;code&gt;copymode()&lt;/code&gt;&lt;/a&gt; cannot modify symbolic links on the local platform, and it is asked to do so, it will do nothing and return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e255a4b8c9f934188ddd1f18a616d3ce8ab40ace" translate="yes" xml:space="preserve">
          <source>Copy the permission bits, last access time, last modification time, and flags from &lt;em&gt;src&lt;/em&gt; to &lt;em&gt;dst&lt;/em&gt;. On Linux, &lt;a href=&quot;#shutil.copystat&quot;&gt;&lt;code&gt;copystat()&lt;/code&gt;&lt;/a&gt; also copies the &amp;ldquo;extended attributes&amp;rdquo; where possible. The file contents, owner, and group are unaffected. &lt;em&gt;src&lt;/em&gt; and &lt;em&gt;dst&lt;/em&gt; are path-like objects or path names given as strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00574187a2520f289a3e394c56f7c1ef217961af" translate="yes" xml:space="preserve">
          <source>Copying existing binary data via the buffer protocol: &lt;code&gt;bytearray(b'Hi!')&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4418a58d8e56fd84acbad40a26df3c8169ca80" translate="yes" xml:space="preserve">
          <source>Copying existing binary data via the buffer protocol: &lt;code&gt;bytes(obj)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23b7e708712662d956158f8cf3704e363aa48f1" translate="yes" xml:space="preserve">
          <source>Coroutine Utility Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90568bc70576d043888238ed59d664d485f05b51" translate="yes" xml:space="preserve">
          <source>Coroutine waiting until a socket receives data using the &lt;a href=&quot;#asyncio.open_connection&quot;&gt;&lt;code&gt;open_connection()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038697113018f4400bc94f1be4aebad0829b635a" translate="yes" xml:space="preserve">
          <source>Coroutines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615d3dc4c9669e0c62bc2c93d61e464641729f1e" translate="yes" xml:space="preserve">
          <source>Coroutines and Tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be9834be7794bb5361d66dfc99f706d0eae70af" translate="yes" xml:space="preserve">
          <source>Correspondence to tools in the &lt;code&gt;os&lt;/code&gt; module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7408ed2d60e279214c2bd00dd1a457e5f0a2ca84" translate="yes" xml:space="preserve">
          <source>Correspondence to tools in the os module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7634e8ac0b71f4da7f83caa772f3f6ba291003b6" translate="yes" xml:space="preserve">
          <source>Corresponding Control Panel Sound name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56939918123842d0ed8f7dd9c8f8161a9e132628" translate="yes" xml:space="preserve">
          <source>Corresponds to the inline flag &lt;code&gt;(?x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e847928e2c4c13871281af027d0f5b75273cd4" translate="yes" xml:space="preserve">
          <source>Count the number of deque elements equal to &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5008e7e11ff051176f62dba3d687434c20eedee8" translate="yes" xml:space="preserve">
          <source>Count the number of open file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fca4ef7c3ddf0142d203de043d4a7656fe069b5" translate="yes" xml:space="preserve">
          <source>Counter objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39539edfee032a26e2be617e86e1d209fbec2003" translate="yes" xml:space="preserve">
          <source>Counter objects have a dictionary interface except that they return a zero count for missing items instead of raising a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102615802a7a205b6bde3a278e69850dba891f4b" translate="yes" xml:space="preserve">
          <source>Counter objects support three methods beyond those available for all dictionaries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293868470d5fea2ce1c941b3768170307d82d21d" translate="yes" xml:space="preserve">
          <source>Counters were primarily designed to work with positive integers to represent running counts; however, care was taken to not unnecessarily preclude use cases needing other types or negative values. To help with those use cases, this section documents the minimum range and type restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310e75b7e9a83f1d2e6cb4d58dde9c9459399fe8" translate="yes" xml:space="preserve">
          <source>Coupling Widget Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be656401f4b0ace44dfa6c33e8e2bf7402264394" translate="yes" xml:space="preserve">
          <source>Coverage.py</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e157c5da4410b7e9de85f5c93026b9176e69064" translate="yes" xml:space="preserve">
          <source>Create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c999bc173f28a1eb2d484b9d26caf590cdc67f" translate="yes" xml:space="preserve">
          <source>Create a &amp;ldquo;child&amp;rdquo; parser which can be used to parse an external parsed entity referred to by content parsed by the parent parser. The &lt;em&gt;context&lt;/em&gt; parameter should be the string passed to the &lt;a href=&quot;#xml.parsers.expat.xmlparser.ExternalEntityRefHandler&quot;&gt;&lt;code&gt;ExternalEntityRefHandler()&lt;/code&gt;&lt;/a&gt; handler function, described below. The child parser is created with the &lt;a href=&quot;#xml.parsers.expat.xmlparser.ordered_attributes&quot;&gt;&lt;code&gt;ordered_attributes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#xml.parsers.expat.xmlparser.specified_attributes&quot;&gt;&lt;code&gt;specified_attributes&lt;/code&gt;&lt;/a&gt; set to the values of this parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ecb6761e733343cf0fa3eaeceefa50d300b11c" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; instance from a sequence of pairs as returned by &lt;a href=&quot;#email.header.decode_header&quot;&gt;&lt;code&gt;decode_header()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f8e78e2092fde70becba3aa079ad575e0c0ba6" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#email.parser.BytesFeedParser&quot;&gt;&lt;code&gt;BytesFeedParser&lt;/code&gt;&lt;/a&gt; instance. Optional &lt;em&gt;_factory&lt;/em&gt; is a no-argument callable; if not specified use the &lt;a href=&quot;email.policy#email.policy.Policy.message_factory&quot;&gt;&lt;code&gt;message_factory&lt;/code&gt;&lt;/a&gt; from the &lt;em&gt;policy&lt;/em&gt;. Call &lt;em&gt;_factory&lt;/em&gt; whenever a new message object is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e93970e31a84fd82e012521c11c8b9fc7a3a9c1" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#email.parser.BytesParser&quot;&gt;&lt;code&gt;BytesParser&lt;/code&gt;&lt;/a&gt; instance. The &lt;em&gt;_class&lt;/em&gt; and &lt;em&gt;policy&lt;/em&gt; arguments have the same meaning and semantics as the &lt;em&gt;_factory&lt;/em&gt; and &lt;em&gt;policy&lt;/em&gt; arguments of &lt;a href=&quot;#email.parser.BytesFeedParser&quot;&gt;&lt;code&gt;BytesFeedParser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41d643deacf5f223b3ed8b525694980b2915460" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt; that references &lt;em&gt;obj&lt;/em&gt;. &lt;em&gt;obj&lt;/em&gt; must support the buffer protocol. Built-in objects that support the buffer protocol include &lt;a href=&quot;#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d7551753bc28ccc0822d405da188900f13331b" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#pstats.Stats&quot;&gt;&lt;code&gt;Stats&lt;/code&gt;&lt;/a&gt; object based on the current profile and print the results to stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50d435122c6de6f01bc97119ad3a15f03f8b00a" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object from the result of &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; or equivalent on an existing file. The file is either named by &lt;em&gt;name&lt;/em&gt;, or specified as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;fileobj&lt;/em&gt; with a file descriptor. &lt;em&gt;name&lt;/em&gt; may be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;. If given, &lt;em&gt;arcname&lt;/em&gt; specifies an alternative name for the file in the archive, otherwise, the name is taken from &lt;em&gt;fileobj&lt;/em&gt;&amp;rsquo;s &lt;a href=&quot;io#io.FileIO.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; attribute, or the &lt;em&gt;name&lt;/em&gt; argument. The name should be a text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe214326b02e4d140a2b7ef02d94505bfd96fb" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccd1cdb9d708e38c6c193b91b59795990dcdeda" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#timeit.Timer&quot;&gt;&lt;code&gt;Timer&lt;/code&gt;&lt;/a&gt; instance with the given statement, &lt;em&gt;setup&lt;/em&gt; code and &lt;em&gt;timer&lt;/em&gt; function and run its &lt;a href=&quot;#timeit.Timer.repeat&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt; method with the given &lt;em&gt;repeat&lt;/em&gt; count and &lt;em&gt;number&lt;/em&gt; executions. The optional &lt;em&gt;globals&lt;/em&gt; argument specifies a namespace in which to execute the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8623890c709ae489bf787e31d306776b3a872b3" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#timeit.Timer&quot;&gt;&lt;code&gt;Timer&lt;/code&gt;&lt;/a&gt; instance with the given statement, &lt;em&gt;setup&lt;/em&gt; code and &lt;em&gt;timer&lt;/em&gt; function and run its &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; method with &lt;em&gt;number&lt;/em&gt; executions. The optional &lt;em&gt;globals&lt;/em&gt; argument specifies a namespace in which to execute the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06181e2b685f7ca4059f0ddcbe8e35f62837e0e9" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;#wsgiref.simple_server.WSGIServer&quot;&gt;&lt;code&gt;WSGIServer&lt;/code&gt;&lt;/a&gt; instance. &lt;em&gt;server_address&lt;/em&gt; should be a &lt;code&gt;(host,port)&lt;/code&gt; tuple, and &lt;em&gt;RequestHandlerClass&lt;/em&gt; should be the subclass of &lt;a href=&quot;http.server#http.server.BaseHTTPRequestHandler&quot;&gt;&lt;code&gt;http.server.BaseHTTPRequestHandler&lt;/code&gt;&lt;/a&gt; that will be used to process requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a04632dc650cbc8a00d96de143a714f3baca964" translate="yes" xml:space="preserve">
          <source>Create a &lt;a href=&quot;asyncio-future#asyncio.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958c9879fe7267f24c791c47838d479c61542ffb" translate="yes" xml:space="preserve">
          <source>Create a BaseManager object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1740d7868f58c8da5d08b95189924b245f03db" translate="yes" xml:space="preserve">
          <source>Create a C callable function (a callback function) from a Python &lt;em&gt;callable&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f2181b5859e35a9d727c86ff49c22c86df62ee" translate="yes" xml:space="preserve">
          <source>Create a C runtime file descriptor from the file handle &lt;em&gt;handle&lt;/em&gt;. The &lt;em&gt;flags&lt;/em&gt; parameter should be a bitwise OR of &lt;a href=&quot;os#os.O_APPEND&quot;&gt;&lt;code&gt;os.O_APPEND&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os#os.O_RDONLY&quot;&gt;&lt;code&gt;os.O_RDONLY&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;os#os.O_TEXT&quot;&gt;&lt;code&gt;os.O_TEXT&lt;/code&gt;&lt;/a&gt;. The returned file descriptor may be used as a parameter to &lt;a href=&quot;os#os.fdopen&quot;&gt;&lt;code&gt;os.fdopen()&lt;/code&gt;&lt;/a&gt; to create a file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7244e17c178d66f0bbeac5ce7053cd2575a64f" translate="yes" xml:space="preserve">
          <source>Create a FIFO (a named pipe) named &lt;em&gt;path&lt;/em&gt; with numeric mode &lt;em&gt;mode&lt;/em&gt;. The current umask value is first masked out from the mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1391ae7575613e01ebbaba98d5497b9132f6d623" translate="yes" xml:space="preserve">
          <source>Create a MIME-compliant header that can contain strings in different character sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3238b36fd87f4458684aaefc151413f20fb13a6b" translate="yes" xml:space="preserve">
          <source>Create a SAX parser and use it to parse a document. The document, passed in as &lt;em&gt;filename_or_stream&lt;/em&gt;, can be a filename or a file object. The &lt;em&gt;handler&lt;/em&gt; parameter needs to be a SAX &lt;a href=&quot;xml.sax.handler#xml.sax.handler.ContentHandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; instance. If &lt;em&gt;error_handler&lt;/em&gt; is given, it must be a SAX &lt;a href=&quot;xml.sax.handler#xml.sax.handler.ErrorHandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt; instance; if omitted, &lt;a href=&quot;#xml.sax.SAXParseException&quot;&gt;&lt;code&gt;SAXParseException&lt;/code&gt;&lt;/a&gt; will be raised on all errors. There is no return value; all work must be done by the &lt;em&gt;handler&lt;/em&gt; passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7250841449332a6b37223770676760098083d6" translate="yes" xml:space="preserve">
          <source>Create a TCP echo server using the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt;&lt;code&gt;loop.create_server()&lt;/code&gt;&lt;/a&gt; method, send back received data, and close the connection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fc03f6f54b4f3379b9858d104182f411df940c" translate="yes" xml:space="preserve">
          <source>Create a TCP server (socket type &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt;) listening on &lt;em&gt;port&lt;/em&gt; of the &lt;em&gt;host&lt;/em&gt; address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afcb92f9913434632f8d3e8a6d0761bd66390b9c" translate="yes" xml:space="preserve">
          <source>Create a TCP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d137860a6000e648e8bb5b2956d0235c714f4abf" translate="yes" xml:space="preserve">
          <source>Create a UUID from either a string of 32 hexadecimal digits, a string of 16 bytes in big-endian order as the &lt;em&gt;bytes&lt;/em&gt; argument, a string of 16 bytes in little-endian order as the &lt;em&gt;bytes_le&lt;/em&gt; argument, a tuple of six integers (32-bit &lt;em&gt;time_low&lt;/em&gt;, 16-bit &lt;em&gt;time_mid&lt;/em&gt;, 16-bit &lt;em&gt;time_hi_version&lt;/em&gt;, 8-bit &lt;em&gt;clock_seq_hi_variant&lt;/em&gt;, 8-bit &lt;em&gt;clock_seq_low&lt;/em&gt;, 48-bit &lt;em&gt;node&lt;/em&gt;) as the &lt;em&gt;fields&lt;/em&gt; argument, or a single 128-bit integer as the &lt;em&gt;int&lt;/em&gt; argument. When a string of hex digits is given, curly braces, hyphens, and a URN prefix are all optional. For example, these expressions all yield the same UUID:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f7cca527d4af0d82e76e5606b81bb0d686b821" translate="yes" xml:space="preserve">
          <source>Create a Unix connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb9090ec1a72c1066be0a36f4c9bd7ea885abc7" translate="yes" xml:space="preserve">
          <source>Create a Unix socket server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e71b85a7c4691d49bb28fefa4e8d03facc73b8e" translate="yes" xml:space="preserve">
          <source>Create a barrier object for &lt;em&gt;parties&lt;/em&gt; number of threads. An &lt;em&gt;action&lt;/em&gt;, when provided, is a callable to be called by one of the threads when they are released. &lt;em&gt;timeout&lt;/em&gt; is the default timeout value if none is specified for the &lt;a href=&quot;#threading.Barrier.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f84251b896e4099e85eabf977360100f7b05b57" translate="yes" xml:space="preserve">
          <source>Create a code object from Python source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3907509843185c5c9f8e58020e5aaadb63ccb9" translate="yes" xml:space="preserve">
          <source>Create a compressor object, which can be used to compress data incrementally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b48583be9cc0e3827ff847f25a8f6fe0c76fb2" translate="yes" xml:space="preserve">
          <source>Create a datagram connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8120f3d4102cbd82b6f8d6d0423fb9d4835995c5" translate="yes" xml:space="preserve">
          <source>Create a decompressor object, which can be used to decompress data incrementally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c07b467e1b8446b1fc7c3dbbdad4fdfffeb7446" translate="yes" xml:space="preserve">
          <source>Create a directory named &lt;em&gt;path&lt;/em&gt; with numeric mode &lt;em&gt;mode&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb521742f71e600a11130ef69d14726d641dba5" translate="yes" xml:space="preserve">
          <source>Create a directory named &lt;em&gt;pkg_dir&lt;/em&gt; containing an &lt;code&gt;__init__&lt;/code&gt; file with &lt;em&gt;init_source&lt;/em&gt; as its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac078f22e8c4601622cb3771d3db27f931bf57d6" translate="yes" xml:space="preserve">
          <source>Create a file at this given path. If &lt;em&gt;mode&lt;/em&gt; is given, it is combined with the process&amp;rsquo; &lt;code&gt;umask&lt;/code&gt; value to determine the file mode and access flags. If the file already exists, the function succeeds if &lt;em&gt;exist_ok&lt;/em&gt; is true (and its modification time is updated to the current time), otherwise &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02f866dcc4c2cfc706205c38fef7b6262ea69d0" translate="yes" xml:space="preserve">
          <source>Create a filesystem node (file, device special file or named pipe) named &lt;em&gt;path&lt;/em&gt;. &lt;em&gt;mode&lt;/em&gt; specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of &lt;code&gt;stat.S_IFREG&lt;/code&gt;, &lt;code&gt;stat.S_IFCHR&lt;/code&gt;, &lt;code&gt;stat.S_IFBLK&lt;/code&gt;, and &lt;code&gt;stat.S_IFIFO&lt;/code&gt; (those constants are available in &lt;a href=&quot;stat#module-stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt;). For &lt;code&gt;stat.S_IFCHR&lt;/code&gt; and &lt;code&gt;stat.S_IFBLK&lt;/code&gt;, &lt;em&gt;device&lt;/em&gt; defines the newly created device special file (probably using &lt;a href=&quot;#os.makedev&quot;&gt;&lt;code&gt;os.makedev()&lt;/code&gt;&lt;/a&gt;), otherwise it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256a719603c8511e2fa4f716c9cc64d5f86cdee1" translate="yes" xml:space="preserve">
          <source>Create a folder whose name is &lt;em&gt;folder&lt;/em&gt; and return a &lt;a href=&quot;#mailbox.Maildir&quot;&gt;&lt;code&gt;Maildir&lt;/code&gt;&lt;/a&gt; instance representing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ba3e2c27072652d546e76abc5e400c4c350229" translate="yes" xml:space="preserve">
          <source>Create a folder whose name is &lt;em&gt;folder&lt;/em&gt; and return an &lt;a href=&quot;#mailbox.MH&quot;&gt;&lt;code&gt;MH&lt;/code&gt;&lt;/a&gt; instance representing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76d9d947dc928175ad3b4babe4519bad1149149" translate="yes" xml:space="preserve">
          <source>Create a hard link pointing to &lt;em&gt;src&lt;/em&gt; named &lt;em&gt;dst&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e803183d5ea3fd3cf10522a90f8c00436fc661b" translate="yes" xml:space="preserve">
          <source>Create a hard link pointing to a path named &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d54230cdf0242823e4343f355f542a6de5796c" translate="yes" xml:space="preserve">
          <source>Create a kqueue object from a given file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b60de74fcecb9202f737c05765bd7e7d59a181c" translate="yes" xml:space="preserve">
          <source>Create a mapping from positional and keyword arguments to parameters. Returns &lt;a href=&quot;#inspect.BoundArguments&quot;&gt;&lt;code&gt;BoundArguments&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; match the signature, or raises a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1833d22d8bcbf93a879eec7b2f358164512b0afd" translate="yes" xml:space="preserve">
          <source>Create a mapping-like object wrapping &lt;em&gt;headers&lt;/em&gt;, which must be a list of header name/value tuples as described in &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;. The default value of &lt;em&gt;headers&lt;/em&gt; is an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0250d2eb46065cc9364e3e8af9cd9d7a54284d45" translate="yes" xml:space="preserve">
          <source>Create a mock object using another object as a spec. Attributes on the mock will use the corresponding attribute on the &lt;em&gt;spec&lt;/em&gt; object as their spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc15332efdb9551847c826fa74ea7bb0e4ee880" translate="yes" xml:space="preserve">
          <source>Create a mutually exclusive group. &lt;a href=&quot;#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; will make sure that only one of the arguments in the mutually exclusive group was present on the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c993da95fe0ee91fcbe1a12dda9eef696868d03d" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95edfaf44feb392b9cb95c08054a65b6598dcea1" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#smtpd.SMTPChannel&quot;&gt;&lt;code&gt;SMTPChannel&lt;/code&gt;&lt;/a&gt; object which manages the communication between the server and a single SMTP client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d595fb882153f08babd171efbbadedfd068bca8c" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt; object, which binds to local address &lt;em&gt;localaddr&lt;/em&gt;. It will treat &lt;em&gt;remoteaddr&lt;/em&gt; as an upstream SMTP relayer. Both &lt;em&gt;localaddr&lt;/em&gt; and &lt;em&gt;remoteaddr&lt;/em&gt; should be a &lt;a href=&quot;socket#host-port&quot;&gt;(host, port)&lt;/a&gt; tuple. The object inherits from &lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt;&lt;code&gt;asyncore.dispatcher&lt;/code&gt;&lt;/a&gt;, and so will insert itself into &lt;a href=&quot;asyncore#module-asyncore&quot;&gt;&lt;code&gt;asyncore&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s event loop on instantiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3210c331d6c85bfcc321ab27045c37122d176c20" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#tracemalloc.Snapshot&quot;&gt;&lt;code&gt;Snapshot&lt;/code&gt;&lt;/a&gt; instance with a filtered &lt;a href=&quot;#tracemalloc.Snapshot.traces&quot;&gt;&lt;code&gt;traces&lt;/code&gt;&lt;/a&gt; sequence, &lt;em&gt;filters&lt;/em&gt; is a list of &lt;a href=&quot;#tracemalloc.DomainFilter&quot;&gt;&lt;code&gt;DomainFilter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tracemalloc.Filter&quot;&gt;&lt;code&gt;Filter&lt;/code&gt;&lt;/a&gt; instances. If &lt;em&gt;filters&lt;/em&gt; is an empty list, return a new &lt;a href=&quot;#tracemalloc.Snapshot&quot;&gt;&lt;code&gt;Snapshot&lt;/code&gt;&lt;/a&gt; instance with a copy of the traces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b367a6e07ec4b583d11e0043bd612a80f2b165" translate="yes" xml:space="preserve">
          <source>Create a new &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt; object. &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt; takes several optional arguments that specify the behaviour of the Mock object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a00df9cac6d51ba9f5ad917fc268b8a72bb92d" translate="yes" xml:space="preserve">
          <source>Create a new CAB file named &lt;em&gt;cabname&lt;/em&gt;. &lt;em&gt;files&lt;/em&gt; must be a list of tuples, each containing the name of the file on disk, and the name of the file inside the CAB file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75d9ce3c3bfc15a75a58ea17f02230fd6a149cf" translate="yes" xml:space="preserve">
          <source>Create a new Parameter instance based on the instance replaced was invoked on. To override a &lt;a href=&quot;#inspect.Parameter&quot;&gt;&lt;code&gt;Parameter&lt;/code&gt;&lt;/a&gt; attribute, pass the corresponding argument. To remove a default value or/and an annotation from a Parameter, pass &lt;a href=&quot;#inspect.Parameter.empty&quot;&gt;&lt;code&gt;Parameter.empty&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92aea08cee55e96bbb93c4cd5c5b0269de4c4e6" translate="yes" xml:space="preserve">
          <source>Create a new SSL context. You may pass &lt;em&gt;protocol&lt;/em&gt; which must be one of the &lt;code&gt;PROTOCOL_*&lt;/code&gt; constants defined in this module. The parameter specifies which version of the SSL protocol to use. Typically, the server chooses a particular protocol version, and the client must adapt to the server&amp;rsquo;s choice. Most of the versions are not interoperable with the other versions. If not specified, the default is &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;; it provides the most compatibility with other versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d467ff2622606bac0af245bd6e6292ed7bd4299" translate="yes" xml:space="preserve">
          <source>Create a new Signature instance based on the instance replace was invoked on. It is possible to pass different &lt;code&gt;parameters&lt;/code&gt; and/or &lt;code&gt;return_annotation&lt;/code&gt; to override the corresponding properties of the base signature. To remove return_annotation from the copied Signature, pass in &lt;a href=&quot;#inspect.Signature.empty&quot;&gt;&lt;code&gt;Signature.empty&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75da8263d7f5e9516aea61e5e0518c7a0858e9b5" translate="yes" xml:space="preserve">
          <source>Create a new WSGI server listening on &lt;em&gt;host&lt;/em&gt; and &lt;em&gt;port&lt;/em&gt;, accepting connections for &lt;em&gt;app&lt;/em&gt;. The return value is an instance of the supplied &lt;em&gt;server_class&lt;/em&gt;, and will process requests using the specified &lt;em&gt;handler_class&lt;/em&gt;. &lt;em&gt;app&lt;/em&gt; must be a WSGI application object, as defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9bef92acef5ac6466f8217ee4d709f292a91b7" translate="yes" xml:space="preserve">
          <source>Create a new compressor object. This object may be used to compress data incrementally. For one-shot compression, use the &lt;a href=&quot;#bz2.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50a2f594c4bc9a62596dab3264f1ea97d32b35e" translate="yes" xml:space="preserve">
          <source>Create a new debugging server. Arguments are as per &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt;. Messages will be discarded, and printed on stdout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107c463afd211a86731f93ca44238589998727e7" translate="yes" xml:space="preserve">
          <source>Create a new decompressor object. This object may be used to decompress data incrementally. For one-shot compression, use the &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc3a1390a00ad0d736dc99741c6d2a11756e7eb" translate="yes" xml:space="preserve">
          <source>Create a new dictionary with keys from &lt;em&gt;iterable&lt;/em&gt; and values set to &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d1eafaf3dc384e60f6378324a1b7050cb13a72" translate="yes" xml:space="preserve">
          <source>Create a new dictionary. The &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; object is the dictionary class. See &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#typesmapping&quot;&gt;Mapping Types &amp;mdash; dict&lt;/a&gt; for documentation about this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce1136f9926c08236a14e5512833c2ba8e4d2ff" translate="yes" xml:space="preserve">
          <source>Create a new directory at this given path. If &lt;em&gt;mode&lt;/em&gt; is given, it is combined with the process&amp;rsquo; &lt;code&gt;umask&lt;/code&gt; value to determine the file mode and access flags. If the path already exists, &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45892779410726d4ccc7763dd28407e4410d5809" translate="yes" xml:space="preserve">
          <source>Create a new directory in the Directory table. There is a current component at each point in time for the directory, which is either explicitly created through &lt;a href=&quot;#msilib.Directory.start_component&quot;&gt;&lt;code&gt;start_component()&lt;/code&gt;&lt;/a&gt;, or implicitly when files are added for the first time. Files are added into the current component, and into the cab file. To create a directory, a base directory object needs to be specified (can be &lt;code&gt;None&lt;/code&gt;), the path to the physical directory, and a logical directory name. &lt;em&gt;default&lt;/em&gt; specifies the DefaultDir slot in the directory table. &lt;em&gt;componentflags&lt;/em&gt; specifies the default flags that new components get.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e458c6040583c49849ab29ca5d64935f49d71c" translate="yes" xml:space="preserve">
          <source>Create a new directory on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fc6f97257fe42acb7efe4093a6f6068dd2df24" translate="yes" xml:space="preserve">
          <source>Create a new element in the current theme, of the given &lt;em&gt;etype&lt;/em&gt; which is expected to be either &amp;ldquo;image&amp;rdquo;, &amp;ldquo;from&amp;rdquo; or &amp;ldquo;vsapi&amp;rdquo;. The latter is only available in Tk 8.6a for Windows XP and Vista and is not described here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b4c7d302ab7425ace075af5a88a81758bab93f" translate="yes" xml:space="preserve">
          <source>Create a new event loop object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9af4a921f5661ab0399dc78019bad1f5fa0d5fe" translate="yes" xml:space="preserve">
          <source>Create a new event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a850744f8ebde98d4a3452e3a469f8d7614bda62" translate="yes" xml:space="preserve">
          <source>Create a new file editing window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8397905e3265e656e740d6a390f13d785b4bf14" translate="yes" xml:space="preserve">
          <source>Create a new instance to handle XML-RPC requests in a CGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e68c2f8f2f1b8d519396150c379e58fc4cdf821" translate="yes" xml:space="preserve">
          <source>Create a new instance to handle XML-RPC requests in a CGI environment. The &lt;em&gt;allow_none&lt;/em&gt; and &lt;em&gt;encoding&lt;/em&gt; parameters are passed on to &lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;&lt;/a&gt; and control the XML-RPC responses that will be returned from the server. The &lt;em&gt;use_builtin_types&lt;/em&gt; parameter is passed to the &lt;a href=&quot;xmlrpc.client#xmlrpc.client.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt; function and controls which types are processed when date/times values or binary data are received; it defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43da3282eb8a7b758458a50908ead135ba8910d1" translate="yes" xml:space="preserve">
          <source>Create a new module based on &lt;strong&gt;spec&lt;/strong&gt; and &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;spec.loader.create_module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ed377036f5af5234443a930bd08100b53b7b57" translate="yes" xml:space="preserve">
          <source>Create a new option flag with a given name, and return the new flag&amp;rsquo;s integer value. &lt;a href=&quot;#doctest.register_optionflag&quot;&gt;&lt;code&gt;register_optionflag()&lt;/code&gt;&lt;/a&gt; can be used when subclassing &lt;a href=&quot;#doctest.OutputChecker&quot;&gt;&lt;code&gt;OutputChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to create new options that are supported by your subclasses. &lt;a href=&quot;#doctest.register_optionflag&quot;&gt;&lt;code&gt;register_optionflag()&lt;/code&gt;&lt;/a&gt; should always be called using the following idiom:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e1a159bea544b3367b76f95b2ba5ef24a31141" translate="yes" xml:space="preserve">
          <source>Create a new pure proxy server. Arguments are as per &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt;. Everything will be relayed to &lt;em&gt;remoteaddr&lt;/em&gt;, unless local mailman configurations knows about an address, in which case it will be handled via mailman. Note that running this has a good chance to make you into an open relay, so please be careful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6ca8d84032decb34a4769a3dd60e0dc5fc1765" translate="yes" xml:space="preserve">
          <source>Create a new pure proxy server. Arguments are as per &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt;. Everything will be relayed to &lt;em&gt;remoteaddr&lt;/em&gt;. Note that running this has a good chance to make you into an open relay, so please be careful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51582b879a4123590e39df99a60a9e413965b80c" translate="yes" xml:space="preserve">
          <source>Create a new request handler instance. This request handler supports &lt;code&gt;POST&lt;/code&gt; requests and modifies logging so that the &lt;em&gt;logRequests&lt;/em&gt; parameter to the &lt;a href=&quot;#xmlrpc.server.SimpleXMLRPCServer&quot;&gt;&lt;code&gt;SimpleXMLRPCServer&lt;/code&gt;&lt;/a&gt; constructor parameter is honored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7821cba489ca0ede1cbd16611a4fbba82f8eed33" translate="yes" xml:space="preserve">
          <source>Create a new request handler instance. This request handler supports XML-RPC POST requests, documentation GET requests, and modifies logging so that the &lt;em&gt;logRequests&lt;/em&gt; parameter to the &lt;a href=&quot;#xmlrpc.server.DocXMLRPCServer&quot;&gt;&lt;code&gt;DocXMLRPCServer&lt;/code&gt;&lt;/a&gt; constructor parameter is honored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb47d25da5688a13fda5236ac28a2292f8ee4955" translate="yes" xml:space="preserve">
          <source>Create a new server instance. All parameters have the same meaning as for &lt;a href=&quot;#xmlrpc.server.SimpleXMLRPCServer&quot;&gt;&lt;code&gt;SimpleXMLRPCServer&lt;/code&gt;&lt;/a&gt;; &lt;em&gt;requestHandler&lt;/em&gt; defaults to &lt;a href=&quot;#xmlrpc.server.DocXMLRPCRequestHandler&quot;&gt;&lt;code&gt;DocXMLRPCRequestHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794aa954980721c9c1274538646b3f23bb9bd027" translate="yes" xml:space="preserve">
          <source>Create a new server instance. This class provides methods for registration of functions that can be called by the XML-RPC protocol. The &lt;em&gt;requestHandler&lt;/em&gt; parameter should be a factory for request handler instances; it defaults to &lt;a href=&quot;#xmlrpc.server.SimpleXMLRPCRequestHandler&quot;&gt;&lt;code&gt;SimpleXMLRPCRequestHandler&lt;/code&gt;&lt;/a&gt;. The &lt;em&gt;addr&lt;/em&gt; and &lt;em&gt;requestHandler&lt;/em&gt; parameters are passed to the &lt;a href=&quot;socketserver#socketserver.TCPServer&quot;&gt;&lt;code&gt;socketserver.TCPServer&lt;/code&gt;&lt;/a&gt; constructor. If &lt;em&gt;logRequests&lt;/em&gt; is true (the default), requests will be logged; setting this parameter to false will turn off logging. The &lt;em&gt;allow_none&lt;/em&gt; and &lt;em&gt;encoding&lt;/em&gt; parameters are passed on to &lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;&lt;/a&gt; and control the XML-RPC responses that will be returned from the server. The &lt;em&gt;bind_and_activate&lt;/em&gt; parameter controls whether &lt;code&gt;server_bind()&lt;/code&gt; and &lt;code&gt;server_activate()&lt;/code&gt; are called immediately by the constructor; it defaults to true. Setting it to false allows code to manipulate the &lt;em&gt;allow_reuse_address&lt;/em&gt; class variable before the address is bound. The &lt;em&gt;use_builtin_types&lt;/em&gt; parameter is passed to the &lt;a href=&quot;xmlrpc.client#xmlrpc.client.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt; function and controls which types are processed when date/times values or binary data are received; it defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df19d8f33e6438f416f28ce427cb182991fb1028" translate="yes" xml:space="preserve">
          <source>Create a new socket using the given address family, socket type and protocol number. The address family should be &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt; (the default), &lt;a href=&quot;#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.AF_CAN&quot;&gt;&lt;code&gt;AF_CAN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.AF_PACKET&quot;&gt;&lt;code&gt;AF_PACKET&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#socket.AF_RDS&quot;&gt;&lt;code&gt;AF_RDS&lt;/code&gt;&lt;/a&gt;. The socket type should be &lt;a href=&quot;#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt; (the default), &lt;a href=&quot;#socket.SOCK_DGRAM&quot;&gt;&lt;code&gt;SOCK_DGRAM&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.SOCK_RAW&quot;&gt;&lt;code&gt;SOCK_RAW&lt;/code&gt;&lt;/a&gt; or perhaps one of the other &lt;code&gt;SOCK_&lt;/code&gt; constants. The protocol number is usually zero and may be omitted or in the case where the address family is &lt;a href=&quot;#socket.AF_CAN&quot;&gt;&lt;code&gt;AF_CAN&lt;/code&gt;&lt;/a&gt; the protocol should be one of &lt;code&gt;CAN_RAW&lt;/code&gt;, &lt;a href=&quot;#socket.CAN_BCM&quot;&gt;&lt;code&gt;CAN_BCM&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#socket.CAN_ISOTP&quot;&gt;&lt;code&gt;CAN_ISOTP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f7179a9dc2fec0bb131ce366a1832b6657dbfd" translate="yes" xml:space="preserve">
          <source>Create a new theme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56e4c43df9d7224d9203d1036f031a2ddf7c039" translate="yes" xml:space="preserve">
          <source>Create a new zipimporter instance. &lt;em&gt;archivepath&lt;/em&gt; must be a path to a ZIP file, or to a specific path within a ZIP file. For example, an &lt;em&gt;archivepath&lt;/em&gt; of &lt;code&gt;foo/bar.zip/lib&lt;/code&gt; will look for modules in the &lt;code&gt;lib&lt;/code&gt; directory inside the ZIP file &lt;code&gt;foo/bar.zip&lt;/code&gt; (provided that it exists).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9833743f987bdf64604831b0d44d4b8db13aa8" translate="yes" xml:space="preserve">
          <source>Create a parser instance able to parse invalid markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b94a3b33f9f9646de608b0ea4ecb29a2c4b277e" translate="yes" xml:space="preserve">
          <source>Create a pipe with &lt;em&gt;flags&lt;/em&gt; set atomically. &lt;em&gt;flags&lt;/em&gt; can be constructed by ORing together one or more of these values: &lt;a href=&quot;#os.O_NONBLOCK&quot;&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.O_CLOEXEC&quot;&gt;&lt;code&gt;O_CLOEXEC&lt;/code&gt;&lt;/a&gt;. Return a pair of file descriptors &lt;code&gt;(r, w)&lt;/code&gt; usable for reading and writing, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463d86c67d2f5d7e1fe5d106b3a7e1eab2057fcf" translate="yes" xml:space="preserve">
          <source>Create a pipe. Return a pair of file descriptors &lt;code&gt;(r, w)&lt;/code&gt; usable for reading and writing, respectively. The new file descriptor is &lt;a href=&quot;#fd-inheritance&quot;&gt;non-inheritable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cfb7ca2976b35835d5d61b813ba8e89c9da4c3" translate="yes" xml:space="preserve">
          <source>Create a radio button control named &lt;em&gt;name&lt;/em&gt;. &lt;em&gt;property&lt;/em&gt; is the installer property that gets set when a radio button is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c5259d5abfebc547fb4c24dc54fe7fbbf547e2" translate="yes" xml:space="preserve">
          <source>Create a shallow copy of the deque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457623122fcc8ca49017e97651d3041b93a54562" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;#multiprocessing.managers.Namespace&quot;&gt;&lt;code&gt;Namespace&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ed69991cb5db794d17ee06e990708e67685cdd" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;queue#queue.Queue&quot;&gt;&lt;code&gt;queue.Queue&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2806e6a98516283dd3ddaf3257d5ce0f68557fe0" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258218eb11566d5586220283c96f8a860495d12c" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721f6624c0b4d74f808925fc27178baff80e6c17" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.Barrier&quot;&gt;&lt;code&gt;threading.Barrier&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb3c4c4f66efb255af326701acebc5b651849af" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.BoundedSemaphore&quot;&gt;&lt;code&gt;threading.BoundedSemaphore&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff2f570bbff89837e81a5fe1b2b4dcc52c15757" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.Condition&quot;&gt;&lt;code&gt;threading.Condition&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf6b342ea848d24264cf264badb1c472664e6ea" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.Event&quot;&gt;&lt;code&gt;threading.Event&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db6d07fb61f854f6f84bd0e947c50dfba288094" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.Lock&quot;&gt;&lt;code&gt;threading.Lock&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09aa0f83663a54ce81ef239312019539304f158" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.RLock&quot;&gt;&lt;code&gt;threading.RLock&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce00af6126394e9da5a36860c5510b5e17ee52e" translate="yes" xml:space="preserve">
          <source>Create a shared &lt;a href=&quot;threading#threading.Semaphore&quot;&gt;&lt;code&gt;threading.Semaphore&lt;/code&gt;&lt;/a&gt; object and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709f44054bdafc27aba91e21b411c0e33106879f" translate="yes" xml:space="preserve">
          <source>Create a string buffer from a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object. For information on the arguments see the constructor of the &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc38ad8d8b32991432049b26c1690fe6209ccce" translate="yes" xml:space="preserve">
          <source>Create a subprocess from &lt;em&gt;cmd&lt;/em&gt;, which can be a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; string encoded to the &lt;a href=&quot;os#filesystem-encoding&quot;&gt;filesystem encoding&lt;/a&gt;, using the platform&amp;rsquo;s &amp;ldquo;shell&amp;rdquo; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6403b59c6734c0b68a98f8735238c41ba4210c6f" translate="yes" xml:space="preserve">
          <source>Create a subprocess from one or more string arguments specified by &lt;em&gt;args&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f18f065242e857498a083aba1f7d0ea83dcbd77" translate="yes" xml:space="preserve">
          <source>Create a subprocess.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feab62073043c2136a900f3301bcb4317dd394cf" translate="yes" xml:space="preserve">
          <source>Create a symbolic link pointing to &lt;em&gt;src&lt;/em&gt; named &lt;em&gt;dst&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e1a04c9c3d7010dce616a79471a09e83c52ed0" translate="yes" xml:space="preserve">
          <source>Create a tarfile exclusively without compression. Raise an &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; exception if it already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d351aa9c66142cc2ded9ea533bf148d906e6f121" translate="yes" xml:space="preserve">
          <source>Create a tarfile with bzip2 compression. Raise an &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; exception if it already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d470ae9dbe60b39619de81449a0aa752ba776d" translate="yes" xml:space="preserve">
          <source>Create a tarfile with gzip compression. Raise an &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; exception if it already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab6a1f7b2cc3875f828723e9cb16884546a3a07" translate="yes" xml:space="preserve">
          <source>Create a tarfile with lzma compression. Raise an &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; exception if it already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ee6a3b410b3fd2fe20633b3ddde9df86e62383" translate="yes" xml:space="preserve">
          <source>Create a timer that will run &lt;em&gt;function&lt;/em&gt; with arguments &lt;em&gt;args&lt;/em&gt; and keyword arguments &lt;em&gt;kwargs&lt;/em&gt;, after &lt;em&gt;interval&lt;/em&gt; seconds have passed. If &lt;em&gt;args&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (the default) then an empty list will be used. If &lt;em&gt;kwargs&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; (the default) then an empty dict will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab53a9cf2780fee5735b35e38977fb439e6793b2" translate="yes" xml:space="preserve">
          <source>Create a turtle. The turtle has all methods described above as &amp;ldquo;methods of Turtle/RawTurtle&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fc33b29fd3d4689344a95b11d6a36c08961fcb" translate="yes" xml:space="preserve">
          <source>Create a virtual environment by specifying the target directory (absolute or relative to the current directory) which is to contain the virtual environment. The &lt;code&gt;create&lt;/code&gt; method will either create the environment in the specified directory, or raise an appropriate exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aaef98193efdf7d99ca06262e61cc45691b16bb" translate="yes" xml:space="preserve">
          <source>Create a zip package directory with a path of &lt;em&gt;zip_dir&lt;/em&gt; and &lt;em&gt;zip_basename&lt;/em&gt; containing an empty &lt;code&gt;__init__&lt;/code&gt; file and a file &lt;em&gt;script_basename&lt;/em&gt; containing the &lt;em&gt;source&lt;/em&gt;. If &lt;em&gt;compiled&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, both source files will be compiled and added to the zip package. Return a tuple of the full zip path and the archive name for the zip file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6590c65a5dfd95c55084de32b95739e13b11b4e7" translate="yes" xml:space="preserve">
          <source>Create an &lt;a href=&quot;#venv.EnvBuilder&quot;&gt;&lt;code&gt;EnvBuilder&lt;/code&gt;&lt;/a&gt; with the given keyword arguments, and call its &lt;a href=&quot;#venv.EnvBuilder.create&quot;&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/a&gt; method with the &lt;em&gt;env_dir&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc0a887d00e9c4d0f682ff4c1c9719efaab275c" translate="yes" xml:space="preserve">
          <source>Create an &lt;a href=&quot;asyncio-future#asyncio.Future&quot;&gt;&lt;code&gt;asyncio.Future&lt;/code&gt;&lt;/a&gt; object attached to the event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883c09c357ff45d9758baa5f08c52036e6cc0c37" translate="yes" xml:space="preserve">
          <source>Create an AIFF file. The default is that an AIFF-C file is created, unless the name of the file ends in &lt;code&gt;'.aiff'&lt;/code&gt; in which case the default is an AIFF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaeae20795f67ce20985f9b5c70604f5ef02941" translate="yes" xml:space="preserve">
          <source>Create an AIFF-C file. The default is that an AIFF-C file is created, unless the name of the file ends in &lt;code&gt;'.aiff'&lt;/code&gt; in which case the default is an AIFF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85352261daf0bca7db16091c06f128836b5df586" translate="yes" xml:space="preserve">
          <source>Create an HTTP handler for the given &lt;em&gt;request&lt;/em&gt; (i.e. a socket), &lt;em&gt;client_address&lt;/em&gt; (a &lt;code&gt;(host,port)&lt;/code&gt; tuple), and &lt;em&gt;server&lt;/em&gt; (&lt;a href=&quot;#wsgiref.simple_server.WSGIServer&quot;&gt;&lt;code&gt;WSGIServer&lt;/code&gt;&lt;/a&gt; instance).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63633b2a76b8ee4aec9c53f2cbf59eea211d9517" translate="yes" xml:space="preserve">
          <source>Create an alias called &lt;em&gt;name&lt;/em&gt; that executes &lt;em&gt;command&lt;/em&gt;. The command must &lt;em&gt;not&lt;/em&gt; be enclosed in quotes. Replaceable parameters can be indicated by &lt;code&gt;%1&lt;/code&gt;, &lt;code&gt;%2&lt;/code&gt;, and so on, while &lt;code&gt;%*&lt;/code&gt; is replaced by all the parameters. If no command is given, the current alias for &lt;em&gt;name&lt;/em&gt; is shown. If no arguments are given, all aliases are listed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80edcf4a74f46480065954d2c533705f611e6939" translate="yes" xml:space="preserve">
          <source>Create an anonymous file and return a file descriptor that refers to it. &lt;em&gt;flags&lt;/em&gt; must be one of the &lt;code&gt;os.MFD_*&lt;/code&gt; constants available on the system (or a bitwise ORed combination of them). By default, the new file descriptor is &lt;a href=&quot;#fd-inheritance&quot;&gt;non-inheritable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e383cebc6bdc825bd2e3346339a5beda4b89491c" translate="yes" xml:space="preserve">
          <source>Create an application archive from &lt;em&gt;source&lt;/em&gt;. The source can be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859881128adbfdbb6a2a49f591f4382aab7d6519" translate="yes" xml:space="preserve">
          <source>Create an archive file (such as zip or tar) and return its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd42bae6a673724523ffca561e27cc896689cef" translate="yes" xml:space="preserve">
          <source>Create an array and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b9c5aeec471c1de49baad1a1b34fe5fb6b45cc" translate="yes" xml:space="preserve">
          <source>Create an empty Shape object of type &amp;ldquo;compound&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757ea973bf5a2a3473f8f9a74643c2a11d42d7fd" translate="yes" xml:space="preserve">
          <source>Create an empty file with &lt;em&gt;filename&lt;/em&gt;. If it already exists, truncate it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39bf43fd14bc1de197e604b40cf75f5d9e92234" translate="yes" xml:space="preserve">
          <source>Create an epoll object from a given file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33a5119fe11f815f27957641f62dbaab086d084" translate="yes" xml:space="preserve">
          <source>Create an instance of the &lt;a href=&quot;#fileinput.FileInput&quot;&gt;&lt;code&gt;FileInput&lt;/code&gt;&lt;/a&gt; class. The instance will be used as global state for the functions of this module, and is also returned to use during iteration. The parameters to this function will be passed along to the constructor of the &lt;a href=&quot;#fileinput.FileInput&quot;&gt;&lt;code&gt;FileInput&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb590dfe8e760e224b0dab99203eb5305a918b87" translate="yes" xml:space="preserve">
          <source>Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e515bc407050c3ec028fe2ade088895fcf6dcda" translate="yes" xml:space="preserve">
          <source>Create an object that operates like a regular reader but maps the information in each row to a &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; whose keys are given by the optional &lt;em&gt;fieldnames&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb71e831ac0f17aeb925dffcd24c370d8abc0e2f" translate="yes" xml:space="preserve">
          <source>Create an object to trace execution of a single statement or expression. All parameters are optional. &lt;em&gt;count&lt;/em&gt; enables counting of line numbers. &lt;em&gt;trace&lt;/em&gt; enables line execution tracing. &lt;em&gt;countfuncs&lt;/em&gt; enables listing of the functions called during the run. &lt;em&gt;countcallers&lt;/em&gt; enables call relationship tracking. &lt;em&gt;ignoremods&lt;/em&gt; is a list of modules or packages to ignore. &lt;em&gt;ignoredirs&lt;/em&gt; is a list of directories whose modules or packages should be ignored. &lt;em&gt;infile&lt;/em&gt; is the name of the file from which to read stored count information. &lt;em&gt;outfile&lt;/em&gt; is the name of the file in which to write updated count information. &lt;em&gt;timing&lt;/em&gt; enables a timestamp relative to when tracing was started to be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f1a73897cc8d31e8d28c887ab8e63889fa0e55" translate="yes" xml:space="preserve">
          <source>Create an object used to boxcar method calls. &lt;em&gt;server&lt;/em&gt; is the eventual target of the call. Calls can be made to the result object, but they will immediately return &lt;code&gt;None&lt;/code&gt;, and only store the call name and parameters in the &lt;a href=&quot;#xmlrpc.client.MultiCall&quot;&gt;&lt;code&gt;MultiCall&lt;/code&gt;&lt;/a&gt; object. Calling the object itself causes all stored calls to be transmitted as a single &lt;code&gt;system.multicall&lt;/code&gt; request. The result of this call is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;; iterating over this generator yields the individual results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34eff362ab6d86ae03944103804f1c89ad8ee06" translate="yes" xml:space="preserve">
          <source>Create an object which operates like a regular writer but maps dictionaries onto output rows. The &lt;em&gt;fieldnames&lt;/em&gt; parameter is a &lt;a href=&quot;collections.abc#module-collections.abc&quot;&gt;&lt;code&gt;sequence&lt;/code&gt;&lt;/a&gt; of keys that identify the order in which values in the dictionary passed to the &lt;code&gt;writerow()&lt;/code&gt; method are written to file &lt;em&gt;f&lt;/em&gt;. The optional &lt;em&gt;restval&lt;/em&gt; parameter specifies the value to be written if the dictionary is missing a key in &lt;em&gt;fieldnames&lt;/em&gt;. If the dictionary passed to the &lt;code&gt;writerow()&lt;/code&gt; method contains a key not found in &lt;em&gt;fieldnames&lt;/em&gt;, the optional &lt;em&gt;extrasaction&lt;/em&gt; parameter indicates what action to take. If it is set to &lt;code&gt;'raise'&lt;/code&gt;, the default value, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. If it is set to &lt;code&gt;'ignore'&lt;/code&gt;, extra values in the dictionary are ignored. Any other optional or keyword arguments are passed to the underlying &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2efd4188324030b199f78891e840b398e95fcd5a" translate="yes" xml:space="preserve">
          <source>Create an object with a writable &lt;code&gt;value&lt;/code&gt; attribute and return a proxy for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb0d58aa2ef8fa546314feab7f992b2e047e4af" translate="yes" xml:space="preserve">
          <source>Create and return a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object from string buffer &lt;em&gt;buf&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d56a5d6c48f401f03dd938d795f2e33341446ec" translate="yes" xml:space="preserve">
          <source>Create and return a SAX &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; object. The first parser found will be used. If &lt;em&gt;parser_list&lt;/em&gt; is provided, it must be an iterable of strings which name modules that have a function named &lt;code&gt;create_parser()&lt;/code&gt;. Modules listed in &lt;em&gt;parser_list&lt;/em&gt; will be used before modules in the default list of parsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9741a6e1a718acd0239423eda5b831f116a3f7" translate="yes" xml:space="preserve">
          <source>Create and return a clone of the turtle with same position, heading and turtle properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aeb8b59a814b973a010b9253fe668ab95b28de" translate="yes" xml:space="preserve">
          <source>Create and return a comment node containing the data passed as a parameter. As with the other creation methods, this one does not insert the node into the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc4a4815e10a974a5e5917c3d166423eeb82803" translate="yes" xml:space="preserve">
          <source>Create and return a new &lt;a href=&quot;#multiprocessing.managers.SharedMemoryManager.ShareableList&quot;&gt;&lt;code&gt;ShareableList&lt;/code&gt;&lt;/a&gt; object, initialized by the values from the input &lt;code&gt;sequence&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ba9dc2cf3450f0d27a19dffe12c877d8b0605b" translate="yes" xml:space="preserve">
          <source>Create and return a new &lt;a href=&quot;#multiprocessing.managers.SharedMemoryManager.SharedMemory&quot;&gt;&lt;code&gt;SharedMemory&lt;/code&gt;&lt;/a&gt; object with the specified &lt;code&gt;size&lt;/code&gt; in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c8cac0af0876c8cceef31a2e0a21a15761c165f" translate="yes" xml:space="preserve">
          <source>Create and return a new database &lt;em&gt;name&lt;/em&gt;, initialize it with &lt;em&gt;schema&lt;/em&gt;, and set the properties &lt;em&gt;ProductName&lt;/em&gt;, &lt;em&gt;ProductCode&lt;/em&gt;, &lt;em&gt;ProductVersion&lt;/em&gt;, and &lt;em&gt;Manufacturer&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d882e6b8bee9543bb21d4438e388aadac3e3defc" translate="yes" xml:space="preserve">
          <source>Create and return a new element node. The element is not inserted into the document when it is created. You need to explicitly insert it with one of the other methods such as &lt;code&gt;insertBefore()&lt;/code&gt; or &lt;code&gt;appendChild()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7a9a5f77cd493d1162b9afb9adb2ffc858262e" translate="yes" xml:space="preserve">
          <source>Create and return a new element with a namespace. The &lt;em&gt;tagName&lt;/em&gt; may have a prefix. The element is not inserted into the document when it is created. You need to explicitly insert it with one of the other methods such as &lt;code&gt;insertBefore()&lt;/code&gt; or &lt;code&gt;appendChild()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e7722fee598dd6e75be95ae0bc019c2521ba38" translate="yes" xml:space="preserve">
          <source>Create and return a new event loop object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62721f9a1928a2518efac901ac0fddd47a5b3376" translate="yes" xml:space="preserve">
          <source>Create and return a pointer to a new pad data structure with the given number of lines and columns. Return a pad as a window object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e486d09909de16a0ce676aa0e39997165a4913" translate="yes" xml:space="preserve">
          <source>Create and return a processing instruction node containing the &lt;em&gt;target&lt;/em&gt; and &lt;em&gt;data&lt;/em&gt; passed as parameters. As with the other creation methods, this one does not insert the node into the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97de0231ec18ce4f27677e9bc14a19f9093a3986" translate="yes" xml:space="preserve">
          <source>Create and return a text node containing the data passed as a parameter. As with the other creation methods, this one does not insert the node into the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9951e56a71668e3df0cc230b8354b8fb0477036b" translate="yes" xml:space="preserve">
          <source>Create and return an attribute node with a namespace. The &lt;em&gt;tagName&lt;/em&gt; may have a prefix. This method does not associate the attribute node with any particular element. You must use &lt;code&gt;setAttributeNode()&lt;/code&gt; on the appropriate &lt;code&gt;Element&lt;/code&gt; object to use the newly created attribute instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93810c7bcbb2bfd825cd4cd64012df58a9d62e8" translate="yes" xml:space="preserve">
          <source>Create and return an attribute node. This method does not associate the attribute node with any particular element. You must use &lt;code&gt;setAttributeNode()&lt;/code&gt; on the appropriate &lt;code&gt;Element&lt;/code&gt; object to use the newly created attribute instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26c30fc882367a95d0c0db6bd08cd9685baaf3f" translate="yes" xml:space="preserve">
          <source>Create and write docstring-dictionary to a Python script with the given filename. This function has to be called explicitly (it is not used by the turtle graphics classes). The docstring dictionary will be written to the Python script &lt;code&gt;&lt;em&gt;filename&lt;/em&gt;.py&lt;/code&gt;. It is intended to serve as a template for translation of the docstrings into different languages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ad638ab61cf1a30362c511591525c06c0c305f" translate="yes" xml:space="preserve">
          <source>Create event loop, run a coroutine, close the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d570cbf5e9c4848619f6b701586f42573d4746" translate="yes" xml:space="preserve">
          <source>Create new mailbox named &lt;em&gt;mailbox&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c3ae82cba751b46abe3c5b4e541c9ee478df87" translate="yes" xml:space="preserve">
          <source>Create script containing &lt;em&gt;source&lt;/em&gt; in path &lt;em&gt;script_dir&lt;/em&gt; and &lt;em&gt;script_basename&lt;/em&gt;. If &lt;em&gt;omit_suffix&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, append &lt;code&gt;.py&lt;/code&gt; to the name. Return the full script path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf79ea9e089137e28de5ccf7a2428253dc225e3" translate="yes" xml:space="preserve">
          <source>Create tarfile from source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1970731bd27b4a2885b1ed960b8b3e3653522e2d" translate="yes" xml:space="preserve">
          <source>Create the child mocks for attributes and return value. By default child mocks will be the same type as the parent. Subclasses of Mock may want to override this to customize the way child mocks are made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86de5ecea9905e4af23aaa44e245b28b69ec104e" translate="yes" xml:space="preserve">
          <source>Create your application in a directory as normal, so you have a &lt;code&gt;myapp&lt;/code&gt; directory containing a &lt;code&gt;__main__.py&lt;/code&gt; file, and any supporting application code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21a723a84db19bb5a45de71e75fc62ec34737dd" translate="yes" xml:space="preserve">
          <source>Create zip file at &lt;em&gt;zip_dir&lt;/em&gt; and &lt;em&gt;zip_basename&lt;/em&gt; with extension &lt;code&gt;zip&lt;/code&gt; which contains the files in &lt;em&gt;script_name&lt;/em&gt;. &lt;em&gt;name_in_zip&lt;/em&gt; is the archive name. Return a tuple containing &lt;code&gt;(full path, full path of archive name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a72761a9c3636cfee783df25c26860d70f1562" translate="yes" xml:space="preserve">
          <source>Create zipfile from source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a973c9d90c903815e3681d4e7ef05c7f7392e47" translate="yes" xml:space="preserve">
          <source>Creates &lt;a href=&quot;#ctypes.CDLL&quot;&gt;&lt;code&gt;CDLL&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cadc8fe88be6821a8235635a626861f236f671" translate="yes" xml:space="preserve">
          <source>Creates &lt;a href=&quot;#ctypes.PyDLL&quot;&gt;&lt;code&gt;PyDLL&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1ec8162480b599d6da14c68cace9d313a87a07" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#calendar.Calendar&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; object. &lt;em&gt;firstweekday&lt;/em&gt; is an integer specifying the first day of the week. &lt;code&gt;0&lt;/code&gt; is Monday (the default), &lt;code&gt;6&lt;/code&gt; is Sunday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09f7ebae237b81f04f7bf2368aef565fd98bb7b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#codecs.StreamReaderWriter&quot;&gt;&lt;code&gt;StreamReaderWriter&lt;/code&gt;&lt;/a&gt; instance. &lt;em&gt;stream&lt;/em&gt; must be a file-like object. &lt;em&gt;Reader&lt;/em&gt; and &lt;em&gt;Writer&lt;/em&gt; must be factory functions or classes providing the &lt;a href=&quot;#codecs.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#codecs.StreamWriter&quot;&gt;&lt;code&gt;StreamWriter&lt;/code&gt;&lt;/a&gt; interface resp. Error handling is done in the same way as defined for the stream readers and writers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18678b1da48496245822cc529c8e02dafc5ebd5b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;#codecs.StreamRecoder&quot;&gt;&lt;code&gt;StreamRecoder&lt;/code&gt;&lt;/a&gt; instance which implements a two-way conversion: &lt;em&gt;encode&lt;/em&gt; and &lt;em&gt;decode&lt;/em&gt; work on the frontend &amp;mdash; the data visible to code calling &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;write()&lt;/code&gt;, while &lt;em&gt;Reader&lt;/em&gt; and &lt;em&gt;Writer&lt;/em&gt; work on the backend &amp;mdash; the data in &lt;em&gt;stream&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a707327c2f0650b80c7c77466d214f31c68b2f" translate="yes" xml:space="preserve">
          <source>Creates a class object dynamically using the appropriate metaclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c537e2dc75be34d50a81a6be13ece84cbc6b654" translate="yes" xml:space="preserve">
          <source>Creates a collation with the specified &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;callable&lt;/em&gt;. The callable will be passed two string arguments. It should return -1 if the first is ordered lower than the second, 0 if they are ordered equal and 1 if the first is ordered higher than the second. Note that this controls sorting (ORDER BY in SQL) so your comparisons don&amp;rsquo;t affect other SQL operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fcf1226f167b1601a0460e5c3f22c063e3e7f10" translate="yes" xml:space="preserve">
          <source>Creates a comment with the given &lt;em&gt;target&lt;/em&gt; name and &lt;em&gt;text&lt;/em&gt;. If &lt;code&gt;insert_pis&lt;/code&gt; is true, this will also add it to the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a422c97fbf58865dd698ca1bb77dc0efcdb0fd49" translate="yes" xml:space="preserve">
          <source>Creates a comment with the given &lt;em&gt;text&lt;/em&gt;. If &lt;code&gt;insert_comments&lt;/code&gt; is true, this will also add it to the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c035844f2beffa9074333acfcd6bfac7171008a" translate="yes" xml:space="preserve">
          <source>Creates a copy or symlink to the Python executable in the environment. On POSIX systems, if a specific executable &lt;code&gt;python3.x&lt;/code&gt; was used, symlinks to &lt;code&gt;python&lt;/code&gt; and &lt;code&gt;python3&lt;/code&gt; will be created pointing to that executable, unless files with those names already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0dcb47e832d81e5e2c3bd0e2a4b7471ea5779a" translate="yes" xml:space="preserve">
          <source>Creates a new Decimal instance from &lt;em&gt;num&lt;/em&gt; but using &lt;em&gt;self&lt;/em&gt; as context. Unlike the &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; constructor, the context precision, rounding method, flags, and traps are applied to the conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5099e4d4a561f564fd30a1740c6899a861ed6a5" translate="yes" xml:space="preserve">
          <source>Creates a new Decimal instance from a float &lt;em&gt;f&lt;/em&gt; but rounding using &lt;em&gt;self&lt;/em&gt; as the context. Unlike the &lt;a href=&quot;#decimal.Decimal.from_float&quot;&gt;&lt;code&gt;Decimal.from_float()&lt;/code&gt;&lt;/a&gt; class method, the context precision, rounding method, flags, and traps are applied to the conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd7f4344ce2b41499cca3498af11b5cdb61ca47" translate="yes" xml:space="preserve">
          <source>Creates a new context. If a field is not specified or is &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the default values are copied from the &lt;a href=&quot;#decimal.DefaultContext&quot;&gt;&lt;code&gt;DefaultContext&lt;/code&gt;&lt;/a&gt;. If the &lt;em&gt;flags&lt;/em&gt; field is not specified or is &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, all flags are cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c67ef26a46ba5de9ef9123198f80ae657a4343b" translate="yes" xml:space="preserve">
          <source>Creates a new dataclass with name &lt;code&gt;cls_name&lt;/code&gt;, fields as defined in &lt;code&gt;fields&lt;/code&gt;, base classes as given in &lt;code&gt;bases&lt;/code&gt;, and initialized with a namespace as given in &lt;code&gt;namespace&lt;/code&gt;. &lt;code&gt;fields&lt;/code&gt; is an iterable whose elements are each either &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;(name, type)&lt;/code&gt;, or &lt;code&gt;(name, type, Field)&lt;/code&gt;. If just &lt;code&gt;name&lt;/code&gt; is supplied, &lt;code&gt;typing.Any&lt;/code&gt; is used for &lt;code&gt;type&lt;/code&gt;. The values of &lt;code&gt;init&lt;/code&gt;, &lt;code&gt;repr&lt;/code&gt;, &lt;code&gt;eq&lt;/code&gt;, &lt;code&gt;order&lt;/code&gt;, &lt;code&gt;unsafe_hash&lt;/code&gt;, and &lt;code&gt;frozen&lt;/code&gt; have the same meaning as they do in &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece357fa2fa22bd3f09f4d817f7ee0386efe38ae" translate="yes" xml:space="preserve">
          <source>Creates a new element object of the same type as this element. Do not call this method, use the &lt;a href=&quot;#xml.etree.ElementTree.SubElement&quot;&gt;&lt;code&gt;SubElement()&lt;/code&gt;&lt;/a&gt; factory function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafdd7a63bf88f306764002e1446a287964310fc" translate="yes" xml:space="preserve">
          <source>Creates a new frame object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802337a68ec733042ad846c98a94bdb198dd82d1" translate="yes" xml:space="preserve">
          <source>Creates a new item and returns the item identifier of the newly created item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dc1f9b244b00e7064e7694d6c31665e527c130" translate="yes" xml:space="preserve">
          <source>Creates a new object of the same type of &lt;code&gt;instance&lt;/code&gt;, replacing fields with values from &lt;code&gt;changes&lt;/code&gt;. If &lt;code&gt;instance&lt;/code&gt; is not a Data Class, raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. If values in &lt;code&gt;changes&lt;/code&gt; do not specify fields, raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6aef18d8951eec616e7b32d8466d50783a5372" translate="yes" xml:space="preserve">
          <source>Creates a new shared memory block or attaches to an existing shared memory block. Each shared memory block is assigned a unique name. In this way, one process can create a shared memory block with a particular name and a different process can attach to that same shared memory block using that same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec4dcd7327efec87900e691fb335f6dbf0c9d9e2" translate="yes" xml:space="preserve">
          <source>Creates a subkey under the specified key and stores registration information from a specified file into that subkey.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ad71cb038084b49f3d3468a528721e53788ca2" translate="yes" xml:space="preserve">
          <source>Creates a temporary directory in the most secure manner possible. There are no race conditions in the directory&amp;rsquo;s creation. The directory is readable, writable, and searchable only by the creating user ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c708b389646eb124f24c12af39965d67ccd96bac" translate="yes" xml:space="preserve">
          <source>Creates a temporary file in the most secure manner possible. There are no race conditions in the file&amp;rsquo;s creation, assuming that the platform properly implements the &lt;a href=&quot;os#os.O_EXCL&quot;&gt;&lt;code&gt;os.O_EXCL&lt;/code&gt;&lt;/a&gt; flag for &lt;a href=&quot;os#os.open&quot;&gt;&lt;code&gt;os.open()&lt;/code&gt;&lt;/a&gt;. The file is readable and writable only by the creating user ID. If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one. The file descriptor is not inherited by child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593b1e5156596c2eb74789607e8fe4c669e4496d" translate="yes" xml:space="preserve">
          <source>Creates a text iterator. The iterator loops over this element and all subelements, in document order, and returns all inner text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faf82d24b2415b967351c20770a652d60ec3387" translate="yes" xml:space="preserve">
          <source>Creates a tree &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt; with the current element as the root. The iterator iterates over this element and all elements below it, in document (depth first) order. If &lt;em&gt;tag&lt;/em&gt; is not &lt;code&gt;None&lt;/code&gt; or &lt;code&gt;'*'&lt;/code&gt;, only elements whose tag equals &lt;em&gt;tag&lt;/em&gt; are returned from the iterator. If the tree structure is modified during iteration, the result is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf47a8a81ceff0367c236e7dc3008ef670f5f8b1" translate="yes" xml:space="preserve">
          <source>Creates a tuple consuming &lt;em&gt;count&lt;/em&gt; items from the stack, and pushes the resulting tuple onto the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2333e73629710368c4442a191c7a43306ec554" translate="yes" xml:space="preserve">
          <source>Creates a user-defined aggregate function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fcabddfa9f0850705f9870ed96f064e73f9237" translate="yes" xml:space="preserve">
          <source>Creates a user-defined function that you can later use from within SQL statements under the function name &lt;em&gt;name&lt;/em&gt;. &lt;em&gt;num_params&lt;/em&gt; is the number of parameters the function accepts (if &lt;em&gt;num_params&lt;/em&gt; is -1, the function may take any number of arguments), and &lt;em&gt;func&lt;/em&gt; is a Python callable that is called as the SQL function. If &lt;em&gt;deterministic&lt;/em&gt; is true, the created function is marked as &lt;a href=&quot;https://sqlite.org/deterministic.html&quot;&gt;deterministic&lt;/a&gt;, which allows SQLite to perform additional optimizations. This flag is supported by SQLite 3.8.3 or higher, &lt;a href=&quot;#sqlite3.NotSupportedError&quot;&gt;&lt;code&gt;NotSupportedError&lt;/code&gt;&lt;/a&gt; will be raised if used with older versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f1e3b7aca4a879f1f280f12b5090a655e79fd5" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; instance whose attributes are defined by &lt;em&gt;attrdict&lt;/em&gt;. This function is useful for taking a pickled &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; attribute dictionary, sent over a socket, and reconstituting it as a &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; instance at the receiving end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78230608d48ba5f94d90d29da296f971ee9e0fb5" translate="yes" xml:space="preserve">
          <source>Creates and returns a new &lt;code&gt;xmlparser&lt;/code&gt; object. &lt;em&gt;encoding&lt;/em&gt;, if specified, must be a string naming the encoding used by the XML data. Expat doesn&amp;rsquo;t support as many encodings as Python does, and its repertoire of encodings can&amp;rsquo;t be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII. If &lt;em&gt;encoding&lt;/em&gt;&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; is given it will override the implicit or explicit encoding of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcd734a24b3c29f31389307238af7d66f42aa87" translate="yes" xml:space="preserve">
          <source>Creates and returns a tree iterator for the root element. The iterator loops over all elements in this tree, in section order. &lt;em&gt;tag&lt;/em&gt; is the tag to look for (default is to return all elements).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0ec398f194d7df73e8ebe2b8f5528fd951a73f" translate="yes" xml:space="preserve">
          <source>Creates or opens the specified key, returning a &lt;a href=&quot;#handle-object&quot;&gt;handle object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0b9f2173135c3bf2648f868bfb8321beafad08" translate="yes" xml:space="preserve">
          <source>Creates the &lt;code&gt;pyvenv.cfg&lt;/code&gt; configuration file in the environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3c4c606cb7d018aa16099e835f07b76ab2659d" translate="yes" xml:space="preserve">
          <source>Creates the environment directory and all necessary directories, and returns a context object. This is just a holder for attributes (such as paths), for use by the other methods. The directories are allowed to exist already, as long as either &lt;code&gt;clear&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt; were specified to allow operating on an existing environment directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6408ca7b085ba04c8da899564438233953422e1c" translate="yes" xml:space="preserve">
          <source>Creates the module object from the given specification in accordance with &lt;a href=&quot;https://www.python.org/dev/peps/pep-0489&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;PEP 489&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fe01e9549f197db5ac7bfbd57ce76b58688124" translate="yes" xml:space="preserve">
          <source>Creating Futures and Tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ea2c7191327116d8dcf2845fee787289327ab8" translate="yes" xml:space="preserve">
          <source>Creating ST Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8593c1b5ebacb1abc78b5482965259329e83872d" translate="yes" xml:space="preserve">
          <source>Creating Standalone Applications with zipapp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c60512d1af71f06328cb8ec560ebae512224987" translate="yes" xml:space="preserve">
          <source>Creating Subprocesses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600b0c6e27b1e6ab5c7e2608fe2590ffbca362ed" translate="yes" xml:space="preserve">
          <source>Creating Tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec530714da17f053959efe1f14cf75ae6f410060" translate="yes" xml:space="preserve">
          <source>Creating a Mock from an Existing Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9342745fbb028f1950f9ad86faf9fe4b73c467de" translate="yes" xml:space="preserve">
          <source>Creating a compressed file using a custom filter chain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d63a0c4d0cafcbf41e44210824acb4b8fdc3eb4" translate="yes" xml:space="preserve">
          <source>Creating a compressed file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b15afda7857bbbd18f6ac3b491b596162218fb" translate="yes" xml:space="preserve">
          <source>Creating a parser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a536a30fb4d9c541cb92933b3ddec4cb0ccc39e" translate="yes" xml:space="preserve">
          <source>Creating a server requires several steps. First, you must create a request handler class by subclassing the &lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt;&lt;code&gt;BaseRequestHandler&lt;/code&gt;&lt;/a&gt; class and overriding its &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method; this method will process incoming requests. Second, you must instantiate one of the server classes, passing it the server&amp;rsquo;s address and the request handler class. It is recommended to use the server in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. Then call the &lt;a href=&quot;#socketserver.BaseServer.handle_request&quot;&gt;&lt;code&gt;handle_request()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#socketserver.BaseServer.serve_forever&quot;&gt;&lt;code&gt;serve_forever()&lt;/code&gt;&lt;/a&gt; method of the server object to process one or many requests. Finally, call &lt;a href=&quot;#socketserver.BaseServer.server_close&quot;&gt;&lt;code&gt;server_close()&lt;/code&gt;&lt;/a&gt; to close the socket (unless you used a &lt;code&gt;with&lt;/code&gt; statement).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae4f10ec2a37a0bdac70497d5b4ebb0ab277e73" translate="yes" xml:space="preserve">
          <source>Creating a zero-filled instance with a given length: &lt;code&gt;bytearray(10)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d40110fe9c7c5bd061494de58047a362b17253b" translate="yes" xml:space="preserve">
          <source>Creating an Enum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0547d400eb06208e5fb51a779562a883d741b474" translate="yes" xml:space="preserve">
          <source>Creating an empty instance: &lt;code&gt;bytearray()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e149243f4f6a2f828749810fd664ddd0d436b85" translate="yes" xml:space="preserve">
          <source>Creating flags containing &amp;lsquo;]&amp;rsquo; (for example: &amp;ldquo;[test]&amp;rdquo;) violates &lt;a href=&quot;https://tools.ietf.org/html/rfc3501.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 3501&lt;/strong&gt;&lt;/a&gt; (the IMAP protocol). However, imaplib has historically allowed creation of such tags, and popular IMAP servers, such as Gmail, accept and produce such flags. There are non-Python programs which also create such tags. Although it is an RFC violation and IMAP clients and servers are supposed to be strict, imaplib nonetheless continues to allow such tags to be created for backward compatibility reasons, and as of Python 3.6, handles them if they are sent from the server, since this improves real-world compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca726a3344d8b0547315efd6e981976013fee27c" translate="yes" xml:space="preserve">
          <source>Creating hash objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf8537ca59a002406eb2eb214c7931483f26dac" translate="yes" xml:space="preserve">
          <source>Creating network servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb2643bc20a241b4b46a6f1380369b3d6c5b3e9" translate="yes" xml:space="preserve">
          <source>Creating sockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6659ae19d1f99a37e20e4d2139c104fec0eaeb2d" translate="yes" xml:space="preserve">
          <source>Creating virtual environments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e08165208b3d023219861b0b297864607569ff" translate="yes" xml:space="preserve">
          <source>Creation of &lt;a href=&quot;#venv-def&quot;&gt;virtual environments&lt;/a&gt; is done by executing the command &lt;code&gt;venv&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf187d59085e87575aa5a49d9205058f66023e85" translate="yes" xml:space="preserve">
          <source>Creator of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71adb996e089506059fda14c98881007eac50861" translate="yes" xml:space="preserve">
          <source>Creators of third-party virtual environment tools will be free to use the provided &lt;a href=&quot;#venv.EnvBuilder&quot;&gt;&lt;code&gt;EnvBuilder&lt;/code&gt;&lt;/a&gt; class as a base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfac50d6424b5166c3ee2808c85ae7c139b5182f" translate="yes" xml:space="preserve">
          <source>Credits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9547f3f5f0f4979b17acd2bd9d0e386e2c41a4" translate="yes" xml:space="preserve">
          <source>Credits:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca101a12f561a819fd555cb4d75a793fa643e214" translate="yes" xml:space="preserve">
          <source>Critical Stop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137b01bd10dee828e2a721ac78357416796346b2" translate="yes" xml:space="preserve">
          <source>Cross Platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11a34fd71070cf737065d5f1e05ecdae72488b5" translate="yes" xml:space="preserve">
          <source>Cross-device link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eefdcf2193e3df278d11a97e02dfd9806be9d3c" translate="yes" xml:space="preserve">
          <source>Cross-platform applications should not use &lt;em&gt;headers&lt;/em&gt;, &lt;em&gt;trailers&lt;/em&gt; and &lt;em&gt;flags&lt;/em&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bd1078e375e35cfd3eb78560dead181645b508" translate="yes" xml:space="preserve">
          <source>Cryptographic Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b804ec5a0d83d19d8db908572f51196505d09f98" translate="yes" xml:space="preserve">
          <source>Cryptography</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d06e25794c6e07a6571ba100df3f9dae81d3cc" translate="yes" xml:space="preserve">
          <source>Ctrl+Break</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a208bf408f60d2e9f69fec6c5865500dcfb8a4c6" translate="yes" xml:space="preserve">
          <source>Ctrl+C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248c908368cf8fe57b5456c03f90c4b01d59670c" translate="yes" xml:space="preserve">
          <source>Ctrl-C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fc478025c2c96dae12932039b21dc5f7b5bcfa" translate="yes" xml:space="preserve">
          <source>Currency and value are surrounded by parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999e23fab143bc12d8255bbfbb03c4fd2cff58c9" translate="yes" xml:space="preserve">
          <source>Current State of Generators and Coroutines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384ce91d0f2316a7caad05c43ccf6c381a9170f4" translate="yes" xml:space="preserve">
          <source>Current byte index in the parser input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13393d4ecff4cae7c3b77c9a9e31b3e53235ad6" translate="yes" xml:space="preserve">
          <source>Current column number in the parser input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c6beba54b483a6d2c2eb09e9d4a347f1d84969" translate="yes" xml:space="preserve">
          <source>Current line number in the parser input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868e55c2a0bab1319ac67d0e4a467bb0615e8a08" translate="yes" xml:space="preserve">
          <source>Currently &lt;em&gt;dir_fd&lt;/em&gt; parameters only work on Unix platforms; none of them work on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc52c343a19f478a30071221e38a9591821f7638" translate="yes" xml:space="preserve">
          <source>Currently &lt;em&gt;effective_ids&lt;/em&gt; is only supported on Unix platforms; it does not work on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7203faaaabcde5cea86c25bf0710932c4e172f9e" translate="yes" xml:space="preserve">
          <source>Currently only the following control codes are supported: &lt;code&gt;SIO_RCVALL&lt;/code&gt;, &lt;code&gt;SIO_KEEPALIVE_VALS&lt;/code&gt;, and &lt;code&gt;SIO_LOOPBACK_FAST_PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac54a121ed902835a2a84f10a3d58b440de495c1" translate="yes" xml:space="preserve">
          <source>Currently the email package provides only one concrete content manager, &lt;a href=&quot;#email.contentmanager.raw_data_manager&quot;&gt;&lt;code&gt;raw_data_manager&lt;/code&gt;&lt;/a&gt;, although more may be added in the future. &lt;a href=&quot;#email.contentmanager.raw_data_manager&quot;&gt;&lt;code&gt;raw_data_manager&lt;/code&gt;&lt;/a&gt; is the &lt;a href=&quot;email.policy#email.policy.EmailPolicy.content_manager&quot;&gt;&lt;code&gt;content_manager&lt;/code&gt;&lt;/a&gt; provided by &lt;a href=&quot;email.policy#email.policy.EmailPolicy&quot;&gt;&lt;code&gt;EmailPolicy&lt;/code&gt;&lt;/a&gt; and its derivatives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750b52fdbe919afe095c6263859682a8f9fe42d8" translate="yes" xml:space="preserve">
          <source>Currently, &lt;a href=&quot;#threading.Lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#threading.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#threading.Condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#threading.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#threading.BoundedSemaphore&quot;&gt;&lt;code&gt;BoundedSemaphore&lt;/code&gt;&lt;/a&gt; objects may be used as &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement context managers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819f9bdf90cfe83b5554b101c60a8773b6ad054d" translate="yes" xml:space="preserve">
          <source>Currently, on Linux, this feature is usable only on a file descriptor opened using the &lt;a href=&quot;#os.O_DIRECT&quot;&gt;&lt;code&gt;O_DIRECT&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb35e3537ce2ebf7ce2d38646968a4e22807f5" translate="yes" xml:space="preserve">
          <source>Currently, only the following protocols are supported: HTTP (versions 0.9 and 1.0), FTP, local files, and data URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6278a3e1d3e0236874d73ebfbe9c555579d992f" translate="yes" xml:space="preserve">
          <source>Currently, there is only one module in this package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58bb96395ecbf742d2b92f5dadcd7e86b0aeb76a" translate="yes" xml:space="preserve">
          <source>Curses Programming with Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e69a27f6d04903cfdfadbdb944795813debc5c" translate="yes" xml:space="preserve">
          <source>Cursor Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e59159df31ddd293eba182c73cab256bc46da3" translate="yes" xml:space="preserve">
          <source>Cursor down; move down one line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85825683efb9511ad10b0385156ae30a744cf168" translate="yes" xml:space="preserve">
          <source>Cursor left, wrapping to previous line if appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae13c50f5357aa4f0ee40cd988a154a32076e0e" translate="yes" xml:space="preserve">
          <source>Cursor right, wrapping to next line when appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1176dccf409686931a93953a1401df3663e5c69" translate="yes" xml:space="preserve">
          <source>Cursor up; move up one line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb6610e5fe1ba6a9df3dbf15438243872b7bb0f" translate="yes" xml:space="preserve">
          <source>Custom Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e74d0a767a9232df91fedcc41e9b1176ee7b516" translate="yes" xml:space="preserve">
          <source>Custom Policies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228061248fd54515a7ea55c705497183380e142a" translate="yes" xml:space="preserve">
          <source>Custom Python Interpreters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994977a728ae5bdbc692b897b409aa454efb2328" translate="yes" xml:space="preserve">
          <source>Custom Reduction for Types, Functions, and Other Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a7e988348ffe58103560284553d81a51ac5530" translate="yes" xml:space="preserve">
          <source>Custom String Formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b4670369523ea3153c5b88df694d98dd3a6360" translate="yes" xml:space="preserve">
          <source>Custom codecs are made available by registering a suitable codec search function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7962115a35a0b10a82d491c8060a72b33bddcfd" translate="yes" xml:space="preserve">
          <source>Customized managers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00084ddefc70aaede73cb59c3f5a3743756bf02" translate="yes" xml:space="preserve">
          <source>Customizing Parser Behaviour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abb8ee1ad04fa55e16d60e7e1303931d5fc9d94" translate="yes" xml:space="preserve">
          <source>Customizing file parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d13bda5c40afc32d629f81dec6c156cbea328e" translate="yes" xml:space="preserve">
          <source>Cut</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80fff0ad5b076cb98884ae0cfa7132403ecbeca" translate="yes" xml:space="preserve">
          <source>Cyan (light greenish blue)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbd5d39063d3e1750954c573374df2b2ca48c5a" translate="yes" xml:space="preserve">
          <source>Cycle through earlier commands in history which match the current entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f911db3d8ab162a3ab6d0136153018724d3323" translate="yes" xml:space="preserve">
          <source>Cycle through later commands in history which match the current entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7aabd72f583f1c3676c9a097f448408b9df5c09" translate="yes" xml:space="preserve">
          <source>D flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d9afcf4f7484ee45398b6495b53aca0ce3c56c" translate="yes" xml:space="preserve">
          <source>D. Cooper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03acb81c981ad360551d985b6de78f4aaabb2aa2" translate="yes" xml:space="preserve">
          <source>D. Eastlake</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580393f5a94fb469585f5dd2a6859a4aab899f37" translate="yes" xml:space="preserve">
          <source>DATA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db5783186e915a32b0fcd36f51f862fffd4f715" translate="yes" xml:space="preserve">
          <source>DBL_DIG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f104b79d0ffee35579d796675e5e74bfcbf8fe" translate="yes" xml:space="preserve">
          <source>DBL_EPSILON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7862e5cfd60d8316aabe13e084cdc88206519b" translate="yes" xml:space="preserve">
          <source>DBL_MANT_DIG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6475a67334ef4f57e0916f9dd70b592970b787b" translate="yes" xml:space="preserve">
          <source>DBL_MAX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80eda3d3e441ff26ac5459bffef82f4a76f2aee1" translate="yes" xml:space="preserve">
          <source>DBL_MAX_10_EXP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1f026a92c71c6641b3a3e59ca11bec58e74823" translate="yes" xml:space="preserve">
          <source>DBL_MAX_EXP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206a4a7664be2f5d69acc4529b6d09cbefa55c11" translate="yes" xml:space="preserve">
          <source>DBL_MIN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a134d21c33ac09e253ae20a9b1dec8d77b9392cd" translate="yes" xml:space="preserve">
          <source>DBL_MIN_10_EXP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066e8618772f9a6359ecfcc4e2d133e6e51ec5fa" translate="yes" xml:space="preserve">
          <source>DBL_MIN_EXP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c189207a55da45305c884fe2b50e086fcad4724b" translate="yes" xml:space="preserve">
          <source>DEFAULT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddc21b1eaa5ad6e57bb26bc517091c9b2d2e86d" translate="yes" xml:space="preserve">
          <source>DNS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56af9b2924f8d9631be6d78a4a511e0e43bd72d7" translate="yes" xml:space="preserve">
          <source>DOM Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab652a2d0ddd0a2b92f781e964d66202224fb7a" translate="yes" xml:space="preserve">
          <source>DOM Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46ec22aa100d84ed628b77dec9519f52b23a737" translate="yes" xml:space="preserve">
          <source>DOM applications typically start by parsing some XML into a DOM. How this is accomplished is not covered at all by DOM Level 1, and Level 2 provides only limited improvements: There is a &lt;code&gt;DOMImplementation&lt;/code&gt; object class which provides access to &lt;code&gt;Document&lt;/code&gt; creation methods, but no way to access an XML reader/parser/Document builder in an implementation-independent way. There is also no well-defined way to access these methods without an existing &lt;code&gt;Document&lt;/code&gt; object. In Python, each DOM implementation will provide a function &lt;a href=&quot;#xml.dom.getDOMImplementation&quot;&gt;&lt;code&gt;getDOMImplementation()&lt;/code&gt;&lt;/a&gt;. DOM Level 3 adds a Load/Store specification, which defines an interface to the reader, but this is not yet available in the Python standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e88429e63fcd97c0b3f87c17db3e7514e324af" translate="yes" xml:space="preserve">
          <source>DOM applications typically start by parsing some XML into a DOM. With &lt;a href=&quot;#module-xml.dom.minidom&quot;&gt;&lt;code&gt;xml.dom.minidom&lt;/code&gt;&lt;/a&gt;, this is done through the parse functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26265de9a96163fd2d14d5297d95f5351a29ccad" translate="yes" xml:space="preserve">
          <source>DOMEventStream Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0f7947c07f262380101951cfd86a9f09f4c891" translate="yes" xml:space="preserve">
          <source>DOMImplementation Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5302095837291dde34df3a76bdb421d421737a9" translate="yes" xml:space="preserve">
          <source>DST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9661c07d1cb72a92d86ad495089da4f6007cd8" translate="yes" xml:space="preserve">
          <source>DTDHandler Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64bdeebdf728dbc978ad5a046a0c9b6120b0b24" translate="yes" xml:space="preserve">
          <source>DVD quality audio (at 24 bits/sample)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b9d0418084089d5c36ee0ceb399db0cd5f140f" translate="yes" xml:space="preserve">
          <source>Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an &lt;a href=&quot;#threading.Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457f3128affd68b954081dcbd4b2aa2a2a20eaa6" translate="yes" xml:space="preserve">
          <source>Danish, Norwegian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f56eef55f357f4e01e0f7b5b93200b7ccd90e3" translate="yes" xml:space="preserve">
          <source>Data Compression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9387dc0d23a48e846e3022f7fbf24123d741a5" translate="yes" xml:space="preserve">
          <source>Data Compression and Archiving</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13d188b3282dee3affd5deb83976d7618f628a2" translate="yes" xml:space="preserve">
          <source>Data Persistence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18842877f84be9bb3ae10673c4e60242f22c160" translate="yes" xml:space="preserve">
          <source>Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdce52bcfbd44d77d9f1ac305ec9a450d8b0265" translate="yes" xml:space="preserve">
          <source>Data bytes, where &lt;em&gt;n&lt;/em&gt; is the size given in the preceding field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551d8c6b2dfdc0cf14585092b2666ee3e884a803" translate="yes" xml:space="preserve">
          <source>Data can be stored in a shared memory map using &lt;a href=&quot;#multiprocessing.Value&quot;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#multiprocessing.Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. For example, the following code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94b7f7d042cde3dfad2d3107c5bbe7e6b3b6f48" translate="yes" xml:space="preserve">
          <source>Data descriptors have a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__delete__&quot;&gt;&lt;code&gt;__delete__&lt;/code&gt;&lt;/a&gt; method. Examples are properties (defined in Python), getsets, and members. The latter two are defined in C and there are more specific tests available for those types, which is robust across Python implementations. Typically, data descriptors will also have &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;__doc__&lt;/code&gt; attributes (properties, getsets, and members have both of these attributes), but this is not guaranteed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb80a5fa02eb9fabb8b5ec3bca7a518b285bfbc" translate="yes" xml:space="preserve">
          <source>Data found after the end of the compressed stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253b0dadd2c2c3387dc410a628a38426ac562c4c" translate="yes" xml:space="preserve">
          <source>Data stream format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7698c21a77c04beab8c217d4ad0928168961362c" translate="yes" xml:space="preserve">
          <source>Data structure modeling shapes. The pair &lt;code&gt;(type_, data)&lt;/code&gt; must follow this specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37272b684e468b17bdfc19046989c55b3add9d04" translate="yes" xml:space="preserve">
          <source>Data written to the wrapped file is decoded according to the given &lt;em&gt;data_encoding&lt;/em&gt; and then written to the original file as bytes using &lt;em&gt;file_encoding&lt;/em&gt;. Bytes read from the original file are decoded according to &lt;em&gt;file_encoding&lt;/em&gt;, and the result is encoded using &lt;em&gt;data_encoding&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7185f8b7584b24736c1f3fd8af9f20a87ee1df3" translate="yes" xml:space="preserve">
          <source>Data-link escape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8d454440ceaba53323f609952689f2d6c9785b" translate="yes" xml:space="preserve">
          <source>DataHandler Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3accf5ce92002fbddee4014f7a9e1d6811c296c0" translate="yes" xml:space="preserve">
          <source>Database Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68573cce3cf441a7cb67baa00ea39551c4e4d47e" translate="yes" xml:space="preserve">
          <source>Datagram Protocol instances should be constructed by protocol factories passed to the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt;&lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7143f849339f3bd6d1aed38799e65030801e3501" translate="yes" xml:space="preserve">
          <source>Datagram Protocol instances should be constructed by protocol factories passed to the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_shell&quot;&gt;&lt;code&gt;loop.subprocess_shell()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c42ac5cbe7594cf4a4b67dfcb589cbbdab654b" translate="yes" xml:space="preserve">
          <source>Datagram Protocols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb9422a6c51ffa5c41cb71edb326765ad36ed2f" translate="yes" xml:space="preserve">
          <source>Datagram Transports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20ca43efcda9e484c7fdf91cf120822281d334f" translate="yes" xml:space="preserve">
          <source>DatagramHandler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda13a894ef029e19136018edad144112deead30" translate="yes" xml:space="preserve">
          <source>Date and time objects may be categorized as &amp;ldquo;aware&amp;rdquo; or &amp;ldquo;naive.&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e84487f03bdf4f4b6fc7acc2715528bf1e91350" translate="yes" xml:space="preserve">
          <source>Date of last change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f9a2ef51f212c4347eec6b60ef4c964d8c4b92" translate="yes" xml:space="preserve">
          <source>DateHeader</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d5fba36aea6207940bbf8850816379d5645bcb" translate="yes" xml:space="preserve">
          <source>DateTime Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75de246b6b5843af317ccf697ed61b29ab814e81" translate="yes" xml:space="preserve">
          <source>Day of month (one-based)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132c2320be0655c7221b45185f2547bcd42d8db0" translate="yes" xml:space="preserve">
          <source>Day of the month as a decimal number [01,31].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190cb93cda58407ebcba90e95285096020f3cccb" translate="yes" xml:space="preserve">
          <source>Day of the month as a zero-padded decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b517546eb8b5fa413be2223efc36cd26437580" translate="yes" xml:space="preserve">
          <source>Day of the year as a decimal number [001,366].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6343a6dddfee36cd5e8e43f114f0ae9aa2515d" translate="yes" xml:space="preserve">
          <source>Day of the year as a zero-padded decimal number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bb0f468a8569c67b3d6826e57e62c5500c3681" translate="yes" xml:space="preserve">
          <source>Days</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899c4489d26098fc2122a1578e400e0671140bf8" translate="yes" xml:space="preserve">
          <source>De-initialize the library, and return terminal to normal status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ba19c458fb441c289d08645d30a4cf6cd72525" translate="yes" xml:space="preserve">
          <source>Deadlocks can occur when the callable associated with a &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; waits on the results of another &lt;a href=&quot;#concurrent.futures.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c083af7b5668ed424a691c18119e1aa24da7ae0b" translate="yes" xml:space="preserve">
          <source>Debug Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137a3485cd3cbbc3aa7d27689215ea2ba2f05815" translate="yes" xml:space="preserve">
          <source>Debug a single function call, and return its result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9689dadd092524a9586368c461a3228b335cda32" translate="yes" xml:space="preserve">
          <source>Debug a statement executed via the &lt;a href=&quot;functions#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; function. &lt;em&gt;globals&lt;/em&gt; defaults to &lt;code&gt;__main__.__dict__&lt;/code&gt;, &lt;em&gt;locals&lt;/em&gt; defaults to &lt;em&gt;globals&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0731a9345e0a468b099a34f96cc42b8f958bf08" translate="yes" xml:space="preserve">
          <source>Debug an expression executed via the &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; function. &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt; have the same meaning as in &lt;a href=&quot;#bdb.Bdb.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517d8a0badbc322c605e7127af6fa447a7baf921" translate="yes" xml:space="preserve">
          <source>Debug menu (Shell window only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52778fd17502f184229617c8b031ff767e4cf343" translate="yes" xml:space="preserve">
          <source>Debug the doctests for an object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32ea767bc19e8ccdbbdfcd3d144c1fc415238c2" translate="yes" xml:space="preserve">
          <source>Debug the doctests in a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3550af095fe67df26b7ace5cb67805af77d777" translate="yes" xml:space="preserve">
          <source>Debugger (toggle)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4333709c02ad553298735787840db205447e4bf6" translate="yes" xml:space="preserve">
          <source>Debugger Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d97ac348c8a50a0f4eafe6caf6d1846a5fef28" translate="yes" xml:space="preserve">
          <source>Debugging &amp;amp; Profiling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8df8e229aa52ea72d921b6ac1ac19fcf82b9db1" translate="yes" xml:space="preserve">
          <source>Debugging CGI scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca4e0a9a76f072025fd52394c5f20cf851e2352" translate="yes" xml:space="preserve">
          <source>Debugging and Profiling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d992c1a565e2ce780d0082579fac88f197d9a7a" translate="yes" xml:space="preserve">
          <source>DebuggingServer Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44ec70cee30b8a7ee9016439ad258e98982bfe5" translate="yes" xml:space="preserve">
          <source>Decimal &amp;ldquo;is based on a floating-point model which was designed with people in mind, and necessarily has a paramount guiding principle &amp;ndash; computers must provide an arithmetic that works in the same way as the arithmetic that people learn at school.&amp;rdquo; &amp;ndash; excerpt from the decimal arithmetic specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49823779b86bed3c051d71ccda94cd41867b934b" translate="yes" xml:space="preserve">
          <source>Decimal FAQ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0651b2882dbb9272d181f70c07d1807e1f7962" translate="yes" xml:space="preserve">
          <source>Decimal Integer. Outputs the number in base 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a93e0df0ca407c3e8f8eb9f547dd912306e56d" translate="yes" xml:space="preserve">
          <source>Decimal and Fraction values are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9dd6e7d2833f5d16c667d4dfdd716ed7ff9a065" translate="yes" xml:space="preserve">
          <source>Decimal floating point objects share many properties with the other built-in numeric types such as &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;. All of the usual math operations and special methods apply. Likewise, decimal objects can be copied, pickled, printed, used as dictionary keys, used as set elements, compared, sorted, and coerced to another type (such as &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9700cf9869bcca6f2a66340a8bc08dd16fc43283" translate="yes" xml:space="preserve">
          <source>Decimal instances can be constructed from integers, strings, floats, or tuples. Construction from an integer or a float performs an exact conversion of the value of that integer or float. Decimal numbers include special values such as &lt;code&gt;NaN&lt;/code&gt; which stands for &amp;ldquo;Not a number&amp;rdquo;, positive and negative &lt;code&gt;Infinity&lt;/code&gt;, and &lt;code&gt;-0&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf86fc1862023f016e2a313d2a0ed7d9d4d20da" translate="yes" xml:space="preserve">
          <source>Decimal numbers can be represented exactly. In contrast, numbers like &lt;code&gt;1.1&lt;/code&gt; and &lt;code&gt;2.2&lt;/code&gt; do not have exact representations in binary floating point. End users typically would not expect &lt;code&gt;1.1 + 2.2&lt;/code&gt; to display as &lt;code&gt;3.3000000000000003&lt;/code&gt; as it does with binary floating point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9538655f01a883cddb679cd53ac3cddc1c61cb" translate="yes" xml:space="preserve">
          <source>Decimal objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8d8e26030245f096e2e10d8c4e07ff8a5166bf" translate="yes" xml:space="preserve">
          <source>Decimal objects cannot generally be combined with floats or instances of &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt; in arithmetic operations: an attempt to add a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, for example, will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. However, it is possible to use Python&amp;rsquo;s comparison operators to compare a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instance &lt;code&gt;x&lt;/code&gt; with another number &lt;code&gt;y&lt;/code&gt;. This avoids confusing results when doing equality comparisons between numbers of different types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d9113821e345e551a0dfa25cf4e54728bc9e01" translate="yes" xml:space="preserve">
          <source>Decimal point character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f68fdd773882168e6d6483c079803a69ad5a654" translate="yes" xml:space="preserve">
          <source>Decimal point used for monetary values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d8e560cd7e98e9768fdff1f5b8eb86620d728c" translate="yes" xml:space="preserve">
          <source>Decimals and Fractions are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128dbe62271da9d5167ac8b5618c7abc48f02507" translate="yes" xml:space="preserve">
          <source>Decimals interact well with much of the rest of Python. Here is a small decimal floating point flying circus:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c7b95050dc9df5dd568c19bc5d1607a216d2f7" translate="yes" xml:space="preserve">
          <source>Declares &lt;em&gt;object&lt;/em&gt; to be a valid constructor. If &lt;em&gt;object&lt;/em&gt; is not callable (and hence not valid as a constructor), raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2781c23d66e2123586d184c8643b8be50c0fb14e" translate="yes" xml:space="preserve">
          <source>Declares that &lt;em&gt;function&lt;/em&gt; should be used as a &amp;ldquo;reduction&amp;rdquo; function for objects of type &lt;em&gt;type&lt;/em&gt;. &lt;em&gt;function&lt;/em&gt; should return either a string or a tuple containing two or three elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d20c552082dc789b051e856c670f5348be8820c" translate="yes" xml:space="preserve">
          <source>Decode &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;s&lt;/em&gt; using the URL- and filesystem-safe alphabet, which substitutes &lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; instead of &lt;code&gt;/&lt;/code&gt; in the standard Base64 alphabet, and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc99cab9d9274a999dd723e31d51478427ed29ab" translate="yes" xml:space="preserve">
          <source>Decode &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;s&lt;/em&gt; using the standard Base64 alphabet and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b524bf84c153a24eb16391393e5ab8dbd48d51" translate="yes" xml:space="preserve">
          <source>Decode a JSON document from &lt;em&gt;s&lt;/em&gt; (a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; beginning with a JSON document) and return a 2-tuple of the Python representation and the index in &lt;em&gt;s&lt;/em&gt; where the document ended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0f585a996643f0255e4a91a99a6df556841c39" translate="yes" xml:space="preserve">
          <source>Decode a binhex file &lt;em&gt;input&lt;/em&gt;. &lt;em&gt;input&lt;/em&gt; may be a filename or a file-like object supporting &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;close()&lt;/code&gt; methods. The resulting file is written to a file named &lt;em&gt;output&lt;/em&gt;, unless the argument is &lt;code&gt;None&lt;/code&gt; in which case the output filename is read from the binhex file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5e09e5872693e7fa924274baa672368a666df9" translate="yes" xml:space="preserve">
          <source>Decode a header value, un-escaping any escaped non-ASCII characters. &lt;em&gt;header_str&lt;/em&gt; must be a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object. The unescaped value is returned. Using this function is recommended to display some headers in a human readable form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2ce13834c4904153a371f1da9b711dea90ce8f" translate="yes" xml:space="preserve">
          <source>Decode a message header value without converting the character set. The header value is in &lt;em&gt;header&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498b7cddd4079c913b46db99c985c528052b02d5" translate="yes" xml:space="preserve">
          <source>Decode an Intel/DVI ADPCM coded fragment to a linear fragment. See the description of &lt;a href=&quot;#audioop.lin2adpcm&quot;&gt;&lt;code&gt;lin2adpcm()&lt;/code&gt;&lt;/a&gt; for details on ADPCM coding. Return a tuple &lt;code&gt;(sample, newstate)&lt;/code&gt; where the sample has the width specified in &lt;em&gt;width&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd93dc0e3b06e1547ee79351024319289ed92c8" translate="yes" xml:space="preserve">
          <source>Decode parameters list according to &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;. &lt;em&gt;params&lt;/em&gt; is a sequence of 2-tuples containing elements of the form &lt;code&gt;(content-type, string-value)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390e9d49347a2467b6586c7f997e0653a77888e5" translate="yes" xml:space="preserve">
          <source>Decode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;&lt;em&gt;s&lt;/em&gt;, which must contain one or more lines of base64 encoded data, and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16bd8518e3fb679daa407f129ab4c2a5bc78a1f" translate="yes" xml:space="preserve">
          <source>Decode the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like&lt;/a&gt;&lt;em&gt;filename&lt;/em&gt; from the filesystem encoding with &lt;code&gt;'surrogateescape'&lt;/code&gt; error handler, or &lt;code&gt;'strict'&lt;/code&gt; on Windows; return &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c92d18f8eb7ca47b94fb5442d206b929331970" translate="yes" xml:space="preserve">
          <source>Decode the Ascii85 encoded &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;b&lt;/em&gt; and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f325414a936c3027bf31de3b8d048b45c4ebd995" translate="yes" xml:space="preserve">
          <source>Decode the Base16 encoded &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;s&lt;/em&gt; and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb13c9e18c542d75878492c9380004656473bdfb" translate="yes" xml:space="preserve">
          <source>Decode the Base32 encoded &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;s&lt;/em&gt; and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e1a50b13569de8180b0e8087902961c745c6c1" translate="yes" xml:space="preserve">
          <source>Decode the Base64 encoded &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;s&lt;/em&gt; and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0942a4e367e2b662880626f1b4403d1868ad3a8d" translate="yes" xml:space="preserve">
          <source>Decode the base85-encoded &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or ASCII string &lt;em&gt;b&lt;/em&gt; and return the decoded &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;. Padding is implicitly removed, if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca9bd5bcb0ba9806f96ed2a28c9f423bef40827" translate="yes" xml:space="preserve">
          <source>Decode the contents of the &lt;em&gt;input&lt;/em&gt; file and write the resulting decoded binary data to the &lt;em&gt;output&lt;/em&gt; file. &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; must be &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;binary file objects&lt;/a&gt;. If the optional argument &lt;em&gt;header&lt;/em&gt; is present and true, underscore will be decoded as space. This is used to decode &amp;ldquo;Q&amp;rdquo;-encoded headers as described in &lt;a href=&quot;https://tools.ietf.org/html/rfc1522.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 1522&lt;/strong&gt;&lt;/a&gt;: &amp;ldquo;MIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Text&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fab8bf2e19a85486eee48753ff19a1c2c4718e" translate="yes" xml:space="preserve">
          <source>Decode the contents of the binary &lt;em&gt;input&lt;/em&gt; file and write the resulting binary data to the &lt;em&gt;output&lt;/em&gt; file. &lt;em&gt;input&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; must be &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt;. &lt;em&gt;input&lt;/em&gt; will be read until &lt;code&gt;input.readline()&lt;/code&gt; returns an empty bytes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a1fef02d3918eafc45f8c4c1bd576e1ff38862" translate="yes" xml:space="preserve">
          <source>Decode the given bytes representing source code and return it as a string with universal newlines (as required by &lt;a href=&quot;#importlib.abc.InspectLoader.get_source&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader.get_source()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ca502306dfdc9512bf5605600bfce7bb1dbf29" translate="yes" xml:space="preserve">
          <source>Decode the string &lt;em&gt;s&lt;/em&gt; according to &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ebbc9af3f201a9b1e54b8b1f1306ce8c675b43" translate="yes" xml:space="preserve">
          <source>Decodes &lt;em&gt;obj&lt;/em&gt; using the codec registered for &lt;em&gt;encoding&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2ed4036af51fec69b03d502523969b86866f26" translate="yes" xml:space="preserve">
          <source>Decodes &lt;em&gt;object&lt;/em&gt; (taking the current state of the decoder into account) and returns the resulting decoded object. If this is the last call to &lt;a href=&quot;#codecs.decode&quot;&gt;&lt;code&gt;decode()&lt;/code&gt;&lt;/a&gt;&lt;em&gt;final&lt;/em&gt; must be true (the default is false). If &lt;em&gt;final&lt;/em&gt; is true the decoder must decode the input completely and must flush all buffers. If this isn&amp;rsquo;t possible (e.g. because of incomplete byte sequences at the end of the input) it must initiate error handling just like in the stateless case (which might raise an exception).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdce5f841e0bd2dc9c2e529e5eb71ab722b75622" translate="yes" xml:space="preserve">
          <source>Decodes data from the stream and returns the resulting object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7cf616738fe68e1261e3de8486c70f0c31480e" translate="yes" xml:space="preserve">
          <source>Decodes the object &lt;em&gt;input&lt;/em&gt; and returns a tuple (output object, length consumed). For instance, for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encoding&lt;/a&gt;, decoding converts a bytes object encoded using a particular character set encoding to a string object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76620382b3e17bb5bc5e64123e8b3bbd4e3e55b0" translate="yes" xml:space="preserve">
          <source>Decoding JSON:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1a2f66c748567e20d7ce3d7d71da0c775bb227" translate="yes" xml:space="preserve">
          <source>Decoding and translating works similarly, except &lt;a href=&quot;exceptions#UnicodeDecodeError&quot;&gt;&lt;code&gt;UnicodeDecodeError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#UnicodeTranslateError&quot;&gt;&lt;code&gt;UnicodeTranslateError&lt;/code&gt;&lt;/a&gt; will be passed to the handler and that the replacement from the error handler will be put into the output directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692cf4511280a68fadcae77cef01c9262e5799a9" translate="yes" xml:space="preserve">
          <source>Decompress &lt;em&gt;data&lt;/em&gt; (a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;), returning uncompressed data as bytes. Some of &lt;em&gt;data&lt;/em&gt; may be buffered internally, for use in later calls to &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt;. The returned data should be concatenated with the output of any previous calls to &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d7bce83a0fea863064cdcf711cd78f9c0dc788" translate="yes" xml:space="preserve">
          <source>Decompress &lt;em&gt;data&lt;/em&gt; (a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;), returning uncompressed data as bytes. Some of &lt;em&gt;data&lt;/em&gt; may be buffered internally, for use in later calls to &lt;a href=&quot;#lzma.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt;. The returned data should be concatenated with the output of any previous calls to &lt;a href=&quot;#lzma.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c775d0a6079567f3baa62a60a6c822e6dcd43c" translate="yes" xml:space="preserve">
          <source>Decompress &lt;em&gt;data&lt;/em&gt; (a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object), returning the uncompressed data as a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da576ee1e0c932037d3d531a73d21148aee2e48" translate="yes" xml:space="preserve">
          <source>Decompress &lt;em&gt;data&lt;/em&gt;, a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4057a87f0deed46ee4ff3a267d2b81b24bfba2" translate="yes" xml:space="preserve">
          <source>Decompress &lt;em&gt;data&lt;/em&gt;, returning a bytes object containing the uncompressed data corresponding to at least part of the data in &lt;em&gt;string&lt;/em&gt;. This data should be concatenated to the output produced by any preceding calls to the &lt;a href=&quot;#zlib.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; method. Some of the input data may be preserved in internal buffers for later processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a800170b9be59477ea33fbd6279ba29aff073b34" translate="yes" xml:space="preserve">
          <source>Decompress the &lt;em&gt;data&lt;/em&gt;, returning a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object containing the uncompressed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d8b3c647a931cc9fb1fe119d4f05118d7f3618" translate="yes" xml:space="preserve">
          <source>Decompress the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c238b6d4b1fcee32519032c715c50dc496f15beb" translate="yes" xml:space="preserve">
          <source>Decompresses the bytes in &lt;em&gt;data&lt;/em&gt;, returning a bytes object containing the uncompressed data. The &lt;em&gt;wbits&lt;/em&gt; parameter depends on the format of &lt;em&gt;data&lt;/em&gt;, and is discussed further below. If &lt;em&gt;bufsize&lt;/em&gt; is given, it is used as the initial size of the output buffer. Raises the &lt;a href=&quot;#zlib.error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; exception if any error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1c9242bc45098297245508e9ccf7106094a5d4" translate="yes" xml:space="preserve">
          <source>Decompression bombs (aka &lt;a href=&quot;https://en.wikipedia.org/wiki/Zip_bomb&quot;&gt;ZIP bomb&lt;/a&gt;) apply to all XML libraries that can parse compressed XML streams such as gzipped HTTP streams or LZMA-compressed files. For an attacker it can reduce the amount of transmitted data by three magnitudes or more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc14b702f4cac8d649c9db574b76ee3e23085979" translate="yes" xml:space="preserve">
          <source>Decompression may fail due to incorrect password / CRC checksum / ZIP format or unsupported compression method / decryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba8a0ac83f6b1dacea0dfe8350f6834dc4910ec" translate="yes" xml:space="preserve">
          <source>Decompression objects support the following methods and attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c3557a6b53faee90d0c03e9082a2bde1bb3303" translate="yes" xml:space="preserve">
          <source>Decompression pitfalls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545e999638cd10e13b828758bc689f51e6c5f0d2" translate="yes" xml:space="preserve">
          <source>Decorator for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; methods to detect recursive calls within the same thread. If a recursive call is made, the &lt;em&gt;fillvalue&lt;/em&gt; is returned, otherwise, the usual &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; call is made. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8bc42f6d29349e69cb2af1ac4bbd92e9673ab6" translate="yes" xml:space="preserve">
          <source>Decorator for bigmem tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096493258f64444932bb778fe7bc77fd37fffb56" translate="yes" xml:space="preserve">
          <source>Decorator for invoking &lt;a href=&quot;#test.support.check_impl_detail&quot;&gt;&lt;code&gt;check_impl_detail()&lt;/code&gt;&lt;/a&gt; on &lt;em&gt;guards&lt;/em&gt;. If that returns &lt;code&gt;False&lt;/code&gt;, then uses &lt;em&gt;msg&lt;/em&gt; as the reason for skipping the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fabcb08809e90486d32e8ed9bd1f01a09268200" translate="yes" xml:space="preserve">
          <source>Decorator for only running the test if &lt;a href=&quot;#test.support.HAVE_DOCSTRINGS&quot;&gt;&lt;code&gt;HAVE_DOCSTRINGS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c868869401d1122f13090a2589509283e2e0144" translate="yes" xml:space="preserve">
          <source>Decorator for skipping tests if &lt;a href=&quot;bz2#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6e691ecb2562a3ca715f0701c87b63fc74a0b8" translate="yes" xml:space="preserve">
          <source>Decorator for skipping tests if &lt;a href=&quot;gzip#module-gzip&quot;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79faa901c5b2908d24d5ba6ca76006dc49809589" translate="yes" xml:space="preserve">
          <source>Decorator for skipping tests if &lt;a href=&quot;lzma#module-lzma&quot;&gt;&lt;code&gt;lzma&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805573c56f8e13c5d8f586b30efff8a16390c835" translate="yes" xml:space="preserve">
          <source>Decorator for skipping tests if &lt;a href=&quot;zlib#module-zlib&quot;&gt;&lt;code&gt;zlib&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07bca70314181adbd2f0fd857def5329190077e" translate="yes" xml:space="preserve">
          <source>Decorator for skipping tests if &lt;em&gt;resource&lt;/em&gt; is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e2b573c60846dabb3686c063d20c876a2721ce" translate="yes" xml:space="preserve">
          <source>Decorator for skipping tests on non-IEEE 754 platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a193a1ae9dea9fb1879ac672ccbd5401ae38ef5e" translate="yes" xml:space="preserve">
          <source>Decorator for tests only applicable to CPython.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135363ab82c4ef2ae9b7205257fcc6688ce5ebc5" translate="yes" xml:space="preserve">
          <source>Decorator for tests that fill the address space. &lt;em&gt;f&lt;/em&gt; is the function to wrap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2042d7437fb5b1c934af634af8332f9015d146a" translate="yes" xml:space="preserve">
          <source>Decorator for tests which involve reference counting. The decorator does not run the test if it is not run by CPython. Any trace function is unset for the duration of the test to prevent unexpected refcounts caused by the trace function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e6c0369b1e432a2ebcb5db1cd04d1139acd0eb" translate="yes" xml:space="preserve">
          <source>Decorator for the minimum version when running test on FreeBSD. If the FreeBSD version is less than the minimum, raise &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5838add49cd97fbc866c68329ad3f12538100bb4" translate="yes" xml:space="preserve">
          <source>Decorator for the minimum version when running test on Linux. If the Linux version is less than the minimum, raise &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83366cf0f17908d7ede0acd6d6dc3792abf895ab" translate="yes" xml:space="preserve">
          <source>Decorator for the minimum version when running test on Mac OS X. If the MAC OS X version is less than the minimum, raise &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6f27110e103e710d8d98376bba98b7d55a740b" translate="yes" xml:space="preserve">
          <source>Decorator to ensure the threads are cleaned up even if the test fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1bf3b979e7a5356e18c1ad4f1836575c3d0bd3" translate="yes" xml:space="preserve">
          <source>Decorator to give another decorator the &lt;a href=&quot;#typing.no_type_check&quot;&gt;&lt;code&gt;no_type_check()&lt;/code&gt;&lt;/a&gt; effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7be331e1b74974a50aecc7bfaeabbb3fc54d7dc" translate="yes" xml:space="preserve">
          <source>Decorator to indicate that annotations are not type hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1335f836e6afd17b7020d7f652273650d5e1ce1d" translate="yes" xml:space="preserve">
          <source>Decorator to mark a class or function to be unavailable at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc82f13d0f6877c0b6cf9a52437a8b3090cbcc42" translate="yes" xml:space="preserve">
          <source>Decorator to mark generator-based coroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ad697862e233ae9dff647c0c1c3ed7a1accda2" translate="yes" xml:space="preserve">
          <source>Decorator to temporarily turn off tracing for the duration of the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db99ff9039dc9fddad0a6d18c35fdf3f6bbb9be" translate="yes" xml:space="preserve">
          <source>Decorator to wrap a function with a memoizing callable that saves up to the &lt;em&gt;maxsize&lt;/em&gt; most recent calls. It can save time when an expensive or I/O bound function is periodically called with the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5c8aa627d6965d15cb925cbd7410a6c8f04c47" translate="yes" xml:space="preserve">
          <source>Decrements interval timer both when the process executes and when the system is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space. SIGPROF is delivered upon expiration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c000a500bb440558af7f349649cbe971de2b4869" translate="yes" xml:space="preserve">
          <source>Decrements interval timer in real time, and delivers &lt;code&gt;SIGALRM&lt;/code&gt; upon expiration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc7ba99f1a0d189863ca96a1c1cea58f7083738" translate="yes" xml:space="preserve">
          <source>Decrements interval timer only when the process is executing, and delivers SIGVTALRM upon expiration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4476d148401868f439a25de87ef0ae4260df1a0" translate="yes" xml:space="preserve">
          <source>Dedent Region</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cd4cb2fa04c7854cb91acbc81cc1f6083b4b32" translate="yes" xml:space="preserve">
          <source>Default Warning Filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057fef098df15e9831c9ca9dcec4deab22896bb1" translate="yes" xml:space="preserve">
          <source>Default adapters and converters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185d77c4fd4bf032fac05eec29ac0bc61185a966" translate="yes" xml:space="preserve">
          <source>Default behaviors of extraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778aa12ea067344438bc0e2c6332c2135bb25a57" translate="yes" xml:space="preserve">
          <source>Default exception handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a4bb534480f83e8b8fbcf9ba409e4caf2b7fa1" translate="yes" xml:space="preserve">
          <source>Default factory functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77d1f418f5358aabf10aa3fea717622396172b4" translate="yes" xml:space="preserve">
          <source>Default loader. This default loader reads an included resource from disk. &lt;em&gt;href&lt;/em&gt; is a URL. &lt;em&gt;parse&lt;/em&gt; is for parse mode either &amp;ldquo;xml&amp;rdquo; or &amp;ldquo;text&amp;rdquo;. &lt;em&gt;encoding&lt;/em&gt; is an optional text encoding. If not given, encoding is &lt;code&gt;utf-8&lt;/code&gt;. Returns the expanded resource. If the parse mode is &lt;code&gt;&quot;xml&quot;&lt;/code&gt;, this is an ElementTree instance. If the parse mode is &amp;ldquo;text&amp;rdquo;, this is a Unicode string. If the loader fails, it can return None or raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdffe654f8554300a98d2acefcbbf1d894339b2b" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf2f496db4eb63a42c31436c7de6e1229ed6a51" translate="yes" xml:space="preserve">
          <source>Default value for the &lt;em&gt;bufsize&lt;/em&gt; parameter to &lt;a href=&quot;#xml.dom.pulldom.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47b4370543f517070e70dec2e50f85dc0154a4c" translate="yes" xml:space="preserve">
          <source>Default values are available in both types of ConfigParsers. They are used in interpolation if an option used is not defined elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369c787e0e724f1c5efa565cb4ab539c834e280c" translate="yes" xml:space="preserve">
          <source>DefaultCookiePolicy Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172993b66a880de76be7d699052ca39e362ac239" translate="yes" xml:space="preserve">
          <source>Deferred translations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60bbd8b15f9223343ad07c25c990740c614d530" translate="yes" xml:space="preserve">
          <source>Define a &lt;code&gt;__test__&lt;/code&gt; dictionary mapping from regression test topics to docstrings containing test cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eda6a5961ee3a84aa46eb6baeb9b1c02a017e56" translate="yes" xml:space="preserve">
          <source>Define functions named &lt;code&gt;_regrtest_topic&lt;/code&gt; that consist of single docstrings, containing test cases for the named topics. These functions can be included in the same file as the module, or separated out into a separate test file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea4c81be540a9da7d64fcb6c25f2d35c8309048" translate="yes" xml:space="preserve">
          <source>Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b36d089bb454ef92e58941187bcbdb61d46e44" translate="yes" xml:space="preserve">
          <source>Define match test with regular expression &lt;em&gt;patterns&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f94588cb9670eb86d73c4e4d9b2333421493530" translate="yes" xml:space="preserve">
          <source>Define the URL of a dedicated HTTP server for the network tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c2b143830fcaf777cfdee18dacdcfcc64ec420" translate="yes" xml:space="preserve">
          <source>Define the widget layout for given &lt;em&gt;style&lt;/em&gt;. If &lt;em&gt;layoutspec&lt;/em&gt; is omitted, return the layout specification for given style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6045e2c26c56c903d7e2ab5a2f5d225f208a09" translate="yes" xml:space="preserve">
          <source>Defined like this, our finalizer only receives a reference to the details it needs to clean up the directory appropriately. If the object never gets garbage collected the finalizer will still be called at exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89b0f5d661fb39c0905eb48c845854bd4058f21" translate="yes" xml:space="preserve">
          <source>Defining Python Source Code Encodings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c784fb18cb112dc6111aaf9127837dc05da82f" translate="yes" xml:space="preserve">
          <source>Definition of the ESMTP extensions for SMTP. This describes a framework for extending SMTP with new commands, supporting dynamic discovery of the commands provided by the server, and defines a few additional commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abebdc144df7d1db7a98601665a531cac8cc603e" translate="yes" xml:space="preserve">
          <source>Definition of the Telnet protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec73c176c2e515568f82c38932bc44330580acb" translate="yes" xml:space="preserve">
          <source>Definitions of the interfaces for application-provided objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906e3cc71e8782d8f6980afaa7d57548513e2139" translate="yes" xml:space="preserve">
          <source>Definitions of the interfaces for parser-provided objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717e1e93af998b335fd32baac11eb4efe3ff656a" translate="yes" xml:space="preserve">
          <source>Del</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95ca6b1e60a56a8ad724ca1f1fc71c4985291dc" translate="yes" xml:space="preserve">
          <source>Delete &lt;em&gt;name&lt;/em&gt; from &lt;code&gt;sys.modules&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff6a4ef075ceed17e4d12ec3888acfdcb28f67d" translate="yes" xml:space="preserve">
          <source>Delete all breakpoints in &lt;em&gt;filename&lt;/em&gt;. If none were set, an error message is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acee5491f5cd24865d8190483f7a3f1f9e0bd70" translate="yes" xml:space="preserve">
          <source>Delete all drawings and all turtles from the TurtleScreen. Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549f67313c55764dbcfec3da88a0a8ab10cdc2aa" translate="yes" xml:space="preserve">
          <source>Delete all existing breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2587dd32431162fca7bd4bafc2d34f2260e1f9e" translate="yes" xml:space="preserve">
          <source>Delete all messages from the mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc218852ed28f6675e6895342c899cb0bd861f9" translate="yes" xml:space="preserve">
          <source>Delete all occurrences of the field with name &lt;em&gt;name&lt;/em&gt; from the message&amp;rsquo;s headers. No exception is raised if the named field isn&amp;rsquo;t present in the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66a270d4d285c2399857fc58fd9ccd0634650a1" translate="yes" xml:space="preserve">
          <source>Delete all or first/last &lt;em&gt;n&lt;/em&gt; of turtle&amp;rsquo;s stamps. If &lt;em&gt;n&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, delete all stamps, if &lt;em&gt;n&lt;/em&gt; &amp;gt; 0 delete first &lt;em&gt;n&lt;/em&gt; stamps, else if &lt;em&gt;n&lt;/em&gt; &amp;lt; 0 delete last &lt;em&gt;n&lt;/em&gt; stamps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147e6a8f4429d571a02a990e066e1d1948c6ba5d" translate="yes" xml:space="preserve">
          <source>Delete all specified &lt;em&gt;items&lt;/em&gt; and all their descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1474fe3e496a2c20af227b9fc087caaf3bf55c68" translate="yes" xml:space="preserve">
          <source>Delete an entire directory tree; &lt;em&gt;path&lt;/em&gt; must point to a directory (but not a symbolic link to a directory). If &lt;em&gt;ignore_errors&lt;/em&gt; is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by &lt;em&gt;onerror&lt;/em&gt; or, if that is omitted, they raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7326bc4a0c7b767543583047c99aa879c32d0de5" translate="yes" xml:space="preserve">
          <source>Delete any character at &lt;code&gt;(y, x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85df5f045630c419669a61e69ca04fd700e28a50" translate="yes" xml:space="preserve">
          <source>Delete character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c11ada55f8e494da61f06fe587b747ca26f4e86" translate="yes" xml:space="preserve">
          <source>Delete character backward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacbbcd1bb35ce07d863ec2d6b171e290375eacd" translate="yes" xml:space="preserve">
          <source>Delete character under cursor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2204bf1a2e991344359cd37788f2ceb9a934f306" translate="yes" xml:space="preserve">
          <source>Delete line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09fccb975a4a1651e835b5b86dd4063bc40a0b1" translate="yes" xml:space="preserve">
          <source>Delete old mailbox named &lt;em&gt;mailbox&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0619464801de6291709fb7a4e3d0de1945d74a" translate="yes" xml:space="preserve">
          <source>Delete stamp with given &lt;em&gt;stampid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6eb7760fa500864486d6559bd27e91df45f931" translate="yes" xml:space="preserve">
          <source>Delete temporary files from the mailbox that have not been accessed in the last 36 hours. The Maildir specification says that mail-reading programs should do this occasionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8770b58a118d856f450bf5556c817f1599daa133" translate="yes" xml:space="preserve">
          <source>Delete the ACLs (remove any rights) set for who on mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b11446a1841071f303418f8a2c1e7fb6253d0e7" translate="yes" xml:space="preserve">
          <source>Delete the breakpoint from the list associated to a file/line. If it is the last breakpoint in that position, it also deletes the entry for the file/line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f165bc4eb7986aadd9bbd9aaefbfaf7390700b" translate="yes" xml:space="preserve">
          <source>Delete the breakpoint which has the index &lt;em&gt;arg&lt;/em&gt; in the &lt;code&gt;Breakpoint.bpbynumber&lt;/code&gt;. If &lt;em&gt;arg&lt;/em&gt; is not numeric or out of range, return an error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8541deb90d9a8fa35d989341359af1442a326b0" translate="yes" xml:space="preserve">
          <source>Delete the breakpoints in &lt;em&gt;filename&lt;/em&gt; and &lt;em&gt;lineno&lt;/em&gt;. If none were set, an error message is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cd7ae9a0d4f0026a3c317401c769bc48b4b420" translate="yes" xml:space="preserve">
          <source>Delete the dialect associated with &lt;em&gt;name&lt;/em&gt; from the dialect registry. An &lt;a href=&quot;#csv.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; is raised if &lt;em&gt;name&lt;/em&gt; is not a registered dialect name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848b2477328672a9c74416c437402547066bf5b5" translate="yes" xml:space="preserve">
          <source>Delete the folder whose name is &lt;em&gt;folder&lt;/em&gt;. If the folder contains any messages, a &lt;a href=&quot;#mailbox.NotEmptyError&quot;&gt;&lt;code&gt;NotEmptyError&lt;/code&gt;&lt;/a&gt; exception will be raised and the folder will not be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f796448eac0396b5b1f376564361fb4d7018676f" translate="yes" xml:space="preserve">
          <source>Delete the line under the cursor. All following lines are moved up by one line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9979b8f6f138079efdc2661af2b48dd760cfc8c" translate="yes" xml:space="preserve">
          <source>Delete the message corresponding to &lt;em&gt;key&lt;/em&gt; from the mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea600260cd7af79d4aee0bb4d2278a076c6597aa" translate="yes" xml:space="preserve">
          <source>Delete the specified alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6857d02c0b24abbecf8ef457cd7b735662640664" translate="yes" xml:space="preserve">
          <source>Delete the turtle&amp;rsquo;s drawings from the screen, re-center the turtle and set variables to the default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f649ca5ec1f69ca18120c136d84c125eb8889d" translate="yes" xml:space="preserve">
          <source>Delete the turtle&amp;rsquo;s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441bda6cd85689e476ebe10440f27967faef61a6" translate="yes" xml:space="preserve">
          <source>Deleted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e9fa99f32d7621f21dc129184c6640c0b16d91" translate="yes" xml:space="preserve">
          <source>Deletes local &lt;code&gt;co_varnames[var_num]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9267275048a056d902a6da3fa15f7db151060c97" translate="yes" xml:space="preserve">
          <source>Deletes the specified key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f8844bae8bd55127c4ac95276aea0b91480eba" translate="yes" xml:space="preserve">
          <source>Deleting Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211df313c017620eee1d734a6d01e783775c8cc1" translate="yes" xml:space="preserve">
          <source>Delimiters are substrings that delimit keys from values within a section. The first occurrence of a delimiting substring on a line is considered a delimiter. This means values (but not keys) can contain the delimiters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205552af5ab9396b4f14c95252d648261a142fd8" translate="yes" xml:space="preserve">
          <source>Delta Encoding in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc3229.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 3229&lt;/strong&gt;&lt;/a&gt;, Section 10.4.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54209250ea466b3ac6e3cd6d969bbd1028721be1" translate="yes" xml:space="preserve">
          <source>Delta divided by a float or an int. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaa74c99f2c83d110ca549fef74f9508fb3f012" translate="yes" xml:space="preserve">
          <source>Delta filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9d918a5c3326201cc0e22458af66ffc82de789" translate="yes" xml:space="preserve">
          <source>Delta multiplied by a float. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cc9b62a6f161630a09882805cff2805ee08d18" translate="yes" xml:space="preserve">
          <source>Delta multiplied by an integer. Afterwards &lt;em&gt;t1&lt;/em&gt; // i == &lt;em&gt;t2&lt;/em&gt; is true, provided &lt;code&gt;i != 0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c86385ea5933be6b5b72e65e770b7f2dbbf2ff" translate="yes" xml:space="preserve">
          <source>Demonstration of how to create and use customized managers and proxies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c01bf54e9021829de83ea2874cf556377d6fe22" translate="yes" xml:space="preserve">
          <source>Denominator of the Fraction in lowest term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62d48cd5e7e87ddbaa0e8566284d3830f450bb5" translate="yes" xml:space="preserve">
          <source>Depending on support from the underlying platform, &lt;a href=&quot;#uuid.uuid1&quot;&gt;&lt;code&gt;uuid1()&lt;/code&gt;&lt;/a&gt; may or may not return a &amp;ldquo;safe&amp;rdquo; UUID. A safe UUID is one which is generated using synchronization methods that ensure no two processes can obtain the same UUID. All instances of &lt;a href=&quot;#uuid.UUID&quot;&gt;&lt;code&gt;UUID&lt;/code&gt;&lt;/a&gt; have an &lt;code&gt;is_safe&lt;/code&gt; attribute which relays any information about the UUID&amp;rsquo;s safety, using this enumeration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c050c028400a94c1446e9a6cfa0c4ee04a5f6d65" translate="yes" xml:space="preserve">
          <source>Depending on the platform, &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; supports three ways to start a process. These &lt;em&gt;start methods&lt;/em&gt; are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cf15bacad0a211c13711b3d24f93f74c14e14d" translate="yes" xml:space="preserve">
          <source>Depending on the system and the build options, various socket families are supported by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d951e3cb45b47dcb3ec034ee234726edb5f8edb" translate="yes" xml:space="preserve">
          <source>Depending upon the host platform, it may not be possible to modify or remove the underlying message while the returned file remains open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f6eab398864d51f687052960de9787d2c92ec0" translate="yes" xml:space="preserve">
          <source>Depending upon the host platform, it may not be possible to remove the underlying message while the returned file remains open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab179bc486e5c004a4657775193b74ebd75d617" translate="yes" xml:space="preserve">
          <source>Deprecated alias</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2835e7cefcfcbed26d901fb8b49abddee36049ea" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;a href=&quot;#array.array.frombytes&quot;&gt;&lt;code&gt;frombytes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0e4cb37188e464c1e14ae4605448f61efa6ea4" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;a href=&quot;#array.array.tobytes&quot;&gt;&lt;code&gt;tobytes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d2554f1460c07216e3d9f64c7edf4faed87320" translate="yes" xml:space="preserve">
          <source>Deprecated alias of &lt;a href=&quot;#base64.decodebytes&quot;&gt;&lt;code&gt;decodebytes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564f45f5a61b3f934e441174cf4a3a952619dc98" translate="yes" xml:space="preserve">
          <source>Deprecated alias of &lt;a href=&quot;#base64.encodebytes&quot;&gt;&lt;code&gt;encodebytes()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95a836648ff668bd7f9e0c6a8119c364012b4fd" translate="yes" xml:space="preserve">
          <source>Deprecated aliases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99d8c991cd513034f34c49fa1e35d9633064451" translate="yes" xml:space="preserve">
          <source>Deprecated and no longer used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799eaaec016727a3d180eaab1a649fb7f1f8aae9" translate="yes" xml:space="preserve">
          <source>Deprecated functions and variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7faf6c9496733cc1d3b5e6034eb1f1224f4197" translate="yes" xml:space="preserve">
          <source>Deprecated since version 2.3: Use &lt;a href=&quot;#tempfile.mkstemp&quot;&gt;&lt;code&gt;mkstemp()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f21b1d6a02b2c4bad29892c953c680d09530ce" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.0: The keyword argument &lt;em&gt;buffering&lt;/em&gt; was deprecated and is now ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4b057016b11e9c4036da02683dd5b72946232b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.0: Use &lt;a href=&quot;#inspect.getfullargspec&quot;&gt;&lt;code&gt;getfullargspec()&lt;/code&gt;&lt;/a&gt; for an updated API that is usually a drop-in replacement, but also correctly handles function annotations and keyword-only parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ada7324191481343b692ad7b46ce0a129f59759" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1, will be removed in version 3.9: &lt;em&gt;encoding&lt;/em&gt; keyword argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b938448f171e0bd9989924ee3f01f1b39a7d8b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c624dd05c124388b42e656d888b38c4674cc22ce" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.1: The fail* aliases listed in the second column have been deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aeba15114a0a7c00064bdf90c1724fbddf874b5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2, will be removed in version 3.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f50d61869717bb73106aba07c05578df67bc731" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2, will be removed in version 3.9: Use &lt;code&gt;list(elem)&lt;/code&gt; or iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab01960b8658fc244db4a84f3a25c3352e1dba6c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2, will be removed in version 3.9: Use method &lt;a href=&quot;#xml.etree.ElementTree.Element.iter&quot;&gt;&lt;code&gt;Element.iter()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be97e23f7350c63426d0c162eee7d08471b0f71" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2, will be removed in version 3.9: Use method &lt;a href=&quot;#xml.etree.ElementTree.ElementTree.iter&quot;&gt;&lt;code&gt;ElementTree.iter()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76798d5d4e9421ef465ad2d40ea1dad3f005f8d5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01db9c5e5a4b32b82fa0792a8b6a1a35ef6608fe" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2: &lt;code&gt;assertRegexpMatches&lt;/code&gt; and &lt;code&gt;assertRaisesRegexp&lt;/code&gt; have been renamed to &lt;a href=&quot;#unittest.TestCase.assertRegex&quot;&gt;&lt;code&gt;assertRegex()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;assertRaisesRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e3f43fa3eb6ecec563b32a7b34b01b9e082b88" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2: The assert* aliases listed in the third column have been deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7320796b0e4c1c82c62c7eb5c9c92d4e002f078" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2: This function doesn&amp;rsquo;t have an effect anymore, as the internal logic for thread switching and asynchronous tasks has been rewritten. Use &lt;a href=&quot;#sys.setswitchinterval&quot;&gt;&lt;code&gt;setswitchinterval()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ea7e0b8457b8c0ebc160230a6c38db1fc4dc64" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2: Use &lt;a href=&quot;#configparser.ConfigParser.read_file&quot;&gt;&lt;code&gt;read_file()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da41c4d829fc67723e7f436157bda7f4e07820f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.2: Use &lt;a href=&quot;#sys.getswitchinterval&quot;&gt;&lt;code&gt;getswitchinterval()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b09ce1136372df206d92b996c55e49cc1bbca1f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3, will be removed in version 3.9: Moved &lt;a href=&quot;collections.abc#collections-abstract-base-classes&quot;&gt;Collections Abstract Base Classes&lt;/a&gt; to the &lt;a href=&quot;collections.abc#module-collections.abc&quot;&gt;&lt;code&gt;collections.abc&lt;/code&gt;&lt;/a&gt; module. For backwards compatibility, they continue to be visible in this module through Python 3.8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61acfbdcccc29d17e89c565e861a238bd69cae1e" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3, will be removed in version 4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1346e90cbd772f632b1403794f01611bf1ac132b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c15601d676a51cc5bc958186da86dfd8df54a2d" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: It is now possible to use &lt;a href=&quot;functions#classmethod&quot;&gt;&lt;code&gt;classmethod&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt;, making this decorator redundant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085afade981ba7c8baaee40beb9844958cd56e20" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: It is now possible to use &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;property.getter()&lt;/code&gt;, &lt;code&gt;property.setter()&lt;/code&gt; and &lt;code&gt;property.deleter()&lt;/code&gt; with &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt;, making this decorator redundant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4d03d15ebe1a4f922b6017cd6515356da136f9" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: It is now possible to use &lt;a href=&quot;functions#staticmethod&quot;&gt;&lt;code&gt;staticmethod&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt;, making this decorator redundant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9fabd8eebe3bbd0e01eaa10610bc52e2f2e287" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: The XPATH extension is not actively used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736ba607086c475678fee5f1b2bb9746706da5df" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: This defect has not been used for several Python versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9b582416cdb7149e2c1a16c437f54b48cb29a4" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: This emulation is no longer needed, as the standard import mechanism is now fully &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; compliant and available in &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c558312178ae4bb12d8130cdb766150ae45224e6" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: This emulation is no longer needed, as the standard import mechanism is now fully &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; compliant and available in &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73f52e998ad74940763a30ad1aa8a200d61a04a" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: This method is deprecated in favour of &lt;a href=&quot;#importlib.abc.SourceLoader.path_stats&quot;&gt;&lt;code&gt;path_stats()&lt;/code&gt;&lt;/a&gt;. You don&amp;rsquo;t have to implement it, but it is still available for compatibility purposes. Raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; if the path cannot be handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74b0dd6dbc851a9eb1ebc319ff086caa5388aeb" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.3: Use &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;MetaPathFinder&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#importlib.abc.PathEntryFinder&quot;&gt;&lt;code&gt;PathEntryFinder&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9089a40a25e938a6119f77a61f30df13edd0fde7" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4, will be removed in version 3.8: MD5 as implicit default digest for &lt;em&gt;digestmod&lt;/em&gt; is deprecated. The digestmod parameter is now required. Pass it as a keyword argument to avoid awkwardness when you do not have an initial msg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e4a7cc6f09243af95abd5c41b4004b39868c3b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4, will be removed in version 3.9: The &lt;code&gt;'U'&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1b8b06bf8775eed5f53e527b983d58ea720649" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287cee6e561cc79881bb24e1af0062e59df24460" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The &lt;code&gt;'rU'&lt;/code&gt; and &lt;code&gt;'U'&lt;/code&gt; modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14998cd3d2bed9107dc480db11bb1dbefcc1bd01" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The &lt;em&gt;flags&lt;/em&gt; parameter. &lt;code&gt;select.EPOLL_CLOEXEC&lt;/code&gt; is used by default now. Use &lt;a href=&quot;os#os.set_inheritable&quot;&gt;&lt;code&gt;os.set_inheritable()&lt;/code&gt;&lt;/a&gt; to make the file descriptor inheritable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381f7b037b8c90ae5510aafb8004ae434524e417" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The &lt;em&gt;parser&lt;/em&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a624af820cb57e1c4496f04046addd584e2d630" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The import machinery now directly performs all the functionality provided by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1166e855e465780bce253ff9205b93fb051713ad" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The import machinery now takes care of this automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382d9e9d91fa3f875c2eb77af14efc1d1080143f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The import machinery takes care of this automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17636620506bf9bf738af12c60acbef8903f5574" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: The recommended API for loading a module is &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; (and &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;create_module()&lt;/code&gt;&lt;/a&gt;). Loaders should implement it instead of load_module(). The import machinery takes care of all the other responsibilities of load_module() when exec_module() is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91927bee4790604abe4c6f5a7b5a10ccc05098ab" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;Loader.exec_module()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c636f5c156baead079cf95666633ac9b1c5a96a3" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2be82346a09b898bc3d42513dac14014aeda207" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#importlib.abc.PathEntryFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988227245542b8e31def91303c73298baf8f0b83" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#importlib.abc.SourceLoader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0173d929a7857a2746d0f2036adba7f9bedbd0cd" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#importlib.machinery.PathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4dd021721c75b49fc27570848a2768b00331b4" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#importlib.util.find_spec&quot;&gt;&lt;code&gt;importlib.util.find_spec()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0cbaa031b043495c40420442fd5bed1ed000a5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#plistlib.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786980a76bc7d6785d0ecbe77298059732569324" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#plistlib.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9ad583548e494fece50a4764726fbff728c023" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#plistlib.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03666e5a2d26372c0b78fb64b3a8bd9029a13619" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use &lt;a href=&quot;#plistlib.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234202d7f2969e0d7027c63638bbf59a1fff488f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: Use a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4970a53732ce02252de36dc173af7b49dca33f4f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.4: use &lt;a href=&quot;#importlib.abc.InspectLoader.exec_module&quot;&gt;&lt;code&gt;exec_module()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aceb5d55e9849671f87b1e13ac353a91c5a5e5cb" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.5: The &lt;code&gt;assertNotRegexpMatches&lt;/code&gt; name is deprecated in favor of &lt;a href=&quot;#unittest.TestCase.assertNotRegex&quot;&gt;&lt;code&gt;assertNotRegex()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0669cec5f49ffba936805a788af99ffbe18d3117" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.5: Use &lt;a href=&quot;#importlib.machinery.BYTECODE_SUFFIXES&quot;&gt;&lt;code&gt;BYTECODE_SUFFIXES&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d0ad4daf0cdbc156c9b38d41a6c1b14f76509f" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.5: Use &lt;a href=&quot;#inspect.Signature.bind&quot;&gt;&lt;code&gt;Signature.bind()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt;&lt;code&gt;Signature.bind_partial()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1da922ada6276afc5dbf8a7f8abbc0de529d78c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.5: Use &lt;a href=&quot;#inspect.signature&quot;&gt;&lt;code&gt;signature()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect-signature-object&quot;&gt;Signature Object&lt;/a&gt;, which provide a better introspecting API for callables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd2f3afeb4f5c519a0271bf0ed8f7626da8b313" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.5: Use &lt;a href=&quot;math#math.gcd&quot;&gt;&lt;code&gt;math.gcd()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8817ca22fc48ab92a268b057c6511db0c68b0e" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: &lt;code&gt;pyvenv&lt;/code&gt; was the recommended tool for creating virtual environments for Python 3.3 and 3.4, and is &lt;a href=&quot;https://docs.python.org/dev/whatsnew/3.6.html#deprecated-features&quot;&gt;deprecated in Python 3.6&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cee7b49dd29ce4db072de7d7ef71e13e74a30c" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: &lt;em&gt;cafile&lt;/em&gt;, &lt;em&gt;capath&lt;/em&gt; and &lt;em&gt;cadefault&lt;/em&gt; are deprecated in favor of &lt;em&gt;context&lt;/em&gt;. Please use &lt;a href=&quot;ssl#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;ssl.SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt; instead, or let &lt;a href=&quot;ssl#ssl.create_default_context&quot;&gt;&lt;code&gt;ssl.create_default_context()&lt;/code&gt;&lt;/a&gt; select the system&amp;rsquo;s trusted CA certificates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d757d676b2a5f60658df2d3fb47624c9d7e88971" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: &lt;em&gt;key_file&lt;/em&gt; and &lt;em&gt;cert_file&lt;/em&gt; are deprecated in favor of &lt;em&gt;context&lt;/em&gt;. Please use &lt;a href=&quot;ssl#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;ssl.SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt; instead, or let &lt;a href=&quot;ssl#ssl.create_default_context&quot;&gt;&lt;code&gt;ssl.create_default_context()&lt;/code&gt;&lt;/a&gt; select the system&amp;rsquo;s trusted CA certificates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060f6bc0af14b9ea217e31a0d85a4644c1297034" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: &lt;em&gt;keyfile&lt;/em&gt; and &lt;em&gt;certfile&lt;/em&gt; are deprecated in favor of &lt;em&gt;context&lt;/em&gt;. Please use &lt;a href=&quot;ssl#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;ssl.SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt; instead, or let &lt;a href=&quot;ssl#ssl.create_default_context&quot;&gt;&lt;code&gt;ssl.create_default_context()&lt;/code&gt;&lt;/a&gt; select the system&amp;rsquo;s trusted CA certificates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f904ca46233f7b8ae94490dda1475eb1f5676785" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: &lt;em&gt;keyfile&lt;/em&gt; and &lt;em&gt;certfile&lt;/em&gt; are deprecated in favor of &lt;em&gt;ssl_context&lt;/em&gt;. Please use &lt;a href=&quot;ssl#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;ssl.SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt; instead, or let &lt;a href=&quot;ssl#ssl.create_default_context&quot;&gt;&lt;code&gt;ssl.create_default_context()&lt;/code&gt;&lt;/a&gt; select the system&amp;rsquo;s trusted CA certificates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24fbf454818f89b62ba88f1672cd87e1f8e6765" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: It is deprecated to create a &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; instance directly, use &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt; to wrap a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9629994f7a0e7420329732afeaf70bab925a56ab" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: OpenSSL has deprecated &lt;a href=&quot;#ssl.RAND_pseudo_bytes&quot;&gt;&lt;code&gt;ssl.RAND_pseudo_bytes()&lt;/code&gt;&lt;/a&gt;, use &lt;a href=&quot;#ssl.RAND_bytes&quot;&gt;&lt;code&gt;ssl.RAND_bytes()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b4477fd218367a651c6e702b79288baee0cea0" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default protocol &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt; with flags like &lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt;&lt;code&gt;OP_NO_SSLv3&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb989f1505185ea44bb318046b673b43408f7809" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: OpenSSL has removed support for SSLv2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126446480a25c51863d6c68e1cf0e66729c8b122" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Please use &lt;a href=&quot;asyncio#module-asyncio&quot;&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45f84c4e7f83dd2c740c770ef5e8e6265dc89e5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: SSLv2 is deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26733caddeac611aa4d0a566bf4d58cc32265ef" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: SSLv3 is deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba58f46d8d3dec37e0a6b788b1b4d4884ea635af" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Since Python 3.6 the support of non-integer arguments like floats or strings in &lt;a href=&quot;#grp.getgrgid&quot;&gt;&lt;code&gt;getgrgid()&lt;/code&gt;&lt;/a&gt; is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe754c1013f049c0ee7412c5ba1f919946218a8" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: This Tk extension is unmaintained and should not be used in new code. Use &lt;a href=&quot;tkinter.ttk#module-tkinter.ttk&quot;&gt;&lt;code&gt;tkinter.ttk&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2c5c56469eb8e952827ac138fed738e9f8b418" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Use &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;importlib.abc.Loader.exec_module()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6532cf226ed2ef1895fcff8acd53617656c03b2e" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Use &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89fa6d56efb2fa19dadef48ec718aa6ad05c080" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Use &lt;a href=&quot;site#module-site&quot;&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt; configuration instead. Future versions of Python may not enable this finder by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae21a3fed559f2e20f4a527fc1a540d61bfefdfd" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Use &lt;code&gt;recv()&lt;/code&gt; instead of &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ed6b01ee2aec4efa6b0ae5aaca19851d05f0ff" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.6: Use &lt;code&gt;send()&lt;/code&gt; instead of &lt;a href=&quot;#ssl.SSLSocket.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ce4f1501d3223138b47c7b69d9439e6ecc57e0" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7, will be removed in version 3.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83317a5cfbf7263a2d73d2f0eedda8706b22fcce" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7, will be removed in version 3.9: Do not call this as a task method. Use the &lt;a href=&quot;#asyncio.all_tasks&quot;&gt;&lt;code&gt;asyncio.all_tasks()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3f8b4671b07cd119aea378bd907b83bb7882a5" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7, will be removed in version 3.9: Do not call this as a task method. Use the &lt;a href=&quot;#asyncio.current_task&quot;&gt;&lt;code&gt;asyncio.current_task()&lt;/code&gt;&lt;/a&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72e2b03590151672cca43fe82785f6ee7f1c407" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb32005b2ebb40451b4840c72cc5ab4284d0070" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: Acquiring a lock using &lt;code&gt;await lock&lt;/code&gt; or &lt;code&gt;yield from lock&lt;/code&gt; and/or &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement (&lt;code&gt;with await lock&lt;/code&gt;, &lt;code&gt;with (yield from
lock)&lt;/code&gt;) is deprecated. Use &lt;code&gt;async with lock&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622c4bb0607b93bb03734947be82c2c7ec7bc419" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: In case &lt;em&gt;x&lt;/em&gt; does not fit in 16-bit unsigned integer, but does fit in a positive C int, it is silently truncated to 16-bit unsigned integer. This silent truncation feature is deprecated, and will raise an exception in future versions of Python.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610a1b36a5e2bd65b2dd44fd828270380a36dc48" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: It uses the same ordering and comparison algorithm as &amp;ldquo;&amp;lt;&amp;rdquo;, &amp;ldquo;==&amp;rdquo;, and &amp;ldquo;&amp;gt;&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac036ec29fe6496ed6fb21f072cf6aedc4f0cd0" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: Python now always has threading enabled. Please use &lt;a href=&quot;_thread#module-_thread&quot;&gt;&lt;code&gt;_thread&lt;/code&gt;&lt;/a&gt; (or, better, &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt;) instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97b1ea9fcc40d5dbf4b63d16c6ee66407d2f4c1" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: Python now always has threading enabled. Please use &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068d7064e6c352d795ff5aa8e8385d6210038890" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: Since Python 3.2 and 2.7.9, it is recommended to use the &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#ssl.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt;. The top-level function is limited and creates an insecure client socket without server name indication or hostname matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e791c0365a7c465b1b1a63cf72f17eb5bd4a8d6b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0, use the new &lt;a href=&quot;#ssl.SSLContext.minimum_version&quot;&gt;&lt;code&gt;SSLContext.minimum_version&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.SSLContext.maximum_version&quot;&gt;&lt;code&gt;SSLContext.maximum_version&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc85172dd0ae4841176ec36a5c722ec3b82bcff6" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0338190546ed46ad383d1a0c6dc24a11e150d7a4" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0. It was added to 2.7.15, 3.6.3 and 3.7.0 for backwards compatibility with OpenSSL 1.0.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a5f81bc956c14e55c3094f16329c70aea3749d" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: This ABC is deprecated in favour of supporting resource loading through &lt;a href=&quot;#importlib.abc.ResourceReader&quot;&gt;&lt;code&gt;importlib.abc.ResourceReader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73660d3d2198932d4a6ee8476e09eac30b39f1fa" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.7: Use &lt;a href=&quot;#locale.format_string&quot;&gt;&lt;code&gt;format_string()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69daf8f4fc19269d7ec787fd34b29faa8e43205" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8, will be removed in version 3.10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968985122c90fe2bcaedd790597a2969389c16c6" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8, will be removed in version 3.10: The &lt;em&gt;codeset&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42e8b2e661fce6228ad50d056c7dfc9c79c0709" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8, will be removed in version 3.10: The &lt;em&gt;loop&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a2f5eb049fc02bc0e43bbc59075362cc3e339a" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8, will be removed in version 3.10: Use &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a4421d2c29ba70ee7473b50c23d77e240bd298" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: Class &lt;code&gt;ast.Constant&lt;/code&gt; is now used for all constants. Old classes &lt;code&gt;ast.Num&lt;/code&gt;, &lt;code&gt;ast.Str&lt;/code&gt;, &lt;code&gt;ast.Bytes&lt;/code&gt;, &lt;code&gt;ast.NameConstant&lt;/code&gt; and &lt;code&gt;ast.Ellipsis&lt;/code&gt; are still available, but they will be removed in future Python releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622f040c6aa8570d96ff8c76321aa304b92ceb39" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: If any awaitable in &lt;em&gt;aws&lt;/em&gt; is a coroutine, it is automatically scheduled as a Task. Passing coroutines objects to &lt;code&gt;wait()&lt;/code&gt; directly is deprecated as it leads to &lt;a href=&quot;#asyncio-example-wait-coroutine&quot;&gt;confusing behavior&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9c6bd2527878a5c19dbe86f367102f954dadd7" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: Methods &lt;code&gt;visit_Num()&lt;/code&gt;, &lt;code&gt;visit_Str()&lt;/code&gt;, &lt;code&gt;visit_Bytes()&lt;/code&gt;, &lt;code&gt;visit_NameConstant()&lt;/code&gt; and &lt;code&gt;visit_Ellipsis()&lt;/code&gt; are deprecated now and will not be called in future Python versions. Add the &lt;code&gt;visit_Constant()&lt;/code&gt; method to handle all constant nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0975249015e1efd11fd8531f6aafcb281c897f40" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: Passing coroutine objects to &lt;code&gt;wait()&lt;/code&gt; directly is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c99be5b6be4d42a71d0d5573fce3f26f951e7b" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: Support for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; method is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd99eaef7955afef86dd356cb7ab5910af7e5ec4" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: Support for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;sequence protocol&lt;/code&gt;&lt;/a&gt; is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d48b90c0829fdcd4b71262809260a9d6a96ed31" translate="yes" xml:space="preserve">
          <source>Deprecated since version 3.8: Using an executor that is not an instance of &lt;a href=&quot;concurrent.futures#concurrent.futures.ThreadPoolExecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; is deprecated and will trigger an error in Python 3.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0241246f0af3d94379395f93d9fd7f6b8df4c8c" translate="yes" xml:space="preserve">
          <source>Deprecated. Enable fast mode if set to a true value. The fast mode disables the usage of memo, therefore speeding the pickling process by not generating superfluous PUT opcodes. It should not be used with self-referential objects, doing otherwise will cause &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; to recurse infinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494e67ac33b5c7d03533f7c82c6e55e2983f1141" translate="yes" xml:space="preserve">
          <source>DeprecationWarning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e5c850c12940253df9901ed44c1f13ebafec63" translate="yes" xml:space="preserve">
          <source>Depth limit on the creation of recursive representations. The default is &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3e014e6797865062cb96880f83e1a3de59b871" translate="yes" xml:space="preserve">
          <source>Deque objects also provide one read-only attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfea2a68fe23728ba5fb3db2e3a7f920abaaf0ae" translate="yes" xml:space="preserve">
          <source>Deque objects support the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f733e81d0da77bb826023ead4204937438d2de" translate="yes" xml:space="preserve">
          <source>Deques are a generalization of stacks and queues (the name is pronounced &amp;ldquo;deck&amp;rdquo; and is short for &amp;ldquo;double-ended queue&amp;rdquo;). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same O(1) performance in either direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e649e31745825376b9adee8c33599b70c37b3ea1" translate="yes" xml:space="preserve">
          <source>Dequeues a record and return it, optionally blocking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d4cebf134e10ee82ddb24972809654b5180681" translate="yes" xml:space="preserve">
          <source>Derived Enumerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc55acd6f3e56188e385ece1a645f4f00cf505a" translate="yes" xml:space="preserve">
          <source>Derived classes and clients can call the following methods to affect the stepping state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfe8057649c70d4597a6fddf26d3f67337087f8" translate="yes" xml:space="preserve">
          <source>Derived classes and clients can call the following methods to get a data structure representing a stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682c2684e934bf0070698a12f3fd072a84f23651" translate="yes" xml:space="preserve">
          <source>Derived classes and clients can call the following methods to manipulate breakpoints. These methods return a string containing an error message if something went wrong, or &lt;code&gt;None&lt;/code&gt; if all is well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebfe82d90e71c74a735b98335d28f33ff1f1318" translate="yes" xml:space="preserve">
          <source>Derived classes should override these methods to gain control over debugger operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef4c6e67bfdf354d02fe7e9caaedfb60c3e21d6" translate="yes" xml:space="preserve">
          <source>Derived from &lt;a href=&quot;#concurrent.futures.BrokenExecutor&quot;&gt;&lt;code&gt;BrokenExecutor&lt;/code&gt;&lt;/a&gt; (formerly &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;), this exception class is raised when one of the workers of a &lt;code&gt;ProcessPoolExecutor&lt;/code&gt; has terminated in a non-clean fashion (for example, if it was killed from the outside).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a39d57f8f81eed3f1ae76af9610ba8b5fbb1242" translate="yes" xml:space="preserve">
          <source>Derived from &lt;a href=&quot;#concurrent.futures.BrokenExecutor&quot;&gt;&lt;code&gt;BrokenExecutor&lt;/code&gt;&lt;/a&gt;, this exception class is raised when one of the workers of a &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; has failed initializing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8032a70a48702e6ec60abcb7557fa8f9210884" translate="yes" xml:space="preserve">
          <source>Derived from &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;, this exception class is raised when an executor is broken for some reason, and cannot be used to submit or execute new tasks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d239bf071f94cb9ca16d450b0303f1911a4237e" translate="yes" xml:space="preserve">
          <source>Derived from RawTurtle is the subclass &lt;a href=&quot;#turtle.Turtle&quot;&gt;&lt;code&gt;Turtle&lt;/code&gt;&lt;/a&gt; (alias: &lt;code&gt;Pen&lt;/code&gt;), which draws on &amp;ldquo;the&amp;rdquo; &lt;a href=&quot;#turtle.Screen&quot;&gt;&lt;code&gt;Screen&lt;/code&gt;&lt;/a&gt; instance which is automatically created, if not already present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8eaa842ba5327fababee947339acd9d0252a26" translate="yes" xml:space="preserve">
          <source>Derived from the standard exception &lt;a href=&quot;exceptions#Exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt;, this is the base class for all exceptions raised by the &lt;a href=&quot;#module-nntplib&quot;&gt;&lt;code&gt;nntplib&lt;/code&gt;&lt;/a&gt; module. Instances of this class have the following attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3b5761985e563a30558939e74596b7dc807678" translate="yes" xml:space="preserve">
          <source>Describes a enum value of Parameter.kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c80d5b9eaa3e4ef47b5aaab9b0dc0b8e29b058" translate="yes" xml:space="preserve">
          <source>Describes how argument values are bound to the parameter. Possible values (accessible via &lt;a href=&quot;#inspect.Parameter&quot;&gt;&lt;code&gt;Parameter&lt;/code&gt;&lt;/a&gt;, like &lt;code&gt;Parameter.KEYWORD_ONLY&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ac8842ab79487a6e20ec99eca79492c042874c" translate="yes" xml:space="preserve">
          <source>Describes the XML-RPC protocol extension for introspection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a236f7abc599d1450616910f765fe36798aea39" translate="yes" xml:space="preserve">
          <source>Describing Warning Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f1a1382e07cdb219467ef7cc3c6bc7a3e274dc" translate="yes" xml:space="preserve">
          <source>Describing a logging configuration requires listing the various objects to create and the connections between them; for example, you may create a handler named &amp;lsquo;console&amp;rsquo; and then say that the logger named &amp;lsquo;startup&amp;rsquo; will send its messages to the &amp;lsquo;console&amp;rsquo; handler. These objects aren&amp;rsquo;t limited to those provided by the &lt;a href=&quot;logging#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module because you might write your own formatter or handler class. The parameters to these classes may also need to include external objects such as &lt;code&gt;sys.stderr&lt;/code&gt;. The syntax for describing these objects and connections is defined in &lt;a href=&quot;#logging-config-dict-connections&quot;&gt;Object connections&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09dac122e8953867260f1e16deb240632cdc29cd" translate="yes" xml:space="preserve">
          <source>Description of parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307eee095a4dc60adc3660a460ea6ac56a3a3776" translate="yes" xml:space="preserve">
          <source>Descriptor methods: &lt;code&gt;__get__&lt;/code&gt;, &lt;code&gt;__set__&lt;/code&gt; and &lt;code&gt;__delete__&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375b364a6670431840656953ac667d50e42da64e" translate="yes" xml:space="preserve">
          <source>Deserialize &lt;em&gt;fp&lt;/em&gt; (a &lt;code&gt;.read()&lt;/code&gt;-supporting &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-file&quot;&gt;text file&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-binary-file&quot;&gt;binary file&lt;/a&gt; containing a JSON document) to a Python object using this &lt;a href=&quot;#json-to-py-table&quot;&gt;conversion table&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338f8813286b063dc92fdc4c52a00c859e968218" translate="yes" xml:space="preserve">
          <source>Deserialize &lt;em&gt;s&lt;/em&gt; (a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; instance containing a JSON document) to a Python object using this &lt;a href=&quot;#json-to-py-table&quot;&gt;conversion table&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f646066bdf4b1ec66764f189ea43f9555404f9" translate="yes" xml:space="preserve">
          <source>Destination address required</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0e3bd59c2b370567b6476d441b26db3584ecbe" translate="yes" xml:space="preserve">
          <source>Detaches the Windows handle from the handle object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94265dc75b58913cf0a9b011f795a07641a4c126" translate="yes" xml:space="preserve">
          <source>Details for a bytecode operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e7bd0adffce9690edd50f1d55df3d66fe04f9c" translate="yes" xml:space="preserve">
          <source>Detect all offsets in the code object &lt;em&gt;code&lt;/em&gt; which are jump targets, and return a list of these offsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886009b9f88359d28c121465012a356c1978bfd7" translate="yes" xml:space="preserve">
          <source>Detect never-awaited coroutines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f126644fc69f3192a4fde8b8ea7416a681b96d8" translate="yes" xml:space="preserve">
          <source>Detect never-retrieved exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f64eab2bf404b4994d8026ab3fe063fb82943bd" translate="yes" xml:space="preserve">
          <source>Determine if &lt;em&gt;object&lt;/em&gt; requires a recursive representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e2174d0cc9d695816946e5b9cc279e79443940" translate="yes" xml:space="preserve">
          <source>Determine if the formatted representation of &lt;em&gt;object&lt;/em&gt; is &amp;ldquo;readable,&amp;rdquo; or can be used to reconstruct the value using &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;. This always returns &lt;code&gt;False&lt;/code&gt; for recursive objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d216c696134d641e8ed2c56b3a5c8c611c3077bf" translate="yes" xml:space="preserve">
          <source>Determine if the formatted representation of the object is &amp;ldquo;readable,&amp;rdquo; or can be used to reconstruct the value using &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;. Note that this returns &lt;code&gt;False&lt;/code&gt; for recursive objects. If the &lt;em&gt;depth&lt;/em&gt; parameter of the &lt;a href=&quot;#pprint.PrettyPrinter&quot;&gt;&lt;code&gt;PrettyPrinter&lt;/code&gt;&lt;/a&gt; is set and the object is deeper than allowed, this returns &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b7fdad90781ebe1ee0b267d0f8a11cac83425d" translate="yes" xml:space="preserve">
          <source>Determine if the object requires a recursive representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112b39bab7625afdbe5972f8f7e91467aac394d8" translate="yes" xml:space="preserve">
          <source>Determine if there is an effective (active) breakpoint at this line of code. Return a tuple of the breakpoint and a boolean that indicates if it is ok to delete a temporary breakpoint. Return &lt;code&gt;(None, None)&lt;/code&gt; if there is no matching breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a54d0f7949d164f70140a6c06b0306179df847" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableA.1 (Unassigned code points in Unicode 3.2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8800deecdc42328d0ea0825230e91982c6bca67c" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableB.1 (Commonly mapped to nothing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a792b1a90681af4ec8cd0e167798e67f96837c" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.1 (Space characters, union of C.1.1 and C.1.2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f64f3b1ff81a3c417739201098e7dcbad400fe1" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.1.1 (ASCII space characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344d509483510a6a1afda6434a04f6d11ac476df" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.1.2 (Non-ASCII space characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623518c1e9f6884a84288a2039e999df32c526a4" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.2 (Control characters, union of C.2.1 and C.2.2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734c3ccfe9596b6c655fd430230aed7270d90d75" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.2.1 (ASCII control characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe64c68207a835000da98da225dcc7f9ecd56c99" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.2.2 (Non-ASCII control characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f677e13f48bc92a4d689d115c9d4a56e946fd109" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.3 (Private use).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62c821576604e38c44d7e3374b2c77111ce5604" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.4 (Non-character code points).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c06e83d31b7ce42d700f84157b5832a835d1c6e" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.5 (Surrogate codes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2bd05f94a8acff2feb1a7c5eff852bcdae8a2a" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.6 (Inappropriate for plain text).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7eb4b8d807ef6b5e2b5c57fc97cbadd9447abed" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.7 (Inappropriate for canonical representation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f1778ef9e83a924cecb4987d3a09f83d82aac4" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.8 (Change display properties or are deprecated).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7001e530709b912ba438d39c0daced47c66ec5" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableC.9 (Tagging characters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767e4d4ad0e2cd230965e17f37444b143c9c13a1" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableD.1 (Characters with bidirectional property &amp;ldquo;R&amp;rdquo; or &amp;ldquo;AL&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853a8c807e9a5873b8431e0f0ba95da3987d216e" translate="yes" xml:space="preserve">
          <source>Determine whether &lt;em&gt;code&lt;/em&gt; is in tableD.2 (Characters with bidirectional property &amp;ldquo;L&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2270ee5c6dcadcbd8c4b85deafb26a2f00bfe64" translate="yes" xml:space="preserve">
          <source>Determines if the module is a package based on &lt;a href=&quot;#importlib.machinery.SourcelessFileLoader.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5ec6fdf2fb7a763e520b34302c59319fb9d051" translate="yes" xml:space="preserve">
          <source>Determines the message ID, event category and event type, and then logs the message in the NT event log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c544710eae464a3888af6a4c96b63b055d6725ea" translate="yes" xml:space="preserve">
          <source>Determines the reflection state for the specified key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b436d94b1a9f9b89942d91b2d8a1a05253075606" translate="yes" xml:space="preserve">
          <source>Determines the type of sound data stored in a file based on the file header. The name of the file is given by &lt;em&gt;filename&lt;/em&gt;. This function returns a namedtuple as described above on success, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910378bdf9472127e810e551c16ca0a832c92913" translate="yes" xml:space="preserve">
          <source>Determines the type of sound data stored in the file &lt;em&gt;filename&lt;/em&gt; using &lt;a href=&quot;#sndhdr.whathdr&quot;&gt;&lt;code&gt;whathdr()&lt;/code&gt;&lt;/a&gt;. If it succeeds, returns a namedtuple as described above, otherwise &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a827cef384a4cbe03d13f50e38f7b177043ed4d" translate="yes" xml:space="preserve">
          <source>Determines what the border style of a widget will be. Legal values are: &lt;code&gt;&quot;raised&quot;&lt;/code&gt;, &lt;code&gt;&quot;sunken&quot;&lt;/code&gt;, &lt;code&gt;&quot;flat&quot;&lt;/code&gt;, &lt;code&gt;&quot;groove&quot;&lt;/code&gt;, and &lt;code&gt;&quot;ridge&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cf36b57a09029e0930c65593e97c425f25385c" translate="yes" xml:space="preserve">
          <source>Determines whether the window accepts the focus during keyboard traversal. 0, 1 or an empty string is returned. If 0 is returned, it means that the window should be skipped entirely during keyboard traversal. If 1, it means that the window should receive the input focus as long as it is viewable. And an empty string means that the traversal scripts make the decision about whether or not to focus on the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b9c524283ef65e98a82d93ec990e57870e259e" translate="yes" xml:space="preserve">
          <source>Determining if an Object is Aware or Naive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f3adfacb330aee4a77e40e7fde0c2b8c823dc3" translate="yes" xml:space="preserve">
          <source>Deterministic pycs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227ba6b966ce35298cb13e42b2cde346a9f64fbf" translate="yes" xml:space="preserve">
          <source>Developers of applications written in Python may wish to hide &lt;em&gt;all&lt;/em&gt; Python level warnings from their users by default, and only display them when running tests or otherwise working on the application. The &lt;a href=&quot;sys#sys.warnoptions&quot;&gt;&lt;code&gt;sys.warnoptions&lt;/code&gt;&lt;/a&gt; attribute used to pass filter configurations to the interpreter can be used as a marker to indicate whether or not warnings should be disabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83efca71a2db98805984e21bc069c97a6e54f0a" translate="yes" xml:space="preserve">
          <source>Developers of test runners for Python code are advised to instead ensure that &lt;em&gt;all&lt;/em&gt; warnings are displayed by default for the code under test, using code like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d42a8d569e440582dd6f493e86e769d7ace0645" translate="yes" xml:space="preserve">
          <source>Developing tkinter applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e08870be0ea69b026eb028e089a45e4aadb5ae" translate="yes" xml:space="preserve">
          <source>Developing with asyncio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c659a411024775bc5400ece139ed7c5058937b1d" translate="yes" xml:space="preserve">
          <source>Development Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6a50b41ee8aba0a7ad4d460b7fcd489d8aaf30" translate="yes" xml:space="preserve">
          <source>Device control 2, block-mode flow control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e66b66a02a1ee7e99342652890cd1ca85ebf30" translate="yes" xml:space="preserve">
          <source>Device control 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88140a99cc73d6037ebc42dbf052b9760e08e9ad" translate="yes" xml:space="preserve">
          <source>Device inode resides on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472deee175b73a542254dec55f58f9d2616f1d1b" translate="yes" xml:space="preserve">
          <source>Device not a stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e914a8417a836459823812aa69a567d2573691c0" translate="yes" xml:space="preserve">
          <source>Device or resource busy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf791da64a6f6cc8813eb953ab15733b8a9afc1" translate="yes" xml:space="preserve">
          <source>Dialects and Formatting Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8808ef7cf0e671eacf36da443a071254bd3ccd1" translate="yes" xml:space="preserve">
          <source>Dialects support the following attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5432e726cd06aa63821e0e9ee891817a60436e" translate="yes" xml:space="preserve">
          <source>Dialog to let the user choose a color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2f0dc8ba3fefcd0ad85c299eb369b0c44ec6f2" translate="yes" xml:space="preserve">
          <source>DictReader objects have the following public attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7701461b214d90ff772f645eb7737e941419731" translate="yes" xml:space="preserve">
          <source>DictWriter objects have the following public method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab1b2e060963421780f99f99f8333356b11f484" translate="yes" xml:space="preserve">
          <source>Dictionaries and dictionary views are reversible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a3f2e4e27b59aff156a80c90bd0e61a79e929f" translate="yes" xml:space="preserve">
          <source>Dictionaries are sorted by key before the display is computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc77ad3dc358d8f0c4202fd6b67fedccf96b0c7a" translate="yes" xml:space="preserve">
          <source>Dictionaries can be created by placing a comma-separated list of &lt;code&gt;key: value&lt;/code&gt; pairs within braces, for example: &lt;code&gt;{'jack': 4098, 'sjoerd': 4127}&lt;/code&gt; or &lt;code&gt;{4098:
'jack', 4127: 'sjoerd'}&lt;/code&gt;, or by the &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3a2db47bf8a581a52622cba95060db97ba81bb" translate="yes" xml:space="preserve">
          <source>Dictionaries compare equal if and only if they have the same &lt;code&gt;(key,
value)&lt;/code&gt; pairs (regardless of ordering). Order comparisons (&amp;lsquo;&amp;lt;&amp;rsquo;, &amp;lsquo;&amp;lt;=&amp;rsquo;, &amp;lsquo;&amp;gt;=&amp;rsquo;, &amp;lsquo;&amp;gt;&amp;rsquo;) raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c1670b0b7a7ba40b9a9d4c83b18f7c9c04ad3a" translate="yes" xml:space="preserve">
          <source>Dictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e4e1bd6354fe87eabd1901d226ac34a6736551" translate="yes" xml:space="preserve">
          <source>Dictionary Schema Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b283c48261e4ecb7a9bbe964e5c60e4131f141" translate="yes" xml:space="preserve">
          <source>Dictionary mapping field names to default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6042f2bfa5164ad89d60a949b51e0f9674e3a2bb" translate="yes" xml:space="preserve">
          <source>Dictionary mapping filename extensions to MIME types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb6ed1766c441df58f2b613e0dea5ef76b601253" translate="yes" xml:space="preserve">
          <source>Dictionary mapping filename extensions to encoding types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc743300da11561abe7cccb0301d600320914337" translate="yes" xml:space="preserve">
          <source>Dictionary mapping filename extensions to encoding types. This is initially a copy of the global &lt;a href=&quot;#mimetypes.encodings_map&quot;&gt;&lt;code&gt;encodings_map&lt;/code&gt;&lt;/a&gt; defined in the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3946d8795bb6d7919f1c5e41c5b09a7f43674b39" translate="yes" xml:space="preserve">
          <source>Dictionary mapping filename extensions to non-standard, but commonly found MIME types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23d5e1a918ecde718d3194609b2fb09730da8db" translate="yes" xml:space="preserve">
          <source>Dictionary mapping host names to &lt;code&gt;(login, account, password)&lt;/code&gt; tuples. The &amp;lsquo;default&amp;rsquo; entry, if any, is represented as a pseudo-host by that name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a20be1cc4b03cc107300484267c30e75500f64e" translate="yes" xml:space="preserve">
          <source>Dictionary mapping macro names to string lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6f3a328e7fe9dc5d4d50d48b00b95c792889e9" translate="yes" xml:space="preserve">
          <source>Dictionary mapping names accepted by &lt;a href=&quot;#os.confstr&quot;&gt;&lt;code&gt;confstr()&lt;/code&gt;&lt;/a&gt; to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccdaf305830e968d57992fa9d9bf0a4e700fa8c" translate="yes" xml:space="preserve">
          <source>Dictionary mapping names accepted by &lt;a href=&quot;#os.pathconf&quot;&gt;&lt;code&gt;pathconf()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.fpathconf&quot;&gt;&lt;code&gt;fpathconf()&lt;/code&gt;&lt;/a&gt; to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5052e74fa4846ce8de8b33c9e8642836e29e4f8" translate="yes" xml:space="preserve">
          <source>Dictionary mapping names accepted by &lt;a href=&quot;#os.sysconf&quot;&gt;&lt;code&gt;sysconf()&lt;/code&gt;&lt;/a&gt; to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1042fd8ccb48d1cccd2c79e82340ae4728ce4bc" translate="yes" xml:space="preserve">
          <source>Dictionary mapping operation names to bytecodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d320f3654028862a4c4a9c7058e10c8a100bc32e" translate="yes" xml:space="preserve">
          <source>Dictionary mapping suffixes to suffixes. This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension. For example, the &lt;code&gt;.tgz&lt;/code&gt; extension is mapped to &lt;code&gt;.tar.gz&lt;/code&gt; to allow the encoding and type to be recognized separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba111bb63f7f04cb2c6ffad0dfc326bced082a43" translate="yes" xml:space="preserve">
          <source>Dictionary mapping suffixes to suffixes. This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension. For example, the &lt;code&gt;.tgz&lt;/code&gt; extension is mapped to &lt;code&gt;.tar.gz&lt;/code&gt; to allow the encoding and type to be recognized separately. This is initially a copy of the global &lt;a href=&quot;#mimetypes.suffix_map&quot;&gt;&lt;code&gt;suffix_map&lt;/code&gt;&lt;/a&gt; defined in the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168115d9d1a3a169576861b302205ec9e2950502" translate="yes" xml:space="preserve">
          <source>Dictionary mapping the numeric values of the constants defined in this module back to name strings, allowing more human-readable representation of parse trees to be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3dabf768529c5c0a05d31ae2894f6e329b9c6c9" translate="yes" xml:space="preserve">
          <source>Dictionary providing a mapping from the errno value to the string name in the underlying system. For instance, &lt;code&gt;errno.errorcode[errno.EPERM]&lt;/code&gt; maps to &lt;code&gt;'EPERM'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40597299627c550fcec55295c4bb145ed6cf1d78" translate="yes" xml:space="preserve">
          <source>Dictionary view objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bd5b623a353d13fe2893d2198b78a7baeb18e9" translate="yes" xml:space="preserve">
          <source>Dictionary views can be iterated over to yield their respective data, and support membership tests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139d350f94ffb48040d8894ee7a42401613111f6" translate="yes" xml:space="preserve">
          <source>Differ Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd728318667a85a62b573e348a3f148aef08641b" translate="yes" xml:space="preserve">
          <source>Differ Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16f1f66543d3256c7320f66ff9ae94cbd849539" translate="yes" xml:space="preserve">
          <source>Difference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f42c895712e6c6a328c797466b0a8dec5f7adc8" translate="yes" xml:space="preserve">
          <source>Difference of &lt;em&gt;t2&lt;/em&gt; and &lt;em&gt;t3&lt;/em&gt;. Afterwards &lt;em&gt;t1&lt;/em&gt; == &lt;em&gt;t2&lt;/em&gt; - &lt;em&gt;t3&lt;/em&gt; and &lt;em&gt;t2&lt;/em&gt; == &lt;em&gt;t1&lt;/em&gt; + &lt;em&gt;t3&lt;/em&gt; are true. (1)(6)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6624ab01690a92e0f0a8a19484c2fd2471ce1058" translate="yes" xml:space="preserve">
          <source>Difference of number of memory blocks between the old and the new snapshots (&lt;code&gt;int&lt;/code&gt;): &lt;code&gt;0&lt;/code&gt; if the memory blocks have been allocated in the new snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f96f336ae06cf6a1b8a61189ade72185a20755" translate="yes" xml:space="preserve">
          <source>Difference of total size of memory blocks in bytes between the old and the new snapshots (&lt;code&gt;int&lt;/code&gt;): &lt;code&gt;0&lt;/code&gt; if the memory blocks have been allocated in the new snapshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40bbccf2ba866425060b0cb20b93db8b94798d1b" translate="yes" xml:space="preserve">
          <source>Different values of &lt;code&gt;nargs&lt;/code&gt; may cause the metavar to be used multiple times. Providing a tuple to &lt;code&gt;metavar&lt;/code&gt; specifies a different display for each of the arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6fd1376fd880cb9ae2825f4fd3cf98cb14391b" translate="yes" xml:space="preserve">
          <source>Dim mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6a447bac6f99d1a389591808fbaff01c06f423" translate="yes" xml:space="preserve">
          <source>Directly using the &lt;a href=&quot;#profile.Profile&quot;&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/a&gt; class allows formatting profile results without writing the profile data to a file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6eeb851607c3b55aaacacd74d18bddb9fd02b0" translate="yes" xml:space="preserve">
          <source>Directory Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd1ab279b81704543013ac343cefcf1e2b7548e" translate="yes" xml:space="preserve">
          <source>Directory and files operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca827528d6904965fcebbbcad976a987f5f845b3" translate="yes" xml:space="preserve">
          <source>Directory not empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd01b1fcfc45feeb0b610cedd055b91feedcae8" translate="yes" xml:space="preserve">
          <source>Directory prepended to the path to each file being compiled. This will appear in compilation time tracebacks, and is also compiled in to the byte-code file, where it will be used in tracebacks and other messages in cases where the source file does not exist at the time the byte-code file is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24ad17992020f3be6b95a5b746b62d6077b46e8" translate="yes" xml:space="preserve">
          <source>Directory to start discovery (&lt;code&gt;.&lt;/code&gt; default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa85c82dbbd07d561fa1ca6cdd3784c4b55212eb" translate="yes" xml:space="preserve">
          <source>Directory where the report files go. The coverage report for &lt;code&gt;package.module&lt;/code&gt; is written to file &lt;code&gt;&lt;em&gt;dir&lt;/em&gt;/&lt;em&gt;package&lt;/em&gt;/&lt;em&gt;module&lt;/em&gt;.cover&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5969fa73eaa43f73a5289188c026ff6a45c76d37" translate="yes" xml:space="preserve">
          <source>Directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b880122308ce27b5ab48c3a6d598cd3097440d21" translate="yes" xml:space="preserve">
          <source>Disable all renegotiation in TLSv1.2 and earlier. Do not send HelloRequest messages, and ignore renegotiation requests via ClientHello.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6702afe54fec9e2d0d8d66485bd9af6027c6ec30" translate="yes" xml:space="preserve">
          <source>Disable automatic garbage collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ac096f22bb26091ab23d04893929ab1c5ee4a3" translate="yes" xml:space="preserve">
          <source>Disable compression on the SSL channel. This is useful if the application protocol supports its own compression scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8554496342320bb00b9cd6ea070562a878bad5db" translate="yes" xml:space="preserve">
          <source>Disable the breakpoints given as a space separated list of breakpoint numbers. Disabling a breakpoint means it cannot cause the program to stop execution, but unlike clearing a breakpoint, it remains in the list of breakpoints and can be (re-)enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61473ef24244fd6354a880a118dc31e352e4ff73" translate="yes" xml:space="preserve">
          <source>Disable the fault handler: uninstall the signal handlers installed by &lt;a href=&quot;#faulthandler.enable&quot;&gt;&lt;code&gt;enable()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed405df70ba7025acb374fe4e8581c83ef8fb55" translate="yes" xml:space="preserve">
          <source>Disables registry reflection for 32-bit processes running on a 64-bit operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfbd758cfd4b12de4ce9b1991cf396206be8124" translate="yes" xml:space="preserve">
          <source>Disablesevent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c139f4275906840325036c5447f3b226e78992" translate="yes" xml:space="preserve">
          <source>Disassemble a code object, indicating the last instruction if &lt;em&gt;lasti&lt;/em&gt; was provided. The output is divided in the following columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb66f3ccadfa9df8451bb8de2769fa1fa09e0581" translate="yes" xml:space="preserve">
          <source>Disassemble the &lt;em&gt;x&lt;/em&gt; object. &lt;em&gt;x&lt;/em&gt; can denote either a module, a class, a method, a function, a generator, an asynchronous generator, a coroutine, a code object, a string of source code or a byte sequence of raw bytecode. For a module, it disassembles all functions. For a class, it disassembles all methods (including class and static methods). For a code object or sequence of raw bytecode, it prints one line per bytecode instruction. It also recursively disassembles nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes). Strings are first compiled to code objects with the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; built-in function before being disassembled. If no object is provided, this function disassembles the last traceback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a722487b8d1e4d30d77117b7eb465b9eac4723" translate="yes" xml:space="preserve">
          <source>Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed. The instruction causing the exception is indicated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a4395b2a5ea228066e1b239a95864f6fbc655c" translate="yes" xml:space="preserve">
          <source>Discard all session cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2596998b4fe1168192e8b375218c5ec98e0bd94d" translate="yes" xml:space="preserve">
          <source>Discard queued data on file descriptor &lt;em&gt;fd&lt;/em&gt;. The &lt;em&gt;queue&lt;/em&gt; selector specifies which queue: &lt;code&gt;TCIFLUSH&lt;/code&gt; for the input queue, &lt;code&gt;TCOFLUSH&lt;/code&gt; for the output queue, or &lt;code&gt;TCIOFLUSH&lt;/code&gt; for both queues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c9625daf2840b98fcf5f102e1b6ba05dd18ca3" translate="yes" xml:space="preserve">
          <source>Discards all contained cookies that have a true &lt;code&gt;discard&lt;/code&gt; attribute (usually because they had either no &lt;code&gt;max-age&lt;/code&gt; or &lt;code&gt;expires&lt;/code&gt; cookie-attribute, or an explicit &lt;code&gt;discard&lt;/code&gt; cookie-attribute). For interactive browsers, the end of a session usually corresponds to closing the browser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9a60543dd57372c68f390bac04e0461166ca1d" translate="yes" xml:space="preserve">
          <source>Discussion of a similar algorithm by John W. Ratcliff and D. E. Metzener. This was published in &lt;a href=&quot;http://www.drdobbs.com/&quot;&gt;Dr. Dobb&amp;rsquo;s Journal&lt;/a&gt; in July, 1988.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4527219ebc14b19edf84ed58e3cf877b05f8ae4" translate="yes" xml:space="preserve">
          <source>Discussion of the special methods used to support object state retrieval and restoration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199d52ab4e7eeeec4b75fa2687c5cf88feebd5ce" translate="yes" xml:space="preserve">
          <source>Dispatch Tables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120c31099db22289dd35dfede7eab3541204be55" translate="yes" xml:space="preserve">
          <source>Display &lt;em&gt;url&lt;/em&gt; using the browser handled by this controller. If &lt;em&gt;new&lt;/em&gt; is 1, a new browser window is opened if possible. If &lt;em&gt;new&lt;/em&gt; is 2, a new browser page (&amp;ldquo;tab&amp;rdquo;) is opened if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fb36a69d73ec27ad1d1472002427d3ae1cb9ab" translate="yes" xml:space="preserve">
          <source>Display &lt;em&gt;url&lt;/em&gt; using the default browser. If &lt;em&gt;new&lt;/em&gt; is 0, the &lt;em&gt;url&lt;/em&gt; is opened in the same browser window if possible. If &lt;em&gt;new&lt;/em&gt; is 1, a new browser window is opened if possible. If &lt;em&gt;new&lt;/em&gt; is 2, a new browser page (&amp;ldquo;tab&amp;rdquo;) is opened if possible. If &lt;em&gt;autoraise&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the window is raised if possible (note that under many window managers this will occur regardless of the setting of this variable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13017eda9a7646a38f56cc4d72d63ed546778ff6" translate="yes" xml:space="preserve">
          <source>Display a horizontal line starting at &lt;code&gt;(y, x)&lt;/code&gt; with length &lt;em&gt;n&lt;/em&gt; consisting of the character &lt;em&gt;ch&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19f71996c2d490fdfdeff600e4250507ae38bb5" translate="yes" xml:space="preserve">
          <source>Display a vertical line starting at &lt;code&gt;(y, x)&lt;/code&gt; with length &lt;em&gt;n&lt;/em&gt; consisting of the character &lt;em&gt;ch&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9d7e7727e3e3cb853031d8d0c1277467f8459b" translate="yes" xml:space="preserve">
          <source>Display debug information about compiled expression. No corresponding inline flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8920c6735bdd22367a16ff3e75e24ff01a275d3d" translate="yes" xml:space="preserve">
          <source>Display lines as they are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353e5399b87fe59bf1c77b7f579f0adff69b179d" translate="yes" xml:space="preserve">
          <source>Display the 10 files allocating the most memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfddf83d4b9349eea3d92aca890036f08ba476c1" translate="yes" xml:space="preserve">
          <source>Display the calling relationships exposed by running the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc7bc5de5e0e49fb62bcc6a7ffe55ed19638aef" translate="yes" xml:space="preserve">
          <source>Display the current date with call_later()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27969bc4b7ef1252a2b1e1a3c667ae4c6936e686" translate="yes" xml:space="preserve">
          <source>Display the exception that just occurred. We remove the first stack item because it is within the interpreter object implementation. The output is written by the &lt;a href=&quot;#code.InteractiveInterpreter.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707e41d17abca028a5e98cfa1758e30bd472c734" translate="yes" xml:space="preserve">
          <source>Display the functions executed by running the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2f45b5531b60dc5a7d302f261bf0a21953134d" translate="yes" xml:space="preserve">
          <source>Display the interpreter embedded in the archive, for diagnostic purposes. In this case, any other options are ignored and SOURCE must be an archive, not a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51b781010d52173391d7f7c2cabf79ba6b00c3a" translate="yes" xml:space="preserve">
          <source>Display the panel (which might have been hidden).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b34d14136938fe6e2823bb4036030f94af3ed5" translate="yes" xml:space="preserve">
          <source>Display the syntax error that just occurred. This does not display a stack trace because there isn&amp;rsquo;t one for syntax errors. If &lt;em&gt;filename&lt;/em&gt; is given, it is stuffed into the exception instead of the default filename provided by Python&amp;rsquo;s parser, because it always uses &lt;code&gt;'&amp;lt;string&amp;gt;'&lt;/code&gt; when reading from a string. The output is written by the &lt;a href=&quot;#code.InteractiveInterpreter.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b271d8095bfb0281d7cadf4bee170b8076a98c" translate="yes" xml:space="preserve">
          <source>Display the top 10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ba3c37ed6f52b28171c9f6d98aed2e8d196536" translate="yes" xml:space="preserve">
          <source>Display the value of the expression if it changed, each time execution stops in the current frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c38724023d1d974b88c593a9b7e180d2e599d65" translate="yes" xml:space="preserve">
          <source>Display the version of the module and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="029e04b31534b7edac240599c5b991dcaf5bba7e" translate="yes" xml:space="preserve">
          <source>Display this IDLE document, detailing the menu options, basic editing and navigation, and other tips.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10a75882873e7163ae8a8a02e0a51df096ef953" translate="yes" xml:space="preserve">
          <source>Display usage and exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4bd2df6e17ff0f0517f62a68c5aa517f24226b3" translate="yes" xml:space="preserve">
          <source>Display version, copyright, license, credits, and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009ce48f7048f7e5f0cb064ebec8077d5c89382e" translate="yes" xml:space="preserve">
          <source>Disposition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b69002d2c6e520b927b3a43dea0de43d58c5f7" translate="yes" xml:space="preserve">
          <source>Distinct argument patterns may be considered to be distinct calls with separate cache entries. For example, &lt;code&gt;f(a=1, b=2)&lt;/code&gt; and &lt;code&gt;f(b=2, a=1)&lt;/code&gt; differ in their keyword argument order and may have two separate cache entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd1c8a78ee9c2a7323dae344547c6d55dc3fb14" translate="yes" xml:space="preserve">
          <source>Distinct from both single use and reentrant context managers are &amp;ldquo;reusable&amp;rdquo; context managers (or, to be completely explicit, &amp;ldquo;reusable, but not reentrant&amp;rdquo; context managers, since reentrant context managers are also reusable). These context managers support being used multiple times, but will fail (or otherwise not work correctly) if the specific context manager instance has already been used in a containing with statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85af23b5424dad3c493f2e8d5a5b573cc731a8e3" translate="yes" xml:space="preserve">
          <source>Distinguishing test iterations using subtests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788e31b37b8efd934ca4ce597a5260242da6c678" translate="yes" xml:space="preserve">
          <source>Distributing Python Modules (Legacy version)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46be8efcce69378124f44728d91708a8597915f8" translate="yes" xml:space="preserve">
          <source>Distribution files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218a336f7d3c8849777d9ee8add3bbed03333de2" translate="yes" xml:space="preserve">
          <source>Distribution metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a0cd11e022f816090238286fd14f8d2b546e87" translate="yes" xml:space="preserve">
          <source>Distribution requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9fbc32b4eaa47c3d3e3e0f4259a92de14156ef" translate="yes" xml:space="preserve">
          <source>Distribution versions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fff5ea85661c16e7519843bc17a41ff8e91eb9" translate="yes" xml:space="preserve">
          <source>Distributions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba5f7b801f7c7025e3dabcd3d37753760f4dbe1" translate="yes" xml:space="preserve">
          <source>Divide &lt;em&gt;data&lt;/em&gt; into &lt;em&gt;n&lt;/em&gt; continuous intervals with equal probability. Returns a list of &lt;code&gt;n - 1&lt;/code&gt; cut points separating the intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3e27e86228c726c3ef08f35de01264e76d72a0" translate="yes" xml:space="preserve">
          <source>Divide data into intervals with equal probability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a294dbc43830d66cf929c8c8b3998bdb4327fb6" translate="yes" xml:space="preserve">
          <source>Divide the given string into examples and intervening text, and return them as a list of alternating &lt;a href=&quot;#doctest.Example&quot;&gt;&lt;code&gt;Example&lt;/code&gt;&lt;/a&gt;s and strings. Line numbers for the &lt;a href=&quot;#doctest.Example&quot;&gt;&lt;code&gt;Example&lt;/code&gt;&lt;/a&gt;s are 0-based. The optional argument &lt;em&gt;name&lt;/em&gt; is a name identifying this string, and is only used for error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287a88fed9b5807828cdc14c0e4c5235f42ad073" translate="yes" xml:space="preserve">
          <source>Divide the normal distribution into &lt;em&gt;n&lt;/em&gt; continuous intervals with equal probability. Returns a list of (n - 1) cut points separating the intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6572353bc2d41f71740a90e1de08f6ac079aa71c" translate="yes" xml:space="preserve">
          <source>Divides two numbers and returns the integer part of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d936ef2bdc1ec9706ee5f744c29609c9ac3aa5" translate="yes" xml:space="preserve">
          <source>Dividing a constant by an instance of &lt;a href=&quot;#statistics.NormalDist&quot;&gt;&lt;code&gt;NormalDist&lt;/code&gt;&lt;/a&gt; is not supported because the result wouldn&amp;rsquo;t be normally distributed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbec44416269797757a1579d0b1247911acd066" translate="yes" xml:space="preserve">
          <source>Division</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5eb20e5c067ea0c34b9ac912ec95b871121e9ea" translate="yes" xml:space="preserve">
          <source>Division (3) of overall duration &lt;em&gt;t2&lt;/em&gt; by interval unit &lt;em&gt;t3&lt;/em&gt;. Returns a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdbac7241c2f36b2d99a0ed0c6cd33d0082be63f" translate="yes" xml:space="preserve">
          <source>Division by 0 raises &lt;a href=&quot;exceptions#ZeroDivisionError&quot;&gt;&lt;code&gt;ZeroDivisionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb1f784122a51e930d4116beaebb03612ed0f90" translate="yes" xml:space="preserve">
          <source>Django&amp;rsquo;s &lt;a href=&quot;https://github.com/django/django/blob/master/django/template/context.py&quot;&gt;Context class&lt;/a&gt; for templating is a read-only chain of mappings. It also features pushing and popping of contexts similar to the &lt;a href=&quot;#collections.ChainMap.new_child&quot;&gt;&lt;code&gt;new_child()&lt;/code&gt;&lt;/a&gt; method and the &lt;a href=&quot;#collections.ChainMap.parents&quot;&gt;&lt;code&gt;parents&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb591199802a69e904d88d2106b2d31bf4d9722" translate="yes" xml:space="preserve">
          <source>Do &lt;a href=&quot;#check-module&quot;&gt;Check Module&lt;/a&gt;. If no error, restart the shell to clean the environment, then execute the module. Output is displayed in the Shell window. Note that output requires use of &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;. When execution is complete, the Shell retains focus and displays a prompt. At this point, one may interactively explore the result of execution. This is similar to executing a file with &lt;code&gt;python -i file&lt;/code&gt; at a command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd9e4d30f8cc723de4d149fa329ee8f8a98dc4bd" translate="yes" xml:space="preserve">
          <source>Do a plural-forms lookup of a message id. &lt;em&gt;singular&lt;/em&gt; is used as the message id for purposes of lookup in the catalog, while &lt;em&gt;n&lt;/em&gt; is used to determine which plural form to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cd8fd719e9ac463c601d1f4195c63b4fd3351c" translate="yes" xml:space="preserve">
          <source>Do a plural-forms lookup of a message id. &lt;em&gt;singular&lt;/em&gt; is used as the message id for purposes of lookup in the catalog, while &lt;em&gt;n&lt;/em&gt; is used to determine which plural form to use. The returned message string is a Unicode string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a441b7398a9f65222c06733df2a4d2e2b02ec5" translate="yes" xml:space="preserve">
          <source>Do formatting for a record - if a formatter is set, use it. Otherwise, use the default formatter for the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6589e67d3090bf9b9da4d718362d012c0a32f12" translate="yes" xml:space="preserve">
          <source>Do not display the expression any more in the current frame. Without expression, clear all display expressions for the current frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06521232fa735574a02ca5b55fa8b562caa16292" translate="yes" xml:space="preserve">
          <source>Do not dump the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c632735f4b8d924e489d3bafe3a21ea4e348fd93" translate="yes" xml:space="preserve">
          <source>Do not generate annotated listings. This is useful if you intend to make several runs with &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt;, and then produce a single set of annotated listings at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc05b92eed59e4a3f1ef94ac0ab070f30b719be" translate="yes" xml:space="preserve">
          <source>Do not instantiate the class directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50afc3876abe8deb63fcb13bb579ac815ed47f90" translate="yes" xml:space="preserve">
          <source>Do not interrupt sounds currently playing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1024b9422648b3adf0f39455ac5cba143511fea3" translate="yes" xml:space="preserve">
          <source>Do not lock database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7c43cbc655e7bcf00394f4473ebe655a06041a" translate="yes" xml:space="preserve">
          <source>Do not print the list of files compiled. If passed once, error messages will still be printed. If passed twice (&lt;code&gt;-qq&lt;/code&gt;), all output is suppressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4af04dfadd635864f1d47051a2f6d2d40a7326" translate="yes" xml:space="preserve">
          <source>Do not recurse into subdirectories, only compile source code files directly contained in the named or implied directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d94812e86e2c93f2de3c4eb8df6b85de7af955" translate="yes" xml:space="preserve">
          <source>Do not rely on the shelf being closed automatically; always call &lt;a href=&quot;#shelve.Shelf.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; explicitly when you don&amp;rsquo;t need it any more, or use &lt;a href=&quot;#shelve.open&quot;&gt;&lt;code&gt;shelve.open()&lt;/code&gt;&lt;/a&gt; as a context manager:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40de5cf71f2263de0c71c91bd19a81f093c553d5" translate="yes" xml:space="preserve">
          <source>Do not reopen an already connected instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce5d4dcc66330340d108fe7d87893af7471ed1f" translate="yes" xml:space="preserve">
          <source>Do not set &lt;code&gt;SIGPIPE&lt;/code&gt;&amp;rsquo;s disposition to &lt;a href=&quot;#signal.SIG_DFL&quot;&gt;&lt;code&gt;SIG_DFL&lt;/code&gt;&lt;/a&gt; in order to avoid &lt;a href=&quot;exceptions#BrokenPipeError&quot;&gt;&lt;code&gt;BrokenPipeError&lt;/code&gt;&lt;/a&gt;. Doing that would cause your program to exit unexpectedly also whenever any socket connection is interrupted while your program is still writing to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393ebdae087b04fef0d03db43359e5113026e598" translate="yes" xml:space="preserve">
          <source>Do not try to reopen an already connected instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cedb87dc9f6380227ee290d839e507e4f318c8f9" translate="yes" xml:space="preserve">
          <source>Do not use &lt;code&gt;stdout=PIPE&lt;/code&gt; or &lt;code&gt;stderr=PIPE&lt;/code&gt; with this function. The child process will block if it generates enough output to a pipe to fill up the OS pipe buffer as the pipes are not being read from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de65886633d48caad23e43d68744518a68705029" translate="yes" xml:space="preserve">
          <source>Do not use a proxy object from more than one thread unless you protect it with a lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6560f226fca8db32a9c82c605563fe8e8a89e12d" translate="yes" xml:space="preserve">
          <source>Do not wait for data which is not immediately available. If this flag is specified, the system call will return instantly if it would have to read data from the backing storage or wait for a lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0132ab944eec806896591b4dcefc5c8c94b4538" translate="yes" xml:space="preserve">
          <source>Do nothing by default. This exists so a subclass can override it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf886c54793b70e8941f7ee56688e9c0987e9a4" translate="yes" xml:space="preserve">
          <source>Do nothing code. Used as a placeholder by the bytecode optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a53b3c148512836e10b471262a7b6c2e6d6ef8" translate="yes" xml:space="preserve">
          <source>Do nothing. Might be used as a keep-alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c873b0f21139faab33c49c07e735493d868a9f61" translate="yes" xml:space="preserve">
          <source>Do whatever it takes to actually log the specified logging record. This version is intended to be implemented by subclasses and so raises a &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a1c2e28fd0eb3132bb7ba77b16bc64702f8182" translate="yes" xml:space="preserve">
          <source>DocCGIXMLRPCRequestHandler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca5aa6039469fe8728dd326bd8c3cb563edc91d" translate="yes" xml:space="preserve">
          <source>DocTest Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f9464603c21d6597be356ca9db0699a606c183" translate="yes" xml:space="preserve">
          <source>DocTestFinder objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f929c1001ce7dc1e5d6017ef4471a48cd0c00655" translate="yes" xml:space="preserve">
          <source>DocTestParser objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b644827da6680ffaf980ed80a6f83fb238489881" translate="yes" xml:space="preserve">
          <source>DocTestRunner objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd1b3059dc7d5c324f4210557c75552c0f77590" translate="yes" xml:space="preserve">
          <source>DocXMLRPCServer Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385ac7c1acbac24f9d3c3a76215d29ce43eca20f" translate="yes" xml:space="preserve">
          <source>Docstrings can be customized by making direct assignments to the &lt;code&gt;__doc__&lt;/code&gt; fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efe7d550d55032ef1a594fe010efc79ad889696" translate="yes" xml:space="preserve">
          <source>Doctest also makes an excellent tool for regression testing, especially if you don&amp;rsquo;t skimp on explanatory text. By interleaving prose and examples, it becomes much easier to keep track of what&amp;rsquo;s actually being tested, and why. When a test fails, good prose can make it much easier to figure out what the problem is, and how it should be fixed. It&amp;rsquo;s true that you could write extensive comments in code-based testing, but few programmers do. Many have found that using doctest approaches instead leads to much clearer tests. Perhaps this is simply because doctest makes writing prose a little easier than writing code, while writing comments in code is a little harder. I think it goes deeper than just that: the natural attitude when writing a doctest-based test is that you want to explain the fine points of your software, and illustrate them with examples. This in turn naturally leads to test files that start with the simplest features, and logically progress to complications and edge cases. A coherent narrative is the result, instead of a collection of isolated functions that test isolated bits of functionality seemingly at random. It&amp;rsquo;s a different attitude, and produces different results, blurring the distinction between testing and explaining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbd85d55b4ae1c1b68c5c4968f941e910f8f6eb" translate="yes" xml:space="preserve">
          <source>Doctest can&amp;rsquo;t guess whether your expected output came from an exception traceback or from ordinary printing. So, e.g., an example that expects &lt;code&gt;ValueError: 42 is prime&lt;/code&gt; will pass whether &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is actually raised or if the example merely prints that traceback text. In practice, ordinary output rarely begins with a traceback header line, so this doesn&amp;rsquo;t create real problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6535db5edc84e2b27c0941ee6ab8317ae646202" translate="yes" xml:space="preserve">
          <source>Doctest directives may be used to modify the &lt;a href=&quot;#doctest-options&quot;&gt;option flags&lt;/a&gt; for an individual example. Doctest directives are special Python comments following an example&amp;rsquo;s source code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b26d4e14358a0d63bbcd8212793958f73f96735" translate="yes" xml:space="preserve">
          <source>Doctest provides several mechanisms for debugging doctest examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e740d41cc733e38d4a21312172b56d6ea8e3a666" translate="yes" xml:space="preserve">
          <source>Document Object Model (DOM) Level 1 Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be2ce90f6e0398537ee671de98726b9a59795a4" translate="yes" xml:space="preserve">
          <source>Document Object Model (DOM) Level 2 Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3a1b08117152fba18c532a4c06ba131ed34f12" translate="yes" xml:space="preserve">
          <source>Document Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b99accd9e73ee9bb14ab8b72d9ac2c0cbbe19ce9" translate="yes" xml:space="preserve">
          <source>Document describing the generic syntactic requirements for both Uniform Resource Names (URNs) and Uniform Resource Locators (URLs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56aec556555fb59a8820b30b25469c6d976fb748" translate="yes" xml:space="preserve">
          <source>DocumentType Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71330a4d4ce5df6d4a272f28923ca430bad572ac" translate="yes" xml:space="preserve">
          <source>Documentation for tar archive files, including GNU tar extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbda680f665e0833e2d6c4158a5e8679b7f993a" translate="yes" xml:space="preserve">
          <source>Documentation of the &lt;a href=&quot;zipfile#module-zipfile&quot;&gt;&lt;code&gt;zipfile&lt;/code&gt;&lt;/a&gt; standard module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48574c7a3ee1deed4dd1acbed50852343aee3ba" translate="yes" xml:space="preserve">
          <source>Documentation of the higher-level archiving facilities provided by the standard &lt;a href=&quot;shutil#module-shutil&quot;&gt;&lt;code&gt;shutil&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35469c2ea1370f03c82a5166accde7c0b88be3ab" translate="yes" xml:space="preserve">
          <source>Documentation of underlying &lt;a href=&quot;socket#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54469b6bd39b705e43b8962025cf5f918051f4d6" translate="yes" xml:space="preserve">
          <source>Documentation on the ZIP file format by Phil Katz, the creator of the format and algorithms used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc3f775cf5605ee404503333f0469b1ec2c9db4" translate="yes" xml:space="preserve">
          <source>Documenting XMLRPC server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4e3c304116baf5bc099500ff7f0ff374185591" translate="yes" xml:space="preserve">
          <source>Documents describing the protocol, and sources and binaries for servers implementing it, can all be found at the University of Washington&amp;rsquo;s &lt;em&gt;IMAP Information Center&lt;/em&gt; (&lt;a href=&quot;https://www.washington.edu/imap/&quot;&gt;https://www.washington.edu/imap/&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ac8cee958aa67c5f7fedc6c1005eaeb9fbedf6" translate="yes" xml:space="preserve">
          <source>Does a rollover, as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8626e81074581005f4c901e9c1a54a5825b177" translate="yes" xml:space="preserve">
          <source>Does basic configuration for the logging system by creating a &lt;a href=&quot;logging.handlers#logging.StreamHandler&quot;&gt;&lt;code&gt;StreamHandler&lt;/code&gt;&lt;/a&gt; with a default &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; and adding it to the root logger. The functions &lt;a href=&quot;#logging.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.info&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.warning&quot;&gt;&lt;code&gt;warning()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.error&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.critical&quot;&gt;&lt;code&gt;critical()&lt;/code&gt;&lt;/a&gt; will call &lt;a href=&quot;#logging.basicConfig&quot;&gt;&lt;code&gt;basicConfig()&lt;/code&gt;&lt;/a&gt; automatically if no handlers are defined for the root logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0846e643d2a7724261b5a5d3f96eaae8b761fa" translate="yes" xml:space="preserve">
          <source>DomainFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de01c31d5c21fe5caa3232783ced4d1c02a6b27a" translate="yes" xml:space="preserve">
          <source>Domains in block or allow lists that do not start with a dot must equal the cookie domain to be matched. For example, &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; matches a blacklist entry of &lt;code&gt;&quot;example.com&quot;&lt;/code&gt;, but &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; does not. Domains that do start with a dot are matched by more specific domains too. For example, both &lt;code&gt;&quot;www.example.com&quot;&lt;/code&gt; and &lt;code&gt;&quot;www.coyote.example.com&quot;&lt;/code&gt; match &lt;code&gt;&quot;.example.com&quot;&lt;/code&gt; (but &lt;code&gt;&quot;example.com&quot;&lt;/code&gt; itself does not). IP addresses are an exception, and must match exactly. For example, if blocked_domains contains &lt;code&gt;&quot;192.168.1.2&quot;&lt;/code&gt; and &lt;code&gt;&quot;.168.1.2&quot;&lt;/code&gt;, 192.168.1.2 is blocked, but 193.168.1.2 is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf96a1e7a8abc2d716d1f2663d364ef25b9418d7" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t add &lt;em&gt;Cookie2&lt;/em&gt; header to requests (the presence of this header indicates to the server that we understand &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; cookies).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55793ccb24e71c744183363c60eb5bcab00036d0" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t allow setting cookies whose path doesn&amp;rsquo;t path-match request URI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0646536920e21baacc70a4a35d41604e456fa60e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t allow sites to set two-component domains with country-code top-level domains like &lt;code&gt;.co.uk&lt;/code&gt;, &lt;code&gt;.gov.uk&lt;/code&gt;, &lt;code&gt;.co.nz&lt;/code&gt;.etc. This is far from perfect and isn&amp;rsquo;t guaranteed to work!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8ed9cba02c1b5af492322ff1a5bd489834f04f" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t confuse this with the &lt;a href=&quot;marshal#module-marshal&quot;&gt;&lt;code&gt;marshal&lt;/code&gt;&lt;/a&gt; module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fbf8a3496384473277777e85aca46d6bd68611" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t try to give a CGI script a set-uid mode. This doesn&amp;rsquo;t work on most systems, and is a security liability as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e352bc7716a4ca88225ac742e68f01e718e026" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the &lt;a href=&quot;#ast.NodeVisitor&quot;&gt;&lt;code&gt;NodeVisitor&lt;/code&gt;&lt;/a&gt; if you want to apply changes to nodes during traversal. For this a special visitor exists (&lt;a href=&quot;#ast.NodeTransformer&quot;&gt;&lt;code&gt;NodeTransformer&lt;/code&gt;&lt;/a&gt;) that allows modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b48b909493b3b77706e420cd1f45faa37cba811" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use this module without reading the &lt;a href=&quot;#ssl-security&quot;&gt;Security considerations&lt;/a&gt;. Doing so may lead to a false sense of security, as the default settings of the ssl module are not necessarily appropriate for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4dc45aa9e26e2bd41d47c239adc70dd7e4698c6" translate="yes" xml:space="preserve">
          <source>Donald E., Jeffrey I. Schiller</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b449ef2828479985e2452fffd29b041ff92dd8c" translate="yes" xml:space="preserve">
          <source>Door.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18572a00fb194205c79f6b8ffad6831eacd6462" translate="yes" xml:space="preserve">
          <source>Double quotes: &lt;code&gt;&quot;allows embedded 'single' quotes&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b825c0f075c2ae4499a8ae58525c32123e914501" translate="yes" xml:space="preserve">
          <source>Double quotes: &lt;code&gt;b&quot;still allows embedded 'single' quotes&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9687248b68a4174fe2d16babdd2986cb843c40b2" translate="yes" xml:space="preserve">
          <source>Down-arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d33e22acfcb9ecddb4a85f10607dc4ff49e23c" translate="yes" xml:space="preserve">
          <source>Draft</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5313774fc5d54ca1dbac0e699b905bbbba26e8fe" translate="yes" xml:space="preserve">
          <source>Drag-and-drop support for &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt;. This is experimental and should become deprecated when it is replaced with the Tk DND.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f3f9a467149b2dbbe728abdecdbdc76069eb48" translate="yes" xml:space="preserve">
          <source>Draw a border around the edges of the window. Each parameter specifies the character to use for a specific part of the border; see the table below for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d19779082e62a479ed14856bfdb1ed7f18c5e3" translate="yes" xml:space="preserve">
          <source>Draw a circle with given &lt;em&gt;radius&lt;/em&gt;. The center is &lt;em&gt;radius&lt;/em&gt; units left of the turtle; &lt;em&gt;extent&lt;/em&gt; &amp;ndash; an angle &amp;ndash; determines which part of the circle is drawn. If &lt;em&gt;extent&lt;/em&gt; is not given, draw the entire circle. If &lt;em&gt;extent&lt;/em&gt; is not a full circle, one endpoint of the arc is the current pen position. Draw the arc in counterclockwise direction if &lt;em&gt;radius&lt;/em&gt; is positive, otherwise in clockwise direction. Finally the direction of the turtle is changed by the amount of &lt;em&gt;extent&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9f78f1407fa6442fb02c776b4e87b4667a669b" translate="yes" xml:space="preserve">
          <source>Draw a circular dot with diameter &lt;em&gt;size&lt;/em&gt;, using &lt;em&gt;color&lt;/em&gt;. If &lt;em&gt;size&lt;/em&gt; is not given, the maximum of pensize+4 and 2*pensize is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d0344e7ff511ab866aef27f35e30da12db6af3" translate="yes" xml:space="preserve">
          <source>Draw a rectangle. The first argument must be a window object; the remaining arguments are coordinates relative to that window. The second and third arguments are the y and x coordinates of the upper left hand corner of the rectangle to be drawn; the fourth and fifth arguments are the y and x coordinates of the lower right hand corner. The rectangle will be drawn using VT100/IBM PC forms characters on terminals that make this possible (including xterm and most other software terminal emulators). Otherwise it will be drawn with ASCII dashes, vertical bars, and plus signs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e720b1654b934e16ab4a5c3395dff71ee2eab6" translate="yes" xml:space="preserve">
          <source>Drawing state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8908dfbd1a90f7318e04a78c865f51ee77db0103" translate="yes" xml:space="preserve">
          <source>Due to limitations in the &lt;code&gt;Expat&lt;/code&gt; library used by &lt;code&gt;pyexpat&lt;/code&gt;, the &lt;code&gt;xmlparser&lt;/code&gt; instance returned can only be used to parse a single XML document. Call &lt;code&gt;ParserCreate&lt;/code&gt; for each document to provide unique parser instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0275bc8b35befce3bfad9a917c9e7ad508f141" translate="yes" xml:space="preserve">
          <source>Due to the chunked encoding specification, empty chunks yielded by an iterator body will be ignored by the chunk-encoder. This is to avoid premature termination of the read of the request by the target server due to malformed encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e61c086a1b16a67c5f900260c35d18d4bb00e5" translate="yes" xml:space="preserve">
          <source>Due to the early negotiation phase of the TLS connection, only limited methods and attributes are usable like &lt;a href=&quot;#ssl.SSLSocket.selected_alpn_protocol&quot;&gt;&lt;code&gt;SSLSocket.selected_alpn_protocol()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.SSLSocket.context&quot;&gt;&lt;code&gt;SSLSocket.context&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#ssl.SSLSocket.getpeercert&quot;&gt;&lt;code&gt;SSLSocket.getpeercert()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.SSLSocket.getpeercert&quot;&gt;&lt;code&gt;SSLSocket.getpeercert()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.SSLSocket.cipher&quot;&gt;&lt;code&gt;SSLSocket.cipher()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;SSLSocket.compress()&lt;/code&gt; methods require that the TLS connection has progressed beyond the TLS Client Hello and therefore will not contain return meaningful values nor can they be called safely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0730ae056616317913542eb7710d1784f15239a" translate="yes" xml:space="preserve">
          <source>Due to the use of &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; as described above, there are potential security risks which result from using the &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to send and receive configurations via sockets. The risks are limited to where multiple users with no mutual trust run code on the same machine; see the &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fd28191d21f7ac96af7a2598a56b2a7fed2474" translate="yes" xml:space="preserve">
          <source>Due to the way the decorator protocol works, a callback function declared this way cannot take any parameters. Instead, any resources to be released must be accessed as closure variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2e4c52874ae980f39833d0bd6768bd0323fd4f" translate="yes" xml:space="preserve">
          <source>Dump the class data as a string in the format of a netrc file. (This discards comments and may reorder the entries.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439b7c1b68ef2b52834db37b6a73b9d923047385" translate="yes" xml:space="preserve">
          <source>Dump the tracebacks of all threads into &lt;em&gt;file&lt;/em&gt;. If &lt;em&gt;all_threads&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, dump only the current thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22af09cc316559d66133b87399c0a38c4090f960" translate="yes" xml:space="preserve">
          <source>Dump the tracebacks of all threads, after a timeout of &lt;em&gt;timeout&lt;/em&gt; seconds, or every &lt;em&gt;timeout&lt;/em&gt; seconds if &lt;em&gt;repeat&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;. If &lt;em&gt;exit&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, call &lt;code&gt;_exit()&lt;/code&gt; with status=1 after dumping the tracebacks. (Note &lt;code&gt;_exit()&lt;/code&gt; exits the process immediately, which means it doesn&amp;rsquo;t do any cleanup like flushing file buffers.) If the function is called twice, the new call replaces previous parameters and resets the timeout. The timer has a sub-second resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0953f02e2e64737942e00a542536186f667eee" translate="yes" xml:space="preserve">
          <source>Dumping the traceback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90aae7e430fa2817e82b75cea83ccfb192f261d9" translate="yes" xml:space="preserve">
          <source>Dumping the traceback on a user signal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3611658d48f19a2ec51c68bd199c34eace02a55f" translate="yes" xml:space="preserve">
          <source>Dumping the tracebacks after a timeout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b22a109bf726c4eb513d42599d86cc74075919c" translate="yes" xml:space="preserve">
          <source>Duplicate a socket and prepare it for sharing with a target process. The target process must be provided with &lt;em&gt;process_id&lt;/em&gt;. The resulting bytes object can then be passed to the target process using some form of interprocess communication and the socket can be recreated there using &lt;a href=&quot;#socket.fromshare&quot;&gt;&lt;code&gt;fromshare()&lt;/code&gt;&lt;/a&gt;. Once this method has been called, it is safe to close the socket since the operating system has already duplicated it for the target process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8871fb7b172ee8410208de389e003b29c2a3b9a" translate="yes" xml:space="preserve">
          <source>Duplicate elements are &lt;em&gt;not&lt;/em&gt; ignored when comparing &lt;em&gt;first&lt;/em&gt; and &lt;em&gt;second&lt;/em&gt;. It verifies whether each element has the same count in both sequences. Equivalent to: &lt;code&gt;assertEqual(Counter(list(first)), Counter(list(second)))&lt;/code&gt; but works with sequences of unhashable objects as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6261f6f0d2ab40a062aa81a3e2c8eff386d6a0c" translate="yes" xml:space="preserve">
          <source>Duplicate file descriptor &lt;em&gt;fd&lt;/em&gt; to &lt;em&gt;fd2&lt;/em&gt;, closing the latter first if necessary. Return &lt;em&gt;fd2&lt;/em&gt;. The new file descriptor is &lt;a href=&quot;#fd-inheritance&quot;&gt;inheritable&lt;/a&gt; by default or non-inheritable if &lt;em&gt;inheritable&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889a8f8c7c99ee1c1b9d552eba33b9db1f6ef6dd" translate="yes" xml:space="preserve">
          <source>Duplicate the file descriptor &lt;em&gt;fd&lt;/em&gt; (an integer as returned by a file object&amp;rsquo;s &lt;code&gt;fileno()&lt;/code&gt; method) and build a socket object from the result. Address family, socket type and protocol number are as for the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function above. The file descriptor should refer to a socket, but this is not checked &amp;mdash; subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9868ddaefa32c9871f4b477dbca6d50aa12695" translate="yes" xml:space="preserve">
          <source>Duplicate the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1057c796a3bda52be52f517af1249d81d336e4bd" translate="yes" xml:space="preserve">
          <source>DuplicateFreeEnum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90a5b94425621edab723374c22d6af5af560415" translate="yes" xml:space="preserve">
          <source>Duplicates the reference on top of the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37773116f5751a7989aff3a01ae26af5226bb51c" translate="yes" xml:space="preserve">
          <source>Duplicates the two references on top of the stack, leaving them in the same order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23531d122060762c19d9fa7db965b70b708f270d" translate="yes" xml:space="preserve">
          <source>Duplicating enum members and values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfef2f63f57cbced5af413a84d928321ccd4c524" translate="yes" xml:space="preserve">
          <source>During asynchronous processing, each mapped channel&amp;rsquo;s &lt;a href=&quot;#asyncore.dispatcher.readable&quot;&gt;&lt;code&gt;readable()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncore.dispatcher.writable&quot;&gt;&lt;code&gt;writable()&lt;/code&gt;&lt;/a&gt; methods are used to determine whether the channel&amp;rsquo;s socket should be added to the list of channels &lt;code&gt;select()&lt;/code&gt;ed or &lt;code&gt;poll()&lt;/code&gt;ed for read and write events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e475528d442e3ae5736dcca583d9176a13e698" translate="yes" xml:space="preserve">
          <source>Dynamic Type Creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ecdb297a5d03af0ed09d7f32b5225a16db07d6" translate="yes" xml:space="preserve">
          <source>Dynamically adding abstract methods to a class, or attempting to modify the abstraction status of a method or class once it is created, are not supported. The &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt; only affects subclasses derived using regular inheritance; &amp;ldquo;virtual subclasses&amp;rdquo; registered with the ABC&amp;rsquo;s &lt;code&gt;register()&lt;/code&gt; method are not affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eba0f202ad83d024c1a994a5349b82499dd6c1f" translate="yes" xml:space="preserve">
          <source>EBCDIC-CP-BE, EBCDIC-CP-CH, IBM500</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd237df64f3b34807e426182cc5fd026a5538720" translate="yes" xml:space="preserve">
          <source>EBCDIC-CP-HE, IBM424</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
