<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="node">
    <body>
      <group id="node">
        <trans-unit id="d0f81aa1380f9f4733f23b21def09dcc23089d6d" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;resolvedTarget&lt;/em&gt; is contained in &lt;em&gt;packageURL&lt;/em&gt;, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f5cc713d0076b8f8c168a8156d8890dbb2300e" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;resolvedURL&lt;/em&gt; contains any percent encodings of &lt;em&gt;&quot;/&quot;&lt;/em&gt; or &lt;em&gt;&quot;\&quot;&lt;/em&gt; (&lt;em&gt;&quot;%2f&quot;&lt;/em&gt; and &lt;em&gt;&quot;%5C&quot;&lt;/em&gt; respectively), then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c5cd03aecf162fd5cc79f200bd54c85bf5ef51" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;scopeURL&lt;/em&gt; ends in a &lt;em&gt;&quot;node_modules&quot;&lt;/em&gt; path segment, return &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32d8a8494066b9c331308a9de76dd6cfdb33e2c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;specifier&lt;/em&gt; is a valid URL, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488b105d4a05d51c891376a14f3cd7430f2c0005" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;subpath&lt;/em&gt; has non-zero length and &lt;em&gt;target&lt;/em&gt; does not end with &lt;em&gt;&quot;/&quot;&lt;/em&gt;, throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eac144fa46e78f012a0b80015514759addbc976" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;target&lt;/em&gt; does not start with &lt;em&gt;&quot;./&quot;&lt;/em&gt;, throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3875ce3373cebbce8bed7ea926620173bf5943b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;target&lt;/em&gt; is a String, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e9d9969ad4fb7cdf18a1301ae7b5b00f519d6b" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;target&lt;/em&gt; or &lt;em&gt;subpath&lt;/em&gt; contain any &lt;em&gt;&quot;node_modules&quot;&lt;/em&gt; segments including &lt;em&gt;&quot;node_modules&quot;&lt;/em&gt; percent-encoding, throw a &lt;em&gt;Module Not Found&lt;/em&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddfda64499ff1f71febb28ebb761f079fbed16c" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;targetValue&lt;/em&gt; is not a String, continue the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746818083e540de70308980c76bffb23bc64c121" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;url&lt;/em&gt; ends in &lt;em&gt;&quot;.cjs&quot;&lt;/em&gt;, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00425f0ac5d3e619c3975396989aaeea52f6f8a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;url&lt;/em&gt; ends in &lt;em&gt;&quot;.mjs&quot;&lt;/em&gt;, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2657e59e2d4c8d4505b3ca335596c032d243a675" translate="yes" xml:space="preserve">
          <source>If Node.js is spawned with an IPC channel, the &lt;code&gt;process.send()&lt;/code&gt; method can be used to send messages to the parent process. Messages will be received as a &lt;a href=&quot;child_process#child_process_event_message&quot;&gt;&lt;code&gt;'message'&lt;/code&gt;&lt;/a&gt; event on the parent's &lt;a href=&quot;child_process#child_process_class_childprocess&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2546faee0b34d4ad8c17f27675b90b30ee617f3b" translate="yes" xml:space="preserve">
          <source>If Node.js was compiled &lt;em&gt;without&lt;/em&gt;&lt;a href=&quot;cli#cli_node_options_options&quot;&gt;&lt;code&gt;NODE_OPTIONS&lt;/code&gt;&lt;/a&gt; support (shown in &lt;a href=&quot;#process_process_config&quot;&gt;&lt;code&gt;process.config&lt;/code&gt;&lt;/a&gt;), &lt;code&gt;process.allowedNodeEnvironmentFlags&lt;/code&gt; will contain what &lt;em&gt;would have&lt;/em&gt; been allowable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bb3d5051fa757d796c052f5fd051a2fe7444a6" translate="yes" xml:space="preserve">
          <source>If Node.js was not spawned with an IPC channel, &lt;code&gt;process.send()&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0480dd820a4caf6a7a01add9db3c1ee81d9d7d2" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; listener is registered or &lt;a href=&quot;#http2_http2_createsecureserver_options_onrequesthandler&quot;&gt;&lt;code&gt;http2.createSecureServer()&lt;/code&gt;&lt;/a&gt; is supplied a callback function, the &lt;code&gt;'checkContinue'&lt;/code&gt; event is emitted each time a request with an HTTP &lt;code&gt;Expect: 100-continue&lt;/code&gt; is received. If this event is not listened for, the server will automatically respond with a status &lt;code&gt;100 Continue&lt;/code&gt; as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6666474bf74c83f95eb13a8a69c877db182322" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#http2_event_request&quot;&gt;&lt;code&gt;'request'&lt;/code&gt;&lt;/a&gt; listener is registered or &lt;a href=&quot;#http2_http2_createserver_options_onrequesthandler&quot;&gt;&lt;code&gt;http2.createServer()&lt;/code&gt;&lt;/a&gt; is supplied a callback function, the &lt;code&gt;'checkContinue'&lt;/code&gt; event is emitted each time a request with an HTTP &lt;code&gt;Expect: 100-continue&lt;/code&gt; is received. If this event is not listened for, the server will automatically respond with a status &lt;code&gt;100 Continue&lt;/code&gt; as appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696d38c8122ee517b2457a839a5b2713312b81a6" translate="yes" xml:space="preserve">
          <source>If a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; is switched into flowing mode and there are no consumers available to handle the data, that data will be lost. This can occur, for instance, when the &lt;code&gt;readable.resume()&lt;/code&gt; method is called without a listener attached to the &lt;code&gt;'data'&lt;/code&gt; event, or when a &lt;code&gt;'data'&lt;/code&gt; event handler is removed from the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bfcfe08560cc38ebb9027a9665da61eb3fd24d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;FileHandle&lt;/code&gt; is not closed using the &lt;code&gt;filehandle.close()&lt;/code&gt; method, it might automatically close the file descriptor and will emit a process warning, thereby helping to prevent memory leaks. Please do not rely on this behavior in your code because it is unreliable and your file may not be closed. Instead, always explicitly close &lt;code&gt;FileHandle&lt;/code&gt;s. Node.js may change this behavior in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7636f5713fef8dfdd138e0285e154aff46051a3c" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Readable&lt;/code&gt; stream pipes into a &lt;code&gt;Writable&lt;/code&gt; stream when &lt;code&gt;Writable&lt;/code&gt; emits an error, the &lt;code&gt;Readable&lt;/code&gt; stream will be unpiped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78672ea6b1dc7ca181368392e827ff3e0f3423b1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;callback&lt;/code&gt; function is provided, it is called with the arguments &lt;code&gt;(error, stdout, stderr)&lt;/code&gt;. On success, &lt;code&gt;error&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. On error, &lt;code&gt;error&lt;/code&gt; will be an instance of &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;error.code&lt;/code&gt; property will be the exit code of the child process while &lt;code&gt;error.signal&lt;/code&gt; will be set to the signal that terminated the process. Any exit code other than &lt;code&gt;0&lt;/code&gt; is considered to be an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71bf697bd9ed17929e16c7fe1ca5b3ec8d9ee88" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;callback&lt;/code&gt; function is provided, the bytes are generated asynchronously and the &lt;code&gt;callback&lt;/code&gt; function is invoked with two arguments: &lt;code&gt;err&lt;/code&gt; and &lt;code&gt;buf&lt;/code&gt;. If an error occurs, &lt;code&gt;err&lt;/code&gt; will be an &lt;code&gt;Error&lt;/code&gt; object; otherwise it is &lt;code&gt;null&lt;/code&gt;. The &lt;code&gt;buf&lt;/code&gt; argument is a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt; containing the generated bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe1f30b4c9b95923fed5f2232de9d45764b8782" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;publicKeyEncoding&lt;/code&gt; or &lt;code&gt;privateKeyEncoding&lt;/code&gt; was specified, this function behaves as if &lt;a href=&quot;#crypto_keyobject_export_options&quot;&gt;&lt;code&gt;keyObject.export()&lt;/code&gt;&lt;/a&gt; had been called on its result. Otherwise, the respective part of the key is returned as a &lt;a href=&quot;#crypto_class_keyobject&quot;&gt;&lt;code&gt;KeyObject&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51deb4bb79f95f2aaa6a873a1acfac78b4899391" translate="yes" xml:space="preserve">
          <source>If a call to &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;stream.write(chunk)&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;, the &lt;code&gt;'drain'&lt;/code&gt; event will be emitted when it is appropriate to resume writing data to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d0f4f13350bd3ee24d918da0e3399f81fec5d4" translate="yes" xml:space="preserve">
          <source>If a child process waits to read all of its input, the child will not continue until this stream has been closed via &lt;code&gt;end()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716b4434ddf0060b829e790aa3148ff698f2d32a" translate="yes" xml:space="preserve">
          <source>If a client connection emits an &lt;code&gt;'error'&lt;/code&gt; event, it will be forwarded here. Listener of this event is responsible for closing/destroying the underlying socket. For example, one may wish to more gracefully close the socket with a custom HTTP response instead of abruptly severing the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9eaec49bed36b6ca87fda5a245016810370aec" translate="yes" xml:space="preserve">
          <source>If a file descriptor is specified as the &lt;code&gt;path&lt;/code&gt;, it will not be closed automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96071afe83eecc5cfcae2d7a7ee17d1e0affb31" translate="yes" xml:space="preserve">
          <source>If a package has no exports, setting &lt;code&gt;&quot;exports&quot;: false&lt;/code&gt; can be used instead of &lt;code&gt;&quot;exports&quot;: {}&lt;/code&gt; to indicate the package does not intend for submodules to be exposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="befb840f0c304a4ba984a452b3cf589e473513c9" translate="yes" xml:space="preserve">
          <source>If a specifier does not have a corresponding argument, it is not replaced:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8cb689864546346536757da11d32272821e8a8" translate="yes" xml:space="preserve">
          <source>If a zero-length string is passed as &lt;code&gt;from&lt;/code&gt; or &lt;code&gt;to&lt;/code&gt;, the current working directory will be used instead of the zero-length strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c0aa7997742e011b6c6546031b1bafcecaca22" translate="yes" xml:space="preserve">
          <source>If accuracy is important, use &lt;code&gt;cluster.settings&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa668d37d6ad8ca97da96b8f2b8381c75117854" translate="yes" xml:space="preserve">
          <source>If additional information is required upon an API returning a failed status, it can be obtained by calling &lt;code&gt;napi_get_last_error_info&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cfeeeefb7ddfea89821aaea3da4b7924a82121" translate="yes" xml:space="preserve">
          <source>If after processing all given &lt;code&gt;path&lt;/code&gt; segments an absolute path has not yet been generated, the current working directory is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8187873900b537e036c18f24394fdf7c2e0317c" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;AssertionError&lt;/code&gt; is thrown and a value is provided for the &lt;code&gt;message&lt;/code&gt; parameter, the value of &lt;code&gt;message&lt;/code&gt; will be appended to the &lt;code&gt;AssertionError&lt;/code&gt; message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b02b176e8a20c608d564c5cc70e6b95982af42" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;EventEmitter&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have at least one listener registered for the &lt;code&gt;'error'&lt;/code&gt; event, and an &lt;code&gt;'error'&lt;/code&gt; event is emitted, the error is thrown, a stack trace is printed, and the Node.js process exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9365a584afade646fe0d5b6c0c7d3bdfc0ab158" translate="yes" xml:space="preserve">
          <source>If an asynchronous operation is needed for logging, it is possible to keep track of what caused the asynchronous operation using the information provided by AsyncHooks itself. The logging should then be skipped when it was the logging itself that caused AsyncHooks callback to call. By doing this the otherwise infinite recursion is broken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79166257f7aba2eefa6b4c14e6926c016bcf315" translate="yes" xml:space="preserve">
          <source>If an error is thrown and it is the same type as that specified by the &lt;code&gt;error&lt;/code&gt; parameter, then an &lt;code&gt;AssertionError&lt;/code&gt; is thrown. If the error is of a different type, or if the &lt;code&gt;error&lt;/code&gt; parameter is undefined, the error is propagated back to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ce67c2f991bd2d7b89402a112bf7ff79f1656d" translate="yes" xml:space="preserve">
          <source>If an error occurs an &lt;code&gt;Error&lt;/code&gt; will be thrown, otherwise the derived key will be returned as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6e1e560aaa002865abca4a1a9306578fe0ed21" translate="yes" xml:space="preserve">
          <source>If an error occurs while attempting to read the file data, the &lt;code&gt;Http2Stream&lt;/code&gt; will be closed using an &lt;code&gt;RST_STREAM&lt;/code&gt; frame using the standard &lt;code&gt;INTERNAL_ERROR&lt;/code&gt; code. If the &lt;code&gt;onError&lt;/code&gt; callback is defined, then it will be called. Otherwise the stream will be destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9e85a9260ce43a2b0e0f5761178c04dc16852e" translate="yes" xml:space="preserve">
          <source>If an uncaught exception occurs during execution of the callback, then &lt;code&gt;after&lt;/code&gt; will run &lt;em&gt;after&lt;/em&gt; the &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted or a &lt;code&gt;domain&lt;/code&gt;'s handler runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9abd45ba34315ef2e5f5a8166fc8ee079e4c8bd9" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;AsyncHook&lt;/code&gt; callbacks throw, the application will print the stack trace and exit. The exit path does follow that of an uncaught exception, but all &lt;code&gt;'uncaughtException'&lt;/code&gt; listeners are removed, thus forcing the process to exit. The &lt;code&gt;'exit'&lt;/code&gt; callbacks will still be called unless the application is run with &lt;code&gt;--abort-on-uncaught-exception&lt;/code&gt;, in which case a stack trace will be printed and the application exits, leaving a core file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c2fb5aeb80ff1e6a756547b4e43eebdf07b06d" translate="yes" xml:space="preserve">
          <source>If any error is encountered during the request (be that with DNS resolution, TCP level errors, or actual HTTP parse errors) an &lt;code&gt;'error'&lt;/code&gt; event is emitted on the returned request object. As with all &lt;code&gt;'error'&lt;/code&gt; events, if no listeners are registered the error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06830b91ba14a727d7329b340f5f6d345019e8ff" translate="yes" xml:space="preserve">
          <source>If any of the accessibility checks fail, an &lt;code&gt;Error&lt;/code&gt; will be thrown. Otherwise, the method will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1c37de1fe1d451576d6332685c82c3afa01dbe" translate="yes" xml:space="preserve">
          <source>If available on the operating system, the following constants are exported in &lt;code&gt;os.constants.dlopen&lt;/code&gt;. See &lt;a href=&quot;http://man7.org/linux/man-pages/man3/dlopen.3.html&quot;&gt;&lt;code&gt;dlopen(3)&lt;/code&gt;&lt;/a&gt; for detailed information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596758a71652411a2826cbd0e26ead1fd7f3fb53" translate="yes" xml:space="preserve">
          <source>If available, dynamically load a pointer to the function using &lt;code&gt;uv_dlsym()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69820efdd034979319e195a688ede9f09c30edb5" translate="yes" xml:space="preserve">
          <source>If binding fails, an &lt;code&gt;'error'&lt;/code&gt; event is generated. In rare case (e.g. attempting to bind with a closed socket), an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; may be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68c86b6833301dfcce43bc788132f9c75a181e6" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;'readable'&lt;/code&gt; and &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; are used at the same time, &lt;code&gt;'readable'&lt;/code&gt; takes precedence in controlling the flow, i.e. &lt;code&gt;'data'&lt;/code&gt; will be emitted only when &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; is called. The &lt;code&gt;readableFlowing&lt;/code&gt; property would become &lt;code&gt;false&lt;/code&gt;. If there are &lt;code&gt;'data'&lt;/code&gt; listeners when &lt;code&gt;'readable'&lt;/code&gt; is removed, the stream will start flowing, i.e. &lt;code&gt;'data'&lt;/code&gt; events will be emitted without calling &lt;code&gt;.resume()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb11ecdf178c1cb711e0a8eae9d9fb2fb97443b" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;encoding&lt;/code&gt; are specified, the allocated &lt;code&gt;Buffer&lt;/code&gt; will be initialized by calling &lt;a href=&quot;#buffer_buf_fill_value_offset_end_encoding&quot;&gt;&lt;code&gt;buf.fill(fill, encoding)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4093e8ebac89975d459aaad8fd6437be71fb3935" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; are specified, the objects are merged, with the &lt;code&gt;options&lt;/code&gt; properties taking precedence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4d968b22b1df3d2e79d51e79be1c024e9931b6" translate="yes" xml:space="preserve">
          <source>If both filename and error object are passed to &lt;code&gt;writeReport()&lt;/code&gt; the error object must be the second parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781d2eb2d380d26e4ab2a5dfd0c0ef2dfe2b3db4" translate="yes" xml:space="preserve">
          <source>If clients advertise support for tickets, the server will send them. The server can disable tickets by supplying &lt;code&gt;require('constants').SSL_OP_NO_TICKET&lt;/code&gt; in &lt;code&gt;secureOptions&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de92f9a3546d5ea09f3d735ebbcce48b7c9578b8" translate="yes" xml:space="preserve">
          <source>If domains are in use, then all &lt;strong&gt;new&lt;/strong&gt;&lt;code&gt;EventEmitter&lt;/code&gt; objects (including Stream objects, requests, responses, etc.) will be implicitly bound to the active domain at the time of their creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3ef976ebda6d70a05ce4c354ddd516615f12d1" translate="yes" xml:space="preserve">
          <source>If either of the following conditions is true, then the literal string &lt;code&gt;//&lt;/code&gt; will be appended to &lt;code&gt;result&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edb794d4a1d426d551d17375aabde00b3477150" translate="yes" xml:space="preserve">
          <source>If either the &lt;code&gt;--no-deprecation&lt;/code&gt; or &lt;code&gt;--no-warnings&lt;/code&gt; command line flags are used, or if the &lt;code&gt;process.noDeprecation&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;&lt;em&gt;prior&lt;/em&gt; to the first deprecation warning, the &lt;code&gt;util.deprecate()&lt;/code&gt; method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98aa649de478c0f47590b643bddfcf1f1c12b6e6" translate="yes" xml:space="preserve">
          <source>If formatting elements (e.g. &lt;code&gt;%d&lt;/code&gt;) are not found in the first string then &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt; is called on each argument and the resulting string values are concatenated. See &lt;a href=&quot;util#util_util_format_format_args&quot;&gt;&lt;code&gt;util.format()&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6daec57d79612028ad2d0945f9175e3244f8b8" translate="yes" xml:space="preserve">
          <source>If given a &lt;code&gt;sandbox&lt;/code&gt; object, the &lt;code&gt;vm.createContext()&lt;/code&gt; method will &lt;a href=&quot;#vm_what_does_it_mean_to_contextify_an_object&quot;&gt;prepare that sandbox&lt;/a&gt; so that it can be used in calls to &lt;a href=&quot;#vm_vm_runincontext_code_contextifiedsandbox_options&quot;&gt;&lt;code&gt;vm.runInContext()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#vm_script_runincontext_contextifiedsandbox_options&quot;&gt;&lt;code&gt;script.runInContext()&lt;/code&gt;&lt;/a&gt;. Inside such scripts, the &lt;code&gt;sandbox&lt;/code&gt; object will be the global object, retaining all of its existing properties but also having the built-in objects and functions any standard &lt;a href=&quot;https://es5.github.io/#x15.1&quot;&gt;global object&lt;/a&gt; has. Outside of scripts run by the vm module, global variables will remain unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79789a5254327b894116d434ddd2c5bab864e280" translate="yes" xml:space="preserve">
          <source>If it is necessary to terminate the Node.js process due to an error condition, throwing an &lt;em&gt;uncaught&lt;/em&gt; error and allowing the process to terminate accordingly is safer than calling &lt;code&gt;process.exit()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d1021878ab098e47def050c750dc4a07325a5f" translate="yes" xml:space="preserve">
          <source>If it is not found there, then it moves to the parent directory, and so on, until the root of the file system is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818c99e33248acd389a413f2d1a026a1130b44fa" translate="yes" xml:space="preserve">
          <source>If listeners are attached or removed using &lt;code&gt;.on('message')&lt;/code&gt;, the port will be &lt;code&gt;ref()&lt;/code&gt;ed and &lt;code&gt;unref()&lt;/code&gt;ed automatically depending on whether listeners for the event exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76636b0f1944e7d4d859fa8d9c5002000eb7958f" translate="yes" xml:space="preserve">
          <source>If no &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; handler is added, then the response will be entirely discarded. However, if a &lt;a href=&quot;#http_event_response&quot;&gt;&lt;code&gt;'response'&lt;/code&gt;&lt;/a&gt; event handler is added, then the data from the response object &lt;strong&gt;must&lt;/strong&gt; be consumed, either by calling &lt;code&gt;response.read()&lt;/code&gt; whenever there is a &lt;code&gt;'readable'&lt;/code&gt; event, or by adding a &lt;code&gt;'data'&lt;/code&gt; handler, or by calling the &lt;code&gt;.resume()&lt;/code&gt; method. Until the data is consumed, the &lt;code&gt;'end'&lt;/code&gt; event will not fire. Also, until the data is read it will consume memory that can eventually lead to a 'process out of memory' error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db48c4caed0a332d402ecbd0b488c664a849a378" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;'timeout'&lt;/code&gt; listener is added to the request, the response, or the server, then &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt;s are destroyed when they time out. If a handler is assigned to the request, the response, or the server's &lt;code&gt;'timeout'&lt;/code&gt; events, timed out sockets must be handled explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dec6a027c28bdbcb29abb4bffcb70b1c450217e" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;'timeout'&lt;/code&gt; listener is added to the request, the response, or the server, then sockets are destroyed when they time out. If a handler is assigned to the request, the response, or the server's &lt;code&gt;'timeout'&lt;/code&gt; events, timed out sockets must be handled explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3355f8e5210700f25827723bdd2c6be50b786d0" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;callback&lt;/code&gt; function is provided and the message cannot be sent, an &lt;code&gt;'error'&lt;/code&gt; event will be emitted by the &lt;a href=&quot;#child_process_child_process&quot;&gt;&lt;code&gt;ChildProcess&lt;/code&gt;&lt;/a&gt; object. This can happen, for instance, when the child process has already exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ea7a606cf8671c22ba56a6c0d8af64a399a3eb" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;path&lt;/code&gt; segments are passed, &lt;code&gt;path.resolve()&lt;/code&gt; will return the absolute path of the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c2de4f19bb732c3f0d152de8a5b8d7d4bffebf" translate="yes" xml:space="preserve">
          <source>If no encoding is specified, then the raw buffer is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588b09130834e51d612150950f7d586519ce31b1" translate="yes" xml:space="preserve">
          <source>If one or more &lt;code&gt;filehandle.read()&lt;/code&gt; calls are made on a file handle and then a &lt;code&gt;filehandle.readFile()&lt;/code&gt; call is made, the data will be read from the current position till the end of the file. It doesn't always read from the beginning of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4cdac4387721b7c6d9782075b4c0d38991bb7d" translate="yes" xml:space="preserve">
          <source>If one or more &lt;code&gt;filehandle.write()&lt;/code&gt; calls are made on a file handle and then a &lt;code&gt;filehandle.writeFile()&lt;/code&gt; call is made, the data will be written from the current position till the end of the file. It doesn't always write from the beginning of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e451e4e3dec3d1e916f8a3d903d896ecce3e5cb" translate="yes" xml:space="preserve">
          <source>If one or more &lt;code&gt;label&lt;/code&gt;s are provided, those are printed first without the additional indentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafad16c3d8a65bb35e08a7835ca2753a62ace44" translate="yes" xml:space="preserve">
          <source>If only one argument is passed to &lt;code&gt;util.format()&lt;/code&gt;, it is returned as it is without any formatting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65eb9aab5f2c0420b47aca35dbc4e5131b16b281" translate="yes" xml:space="preserve">
          <source>If present, &lt;code&gt;error.address&lt;/code&gt; is a string describing the address to which a network connection failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09cdb4b5fc901c93bd81eddf6470508e4d3ad573" translate="yes" xml:space="preserve">
          <source>If present, &lt;code&gt;error.dest&lt;/code&gt; is the file path destination when reporting a file system error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d9083b9c76cf66522d9b360b5cbacf03ff7e17" translate="yes" xml:space="preserve">
          <source>If present, &lt;code&gt;error.info&lt;/code&gt; is an object with details about the error condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b515af4cb1d6427479831ff8c31be0200be62954" translate="yes" xml:space="preserve">
          <source>If present, &lt;code&gt;error.path&lt;/code&gt; is a string containing a relevant invalid pathname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1124d661572f078414a138f0bd00a3bb201f75" translate="yes" xml:space="preserve">
          <source>If present, &lt;code&gt;error.port&lt;/code&gt; is the network connection port that is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4028035ae455f9d1c611d0d9611d12c32c7539df" translate="yes" xml:space="preserve">
          <source>If present, the copy operation will attempt to create a copy-on-write reflink. If the underlying platform does not support copy-on-write, then a fallback copy mechanism is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4565bcf227554bcec4fb67361b463bd0162b40c7" translate="yes" xml:space="preserve">
          <source>If present, the copy operation will attempt to create a copy-on-write reflink. If the underlying platform does not support copy-on-write, then the operation will fail with an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111d49a62014241bc6035d869eb1ed1d88540442" translate="yes" xml:space="preserve">
          <source>If present, the copy operation will fail with an error if the destination path already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873d68575189af0d0837643c7a4f9fafeebaade7" translate="yes" xml:space="preserve">
          <source>If provided, the &lt;code&gt;payload&lt;/code&gt; must be a &lt;code&gt;Buffer&lt;/code&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt; containing 8 bytes of data that will be transmitted with the &lt;code&gt;PING&lt;/code&gt; and returned with the ping acknowledgment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0411c641c6a25de72690be397bf9163af37a5e95" translate="yes" xml:space="preserve">
          <source>If returned as a string, no decoding of the query string is performed. If returned as an object, both keys and values are decoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f5a3d64923e554e03e9538c444b7eb6e64f821" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;0&lt;/code&gt; then V8 will choose an appropriate size of the thread pool based on the number of online processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbbdc2030105ff8389b56a9a53a36b9214cf5d0" translate="yes" xml:space="preserve">
          <source>If set to a non-number value, or set to a negative number, stack traces will not capture any frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2310dc593206400dba7fbfc90d82faac7c44fa3" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;error&lt;/code&gt; can be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt; or a validation function. See &lt;a href=&quot;#assert_assert_throws_fn_error_message&quot;&gt;&lt;code&gt;assert.throws()&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb4684775cedbd549e8f47ef9575c77e254eab8" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;error&lt;/code&gt; can be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, a validation function, a validation object where each property will be tested for strict deep equality, or an instance of error where each property will be tested for strict deep equality including the non-enumerable &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties. When using an object, it is also possible to use a regular expression, when validating against a string property. See below for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca540d2d12b0a2843f6e0a3a615df4b350d599e5" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;error&lt;/code&gt; can be a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions&quot;&gt;&lt;code&gt;RegExp&lt;/code&gt;&lt;/a&gt;, a validation function, an object where each property will be tested for, or an instance of error where each property will be tested for including the non-enumerable &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e483ef4da139406d2cb5576248f8f8dab3da0123" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;message&lt;/code&gt; will be appended to the message provided by the &lt;code&gt;AssertionError&lt;/code&gt; if the &lt;code&gt;fn&lt;/code&gt; call fails to throw or in case the error validation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ef9cb0ba617de6594c16374723716ca8364dd8" translate="yes" xml:space="preserve">
          <source>If specified, &lt;code&gt;message&lt;/code&gt; will be the message provided by the &lt;code&gt;AssertionError&lt;/code&gt; if the &lt;code&gt;asyncFn&lt;/code&gt; fails to reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e438c74edb89edb96e2a5ee192d899ce1fcd06" translate="yes" xml:space="preserve">
          <source>If specified, the &lt;code&gt;callback&lt;/code&gt; function is registered as a handler for the &lt;code&gt;'close'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bce9baa7c1873a9e07cf0b4362eae06b10124e8" translate="yes" xml:space="preserve">
          <source>If specifying a host, make sure that either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e41fd1ae4bbc18c802e9daabd5fdc153bddbd3" translate="yes" xml:space="preserve">
          <source>If still valid, this API returns the &lt;code&gt;napi_value&lt;/code&gt; representing the JavaScript &lt;code&gt;Object&lt;/code&gt; associated with the &lt;code&gt;napi_ref&lt;/code&gt;. Otherwise, result will be NULL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32cb3625f10ae48bf6481f39f73a30285a56adfb" translate="yes" xml:space="preserve">
          <source>If such a function is set, the &lt;a href=&quot;#process_event_uncaughtexception&quot;&gt;&lt;code&gt;'uncaughtException'&lt;/code&gt;&lt;/a&gt; event will not be emitted. If &lt;code&gt;--abort-on-uncaught-exception&lt;/code&gt; was passed from the command line or set through &lt;a href=&quot;v8#v8_v8_setflagsfromstring_flags&quot;&gt;&lt;code&gt;v8.setFlagsFromString()&lt;/code&gt;&lt;/a&gt;, the process will not abort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bf9ca2a5da8cc7d9983f311f9ed193864dab2c" translate="yes" xml:space="preserve">
          <source>If support for older versions is required but a worker object is not required, it is possible to work around the discrepancy by checking the number of arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb44ec0e8892750cd1ebc11186c5c22676779e1" translate="yes" xml:space="preserve">
          <source>If that string is invalid but it begins with a number, the leading number is assigned to &lt;code&gt;port&lt;/code&gt;. If the number lies outside the range denoted above, it is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30817db3d7e89f5a81f3f1220a7022495364630f" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#cli_openssl_config_file&quot;&gt;&lt;code&gt;--openssl-config&lt;/code&gt;&lt;/a&gt; command line option is used, the environment variable is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224cfce345ee060f6c60aaa0a95c75b09e0194c4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;#stream_writable_cork&quot;&gt;&lt;code&gt;writable.cork()&lt;/code&gt;&lt;/a&gt; method is called multiple times on a stream, the same number of calls to &lt;code&gt;writable.uncork()&lt;/code&gt; must be called to flush the buffered data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5b3f12b63f281645322fde5f6167806a56f1ee" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;'frameError'&lt;/code&gt; event is associated with a stream, the stream will be closed and destroyed immediately following the &lt;code&gt;'frameError'&lt;/code&gt; event. If the event is not associated with a stream, the &lt;code&gt;Http2Session&lt;/code&gt; will be shut down immediately following the &lt;code&gt;'frameError'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9d357aaf801d9f4a8827e4487d8d5454ed7da2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--no-deprecation&lt;/code&gt; command-line flag is used, the deprecation warning is suppressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006f0ef98faed2225296f7b925e4b65b6d84cc50" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag is set, or the &lt;code&gt;process.throwDeprecation&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, then an exception will be thrown when the deprecated function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b278313ccedc83446c93058abbe7d110d43e12d4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--throw-deprecation&lt;/code&gt; command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1706a10a4933ed7aef53391f01f86b49fd1f1a47" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--trace-deprecation&lt;/code&gt; command-line flag is used, the deprecation warning is printed to &lt;code&gt;stderr&lt;/code&gt; along with the full stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e05861e85bd6ab01a00f4754a98487ae45fddc5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--trace-deprecation&lt;/code&gt; or &lt;code&gt;--trace-warnings&lt;/code&gt; command line flags are set, or the &lt;code&gt;process.traceDeprecation&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, a warning and a stack trace are printed to &lt;code&gt;stderr&lt;/code&gt; the first time the deprecated function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1727f3bb0330be161d5fae1f1aeea291145a6d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Http2Session&lt;/code&gt; is connected to a &lt;code&gt;TLSSocket&lt;/code&gt;, the &lt;code&gt;originSet&lt;/code&gt; property will return an &lt;code&gt;Array&lt;/code&gt; of origins for which the &lt;code&gt;Http2Session&lt;/code&gt; may be considered authoritative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0455b2b9b3fae766e068922a9250208e4c2af45" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;NODE_PATH&lt;/code&gt; environment variable is set to a colon-delimited list of absolute paths, then Node.js will search those paths for modules if they are not found elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700474149520ec279c7f2339f334a3fbdcf3ac10" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;buffer&lt;/code&gt; argument is provided, one final call to &lt;code&gt;stringDecoder.write()&lt;/code&gt; is performed before returning the remaining input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b698c9ff7e5dfbf0331a5b293d26fbbc739efc5a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ca&lt;/code&gt; option is not given, then Node.js will default to using &lt;a href=&quot;https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt&quot;&gt;Mozilla's publicly trusted list of CAs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac092c034da270f1131edac11ccf7582acc156f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;callback&lt;/code&gt; function is not provided, an error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9daebaf2c04786e5b28ab1e89a86e818076b4d4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;callback&lt;/code&gt; function is not provided, the random bytes are generated synchronously and returned as a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;. An error will be thrown if there is a problem generating the bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec34b8e1e977f8ce019a960434cc75d2f42505d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;decodeStrings&lt;/code&gt; property is explicitly set to &lt;code&gt;false&lt;/code&gt; in the constructor options, then &lt;code&gt;chunk&lt;/code&gt; will remain the same object that is passed to &lt;code&gt;.write()&lt;/code&gt;, and may be a string rather than a &lt;code&gt;Buffer&lt;/code&gt;. This is to support implementations that have an optimized handling for certain string data encodings. In that case, the &lt;code&gt;encoding&lt;/code&gt; argument will indicate the character encoding of the string. Otherwise, the &lt;code&gt;encoding&lt;/code&gt; argument can be safely ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1295a8b2430b9ea40a28497169df9f00a2e30e2f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;destination&lt;/code&gt; is not specified, then &lt;em&gt;all&lt;/em&gt; pipes are detached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61354dd4c096ff86d2604bd1f201639b5280cce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;destination&lt;/code&gt; is specified, but no pipe is set up for it, then the method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9993188edbda0e084b782c4aa4a76c9d01b6aa7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;encoding&lt;/code&gt; option is specified then this function returns a string. Otherwise it returns a buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff21d446a3ab3fe55f4acc6ff2c436094f676d4d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;format&lt;/code&gt; argument is not a format string, the output string's formatting is no longer dependent on the type of the first argument. This change removes previously present quotes from strings that were being output when the first argument was not a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d308fd83eda74dcf99237973ddacf4e7ec8a2f56" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;input&lt;/code&gt; stream was paused &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;SIGTSTP&lt;/code&gt; request, this event will not be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f38c1cd9e3b259bd034f504426ea5d58e45d76" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;inputEncoding&lt;/code&gt; is not provided, &lt;code&gt;key&lt;/code&gt; is expected to be a &lt;a href=&quot;buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;TypedArray&lt;/code&gt;, or &lt;code&gt;DataView&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f18955efde58f4d26c872da376a7f9e3385d261" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;key&lt;/code&gt; option is an array, individual entries do not need a &lt;code&gt;passphrase&lt;/code&gt; property anymore. &lt;code&gt;Array&lt;/code&gt; entries can also just be &lt;code&gt;string&lt;/code&gt;s or &lt;code&gt;Buffer&lt;/code&gt;s now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7c9ccb6d11a43cf334112f22066ada11047f33" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;module.status&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;, this property contains the exception thrown by the module during evaluation. If the status is anything else, accessing this property will result in a thrown exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf37dd1b51403923bcd466d830080d91ad10e133" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;napi_status&lt;/code&gt; returned by a function is &lt;code&gt;napi_ok&lt;/code&gt; then no exception is pending and no additional action is required. If the &lt;code&gt;napi_status&lt;/code&gt; returned is anything other than &lt;code&gt;napi_ok&lt;/code&gt; or &lt;code&gt;napi_pending_exception&lt;/code&gt;, in order to try to recover and continue instead of simply returning immediately, &lt;a href=&quot;#n_api_napi_is_exception_pending&quot;&gt;&lt;code&gt;napi_is_exception_pending&lt;/code&gt;&lt;/a&gt; must be called in order to determine if an exception is pending or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc8d76112ea7024d3371b71a0a23d16ae790953" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;package.json&lt;/code&gt;&lt;code&gt;&quot;type&quot;&lt;/code&gt; field is omitted, a &lt;code&gt;.js&lt;/code&gt; file in &lt;code&gt;&quot;main&quot;&lt;/code&gt; will be interpreted as CommonJS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa3feef5b60811f6f8ebc29d870eae549b34115" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;path&lt;/code&gt; is a zero-length string, &lt;code&gt;'.'&lt;/code&gt; is returned, representing the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caefa5d65799f6063d04ea3b55a098cbb95b16f1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;payload&lt;/code&gt; argument is not specified, the default payload will be the 64-bit timestamp (little endian) marking the start of the &lt;code&gt;PING&lt;/code&gt; duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a081c5a11aa40b34615e3cce298d430f402bf1f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;readable.read()&lt;/code&gt; method returns a chunk of data, a &lt;code&gt;'data'&lt;/code&gt; event will also be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fa64dbbc3f8f47eda565fe9f322b381a972060" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;readline.Interface&lt;/code&gt; was created with &lt;code&gt;output&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; are not written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f06f1032594fee7846b4022ca4197486666d19" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;readline.Interface&lt;/code&gt; was created with &lt;code&gt;output&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; the &lt;code&gt;query&lt;/code&gt; is not written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea07f7457e9a5cfe604444ae829144970387f4e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;readline.Interface&lt;/code&gt; was created with &lt;code&gt;output&lt;/code&gt; set to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; the prompt is not written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba79ac22562343c78ffca177acce56493df85de" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;size&lt;/code&gt; argument is not specified, all of the data contained in the internal buffer will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70594489f12159c87f362c4ae69f4758215eb7f3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;small-icu&lt;/code&gt; option is used, one can still provide additional locale data at runtime so that the JS methods would work for all ICU locales. Assuming the data file is stored at &lt;code&gt;/some/directory&lt;/code&gt;, it can be made available to ICU through either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba838b5589301149a5649376c001bb8fe7dc3b5b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;stream&lt;/code&gt; is a &lt;a href=&quot;tty&quot;&gt;TTY&lt;/a&gt;, then it must be in raw mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1276a263a11dfdba0d780253f069d70f3b07760" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;type&lt;/code&gt; argument is left undefined, Node will autodetect &lt;code&gt;target&lt;/code&gt; type and automatically select &lt;code&gt;dir&lt;/code&gt; or &lt;code&gt;file&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641da75986b0d3dd6bb805434236735b6993a166" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.hash&lt;/code&gt; property is a string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb858e55085a16c94af20594b643c53b5b10f40" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.host&lt;/code&gt; property is &lt;code&gt;undefined&lt;/code&gt; then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5dce93f29b648ece229c6c340c77b112847288" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.hostname&lt;/code&gt; is a string, it is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6379b09c4b00ec95bd4b96e589e7705fbb8d936e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.pathname&lt;/code&gt; property is a string that is not an empty string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca80e3e9a84bf98df702fab84776425b14d0b5b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.pathname&lt;/code&gt;&lt;em&gt;does not start&lt;/em&gt; with an ASCII forward slash (&lt;code&gt;/&lt;/code&gt;), then the literal string &lt;code&gt;'/'&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3af2d3b60b1f8ba28c24cc690ad1da17edcb49" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.port&lt;/code&gt; property value is truthy, and &lt;code&gt;urlObject.hostname&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b1873a47a5cccbbcaf141e8099ba0a23f167af" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;urlObject.search&lt;/code&gt; property is &lt;code&gt;undefined&lt;/code&gt; and if the &lt;code&gt;urlObject.query&lt;/code&gt; property is an &lt;code&gt;Object&lt;/code&gt;, the literal string &lt;code&gt;?&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt; followed by the output of calling the &lt;a href=&quot;querystring&quot;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module's &lt;code&gt;stringify()&lt;/code&gt; method passing the value of &lt;code&gt;urlObject.query&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c7d9851a36c60f4fede5c50c0daefebfda6c63" translate="yes" xml:space="preserve">
          <source>If the Chrome browser is older than 66.0.3345.0, use &lt;code&gt;inspector.html&lt;/code&gt; instead of &lt;code&gt;js_app.html&lt;/code&gt; in the above URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2ee6d4306a883909c0a1794605af868e4cc47a" translate="yes" xml:space="preserve">
          <source>If the Node.js process is spawned with an IPC channel (see the &lt;a href=&quot;child_process&quot;&gt;Child Process&lt;/a&gt; and &lt;a href=&quot;cluster&quot;&gt;Cluster&lt;/a&gt; documentation), the &lt;code&gt;'disconnect'&lt;/code&gt; event will be emitted when the IPC channel is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac963e7d4525abb2736d0e62cf6c19d77ecc05c0" translate="yes" xml:space="preserve">
          <source>If the Node.js process is spawned with an IPC channel (see the &lt;a href=&quot;child_process&quot;&gt;Child Process&lt;/a&gt; and &lt;a href=&quot;cluster&quot;&gt;Cluster&lt;/a&gt; documentation), the &lt;code&gt;'message'&lt;/code&gt; event is emitted whenever a message sent by a parent process using &lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;childprocess.send()&lt;/code&gt;&lt;/a&gt; is received by the child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0f656d281b0270653c917de8907695d4af188c" translate="yes" xml:space="preserve">
          <source>If the Node.js process is spawned with an IPC channel (see the &lt;a href=&quot;child_process&quot;&gt;Child Process&lt;/a&gt; and &lt;a href=&quot;cluster&quot;&gt;Cluster&lt;/a&gt; documentation), the &lt;code&gt;process.connected&lt;/code&gt; property will return &lt;code&gt;true&lt;/code&gt; so long as the IPC channel is connected and will return &lt;code&gt;false&lt;/code&gt; after &lt;code&gt;process.disconnect()&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde62fe89a34a0451adb24c7df715d4ac04255b2" translate="yes" xml:space="preserve">
          <source>If the Node.js process is spawned with an IPC channel (see the &lt;a href=&quot;child_process&quot;&gt;Child Process&lt;/a&gt; and &lt;a href=&quot;cluster&quot;&gt;Cluster&lt;/a&gt; documentation), the &lt;code&gt;process.disconnect()&lt;/code&gt; method will close the IPC channel to the parent process, allowing the child process to exit gracefully once there are no other connections keeping it alive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1535633e9356c88e44a5953c4a93db18cf738ad" translate="yes" xml:space="preserve">
          <source>If the Node.js process was not spawned with an IPC channel, &lt;code&gt;process.disconnect()&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3cb24c470cc8f1c846968b69afb26cb137c284" translate="yes" xml:space="preserve">
          <source>If the Node.js process was spawned with an IPC channel (see the &lt;a href=&quot;child_process&quot;&gt;Child Process&lt;/a&gt; documentation), the &lt;code&gt;process.channel&lt;/code&gt; property is a reference to the IPC channel. If no IPC channel exists, this property is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43857629c05db580aaa4aaa5f6033f044e6c6ced" translate="yes" xml:space="preserve">
          <source>If the REPL is run as standalone program, it is also possible to change the REPL's &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;inspection defaults&lt;/a&gt; from inside the REPL by using the &lt;code&gt;inspect.replDefaults&lt;/code&gt; property which mirrors the &lt;code&gt;defaultOptions&lt;/code&gt; from &lt;a href=&quot;util#util_util_inspect_object_options&quot;&gt;&lt;code&gt;util.inspect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a67121ef3a61432b20d90cd8e0ab29a6212306" translate="yes" xml:space="preserve">
          <source>If the Timer or &lt;code&gt;EventEmitter&lt;/code&gt; was already bound to a domain, it is removed from that one, and bound to this one instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c562e1358dbc4b2fc2fd9fd83e9076c18598405" translate="yes" xml:space="preserve">
          <source>If the accessibility check is successful, the &lt;code&gt;Promise&lt;/code&gt; is resolved with no value. If any of the accessibility checks fail, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;code&gt;Error&lt;/code&gt; object. The following example checks if the file &lt;code&gt;/etc/passwd&lt;/code&gt; can be read and written by the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b610dfa520e94a9fdf2b30dda8919b3eebe300" translate="yes" xml:space="preserve">
          <source>If the child process intercepts and handles the &lt;code&gt;SIGTERM&lt;/code&gt; signal and does not exit, the parent process will still wait until the child process has exited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b740fc3fb496e053111a8c519d9ac732b0ce92" translate="yes" xml:space="preserve">
          <source>If the child was spawned with &lt;code&gt;stdio[0]&lt;/code&gt; set to anything other than &lt;code&gt;'pipe'&lt;/code&gt;, then this will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b39b748847e4c67b790f33ece88c22fff5bd35" translate="yes" xml:space="preserve">
          <source>If the child was spawned with &lt;code&gt;stdio[1]&lt;/code&gt; set to anything other than &lt;code&gt;'pipe'&lt;/code&gt;, then this will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ee59da22385decb4ae9026bc663f921fbe54b3" translate="yes" xml:space="preserve">
          <source>If the child was spawned with &lt;code&gt;stdio[2]&lt;/code&gt; set to anything other than &lt;code&gt;'pipe'&lt;/code&gt;, then this will be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da188d4f2c13854a7aa73240ff25eb0ff7f7df83" translate="yes" xml:space="preserve">
          <source>If the data to be written can be generated or fetched on demand, it is recommended to encapsulate the logic into a &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; and use &lt;a href=&quot;#stream_readable_pipe_destination_options&quot;&gt;&lt;code&gt;stream.pipe()&lt;/code&gt;&lt;/a&gt;. However, if calling &lt;code&gt;write()&lt;/code&gt; is preferred, it is possible to respect backpressure and avoid memory issues using the &lt;a href=&quot;#stream_event_drain&quot;&gt;&lt;code&gt;'drain'&lt;/code&gt;&lt;/a&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61145810afb5945c541a709b46cbd9081fc8c5a0" translate="yes" xml:space="preserve">
          <source>If the exact filename is not found, then Node.js will attempt to load the required filename with the added extensions: &lt;code&gt;.js&lt;/code&gt;, &lt;code&gt;.json&lt;/code&gt;, and finally &lt;code&gt;.node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2258fb88100a5f7eff8cc7faff56de080446a859" translate="yes" xml:space="preserve">
          <source>If the file at &lt;em&gt;packageURL&lt;/em&gt; does not parse as valid JSON, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdeb3f1ca2d8b92cbd0a1be61e5a215e42cd48a6" translate="yes" xml:space="preserve">
          <source>If the file at &lt;em&gt;pjsonURL&lt;/em&gt; does not exist, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da2c4a4757077189503883db4e6e527ad0ac53c" translate="yes" xml:space="preserve">
          <source>If the file at &lt;em&gt;resolvedMain&lt;/em&gt; exists, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515992658a030cb2361fa29326a06b3cc8b741f2" translate="yes" xml:space="preserve">
          <source>If the file at &lt;em&gt;resolvedURL&lt;/em&gt; does not exist, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd28ea88a40c2bd663df8d30e3acd434308cc86" translate="yes" xml:space="preserve">
          <source>If the file previously was shorter than &lt;code&gt;len&lt;/code&gt; bytes, it is extended, and the extended part is filled with null bytes (&lt;code&gt;'\0'&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95ff524435a90bae8bf6af198f46ee202155faf" translate="yes" xml:space="preserve">
          <source>If the file referred to by the file descriptor was larger than &lt;code&gt;len&lt;/code&gt; bytes, only the first &lt;code&gt;len&lt;/code&gt; bytes will be retained in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4496f3dce2ffd4403c03b2fc30701caf9fb83647" translate="yes" xml:space="preserve">
          <source>If the file was larger than &lt;code&gt;len&lt;/code&gt; bytes, only the first &lt;code&gt;len&lt;/code&gt; bytes will be retained in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e0f0d83d0baa5625a952fe8bc081211ede0c9c" translate="yes" xml:space="preserve">
          <source>If the final write of a &lt;code&gt;fill()&lt;/code&gt; operation falls on a multi-byte character, then only the bytes of that character that fit into &lt;code&gt;buf&lt;/code&gt; are written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bfae18f785239e10de241385230fcb58569d05" translate="yes" xml:space="preserve">
          <source>If the first argument does not contain a valid format specifier, &lt;code&gt;util.format()&lt;/code&gt; returns a string that is the concatenation of all arguments separated by spaces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757a2bf0797ec25c73b79618040a87cf69150154" translate="yes" xml:space="preserve">
          <source>If the folder at &lt;em&gt;packageURL&lt;/em&gt; does not exist, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818763c6083260346cbce59d04afb4c3653559bd" translate="yes" xml:space="preserve">
          <source>If the format is &lt;code&gt;'pem'&lt;/code&gt;, the &lt;code&gt;'key'&lt;/code&gt; may also be an X.509 certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146a422b15c52df2fe42a2ad9ffc62b28c5857bf" translate="yes" xml:space="preserve">
          <source>If the full certificate chain was requested, each certificate will include an &lt;code&gt;issuerCertificate&lt;/code&gt; property containing an object representing its issuer's certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0387fb588dc77347f4082fa56c7b681a051b0ff" translate="yes" xml:space="preserve">
          <source>If the function is not available, provide an alternate implementation that does not use the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53cf262095ac45fa556dab4e32bb6ff3d6e6375" translate="yes" xml:space="preserve">
          <source>If the given &lt;code&gt;path&lt;/code&gt; is a zero-length string, &lt;code&gt;false&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e3d776630cc8905c1ff9df803e1e77bcd6232c" translate="yes" xml:space="preserve">
          <source>If the given path does not exist, &lt;code&gt;require()&lt;/code&gt; will throw an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; with its &lt;code&gt;code&lt;/code&gt; property set to &lt;code&gt;'MODULE_NOT_FOUND'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea6180b6690cd9c141dea7ea55172dbbbd3d0da" translate="yes" xml:space="preserve">
          <source>If the internal read buffer is below the &lt;code&gt;highWaterMark&lt;/code&gt;, and the stream is not currently reading, then calling &lt;code&gt;stream.read(0)&lt;/code&gt; will trigger a low-level &lt;a href=&quot;#stream_readable_read_size_1&quot;&gt;&lt;code&gt;stream._read()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94623dec42ca41e55b62b9990af5e5333283824a" translate="yes" xml:space="preserve">
          <source>If the length of &lt;em&gt;packageSpecifier&lt;/em&gt; is greater than the length of &lt;em&gt;packageName&lt;/em&gt;, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17178a0e608fa47d68854e07ee706e59b8601df4" translate="yes" xml:space="preserve">
          <source>If the list has no items, or if the &lt;code&gt;totalLength&lt;/code&gt; is 0, then a new zero-length &lt;code&gt;Buffer&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a7cfdcf2ecac620e067b3903c7f336b3b1a1ef" translate="yes" xml:space="preserve">
          <source>If the loop is terminated with &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, or &lt;code&gt;return&lt;/code&gt;, &lt;a href=&quot;#readline_rl_close&quot;&gt;&lt;code&gt;rl.close()&lt;/code&gt;&lt;/a&gt; will be called. In other words, iterating over a &lt;code&gt;readline.Interface&lt;/code&gt; will always consume the input stream fully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bceba7bdffad615ad25d0a02fc1ae50546e463d9" translate="yes" xml:space="preserve">
          <source>If the loop terminates with a &lt;code&gt;break&lt;/code&gt; or a &lt;code&gt;throw&lt;/code&gt;, the stream will be destroyed. In other terms, iterating over a stream will consume the stream fully. The stream will be read in chunks of size equal to the &lt;code&gt;highWaterMark&lt;/code&gt; option. In the code example above, data will be in a single chunk if the file has less then 64kb of data because no &lt;code&gt;highWaterMark&lt;/code&gt; option is provided to &lt;a href=&quot;fs#fs_fs_createreadstream_path_options&quot;&gt;&lt;code&gt;fs.createReadStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b818f0c6afbca493ff9a19fa9609c515ca828403" translate="yes" xml:space="preserve">
          <source>If the module identifier passed to &lt;code&gt;require()&lt;/code&gt; is not a &lt;a href=&quot;#modules_core_modules&quot;&gt;core&lt;/a&gt; module, and does not begin with &lt;code&gt;'/'&lt;/code&gt;, &lt;code&gt;'../'&lt;/code&gt;, or &lt;code&gt;'./'&lt;/code&gt;, then Node.js starts at the parent directory of the current module, and adds &lt;code&gt;/node_modules&lt;/code&gt;, and attempts to load the module from that location. Node.js will not append &lt;code&gt;node_modules&lt;/code&gt; to a path already ending in &lt;code&gt;node_modules&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5890e21cec685ed58fcf1519311a188e9030c9ce" translate="yes" xml:space="preserve">
          <source>If the module will be loaded multiple times during the lifetime of the Node.js process, use the &lt;code&gt;NAPI_MODULE_INIT&lt;/code&gt; macro to initialize the module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0add70a68c352ca1f1ff5b2c44879360ea5a65e7" translate="yes" xml:space="preserve">
          <source>If the nearest parent &lt;code&gt;package.json&lt;/code&gt; lacks a &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, or contains &lt;code&gt;&quot;type&quot;: &quot;commonjs&quot;&lt;/code&gt;, extensionless and &lt;code&gt;.js&lt;/code&gt; files are treated as CommonJS. If the volume root is reached and no &lt;code&gt;package.json&lt;/code&gt; is found, Node.js defers to the default, a &lt;code&gt;package.json&lt;/code&gt; with no &lt;code&gt;&quot;type&quot;&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a879f054c5d68d376a9ec6f0087a480eedd3cce6" translate="yes" xml:space="preserve">
          <source>If the number exceeds the range of the 32 bit integer, then the result is truncated to the equivalent of the bottom 32 bits. This can result in a large positive number becoming a negative number if the value is &amp;gt; 2^31 -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e897c2b05d260b0b8e93ea4b285545b463fa7585" translate="yes" xml:space="preserve">
          <source>If the object cannot be serialized, an exception should be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6442a98f87242a39ce04a31ab601184ec0f676c" translate="yes" xml:space="preserve">
          <source>If the private key is encrypted, a &lt;code&gt;passphrase&lt;/code&gt; must be specified. The length of the passphrase is limited to 1024 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae9b624e6a4cc8658387bd2cdd003cae8d4f7da" translate="yes" xml:space="preserve">
          <source>If the process times out or has a non-zero exit code, this method will throw an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; that will include the full result of the underlying &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fbfb27e02d409cf17783265e877eb2aec63754" translate="yes" xml:space="preserve">
          <source>If the process times out or has a non-zero exit code, this method will throw. The &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object will contain the entire result from &lt;a href=&quot;#child_process_child_process_spawnsync_command_args_options&quot;&gt;&lt;code&gt;child_process.spawnSync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ac036a75e1c80eaeb6589cc2f6c7d6f88f1b96" translate="yes" xml:space="preserve">
          <source>If the returned &lt;code&gt;Module&lt;/code&gt;'s &lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'unlinked'&lt;/code&gt;, this method will be recursively called on the returned &lt;code&gt;Module&lt;/code&gt; with the same provided &lt;code&gt;linker&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9c8f5a9405be2773921d9bcb73c378bf6e3921" translate="yes" xml:space="preserve">
          <source>If the same optional &lt;code&gt;code&lt;/code&gt; is supplied in multiple calls to &lt;code&gt;util.deprecate()&lt;/code&gt;, the warning will be emitted only once for that &lt;code&gt;code&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d45b9459a85646bf2862e34f3076974fe78efd" translate="yes" xml:space="preserve">
          <source>If the socket has not been previously bound with a call to &lt;code&gt;bind&lt;/code&gt;, the socket is assigned a random port number and is bound to the &quot;all interfaces&quot; address (&lt;code&gt;'0.0.0.0'&lt;/code&gt; for &lt;code&gt;udp4&lt;/code&gt; sockets, &lt;code&gt;'::0'&lt;/code&gt; for &lt;code&gt;udp6&lt;/code&gt; sockets.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c6a8b07a563abb32426fd418fe170dc48b8de5" translate="yes" xml:space="preserve">
          <source>If the third argument is a number, then it specifies &lt;code&gt;flags&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71076ea98f3be098c307fc8cb0dfd8e11760e9ca" translate="yes" xml:space="preserve">
          <source>If the underlying functionality is not available for some reason, then &lt;code&gt;fs.watch&lt;/code&gt; will not be able to function. For example, watching files or directories can be unreliable, and in some cases impossible, on network file systems (NFS, SMB, etc), or host file systems when using virtualization software such as Vagrant, Docker, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3ff204ad926a2c406374c6beb30edbec4c9766" translate="yes" xml:space="preserve">
          <source>If the value assigned to the &lt;code&gt;href&lt;/code&gt; property is not a valid URL, a &lt;code&gt;TypeError&lt;/code&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90c5e203932eeac8e47f38ad8c3558ce56bbc29" translate="yes" xml:space="preserve">
          <source>If the value can not be converted to a number, or is &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt; or &lt;code&gt;-Infinity&lt;/code&gt;, an &lt;code&gt;Error&lt;/code&gt; will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e83e66ed225563a93b5f2e19b29f3cc812a630" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;urlObject.hash&lt;/code&gt;&lt;em&gt;does not start&lt;/em&gt; with the ASCII hash (&lt;code&gt;#&lt;/code&gt;) character, the literal string &lt;code&gt;#&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354b6656744ff8bd4e88e85fb2306a95eb8ab63e" translate="yes" xml:space="preserve">
          <source>If the value of &lt;code&gt;urlObject.search&lt;/code&gt;&lt;em&gt;does not start&lt;/em&gt; with the ASCII question mark (&lt;code&gt;?&lt;/code&gt;) character, the literal string &lt;code&gt;?&lt;/code&gt; is appended to &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4697b6330115dae4c26d7a6e08df799526336ff3" translate="yes" xml:space="preserve">
          <source>If the value of the &lt;code&gt;urlObject.auth&lt;/code&gt; property is truthy, and either &lt;code&gt;urlObject.host&lt;/code&gt; or &lt;code&gt;urlObject.hostname&lt;/code&gt; are not &lt;code&gt;undefined&lt;/code&gt;, the value of &lt;code&gt;urlObject.auth&lt;/code&gt; will be coerced into a string and appended to &lt;code&gt;result&lt;/code&gt; followed by the literal string &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982c7fbef3736e828821d5101501a8b60a1d8d1f" translate="yes" xml:space="preserve">
          <source>If the value of the redirection is &lt;code&gt;true&lt;/code&gt; the default searching algorithms will be used to find the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f9f5955d6e364ca71ad55b75bc35cbe0c3b38b" translate="yes" xml:space="preserve">
          <source>If the value of the redirection is a string, it will be resolved relative to the manifest and then immediately be used without searching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8c0c616296b45074943e0b708b25c1e5487f9d" translate="yes" xml:space="preserve">
          <source>If the value provided is larger than V8's maximum, then the largest value will be chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c44d16087d66714415a16ae315be1645f738f6" translate="yes" xml:space="preserve">
          <source>If the values are deeply and strictly equal, an &lt;code&gt;AssertionError&lt;/code&gt; is thrown with a &lt;code&gt;message&lt;/code&gt; property set equal to the value of the &lt;code&gt;message&lt;/code&gt; parameter. If the &lt;code&gt;message&lt;/code&gt; parameter is undefined, a default error message is assigned. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3feda4cbb8c69da0787d3c4d0edc4afedfe6d516" translate="yes" xml:space="preserve">
          <source>If the values are deeply equal, an &lt;code&gt;AssertionError&lt;/code&gt; is thrown with a &lt;code&gt;message&lt;/code&gt; property set equal to the value of the &lt;code&gt;message&lt;/code&gt; parameter. If the &lt;code&gt;message&lt;/code&gt; parameter is undefined, a default error message is assigned. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191272d17c26c51430c4e20e797f1caf915bd356" translate="yes" xml:space="preserve">
          <source>If the values are equal, an &lt;code&gt;AssertionError&lt;/code&gt; is thrown with a &lt;code&gt;message&lt;/code&gt; property set equal to the value of the &lt;code&gt;message&lt;/code&gt; parameter. If the &lt;code&gt;message&lt;/code&gt; parameter is undefined, a default error message is assigned. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d94f31db81c1f973e291da465a433690b463c0" translate="yes" xml:space="preserve">
          <source>If the values are not equal, an &lt;code&gt;AssertionError&lt;/code&gt; is thrown with a &lt;code&gt;message&lt;/code&gt; property set equal to the value of the &lt;code&gt;message&lt;/code&gt; parameter. If the &lt;code&gt;message&lt;/code&gt; parameter is undefined, a default error message is assigned. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b2da7358e1f618e30530614396b01dadfaf51f" translate="yes" xml:space="preserve">
          <source>If the values are not strictly equal, an &lt;code&gt;AssertionError&lt;/code&gt; is thrown with a &lt;code&gt;message&lt;/code&gt; property set equal to the value of the &lt;code&gt;message&lt;/code&gt; parameter. If the &lt;code&gt;message&lt;/code&gt; parameter is undefined, a default error message is assigned. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff0a2446e1cfa20e6d7e26d965437d954f3efc4" translate="yes" xml:space="preserve">
          <source>If the values are strictly equal, an &lt;code&gt;AssertionError&lt;/code&gt; is thrown with a &lt;code&gt;message&lt;/code&gt; property set equal to the value of the &lt;code&gt;message&lt;/code&gt; parameter. If the &lt;code&gt;message&lt;/code&gt; parameter is undefined, a default error message is assigned. If the &lt;code&gt;message&lt;/code&gt; parameter is an instance of an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; then it will be thrown instead of the &lt;code&gt;AssertionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da602dad1348c5515a5368e54eed719f37be707a" translate="yes" xml:space="preserve">
          <source>If there are any remaining open &lt;code&gt;Http2Streams&lt;/code&gt; associated with the &lt;code&gt;Http2Session&lt;/code&gt;, those will also be destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b740bcc2b16e4bb9b682fe0bd542a05605c049" translate="yes" xml:space="preserve">
          <source>If there are more arguments passed to the &lt;code&gt;util.format()&lt;/code&gt; method than the number of specifiers, the extra arguments are concatenated to the returned string, separated by spaces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698579d27a4ddffd0cd3fee0cd725708e9b8c0c0" translate="yes" xml:space="preserve">
          <source>If there are multiple, nested domains bound to the current execution context, &lt;code&gt;exit()&lt;/code&gt; will exit any domains nested within this domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6b904b20e2c573a6f4d896aa8a2fa420127eee" translate="yes" xml:space="preserve">
          <source>If there are no pipe destinations, by calling the &lt;a href=&quot;#stream_readable_pause&quot;&gt;&lt;code&gt;stream.pause()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53903dbbffb3efe8650a918ab139a66c8a9d7384" translate="yes" xml:space="preserve">
          <source>If there are pipe destinations, by removing all pipe destinations. Multiple pipe destinations may be removed by calling the &lt;a href=&quot;#stream_readable_unpipe_destination&quot;&gt;&lt;code&gt;stream.unpipe()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808ed805596f02baf1205d0104edc17496833e97" translate="yes" xml:space="preserve">
          <source>If there are specific reasons to use &lt;code&gt;process.dlopen()&lt;/code&gt; (for instance, to specify dlopen flags), it's often useful to use &lt;a href=&quot;modules#modules_require_resolve_request_options&quot;&gt;&lt;code&gt;require.resolve()&lt;/code&gt;&lt;/a&gt; to look up the module's path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc44255b34b29834468d6a2fcd2f10d21a794e9" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;'timeout'&lt;/code&gt; event listener on the Server object, then it will be called with the timed-out socket as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fc1803c513e97d473fe51f97314f53ca219f6c" translate="yes" xml:space="preserve">
          <source>If there is an &lt;code&gt;original[util.promisify.custom]&lt;/code&gt; property present, &lt;code&gt;promisify&lt;/code&gt; will return its value, see &lt;a href=&quot;#util_custom_promisified_functions&quot;&gt;Custom promisified functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f0364f8de171c5fc72a4af4e61f0c6915879a3" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;package.json&lt;/code&gt; file present in the directory, or if the &lt;code&gt;'main'&lt;/code&gt; entry is missing or cannot be resolved, then Node.js will attempt to load an &lt;code&gt;index.js&lt;/code&gt; or &lt;code&gt;index.node&lt;/code&gt; file out of that directory. For example, if there was no &lt;code&gt;package.json&lt;/code&gt; file in the above example, then &lt;code&gt;require('./some-library')&lt;/code&gt; would attempt to load:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0cb8b2e9ee0148b30bf42005c017e69093ae44" translate="yes" xml:space="preserve">
          <source>If there is no local certificate, an empty object will be returned. If the socket has been destroyed, &lt;code&gt;null&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d88cc35a1e5f4ab2434014beef29a6b8b2436e3" translate="yes" xml:space="preserve">
          <source>If these attempts fail, then Node.js will report the entire module as missing with the default error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e89fda5beccddb8f1c71631aaa97e426bae7a5" translate="yes" xml:space="preserve">
          <source>If this flag is passed, the behavior can still be set to not abort through &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt; (and through usage of the &lt;code&gt;domain&lt;/code&gt; module that uses it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39b5b9c13b1ddf3e432e4ec5ca8712b07563b19" translate="yes" xml:space="preserve">
          <source>If this method is &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesWritten&lt;/code&gt; and &lt;code&gt;buffers&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848ee8754e17695db5eea6ee56dc831672698103" translate="yes" xml:space="preserve">
          <source>If this method is called and &lt;a href=&quot;#http2_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; has not been called, it will switch to implicit header mode and flush the implicit headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863ede4dd3d457c897371e8202fbec82f0818194" translate="yes" xml:space="preserve">
          <source>If this method is called and &lt;a href=&quot;#http_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt; has not been called, it will directly write the supplied header values onto the network channel without caching internally, and the &lt;a href=&quot;#http_response_getheader_name&quot;&gt;&lt;code&gt;response.getHeader()&lt;/code&gt;&lt;/a&gt; on the header will not yield the expected result. If progressive population of headers is desired with potential future retrieval and modification, use &lt;a href=&quot;#http_response_setheader_name_value&quot;&gt;&lt;code&gt;response.setHeader()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bf717520bed1a535f84bb455286f68447c2d06" translate="yes" xml:space="preserve">
          <source>If this method is called and &lt;a href=&quot;#http_response_writehead_statuscode_statusmessage_headers&quot;&gt;&lt;code&gt;response.writeHead()&lt;/code&gt;&lt;/a&gt; has not been called, it will switch to implicit header mode and flush the implicit headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b52c6bec23c453cf6476176e31528205155635" translate="yes" xml:space="preserve">
          <source>If this method is called without a label, the most recently started profile is stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8ccda14c2d5edd4fce7c787763bcd45d9f4a10" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, and &lt;code&gt;all&lt;/code&gt; is not set to &lt;code&gt;true&lt;/code&gt;, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;family&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc491ff668f0ad005b523fb4afb065a33fd0ce04" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesRead&lt;/code&gt; and &lt;code&gt;buffer&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d137547d5ca92dc63e7c2007a92f1e7211e167ad" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;bytesWritten&lt;/code&gt; and &lt;code&gt;buffer&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5bb143ee298fdd24e036558635695a1e0cd676" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;hostname&lt;/code&gt; and &lt;code&gt;service&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603337fd667fc9ebe65d8742a13478c7c173636d" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;publicKey&lt;/code&gt; and &lt;code&gt;privateKey&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f19615a76df308a4eaaa08102fe8029d4cd7da" translate="yes" xml:space="preserve">
          <source>If this method is invoked as its &lt;a href=&quot;util#util_util_promisify_original&quot;&gt;&lt;code&gt;util.promisify()&lt;/code&gt;&lt;/a&gt;ed version, it returns a &lt;code&gt;Promise&lt;/code&gt; for an &lt;code&gt;Object&lt;/code&gt; with &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; properties. The returned &lt;code&gt;ChildProcess&lt;/code&gt; instance is attached to the &lt;code&gt;Promise&lt;/code&gt; as a &lt;code&gt;child&lt;/code&gt; property. In case of an error (including any error resulting in an exit code other than 0), a rejected promise is returned, with the same &lt;code&gt;error&lt;/code&gt; object given in the callback, but with two additional properties &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19ad792e4d182ce79c59a9ca23b96f01cbba405" translate="yes" xml:space="preserve">
          <source>If this option is chosen, most internationalization features mentioned above will be &lt;strong&gt;unavailable&lt;/strong&gt; in the resulting &lt;code&gt;node&lt;/code&gt; binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500c44aa740b1f808b7a0f2ab5d42a89495c80b0" translate="yes" xml:space="preserve">
          <source>If this program is run with &lt;code&gt;NODE_DEBUG=foo&lt;/code&gt; in the environment, then it will output something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae04778b2127a4288d498c5fee83b1c180563316" translate="yes" xml:space="preserve">
          <source>If this thread was spawned as a &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;, this will be a &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; allowing communication with the parent thread. Messages sent using &lt;code&gt;parentPort.postMessage()&lt;/code&gt; will be available in the parent thread using &lt;code&gt;worker.on('message')&lt;/code&gt;, and messages sent from the parent thread using &lt;code&gt;worker.postMessage()&lt;/code&gt; will be available in this thread using &lt;code&gt;parentPort.on('message')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc56c6fa0ffaae3cb37166a046e6a592fac511fd" translate="yes" xml:space="preserve">
          <source>If this was in a folder at &lt;code&gt;./some-library&lt;/code&gt;, then &lt;code&gt;require('./some-library')&lt;/code&gt; would attempt to load &lt;code&gt;./some-library/lib/some-library.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24447a04296622991f6bf6fd22ce1eff8075cb0" translate="yes" xml:space="preserve">
          <source>If true, the &lt;code&gt;Immediate&lt;/code&gt; object will keep the Node.js event loop active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfdfe9d5a5d4ec04917fff9485b8abe04f4523b" translate="yes" xml:space="preserve">
          <source>If true, the &lt;code&gt;Timeout&lt;/code&gt; object will keep the Node.js event loop active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d30f4ae940d81fef9d58173f937c6e90488a310" translate="yes" xml:space="preserve">
          <source>If using Perfect Forward Secrecy using &lt;code&gt;ECDHE&lt;/code&gt;, Diffie-Hellman parameters are not required and a default ECDHE curve will be used. The &lt;code&gt;ecdhCurve&lt;/code&gt; property can be used when creating a TLS Server to specify the list of names of supported curves to use, see &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f435cf016bb3848af3be13125a0963095befa409" translate="yes" xml:space="preserve">
          <source>If wait is &lt;code&gt;true&lt;/code&gt;, will block until a client has connected to the inspect port and flow control has been passed to the debugger client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868930280894191b54d63d2127ac6fdebf557223" translate="yes" xml:space="preserve">
          <source>Immediate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef70f1951457da5e8c2ceb794366acfb2b9f1c46" translate="yes" xml:space="preserve">
          <source>Immediately close the session. All pending message callbacks will be called with an error. &lt;a href=&quot;#inspector_session_connect&quot;&gt;&lt;code&gt;session.connect()&lt;/code&gt;&lt;/a&gt; will need to be called to be able to send messages again. Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99a34a2338aa3ca62a62f452af4cdab32edc49b" translate="yes" xml:space="preserve">
          <source>Immediately terminates the &lt;code&gt;Http2Session&lt;/code&gt; and the associated &lt;code&gt;net.Socket&lt;/code&gt; or &lt;code&gt;tls.TLSSocket&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7830d9e83bdb571cca1e50f542e8516184aeb2bf" translate="yes" xml:space="preserve">
          <source>Implementation considerations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634778886a41465d653b4d3a526333668ae37b90" translate="yes" xml:space="preserve">
          <source>Implementation does not test the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots&quot;&gt;&lt;code&gt;[[Prototype]]&lt;/code&gt;&lt;/a&gt; of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6d9cd007a22716a471f704b1a6cc1b7798fc03" translate="yes" xml:space="preserve">
          <source>Implementations of this type of function should avoid making any N-API calls that could result in the execution of JavaScript or interaction with JavaScript objects. Most often, any code that needs to make N-API calls should be made in &lt;code&gt;napi_async_complete_callback&lt;/code&gt; instead. Avoid using the &lt;code&gt;napi_env&lt;/code&gt; parameter in the execute callback as it will likely execute JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf48c742a3c8cab6d288870f7e9087dc4b107e3" translate="yes" xml:space="preserve">
          <source>Implementing a Duplex Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db85aacb4826a9682bbc4755f7b18287b8212229" translate="yes" xml:space="preserve">
          <source>Implementing a Readable Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a17668a54393ad9d8a2818f383b3289899b323" translate="yes" xml:space="preserve">
          <source>Implementing a Transform Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03961dad0ca35871550bb64b77b7602fe30a905c" translate="yes" xml:space="preserve">
          <source>Implementing a Writable Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b72b192149e114c030ffa08bb6d7f33fa1da0cd" translate="yes" xml:space="preserve">
          <source>Implications of ABI Stability</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5868306e35f5ed89a827d7088b357d35fdb7d9c" translate="yes" xml:space="preserve">
          <source>Implicit Binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c43897c9e7ad17a3fff4ee301c220a1f8ca4ce" translate="yes" xml:space="preserve">
          <source>Implicit binding routes thrown errors and &lt;code&gt;'error'&lt;/code&gt; events to the &lt;code&gt;Domain&lt;/code&gt;'s &lt;code&gt;'error'&lt;/code&gt; event, but does not register the &lt;code&gt;EventEmitter&lt;/code&gt; on the &lt;code&gt;Domain&lt;/code&gt;. Implicit binding only takes care of thrown errors and &lt;code&gt;'error'&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eccc8d808af7ec8041e3741f9d5bd71307f86ba" translate="yes" xml:space="preserve">
          <source>Implicit conversion of variable value to string is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac758850e503d7a4b5403c1e169e629ed31d72d" translate="yes" xml:space="preserve">
          <source>Importing Web Assembly modules is supported under the &lt;code&gt;--experimental-wasm-modules&lt;/code&gt; flag, allowing any &lt;code&gt;.wasm&lt;/code&gt; files to be imported as normal modules while also supporting their module imports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7345227f7378a415d72e584bcb83fb5f70dfbf9d" translate="yes" xml:space="preserve">
          <source>Importing assert directly was not recommended as the exposed functions use loose equality checks. The deprecation was revoked because use of the &lt;code&gt;assert&lt;/code&gt; module is not discouraged, and the deprecation caused end user confusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719f27a57e84457bcd0681fc9a845a1f86dcefe3" translate="yes" xml:space="preserve">
          <source>Impose new restrictions on &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, throwing more appropriate errors in cases when we cannot reasonably handle the input values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0a6a13b4155e379d15b548250d87be9841ca3e" translate="yes" xml:space="preserve">
          <source>In &quot;old&quot; streams mode the &lt;code&gt;stdin&lt;/code&gt; stream is paused by default, so one must call &lt;code&gt;process.stdin.resume()&lt;/code&gt; to read from it. Note also that calling &lt;code&gt;process.stdin.resume()&lt;/code&gt; itself would switch stream to &quot;old&quot; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27679f0db56c1c9325293a60e2506baf9182ffc5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, this function stops the current thread rather than the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5b31a009a869ce0f6f2aa3aa25bde8d5d67b27" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;entry.js&lt;/code&gt; script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ea6fb909458a63c93528b9278d2aea405239a1" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;myobject.cc&lt;/code&gt;, implement the various methods that are to be exposed. Below, the method &lt;code&gt;plusOne()&lt;/code&gt; is exposed by adding it to the constructor's prototype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b569f0f01f808badd954c94c4b5ec2b3df4219a8" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;myobject.h&lt;/code&gt;, a new public method is added to allow access to private values after unwrapping the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd614b7bbedcda99d367f704661d8a38b80d19b" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;myobject.h&lt;/code&gt;, the static method &lt;code&gt;NewInstance()&lt;/code&gt; is added to handle instantiating the object. This method takes the place of using &lt;code&gt;new&lt;/code&gt; in JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a521caf867f14b672bcba06c835d82f3666953" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;strict&lt;/code&gt; mode, &lt;code&gt;assert&lt;/code&gt; functions use the comparison in the corresponding strict functions. For example, &lt;a href=&quot;#assert_assert_deepequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepEqual()&lt;/code&gt;&lt;/a&gt; will behave like &lt;a href=&quot;#assert_assert_deepstrictequal_actual_expected_message&quot;&gt;&lt;code&gt;assert.deepStrictEqual()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbda2fb906abaf4d990f04c00aee85dda9e4e31b" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;strict&lt;/code&gt; mode, error messages for objects display a diff. In legacy mode, error messages for objects display the objects, often truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cedb49bba43339d6f4d8ab4643cc70bc8770d4d" translate="yes" xml:space="preserve">
          <source>In HTTP/2, the request path, hostname, protocol, and method are represented as special headers prefixed with the &lt;code&gt;:&lt;/code&gt; character (e.g. &lt;code&gt;':path'&lt;/code&gt;). These special headers will be included in the &lt;code&gt;request.headers&lt;/code&gt; object. Care must be taken not to inadvertently modify these special headers or errors may occur. For instance, removing all headers from the request will cause errors to occur:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cd10f4ffa78b420a67631c95f5747ddf8e5371" translate="yes" xml:space="preserve">
          <source>In Node.js 0.10, the &lt;a href=&quot;#stream_class_stream_readable&quot;&gt;&lt;code&gt;Readable&lt;/code&gt;&lt;/a&gt; class was added. For backward compatibility with older Node.js programs, &lt;code&gt;Readable&lt;/code&gt; streams switch into &quot;flowing mode&quot; when a &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; event handler is added, or when the &lt;a href=&quot;#stream_readable_resume&quot;&gt;&lt;code&gt;stream.resume()&lt;/code&gt;&lt;/a&gt; method is called. The effect is that, even when not using the new &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; method and &lt;a href=&quot;#stream_event_readable&quot;&gt;&lt;code&gt;'readable'&lt;/code&gt;&lt;/a&gt; event, it is no longer necessary to worry about losing &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2907f0887fd67060d1c8b859ffab65821bd5c8a" translate="yes" xml:space="preserve">
          <source>In V8, a context is an execution environment that allows separate, unrelated, JavaScript applications to run in a single instance of V8. You must explicitly specify the context in which you want any JavaScript code to be run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f608ecc99c06cfa50baaffc2c3cd8fff338f4fc" translate="yes" xml:space="preserve">
          <source>In a successful request, the following events will be emitted in the following order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf790810b2507f884c03af267a9c95a2dbc7ba26" translate="yes" xml:space="preserve">
          <source>In a worker this sends a message to the master. It is identical to &lt;code&gt;process.send()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f9cefb5509de84f4d3b8e9ae50db89a7da0b91" translate="yes" xml:space="preserve">
          <source>In a worker, &lt;code&gt;process.disconnect&lt;/code&gt; exists, but it is not this function; it is &lt;a href=&quot;child_process#child_process_subprocess_disconnect&quot;&gt;&lt;code&gt;disconnect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6635bab64752609670a0d11b7b0ac6ba30c036b1" translate="yes" xml:space="preserve">
          <source>In a worker, &lt;code&gt;process.kill()&lt;/code&gt; exists, but it is not this function; it is &lt;a href=&quot;process#process_process_kill_pid_signal&quot;&gt;&lt;code&gt;kill()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188dc51b267f1ce409fcd61f18bf1777940cfa1c" translate="yes" xml:space="preserve">
          <source>In a worker, this function will close all servers, wait for the &lt;code&gt;'close'&lt;/code&gt; event on those servers, and then disconnect the IPC channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45585efffb25f706fc168893be3eee9fb3732c3" translate="yes" xml:space="preserve">
          <source>In accordance with browser conventions, all properties of &lt;code&gt;URL&lt;/code&gt; objects are implemented as getters and setters on the class prototype, rather than as data properties on the object itself. Thus, unlike &lt;a href=&quot;#url_legacy_urlobject&quot;&gt;legacy &lt;code&gt;urlObject&lt;/code&gt;&lt;/a&gt;s, using the &lt;code&gt;delete&lt;/code&gt; keyword on any properties of &lt;code&gt;URL&lt;/code&gt; objects (e.g. &lt;code&gt;delete myURL.protocol&lt;/code&gt;, &lt;code&gt;delete myURL.pathname&lt;/code&gt;, etc) has no effect but will still return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7734f0b3567b3c7b9193631a31766ec4ead09b" translate="yes" xml:space="preserve">
          <source>In addition to being accessible through &lt;code&gt;util.inspect.custom&lt;/code&gt;, this symbol is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for&quot;&gt;registered globally&lt;/a&gt; and can be accessed in any environment as &lt;code&gt;Symbol.for('nodejs.util.inspect.custom')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a017a14a50b8af7f35bbfe35a7128002e7b0433" translate="yes" xml:space="preserve">
          <source>In addition to defining an alias, subpaths not defined by &lt;code&gt;&quot;exports&quot;&lt;/code&gt; will throw when an attempt is made to import them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87788a1c64b835765d4d327b936fd17de0ba8095" translate="yes" xml:space="preserve">
          <source>In addition to new &lt;code&gt;Readable&lt;/code&gt; streams switching into flowing mode, pre-0.10 style streams can be wrapped in a &lt;code&gt;Readable&lt;/code&gt; class using the &lt;a href=&quot;#stream_readable_wrap_stream&quot;&gt;&lt;code&gt;readable.wrap()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531fe4364b08e0a91d004f6c008a9907fd321d5e" translate="yes" xml:space="preserve">
          <source>In addition to returning the resolved file URL value, the resolve hook also returns a &lt;code&gt;format&lt;/code&gt; property specifying the module format of the resolved module. This can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b72f820929e77bac018c0ca5b3cc4d77951c0c" translate="yes" xml:space="preserve">
          <source>In addition to wrapping and returning C++ objects, it is possible to pass wrapped objects around by unwrapping them with the Node.js helper function &lt;code&gt;node::ObjectWrap::Unwrap&lt;/code&gt;. The following examples shows a function &lt;code&gt;add()&lt;/code&gt; that can take two &lt;code&gt;MyObject&lt;/code&gt; objects as input arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3250b3c9156a53b11995d8b61bc7651346b38dd6" translate="yes" xml:space="preserve">
          <source>In an earlier version of the Node.js &lt;code&gt;cluster&lt;/code&gt;, a boolean property with the name &lt;code&gt;suicide&lt;/code&gt; was added to the &lt;code&gt;Worker&lt;/code&gt; object. The intent of this property was to provide an indication of how and why the &lt;code&gt;Worker&lt;/code&gt; instance exited. In Node.js 6.0.0, the old property was deprecated and replaced with a new &lt;a href=&quot;cluster#cluster_worker_exitedafterdisconnect&quot;&gt;&lt;code&gt;worker.exitedAfterDisconnect&lt;/code&gt;&lt;/a&gt; property. The old property name did not precisely describe the actual semantics and was unnecessarily emotion-laden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f34b6c8dddeb170b4ea2c2a91a4f0f3bf29b30" translate="yes" xml:space="preserve">
          <source>In asynchronous code, the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event is emitted when the list of unhandled rejections grows, and the &lt;code&gt;'rejectionHandled'&lt;/code&gt; event is emitted when the list of unhandled rejections shrinks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fe6e0dbb3ad0e70ec0d1b125ead1922456d17e" translate="yes" xml:space="preserve">
          <source>In browsers, the top-level scope is the global scope. This means that within the browser &lt;code&gt;var something&lt;/code&gt; will define a new global variable. In Node.js this is different. The top-level scope is not the global scope; &lt;code&gt;var something&lt;/code&gt; inside a Node.js module will be local to that module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0d858774c88480d91a106fadc1779bc8dd52cc" translate="yes" xml:space="preserve">
          <source>In busy processes, use the asynchronous versions of these calls. The synchronous versions will block the entire process until they complete, halting all connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dde02e444feeff7342a6c14a7993d14efd44e6" translate="yes" xml:space="preserve">
          <source>In case an option value happens to contain a space (for example a path listed in &lt;code&gt;--require&lt;/code&gt;), it must be escaped using double quotes. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a549d05af2ccfc0ca015a5a981e3076d4f98a52b" translate="yes" xml:space="preserve">
          <source>In case of an error status code, additional information can be obtained using &lt;code&gt;napi_get_last_error_info&lt;/code&gt;. More information can be found in the error handling section &lt;a href=&quot;#n_api_error_handling&quot;&gt;Error Handling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a7a3354fb49e4ea54bdc9ce39be38347f08d3e" translate="yes" xml:space="preserve">
          <source>In case of an error, the &lt;code&gt;err.code&lt;/code&gt; will be one of &lt;a href=&quot;errors#errors_common_system_errors&quot;&gt;Common System Errors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83638801ee92420c039136960543463b06296385" translate="yes" xml:space="preserve">
          <source>In case of inactivity, the rules defined in &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt; apply. However, that inactivity based timeout would still allow the connection to be kept open if the headers are being sent very slowly (by default, up to a byte per 2 minutes). In order to prevent this, whenever header data arrives an additional check is made that more than &lt;code&gt;server.headersTimeout&lt;/code&gt; milliseconds has not passed since the connection was established. If the check fails, a &lt;code&gt;'timeout'&lt;/code&gt; event is emitted on the server object, and (by default) the socket is destroyed. See &lt;a href=&quot;#http_server_timeout&quot;&gt;&lt;code&gt;server.timeout&lt;/code&gt;&lt;/a&gt; for more information on how timeout behavior can be customized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe24f759353e3c9ef13728cf5d98486ed424be5" translate="yes" xml:space="preserve">
          <source>In case of no callback function were assigned, a new &lt;code&gt;ERR_INVALID_CALLBACK&lt;/code&gt; error will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d18d7e0676cf5071ee5c355fa6cde45cfbf4f6" translate="yes" xml:space="preserve">
          <source>In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Probably either &lt;code&gt;'1.1'&lt;/code&gt; or &lt;code&gt;'1.0'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288453ee826f1533d87079e6da5e8a9939a1c3c7" translate="yes" xml:space="preserve">
          <source>In case of server request, the HTTP version sent by the client. In the case of client response, the HTTP version of the connected-to server. Returns &lt;code&gt;'2.0'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a083755276d9eeea7f1c7589a28aafc0f42f80d" translate="yes" xml:space="preserve">
          <source>In cases where a return value other than &lt;code&gt;napi_ok&lt;/code&gt; or &lt;code&gt;napi_pending_exception&lt;/code&gt; is returned, &lt;a href=&quot;#n_api_napi_is_exception_pending&quot;&gt;&lt;code&gt;napi_is_exception_pending&lt;/code&gt;&lt;/a&gt; must be called to check if an exception is pending. See the section on exceptions for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3352c4c1cafe79135726b64a02a391ead0f41a7a" translate="yes" xml:space="preserve">
          <source>In cases where it is not known in advance if &lt;code&gt;input&lt;/code&gt; is an absolute URL and a &lt;code&gt;base&lt;/code&gt; is provided, it is advised to validate that the &lt;code&gt;origin&lt;/code&gt; of the &lt;code&gt;URL&lt;/code&gt; object is what is expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ee0f45e9598117687157f2af97b1b0166cabde" translate="yes" xml:space="preserve">
          <source>In cases where there is more than one &lt;code&gt;.cc&lt;/code&gt; file, simply add the additional filename to the &lt;code&gt;sources&lt;/code&gt; array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54ba662593323ae67f27f49552b1bb4dbd0fd34" translate="yes" xml:space="preserve">
          <source>In certain cases, &lt;code&gt;require('.')&lt;/code&gt; could resolve outside the package directory. This behavior has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf7779b67ab0aad41f5916dd6b3a65b83dcba67" translate="yes" xml:space="preserve">
          <source>In contrast, the following example turns off the default warning output and adds a custom handler to the &lt;code&gt;'warning'&lt;/code&gt; event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3587bc97949af37236db6b9a0a1d14eae323d5" translate="yes" xml:space="preserve">
          <source>In custom builds from non-release versions of the source tree, only the &lt;code&gt;name&lt;/code&gt; property may be present. The additional properties should not be relied upon to exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327449f48d0f91fc55b3b3b7eb5d0b9b76cc0b33" translate="yes" xml:space="preserve">
          <source>In each module, the &lt;code&gt;module&lt;/code&gt; free variable is a reference to the object representing the current module. For convenience, &lt;code&gt;module.exports&lt;/code&gt; is also accessible via the &lt;code&gt;exports&lt;/code&gt; module-global. &lt;code&gt;module&lt;/code&gt; is not actually a global but rather local to each module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37db4cd4b343ff7b0d4d0a02ce9acc6d525c6d68" translate="yes" xml:space="preserve">
          <source>In each of the previous examples, an &lt;code&gt;Error&lt;/code&gt; object is generated internally by &lt;code&gt;process.emitWarning()&lt;/code&gt; and passed through to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6707c880c79f3eb01db7774cdf36344d80a74bb4" translate="yes" xml:space="preserve">
          <source>In flowing mode, data is read from the underlying system automatically and provided to an application as quickly as possible using events via the &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd353fe48ae2599b92caa0441615c03958d5543e" translate="yes" xml:space="preserve">
          <source>In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087f71387196c21047e8de00ada98ef5f02eb85e" translate="yes" xml:space="preserve">
          <source>In general, check for the existence of a file only if the file won&amp;rsquo;t be used directly, for example when its existence is a signal from another process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0780a6d7f3a8d6f30bfe170e7ebcad79382accb5" translate="yes" xml:space="preserve">
          <source>In general, greater memory usage options will mean that Node.js has to make fewer calls to &lt;code&gt;zlib&lt;/code&gt; because it will be able to process more data on each &lt;code&gt;write&lt;/code&gt; operation. So, this is another factor that affects the speed, at the cost of memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a19be887817fbe3d3f39ecc27f73a30b8611a2" translate="yes" xml:space="preserve">
          <source>In general, the &lt;code&gt;readable.pipe()&lt;/code&gt; and &lt;code&gt;'data'&lt;/code&gt; event mechanisms are easier to understand than the &lt;code&gt;'readable'&lt;/code&gt; event. However, handling &lt;code&gt;'readable'&lt;/code&gt; might result in increased throughput.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29f7ea80cfdc8edcce7cf9808c9e14cd5f2e801" translate="yes" xml:space="preserve">
          <source>In line with OpenSSL's recommendation to use a more modern algorithm instead of &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; it is recommended that developers derive a key and IV on their own using &lt;a href=&quot;#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;#crypto_crypto_createcipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createCipheriv()&lt;/code&gt;&lt;/a&gt; to create the &lt;code&gt;Cipher&lt;/code&gt; object. Users should not use ciphers with counter mode (e.g. CTR, GCM, or CCM) in &lt;code&gt;crypto.createCipher()&lt;/code&gt;. A warning is emitted when they are used in order to avoid the risk of IV reuse that causes vulnerabilities. For the case when IV is reused in GCM, see &lt;a href=&quot;https://github.com/nonce-disrespect/nonce-disrespect&quot;&gt;Nonce-Disrespecting Adversaries&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4427809c2da46e37a477a14b3a6dae947f069aba" translate="yes" xml:space="preserve">
          <source>In line with OpenSSL's recommendation to use a more modern algorithm instead of &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/crypto/EVP_BytesToKey.html&quot;&gt;&lt;code&gt;EVP_BytesToKey&lt;/code&gt;&lt;/a&gt; it is recommended that developers derive a key and IV on their own using &lt;a href=&quot;#crypto_crypto_scrypt_password_salt_keylen_options_callback&quot;&gt;&lt;code&gt;crypto.scrypt()&lt;/code&gt;&lt;/a&gt; and to use &lt;a href=&quot;#crypto_crypto_createdecipheriv_algorithm_key_iv_options&quot;&gt;&lt;code&gt;crypto.createDecipheriv()&lt;/code&gt;&lt;/a&gt; to create the &lt;code&gt;Decipher&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16244b364da53115174b4fd4f6aa18f7d9fb44a" translate="yes" xml:space="preserve">
          <source>In many cases when an N-API function is called and an exception is already pending, the function will return immediately with a &lt;code&gt;napi_status&lt;/code&gt; of &lt;code&gt;napi_pending_exception&lt;/code&gt;. However, this is not the case for all functions. N-API allows a subset of the functions to be called to allow for some minimal cleanup before returning to JavaScript. In that case, &lt;code&gt;napi_status&lt;/code&gt; will reflect the status for the function. It will not reflect previous pending exceptions. To avoid confusion, check the error status after every function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4aeb489e9e86e74a64fc02a38fd7bd2ebbd390" translate="yes" xml:space="preserve">
          <source>In many cases, however, it is necessary that the handles remain valid for either a shorter or longer lifespan than that of the native method. The sections which follow describe the N-API functions that can be used to change the handle lifespan from the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd8e7e54f1e17d20c23615bc834dee206f45159" translate="yes" xml:space="preserve">
          <source>In most cases, there should be little to no reason for an application to manually create instances of the &lt;code&gt;tty.ReadStream&lt;/code&gt; and &lt;code&gt;tty.WriteStream&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc3a0789b533753ef17917c6e76c2314768199f" translate="yes" xml:space="preserve">
          <source>In most operating systems, listening to the &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv6_address#Unspecified_address&quot;&gt;unspecified IPv6 address&lt;/a&gt; (&lt;code&gt;::&lt;/code&gt;) may cause the &lt;code&gt;net.Server&lt;/code&gt; to also listen on the &lt;a href=&quot;https://en.wikipedia.org/wiki/0.0.0.0&quot;&gt;unspecified IPv4 address&lt;/a&gt; (&lt;code&gt;0.0.0.0&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9fa045058fbc4f76eea96849e5ca18e4b0477e" translate="yes" xml:space="preserve">
          <source>In most situations, it is not actually necessary to call &lt;code&gt;process.exit()&lt;/code&gt; explicitly. The Node.js process will exit on its own &lt;em&gt;if there is no additional work pending&lt;/em&gt; in the event loop. The &lt;code&gt;process.exitCode&lt;/code&gt; property can be set to tell the process which exit code to use when the process exits gracefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba73ffda62f255ad07619c0e3bdc1d844b17d1f" translate="yes" xml:space="preserve">
          <source>In order to avoid the garbage collection overhead of creating many individually allocated &lt;code&gt;Buffer&lt;/code&gt; instances, by default allocations under 4KB are sliced from a single larger allocated object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07817ef1abfbcf964409ae72ee3eff00eaa052ac" translate="yes" xml:space="preserve">
          <source>In order to be loaded from multiple Node.js environments, such as a main thread and a Worker thread, an add-on needs to either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b26d492c1627fc6654e900f98b2c495fce1ecb" translate="yes" xml:space="preserve">
          <source>In order to create a mixed &lt;a href=&quot;https&quot;&gt;HTTPS&lt;/a&gt; and HTTP/2 server, refer to the &lt;a href=&quot;#http2_alpn_negotiation&quot;&gt;ALPN negotiation&lt;/a&gt; section. Upgrading from non-tls HTTP/1 servers is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9608ef8288365a7cade4d998db1fc0243461174f" translate="yes" xml:space="preserve">
          <source>In order to do this, it is necessary to get a reference to the &lt;code&gt;module&lt;/code&gt; object. Since &lt;code&gt;require()&lt;/code&gt; returns the &lt;code&gt;module.exports&lt;/code&gt;, and the &lt;code&gt;module&lt;/code&gt; is typically &lt;em&gt;only&lt;/em&gt; available within a specific module's code, it must be explicitly exported in order to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34523f8cc30ff0b87b5cd5c6314ffe804fe892b1" translate="yes" xml:space="preserve">
          <source>In order to expose a function as part of the add-on's module exports, set the newly created function on the exports object. A sample module might look as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be94aad2d7524c4d29b1665cfabd8e1b693ef9b" translate="yes" xml:space="preserve">
          <source>In order to make modules available to the Node.js REPL, it might be useful to also add the &lt;code&gt;/usr/lib/node_modules&lt;/code&gt; folder to the &lt;code&gt;$NODE_PATH&lt;/code&gt; environment variable. Since the module lookups using &lt;code&gt;node_modules&lt;/code&gt; folders are all relative, and based on the real path of the files making the calls to &lt;code&gt;require()&lt;/code&gt;, the packages themselves can be anywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fc5ed6a9101bb04240e52968cc6d46716398a6" translate="yes" xml:space="preserve">
          <source>In order to prevent excessive memory usage, &lt;code&gt;Domain&lt;/code&gt; objects themselves are not implicitly added as children of the active domain. If they were, then it would be too easy to prevent request and response objects from being properly garbage collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1872d37dd99da69f48fff6e8ea85d653766d0af1" translate="yes" xml:space="preserve">
          <source>In order to retrieve this information &lt;a href=&quot;#n_api_napi_get_last_error_info&quot;&gt;&lt;code&gt;napi_get_last_error_info&lt;/code&gt;&lt;/a&gt; is provided which returns a &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure. The format of the &lt;code&gt;napi_extended_error_info&lt;/code&gt; structure is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba193044958a2078ac8148d7933406e9ff8c99a" translate="yes" xml:space="preserve">
          <source>In order to run a simple web server using the &lt;code&gt;http&lt;/code&gt; module the code passed to the context must either call &lt;code&gt;require('http')&lt;/code&gt; on its own, or have a reference to the &lt;code&gt;http&lt;/code&gt; module passed to it. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb69e44c062ea7704f38e703e2936582cc9f855" translate="yes" xml:space="preserve">
          <source>In order to support &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads, addons need to clean up any resources they may have allocated when such a thread exists. This can be achieved through the usage of the &lt;code&gt;AddEnvironmentCleanupHook()&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e43ad63b79dd141d986e828eceee78812aec282" translate="yes" xml:space="preserve">
          <source>In order to support the full spectrum of possible HTTP applications, Node.js's HTTP API is very low-level. It deals with stream handling and message parsing only. It parses a message into headers and body but it does not parse the actual headers or the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3632f1db32bf01741e5bbea082ca20145fb38f" translate="yes" xml:space="preserve">
          <source>In order to use the N-API functions, include the file &lt;a href=&quot;https://github.com/nodejs/node/blob/master/src/node_api.h&quot;&gt;&lt;code&gt;node_api.h&lt;/code&gt;&lt;/a&gt; which is located in the src directory in the node development tree:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac594a0cf5cfa895ed35f6b2ef04dc94e26df89" translate="yes" xml:space="preserve">
          <source>In particular, the significant differences to &lt;code&gt;JSON&lt;/code&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d252f3d1a06c3b2a3ae5ad98ef71487c919a9c51" translate="yes" xml:space="preserve">
          <source>In paused mode, the &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;stream.read()&lt;/code&gt;&lt;/a&gt; method must be called explicitly to read chunks of data from the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5c41117e426ba3a059f25450d02c56bbffe674" translate="yes" xml:space="preserve">
          <source>In recent versions of Node.js, there is no difference between &lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;crypto.pseudoRandomBytes()&lt;/code&gt;. The latter is deprecated along with the undocumented aliases &lt;code&gt;crypto.prng()&lt;/code&gt; and &lt;code&gt;crypto.rng()&lt;/code&gt; in favor of &lt;a href=&quot;crypto#crypto_crypto_randombytes_size_callback&quot;&gt;&lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/a&gt; and may be removed in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177049c3930ff3f87e8368c6c3d05d129ef44094" translate="yes" xml:space="preserve">
          <source>In some cases an addon will need to be able to create and reference objects with a lifespan longer than that of a single native method invocation. For example, to create a constructor and later use that constructor in a request to creates instances, it must be possible to reference the constructor object across many different instance creation requests. This would not be possible with a normal handle returned as a &lt;code&gt;napi_value&lt;/code&gt; as described in the earlier section. The lifespan of a normal handle is managed by scopes and all scopes must be closed before the end of a native method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22a93062d451b249b9309c60af8192dbe28ccd1" translate="yes" xml:space="preserve">
          <source>In some cases the resource object is reused for performance reasons, it is thus not safe to use it as a key in a &lt;code&gt;WeakMap&lt;/code&gt; or add properties to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad5e1a1929b5b0a41cfc844642f2414d2f858a5" translate="yes" xml:space="preserve">
          <source>In some cases, a &lt;code&gt;Sign&lt;/code&gt; instance can be created using the name of a signature algorithm, such as &lt;code&gt;'RSA-SHA256'&lt;/code&gt;, instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as &lt;code&gt;'ecdsa-with-SHA256'&lt;/code&gt;, so it is best to always use digest algorithm names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37ebca3d8b767295ac2a49a166fe5a6bbb405cb" translate="yes" xml:space="preserve">
          <source>In some cases, a &lt;code&gt;Verify&lt;/code&gt; instance can be created using the name of a signature algorithm, such as &lt;code&gt;'RSA-SHA256'&lt;/code&gt;, instead of a digest algorithm. This will use the corresponding digest algorithm. This does not work for all signature algorithms, such as &lt;code&gt;'ecdsa-with-SHA256'&lt;/code&gt;, so it is best to always use digest algorithm names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715189038eeefcaa56acee7c2e2873a2e151a84e" translate="yes" xml:space="preserve">
          <source>In some cases, a transform operation may need to emit an additional bit of data at the end of the stream. For example, a &lt;code&gt;zlib&lt;/code&gt; compression stream will store an amount of internal state used to optimally compress the output. When the stream ends, however, that additional data needs to be flushed so that the compressed data will be complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0648c6c88ba0416f92bbc79ff87e571aa792e5c" translate="yes" xml:space="preserve">
          <source>In synchronous code, the &lt;code&gt;'uncaughtException'&lt;/code&gt; event is emitted when the list of unhandled exceptions grows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621f9ba64d0f93481000b51697b0e8e212cfe125" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;hello.cc&lt;/code&gt; example, then, the initialization function is &lt;code&gt;Initialize&lt;/code&gt; and the addon module name is &lt;code&gt;addon&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a1a029b73f14872b97df7d8a65365950b239dc" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;http&lt;/code&gt; module, the response body is omitted when the request is a HEAD request. Similarly, the &lt;code&gt;204&lt;/code&gt; and &lt;code&gt;304&lt;/code&gt; responses &lt;em&gt;must not&lt;/em&gt; include a message body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6a5d641d8bc637062b7f84d566dcbd208d5b73" translate="yes" xml:space="preserve">
          <source>In the Node.js module system, each file is treated as a separate module. For example, consider a file named &lt;code&gt;foo.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2be294d408b9afdcf261478d35f9f2c3215e8" translate="yes" xml:space="preserve">
          <source>In the above, errors on the write stream would be caught and thrown by the two &lt;code&gt;once()&lt;/code&gt; listeners, since &lt;code&gt;once()&lt;/code&gt; will also handle &lt;code&gt;'error'&lt;/code&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5261e070003e9d4318beec94c3cf4ba4e3cbd884" translate="yes" xml:space="preserve">
          <source>In the case of Promises, the &lt;code&gt;resource&lt;/code&gt; object will have an &lt;code&gt;isChainedPromise&lt;/code&gt; property, set to &lt;code&gt;true&lt;/code&gt; if the promise has a parent promise, and &lt;code&gt;false&lt;/code&gt; otherwise. For example, in the case of &lt;code&gt;b = a.then(handler)&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; is considered a parent &lt;code&gt;Promise&lt;/code&gt; of &lt;code&gt;b&lt;/code&gt;. Here, &lt;code&gt;b&lt;/code&gt; is considered a chained promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b68963099522536bfb9d03e74439ba262a06acfe" translate="yes" xml:space="preserve">
          <source>In the case of a connection error, the following events will be emitted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918cb5bc54bb7c658a3c96576889997c72299bef" translate="yes" xml:space="preserve">
          <source>In the case where a developer may need to retain a small chunk of memory from a pool for an indeterminate amount of time, it may be appropriate to create an un-pooled &lt;code&gt;Buffer&lt;/code&gt; instance using &lt;code&gt;SlowBuffer&lt;/code&gt; then copy out the relevant bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ef5ea159bcc99b4a4ae1f2a88941efdfec9000" translate="yes" xml:space="preserve">
          <source>In the event of an unrecoverable error in a native module, a fatal error can be thrown to immediately terminate the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5ef3b0128e137344ad3cbe4a5087a73a781f41" translate="yes" xml:space="preserve">
          <source>In the example &lt;code&gt;req.end()&lt;/code&gt; was called. With &lt;code&gt;http.request()&lt;/code&gt; one must always call &lt;code&gt;req.end()&lt;/code&gt; to signify the end of the request - even if there is no data being written to the request body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4ef00df3b73a5938a813feaf72104024931ba1" translate="yes" xml:space="preserve">
          <source>In the following algorithms, all subroutine errors are propagated as errors of these top-level routines unless stated otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa725afe5295f20910c112028ae94f2b56a1a734" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;flush()&lt;/code&gt; is used to write a compressed partial HTTP response to the client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf82ec3610a7aca0a8ed51fb8b215927e85734d4" translate="yes" xml:space="preserve">
          <source>In the following example, for instance, a new &lt;code&gt;Transform&lt;/code&gt; stream (which is a type of &lt;a href=&quot;#stream_class_stream_duplex&quot;&gt;&lt;code&gt;Duplex&lt;/code&gt;&lt;/a&gt; stream) is created that has an object mode &lt;code&gt;Writable&lt;/code&gt; side that accepts JavaScript numbers that are converted to hexadecimal strings on the &lt;code&gt;Readable&lt;/code&gt; side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0fb3c9414cf1c8a8bda6e4b07edf6163cccd34" translate="yes" xml:space="preserve">
          <source>In the following example, only the child's fd &lt;code&gt;1&lt;/code&gt; (stdout) is configured as a pipe, so only the parent's &lt;code&gt;subprocess.stdio[1]&lt;/code&gt; is a stream, all other values in the array are &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de61ebd59a8526600cd416227b8b1e35a46645a" translate="yes" xml:space="preserve">
          <source>In the following example, the three UTF-8 encoded bytes of the European Euro symbol (&lt;code&gt;&amp;euro;&lt;/code&gt;) are written over three separate operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b32ff656d65a26d312747226fead13fb28eaac" translate="yes" xml:space="preserve">
          <source>In the last three cases &lt;code&gt;actual&lt;/code&gt;, &lt;code&gt;expected&lt;/code&gt;, and &lt;code&gt;operator&lt;/code&gt; have no influence on the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb96692d68fa67ba34d26bf28629f0c68833dc44" translate="yes" xml:space="preserve">
          <source>In the master this sends a message to a specific worker. It is identical to &lt;a href=&quot;child_process#child_process_subprocess_send_message_sendhandle_options_callback&quot;&gt;&lt;code&gt;ChildProcess.send()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f382762e386304b924761ff709bc435737f82042" translate="yes" xml:space="preserve">
          <source>In the master, an internal message is sent to the worker causing it to call &lt;code&gt;.disconnect()&lt;/code&gt; on itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fb2a46c3495adde1bdbd6a72aa0fe0f5338274" translate="yes" xml:space="preserve">
          <source>In the scenario of writing to a writable stream from an async iterator, it is important to ensure the correct handling of backpressure and errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce5fad120b64ee42264f01dfdc44ee7b983178a" translate="yes" xml:space="preserve">
          <source>In this case the entire API surface, including any experimental APIs, will be available to the module code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3340c556f6543bec062f3b2ed6d553b3150156a1" translate="yes" xml:space="preserve">
          <source>In this example case, it is possible to track the rejection as a developer error as would typically be the case for other &lt;code&gt;'unhandledRejection'&lt;/code&gt; events. To address such failures, a non-operational &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;.catch(() =&amp;gt; { })&lt;/code&gt;&lt;/a&gt; handler may be attached to &lt;code&gt;resource.loaded&lt;/code&gt;, which would prevent the &lt;code&gt;'unhandledRejection'&lt;/code&gt; event from being emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30d924ce86ebcb8be4941fadb4d24eb63050b49" translate="yes" xml:space="preserve">
          <source>In this example, adding any actual hook function enabled the tracking of promises. There are two promises in the example above; the promise created by &lt;code&gt;Promise.resolve()&lt;/code&gt; and the promise returned by the call to &lt;code&gt;then()&lt;/code&gt;. In the example above, the first promise got the &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;6&lt;/code&gt; and the latter got &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;7&lt;/code&gt;. During the execution of the &lt;code&gt;then()&lt;/code&gt; callback, we are executing in the context of promise with &lt;code&gt;asyncId&lt;/code&gt;&lt;code&gt;7&lt;/code&gt;. This promise was triggered by async resource &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c1f79c71778e1324e95e72ef55b00fad51c2b3" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;code&gt;Error&lt;/code&gt; object is generated internally by &lt;code&gt;process.emitWarning()&lt;/code&gt; and passed through to the &lt;a href=&quot;#process_event_warning&quot;&gt;&lt;code&gt;'warning'&lt;/code&gt;&lt;/a&gt; handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d63ff46a64b4f575facc6bfa8055c873dc89f8" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;d.on('error')&lt;/code&gt; handler will be triggered, rather than crashing the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2f4cd6b751dfe743b9e57f92471b943ba9aa8e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;unhandledRejections&lt;/code&gt;&lt;code&gt;Map&lt;/code&gt; will grow and shrink over time, reflecting rejections that start unhandled and then become handled. It is possible to record such errors in an error log, either periodically (which is likely best for long-running application) or upon process exit (which is likely most convenient for scripts).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a9e0f5e7284af8b7d1cd8e4c8dee1cd1759793" translate="yes" xml:space="preserve">
          <source>In this example, the callback function is invoked synchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4031e8bbffadc3eeaaece5bccec619b8b40c5fe2" translate="yes" xml:space="preserve">
          <source>In this way, &lt;code&gt;domain&lt;/code&gt; usage goes hand-in-hand with the cluster module, since the master process can fork a new worker when a worker encounters an error. For Node.js programs that scale to multiple machines, the terminating proxy or service registry can take note of the failure, and react accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3c8ce86c05cf45e881c8b88dcfc90bac15ce63e" translate="yes" xml:space="preserve">
          <source>In this way, the common &lt;code&gt;if (err) return callback(err);&lt;/code&gt; pattern can be replaced with a single error handler in a single place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1593e2fa0de1cde7649f366647211411e84269" translate="yes" xml:space="preserve">
          <source>In versions of Node.js prior to 6.0.0, &lt;code&gt;Buffer&lt;/code&gt; instances were created using the &lt;code&gt;Buffer&lt;/code&gt; constructor function, which allocates the returned &lt;code&gt;Buffer&lt;/code&gt; differently based on what arguments are provided:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832c4629f7e8996e07e8102ea0fa28b91da7e64c" translate="yes" xml:space="preserve">
          <source>Inadequate Security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00695bb607f52dab548ebe840966ef926ce5e82c" translate="yes" xml:space="preserve">
          <source>Increases indentation of subsequent lines by two spaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d70be8dce5ba727bab7ab54dcd1d8109b04da3a" translate="yes" xml:space="preserve">
          <source>Indexed properties can be set in a similar manner. Consider the following JavaScript snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe35ae027c5117ae3dcbc4f4499564544b6855c" translate="yes" xml:space="preserve">
          <source>Indicate the end of node options. Pass the rest of the arguments to the script. If no script filename or eval/print script is supplied prior to this, then the next argument will be used as a script filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d425840951d8be042af09d1dcf66a17ffc427c" translate="yes" xml:space="preserve">
          <source>Indicate whether to treat &lt;code&gt;TypedArray&lt;/code&gt; and &lt;code&gt;DataView&lt;/code&gt; objects as host objects, i.e. pass them to &lt;a href=&quot;#v8_serializer_writehostobject_object&quot;&gt;&lt;code&gt;serializer._writeHostObject()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb592b621da88223e8c8eeaa77068b4a45722a59" translate="yes" xml:space="preserve">
          <source>Indicates a bad protocol option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce04c2ac7352b9f26f40319a3e76118d2aa0de4" translate="yes" xml:space="preserve">
          <source>Indicates a broken pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af50c58faad8a1bc38a6c9a13abb8207dd6be3b4" translate="yes" xml:space="preserve">
          <source>Indicates a protocol error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6600816a977d05967d85edb3fba53ca13ec802" translate="yes" xml:space="preserve">
          <source>Indicates a stale file handle reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970e3b5809af80329b70563fbfeafb59b12d099d" translate="yes" xml:space="preserve">
          <source>Indicates a system call failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f9d21b2e00f4702c7ba7173aab1e2e364d4334" translate="yes" xml:space="preserve">
          <source>Indicates an exec format error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc6e95cd367c61b66f24c7fe172fdd4c8923fd1" translate="yes" xml:space="preserve">
          <source>Indicates an expired timer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6d7b9adaac7927a8389d72c9d49641a39dfb73" translate="yes" xml:space="preserve">
          <source>Indicates an illegal byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2399784693d157cc9db6a7d56a6802acafd3410" translate="yes" xml:space="preserve">
          <source>Indicates an improper link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5096800752c0124499ffda65a06e130ca52bf58" translate="yes" xml:space="preserve">
          <source>Indicates an inappropriate I/O control operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bec5da438c0efb0d77c5a830b93909367a15cd" translate="yes" xml:space="preserve">
          <source>Indicates an interrupted function call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90c9f7ea77891094deecf8791df2b6a6f6e7be0" translate="yes" xml:space="preserve">
          <source>Indicates an invalid data message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c88760d39d665b5ee4f2cedcdae333c06a2e638" translate="yes" xml:space="preserve">
          <source>Indicates an invalid file handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e973fa6216cda928d3b1ff9110620c4c3f989631" translate="yes" xml:space="preserve">
          <source>Indicates an invalid pointer address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542f438ea8fb2199f934997e9825630c4ad77ec3" translate="yes" xml:space="preserve">
          <source>Indicates an invalid seek operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1cddd818d2d11c606513689ef95576ae628a23" translate="yes" xml:space="preserve">
          <source>Indicates an invalid service provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca69bd9871d6b4b835be2cc5b7e303a5aeb76ba5" translate="yes" xml:space="preserve">
          <source>Indicates an otherwise unspecified I/O error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e1ce7f1ec33ca5400e5c2d49688b755daf62ba" translate="yes" xml:space="preserve">
          <source>Indicates insufficient permissions to complete the operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea06b534d77b7af671ce8399f89fdee2b70e93d" translate="yes" xml:space="preserve">
          <source>Indicates no such device or address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bb95ecdaaf6e1c491e89dc55bdf4ada5917b17" translate="yes" xml:space="preserve">
          <source>Indicates that a class type was not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a078deb966b1f0dbb2923905efd3bfa3c6936245" translate="yes" xml:space="preserve">
          <source>Indicates that a database query was refused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0136ce90dcbd9af267c4da8409264b6bd7ceca" translate="yes" xml:space="preserve">
          <source>Indicates that a destination address is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b88689f4254cf59cbd36c90757eba4ed54d095" translate="yes" xml:space="preserve">
          <source>Indicates that a device or resource is busy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9096f517c393ffbea05056d33a410bb9d60b9052" translate="yes" xml:space="preserve">
          <source>Indicates that a file descriptor is not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077d00dbf6c0ccd17eaf6e1e436cd24460670b70" translate="yes" xml:space="preserve">
          <source>Indicates that a function call was interrupted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32434c08cff7624431ad07e73db693f189e5d592" translate="yes" xml:space="preserve">
          <source>Indicates that a function has not been implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b21789e4d047a87bbefcae69e223e57c0e7bc1" translate="yes" xml:space="preserve">
          <source>Indicates that a given operation is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08aa9ba556ae45765e72b0f04829db3b1e21a970" translate="yes" xml:space="preserve">
          <source>Indicates that a given protocol is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ccae215e314e41ad23dfb2f6f21781ee668e8a7" translate="yes" xml:space="preserve">
          <source>Indicates that a given resource is not a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922181aef7cb91ecc745d786636e602f8d8746de" translate="yes" xml:space="preserve">
          <source>Indicates that a graceful shutdown is in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfcd2648b9d53561c3025491875a16bef0d4576" translate="yes" xml:space="preserve">
          <source>Indicates that a multihop was attempted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372b49dc7ed23c93af3008079025984775b9a0a1" translate="yes" xml:space="preserve">
          <source>Indicates that a name cannot be translated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0450ee237990615ef0438fa979bfc59059b2b2" translate="yes" xml:space="preserve">
          <source>Indicates that a name was too long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b454765c5ab209985df1dbfb4d65a1bff4292245" translate="yes" xml:space="preserve">
          <source>Indicates that a network host is down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830228d8de255623ef067539c11b71452b1b48e0" translate="yes" xml:space="preserve">
          <source>Indicates that a protocol is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d0760b68dc2b9e3234f32c458f8a15a66f253a" translate="yes" xml:space="preserve">
          <source>Indicates that a resource deadlock has been avoided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57423d447a54dca4cdf2140de632822c67c31e39" translate="yes" xml:space="preserve">
          <source>Indicates that a resource is temporarily unavailable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b30d5efeba61a960acda84ef5df098d46eae0f" translate="yes" xml:space="preserve">
          <source>Indicates that a service was not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2128a64f48d84403ea51f2253aaedfb90b12afd6" translate="yes" xml:space="preserve">
          <source>Indicates that a text file is busy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3789cc087d5c8e5368437244d2068b7da97884fe" translate="yes" xml:space="preserve">
          <source>Indicates that a value is too large to be stored in a given data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119dde472605c62e07c67fc1eb210d45a22024ad" translate="yes" xml:space="preserve">
          <source>Indicates that an argument is out of the domain of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206c12d38e5f031ad2d2a6389b829af57d9dcd48" translate="yes" xml:space="preserve">
          <source>Indicates that an invalid argument was passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f885333d175807022b890e71c998dfc2743f45" translate="yes" xml:space="preserve">
          <source>Indicates that an invalid argument was provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39125118a5a05fdb14d46044b0ea226b675a9877" translate="yes" xml:space="preserve">
          <source>Indicates that an operation has been canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d4a2a79fb94045c9c939b6febc16183fe9de98" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is already in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948ed5bc8d3bcef9cb214d0bff38ef1f9cbb6092" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is currently in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9fc2a88443f1bd9bcd796a3c09a586342edc14" translate="yes" xml:space="preserve">
          <source>Indicates that an operation is not supported on the socket. Note that while &lt;code&gt;ENOTSUP&lt;/code&gt; and &lt;code&gt;EOPNOTSUPP&lt;/code&gt; have the same value on Linux, according to POSIX.1 these error values should be distinct.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c078047af5f70ba3758bfb52a630d790c966eef" translate="yes" xml:space="preserve">
          <source>Indicates that an operation was canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4c46f02c3fe5b062d6dee34e96956cdbf1d2ef" translate="yes" xml:space="preserve">
          <source>Indicates that data cannot be sent after the socket has been shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4b71c7fe6eb8dcca0374a54346d6d8ee080a7d" translate="yes" xml:space="preserve">
          <source>Indicates that no buffer space is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5fe0bc009a449b0c131d1b39cee3df3ec53be6" translate="yes" xml:space="preserve">
          <source>Indicates that no message is available on the stream head read queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b762b35b459e2a3f4130aaecebcc05d526dd1d" translate="yes" xml:space="preserve">
          <source>Indicates that successful WSAStartup has not yet been performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d443e903069b79fc6fc8e876cd1f59a55ab321" translate="yes" xml:space="preserve">
          <source>Indicates that the &lt;code&gt;winsock.dll&lt;/code&gt; version is out of range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b67731347b7d3d1a2fb104a016252967ec1f8a" translate="yes" xml:space="preserve">
          <source>Indicates that the address family is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5593d5f8a211a9b9a1628f4eb1448ba6b26682d7" translate="yes" xml:space="preserve">
          <source>Indicates that the call was canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a53ecfeb6b859c1766e6952e74ee72db93b25b" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been aborted by the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695ee1b1d84ae237c8c3346f15676398969a0d84" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8362bc4ab7de1fd6ca1112c54f2f53624fc425a" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been refused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757641a9b638d2123741484401860c5f6d474ad0" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has been reset by the peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ae37829bc190196d8da2831b4c0f75007675de" translate="yes" xml:space="preserve">
          <source>Indicates that the connection has timed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4be4d3afaa2e5f45d481ca27450e687b555f25" translate="yes" xml:space="preserve">
          <source>Indicates that the connection timed out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d73aaa34d8df5ee63adbb0894f6278dfec083d" translate="yes" xml:space="preserve">
          <source>Indicates that the directory is not empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46d1e52d341e3f224dfa62b18df35ba474687e5" translate="yes" xml:space="preserve">
          <source>Indicates that the disk quota has been exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161c3595104196dd948b18febc343f1bd46f25c7" translate="yes" xml:space="preserve">
          <source>Indicates that the file already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60ba5dd633cddcea59d035cdabd5b096d7d3e9a" translate="yes" xml:space="preserve">
          <source>Indicates that the file handle is stale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855b2f5e83d5f45403266942ed6a78a8e48438fd" translate="yes" xml:space="preserve">
          <source>Indicates that the file is too large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40663f45ce87393265672016c54db313ad1a6e64" translate="yes" xml:space="preserve">
          <source>Indicates that the file system is read only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2436e26e43b92563a743feba4b113fa8a275c36" translate="yes" xml:space="preserve">
          <source>Indicates that the filename is too long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089cc30b91254f5c76ce11943c070ea4bb9e4ffe" translate="yes" xml:space="preserve">
          <source>Indicates that the given item is not a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d9efc8d6c36c8b3a99098120e3624ebd4ee169" translate="yes" xml:space="preserve">
          <source>Indicates that the host is unreachable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6deb274595ac102e6a95cf0fda8844325c2402b2" translate="yes" xml:space="preserve">
          <source>Indicates that the identifier has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16385ed77106de084d977545579771db76e25687" translate="yes" xml:space="preserve">
          <source>Indicates that the item is remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0453304f970d9c1105ea3bd64f4cc2e4c65c32" translate="yes" xml:space="preserve">
          <source>Indicates that the list of arguments is longer than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfafda04ebb20ac0339f69bfb2547f21a46f2b4c" translate="yes" xml:space="preserve">
          <source>Indicates that the message size is too long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f8f8a59da191885b3db8e166955be99443a142" translate="yes" xml:space="preserve">
          <source>Indicates that the network address family is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b3a54983042b769b394e9481c90955db44eede" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is already in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f10c1721305ff9e8e66fc7ac1a7b82f41551e9d" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is currently unavailable for use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a794b8e798681860dc3c2cd356736564119b7aaa" translate="yes" xml:space="preserve">
          <source>Indicates that the network address is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b452c6966555edcc5055e10c8498f2a68f0760bc" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4764d277de78c1ce7c30015888e50a4502c04cda" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been refused.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9818c6db8926eb6f8490fe27a113f4e4f48bd3" translate="yes" xml:space="preserve">
          <source>Indicates that the network connection has been reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4630ae08750c7cc87ea20c36c05978a40c3365" translate="yes" xml:space="preserve">
          <source>Indicates that the network is down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af29b3221c7857a372f20709460cf0cf423ed12" translate="yes" xml:space="preserve">
          <source>Indicates that the network is unreachable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368c2e27b0922fb850ee9cc185aaaabf0f6f0c72" translate="yes" xml:space="preserve">
          <source>Indicates that the network subsystem is not ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383ae045925743a63505cb92d9281c853dfbcc7c" translate="yes" xml:space="preserve">
          <source>Indicates that the operation did not have sufficient permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcee5ac45f4a21f13696f8ffe7c93a2d766ac8a" translate="yes" xml:space="preserve">
          <source>Indicates that the operation is not permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f9f362c2c3c2f761dab77a4a911af304ad3f33" translate="yes" xml:space="preserve">
          <source>Indicates that the operation is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776c0d89c093c17f22b7b6705dc7e7960302d908" translate="yes" xml:space="preserve">
          <source>Indicates that the operation would block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e117af40033e88e685ebc9243ba8656b98dee296" translate="yes" xml:space="preserve">
          <source>Indicates that the path is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701e0fe25025bc13b6c3ae1b84ed6ee66e9cf69e" translate="yes" xml:space="preserve">
          <source>Indicates that the path is not a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5bc9d82c613e54c1df8c0723a4c03f1298377f" translate="yes" xml:space="preserve">
          <source>Indicates that the procedure call table is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a40bb10c80e6514013b0ad35fa8d777655f104" translate="yes" xml:space="preserve">
          <source>Indicates that the protocol family is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71af43ae58a0ce69e6cde0af5f6e86a43cb92527" translate="yes" xml:space="preserve">
          <source>Indicates that the protocol is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a23e49b5ed1e325f70e865582ab8264afc3fa6" translate="yes" xml:space="preserve">
          <source>Indicates that the provided message is too long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bff985c66849e5fa9d2c2e0ac7cfbb7ceeaf1f" translate="yes" xml:space="preserve">
          <source>Indicates that the resource is not a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33c873c0e43a3d1c20a25c9f226c7397de4abc4" translate="yes" xml:space="preserve">
          <source>Indicates that the results are too large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf3dc9f9254b168e5ca41afd9d2992ac56a9e00" translate="yes" xml:space="preserve">
          <source>Indicates that the service provider failed to initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5ae11922fe267f93483559945ea71416b14b63" translate="yes" xml:space="preserve">
          <source>Indicates that the socket already has a pending connection in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9a9c897b5c353995793f4224f6105691fd33a8" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is already connected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63328104df6e2b2399694396579fe9ce96abe0f" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is connected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4539fe8fe18ebf237948a7033f92ffe07cf5b8" translate="yes" xml:space="preserve">
          <source>Indicates that the socket is not connected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4574e95a6c77d72a0a44c095218843f94a28bb70" translate="yes" xml:space="preserve">
          <source>Indicates that the socket type is not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14389542f80e2a560b89ba1bb7a23334b01d4c1" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;#http2_class_http2stream&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was closed. Just like &lt;code&gt;'end'&lt;/code&gt;, this event occurs only once per response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4be62dc021781f1f7331af72972eee9db55491" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying &lt;a href=&quot;http2&quot;&gt;&lt;code&gt;Http2Stream&lt;/code&gt;&lt;/a&gt; was terminated before &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; was called or able to flush.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d37a8f24a3523e9d164fbb58172c9cd00aa98d6" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying connection was closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e0d6007f4cfb102172b1f94dcbf1507928863f" translate="yes" xml:space="preserve">
          <source>Indicates that the underlying connection was terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260e1df33ddcd4e82330898db6a7ca89ab095d5c" translate="yes" xml:space="preserve">
          <source>Indicates that the user quota has been exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18f1d989cebb9a5ccb0014b0a3b804ab18c29c8" translate="yes" xml:space="preserve">
          <source>Indicates that there are no child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b994954e043610752ae496b165c4ad0cfacabb" translate="yes" xml:space="preserve">
          <source>Indicates that there are no locks available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6614378fd3d8db903142159b891610453273befe" translate="yes" xml:space="preserve">
          <source>Indicates that there are no more results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2f963abe2e3b2191a35765acbcd9088625836c" translate="yes" xml:space="preserve">
          <source>Indicates that there are no stream resources available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a897a9242c6f8deaa685d649f1f37446fe4f32" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many hard links to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28f98082ba14f699b932ee58bac27df4cf4769d" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many open files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92b6f438bbbad6dd4b5c6e5240708cfc537fc1f" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d85f876e9626a6491e65d612e9b483bfa7b9cd" translate="yes" xml:space="preserve">
          <source>Indicates that there are too many references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61082c259368a9f710adafe9a304001eb1fee6c5" translate="yes" xml:space="preserve">
          <source>Indicates that there is currently no data available and to try the operation again later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83fced05951abf5691548b4cd2103feaf2c694a" translate="yes" xml:space="preserve">
          <source>Indicates that there is no buffer space available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976457834d5fc65d10eefc909f9b879b0f79e739" translate="yes" xml:space="preserve">
          <source>Indicates that there is no message of the desired type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22073a072089d5c0ffc9dce772a1a7ec08c2c53f" translate="yes" xml:space="preserve">
          <source>Indicates that there is no route to a network host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2f6e7184bd083b8b8ad9d4456fd58b427c7808" translate="yes" xml:space="preserve">
          <source>Indicates that there is no space available on the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7853ff79915590151db29acfe2f8a05e4231bf78" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb99cc3620ddf00d8a100209370656211892cda" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such file or directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c76f2198f24358bd4c816200de1fcb8af12a78" translate="yes" xml:space="preserve">
          <source>Indicates that there is no such process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27353c844a6a35a27649ab175b0eb68661ef531a" translate="yes" xml:space="preserve">
          <source>Indicates that there is not enough space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5e1a3736d4e24ec12fb4f0df216bed85b2f1b8" translate="yes" xml:space="preserve">
          <source>Indicates the wrong protocol type for the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d7594bb044a48ce5960ed97b1c5e185a94eb43" translate="yes" xml:space="preserve">
          <source>Indicates the wrong type of protocol for a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cd43c392b2eaab3b1a94dfcc9ae9f8cb85a5fb" translate="yes" xml:space="preserve">
          <source>Indicates too many levels of symbolic links in a path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1121a0a8baa36b282377bd118336f82d59471e5" translate="yes" xml:space="preserve">
          <source>Indicates too many open files in the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f793ef295cef1dc50901d3c108997d4015097940" translate="yes" xml:space="preserve">
          <source>Indicates whether a callback has been set using &lt;a href=&quot;process#process_process_setuncaughtexceptioncapturecallback_fn&quot;&gt;&lt;code&gt;process.setUncaughtExceptionCaptureCallback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84abc9bf3d68bcff752515aa207501469e0aa0e9" translate="yes" xml:space="preserve">
          <source>Indicates whether the &lt;code&gt;Http2Session&lt;/code&gt; is currently waiting for acknowledgment of a sent &lt;code&gt;SETTINGS&lt;/code&gt; frame. Will be &lt;code&gt;true&lt;/code&gt; after calling the &lt;code&gt;http2session.settings()&lt;/code&gt; method. Will be &lt;code&gt;false&lt;/code&gt; once all sent &lt;code&gt;SETTINGS&lt;/code&gt; frames have been acknowledged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c22cb8018104ad4a34b76968a323a00574ca11" translate="yes" xml:space="preserve">
          <source>Indications that a link has been severed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb5ed506e4923c28d7f4a8aa69efe99b3ad75d1" translate="yes" xml:space="preserve">
          <source>Information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6d1039846355bb3c61f905e9d3ba65581c1937" translate="yes" xml:space="preserve">
          <source>Informational HTTP status codes (&lt;code&gt;1xx&lt;/code&gt;) may not be set as the response status code on HTTP/2 responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f35ea53e49802f840775c3d4b91ff4f9c6035d" translate="yes" xml:space="preserve">
          <source>Inherit the prototype methods from one &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor&quot;&gt;constructor&lt;/a&gt; into another. The prototype of &lt;code&gt;constructor&lt;/code&gt; will be set to a new object created from &lt;code&gt;superConstructor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c605479b3766044fe5d8c5e766dca7dfa29eac8" translate="yes" xml:space="preserve">
          <source>Initialization vectors should be unpredictable and unique; ideally, they will be cryptographically random. They do not have to be secret: IVs are typically just added to ciphertext messages unencrypted. It may sound contradictory that something has to be unpredictable and unique, but does not have to be secret; it is important to remember that an attacker must not be able to predict ahead of time what a given IV will be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81cf0d3001b974f4ab0ead2bdb88c2f9cb54eeb" translate="yes" xml:space="preserve">
          <source>Initializes a history log file for the REPL instance. When executing the Node.js binary and using the command line REPL, a history file is initialized by default. However, this is not the case when creating a REPL programmatically. Use this method to initialize a history log file when working with REPL instances programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cdbd02ba690df84da7adc74e183f564120378f" translate="yes" xml:space="preserve">
          <source>Initiate a TCP connection on the given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5479f7f1139e75134b5638b844d0e258a74f35" translate="yes" xml:space="preserve">
          <source>Initiate a connection on a given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810ba9b70df6c10d966779b0bafa88ded886aa59" translate="yes" xml:space="preserve">
          <source>Initiate a connection on a given socket. Normally this method is not needed, the socket should be created and opened with &lt;a href=&quot;#net_net_createconnection&quot;&gt;&lt;code&gt;net.createConnection()&lt;/code&gt;&lt;/a&gt;. Use this only when implementing a custom Socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6043ac861d8556db1f1186a96ea25461c657c5ba" translate="yes" xml:space="preserve">
          <source>Initiate an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; connection on the given socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586faf8bd3a03c92f8cb24c136ad18b37d24ab58" translate="yes" xml:space="preserve">
          <source>Initiates a TCP connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a4de7eba42de63d90bb804549dc818d7f966d1" translate="yes" xml:space="preserve">
          <source>Initiates a push stream. The callback is invoked with the new &lt;code&gt;Http2Stream&lt;/code&gt; instance created for the push stream passed as the second argument, or an &lt;code&gt;Error&lt;/code&gt; passed as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2bf8ae9d7cffd1a2491dca9b8c27dd7928ed38" translate="yes" xml:space="preserve">
          <source>Initiates a response whose data is read from the given file descriptor. No validation is performed on the given file descriptor. If an error occurs while attempting to read data using the file descriptor, the &lt;code&gt;Http2Stream&lt;/code&gt; will be closed using an &lt;code&gt;RST_STREAM&lt;/code&gt; frame using the standard &lt;code&gt;INTERNAL_ERROR&lt;/code&gt; code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fb6e9a05f63492052bc71c81678318b03c33a7" translate="yes" xml:space="preserve">
          <source>Initiates an &lt;a href=&quot;#net_ipc_support&quot;&gt;IPC&lt;/a&gt; connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d4e2e6f7bc72aa1b7fe9902a5761b23f342bb5" translate="yes" xml:space="preserve">
          <source>Inodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720c091ce87a13844611624e3c634ce2ed5d326a" translate="yes" xml:space="preserve">
          <source>Input &lt;code&gt;Buffer&lt;/code&gt; and &lt;code&gt;Uint8Array&lt;/code&gt; instances passed to the &lt;code&gt;http2.getUnpackedSettings()&lt;/code&gt; API must have a length that is a multiple of six.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ab03b761f96fdd2c5da59a100ff5730e9c4009" translate="yes" xml:space="preserve">
          <source>Inserting the statement &lt;code&gt;debugger;&lt;/code&gt; into the source code of a script will enable a breakpoint at that position in the code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051747894e566bebff8a6f6ae4afde9c862d5e6c" translate="yes" xml:space="preserve">
          <source>Inspecting linked lists and similar objects is now possible up to the maximum call stack size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8222c902ae0723e8bb352bb17ed76809e4688165" translate="yes" xml:space="preserve">
          <source>Inspector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8db003f59f527184ade10382360155f5682949" translate="yes" xml:space="preserve">
          <source>Inspector only methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0cf2d5cc76825e10c97a10dd59da6837fcc0666" translate="yes" xml:space="preserve">
          <source>Installing async hooks via &lt;code&gt;async_hooks.createHook&lt;/code&gt; enables promise execution tracking:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5458ffc182cdf6836a16e2f16d8f4bd6d79f5c4e" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#repl_class_replserver&quot;&gt;&lt;code&gt;repl.REPLServer&lt;/code&gt;&lt;/a&gt; support automatic completion of inputs, simplistic Emacs-style line editing, multi-line inputs, ANSI-styled output, saving and restoring current REPL session state, error recovery, and customizable evaluation functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89a320c3f62e6b6ba8e85b021337befc0641078" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;ChildProcess&lt;/code&gt; are not intended to be created directly. Rather, use the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_exec_command_options_callback&quot;&gt;&lt;code&gt;child_process.exec()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#child_process_child_process_execfile_file_args_options_callback&quot;&gt;&lt;code&gt;child_process.execFile()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt; methods to create instances of &lt;code&gt;ChildProcess&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1b65a0d3c2528e965754146fd9d0a86600f551" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Duplex&lt;/code&gt; now return &lt;code&gt;true&lt;/code&gt; when checking &lt;code&gt;instanceof stream.Writable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdd2c2c9379faa14d448a471b59a6faffffb1ed" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Http2SecureServer&lt;/code&gt; are created using the &lt;code&gt;http2.createSecureServer()&lt;/code&gt; function. The &lt;code&gt;Http2SecureServer&lt;/code&gt; class is not exported directly by the &lt;code&gt;http2&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e618cc6bee9611e42d99ee69ae677154195e8043" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Http2Server&lt;/code&gt; are created using the &lt;code&gt;http2.createServer()&lt;/code&gt; function. The &lt;code&gt;Http2Server&lt;/code&gt; class is not exported directly by the &lt;code&gt;http2&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c931f1541982a4495922666b7b5bc642601cc990" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;tls.TLSSocket&lt;/code&gt; implement the duplex &lt;a href=&quot;stream#stream_stream&quot;&gt;Stream&lt;/a&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35783666b090e1bcb188e0ff52ae2b546eb2a159" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Buffer&lt;/code&gt; class are similar to arrays of integers from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; (other integers are coerced to this range by &lt;code&gt;&amp;amp; 255&lt;/code&gt; operation) but correspond to fixed-sized, raw memory allocations outside the V8 heap. The size of the &lt;code&gt;Buffer&lt;/code&gt; is established when it is created and cannot be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffd1ef53587360af9f4e464d4d5cf73ae045da0" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Certificate&lt;/code&gt; class can be created using the &lt;code&gt;new&lt;/code&gt; keyword or by calling &lt;code&gt;crypto.Certificate()&lt;/code&gt; as a function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a67f7f0229202a5e0c59ed378df4ef19e04cdd1" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ChildProcess&lt;/code&gt; class are &lt;a href=&quot;events#events_class_eventemitter&quot;&gt;&lt;code&gt;EventEmitters&lt;/code&gt;&lt;/a&gt; that represent spawned child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cc93f3328ea5a0a0adcec2dba75fe3d0516e6a" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Cipher&lt;/code&gt; class are used to encrypt data. The class can be used in one of two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adadf4a8671dae9115a1b4925ff5480625d42ff5" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Decipher&lt;/code&gt; class are used to decrypt data. The class can be used in one of two ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29738f83796b77d7a2afe6dfa6aa91432202d54" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;DiffieHellman&lt;/code&gt; class can be created using the &lt;a href=&quot;#crypto_crypto_creatediffiehellman_prime_primeencoding_generator_generatorencoding&quot;&gt;&lt;code&gt;crypto.createDiffieHellman()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06629143118ba183c91662524da3d6583f95f245" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ECDH&lt;/code&gt; class can be created using the &lt;a href=&quot;#crypto_crypto_createecdh_curvename&quot;&gt;&lt;code&gt;crypto.createECDH()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19a3efe923bf85bc8b05ac0272473f4501716f9" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;FileHandle&lt;/code&gt; object are created internally by the &lt;code&gt;fsPromises.open()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af20962e987f76605ebbac474846e378dc9efb59" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;http2.Http2Session&lt;/code&gt; class represent an active communications session between an HTTP/2 client and server. Instances of this class are &lt;em&gt;not&lt;/em&gt; intended to be constructed directly by user code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432d12dcbaa96cbcfdc7739ae3abf129c909c6a7" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;readline.Interface&lt;/code&gt; class are constructed using the &lt;code&gt;readline.createInterface()&lt;/code&gt; method. Every instance is associated with a single &lt;code&gt;input&lt;/code&gt;&lt;a href=&quot;stream#stream_readable_streams&quot;&gt;Readable&lt;/a&gt; stream and a single &lt;code&gt;output&lt;/code&gt;&lt;a href=&quot;stream#stream_writable_streams&quot;&gt;Writable&lt;/a&gt; stream. The &lt;code&gt;output&lt;/code&gt; stream is used to print prompts for user input that arrives on, and is read from, the &lt;code&gt;input&lt;/code&gt; stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a8dd21a7c8c59429281b201339a2209dc5cdab" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;vm.Script&lt;/code&gt; class contain precompiled scripts that can be executed in specific sandboxes (or &quot;contexts&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce65dd9273ad652d638f34de4134789c3e16e945" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;worker.MessageChannel&lt;/code&gt; class represent an asynchronous, two-way communications channel. The &lt;code&gt;MessageChannel&lt;/code&gt; has no methods of its own. &lt;code&gt;new MessageChannel()&lt;/code&gt; yields an object with &lt;code&gt;port1&lt;/code&gt; and &lt;code&gt;port2&lt;/code&gt; properties, which refer to linked &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a38e81654aa75e50f8ac4a46d3a4444cd9d971f" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;worker.MessagePort&lt;/code&gt; class represent one end of an asynchronous, two-way communications channel. It can be used to transfer structured data, memory regions and other &lt;code&gt;MessagePort&lt;/code&gt;s between different &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c676be9a0fcb70600a6d6a66e1bc4fb7d9ad4219" translate="yes" xml:space="preserve">
          <source>Instantiate a new &lt;code&gt;URLSearchParams&lt;/code&gt; object with a query hash map. The key and value of each property of &lt;code&gt;obj&lt;/code&gt; are always coerced to strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65181063e2280876fa3f8f363ffe435314f6a6cc" translate="yes" xml:space="preserve">
          <source>Instantiate a new &lt;code&gt;URLSearchParams&lt;/code&gt; object with an iterable map in a way that is similar to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;'s constructor. &lt;code&gt;iterable&lt;/code&gt; can be an &lt;code&gt;Array&lt;/code&gt; or any iterable object. That means &lt;code&gt;iterable&lt;/code&gt; can be another &lt;code&gt;URLSearchParams&lt;/code&gt;, in which case the constructor will simply create a clone of the provided &lt;code&gt;URLSearchParams&lt;/code&gt;. Elements of &lt;code&gt;iterable&lt;/code&gt; are key-value pairs, and can themselves be any iterable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc82e9b73a75737421b7fc3a88c424c1b841dee" translate="yes" xml:space="preserve">
          <source>Instantiate a new empty &lt;code&gt;URLSearchParams&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21c73c2d5f688055cfa8ed255e3120b2cccea8d" translate="yes" xml:space="preserve">
          <source>Instantiate the module. This must be called after linking has completed (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linked'&lt;/code&gt;); otherwise it will throw an error. It may also throw an exception if one of the dependencies does not provide an export the parent module requires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed39324e841d37c87d9ceaf44bcca4c8c9a4e11" translate="yes" xml:space="preserve">
          <source>Instead of throwing the original error it is now wrapped into an &lt;code&gt;AssertionError&lt;/code&gt; that contains the full stack trace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0886c0750f47c6c020e0212835b6e14e09f31e83" translate="yes" xml:space="preserve">
          <source>Instruct &lt;code&gt;require&lt;/code&gt; on how to handle certain file extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c063ff3cdde65053663a7873bf8ab9bd399ef6b0" translate="yes" xml:space="preserve">
          <source>Instructs Node.js to error prior to running any code if the policy does not have the specified integrity. It expects a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity&quot;&gt;Subresource Integrity&lt;/a&gt; string as a parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2c85f8a9e409e60a7c57bb3a6180c6a74b488d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6c05112a017d47310f296b0041f44b75da5a87" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always create a new key when using temporary/ephemeral DH parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546f5bbe97ae294c8fc5e687dae9f83654f746e8" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always create a new key when using temporary/ephemeral ECDH parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0311c08a3469b8d71f9d3883a3fe4a8bf94820" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always start a new session when performing renegotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7bb7ececabda2568352c90383393ed8f76fe08" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to always use the tmp_rsa key when performing RSA operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caca42fad826dd949c6335a63c6ceb14c18ab473" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23867858cda445617e031433f5f870ccca19e39d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable support for SSL/TLS compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b25ca4b0affb115218bbc6dc9c81460963a1551" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable the workaround for a man-in-the-middle protocol-version vulnerability in the SSL 2.0 server implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2165b961ee84bb34e7517631c063e2f2f98f243d" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable use of RFC4507bis tickets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="608aeeeb5a40e2d41f521b3de5c1f59b365144e3" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to disable version rollback attack detection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710ee28e0f7e59c4bcb18bce916c5f0f0d575362" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off SSL v2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a26e814f5c329c70cc5bbf34635600b0166e139" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off SSL v3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80de102aad3b8873aa476d2f44620c3de39d7a90" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e08471820c4afa43946e65eac375fcd772422b3" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e7bd4f680213d3fc1d7f9ebf87e0706ef0e930" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn off TLS v1.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbab4e09330ea425ca00047c6c5baf5232c6ce4" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to turn on cookie exchange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e82de46cebb9eab62329940282272bfd3ba678a" translate="yes" xml:space="preserve">
          <source>Instructs OpenSSL to use Cisco's &quot;speshul&quot; version of DTLS_BAD_VER.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75031cb337e0583a13d4c7be4edb3e048cfc6d63" translate="yes" xml:space="preserve">
          <source>Instructs the kernel to leave a multicast group at &lt;code&gt;multicastAddress&lt;/code&gt; using the &lt;code&gt;IP_DROP_MEMBERSHIP&lt;/code&gt; socket option. This method is automatically called by the kernel when the socket is closed or the process terminates, so most apps will never have reason to call this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1144c6f61e59c74db28b6c4b9401d09107634752" translate="yes" xml:space="preserve">
          <source>Instructs the module loader to preserve symbolic links when resolving and caching modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6870fb28c403ee5eb0f8b0e36861a73965d25e9a" translate="yes" xml:space="preserve">
          <source>Instructs the module loader to preserve symbolic links when resolving and caching the main module (&lt;code&gt;require.main&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8402b4a029cc3b4cbc3fef404091dc1447dc7b5c" translate="yes" xml:space="preserve">
          <source>Integer value representing the expected input size; defaults to &lt;code&gt;0&lt;/code&gt; for an unknown input size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ab494ded4d235df6eccb37568024a22d56ee79" translate="yes" xml:space="preserve">
          <source>Integer-Indexed: an index value represented by &lt;code&gt;uint32_t&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bd3b466b0034894173f99f33ef569af480be3a" translate="yes" xml:space="preserve">
          <source>Integers read from a &lt;code&gt;Buffer&lt;/code&gt; are interpreted as two's complement signed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05fe054d228b76470ec56b7184d0bc99d39e7ba" translate="yes" xml:space="preserve">
          <source>Integral status code indicating the success or failure of a N-API call. Currently, the following status codes are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b62f41c12ee066d13d5c86a1257925ad8861703" translate="yes" xml:space="preserve">
          <source>Integrity Checks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb5b39c0f8028f339c4e3a11a09d7b24bb24591" translate="yes" xml:space="preserve">
          <source>Integrity can be specified as the boolean value &lt;code&gt;true&lt;/code&gt; to accept any body for the resource which can be useful for local development. It is not recommended in production since it would allow unexpected alteration of resources to be considered valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4db7ef1fa23cfb5e115a2a2c89d46a6a2ebc4a" translate="yes" xml:space="preserve">
          <source>Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23575f35a521e9c261d274ac4cb29c2f05b261ac" translate="yes" xml:space="preserve">
          <source>Internal Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2832f2017b9feac348c32119b337871f7f79ff" translate="yes" xml:space="preserve">
          <source>Internal Node.js libraries. Node.js itself exports a number of C++ APIs that Addons can use &amp;mdash; the most important of which is the &lt;code&gt;node::ObjectWrap&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4c2cebcc0952f7ae86ffbb2645ce54c5574178" translate="yes" xml:space="preserve">
          <source>Internal errors occur when an HTTP/2 session fails unexpectedly. These will be reported via an &lt;code&gt;'error'&lt;/code&gt; event on the &lt;code&gt;Http2Session&lt;/code&gt; or HTTP/2 Server objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad90811f03e8bbaf83a345f7229936551486b928" translate="yes" xml:space="preserve">
          <source>Internal properties no longer appear in the context argument of a custom inspection function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845202ae0fe1a669c29ddc90a5436534b580fc96" translate="yes" xml:space="preserve">
          <source>Internationalization Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c74da0c6c57362d1086bc64d6d9a5389c76829" translate="yes" xml:space="preserve">
          <source>Interoperability with CommonJS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f06c6ea3387d2dd0326bd91120a11c32eb42186" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of 64-bit numbers and swaps byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f37cf37971ac698f0307a0849c4d8a45eaa91f" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of unsigned 16-bit integers and swaps the byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b8e329633284e96f9adb1691da632260f2b83b" translate="yes" xml:space="preserve">
          <source>Interprets &lt;code&gt;buf&lt;/code&gt; as an array of unsigned 32-bit integers and swaps the byte order &lt;em&gt;in-place&lt;/em&gt;. Throws &lt;a href=&quot;errors#ERR_INVALID_BUFFER_SIZE&quot;&gt;&lt;code&gt;ERR_INVALID_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;#buffer_buf_length&quot;&gt;&lt;code&gt;buf.length&lt;/code&gt;&lt;/a&gt; is not a multiple of 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c495326cbec001dafeaa0da9ab820a10bbe892f" translate="yes" xml:space="preserve">
          <source>Introduced &lt;code&gt;latin1&lt;/code&gt; as an alias for &lt;code&gt;binary&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c92f0c550f88b8f940f3db1e7343ac28f0092f" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;hash&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1629e5ff15506fca0875d4572b9feec31e969dc3" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;password&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d09dda66848238d39695ce4a7fee107a1aaf1b" translate="yes" xml:space="preserve">
          <source>Invalid URL characters included in the value assigned to the &lt;code&gt;pathname&lt;/code&gt; property are &lt;a href=&quot;#whatwg-percent-encoding&quot;&gt;percent-encoded&lt;/a&gt;. The selection of which characters to percent-encode may vary somewhat from what the &lt;a href=&quot;#url_url_parse_urlstring_parsequerystring_slashesdenotehost&quot;&gt;&lt;code&gt;url.parse()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#url_url_format_urlobject&quot;&gt;&lt;code&gt;url.format()&lt;/code&gt;&lt;/a&gt; methods would produce.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f72a935bbcf546bea987da823f35b5a5e27db6" translate="yes" xml:space="preserve">
          <source>Invalid URL protocol values assigned to the &lt;code&gt;protocol&lt;/code&gt; property are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738d6832032229b051ea3b4a368aee59f1757724" translate="yes" xml:space="preserve">
          <source>Invalid character handling in header names and values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe947aa91a35f6be8f5dcea115d7f1b3523381d5" translate="yes" xml:space="preserve">
          <source>Invalid characters were detected in headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cbfcf6f98b93d30c926a6b1749b607fc691744" translate="yes" xml:space="preserve">
          <source>Invalid host values assigned to the &lt;code&gt;host&lt;/code&gt; property are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae8e79a320be525fba1c1ca46fb7bf1f890b46f" translate="yes" xml:space="preserve">
          <source>Invalid hostname values assigned to the &lt;code&gt;hostname&lt;/code&gt; property are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21c7370be790d52740a91b52fc49543cba6a787" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http2_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;stream#stream_writable_writablefinished&quot;&gt;&lt;code&gt;writable.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8a83f3e29a618906de053b984b4116151588fe" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_request_end_data_encoding_callback&quot;&gt;&lt;code&gt;request.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#http_request_writablefinished&quot;&gt;&lt;code&gt;request.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279811758f3fc49f9271db9de98d53ac59a3a35f" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#http_response_end_data_encoding_callback&quot;&gt;&lt;code&gt;response.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#http_response_writablefinished&quot;&gt;&lt;code&gt;response.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c457dffdf62810b5e0e74ea9f6901231788f1d26" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_readable_destroy_error&quot;&gt;&lt;code&gt;readable.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ba9b336441c7b9636f805f2664a8b20332ff3a" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_writable_destroy_error&quot;&gt;&lt;code&gt;writable.destroy()&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e457e44e34dbf6c98b053774a3a83b0eda0d06e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; after &lt;a href=&quot;#stream_writable_end_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.end()&lt;/code&gt;&lt;/a&gt; has been called. This property does not indicate whether the data has been flushed, for this use &lt;a href=&quot;#stream_writable_writablefinished&quot;&gt;&lt;code&gt;writable.writableFinished&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447e18b05fa6d326f80492387bf46993194d011e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if all data has been flushed to the underlying system, immediately before the &lt;a href=&quot;#http_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8d5a5a4a8431f9f64a806e5b6f385f45074325" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_readable_read_size&quot;&gt;&lt;code&gt;readable.read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4370f01d3c96b257612ae70204203ea0a8789809" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if it is safe to call &lt;a href=&quot;#stream_writable_write_chunk_encoding_callback&quot;&gt;&lt;code&gt;writable.write()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54e2373de13c6357b66bf3b96598900cda4816e" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;true&lt;/code&gt; if this code is not running inside of a &lt;a href=&quot;#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea282d632dfbf0003030b6293ca539ecda81b32" translate="yes" xml:space="preserve">
          <source>Is set to &lt;code&gt;true&lt;/code&gt; immediately before the &lt;a href=&quot;#stream_event_finish&quot;&gt;&lt;code&gt;'finish'&lt;/code&gt;&lt;/a&gt; event is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f54ec164d59bd1126c3d41ec9e0caa797ca9ac" translate="yes" xml:space="preserve">
          <source>It allows a shortcut, so that &lt;code&gt;module.exports.f = ...&lt;/code&gt; can be written more succinctly as &lt;code&gt;exports.f = ...&lt;/code&gt;. However, be aware that like any variable, if a new value is assigned to &lt;code&gt;exports&lt;/code&gt;, it is no longer bound to &lt;code&gt;module.exports&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9073ca8fe086c420a4962aa555b1febbd7e4eb14" translate="yes" xml:space="preserve">
          <source>It can also be created by Node.js and passed to the user when a connection is received. For example, it is passed to the listeners of a &lt;a href=&quot;#net_event_connection&quot;&gt;&lt;code&gt;'connection'&lt;/code&gt;&lt;/a&gt; event emitted on a &lt;a href=&quot;#net_class_net_server&quot;&gt;&lt;code&gt;net.Server&lt;/code&gt;&lt;/a&gt;, so the user can use it to interact with the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5170688bb6d5c05e758eaa86801b72671253446e" translate="yes" xml:space="preserve">
          <source>It can be accessed using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2502aa25bb881c5a8de387f4855f38f05049a2" translate="yes" xml:space="preserve">
          <source>It creates a symbolic link named &quot;new-port&quot; that points to &quot;foo&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1be5b11468a8cdf73d05266cfb33d14f98a6df" translate="yes" xml:space="preserve">
          <source>It does nothing if the stream was already destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d9374edd67e5544a25ed3217406f608f09bce8" translate="yes" xml:space="preserve">
          <source>It has already been linked (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linked'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70b0c65dc3241d0690f77cfe10d0e5c2409d02c" translate="yes" xml:space="preserve">
          <source>It helps to provide some global-looking variables that are actually specific to the module, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0464e843f0f43c4dc6eaefcde1f38e4a3f6cc1" translate="yes" xml:space="preserve">
          <source>It implements the &lt;a href=&quot;stream#stream_class_stream_readable&quot;&gt;Readable Stream&lt;/a&gt; interface, as well as the following additional events, methods, and properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d45f625dfde54e988f472dec8c49c8ac4e78699" translate="yes" xml:space="preserve">
          <source>It is also possible to compress or decompress data in a single step:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bfb3903cd859802eba53ef817be6fc4d39e1d0" translate="yes" xml:space="preserve">
          <source>It is also possible to create new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instances from a &lt;code&gt;Buffer&lt;/code&gt; with the following caveats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f8e04142983f13c24079e34f4c988c32e45040" translate="yes" xml:space="preserve">
          <source>It is also possible to set a breakpoint in a file (module) that is not loaded yet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e7ef80ba24b9fb35096f06920755ced16718da" translate="yes" xml:space="preserve">
          <source>It is also possible to subscribe only to notifications with specific method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36886a21b327f4efa13efb333b8085346c75732" translate="yes" xml:space="preserve">
          <source>It is also possible to wrap C++ objects/classes in a way that allows new instances to be created using the JavaScript &lt;code&gt;new&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27ace742269815d9bc53f0c5f64ced13adb5440" translate="yes" xml:space="preserve">
          <source>It is also recommended that any &lt;code&gt;'message'&lt;/code&gt; handlers in the child process verify that &lt;code&gt;socket&lt;/code&gt; exists, as the connection may have been closed during the time it takes to send the connection to the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c143cda1d23fdc307acaa4ab93fadca2a6f783" translate="yes" xml:space="preserve">
          <source>It is bad practice to remove listeners added elsewhere in the code, particularly when the &lt;code&gt;EventEmitter&lt;/code&gt; instance was created by some other component or module (e.g. sockets or file streams).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c833a8c6ebe950f983fd451c778c087cc9332c0" translate="yes" xml:space="preserve">
          <source>It is being linked (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'linking'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419d5dee627637c5194692a9f10eb64d65bcc9aa" translate="yes" xml:space="preserve">
          <source>It is common practice within Addons to pass JavaScript functions to a C++ function and execute them from there. The following example illustrates how to invoke such callbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3048ab55c4bb6de03bd26d55d03dc4c5facb8b7f" translate="yes" xml:space="preserve">
          <source>It is convenient to organize programs and libraries into self-contained directories, and then provide a single entry point to those directories. There are three ways in which a folder may be passed to &lt;code&gt;require()&lt;/code&gt; as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae010a7f5ed72fe5c4197d82c84289cacb4988c" translate="yes" xml:space="preserve">
          <source>It is deprecated and should not be used in new code. JavaScript comes with very similar built-in functionality through &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot;&gt;&lt;code&gt;Object.assign()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937f36c6fe0ce89575bd34e56b0dfed7daac172f" translate="yes" xml:space="preserve">
          <source>It is good practice, to &lt;a href=&quot;#http_agent_destroy&quot;&gt;&lt;code&gt;destroy()&lt;/code&gt;&lt;/a&gt; an &lt;code&gt;Agent&lt;/code&gt; instance when it is no longer in use, because unused sockets consume OS resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc5790e09a1d829dcaf9ede78c9a8dcb7900d48" translate="yes" xml:space="preserve">
          <source>It is important to keep in mind that spawned Node.js child processes are independent of the parent with exception of the IPC communication channel that is established between the two. Each process has its own memory, with their own V8 instances. Because of the additional resource allocations required, spawning a large number of child Node.js processes is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4512b8cdb5a3c36488e4bbb14fc8dde177723733" translate="yes" xml:space="preserve">
          <source>It is impossible to know in advance the MTU of each link through which a packet might travel. Sending a datagram greater than the receiver &lt;code&gt;MTU&lt;/code&gt; will not work because the packet will get silently dropped without informing the source that the data did not reach its intended recipient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2e4af5d5aa394246178c425f14d66e2517e6db" translate="yes" xml:space="preserve">
          <source>It is not clear whether &lt;code&gt;foo()&lt;/code&gt; or &lt;code&gt;bar()&lt;/code&gt; will be called first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67feb1878c776ad9fccd934e67f62317478d643e" translate="yes" xml:space="preserve">
          <source>It is not emitted in the worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187a290752482dba747ede2b91a61d535838b186" translate="yes" xml:space="preserve">
          <source>It is not necessary to call into JavaScript via &lt;code&gt;napi_make_callback()&lt;/code&gt; because N-API runs &lt;code&gt;call_js_cb&lt;/code&gt; in a context appropriate for callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d10f2c19d8c5b37fce057d024a074f7f6dd563d" translate="yes" xml:space="preserve">
          <source>It is not possible to &lt;code&gt;require()&lt;/code&gt; files that have the &lt;code&gt;.mjs&lt;/code&gt; extension. Attempting to do so will throw &lt;a href=&quot;errors#errors_err_require_esm&quot;&gt;an error&lt;/a&gt;. The &lt;code&gt;.mjs&lt;/code&gt; extension is reserved for &lt;a href=&quot;esm&quot;&gt;ECMAScript Modules&lt;/a&gt; which cannot be loaded via &lt;code&gt;require()&lt;/code&gt;. See &lt;a href=&quot;esm&quot;&gt;ECMAScript Modules&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b21297f31acb334dbc5d7e4654c5f95618230e" translate="yes" xml:space="preserve">
          <source>It is not possible to cancel timers that were created using the promisified variants of &lt;a href=&quot;timers#timers_setimmediate_callback_args&quot;&gt;&lt;code&gt;setImmediate()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;timers#timers_settimeout_callback_delay_args&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66357995a3753445dca09b779bcb4d762b0d211" translate="yes" xml:space="preserve">
          <source>It is not recommended to use this option once a socket has been sent to a child with &lt;a href=&quot;child_process#child_process_child_process_fork_modulepath_args_options&quot;&gt;&lt;code&gt;child_process.fork()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b99fc0673b66c9c42a80c4a0c35748194bd28e" translate="yes" xml:space="preserve">
          <source>It is often necessary to make the lifespan of handles shorter than the lifespan of a native method. For example, consider a native method that has a loop which iterates through the elements in a large array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4c02784543cf811bfb3f1f2ca2f803b137643c" translate="yes" xml:space="preserve">
          <source>It is possible for Node.js to be built without including support for the &lt;code&gt;crypto&lt;/code&gt; module. In such cases, calling &lt;code&gt;require('crypto')&lt;/code&gt; will result in an error being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec146a36358c16fe853764f44ebbd03ad1c100e" translate="yes" xml:space="preserve">
          <source>It is possible that no output is generated from any given chunk of input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041de057d4cce3b0afd146cbb127bf4a3b681c5a" translate="yes" xml:space="preserve">
          <source>It is possible to attach multiple &lt;code&gt;Writable&lt;/code&gt; streams to a single &lt;code&gt;Readable&lt;/code&gt; stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d799d5874d270cd1edf1e65682d3d92bdbd761d" translate="yes" xml:space="preserve">
          <source>It is possible to create a new &lt;code&gt;Buffer&lt;/code&gt; that shares the same allocated memory as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt; instance by using the &lt;code&gt;TypedArray&lt;/code&gt; object's &lt;code&gt;.buffer&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0425f8d11e929edaebd4ecd9966c15d540c99b06" translate="yes" xml:space="preserve">
          <source>It is possible to create and run multiple REPL instances against a single running instance of Node.js that share a single &lt;code&gt;global&lt;/code&gt; object but have separate I/O interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebe7a7a176eecea0791341611fe6bc21db870e1" translate="yes" xml:space="preserve">
          <source>It is possible to have type name collisions. Embedders are encouraged to use unique prefixes, such as the npm package name, to prevent collisions when listening to the hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c6c312d474be31ba928b610b1f24972346fde4" translate="yes" xml:space="preserve">
          <source>It is possible to modify this object, but such modifications will not be reflected outside the Node.js process, or (unless explicitly requested) to other &lt;a href=&quot;worker_threads#worker_threads_class_worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; threads. In other words, the following example would not work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86565752a73577e2315e700600c3bf0c40a3f4fd" translate="yes" xml:space="preserve">
          <source>It is possible to require specific files or sub modules distributed with a module by including a path suffix after the module name. For instance &lt;code&gt;require('example-module/path/to/file')&lt;/code&gt; would resolve &lt;code&gt;path/to/file&lt;/code&gt; relative to where &lt;code&gt;example-module&lt;/code&gt; is located. The suffixed path follows the same module resolution semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba28385ee96435cb01e25cc4b9a932046f15c449" translate="yes" xml:space="preserve">
          <source>It is possible to use ES6 Arrow Functions as listeners, however, when doing so, the &lt;code&gt;this&lt;/code&gt; keyword will no longer reference the &lt;code&gt;EventEmitter&lt;/code&gt; instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50f1c65fac5502c9e1814ed3537ba4589771ab5" translate="yes" xml:space="preserve">
          <source>It is possible to watch expression and variable values while debugging. On every breakpoint, each expression from the watchers list will be evaluated in the current context and displayed immediately before the breakpoint's source code listing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a28d0af67f353f363a2876505349b3688d12dbd" translate="yes" xml:space="preserve">
          <source>It is recommended that errors occurring during the processing of the &lt;code&gt;readable._read()&lt;/code&gt; method are emitted using the &lt;code&gt;'error'&lt;/code&gt; event rather than being thrown. Throwing an &lt;code&gt;Error&lt;/code&gt; from within &lt;code&gt;readable._read()&lt;/code&gt; can result in unexpected and inconsistent behavior depending on whether the stream is operating in flowing or paused mode. Using the &lt;code&gt;'error'&lt;/code&gt; event ensures consistent and predictable handling of errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a056961ff3bdb7c76c478689117c030d14d553dd" translate="yes" xml:space="preserve">
          <source>It is recommended that errors occurring during the processing of the &lt;code&gt;writable._write()&lt;/code&gt; and &lt;code&gt;writable._writev()&lt;/code&gt; methods are reported by invoking the callback and passing the error as the first argument. This will cause an &lt;code&gt;'error'&lt;/code&gt; event to be emitted by the &lt;code&gt;Writable&lt;/code&gt;. Throwing an &lt;code&gt;Error&lt;/code&gt; from within &lt;code&gt;writable._write()&lt;/code&gt; can result in unexpected and inconsistent behavior depending on how the stream is being used. Using the callback ensures consistent and predictable handling of errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea16402f95d8daded063cf513af19663455d8c99" translate="yes" xml:space="preserve">
          <source>It is recommended to encode public keys as &lt;code&gt;'spki'&lt;/code&gt; and private keys as &lt;code&gt;'pkcs8'&lt;/code&gt; with encryption for long-term storage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be30c74885508dee4aa59c7f4ed4177d22aed095" translate="yes" xml:space="preserve">
          <source>It is required that &lt;code&gt;byte_length + byte_offset&lt;/code&gt; is less than or equal to the size in bytes of the array passed in. If not, a &lt;code&gt;RangeError&lt;/code&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b0f46e9ce955411b0e5f9b89cbb8973cf2da94" translate="yes" xml:space="preserve">
          <source>It is still possible to use &lt;code&gt;fs.watchFile()&lt;/code&gt;, which uses stat polling, but this method is slower and less reliable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139b9846793e9d67315fbc1333aef413751a7253" translate="yes" xml:space="preserve">
          <source>It is strongly encouraged to place dependencies in the local &lt;code&gt;node_modules&lt;/code&gt; folder. These will be loaded faster, and more reliably.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57e947162fc04e3a4c5011c7abce4b05a307aa0" translate="yes" xml:space="preserve">
          <source>It is unsafe to call &lt;code&gt;writev()&lt;/code&gt; multiple times on the same file without waiting for the previous operation to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a074961b126d1ed61535ab8ccf81ae46b4f5b8c" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;filehandle.write()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected). For this scenario, use &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa06e1e67ec61d886012a5ebbf346afac1c50178" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;filehandle.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327d5849595d0b2d3af0390f737024885e0b74a4" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.write()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3527578258e75386e719cb61809fc94de47660" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt; is recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd51ed95a8e7ff9d29a46cc5b594661dab21ee9" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fs.writev()&lt;/code&gt; multiple times on the same file without waiting for the callback. For this scenario, use &lt;a href=&quot;#fs_fs_createwritestream_path_options&quot;&gt;&lt;code&gt;fs.createWriteStream()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32bdefd256d2a24661a921234ae0d689962bf7c" translate="yes" xml:space="preserve">
          <source>It is unsafe to use &lt;code&gt;fsPromises.writeFile()&lt;/code&gt; multiple times on the same file without waiting for the &lt;code&gt;Promise&lt;/code&gt; to be resolved (or rejected).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e339f1709056e0ab06d967b94bed7dafd547b83" translate="yes" xml:space="preserve">
          <source>It is usually not necessary to do this. However, if using an agent with &lt;code&gt;keepAlive&lt;/code&gt; enabled, then it is best to explicitly shut down the agent when it will no longer be used. Otherwise, sockets may hang open for quite a long time before the server terminates them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588053c04448ff48f8bf959f153ee214ac140018" translate="yes" xml:space="preserve">
          <source>It is very important for APIs to be either 100% synchronous or 100% asynchronous. Consider this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0324495de22e85e0d134839d942c3962300cbac5" translate="yes" xml:space="preserve">
          <source>It keeps top-level variables (defined with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;) scoped to the module rather than the global object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e75e459c92e28df79b2b636a0f41ab57292e39" translate="yes" xml:space="preserve">
          <source>It may be useful for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d4c4a6b07ad03b9db87fefb27c47016dd56d4f" translate="yes" xml:space="preserve">
          <source>It must belong to the same context as the parent &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389a01fac4a0ef708ee83106d03f5176a5d0807c" translate="yes" xml:space="preserve">
          <source>It performs the inverse operation to &lt;a href=&quot;#url_url_domaintoascii_domain&quot;&gt;&lt;code&gt;url.domainToASCII()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f3dc61a93c5fe87d9de7e00282a1c8432614fc" translate="yes" xml:space="preserve">
          <source>It performs the inverse operation to &lt;a href=&quot;#url_url_domaintounicode_domain&quot;&gt;&lt;code&gt;url.domainToUnicode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ec379b732d9cc8bb302ba29e2ef8af384a9552" translate="yes" xml:space="preserve">
          <source>It serializes the following types of values passed in &lt;code&gt;obj&lt;/code&gt;: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type&quot;&gt;&amp;lt;string[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type&quot;&gt;&amp;lt;number[]&amp;gt;&lt;/a&gt; | &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type&quot;&gt;&amp;lt;boolean[]&amp;gt;&lt;/a&gt; Any other input values will be coerced to empty strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a4bb7259c84af569c9b2e4d90c56c3c0ed3ef3" translate="yes" xml:space="preserve">
          <source>It will rarely be necessary to use &lt;code&gt;readable.wrap()&lt;/code&gt; but the method has been provided as a convenience for interacting with older Node.js applications and libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d542fd12f985c8768fbe8ead6923a0d00b50f32" translate="yes" xml:space="preserve">
          <source>It's required that &lt;code&gt;(length * size_of_element) + byte_offset&lt;/code&gt; should be &amp;lt;= the size in bytes of the array passed in. If not, a &lt;code&gt;RangeError&lt;/code&gt; exception is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a3b56cedfed26ace470da3c86678970122c99f" translate="yes" xml:space="preserve">
          <source>Iterates over each name-value pair in the query and invokes the given function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0eca1e364367b12a698606c4b171ea9cc0b251" translate="yes" xml:space="preserve">
          <source>Its &lt;code&gt;linkingStatus&lt;/code&gt; must not be &lt;code&gt;'errored'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56643b463dc4ce55950dfcbbef495be7564e51fe" translate="yes" xml:space="preserve">
          <source>Its possible to get the ticket keys by calling &lt;a href=&quot;#tls_server_getticketkeys&quot;&gt;&lt;code&gt;server.getTicketKeys()&lt;/code&gt;&lt;/a&gt; on one server instance and then distribute them, but it is more reasonable to securely generate 48 bytes of secure random data and set them with the &lt;code&gt;ticketKeys&lt;/code&gt; option of &lt;a href=&quot;#tls_tls_createserver_options_secureconnectionlistener&quot;&gt;&lt;code&gt;tls.createServer()&lt;/code&gt;&lt;/a&gt;. The keys should be regularly regenerated and server's keys can be reset with &lt;a href=&quot;#tls_server_setticketkeys_keys&quot;&gt;&lt;code&gt;server.setTicketKeys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96b84d8240a01cb379b56b8ddafa735704cf6dc" translate="yes" xml:space="preserve">
          <source>JSON Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99d73b448c0f1ffea6212a90bfd357cad49d279" translate="yes" xml:space="preserve">
          <source>JSON fetching example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b9a43a2017f679eee5493180c26ed2f1e85185" translate="yes" xml:space="preserve">
          <source>JSON modules follow the &lt;a href=&quot;https://html.spec.whatwg.org/#creating-a-json-module-script&quot;&gt;WHATWG JSON modules specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be23b85acb18166e5a08c5600a8d19dd96e42e39" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;Section 24.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719a95a4bd9cf0b14d2f00175d73f2e6d748c5c3" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;ArrayBuffer&lt;/code&gt;s are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-arraybuffer-objects&quot;&gt;Section 24.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8a0f0228ff639ea0dc5a1ba127ae8157e21154" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;DataView&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-dataview-objects&quot;&gt;Section 24.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1277ef9e321fb8f47bd20f93e6f1911ecebefc" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Date&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-date-objects&quot;&gt;Section 20.3&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4939241f55942c05d559f3a5b9a7e5d692c058d3" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;Function&lt;/code&gt;s are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-function-objects&quot;&gt;Section 19.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9060b350cc54a90664674036d8765a0574ec82" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;code&gt;TypedArray&lt;/code&gt; objects are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-typedarray-objects&quot;&gt;Section 22.2&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52cad7d4c62e41b12e029e3a1056b734751ff955" translate="yes" xml:space="preserve">
          <source>JavaScript Embedder API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48785657daead33de8f57e1fb9950e0b74a5ba21" translate="yes" xml:space="preserve">
          <source>JavaScript Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c87a0c72e80e2b3ed246c907f512dd6657150a6" translate="yes" xml:space="preserve">
          <source>JavaScript arrays are described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-array-objects&quot;&gt;Section 22.1&lt;/a&gt; of the ECMAScript Language Specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41362f31a71042ce6d33522241a4d37c00acbcd3" translate="yes" xml:space="preserve">
          <source>JavaScript cannot encode 64-bit integers. This method is intended for working with 64-bit floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec7f745469211f8ad0113b8267b2dbc38c96dca" translate="yes" xml:space="preserve">
          <source>JavaScript code can be compiled and run immediately or compiled, saved, and run later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c23bb655ecc1d108ac1670bce1574ac9c38369" translate="yes" xml:space="preserve">
          <source>JavaScript functions can normally only be called from a native addon's main thread. If an addon creates additional threads, then N-API functions that require a &lt;code&gt;napi_env&lt;/code&gt;, &lt;code&gt;napi_value&lt;/code&gt;, or &lt;code&gt;napi_ref&lt;/code&gt; must not be called from those threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37b66a76531faf963b06cfaf86c9ef0c5a880f1" translate="yes" xml:space="preserve">
          <source>JavaScript string escaping requires paths to be specified with extra backslash escaping such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e07413b34ffd366886a0fb40b6c95efba1be0d7" translate="yes" xml:space="preserve">
          <source>JavaScript value: these are represented in N-API by &lt;code&gt;napi_value&lt;/code&gt;. This can be a &lt;code&gt;napi_value&lt;/code&gt; representing a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, or &lt;code&gt;Symbol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a71118cb899549ef60707eb4c7093a6139cf8e2" translate="yes" xml:space="preserve">
          <source>Key events in the lifetime of asynchronous events have been categorized into four areas: instantiation, before/after the callback is called, and when the instance is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fd293e6b52b92ee891b25260a8dcb7640476d7" translate="yes" xml:space="preserve">
          <source>Key-value pairs of header names and values. Header names are lower-cased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0219bac0488bb0b49dd2dc78aa3d21e7f7786afc" translate="yes" xml:space="preserve">
          <source>KeyObject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90247e04a9ab9c31144526b27a99cafa47c9ed23" translate="yes" xml:space="preserve">
          <source>Keys are lowercased. Values are not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4d0497bc308dc68e2b86f9d700c936ee0973b7" translate="yes" xml:space="preserve">
          <source>Launching Node.js using the &lt;code&gt;--throw-deprecation&lt;/code&gt; command line flag will cause custom deprecation warnings to be thrown as exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcbad204095230ea14447be64d133cef03f50d2" translate="yes" xml:space="preserve">
          <source>Launching the Node.js process as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8751555a3239b7dac027ac31b93be45c7a72a5" translate="yes" xml:space="preserve">
          <source>Legacy &lt;code&gt;urlObject&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12363dec3cec522658520bb14b574d2c38d4a9b" translate="yes" xml:space="preserve">
          <source>Legacy API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff0473a6005f02c6ee988eeea5c4589c0cee01e" translate="yes" xml:space="preserve">
          <source>Legacy Node.js Error Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c20dd0e85aff7e0a43472ec0bd080ec8d34d100" translate="yes" xml:space="preserve">
          <source>Legacy Streams API (pre Node.js v0.10)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20be4f6f706ee94b9055b8d2bb127f7bf2f5336" translate="yes" xml:space="preserve">
          <source>Legacy URL API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5edbf5c71f5ce411aa5b2426065109df221ad37" translate="yes" xml:space="preserve">
          <source>Legacy mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1cabfb965ba7b42cb732ed586da70b61d4573f" translate="yes" xml:space="preserve">
          <source>Legacy mode uses the &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-equality-comparison&quot;&gt;Abstract Equality Comparison&lt;/a&gt; in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461cb9806496bebf38f62add29762de4f9878b5d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;directoryKeys&lt;/em&gt; be the list of keys of &lt;em&gt;exports&lt;/em&gt; ending in &lt;em&gt;&quot;/&quot;&lt;/em&gt;, sorted by length descending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed43a3cca8d0829c50efa33ad8a1735744b22695" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;exports&lt;/em&gt; be &lt;em&gt;pjson.exports&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1edf85bc7e8552161c136541aa74c4bb663ae6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;format&lt;/em&gt; be the result of &lt;strong&gt;ESM_FORMAT&lt;/strong&gt;(&lt;em&gt;resolvedURL&lt;/em&gt;, &lt;em&gt;isMain&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2049abb9ba314181946c48daedfb30d6cac2d4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;legacyMainURL&lt;/em&gt; be the result applying the legacy &lt;strong&gt;LOAD_AS_DIRECTORY&lt;/strong&gt; CommonJS resolver to &lt;em&gt;packageURL&lt;/em&gt;, throwing a &lt;em&gt;Module Not Found&lt;/em&gt; error for no resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382b20b41c3fc6df5c3fd1360c69bcd4bdb1e7b4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageName&lt;/em&gt; be &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d816a69a606558435c2f7bf214574701cee0921" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageSubpath&lt;/em&gt; be &lt;em&gt;undefined&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3879a2c60ae8d9f31de4e2f2d3064c3f0a2e8df0" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;packageURL&lt;/em&gt; be the URL resolution of &lt;em&gt;&quot;node_modules/&quot;&lt;/em&gt; concatenated with &lt;em&gt;packageSpecifier&lt;/em&gt;, relative to &lt;em&gt;parentURL&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e82e8cf4cd3d2806cefa31d11b42457fe816e03" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;(&lt;em&gt;packageURL&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd3c96f5f0c598b9a6ae47e36bce4121bbd96e8" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_JSON&lt;/strong&gt;(&lt;em&gt;scopeURL&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f236242b656b209b4a987cbd649a5c634a38f6f6" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjson&lt;/em&gt; be the result of &lt;strong&gt;READ_PACKAGE_SCOPE&lt;/strong&gt;(&lt;em&gt;url&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7efdf0ad8c2e8e15cf9c24ae647213041bbfe4d" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;pjsonURL&lt;/em&gt; be the resolution of &lt;em&gt;&quot;package.json&quot;&lt;/em&gt; within &lt;em&gt;packageURL&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e85c83e3ea0b6dee0e7b7a3595ed1051fc6f538" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the URL resolution of the concatenation of &lt;em&gt;subpath&lt;/em&gt; and &lt;em&gt;resolvedTarget&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2ee789e16379e2ecc056e36d8d03d2ab18d4c4" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolved&lt;/em&gt; be the result of &lt;strong&gt;PACKAGE_EXPORTS_TARGET_RESOLVE&lt;/strong&gt;(&lt;em&gt;packageURL&lt;/em&gt;, &lt;em&gt;targetValue&lt;/em&gt;, &lt;em&gt;subpath&lt;/em&gt;), continuing the loop on abrupt completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e52620ed2cc63ebf756b6791942858e8a11582" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedMain&lt;/em&gt; be the URL resolution of &lt;em&gt;packageURL&lt;/em&gt;, &quot;/&quot;, and &lt;em&gt;pjson.main&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff7aedeb5d501d6e47d5396e51dcb3bb302bb04" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedTarget&lt;/em&gt; be the URL resolution of the concatenation of &lt;em&gt;packageURL&lt;/em&gt; and &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df506eb548277050de9692d3004f4e6b5b2aa9c" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;resolvedURL&lt;/em&gt; be &lt;strong&gt;undefined&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a293d31acbcb53e85a6f620e95bc60fec4dd62" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;scopeURL&lt;/em&gt; be &lt;em&gt;url&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dfbc5cc254de35a61a79580bcfc017d43a648a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;subpath&lt;/em&gt; be the substring of &lt;em&gt;target&lt;/em&gt; starting at the index of the length of &lt;em&gt;directory&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce6d12ce9449fc911cc9f55c4eb8f68b7cd7887" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;exports[directory]&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197f5bec0ba9b0be792276cfd7d785ccdea0317a" translate="yes" xml:space="preserve">
          <source>Let &lt;em&gt;target&lt;/em&gt; be the value of &lt;em&gt;exports[packagePath]&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05022795ff4fc80ccdb0eaa2b31a46cf687fbad" translate="yes" xml:space="preserve">
          <source>Let's say that we wanted to have the folder at &lt;code&gt;/usr/lib/node/&amp;lt;some-package&amp;gt;/&amp;lt;some-version&amp;gt;&lt;/code&gt; hold the contents of a specific version of a package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494a09f021c47478da7edc0019571233304558a0" translate="yes" xml:space="preserve">
          <source>Library developers that handle their own asynchronous resources performing tasks like I/O, connection pooling, or managing callback queues may use the &lt;code&gt;AsyncWrap&lt;/code&gt; JavaScript API so that all the appropriate callbacks are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca7e018936674f1d60758637269700311826fef" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#fs_class_fs_readstream&quot;&gt;&lt;code&gt;ReadStream&lt;/code&gt;&lt;/a&gt;, if &lt;code&gt;fd&lt;/code&gt; is specified, &lt;a href=&quot;#fs_class_fs_writestream&quot;&gt;&lt;code&gt;WriteStream&lt;/code&gt;&lt;/a&gt; will ignore the &lt;code&gt;path&lt;/code&gt; argument and will use the specified file descriptor. This means that no &lt;code&gt;'open'&lt;/code&gt; event will be emitted. &lt;code&gt;fd&lt;/code&gt; should be blocking; non-blocking &lt;code&gt;fd&lt;/code&gt;s should be passed to &lt;a href=&quot;net#net_class_net_socket&quot;&gt;&lt;code&gt;net.Socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851f0f8a8001316f6429280c11651db02e375ab1" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;http#http_http_get_options_callback&quot;&gt;&lt;code&gt;http.get()&lt;/code&gt;&lt;/a&gt; but for HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643276916be86da834620569b341d9177bff2e84" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Workers&lt;/a&gt; and the &lt;a href=&quot;cluster&quot;&gt;&lt;code&gt;cluster&lt;/code&gt; module&lt;/a&gt;, two-way communication can be achieved through inter-thread message passing. Internally, a &lt;code&gt;Worker&lt;/code&gt; has a built-in pair of &lt;a href=&quot;#worker_threads_class_messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;s that are already associated with each other when the &lt;code&gt;Worker&lt;/code&gt; is created. While the &lt;code&gt;MessagePort&lt;/code&gt; object on the parent side is not directly exposed, its functionalities are exposed through &lt;a href=&quot;#worker_threads_worker_postmessage_value_transferlist&quot;&gt;&lt;code&gt;worker.postMessage()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;#worker_threads_event_message_1&quot;&gt;&lt;code&gt;worker.on('message')&lt;/code&gt;&lt;/a&gt; event on the &lt;code&gt;Worker&lt;/code&gt; object for the parent thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbd9c14005cc13742bdf9a1be2f6cfdb9bd756e" translate="yes" xml:space="preserve">
          <source>Like in CommonJS, files within packages can be accessed by appending a path to the package name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b5a42854b5eed52a170023a09f02fc6d959468" translate="yes" xml:space="preserve">
          <source>Likewise, changing from a non-special protocol to a special protocol is also not permitted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dd6783b6493064f30b8f1541b693a42e5ccd3c" translate="yes" xml:space="preserve">
          <source>Limit engine usage to CIPHERS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93986208e144b83e2c97be29664bbada85c8e0bd" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5015c701e9eb1d4dc682b1335a18b14503b0f5" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DIGESTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78c46d774a0e75daea31d4c9cffa2c56e543091" translate="yes" xml:space="preserve">
          <source>Limit engine usage to DSA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8732a9dbae5a0828ffbb44002b1242202da2c9de" translate="yes" xml:space="preserve">
          <source>Limit engine usage to EC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcab6206e8a488e5549d5ec3e6b1d5da76478c8" translate="yes" xml:space="preserve">
          <source>Limit engine usage to PKEY_ASN1_METHS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87885cad223c9bd4e4894b1854a73b7f044844b0" translate="yes" xml:space="preserve">
          <source>Limit engine usage to PKEY_METHDS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4022d5e22f1d34c3d5c81034adf42f203a7574aa" translate="yes" xml:space="preserve">
          <source>Limit engine usage to RAND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9deea2b1b94be12b96f38053a33676be8cc7d149" translate="yes" xml:space="preserve">
          <source>Limit engine usage to RSA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1450afe809ec7487cbb884eaae49c4b7de1dd9ef" translate="yes" xml:space="preserve">
          <source>Limit the amount of time the parser will wait to receive the complete HTTP headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f203cc5a857dde040cc3f179c0e2e65d49f9ce37" translate="yes" xml:space="preserve">
          <source>Limits maximum incoming headers count. If set to 0, no limit will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9201ce577050bd27894faffcae483339dbb7b78e" translate="yes" xml:space="preserve">
          <source>Limits maximum response headers count. If set to 0, no limit will be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80016ec82b8321d01a31f3c875531ddcc399155d" translate="yes" xml:space="preserve">
          <source>Link module dependencies. This method must be called before instantiation, and can only be called once per module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99751c95e6330f5ee80abdd67407538e0c2ab2d7" translate="yes" xml:space="preserve">
          <source>Linking has failed for this module (&lt;code&gt;linkingStatus&lt;/code&gt; is &lt;code&gt;'errored'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6137853119d6841cba11a0baee353a57f0a1174f" translate="yes" xml:space="preserve">
          <source>Linking to Node.js' own dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9e059087370a1f7ba9840dcffd7d8f1c5943ff" translate="yes" xml:space="preserve">
          <source>List of Deprecated APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1103e732d98418ac8b2c82f0196dadba02f7f6d0" translate="yes" xml:space="preserve">
          <source>Listener functions &lt;strong&gt;must&lt;/strong&gt; only perform &lt;strong&gt;synchronous&lt;/strong&gt; operations. The Node.js process will exit immediately after calling the &lt;code&gt;'exit'&lt;/code&gt; event listeners causing any additional work still queued in the event loop to be abandoned. In the following example, for instance, the timeout will never occur:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77125edc2a436f1f45f34348108362e176b01cda" translate="yes" xml:space="preserve">
          <source>Listeners on this event will receive a clone of the &lt;code&gt;value&lt;/code&gt; parameter as passed to &lt;code&gt;postMessage()&lt;/code&gt; and no further arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64b06f1e2a3005863a818b791661622631104ad" translate="yes" xml:space="preserve">
          <source>Listeners registered for the &lt;code&gt;'newListener'&lt;/code&gt; event will be passed the event name and a reference to the listener being added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263ff6da0a60052822f43bf968da5510ee95e89b" translate="yes" xml:space="preserve">
          <source>Listening for this event will have an effect only on connections established after the addition of the event listener.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e55c3e5d75f22479bbed5d621f6f8ed741f295b" translate="yes" xml:space="preserve">
          <source>Listening on a file descriptor is not supported on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efea073c6c15864c713d76af7447f0d00ffffa38" translate="yes" xml:space="preserve">
          <source>Load &lt;em&gt;resolvedURL&lt;/em&gt; as module format, &lt;em&gt;format&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b98d38dd9ba6d75f2dcf66b3094803bd93b8a69" translate="yes" xml:space="preserve">
          <source>Load a JSON file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358aca8bed2102b20d329cb6c2d609fd3c90cb03" translate="yes" xml:space="preserve">
          <source>Load a Node.js CommonJS module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00177c623e9ac0d49cba30da3c54b3c977b49a06" translate="yes" xml:space="preserve">
          <source>Load a Node.js builtin module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1eef931eb753eece9d6e34ced7f072cb22fcdba" translate="yes" xml:space="preserve">
          <source>Load a WebAssembly module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7519ad71b3a2bfc0f580ea1764b54f66e24c2e6f" translate="yes" xml:space="preserve">
          <source>Load a standard JavaScript module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498893670658c01dd4ac6da4786a9dc9aa6df8e5" translate="yes" xml:space="preserve">
          <source>Load an OpenSSL configuration file on startup. Among other uses, this can be used to enable FIPS-compliant crypto if Node.js is built with &lt;code&gt;./configure --openssl-fips&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee62206d8350faeb416823dca497bcc9021efda7" translate="yes" xml:space="preserve">
          <source>Load and set the &lt;code&gt;engine&lt;/code&gt; for some or all OpenSSL functions (selected by flags).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864c89092077bd29bba0c7d8aa4a1ee0ee9ad0eb" translate="yes" xml:space="preserve">
          <source>Loading Addons using require()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7543238941e199c9c4cd5eb05bb0366a0f0e3cf" translate="yes" xml:space="preserve">
          <source>Loading from &lt;code&gt;node_modules&lt;/code&gt; Folders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679458d12984235f54fda878bb725b25ccc3fbe0" translate="yes" xml:space="preserve">
          <source>Loading from the global folders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab431df60aff2443055adf445c69510d18e5e54" translate="yes" xml:space="preserve">
          <source>Locale-sensitive methods like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare&quot;&gt;&lt;code&gt;String.prototype.localeCompare()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString&quot;&gt;&lt;code&gt;Date.prototype.toLocaleString()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ef9686a9d07af86ddb6785cca13fffd98fde0f" translate="yes" xml:space="preserve">
          <source>Locale-sensitive or Unicode-aware functions in the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53836d61b88bc9ebe5ff04c57ab3d5e85b3ccd6f" translate="yes" xml:space="preserve">
          <source>Location at which the report will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e500d4d84a92a8c0603625b4b6fd77177fa0a2b3" translate="yes" xml:space="preserve">
          <source>MD5 and SHA-1 are no longer acceptable where collision resistance is required such as digital signatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d931caa3fae8fb2300ea8f1d2a55be58e1a3d8" translate="yes" xml:space="preserve">
          <source>MODULE_NOT_FOUND</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ec46742fb947b44338032993756f78da0b54d2" translate="yes" xml:space="preserve">
          <source>Made &lt;code&gt;func&lt;/code&gt; parameter optional with custom &lt;code&gt;call_js_cb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb480a8a8b26324095457c616935d3f1841b3f51" translate="yes" xml:space="preserve">
          <source>Maintains an internal counter specific to &lt;code&gt;label&lt;/code&gt; and outputs to &lt;code&gt;stdout&lt;/code&gt; the number of times &lt;code&gt;console.count()&lt;/code&gt; has been called with the given &lt;code&gt;label&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a81028c010c15e7a86469745fd56a7b314afde0" translate="yes" xml:space="preserve">
          <source>Make a self-contained library use its own symbols in preference to symbols from previously loaded libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e5fc2cf8facef6490eacd62f42219179c768b6" translate="yes" xml:space="preserve">
          <source>Makes a request to a secure web server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ef1a913ec8293839a75b3ea0986e203581e748" translate="yes" xml:space="preserve">
          <source>Making handle lifespan shorter than that of the native method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7258012eabbd3b3ddb7a3bfafbe25922453be58" translate="yes" xml:space="preserve">
          <source>Mandatory file extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7517849408f94693f21294c1f40a914dd912fa2" translate="yes" xml:space="preserve">
          <source>Marks an &lt;code&gt;ArrayBuffer&lt;/code&gt; as having its contents transferred out of band. Pass the corresponding &lt;code&gt;ArrayBuffer&lt;/code&gt; in the deserializing context to &lt;a href=&quot;#v8_deserializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;deserializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9d92daad3190f7c23fb73a149a2e3ed5745cfd" translate="yes" xml:space="preserve">
          <source>Marks an &lt;code&gt;ArrayBuffer&lt;/code&gt; as having its contents transferred out of band. Pass the corresponding &lt;code&gt;ArrayBuffer&lt;/code&gt; in the serializing context to &lt;a href=&quot;#v8_serializer_transferarraybuffer_id_arraybuffer&quot;&gt;&lt;code&gt;serializer.transferArrayBuffer()&lt;/code&gt;&lt;/a&gt; (or return the &lt;code&gt;id&lt;/code&gt; from &lt;a href=&quot;#v8_serializer_getsharedarraybufferid_sharedarraybuffer&quot;&gt;&lt;code&gt;serializer._getSharedArrayBufferId()&lt;/code&gt;&lt;/a&gt; in the case of &lt;code&gt;SharedArrayBuffer&lt;/code&gt;s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2ad0793ef76124b1034c1cea3ed4e613e126d0" translate="yes" xml:space="preserve">
          <source>Marks the request as aborting. Calling this will cause remaining data in the response to be dropped and the socket to be destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f845dbfd32891203afbc6c332195efbd6298479" translate="yes" xml:space="preserve">
          <source>Max header size in &lt;code&gt;http_parser&lt;/code&gt; was set to 8KB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21ff80ab9cf701ac46a3167e21f3037801508fd" translate="yes" xml:space="preserve">
          <source>Measuring how long it takes to load dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9128f1b632621e70aa390a4486c36bb163baf0c8" translate="yes" xml:space="preserve">
          <source>Measuring the duration of async operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1eb41c5de244b704fcf15f3bc0f13c999a4f71" translate="yes" xml:space="preserve">
          <source>Memory Usage Tuning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2bb3d6a7f5790d759cba72823f3811d734fe09" translate="yes" xml:space="preserve">
          <source>MessageChannel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce120a41bf22d68c9fab53d50c8a38d4440d65a" translate="yes" xml:space="preserve">
          <source>MessagePort</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532bb72b545e75db867501d58fef21423a35b550" translate="yes" xml:space="preserve">
          <source>Method(s) to implement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be11d28d855c168de0db39411d017ffe8e5d8b28" translate="yes" xml:space="preserve">
          <source>Methods that return TLS connection metadata (e.g. &lt;a href=&quot;#tls_tlssocket_getpeercertificate_detailed&quot;&gt;&lt;code&gt;tls.TLSSocket.getPeerCertificate()&lt;/code&gt;&lt;/a&gt; will only return data while the connection is open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3efaca5f13d398812424482d57e438a3b44995" translate="yes" xml:space="preserve">
          <source>Modern Web browsers follow the &lt;a href=&quot;https://encoding.spec.whatwg.org/&quot;&gt;WHATWG Encoding Standard&lt;/a&gt; which aliases both &lt;code&gt;'latin1'&lt;/code&gt; and &lt;code&gt;'ISO-8859-1'&lt;/code&gt; to &lt;code&gt;'win-1252'&lt;/code&gt;. This means that while doing something like &lt;code&gt;http.get()&lt;/code&gt;, if the returned charset is one of those listed in the WHATWG specification it is possible that the server actually returned &lt;code&gt;'win-1252'&lt;/code&gt;-encoded data, and using &lt;code&gt;'latin1'&lt;/code&gt; encoding may incorrectly decode the characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5ee885e59c3666b818d0a51c7fee388b17e46d" translate="yes" xml:space="preserve">
          <source>Modifies the permissions on the file. The &lt;code&gt;Promise&lt;/code&gt; is resolved with no arguments upon success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e955b90e741d4c82b9b85c4cc9aa35c010f53aa4" translate="yes" xml:space="preserve">
          <source>Modifying a file rather than replacing it may require a flags mode of &lt;code&gt;'r+'&lt;/code&gt; rather than the default mode &lt;code&gt;'w'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cd669deb64182bb1486f9edc35fe42bd6d7f56" translate="yes" xml:space="preserve">
          <source>Modifying the Default TLS Cipher suite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386917eb344492726f971a2580c72bd0600c3297" translate="yes" xml:space="preserve">
          <source>Modifying the new &lt;code&gt;Buffer&lt;/code&gt; slice will modify the memory in the original &lt;code&gt;Buffer&lt;/code&gt; because the allocated memory of the two objects overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7606a01db550a47662b629f247d6367bcf7282" translate="yes" xml:space="preserve">
          <source>Module Caching Caveats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83624ccd7b5527bbf857a1fbcf3723edba0da40a" translate="yes" xml:space="preserve">
          <source>Module registration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7939217a1ff65e34d944c1af418682a3959683e6" translate="yes" xml:space="preserve">
          <source>Module.createRequireFromPath() is deprecated. Please use &lt;a href=&quot;modules#modules_module_createrequire_filename&quot;&gt;&lt;code&gt;module.createRequire()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85946d17e9abcad5d8c5d7ff7e55541e63757d01" translate="yes" xml:space="preserve">
          <source>Modules are cached after the first time they are loaded. This means (among other things) that every call to &lt;code&gt;require('foo')&lt;/code&gt; will get exactly the same object returned, if it would resolve to the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9328fdb06dec7493c1ac0a3bc42b0f79daf79a03" translate="yes" xml:space="preserve">
          <source>Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from &lt;code&gt;node_modules&lt;/code&gt; folders), it is not a &lt;em&gt;guarantee&lt;/em&gt; that &lt;code&gt;require('foo')&lt;/code&gt; will always return the exact same object, if it would resolve to different files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e1343a6af7d08fdfab4981e72800f3eb87862a" translate="yes" xml:space="preserve">
          <source>Modules are cached in this object when they are required. By deleting a key value from this object, the next &lt;code&gt;require&lt;/code&gt; will reload the module. This does not apply to &lt;a href=&quot;addons&quot;&gt;native addons&lt;/a&gt;, for which reloading will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d05571b964dddda3ae3561348588cfd26ddbfa" translate="yes" xml:space="preserve">
          <source>Modules that have an invalid &lt;code&gt;main&lt;/code&gt; entry (e.g., &lt;code&gt;./does-not-exist.js&lt;/code&gt;) and also have an &lt;code&gt;index.js&lt;/code&gt; file in the top level directory will resolve the &lt;code&gt;index.js&lt;/code&gt; file. That is deprecated and is going to throw an error in future Node.js versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8cb9d5d814826c94ca425c65a80591a56c453c" translate="yes" xml:space="preserve">
          <source>Modules will be loaded multiple times if the &lt;code&gt;import&lt;/code&gt; specifier used to resolve them have a different query or fragment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fbb2012f6d47e34578586d91fdc3981db8daf4" translate="yes" xml:space="preserve">
          <source>More accurate &lt;a href=&quot;repl#repl_repl&quot;&gt;REPL&lt;/a&gt; line editing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecdbeb6845d999cf7003e1812bec6e641a5510d" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;fs&lt;/code&gt; operations accept filepaths that may be specified in the form of a string, a &lt;a href=&quot;buffer#buffer_buffer&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;, or a &lt;a href=&quot;url#url_the_whatwg_url_api&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object using the &lt;code&gt;file:&lt;/code&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82cff11b4bb5481a6d7ac80aec40ddd830fc32bf" translate="yes" xml:space="preserve">
          <source>Most applications should consider using the new &lt;code&gt;KeyObject&lt;/code&gt; API instead of passing keys as strings or &lt;code&gt;Buffer&lt;/code&gt;s due to improved security features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cb9dba8d1ec1bda32d3869a385011e92bc7b15" translate="yes" xml:space="preserve">
          <source>Most asynchronous methods exposed by the Node.js core API follow an idiomatic pattern referred to as an &lt;em&gt;error-first callback&lt;/em&gt;. With this pattern, a callback function is passed to the method as an argument. When the operation either completes or an error is raised, the callback function is called with the &lt;code&gt;Error&lt;/code&gt; object (if any) passed as the first argument. If no error was raised, the first argument will be passed as &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf34ac485339ebd83193dd184575f98649766ac" translate="yes" xml:space="preserve">
          <source>Most asynchronous methods that accept a &lt;code&gt;callback&lt;/code&gt; function will accept an &lt;code&gt;Error&lt;/code&gt; object passed as the first argument to that function. If that first argument is not &lt;code&gt;null&lt;/code&gt; and is an instance of &lt;code&gt;Error&lt;/code&gt;, then an error occurred that should be handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8ceb2fddd337b5e111a9cd6250634bdec17c99" translate="yes" xml:space="preserve">
          <source>Most operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cebb6899365ed285fb7b9339be5b27f9d9ab5f" translate="yes" xml:space="preserve">
          <source>Much of the Node.js core API is built around an idiomatic asynchronous event-driven architecture in which certain kinds of objects (called &quot;emitters&quot;) emit named events that cause &lt;code&gt;Function&lt;/code&gt; objects (&quot;listeners&quot;) to be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b9e9e4f853d5c9f436fb23cb6c1226b9b3c6d3" translate="yes" xml:space="preserve">
          <source>Multiple alternatives may be specified, for instance: &lt;code&gt;'h2=&quot;example.org:81&quot;, h2=&quot;:82&quot;'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5479027d01ceffdeaae68128ea7b4adf28374c" translate="yes" xml:space="preserve">
          <source>Multiple comma-separated &lt;code&gt;section&lt;/code&gt; names may be specified in the &lt;code&gt;NODE_DEBUG&lt;/code&gt; environment variable: &lt;code&gt;NODE_DEBUG=fs,net,tls&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f2ab40edb60bf40787bb6edf23d36b9c543077" translate="yes" xml:space="preserve">
          <source>Multiple concatenated gzip file members are supported now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4215a6b0ba9f7218f437607dda8f17b06a6cd29" translate="yes" xml:space="preserve">
          <source>Multiple empty entries are now parsed correctly (e.g. &lt;code&gt;&amp;amp;=&amp;amp;=&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11e7417524b09c3c63dbb1d8edf3a8d679325c8" translate="yes" xml:space="preserve">
          <source>Multiple values were provided for an HTTP/2 header field that was required to have only a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfd7073a743f5ff4fda510240475719d7850d63" translate="yes" xml:space="preserve">
          <source>N-API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cbc0e18027d4869385351bdb9ade6021ccdf03" translate="yes" xml:space="preserve">
          <source>N-API (pronounced N as in the letter, followed by API) is an API for building native Addons. It is independent from the underlying JavaScript runtime (for example, V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one major version to run on later major versions of Node.js without recompilation. The &lt;a href=&quot;https://nodejs.org/en/docs/guides/abi-stability/&quot;&gt;ABI Stability&lt;/a&gt; guide provides a more in-depth explanation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334e1de2311ffce54fb9769c28586c411d51f5fe" translate="yes" xml:space="preserve">
          <source>N-API Callback types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ada9d09ff541a5d3e10d36683dca70ab044cf65" translate="yes" xml:space="preserve">
          <source>N-API Memory Management types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f918c2169b9c207f636baeefc2f5e1825de6091" translate="yes" xml:space="preserve">
          <source>N-API Version Matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd2329041a56e471a3596295b8fded33cd92bcd" translate="yes" xml:space="preserve">
          <source>N-API defines the &lt;code&gt;napi_work&lt;/code&gt; structure which is used to manage asynchronous workers. Instances are created/deleted with &lt;a href=&quot;#n_api_napi_create_async_work&quot;&gt;&lt;code&gt;napi_create_async_work&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#n_api_napi_delete_async_work&quot;&gt;&lt;code&gt;napi_delete_async_work&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f54237d497e37e1e102b35a1c9c4125fb96d0f" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to create all types of JavaScript values. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values&quot;&gt;Section 6&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7ee8aa91b06eb2761965bea9b3ca7d13159118" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to get and set properties on JavaScript objects. Some of these types are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-operations-on-objects&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b7e76dd3e6c6d68488dbe2b8f2a01306cdd1b3" translate="yes" xml:space="preserve">
          <source>N-API exposes a set of APIs to perform some abstract operations on JavaScript values. Some of these operations are documented under &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-abstract-operations&quot;&gt;Section 7&lt;/a&gt; of the &lt;a href=&quot;https://tc39.github.io/ecma262/&quot;&gt;ECMAScript Language Specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c61dcfa47476fc6fa41772f59614e57871819b0" translate="yes" xml:space="preserve">
          <source>N-API exposes the following fundamental datatypes as abstractions that are consumed by the various APIs. These APIs should be treated as opaque, introspectable only with other N-API calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561e1622d71e550f526caaa66deabdc9dfbdc3cb" translate="yes" xml:space="preserve">
          <source>N-API is an API for building native Addons. It is independent from the underlying JavaScript runtime (e.g. V8) and is maintained as part of Node.js itself. This API will be Application Binary Interface (ABI) stable across versions of Node.js. It is intended to insulate Addons from changes in the underlying JavaScript engine and allow modules compiled for one version to run on later versions of Node.js without recompilation. Addons are built/packaged with the same approach/tools outlined in this document (node-gyp, etc.). The only difference is the set of APIs that are used by the native code. Instead of using the V8 or &lt;a href=&quot;https://github.com/nodejs/nan&quot;&gt;Native Abstractions for Node.js&lt;/a&gt; APIs, the functions available in the N-API are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0738955b59acf88770860528a15013618ab13c78" translate="yes" xml:space="preserve">
          <source>N-API modules are registered in a manner similar to other modules except that instead of using the &lt;code&gt;NODE_MODULE&lt;/code&gt; macro the following is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce7ec8745b23919ab41738dc2e8d90813f2426a" translate="yes" xml:space="preserve">
          <source>N-API offers a way to &quot;wrap&quot; C++ classes and instances so that the class constructor and methods can be called from JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45efbba7b6828bb6ff691538d9468098a20c4570" translate="yes" xml:space="preserve">
          <source>N-API only supports a single nested hierarchy of scopes. There is only one active scope at any time, and all new handles will be associated with that scope while it is active. Scopes must be closed in the reverse order from which they are opened. In addition, all scopes created within a native method must be closed before returning from that method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b60dab0bc992db521955215d2463d3ce27f102" translate="yes" xml:space="preserve">
          <source>N-API provides a function for getting the current event loop associated with a specific &lt;code&gt;napi_env&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d292a608d795d02e9feb5215a93624719c5f3d" translate="yes" xml:space="preserve">
          <source>N-API provides a set of APIs that allow JavaScript code to call back into native code. N-API APIs that support calling back into native code take in a callback functions represented by the &lt;code&gt;napi_callback&lt;/code&gt; type. When the JavaScript VM calls back to native code, the &lt;code&gt;napi_callback&lt;/code&gt; function provided is invoked. The APIs documented in this section allow the callback function to do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01090223361802809df29f213e82e3b9319fcf72" translate="yes" xml:space="preserve">
          <source>N-API provides an ABI-stable interface for these supporting functions which covers the most common asynchronous use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f39db522f9283fcef0c912ba468da776135f241" translate="yes" xml:space="preserve">
          <source>N-API provides an API for executing a string containing JavaScript using the underlying JavaScript engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2313fc0c61261c329c023f99d171fe8dbee4423c" translate="yes" xml:space="preserve">
          <source>N-API provides facilities for creating &lt;code&gt;Promise&lt;/code&gt; objects as described in &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-objects&quot;&gt;Section 25.4&lt;/a&gt; of the ECMA specification. It implements promises as a pair of objects. When a promise is created by &lt;code&gt;napi_create_promise()&lt;/code&gt;, a &quot;deferred&quot; object is created and returned alongside the &lt;code&gt;Promise&lt;/code&gt;. The deferred object is bound to the created &lt;code&gt;Promise&lt;/code&gt; and is the only means to resolve or reject the &lt;code&gt;Promise&lt;/code&gt; using &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; or &lt;code&gt;napi_reject_deferred()&lt;/code&gt;. The deferred object that is created by &lt;code&gt;napi_create_promise()&lt;/code&gt; is freed by &lt;code&gt;napi_resolve_deferred()&lt;/code&gt; or &lt;code&gt;napi_reject_deferred()&lt;/code&gt;. The &lt;code&gt;Promise&lt;/code&gt; object may be returned to JavaScript where it can be used in the usual fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d99e6c12543c037d84d75d93df6bb441b536baa" translate="yes" xml:space="preserve">
          <source>N-API provides functions for registering and un-registering such callbacks. When those callbacks are run, all resources that are being held by the addon should be freed up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c3cd228011e5d9137f1bb00c23394226dbfbfc" translate="yes" xml:space="preserve">
          <source>N-API provides methods to create persistent references to an object. Each persistent reference has an associated count with a value of 0 or higher. The count determines if the reference will keep the corresponding object live. References with a count of 0 do not prevent the object from being collected and are often called 'weak' references. Any count greater than 0 will prevent the object from being collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21039b0e91105633cdec6fe19581a15729f4b937" translate="yes" xml:space="preserve">
          <source>N-API sets up the environment prior to calling this callback, so it is sufficient to call the JavaScript function via &lt;code&gt;napi_call_function&lt;/code&gt; rather than via &lt;code&gt;napi_make_callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea939312c782d8c5e666ab405635666046b5b1f" translate="yes" xml:space="preserve">
          <source>N-API uses both return values and JavaScript exceptions for error handling. The following sections explain the approach for each case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1171e6e250c8137afa5e0b60938de57ff990d9c4" translate="yes" xml:space="preserve">
          <source>N-API values are represented by the type &lt;code&gt;napi_value&lt;/code&gt;. Any N-API call that requires a JavaScript value takes in a &lt;code&gt;napi_value&lt;/code&gt;. However, it's the caller's responsibility to make sure that the &lt;code&gt;napi_value&lt;/code&gt; in question is of the JavaScript type expected by the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed30e9f4e0aa475cc4bcf4606fa7aa3e116ab3a4" translate="yes" xml:space="preserve">
          <source>N-API values are represented by the type &lt;code&gt;napi_value&lt;/code&gt;. Any N-API call that requires a JavaScript value takes in a &lt;code&gt;napi_value&lt;/code&gt;. In some cases, the API does check the type of the &lt;code&gt;napi_value&lt;/code&gt; up-front. However, for better performance, it's better for the caller to make sure that the &lt;code&gt;napi_value&lt;/code&gt; in question is of the JavaScript type expected by the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af583d89de0c7c4b8c0e6223b8b144c689c84cc0" translate="yes" xml:space="preserve">
          <source>N-API version: 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42eb0bf2898c4d90751141d61f3a812907fc83bc" translate="yes" xml:space="preserve">
          <source>N-API version: 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36688c47c6b67b86c616353a7b6ea5bc6ef4edce" translate="yes" xml:space="preserve">
          <source>N-API versions are additive and versioned independently from Node.js. Version 4 is an extension to version 3 in that it has all of the APIs from version 3 with some additions. This means that it is not necessary to recompile for new versions of Node.js which are listed as supporting a later version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad766507b42c419a18a1fab4a93852992d6d506" translate="yes" xml:space="preserve">
          <source>Name of the file to which the report will be written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc22075ed2175ad5ccc2508aac2f833f87e45dda" translate="yes" xml:space="preserve">
          <source>Named: a simple UTF8-encoded string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7137f503dc2584ea8280d497399006e247e659b7" translate="yes" xml:space="preserve">
          <source>Native Abstractions for Node.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcea4b8da29480f402438959046ab2f9f368022" translate="yes" xml:space="preserve">
          <source>Native add-ons can only be loaded from multiple threads if they fulfill &lt;a href=&quot;addons#addons_worker_support&quot;&gt;certain conditions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6675537e94c99d143279098c166eb1d6147b5fc" translate="yes" xml:space="preserve">
          <source>Native addons may need to allocate global state of which they make use during their entire life cycle such that the state must be unique to each instance of the addon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264fa17f0716888a4cd2265fb034958375c3d60e" translate="yes" xml:space="preserve">
          <source>Negative &lt;code&gt;end&lt;/code&gt; values throw an &lt;code&gt;ERR_INDEX_OUT_OF_RANGE&lt;/code&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba80e45016258331008bc495a573c344a21c641" translate="yes" xml:space="preserve">
          <source>Neither the well known nor extra certificates are used when the &lt;code&gt;ca&lt;/code&gt; options property is explicitly specified for a TLS or HTTPS client or server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb81c2eccbed59ee8cbe296f1278f0ca1f364cc" translate="yes" xml:space="preserve">
          <source>Net</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d926a391a10419818faebd2c569e4c93c8a271b" translate="yes" xml:space="preserve">
          <source>New HTTP/2 Streams may not be opened after the &lt;code&gt;Http2Session&lt;/code&gt; has received a &lt;code&gt;GOAWAY&lt;/code&gt; frame from the connected peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7193207627db5aaa3ebdacf110c6817d0cb0fe81" translate="yes" xml:space="preserve">
          <source>New applications should expect the default to be &lt;code&gt;'buffer'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538dbd3921c4aa1f787f750bebace3312d5e5773" translate="yes" xml:space="preserve">
          <source>New instances of &lt;code&gt;dgram.Socket&lt;/code&gt; are created using &lt;a href=&quot;#dgram_dgram_createsocket_options_callback&quot;&gt;&lt;code&gt;dgram.createSocket()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;new&lt;/code&gt; keyword is not to be used to create &lt;code&gt;dgram.Socket&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8286903a3b42f30c2845be65b9063df789c12e5a" translate="yes" xml:space="preserve">
          <source>New option &lt;code&gt;withFileTypes&lt;/code&gt; was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc072aabd2bae6e9c49b6e900e7612de2b36503a" translate="yes" xml:space="preserve">
          <source>Next, invoke the &lt;code&gt;node-gyp build&lt;/code&gt; command to generate the compiled &lt;code&gt;addon.node&lt;/code&gt; file. This will be put into the &lt;code&gt;build/Release/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c6db9ea82d2e5e907d48b09a58571de5491306" translate="yes" xml:space="preserve">
          <source>No &lt;a href=&quot;#stream_event_data&quot;&gt;&lt;code&gt;'data'&lt;/code&gt;&lt;/a&gt; event listener is added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7713480c15dd839650512046c796bdd1e22142e3" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;NODE_PATH&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e365ecb80d6c5e0aee9009ce4f7cb44fc85a412" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.cache&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdcf81df39a04935671e5f913e82a9ed67ac793" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require.extensions&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bd086942e812ae818e7cbfbd123ebe5c91a9cf" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;module.exports&lt;/code&gt;, &lt;code&gt;__filename&lt;/code&gt;, &lt;code&gt;__dirname&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d424da21bf8bf374cdfa3070439b63b71a40f17e" translate="yes" xml:space="preserve">
          <source>No Error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d617594d209195a47bc9a68e67dac23de396ed7" translate="yes" xml:space="preserve">
          <source>No case conversion is performed on case-insensitive file systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3331168b9cff4f62863ed956ba7c063dc1e66ff" translate="yes" xml:space="preserve">
          <source>No decoding of the &lt;code&gt;path&lt;/code&gt; is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6ddfb774d5f9c27c27174db32faeb0af1ec6da" translate="yes" xml:space="preserve">
          <source>No decoding of the path string is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c8ff0aedccedab26b0a9cc20907ad8d12092c6" translate="yes" xml:space="preserve">
          <source>No decoding of the query string is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03f0fd922f89467f81c73b168c18f01a6802039" translate="yes" xml:space="preserve">
          <source>No default extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927a7432a2380470b398b68e7bf815a0c092cf92" translate="yes" xml:space="preserve">
          <source>No folder mains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b78d39dcf9723cadf7c92f189fafd553d14144" translate="yes" xml:space="preserve">
          <source>Node.js (and its underlying V8 engine) uses &lt;a href=&quot;http://site.icu-project.org/&quot;&gt;ICU&lt;/a&gt; to implement these features in native C/C++ code. However, some of them require a very large ICU data file in order to support all locales of the world. Because it is expected that most Node.js users will make use of only a small portion of ICU functionality, only a subset of the full ICU data set is provided by Node.js by default. Several options are provided for customizing and expanding the ICU data set either when building or running Node.js.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c6ff3487c288f0b8d40123f15c094451d4d58d" translate="yes" xml:space="preserve">
          <source>Node.js Addons are dynamically-linked shared objects, written in C++, that can be loaded into Node.js using the &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; function, and used just as if they were an ordinary Node.js module. They are used primarily to provide an interface between JavaScript running in Node.js and C/C++ libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51be1c370c336ba5619c2e9080dd4bf368c9c46b" translate="yes" xml:space="preserve">
          <source>Node.js Crypto Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441aa6a1425f4454daa77eeba4c8ce3a18045fb8" translate="yes" xml:space="preserve">
          <source>Node.js Error Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179df0cc5008db133b8bc9a59310d37319853e06" translate="yes" xml:space="preserve">
          <source>Node.js can be started using the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; command line option to cause all newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances to be zero-filled upon creation by default. Before Node.js 8.0.0, this included buffers allocated by &lt;code&gt;new Buffer(size)&lt;/code&gt;. Since Node.js 8.0.0, buffers allocated with &lt;code&gt;new&lt;/code&gt; are always zero-filled, whether this option is used or not. &lt;a href=&quot;#buffer_class_method_buffer_allocunsafe_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafe()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#buffer_class_method_buffer_allocunsafeslow_size&quot;&gt;&lt;code&gt;Buffer.allocUnsafeSlow()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;new SlowBuffer(size)&lt;/code&gt;. Use of this flag can have a significant negative impact on performance. Use of the &lt;code&gt;--zero-fill-buffers&lt;/code&gt; option is recommended only when necessary to enforce that newly allocated &lt;code&gt;Buffer&lt;/code&gt; instances cannot contain old data that is potentially sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f1a7ae4eec5392042ce17901f72140ba89d819" translate="yes" xml:space="preserve">
          <source>Node.js can link against an ICU build already installed on the system. In fact, most Linux distributions already come with ICU installed, and this option would make it possible to reuse the same set of data used by other components in the OS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5810ddd39bdfe4323cf379ac3f7b781e60db98e0" translate="yes" xml:space="preserve">
          <source>Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700f33732d1ab659fda7ca90f224da1753e7cde0" translate="yes" xml:space="preserve">
          <source>Node.js contains experimental support for creating policies on loading code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4994583ed9ea64b95980a99b8ac9cb934c0c8136" translate="yes" xml:space="preserve">
          <source>Node.js contains support for ES Modules based upon the &lt;a href=&quot;https://github.com/nodejs/node-eps/blob/master/002-es-modules.md&quot;&gt;Node.js EP for ES Modules&lt;/a&gt; and the &lt;a href=&quot;https://github.com/nodejs/modules/blob/master/doc/plan-for-new-modules-implementation.md&quot;&gt;ECMAScript-modules implementation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f284dbd956cb499dff05c1a4c98369975a26484c" translate="yes" xml:space="preserve">
          <source>Node.js currently overwrites &lt;code&gt;argv[0]&lt;/code&gt; with &lt;code&gt;process.execPath&lt;/code&gt; on startup, so &lt;code&gt;process.argv[0]&lt;/code&gt; in a Node.js child process will not match the &lt;code&gt;argv0&lt;/code&gt; parameter passed to &lt;code&gt;spawn&lt;/code&gt; from the parent, retrieve it with the &lt;code&gt;process.argv0&lt;/code&gt; property instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f1ec4dc71d40c8c7d0a68270209a7d73533f56" translate="yes" xml:space="preserve">
          <source>Node.js does not check whether Content-Length and the length of the body which has been transmitted are equal or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e7f421afd071d9d6af3f9498e9ce444a8edad0" translate="yes" xml:space="preserve">
          <source>Node.js does not provide routing logic. It is, therefore important to design an application such that it does not rely too heavily on in-memory data objects for things like sessions and login.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59620f5a7d966f7ed19e56a82fa67f4d669f5bf7" translate="yes" xml:space="preserve">
          <source>Node.js establishes signal handlers for &lt;code&gt;SIGINT&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; and Node.js processes will not terminate immediately due to receipt of those signals. Rather, Node.js will perform a sequence of cleanup actions and then will re-raise the handled signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b03b3b5fea382e76a7a57c11964832d9a8b669da" translate="yes" xml:space="preserve">
          <source>Node.js fully supports ECMAScript modules as they are currently specified and provides limited interoperability between them and the existing module format, &lt;a href=&quot;modules&quot;&gt;CommonJS&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9420a48ed10cc5802fa3b78bba7653131bf1a8e" translate="yes" xml:space="preserve">
          <source>Node.js generates system errors when exceptions occur within its runtime environment. These usually occur when an application violates an operating system constraint. For example, a system error will occur if an application attempts to read a file that does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cd156f333656194d6d4ee97e4372a26119bd21" translate="yes" xml:space="preserve">
          <source>Node.js has many features that make it easier to write internationalized programs. Some of them are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195eccef86c70efe3ada3da5e4f20eea967db8b4" translate="yes" xml:space="preserve">
          <source>Node.js has several modules compiled into the binary. These modules are described in greater detail elsewhere in this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d67c8f1728279b2419e85378220842f097aa2a" translate="yes" xml:space="preserve">
          <source>Node.js includes a number of other statically linked libraries including OpenSSL. These other libraries are located in the &lt;code&gt;deps/&lt;/code&gt; directory in the Node.js source tree. Only the libuv, OpenSSL, V8 and zlib symbols are purposefully re-exported by Node.js and may be used to various extents by Addons. See &lt;a href=&quot;#addons_linking_to_node_js_own_dependencies&quot;&gt;Linking to Node.js' own dependencies&lt;/a&gt; for additional information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4002058c11230c8c613d48125799d611e8e5ab90" translate="yes" xml:space="preserve">
          <source>Node.js includes an out-of-process debugging utility accessible via a &lt;a href=&quot;#debugger_v8_inspector_integration_for_node_js&quot;&gt;V8 Inspector&lt;/a&gt; and built-in debugging client. To use it, start Node.js with the &lt;code&gt;inspect&lt;/code&gt; argument followed by the path to the script to debug; a prompt will be displayed indicating successful launch of the debugger:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9aede62d41177b7855358a4024583daeb12072" translate="yes" xml:space="preserve">
          <source>Node.js inspector supports all the Chrome DevTools Protocol domains declared by V8. Chrome DevTools Protocol domain provides an interface for interacting with one of the runtime agents used to inspect the application state and listen to the run-time events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8c531580042ddb6a9c8b040b19ffbdbcdd1525" translate="yes" xml:space="preserve">
          <source>Node.js is a trademark of Joyent, Inc. and is used with its permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38a0ebf21cebf178508d7332d871c116478b9e4" translate="yes" xml:space="preserve">
          <source>Node.js is built with a default suite of enabled and disabled TLS ciphers. Currently, the default cipher suite is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d419b29bddd025ae8da2d1cd92469cb932388b2a" translate="yes" xml:space="preserve">
          <source>Node.js itself uses the &lt;code&gt;repl&lt;/code&gt; module to provide its own interactive interface for executing JavaScript. This can be used by executing the Node.js binary without passing any arguments (or by passing the &lt;code&gt;-i&lt;/code&gt; argument):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09bc63e6e483ddf848817dae917ca441f8c70d6" translate="yes" xml:space="preserve">
          <source>Node.js maintains several connections per server to make HTTP requests. This function allows one to transparently issue requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef83fb721ff96281b3ffd2a1bcbc9e428f3194ea" translate="yes" xml:space="preserve">
          <source>Node.js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.js will attempt to remove the destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2313c41832d43d1e319cb20bebf01ebb24487d" translate="yes" xml:space="preserve">
          <source>Node.js may deprecate APIs for any of the following reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6a49596101ad1c6c0a10180ddfbbd5d2267fc0" translate="yes" xml:space="preserve">
          <source>Node.js options that are allowed are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138fea06dce092e1d24f06c81c94c22277dd9c70" translate="yes" xml:space="preserve">
          <source>Node.js processes launched with a custom &lt;code&gt;execPath&lt;/code&gt; will communicate with the parent process using the file descriptor (fd) identified using the environment variable &lt;code&gt;NODE_CHANNEL_FD&lt;/code&gt; on the child process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5196287aca961808313ef47efa5a6a6078aaae9f" translate="yes" xml:space="preserve">
          <source>Node.js supports several mechanisms for propagating and handling errors that occur while an application is running. How these errors are reported and handled depends entirely on the type of &lt;code&gt;Error&lt;/code&gt; and the style of the API that is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f6a2adac24b09ba48add96ffd834e0b65b5a81" translate="yes" xml:space="preserve">
          <source>Node.js used to support all GCM authentication tag lengths which are accepted by OpenSSL when calling &lt;a href=&quot;crypto#crypto_decipher_setauthtag_buffer&quot;&gt;&lt;code&gt;decipher.setAuthTag()&lt;/code&gt;&lt;/a&gt;. Beginning with Node.js v11.0.0, only authentication tag lengths of 128, 120, 112, 104, 96, 64, and 32 bits are allowed. Authentication tags of other lengths are invalid per &lt;a href=&quot;https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38d.pdf&quot;&gt;NIST SP 800-38D&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9b6124a3880fa2afa106c7ef712fc837b2b911" translate="yes" xml:space="preserve">
          <source>Node.js uses a &lt;code&gt;KeyObject&lt;/code&gt; class to represent a symmetric or asymmetric key, and each kind of key exposes different functions. The &lt;a href=&quot;#crypto_crypto_createsecretkey_key&quot;&gt;&lt;code&gt;crypto.createSecretKey()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#crypto_crypto_createpublickey_key&quot;&gt;&lt;code&gt;crypto.createPublicKey()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#crypto_crypto_createprivatekey_key&quot;&gt;&lt;code&gt;crypto.createPrivateKey()&lt;/code&gt;&lt;/a&gt; methods are used to create &lt;code&gt;KeyObject&lt;/code&gt; instances. &lt;code&gt;KeyObject&lt;/code&gt; objects are not to be created directly using the &lt;code&gt;new&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c8c1daba3fd0b1fc631a3c4423fc53da9f7c2d" translate="yes" xml:space="preserve">
          <source>Node.js uses a number of statically linked libraries such as V8, libuv and OpenSSL. All Addons are required to link to V8 and may link to any of the other dependencies as well. Typically, this is as simple as including the appropriate &lt;code&gt;#include &amp;lt;...&amp;gt;&lt;/code&gt; statements (e.g. &lt;code&gt;#include &amp;lt;v8.h&amp;gt;&lt;/code&gt;) and &lt;code&gt;node-gyp&lt;/code&gt; will locate the appropriate headers automatically. However, there are a few caveats to be aware of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc44a7efe4f28833703418200a1bb5df5098eb3" translate="yes" xml:space="preserve">
          <source>Node.js utilizes three kinds of Deprecations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46a838b1cdedce2bf909aec9c2762a50a63df17" translate="yes" xml:space="preserve">
          <source>Node.js was compiled without &lt;code&gt;scrypt&lt;/code&gt; support. Not possible with the official release binaries but can happen with custom builds, including distro builds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be6c44f29011482418546ee57fd088cf4e02101" translate="yes" xml:space="preserve">
          <source>Node.js was unable to watch for the &lt;code&gt;SIGINT&lt;/code&gt; signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaa445f322cc3682bfe7bf5c6b4e24edfb5f0d7" translate="yes" xml:space="preserve">
          <source>Node.js will generate and throw &lt;code&gt;RangeError&lt;/code&gt; instances &lt;em&gt;immediately&lt;/em&gt; as a form of argument validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a136533538960fd36c0a7d5584874bcb8bdd70d" translate="yes" xml:space="preserve">
          <source>Node.js will generate and throw &lt;code&gt;TypeError&lt;/code&gt; instances &lt;em&gt;immediately&lt;/em&gt; as a form of argument validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b0b7269fa723a49aa2197764257f8d6198ae0b" translate="yes" xml:space="preserve">
          <source>Node.js will normally exit with a &lt;code&gt;0&lt;/code&gt; status code when no more async operations are pending. The following status codes are used in other cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d156462ec2e4a54246399867711ae97a6c34c54" translate="yes" xml:space="preserve">
          <source>Node.js will treat as CommonJS all other forms of input, such as &lt;code&gt;.js&lt;/code&gt; files where the nearest parent &lt;code&gt;package.json&lt;/code&gt; file contains no top-level &lt;code&gt;&quot;type&quot;&lt;/code&gt; field, or string input without the flag &lt;code&gt;--input-type&lt;/code&gt;. This behavior is to preserve backward compatibility. However, now that Node.js supports both CommonJS and ES modules, it is best to be explicit whenever possible. Node.js will treat the following as CommonJS when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2745ff23353f08077c9763af60cfd72843015ebb" translate="yes" xml:space="preserve">
          <source>Node.js's debugger client is not a full-featured debugger, but simple step and inspection are possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1013f374841b5452514d4b8359e7422406574b" translate="yes" xml:space="preserve">
          <source>Non-finite number values (&lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+Infinity&lt;/code&gt;, or &lt;code&gt;-Infinity&lt;/code&gt;) set the result to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5e643747b3ffedc83ffcb3b71cbc3c5585ca03" translate="yes" xml:space="preserve">
          <source>Not all constants will be available on every operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4436debc55754f82e9d430eaa05339b900fd927e" translate="yes" xml:space="preserve">
          <source>Not every constant will be available on every operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549ab44d98603b37017112009e5442a545e8a373" translate="yes" xml:space="preserve">
          <source>Not exported by the &lt;code&gt;zlib&lt;/code&gt; module. It is documented here because it is the base class of the compressor/decompressor classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf19ed98b0dffdc4b322b922e2a0a394c9f67eab" translate="yes" xml:space="preserve">
          <source>Not handling &lt;code&gt;Promise&lt;/code&gt; rejections is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f471ec3f86ad87114b1805cf0ff78e30f33eee3" translate="yes" xml:space="preserve">
          <source>Not listening to this event no longer causes the socket to be destroyed if a client sends an Upgrade header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73f792bf4588a09b4c61304ecd28cf0baf02107" translate="yes" xml:space="preserve">
          <source>Notable differences inside a Worker environment are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580765b00e88c3ab1fc90c8c0303dbfa89b6d16c" translate="yes" xml:space="preserve">
          <source>Note it is &lt;em&gt;not&lt;/em&gt; necessary to use &lt;code&gt;napi_make_callback&lt;/code&gt; from within a &lt;code&gt;napi_async_complete_callback&lt;/code&gt;; in that situation the callback's async context has already been set up, so a direct call to &lt;code&gt;napi_call_function&lt;/code&gt; is sufficient and appropriate. Use of the &lt;code&gt;napi_make_callback&lt;/code&gt; function may be required when implementing custom async behavior that does not use &lt;code&gt;napi_create_async_work&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e41c1622948c03f6ca8311eb8aef26b223ccf0" translate="yes" xml:space="preserve">
          <source>Note, however, that using &lt;code&gt;--preserve-symlinks&lt;/code&gt; can have other side effects. Specifically, symbolically linked &lt;em&gt;native&lt;/em&gt; modules can fail to load if those are linked from more than one location in the dependency tree (Node.js would see those as two separate modules and would attempt to load the module multiple times, causing an exception to be thrown).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972cb08f7fa7ede61014198194e4bb40a809cbac" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;getSession()&lt;/code&gt; works only for TLSv1.2 and below. For TLSv1.3, applications must use the &lt;a href=&quot;#tls_event_session&quot;&gt;&lt;code&gt;'session'&lt;/code&gt;&lt;/a&gt; event (it also works for TLSv1.2 and below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd844f1014ce393ccf5d8fffcaf8b96adac6bf1" translate="yes" xml:space="preserve">
          <source>Note: &lt;em&gt;specifier&lt;/em&gt; is now a bare specifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f9d22189eec14674a459713bb8e39e51c5a5c9" translate="yes" xml:space="preserve">
          <source>Note: For TLSv1.2 and below, &lt;a href=&quot;#tls_tlssocket_getsession&quot;&gt;&lt;code&gt;tls.TLSSocket.getSession()&lt;/code&gt;&lt;/a&gt; can be called once the handshake is complete. For TLSv1.3, only ticket based resumption is allowed by the protocol, multiple tickets are sent, and the tickets aren't sent until later, after the handshake completes, so it is necessary to wait for the &lt;code&gt;'session'&lt;/code&gt; event to get a resumable session. Applications are recommended to use the &lt;code&gt;'session'&lt;/code&gt; event instead of &lt;code&gt;getSession()&lt;/code&gt; to ensure they will work for all TLS protocol versions. Applications that only expect to get or use 1 session should listen for this event only once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8cc0b60938c91b13e1400e17c52a12ff07dd161" translate="yes" xml:space="preserve">
          <source>Note: The format of the output is identical to the output of &lt;code&gt;openssl s_client -trace&lt;/code&gt; or &lt;code&gt;openssl s_server -trace&lt;/code&gt;. While it is produced by OpenSSL's &lt;code&gt;SSL_trace()&lt;/code&gt; function, the format is undocumented, can change without notice, and should not be relied on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4616f15367371a5e06b48d2440f7200dc5d1e91b" translate="yes" xml:space="preserve">
          <source>Note: this is not a strong encapsulation as any private modules can still be loaded by absolute paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e915ad9f7438f469d5fcc18ac6ba4e549838fd" translate="yes" xml:space="preserve">
          <source>Numbers which contain a decimal point, such as floating-point numbers or numbers in scientific notation, are not an exception to this rule. Leading numbers up to the decimal point will be set as the URL's port, assuming they are valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950d326ee993b3c5fd62c84949251f546e884fe5" translate="yes" xml:space="preserve">
          <source>Numeric strings, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; are now allowed time specifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b569a17c3091df771016c89c44b2ffb4e1607960" translate="yes" xml:space="preserve">
          <source>OCSPRequest event (tls.Server)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869b3c3e713ad68da924ccf887bfa9fee9bd8b2b" translate="yes" xml:space="preserve">
          <source>OCSPResponse event (tls.TLSSocket)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8aa86286dbb8eb74d2748c7b6d4486d0458203" translate="yes" xml:space="preserve">
          <source>OS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4c411135eaccffeeffff0459da3c06dede6217" translate="yes" xml:space="preserve">
          <source>OS Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddd1661aadc76f58c10dd21eeb8e7deaace4a15" translate="yes" xml:space="preserve">
          <source>Object Creation Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802b3a5ff4c325801801b1f33c90e6aeb50581e9" translate="yes" xml:space="preserve">
          <source>Object Lifetime management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1a453a1b599c80407bbb5b25d54d19f9155848" translate="yes" xml:space="preserve">
          <source>Object Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e31dc36041309eb25a82e43f179da4c384a8655" translate="yes" xml:space="preserve">
          <source>Object Mode Duplex Streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00ee9265d488224abef0452c70b1277e5a83f49" translate="yes" xml:space="preserve">
          <source>Object Wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e782d8ce1f909216afa55f0563a026fe7e818df" translate="yes" xml:space="preserve">
          <source>Object factory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241d3fb63dae7cf76601d561abf3a990fe514c68" translate="yes" xml:space="preserve">
          <source>Objects may also define their own &lt;a href=&quot;#util_util_inspect_custom&quot;&gt;&lt;code&gt;[util.inspect.custom](depth, opts)&lt;/code&gt;&lt;/a&gt; function, which &lt;code&gt;util.inspect()&lt;/code&gt; will invoke and use the result of when inspecting the object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0d2e6c538dec52ec33838e688cc3db3a4ab623" translate="yes" xml:space="preserve">
          <source>Objects returned from &lt;a href=&quot;#fs_fs_stat_path_options_callback&quot;&gt;&lt;code&gt;fs.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#fs_fs_lstat_path_options_callback&quot;&gt;&lt;code&gt;fs.lstat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#fs_fs_fstat_fd_options_callback&quot;&gt;&lt;code&gt;fs.fstat()&lt;/code&gt;&lt;/a&gt; and their synchronous counterparts are of this type. If &lt;code&gt;bigint&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; passed to those methods is true, the numeric values will be &lt;code&gt;bigint&lt;/code&gt; instead of &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592e8c13ea9bd4b8af95ba0ada47b20335a6e103" translate="yes" xml:space="preserve">
          <source>Objects with circular references can be used as inputs now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ea40e2b9bd257d370923337e02a0992196f54f" translate="yes" xml:space="preserve">
          <source>Observe that the &lt;code&gt;then()&lt;/code&gt; callback claims to have executed in the context of the outer scope even though there was an asynchronous hop involved. Also, the &lt;code&gt;triggerAsyncId&lt;/code&gt; value is &lt;code&gt;0&lt;/code&gt;, which means that we are missing context about the resource that caused (triggered) the &lt;code&gt;then()&lt;/code&gt; callback to be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083bef7791cf9d1baf8a9873f071dfc52b64445d" translate="yes" xml:space="preserve">
          <source>Occasionally, the deprecation of an API may be reversed. In such situations, this document will be updated with information relevant to the decision. However, the deprecation identifier will not be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba38afb5d72c78a9ff4e1ee1598f9f9be252886d" translate="yes" xml:space="preserve">
          <source>Occurs with multiple attempts to shutdown an HTTP/2 session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10500e54805775e3d661be35724e87f0b1dbc4c9" translate="yes" xml:space="preserve">
          <source>Octal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48963a917f62904a1e8543a2ead20c099e2eff3" translate="yes" xml:space="preserve">
          <source>Offset and length are optional but both &lt;em&gt;must&lt;/em&gt; be set if either are used. They are supported only when the first argument is a &lt;code&gt;Buffer&lt;/code&gt; or &lt;code&gt;Uint8Array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a4dc432f9794752f6ad30e244e3a8e720cdc69" translate="yes" xml:space="preserve">
          <source>Old clients that rely on insecure and deprecated RC4 or DES-based ciphers (like Internet Explorer 6) cannot complete the handshaking process with the default configuration. If these clients &lt;em&gt;must&lt;/em&gt; be supported, the &lt;a href=&quot;https://wiki.mozilla.org/Security/Server_Side_TLS&quot;&gt;TLS recommendations&lt;/a&gt; may offer a compatible cipher suite. For more details on the format, see the OpenSSL &lt;a href=&quot;https://www.openssl.org/docs/man1.1.1/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39846a8f31378460759ab91e423751587cbcd672" translate="yes" xml:space="preserve">
          <source>Omitting the callback function on asynchronous fs functions is deprecated and may result in an error being thrown in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0e0b0451c6ef174ec5a71852c7111df84bc0bf" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures, this value is &lt;code&gt;(2^30)-1&lt;/code&gt; (~1GB). On 64-bit architectures, this value is &lt;code&gt;(2^31)-1&lt;/code&gt; (~2GB).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cece5a81c61c5200f22063c4263b25c9ea0fa07a" translate="yes" xml:space="preserve">
          <source>On Aix systems, this feature depends on &lt;a href=&quot;https://www.ibm.com/developerworks/aix/library/au-aix_event_infrastructure/&quot;&gt;&lt;code&gt;AHAFS&lt;/code&gt;&lt;/a&gt;, which must be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3287e458f7d140ce7af1d1893ae19d42b58cb150" translate="yes" xml:space="preserve">
          <source>On BSD systems, this uses &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cee5b68c9afac982d46719c80955c745508f033" translate="yes" xml:space="preserve">
          <source>On IPv4, if &lt;code&gt;multicastInterface&lt;/code&gt; is a valid address but does not match any interface, or if the address does not match the family then a &lt;a href=&quot;errors#errors_class_systemerror&quot;&gt;&lt;code&gt;System Error&lt;/code&gt;&lt;/a&gt; such as &lt;code&gt;EADDRNOTAVAIL&lt;/code&gt; or &lt;code&gt;EPROTONOSUP&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d73abdde568049652b60fdd5aaa144ebebd0fc9" translate="yes" xml:space="preserve">
          <source>On IPv6, most errors with specifying or omitting scope will result in the socket continuing to use (or returning to) the system's default interface selection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b541a8346341860cd7703b98a4352d06a66130" translate="yes" xml:space="preserve">
          <source>On Linux and macOS systems, &lt;code&gt;fs.watch()&lt;/code&gt; resolves the path to an &lt;a href=&quot;https://en.wikipedia.org/wiki/Inode&quot;&gt;inode&lt;/a&gt; and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the &lt;em&gt;original&lt;/em&gt; inode. Events for the new inode will not be emitted. This is expected behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f31ae143ca922e16ce486612875e1b465fba38" translate="yes" xml:space="preserve">
          <source>On Linux systems, this uses &lt;a href=&quot;http://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt;&lt;code&gt;inotify(7)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f183efec4feb7bfa6fc109ebc4023975000344" translate="yes" xml:space="preserve">
          <source>On Linux, child processes of child processes will not be terminated when attempting to kill their parent. This is likely to happen when running a new process in a shell or with the use of the &lt;code&gt;shell&lt;/code&gt; option of &lt;code&gt;ChildProcess&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7882f8e43f0f64c5514b81f5cfa8dcb3ff288045" translate="yes" xml:space="preserve">
          <source>On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c85a79493b7491ac9088c933d8b858c448602a" translate="yes" xml:space="preserve">
          <source>On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9554e400419b2712320ba3378dbdb33b6ba3a586" translate="yes" xml:space="preserve">
          <source>On Linux, when Node.js is linked against musl libc, the procfs file system must be mounted on &lt;code&gt;/proc&lt;/code&gt; in order for this function to work. Glibc does not have this restriction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46927efa147a220d19018a44c19bb0a81a2795b4" translate="yes" xml:space="preserve">
          <source>On POSIX and Windows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d7bab8caccee4037b352d1dd8b48e36fb94ee8" translate="yes" xml:space="preserve">
          <source>On POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a &lt;em&gt;file descriptor&lt;/em&gt;. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.js abstracts away the specific differences between operating systems and assigns all open files a numeric file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc406a1e7cf53219ab80c07c59e5aaa1d8a7ae6a" translate="yes" xml:space="preserve">
          <source>On POSIX systems, the operating system release is determined by calling &lt;a href=&quot;https://linux.die.net/man/3/uname&quot;&gt;&lt;code&gt;uname(3)&lt;/code&gt;&lt;/a&gt;. On Windows, &lt;code&gt;GetVersionExW()&lt;/code&gt; is used. Please see &lt;a href=&quot;https://en.wikipedia.org/wiki/Uname#Examples&quot;&gt;https://en.wikipedia.org/wiki/Uname#Examples&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43964d44f0ac16e56226d71c33bedb3c5fe5eddc" translate="yes" xml:space="preserve">
          <source>On POSIX:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb774d38621fd75eb708c21854f712a9058284b" translate="yes" xml:space="preserve">
          <source>On SunOS systems (including Solaris and SmartOS), this uses &lt;a href=&quot;http://illumos.org/man/port_create&quot;&gt;&lt;code&gt;event ports&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df56f9f559c9d44e41081b83b633aad4f3fae33d" translate="yes" xml:space="preserve">
          <source>On Unix, the local domain is also known as the Unix domain. The path is a filesystem pathname. It gets truncated to &lt;code&gt;sizeof(sockaddr_un.sun_path) - 1&lt;/code&gt;, which varies on different operating system between 91 and 107 bytes. The typical values are 107 on Linux and 103 on macOS. The path is subject to the same naming conventions and permissions checks as would be done on file creation. If the Unix domain socket (that is visible as a file system path) is created and used in conjunction with one of Node.js' API abstractions such as &lt;a href=&quot;#net_net_createserver_options_connectionlistener&quot;&gt;&lt;code&gt;net.createServer()&lt;/code&gt;&lt;/a&gt;, it will be unlinked as part of &lt;a href=&quot;#net_server_close_callback&quot;&gt;&lt;code&gt;server.close()&lt;/code&gt;&lt;/a&gt;. On the other hand, if it is created and used outside of these abstractions, the user will need to manually remove it. The same applies when the path was created by a Node.js API but the program crashes abruptly. In short, a Unix domain socket once successfully created will be visible in the filesystem, and will persist until unlinked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3972efd510cd3bdc92bf875a4f0a2ead952896ec" translate="yes" xml:space="preserve">
          <source>On Unix-like operating systems, the &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; method performs memory operations synchronously before decoupling the event loop from the child. Applications with a large memory footprint may find frequent &lt;a href=&quot;#child_process_child_process_spawn_command_args_options&quot;&gt;&lt;code&gt;child_process.spawn()&lt;/code&gt;&lt;/a&gt; calls to be a bottleneck. For more information, see &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=7381&quot;&gt;V8 issue 7381&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cccd5ed6fa224a3e49b57994f042004b58a3d24" translate="yes" xml:space="preserve">
          <source>On Windows Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example, &lt;code&gt;path.resolve('c:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;path.resolve('c:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44da2b295d7da47cf09267ff3645f95eea8d9b81" translate="yes" xml:space="preserve">
          <source>On Windows operating systems, environment variables are case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea919f697c12d8bddae320cb521d2942ea420cb" translate="yes" xml:space="preserve">
          <source>On Windows setting priority to &lt;code&gt;PRIORITY_HIGHEST&lt;/code&gt; requires elevated user, otherwise the set priority will be silently reduced to &lt;code&gt;PRIORITY_HIGH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec6383b7c3b09150b80d42778d5cc7a98c50e48" translate="yes" xml:space="preserve">
          <source>On Windows systems only, returns an equivalent &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#namespaces&quot;&gt;namespace-prefixed path&lt;/a&gt; for the given &lt;code&gt;path&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is not a string, &lt;code&gt;path&lt;/code&gt; will be returned without modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9768705b87b168aec5ab1fa9f7b54014d3f95ac4" translate="yes" xml:space="preserve">
          <source>On Windows systems, this feature depends on &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nf-winbase-readdirectorychangesw&quot;&gt;&lt;code&gt;ReadDirectoryChangesW&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df2880a42d4864e454ff5c30b2f005eea801949" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;NODE_PATH&lt;/code&gt; is delimited by semicolons (&lt;code&gt;;&lt;/code&gt;) instead of colons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5931a3f0a8409d7489021967eca3c561a80a89c9" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs having encoded backslash will result in a throw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91506a2d47b419ea0ee01cc61a92dad8cc27411b" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;file:&lt;/code&gt; URLs with a hostname convert to UNC paths, while &lt;code&gt;file:&lt;/code&gt; URLs with drive letters convert to local absolute paths. &lt;code&gt;file:&lt;/code&gt; URLs without a hostname nor a drive letter will result in a throw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb13f48dbe09dfcc8c8afd1a18188c31d89c540d" translate="yes" xml:space="preserve">
          <source>On Windows, Node.js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example &lt;code&gt;fs.readdirSync('c:\\')&lt;/code&gt; can potentially return a different result than &lt;code&gt;fs.readdirSync('c:')&lt;/code&gt;. For more information, see &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#fully-qualified-vs-relative-paths&quot;&gt;this MSDN page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe6267af9150e34384ccfb932409adc54221278" translate="yes" xml:space="preserve">
          <source>On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. The &lt;code&gt;fs.access()&lt;/code&gt; function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff139e0769d280257d0d48cf82151703507a29c" translate="yes" xml:space="preserve">
          <source>On Windows, both the forward slash (&lt;code&gt;/&lt;/code&gt;) and backward slash (&lt;code&gt;\&lt;/code&gt;) are accepted as path segment separators; however, the &lt;code&gt;path&lt;/code&gt; methods only add backward slashes (&lt;code&gt;\&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e941fdda19df2837a224780f4308d95357b323" translate="yes" xml:space="preserve">
          <source>On Windows, if the file descriptor is connected to the console (e.g. &lt;code&gt;fd == 1&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt;) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the &lt;code&gt;chcp 65001&lt;/code&gt; command. See the &lt;a href=&quot;https://ss64.com/nt/chcp.html&quot;&gt;chcp&lt;/a&gt; docs for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac67ee10708396162b94cc66d589c1b59dc10f64" translate="yes" xml:space="preserve">
          <source>On Windows, it is not yet possible to set up a named pipe server in a worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a20253c7c4edfcb2e4f480c38f30c92cd1f24b4" translate="yes" xml:space="preserve">
          <source>On Windows, opening an existing hidden file using the &lt;code&gt;'w'&lt;/code&gt; flag (either through &lt;code&gt;fs.open()&lt;/code&gt; or &lt;code&gt;fs.writeFile()&lt;/code&gt; or &lt;code&gt;fsPromises.open()&lt;/code&gt;) will fail with &lt;code&gt;EPERM&lt;/code&gt;. Existing hidden files can be opened for writing with the &lt;code&gt;'r+'&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c3c7ea68df8c4d84bf0458c22f4d8178e9c209" translate="yes" xml:space="preserve">
          <source>On Windows, setting &lt;code&gt;options.detached&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; makes it possible for the child process to continue running after the parent exits. The child will have its own console window. Once enabled for a child process, it cannot be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec484a036adf383f0cf83afa7944fb446a84f8f" translate="yes" xml:space="preserve">
          <source>On Windows, the leading slashes for UNC paths are now included in the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef45d44679240b74995b77a40348470a3214c30" translate="yes" xml:space="preserve">
          <source>On Windows, the local domain is implemented using a named pipe. The path &lt;em&gt;must&lt;/em&gt; refer to an entry in &lt;code&gt;\\?\pipe\&lt;/code&gt; or &lt;code&gt;\\.\pipe\&lt;/code&gt;. Any characters are permitted, but the latter may do some processing of pipe names, such as resolving &lt;code&gt;..&lt;/code&gt; sequences. Despite how it might look, the pipe namespace is flat. Pipes will &lt;em&gt;not persist&lt;/em&gt;. They are removed when the last reference to them is closed. Unlike Unix domain sockets, Windows will close and remove the pipe when the owning process exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d884e9df62086a09c3c39332a23060c917a2fd" translate="yes" xml:space="preserve">
          <source>On Windows, this is a &lt;code&gt;';'&lt;/code&gt;-separated list instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126249b93389124fc90335a9d8ca99dd0a8df116" translate="yes" xml:space="preserve">
          <source>On Windows, using &lt;code&gt;cmd.exe&lt;/code&gt; a single quote will not work correctly because it only recognizes double &lt;code&gt;&quot;&lt;/code&gt; for quoting. In Powershell or Git bash, both &lt;code&gt;'&lt;/code&gt; and &lt;code&gt;&quot;&lt;/code&gt; are usable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1aa8a0561e5d494303a1665e8c1c1ffaec18bdf" translate="yes" xml:space="preserve">
          <source>On Windows, using &lt;code&gt;fs.mkdir()&lt;/code&gt; on the root directory even with recursion will result in an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a625c5b6c3cb8c2b26fa2d6baf9cb114baf0b1" translate="yes" xml:space="preserve">
          <source>On Windows, where scope format uses an interface number:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b56364276b5f7e47e7f031287b139fc5b947d5" translate="yes" xml:space="preserve">
          <source>On Windows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5f22e0dff9bf222d72376b8ec44283751a3201" translate="yes" xml:space="preserve">
          <source>On all other platforms, &lt;code&gt;file:&lt;/code&gt; URLs with a hostname are unsupported and will result in a throw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358e1630770bd86b6eaadca9e6e64f99e4bb79cd" translate="yes" xml:space="preserve">
          <source>On an error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002bfab7979fd23e069b0486d57556dd50036776" translate="yes" xml:space="preserve">
          <source>On completion, &lt;code&gt;callback&lt;/code&gt; will be called with &lt;code&gt;err&lt;/code&gt; set to &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;publicKey&lt;/code&gt; / &lt;code&gt;privateKey&lt;/code&gt; representing the generated key pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7886649da2b50ecb04b5356e20760a1e5cb6366c" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is one of the &lt;a href=&quot;#dns_error_codes&quot;&gt;DNS error codes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944278cb905faca8676573641ea322dcf7de9025" translate="yes" xml:space="preserve">
          <source>On error, &lt;code&gt;err&lt;/code&gt; is an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28da3a89db66c1e49e35684df5651bd41326f739" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is one of the &lt;a href=&quot;#dns_error_codes&quot;&gt;DNS error codes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da16732d5d9a380f16a376ff4e654c12594bd786" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe534a2832704d62aaa34473a2409791c2952e2" translate="yes" xml:space="preserve">
          <source>On error, the &lt;code&gt;Promise&lt;/code&gt; is rejected with an &lt;a href=&quot;errors#errors_class_error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; object, where &lt;code&gt;err.code&lt;/code&gt; is the error code. Keep in mind that &lt;code&gt;err.code&lt;/code&gt; will be set to &lt;code&gt;'ENOTFOUND'&lt;/code&gt; not only when the hostname does not exist but also when the lookup fails in other ways such as no available file descriptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d274e72d3eaf33ae1f5b101442303f281721deb" translate="yes" xml:space="preserve">
          <source>On macOS, this uses &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=kqueue&amp;amp;sektion=2&quot;&gt;&lt;code&gt;kqueue(2)&lt;/code&gt;&lt;/a&gt; for files and &lt;a href=&quot;https://developer.apple.com/documentation/coreservices/file_system_events&quot;&gt;&lt;code&gt;FSEvents&lt;/code&gt;&lt;/a&gt; for directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39eb6da0166d08d18888bf5d340f82d447a083bd" translate="yes" xml:space="preserve">
          <source>On most platforms, &lt;code&gt;'rename'&lt;/code&gt; is emitted whenever a filename appears or disappears in the directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4558f0d2f934a695ab52b8b29e7288d194b5266" translate="yes" xml:space="preserve">
          <source>On most systems, where scope format uses the interface name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8df057d113972b6e227366e919aa409563a34a" translate="yes" xml:space="preserve">
          <source>On non-Windows platforms, if &lt;code&gt;options.detached&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the child process will be made the leader of a new process group and session. Child processes may continue running after the parent exits regardless of whether they are detached or not. See &lt;a href=&quot;http://man7.org/linux/man-pages/man2/setsid.2.html&quot;&gt;&lt;code&gt;setsid(2)&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1643cfbf0d28d755f6e901a412963cf366b998f6" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;callback&lt;/code&gt; will now be called with an &lt;code&gt;error&lt;/code&gt; argument of &lt;code&gt;null&lt;/code&gt; rather than &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b992a9b66ecf9c509977f4e79d71ce4d083dbf97" translate="yes" xml:space="preserve">
          <source>On the client side, instances of &lt;a href=&quot;#http2_class_clienthttp2stream&quot;&gt;&lt;code&gt;ClientHttp2Stream&lt;/code&gt;&lt;/a&gt; are created when the &lt;code&gt;http2session.request()&lt;/code&gt; method is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9f26bc28901e0da3bba962837c8a762d501500" translate="yes" xml:space="preserve">
          <source>On the client, the &lt;code&gt;Http2Stream&lt;/code&gt; instance returned by &lt;code&gt;http2session.request()&lt;/code&gt; may not be immediately ready for use if the parent &lt;code&gt;Http2Session&lt;/code&gt; has not yet been fully established. In such cases, operations called on the &lt;code&gt;Http2Stream&lt;/code&gt; will be buffered until the &lt;code&gt;'ready'&lt;/code&gt; event is emitted. User code should rarely, if ever, need to handle the &lt;code&gt;'ready'&lt;/code&gt; event directly. The ready status of an &lt;code&gt;Http2Stream&lt;/code&gt; can be determined by checking the value of &lt;code&gt;http2stream.id&lt;/code&gt;. If the value is &lt;code&gt;undefined&lt;/code&gt;, the stream is not yet ready for use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16439cf41d36a278e3eaf44e9d440d888072b10" translate="yes" xml:space="preserve">
          <source>On the client, the &lt;code&gt;session&lt;/code&gt; can be provided to the &lt;code&gt;session&lt;/code&gt; option of &lt;a href=&quot;#tls_tls_connect_options_callback&quot;&gt;&lt;code&gt;tls.connect()&lt;/code&gt;&lt;/a&gt; to resume the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df17243448ce58a6e9d8efe145f7f94cbbd06305" translate="yes" xml:space="preserve">
          <source>On the first line, &lt;code&gt;foo.js&lt;/code&gt; loads the module &lt;code&gt;circle.js&lt;/code&gt; that is in the same directory as &lt;code&gt;foo.js&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b07e2e6f8a12bd63b2638139eb922d67ad2dfaf" translate="yes" xml:space="preserve">
          <source>On the main thread, values are removed from the queue associated with the thread-safe function in an idle loop. This error indicates that an error has occurred when attempting to start the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb69afb09660b281005b2feb90d4b1d5ba3d6e1" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;code&gt;node-inspect&lt;/code&gt; may be installed locally through a package manager, as it is published on the npm registry under the same name. No source code modification is necessary if that is done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d01237536f26cbcba80929de5b721832402940" translate="yes" xml:space="preserve">
          <source>On the server side, instances of &lt;a href=&quot;#http2_class_serverhttp2stream&quot;&gt;&lt;code&gt;ServerHttp2Stream&lt;/code&gt;&lt;/a&gt; are created either when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93fbaba0c5ebedfd2d6fa15d405cceb8572a7ff1" translate="yes" xml:space="preserve">
          <source>On the server side, user code will typically not listen for this event directly, and would instead register a handler for the &lt;code&gt;'stream'&lt;/code&gt; event emitted by the &lt;code&gt;net.Server&lt;/code&gt; or &lt;code&gt;tls.Server&lt;/code&gt; instances returned by &lt;code&gt;http2.createServer()&lt;/code&gt; and &lt;code&gt;http2.createSecureServer()&lt;/code&gt;, respectively, as in the example below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28a2e0cd081287892b62dd1e0f530cc16c1da53" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;process.connected&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, it is no longer possible to send messages over the IPC channel using &lt;code&gt;process.send()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa23dc4c315219e395e0590efe1a2b70ca58a09" translate="yes" xml:space="preserve">
          <source>Once a &lt;code&gt;Socket&lt;/code&gt; has been bound to an &lt;code&gt;Http2Session&lt;/code&gt;, user code should rely solely on the API of the &lt;code&gt;Http2Session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73920c9a9f1ea9d30889c8dfb8841df2a90c168" translate="yes" xml:space="preserve">
          <source>Once a socket has been passed to a child, the parent is no longer capable of tracking when the socket is destroyed. To indicate this, the &lt;code&gt;.connections&lt;/code&gt; property becomes &lt;code&gt;null&lt;/code&gt;. It is recommended not to use &lt;code&gt;.maxConnections&lt;/code&gt; when this occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a692176ad95c5de300944c8834aa875a0d87f9b1" translate="yes" xml:space="preserve">
          <source>Once a socket is assigned to this request and is connected &lt;a href=&quot;net#net_socket_setkeepalive_enable_initialdelay&quot;&gt;&lt;code&gt;socket.setKeepAlive()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f52f26999bdf868260d070323acc69b57258b58" translate="yes" xml:space="preserve">
          <source>Once a socket is assigned to this request and is connected &lt;a href=&quot;net#net_socket_setnodelay_nodelay&quot;&gt;&lt;code&gt;socket.setNoDelay()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c79533c7386872c12f4b58db6859df57263cfa" translate="yes" xml:space="preserve">
          <source>Once a socket is assigned to this request and is connected &lt;a href=&quot;net#net_socket_settimeout_timeout_callback&quot;&gt;&lt;code&gt;socket.setTimeout()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd079e73c7a96e390596e9440343bcb5e17ed66" translate="yes" xml:space="preserve">
          <source>Once again, to build this example, the &lt;code&gt;myobject.cc&lt;/code&gt; file must be added to the &lt;code&gt;binding.gyp&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f447123bcb9f711d107a546941eab8691f611f" translate="yes" xml:space="preserve">
          <source>Once an event has been emitted, all listeners attached to it at the time of emitting will be called in order. This implies that any &lt;code&gt;removeListener()&lt;/code&gt; or &lt;code&gt;removeAllListeners()&lt;/code&gt; calls &lt;em&gt;after&lt;/em&gt; emitting and &lt;em&gt;before&lt;/em&gt; the last listener finishes execution will not remove them from &lt;code&gt;emit()&lt;/code&gt; in progress. Subsequent events will behave as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b0e5947e0cec9da5491e6da952ace81743900d" translate="yes" xml:space="preserve">
          <source>Once built, the binary Addon can be used from within Node.js by pointing &lt;a href=&quot;modules#modules_require_id&quot;&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/a&gt; to the built &lt;code&gt;addon.node&lt;/code&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b98e33970016f35017b9cd3f8d13b67f71f0b2" translate="yes" xml:space="preserve">
          <source>Once called, the &lt;code&gt;http2session.pendingSettingsAck&lt;/code&gt; property will be &lt;code&gt;true&lt;/code&gt; while the session is waiting for the remote peer to acknowledge the new settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b49eb661c1323cc9c21687a30ad06fc5aca2c4" translate="yes" xml:space="preserve">
          <source>Once compiled, the example Addon can be required and used from within Node.js:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c860007d4d4eedf037226ad7546486c7073ead4f" translate="yes" xml:space="preserve">
          <source>Once created the async worker can be queued for execution using the &lt;a href=&quot;#n_api_napi_queue_async_work&quot;&gt;&lt;code&gt;napi_queue_async_work&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde554252391956e05e5ec8e1b886df2dade9a50" translate="yes" xml:space="preserve">
          <source>Once destroyed, the &lt;code&gt;Http2Session&lt;/code&gt; will emit the &lt;code&gt;'close'&lt;/code&gt; event. If &lt;code&gt;error&lt;/code&gt; is not undefined, an &lt;code&gt;'error'&lt;/code&gt; event will be emitted immediately before the &lt;code&gt;'close'&lt;/code&gt; event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2d38c26dd12cdd65c7b3c851e009727e58fdc0" translate="yes" xml:space="preserve">
          <source>Once enabled, Node.js will treat the following as ES modules when passed to &lt;code&gt;node&lt;/code&gt; as the initial input, or when referenced by &lt;code&gt;import&lt;/code&gt; statements within ES module code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e0f4c1adc95b4748965a8b094cee1cd3d7802c" translate="yes" xml:space="preserve">
          <source>Once no more items are left in the queue, the idle loop must be suspended. This error indicates that the idle loop has failed to stop.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
