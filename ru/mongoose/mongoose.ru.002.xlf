<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="mongoose">
    <body>
      <group id="mongoose">
        <trans-unit id="b6c96060206dbf52f6bfa855c76ae13319f688cb" translate="yes" xml:space="preserve">
          <source>Counts number of documents matching &lt;code&gt;filter&lt;/code&gt; in a database collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572771309b091f20f3a1791f4087ae32416c54ab" translate="yes" xml:space="preserve">
          <source>Counts number of documents that match &lt;code&gt;filter&lt;/code&gt; in a database collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7125bc12f4923715fbf4bedd756ad37f54c97e97" translate="yes" xml:space="preserve">
          <source>Create the collection for this model. By default, if no indexes are specified, mongoose will not create the collection for the model until any documents are created. Use this method to create the collection explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0135bd30a86165ac541cf092dd63b516f21394db" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Query&lt;/code&gt; and specifies a &lt;code&gt;$where&lt;/code&gt; condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde994fd7b1a0537dfaf19261fc710110be3b153" translate="yes" xml:space="preserve">
          <source>Creates a Connection instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a974b61f0b9cdbc6272a15e448cfafcfb4e462" translate="yes" xml:space="preserve">
          <source>Creates a Query for a &lt;code&gt;distinct&lt;/code&gt; operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64198635a796f485c871b3157a421a24d27c8eb6" translate="yes" xml:space="preserve">
          <source>Creates a Query, applies the passed conditions, and returns the Query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000a17fc5c0dda9853531361cbfd1a56c307496e" translate="yes" xml:space="preserve">
          <source>Creates a virtual type with the given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae44484709237ede603821b385a4d9ee691dd47" translate="yes" xml:space="preserve">
          <source>Creating Custom Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86be1a6a3351100904c35153e2c61730e926cc2" translate="yes" xml:space="preserve">
          <source>Creating a Basic Custom Schema Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ff692c73aae16da944bdd16f86f2a34176c774" translate="yes" xml:space="preserve">
          <source>Creating a model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28d2f2debefa4225675b74c639fa27ce22b633b" translate="yes" xml:space="preserve">
          <source>Creating a transaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae5d4a2a6c85caf508cc6c2c9be6081e03c6bc1" translate="yes" xml:space="preserve">
          <source>Creating an AggregationCursor executes the model's pre aggregate hooks, but &lt;strong&gt;not&lt;/strong&gt; the model's post aggregate hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab0f9961045db97d78b6247b46f529e3c566993" translate="yes" xml:space="preserve">
          <source>Currently supported options are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4f1aa65960c2683fc741f6bd8ab05698a24a70" translate="yes" xml:space="preserve">
          <source>Custom Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc2bdac51d89506a1cebf403b1206804b63836b" translate="yes" xml:space="preserve">
          <source>Custom Validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf9606eaa822994b90cdd84ba3430e7e0e71d98" translate="yes" xml:space="preserve">
          <source>Custom validation is declared by passing a validation function. You can find detailed instructions on how to do this in the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-validate&quot;&gt;&lt;code&gt;SchemaType#validate()&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52318c61d4f78c6a00746a6f9e605e226c61a56e" translate="yes" xml:space="preserve">
          <source>Custom validators can also be asynchronous. If your validator function returns a promise (like an &lt;code&gt;async&lt;/code&gt; function), mongoose will wait for that promise to settle. If the returned promise rejects, or fulfills with the value &lt;code&gt;false&lt;/code&gt;, Mongoose will consider that a validation error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="842b7b5d71896a41ecd92997ec80b1df5243c81e" translate="yes" xml:space="preserve">
          <source>Dates</source>
          <target state="translated">Dates</target>
        </trans-unit>
        <trans-unit id="67c1e236faf50d37cb37da121db5222de83e8a41" translate="yes" xml:space="preserve">
          <source>Decimal128</source>
          <target state="translated">Decimal128</target>
        </trans-unit>
        <trans-unit id="9070e23eb4e41e4bc59c452be48eb54f19425d3b" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as a &lt;code&gt;deleteMany()&lt;/code&gt; operation. Works like remove, except it deletes &lt;em&gt;every&lt;/em&gt; document that matches &lt;code&gt;filter&lt;/code&gt; in the collection, regardless of the value of &lt;code&gt;single&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc583c100441e61de4f0c10ccc8ae6b8963c219a" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as a &lt;code&gt;deleteOne()&lt;/code&gt; operation. Works like remove, except it deletes at most one document regardless of the &lt;code&gt;single&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e7f58982cc9db4c54d30a4070f2afba1475189" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as a remove() operation. &lt;code&gt;remove()&lt;/code&gt; is deprecated, you should use &lt;a href=&quot;#query_Query-deleteOne&quot;&gt;&lt;code&gt;deleteOne()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#query_Query-deleteMany&quot;&gt;&lt;code&gt;deleteMany()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68176f1af205790ddba742a6ba7fc3a6d3618c52" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as a replaceOne() operation. Same as &lt;code&gt;update()&lt;/code&gt;, except MongoDB will replace the existing document and will not accept any &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/model-data-for-atomic-operations/#pattern&quot;&gt;atomic&lt;/a&gt; operators (&lt;code&gt;$set&lt;/code&gt;, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6567fc208b546ca7a69ae208540dda5e14d0bde" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as an update() operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6973d5567431e7494b02eacb4fb313bcb86d0ca9" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as an updateMany() operation. Same as &lt;code&gt;update()&lt;/code&gt;, except MongoDB will update &lt;em&gt;all&lt;/em&gt; documents that match &lt;code&gt;filter&lt;/code&gt; (as opposed to just the first one) regardless of the value of the &lt;code&gt;multi&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef33c0e2512c99326e83439f29dea21aebc7babc" translate="yes" xml:space="preserve">
          <source>Declare and/or execute this query as an updateOne() operation. Same as &lt;code&gt;update()&lt;/code&gt;, except it does not support the &lt;code&gt;multi&lt;/code&gt; or &lt;code&gt;overwrite&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2392fa784257996fefcf2a6e41245e02964cec" translate="yes" xml:space="preserve">
          <source>Declares a full text index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f14d3c92f9d513f4d6e1a88bbb365134476ad0" translate="yes" xml:space="preserve">
          <source>Declares a global plugin executed on all Schemas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa267a62324d37b18c447fe4bfff7250fac3cef2" translate="yes" xml:space="preserve">
          <source>Declares a plugin executed on all schemas you pass to &lt;code&gt;conn.model()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c11692322ad078d099008ac5257788796315e3c6" translate="yes" xml:space="preserve">
          <source>Declares a sparse index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52af6ede7f04bd38e8a1e0a20b0770f500bb4b6a" translate="yes" xml:space="preserve">
          <source>Declares an intersects query for &lt;code&gt;geometry()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99ad64b888501854a7a6b8081adb9a8ba8495c8" translate="yes" xml:space="preserve">
          <source>Declares an unique index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b712ae18981b53319fcae9f585153b6c7df7016a" translate="yes" xml:space="preserve">
          <source>Declares or executes a distinct() operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0532953116c8ee3eee8dc8aaa2d506201d70d1b3" translate="yes" xml:space="preserve">
          <source>Declares the index options for this schematype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd4868e33ec021d124c2ed69fa47be3e290ed54" translate="yes" xml:space="preserve">
          <source>Declares the query a findOne operation. When executed, the first found document is passed to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d36eabc2d95aef7c8036a97b4770a2e04c31a9f" translate="yes" xml:space="preserve">
          <source>Declaring defaults in your schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8be5b852d6b806f743bcb05803696ce93ae0b6" translate="yes" xml:space="preserve">
          <source>Default functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f924f2c46bd734a82dd2c9fffa43773d229e33a5" translate="yes" xml:space="preserve">
          <source>Default functions and &lt;code&gt;this&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428819bf9e83cebda50efafb08cd2534c1583949" translate="yes" xml:space="preserve">
          <source>Defaults</source>
          <target state="translated">Defaults</target>
        </trans-unit>
        <trans-unit id="29f1daa82da9806767cf0d00637d35a676b9ccd2" translate="yes" xml:space="preserve">
          <source>Defaults can be either &lt;code&gt;functions&lt;/code&gt; which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312481c610b4abb896dd50e35133475e2b47c457" translate="yes" xml:space="preserve">
          <source>Defaults to the schema's &lt;a href=&quot;../guide#writeConcern&quot;&gt;&lt;code&gt;writeConcern.j&lt;/code&gt; option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f279f0642413756bdb570876a8531665851c4b" translate="yes" xml:space="preserve">
          <source>Defaults to the schema's &lt;a href=&quot;../guide#writeConcern&quot;&gt;&lt;code&gt;writeConcern.w&lt;/code&gt; option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e79b80793a4114096541bbc72e583ad77c93bb1" translate="yes" xml:space="preserve">
          <source>Defaults to the schema's &lt;a href=&quot;../guide#writeConcern&quot;&gt;&lt;code&gt;writeConcern.wtimeout&lt;/code&gt; option&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f9a1d222fbb50a1eba5ed5efbac377e2534ab1" translate="yes" xml:space="preserve">
          <source>Define Middleware Before Compiling Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1160e4002973ae61a971ab9826efde7cac5aa9" translate="yes" xml:space="preserve">
          <source>Defines a &lt;code&gt;$within&lt;/code&gt; or &lt;code&gt;$geoWithin&lt;/code&gt; argument for geo-spatial queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a104a7831b0a7f4c2865377e57520fd28fcd7cc" translate="yes" xml:space="preserve">
          <source>Defines a model or retrieves it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6a0577ccc986d95f02afd50635a9839242e523" translate="yes" xml:space="preserve">
          <source>Defines a post hook for the document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332c643436fb7985094e165af0c8324529da2d5b" translate="yes" xml:space="preserve">
          <source>Defines a pre hook for the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c862db4bab9de80282adfe177aa840fd7dd80c1" translate="yes" xml:space="preserve">
          <source>Defines an index (most likely compound) for this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be309143f837bc50223cb276b92fcdc7e6f97bb1" translate="yes" xml:space="preserve">
          <source>Defines or retrieves a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b935245314a9cf1d6f10484542cea2e2372b015b" translate="yes" xml:space="preserve">
          <source>Defines this path as immutable. Mongoose prevents you from changing immutable paths unless the parent document has &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-isNew&quot;&gt;&lt;code&gt;isNew: true&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e5fd014d9c4e4201a66f43bc05003ef4348bbc" translate="yes" xml:space="preserve">
          <source>Defining separate &lt;code&gt;blogPost&lt;/code&gt; and &lt;code&gt;product&lt;/code&gt; properties works for this simple example. But, if you decide to allow users to also comment on articles or other comments, you'll need to add more properties to your schema. You'll also need an extra &lt;code&gt;populate()&lt;/code&gt; call for every property, unless you use &lt;a href=&quot;https://www.npmjs.com/package/mongoose-autopopulate&quot;&gt;mongoose-autopopulate&lt;/a&gt;. Using &lt;code&gt;refPath&lt;/code&gt; means you only need 2 schema paths and one &lt;code&gt;populate()&lt;/code&gt; call regardless of how many models your &lt;code&gt;commentSchema&lt;/code&gt; can point to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba6adc986d78a55db92dd2901a7d98d07d12dee" translate="yes" xml:space="preserve">
          <source>Defining validators on nested objects in mongoose is tricky, because nested objects are not fully fledged paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c4974e13d0d2b78b03d26b5504827264318741" translate="yes" xml:space="preserve">
          <source>Defining your schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c6699b0a5dd786ea9d533234eb06682e6f08f0" translate="yes" xml:space="preserve">
          <source>Deletes all indexes that aren't defined in this model's schema. Used by &lt;code&gt;syncIndexes()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fe3868bb5fe49b7fbfff18a799a6e7f3ba128f" translate="yes" xml:space="preserve">
          <source>Deletes all of the documents that match &lt;code&gt;conditions&lt;/code&gt; from the collection. Behaves like &lt;code&gt;remove()&lt;/code&gt;, but deletes all documents that match &lt;code&gt;conditions&lt;/code&gt; regardless of the &lt;code&gt;single&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd33f787cc1e4e134891ce7ab2ed48bdd8c708b" translate="yes" xml:space="preserve">
          <source>Deletes the first document that matches &lt;code&gt;conditions&lt;/code&gt; from the collection. Behaves like &lt;code&gt;remove()&lt;/code&gt;, but deletes at most one document regardless of the &lt;code&gt;single&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cda36c95c093ae4cd6d399186e93976d1bcca02" translate="yes" xml:space="preserve">
          <source>Deleting</source>
          <target state="translated">Deleting</target>
        </trans-unit>
        <trans-unit id="8dfcf844295fe972c4e2685a3145ce07fa938edc" translate="yes" xml:space="preserve">
          <source>Deprecation Warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fab2570c3d9ead7fbe59c74831784d5f64ed5a" translate="yes" xml:space="preserve">
          <source>Determines if exclusive field selection has been made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da6242e67bd6b0224fb6756f0f1f49def4343c4" translate="yes" xml:space="preserve">
          <source>Determines if field selection has been made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519cf282df08fcbabf3ab2f249665c4da9ba89be" translate="yes" xml:space="preserve">
          <source>Determines if inclusive field selection has been made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994dddbe445415e4e9f1486a9f3d469364b1bddb" translate="yes" xml:space="preserve">
          <source>Determines the MongoDB nodes from which to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c400875cad32e6b3f3fa7b0b73afa6d29bd776b0" translate="yes" xml:space="preserve">
          <source>Differences vs ES6 Getters/Setters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832024dec3bde51b7b89ffe49b70bb5591d4f415" translate="yes" xml:space="preserve">
          <source>Discriminator keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bc742054b9d611b25b3b89438657d2ac5ed83b" translate="yes" xml:space="preserve">
          <source>Discriminator models are special; they attach the discriminator key to queries. In other words, &lt;code&gt;find()&lt;/code&gt;, &lt;code&gt;count()&lt;/code&gt;, &lt;code&gt;aggregate()&lt;/code&gt;, etc. are smart enough to account for discriminators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e879974fb9d23b88ef97771a882033cdb6b39e13" translate="yes" xml:space="preserve">
          <source>Discriminators</source>
          <target state="translated">Discriminators</target>
        </trans-unit>
        <trans-unit id="20d1549eadbc78c7737aad5c89bfe45ea1a3a1c8" translate="yes" xml:space="preserve">
          <source>Discriminators add the discriminator key to queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5974163ace85d70dce5791345910a7f0d242ee" translate="yes" xml:space="preserve">
          <source>Discriminators also take their base schema's pre and post middleware. However, you can also attach middleware to the discriminator schema without affecting the base schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f93f9bfa8e3869c912299452d22f62fe240f0e" translate="yes" xml:space="preserve">
          <source>Discriminators are a schema inheritance mechanism. They enable you to have multiple models with overlapping schemas on top of the same underlying MongoDB collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3474626d42c96587bb7668ac418008738eb038a2" translate="yes" xml:space="preserve">
          <source>Discriminators copy pre and post hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cc63478719521dfe43494702d7132a2701828a" translate="yes" xml:space="preserve">
          <source>Discriminators save to the Event model's collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e3c6e8fb19b30a42b46015a3076fc46d29211c" translate="yes" xml:space="preserve">
          <source>Do &lt;strong&gt;not&lt;/strong&gt; declare methods using ES6 arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;). Arrow functions &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this&quot;&gt;explicitly prevent binding &lt;code&gt;this&lt;/code&gt;&lt;/a&gt;, so your method will &lt;strong&gt;not&lt;/strong&gt; have access to the document and the above examples will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0535ac8f88cf0379e9863d9dfc9c60677fd827a2" translate="yes" xml:space="preserve">
          <source>Do &lt;strong&gt;not&lt;/strong&gt; declare statics using ES6 arrow functions (&lt;code&gt;=&amp;gt;&lt;/code&gt;). Arrow functions &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this&quot;&gt;explicitly prevent binding &lt;code&gt;this&lt;/code&gt;&lt;/a&gt;, so the above examples will not work because of the value of &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e214b8a29923056887b7edf6635d90dcbb2abe88" translate="yes" xml:space="preserve">
          <source>Document</source>
          <target state="translated">Document</target>
        </trans-unit>
        <trans-unit id="641d52354160c97e89e647ed774e3caf51245811" translate="yes" xml:space="preserve">
          <source>Document versioning can also be disabled by setting the &lt;code&gt;versionKey&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. &lt;em&gt;DO NOT disable versioning unless you &lt;a href=&quot;http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning&quot;&gt;know what you are doing&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bae434080b057b0f7a2e6a63178baa758ae05c" translate="yes" xml:space="preserve">
          <source>Document.prototype.$ignore()</source>
          <target state="translated">Document.prototype.$ignore()</target>
        </trans-unit>
        <trans-unit id="bf9c2a6d3e232dc95d205fbfa5d82f28e98a99b4" translate="yes" xml:space="preserve">
          <source>Document.prototype.$isDefault()</source>
          <target state="translated">Document.prototype.$isDefault()</target>
        </trans-unit>
        <trans-unit id="49d6b334bfa435536f17e4c8fb1383d98343b3d9" translate="yes" xml:space="preserve">
          <source>Document.prototype.$isDeleted()</source>
          <target state="translated">Document.prototype.$isDeleted()</target>
        </trans-unit>
        <trans-unit id="75d75aef87f4f9e24b781a80cf1a10857fe82967" translate="yes" xml:space="preserve">
          <source>Document.prototype.$isEmpty()</source>
          <target state="translated">Document.prototype.$isEmpty()</target>
        </trans-unit>
        <trans-unit id="e7581a57bb2cb758fdf81d2c36c36ac4da8df461" translate="yes" xml:space="preserve">
          <source>Document.prototype.$locals</source>
          <target state="translated">Document.prototype.$locals</target>
        </trans-unit>
        <trans-unit id="f58ad8f7facafeb543aadb2aa2f57612e9fc39ad" translate="yes" xml:space="preserve">
          <source>Document.prototype.$markValid()</source>
          <target state="translated">Document.prototype.$markValid()</target>
        </trans-unit>
        <trans-unit id="2e9c11843dfc1650567041330fa17a9754a36e05" translate="yes" xml:space="preserve">
          <source>Document.prototype.$session()</source>
          <target state="translated">Document.prototype.$session()</target>
        </trans-unit>
        <trans-unit id="f863c6dca6f3a58f28433ba289037eede6553bfc" translate="yes" xml:space="preserve">
          <source>Document.prototype.$set()</source>
          <target state="translated">Document.prototype.$set()</target>
        </trans-unit>
        <trans-unit id="03f9319061cc3340086fd76118755cbcd54c1cae" translate="yes" xml:space="preserve">
          <source>Document.prototype.depopulate()</source>
          <target state="translated">Document.prototype.depopulate()</target>
        </trans-unit>
        <trans-unit id="e9e051eac2def14dc6dd7bde3f45b2d69e67ce86" translate="yes" xml:space="preserve">
          <source>Document.prototype.directModifiedPaths()</source>
          <target state="translated">Document.prototype.directModifiedPaths()</target>
        </trans-unit>
        <trans-unit id="029395b5175064197dcc25823266db0cdd3c0afa" translate="yes" xml:space="preserve">
          <source>Document.prototype.equals()</source>
          <target state="translated">Document.prototype.equals()</target>
        </trans-unit>
        <trans-unit id="3a0959d80a17284f825a2eba0b3fed4e2d8980fe" translate="yes" xml:space="preserve">
          <source>Document.prototype.errors</source>
          <target state="translated">Document.prototype.errors</target>
        </trans-unit>
        <trans-unit id="47dda7aec695b3d617eeed3af31fde8684fbcfcd" translate="yes" xml:space="preserve">
          <source>Document.prototype.execPopulate()</source>
          <target state="translated">Document.prototype.execPopulate()</target>
        </trans-unit>
        <trans-unit id="75fa90eef22fab7b5792b1fe3d7608a7ee133a4f" translate="yes" xml:space="preserve">
          <source>Document.prototype.get()</source>
          <target state="translated">Document.prototype.get()</target>
        </trans-unit>
        <trans-unit id="1c0f6203fcee663f7d1eedfd03eb61c5975fea90" translate="yes" xml:space="preserve">
          <source>Document.prototype.id</source>
          <target state="translated">Document.prototype.id</target>
        </trans-unit>
        <trans-unit id="007698f6fae3eea33c7151511731c46866a3ea17" translate="yes" xml:space="preserve">
          <source>Document.prototype.init()</source>
          <target state="translated">Document.prototype.init()</target>
        </trans-unit>
        <trans-unit id="265b270c6aee6981cb5d33ef8145c1eb1f35239d" translate="yes" xml:space="preserve">
          <source>Document.prototype.inspect()</source>
          <target state="translated">Document.prototype.inspect()</target>
        </trans-unit>
        <trans-unit id="ae6e33dd75583f1f1b9c3ea873d7ea41989bfb6b" translate="yes" xml:space="preserve">
          <source>Document.prototype.invalidate()</source>
          <target state="translated">Document.prototype.invalidate()</target>
        </trans-unit>
        <trans-unit id="eac3c4118b24e8ef57e9625dc6da21e9b9ded54f" translate="yes" xml:space="preserve">
          <source>Document.prototype.isDirectModified()</source>
          <target state="translated">Document.prototype.isDirectModified()</target>
        </trans-unit>
        <trans-unit id="c715be57ea496f19ae1a0c6171fad61e1fa88053" translate="yes" xml:space="preserve">
          <source>Document.prototype.isDirectSelected()</source>
          <target state="translated">Document.prototype.isDirectSelected()</target>
        </trans-unit>
        <trans-unit id="22a1c3ae4e769f4b967e704ac35db55c9c6d7469" translate="yes" xml:space="preserve">
          <source>Document.prototype.isInit()</source>
          <target state="translated">Document.prototype.isInit()</target>
        </trans-unit>
        <trans-unit id="65f31e54d2903dbc28fb35764503136e7d3e98ef" translate="yes" xml:space="preserve">
          <source>Document.prototype.isModified()</source>
          <target state="translated">Document.prototype.isModified()</target>
        </trans-unit>
        <trans-unit id="42f3a3bb11ca31a1531f8a0104163fc51e7acc9e" translate="yes" xml:space="preserve">
          <source>Document.prototype.isNew</source>
          <target state="translated">Document.prototype.isNew</target>
        </trans-unit>
        <trans-unit id="d6bb139a7a60e3648a25b6309eb28af8e3a07865" translate="yes" xml:space="preserve">
          <source>Document.prototype.isSelected()</source>
          <target state="translated">Document.prototype.isSelected()</target>
        </trans-unit>
        <trans-unit id="40831951377ac5cd9d56965787f5fce4398ce463" translate="yes" xml:space="preserve">
          <source>Document.prototype.markModified()</source>
          <target state="translated">Document.prototype.markModified()</target>
        </trans-unit>
        <trans-unit id="3317def08586e17a829506563da5516cc81633a3" translate="yes" xml:space="preserve">
          <source>Document.prototype.modifiedPaths()</source>
          <target state="translated">Document.prototype.modifiedPaths()</target>
        </trans-unit>
        <trans-unit id="2291061eb050e800b5122a4edb3225f0ef2bdc0e" translate="yes" xml:space="preserve">
          <source>Document.prototype.overwrite()</source>
          <target state="translated">Document.prototype.overwrite()</target>
        </trans-unit>
        <trans-unit id="9a7d047cf94aed21b396c12ca55059c6373139a2" translate="yes" xml:space="preserve">
          <source>Document.prototype.populate()</source>
          <target state="translated">Document.prototype.populate()</target>
        </trans-unit>
        <trans-unit id="7e241b223415fd262a18f3fe12d7fa813e6a7d43" translate="yes" xml:space="preserve">
          <source>Document.prototype.populated()</source>
          <target state="translated">Document.prototype.populated()</target>
        </trans-unit>
        <trans-unit id="96c396751ddd5b68c06fe940dd9200495c0d7796" translate="yes" xml:space="preserve">
          <source>Document.prototype.replaceOne()</source>
          <target state="translated">Document.prototype.replaceOne()</target>
        </trans-unit>
        <trans-unit id="231c63705e6955cae09258963b2c9e4963b3449f" translate="yes" xml:space="preserve">
          <source>Document.prototype.save()</source>
          <target state="translated">Document.prototype.save()</target>
        </trans-unit>
        <trans-unit id="7c5060b8785ab319ab6faaabd6cd01da93b70129" translate="yes" xml:space="preserve">
          <source>Document.prototype.schema</source>
          <target state="translated">Document.prototype.schema</target>
        </trans-unit>
        <trans-unit id="bd865a3da748e86706ec92a4aa95abc5e2c4e30e" translate="yes" xml:space="preserve">
          <source>Document.prototype.set()</source>
          <target state="translated">Document.prototype.set()</target>
        </trans-unit>
        <trans-unit id="de44e8017140912150154622bb02378023d144b8" translate="yes" xml:space="preserve">
          <source>Document.prototype.toJSON()</source>
          <target state="translated">Document.prototype.toJSON()</target>
        </trans-unit>
        <trans-unit id="5b59650329f3bb721fba7c3c60cc58116f927918" translate="yes" xml:space="preserve">
          <source>Document.prototype.toObject()</source>
          <target state="translated">Document.prototype.toObject()</target>
        </trans-unit>
        <trans-unit id="ef970e4887a8c16cfab9a02d04efbb11fe3d7710" translate="yes" xml:space="preserve">
          <source>Document.prototype.toString()</source>
          <target state="translated">Document.prototype.toString()</target>
        </trans-unit>
        <trans-unit id="10fb23c3eb675ef795c37c71458a06018ddb2b63" translate="yes" xml:space="preserve">
          <source>Document.prototype.unmarkModified()</source>
          <target state="translated">Document.prototype.unmarkModified()</target>
        </trans-unit>
        <trans-unit id="0a2f0a0f63ad902884dda6509e1ed1a97accb8e7" translate="yes" xml:space="preserve">
          <source>Document.prototype.update()</source>
          <target state="translated">Document.prototype.update()</target>
        </trans-unit>
        <trans-unit id="b6b12e21527214116a82f65500e13df3a4f01fd9" translate="yes" xml:space="preserve">
          <source>Document.prototype.updateOne()</source>
          <target state="translated">Document.prototype.updateOne()</target>
        </trans-unit>
        <trans-unit id="c6d6224e69ec61635839a2574689e1c617adec7d" translate="yes" xml:space="preserve">
          <source>Document.prototype.validate()</source>
          <target state="translated">Document.prototype.validate()</target>
        </trans-unit>
        <trans-unit id="ea26a8cbba140de75760bc52f8994aadc038420a" translate="yes" xml:space="preserve">
          <source>Document.prototype.validateSync()</source>
          <target state="translated">Document.prototype.validateSync()</target>
        </trans-unit>
        <trans-unit id="020db9995e4a9cf6ec40a6c580d946fa6279204d" translate="yes" xml:space="preserve">
          <source>DocumentArray</source>
          <target state="translated">DocumentArray</target>
        </trans-unit>
        <trans-unit id="4562cfaec22b61bd86d1b24f074d466501067393" translate="yes" xml:space="preserve">
          <source>DocumentArrayPath</source>
          <target state="translated">DocumentArrayPath</target>
        </trans-unit>
        <trans-unit id="0b463b9560caf2cfae1e00d694ba9ab8d6b815e9" translate="yes" xml:space="preserve">
          <source>DocumentArrayPath()</source>
          <target state="translated">DocumentArrayPath()</target>
        </trans-unit>
        <trans-unit id="2bdbb22fc96fde33f0d8179d41a6c7e017a59605" translate="yes" xml:space="preserve">
          <source>DocumentArrayPath.options</source>
          <target state="translated">DocumentArrayPath.options</target>
        </trans-unit>
        <trans-unit id="2b593a423abe046b86ce03486e368fa55b8cafdd" translate="yes" xml:space="preserve">
          <source>DocumentArrayPath.prototype.discriminator()</source>
          <target state="translated">DocumentArrayPath.prototype.discriminator()</target>
        </trans-unit>
        <trans-unit id="66d24fd78d2714f09e535df0a6d7365e438a383f" translate="yes" xml:space="preserve">
          <source>DocumentArrayPath.schemaName</source>
          <target state="translated">DocumentArrayPath.schemaName</target>
        </trans-unit>
        <trans-unit id="687c82861c956e47456186f6522cfc8dbadb8ef6" translate="yes" xml:space="preserve">
          <source>Documents</source>
          <target state="translated">Documents</target>
        </trans-unit>
        <trans-unit id="883be7739f4625892ef87488e54037a2db132a21" translate="yes" xml:space="preserve">
          <source>Documents are casted validated before they are saved. Mongoose first casts values to the specified type and then validates them. Internally, Mongoose calls the document's &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-validate&quot;&gt;&lt;code&gt;validate()&lt;/code&gt; method&lt;/a&gt; before saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92308c4d7e245625b2dd0becdfcded140ad07b1" translate="yes" xml:space="preserve">
          <source>Documents are considered equal when they have matching &lt;code&gt;_id&lt;/code&gt;s, unless neither document has an &lt;code&gt;_id&lt;/code&gt;, in which case this function falls back to using &lt;code&gt;deepEqual()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926d983fecfdfda2205a852c50ab5af0730d3d14" translate="yes" xml:space="preserve">
          <source>Documents have a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toObject&quot;&gt;toObject&lt;/a&gt; method which converts the mongoose document into a plain javascript object. This method accepts a few options. Instead of applying these options on a per-document basis we may declare the options here and have it applied to all of this schemas documents by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f464a76bb2d06114d4ad3bd580e50bcff15f96b1" translate="yes" xml:space="preserve">
          <source>Documents returned from queries with the &lt;code&gt;lean&lt;/code&gt; option enabled are plain javascript objects, not &lt;a href=&quot;#document-js&quot;&gt;Mongoose Documents&lt;/a&gt;. They have no &lt;code&gt;save&lt;/code&gt; method, getters/setters, virtuals, or other Mongoose features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8554c744a5c7000b67f9ecf0c738c363f5fa052" translate="yes" xml:space="preserve">
          <source>Documents vs Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d9511ba0b13c041cebe4c8b968b4952bcb5f30" translate="yes" xml:space="preserve">
          <source>Domain sockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5c4d17ea9b84757e93bdf0d24ac0babac31bf5" translate="yes" xml:space="preserve">
          <source>Domain sockets must be URI encoded. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55209ec38030481b361e43aa1cfb505a8ddd02f6" translate="yes" xml:space="preserve">
          <source>Don't mix using callbacks and promises with queries, or you may end up with duplicate operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fc31f074ec26509217334e689b920902797129" translate="yes" xml:space="preserve">
          <source>Don't run validation on this path or persist changes to this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4560fbb34d10a7d61523ee6ab7edcdec4c9a3991" translate="yes" xml:space="preserve">
          <source>Due to changes in the MongoDB driver, connection strings must be URI encoded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d185275c0a951d45d50c0304a252d308626a75b" translate="yes" xml:space="preserve">
          <source>Dynamic References via `refPath`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f62cb78b03c77870de94cc52b7ad374309cc1e" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;connection&lt;/code&gt; instance maps to a single database. This method is helpful when mangaging multiple db connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58204c25d8d201612a5f0cb50c9aabe8c0e4fc22" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;connection&lt;/code&gt;, whether created with &lt;code&gt;mongoose.connect&lt;/code&gt; or &lt;code&gt;mongoose.createConnection&lt;/code&gt; are all backed by an internal configurable connection pool defaulting to a maximum size of 5. Adjust the pool size using your connection options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90803c43dbbfadceb8ce7e0239583808d6208d49" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;model&lt;/code&gt; has its own &lt;code&gt;update&lt;/code&gt; method for modifying documents in the database without returning them to your application. See the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.updateOne&quot;&gt;API&lt;/a&gt; docs for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3222392c38f1e52ac5cc9a99666de47e4fbc12" translate="yes" xml:space="preserve">
          <source>Each key in our code &lt;code&gt;blogSchema&lt;/code&gt; defines a property in our documents which will be cast to its associated &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType&quot;&gt;SchemaType&lt;/a&gt;. For example, we've defined a property &lt;code&gt;title&lt;/code&gt; which will be cast to the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema-string-js&quot;&gt;String&lt;/a&gt; SchemaType and property &lt;code&gt;date&lt;/code&gt; which will be cast to a &lt;code&gt;Date&lt;/code&gt; SchemaType.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc497c7cae1a1e0a9de0b5376b216901bc5ab2a5" translate="yes" xml:space="preserve">
          <source>Each of the validator links above provide more information about how to enable them and customize their error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4df9bf58ad65a852deefbdecec66103f1974efd" translate="yes" xml:space="preserve">
          <source>Each state change emits its associated event name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6ba97bd20493fac5ebeb9bbc5da58d86db95a7" translate="yes" xml:space="preserve">
          <source>Each subdocument has an &lt;code&gt;_id&lt;/code&gt; by default. Mongoose document arrays have a special &lt;a href=&quot;https://mongoosejs.com/docs/api.html#types_documentarray_MongooseDocumentArray-id&quot;&gt;id&lt;/a&gt; method for searching a document array to find a document with a given &lt;code&gt;_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cccfb4c9186e0bfec692d1a737cfa3e77b9f3a" translate="yes" xml:space="preserve">
          <source>Each subdocument has it's own &lt;a href=&quot;https://mongoosejs.com/docs/api.html#types_embedded_EmbeddedDocument-remove&quot;&gt;remove&lt;/a&gt; method. For an array subdocument, this is equivalent to calling &lt;code&gt;.pull()&lt;/code&gt; on the subdocument. For a single nested subdocument, &lt;code&gt;remove()&lt;/code&gt; is equivalent to setting the subdocument to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54541b2034a974fa094ad30ba710fec92de82abe" translate="yes" xml:space="preserve">
          <source>Embedded discriminators in arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c545a3a9420c02fb180c4dff5286ef3c2f63c39c" translate="yes" xml:space="preserve">
          <source>Empty object that you can use for storing properties on the document. This is handy for passing data to middleware without conflicting with Mongoose internals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96af4b4d286cbbcac7d8734f000cfa8398bff714" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;mongoose.connection.deleteModel(name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc80a1bdb613e27f4744dd5cc764d0215482c24" translate="yes" xml:space="preserve">
          <source>Equivalent to calling &lt;code&gt;.plugin(fn)&lt;/code&gt; on each Schema you create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1344fc5802d1c2f4330f075a3b5f0bfe317cbbaa" translate="yes" xml:space="preserve">
          <source>Equivalent to calling &lt;code&gt;.plugin(fn)&lt;/code&gt; on each schema you create.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2f6a15cf8da2b27e5a4af47b58e7ad71c0b3d9" translate="yes" xml:space="preserve">
          <source>Error</source>
          <target state="translated">Error</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">обработка ошибок</target>
        </trans-unit>
        <trans-unit id="a30746a4827267ba743d3d23007dfa6083f22934" translate="yes" xml:space="preserve">
          <source>Error Handling Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09713d34cdc502252426d480ed51bd78b1457be3" translate="yes" xml:space="preserve">
          <source>Error after initial connection was established. Mongoose will attempt to reconnect, and it will emit an 'error' event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c9358b0e48767bf55fad0b954d29797a1eb0aa" translate="yes" xml:space="preserve">
          <source>Error handling middleware also works with query middleware. You can also define a post &lt;code&gt;update()&lt;/code&gt; hook that will catch MongoDB duplicate key errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d0ffdde484ab9c030083c409c9e2f352fe06ed" translate="yes" xml:space="preserve">
          <source>Error handling middleware can transform an error, but it can't remove the error. Even if you call &lt;code&gt;next()&lt;/code&gt; with no error as shown above, the function call will still error out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e8852f2092d181d33638cce258bf311207f9b8" translate="yes" xml:space="preserve">
          <source>Error handling middleware is defined as middleware that takes one extra parameter: the 'error' that occurred as the first parameter to the function. Error handling middleware can then transform the error however you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4176d233a15a41aaa8d40fe8976031c7c0c052b7" translate="yes" xml:space="preserve">
          <source>Error message templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9169dc61d7786b9adddf92f3cb0673644b205f6e" translate="yes" xml:space="preserve">
          <source>Error on initial connection. If initial connection fails, Mongoose will &lt;strong&gt;not&lt;/strong&gt; attempt to reconnect, it will emit an 'error' event, and the promise &lt;code&gt;mongoose.connect()&lt;/code&gt; returns will reject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eaf15bb016480acff80a0931872e2208a9e080a" translate="yes" xml:space="preserve">
          <source>Error()</source>
          <target state="translated">Error()</target>
        </trans-unit>
        <trans-unit id="93dff883ae4379445ac2dfff7018a2b1c945062a" translate="yes" xml:space="preserve">
          <source>Error.CastError</source>
          <target state="translated">Error.CastError</target>
        </trans-unit>
        <trans-unit id="eca718d217656458494c9aee902079597e70f48e" translate="yes" xml:space="preserve">
          <source>Error.DivergentArrayError</source>
          <target state="translated">Error.DivergentArrayError</target>
        </trans-unit>
        <trans-unit id="07ea71b36011633af54b5fb615eca143ebeca5e4" translate="yes" xml:space="preserve">
          <source>Error.DocumentNotFoundError</source>
          <target state="translated">Error.DocumentNotFoundError</target>
        </trans-unit>
        <trans-unit id="3ff5aef4261524af74caa34c6e87c9aa77f418de" translate="yes" xml:space="preserve">
          <source>Error.MissingSchemaError</source>
          <target state="translated">Error.MissingSchemaError</target>
        </trans-unit>
        <trans-unit id="216d8ce0f92266e2140162319b96658682aac1c5" translate="yes" xml:space="preserve">
          <source>Error.OverwriteModelError</source>
          <target state="translated">Error.OverwriteModelError</target>
        </trans-unit>
        <trans-unit id="aa92fb5587d2cdcedd79983a503108fee80afe31" translate="yes" xml:space="preserve">
          <source>Error.ParallelSaveError</source>
          <target state="translated">Error.ParallelSaveError</target>
        </trans-unit>
        <trans-unit id="b178aeda39f8210366b620eab3d8e1ce2fcfcfba" translate="yes" xml:space="preserve">
          <source>Error.StrictModeError</source>
          <target state="translated">Error.StrictModeError</target>
        </trans-unit>
        <trans-unit id="3f0b990b4bcda67eb84efa9c1c124ab6c410fd91" translate="yes" xml:space="preserve">
          <source>Error.ValidationError</source>
          <target state="translated">Error.ValidationError</target>
        </trans-unit>
        <trans-unit id="e7a281b186786f67198f3504786a55835216647c" translate="yes" xml:space="preserve">
          <source>Error.ValidatorError</source>
          <target state="translated">Error.ValidatorError</target>
        </trans-unit>
        <trans-unit id="81638c26374187a964c5cdf39100e8065007e19a" translate="yes" xml:space="preserve">
          <source>Error.VersionError</source>
          <target state="translated">Error.VersionError</target>
        </trans-unit>
        <trans-unit id="617768c0f49f2272107e4ca9e0f24bfe31740e79" translate="yes" xml:space="preserve">
          <source>Error.messages</source>
          <target state="translated">Error.messages</target>
        </trans-unit>
        <trans-unit id="2f460e2e512fb50599741955684c54f04c5fe0d2" translate="yes" xml:space="preserve">
          <source>Error.prototype.name</source>
          <target state="translated">Error.prototype.name</target>
        </trans-unit>
        <trans-unit id="7ceaa68e6446833d7d3e8d38fc2b1e399326b849" translate="yes" xml:space="preserve">
          <source>Errors in Pre Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3599523fa1a81ed7f9368bb07f9bcdb23f65a842" translate="yes" xml:space="preserve">
          <source>Errors returned after failed validation contain an &lt;code&gt;errors&lt;/code&gt; object whose values are &lt;code&gt;ValidatorError&lt;/code&gt; objects. Each &lt;a href=&quot;https://mongoosejs.com/docs/api.html#error-validation-js&quot;&gt;ValidatorError&lt;/a&gt; has &lt;code&gt;kind&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt; properties. A ValidatorError also may have a &lt;code&gt;reason&lt;/code&gt; property. If an error was thrown in the validator, this property will contain the error that was thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5007b408a85fcac141bce2cb49f5136b8f04a25" translate="yes" xml:space="preserve">
          <source>Estimates the number of documents in the MongoDB collection. Faster than using &lt;code&gt;countDocuments()&lt;/code&gt; for large collections because &lt;code&gt;estimatedDocumentCount()&lt;/code&gt; uses collection metadata rather than scanning the entire collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca3c060139a5085a10dc02c80c89ab495cb0c16" translate="yes" xml:space="preserve">
          <source>Event emitter that reports any errors that occurred. Useful for global error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4b06409ec0dd52081a5d8d1335d88885e93173" translate="yes" xml:space="preserve">
          <source>Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193c5d94f7e6cd7e36e096cf4e27f8db4f63ccd9" translate="yes" xml:space="preserve">
          <source>Exactly the same as the &lt;a href=&quot;#toObject&quot;&gt;toObject&lt;/a&gt; option but only applies when the documents &lt;code&gt;toJSON&lt;/code&gt; method is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="c3f0f9497774edb790b8e175b64627cdc834fff3" translate="yes" xml:space="preserve">
          <source>Example of applying both path and virtual getters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683bd878d7e6d26658d57a954dfc792649e3fd21" translate="yes" xml:space="preserve">
          <source>Example of only applying path getters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be81ca57554c9c24ca95358eb48fa6cccaf055c" translate="yes" xml:space="preserve">
          <source>Example of only applying virtual getters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="9b5e93fde8cf44fed85e77e6ba6a69a7717b36ea" translate="yes" xml:space="preserve">
          <source>Execute &lt;code&gt;fn&lt;/code&gt; for every document in the cursor. If &lt;code&gt;fn&lt;/code&gt; returns a promise, will wait for the promise to resolve before iterating on to the next one. Returns a promise that resolves when done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c1f6bf52841f6e9f6c12bb3899c3f7f308704c" translate="yes" xml:space="preserve">
          <source>Execute the aggregation with explain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856e6d19edba24adf130c2d810365e252ecf6ac9" translate="yes" xml:space="preserve">
          <source>Executes a mapReduce command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f7d555a50d6f00d9d92b59528e97a33867b61a" translate="yes" xml:space="preserve">
          <source>Executes registered validation rules (skipping asynchronous validators) for this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30eef7efc8acc340590b6a52194cd18bd1b8ca46" translate="yes" xml:space="preserve">
          <source>Executes registered validation rules for this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169660e03e150315c1db1b130b0d2ba2bb651a3d" translate="yes" xml:space="preserve">
          <source>Executes the aggregate pipeline on the currently bound Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca46bed9276ffbee3c1290696117e98abd8dddb5" translate="yes" xml:space="preserve">
          <source>Executes the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f445debeb44b5c7411452d1514ea2b2e8e123a3" translate="yes" xml:space="preserve">
          <source>Executes the query if &lt;code&gt;callback&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d267053929f704692770a0751b4ba06ff82f7f57" translate="yes" xml:space="preserve">
          <source>Executes the query returning a &lt;code&gt;Promise&lt;/code&gt; which will be resolved with either the doc(s) or rejected with the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc3d916da5d972d965302ca1da157288431f73fd" translate="yes" xml:space="preserve">
          <source>Executes the query returning a &lt;code&gt;Promise&lt;/code&gt; which will be resolved with either the doc(s) or rejected with the error. Like &lt;a href=&quot;#query_Query-then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt;, but only takes a rejection handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5a3ff507415c283322d755417be16dfcc369ea" translate="yes" xml:space="preserve">
          <source>Executes the query returning a &lt;code&gt;Promise&lt;/code&gt; which will be resolved with either the doc(s) or rejected with the error. Like &lt;code&gt;.then()&lt;/code&gt;, but only takes a rejection handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3411a7c642822e076e47463d5b658b48bdacac" translate="yes" xml:space="preserve">
          <source>Executing</source>
          <target state="translated">Executing</target>
        </trans-unit>
        <trans-unit id="3c5d4f1561fa6d7c5e1c193e5eaab7926da69a6e" translate="yes" xml:space="preserve">
          <source>Explicitly executes population and returns a promise. Useful for ES2015 integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669e67740cd5e33dfd539f032e381b0a3680ba04" translate="yes" xml:space="preserve">
          <source>Expose connection states for user-land</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db28ee76fedb706e2564548c1a98feafcf0c08a2" translate="yes" xml:space="preserve">
          <source>Faster Mongoose Queries With Lean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4603a7b0a174a7b368ed59ddfbc4a253ac7020" translate="yes" xml:space="preserve">
          <source>Field Selection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edda22efda07b1473c1840d75b9400b44fc2c1f5" translate="yes" xml:space="preserve">
          <source>Find all documents that match &lt;code&gt;selector&lt;/code&gt;. The result will be an array of documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47c81673943fd14214037a549a1a84aa66d81c1" translate="yes" xml:space="preserve">
          <source>Finding a Subdocument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed9539739953a5d7ad5a350d4790cea702c0a3a" translate="yes" xml:space="preserve">
          <source>Finding documents is easy with Mongoose, which supports the &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Advanced+Queries&quot;&gt;rich&lt;/a&gt; query syntax of MongoDB. Documents can be retreived using each &lt;code&gt;models&lt;/code&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.find&quot;&gt;find&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findById&quot;&gt;findById&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOne&quot;&gt;findOne&lt;/a&gt;, or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.where&quot;&gt;where&lt;/a&gt; static methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef80c06e3577f65dffa384f6aa6bb7131fa4eb3e" translate="yes" xml:space="preserve">
          <source>Finds a matching document, removes it, and passes the found document (if any) to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a38bfb8f1f7ed2fcc657775f06a0f0b4b5c7bf" translate="yes" xml:space="preserve">
          <source>Finds a matching document, removes it, and passes the found document (if any) to the callback. Executes if &lt;code&gt;callback&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120affe44e68024d1070869e89936134bf132e1f" translate="yes" xml:space="preserve">
          <source>Finds a matching document, removes it, passing the found document (if any) to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15e6d22b7dec5bdd0aa77fa73bb3090df1b8ad5" translate="yes" xml:space="preserve">
          <source>Finds a matching document, removes it, passing the found document (if any) to the callback. Executes if &lt;code&gt;callback&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c309226e15b75ff8bd98de2e0a3bfdaa3ced052a" translate="yes" xml:space="preserve">
          <source>Finds a matching document, replaces it with the provided doc, and passes the returned doc to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b48ded1182d325b3ef56093174f23183115cb9f" translate="yes" xml:space="preserve">
          <source>Finds a matching document, updates it according to the &lt;code&gt;update&lt;/code&gt; arg, passing any &lt;code&gt;options&lt;/code&gt;, and returns the found document (if any) to the callback. The query executes if &lt;code&gt;callback&lt;/code&gt; is passed else a Query object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2928e2222edd7928650785bedfa67566ffa28a79" translate="yes" xml:space="preserve">
          <source>Finds a matching document, updates it according to the &lt;code&gt;update&lt;/code&gt; arg, passing any &lt;code&gt;options&lt;/code&gt;, and returns the found document (if any) to the callback. The query executes if &lt;code&gt;callback&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe28a09e90a34524c6f44b8e0aeafee9a50962a" translate="yes" xml:space="preserve">
          <source>Finds a single document by its _id field. &lt;code&gt;findById(id)&lt;/code&gt; is almost* equivalent to &lt;code&gt;findOne({ _id: id })&lt;/code&gt;. If you want to query by a document's &lt;code&gt;_id&lt;/code&gt;, use &lt;code&gt;findById()&lt;/code&gt; instead of &lt;code&gt;findOne()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb960d3886e330f94cf4e351c592f46ef86c974" translate="yes" xml:space="preserve">
          <source>Finds documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa63bec6247975cf15b369ffd84eb2ae49584366" translate="yes" xml:space="preserve">
          <source>Finds one document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a5a441bb9fea6e192f5225054e94c61aa457e4" translate="yes" xml:space="preserve">
          <source>Flag to opt out of using &lt;code&gt;$geoWithin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66545ca1871042283d9c9ec9bce68d44fe03ff6" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, the &lt;code&gt;strict&lt;/code&gt; option does &lt;strong&gt;not&lt;/strong&gt; apply to the &lt;code&gt;filter&lt;/code&gt; parameter for queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b1c864029c0901f3532447de1e61b5919e2912" translate="yes" xml:space="preserve">
          <source>For cases when &lt;code&gt;save()&lt;/code&gt; isn't flexible enough, Mongoose lets you create your own &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/&quot;&gt;MongoDB updates&lt;/a&gt; with casting, &lt;a href=&quot;middleware#notes&quot;&gt;middleware&lt;/a&gt;, and &lt;a href=&quot;validation#update-validators&quot;&gt;limited validation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fb18950bb403f7855462e9f4e1a1142c3b629d" translate="yes" xml:space="preserve">
          <source>For example, instead of writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a809b9bcc87336c22b4ce8d07a22036e25ab4c9" translate="yes" xml:space="preserve">
          <source>For example, the below code will execute 3 &lt;code&gt;updateMany()&lt;/code&gt; calls, one because of the callback, and two because &lt;code&gt;.then()&lt;/code&gt; is called twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21d03d29dce97b0a4d005c253b9951855086784" translate="yes" xml:space="preserve">
          <source>For example, the following code sample shows that the &lt;code&gt;Person&lt;/code&gt; model's getters and virtuals don't run if you enable &lt;code&gt;lean&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">Например:</target>
        </trans-unit>
        <trans-unit id="f7c42b983b635feb0f6f7b25fd78574b554006ee" translate="yes" xml:space="preserve">
          <source>For instance, if you wanted to add an &lt;code&gt;updatedAt&lt;/code&gt; timestamp to every &lt;code&gt;updateOne()&lt;/code&gt; call, you would use the following pre hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c76b98e23f52c14bfe77cabd661d99ac9c91061" translate="yes" xml:space="preserve">
          <source>For instance, the below update will succeed, regardless of the value of &lt;code&gt;number&lt;/code&gt;, because update validators ignore &lt;code&gt;$inc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f761c7c9d1d00a8f7a2224d61fef466217562e" translate="yes" xml:space="preserve">
          <source>For legacy reasons, when there is a validation error in subpath of a single nested schema, Mongoose will record that there was a validation error in the single nested schema path as well. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca6e37fbccc5c7dd17e97dafdc1bb2fd8e9e30a8" translate="yes" xml:space="preserve">
          <source>For long running applications, it is often prudent to enable &lt;code&gt;keepAlive&lt;/code&gt; with a number of milliseconds. Without it, after some period of time you may start to see &lt;code&gt;&quot;connection closed&quot;&lt;/code&gt; errors for what seems like no reason. If so, after &lt;a href=&quot;http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html&quot;&gt;reading this&lt;/a&gt;, you may decide to enable &lt;code&gt;keepAlive&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05aa833d9f064d54d6cd320170494aad6c6360df" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;ClientSession#withTransaction()&lt;/code&gt; function, please see &lt;a href=&quot;https://mongodb.github.io/node-mongodb-native/3.2/api/ClientSession.html#withTransaction&quot;&gt;the MongoDB Node.js driver docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c5aa2f14265c219604c77aa4759c0148f1403c" translate="yes" xml:space="preserve">
          <source>For practical reasons, a Connection equals a Db.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be36a2e095df2496e9ea7436347ff925ff881dad" translate="yes" xml:space="preserve">
          <source>For update operations, returns the value of a path in the update's &lt;code&gt;$set&lt;/code&gt;. Useful for writing getters/setters that can work with both update operations and &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bf0f03f78cb0feb4477d53b843e77d9f1bac26" translate="yes" xml:space="preserve">
          <source>From the examples above, you may have noticed that error messages support basic templating. There are a few other template keywords besides &lt;code&gt;{PATH}&lt;/code&gt; and &lt;code&gt;{VALUE}&lt;/code&gt; too. To find out more, details are available &lt;a href=&quot;#error_messages_MongooseError.messages&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca9cd7ef88125f552d4fc043fa826954ee9ff80" translate="yes" xml:space="preserve">
          <source>Function or object describing how to validate this schematype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afa5a4dd466d11f0bb921c167078a2446954ab2" translate="yes" xml:space="preserve">
          <source>Functions added to the &lt;code&gt;methods&lt;/code&gt; property of a schema get compiled into the &lt;code&gt;Model&lt;/code&gt; prototype and exposed on each document instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">Дальнейшее чтение</target>
        </trans-unit>
        <trans-unit id="07f72a1fc715596138226842e0032c00f79dfb52" translate="yes" xml:space="preserve">
          <source>Generally, you only use getters on primitive paths as opposed to arrays or subdocuments. Because getters override what accessing a Mongoose path returns, declaring a getter on an object may remove Mongoose change tracking for that path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981ed56bc9eb7aae5112d63d505a4a6bc59e7e4e" translate="yes" xml:space="preserve">
          <source>Get the next document from this cursor. Will return &lt;code&gt;null&lt;/code&gt; when there are no documents left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a9c6b0e741085630b181f71f1c433f06db939c" translate="yes" xml:space="preserve">
          <source>Get/set the current projection (AKA fields). Pass &lt;code&gt;null&lt;/code&gt; to remove the current projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec9398df9e4cd94e4cdf2fb1f6db3af5dde7c3b" translate="yes" xml:space="preserve">
          <source>Get/set the function used to cast arbitrary values to this type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0648b5359d294bcaf8f790d9ffd88d9a7a572dd5" translate="yes" xml:space="preserve">
          <source>Get/set the model that this aggregation will execute on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618cffe5516dd15bb0debb5107dd58829e09e655" translate="yes" xml:space="preserve">
          <source>Gets _id(s) used during population of the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7738f9748d78b0367db77575d31b5c03bd15c142" translate="yes" xml:space="preserve">
          <source>Gets a list of paths to be populated by this query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece0af90b43327e48c2f6924d2b73324de48d3ee" translate="yes" xml:space="preserve">
          <source>Gets a schema option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c78d5ac2cc82f94897b67cdcca65c4e070536e" translate="yes" xml:space="preserve">
          <source>Gets mongoose options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51da886190707ee9c190223d31057e37f57da33" translate="yes" xml:space="preserve">
          <source>Gets query options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09fd902d9826a555a6c554924dd976c0907398f" translate="yes" xml:space="preserve">
          <source>Gets the value of the option &lt;code&gt;key&lt;/code&gt;. Equivalent to &lt;code&gt;conn.options[key]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb3fbdb219290782f4bfa14479f216cb16b63fa" translate="yes" xml:space="preserve">
          <source>Gets/sets schema paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e2daca23ddc60243b61f5b9013bbce26b7ba41" translate="yes" xml:space="preserve">
          <source>Gets/sets the error flag on this query. If this flag is not null or undefined, the &lt;code&gt;exec()&lt;/code&gt; promise will reject without executing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9a2cc1c7f884085968577e03158daab12ddbd1" translate="yes" xml:space="preserve">
          <source>Getter/setter around function for pluralizing collection names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6521bbac4814b3bb80932cd08c1e0937e9a6d484" translate="yes" xml:space="preserve">
          <source>Getter/setter around the current mongoose-specific options for this query Below are the current Mongoose-specific options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d305f635e50c9464aaef059e70c602a0b7e860bb" translate="yes" xml:space="preserve">
          <source>Getter/setter around the session associated with this document. Used to automatically set &lt;code&gt;session&lt;/code&gt; if you &lt;code&gt;save()&lt;/code&gt; a doc that you got from a query with an associated session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa98aef06c7623f08b019721e17f2413f9534cf4" translate="yes" xml:space="preserve">
          <source>Getter/setter, determines whether the document was removed or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbbe89e1bf4029f9a507d85d668e0d1d5478d40" translate="yes" xml:space="preserve">
          <source>Getters</source>
          <target state="translated">Getters</target>
        </trans-unit>
        <trans-unit id="be46f64e5b822565a193e809210b66525bc8741e" translate="yes" xml:space="preserve">
          <source>Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dde79e94af4ddc43743a123e656f27a0e42db2" translate="yes" xml:space="preserve">
          <source>Getters and setters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279e575570e2cd6b6094841ed453e27381084e7b" translate="yes" xml:space="preserve">
          <source>Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd168cf7191da4cb91ed30f7f70375cd78ac32f" translate="yes" xml:space="preserve">
          <source>Getters are like virtuals for paths defined in your schema. For example, let's say you wanted to store user profile pictures as relative paths and then add the hostname in your application. Below is how you would structure your &lt;code&gt;userSchema&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d332a42458eee9bb842965420a8f6b33ef8765ba" translate="yes" xml:space="preserve">
          <source>Getters/Setters in Mongoose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981ce8377f40041e4e6c8656b7742bc6d7e34228" translate="yes" xml:space="preserve">
          <source>Getters/Virtuals</source>
          <target state="translated">Getters/Virtuals</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78361229940c0a6490257d7d3ab7f79b6df7037" translate="yes" xml:space="preserve">
          <source>Getting Started With Mongoose Virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3f0015eba98f97e4254945a137aa2726f0628d0" translate="yes" xml:space="preserve">
          <source>Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a42cac7e2a953af980308da618378a3efdb1fb" translate="yes" xml:space="preserve">
          <source>Global Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="1f4dc5c4052eed52aaef3ec11d83b2492e07105f" translate="yes" xml:space="preserve">
          <source>Handling custom _id fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d3be2d808b7d75cc6ac3b928f9ad87ef4416c7" translate="yes" xml:space="preserve">
          <source>Hash containing current validation errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444225dcb0041f2acfda90eb35100ae7d4772798" translate="yes" xml:space="preserve">
          <source>Helper for &lt;code&gt;createCollection()&lt;/code&gt;. Will explicitly create the given collection with specified options. Used to create &lt;a href=&quot;https://docs.mongodb.com/manual/core/capped-collections/&quot;&gt;capped collections&lt;/a&gt; and &lt;a href=&quot;https://docs.mongodb.com/manual/core/views/&quot;&gt;views&lt;/a&gt; from mongoose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0d30c0653c49341d4b3f5731b6582a61079074" translate="yes" xml:space="preserve">
          <source>Helper for &lt;code&gt;dropCollection()&lt;/code&gt;. Will delete the given collection, including all documents and indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90e0aab5fb991eec41431e6c72df2bf7435da98" translate="yes" xml:space="preserve">
          <source>Helper for &lt;code&gt;dropDatabase()&lt;/code&gt;. Deletes the given database, including all collections, documents, and indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33eabdf45a9e6d2f68e471db18b455288f9ac5ea" translate="yes" xml:space="preserve">
          <source>Helper for console.log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb053f260effef651ef9756cc704fe9fdb736b8e" translate="yes" xml:space="preserve">
          <source>Helper for console.log. Given a model named 'MyModel', returns the string &lt;code&gt;'Model { MyModel }'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aaea52f89cf980c3346ce433cb27c863dbd0d49" translate="yes" xml:space="preserve">
          <source>Here's an &lt;a href=&quot;https://masteringjs.io/tutorials/mongoose/schema&quot;&gt;alternative introduction to Mongoose schemas&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c415a45e2a70cbfc4b9e7b6078a6d8206d2fa908" translate="yes" xml:space="preserve">
          <source>How much smaller are lean documents? Here's a comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ee5d4b5755aa106a4e7704ff136e3b6ea3d871" translate="yes" xml:space="preserve">
          <source>However, for applications like &lt;a href=&quot;http://docs.mongodb.org/manual/reference/geojson/&quot;&gt;geoJSON&lt;/a&gt;, the 'type' property is important. If you want to control which key mongoose uses to find type declarations, set the 'typeKey' schema option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250ac9298919faa45282982817b5631101d16735" translate="yes" xml:space="preserve">
          <source>However, when Mongoose sees &lt;code&gt;type: String&lt;/code&gt;, it assumes that you mean &lt;code&gt;asset&lt;/code&gt; should be a string, not an object with a property &lt;code&gt;type&lt;/code&gt;. The correct way to define an object with a property &lt;code&gt;type&lt;/code&gt; is shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e12652331737f3124dce39805709d0ad4519e5" translate="yes" xml:space="preserve">
          <source>However, you need to keep in mind that Mongoose does not hydrate lean documents, so &lt;code&gt;this&lt;/code&gt; will be a POJO in virtuals, getters, and default functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ba453e8de6b420b1ddcaba124dc7df519cc8cd" translate="yes" xml:space="preserve">
          <source>If 3 arguments are supplied, Mongoose will wrap them with if-then-else of $cond operator respectively If &lt;code&gt;thenExpr&lt;/code&gt; or &lt;code&gt;elseExpr&lt;/code&gt; is string, make sure it starts with $$, like &lt;code&gt;$$DESCEND&lt;/code&gt;, &lt;code&gt;$$PRUNE&lt;/code&gt; or &lt;code&gt;$$KEEP&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b468eeb85572431236ce0a94c561b67eef279552" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, Mongoose will build a sparse index on this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56cf4095de5edba6c9ce0f2643b10761bbb7f444" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, Mongoose will build a text index on this path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d7665a0d9e02dcc1890a4f28b9dc933903c222" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, Mongoose will build a unique index on this path when the model is compiled. &lt;a href=&quot;../validation#the-unique-option-is-not-a-validator&quot;&gt;The &lt;code&gt;unique&lt;/code&gt; option is &lt;strong&gt;not&lt;/strong&gt; a validator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6aad3758c1c97d6f2d6788034b19f036521907" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, Mongoose will build an index on this path when the model is compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a80f06871a0da932e47adb5ccb54f4375b36ac0" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://masteringjs.io/tutorials/fundamentals/truthy&quot;&gt;truthy&lt;/a&gt;, Mongoose will disallow changes to this path once the document is saved to the database for the first time. Read more about &lt;a href=&quot;http://thecodebarbarian.com/whats-new-in-mongoose-5-6-immutable-properties.html&quot;&gt;immutability in Mongoose here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4f96af59ea12dd546ac83a22f092c44ce16cce" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-w&quot;&gt;&lt;code&gt;w &amp;gt; 1&lt;/code&gt;&lt;/a&gt;, the maximum amount of time to wait for this write to propagate through the replica set before this operation fails. The default is &lt;code&gt;0&lt;/code&gt;, which means no timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282e9392d358652488d6154e5273e490ecdd2593" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;obj&lt;/code&gt; is present, it is cast instead of this query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1445f1a57fa71d56d60d572ab6a2fe3c3c1030e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;options.out&lt;/code&gt; is set to &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, or &lt;code&gt;reduce&lt;/code&gt;, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the &lt;a href=&quot;../tutorials/lean&quot;&gt;&lt;code&gt;lean&lt;/code&gt; option&lt;/a&gt;; meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ba61ac6d3e59990025ffdd03962045f5f56528" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;path&lt;/code&gt; is given, checks if a path or any full path containing &lt;code&gt;path&lt;/code&gt; as part of its path chain has been modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a99ededcb195d63d2951ea6a48427c87530508a" translate="yes" xml:space="preserve">
          <source>If Mongoose fails to cast the filter to your schema, your query will throw a &lt;code&gt;CastError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c0799a012cf7051f58310e7e2558c087d11266" translate="yes" xml:space="preserve">
          <source>If Mongoose's built-in error message templating isn't enough, Mongoose supports setting the &lt;code&gt;message&lt;/code&gt; property to a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e826cfea9b09ba65ae673162089ff61708f22b3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;callback&lt;/code&gt; is passed, the &lt;code&gt;aggregate&lt;/code&gt; is executed and a &lt;code&gt;Promise&lt;/code&gt; is returned. If a callback is not passed, the &lt;code&gt;aggregate&lt;/code&gt; itself is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c2d414aff3a24204d89a1f2f447a1ad15a56a7" translate="yes" xml:space="preserve">
          <source>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18734c550c88085384e8cb8a7d8a253174d5a0cd" translate="yes" xml:space="preserve">
          <source>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e2854b108aff779942b623c9bbd7ece5b12c99" translate="yes" xml:space="preserve">
          <source>If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with &lt;code&gt;-&lt;/code&gt; which will be treated as descending.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07911304320cf87799d780c1de436da0dfe57e75" translate="yes" xml:space="preserve">
          <source>If an object is passed, values allowed are &lt;code&gt;asc&lt;/code&gt;, &lt;code&gt;desc&lt;/code&gt;, &lt;code&gt;ascending&lt;/code&gt;, &lt;code&gt;descending&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e068fa9acdc460866063cc5c212c1517c2233b4" translate="yes" xml:space="preserve">
          <source>If any pre hook errors out, mongoose will not execute subsequent middleware or the hooked function. Mongoose will instead pass an error to the callback and/or reject the returned promise. There are several ways to report an error in middleware:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe9a88a1b8da9fc700f8bce1cc3ca921540640e" translate="yes" xml:space="preserve">
          <source>If save is successful, the returned promise will fulfill with the document saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713640c02d8069dee927fc72e2335ec2e097b2e3" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;timestamps&lt;/code&gt;, mongoose assigns &lt;code&gt;createdAt&lt;/code&gt; and &lt;code&gt;updatedAt&lt;/code&gt; fields to your schema, the type assigned is &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema-date-js&quot;&gt;Date&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89770a22ccf511b58e0580d236fa203140707cb3" translate="yes" xml:space="preserve">
          <source>If the built-in validators aren't enough, you can define custom validators to suit your needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c792194a75ac0f677c8859698396c50a5eae1e49" translate="yes" xml:space="preserve">
          <source>If the document with the corresponding &lt;code&gt;_id&lt;/code&gt; is not found, Mongoose will report a &lt;code&gt;DocumentNotFoundError&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805daca9ab34967adb909d9ee0c2e88eef27beff" translate="yes" xml:space="preserve">
          <source>If the path was not populated, this is a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c826a64e6211cce97abd245b34744d528eeee7" translate="yes" xml:space="preserve">
          <source>If the path was not populated, undefined is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b9feda9500b5d41e89c640475c976eef9cd9f3" translate="yes" xml:space="preserve">
          <source>If there are too many documents in the result to fit in memory, use &lt;a href=&quot;api#query_Query-cursor&quot;&gt;&lt;code&gt;Query.prototype.cursor()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5bcf65cd5e9dc255b0b7e65b7d5fd4a5aa2384" translate="yes" xml:space="preserve">
          <source>If they are not, connections may fail with an illegal character message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c89b39dae7e8f7d968f6b0bf3ce46b3b1aebb2a0" translate="yes" xml:space="preserve">
          <source>If this is a discriminator model, &lt;code&gt;baseModelName&lt;/code&gt; is the name of the base model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8450eac67883fd8288294076842561c44c338ca" translate="yes" xml:space="preserve">
          <source>If this is a top-level document, setting the session propagates to all child docs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d69b42373d358b753d20446f348e002abcd425d" translate="yes" xml:space="preserve">
          <source>If true, attach a required validator to this path, which ensures this path path cannot be set to a nullish value. If a function, Mongoose calls the function and only checks for nullish values if the function returns a truthy value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9b5e07fa38e6e2e0dea2b723c2629b48e77654" translate="yes" xml:space="preserve">
          <source>If validation fails during &lt;code&gt;pre('save')&lt;/code&gt; and no callback was passed to receive the error, an &lt;code&gt;error&lt;/code&gt; event will be emitted on your Models associated db &lt;a href=&quot;#connection_Connection&quot;&gt;connection&lt;/a&gt;, passing the validation error object along.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfdf3ec09a1bcd45d6eb5aec865da4cb96ed45e" translate="yes" xml:space="preserve">
          <source>If we have an existing mongoose document and want to populate some of its paths, &lt;strong&gt;mongoose &amp;gt;= 3.6&lt;/strong&gt; supports the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-populate&quot;&gt;document#populate()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cdea5a218f4936fc575734f3d0712fee52a184" translate="yes" xml:space="preserve">
          <source>If we have one or many mongoose documents or even plain objects (&lt;em&gt;like &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.mapReduce&quot;&gt;mapReduce&lt;/a&gt; output&lt;/em&gt;), we may populate them using the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.populate&quot;&gt;Model.populate()&lt;/a&gt; method available in &lt;strong&gt;mongoose &amp;gt;= 3.6&lt;/strong&gt;. This is what &lt;code&gt;document#populate()&lt;/code&gt; and &lt;code&gt;query#populate()&lt;/code&gt; use to populate documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64af82cf17ccf3006977c372f54ce16882b86288" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;mongoose.model()&lt;/code&gt; with twice the same name but a different schema, you will get an &lt;code&gt;OverwriteModelError&lt;/code&gt;. If you call &lt;code&gt;mongoose.model()&lt;/code&gt; with the same name and same schema, you'll get the same schema back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef4355d3a6662f70506b4c290a124e7148c2a15" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;populate()&lt;/code&gt; multiple times with the same path, only the last one will take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66997d88bc0082baf7a802548c04d09cad3d08b7" translate="yes" xml:space="preserve">
          <source>If you create a custom connection, use that connection's &lt;code&gt;model()&lt;/code&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c22ed0f81eaed9062a1b0ac2488dcc8659536b" translate="yes" xml:space="preserve">
          <source>If you create a schema with an array of objects, mongoose will automatically convert the object to a schema for you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb29ea7252621783e9c38885267067d2f8b08a8" translate="yes" xml:space="preserve">
          <source>If you define &lt;a href=&quot;guide#indexes&quot;&gt;indexes in your Mongoose schemas&lt;/a&gt;, you'll see the below deprecation warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87597b7efce03b9776a49f0d28bbcd9d84170174" translate="yes" xml:space="preserve">
          <source>If you enable the &lt;code&gt;useUnifiedTopology&lt;/code&gt; option, the underlying MongoDB driver will use &lt;a href=&quot;https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst&quot;&gt;server selection&lt;/a&gt; to connect to MongoDB and send operations to MongoDB. If the MongoDB driver can't find a server to send an operation to after &lt;code&gt;serverSelectionTimeoutMS&lt;/code&gt;, you'll get the below error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46818db6015a66e8b5014e50163d4eae93d252e" translate="yes" xml:space="preserve">
          <source>If you find any unexpected behavior, please &lt;a href=&quot;https://github.com/Automattic/mongoose/issues/new&quot;&gt;open up an issue on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a904f02639753816145d39f3ca8376a08cb338" translate="yes" xml:space="preserve">
          <source>If you get a &lt;a href=&quot;documents&quot;&gt;Mongoose document&lt;/a&gt; from &lt;a href=&quot;https://mongoosejs.com/docs/api.html#findone_findOne&quot;&gt;&lt;code&gt;findOne()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#find_find&quot;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; using a session, the document will keep a reference to the session and use that session for &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27d80b35c9e43cd3cac49789e9846ba4bd036d3" translate="yes" xml:space="preserve">
          <source>If you have a deeply nested subdoc, you can access the top-level document using the &lt;code&gt;ownerDocument()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624ea9a744d0b020007c7fbb52b75aa8f5280060" translate="yes" xml:space="preserve">
          <source>If you have an array of &lt;code&gt;authors&lt;/code&gt; in your &lt;code&gt;storySchema&lt;/code&gt;, &lt;code&gt;populate()&lt;/code&gt; will give you an empty array instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728ed513b40848777717f0c84426835dd7fa488f" translate="yes" xml:space="preserve">
          <source>If you haven't yet done so, please take a minute to read the &lt;a href=&quot;index&quot;&gt;quickstart&lt;/a&gt; to get an idea of how Mongoose works. If you are migrating from 4.x to 5.x please take a moment to read the &lt;a href=&quot;migrating_to_5&quot;&gt;migration guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5da1a69f8679c8f5ef2f4830615587a35196e1" translate="yes" xml:space="preserve">
          <source>If you need document middleware and fully-featured validation, load the document first and then use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model-save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6612c6308f374c0df3559e0fb0b281d70f61da3" translate="yes" xml:space="preserve">
          <source>If you need full-fledged validation, use the traditional approach of first retrieving the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b5fce8420fdf099650ea0475a5163c605e367d" translate="yes" xml:space="preserve">
          <source>If you need virtuals, getters/setters, or defaults with &lt;code&gt;lean()&lt;/code&gt;, you need to use a plugin. See:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245e193cfd18c0df72356020c7bc56937a83e52f" translate="yes" xml:space="preserve">
          <source>If you pass a transform in &lt;code&gt;toObject()&lt;/code&gt; options, Mongoose will apply the transform to &lt;a href=&quot;../subdocs&quot;&gt;subdocuments&lt;/a&gt; in addition to the top-level document. Similarly, &lt;code&gt;transform: false&lt;/code&gt; skips transforms for all subdocuments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc15030e800ecd2826f5ea59292d2c260f6c7deb" translate="yes" xml:space="preserve">
          <source>If you pass an element that has a &lt;code&gt;toString()&lt;/code&gt; function, Mongoose will call it, unless the element is an array or the &lt;code&gt;toString()&lt;/code&gt; function is strictly equal to &lt;code&gt;Object.prototype.toString()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c76b1a82f3cb495e8a33efd99f45e7f924e2f4d" translate="yes" xml:space="preserve">
          <source>If you pass an object with a &lt;code&gt;valueOf()&lt;/code&gt; function that returns a Number, Mongoose will call it and assign the returned value to the path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8669187e9663747441b1f31125b544a81e2d492" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;useNestedStrict&lt;/code&gt; to true, mongoose will use the child schema's &lt;code&gt;strict&lt;/code&gt; option for casting updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ff72d90012556263004a3053e96e1358649520" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.findOneAndUpdate&quot;&gt;&lt;code&gt;Model.findOneAndUpdate()&lt;/code&gt;&lt;/a&gt;, by default you'll see one of the below deprecation warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3d96201e7baaee9bcf913b991eed5c29110cb7" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;lean()&lt;/code&gt; for performance, but still need virtuals, Mongoose has an &lt;a href=&quot;https://plugins.mongoosejs.io/plugins/lean-virtuals&quot;&gt;officially supported &lt;code&gt;mongoose-lean-virtuals&lt;/code&gt; plugin&lt;/a&gt; that decorates lean documents with virtuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85f7dba4285b1bb839e52bb830c9a760b0ceaed" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;next()&lt;/code&gt;, the &lt;code&gt;next()&lt;/code&gt; call does &lt;strong&gt;not&lt;/strong&gt; stop the rest of the code in your middleware function from executing. Use &lt;a href=&quot;https://www.bennadel.com/blog/2323-use-a-return-statement-when-invoking-callbacks-especially-in-a-guard-statement.htm&quot;&gt;the early &lt;code&gt;return&lt;/code&gt; pattern&lt;/a&gt; to prevent the rest of your middleware function from running when you call &lt;code&gt;next()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9edf29c847234967975483ed0d62597e3d2c99d1" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;toJSON()&lt;/code&gt; or &lt;code&gt;toObject()&lt;/code&gt; mongoose will &lt;em&gt;not&lt;/em&gt; include virtuals by default. This includes the output of calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt;&lt;/a&gt; on a Mongoose document, because &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description&quot;&gt;&lt;code&gt;JSON.stringify()&lt;/code&gt; calls &lt;code&gt;toJSON()&lt;/code&gt;&lt;/a&gt;. Pass &lt;code&gt;{ virtuals: true }&lt;/code&gt; to either &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toObject&quot;&gt;&lt;code&gt;toObject()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toJSON&quot;&gt;&lt;code&gt;toJSON()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b7eb26c27fc4951764b36b9fed71660c4ea4db" translate="yes" xml:space="preserve">
          <source>If you use multiple connections, you should make sure you export schemas, &lt;strong&gt;not&lt;/strong&gt; models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602fa051fcc79605deac9a8469837554f2ffffc0" translate="yes" xml:space="preserve">
          <source>If you want to add additional keys later, use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema-add&quot;&gt;Schema#add&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cca8ba33d3c112857bb64d861e8b7d1962499c" translate="yes" xml:space="preserve">
          <source>If you want to continue to use unencoded connection strings, the easiest fix is to use the &lt;code&gt;mongodb-uri&lt;/code&gt; module to parse the connection strings, and then produce the properly encoded versions. You can use a function like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891469676903d8fa9c9c20a346ed8c078cf68b61" translate="yes" xml:space="preserve">
          <source>If you want to count all documents in a large collection, use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.estimatedDocumentCount&quot;&gt;&lt;code&gt;estimatedDocumentCount()&lt;/code&gt; function&lt;/a&gt; instead. If you call &lt;code&gt;countDocuments({})&lt;/code&gt;, MongoDB will always execute a full collection scan and &lt;strong&gt;not&lt;/strong&gt; use any indexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d258faf8257cf65143237776237f07c01ea469b5" translate="yes" xml:space="preserve">
          <source>If you want to handle these errors at the Model level, add an &lt;code&gt;error&lt;/code&gt; listener to your Model as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb1d5bc23c1a890f79f30eb4d2f5a20484bd1c6" translate="yes" xml:space="preserve">
          <source>If you want to query by a computed property, you should set the property using a &lt;a href=&quot;getters-setters&quot;&gt;custom setter&lt;/a&gt; or &lt;a href=&quot;../middleware&quot;&gt;pre save middleware&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612ce25520b30826e290d0cfd4c8f788216c62f7" translate="yes" xml:space="preserve">
          <source>If you want to skip transformations, use &lt;code&gt;transform: false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc784262e86749a1a4ac7a5d37a1215740f42b06" translate="yes" xml:space="preserve">
          <source>If you were to &lt;code&gt;populate()&lt;/code&gt; using the &lt;code&gt;limit&lt;/code&gt; option, you would find that the 2nd story has 0 fans:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c140c9de3885c02195be3dc5fa566d1d4213207" translate="yes" xml:space="preserve">
          <source>If you're an advanced user, you may want to plug in your own promise library like &lt;a href=&quot;https://www.npmjs.com/package/bluebird&quot;&gt;bluebird&lt;/a&gt;. Just set &lt;code&gt;mongoose.Promise&lt;/code&gt; to your favorite ES6-style promise constructor and mongoose will use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41699e94ce85a722ca109b00a9408804d0a11dc" translate="yes" xml:space="preserve">
          <source>If you're executing a query and sending the results without modification to, say, an &lt;a href=&quot;http://expressjs.com/en/4x/api.html#res&quot;&gt;Express response&lt;/a&gt;, you should use lean. In general, if you do not modify the query results and do not use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-get&quot;&gt;custom getters&lt;/a&gt;, you should use &lt;code&gt;lean()&lt;/code&gt;. If you modify the query results or rely on features like getters or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-toObject&quot;&gt;transforms&lt;/a&gt;, you should not use &lt;code&gt;lean()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4778601f5e94988f1bb837b94168c9942f19572e" translate="yes" xml:space="preserve">
          <source>If you're experiencing a similar error, connect to the replica set using the &lt;code&gt;mongo&lt;/code&gt; shell and run the &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/rs.conf/&quot;&gt;&lt;code&gt;rs.conf()&lt;/code&gt;&lt;/a&gt; command to check the host names of each replica set member. Follow &lt;a href=&quot;https://docs.mongodb.com/manual/tutorial/change-hostnames-in-a-replica-set/#change-hostnames-while-maintaining-replica-set-availability&quot;&gt;this page's instructions to change a replica set member's host name&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69cd1d8afc8289590334bec9cbbbc7fdec7d4ea" translate="yes" xml:space="preserve">
          <source>If you're still on Mongoose 3.x, please read the &lt;a href=&quot;https://mongoosejs.com/docs/migration.html&quot;&gt;Mongoose 3.x to 4.x migration guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773ff605bf111ab221e6f127018c2cee2910032c" translate="yes" xml:space="preserve">
          <source>If you're using &lt;a href=&quot;https://www.npmjs.com/package/gridfs-stream&quot;&gt;gridfs-stream&lt;/a&gt;, you'll see the below deprecation warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e071bd7348c6c815c6aec0794ed65f45632ce7" translate="yes" xml:space="preserve">
          <source>If you're using populate projections, make sure &lt;code&gt;foreignField&lt;/code&gt; is included in the projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6ee1342f463d4f5f127dc5e2d70daf7b23d258" translate="yes" xml:space="preserve">
          <source>If your app is used by a lot of different connection strings, it's possible that your test cases will pass, but production passwords will fail. Encode all your connection strings to be safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8559e8c53a08a8bb5181cd631279636fafe5021" translate="yes" xml:space="preserve">
          <source>If your post hook function takes at least 2 parameters, mongoose will assume the second parameter is a &lt;code&gt;next()&lt;/code&gt; function that you will call to trigger the next middleware in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d513318d9b5cfcb8d2c6a42b216bc5e20968a73c" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;$geoSearch&lt;/code&gt; functionality for Mongoose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f408cbe97a86e4634c5dbd809a209a48239c11ec" translate="yes" xml:space="preserve">
          <source>Implicit &lt;code&gt;$in&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="fcabcdd89e5bfec8016572dc66088e927d6ed29a" translate="yes" xml:space="preserve">
          <source>In 5.x, setters run in the order they're declared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdeb7a8bf215e6a93e41771f18ce667a5b363031" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;http://thecodebarbarian.com/introducing-mongoose-5.html#promises-and-async-await-with-middleware&quot;&gt;mongoose 5.x&lt;/a&gt;, instead of calling &lt;code&gt;next()&lt;/code&gt; manually, you can use a function that returns a promise. In particular, you can use &lt;a href=&quot;http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html&quot;&gt;&lt;code&gt;async/await&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00de641a03326f34efc02a61a8ae2d98b0b3673" translate="yes" xml:space="preserve">
          <source>In Mongoose 3.7, &lt;code&gt;intersects&lt;/code&gt; changed from a getter to a function. If you need the old syntax, use &lt;a href=&quot;https://github.com/ebensing/mongoose-within&quot;&gt;this&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f446e31eef5880ae7ace72f86fc88b5e0c9ccc" translate="yes" xml:space="preserve">
          <source>In Mongoose 3.7, &lt;code&gt;within&lt;/code&gt; changed from a getter to a function. If you need the old syntax, use &lt;a href=&quot;https://github.com/ebensing/mongoose-within&quot;&gt;this&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8652fad354f0b203d22506fbbc1c7e61df27f4" translate="yes" xml:space="preserve">
          <source>In Mongoose 4.x, overwriting a filter property that's a primitive with one that is an object would silently fail. For example, the below code would ignore the &lt;code&gt;where()&lt;/code&gt; and be equivalent to &lt;code&gt;Sport.find({ name: 'baseball' })&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785fb043956505bd2473b972e4f72464f4e8758b" translate="yes" xml:space="preserve">
          <source>In Mongoose 4.x, the above will print:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8960c6cd69d2ca462b33e805642f739543b7fa75" translate="yes" xml:space="preserve">
          <source>In Mongoose 5.x, the above code will correctly overwrite &lt;code&gt;'baseball'&lt;/code&gt; with &lt;code&gt;{ $ne: 'softball' }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63bf1ed19ae6d66bb50a7d2b2886dc2f0a73625" translate="yes" xml:space="preserve">
          <source>In Mongoose 5.x, the first parameter to &lt;code&gt;mongoose.connect()&lt;/code&gt; and &lt;code&gt;mongoose.createConnection()&lt;/code&gt;, if specified, &lt;strong&gt;must&lt;/strong&gt; be a &lt;a href=&quot;https://docs.mongodb.com/manual/reference/connection-string/&quot;&gt;MongoDB connection string&lt;/a&gt;. The connection string and options are then passed down to &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.0/api/MongoClient.html#.connect&quot;&gt;the MongoDB Node.js driver's &lt;code&gt;MongoClient.connect()&lt;/code&gt; function&lt;/a&gt;. Mongoose does not modify the connection string, although &lt;code&gt;mongoose.connect()&lt;/code&gt; and &lt;code&gt;mongoose.createConnection()&lt;/code&gt; support a &lt;a href=&quot;http://mongoosejs.com/docs/connections.html#options&quot;&gt;few additional options in addition to the ones the MongoDB driver supports&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b4e06e2220be448ffa13bc153a34af81de1c57" translate="yes" xml:space="preserve">
          <source>In Mongoose 5.x, the script will print:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3ced129e619a67a36717e92b8bd539f7234cac" translate="yes" xml:space="preserve">
          <source>In Mongoose, a &quot;document&quot; generally means an instance of a model. You should not have to create an instance of the Document class without going through a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a68c5604a6d2487374ca4145d1bcc7ca1b800b" translate="yes" xml:space="preserve">
          <source>In Mongoose, a virtual is a property that is &lt;strong&gt;not&lt;/strong&gt; stored in MongoDB. Virtuals are typically used for computed properties on documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0218ecdf279c3bb8cd98f2ea404151c7320fb757" translate="yes" xml:space="preserve">
          <source>In Mongoose, the term &quot;Model&quot; refers to subclasses of the &lt;code&gt;mongoose.Model&lt;/code&gt; class. You should not use the &lt;code&gt;mongoose.Model&lt;/code&gt; class directly. The &lt;a href=&quot;api#mongoose_Mongoose-model&quot;&gt;&lt;code&gt;mongoose.model()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#connection_Connection-model&quot;&gt;&lt;code&gt;connection.model()&lt;/code&gt;&lt;/a&gt; functions create subclasses of &lt;code&gt;mongoose.Model&lt;/code&gt; as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb555fdeb6a2f0f0715cacf3e23cd2489e2d009c" translate="yes" xml:space="preserve">
          <source>In a setter function, &lt;code&gt;this&lt;/code&gt; can be either the document being set or the query being run. If you don't want your setter to run when you call &lt;code&gt;updateOne()&lt;/code&gt;, you add an if statement that checks if &lt;code&gt;this&lt;/code&gt; is a Mongoose document as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744d8369f61b52b8d341d98ab174db6e62448b53" translate="yes" xml:space="preserve">
          <source>In addition to the type property, you can specify additional properties for a path. For example, if you want to lowercase a string before saving:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4df05105e516597fe3ebb50decfe261e52aa57" translate="yes" xml:space="preserve">
          <source>In addition, you should define a factory function that registers models on a connection to make it easy to register all your models on a given connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a745736497970bdb57c47877b06adea34f0443c7" translate="yes" xml:space="preserve">
          <source>In mongoose 5 the &lt;code&gt;required&lt;/code&gt; validator only verifies if the value is an array. That is, it will &lt;strong&gt;not&lt;/strong&gt; fail for &lt;em&gt;empty&lt;/em&gt; arrays as it would in mongoose 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b9452a084e685748800d6cd6c779172281232b" translate="yes" xml:space="preserve">
          <source>In mongoose 5 the default debug function uses &lt;code&gt;console.info()&lt;/code&gt; to display messages instead of &lt;code&gt;console.error()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ca828a5f97a6c969d3fffabf87ffb14770a00d" translate="yes" xml:space="preserve">
          <source>In mongoose v5.x you can instead declare these options at the top level, without all that extra nesting. &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/MongoClient.html&quot;&gt;Here's the list of all supported options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7780fc5e9663b6e645b369af500ec7b34f9fd542" translate="yes" xml:space="preserve">
          <source>In older version of the MongoDB driver you had to specify distinct options for server connections, replica set connections, and mongos connections:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233a2738182b8473704aad9f4f41725f8e881de0" translate="yes" xml:space="preserve">
          <source>In the above code, the &lt;code&gt;query&lt;/code&gt; variable is of type &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query-js&quot;&gt;Query&lt;/a&gt;. A &lt;code&gt;Query&lt;/code&gt; enables you to build up a query using chaining syntax, rather than specifying a JSON object. The below 2 examples are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9dc517a2e9618c630080b6656cb2a9299bb253f" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;session&lt;/code&gt; is an instance of the &lt;a href=&quot;https://mongodb.github.io/node-mongodb-native/3.2/api/ClientSession.html&quot;&gt;MongoDB Node.js driver's &lt;code&gt;ClientSession&lt;/code&gt; class&lt;/a&gt;. Please refer to the &lt;a href=&quot;https://mongodb.github.io/node-mongodb-native/3.2/api/ClientSession.html&quot;&gt;MongoDB driver docs&lt;/a&gt; for more information on what methods &lt;code&gt;session&lt;/code&gt; has.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a9e14fdc807a2920048bcb3eaf056cf5440e4a" translate="yes" xml:space="preserve">
          <source>In the above examples, you learned about document validation. Mongoose also supports validation for &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-updateOne&quot;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-updateMany&quot;&gt;&lt;code&gt;updateMany()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate&quot;&gt;&lt;code&gt;findOneAndUpdate()&lt;/code&gt;&lt;/a&gt; operations. Update validators are off by default - you need to specify the &lt;code&gt;runValidators&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8005a31730891ba53487c909012baae646d9132f" translate="yes" xml:space="preserve">
          <source>In this situation, you will &lt;strong&gt;not&lt;/strong&gt; be able to &lt;code&gt;populate()&lt;/code&gt; normally. The &lt;code&gt;conversation&lt;/code&gt; field will always be null, because &lt;code&gt;populate()&lt;/code&gt; doesn't know which model to use. However, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.populate&quot;&gt;you can specify the model explicitly&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f642ee196088372ea886186c6c617515599afd3f" translate="yes" xml:space="preserve">
          <source>Indexes</source>
          <target state="translated">Indexes</target>
        </trans-unit>
        <trans-unit id="6d9d1b529c3efb72a25309afe4f2ce7d5d7a009b" translate="yes" xml:space="preserve">
          <source>Inherits:</source>
          <target state="translated">Inherits:</target>
        </trans-unit>
        <trans-unit id="d4507cb042aa71d27d1fdbb4398dd50e7a783750" translate="yes" xml:space="preserve">
          <source>Init hook signatures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17eaa9a2179ad79987b21e99d575649b7ae13cc" translate="yes" xml:space="preserve">
          <source>Initializes the document without setters or marking anything modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab7d1d49dd26afc2c53ee28fa81799fd390b0a3" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
          <target state="translated">Методы инстанций</target>
        </trans-unit>
        <trans-unit id="71403bb0ff1e47e71d1309bd8d077626641ff18b" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;Models&lt;/code&gt; are &lt;a href=&quot;documents&quot;&gt;documents&lt;/a&gt;. Documents have many of their own &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document-js&quot;&gt;built-in instance methods&lt;/a&gt;. We may also define our own custom document instance methods too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92d7382a7ae02e275b9d03e7a09161342ee46d1" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;ValidatorError&lt;/code&gt; have the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4ef836ae5d77f02b33a536b452bb6afa630286" translate="yes" xml:space="preserve">
          <source>Instead of declaring a getter on the array as shown above, you should declare a getter on the &lt;code&gt;url&lt;/code&gt; string as shown below. If you need to declare a getter on a nested document or array, be very careful!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e471c7d32e7d328efe12132b69d57516929e05f8" translate="yes" xml:space="preserve">
          <source>Issue a MongoDB &lt;code&gt;findOneAndDelete()&lt;/code&gt; command by a document's _id field. In other words, &lt;code&gt;findByIdAndDelete(id)&lt;/code&gt; is a shorthand for &lt;code&gt;findOneAndDelete({ _id: id })&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044d4b1c57d191b2507d520b87f06eacd9c005f1" translate="yes" xml:space="preserve">
          <source>Issue a MongoDB &lt;code&gt;findOneAndDelete()&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917a14551262ee91e6a5f45667c00a0af3ce6b6b" translate="yes" xml:space="preserve">
          <source>Issue a MongoDB &lt;code&gt;findOneAndReplace()&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92b1b63ba8ac370ab6b38592215e0d95b8568b1" translate="yes" xml:space="preserve">
          <source>Issue a mongodb findAndModify remove command by a document's _id field. &lt;code&gt;findByIdAndRemove(id, ...)&lt;/code&gt; is equivalent to &lt;code&gt;findOneAndRemove({ _id: id }, ...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b8a37641f614a27191b7608d4b2c5d9a80aa0a" translate="yes" xml:space="preserve">
          <source>Issue a mongodb findAndModify remove command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd15160a60fe335cbb526d2daa37e2fddbe33a71" translate="yes" xml:space="preserve">
          <source>Issues a MongoDB &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndDelete/&quot;&gt;findOneAndDelete&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1a87092097b714d2c77d44a7aa621dee004c00" translate="yes" xml:space="preserve">
          <source>Issues a MongoDB &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/&quot;&gt;findOneAndReplace&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d063e1812d765418f580a627a30bfa10fb561a2" translate="yes" xml:space="preserve">
          <source>Issues a mongodb &lt;a href=&quot;http://www.mongodb.org/display/DOCS/findAndModify+Command&quot;&gt;findAndModify&lt;/a&gt; remove command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d85101f3f71dbd89ecec7111da8c52c7358989" translate="yes" xml:space="preserve">
          <source>Issues a mongodb &lt;a href=&quot;http://www.mongodb.org/display/DOCS/findAndModify+Command&quot;&gt;findAndModify&lt;/a&gt; update command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ed5cc8f0f058c18fb6b3a51c74c6ab09f010b5" translate="yes" xml:space="preserve">
          <source>Issues a mongodb findAndModify update command by a document's _id field. &lt;code&gt;findByIdAndUpdate(id, ...)&lt;/code&gt; is equivalent to &lt;code&gt;findOneAndUpdate({ _id: id }, ...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf67ddca5ac7ea8cab0485627a4518edcd887529" translate="yes" xml:space="preserve">
          <source>Issues a mongodb findAndModify update command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7874302479a37ddeda79a3ad1dd380445da02cab" translate="yes" xml:space="preserve">
          <source>It is debatable that we really want two sets of pointers as they may get out of sync. Instead we could skip populating and directly &lt;code&gt;find()&lt;/code&gt; the stories we are interested in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4067dc3c9647de688828184ccde8c9d4565158f4" translate="yes" xml:space="preserve">
          <source>Iterates the schemas paths similar to Array#forEach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7c1eb42d3a18582a52781ecb320010566ee171" translate="yes" xml:space="preserve">
          <source>Keep in mind that getters do &lt;strong&gt;not&lt;/strong&gt; impact the underlying data stored in MongoDB. If you save &lt;code&gt;user&lt;/code&gt;, the &lt;code&gt;email&lt;/code&gt; property will be 'ab@gmail.com' in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7784d785cda00c58491b8d0668871898ecdf2c2b" translate="yes" xml:space="preserve">
          <source>Keep in mind that virtuals are &lt;em&gt;not&lt;/em&gt; included in &lt;code&gt;toJSON()&lt;/code&gt; output by default. If you want populate virtuals to show up when using functions that rely on &lt;code&gt;JSON.stringify()&lt;/code&gt;, like Express' &lt;a href=&quot;http://expressjs.com/en/4x/api.html#res.json&quot;&gt;&lt;code&gt;res.json()&lt;/code&gt; function&lt;/a&gt;, set the &lt;code&gt;virtuals: true&lt;/code&gt; option on your schema's &lt;code&gt;toJSON&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33af2cec642698e598f33fd5d30f64ec333c3ea6" translate="yes" xml:space="preserve">
          <source>Keys in this object are names that are rejected in schema declarations because they conflict with Mongoose functionality. If you create a schema using &lt;code&gt;new Schema()&lt;/code&gt; with one of these property names, Mongoose will throw an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8169e681e5d8bd006fe4d1f862110b97ec15ee21" translate="yes" xml:space="preserve">
          <source>Keys may also be assigned nested objects containing further key/type definitions like the &lt;code&gt;meta&lt;/code&gt; property above. This will happen whenever a key's value is a POJO that lacks a bona-fide &lt;code&gt;type&lt;/code&gt; property. In these cases, only the leaves in a tree are given actual paths in the schema (like &lt;code&gt;meta.votes&lt;/code&gt; and &lt;code&gt;meta.favs&lt;/code&gt; above), and the branches do not have actual paths. A side-effect of this is that &lt;code&gt;meta&lt;/code&gt; above cannot have its own validation. If validation is needed up the tree, a path needs to be created up the tree - see the &lt;a href=&quot;subdocs&quot;&gt;Subdocuments&lt;/a&gt; section for more information no how to do this. Also read the &lt;a href=&quot;schematypes&quot;&gt;Mixed&lt;/a&gt; subsection of the SchemaTypes guide for some gotchas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff7b447b66221d0691f7f635349664543fb3523" translate="yes" xml:space="preserve">
          <source>Kittens can meow, so let's take a look at how to add &quot;speak&quot; functionality to our documents:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba09eab1710a5eaef648f3df36ec49f2d780a119" translate="yes" xml:space="preserve">
          <source>Lean and Populate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa331d08caa7beb81535eee72d18a2636158ccd6" translate="yes" xml:space="preserve">
          <source>Let's say you have a schema representing events, and a schema representing conversations. Each event has a corresponding conversation thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b460a86d163758ae293ab531d6af5fd429626510" translate="yes" xml:space="preserve">
          <source>Let's take a look at an example of a basic schema type: a 1-byte integer. To create a new schema type, you need to inherit from &lt;code&gt;mongoose.SchemaType&lt;/code&gt; and add the corresponding property to &lt;code&gt;mongoose.Schema.Types&lt;/code&gt;. The one method you need to implement is the &lt;code&gt;cast()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a805575e72bb3f11451b0b945cb652f3605dda9" translate="yes" xml:space="preserve">
          <source>Lets you set arbitrary options, for middleware or plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24602a75993acde5fc613f75600822106ceecc7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;Model.remove()&lt;/code&gt;, this function does &lt;strong&gt;not&lt;/strong&gt; trigger &lt;code&gt;pre('remove')&lt;/code&gt; or &lt;code&gt;post('remove')&lt;/code&gt; hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb0a90e18ef53474c7e57a69c824a5ac65cd62e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;remove()&lt;/code&gt;, the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt; function&lt;/a&gt; is deprecated in favor of the more explicit &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.updateOne&quot;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.updateMany&quot;&gt;&lt;code&gt;updateMany()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.replaceOne&quot;&gt;&lt;code&gt;replaceOne()&lt;/code&gt;&lt;/a&gt; functions. You should replace &lt;code&gt;update()&lt;/code&gt; with &lt;code&gt;updateOne()&lt;/code&gt;, unless you use the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#model_Model.update&quot;&gt;&lt;code&gt;multi&lt;/code&gt; or &lt;code&gt;overwrite&lt;/code&gt; options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="0e7d2fb339abf5049645bbbcf19b3e93b5f781c0" translate="yes" xml:space="preserve">
          <source>Lists the indexes currently defined in MongoDB. This may or may not be the same as the indexes defined in your schema depending on whether you use the &lt;a href=&quot;../guide#autoIndex&quot;&gt;&lt;code&gt;autoIndex&lt;/code&gt; option&lt;/a&gt; and if you build indexes manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1ff41f28a89d4a79fa27fbed43ee331264c56e" translate="yes" xml:space="preserve">
          <source>Loads an ES6 class into a schema. Maps &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;setters&lt;/a&gt; + &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get&quot;&gt;getters&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static&quot;&gt;static methods&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Class_body_and_method_definitions&quot;&gt;instance methods&lt;/a&gt; to schema &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#virtuals&quot;&gt;virtuals&lt;/a&gt;, &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#statics&quot;&gt;statics&lt;/a&gt;, and &lt;a href=&quot;http://mongoosejs.com/docs/guide.html#methods&quot;&gt;methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad05b85d2b65225280cb456e6059c04171af333e" translate="yes" xml:space="preserve">
          <source>Make this query throw an error if no documents match the given &lt;code&gt;filter&lt;/code&gt;. This is handy for integrating with async/await, because &lt;code&gt;orFail()&lt;/code&gt; saves you an extra &lt;code&gt;if&lt;/code&gt; statement to check if no document was found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d767b1f1ad540ea74f1c300d0157549d4dab286" translate="yes" xml:space="preserve">
          <source>Makes the indexes in MongoDB match the indexes defined in this model's schema. This function will drop any indexes that are not defined in the model's schema except the &lt;code&gt;_id&lt;/code&gt; index, and build any indexes that are in your schema but not in MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab478f3efc840eebab919dff1b9512286f70c10c" translate="yes" xml:space="preserve">
          <source>Map</source>
          <target state="translated">Map</target>
        </trans-unit>
        <trans-unit id="0f1039a428edf4e06139426578e40d5794a90386" translate="yes" xml:space="preserve">
          <source>Map types are stored as &lt;a href=&quot;https://en.wikipedia.org/wiki/BSON#Data_types_and_syntax&quot;&gt;BSON objects in MongoDB&lt;/a&gt;. Keys in a BSON object are ordered, so this means the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Description&quot;&gt;insertion order&lt;/a&gt; property of maps is maintained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80071cd75107cd5c4afdb2571725ea6733631038" translate="yes" xml:space="preserve">
          <source>Maps</source>
          <target state="translated">Maps</target>
        </trans-unit>
        <trans-unit id="d9d15d1a8fd14916c7ac5e37d26cbe2935d36811" translate="yes" xml:space="preserve">
          <source>Marks a path as invalid, causing validation to fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec799f2ab9b8f3f0bfb000462ece879df4d5954" translate="yes" xml:space="preserve">
          <source>Marks a path as valid, removing existing validation errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08676c37836e9852a119c84f11221effb0880c48" translate="yes" xml:space="preserve">
          <source>Marks the path as having pending changes to write to the db.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b5a60f386888f4b6ba21fbec68c487e89a3e3e" translate="yes" xml:space="preserve">
          <source>Marks this cursor as closed. Will stop streaming and subsequent calls to &lt;code&gt;next()&lt;/code&gt; will error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a072bccd92ac6093a6effbc3a482732645b141b8" translate="yes" xml:space="preserve">
          <source>Merges another Query or conditions object into this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8978ed84b5906ad4191a0b252828be64701bfa" translate="yes" xml:space="preserve">
          <source>Middleware</source>
          <target state="translated">Middleware</target>
        </trans-unit>
        <trans-unit id="0b7658baf54fd18ebedfc54472e67ded819ca974" translate="yes" xml:space="preserve">
          <source>Middleware (also called pre and post &lt;em&gt;hooks&lt;/em&gt;) are functions which are passed control during execution of asynchronous functions. Middleware is specified on the schema level and is useful for writing &lt;a href=&quot;plugins&quot;&gt;plugins&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be71121e03e3ba48d81f0bca5d7fcd4c95536de" translate="yes" xml:space="preserve">
          <source>Middleware are useful for atomizing model logic. Here are some other ideas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f69f9df3e162d5762c35eb105a20756694f31d" translate="yes" xml:space="preserve">
          <source>Middleware execution normally stops the first time a piece of middleware calls &lt;code&gt;next()&lt;/code&gt; with an error. However, there is a special kind of post middleware called &quot;error handling middleware&quot; that executes specifically when an error occurs. Error handling middleware is useful for reporting errors and making error messages more readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1f0639dc4aeab11cadb425f56fd8ed695ed9e5" translate="yes" xml:space="preserve">
          <source>Migrating from 4.x to 5.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0dcb865ad81a32e522b11fd1e33bae685e88709" translate="yes" xml:space="preserve">
          <source>Mixed</source>
          <target state="translated">Mixed</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="d0b246b2463721900e9b1d5c14966771f3bdc9e6" translate="yes" xml:space="preserve">
          <source>Model middleware is supported for the following model functions. In model middleware functions, &lt;code&gt;this&lt;/code&gt; refers to the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d9976c81abf1829d041676bbec88933c8eb262" translate="yes" xml:space="preserve">
          <source>Model()</source>
          <target state="translated">Model()</target>
        </trans-unit>
        <trans-unit id="88ea2f1cbe1f272b7b19687cfb7976a8bc760477" translate="yes" xml:space="preserve">
          <source>Model.aggregate()</source>
          <target state="translated">Model.aggregate()</target>
        </trans-unit>
        <trans-unit id="eb12ac4f13b66ea66dac76bd8b6c983611cb250d" translate="yes" xml:space="preserve">
          <source>Model.bulkWrite()</source>
          <target state="translated">Model.bulkWrite()</target>
        </trans-unit>
        <trans-unit id="cc4e6a06a736c72b3db2ff9bc2444450707fa46c" translate="yes" xml:space="preserve">
          <source>Model.cleanIndexes()</source>
          <target state="translated">Model.cleanIndexes()</target>
        </trans-unit>
        <trans-unit id="d975f91709ac736abd155d4bfb7303417cf9e613" translate="yes" xml:space="preserve">
          <source>Model.count()</source>
          <target state="translated">Model.count()</target>
        </trans-unit>
        <trans-unit id="c69245932df4355c657c70f1067afabb6a224de2" translate="yes" xml:space="preserve">
          <source>Model.countDocuments()</source>
          <target state="translated">Model.countDocuments()</target>
        </trans-unit>
        <trans-unit id="f97aaf2f2ea887eb40b2d1dff2a607da97d7c9e0" translate="yes" xml:space="preserve">
          <source>Model.create()</source>
          <target state="translated">Model.create()</target>
        </trans-unit>
        <trans-unit id="8412d5b7e343298c8b287d17b4631db5c6881d2a" translate="yes" xml:space="preserve">
          <source>Model.createCollection()</source>
          <target state="translated">Model.createCollection()</target>
        </trans-unit>
        <trans-unit id="673fe2f82b305b38fefb99de44825db251fbf815" translate="yes" xml:space="preserve">
          <source>Model.createIndexes()</source>
          <target state="translated">Model.createIndexes()</target>
        </trans-unit>
        <trans-unit id="958e65e66d81964a5aa712e42d9e95cd8731c31e" translate="yes" xml:space="preserve">
          <source>Model.deleteMany()</source>
          <target state="translated">Model.deleteMany()</target>
        </trans-unit>
        <trans-unit id="0406f2de2ca61eff26f7e1047aa3dfc4f135a49e" translate="yes" xml:space="preserve">
          <source>Model.deleteOne()</source>
          <target state="translated">Model.deleteOne()</target>
        </trans-unit>
        <trans-unit id="55966202152acd949e98029d7e5fa6dc3e2b9d4a" translate="yes" xml:space="preserve">
          <source>Model.discriminator()</source>
          <target state="translated">Model.discriminator()</target>
        </trans-unit>
        <trans-unit id="693cef8830543ba335e7eb4d76d6f695fa1e24fd" translate="yes" xml:space="preserve">
          <source>Model.distinct()</source>
          <target state="translated">Model.distinct()</target>
        </trans-unit>
        <trans-unit id="c960e01284c78c536bc910bf3ca1e4ccac931ca3" translate="yes" xml:space="preserve">
          <source>Model.ensureIndexes()</source>
          <target state="translated">Model.ensureIndexes()</target>
        </trans-unit>
        <trans-unit id="31e5dc322192111426719043c204dcc87c1cae7d" translate="yes" xml:space="preserve">
          <source>Model.estimatedDocumentCount()</source>
          <target state="translated">Model.estimatedDocumentCount()</target>
        </trans-unit>
        <trans-unit id="266597c7c2b8dcb6924d41f957c185f8707217b3" translate="yes" xml:space="preserve">
          <source>Model.events</source>
          <target state="translated">Model.events</target>
        </trans-unit>
        <trans-unit id="e01e2de5eb197a7a385e825ca1708aaadb072082" translate="yes" xml:space="preserve">
          <source>Model.exists()</source>
          <target state="translated">Model.exists()</target>
        </trans-unit>
        <trans-unit id="c6113777e3711c9a324b6a1569aa9119105449aa" translate="yes" xml:space="preserve">
          <source>Model.find()</source>
          <target state="translated">Model.find()</target>
        </trans-unit>
        <trans-unit id="55eadd183d5d7ee1e9e88addb5d0c60a881424e2" translate="yes" xml:space="preserve">
          <source>Model.findById()</source>
          <target state="translated">Model.findById()</target>
        </trans-unit>
        <trans-unit id="de785059b4db88a74600d47c25e1e5c7e0fc4849" translate="yes" xml:space="preserve">
          <source>Model.findByIdAndDelete()</source>
          <target state="translated">Model.findByIdAndDelete()</target>
        </trans-unit>
        <trans-unit id="3fe6ad82fe94aed6328191f5328829e71fa27bd6" translate="yes" xml:space="preserve">
          <source>Model.findByIdAndRemove()</source>
          <target state="translated">Model.findByIdAndRemove()</target>
        </trans-unit>
        <trans-unit id="f3e9349061d0cbfd9fb80399f18008cb42ad9de6" translate="yes" xml:space="preserve">
          <source>Model.findByIdAndUpdate()</source>
          <target state="translated">Model.findByIdAndUpdate()</target>
        </trans-unit>
        <trans-unit id="e8940e60933a6dec5f3a1f368962b3785cbacac2" translate="yes" xml:space="preserve">
          <source>Model.findOne()</source>
          <target state="translated">Model.findOne()</target>
        </trans-unit>
        <trans-unit id="62429885cc4d8d093db6e4a6ed3b9c7a892060f7" translate="yes" xml:space="preserve">
          <source>Model.findOneAndDelete()</source>
          <target state="translated">Model.findOneAndDelete()</target>
        </trans-unit>
        <trans-unit id="63c5c8340e9d30ac8f44546051e7a6238e284444" translate="yes" xml:space="preserve">
          <source>Model.findOneAndRemove()</source>
          <target state="translated">Model.findOneAndRemove()</target>
        </trans-unit>
        <trans-unit id="527d52aa24a4cf332cee13dad8cd6da0b4e2323b" translate="yes" xml:space="preserve">
          <source>Model.findOneAndReplace()</source>
          <target state="translated">Model.findOneAndReplace()</target>
        </trans-unit>
        <trans-unit id="676efc8cefcd68d23536c2cc7b4f974e7ab3f774" translate="yes" xml:space="preserve">
          <source>Model.findOneAndUpdate()</source>
          <target state="translated">Model.findOneAndUpdate()</target>
        </trans-unit>
        <trans-unit id="8b1ba03cc745334e9f9a20af91278e083e40334f" translate="yes" xml:space="preserve">
          <source>Model.geoSearch()</source>
          <target state="translated">Model.geoSearch()</target>
        </trans-unit>
        <trans-unit id="1d7c738c4303e1477b08325e73c7c1eba94dfbcb" translate="yes" xml:space="preserve">
          <source>Model.hydrate()</source>
          <target state="translated">Model.hydrate()</target>
        </trans-unit>
        <trans-unit id="6c5db1e32dd9eb0cd708255b124fdbb098eefbc3" translate="yes" xml:space="preserve">
          <source>Model.init()</source>
          <target state="translated">Model.init()</target>
        </trans-unit>
        <trans-unit id="806141da59f8c6b45e081bd5a36dd463d2c3810a" translate="yes" xml:space="preserve">
          <source>Model.insertMany()</source>
          <target state="translated">Model.insertMany()</target>
        </trans-unit>
        <trans-unit id="6e856dabf6a289e222db0ed2f94b48a9d54368b4" translate="yes" xml:space="preserve">
          <source>Model.inspect()</source>
          <target state="translated">Model.inspect()</target>
        </trans-unit>
        <trans-unit id="75cba30df57828fa01a2f2ea190282d9111d8663" translate="yes" xml:space="preserve">
          <source>Model.listIndexes()</source>
          <target state="translated">Model.listIndexes()</target>
        </trans-unit>
        <trans-unit id="743fcafec9f4c526e455cf34d7467671cefbf76d" translate="yes" xml:space="preserve">
          <source>Model.mapReduce()</source>
          <target state="translated">Model.mapReduce()</target>
        </trans-unit>
        <trans-unit id="3f00ab67a69ce66abcf1e3bb262b5392c9b5d125" translate="yes" xml:space="preserve">
          <source>Model.populate()</source>
          <target state="translated">Model.populate()</target>
        </trans-unit>
        <trans-unit id="74d434a676c423f0f4c175f91fe525ebc54d378a" translate="yes" xml:space="preserve">
          <source>Model.prototype.$where</source>
          <target state="translated">Model.prototype.$where</target>
        </trans-unit>
        <trans-unit id="2e2d8f9ff39a8e250c144c5a2c35630f55a4b021" translate="yes" xml:space="preserve">
          <source>Model.prototype.$where()</source>
          <target state="translated">Model.prototype.$where()</target>
        </trans-unit>
        <trans-unit id="6eb99138625fc51eda79f23830ca230611ca07c1" translate="yes" xml:space="preserve">
          <source>Model.prototype.base</source>
          <target state="translated">Model.prototype.base</target>
        </trans-unit>
        <trans-unit id="407678a7d51791a7009e01a53d48b5373a917ece" translate="yes" xml:space="preserve">
          <source>Model.prototype.baseModelName</source>
          <target state="translated">Model.prototype.baseModelName</target>
        </trans-unit>
        <trans-unit id="7d9229ca8bacdd6c20178a43e490f8973012fac0" translate="yes" xml:space="preserve">
          <source>Model.prototype.collection</source>
          <target state="translated">Model.prototype.collection</target>
        </trans-unit>
        <trans-unit id="796c84b86abfbb59291db2533f8d59a28ad5bc07" translate="yes" xml:space="preserve">
          <source>Model.prototype.db</source>
          <target state="translated">Model.prototype.db</target>
        </trans-unit>
        <trans-unit id="7b8fb8c916ea2e1ae0b3d9a06e0d9bcddb1a622f" translate="yes" xml:space="preserve">
          <source>Model.prototype.delete</source>
          <target state="translated">Model.prototype.delete</target>
        </trans-unit>
        <trans-unit id="199a452b77feb9c27467429e7201f92822255ed4" translate="yes" xml:space="preserve">
          <source>Model.prototype.deleteOne()</source>
          <target state="translated">Model.prototype.deleteOne()</target>
        </trans-unit>
        <trans-unit id="a45d335d4d4e597401df337bdef8e72d41add791" translate="yes" xml:space="preserve">
          <source>Model.prototype.discriminators</source>
          <target state="translated">Model.prototype.discriminators</target>
        </trans-unit>
        <trans-unit id="48d09b0842f23b795c995036f0de2b6310e41f86" translate="yes" xml:space="preserve">
          <source>Model.prototype.increment()</source>
          <target state="translated">Model.prototype.increment()</target>
        </trans-unit>
        <trans-unit id="89aa1d6f40247f443bad32d25a35b2f08142ae27" translate="yes" xml:space="preserve">
          <source>Model.prototype.model()</source>
          <target state="translated">Model.prototype.model()</target>
        </trans-unit>
        <trans-unit id="f4a471428279f3b7804077db0a9f0616081f9cc1" translate="yes" xml:space="preserve">
          <source>Model.prototype.modelName</source>
          <target state="translated">Model.prototype.modelName</target>
        </trans-unit>
        <trans-unit id="73e51efad2676a9a006b663a6b18e4c3e6c4ad75" translate="yes" xml:space="preserve">
          <source>Model.prototype.remove()</source>
          <target state="translated">Model.prototype.remove()</target>
        </trans-unit>
        <trans-unit id="fcac02f4f207f522db9273c422587b2823f504a1" translate="yes" xml:space="preserve">
          <source>Model.prototype.save()</source>
          <target state="translated">Model.prototype.save()</target>
        </trans-unit>
        <trans-unit id="13f7a410def068577607db28face4b28d58a4be1" translate="yes" xml:space="preserve">
          <source>Model.prototype.schema</source>
          <target state="translated">Model.prototype.schema</target>
        </trans-unit>
        <trans-unit id="4ddf4f6542aa9d990d1dabf59a864f98e09c9268" translate="yes" xml:space="preserve">
          <source>Model.remove()</source>
          <target state="translated">Model.remove()</target>
        </trans-unit>
        <trans-unit id="3f8d411579094384cc76f4ff902afdeefc317a97" translate="yes" xml:space="preserve">
          <source>Model.replaceOne()</source>
          <target state="translated">Model.replaceOne()</target>
        </trans-unit>
        <trans-unit id="237bf4e09430b0d55051bd26748f98238862f0d6" translate="yes" xml:space="preserve">
          <source>Model.startSession()</source>
          <target state="translated">Model.startSession()</target>
        </trans-unit>
        <trans-unit id="babc2e21de0270dc9c2232374f19f7a6eec3ec10" translate="yes" xml:space="preserve">
          <source>Model.syncIndexes()</source>
          <target state="translated">Model.syncIndexes()</target>
        </trans-unit>
        <trans-unit id="6e88a965239a9760aa639807e817a21d1425104d" translate="yes" xml:space="preserve">
          <source>Model.translateAliases()</source>
          <target state="translated">Model.translateAliases()</target>
        </trans-unit>
        <trans-unit id="89996332d9753f2375fb510141ce6373fbc2d5ba" translate="yes" xml:space="preserve">
          <source>Model.update()</source>
          <target state="translated">Model.update()</target>
        </trans-unit>
        <trans-unit id="2e7453f2450cf7617ced6dcfa01064f2ab00e700" translate="yes" xml:space="preserve">
          <source>Model.updateMany()</source>
          <target state="translated">Model.updateMany()</target>
        </trans-unit>
        <trans-unit id="b52f929d262e3b0c39518f86d98dc295fdc72993" translate="yes" xml:space="preserve">
          <source>Model.updateOne()</source>
          <target state="translated">Model.updateOne()</target>
        </trans-unit>
        <trans-unit id="530e378d953e84ab39095330f44b69cc95bf845c" translate="yes" xml:space="preserve">
          <source>Model.validate()</source>
          <target state="translated">Model.validate()</target>
        </trans-unit>
        <trans-unit id="fe88301a6cbd929495e494b3f46ebb934e3abdd0" translate="yes" xml:space="preserve">
          <source>Model.watch()</source>
          <target state="translated">Model.watch()</target>
        </trans-unit>
        <trans-unit id="29c43c6ea714ae07bb0721d7822c0ec54efb4e09" translate="yes" xml:space="preserve">
          <source>Model.where()</source>
          <target state="translated">Model.where()</target>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="d2585f4f52dbd132493b5010f65743fa20925a02" translate="yes" xml:space="preserve">
          <source>Models defined on the &lt;code&gt;mongoose&lt;/code&gt; instance are available to all connection created by the same &lt;code&gt;mongoose&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e84ed8d208e39f6a2ca798e3a23655c74928635e" translate="yes" xml:space="preserve">
          <source>Models have static &lt;code&gt;deleteOne()&lt;/code&gt; and &lt;code&gt;deleteMany()&lt;/code&gt; functions for removing all documents matching the given &lt;code&gt;filter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6342b30abc7d62696ea053a6383b1b02a9baed00" translate="yes" xml:space="preserve">
          <source>MongoDB 2.4 deprecated the use of &lt;code&gt;$within&lt;/code&gt;, replacing it with &lt;code&gt;$geoWithin&lt;/code&gt;. Mongoose uses &lt;code&gt;$geoWithin&lt;/code&gt; by default (which is 100% backward compatible with &lt;code&gt;$within&lt;/code&gt;). If you are running an older version of MongoDB, set this flag to &lt;code&gt;false&lt;/code&gt; so your &lt;code&gt;within()&lt;/code&gt; queries continue to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397b694fa2ef397a7291048a06ed610492a4b8ea" translate="yes" xml:space="preserve">
          <source>MongoDB has the join-like &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/&quot;&gt;$lookup&lt;/a&gt; aggregation operator in versions &amp;gt;= 3.2. Mongoose has a more powerful alternative called &lt;code&gt;populate()&lt;/code&gt;, which lets you reference documents in other collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf1744af0a50b9ed7f3ece3909248dd0faada05" translate="yes" xml:space="preserve">
          <source>MongoDB replica sets rely on being able to reliably figure out the domain name for each member. On Linux and OSX, the MongoDB server uses the output of the &lt;a href=&quot;https://linux.die.net/man/1/hostname&quot;&gt;&lt;code&gt;hostname&lt;/code&gt; command&lt;/a&gt; to figure out the domain name to report to the replica set. This can cause confusing errors if you're connecting to a remote MongoDB replica set running on a machine that reports its &lt;code&gt;hostname&lt;/code&gt; as &lt;code&gt;localhost&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00a73a237616de3fa2e03bd97d46d864054b24a" translate="yes" xml:space="preserve">
          <source>MongoDB supports &lt;a href=&quot;http://docs.mongodb.org/manual/indexes/&quot;&gt;secondary indexes&lt;/a&gt;. With mongoose, we define these indexes within our &lt;code&gt;Schema&lt;/code&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-index&quot;&gt;at&lt;/a&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-unique&quot;&gt;the&lt;/a&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-sparse&quot;&gt;path&lt;/a&gt;&lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_date_SchemaDate-expires&quot;&gt;level&lt;/a&gt; or the &lt;code&gt;schema&lt;/code&gt; level. Defining indexes at the schema level is necessary when creating &lt;a href=&quot;https://docs.mongodb.com/manual/core/index-compound/&quot;&gt;compound indexes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307bddd3e357602be7e64df7c441d75d0a379439" translate="yes" xml:space="preserve">
          <source>MongoDB will update &lt;em&gt;only&lt;/em&gt; the first document that matches &lt;code&gt;filter&lt;/code&gt; regardless of the value of the &lt;code&gt;multi&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cdf050b555204753445dc298906db03ffa59aa" translate="yes" xml:space="preserve">
          <source>Mongoose</source>
          <target state="translated">Mongoose</target>
        </trans-unit>
        <trans-unit id="11ad3259e5a9dc0be72d93f919359805de417835" translate="yes" xml:space="preserve">
          <source>Mongoose 5 only casts the following values to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e37ffaa604aea698083ccb67c5372148cb509f" translate="yes" xml:space="preserve">
          <source>Mongoose 5.1.0 introduced an &lt;code&gt;_id&lt;/code&gt; getter to ObjectIds that lets you get an ObjectId regardless of whether a path is populated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45126139d09a1bc2ada807083839bd2c509b3733" translate="yes" xml:space="preserve">
          <source>Mongoose 5.7 uses MongoDB driver 3.3.x, which introduced a significant refactor of how it handles monitoring all the servers in a replica set or sharded cluster. In MongoDB parlance, this is known as &lt;a href=&quot;https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst&quot;&gt;server discovery and monitoring&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a205faf05484507a0c888c536f7e0a1d1200f1" translate="yes" xml:space="preserve">
          <source>Mongoose 5.x uses version 3.x of the &lt;a href=&quot;http://npmjs.com/package/mongodb&quot;&gt;MongoDB Node.js driver&lt;/a&gt;. MongoDB driver 3.x changed the format of the result of &lt;a href=&quot;http://localhost:8088/docs/api.html#model_Model.bulkWrite&quot;&gt;&lt;code&gt;bulkWrite()&lt;/code&gt; calls&lt;/a&gt; so there is no longer a top-level &lt;code&gt;nInserted&lt;/code&gt;, &lt;code&gt;nModified&lt;/code&gt;, etc. property. The new result object structure is &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#~BulkWriteOpResult&quot;&gt;described here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8e5c7bb41a750120363905c1ee32d386db314b" translate="yes" xml:space="preserve">
          <source>Mongoose &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document-js&quot;&gt;documents&lt;/a&gt; represent a one-to-one mapping to documents as stored in MongoDB. Each document is an instance of its &lt;a href=&quot;models&quot;&gt;Model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950dfe131083175e04414f714b31bf6c4b662419" translate="yes" xml:space="preserve">
          <source>Mongoose &lt;a href=&quot;models&quot;&gt;models&lt;/a&gt; provide several static helper functions for &lt;a href=&quot;https://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD operations&lt;/a&gt;. Each of these functions returns a &lt;a href=&quot;http://mongoosejs.com/docs/api.html#Query&quot;&gt;mongoose &lt;code&gt;Query&lt;/code&gt; object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55b95317ebd14f4180dec72d111c0369efc3bb3" translate="yes" xml:space="preserve">
          <source>Mongoose &lt;em&gt;only&lt;/em&gt; updates the version key when you use &lt;a href=&quot;https://mongoosejs.com/docs/api.html#document_Document-save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;. If you use &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;findOneAndUpdate()&lt;/code&gt;, etc. Mongoose will &lt;strong&gt;not&lt;/strong&gt; update the version key. As a workaround, you can use the below middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358895b6b0ba5648aeb3bd52a1f6ad787744dcaf" translate="yes" xml:space="preserve">
          <source>Mongoose Lean Virtuals plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0ef2b098a40e65e33b8963ae6c50cf7cc083d9" translate="yes" xml:space="preserve">
          <source>Mongoose Virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27be1f20709d4a32cf4b53c4dd364dfd5e01e78c" translate="yes" xml:space="preserve">
          <source>Mongoose also prevents changing immutable properties using &lt;code&gt;updateOne()&lt;/code&gt; and &lt;code&gt;updateMany()&lt;/code&gt; based on &lt;a href=&quot;../guide#strict&quot;&gt;strict mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8874d3f8db03696f09ad5a550daa28ef3038385a" translate="yes" xml:space="preserve">
          <source>Mongoose also runs setters on update operations, like &lt;a href=&quot;../api/query#query_Query-updateOne&quot;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt;. Mongoose will &lt;a href=&quot;https://masteringjs.io/tutorials/mongoose/upsert&quot;&gt;upsert a document&lt;/a&gt; with a lowercased &lt;code&gt;email&lt;/code&gt; in the below example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4032bb511b693d757310a7887e61151233e1a6" translate="yes" xml:space="preserve">
          <source>Mongoose also supports &lt;a href=&quot;../populate&quot;&gt;populating virtuals&lt;/a&gt;. A populated virtual contains documents from another collection. To define a populated virtual, you need to specify:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42bd52795e7c35d4ddb9156d360eded59ed2d56" translate="yes" xml:space="preserve">
          <source>Mongoose also supports limited validation on updates using the &lt;a href=&quot;validation#update-validators&quot;&gt;&lt;code&gt;runValidators&lt;/code&gt; option&lt;/a&gt;. Mongoose casts parameters to query functions like &lt;code&gt;findOne()&lt;/code&gt;, &lt;code&gt;updateOne()&lt;/code&gt; by default. However, Mongoose does &lt;em&gt;not&lt;/em&gt; run validation on query function parameters by default. You need to set &lt;code&gt;runValidators: true&lt;/code&gt; for Mongoose to validate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca713df1a98b54a0ae10c9c401d9db5d2b9e42b1" translate="yes" xml:space="preserve">
          <source>Mongoose always validates each document &lt;strong&gt;before&lt;/strong&gt; sending &lt;code&gt;insertMany&lt;/code&gt; to MongoDB. So if one document has a validation error, no documents will be saved, unless you set &lt;a href=&quot;https://docs.mongodb.com/manual/reference/method/db.collection.insertMany/#error-handling&quot;&gt;the &lt;code&gt;ordered&lt;/code&gt; option to false&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d999f569c9a7fdef8584c108da8f8b917f85106" translate="yes" xml:space="preserve">
          <source>Mongoose assigns each of your schemas an &lt;code&gt;_id&lt;/code&gt; field by default if one is not passed into the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema-js&quot;&gt;Schema&lt;/a&gt; constructor. The type assigned is an &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema.Types&quot;&gt;ObjectId&lt;/a&gt; to coincide with MongoDB's default behavior. If you don't want an &lt;code&gt;_id&lt;/code&gt; added to your schema at all, you may disable it using this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547cbefc53b2c897c835263eead53b56bb1ebdcf" translate="yes" xml:space="preserve">
          <source>Mongoose assigns each of your schemas an &lt;code&gt;id&lt;/code&gt; virtual getter by default which returns the documents &lt;code&gt;_id&lt;/code&gt; field cast to a string, or in the case of ObjectIds, its hexString. If you don't want an &lt;code&gt;id&lt;/code&gt; getter added to your schema, you may disable it passing this option at schema construction time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a74209e1a64c53e61f3f326b5e889afdc2793b" translate="yes" xml:space="preserve">
          <source>Mongoose async operations, like &lt;code&gt;.save()&lt;/code&gt; and queries, return thenables. This means that you can do things like &lt;code&gt;MyModel.findOne({}).then()&lt;/code&gt; and &lt;code&gt;await MyModel.findOne({}).exec()&lt;/code&gt; if you're using &lt;a href=&quot;http://thecodebarbarian.com/80-20-guide-to-async-await-in-node.js.html&quot;&gt;async/await&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9aef939319d681b6ded82fce0851cf3969c3d25" translate="yes" xml:space="preserve">
          <source>Mongoose by default produces a collection name by passing the model name to the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#utils_exports.toCollectionName&quot;&gt;utils.toCollectionName&lt;/a&gt; method. This method pluralizes the name. Set this option if you need a different name for your collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291d9036112d19b15d31bcca14b569c157c5ffad" translate="yes" xml:space="preserve">
          <source>Mongoose calls the getter function with 3 parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a263934e517782b1dcee5dfbf3c05535b6b44c5" translate="yes" xml:space="preserve">
          <source>Mongoose calls the setter function with 3 parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519c1a4bb547f398cf4e1334380ed949cf64a488" translate="yes" xml:space="preserve">
          <source>Mongoose calls this function automatically when a model is created using &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-model&quot;&gt;&lt;code&gt;mongoose.model()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://mongoosejs.com/docs/api.html#connection_Connection-model&quot;&gt;&lt;code&gt;connection.model()&lt;/code&gt;&lt;/a&gt;, so you don't need to call it. This function is also idempotent, so you may call it to get back a promise that will resolve when your indexes are finished building as an alternative to &lt;a href=&quot;../guide#indexes&quot;&gt;&lt;code&gt;MyModel.on('index')&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f031c0f90d7fd9675f5a6f7ce5a912f33211132e" translate="yes" xml:space="preserve">
          <source>Mongoose can also be extended with &lt;a href=&quot;customschematypes&quot;&gt;custom SchemaTypes&lt;/a&gt;. Search the &lt;a href=&quot;http://plugins.mongoosejs.io&quot;&gt;plugins&lt;/a&gt; site for compatible types like &lt;a href=&quot;https://github.com/aheckmann/mongoose-long&quot;&gt;mongoose-long&lt;/a&gt;, &lt;a href=&quot;https://github.com/vkarpov15/mongoose-int32&quot;&gt;mongoose-int32&lt;/a&gt;, and &lt;a href=&quot;https://github.com/aheckmann/mongoose-function&quot;&gt;other&lt;/a&gt;&lt;a href=&quot;https://github.com/OpenifyIt/mongoose-types&quot;&gt;types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bb095643ffc34365e7130c824cc4dd87ec6104" translate="yes" xml:space="preserve">
          <source>Mongoose can also populate from multiple collections based on the value of a property in the document. Let's say you're building a schema for storing comments. A user may comment on either a blog post or a product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9fb7375ad206570385e668ab7be6a46ed1370b" translate="yes" xml:space="preserve">
          <source>Mongoose casts the below values to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f27d5ab3ddc27049c30d88a5750ed9360d37a1" translate="yes" xml:space="preserve">
          <source>Mongoose casts values and runs setters when using update. The following features are &lt;strong&gt;not&lt;/strong&gt; applied by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0709851b206922df4f7d102b2fb125f9f4206f" translate="yes" xml:space="preserve">
          <source>Mongoose constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1139b69a1bcde7da54c89331f7e98dd62eb1fae8" translate="yes" xml:space="preserve">
          <source>Mongoose creates a &lt;em&gt;default connection&lt;/em&gt; when you call &lt;code&gt;mongoose.connect()&lt;/code&gt;. You can access the default connection using &lt;code&gt;mongoose.connection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d9cddcca714433fd06ba38ed244bfd148cbb46" translate="yes" xml:space="preserve">
          <source>Mongoose documents track changes. You can modify a document using vanilla JavaScript assignments and Mongoose will convert it into &lt;a href=&quot;https://docs.mongodb.com/manual/reference/operator/update/&quot;&gt;MongoDB update operators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ee71d343d9a32dfec378d708fdee5357c9a0da" translate="yes" xml:space="preserve">
          <source>Mongoose does &lt;strong&gt;not&lt;/strong&gt; cast aggregation pipelines to the model's schema because &lt;code&gt;$project&lt;/code&gt; and &lt;code&gt;$group&lt;/code&gt; operators allow redefining the &quot;shape&quot; of the documents at any stage of the pipeline, which may leave documents in an incompatible format. You can use the &lt;a href=&quot;https://github.com/AbdelrahmanHafez/mongoose-cast-aggregation&quot;&gt;mongoose-cast-aggregation plugin&lt;/a&gt; to enable minimal casting for aggregation pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182e6e779a195bef3fc973edd1af2bad6c04d3d4" translate="yes" xml:space="preserve">
          <source>Mongoose does &lt;strong&gt;not&lt;/strong&gt; cast pipeline stages. The below will &lt;strong&gt;not&lt;/strong&gt; work unless &lt;code&gt;_id&lt;/code&gt; is a string in the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c845b089ab5eedb88bfeeda8b26e59a38ca322" translate="yes" xml:space="preserve">
          <source>Mongoose executed the query and passed the results passed to &lt;code&gt;callback&lt;/code&gt;. All callbacks in Mongoose use the pattern: &lt;code&gt;callback(error, result)&lt;/code&gt;. If an error occurs executing the query, the &lt;code&gt;error&lt;/code&gt; parameter will contain an error document, and &lt;code&gt;result&lt;/code&gt; will be null. If the query is successful, the &lt;code&gt;error&lt;/code&gt; parameter will be null, and the &lt;code&gt;result&lt;/code&gt; will be populated with the results of the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b7bce9c4ab48913fc78b10d0ac69f18e57024f" translate="yes" xml:space="preserve">
          <source>Mongoose getters and setters allow you to execute custom logic when getting or setting a property on a &lt;a href=&quot;../documents&quot;&gt;Mongoose document&lt;/a&gt;. Getters let you transform data in MongoDB into a more user friendly form, and setters let you transform user data before it gets to MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64370fb1b100a95fe2fdd8b9e7835f31e287a996" translate="yes" xml:space="preserve">
          <source>Mongoose has 4 types of middleware: document middleware, model middleware, aggregate middleware, and query middleware. Document middleware is supported for the following document functions. In document middleware functions, &lt;code&gt;this&lt;/code&gt; refers to the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18c4a9219e41bf2b6f5bb404354a4a84746ec96" translate="yes" xml:space="preserve">
          <source>Mongoose has a separate &lt;code&gt;strictQuery&lt;/code&gt; option to toggle strict mode for the &lt;code&gt;filter&lt;/code&gt; parameter to queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1de74f391193bcac8c364d26c5f691928aba5b" translate="yes" xml:space="preserve">
          <source>Mongoose has both query and document hooks for &lt;code&gt;remove()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b579dff76aa2f6f8af2c20224aea2c0087859b0" translate="yes" xml:space="preserve">
          <source>Mongoose has several built-in validators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bb67e1790823e8a743629db5cc4c3c5ec91745" translate="yes" xml:space="preserve">
          <source>Mongoose lets you start using your models immediately, without waiting for mongoose to establish a connection to MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f064431faf3e3409878a5ec46a1408687f13458" translate="yes" xml:space="preserve">
          <source>Mongoose maintains a separate object for internal options because Mongoose sends &lt;code&gt;Query.prototype.options&lt;/code&gt; to the MongoDB server, and the above options are not relevant for the MongoDB server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fba3ddf01e958d8c62e1ac8aa7fc5178d011db1" translate="yes" xml:space="preserve">
          <source>Mongoose now requires Node.js &amp;gt;= 4.0.0 and MongoDB &amp;gt;= 3.0.0. &lt;a href=&quot;https://www.mongodb.com/blog/post/mongodb-2-6-end-of-life&quot;&gt;MongoDB 2.6&lt;/a&gt; and &lt;a href=&quot;https://github.com/nodejs/Release&quot;&gt;Node.js &amp;lt; 4&lt;/a&gt; where both EOL-ed in 2016.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f96e76749becdbdaddf08938f949abfc7410d62" translate="yes" xml:space="preserve">
          <source>Mongoose populate doesn't behave like conventional &lt;a href=&quot;https://www.w3schools.com/sql/sql_join.asp&quot;&gt;SQL joins&lt;/a&gt;. When there's no document, &lt;code&gt;story.author&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. This is analogous to a &lt;a href=&quot;https://www.w3schools.com/sql/sql_join_left.asp&quot;&gt;left join&lt;/a&gt; in SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046827c4e281a784ee97cbad875512e870b2cc3a" translate="yes" xml:space="preserve">
          <source>Mongoose queries are &lt;strong&gt;not&lt;/strong&gt; promises. They have a &lt;code&gt;.then()&lt;/code&gt; function for &lt;a href=&quot;https://www.npmjs.com/package/co&quot;&gt;co&lt;/a&gt; and &lt;a href=&quot;http://thecodebarbarian.com/common-async-await-design-patterns-in-node.js.html&quot;&gt;async/await&lt;/a&gt; as a convenience. However, unlike promises, calling a query's &lt;code&gt;.then()&lt;/code&gt; can execute the query multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91079f11958dea713b49415629260206580eff62" translate="yes" xml:space="preserve">
          <source>Mongoose query &lt;a href=&quot;#query_Query-select&quot;&gt;selection syntax&lt;/a&gt; is also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab64691521ca0e3ef0482df98b45f217f4ee330" translate="yes" xml:space="preserve">
          <source>Mongoose setters are different from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set&quot;&gt;ES6 setters&lt;/a&gt; because they allow you to transform the value being set. With ES6 setters, you would need to store an internal &lt;code&gt;_email&lt;/code&gt; property to use a setter. With Mongoose, you do &lt;strong&gt;not&lt;/strong&gt; need to define an internal &lt;code&gt;_email&lt;/code&gt; property or define a corresponding getter for &lt;code&gt;email&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0649d2591e37c6888acdff69099041f785f019d9" translate="yes" xml:space="preserve">
          <source>Mongoose supports MongoDBs &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Capped+Collections&quot;&gt;capped&lt;/a&gt; collections. To specify the underlying MongoDB collection be &lt;code&gt;capped&lt;/code&gt;, set the &lt;code&gt;capped&lt;/code&gt; option to the maximum size of the collection in &lt;a href=&quot;http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-size.&quot;&gt;bytes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a914bf8ce65d2dec14714e9104e2c55262212903" translate="yes" xml:space="preserve">
          <source>Mongoose supports arrays of &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema.Types&quot;&gt;SchemaTypes&lt;/a&gt; and arrays of &lt;a href=&quot;subdocs&quot;&gt;subdocuments&lt;/a&gt;. Arrays of SchemaTypes are also called &lt;em&gt;primitive arrays&lt;/em&gt;, and arrays of subdocuments are also called &lt;em&gt;document arrays&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c440059c1bce6b286bd19bbcf5e7ae925726d7" translate="yes" xml:space="preserve">
          <source>Mongoose supports validators that return a promise. A validator that returns a promise is called an &lt;em&gt;async validator&lt;/em&gt;. Async validators run in parallel, and &lt;code&gt;validate()&lt;/code&gt; will wait until all async validators have settled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd868ce8f60bf567bea8744ba89e78b0e73c0708" translate="yes" xml:space="preserve">
          <source>Mongoose uses this function to get the current time when setting &lt;a href=&quot;../guide#timestamps&quot;&gt;timestamps&lt;/a&gt;. You may stub out this function using a tool like &lt;a href=&quot;https://www.npmjs.com/package/sinon&quot;&gt;Sinon&lt;/a&gt; for testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e2574b650edba45cc55356676e167267d4a22e" translate="yes" xml:space="preserve">
          <source>Mongoose virtuals are &lt;strong&gt;not&lt;/strong&gt; stored in MongoDB, which means you can't query based on Mongoose virtuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d620c854ddb9a73472282d2811622caf2514bb" translate="yes" xml:space="preserve">
          <source>Mongoose will emit an &lt;code&gt;index&lt;/code&gt; event on the model when indexes are done building or an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631e263a5c83a465f18a52c6ca20f9dcf728ee5d" translate="yes" xml:space="preserve">
          <source>Mongoose will perform casting on all operations you provide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3639543292dd9d0e3664a211c4c8bd757a6997bf" translate="yes" xml:space="preserve">
          <source>Mongoose will successfully cast the below values to buffers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d67c528c1337ed8fa2aa6c5150b30abaeea6f06" translate="yes" xml:space="preserve">
          <source>Mongoose will, by default, &quot;minimize&quot; schemas by removing empty objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a68a6e7c3d91ac547b3965c74a610f1afc41b1f" translate="yes" xml:space="preserve">
          <source>Mongoose's &lt;code&gt;findOneAndUpdate()&lt;/code&gt; long pre-dates the MongoDB driver's &lt;code&gt;findOneAndUpdate()&lt;/code&gt; function, so it uses the MongoDB driver's &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/api/Collection.html#findAndModify&quot;&gt;&lt;code&gt;findAndModify()&lt;/code&gt; function&lt;/a&gt; instead. You can opt in to using the MongoDB driver's &lt;code&gt;findOneAndUpdate()&lt;/code&gt; function using the &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoose_Mongoose-set&quot;&gt;&lt;code&gt;useFindAndModify&lt;/code&gt; global option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc402f52c4971e42523130b34768b933a7823ca5" translate="yes" xml:space="preserve">
          <source>Mongoose()</source>
          <target state="translated">Mongoose()</target>
        </trans-unit>
        <trans-unit id="06dee13c0537ee2c7153e7890f9339bdc26988f5" translate="yes" xml:space="preserve">
          <source>Mongoose-specific options are different from normal options (&lt;code&gt;sort&lt;/code&gt;, &lt;code&gt;limit&lt;/code&gt;, etc.) because they are &lt;strong&gt;not&lt;/strong&gt; sent to the MongoDB server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9bb536d56baa0b05cba36a8734d8eec08dd7bd" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Aggregate()</source>
          <target state="translated">Mongoose.prototype.Aggregate()</target>
        </trans-unit>
        <trans-unit id="0d65ff65487e882701cd089bc035d30f53ea741a" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.CastError()</source>
          <target state="translated">Mongoose.prototype.CastError()</target>
        </trans-unit>
        <trans-unit id="1c26b49a160c611cfd3d974aa69030cd6c45ada6" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Collection()</source>
          <target state="translated">Mongoose.prototype.Collection()</target>
        </trans-unit>
        <trans-unit id="d5a52be5cdf43cf2d9471db0364ccbfcbce0f955" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Connection()</source>
          <target state="translated">Mongoose.prototype.Connection()</target>
        </trans-unit>
        <trans-unit id="9d073155b7f8319fb4a0627c8e27f79b295e0e2f" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Decimal128</source>
          <target state="translated">Mongoose.prototype.Decimal128</target>
        </trans-unit>
        <trans-unit id="2fe45b782a6d9738b8f4cd419e99dbf4b668877f" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Document()</source>
          <target state="translated">Mongoose.prototype.Document()</target>
        </trans-unit>
        <trans-unit id="b9a1572ef65f87d486c11efb34d0153c0eec0e6a" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.DocumentProvider()</source>
          <target state="translated">Mongoose.prototype.DocumentProvider()</target>
        </trans-unit>
        <trans-unit id="7c41f11354c6864f3d3eb24833fbe39b1006db51" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Error()</source>
          <target state="translated">Mongoose.prototype.Error()</target>
        </trans-unit>
        <trans-unit id="bc8ec8ace4b98f0a6830d4c8af2b5d81a74b3819" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Mixed</source>
          <target state="translated">Mongoose.prototype.Mixed</target>
        </trans-unit>
        <trans-unit id="7cdfc7e07f5e0f9fb3111674ba4bc8ab07cb6e52" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Model()</source>
          <target state="translated">Mongoose.prototype.Model()</target>
        </trans-unit>
        <trans-unit id="009822bf077a2e4f2c91b9cd87b588e707cb0a03" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Mongoose()</source>
          <target state="translated">Mongoose.prototype.Mongoose()</target>
        </trans-unit>
        <trans-unit id="08bcb4f48ac28f4a1517becf78034a7483f7f68b" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Number</source>
          <target state="translated">Mongoose.prototype.Number</target>
        </trans-unit>
        <trans-unit id="620a79d60672f7f6744488058648bbf34f891266" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.ObjectId</source>
          <target state="translated">Mongoose.prototype.ObjectId</target>
        </trans-unit>
        <trans-unit id="9b7df17786ac458f95cb1b4baaa035dc4ad95b08" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Promise</source>
          <target state="translated">Mongoose.prototype.Promise</target>
        </trans-unit>
        <trans-unit id="805450cf58c4ac6cf851156e10271f85ac886019" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.PromiseProvider()</source>
          <target state="translated">Mongoose.prototype.PromiseProvider()</target>
        </trans-unit>
        <trans-unit id="c095b43e93157b052c67dd1deb4c539e253c0d1c" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Query()</source>
          <target state="translated">Mongoose.prototype.Query()</target>
        </trans-unit>
        <trans-unit id="184e45c6c8b88daa701271de8b7881dc2530581c" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.STATES</source>
          <target state="translated">Mongoose.prototype.STATES</target>
        </trans-unit>
        <trans-unit id="4db2614a0049f3e0cc9c97c5b2877d16c52fa292" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Schema()</source>
          <target state="translated">Mongoose.prototype.Schema()</target>
        </trans-unit>
        <trans-unit id="6590ef9e6af493bbda2aa3f133b3f6390b501456" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.SchemaType()</source>
          <target state="translated">Mongoose.prototype.SchemaType()</target>
        </trans-unit>
        <trans-unit id="13bd57e5424250930683eba533fe5464605ce627" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.SchemaTypeOptions()</source>
          <target state="translated">Mongoose.prototype.SchemaTypeOptions()</target>
        </trans-unit>
        <trans-unit id="93b8ac296f29f52221867d401a855bdffc74da2b" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.SchemaTypes</source>
          <target state="translated">Mongoose.prototype.SchemaTypes</target>
        </trans-unit>
        <trans-unit id="315785b499e019d94769b89d7b7d02980e329681" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.Types</source>
          <target state="translated">Mongoose.prototype.Types</target>
        </trans-unit>
        <trans-unit id="13214768e011cb7f6087d6c23e392a926a6747e6" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.VirtualType()</source>
          <target state="translated">Mongoose.prototype.VirtualType()</target>
        </trans-unit>
        <trans-unit id="b57bda770eb613d68d85ce3117681fa6670bc7aa" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.connect()</source>
          <target state="translated">Mongoose.prototype.connect()</target>
        </trans-unit>
        <trans-unit id="a78c756583091b39d61b38f047c7a31f012fd669" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.connection</source>
          <target state="translated">Mongoose.prototype.connection</target>
        </trans-unit>
        <trans-unit id="ecb86d15651b2ad6d74050022abca1117b6b7c74" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.connections</source>
          <target state="translated">Mongoose.prototype.connections</target>
        </trans-unit>
        <trans-unit id="d9e89ddc27c6e257524ee8a62737fd94edf9ac50" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.createConnection()</source>
          <target state="translated">Mongoose.prototype.createConnection()</target>
        </trans-unit>
        <trans-unit id="b82efe9e7db9741ed96dced82060636408bcc967" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.deleteModel()</source>
          <target state="translated">Mongoose.prototype.deleteModel()</target>
        </trans-unit>
        <trans-unit id="8d6185a987b5a05a05a8de4e0ae2a28740e160d5" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.disconnect()</source>
          <target state="translated">Mongoose.prototype.disconnect()</target>
        </trans-unit>
        <trans-unit id="e3f3f348d1ba866a809805656c8cbfdddb898cec" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.driver</source>
          <target state="translated">Mongoose.prototype.driver</target>
        </trans-unit>
        <trans-unit id="c017daead688d3b249d48417629175073abe0f96" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.get()</source>
          <target state="translated">Mongoose.prototype.get()</target>
        </trans-unit>
        <trans-unit id="995092060ab910af396fb3a0c5e78cb127ce88b9" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.isValidObjectId()</source>
          <target state="translated">Mongoose.prototype.isValidObjectId()</target>
        </trans-unit>
        <trans-unit id="a30b0d5785ee7c13553ffe80d0378a3e8ecc6348" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.model()</source>
          <target state="translated">Mongoose.prototype.model()</target>
        </trans-unit>
        <trans-unit id="4fb5a0d3758b00c4e2d5fbb5615229a59b23e981" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.modelNames()</source>
          <target state="translated">Mongoose.prototype.modelNames()</target>
        </trans-unit>
        <trans-unit id="24bec465d8b631ef714e3d1b1c446988e4fc608e" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.mongo</source>
          <target state="translated">Mongoose.prototype.mongo</target>
        </trans-unit>
        <trans-unit id="146e42a6d3d1f4fefb948e4daa9079a7a9d0f789" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.mquery</source>
          <target state="translated">Mongoose.prototype.mquery</target>
        </trans-unit>
        <trans-unit id="60efb478c5362b1e3d7c3d55ae65f498b0fd01e9" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.now()</source>
          <target state="translated">Mongoose.prototype.now()</target>
        </trans-unit>
        <trans-unit id="ea62b889e4a8584c37251aa8fe3c2b3d871387a2" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.plugin()</source>
          <target state="translated">Mongoose.prototype.plugin()</target>
        </trans-unit>
        <trans-unit id="398da394f159784091a710c115e7bc65371f4492" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.pluralize()</source>
          <target state="translated">Mongoose.prototype.pluralize()</target>
        </trans-unit>
        <trans-unit id="d642e37ff4ddb63b22f850a8931a411abff8da45" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.set()</source>
          <target state="translated">Mongoose.prototype.set()</target>
        </trans-unit>
        <trans-unit id="020411f7a5c6b67c784ca3171c6e012372bc72ae" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.startSession()</source>
          <target state="translated">Mongoose.prototype.startSession()</target>
        </trans-unit>
        <trans-unit id="e2bc6559758a77086cd35eb5075bb1c84d7dd134" translate="yes" xml:space="preserve">
          <source>Mongoose.prototype.version</source>
          <target state="translated">Mongoose.prototype.version</target>
        </trans-unit>
        <trans-unit id="424a85540f90a87786e9c206aac5a78dd0ee7191" translate="yes" xml:space="preserve">
          <source>MongooseArray</source>
          <target state="translated">MongooseArray</target>
        </trans-unit>
        <trans-unit id="a6bc9c645cf374561e0bbcf2483203c23c8b394c" translate="yes" xml:space="preserve">
          <source>MongooseArray methods such as &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoosearray_MongooseArray-push&quot;&gt;push&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoosearray_MongooseArray-unshift&quot;&gt;unshift&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongoosearray_MongooseArray-addToSet&quot;&gt;addToSet&lt;/a&gt;, and others cast arguments to their proper types transparently:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b6431b2b53671bce62710589b7cf99dca7327d" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.$pop()</source>
          <target state="translated">MongooseArray.prototype.$pop()</target>
        </trans-unit>
        <trans-unit id="43b874297a5ff20aeb6eb0b95ff5cd2ae900277c" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.$shift()</source>
          <target state="translated">MongooseArray.prototype.$shift()</target>
        </trans-unit>
        <trans-unit id="b0521244cd5c29df884c91123a2c3c39db9b7a87" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.addToSet()</source>
          <target state="translated">MongooseArray.prototype.addToSet()</target>
        </trans-unit>
        <trans-unit id="f27bf8b6c61dc183bf24f817013bf51292378ecd" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.includes()</source>
          <target state="translated">MongooseArray.prototype.includes()</target>
        </trans-unit>
        <trans-unit id="9944750d8d03c535b254c72cd33006c8570e8a7e" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.indexOf()</source>
          <target state="translated">MongooseArray.prototype.indexOf()</target>
        </trans-unit>
        <trans-unit id="aa6c3f1c0c35c27bda7a84f7e1ef3b759233de29" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.inspect()</source>
          <target state="translated">MongooseArray.prototype.inspect()</target>
        </trans-unit>
        <trans-unit id="99ae728ca374a140d63706ca6237824118019a01" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.nonAtomicPush()</source>
          <target state="translated">MongooseArray.prototype.nonAtomicPush()</target>
        </trans-unit>
        <trans-unit id="cc0ad5bb65d6c2c3ed723361424fe28898617ba1" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.pop()</source>
          <target state="translated">MongooseArray.prototype.pop()</target>
        </trans-unit>
        <trans-unit id="9bd73068cddac7b7d1b626d7da56ed612783da0e" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.pull()</source>
          <target state="translated">MongooseArray.prototype.pull()</target>
        </trans-unit>
        <trans-unit id="73ee900874bbeae80de9789c734307c8063bbb1f" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.push()</source>
          <target state="translated">MongooseArray.prototype.push()</target>
        </trans-unit>
        <trans-unit id="65c67103b9385affc82fe0f8b9aabd4872554130" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.remove()</source>
          <target state="translated">MongooseArray.prototype.remove()</target>
        </trans-unit>
        <trans-unit id="fbcb52e3411ff5218c5d93887b3e8a241bf6e0ec" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.set()</source>
          <target state="translated">MongooseArray.prototype.set()</target>
        </trans-unit>
        <trans-unit id="29a467e52f49c07916b97befbdbffe3845e6d956" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.shift()</source>
          <target state="translated">MongooseArray.prototype.shift()</target>
        </trans-unit>
        <trans-unit id="190d23119cdfa2df4bfc146b83308ef8a78c92f4" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.sort()</source>
          <target state="translated">MongooseArray.prototype.sort()</target>
        </trans-unit>
        <trans-unit id="3572aea6a66e93cfc2971f21290cf13aa1dd79ee" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.splice()</source>
          <target state="translated">MongooseArray.prototype.splice()</target>
        </trans-unit>
        <trans-unit id="a33440ee90f6da7508ca6435db6e7d357f47719c" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.toObject()</source>
          <target state="translated">MongooseArray.prototype.toObject()</target>
        </trans-unit>
        <trans-unit id="5d9b78390de797cf26829431a82195861920df87" translate="yes" xml:space="preserve">
          <source>MongooseArray.prototype.unshift()</source>
          <target state="translated">MongooseArray.prototype.unshift()</target>
        </trans-unit>
        <trans-unit id="7414d36fbccb1dc0f5d6b57141e67411d907cf33" translate="yes" xml:space="preserve">
          <source>MongooseError constructor. MongooseError is the base class for all Mongoose-specific errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3eaec74c9e3333ecd457b8b91ff97de0ce7d477" translate="yes" xml:space="preserve">
          <source>Multi-mongos support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4e5a794e4725d629a9de0259af298141f5817d" translate="yes" xml:space="preserve">
          <source>Multiple connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6abbe86b9a3dd54d847c73d2fcb02c7646f939" translate="yes" xml:space="preserve">
          <source>NOTE:</source>
          <target state="translated">NOTE:</target>
        </trans-unit>
        <trans-unit id="58aad4256b5025725d7ac7ff0fdf2908fd9768c0" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;Schema.method()&lt;/code&gt; adds instance methods to the &lt;code&gt;Schema.methods&lt;/code&gt; object. You can also add instance methods directly to the &lt;code&gt;Schema.methods&lt;/code&gt; object as seen in the &lt;a href=&quot;guide#methods&quot;&gt;guide&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9023c650e7807fb849b4f369adbbd6ee78269169" translate="yes" xml:space="preserve">
          <source>NaN, strings that cast to NaN, arrays, and objects that don't have a &lt;code&gt;valueOf()&lt;/code&gt; function will all result in a &lt;a href=&quot;https://mongoosejs.com/docs/api.html#mongooseerror_MongooseError.CastError&quot;&gt;CastError&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068cce51e674f75b04510b1740e62adb212d7a21" translate="yes" xml:space="preserve">
          <source>Naming Conflicts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7db1eb0f43a14d8f10b4c020223cf55e428e48c" translate="yes" xml:space="preserve">
          <source>New in 4.8.0: update validators also run on &lt;code&gt;$push&lt;/code&gt; and &lt;code&gt;$addToSet&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9271829b7ae1dd2687ecf09e4074f0144fadc686" translate="yes" xml:space="preserve">
          <source>Next Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef51d8fa179498ed7fdd1015afa699c81609e559" translate="yes" xml:space="preserve">
          <source>Next install Mongoose from the command line using &lt;code&gt;npm&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274a7fbce6660bca9d3acce26b84fd29e8bea39a" translate="yes" xml:space="preserve">
          <source>Node.js 10.x supports async iterators natively without any flags. You can enable async iterators in Node.js 8.x using the &lt;a href=&quot;https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187&quot;&gt;&lt;code&gt;--harmony_async_iteration&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b60aad6608a5437a46374237a811cbb9e0216f" translate="yes" xml:space="preserve">
          <source>Not only can you re-use schema functionality in your own projects, but you also reap the benefits of the Mongoose community as well. Any plugin published to &lt;a href=&quot;https://npmjs.org/&quot;&gt;npm&lt;/a&gt; and with 'mongoose' as an &lt;a href=&quot;https://docs.npmjs.com/files/package.json#keywords&quot;&gt;npm keyword&lt;/a&gt; will show up on our &lt;a href=&quot;http://plugins.mongoosejs.io&quot;&gt;search results&lt;/a&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad15c7647b06241e384139edc0ed1498939d061" translate="yes" xml:space="preserve">
          <source>Not typically needed by applications. Just talk to your collection through your model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="614d365905db19c5827df4934b6a9ba244a4838c" translate="yes" xml:space="preserve">
          <source>Note 1: You may need to call this before starting a transaction See &lt;a href=&quot;https://docs.mongodb.com/manual/core/transactions/#transactions-and-operations&quot;&gt;https://docs.mongodb.com/manual/core/transactions/#transactions-and-operations&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f585dcf005428c2463a5e4e29987aecebb5aa404" translate="yes" xml:space="preserve">
          <source>Note 2: You don't have to call this if your schema contains index or unique field. In that case, just use &lt;code&gt;Model.init()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922d62d7d23f9d3636489a425b872be1450aa26a" translate="yes" xml:space="preserve">
          <source>Note that MongoDB aggregations &lt;a href=&quot;https://jira.mongodb.org/browse/SERVER-6036&quot;&gt;do &lt;strong&gt;not&lt;/strong&gt; support the &lt;code&gt;noCursorTimeout&lt;/code&gt; flag&lt;/a&gt;, if you try setting that flag with this function you will get a &quot;unrecognized field 'noCursorTimeout'&quot; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a42b0791228f7413d609a07bcee3da0992b4e33" translate="yes" xml:space="preserve">
          <source>Note that Mongoose versioning is &lt;strong&gt;not&lt;/strong&gt; a full &lt;a href=&quot;https://en.wikipedia.org/wiki/Optimistic_concurrency_control&quot;&gt;optimistic concurrency&lt;/a&gt; solution. Use &lt;a href=&quot;https://github.com/eoin-obrien/mongoose-update-if-current&quot;&gt;mongoose-update-if-current&lt;/a&gt; for OCC support. Mongoose versioning only operates on arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20debcfc5aa78b22ad0f9bede168f052810b4a76" translate="yes" xml:space="preserve">
          <source>Note that graphLookup can only consume at most 100MB of memory, and does not allow disk use even if &lt;code&gt;{ allowDiskUse: true }&lt;/code&gt; is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2a4f4eeee67df62a8648abfa1862fbdc6d6220" translate="yes" xml:space="preserve">
          <source>Note that no tanks will be created/removed until the connection your model uses is open. Every model has an associated connection. When you use &lt;code&gt;mongoose.model()&lt;/code&gt;, your model will use the default mongoose connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4766a22eeccc8f9754cf33658436111465633277" translate="yes" xml:space="preserve">
          <source>Note that query casting runs &lt;strong&gt;after&lt;/strong&gt; hooks, so cast errors will override custom errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba0ae9646380679cac2f4ba16229d2cd8e1ead9" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;$replaceRoot&lt;/code&gt; operator requires field strings to start with '$'. If you are passing in a string Mongoose will prepend '$' if the specified field doesn't start '$'. If you are passing in an object the strings in your expression will not be altered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5ab1897539c173c59fef6b84774e33f367148b" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;$sortByCount&lt;/code&gt; operator requires the new root to start with '$'. Mongoose will prepend '$' if the specified field name doesn't start with '$'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5077b79ef6e3902675eed026942d95564c7b89da" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;$unwind&lt;/code&gt; operator requires the path name to start with '$'. Mongoose will prepend '$' if the specified field doesn't start '$'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5867ea072154458ec266787d7a19f36cde0b55c4" translate="yes" xml:space="preserve">
          <source>Note that this is behavior is different for transforms defined in the schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876e0d3ca84bf68977abee573c39461c04fbd1ea" translate="yes" xml:space="preserve">
          <source>Note that you can call &lt;code&gt;mongoose.set('objectIdGetter', false)&lt;/code&gt; to change this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="5eadc5a62da8c84d93dff642490b85c3a044e60d" translate="yes" xml:space="preserve">
          <source>Note: Mongoose only applies a default if the value of the path is strictly &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b2066030e366fb1e362604aa44d0fd2e3e44e4" translate="yes" xml:space="preserve">
          <source>Note: specifying an empty array is equivalent to &lt;code&gt;Mixed&lt;/code&gt;. The following all create arrays of &lt;code&gt;Mixed&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b535c4b3a791a317458a3ca35c49fb551dbd6a0d" translate="yes" xml:space="preserve">
          <source>Notes on findAndUpdate() and Query Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b3b1fa3d3d4513692e4be76278a04d32247a10" translate="yes" xml:space="preserve">
          <source>Notice above that if a property only requires a type, it can be specified using a shorthand notation (contrast the &lt;code&gt;title&lt;/code&gt; property above with the &lt;code&gt;date&lt;/code&gt; property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d1b4372916bdb8c42e62556506e9e0d370e377" translate="yes" xml:space="preserve">
          <source>Now all of our &lt;code&gt;animal&lt;/code&gt; instances have a &lt;code&gt;findSimilarTypes&lt;/code&gt; method available to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d756983f62395eafb914a3ba52a2b50dc505aa8" translate="yes" xml:space="preserve">
          <source>Now let's look at what happens when no &lt;code&gt;callback&lt;/code&gt; is passed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2937648a63fa9fe83503c87bbf8b9e78e2b148f0" translate="yes" xml:space="preserve">
          <source>Now say we like fuzzy kittens and want to record every kitten we ever meet in MongoDB. The first thing we need to do is include mongoose in our project and open a connection to the &lt;code&gt;test&lt;/code&gt; database on our locally running instance of MongoDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6be44b599f146c68a47a4b535721529bd0676e" translate="yes" xml:space="preserve">
          <source>Now that we've covered &lt;code&gt;Models&lt;/code&gt;, let's take a look at &lt;a href=&quot;documents&quot;&gt;Documents&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd4829959a210a6bfd5de491a337b4a3bf98021" translate="yes" xml:space="preserve">
          <source>Now that we've covered &lt;code&gt;Queries&lt;/code&gt;, let's take a look at &lt;a href=&quot;validation&quot;&gt;Validation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f209b163f40434bd05ff5c18ae97ed236efe88b" translate="yes" xml:space="preserve">
          <source>Now that we've covered &lt;code&gt;SchemaTypes&lt;/code&gt;, let's take a look at &lt;a href=&quot;connections&quot;&gt;Connections&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec0677849e42ab4cad1959d7814a4dcd31fcd23" translate="yes" xml:space="preserve">
          <source>Now that we've covered &lt;code&gt;Schemas&lt;/code&gt;, let's take a look at &lt;a href=&quot;schematypes&quot;&gt;SchemaTypes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34ec5e08687a6a57b2075e7ac5a4c3f9df93dd6" translate="yes" xml:space="preserve">
          <source>Now that we've covered &lt;code&gt;populate()&lt;/code&gt;, let's take a look at &lt;a href=&quot;discriminators&quot;&gt;discriminators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed6c4f58e1293867996c1ef10f77f5ef24cf814" translate="yes" xml:space="preserve">
          <source>Now that we've covered Documents, let's take a look at &lt;a href=&quot;subdocs&quot;&gt;Subdocuments&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfc596958abc1d115c8f71bbb8a305f6401498a" translate="yes" xml:space="preserve">
          <source>Now that we've covered Subdocuments, let's take a look at &lt;a href=&quot;queries&quot;&gt;querying&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a883ed82b8de324469895df8555bae96c3841af4" translate="yes" xml:space="preserve">
          <source>Now that we've covered connections, let's take a look at &lt;a href=&quot;models&quot;&gt;models&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b185f298299dbe2245554a5c64b8f887f5ea2f" translate="yes" xml:space="preserve">
          <source>Now that we've covered middleware, let's take a look at Mongoose's approach to faking JOINs with its query &lt;a href=&quot;populate&quot;&gt;population&lt;/a&gt; helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871e26fe919bd199b519e172b7754cd6ed26562e" translate="yes" xml:space="preserve">
          <source>Now, mongoose will call your getter function every time you access the &lt;code&gt;fullName&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="3fe39d62c48b61a9374da82c22cf1c2a12f2a7b8" translate="yes" xml:space="preserve">
          <source>ObjectId</source>
          <target state="translated">ObjectId</target>
        </trans-unit>
        <trans-unit id="dc8963a89f7d00eafd443efb6ae6ab68c962ba2e" translate="yes" xml:space="preserve">
          <source>ObjectIds</source>
          <target state="translated">ObjectIds</target>
        </trans-unit>
        <trans-unit id="3a6ab09e6725d6b10980289adb452c0cf49df391" translate="yes" xml:space="preserve">
          <source>Officially Supported Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba310fab6715ca65c70c0c4ed2588823083b5488" translate="yes" xml:space="preserve">
          <source>On $push and $addToSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f3c3cae95f874219ca28d3da8f285f49b584be" translate="yes" xml:space="preserve">
          <source>Once our connection opens, our callback will be called. For brevity, let's assume that all following code is within this callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2762ae7edb91b83de2b671d06a0bdbef204b4408" translate="yes" xml:space="preserve">
          <source>One final detail worth noting: update validators &lt;strong&gt;only&lt;/strong&gt; run on the following update operators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4939f0269bf63cb3932137e288ea962d18dd4dc2" translate="yes" xml:space="preserve">
          <source>Only non-virtual properties work as part of queries and for field selection. Since virtuals are not stored in MongoDB, you can't query with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7607098ac06b0fe58c9bde72dfc58c312b4169" translate="yes" xml:space="preserve">
          <source>Only translate arguments of object type anything else is returned raw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfabe114158c11ed981b19040e508c49a794c048" translate="yes" xml:space="preserve">
          <source>Only use &lt;code&gt;$where&lt;/code&gt; when you have a condition that cannot be met using other MongoDB operators like &lt;code&gt;$lt&lt;/code&gt;. &lt;strong&gt;Be sure to read about all of &lt;a href=&quot;http://docs.mongodb.org/manual/reference/operator/where/&quot;&gt;its caveats&lt;/a&gt; before using.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efd1a16e7413c63abf73320647328d9e1f7542d" translate="yes" xml:space="preserve">
          <source>Opens the connection with a URI using &lt;code&gt;MongoClient.connect()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9233900bbf64c9f5ac14dbfd8ff4f95a7ba643" translate="yes" xml:space="preserve">
          <source>Opens the default mongoose connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd5093336d6ee78597ef5ece9e8ff08d727161f" translate="yes" xml:space="preserve">
          <source>Operation Buffering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2953d57c565183324dd9957c183d260b91d126fd" translate="yes" xml:space="preserve">
          <source>Option Changes in v5.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="2bdc774d5178db145a6987a13737c3422f186d38" translate="yes" xml:space="preserve">
          <source>Options are passed down without modification to the &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.2/api/Db.html#createCollection&quot;&gt;MongoDB driver's &lt;code&gt;createCollection()&lt;/code&gt; function&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb4797919744886e3c77786f97d75c600ead58a" translate="yes" xml:space="preserve">
          <source>Options for Nested Schemas:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdc7f8b7aa9ec93d85f842cce7da054fdd581d1" translate="yes" xml:space="preserve">
          <source>Options for all document arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="525569d9a9dcbd563194a7fb0a60b6a4c1a342af" translate="yes" xml:space="preserve">
          <source>Or we may passing the _id directly and let mongoose take care of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599ffbd6e95e9102a19874cfc765e0666e6a5f25" translate="yes" xml:space="preserve">
          <source>Other options:</source>
          <target state="translated">Другие варианты:</target>
        </trans-unit>
        <trans-unit id="42e31e1536bd9727a6fc67ff3ddeee5ab78128e5" translate="yes" xml:space="preserve">
          <source>Override the function the required validator uses to check whether a value passes the &lt;code&gt;required&lt;/code&gt; check. Override this on the individual SchemaType.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a60eefd7dd3a989bf1ab1fc5236726b2cd43fff" translate="yes" xml:space="preserve">
          <source>Overwrite all values in this document with the values of &lt;code&gt;obj&lt;/code&gt;, except for immutable properties. Behaves similarly to &lt;code&gt;set()&lt;/code&gt;, except for it unsets all properties that aren't in &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c235c28280829f8950eb04e57b653435d29f8d9" translate="yes" xml:space="preserve">
          <source>Overwriting</source>
          <target state="translated">Overwriting</target>
        </trans-unit>
        <trans-unit id="8cd27b3cf0d362072571d3a175a657067d22358c" translate="yes" xml:space="preserve">
          <source>Overwriting a default mongoose document method may lead to unpredictable results. See &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schema_Schema.reserved&quot;&gt;this&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4ce63754674bca0f3e2a86847e6ca1bb81dd89" translate="yes" xml:space="preserve">
          <source>Overwriting filter properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="4ec0c8134f61c15adc3a48cbe15551898a6f9c1e" translate="yes" xml:space="preserve">
          <source>Parents of Subdocs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2099742687df0a2b88b01bdbd6d575b66e9724f4" translate="yes" xml:space="preserve">
          <source>Passing Parameters from Pre Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f874f3ed759666ea819e9a98bab9cd5c0654bb0" translate="yes" xml:space="preserve">
          <source>Passing a &lt;code&gt;callback&lt;/code&gt; executes the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9802080b6d54e607a4780893ab587136711e373" translate="yes" xml:space="preserve">
          <source>Passing a &lt;code&gt;callback&lt;/code&gt; executes the query. The result of the query is a single document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b58b58d9f1eb939964e5806ebd3a3db2f71cacf" translate="yes" xml:space="preserve">
          <source>Passing an empty object &lt;code&gt;{}&lt;/code&gt; as the doc will result in a no-op unless the &lt;code&gt;overwrite&lt;/code&gt; option is passed. Without the &lt;code&gt;overwrite&lt;/code&gt; option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d4742ddc3e8ed296e97ff4b6d4b13f1aba5bca" translate="yes" xml:space="preserve">
          <source>Passwords which contain certain characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f991aede09b5addb971e7bf75b7ac0f003d47a0" translate="yes" xml:space="preserve">
          <source>Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af189d57024951b2a6fd01bbd5dfa3301fff6c7" translate="yes" xml:space="preserve">
          <source>Performs &lt;a href=&quot;http://docs.mongodb.org/manual/applications/aggregation/&quot;&gt;aggregations&lt;/a&gt; on the models collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1d9a20f815e3a7af594e87551b6290649399cc" translate="yes" xml:space="preserve">
          <source>Pluggable</source>
          <target state="translated">Pluggable</target>
        </trans-unit>
        <trans-unit id="7e6ac20e7136d9484188a6db727fcbfe4d6449b6" translate="yes" xml:space="preserve">
          <source>Plugging in your own Promises Library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="50ca3606726ba7836f535aa9bbeba54149d73cd6" translate="yes" xml:space="preserve">
          <source>Plugins are a tool for reusing logic in multiple schemas. Suppose you have several models in your database and want to add a &lt;code&gt;loadedAt&lt;/code&gt; property to each one. Just create a plugin once and apply it to each &lt;code&gt;Schema&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2471710bb5d9ebbdc953f8df91848d6665ab9d44" translate="yes" xml:space="preserve">
          <source>Pops the array atomically at most one time per document &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8227177d3aeba652ecd28ed5cb2423de649c8d" translate="yes" xml:space="preserve">
          <source>Populate</source>
          <target state="translated">Populate</target>
        </trans-unit>
        <trans-unit id="1c3ce13f9a29543b797ffa63998d6c1b2e27982b" translate="yes" xml:space="preserve">
          <source>Populate Virtuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b574fa4642272ccc4d8f62266ad36e5fadc8c4" translate="yes" xml:space="preserve">
          <source>Populate Virtuals: The Count Option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb530723a554c240c2092d2aaf8599e49cb14d2" translate="yes" xml:space="preserve">
          <source>Populate does support a &lt;code&gt;limit&lt;/code&gt; option, however, it currently does &lt;strong&gt;not&lt;/strong&gt; limit on a per-document basis. For example, suppose you have 2 stories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9f0ecafbce879ea6f95dd985cbaa6cddac059b" translate="yes" xml:space="preserve">
          <source>Populate in Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15784f4ff9e9b0c2cf35c7f4ed3db17d47280d59" translate="yes" xml:space="preserve">
          <source>Populate lets you get a list of a user's friends, but what if you also wanted a user's friends of friends? Specify the &lt;code&gt;populate&lt;/code&gt; option to tell mongoose to populate the &lt;code&gt;friends&lt;/code&gt; array of all the user's friends:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f540f71f6fe3c0af391c96d73c1926794ed20a" translate="yes" xml:space="preserve">
          <source>Populate virtuals also support counting the number of documents with matching &lt;code&gt;foreignField&lt;/code&gt; as opposed to the documents themselves. Set the &lt;code&gt;count&lt;/code&gt; option on your virtual:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd805dcdbd0515ee187ffc6278db67eb66feff84" translate="yes" xml:space="preserve">
          <source>Populated paths are no longer set to their original &lt;code&gt;_id&lt;/code&gt; , their value is replaced with the mongoose document returned from the database by performing a separate query before returning the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73109a9c168b020f4caa0737ba691c774b2affc3" translate="yes" xml:space="preserve">
          <source>Populates document references, executing the &lt;code&gt;callback&lt;/code&gt; when complete. If you want to use promises instead, use this function with &lt;a href=&quot;#document_Document-execPopulate&quot;&gt;&lt;code&gt;execPopulate()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506c8f6213e3ea1ae8ebee5d815e32abd48a4702" translate="yes" xml:space="preserve">
          <source>Populates document references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ec2f16d70b19d80d7688d0a7f25691a5a785b4" translate="yes" xml:space="preserve">
          <source>Populating Multiple Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01da4018218a4c53a6b62854a3144efd19ea606" translate="yes" xml:space="preserve">
          <source>Populating across Databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1713e7d7c3c555dfdefd03f20f6534b6a1a9856d" translate="yes" xml:space="preserve">
          <source>Populating across multiple levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc47374954d09c581723e1ef316636e7ebfe368" translate="yes" xml:space="preserve">
          <source>Populating an existing document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8da1ab9bf2d103fc55e451cb3d1991739567d1c" translate="yes" xml:space="preserve">
          <source>Populating multiple existing documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182d37ec74bf3c14babc4754e239e56a03a643c7" translate="yes" xml:space="preserve">
          <source>Population</source>
          <target state="translated">Population</target>
        </trans-unit>
        <trans-unit id="ce954519f470654635282122959005fa5e080095" translate="yes" xml:space="preserve">
          <source>Population does not occur unless a &lt;code&gt;callback&lt;/code&gt; is passed &lt;em&gt;or&lt;/em&gt; you explicitly call &lt;code&gt;execPopulate()&lt;/code&gt;. Passing the same path a second time will overwrite the previous path options. See &lt;a href=&quot;#model_Model.populate&quot;&gt;Model.populate()&lt;/a&gt; for explaination of options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2b34e64ad50e64e889543186d81a59daa54ef2" translate="yes" xml:space="preserve">
          <source>Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, plain object, multiple plain objects, or all objects returned from a query. Let's look at some examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c761741284e4d18ee0fa8ab2333b4641a00e1c94" translate="yes" xml:space="preserve">
          <source>Post Save Hooks Get Flow Control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e7b9605aabad12e050b4c87263a27be29f84ec" translate="yes" xml:space="preserve">
          <source>Post hooks now get flow control, which means async post save hooks and child document post save hooks execute &lt;strong&gt;before&lt;/strong&gt; your &lt;code&gt;save()&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10104285e0d8f651d0286307d1b88ff411f5099c" translate="yes" xml:space="preserve">
          <source>Post middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f648cb93061a3ec0b37639c5c8aa1d85d1fc3eac" translate="yes" xml:space="preserve">
          <source>Pre</source>
          <target state="translated">Pre</target>
        </trans-unit>
        <trans-unit id="4b1b83450b5d7a7a9b9137371beda57b26df0626" translate="yes" xml:space="preserve">
          <source>Pre and post &lt;code&gt;save()&lt;/code&gt; hooks are &lt;strong&gt;not&lt;/strong&gt; executed on &lt;code&gt;update()&lt;/code&gt;, &lt;code&gt;findOneAndUpdate()&lt;/code&gt;, etc. You can see a more detailed discussion why in &lt;a href=&quot;http://github.com/Automattic/mongoose/issues/964&quot;&gt;this GitHub issue&lt;/a&gt;. Mongoose 4.0 introduced distinct hooks for these functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e862b0f902264376df6dadeda0e6aca33a62aeab" translate="yes" xml:space="preserve">
          <source>Pre middleware functions are executed one after another, when each middleware calls &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce2082f2cd72a6c1b37afffe5f0d3a3780ba88a" translate="yes" xml:space="preserve">
          <source>Pre-compiled Browser Bundle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3027d59b6dbd433ea6a6f00163e9fcc6604c5775" translate="yes" xml:space="preserve">
          <source>Preferences:</source>
          <target state="translated">Preferences:</target>
        </trans-unit>
        <trans-unit id="b1d472e424c03ff52490d1edc8a0e23f95babb92" translate="yes" xml:space="preserve">
          <source>Promises</source>
          <target state="translated">Promises</target>
        </trans-unit>
        <trans-unit id="0ed8e0ce3ca9a565f81e2408bf81b8bb54668c3d" translate="yes" xml:space="preserve">
          <source>Promises and Callbacks for &lt;code&gt;mongoose.connect()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d787e0b500bbf145d8242b78e7dd5f8ddf0cbf4d" translate="yes" xml:space="preserve">
          <source>Promises and Callbacks for `mongoose.connect()`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046f520c049bd0de3dd7bc7ece819330cbe33dbc" translate="yes" xml:space="preserve">
          <source>Provides promise for aggregate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aaf3cc23320b20abde3eb3815aa099ec9288724" translate="yes" xml:space="preserve">
          <source>Pulls items from the array atomically. Equality is determined by casting the provided value to an embedded document and comparing using &lt;a href=&quot;api#document_Document-equals&quot;&gt;the &lt;code&gt;Document.equals()&lt;/code&gt; function.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c2e17cea0993c8e6faa22cf3ca78313b5ba3e3" translate="yes" xml:space="preserve">
          <source>Pushes items to the array non-atomically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2644b7d942f174a4bbf0bc8675c1badf9352393e" translate="yes" xml:space="preserve">
          <source>Queries</source>
          <target state="translated">Queries</target>
        </trans-unit>
        <trans-unit id="ac52cbe0a83e9723b799120256ddf3b97022d70f" translate="yes" xml:space="preserve">
          <source>Queries are Not Promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876c520fe7888f1a107e27c98e8bff7e56e1a1e0" translate="yes" xml:space="preserve">
          <source>Queries are not promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="957bc835a92e40840af42a43bd674d03b2377345" translate="yes" xml:space="preserve">
          <source>Queries are thenable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a618b4be8d3ac72545f3085fe616d342b7139fba" translate="yes" xml:space="preserve">
          <source>Query</source>
          <target state="translated">Query</target>
        </trans-unit>
        <trans-unit id="ae7198b81686a1a511951c061b90778b313c3d23" translate="yes" xml:space="preserve">
          <source>Query Casting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a0f14243c089aceddf5fcd67de74732677ccea" translate="yes" xml:space="preserve">
          <source>Query Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7c3ecb37760152fb43664d496dc2a431b997db" translate="yes" xml:space="preserve">
          <source>Query Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d54e22f8ee807a19797e99166e503844dddfaa3" translate="yes" xml:space="preserve">
          <source>Query conditions and other options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7471b59fb8c3ce088feae9c4308f37d2f593842" translate="yes" xml:space="preserve">
          <source>Query constructor used for building queries. You do not need to instantiate a &lt;code&gt;Query&lt;/code&gt; directly. Instead use Model functions like &lt;a href=&quot;https://mongoosejs.com/docs/api.html#find_find&quot;&gt;&lt;code&gt;Model.find()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0892e5d50f5987b7088a977e3d63f16cc1d48d85" translate="yes" xml:space="preserve">
          <source>Query middleware differs from document middleware in a subtle but important way: in document middleware, &lt;code&gt;this&lt;/code&gt; refers to the document being updated. In query middleware, mongoose doesn't necessarily have a reference to the document being updated, so &lt;code&gt;this&lt;/code&gt; refers to the &lt;strong&gt;query&lt;/strong&gt; object rather than the document being updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd97c11ca62be7a9e3bf50016d0ea4cc8023ddbf" translate="yes" xml:space="preserve">
          <source>Query middleware is now compiled when you call &lt;code&gt;mongoose.model()&lt;/code&gt; or &lt;code&gt;db.model()&lt;/code&gt;. If you add query middleware after calling &lt;code&gt;mongoose.model()&lt;/code&gt;, that middleware will &lt;strong&gt;not&lt;/strong&gt; get called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c087a27fb704fd42416da543cee00d401649b2dc" translate="yes" xml:space="preserve">
          <source>Query middleware is supported for the following Model and Query functions. In query middleware functions, &lt;code&gt;this&lt;/code&gt; refers to the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790b0205f0569c18130fa4843e0cba80d7f7417" translate="yes" xml:space="preserve">
          <source>Query()</source>
          <target state="translated">Query()</target>
        </trans-unit>
        <trans-unit id="aafe749fca25af971be6958f0681cb9847db289b" translate="yes" xml:space="preserve">
          <source>Query.prototype.$where()</source>
          <target state="translated">Query.prototype.$where()</target>
        </trans-unit>
        <trans-unit id="d838b0ab352a28bce528a6aba00823d655e13dd4" translate="yes" xml:space="preserve">
          <source>Query.prototype.Symbol.asyncIterator()</source>
          <target state="translated">Query.prototype.Symbol.asyncIterator()</target>
        </trans-unit>
        <trans-unit id="63483d91390f830f50483ad6e54203095c83dcf3" translate="yes" xml:space="preserve">
          <source>Query.prototype.all()</source>
          <target state="translated">Query.prototype.all()</target>
        </trans-unit>
        <trans-unit id="608072e9e1d7454bb5f0b2bd13d114b55ce2f1b2" translate="yes" xml:space="preserve">
          <source>Query.prototype.and()</source>
          <target state="translated">Query.prototype.and()</target>
        </trans-unit>
        <trans-unit id="744b50d73908c873bebf77df86fcd275a35d79a2" translate="yes" xml:space="preserve">
          <source>Query.prototype.batchSize()</source>
          <target state="translated">Query.prototype.batchSize()</target>
        </trans-unit>
        <trans-unit id="20376f8a07507ea0da1b7b370332cd264b9492ab" translate="yes" xml:space="preserve">
          <source>Query.prototype.box()</source>
          <target state="translated">Query.prototype.box()</target>
        </trans-unit>
        <trans-unit id="b1cd25e06f6df87802791dc9048742a74275a429" translate="yes" xml:space="preserve">
          <source>Query.prototype.cast()</source>
          <target state="translated">Query.prototype.cast()</target>
        </trans-unit>
        <trans-unit id="7779fe593715339c214009a061324b830fcc604f" translate="yes" xml:space="preserve">
          <source>Query.prototype.catch()</source>
          <target state="translated">Query.prototype.catch()</target>
        </trans-unit>
        <trans-unit id="dc0752217895c8161c11c9040e8bece834747a33" translate="yes" xml:space="preserve">
          <source>Query.prototype.center()</source>
          <target state="translated">Query.prototype.center()</target>
        </trans-unit>
        <trans-unit id="727102f598663b7b6ec43d6313eb627cfb43f169" translate="yes" xml:space="preserve">
          <source>Query.prototype.centerSphere()</source>
          <target state="translated">Query.prototype.centerSphere()</target>
        </trans-unit>
        <trans-unit id="0acf6ba2b5c7724de38327589dcce479b768ed9d" translate="yes" xml:space="preserve">
          <source>Query.prototype.circle()</source>
          <target state="translated">Query.prototype.circle()</target>
        </trans-unit>
        <trans-unit id="4989c6e73f3a425730c1317f42271b5f43b700ab" translate="yes" xml:space="preserve">
          <source>Query.prototype.collation()</source>
          <target state="translated">Query.prototype.collation()</target>
        </trans-unit>
        <trans-unit id="4cc7b1f88f4e53d6e43db358fda108a0eb993998" translate="yes" xml:space="preserve">
          <source>Query.prototype.comment()</source>
          <target state="translated">Query.prototype.comment()</target>
        </trans-unit>
        <trans-unit id="6304990129568651f6fb302370949a16047fa5ba" translate="yes" xml:space="preserve">
          <source>Query.prototype.count()</source>
          <target state="translated">Query.prototype.count()</target>
        </trans-unit>
        <trans-unit id="30a97b5933a43dde0b426e6968c8d6661cf8a06e" translate="yes" xml:space="preserve">
          <source>Query.prototype.countDocuments()</source>
          <target state="translated">Query.prototype.countDocuments()</target>
        </trans-unit>
        <trans-unit id="d7a0e16534995593d3b913da140886d8ff8bf4d6" translate="yes" xml:space="preserve">
          <source>Query.prototype.cursor()</source>
          <target state="translated">Query.prototype.cursor()</target>
        </trans-unit>
        <trans-unit id="ce550b1de9e36a521eac638e8daaf276b55c7fc7" translate="yes" xml:space="preserve">
          <source>Query.prototype.deleteMany()</source>
          <target state="translated">Query.prototype.deleteMany()</target>
        </trans-unit>
        <trans-unit id="3533e55f8705465e5109b25ef7774bee9aa75c52" translate="yes" xml:space="preserve">
          <source>Query.prototype.deleteOne()</source>
          <target state="translated">Query.prototype.deleteOne()</target>
        </trans-unit>
        <trans-unit id="0f8c67db694e7f1dd81732af0286493df18f9c6f" translate="yes" xml:space="preserve">
          <source>Query.prototype.distinct()</source>
          <target state="translated">Query.prototype.distinct()</target>
        </trans-unit>
        <trans-unit id="04758c6518abf7e933ef29d742c5989ab2ff9753" translate="yes" xml:space="preserve">
          <source>Query.prototype.elemMatch()</source>
          <target state="translated">Query.prototype.elemMatch()</target>
        </trans-unit>
        <trans-unit id="67ec8bb7e458f17d5f49bf38f8b744409b2221c4" translate="yes" xml:space="preserve">
          <source>Query.prototype.equals()</source>
          <target state="translated">Query.prototype.equals()</target>
        </trans-unit>
        <trans-unit id="5fe1b08452f85d1128db646edfc363905ef4592f" translate="yes" xml:space="preserve">
          <source>Query.prototype.error()</source>
          <target state="translated">Query.prototype.error()</target>
        </trans-unit>
        <trans-unit id="a3d278babb11dac8ada795086faef7046f8d243f" translate="yes" xml:space="preserve">
          <source>Query.prototype.estimatedDocumentCount()</source>
          <target state="translated">Query.prototype.estimatedDocumentCount()</target>
        </trans-unit>
        <trans-unit id="d56edf6ad6f6065f58a6aa310142a7ae73721e90" translate="yes" xml:space="preserve">
          <source>Query.prototype.exec()</source>
          <target state="translated">Query.prototype.exec()</target>
        </trans-unit>
        <trans-unit id="17b148ac3008f947203549057113ee728428ea7f" translate="yes" xml:space="preserve">
          <source>Query.prototype.exists()</source>
          <target state="translated">Query.prototype.exists()</target>
        </trans-unit>
        <trans-unit id="af682d8258f0895f360dbf63cfc81ff3b1257c84" translate="yes" xml:space="preserve">
          <source>Query.prototype.explain()</source>
          <target state="translated">Query.prototype.explain()</target>
        </trans-unit>
        <trans-unit id="e69521ebe9fd11cf259c010144590d1d3679fd4d" translate="yes" xml:space="preserve">
          <source>Query.prototype.find()</source>
          <target state="translated">Query.prototype.find()</target>
        </trans-unit>
        <trans-unit id="7561d61ddad5aaffeb836549b46048272a4d5d6b" translate="yes" xml:space="preserve">
          <source>Query.prototype.findOne()</source>
          <target state="translated">Query.prototype.findOne()</target>
        </trans-unit>
        <trans-unit id="d02dfbe5524befc16cb597ac49ce79934a7289fd" translate="yes" xml:space="preserve">
          <source>Query.prototype.findOneAndDelete()</source>
          <target state="translated">Query.prototype.findOneAndDelete()</target>
        </trans-unit>
        <trans-unit id="17de7f50ff59ba226a2ff0a2fe9118262357ecf8" translate="yes" xml:space="preserve">
          <source>Query.prototype.findOneAndRemove()</source>
          <target state="translated">Query.prototype.findOneAndRemove()</target>
        </trans-unit>
        <trans-unit id="36d3767afe8b86db740f28766d14ebe09be32070" translate="yes" xml:space="preserve">
          <source>Query.prototype.findOneAndReplace()</source>
          <target state="translated">Query.prototype.findOneAndReplace()</target>
        </trans-unit>
        <trans-unit id="1d4ea39b641bb6d8d1be7a9533deaa66d66d1ae3" translate="yes" xml:space="preserve">
          <source>Query.prototype.findOneAndUpdate()</source>
          <target state="translated">Query.prototype.findOneAndUpdate()</target>
        </trans-unit>
        <trans-unit id="ca250b9ff18a2d67fbe6721da195a34e26412c51" translate="yes" xml:space="preserve">
          <source>Query.prototype.geometry()</source>
          <target state="translated">Query.prototype.geometry()</target>
        </trans-unit>
        <trans-unit id="2b53cdf16bbf333b4fa458754f61131ea8e51597" translate="yes" xml:space="preserve">
          <source>Query.prototype.get()</source>
          <target state="translated">Query.prototype.get()</target>
        </trans-unit>
        <trans-unit id="527d3f602acaa61dad7133e19da239afdb81a30e" translate="yes" xml:space="preserve">
          <source>Query.prototype.getFilter()</source>
          <target state="translated">Query.prototype.getFilter()</target>
        </trans-unit>
        <trans-unit id="a518b4577c6e68bd49b36c2d401a32bff66540e0" translate="yes" xml:space="preserve">
          <source>Query.prototype.getOptions()</source>
          <target state="translated">Query.prototype.getOptions()</target>
        </trans-unit>
        <trans-unit id="254f0e6b9c135af7c00d3c9eaa0b2e5f0adbf7cb" translate="yes" xml:space="preserve">
          <source>Query.prototype.getPopulatedPaths()</source>
          <target state="translated">Query.prototype.getPopulatedPaths()</target>
        </trans-unit>
        <trans-unit id="99904df9e7dae444ceca2e4336471dc792e22180" translate="yes" xml:space="preserve">
          <source>Query.prototype.getQuery()</source>
          <target state="translated">Query.prototype.getQuery()</target>
        </trans-unit>
        <trans-unit id="77a3096fad8495eb23b29c4f4885e4abbae409f5" translate="yes" xml:space="preserve">
          <source>Query.prototype.getUpdate()</source>
          <target state="translated">Query.prototype.getUpdate()</target>
        </trans-unit>
        <trans-unit id="5f7cf796a4ac1b2717490b55703461640bba44d3" translate="yes" xml:space="preserve">
          <source>Query.prototype.gt()</source>
          <target state="translated">Query.prototype.gt()</target>
        </trans-unit>
        <trans-unit id="930c0dd58a8ce1aee1835e03a62e29c2a09b33be" translate="yes" xml:space="preserve">
          <source>Query.prototype.gte()</source>
          <target state="translated">Query.prototype.gte()</target>
        </trans-unit>
        <trans-unit id="f17d9d8d0e1a7b31c252d124153ffbf75a6661d1" translate="yes" xml:space="preserve">
          <source>Query.prototype.hint()</source>
          <target state="translated">Query.prototype.hint()</target>
        </trans-unit>
        <trans-unit id="2b4e00069edc09128b0e98f759551e91b005993f" translate="yes" xml:space="preserve">
          <source>Query.prototype.in()</source>
          <target state="translated">Query.prototype.in()</target>
        </trans-unit>
        <trans-unit id="684328397c75c0c4e0b27e019b6b406ea3aeedde" translate="yes" xml:space="preserve">
          <source>Query.prototype.intersects()</source>
          <target state="translated">Query.prototype.intersects()</target>
        </trans-unit>
        <trans-unit id="6098a8df05b3064aaa44241ec6089b361acb4080" translate="yes" xml:space="preserve">
          <source>Query.prototype.j()</source>
          <target state="translated">Query.prototype.j()</target>
        </trans-unit>
        <trans-unit id="701a0c4a9719708bb773b326642d6fab5597f929" translate="yes" xml:space="preserve">
          <source>Query.prototype.lean()</source>
          <target state="translated">Query.prototype.lean()</target>
        </trans-unit>
        <trans-unit id="7115bb5cebc790798c3ba27a19294797729a5b96" translate="yes" xml:space="preserve">
          <source>Query.prototype.limit()</source>
          <target state="translated">Query.prototype.limit()</target>
        </trans-unit>
        <trans-unit id="eb1c3f94c342413d168ddcdd65506d82c438cf4c" translate="yes" xml:space="preserve">
          <source>Query.prototype.lt()</source>
          <target state="translated">Query.prototype.lt()</target>
        </trans-unit>
        <trans-unit id="9cb42d6d6a71987980668c9929e3e16eb44eb9e0" translate="yes" xml:space="preserve">
          <source>Query.prototype.lte()</source>
          <target state="translated">Query.prototype.lte()</target>
        </trans-unit>
        <trans-unit id="67dc7e4b2f8537d865f312c1d1627f6c05780704" translate="yes" xml:space="preserve">
          <source>Query.prototype.map()</source>
          <target state="translated">Query.prototype.map()</target>
        </trans-unit>
        <trans-unit id="1cd758612eb5533469120aabbfd56168a174d3eb" translate="yes" xml:space="preserve">
          <source>Query.prototype.maxDistance()</source>
          <target state="translated">Query.prototype.maxDistance()</target>
        </trans-unit>
        <trans-unit id="4104365c2a2dc0a953f68e817aea74bc53c3d287" translate="yes" xml:space="preserve">
          <source>Query.prototype.maxScan()</source>
          <target state="translated">Query.prototype.maxScan()</target>
        </trans-unit>
        <trans-unit id="24b57c6d486dbb31dac77a315bfd10ce37cd0f9b" translate="yes" xml:space="preserve">
          <source>Query.prototype.maxTimeMS()</source>
          <target state="translated">Query.prototype.maxTimeMS()</target>
        </trans-unit>
        <trans-unit id="e1a8ada9935454f4659edb91187ff3a9351fc5f6" translate="yes" xml:space="preserve">
          <source>Query.prototype.maxscan()</source>
          <target state="translated">Query.prototype.maxscan()</target>
        </trans-unit>
        <trans-unit id="2f37b9d9f160e63bbffc7156ce5794b8df68f847" translate="yes" xml:space="preserve">
          <source>Query.prototype.merge()</source>
          <target state="translated">Query.prototype.merge()</target>
        </trans-unit>
        <trans-unit id="d383824b6ca7d9da1b3d5013b5fe3b459803eee5" translate="yes" xml:space="preserve">
          <source>Query.prototype.mod()</source>
          <target state="translated">Query.prototype.mod()</target>
        </trans-unit>
        <trans-unit id="18f561c99e166fd1a2ca9d4ad96fd3c5112ab590" translate="yes" xml:space="preserve">
          <source>Query.prototype.mongooseOptions()</source>
          <target state="translated">Query.prototype.mongooseOptions()</target>
        </trans-unit>
        <trans-unit id="c2a452057dd1ea52beafd36d126d060f7ea684d3" translate="yes" xml:space="preserve">
          <source>Query.prototype.ne()</source>
          <target state="translated">Query.prototype.ne()</target>
        </trans-unit>
        <trans-unit id="178fa8d14b521c6f456882d84fecad25b81b32e5" translate="yes" xml:space="preserve">
          <source>Query.prototype.near()</source>
          <target state="translated">Query.prototype.near()</target>
        </trans-unit>
        <trans-unit id="27b591f97f2c6f3d31fbdf6cfeb67b54ff3b2a95" translate="yes" xml:space="preserve">
          <source>Query.prototype.nearSphere()</source>
          <target state="translated">Query.prototype.nearSphere()</target>
        </trans-unit>
        <trans-unit id="b7e8a5df7a7a05dba8a9049b817010dc6cdd2371" translate="yes" xml:space="preserve">
          <source>Query.prototype.nin()</source>
          <target state="translated">Query.prototype.nin()</target>
        </trans-unit>
        <trans-unit id="3e5fa0b385350b685b519b1e7855c25503db3e11" translate="yes" xml:space="preserve">
          <source>Query.prototype.nor()</source>
          <target state="translated">Query.prototype.nor()</target>
        </trans-unit>
        <trans-unit id="88cc38e111435223b04e9b1a48685d71b45b8bc0" translate="yes" xml:space="preserve">
          <source>Query.prototype.or()</source>
          <target state="translated">Query.prototype.or()</target>
        </trans-unit>
        <trans-unit id="82ac11c7169e12cdffb3bcce44a4398e5375189d" translate="yes" xml:space="preserve">
          <source>Query.prototype.orFail()</source>
          <target state="translated">Query.prototype.orFail()</target>
        </trans-unit>
        <trans-unit id="1f149f3652154af4318090fbdf6b3b38f5595254" translate="yes" xml:space="preserve">
          <source>Query.prototype.polygon()</source>
          <target state="translated">Query.prototype.polygon()</target>
        </trans-unit>
        <trans-unit id="fccecb6c1124836c4255a5b61a60bd45b21908c9" translate="yes" xml:space="preserve">
          <source>Query.prototype.populate()</source>
          <target state="translated">Query.prototype.populate()</target>
        </trans-unit>
        <trans-unit id="60cfc4e84a78bbad147a2c3cfcdad26f8f74c75f" translate="yes" xml:space="preserve">
          <source>Query.prototype.projection()</source>
          <target state="translated">Query.prototype.projection()</target>
        </trans-unit>
        <trans-unit id="b741b1d567eda701e3b16ca36463f94c41ccd9e6" translate="yes" xml:space="preserve">
          <source>Query.prototype.read()</source>
          <target state="translated">Query.prototype.read()</target>
        </trans-unit>
        <trans-unit id="b3135031289eeb10e186816b2bb023596bb91ac5" translate="yes" xml:space="preserve">
          <source>Query.prototype.readConcern()</source>
          <target state="translated">Query.prototype.readConcern()</target>
        </trans-unit>
        <trans-unit id="44fcc7ba6c888dcb0c73bc391c3fb439b74fc78c" translate="yes" xml:space="preserve">
          <source>Query.prototype.regex()</source>
          <target state="translated">Query.prototype.regex()</target>
        </trans-unit>
        <trans-unit id="41bbb4b243b4c573313bc9b582a55089eb49ba1a" translate="yes" xml:space="preserve">
          <source>Query.prototype.remove()</source>
          <target state="translated">Query.prototype.remove()</target>
        </trans-unit>
        <trans-unit id="507279f8f5970dc1508b822cbc3d20e5d8ad003f" translate="yes" xml:space="preserve">
          <source>Query.prototype.replaceOne()</source>
          <target state="translated">Query.prototype.replaceOne()</target>
        </trans-unit>
        <trans-unit id="7dbf26452102daf6cd106faaae035abaa62f29e3" translate="yes" xml:space="preserve">
          <source>Query.prototype.select()</source>
          <target state="translated">Query.prototype.select()</target>
        </trans-unit>
        <trans-unit id="65c1e28b31cced3384da21a36e1b53adb3442625" translate="yes" xml:space="preserve">
          <source>Query.prototype.selected()</source>
          <target state="translated">Query.prototype.selected()</target>
        </trans-unit>
        <trans-unit id="d9443a3e9204c6474c74452c752c62905c51daa8" translate="yes" xml:space="preserve">
          <source>Query.prototype.selectedExclusively()</source>
          <target state="translated">Query.prototype.selectedExclusively()</target>
        </trans-unit>
        <trans-unit id="72b3ea889d94e981d9e531492b53c6beb81cd59e" translate="yes" xml:space="preserve">
          <source>Query.prototype.selectedInclusively()</source>
          <target state="translated">Query.prototype.selectedInclusively()</target>
        </trans-unit>
        <trans-unit id="d93570432987be09d48278859d22770c92f0223b" translate="yes" xml:space="preserve">
          <source>Query.prototype.session()</source>
          <target state="translated">Query.prototype.session()</target>
        </trans-unit>
        <trans-unit id="3cba43c9a2ff04a9220beb3eea435f08e02dd2c1" translate="yes" xml:space="preserve">
          <source>Query.prototype.set()</source>
          <target state="translated">Query.prototype.set()</target>
        </trans-unit>
        <trans-unit id="02eac798e73759a836b83a32dc7543d15290c3b4" translate="yes" xml:space="preserve">
          <source>Query.prototype.setOptions()</source>
          <target state="translated">Query.prototype.setOptions()</target>
        </trans-unit>
        <trans-unit id="8f139e5ba2210c18f7e3e45db1f4ebb1a6f78bf9" translate="yes" xml:space="preserve">
          <source>Query.prototype.setQuery()</source>
          <target state="translated">Query.prototype.setQuery()</target>
        </trans-unit>
        <trans-unit id="efed607ee4763cd5b40e4e1e0d25e66f308d7e85" translate="yes" xml:space="preserve">
          <source>Query.prototype.setUpdate()</source>
          <target state="translated">Query.prototype.setUpdate()</target>
        </trans-unit>
        <trans-unit id="be82c41f27444d2df12756789c7040a14ad221ea" translate="yes" xml:space="preserve">
          <source>Query.prototype.size()</source>
          <target state="translated">Query.prototype.size()</target>
        </trans-unit>
        <trans-unit id="6aff90da7bf898cd87e2115b2c2f9185a460e85a" translate="yes" xml:space="preserve">
          <source>Query.prototype.skip()</source>
          <target state="translated">Query.prototype.skip()</target>
        </trans-unit>
        <trans-unit id="f8e5e90d149210f67cb293b515b473e9057f88af" translate="yes" xml:space="preserve">
          <source>Query.prototype.slaveOk()</source>
          <target state="translated">Query.prototype.slaveOk()</target>
        </trans-unit>
        <trans-unit id="92681502444ade73ded241b9791ca6f109b53acf" translate="yes" xml:space="preserve">
          <source>Query.prototype.slice()</source>
          <target state="translated">Query.prototype.slice()</target>
        </trans-unit>
        <trans-unit id="f652bcb5af9ad9899221a9e73bd06015f3fed667" translate="yes" xml:space="preserve">
          <source>Query.prototype.snapshot()</source>
          <target state="translated">Query.prototype.snapshot()</target>
        </trans-unit>
        <trans-unit id="65634972c53354451ec1e5a4314bb0e607d2b246" translate="yes" xml:space="preserve">
          <source>Query.prototype.sort()</source>
          <target state="translated">Query.prototype.sort()</target>
        </trans-unit>
        <trans-unit id="d48eea68c5d3466e235479d934d7aa057bb9c88f" translate="yes" xml:space="preserve">
          <source>Query.prototype.tailable()</source>
          <target state="translated">Query.prototype.tailable()</target>
        </trans-unit>
        <trans-unit id="c8c0daeffd09031966d520df51ad342a0f59929e" translate="yes" xml:space="preserve">
          <source>Query.prototype.then()</source>
          <target state="translated">Query.prototype.then()</target>
        </trans-unit>
        <trans-unit id="cc07015acf5bf5ac84d5d26d246e5f009e6cc19d" translate="yes" xml:space="preserve">
          <source>Query.prototype.toConstructor()</source>
          <target state="translated">Query.prototype.toConstructor()</target>
        </trans-unit>
        <trans-unit id="533404233ce84d028d920f8642a38407529f5ed4" translate="yes" xml:space="preserve">
          <source>Query.prototype.update()</source>
          <target state="translated">Query.prototype.update()</target>
        </trans-unit>
        <trans-unit id="19795759bfa2fab3b788dcd35bd5a17170c87d3b" translate="yes" xml:space="preserve">
          <source>Query.prototype.updateMany()</source>
          <target state="translated">Query.prototype.updateMany()</target>
        </trans-unit>
        <trans-unit id="61e118ed015ff54b8137e6aebb28f50f90acc838" translate="yes" xml:space="preserve">
          <source>Query.prototype.updateOne()</source>
          <target state="translated">Query.prototype.updateOne()</target>
        </trans-unit>
        <trans-unit id="1234b5455ee41cdb0f899e8ae30692751e110c76" translate="yes" xml:space="preserve">
          <source>Query.prototype.use$geoWithin</source>
          <target state="translated">Query.prototype.use$geoWithin</target>
        </trans-unit>
        <trans-unit id="e4c2fb00ce8d2b4d1cd622d0c325b588980fa2f8" translate="yes" xml:space="preserve">
          <source>Query.prototype.w()</source>
          <target state="translated">Query.prototype.w()</target>
        </trans-unit>
        <trans-unit id="7ef500bbd9005ff72cc0397f3076363334f6e651" translate="yes" xml:space="preserve">
          <source>Query.prototype.where()</source>
          <target state="translated">Query.prototype.where()</target>
        </trans-unit>
        <trans-unit id="64d3bf05f5b3b56c3b51d5b0a0f819ca8bec94ee" translate="yes" xml:space="preserve">
          <source>Query.prototype.within()</source>
          <target state="translated">Query.prototype.within()</target>
        </trans-unit>
        <trans-unit id="a62b12295e46611211cc31e177eb3e81053c0b6b" translate="yes" xml:space="preserve">
          <source>Query.prototype.wtimeout()</source>
          <target state="translated">Query.prototype.wtimeout()</target>
        </trans-unit>
        <trans-unit id="56e4ea01e608ac37bcaa7908b0e2784aa3c7e6ca" translate="yes" xml:space="preserve">
          <source>QueryCursor</source>
          <target state="translated">QueryCursor</target>
        </trans-unit>
        <trans-unit id="22fb0750ad4e88cd46348b940bbe0abae2b4f541" translate="yes" xml:space="preserve">
          <source>QueryCursor()</source>
          <target state="translated">QueryCursor()</target>
        </trans-unit>
        <trans-unit id="51272ea34566b4e948e4a05995a06facc1a1e5bd" translate="yes" xml:space="preserve">
          <source>QueryCursor.prototype.addCursorFlag()</source>
          <target state="translated">QueryCursor.prototype.addCursorFlag()</target>
        </trans-unit>
        <trans-unit id="9aa911c10b2c44f16f5a7ffe43b5fd50b47a17c6" translate="yes" xml:space="preserve">
          <source>QueryCursor.prototype.close()</source>
          <target state="translated">QueryCursor.prototype.close()</target>
        </trans-unit>
        <trans-unit id="e3312a7e29d602b1d2b3e004115752ec8f9c88f9" translate="yes" xml:space="preserve">
          <source>QueryCursor.prototype.eachAsync()</source>
          <target state="translated">QueryCursor.prototype.eachAsync()</target>
        </trans-unit>
        <trans-unit id="6fb69d6b82691e05ba0c51404f884ee16ff2c4b7" translate="yes" xml:space="preserve">
          <source>QueryCursor.prototype.map()</source>
          <target state="translated">QueryCursor.prototype.map()</target>
        </trans-unit>
        <trans-unit id="ab898448a592894fc979644dd4e16c120144c505" translate="yes" xml:space="preserve">
          <source>QueryCursor.prototype.next()</source>
          <target state="translated">QueryCursor.prototype.next()</target>
        </trans-unit>
        <trans-unit id="303a5d610ec322248b8ae1963c44e08224e8b8ea" translate="yes" xml:space="preserve">
          <source>QueryCursors execute the model's pre find hooks, but &lt;strong&gt;not&lt;/strong&gt; the model's post find hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6835ce045ca407e1aa42cf034a40b2dc968c7d" translate="yes" xml:space="preserve">
          <source>Querying</source>
          <target state="translated">Querying</target>
        </trans-unit>
        <trans-unit id="de174bc6bb010048e439f76bf831fc248d0cda42" translate="yes" xml:space="preserve">
          <source>Read Concern Level:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0800ce47d69899b1befbf59c722781daaee29ab" translate="yes" xml:space="preserve">
          <source>Read below for more a more detailed description of each deprecation warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e4dc74c0c25f5fb0f2dd45c52740447d110ef2" translate="yes" xml:space="preserve">
          <source>Read more about &lt;a href=&quot;schematypes&quot;&gt;SchemaTypes here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91eb4fd965227a33391df3bdc846fa37307fb6a" translate="yes" xml:space="preserve">
          <source>Read more about creating &lt;a href=&quot;customschematypes&quot;&gt;custom SchemaTypes here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6cd38ced70849740e47f46906f4c9d3f5b6da9" translate="yes" xml:space="preserve">
          <source>Read more about how to use read concern &lt;a href=&quot;https://docs.mongodb.com/manual/reference/read-concern/&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb2d9fe5f7cd10ecbefc6f6a9c7887111330b9ff" translate="yes" xml:space="preserve">
          <source>Read more about how to use read preferrences &lt;a href=&quot;http://docs.mongodb.org/manual/applications/replication/#read-preference&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6696c8e48c71d94260c3102866846d769895915" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;validation&quot;&gt;validation&lt;/a&gt; guide for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c72b4720fb92dc422e9a6836dc18b9a8af0cc55" translate="yes" xml:space="preserve">
          <source>Recursive embedded discriminators in arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b326d715ad8d63692e25dbb5f3f5fb617c73fbb" translate="yes" xml:space="preserve">
          <source>References to other documents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f039c1d609d2519db1730f94dbc86c8ca38cdf" translate="yes" xml:space="preserve">
          <source>Refs to children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002eb9f14e8c2974f92a34f8a452a4f950e9a73e" translate="yes" xml:space="preserve">
          <source>Registered discriminators for this model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96b127d7f18e6b3e871d24cb827d663d44deb21" translate="yes" xml:space="preserve">
          <source>Registers a plugin for this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9a2838f68897be90d4a943e766d2cbf8638241" translate="yes" xml:space="preserve">
          <source>Registers a transform function which subsequently maps documents retrieved via the streams interface or &lt;code&gt;.next()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4426af8e8d8ecee1c872382a04ca8d21eee1405e" translate="yes" xml:space="preserve">
          <source>Remember that virtuals do &lt;strong&gt;not&lt;/strong&gt; end up in &lt;code&gt;lean()&lt;/code&gt; query results. Use the &lt;a href=&quot;http://plugins.mongoosejs.io/plugins/lean-virtuals&quot;&gt;mongoose-lean-virtuals plugin&lt;/a&gt; to add virtuals to your lean query results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420a0e1b98a10a256f994af8b395496fe893df94" translate="yes" xml:space="preserve">
          <source>Removes all documents that match &lt;code&gt;conditions&lt;/code&gt; from the collection. To remove just the first document that matches &lt;code&gt;conditions&lt;/code&gt;, set the &lt;code&gt;single&lt;/code&gt; option to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64d884d5e9fc1ccee68a9114ff90c7337f10a1f" translate="yes" xml:space="preserve">
          <source>Removes the given &lt;code&gt;path&lt;/code&gt; (or [&lt;code&gt;paths&lt;/code&gt;]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a196718d36657865c6739a6041c98021e7fd9116" translate="yes" xml:space="preserve">
          <source>Removes the model named &lt;code&gt;name&lt;/code&gt; from the default connection, if it exists. You can use this function to clean up any models you created in your tests to prevent OverwriteModelErrors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557abfd675b99128ceccc34936fbc181b1d7a08a" translate="yes" xml:space="preserve">
          <source>Removes the model named &lt;code&gt;name&lt;/code&gt; from this connection, if it exists. You can use this function to clean up any models you created in your tests to prevent OverwriteModelErrors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab6b9a3157a6413ce9d8a15f40ef43f35e69885" translate="yes" xml:space="preserve">
          <source>Removes this document from the db.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d77185da81470e28846bd9530aea93dd9a69a3" translate="yes" xml:space="preserve">
          <source>Removes this document from the db. Equivalent to &lt;code&gt;.remove()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0688099cc7bde4b758e80a949b55a057b1e22659" translate="yes" xml:space="preserve">
          <source>Removing Subdocs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a869574ed2da18b3e25d0284844a4bf9b3c965" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;count()&lt;/code&gt; with &lt;code&gt;countDocuments()&lt;/code&gt;, unless you want to count how many documents are in the whole collection (no filter). In the latter case, use &lt;code&gt;estimatedDocumentCount()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332408f69454b2a47ab9c7e62bd06bdb34869b53" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;remove()&lt;/code&gt; with &lt;code&gt;deleteOne()&lt;/code&gt; or &lt;code&gt;deleteMany()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b3bdf90718a4814e7747a0bb8465dad9306919" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;update()&lt;/code&gt; with &lt;code&gt;updateOne()&lt;/code&gt;, &lt;code&gt;updateMany()&lt;/code&gt;, or &lt;code&gt;replaceOne()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf163d4caacd158b7b46b822145bd5ff19a819b" translate="yes" xml:space="preserve">
          <source>Replica Set Connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c760b6354df86beff964abd2169bdef6480869e1" translate="yes" xml:space="preserve">
          <source>Replica Set Host Names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0377048cff221dd694bb2a2ddc852ad4aa9c4697" translate="yes" xml:space="preserve">
          <source>Requests acknowledgement that this operation has been persisted to MongoDB's on-disk journal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6a9b5169f2ecc4eb622bb610c5a47ca5bae307" translate="yes" xml:space="preserve">
          <source>Required URI encoding of connection strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc37cc8bc9640787ea5f105a0f3c819b2f9ea35c" translate="yes" xml:space="preserve">
          <source>Required Validators On Nested Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7c8b6757b9348fec3711f8485f34595bac00ea" translate="yes" xml:space="preserve">
          <source>Reserved document keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7249a6fc99f32e815cdaabe8af4d3491c6c49308" translate="yes" xml:space="preserve">
          <source>Retrieves a collection, creating it if not cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc6b9c33d832f6c91bcbb8119f50f31999d7403" translate="yes" xml:space="preserve">
          <source>Retrieving</source>
          <target state="translated">Retrieving</target>
        </trans-unit>
        <trans-unit id="59137a3824614038553cca19e9e90147bb5da220" translate="yes" xml:space="preserve">
          <source>Retrying in the event of a &lt;a href=&quot;https://stackoverflow.com/questions/52153538/what-is-a-transienttransactionerror-in-mongoose-or-mongodb&quot;&gt;transient transaction error&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe196a0cff7d05b015bc9912e583b2b4ba112495" translate="yes" xml:space="preserve">
          <source>Return Values for &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;deleteX()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609c7b6842811e28f1bf265f6a6ff67c8cb7bd58" translate="yes" xml:space="preserve">
          <source>Return Values for `remove()` and `deleteX()`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3ee18acec7ae7b8c95aa1699aa78f2d81a37a2" translate="yes" xml:space="preserve">
          <source>Return the index of &lt;code&gt;obj&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt; if not found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45936068238dfe617a437f7f767e016639ced993" translate="yes" xml:space="preserve">
          <source>Return whether or not the &lt;code&gt;obj&lt;/code&gt; is included in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17de86dbbc5190f47245f985364a27d7f3191fd" translate="yes" xml:space="preserve">
          <source>Returns a deep copy of the schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4feff4a83610c83525259877aab0e59c7437632f" translate="yes" xml:space="preserve">
          <source>Returns a list of indexes that this schema declares, via &lt;code&gt;schema.index()&lt;/code&gt; or by &lt;code&gt;index: true&lt;/code&gt; in a path's options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2ea0095c2471f4d601fd2141eaa6866233e6f7" translate="yes" xml:space="preserve">
          <source>Returns a native js Array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5674279d4f11f155063ae39133098c7202d0fa" translate="yes" xml:space="preserve">
          <source>Returns a new connection object, with the new db.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb538fb05192dc3f7ce4c6aa7cf915a61bd8633" translate="yes" xml:space="preserve">
          <source>Returns a new schema that has the picked &lt;code&gt;paths&lt;/code&gt; from this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70424f8112680545795e3af29c3d24f6643af531" translate="yes" xml:space="preserve">
          <source>Returns a wrapper around a &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html&quot;&gt;mongodb driver cursor&lt;/a&gt;. A QueryCursor exposes a Streams3 interface, as well as a &lt;code&gt;.next()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31002bf04bfe94ed443ea6462e390b532ce5cd68" translate="yes" xml:space="preserve">
          <source>Returns an Array of path strings that are required by this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea6d9067e6e84b7be5bfba84061c59f835a66b5" translate="yes" xml:space="preserve">
          <source>Returns an array of model names created on this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f471bb50d55d4d7342ad65693ac1a0029c637de0" translate="yes" xml:space="preserve">
          <source>Returns an array of model names created on this instance of Mongoose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2184aa94cd505670bda50c47a3576dfa1c85a9" translate="yes" xml:space="preserve">
          <source>Returns an asyncIterator for use with &lt;a href=&quot;http://bit.ly/async-iterators&quot;&gt;&lt;code&gt;for/await/of&lt;/code&gt; loops&lt;/a&gt; This function &lt;em&gt;only&lt;/em&gt; works for &lt;code&gt;find()&lt;/code&gt; queries. You do not need to call this function explicitly, the JavaScript runtime will call it for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57d4498e4c827c5032718771e3cd3cd5bafa65d" translate="yes" xml:space="preserve">
          <source>Returns an asyncIterator for use with &lt;a href=&quot;http://bit.ly/async-iterators&quot;&gt;&lt;code&gt;for/await/of&lt;/code&gt; loops&lt;/a&gt; You do not need to call this function explicitly, the JavaScript runtime will call it for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="706b25260d4a847f2a056bceee7eeb0f1f51cab5" translate="yes" xml:space="preserve">
          <source>Returns an object containing the Mongoose-specific options for this query, including &lt;code&gt;lean&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574b21f66ba98d3eca8654d1b2ac5ee4a8eb85b3" translate="yes" xml:space="preserve">
          <source>Returns another Model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e809a3083fe8b6461260575402c5b98207210472" translate="yes" xml:space="preserve">
          <source>Returns the current pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c956c14e687ae01a6a84600beb0eb4ff3a0739" translate="yes" xml:space="preserve">
          <source>Returns the current query filter (also known as conditions) as a POJO.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a807928941b465db3bd56d140d7a0975dd5886" translate="yes" xml:space="preserve">
          <source>Returns the current query filter. Equivalent to &lt;code&gt;getFilter()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e14c9c965b4082147668362d77c38c571a2a9d" translate="yes" xml:space="preserve">
          <source>Returns the current update operations as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784d81f50bafbff0836e0bd56a5f41ca0a43d809" translate="yes" xml:space="preserve">
          <source>Returns the list of paths that have been directly modified. A direct modified path is a path that you explicitly set, whether via &lt;code&gt;doc.foo = 'bar'&lt;/code&gt;, &lt;code&gt;Object.assign(doc, { foo: 'bar' })&lt;/code&gt;, or &lt;code&gt;doc.set('foo', 'bar')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d359ae11ca3adfcf4123047f1b61fcb7ca754b2" translate="yes" xml:space="preserve">
          <source>Returns the list of paths that have been modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80138ba8dffd246df4757d88b4a1b3fa11d1649e" translate="yes" xml:space="preserve">
          <source>Returns the pathType of &lt;code&gt;path&lt;/code&gt; for this schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac240db18b606df88860ac043cd550a256283173" translate="yes" xml:space="preserve">
          <source>Returns the value of a path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9d9f50340ca62cbd0099a44a90de2def548e8a" translate="yes" xml:space="preserve">
          <source>Returns the virtual type with the given &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f196b3da2310fe33019081041f2d41ce8c93e6" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;path&lt;/code&gt; was directly set and modified, else false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9409f2b235cbdd75c65d46ad1407f2e62ee37c" translate="yes" xml:space="preserve">
          <source>Returns true if Mongoose can cast the given value to an ObjectId, or false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106c37347891a677c93cff92aa5297b326081bec" translate="yes" xml:space="preserve">
          <source>Returns true if at least one document exists in the database that matches the given &lt;code&gt;filter&lt;/code&gt;, and false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cc9c6da9fa6be78f753a3788a5dd6fa2b49b2b" translate="yes" xml:space="preserve">
          <source>Returns true if the Document stores the same data as doc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d747f3e66b37718bac378280098df3548676a1" translate="yes" xml:space="preserve">
          <source>Returns true if the given path is nullish or only contains empty objects. Useful for determining whether this subdoc will get stripped out by the &lt;a href=&quot;../guide#minimize&quot;&gt;minimize option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9898f87e2814a1021623a512831ce14575b67327" translate="yes" xml:space="preserve">
          <source>Returns true if this document was modified, else false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="bc1c236ddb03180e1b141284d83fa27bcf807829" translate="yes" xml:space="preserve">
          <source>Run setters on queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb287597488aa69d2dda944f3389ecbacc55f0dd" translate="yes" xml:space="preserve">
          <source>Runs &lt;code&gt;.close()&lt;/code&gt; on all connections in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22fe3c67636e688fde4557e1e490d8e3bcad7a1" translate="yes" xml:space="preserve">
          <source>Runs a function &lt;code&gt;fn&lt;/code&gt; and treats the return value of &lt;code&gt;fn&lt;/code&gt; as the new value for the query to resolve to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4ad89e238b782827cf78d79864868b58ea2ac5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;update()&lt;/code&gt;, except MongoDB replace the existing document with the given document (no atomic operators like &lt;code&gt;$set&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0066d97b351d0e39387bf9abf5228dddf40d83aa" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;update()&lt;/code&gt;, except MongoDB will update &lt;em&gt;all&lt;/em&gt; documents that match &lt;code&gt;filter&lt;/code&gt; (as opposed to just the first one) regardless of the value of the &lt;code&gt;multi&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e6f7b9aa4b46e9b29f0d6f65005b8892128cc8" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;update()&lt;/code&gt;, except it does not support the &lt;code&gt;multi&lt;/code&gt; or &lt;code&gt;overwrite&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7155906cc16360bf9fb787f45e2abb0189daa409" translate="yes" xml:space="preserve">
          <source>Save Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30b3665cf4fc1521edf526a89e5688529389ca6" translate="yes" xml:space="preserve">
          <source>Save/Validate Hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8427abf6506ffd26124dcd3c3eff05143f496d" translate="yes" xml:space="preserve">
          <source>Saves this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea7149927aa640ec9d54f75188e43e77dab14cd" translate="yes" xml:space="preserve">
          <source>Saving refs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ca46a0f278320cfff4b361f54203c2355eda43" translate="yes" xml:space="preserve">
          <source>Saving refs to other documents works the same way you normally save properties, just assign the &lt;code&gt;_id&lt;/code&gt; value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeedcd6acfd293c0bf676625e2efacb12fbf57cc" translate="yes" xml:space="preserve">
          <source>Say time goes by and we want to display all the kittens we've seen. We can access all of the kitten documents through our Kitten &lt;a href=&quot;models&quot;&gt;model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9262ef578397495694b6ad03497f1484df492bae" translate="yes" xml:space="preserve">
          <source>Say you have a user schema which keeps track of the user's friends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5230ecdf4e78f0dd162281a0a78c6cdc853cbe8" translate="yes" xml:space="preserve">
          <source>Schema</source>
          <target state="translated">Schema</target>
        </trans-unit>
        <trans-unit id="02a4fbf34b9d086029fe9e5c113cd6f81c675e19" translate="yes" xml:space="preserve">
          <source>Schema constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e979712b2689d6625ed9471fa423f74b20dea4c" translate="yes" xml:space="preserve">
          <source>Schema the model uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bcbcca257e1c1af378d13e94b421922e3b3ce0" translate="yes" xml:space="preserve">
          <source>Schema()</source>
          <target state="translated">Schema()</target>
        </trans-unit>
        <trans-unit id="670d4ae33801adc75ef4dde17134e6b06e6c65ad" translate="yes" xml:space="preserve">
          <source>Schema.Types</source>
          <target state="translated">Schema.Types</target>
        </trans-unit>
        <trans-unit id="22e5e975893a69001f112058c2a3d323515abf55" translate="yes" xml:space="preserve">
          <source>Schema.indexTypes</source>
          <target state="translated">Schema.indexTypes</target>
        </trans-unit>
        <trans-unit id="86d708b7a1dd10c6dacb1e274422f02640e0f9fb" translate="yes" xml:space="preserve">
          <source>Schema.prototype.add()</source>
          <target state="translated">Schema.prototype.add()</target>
        </trans-unit>
        <trans-unit id="bfbc450f70878cdefc8ebcf6ce099fc741da372a" translate="yes" xml:space="preserve">
          <source>Schema.prototype.childSchemas</source>
          <target state="translated">Schema.prototype.childSchemas</target>
        </trans-unit>
        <trans-unit id="7eae666653a442ff3bd30b3cc5ecf039ccf87562" translate="yes" xml:space="preserve">
          <source>Schema.prototype.clone()</source>
          <target state="translated">Schema.prototype.clone()</target>
        </trans-unit>
        <trans-unit id="71e40a50af2b81c69d62926693fdd564afa6b50d" translate="yes" xml:space="preserve">
          <source>Schema.prototype.eachPath()</source>
          <target state="translated">Schema.prototype.eachPath()</target>
        </trans-unit>
        <trans-unit id="eb8c01583628b4a34dea801f55dadea629499c6d" translate="yes" xml:space="preserve">
          <source>Schema.prototype.get()</source>
          <target state="translated">Schema.prototype.get()</target>
        </trans-unit>
        <trans-unit id="2f006cc685d1fc79daaf9f9b8ab26408f4a34d50" translate="yes" xml:space="preserve">
          <source>Schema.prototype.index()</source>
          <target state="translated">Schema.prototype.index()</target>
        </trans-unit>
        <trans-unit id="d8767c9b22060e4e2b222a71b0d8faef3b3c7a8a" translate="yes" xml:space="preserve">
          <source>Schema.prototype.indexes()</source>
          <target state="translated">Schema.prototype.indexes()</target>
        </trans-unit>
        <trans-unit id="510de4561225c038b3082a253178d6fa65b08e96" translate="yes" xml:space="preserve">
          <source>Schema.prototype.loadClass()</source>
          <target state="translated">Schema.prototype.loadClass()</target>
        </trans-unit>
        <trans-unit id="0ca96b0e2ce385f767ada6bf9148d1f1d3263420" translate="yes" xml:space="preserve">
          <source>Schema.prototype.method()</source>
          <target state="translated">Schema.prototype.method()</target>
        </trans-unit>
        <trans-unit id="5fffc7a94c98fc8abd0de990718d2206e40fdaee" translate="yes" xml:space="preserve">
          <source>Schema.prototype.obj</source>
          <target state="translated">Schema.prototype.obj</target>
        </trans-unit>
        <trans-unit id="361fb62c5438eaa4a71bfff4a319cbba67894326" translate="yes" xml:space="preserve">
          <source>Schema.prototype.path()</source>
          <target state="translated">Schema.prototype.path()</target>
        </trans-unit>
        <trans-unit id="69ea0bbd295d87dd05c5480a6d8c5a4d12351cae" translate="yes" xml:space="preserve">
          <source>Schema.prototype.pathType()</source>
          <target state="translated">Schema.prototype.pathType()</target>
        </trans-unit>
        <trans-unit id="6a3e0efdaa5feaa803a863e3745bdf104c232425" translate="yes" xml:space="preserve">
          <source>Schema.prototype.paths</source>
          <target state="translated">Schema.prototype.paths</target>
        </trans-unit>
        <trans-unit id="45ad34db80f7e4210a82a50563fd7cbe6a207cae" translate="yes" xml:space="preserve">
          <source>Schema.prototype.pick()</source>
          <target state="translated">Schema.prototype.pick()</target>
        </trans-unit>
        <trans-unit id="16ea630f0de75559cc16ec704962080572920af4" translate="yes" xml:space="preserve">
          <source>Schema.prototype.plugin()</source>
          <target state="translated">Schema.prototype.plugin()</target>
        </trans-unit>
        <trans-unit id="eb54aa2f8ca35ec47a1d48ad00232b5d6ff66a47" translate="yes" xml:space="preserve">
          <source>Schema.prototype.post()</source>
          <target state="translated">Schema.prototype.post()</target>
        </trans-unit>
        <trans-unit id="abc27c3ebdbc3661b1d438726e9df637979a787a" translate="yes" xml:space="preserve">
          <source>Schema.prototype.pre()</source>
          <target state="translated">Schema.prototype.pre()</target>
        </trans-unit>
        <trans-unit id="b6a19a8e9034d87f4700533f529283b2546da712" translate="yes" xml:space="preserve">
          <source>Schema.prototype.queue()</source>
          <target state="translated">Schema.prototype.queue()</target>
        </trans-unit>
        <trans-unit id="d02d35e1760e0a8499c93e8778160136015fdc9b" translate="yes" xml:space="preserve">
          <source>Schema.prototype.remove()</source>
          <target state="translated">Schema.prototype.remove()</target>
        </trans-unit>
        <trans-unit id="8d2519100530a239b97d746463233e7d62783d95" translate="yes" xml:space="preserve">
          <source>Schema.prototype.requiredPaths()</source>
          <target state="translated">Schema.prototype.requiredPaths()</target>
        </trans-unit>
        <trans-unit id="3da2ce87c067c7e988bacb80bf61a58bf934da45" translate="yes" xml:space="preserve">
          <source>Schema.prototype.set()</source>
          <target state="translated">Schema.prototype.set()</target>
        </trans-unit>
        <trans-unit id="6a6f4e559b388f49edd91e97e6b7f81491652ea3" translate="yes" xml:space="preserve">
          <source>Schema.prototype.static()</source>
          <target state="translated">Schema.prototype.static()</target>
        </trans-unit>
        <trans-unit id="c61c737cb7c36e13a74b3ef04903119daa0e63d3" translate="yes" xml:space="preserve">
          <source>Schema.prototype.virtual()</source>
          <target state="translated">Schema.prototype.virtual()</target>
        </trans-unit>
        <trans-unit id="d46d55946c256c3edb618289494ae45187dd6672" translate="yes" xml:space="preserve">
          <source>Schema.prototype.virtualpath()</source>
          <target state="translated">Schema.prototype.virtualpath()</target>
        </trans-unit>
        <trans-unit id="3d20d2e32f24afc8a94211d4fa908a934b2a4771" translate="yes" xml:space="preserve">
          <source>Schema.reserved</source>
          <target state="translated">Schema.reserved</target>
        </trans-unit>
        <trans-unit id="68c88019a58a529068241bf44314da7797443c13" translate="yes" xml:space="preserve">
          <source>SchemaType</source>
          <target state="translated">SchemaType</target>
        </trans-unit>
        <trans-unit id="59e7be9c78ce854b231c51682bee6d0eae33630e" translate="yes" xml:space="preserve">
          <source>SchemaType Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebb81bd8f540c6eeb0f44bff8be08ac0f9031c0" translate="yes" xml:space="preserve">
          <source>SchemaType constructor. Do &lt;strong&gt;not&lt;/strong&gt; instantiate &lt;code&gt;SchemaType&lt;/code&gt; directly. Mongoose converts your schema paths into SchemaTypes automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56116d281f3bb80b85b52b5a37a564ec9992c22" translate="yes" xml:space="preserve">
          <source>SchemaType()</source>
          <target state="translated">SchemaType()</target>
        </trans-unit>
        <trans-unit id="81e58d6a2f2dc6fc84f9d00c62f8645349c7e02b" translate="yes" xml:space="preserve">
          <source>SchemaType.cast()</source>
          <target state="translated">SchemaType.cast()</target>
        </trans-unit>
        <trans-unit id="98521b2d28b762b285039ad6af22a506031f6784" translate="yes" xml:space="preserve">
          <source>SchemaType.checkRequired()</source>
          <target state="translated">SchemaType.checkRequired()</target>
        </trans-unit>
        <trans-unit id="649bb5f38bc037337c2cff2d873841bed635562f" translate="yes" xml:space="preserve">
          <source>SchemaType.get()</source>
          <target state="translated">SchemaType.get()</target>
        </trans-unit>
        <trans-unit id="32544735a7155a12dbd3f613b7069f33ac7ab532" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.default()</source>
          <target state="translated">SchemaType.prototype.default()</target>
        </trans-unit>
        <trans-unit id="fe9f57e76e7009279176da431c55f0457758a296" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.get()</source>
          <target state="translated">SchemaType.prototype.get()</target>
        </trans-unit>
        <trans-unit id="441a054412a0e2e29a5626f48a9615bf704d4316" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.immutable()</source>
          <target state="translated">SchemaType.prototype.immutable()</target>
        </trans-unit>
        <trans-unit id="0b3458c3f3bcc6dd421d8a3fafec689c81e37f55" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.index()</source>
          <target state="translated">SchemaType.prototype.index()</target>
        </trans-unit>
        <trans-unit id="dd2f8a66d3f0973b091d779d52de67b2848cf6cd" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.ref()</source>
          <target state="translated">SchemaType.prototype.ref()</target>
        </trans-unit>
        <trans-unit id="3d45f41cf4865cf8d58f4e50a7dab78aba773666" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.required()</source>
          <target state="translated">SchemaType.prototype.required()</target>
        </trans-unit>
        <trans-unit id="3e516c9f0abbb092d87f93fc6fab9a945c938eea" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.select()</source>
          <target state="translated">SchemaType.prototype.select()</target>
        </trans-unit>
        <trans-unit id="20da7e2124ec9aec86e642977dca4ad0b2b0d508" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.set()</source>
          <target state="translated">SchemaType.prototype.set()</target>
        </trans-unit>
        <trans-unit id="a54119251774b58b140aef61010361948bd30d37" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.sparse()</source>
          <target state="translated">SchemaType.prototype.sparse()</target>
        </trans-unit>
        <trans-unit id="d0818b5f519920b4e47e8a445872b25c866148c3" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.text()</source>
          <target state="translated">SchemaType.prototype.text()</target>
        </trans-unit>
        <trans-unit id="8ce3babaf267230bb55de5fffc875ef55b912803" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.unique()</source>
          <target state="translated">SchemaType.prototype.unique()</target>
        </trans-unit>
        <trans-unit id="e4bd52b1ea6bd72b55a2de9ce42aa7d79f42d736" translate="yes" xml:space="preserve">
          <source>SchemaType.prototype.validate()</source>
          <target state="translated">SchemaType.prototype.validate()</target>
        </trans-unit>
        <trans-unit id="6014fe10ef3a3cc1a50e808e4caa4f1a84a67f5c" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions</source>
          <target state="translated">SchemaTypeOptions</target>
        </trans-unit>
        <trans-unit id="2dc6ad7f0948444e81a07cc3234a01b5be3563d1" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions()</source>
          <target state="translated">SchemaTypeOptions()</target>
        </trans-unit>
        <trans-unit id="7ffed4db9f34817c9581ca251e71f3bb5a404431" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.cast</source>
          <target state="translated">SchemaTypeOptions.prototype.cast</target>
        </trans-unit>
        <trans-unit id="16771b1eedbfbb367d5b18c1b65adc94fd2dbdd1" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.default</source>
          <target state="translated">SchemaTypeOptions.prototype.default</target>
        </trans-unit>
        <trans-unit id="11502509ed1544eb875f9c8b9ee80bde0dfebd66" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.immutable</source>
          <target state="translated">SchemaTypeOptions.prototype.immutable</target>
        </trans-unit>
        <trans-unit id="c781399ee17de93460ffec274e96707de9a6046c" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.index</source>
          <target state="translated">SchemaTypeOptions.prototype.index</target>
        </trans-unit>
        <trans-unit id="15895a6a39b4f36f34fff5761c1e7bbaf2631e90" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.ref</source>
          <target state="translated">SchemaTypeOptions.prototype.ref</target>
        </trans-unit>
        <trans-unit id="df9a231d60a6606cdc07ab5bd8a01e026c4776b8" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.required</source>
          <target state="translated">SchemaTypeOptions.prototype.required</target>
        </trans-unit>
        <trans-unit id="5f44b455a9f35c8d35215d4d741d79165a2999c7" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.select</source>
          <target state="translated">SchemaTypeOptions.prototype.select</target>
        </trans-unit>
        <trans-unit id="9855ee4de7f6f5b87d1d11bb865c1488706e0bef" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.sparse</source>
          <target state="translated">SchemaTypeOptions.prototype.sparse</target>
        </trans-unit>
        <trans-unit id="2b47ed67da562f585124fa231bedd4ffbe592f6e" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.text</source>
          <target state="translated">SchemaTypeOptions.prototype.text</target>
        </trans-unit>
        <trans-unit id="8e4346ca7d4d75486414b8ab31d181656e8b03ef" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.type</source>
          <target state="translated">SchemaTypeOptions.prototype.type</target>
        </trans-unit>
        <trans-unit id="dc16c884ec96c9c4a9c98e3a632d7fb6ff2e181b" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.unique</source>
          <target state="translated">SchemaTypeOptions.prototype.unique</target>
        </trans-unit>
        <trans-unit id="8ce99e83092309fe418ecb3607213f7c1602a5d1" translate="yes" xml:space="preserve">
          <source>SchemaTypeOptions.prototype.validate</source>
          <target state="translated">SchemaTypeOptions.prototype.validate</target>
        </trans-unit>
        <trans-unit id="905dc0072b274dd1ec36f2fdcda0637dd47ec9d9" translate="yes" xml:space="preserve">
          <source>SchemaTypes</source>
          <target state="translated">SchemaTypes</target>
        </trans-unit>
        <trans-unit id="2cd70cde4661025fa1be210fd32a7488da554fb6" translate="yes" xml:space="preserve">
          <source>SchemaTypes handle definition of path &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-default&quot;&gt;defaults&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-validate&quot;&gt;validation&lt;/a&gt;, &lt;a href=&quot;#getters&quot;&gt;getters&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-set&quot;&gt;setters&lt;/a&gt;, &lt;a href=&quot;https://mongoosejs.com/docs/api.html#schematype_SchemaType-select&quot;&gt;field selection defaults&lt;/a&gt; for &lt;a href=&quot;https://mongoosejs.com/docs/api.html#query-js&quot;&gt;queries&lt;/a&gt;, and other general characteristics for Mongoose document properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db77ed065e4e0ae24d5474707494552cb72cf711" translate="yes" xml:space="preserve">
          <source>Schemas</source>
          <target state="translated">Schemas</target>
        </trans-unit>
        <trans-unit id="4110d243b21f4572bdbbb69767338156ebe0221d" translate="yes" xml:space="preserve">
          <source>Schemas are also &lt;a href=&quot;plugins&quot;&gt;pluggable&lt;/a&gt; which allows us to package up reusable features into plugins that can be shared with the community or just between your projects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626ccd582ed809cafa3d9600763f499a624a3290" translate="yes" xml:space="preserve">
          <source>Schemas are pluggable, that is, they allow for applying pre-packaged capabilities to extend their functionality. This is a very powerful feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac577eab5f8af63bf4164292e20150da170e77c" translate="yes" xml:space="preserve">
          <source>Schemas have a few configurable options which can be passed to the constructor or &lt;code&gt;set&lt;/code&gt; directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9545310e8e98eb6e51258d4ab923d4ac114ecaf" translate="yes" xml:space="preserve">
          <source>Schemas not only define the structure of your document and casting of properties, they also define document &lt;a href=&quot;#methods&quot;&gt;instance methods&lt;/a&gt;, &lt;a href=&quot;#statics&quot;&gt;static Model methods&lt;/a&gt;, &lt;a href=&quot;#indexes&quot;&gt;compound indexes&lt;/a&gt;, and document lifecycle hooks called &lt;a href=&quot;middleware&quot;&gt;middleware&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5baf8707e03701d88d19923e73a01bf2496d770f" translate="yes" xml:space="preserve">
          <source>Schematype</source>
          <target state="translated">Schematype</target>
        </trans-unit>
        <trans-unit id="8c14dd772d3df269f75a7f2f466298d6bffd8c46" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guide#toJSON&quot;&gt;schema options&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1592ad7ac85f167f9c1f06f8e8d6bc205200831e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../guide#toObject&quot;&gt;schema options&lt;/a&gt; for some more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9580ae1682d459d748ca1a943b318ab1d815ba27" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://mongodb.github.io/node-mongodb-native/3.1/reference/faq/&quot;&gt;this page&lt;/a&gt; for more information about &lt;code&gt;connectTimeoutMS&lt;/code&gt; and &lt;code&gt;socketTimeoutMS&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
