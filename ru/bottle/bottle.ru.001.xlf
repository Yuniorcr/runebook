<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="bottle">
    <body>
      <group id="bottle">
        <trans-unit id="66bffeecdb3b333ff441a93e53e13852869e86ad" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2009&amp;ndash;2017 Marcel Hellkamp</source>
          <target state="translated">&amp;copy; 2009&amp;ndash;2017 Marcel Hellkamp</target>
        </trans-unit>
        <trans-unit id="545b28edecc02742d68b7d6337c3c63ab9e2bd85" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Template Not Found&amp;rdquo; in mod_wsgi/mod_python</source>
          <target state="translated">&amp;ldquo;Template Not Found&amp;rdquo; in mod_wsgi/mod_python</target>
        </trans-unit>
        <trans-unit id="2eb9949d1d6c2a9fd73c76be7de81865aa7a1d67" translate="yes" xml:space="preserve">
          <source>/save/</source>
          <target state="translated">/save/</target>
        </trans-unit>
        <trans-unit id="babfb6aa07026d0bb4a8523bc7a0d92ec91cf908" translate="yes" xml:space="preserve">
          <source>/save/123</source>
          <target state="translated">/save/123</target>
        </trans-unit>
        <trans-unit id="538744a7f30702e490d45710e484cce67bc0592b" translate="yes" xml:space="preserve">
          <source>/save/123/</source>
          <target state="translated">/save/123/</target>
        </trans-unit>
        <trans-unit id="b167b72c365ff27e5196c653773f37a03a37efb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#bottle.ConfigDict&quot;&gt;&lt;code&gt;ConfigDict&lt;/code&gt;&lt;/a&gt; allows you to store meta data along with configuration keys. Two meta fields are currently defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d83127fcc81cbf7df7deff9c8434a85d1c72a9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#bottle.Plugin&quot;&gt;&lt;code&gt;Plugin&lt;/code&gt;&lt;/a&gt; is not a real class (you cannot import it from &lt;a href=&quot;tutorial#module-bottle&quot;&gt;&lt;code&gt;bottle&lt;/code&gt;&lt;/a&gt;) but an interface that plugins are expected to implement. Bottle accepts any object of any type as a plugin, as long as it conforms to the following API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1d24adb762585a4508d0465e11826e08abbc70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#bottle.SimpleTemplate&quot;&gt;&lt;code&gt;SimpleTemplate&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;api#bottle.BaseTemplate&quot;&gt;&lt;code&gt;BaseTemplate&lt;/code&gt;&lt;/a&gt; API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6369f845c5c9c54aec0d651244a83f6c84dd175b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;api#bottle.FileUpload.filename&quot;&gt;&lt;code&gt;FileUpload.filename&lt;/code&gt;&lt;/a&gt; contains the name of the file on the clients file system, but is cleaned up and normalized to prevent bugs caused by unsupported characters or path segments in the filename. If you need the unmodified name as sent by the client, have a look at &lt;a href=&quot;api#bottle.FileUpload.raw_filename&quot;&gt;&lt;code&gt;FileUpload.raw_filename&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9020572845af1fb01ea437d4559ddda3b0418d36" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://heroku.com&quot;&gt;Heroku&lt;/a&gt;, a popular cloud application platform now provides support for running Python applications on their infastructure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257a11bd8016cdb4e2d68b1eebe5e825f4fab26b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Instances of HTTPError or&lt;/code&gt;&lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a299c2a2f132cad3f411b7350e45b91a0460db75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;POST&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.POST&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.POST&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="70a1d99765a0cd7bb57a9cd80df41960d7b0a4de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SimpleTemplate&lt;/code&gt; API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf706e2fbd8bf9ebaf19914f068c7d48590d4497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SimpleTemplate&lt;/code&gt; Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f26f8e688ddeaa0749f8cf34daa4aa20d51b78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;__init__(source=None, name=None, lookup=[], encoding='utf8', **settings)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.__init__&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;__init__(source=None, name=None, lookup=[], encoding='utf8', **settings)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.__init__&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b7c77c06418628608237adb26b8d182da88cedf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_header(name, value)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.add_header&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0d71e59c8ec979934a03aa3c76ecfe7c075326" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_hook(name, func)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.add_hook&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599f07c8fddc49b2594fc9e0c3fb27d08f078248" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_path(path, base=None, index=None, create=False)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ResourceManager.add_path&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd0a02c8b4e3c6a289c57e65a52e59decf41908" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_route(route)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.add_route&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;add_route(route)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.add_route&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="abbb591b10eed2db27e18b9ddbaeca7858c82fb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all_plugins()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.all_plugins&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;all_plugins()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.all_plugins&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2809ed21b3ab0eeb4ef85b7e6b995489f6f307e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.app&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.app&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="15cf6d2a184de1966d1870ab5a20026afce310ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append(key, value)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#MultiDict.append&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7eb2c012e2c61741bfb24f897d99f3b18ba36be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;call&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.call&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;call&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.call&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="799550a372499ffffae85e145f36def5a34b26dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class AppStack&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#AppStack&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5747e23f029fcd59134b5900c088e21f321162" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class BaseRequest(environ=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1405101dd903e8d54d1f533b829ab243898f9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class BaseResponse(body='', status=None, headers=None, **more_headers)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78599c0292c4f23b92b3bada28710e4549a9537d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class BaseTemplate(source=None, name=None, lookup=[], encoding='utf8', **settings)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0d2da3a8bf6160c48709e9f33893a28348dd78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class Bottle(catchall=True, autojson=True)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf97fbb1fc916843e266f5ee8036e6cda34b1f21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class ConfigDict(*a, **ka)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63799bfe15e17fa4b0789e40076f0231030e30e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class FileUpload(fileobj, name, filename, headers=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FileUpload&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c92f0bfe6deb33f9c7811c2f9dff48513b1ab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class FormsDict(*a, **k)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FormsDict&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd33e690c7114035a8f7c5393de108e4fd0df9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class HeaderDict(*a, **ka)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#HeaderDict&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0198e1328687d6be48d2319a1af64f49c36a3a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class LocalRequest(environ=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#LocalRequest&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94a26c2754ac10a7e37f2694acc1c731a10c992" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class LocalResponse(body='', status=None, headers=None, **more_headers)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#LocalResponse&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3a5fa1dc6dcae162cefa2b00df5db599cf21a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class MultiDict(*a, **k)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#MultiDict&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49214db2c688bc049ae905c962e99ad5fffd5efb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class ResourceManager(base='./', opener=&lt;built-in&gt;, cachemode='all')&lt;/built-in&gt;&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ResourceManager&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9d6340b97d4c14b4b71d0646469b1386c109ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class Route(app, rule, method, callback, name=None, plugins=None, skiplist=None, **config)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ea6c69b33d46654adf8ac351d09f6c931359fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class SimpleTemplate(source=None, name=None, lookup=[], encoding='utf8', **settings)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#SimpleTemplate&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6275dca8b9af0876b0a9f056af79bfa860962bbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class WSGIHeaderDict(environ)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#WSGIHeaderDict&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcc38018824d174ffb3449df56b0d8b0b00f0bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;classmethod global_config(key, *args)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.global_config&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb9bed2bc45587c8288bd8b12df87615e1da93f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;classmethod search(name, lookup=[])&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.search&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f77c053d92ed641d6e76afb5eaa521a97e667ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;close()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.close&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;close()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.close&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="682fe66e303cc0e1937c5fc1fff526ce541b7918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie_decode(data, key)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#cookie_decode&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61403bb822bd2e73e30369efaedc9f588bdc4c0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie_encode(data, key)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#cookie_encode&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307054719d9070b098b06932c2d2d510bae48da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie_is_encoded(data)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#cookie_is_encoded&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;cookie_is_encoded(data)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#cookie_is_encoded&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a127b99d432b6765d032e28d375bf86d99062b92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookies&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.cookies&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;cookies&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.cookies&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b091d366b62418b1d065265731f217a201acedd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copy()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.copy&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;copy()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.copy&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4df9d75dc32ff3a91dd52c0327de9b6cd7f10959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;copy(cls=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.copy&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;copy(cls=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.copy&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="38830aa9330d31220d3ca640734b3556b44f696e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug(mode=True)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#debug&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;debug(mode=True)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#debug&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fcce58b9b44697517d3865229b63b16eed67e797" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;decode(encoding=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FormsDict.decode&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;decode(encoding=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FormsDict.decode&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="059cef0c357187f475ec5e505678812af8396082" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete(path=None, method='DELETE', **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.delete&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4afa3201ee9885e571a5ffa20224d9ca0529700d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_cookie(key, **kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.delete_cookie&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eccf03832e3dee6d617c339f96ef157a369fc23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error(code=500)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.error&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;error(code=500)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.error&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d72f040de1c4ab7e5063a5cb7566eabf7249ffe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception BottleException&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BottleException&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39628285ebf4826347dfc47b1a725923b0fb9c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception HTTPError(status=None, body=None, exception=None, traceback=None, **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#HTTPError&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6489ff0a3e5c89565336f7226a3cfc5a714534a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception HTTPResponse(body='', status=None, headers=None, **more_headers)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#HTTPResponse&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fff9900218ad0771975ac2bf8db44571b5da96a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FileUpload.filename&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FileUpload.filename&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ea24e1e2fda151aa5c96553247494998a5e2111" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;files&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.files&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;files&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.files&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="23ca145adfa5f3c8d80f28d80eb31f4ae9476468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forms&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.forms&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;forms&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.forms&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d66aeeb06b886123e64e669e3e5a89956bbfd61e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get(key, default=None, index=-1, type=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#MultiDict.get&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef79f3495318bbe9fbf0289d75c16d065fb52bb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get(path=None, method='GET', **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.get&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6b0f8faaf2f2b9e6a6a3eb53946b7feba575df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_callback_args()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.get_callback_args&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;get_callback_args()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.get_callback_args&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8b2d8c6c59de422a76c23ef408e3c015a276def6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_config(key, default=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.get_config&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc73a4227aa90e0f4e9d67b6cb696b437d01b95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_cookie(key, default=None, secret=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.get_cookie&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1892b197c9ae73ef25468b2d6612c40e45b2a53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_header(name, default=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.get_header&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ec8994b6745aa21a5a6bace288f65a2305662f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_header(name, default=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.get_header&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340e6c7d913e7ce5df509f85f6f1461c9433e9b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_header(name, default=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FileUpload.get_header&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3462c36766aed91b15d3e73b856e862907e3ebef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_undecorated_callback()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.get_undecorated_callback&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;get_undecorated_callback()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.get_undecorated_callback&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3b0f13442690d621612e26b1c7559e2653a0aeb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_url(routename, **kargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.get_url&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c90d8865390767c7bf05c5c927a94d126de549" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getall(key)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#MultiDict.getall&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;getall(key)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#MultiDict.getall&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="82a94354310de185fa358196eb9533e126038186" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getunicode(name, default=None, encoding=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FormsDict.getunicode&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2f6a6d381a8037ce45d8f6cc63b8d8a2db4ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.headers&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.headers&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="86f9583ad879fb1c3952577065ca68a5916c45fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hook(name)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.hook&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;hook(name)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.hook&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7b42a6b0652354d622b281451920931a64110f4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;install(plugin)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.install&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;install(plugin)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.install&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3315fdd5ce4fe77073a44ae7d12bbcb3e52368a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iter_headers()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.iter_headers&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;iter_headers()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.iter_headers&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e4ea0e4d3d14bd01b1002737cc07e89d5409ce6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;json&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.json&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.json&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aad38d01104d7ca7c186a11525eba9a85807e1f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load(target, **namespace)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#load&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c821b8ba1a6ce0b32a71d1c2511c48cb2e6c16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_app(target)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#load_app&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;load_app(target)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#load_app&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="34f6a303731381f416e6c1b2c1da892842baf624" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_config(filename)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.load_config&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;load_config(filename)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.load_config&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="469949766904fc46dc24edd6d2756b140c7f2580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_dict(source, namespace='', make_namespaces=False)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.load_dict&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20be3a0943fc8cbfba2012102ebfaa5d3ee3404f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup(name)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ResourceManager.lookup&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;lookup(name)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ResourceManager.lookup&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6d4971cefced7d3b6e4af8a7f846ec06b9cb8f64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;match(environ)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.match&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;match(environ)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.match&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a1018d0046b90665f947b7dd75b0f106bcca2d0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge(routes)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.merge&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;merge(routes)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.merge&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6a7c300e7351a2929f08d8abe40072f9cdc66b3f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta_get(key, metafield, default=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.meta_get&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24fcce572df92584613de8b28453b6d8d0c2f6b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta_list(key)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.meta_list&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;meta_list(key)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.meta_list&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b3718e00155be03656715d5bb8048dc3f54d251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta_set(key, metafield, value)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.meta_set&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b8cb1880ef4447affdcee751fcebe23277a503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mount(prefix, app, **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.mount&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2834cf68594e2f21034ad52f161e33aae8e80a1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_task.tpl&lt;/code&gt; looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21399e5301aa034df04c1cfd10a76b174f7bbac5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open(name, mode='r', *args, **kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ResourceManager.open&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4d711450999d7a53be5e43a425c1227424d8b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pack.mod:func()&lt;/code&gt; calls &lt;code&gt;pack.mod.func()&lt;/code&gt; and returns the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a4e0563c335d87da22e58418fec3b30857719e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pack.mod:name&lt;/code&gt; returns the module variable &lt;code&gt;name&lt;/code&gt; from &lt;code&gt;pack.mod&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d3d6f46fdd514a846567b73cebcab573f76645" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;package.module&lt;/code&gt; returns &lt;code&gt;module&lt;/code&gt; as a module object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc69118167301c3fec4123873d74f3b90992364" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.params&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.params&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a0ef8bba5a9b952bbe61eafa17758be092015166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse_auth(header)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#parse_auth&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;parse_auth(header)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#parse_auth&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3a6e6d4cb9edf3494a91620b199933dfef7eb78b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse_date(ims)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#parse_date&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;parse_date(ims)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#parse_date&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8f69f1d5341dbf5c1d477df36f44f243602b990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path_shift(script_name, path_info, shift=1)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#path_shift&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c3cb48603637dabd38c1dab915bff044e04587" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path_shift(shift=1)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.path_shift&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;path_shift(shift=1)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.path_shift&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb18eea3202bfa4020e59e7e3a15a811d123bf1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;post(path=None, method='POST', **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.post&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57439c4e20bcb721ee13d47019cfe63f1db22bed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prepare()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.prepare&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;prepare()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.prepare&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8900ab1a7ef8225fe854f9d9bfd2f6cecabc4cbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prepare(**options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.prepare&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;prepare(**options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.prepare&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62715489d6a74547151e47dd0f2e81edfa93dd3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push(value=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#AppStack.push&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;push(value=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#AppStack.push&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7358a8f9086835a0a4afff799f2fb6ebbe41a0d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;put(path=None, method='PUT', **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.put&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d313d9acf8e7f00000c22cda770bb5c44deb0ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;query&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.query&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;query&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.query&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="573f4d58c8fd8ec9fc9de60bfc333470dcd40cec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;raw(key, default=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#WSGIHeaderDict.raw&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7d12788386ffaa780d697a73a54941de8a7130" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remove_hook(name, func)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.remove_hook&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04628115930c6ba2a2f5c64af64d5501694bc6f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render(*args, **kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseTemplate.render&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71317b31ded07a68325b8ed3036c1b81c9ef8096" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render(*args, **kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#SimpleTemplate.render&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939f0c5a29dbe4ee07a1fd4797eae45aa83462bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;replace(key, value)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#MultiDict.replace&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d509dc8d73780227829b99be6e77e4adc2a5a04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reset()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.reset&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;reset()&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Route.reset&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="bb2962d43ae13894118b8f823fa33ae9b9689a48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reset(route=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.reset&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;reset(route=None)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.reset&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="aa21219f7d4e0784d486f43cdf3b6fb7722a9727" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route(path=None, method='GET', callback=None, name=None, apply=None, skip=None, **config)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.route&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4022bb7b984cbfd1962e5f736cd0421354b5c509" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;route&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.route&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;route&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.route&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="dc4e14c63ca132b56f075522556aeef7acc6eceb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run(**kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.run&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;run(**kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.run&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c13cc23be866d8facb6f9af681bb6a8c5567468" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run(app=None, server='wsgiref', host='127.0.0.1', port=8080, interval=1, reloader=False, quiet=False, plugins=None, debug=None, **kargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#run&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988beada1a6d632eb084bcc415f9a83857af7713" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save(destination, overwrite=False, chunk_size=65536)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#FileUpload.save&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516edc138ab8832a06056b93eb9a2ef3bc3764a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_cookie(name, value, secret=None, **options)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.set_cookie&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861838a2f9a1448767fc3e9fa8684ddf4755daf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_header(name, value)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseResponse.set_header&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7edca82f816c7de4be8039c9f64b71d9148f940" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;template(*args, **kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#template&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cf5560bd2c39cb4ac5df94962472b6c9bbc921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trigger_hook(_Bottle__name, *args, **kwargs)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.trigger_hook&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23dabee021501cf97a05b14c7d0345243914d317" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uninstall(plugin)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.uninstall&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;uninstall(plugin)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.uninstall&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="904a4733fd6c935655473f88d7c0d76873bddc9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update(*a, **ka)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#ConfigDict.update&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f199c1333a56fe43efc9be972bf967ca8199c662" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url_args&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.url_args&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;url_args&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.url_args&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c33ba4052f09a4bdd2232a86a22dae1c8221ee8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;urlparts&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.urlparts&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;urlparts&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#BaseRequest.urlparts&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0b42047311eeb78a20d4e181f05f2e615d11db1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;view(tpl_name, **defaults)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#view&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0681bf11df7643ee4e7441689e87bdef69c65dda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wsgi(environ, start_response)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#Bottle.wsgi&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b5a22f20842fe7f70c2259d62b309edb585e10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yieldroutes(func)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#yieldroutes&quot;&gt;[source]&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;yieldroutes(func)&lt;/code&gt;&lt;a href=&quot;https://bottlepy.org/docs/0.12/_modules/bottle.html#yieldroutes&quot;&gt;[source]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="660796cdc985277645c1fb1fce8c4b7e7956423d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:float&lt;/strong&gt; similar to :int but for decimal numbers.</source>
          <target state="translated">&lt;strong&gt;:float&lt;/strong&gt; similar to :int but for decimal numbers.</target>
        </trans-unit>
        <trans-unit id="32be2b11e29b4bf0680cd4271f5913572d7f76a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:int&lt;/strong&gt; matches (signed) digits and converts the value to integer.</source>
          <target state="translated">&lt;strong&gt;:int&lt;/strong&gt; matches (signed) digits and converts the value to integer.</target>
        </trans-unit>
        <trans-unit id="bc3d745507b5e4c61e8638bafc918157b12d6dd2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:int&lt;/strong&gt; matches (signed) digits only and converts the value to integer.</source>
          <target state="translated">&lt;strong&gt;:int&lt;/strong&gt; matches (signed) digits only and converts the value to integer.</target>
        </trans-unit>
        <trans-unit id="4d9c62bad5b2593d0f69da8aa3ce7d990a98b189" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:path&lt;/strong&gt; matches all characters including the slash character in a non-greedy way and can be used to match more than one path segment.</source>
          <target state="translated">&lt;strong&gt;:path&lt;/strong&gt; matches all characters including the slash character in a non-greedy way and can be used to match more than one path segment.</target>
        </trans-unit>
        <trans-unit id="373ba2faeafd16bafd12ad8e642ead4cf612375b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:path&lt;/strong&gt; matches all characters including the slash character in a non-greedy way and may be used to match more than one path segment.</source>
          <target state="translated">&lt;strong&gt;:path&lt;/strong&gt; matches all characters including the slash character in a non-greedy way and may be used to match more than one path segment.</target>
        </trans-unit>
        <trans-unit id="59afaa3747518a55a40979affa93d241c1bfb0d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:re&lt;/strong&gt; allows you to specify a custom regular expression in the config field. The matched value is not modified.</source>
          <target state="translated">&lt;strong&gt;:re&lt;/strong&gt; allows you to specify a custom regular expression in the config field. The matched value is not modified.</target>
        </trans-unit>
        <trans-unit id="c37286e2e8d3af3c1239d1506fb95230e1fb346f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;:re[:exp]&lt;/strong&gt; allows you to specify a custom regular expression in the config field. The matched value is not modified.</source>
          <target state="translated">&lt;strong&gt;:re[:exp]&lt;/strong&gt; allows you to specify a custom regular expression in the config field. The matched value is not modified.</target>
        </trans-unit>
        <trans-unit id="2671ed29fc6e42c63e1d2de8f2112ab036f63b21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Asynchronous&lt;/strong&gt; servers are very fast, can handle a virtually unlimited number of concurrent connections and are easy to manage, but can get a bit tricky. To take full advantage of their potential, you need to design your application accordingly and understand the concepts of the specific server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90186f3d956f7a6b1e804e582e6983afa2bb6329" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Attribute access&lt;/strong&gt;: All values in the dictionary are also accessible as attributes. These virtual attributes return unicode strings, even if the value is missing or unicode decoding fails. In that case, the string is empty, but still present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7582f5a34222277360efc50534481e62bcdd90ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bottle 0.10 API 2&lt;/strong&gt; (&lt;a href=&quot;#bottle.Plugin.api&quot;&gt;&lt;code&gt;Plugin.api&lt;/code&gt;&lt;/a&gt; equals 2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186960be9f7c7c39b4885786106da4401e64379a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bottle 0.9 API 1&lt;/strong&gt; (&lt;a href=&quot;#bottle.Plugin.api&quot;&gt;&lt;code&gt;Plugin.api&lt;/code&gt;&lt;/a&gt; not present)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec7ce5042e38e8cc11948c0fb48a0687e4f2de8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Indentation is ignored.&lt;/strong&gt; You can put as much whitespace in front of statements as you want. This allows you to align your code with the surrounding markup and can greatly improve readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ecadc836f1d1f23721d347dd114eb36420dd9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multi-processing&lt;/strong&gt; (forking) servers are not limited by the GIL and utilize more than one CPU core, but make communication between server instances more expensive. You need a database or external message query to share state between processes, or design your application so that it does not need any shared state. The setup is also a bit more complicated, but there are good tutorials available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675ca4fc40af992e8821a1ae2f289444d70258ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multi-threaded&lt;/strong&gt; servers are the &amp;lsquo;classic&amp;rsquo; way to do it. They are very robust, reasonably fast and easy to manage. As a drawback, they can only handle a limited number of connections at the same time and utilize only one CPU core due to the &amp;ldquo;Global Interpreter Lock&amp;rdquo; (GIL). This does not hurt most applications, they are waiting for network IO most of the time anyway, but may slow down CPU intensive tasks (e.g. image processing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb69460810f92e72ee117c9607bb03af77eba39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multiple values per key:&lt;/strong&gt;&lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;api#bottle.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; and can store more than one value per key. The standard dictionary access methods will only return a single value, but the &lt;a href=&quot;api#bottle.MultiDict.getall&quot;&gt;&lt;code&gt;getall()&lt;/code&gt;&lt;/a&gt; method returns a (possibly empty) list of all values for a specific key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d723f45447fde3218aba8c417ad7e8545656166" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Routing:&lt;/strong&gt; Requests to function-call mapping with support for clean and dynamic URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef16941f9dc0fb64161f914426fca69febe8f952" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server:&lt;/strong&gt; Built-in HTTP development server and support for &lt;a href=&quot;http://pythonpaste.org/&quot;&gt;paste&lt;/a&gt;, &lt;a href=&quot;https://github.com/william-os4y/fapws3&quot;&gt;fapws3&lt;/a&gt;, &lt;a href=&quot;https://github.com/jonashaag/bjoern&quot;&gt;bjoern&lt;/a&gt;, &lt;a href=&quot;http://code.google.com/intl/en-US/appengine/&quot;&gt;Google App Engine&lt;/a&gt;, &lt;a href=&quot;http://www.cherrypy.org/&quot;&gt;cherrypy&lt;/a&gt; or any other &lt;a href=&quot;http://www.wsgi.org/&quot;&gt;WSGI&lt;/a&gt; capable HTTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71d0e1e9e16355059168b8dad580cfe0bd227f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Templates:&lt;/strong&gt; Fast and pythonic &lt;a href=&quot;tutorial#tutorial-templates&quot;&gt;built-in template engine&lt;/a&gt; and support for &lt;a href=&quot;http://www.makotemplates.org/&quot;&gt;mako&lt;/a&gt;, &lt;a href=&quot;http://jinja.pocoo.org/&quot;&gt;jinja2&lt;/a&gt; and &lt;a href=&quot;http://www.cheetahtemplate.org/&quot;&gt;cheetah&lt;/a&gt; templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539fee4c6355bebb0419571bc57b065236698cd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Utilities:&lt;/strong&gt; Convenient access to form data, file uploads, cookies, headers and other HTTP-related metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482a0d11f9822c3c238a12b8f56263f038fbbf7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WTForms support:&lt;/strong&gt; Some libraries (e.g. &lt;a href=&quot;http://wtforms.simplecodes.com/&quot;&gt;WTForms&lt;/a&gt;) want all-unicode dictionaries as input. &lt;a href=&quot;api#bottle.FormsDict.decode&quot;&gt;&lt;code&gt;FormsDict.decode()&lt;/code&gt;&lt;/a&gt; does that for you. It decodes all values and returns a copy of itself, while preserving multiple values per key and all the other features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee983f06f27c7d3328cdb084fb7894689ae219c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; WSGI application or target string supported by &lt;a href=&quot;#bottle.load_app&quot;&gt;&lt;code&gt;load_app()&lt;/code&gt;&lt;/a&gt;. (default: &lt;a href=&quot;#bottle.default_app&quot;&gt;&lt;code&gt;default_app()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665296351d3367f07c9ef87bd95fdf9096212225" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt; &amp;ndash; an instance of &lt;a href=&quot;#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; or a WSGI application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bad86b48bf99ff8bf206cf1a0b819448b0023f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apply&lt;/strong&gt; &amp;ndash; A decorator or plugin or a list of plugins. These are applied to the route callback in addition to installed plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5baf1be5f2218fb486ad07db2ff251749180d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base&lt;/strong&gt; &amp;ndash; Path used to absolutize relative search paths. Defaults to &lt;code&gt;base&lt;/code&gt; which defaults to &lt;code&gt;os.getcwd()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8e7cf045317763591d020857018d721eefd6b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base&lt;/strong&gt; &amp;ndash; default value for &lt;a href=&quot;#bottle.ResourceManager.add_path&quot;&gt;&lt;code&gt;add_path()&lt;/code&gt;&lt;/a&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23df86e11102184dcdba81a49544934b3dede326" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;body&lt;/strong&gt; &amp;ndash; The response body as one of the supported types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce10a11aa8f9a65bbe2886cd7135e70df7fdf78f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cachemode&lt;/strong&gt; &amp;ndash; controls which lookups are cached. One of &amp;lsquo;all&amp;rsquo;, &amp;lsquo;found&amp;rsquo; or &amp;lsquo;none&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad50b9c75f0376714080f56445ae48a1662053c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;callback&lt;/strong&gt; &amp;ndash; An optional shortcut to avoid the decorator syntax. &lt;code&gt;route(..., callback=func)&lt;/code&gt; equals &lt;code&gt;route(...)(func)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875a8582a2bf22fe17e244725fede8933f92285e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;catchall&lt;/strong&gt; &amp;ndash; If true (default), handle all exceptions. Turn off to let debugging middleware handle exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8748cc9d691441bacefb2dc9b93636b8fe2446" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chunk_size&lt;/strong&gt; &amp;ndash; Bytes to read at a time. (default: 64kb)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f876a49244774e3f759c78a97c3ab726acd7d5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt; &amp;ndash; The default value to be returned if the key is not present or the type conversion fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4031059deabc7aa7180a9096b402fa5945b85727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;destination&lt;/strong&gt; &amp;ndash; File path, directory or file(-like) object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d40c4d082ebce504e08a6ef20a133e52f1e0c4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain:&lt;/strong&gt; The domain that is allowed to read the cookie. (default: current domain)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c4cfd46a3f16dbe5f518c5b28c51f5f6091a4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;domain&lt;/strong&gt; &amp;ndash; the domain that is allowed to read the cookie. (default: current domain)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ee15b013fe47fa0d52f685848536f72bfed397" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires:&lt;/strong&gt; A datetime object or UNIX timestamp. (default: &lt;code&gt;None&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0fc075a46979b157fa96e0ad850c3616af5798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expires&lt;/strong&gt; &amp;ndash; a datetime object or UNIX timestamp. (default: None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21b9d4d8b75291cced8190de665de755715def7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers&lt;/strong&gt; &amp;ndash; A dictionary or a list of name-value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c605ff74d4c9cf976f3134dcfc6ee668601a30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;host&lt;/strong&gt; &amp;ndash; Server address to bind to. Pass &lt;code&gt;0.0.0.0&lt;/code&gt; to listens on all interfaces including the external one. (default: 127.0.0.1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc6a3c3ec8a8c09a6e934d58af3d36ade0ec5b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;httponly:&lt;/strong&gt; Prevent client-side javascript to read this cookie (default: off, requires Python 2.6 or newer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c0470011682a5f55fdd006b6c02a2dfb802088" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;httponly&lt;/strong&gt; &amp;ndash; prevents client-side javascript to read this cookie (default: off, requires Python 2.6 or newer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5ebb4afcd361986245c1ad07c66eea4b3a48f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index&lt;/strong&gt; &amp;ndash; An index for the list of available values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fed23ef853e2a75267f762ec58b412c54030ca7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;index&lt;/strong&gt; &amp;ndash; Position within the list of search paths. Defaults to last index (appends to the list).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76792512cf8f566c96a91f8ef310757c8fd39c10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;interval&lt;/strong&gt; &amp;ndash; Auto-reloader interval in seconds (default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64fd1bc99b5ad6a52dee39855b0ed4eaef55d82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_age:&lt;/strong&gt; Maximum age in seconds. (default: &lt;code&gt;None&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9c81fcbbe7b885aadc034c6f767c9e713ccf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max_age&lt;/strong&gt; &amp;ndash; maximum age in seconds. (default: None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc77303864437bb8c2b2d6279f49d7f3f98e1648" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;method&lt;/strong&gt; &amp;ndash; HTTP method (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, ...) or a list of methods to listen to. (default: &lt;code&gt;GET&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d5ad4f564f565188bf7e90983167def8b82ef1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; The name for this route. (default: None)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c7e6c6d00e1b9f00cb4380ddc5aa9757671b34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; &amp;ndash; the name of the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0647ecf8b4fa337b9c23f4299ed820f5d22b800e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;opener&lt;/strong&gt; &amp;ndash; callable used to open resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e97daa47c7130837587279bbde4704ed23a86cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt; &amp;ndash; Options passed to the server adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21419ae8f53185a7d12a5706e7787442e78ed237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;overwrite&lt;/strong&gt; &amp;ndash; If True, replace existing files. (default: False)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e9ab23ecda254db3dc299b6dd06ddbae050f3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path:&lt;/strong&gt; Limit the cookie to a given path (default: &lt;code&gt;/&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd4b4d6e2f6ea2f28ead479def08a0e861361f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; Request path or a list of paths to listen to. If no path is specified, it is automatically generated from the signature of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c99e79cba42be9026a359a64d691610ec015d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; The new search path. Relative paths are turned into an absolute and normalized form. If the path looks like a file (not ending in &lt;code&gt;/&lt;/code&gt;), the filename is stripped off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa024554a425e59f78bd80b5645bb625c9a406d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;path&lt;/strong&gt; &amp;ndash; limits the cookie to a given path (default: current path)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8869e95e9a788c4661423a9b2b9570597c14cea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port&lt;/strong&gt; &amp;ndash; Server port to bind to. Values below 1024 require root privileges. (default: 8080)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8e8a0a10ccf26037c283bf85f2d749053152f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prefix&lt;/strong&gt; &amp;ndash; path prefix or &lt;code&gt;mount-point&lt;/code&gt;. If it ends in a slash, that slash is mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12674dd83fa36b4c99763dbb3465a2ec3c33921b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;quiet&lt;/strong&gt; &amp;ndash; Suppress output to stdout and stderr? (default: False)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad40532209fa30379b80a3b58d0c00715bef5079" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reloader&lt;/strong&gt; &amp;ndash; Start auto-reloading server? (default: False)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8c0a3307141d4a9967acbc663f34e278f0c6fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;script_name&lt;/strong&gt; &amp;ndash; The PATH_INFO path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd467bf2102c8f279a256a2465214cb36893268" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;script_name&lt;/strong&gt; &amp;ndash; The SCRIPT_NAME path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f18a077f7915acd098934af3e50e9b0e709da6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secret&lt;/strong&gt; &amp;ndash; a signature key required for signed cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c113622131d00a0e7439dc856d0d244776fbe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure:&lt;/strong&gt; Limit the cookie to HTTPS connections (default: off).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf7efaf9d90ecd61527ec6270058bc049793a08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;secure&lt;/strong&gt; &amp;ndash; limit the cookie to HTTPS connections (default: off).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3b606fc561c5723959d9c0ae1b710c1921dc28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;server&lt;/strong&gt; &amp;ndash; Server adapter to use. See &lt;code&gt;server_names&lt;/code&gt; keys for valid names or pass a &lt;code&gt;ServerAdapter&lt;/code&gt; subclass. (default: &lt;code&gt;wsgiref&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9f1c4fca776c464f440940a17022fc0b83a535" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shift&lt;/strong&gt; &amp;ndash; The number of path fragments to shift. May be negative to change the shift direction. (default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8f29e50f985bfde6448ed51e1c9b1664c7e24c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shift&lt;/strong&gt; &amp;ndash; The number of path segments to shift. May be negative to change the shift direction. (default: 1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed40f883621c3e876e4fc993dc9e593c17cdc7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;skip&lt;/strong&gt; &amp;ndash; A list of plugins, plugin classes or names. Matching plugins are not installed to this route. &lt;code&gt;True&lt;/code&gt; skips all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86560c3f8cd8869c02f851c29662e1a3dc12c54d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;status&lt;/strong&gt; &amp;ndash; Either an HTTP status code (e.g. 200) or a status line including the reason phrase (e.g. &amp;lsquo;200 OK&amp;rsquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4697992939bfd9b04ac5d996bbfead3c350a4ee8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt; &amp;ndash; If defined, this callable is used to cast the value into a specific type. Exception are suppressed and result in the default value to be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5037fc2f8c82bc073044c9938dfef0ed80d7b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;value&lt;/strong&gt; &amp;ndash; the value of the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864c1f2ba5be5a4c4c79c55990c0bcd97ae57f8b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt; with the combined values of &lt;a href=&quot;#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bottle.BaseRequest.forms&quot;&gt;&lt;code&gt;forms&lt;/code&gt;&lt;/a&gt;. File uploads are stored in &lt;a href=&quot;#bottle.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5228b1c366b7bf1b67c9482c82978152a2348d98" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#bottle.HeaderDict&quot;&gt;&lt;code&gt;HeaderDict&lt;/code&gt;&lt;/a&gt; with additional headers (e.g. content-type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9e27614d08ada2b2989710e36a6c722f0183b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#bottle.ResourceManager&quot;&gt;&lt;code&gt;ResourceManager&lt;/code&gt;&lt;/a&gt; for application files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dace9595d991b7af266afdc8fa3468292ccf4ef3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#bottle.WSGIHeaderDict&quot;&gt;&lt;code&gt;WSGIHeaderDict&lt;/code&gt;&lt;/a&gt; that provides case-insensitive access to HTTP request headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67bfddb5d565a22e32385803c7e9ce5093c3c23" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;configuration#bottle.ConfigDict&quot;&gt;&lt;code&gt;ConfigDict&lt;/code&gt;&lt;/a&gt; for app specific configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b4d5998fcd4d0e768bc858f5b32d6dfa5a2fee" translate="yes" xml:space="preserve">
          <source>A CGI server starts a new process for each request. This adds a lot of overhead but is sometimes the only option, especially on cheap hosting packages. The &lt;code&gt;cgi&lt;/code&gt; server adapter does not actually start a CGI server, but transforms your bottle application into a valid CGI application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f1d731fc66b7ec4b5df4308d56774ae123d220" translate="yes" xml:space="preserve">
          <source>A base class for exceptions used by bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61994544e80f36a62faad4976aaf9426fd52223a" translate="yes" xml:space="preserve">
          <source>A cache for resolved paths. &lt;code&gt;res.cache.clear()&lt;/code&gt; clears the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa43006a46c919143d7cda6a21715b1d3f31c2c" translate="yes" xml:space="preserve">
          <source>A callable that accepts and returns a single value. If a filter is defined for a key, any new value stored to that key is first passed through the filter callback. The filter can be used to cast the value to a different type, check for invalid values (throw a ValueError) or trigger side effects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7839a851179d8e47c4ba667ce49137b974d538a" translate="yes" xml:space="preserve">
          <source>A case-insensitive version of &lt;a href=&quot;#bottle.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; that defaults to replace the old value instead of appending it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa82101d00f36aa917b5b70cf6374213d73aa2b" translate="yes" xml:space="preserve">
          <source>A collection of articles, guides and HOWTOs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e57ae5387643d6d5f328742163a205c0cbdc328" translate="yes" xml:space="preserve">
          <source>A common feature request is for Bottle to support Gzip compression, which speeds up sites by compressing static resources (like CSS and JS files) during a request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e532901c921becef4cafb731854cf07b295f4e" translate="yes" xml:space="preserve">
          <source>A cookie is a named piece of text stored in the user&amp;rsquo;s browser profile. You can access previously defined cookies via &lt;code&gt;Request.get_cookie()&lt;/code&gt; and set new cookies with &lt;code&gt;Response.set_cookie()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9006754bc6580f0c66f1fa6ef0de21f08053d5" translate="yes" xml:space="preserve">
          <source>A decorator to bind a function to a request URL. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670fac738c60c791862bd3eeb9154e5fa5065e56" translate="yes" xml:space="preserve">
          <source>A dict to map HTTP status codes (e.g. 404) to phrases (e.g. &amp;lsquo;Not Found&amp;rsquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91d85db683d3f8c658b9852e272a150b1317e57" translate="yes" xml:space="preserve">
          <source>A dict-like configuration storage with additional support for namespaces, validators, meta-data, on_change listeners and more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea85b621eb63b0f62d7628db5e70b0d3f274089" translate="yes" xml:space="preserve">
          <source>A function returning another function, usually applied as a function transformation using the &lt;code&gt;@decorator&lt;/code&gt; syntax. See &lt;a href=&quot;http://docs.python.org/reference/compound_stmts.html#function&quot;&gt;python documentation for function definition&lt;/a&gt; for more about decorators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb2e683160814f75b3b82efaaa4db810a641a9e" translate="yes" xml:space="preserve">
          <source>A function to handle some specific event or situation. In a web framework, the application is developed by attaching a handler function as callback for each specific URL comprising the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5055305b851efcf914ad39063d5bbe8a3ce933e" translate="yes" xml:space="preserve">
          <source>A help or description string. May be used by debugging, introspection or admin tools to help the site maintainer configuring their application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c28222f1d1e941c6983d761db00938f0d7e7ee9" translate="yes" xml:space="preserve">
          <source>A last word on dynamic routes: you can even use a regular expression for a dynamic route, as demonstrated later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748b51a8fcd132349ac6cc50ced5695b70b21c6a" translate="yes" xml:space="preserve">
          <source>A list of all IPs that were involved in this request, starting with the client IP and followed by zero or more proxies. This does only work if all proxies support the &lt;code&gt;`X-Forwarded-For&lt;/code&gt; header. Note that this information can be forged by malicious clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b1fd60939ac90a33b59d7f7eb400c4a50be422" translate="yes" xml:space="preserve">
          <source>A list of plugins to not apply to this route (again, see &lt;a href=&quot;api#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68094cdb4107c9bc23922773239d2ef3f7fe4ea0" translate="yes" xml:space="preserve">
          <source>A list of plugins to not apply to this route (see &lt;a href=&quot;#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f257ed006eb9bfdf0898467fd8a74e58c9506719" translate="yes" xml:space="preserve">
          <source>A list of route-specific plugins (see &lt;a href=&quot;#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746179ddc0ff77d628a3b45eabf438fa8196cf46" translate="yes" xml:space="preserve">
          <source>A list of route-specific plugins. These are applied in addition to application-wide plugins. (see &lt;a href=&quot;api#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78974c721301ea78b0dec2065b5a1d4d75cb50c9" translate="yes" xml:space="preserve">
          <source>A list of search paths. See &lt;a href=&quot;#bottle.ResourceManager.add_path&quot;&gt;&lt;code&gt;add_path()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f008143ebfb595911a35d8416cafff386edb2fe1" translate="yes" xml:space="preserve">
          <source>A reusable app that serves static files for bottle apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d274427de1c6a0a03321fe4c9f4d3b2db9c1332f" translate="yes" xml:space="preserve">
          <source>A simple example using &lt;a href=&quot;http://readthedocs.org/docs/nose&quot;&gt;Nose&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6341a1da4a099fc10eeee93e5c498c67541a0a" translate="yes" xml:space="preserve">
          <source>A single Python process can utilize only one CPU at a time, even if there are more CPU cores available. The trick is to balance the load between multiple independent Python processes to utilize all of your CPU cores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd79df7c9f86255a89991d062516a98258dc9f7" translate="yes" xml:space="preserve">
          <source>A stack-like list. Calling it returns the head of the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9ff8b54da0977cca3daef12e3c4d8770243f19" translate="yes" xml:space="preserve">
          <source>A structure where information about all documents under the root is saved, and used for cross-referencing. The environment is pickled after the parsing stage, so that successive runs only need to read and parse new and changed documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd57ae433f615feb7593a68b10b96a41cd4fcb7" translate="yes" xml:space="preserve">
          <source>A thread-local subclass of &lt;a href=&quot;#bottle.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; with a different set of attributes for each thread. There is usually only one global instance of this class (&lt;a href=&quot;#bottle.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt;). If accessed during a request/response cycle, this instance always refers to the &lt;em&gt;current&lt;/em&gt; request (even on a multithreaded server).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873c5d7b675586445daf1e953c4b4dc7fb353c57" translate="yes" xml:space="preserve">
          <source>A thread-local subclass of &lt;a href=&quot;#bottle.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt; with a different set of attributes for each thread. There is usually only one global instance of this class (&lt;a href=&quot;#bottle.response&quot;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt;). Its attributes are used to build the HTTP response at the end of the request/response cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eadb3af9d72a7aad5e4ac16e373ae43826904dd" translate="yes" xml:space="preserve">
          <source>A thread-safe instance of &lt;a href=&quot;#bottle.LocalRequest&quot;&gt;&lt;code&gt;LocalRequest&lt;/code&gt;&lt;/a&gt;. If accessed from within a request callback, this instance always refers to the &lt;em&gt;current&lt;/em&gt; request (even on a multithreaded server).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3e9cc81c28914aee2225c88503a067c956946f" translate="yes" xml:space="preserve">
          <source>A thread-safe instance of &lt;a href=&quot;#bottle.LocalResponse&quot;&gt;&lt;code&gt;LocalResponse&lt;/code&gt;&lt;/a&gt;. It is used to change the HTTP response for the &lt;em&gt;current&lt;/em&gt; request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b52a88d4d4dc62ee89a3e53608c37eb5a8887b" translate="yes" xml:space="preserve">
          <source>A very common design pattern in asynchronous frameworks (including tornado, twisted, node.js and friends) is to use non-blocking APIs and bind callbacks to asynchronous events. The socket object is kept open until it is closed explicitly to allow callbacks to write to the socket at a later point. Here is an example based on the &lt;a href=&quot;http://www.tornadoweb.org/documentation#non-blocking-asynchronous-requests&quot;&gt;tornado library&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d056d174cb30c624d92d0712001de0b42d15013" translate="yes" xml:space="preserve">
          <source>A wrapper for WSGI environment dictionaries that adds a lot of convenient access methods and properties. Most of them are read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce20541918e737577d011e39e911817bdb79301" translate="yes" xml:space="preserve">
          <source>A writeable property to change the HTTP response status. It accepts either a numeric code (100-999) or a string with a custom reason phrase (e.g. &amp;ldquo;404 Brain not found&amp;rdquo;). Both &lt;a href=&quot;#bottle.BaseResponse.status_line&quot;&gt;&lt;code&gt;status_line&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bottle.BaseResponse.status_code&quot;&gt;&lt;code&gt;status_code&lt;/code&gt;&lt;/a&gt; are updated accordingly. The return value is always a status string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674463a63b833f2ee17f1bbb198b28a2cbb90be6" translate="yes" xml:space="preserve">
          <source>API Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1f97eeb87ccfcd02c43364c2edd400211fd9d8" translate="yes" xml:space="preserve">
          <source>About Bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c022f0244bc5996020e8d65a55606ad3f59406" translate="yes" xml:space="preserve">
          <source>Accessing undefined variables in a template raises &lt;code&gt;NameError&lt;/code&gt; and stops rendering immediately. This is standard python behavior and nothing new, but vanilla python lacks an easy way to check the availability of a variable. This quickly gets annoying if you want to support flexible inputs or use the same template in different situations. These functions may help:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f2de2700032ef3c91887bf3ea5bd38d109ea10" translate="yes" xml:space="preserve">
          <source>Actually Bottle expects to receive a string or a list of strings from a function and returns them by the help of the built-in server to the browser. Bottle does not bother about the content of the string itself, so it can be text formatted with HTML markup, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c17b8b900033c52be55fe209784cf7f033dc6c3" translate="yes" xml:space="preserve">
          <source>Actually you can bind more than one route to a function. So the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d759580743cdc5ba6267111eba4802f2b21a8c51" translate="yes" xml:space="preserve">
          <source>Actually, the output is not really exciting nor nice to read. It is the raw result returned from the SQL query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e4768408878c6d208cc5c359106d8cad8ae51a" translate="yes" xml:space="preserve">
          <source>Add a new &lt;a href=&quot;#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; instance to the stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc4c78b645dac3e6897155d12d83e5d61b9503a" translate="yes" xml:space="preserve">
          <source>Add a new path to the list of search paths. Return False if the path does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce4564811d8e328286a83fc5d290b1b8982d86a" translate="yes" xml:space="preserve">
          <source>Add a new value to the list of values for this key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729395e3e0b714a7946bdeedd72b1d4bb0bd068e" translate="yes" xml:space="preserve">
          <source>Add a plugin to the list of plugins and prepare it for being applied to all routes of this application. A plugin may be a simple decorator or an object that implements the &lt;a href=&quot;plugindev#bottle.Plugin&quot;&gt;&lt;code&gt;Plugin&lt;/code&gt;&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e9840787231178d5a71aa98953c5a147153eba" translate="yes" xml:space="preserve">
          <source>Add a route object, but do not change the &lt;a href=&quot;#bottle.Route.app&quot;&gt;&lt;code&gt;Route.app&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9144718438798c48068816c04757fb425eb22a60" translate="yes" xml:space="preserve">
          <source>Add an additional response header, not removing duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c27efe59a9e58f793cbf9c745f263b068c39922" translate="yes" xml:space="preserve">
          <source>Adding new attributes to a request actually adds them to the environ dictionary (as &amp;lsquo;bottle.request.ext.&amp;lt;name&amp;gt;&amp;rsquo;). This is the recommended way to store and access request-specific data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d201f5392ae3b7968bc7892c9d7963c586868e6d" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments are added to the list of headers. Underscores in the header name are replaced with dashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae58b0b018cf2c5f16599802421a5bacaba67bda" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments passed to the &lt;a href=&quot;#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt; decorator are stored in this dictionary. Used for route-specific plugin configuration and meta-data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1c5374d2300155b099fc445e29cb9b9284d2e4" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments passed to the &lt;a href=&quot;api#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt; decorator are stored in this dictionary. Used for route-specific configuration and meta-data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0ff699da0d93538c8e94ad7aa3adbb10314b61" translate="yes" xml:space="preserve">
          <source>Additionally, the non-standard ANY method works as a low priority fallback: Routes that listen to ANY will match requests regardless of their HTTP method but only if no other more specific route is defined. This is helpful for &lt;em&gt;proxy-routes&lt;/em&gt; that redirect requests to more specific sub-applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9401d619da83c5c8e72692d6c34c4977ee6edf60" translate="yes" xml:space="preserve">
          <source>Additionally, this method accepts all RFC 2109 attributes that are supported by &lt;code&gt;cookie.Morsel&lt;/code&gt;, including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba3a7f0dd42abee4834ba221db7e986f97e0ba7" translate="yes" xml:space="preserve">
          <source>After going through all the sections above, you should have a brief understanding how the Bottle WSGI framework works. Furthermore you have all the knowledge necessary to use Bottle for your applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6180bbf726723df86bcc12672bd25fae638808a8" translate="yes" xml:space="preserve">
          <source>After restarting the server, your ToDo list should be accessible at &lt;code&gt;http://www.mypage.com/todo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3f06d506d71983a04339236ad25c66ec3b0f96" translate="yes" xml:space="preserve">
          <source>After that, create a file called &lt;code&gt;adapter.wsgi&lt;/code&gt; with the following content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2e4d1b792dcc5204b88c81573c0ba8f6306a9b" translate="yes" xml:space="preserve">
          <source>Again, the feature is mainly supposed to be used while developing, not on production systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229a039d751c5e5adbb765e388fc530ba20e1f38" translate="yes" xml:space="preserve">
          <source>Again, this is not the recommend way to implement subprojects. It is only here because many people asked for this and to show how bottle maps to WSGI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d430f449f10a615997b21f4dea7823e45cf6da" translate="yes" xml:space="preserve">
          <source>Again, this template is a mix of Python statements and HTML, as already explained above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8add7b238d02088b100724861bae7e1a15cc2715" translate="yes" xml:space="preserve">
          <source>Again, you can assign more than one error-route to a function, or catch various errors with one function each. So this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd7774b0c4cd040152abbe64aedba84f5d71f52" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#bottle.BaseRequest.is_xhr&quot;&gt;&lt;code&gt;is_xhr&lt;/code&gt;&lt;/a&gt;. &amp;ldquo;Ajax&amp;rdquo; is not the right term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d68bb30b7ea2083e869fef8a8626daf975c216" translate="yes" xml:space="preserve">
          <source>Aliases for WTForms to mimic other multi-dict APIs (Django)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803e26494bedbe15d455b0df378b26f624937f04" translate="yes" xml:space="preserve">
          <source>All HTTP headers sent by the client (e.g. &lt;code&gt;Referer&lt;/code&gt;, &lt;code&gt;Agent&lt;/code&gt; or &lt;code&gt;Accept-Language&lt;/code&gt;) are stored in a &lt;a href=&quot;api#bottle.WSGIHeaderDict&quot;&gt;&lt;code&gt;WSGIHeaderDict&lt;/code&gt;&lt;/a&gt; and accessible through the &lt;a href=&quot;api#bottle.BaseRequest.headers&quot;&gt;&lt;code&gt;BaseRequest.headers&lt;/code&gt;&lt;/a&gt; attribute. A &lt;a href=&quot;api#bottle.WSGIHeaderDict&quot;&gt;&lt;code&gt;WSGIHeaderDict&lt;/code&gt;&lt;/a&gt; is basically a dictionary with case-insensitive keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8dd9493da7eaf211da29fdbd7dfba40dbd2332" translate="yes" xml:space="preserve">
          <source>All cookies sent by the client are available through &lt;a href=&quot;api#bottle.BaseRequest.cookies&quot;&gt;&lt;code&gt;BaseRequest.cookies&lt;/code&gt;&lt;/a&gt; (a &lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;). This example shows a simple cookie-based view counter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bcc226af88ebd7d8f056f7a0ff237abd1b8206" translate="yes" xml:space="preserve">
          <source>All exceptions other than &lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; will result in a &lt;code&gt;500 Internal Server Error&lt;/code&gt; response, so they won&amp;rsquo;t crash your WSGI server. You can turn off this behavior to handle exceptions in your middleware by setting &lt;code&gt;bottle.app().catchall&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813864be889d793f004a3dbb76494185af0eb707" translate="yes" xml:space="preserve">
          <source>All keys should be lowercase strings and follow the rules for python identifiers (no special characters but the underscore).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf4c6208a35b2b0e6b0fddb01a2ab1ef0f283c2" translate="yes" xml:space="preserve">
          <source>All other parameters are passed to the underlying &lt;a href=&quot;#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a820799fb2dc81d52937b594ae27980eae1a0f5f" translate="yes" xml:space="preserve">
          <source>All template engines supported by &lt;a href=&quot;tutorial#module-bottle&quot;&gt;&lt;code&gt;bottle&lt;/code&gt;&lt;/a&gt; implement the &lt;a href=&quot;#bottle.BaseTemplate&quot;&gt;&lt;code&gt;BaseTemplate&lt;/code&gt;&lt;/a&gt; API. This way it is possible to switch and mix template engines without changing the application code at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3624879494960f2fabdd3417eb00d8ef6a10b47" translate="yes" xml:space="preserve">
          <source>All you need is an &lt;code&gt;app.wsgi&lt;/code&gt; file that provides an &lt;code&gt;application&lt;/code&gt; object. This object is used by mod_wsgi to start your application and should be a WSGI-compatible Python callable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6259799af800c753fb2e1eb4b130aaa7123296" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b9ecfe04c79380c02070eb058967174c60cf1e" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#bottle.HeaderDict&quot;&gt;&lt;code&gt;HeaderDict&lt;/code&gt;&lt;/a&gt;, a case-insensitive dict-like view on the response headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f696f7481111ce9c0194a16a10b9326c874697bd" translate="yes" xml:space="preserve">
          <source>Another quite nice feature is auto-reloading, which is enabled by modifying the &lt;code&gt;run()&lt;/code&gt; statement to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07beafc3303d96b92bd73addf0bd2cab9413aff" translate="yes" xml:space="preserve">
          <source>Another useful method is &lt;a href=&quot;#bottle.ConfigDict.load_dict&quot;&gt;&lt;code&gt;ConfigDict.load_dict()&lt;/code&gt;&lt;/a&gt;. This method takes an entire structure of nested dictionaries and turns it into a flat list of keys and values with namespaced keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4caf84a8d1a004e437a9b7a20696594c964c94e5" translate="yes" xml:space="preserve">
          <source>Any HTTP-based testing system can be used with a running WSGI server, but some testing frameworks work more intimately with WSGI, and provide the ability the call WSGI applications in a controlled environment, with tracebacks and full use of debugging tools. &lt;a href=&quot;http://www.wsgi.org/en/latest/testing.html&quot;&gt;Testing tools for WSGI&lt;/a&gt; is a good starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a403bc4222e6e96de5354e4b3bbedc3da9bac2" translate="yes" xml:space="preserve">
          <source>Any additional keyword arguments are stored as route-specific configuration and passed to plugins (see &lt;a href=&quot;plugindev#bottle.Plugin.apply&quot;&gt;&lt;code&gt;Plugin.apply()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6079505256693e2e1ba3434660b1909f915eaffd" translate="yes" xml:space="preserve">
          <source>Apache example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e677b05a72ad1f30a4dda7b5ba3e93ef937dd67a" translate="yes" xml:space="preserve">
          <source>Apache mod_wsgi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bf47fa7065cd3a303b306185031d0fdb73f9c0" translate="yes" xml:space="preserve">
          <source>AppStack</source>
          <target state="translated">AppStack</target>
        </trans-unit>
        <trans-unit id="b1c5e25692c634ad31458fa46c6c689452f79141" translate="yes" xml:space="preserve">
          <source>AppStack::pop()</source>
          <target state="translated">AppStack::pop()</target>
        </trans-unit>
        <trans-unit id="27d2abaf769fa242b5936d29c8fb45493573ccb3" translate="yes" xml:space="preserve">
          <source>AppStack::push()</source>
          <target state="translated">AppStack::push()</target>
        </trans-unit>
        <trans-unit id="8710216858c4331938e593713e117ecb63a4f285" translate="yes" xml:space="preserve">
          <source>Application-wide Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe1035537585a14dda6db8bb420a61c73649072" translate="yes" xml:space="preserve">
          <source>As an alternative, you can make use of the application stack to isolate your routes while still using the convenient shortcuts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57e0fb245cabdc389e5966ea56e380299237871" translate="yes" xml:space="preserve">
          <source>As long as &lt;a href=&quot;#bottle.Plugin.apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; is not defined, the plugin itself is used as a decorator and applied directly to each route callback. The only parameter is the callback to decorate. Whatever is returned by this method replaces the original callback. If there is no need to wrap or replace a given callback, just return the unmodified callback parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609aa26425443331b6abc9b9d34e5bc54437807a" translate="yes" xml:space="preserve">
          <source>As mentioned above, Python dictionaries (or subclasses thereof) are automatically transformed into JSON strings and returned to the browser with the &lt;code&gt;Content-Type&lt;/code&gt; header set to &lt;code&gt;application/json&lt;/code&gt;. This makes it easy to implement json-based APIs. Data formats other than json are supported too. See the tutorial-output-filter to learn more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72647bc83643fcf8933b6c6aaf3230f167985d82" translate="yes" xml:space="preserve">
          <source>As mentioned above, cookies are easily forged by malicious clients. Bottle can cryptographically sign your cookies to prevent this kind of manipulation. All you have to do is to provide a signature key via the &lt;code&gt;secret&lt;/code&gt; keyword argument whenever you read or set a cookie and keep that key a secret. As a result, &lt;code&gt;Request.get_cookie()&lt;/code&gt; will return &lt;code&gt;None&lt;/code&gt; if the cookie is not signed or the signature keys don&amp;rsquo;t match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988cade477f446eafc1f44cc9e588de1e8a3c4f6" translate="yes" xml:space="preserve">
          <source>As said above, the solution is a regular expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17745cc68adce15bb74e4c90b3a5071f43ed1bcb" translate="yes" xml:space="preserve">
          <source>As said above, the standard server is perfectly suitable for development, personal use or a small group of people only using your application based on Bottle. For larger tasks, the standard server may become a bottleneck, as it is single-threaded, thus it can only serve one request at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4413a894b8266162b773ab2eee4187f2eab58d6f" translate="yes" xml:space="preserve">
          <source>As said in the introduction, this tutorial is not showing all shades and possibilities of Bottle. What we skipped here is e.g. receiving file objects and streams and how to handle authentication data. Furthermore, we did not show how templates can be called from within another template. For an introduction into those points, please refer to the full &lt;a href=&quot;http://bottlepy.org/docs/dev/tutorial.html&quot;&gt;Bottle documentation&lt;/a&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7f687d791fc9c23c2afe7a073cde8a8f8e47e3" translate="yes" xml:space="preserve">
          <source>As standard, Bottle serves the pages on the IP adress 127.0.0.1, also known as &lt;code&gt;localhost&lt;/code&gt;, and on port &lt;code&gt;8080&lt;/code&gt;. To modify the setting is pretty simple, as additional parameters can be passed to Bottle&amp;rsquo;s &lt;code&gt;run()&lt;/code&gt; function to change the port and the address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9577ab526ccdd95237d25d64787e1d550b9b3da" translate="yes" xml:space="preserve">
          <source>As the ToDo list example was developed piece by piece, here is the complete listing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e856f3764593ebb9127ef66fab8f6f99a5aa034" translate="yes" xml:space="preserve">
          <source>As we can review all open items properly, we move to the next step, which is adding new items to the ToDo list. The new item should be received from a regular HTML-based form, which sends its data by the GET method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eac23c1c8576810596205da855e501573f1c6b1" translate="yes" xml:space="preserve">
          <source>As we use SQLite3 as a database, make sure it is installed. On Linux systems, most distributions have SQLite3 installed by default. SQLite is available for Windows and MacOS X as well and the &lt;code&gt;sqlite3&lt;/code&gt; module is part of the python standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d91bac961f495db3723c13c4fab3946fb21183" translate="yes" xml:space="preserve">
          <source>As you can see, we use Python&amp;rsquo;s &lt;code&gt;for&lt;/code&gt; statement two times, in order to go through &lt;code&gt;rows&lt;/code&gt;. As seen above, &lt;code&gt;rows&lt;/code&gt; is a variable which holds the result of the database query, so it is a list of tuples. The first &lt;code&gt;for&lt;/code&gt; statement accesses the tuples within the list, the second one the items within the tuple, which are put each into a cell of the table. It is important that you close all &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; etc. statements with &lt;code&gt;%end&lt;/code&gt;, otherwise the output may not be what you expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0009d98a999d57ce303b26a800fef4cc9a86af" translate="yes" xml:space="preserve">
          <source>As you can, that is fairly simple: just return a regular Python dictionary and Bottle will convert it automatically into a JSON object prior to sending. So if you e.g. call &amp;ldquo;&lt;a href=&quot;http://localhost/json1&quot;&gt;http://localhost/json1&lt;/a&gt;&amp;rdquo; Bottle should in this case return the JSON object &lt;code&gt;{&quot;Task&quot;: [&quot;Read A-byte-of-python to get a good introduction into Python&quot;]}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c6a51ed40c0112e0f039e4cebe09d74bf4f196" translate="yes" xml:space="preserve">
          <source>Assuming that you have a fairly new installation of Python (version 2.5 or higher), you only need to install Bottle in addition to that. Bottle has no other dependencies than Python itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d5c405513bdee83f1c855db3cd48b9450affb4" translate="yes" xml:space="preserve">
          <source>Asynchronous (greenlets)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdb9ed273d579e749ea580e81c3d0922a8860ce" translate="yes" xml:space="preserve">
          <source>Asynchronous (network side only), written in C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fae5b830186496efe6f33de204bcf7b934d4456" translate="yes" xml:space="preserve">
          <source>Asynchronous design patterns don&amp;rsquo;t mix well with the synchronous nature of &lt;a href=&quot;http://www.python.org/dev/peps/pep-3333/&quot;&gt;WSGI&lt;/a&gt;. This is why most asynchronous frameworks (tornado, twisted, ...) implement a specialized API to expose their asynchronous features. Bottle is a WSGI framework and shares the synchronous nature of WSGI, but thanks to the awesome &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent project&lt;/a&gt;, it is still possible to write asynchronous applications with bottle. This article documents the usage of Bottle with Asynchronous WSGI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7164204c56987f9c6993d6b3ac23e39e773785a7" translate="yes" xml:space="preserve">
          <source>Asynchronous framework with WSGI support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9933e72aae319c77ef148a0f7d7e3e28c06e79" translate="yes" xml:space="preserve">
          <source>Asynchronous, partly written in C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfce706a3da95e6fa59ee6a7ef3bd5fff076c3d6" translate="yes" xml:space="preserve">
          <source>Asynchronous, powers some parts of Facebook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1da98adeb6a5d9a16ab41f25ae3c8f3ff398131" translate="yes" xml:space="preserve">
          <source>Asynchronous, very fast and written in C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60c96d78197d6dfc015ec2589e65e49fafde677" translate="yes" xml:space="preserve">
          <source>Asynchronous, well tested but... twisted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098000868e24859268e8a3d040c33fe1e4c970f9" translate="yes" xml:space="preserve">
          <source>At first, we imported &lt;code&gt;validate&lt;/code&gt; from the Bottle framework, than we apply the @validate-decorator. Right here, we validate if &lt;code&gt;no&lt;/code&gt; is an integer. Basically, the validation works with all types of data like floats, lists etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec5abd92008150788b6bdd4f3e2703b3e56f078" translate="yes" xml:space="preserve">
          <source>At first, we need to import the &lt;code&gt;static_file&lt;/code&gt; function from Bottle. As you can see, the &lt;code&gt;return static_file&lt;/code&gt; statement replaces the &lt;code&gt;return&lt;/code&gt; statement. It takes at least two arguments: the name of the file to be returned and the path to the file. Even if the file is in the same directory as your application, the path needs to be stated. But in this case, you can use &lt;code&gt;'.'&lt;/code&gt; as a path, too. Bottle guesses the MIME-type of the file automatically, but in case you like to state it explicitly, add a third argument to &lt;code&gt;static_file&lt;/code&gt;, which would be here &lt;code&gt;mimetype='text/html'&lt;/code&gt;. &lt;code&gt;static_file&lt;/code&gt; works with any type of route, including the dynamic ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f07e91d5864e24bc2a168a5dd9b9e77e14fcc2" translate="yes" xml:space="preserve">
          <source>At the end of this tutorial, we will have a simple, web-based ToDo list. The list contains a text (with max 100 characters) and a status (0 for closed, 1 for open) for each item. Through the web-based user interface, open items can be view and edited and new items can be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b63101c5949d46fb8c84a212813c406a4a14ba" translate="yes" xml:space="preserve">
          <source>Attach a callback to a hook. Three hooks are currently implemented:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="c942b3f103ef6a3121617145c8a6f8fa36f8018b" translate="yes" xml:space="preserve">
          <source>Auto Reloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29130906ceca495e8d470a1b82002b6076268338" translate="yes" xml:space="preserve">
          <source>Automatically selects an available server adapter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5d4512d760362aae5ecd59410ed336f4f963af" translate="yes" xml:space="preserve">
          <source>Base class and minimal API for template adapters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9866e9cada1832488dcc9261ae6d8f2d53a9f16" translate="yes" xml:space="preserve">
          <source>BaseRequest</source>
          <target state="translated">BaseRequest</target>
        </trans-unit>
        <trans-unit id="287a2312b65c7dd88f7d05ea6a78b65f43edf4ed" translate="yes" xml:space="preserve">
          <source>BaseRequest::copy()</source>
          <target state="translated">BaseRequest::copy()</target>
        </trans-unit>
        <trans-unit id="232db0efc5053afe45171efcdff36add307ec449" translate="yes" xml:space="preserve">
          <source>BaseRequest::get_cookie()</source>
          <target state="translated">BaseRequest::get_cookie()</target>
        </trans-unit>
        <trans-unit id="fe92fc49ffc8d93ea71b3862587c0c43fb08bd15" translate="yes" xml:space="preserve">
          <source>BaseRequest::get_header()</source>
          <target state="translated">BaseRequest::get_header()</target>
        </trans-unit>
        <trans-unit id="74128cf03773fd3d2786ea55989b664fb887e6cd" translate="yes" xml:space="preserve">
          <source>BaseRequest::path_shift()</source>
          <target state="translated">BaseRequest::path_shift()</target>
        </trans-unit>
        <trans-unit id="ec189c1ee10f210125dce3c235f56e148d3bf962" translate="yes" xml:space="preserve">
          <source>BaseResponse</source>
          <target state="translated">BaseResponse</target>
        </trans-unit>
        <trans-unit id="39d3db7f7699ed1793fa152cef86004434057ac8" translate="yes" xml:space="preserve">
          <source>BaseResponse::add_header()</source>
          <target state="translated">BaseResponse::add_header()</target>
        </trans-unit>
        <trans-unit id="95bc79d12153f5309bf637f9f4457ab85f64cde3" translate="yes" xml:space="preserve">
          <source>BaseResponse::copy()</source>
          <target state="translated">BaseResponse::copy()</target>
        </trans-unit>
        <trans-unit id="0872fd6c46e5c8bad9f470417f44fcb207179d0a" translate="yes" xml:space="preserve">
          <source>BaseResponse::delete_cookie()</source>
          <target state="translated">BaseResponse::delete_cookie()</target>
        </trans-unit>
        <trans-unit id="e7d26b7f4fa8d544b4ef02b50c661b8f5408121f" translate="yes" xml:space="preserve">
          <source>BaseResponse::get_header()</source>
          <target state="translated">BaseResponse::get_header()</target>
        </trans-unit>
        <trans-unit id="8cd27b83903897acd2432ffb97990734283aca99" translate="yes" xml:space="preserve">
          <source>BaseResponse::iter_headers()</source>
          <target state="translated">BaseResponse::iter_headers()</target>
        </trans-unit>
        <trans-unit id="2bc29595a6bb0dbce043863b2477a732c9dd4227" translate="yes" xml:space="preserve">
          <source>BaseResponse::set_cookie()</source>
          <target state="translated">BaseResponse::set_cookie()</target>
        </trans-unit>
        <trans-unit id="0caa7576bcd6a99926527675c0c0fc11892e5c60" translate="yes" xml:space="preserve">
          <source>BaseResponse::set_header()</source>
          <target state="translated">BaseResponse::set_header()</target>
        </trans-unit>
        <trans-unit id="fbe9461c38afb9b375e72ccc5ef1a39b85a3be81" translate="yes" xml:space="preserve">
          <source>BaseTemplate</source>
          <target state="translated">BaseTemplate</target>
        </trans-unit>
        <trans-unit id="4196f8ac0b11c1d0b35f4139671414fe1cf5cd5f" translate="yes" xml:space="preserve">
          <source>BaseTemplate::__init__()</source>
          <target state="translated">BaseTemplate::__init__()</target>
        </trans-unit>
        <trans-unit id="91170ed3277df0153d772a9ab136c8f8859bb40a" translate="yes" xml:space="preserve">
          <source>BaseTemplate::prepare()</source>
          <target state="translated">BaseTemplate::prepare()</target>
        </trans-unit>
        <trans-unit id="c414d8cde0fc77459a7f5891dcacfcea071ce7d5" translate="yes" xml:space="preserve">
          <source>BaseTemplate::render()</source>
          <target state="translated">BaseTemplate::render()</target>
        </trans-unit>
        <trans-unit id="f413078464cdacc7a8b47b061c854a694501ccc2" translate="yes" xml:space="preserve">
          <source>Basic API Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49b42b7aec2b8e21b3f1846da04b05f98a77da0" translate="yes" xml:space="preserve">
          <source>Basically, each page visible in the browser is dynamically generated when the page address is called. Thus, there is no static content. That is exactly what is called a &amp;ldquo;route&amp;rdquo; within Bottle: a certain address on the server. So, for example, when the page &lt;code&gt;http://localhost:8080/todo&lt;/code&gt; is called from the browser, Bottle &amp;ldquo;grabs&amp;rdquo; the call and checks if there is any (Python) function defined for the route &amp;ldquo;todo&amp;rdquo;. If so, Bottle will execute the corresponding Python code and return its result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0433a20433ba76228a1871c10fb44932c51c8983" translate="yes" xml:space="preserve">
          <source>Be careful when specifying a relative root-path such as &lt;code&gt;root='./static/files'&lt;/code&gt;. The working directory (&lt;code&gt;./&lt;/code&gt;) and the project directory are not always the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38062644c675f060d0ce7d4293b07d4c96d75312" translate="yes" xml:space="preserve">
          <source>Because of these requirements, it is the recommendation of the Bottle project that Gzip compression is best handled by the WSGI server Bottle runs on top of. WSGI servers such as &lt;a href=&quot;http://www.cherrypy.org&quot;&gt;cherrypy&lt;/a&gt; provide a &lt;a href=&quot;http://www.cherrypy.org/wiki/GzipFilter&quot;&gt;GzipFilter&lt;/a&gt; middleware that can be used to accomplish this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9b3d2c047563172183050f33891f03ecb51c01" translate="yes" xml:space="preserve">
          <source>Because they are. See &amp;lt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;http://www.ietf.org/rfc/rfc3986.txt&lt;/a&gt;&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c5b3a2bae5e7e9e561e2f84907549775ed9cc5" translate="yes" xml:space="preserve">
          <source>Before We Start...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acd8c50ed4edd8930c5f7f8aff3a357a74b9137" translate="yes" xml:space="preserve">
          <source>Blacklisting Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afddf38419a0f047b7b20c9e11bc5b998d29b464" translate="yes" xml:space="preserve">
          <source>Blocks that are normally indented now have to be closed explicitly with an &lt;code&gt;end&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c57deeb2f4446f9a5de52111e2b8770de7081f6" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#bottle.Plugin.setup&quot;&gt;&lt;code&gt;Plugin.setup()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bottle.Plugin.close&quot;&gt;&lt;code&gt;Plugin.close()&lt;/code&gt;&lt;/a&gt; are &lt;em&gt;not&lt;/em&gt; called for plugins that are applied directly to a route via the &lt;a href=&quot;api#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt; decorator, but only for plugins installed to an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0813c2581996c6506a4177a0aee0ca128c5138b" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;api#bottle.Bottle.uninstall&quot;&gt;&lt;code&gt;Bottle.uninstall()&lt;/code&gt;&lt;/a&gt; and the &lt;code&gt;skip&lt;/code&gt; parameter of &lt;a href=&quot;api#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt; accept a name string to refer to a plugin or plugin type. This works only for plugins that have a name attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53f4beb08bd983f8f2e0f97d60c470a133127a0" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;api#bottle.app&quot;&gt;&lt;code&gt;app()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#bottle.default_app&quot;&gt;&lt;code&gt;default_app()&lt;/code&gt;&lt;/a&gt; are instance of &lt;a href=&quot;api#bottle.AppStack&quot;&gt;&lt;code&gt;AppStack&lt;/code&gt;&lt;/a&gt; and implement a stack-like API. You can push and pop applications from and to the stack as needed. This also helps if you want to import a third party module that does not offer a separate application object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f43be804d6b952d9de9a320b5739ba5d3ec4d4" translate="yes" xml:space="preserve">
          <source>Both functions will interrupt your callback code by raising an &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff22dddc8fc540a85f64225e066b91794cada62e" translate="yes" xml:space="preserve">
          <source>Both methods won&amp;rsquo;t affect the current request if called from within a route callback, of cause. To force a restart of the current request, raise &lt;code&gt;RouteReset&lt;/code&gt; as an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764707f1c41fc750462548acce8c131843c93346" translate="yes" xml:space="preserve">
          <source>Both plugins and applications are specified via import expressions. These consist of an import path (e.g. &lt;code&gt;package.module&lt;/code&gt;) and an expression to be evaluated in the namespace of that module, separated by a colon. See &lt;a href=&quot;api#bottle.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; for details. Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03d22008e822dbcf382b2c32b1ff76ffab665d5" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;%&lt;/code&gt; and the &lt;code&gt;&amp;lt;%&lt;/code&gt; tokens are only recognized if they are the first non-whitespace characters in a line. You don&amp;rsquo;t have to escape them if they appear mid-text in your template markup. Only if a line of text starts with one of these tokens, you have to escape it with a backslash. In the rare case where the backslash + token combination appears in your markup at the beginning of a line, you can always help yourself with a string literal in an inline expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8ac6c75a9274bd6c7b12be1395b5c22b3a06be" translate="yes" xml:space="preserve">
          <source>Bottle</source>
          <target state="translated">Bottle</target>
        </trans-unit>
        <trans-unit id="2e9b9e5d6e4b1c5f1c9cbd9e69b085779e8612f9" translate="yes" xml:space="preserve">
          <source>Bottle Template To Format The Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8506021c95544e81a6dca506dc8b1ee8cc30b259" translate="yes" xml:space="preserve">
          <source>Bottle application handling this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0090b4ee5139e9c9e9266a1cc38e5a9f8e9a71" translate="yes" xml:space="preserve">
          <source>Bottle applications can store their configuration in &lt;a href=&quot;api#bottle.Bottle.config&quot;&gt;&lt;code&gt;Bottle.config&lt;/code&gt;&lt;/a&gt;, a dict-like object and central place for application specific settings. This dictionary controls many aspects of the framework, tells (newer) plugins what to do, and can be used to store your own configuration as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aa5e0741f4758c218521330a4d12491b8eb4ef" translate="yes" xml:space="preserve">
          <source>Bottle brings an adapter for mod_wsgi with it, so serving your application is an easy task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d289cdbbe2603c574ba90c77fb3b589a42ef0145" translate="yes" xml:space="preserve">
          <source>Bottle brings its own easy-to-use template engine with it. Templates are stored as separate files having a &lt;code&gt;.tpl&lt;/code&gt; extension. The template can be called then from within a function. Templates can contain any type of text (which will be most likely HTML-markup mixed with Python statements). Furthermore, templates can take arguments, e.g. the result set of a database query, which will be then formatted nicely within the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda31bc040a0996282e228efcf6eaf62918fcb34" translate="yes" xml:space="preserve">
          <source>Bottle can also handle dynamic routes, where the &amp;ldquo;dynamic part&amp;rdquo; of the route can be a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d6f48d43d48673d4367004ca0da3a60b83977f" translate="yes" xml:space="preserve">
          <source>Bottle catches all Exceptions raised in your app code to prevent your WSGI server from crashing. If the built-in &lt;a href=&quot;api#bottle.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt; mode is not enough and you need exceptions to propagate to a debugging middleware, you can turn off this behaviour:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92d49ad6534c4a9834052f0d175042d7c637cb1" translate="yes" xml:space="preserve">
          <source>Bottle comes with a fast and powerful built-in template engine called &lt;a href=&quot;stpl&quot;&gt;SimpleTemplate Engine&lt;/a&gt;. To render a template you can use the &lt;a href=&quot;api#bottle.template&quot;&gt;&lt;code&gt;template()&lt;/code&gt;&lt;/a&gt; function or the &lt;a href=&quot;api#bottle.view&quot;&gt;&lt;code&gt;view()&lt;/code&gt;&lt;/a&gt; decorator. All you have to do is to provide the name of the template and the variables you want to pass to the template as keyword arguments. Here&amp;rsquo;s a simple example of how to render a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c3b7b1e168d045395ef1b0a6659f0fabb48225" translate="yes" xml:space="preserve">
          <source>Bottle comes with a fast, powerful and easy to learn built-in template engine called &lt;em&gt;SimpleTemplate&lt;/em&gt; or &lt;em&gt;stpl&lt;/em&gt; for short. It is the default engine used by the &lt;a href=&quot;api#bottle.view&quot;&gt;&lt;code&gt;view()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#bottle.template&quot;&gt;&lt;code&gt;template()&lt;/code&gt;&lt;/a&gt; helpers but can be used as a stand-alone general purpose template engine too. This document explains the template syntax and shows examples for common use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bb404f23070b35af6509fb05de05050de3fff4" translate="yes" xml:space="preserve">
          <source>Bottle does not depend on any external libraries. You can just download &lt;a href=&quot;https://bottlepy.org/bottle.py&quot;&gt;bottle.py&lt;/a&gt; into your project directory and start coding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4222c151cf7bb2ef8055f848ce48a9e1b907911" translate="yes" xml:space="preserve">
          <source>Bottle is a &lt;em&gt;micro&lt;/em&gt; framework designed for prototyping and building small web applications and services. It stays out of your way and allows you to get things done fast, but misses some advanced features and ready-to-use solutions found in other frameworks (MVC, ORM, form validation, scaffolding, XML-RPC). Although it &lt;em&gt;is&lt;/em&gt; possible to add these features and build complex applications with Bottle, you should consider using a full-stack Web framework like &lt;a href=&quot;http://pylonshq.com/&quot;&gt;pylons&lt;/a&gt; or &lt;a href=&quot;http://pythonpaste.org/modules/evalexception.html&quot;&gt;paste&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4338ff2bfd710a5fcdfedfa5ad0b72dbb56a85c9" translate="yes" xml:space="preserve">
          <source>Bottle is a fast, simple and lightweight &lt;a href=&quot;http://www.wsgi.org/&quot;&gt;WSGI&lt;/a&gt; micro web-framework for &lt;a href=&quot;http://python.org/&quot;&gt;Python&lt;/a&gt;. It is distributed as a single file module and has no dependencies other than the &lt;a href=&quot;http://docs.python.org/library/&quot;&gt;Python Standard Library&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068d7559307b392ccb078f32d021200a6bd4c3e1" translate="yes" xml:space="preserve">
          <source>Bottle is much more flexible and supports a wide range of types. It even adds a &lt;code&gt;Content-Length&lt;/code&gt; header if possible and encodes unicode automatically, so you don&amp;rsquo;t have to. What follows is a list of data types you may return from your application callbacks and a short description of how these are handled by the framework:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d672e8a11c58692255e4321de0171c258101e754" translate="yes" xml:space="preserve">
          <source>Bottle maintains a global stack of &lt;a href=&quot;api#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; instances and uses the top of the stack as a default for some of the module-level functions and decorators. The &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator, for example, is a shortcut for calling &lt;a href=&quot;api#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt; on the default application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbe25fa76199e07f9662acd84da98b382ac664e" translate="yes" xml:space="preserve">
          <source>Bottle maintains a stack of &lt;a href=&quot;#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; instances (see &lt;a href=&quot;#bottle.app&quot;&gt;&lt;code&gt;app()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bottle.AppStack&quot;&gt;&lt;code&gt;AppStack&lt;/code&gt;&lt;/a&gt;) and uses the top of the stack as a &lt;em&gt;default application&lt;/em&gt; for some of the module-level functions and decorators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b071e6b490a750222db2f5de5bad32e1d18bf5c" translate="yes" xml:space="preserve">
          <source>Bottle returns strings as a whole (instead of iterating over each char) and adds a &lt;code&gt;Content-Length&lt;/code&gt; header based on the string length. Lists of byte strings are joined first. Other iterables yielding byte strings are not joined because they may grow too big to fit into memory. The &lt;code&gt;Content-Length&lt;/code&gt; header is not set in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aba2cda95b51b4edbadd92324b210f9467464ae" translate="yes" xml:space="preserve">
          <source>Bottle runs on the built-in &lt;a href=&quot;http://docs.python.org/library/wsgiref.html#module-wsgiref.simple_server&quot;&gt;wsgiref WSGIServer&lt;/a&gt; by default. This non-threading HTTP server is perfectly fine for development and early production, but may become a performance bottleneck when server load increases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d467dead1d31b9db87ebfec524b449a98237c64" translate="yes" xml:space="preserve">
          <source>Bottle searches in &lt;code&gt;./&lt;/code&gt; and &lt;code&gt;./views/&lt;/code&gt; for templates. In a &lt;a href=&quot;http://www.modpython.org/&quot;&gt;mod_python&lt;/a&gt; or &lt;a href=&quot;http://code.google.com/p/modwsgi/&quot;&gt;mod_wsgi&lt;/a&gt; environment, the working directory (&lt;code&gt;./&lt;/code&gt;) depends on your Apache settings. You should add an absolute path to the template search path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46b1acc0dc2d51e741d621df0e413985d0c785e" translate="yes" xml:space="preserve">
          <source>Bottle ships with a lot of ready-to-use adapters for the most common WSGI servers and automates the setup process. Here is an incomplete list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9d596b786340aeafefbc75f7ad25e6c923bf45" translate="yes" xml:space="preserve">
          <source>Bottle stores file uploads in &lt;a href=&quot;api#bottle.BaseRequest.files&quot;&gt;&lt;code&gt;BaseRequest.files&lt;/code&gt;&lt;/a&gt; as &lt;a href=&quot;api#bottle.FileUpload&quot;&gt;&lt;code&gt;FileUpload&lt;/code&gt;&lt;/a&gt; instances, along with some metadata about the upload. Let us assume you just want to save the file to disk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52da2a4b19f81944c88fc705acd446a6dbf016f7" translate="yes" xml:space="preserve">
          <source>Bottle uses a powerful routing engine to find the right callback for each request. The &lt;a href=&quot;tutorial#tutorial-routing&quot;&gt;tutorial&lt;/a&gt; shows you the basics. This document covers advanced techniques and rule mechanics in detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bd8cea0df5dc9ee67777a5c67e653da9985ba5" translate="yes" xml:space="preserve">
          <source>Bottle uses a special type of dictionary to store form data and cookies. &lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt; behaves like a normal dictionary, but has some additional features to make your life easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad29909958ab220814b9c95685189b953d8f8e83" translate="yes" xml:space="preserve">
          <source>Bottle uses the &lt;code&gt;charset&lt;/code&gt; parameter of the &lt;code&gt;Content-Type&lt;/code&gt; header to decide how to encode unicode strings. This header defaults to &lt;code&gt;text/html; charset=UTF8&lt;/code&gt; and can be changed using the &lt;code&gt;Response.content_type&lt;/code&gt; attribute or by setting the &lt;code&gt;Response.charset&lt;/code&gt; attribute directly. (The &lt;a href=&quot;api#bottle.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; object is described in the section &lt;a href=&quot;#tutorial-response&quot;&gt;The Response Object&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7560ba3779c3b82037720ef3e5694c02e8f3349" translate="yes" xml:space="preserve">
          <source>Bottle uses the root namespace for its own configuration. Plugins should store all their variables in their own namespace (e.g. &lt;code&gt;sqlite.db&lt;/code&gt; or &lt;code&gt;werkzeug.use_debugger&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084d9e33cd3b4d05a1c0d991d8c433797bb88af3" translate="yes" xml:space="preserve">
          <source>Bottle will do the routing and format the output, with the help of templates. The items of the list will be stored inside a SQLite database. Reading and writing the database will be done by Python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2e4bbb55488ba8236b05794d6a853d08f6b9a1" translate="yes" xml:space="preserve">
          <source>Bottle&amp;rsquo;s core features cover most common use-cases, but as a micro-framework it has its limits. This is where &amp;ldquo;Plugins&amp;rdquo; come into play. Plugins add missing functionality to the framework, integrate third party libraries, or just automate some repetitive work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178566602f84f04e77073e3541da0074dbe4f212" translate="yes" xml:space="preserve">
          <source>Bottle-Cork</source>
          <target state="translated">Bottle-Cork</target>
        </trans-unit>
        <trans-unit id="91a560a2224fda7c4edfa8de29def4f0eece5ccc" translate="yes" xml:space="preserve">
          <source>Bottle-Extras</source>
          <target state="translated">Bottle-Extras</target>
        </trans-unit>
        <trans-unit id="9586a31022d401a38849d466d97e32aeae1427ac" translate="yes" xml:space="preserve">
          <source>Bottle-Flash</source>
          <target state="translated">Bottle-Flash</target>
        </trans-unit>
        <trans-unit id="75c6d0f1168a5fe6df03ea1fd41c2305565fd4b3" translate="yes" xml:space="preserve">
          <source>Bottle-Hotqueue</source>
          <target state="translated">Bottle-Hotqueue</target>
        </trans-unit>
        <trans-unit id="a2f7e53763c7f0c76d067fae548e0ed9758c2acf" translate="yes" xml:space="preserve">
          <source>Bottle-Memcache</source>
          <target state="translated">Bottle-Memcache</target>
        </trans-unit>
        <trans-unit id="e51a28d1c106b611e735b57b2f0de90d466c99dc" translate="yes" xml:space="preserve">
          <source>Bottle-MongoDB</source>
          <target state="translated">Bottle-MongoDB</target>
        </trans-unit>
        <trans-unit id="36ff1edbcf18f0fbf2e724995dad2c42806f1b2c" translate="yes" xml:space="preserve">
          <source>Bottle-Redis</source>
          <target state="translated">Bottle-Redis</target>
        </trans-unit>
        <trans-unit id="62bec36a62ae6eedc59cd8348944f9ea7349f566" translate="yes" xml:space="preserve">
          <source>Bottle-Renderer</source>
          <target state="translated">Bottle-Renderer</target>
        </trans-unit>
        <trans-unit id="c57a646ed56c55bc984b60fd10dfcdf9ecaa63e0" translate="yes" xml:space="preserve">
          <source>Bottle-Servefiles</source>
          <target state="translated">Bottle-Servefiles</target>
        </trans-unit>
        <trans-unit id="fb377b59693ae55258c12f15caac966c98651ae6" translate="yes" xml:space="preserve">
          <source>Bottle-Sqlalchemy</source>
          <target state="translated">Bottle-Sqlalchemy</target>
        </trans-unit>
        <trans-unit id="5014032eaa2b0d4549e3ac2390722ec7dd34f625" translate="yes" xml:space="preserve">
          <source>Bottle-Sqlite</source>
          <target state="translated">Bottle-Sqlite</target>
        </trans-unit>
        <trans-unit id="df76ca2af0b8cad2783e8d025dadc3a5cf66fb5c" translate="yes" xml:space="preserve">
          <source>Bottle-Web2pydal</source>
          <target state="translated">Bottle-Web2pydal</target>
        </trans-unit>
        <trans-unit id="9981f805a3c9c555160bbbcd44a6b4ebb792c252" translate="yes" xml:space="preserve">
          <source>Bottle-Werkzeug</source>
          <target state="translated">Bottle-Werkzeug</target>
        </trans-unit>
        <trans-unit id="2cab05750530546f9d60d708577f8c5e3d5a36e5" translate="yes" xml:space="preserve">
          <source>Bottle: Python Web Framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eaf6b05f766a5b93c8e822004b372271a24d4e" translate="yes" xml:space="preserve">
          <source>Bottle::add_hook()</source>
          <target state="translated">Bottle::add_hook()</target>
        </trans-unit>
        <trans-unit id="79c2cfce3c7002456e1f0c055b1823abbf928fd2" translate="yes" xml:space="preserve">
          <source>Bottle::add_route()</source>
          <target state="translated">Bottle::add_route()</target>
        </trans-unit>
        <trans-unit id="44a20db052133d2fa7a0b8abfcd6a022ef1179c2" translate="yes" xml:space="preserve">
          <source>Bottle::close()</source>
          <target state="translated">Bottle::close()</target>
        </trans-unit>
        <trans-unit id="e8d58417f3a1dccebf12d1600c4e5ae51446beff" translate="yes" xml:space="preserve">
          <source>Bottle::delete()</source>
          <target state="translated">Bottle::delete()</target>
        </trans-unit>
        <trans-unit id="cf7a7dcf3de8774a4d9ae737df529fcdb2c41eea" translate="yes" xml:space="preserve">
          <source>Bottle::error()</source>
          <target state="translated">Bottle::error()</target>
        </trans-unit>
        <trans-unit id="e4d85b283a33e8b11d0fa5191989478bd48bdac4" translate="yes" xml:space="preserve">
          <source>Bottle::get()</source>
          <target state="translated">Bottle::get()</target>
        </trans-unit>
        <trans-unit id="5bee2af5c99cc36fc5124e1be06699e90d98578b" translate="yes" xml:space="preserve">
          <source>Bottle::get_url()</source>
          <target state="translated">Bottle::get_url()</target>
        </trans-unit>
        <trans-unit id="7e493ec2fb0e28ddf97ed6ea9a092b29b71e5be1" translate="yes" xml:space="preserve">
          <source>Bottle::hook()</source>
          <target state="translated">Bottle::hook()</target>
        </trans-unit>
        <trans-unit id="c9d6513817bfcc955a21a217da9325f72db170f7" translate="yes" xml:space="preserve">
          <source>Bottle::install()</source>
          <target state="translated">Bottle::install()</target>
        </trans-unit>
        <trans-unit id="98e673e4cbe6d1e568156d84cfc55bcf835e4492" translate="yes" xml:space="preserve">
          <source>Bottle::match()</source>
          <target state="translated">Bottle::match()</target>
        </trans-unit>
        <trans-unit id="c8b0c3c99dae906159933b1ea2403f8631d1d302" translate="yes" xml:space="preserve">
          <source>Bottle::merge()</source>
          <target state="translated">Bottle::merge()</target>
        </trans-unit>
        <trans-unit id="8cb3161c2dc0cdb74e2c8db265b4b2a412eb00e5" translate="yes" xml:space="preserve">
          <source>Bottle::mount()</source>
          <target state="translated">Bottle::mount()</target>
        </trans-unit>
        <trans-unit id="845fe7225c38e1c39c8cc3c81ddc786a66882ea3" translate="yes" xml:space="preserve">
          <source>Bottle::post()</source>
          <target state="translated">Bottle::post()</target>
        </trans-unit>
        <trans-unit id="a4c4588c2642e90798e36b466443e950b7d76fa6" translate="yes" xml:space="preserve">
          <source>Bottle::put()</source>
          <target state="translated">Bottle::put()</target>
        </trans-unit>
        <trans-unit id="34c59140f90a5ed2f72ed22135c1f83cfbb758f6" translate="yes" xml:space="preserve">
          <source>Bottle::remove_hook()</source>
          <target state="translated">Bottle::remove_hook()</target>
        </trans-unit>
        <trans-unit id="06f6aad414b579e80aef0bbc0d94608c45f49089" translate="yes" xml:space="preserve">
          <source>Bottle::reset()</source>
          <target state="translated">Bottle::reset()</target>
        </trans-unit>
        <trans-unit id="c9131059f9c40c9844695b3d25ef8c75f8852caf" translate="yes" xml:space="preserve">
          <source>Bottle::route()</source>
          <target state="translated">Bottle::route()</target>
        </trans-unit>
        <trans-unit id="fbcb4988c2d493a88020563af6b35bdde5235e83" translate="yes" xml:space="preserve">
          <source>Bottle::run()</source>
          <target state="translated">Bottle::run()</target>
        </trans-unit>
        <trans-unit id="3feeebec7c8340aecf8d98c9c5d3090cfe7c4f51" translate="yes" xml:space="preserve">
          <source>Bottle::trigger_hook()</source>
          <target state="translated">Bottle::trigger_hook()</target>
        </trans-unit>
        <trans-unit id="00ee44a90a1451e27b269d8a79bac33f971cbcda" translate="yes" xml:space="preserve">
          <source>Bottle::uninstall()</source>
          <target state="translated">Bottle::uninstall()</target>
        </trans-unit>
        <trans-unit id="537d8304a2f5547a7a29a12ca862c23b0ef90404" translate="yes" xml:space="preserve">
          <source>Bottle::wsgi()</source>
          <target state="translated">Bottle::wsgi()</target>
        </trans-unit>
        <trans-unit id="8bc69e2e4c9ca994f2848daa9ab0b6d9fefb3bee" translate="yes" xml:space="preserve">
          <source>Briefly worded, the &lt;a href=&quot;http://www.python.org/dev/peps/pep-3333/&quot;&gt;WSGI specification (pep 3333)&lt;/a&gt; defines a request/response circle as follows: The application callable is invoked once for each request and must return a body iterator. The server then iterates over the body and writes each chunk to the socket. As soon as the body iterator is exhausted, the client connection is closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d4a67a8eac85490f7c470bf8467fc0605e3b25" translate="yes" xml:space="preserve">
          <source>Building the Documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e444c1b7ada8ce5c4749bcda40c655cf5804492b" translate="yes" xml:space="preserve">
          <source>But Bottle has already various adapters to multi-threaded servers on board, which perform better on higher load. Bottle supports &lt;a href=&quot;http://www.cherrypy.org/&quot;&gt;Cherrypy&lt;/a&gt;, &lt;a href=&quot;http://github.com/william-os4y/fapws3&quot;&gt;Fapws3&lt;/a&gt;, &lt;a href=&quot;http://trac.saddi.com/flup&quot;&gt;Flup&lt;/a&gt; and &lt;a href=&quot;http://pythonpaste.org/&quot;&gt;Paste&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fc9e1bbba9e2e2472e6f021f16249ee13f2059" translate="yes" xml:space="preserve">
          <source>But embedding code still requires you to start a new line, which may not what you want to see in your rendered template. To skip the newline in front of a code segment, end the text line with a double-backslash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eae33acfe28a7271b9b30fe355f28253f5e2696" translate="yes" xml:space="preserve">
          <source>But there is a snag: The plugin sees the whole sub-application as a single route, namely the proxy-route mentioned above. In order to affect each individual route of the sub-application, you have to install the plugin to the mounted application explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f403b57b77b5f9d1bab81acec40d1318ed054705" translate="yes" xml:space="preserve">
          <source>But where do we get the GET data from? Well, we can use a static HTML page holding the form. Or, what we do right now, is to use a template which is output when the route &lt;code&gt;/new&lt;/code&gt; is called without GET data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3f2cab63e4ab22c9a767ed18596e280badf0da" translate="yes" xml:space="preserve">
          <source>By enabling &amp;ldquo;debug&amp;rdquo;, you will get a full stacktrace of the Python interpreter, which usually contains useful information for finding bugs. Furthermore, templates (see below) are not cached, thus changes to templates will take effect without stopping the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5469ba0726f29d6fc56613ab4859a345cbd7edf" translate="yes" xml:space="preserve">
          <source>By the way, if you prefer to use POST data: this works exactly the same way, just use &lt;code&gt;request.POST.get()&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fde2be6e2f06fb52477cd04c2014986920ee026" translate="yes" xml:space="preserve">
          <source>By using only the routes we know so far it is possible, but may be quite tricky. But Bottle knows something called &amp;ldquo;dynamic routes&amp;rdquo;, which makes this task quite easy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440711a91dc0e1b90eb642032be2d98fb1da274c" translate="yes" xml:space="preserve">
          <source>Byte strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a6266fc51ff4abb6adbc67a9b0efe8827361e0" translate="yes" xml:space="preserve">
          <source>Cache compressed files that don&amp;rsquo;t change often.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="72b8f1801b8b91df86253c2f86917c356791814a" translate="yes" xml:space="preserve">
          <source>Called as soon as the plugin is installed to an application (see &lt;a href=&quot;api#bottle.Bottle.install&quot;&gt;&lt;code&gt;Bottle.install()&lt;/code&gt;&lt;/a&gt;). The only parameter is the associated application object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9dccaae7ec0a484ed620256adda100f58f267f" translate="yes" xml:space="preserve">
          <source>Called immediately before the plugin is uninstalled or the application is closed (see &lt;a href=&quot;api#bottle.Bottle.uninstall&quot;&gt;&lt;code&gt;Bottle.uninstall()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api#bottle.Bottle.close&quot;&gt;&lt;code&gt;Bottle.close()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35185185505ac63eb73169c185671f93ea23d4fd" translate="yes" xml:space="preserve">
          <source>Called whenever &lt;a href=&quot;#bottle.Bottle.reset&quot;&gt;&lt;code&gt;Bottle.reset()&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45eb54e8fa70af8b4431f1718d96a009d721f32f" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;#bottle.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; with the same parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc28fede606eef603fb7498465cddf910f08e54" translate="yes" xml:space="preserve">
          <source>Catching Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1098e442d2193f99b73f1e0aae613121f43e31" translate="yes" xml:space="preserve">
          <source>Change the debug level. There is only one debug level supported at the moment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe49733ed4762b4e4c134c9a047280508c341126" translate="yes" xml:space="preserve">
          <source>Changed in version 0.10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4570035bd7af29b9deaa2c4019ae41ea8c5be8e" translate="yes" xml:space="preserve">
          <source>Changed in version 0.12: Prior to this release, &lt;a href=&quot;#stpl.include&quot;&gt;&lt;code&gt;include()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#stpl.rebase&quot;&gt;&lt;code&gt;rebase()&lt;/code&gt;&lt;/a&gt; were sytnax keywords, not functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df4f325161bb01bb81005c4bd9ca05e4aa0292c" translate="yes" xml:space="preserve">
          <source>Changing the &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88bf370ffdd5624908e7f7ebc6ae31370a54fb4f" translate="yes" xml:space="preserve">
          <source>Changing the Default Encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="17bca80d0a0e86adeb134490d4c95e6f116dcb17" translate="yes" xml:space="preserve">
          <source>Close the application and all installed plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9221df60b8197f71a3901b436b583b62b1e62b5" translate="yes" xml:space="preserve">
          <source>Code and documentation are available according to the MIT License:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14645b8954e474bbabec424e69522f9b77f1777b" translate="yes" xml:space="preserve">
          <source>Code blocks and code lines always span the whole line. Whitespace in front of after a code segment is stripped away. You won&amp;rsquo;t see empty lines or dangling whitespace in your template because of embedded code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c818412d017dcc7f2635ecf050b64a83410b23" translate="yes" xml:space="preserve">
          <source>Command Line Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96e4dbf7fd561ffab382d4904374d93bf0f706d" translate="yes" xml:space="preserve">
          <source>Common Problems and Pitfalls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817479e19f2da4727310d08bab5a57cec54f65e2" translate="yes" xml:space="preserve">
          <source>Complete Example Listing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe163b2f6fd0b41230f30593a4142b0c8ef62e3" translate="yes" xml:space="preserve">
          <source>Compress on the fly and be fast doing so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83302e351929d3f68d6ad8e96d4aa1c48405741" translate="yes" xml:space="preserve">
          <source>ConfigDict</source>
          <target state="translated">ConfigDict</target>
        </trans-unit>
        <trans-unit id="563aca81b3853551b5394c160c1f3b9b14527b0a" translate="yes" xml:space="preserve">
          <source>ConfigDict::load_config()</source>
          <target state="translated">ConfigDict::load_config()</target>
        </trans-unit>
        <trans-unit id="49da700965d3863e126dbd58919fa36fae30914f" translate="yes" xml:space="preserve">
          <source>ConfigDict::load_dict()</source>
          <target state="translated">ConfigDict::load_dict()</target>
        </trans-unit>
        <trans-unit id="71ef8cbac7c96a9d169a4606eed167121b16cbf6" translate="yes" xml:space="preserve">
          <source>ConfigDict::meta_get()</source>
          <target state="translated">ConfigDict::meta_get()</target>
        </trans-unit>
        <trans-unit id="7ed9da873103bc1328fcc65c469bd7c4161aa64b" translate="yes" xml:space="preserve">
          <source>ConfigDict::meta_list()</source>
          <target state="translated">ConfigDict::meta_list()</target>
        </trans-unit>
        <trans-unit id="eaca62b245324f22043253e59f304130ed7ad5b3" translate="yes" xml:space="preserve">
          <source>ConfigDict::meta_set()</source>
          <target state="translated">ConfigDict::meta_set()</target>
        </trans-unit>
        <trans-unit id="7d8166c17ae83d9985180b9ba2ebdaec0da1385f" translate="yes" xml:space="preserve">
          <source>ConfigDict::update()</source>
          <target state="translated">ConfigDict::update()</target>
        </trans-unit>
        <trans-unit id="781810d3487db03633bd8b6459bb110f014b9de5" translate="yes" xml:space="preserve">
          <source>Configuration (DRAFT)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3636eba47dc98ed183b0a505511b3f0cb92c4a8" translate="yes" xml:space="preserve">
          <source>Configuration Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fa34bfd4984cb5a273bed49c7e961d45b34787" translate="yes" xml:space="preserve">
          <source>Configuration files are useful if you want to enable non-programmers to configure your application, or just don&amp;rsquo;t want to hack python module files just to change the database port. A very common syntax for configuration files is shown here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60a223c98b2c36522f0b7f89f57ae14e144678a" translate="yes" xml:space="preserve">
          <source>Contributors</source>
          <target state="translated">Contributors</target>
        </trans-unit>
        <trans-unit id="524cf50b5df5f29161c0600989922de48abede70" translate="yes" xml:space="preserve">
          <source>Cookies</source>
          <target state="translated">Cookies</target>
        </trans-unit>
        <trans-unit id="71f0f855a357abc151a752a542aab0f9e4f5dd5d" translate="yes" xml:space="preserve">
          <source>Cookies are easily forged by malicious clients. Do not trust cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf5e34a539e2af1c6a5ef0069f9e4eb8ce4a81a" translate="yes" xml:space="preserve">
          <source>Cookies are limited to 4 KB of text in most browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9152f34e4d3536664c401d410cbc69306c43ef" translate="yes" xml:space="preserve">
          <source>Cookies are small pieces of text stored in the clients browser and sent back to the server with each request. They are useful to keep some state around for more than one request (HTTP itself is stateless), but should not be used for security related stuff. They can be easily forged by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d386c0695e29fa489516286db6113aed14bed9d" translate="yes" xml:space="preserve">
          <source>Cookies are stored at client side and are not encrypted in any way. Whatever you store in a cookie, the user can read it. Worse than that, an attacker might be able to steal a user&amp;rsquo;s cookies through &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_cookie#Cookie_theft_and_session_hijacking&quot;&gt;XSS&lt;/a&gt; vulnerabilities on your side. Some viruses are known to read the browser cookies, too. Thus, never store confidential information in cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c842a1e7deea3dbd2091cc7af90a2b8030aa7adb" translate="yes" xml:space="preserve">
          <source>Cookies parsed into a &lt;a href=&quot;#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;. Signed cookies are NOT decoded. Use &lt;a href=&quot;#bottle.BaseRequest.get_cookie&quot;&gt;&lt;code&gt;get_cookie()&lt;/code&gt;&lt;/a&gt; if you expect signed cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1011702d2c5ea40e0119d2d400850e767977d97" translate="yes" xml:space="preserve">
          <source>Cookies, HTTP header, HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; fields and other request data is available through the global &lt;a href=&quot;api#bottle.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; object. This special object always refers to the &lt;em&gt;current&lt;/em&gt; request, even in multi-threaded environments where multiple client connections are handled at the same time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d7c68747c4620aeb1d24b40c997bb8defa232c" translate="yes" xml:space="preserve">
          <source>Cork provides a simple set of methods to implement Authentication and Authorization in web applications based on Bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0e6f4fb72ba72f619152212d04223c1a008074" translate="yes" xml:space="preserve">
          <source>Create An SQL Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636d7b1d936118ed63f44d4c52a813201b8110a3" translate="yes" xml:space="preserve">
          <source>Create a new cookie or replace an old one. If the &lt;code&gt;secret&lt;/code&gt; parameter is set, create a &lt;code&gt;Signed Cookie&lt;/code&gt; (described below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86b32dd46d3a486f8e32d862c7bae17b88a7940" translate="yes" xml:space="preserve">
          <source>Create a new response header, replacing any previously defined headers with the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bf5eb035df2dd2eb5c8bd42c70b2430765ddaf" translate="yes" xml:space="preserve">
          <source>Create a new template. If the source parameter (str or buffer) is missing, the name argument is used to guess a template filename. Subclasses can assume that self.source and/or self.filename are set. Both are strings. The lookup, encoding and settings parameters are stored as instance variables. The lookup parameter stores a list containing directory paths. The encoding parameter should be used to decode byte strings or files. The settings parameter contains a dict for engine-specific settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789f59fbdf97de8da5dfb8038a55604d70ba2c9f" translate="yes" xml:space="preserve">
          <source>Current value of the &amp;lsquo;Content-Length&amp;rsquo; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5484901561f7b36bb6dd111b33d9f9eb3cdbd4c8" translate="yes" xml:space="preserve">
          <source>Current value of the &amp;lsquo;Content-Type&amp;rsquo; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7af9131b009b988fe066100aaeca68594182a6" translate="yes" xml:space="preserve">
          <source>Current value of the &amp;lsquo;Expires&amp;rsquo; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed6fbf94844a47ecf83411b63cf050c8d28ac5b" translate="yes" xml:space="preserve">
          <source>Data Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035f4d8ced77e09e66d482be2a7b268a875d295b" translate="yes" xml:space="preserve">
          <source>De-validate the cache if one of the files changed anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c083af7b5668ed424a691c18119e1aa24da7ae0b" translate="yes" xml:space="preserve">
          <source>Debug Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8158223819128a6806afabe7fff69fefd064526b" translate="yes" xml:space="preserve">
          <source>Debugging and Auto-Reload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9dd951a0d717978d6864699f8ca0bec294dc5d" translate="yes" xml:space="preserve">
          <source>Debugging with Style: Debugging Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62be6eb9c88d23c6891ee9c6dc65c4332bab0456" translate="yes" xml:space="preserve">
          <source>Decorator</source>
          <target state="translated">Decorator</target>
        </trans-unit>
        <trans-unit id="26fc2fc486ca2fb5f6e4846276cdc5248e065e42" translate="yes" xml:space="preserve">
          <source>Decorator to install a route to the current default application. See &lt;a href=&quot;#bottle.Bottle.route&quot;&gt;&lt;code&gt;Bottle.route()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836b6f6f4d82b10ff0a828e90324c01e158808a6" translate="yes" xml:space="preserve">
          <source>Decorator to install an error handler to the current default application. See &lt;a href=&quot;#bottle.Bottle.error&quot;&gt;&lt;code&gt;Bottle.error()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c1111faeaa161ee7ee9fa32a171a39ff185d6e" translate="yes" xml:space="preserve">
          <source>Decorator: Register an output handler for a HTTP error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ee696cdb6531d4d55bafbab32ed0d607e7b558" translate="yes" xml:space="preserve">
          <source>Decorator: renders a template for a handler. The handler can control its behavior like that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb490273252e999ab55e963fa99ab04a109bd88" translate="yes" xml:space="preserve">
          <source>Default Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3ad4809ac82124984df1c855516cda14483cac" translate="yes" xml:space="preserve">
          <source>Delete a cookie. Be sure to use the same &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; settings as used to create the cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="fef10e96a6d21c7b338054cee87a014ef4bd1af6" translate="yes" xml:space="preserve">
          <source>Developer Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="ca5a9d29b06b67e85fc79ef4d7c4cc3d02de9abd" translate="yes" xml:space="preserve">
          <source>Development and Contribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b0613ac049d8459b061ee15aa8ba7ae5794479" translate="yes" xml:space="preserve">
          <source>Dictionaries</source>
          <target state="translated">Dictionaries</target>
        </trans-unit>
        <trans-unit id="44a29d36bd47966b87083242493143ba7c015511" translate="yes" xml:space="preserve">
          <source>Do all on-demand work immediately (useful for debugging).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588c6fda43be89ad74f5561cff80b3ed164338b8" translate="yes" xml:space="preserve">
          <source>Do both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502112cd9759da2f04e2a52179cf8024cc70d8d6" translate="yes" xml:space="preserve">
          <source>Do not cache small files because a disk seek would take longer than on-the-fly compression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9fbd64d00d07931e7f5c8f75eecd6ed69f6322" translate="yes" xml:space="preserve">
          <source>Do not compress dynamic files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb180b5c75052f4e08837533d094590ddc22320" translate="yes" xml:space="preserve">
          <source>Do not compress files that are compressed already (images, videos).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865cc4f55abed635cc99429167ed2dd4627d49c5" translate="yes" xml:space="preserve">
          <source>Do not compress for browsers that don&amp;rsquo;t support it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad43dfd72ecd2dae32b55939204749b2f28e2e4" translate="yes" xml:space="preserve">
          <source>Download and Install</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ea8eee8d55c0b2280a3d8b8c51d656bef40135" translate="yes" xml:space="preserve">
          <source>During development, all pages will be available on &lt;code&gt;localhost&lt;/code&gt; only, but later on it will be shown how to adapt the application for a &amp;ldquo;real&amp;rdquo; server, including how to use with Apache&amp;rsquo;s mod_wsgi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d620c171c2adf05317851c93c71a19a74952dd" translate="yes" xml:space="preserve">
          <source>During development, you have to restart the server a lot to test your recent changes. The auto reloader can do this for you. Every time you edit a module file, the reloader restarts the server process and loads the newest version of your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a78e3eae9c1d82018b2660ee806406a27186fec" translate="yes" xml:space="preserve">
          <source>During early development, the debug mode can be very helpful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7687f88be99410dd98e88b4f8d1bdfa4740f7dbc" translate="yes" xml:space="preserve">
          <source>Dynamic Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03476c832ad6bed2055e57c7fa959c3b82c906be" translate="yes" xml:space="preserve">
          <source>Dynamic Routes Using Regular Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2f6b6d4a98dee75a24b1aa1dda509d1d882f4c" translate="yes" xml:space="preserve">
          <source>Dynamic Routes and Slashes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6817aaddcb1edc9570fce4fd1ae90c6eff57263a" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;api#bottle.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; instance wraps a WSGI environment dictionary. The original is stored in &lt;a href=&quot;api#bottle.BaseRequest.environ&quot;&gt;&lt;code&gt;BaseRequest.environ&lt;/code&gt;&lt;/a&gt;, but the request object itself behaves like a dictionary, too. Most of the interesting data is exposed through special methods or attributes, but if you want to access &lt;a href=&quot;wsgispecification&quot;&gt;WSGI environ variables&lt;/a&gt; directly, you can do so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8a83fea8b9436744a690916a422ca6cf6f727a" translate="yes" xml:space="preserve">
          <source>Each Bottle object represents a single, distinct web application and consists of routes, callbacks, plugins, resources and configuration. Instances are callable WSGI applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940440dde3892c59fb844dc57c0dbd89c7593758" translate="yes" xml:space="preserve">
          <source>Each template is preloaded with a bunch of functions that help with the most common use cases. These functions are always available. You don&amp;rsquo;t have to import or provide them yourself. For everything not covered here there are probably good python libraries available. Remember that you can &lt;code&gt;import&lt;/code&gt; anything you want within your templates. They are python programs after all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ca74322eea0448b07d71002615aa577aa58700" translate="yes" xml:space="preserve">
          <source>Each wildcard matches one or more characters, but stops at the first slash (&lt;code&gt;/&lt;/code&gt;). This equals a regular expression of &lt;code&gt;[^/]+&lt;/code&gt; and ensures that only one path segment is matched and routes with more than one wildcard stay unambiguous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f1b88f1e171b26197b6ace2c82598947782e42" translate="yes" xml:space="preserve">
          <source>Each wildcard passes the covered part of the URL as a keyword argument to the request callback. You can use them right away and implement RESTful, nice-looking and meaningful URLs with ease. Here are some other examples along with the URLs they&amp;rsquo;d match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981cffc41d09436f63883bfbf00303084deafbdb" translate="yes" xml:space="preserve">
          <source>Editing Existing Items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f311ef489af01a394f537ba2042733f11e1bcd" translate="yes" xml:space="preserve">
          <source>Either way, you&amp;rsquo;ll need Python 2.5 or newer (including 3.x) to run bottle applications. If you do not have permissions to install packages system-wide or simply don&amp;rsquo;t want to, create a &lt;a href=&quot;http://pypi.python.org/pypi/virtualenv&quot;&gt;virtualenv&lt;/a&gt; first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36ebc65dddcf2281a77df5f2002832035bbd730" translate="yes" xml:space="preserve">
          <source>Embedded python code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40937565b390d3fa6234f64ad9821b6b8569d85e" translate="yes" xml:space="preserve">
          <source>Embedded python code follows regular python syntax, but with two additional syntax rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0620eb31ff0b18da7b478b5754552ce563b66ae" translate="yes" xml:space="preserve">
          <source>Embedding other WSGI Apps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13748f8e70769afa6da347a1aeeab900807c245d" translate="yes" xml:space="preserve">
          <source>Encode and sign a pickle-able object. Return a (byte) string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190f6a48db2efff55441d2cb5e3f004213acae56" translate="yes" xml:space="preserve">
          <source>Encoding used for attribute values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808f60b2ee0be37d32fd636dbd72cf2a73ce6841" translate="yes" xml:space="preserve">
          <source>Equals &lt;a href=&quot;#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;DELETE&lt;/code&gt; method parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147795707a67b33a95c3af87ce6506553e41c0e0" translate="yes" xml:space="preserve">
          <source>Equals &lt;a href=&quot;#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;POST&lt;/code&gt; method parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8788c8b50e4a001326d69b7cd88229496f0d1d0" translate="yes" xml:space="preserve">
          <source>Equals &lt;a href=&quot;#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;PUT&lt;/code&gt; method parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322fecd634805beb48d7e00720103b9abce34e7c" translate="yes" xml:space="preserve">
          <source>Equals &lt;a href=&quot;#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbe40393422a3e0a3f0d698429f68ed38a2c1e5" translate="yes" xml:space="preserve">
          <source>Error Pages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dd787ed5d58375915b56b71d62ecea1d2b680b" translate="yes" xml:space="preserve">
          <source>Error handlers are used only if your application returns or raises an &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; exception (&lt;code&gt;abort()&lt;/code&gt; does just that). Changing &lt;code&gt;Request.status&lt;/code&gt; or returning &lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t trigger the error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96c815d21d75543ef80ffc2f125fc2143d89ec9" translate="yes" xml:space="preserve">
          <source>Event Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3092b0f8f7b69f1bb7c8cb010609b4201294699" translate="yes" xml:space="preserve">
          <source>Everything that has a &lt;code&gt;.read()&lt;/code&gt; method is treated as a file or file-like object and passed to the &lt;code&gt;wsgi.file_wrapper&lt;/code&gt; callable defined by the WSGI server framework. Some WSGI server implementations can make use of optimized system calls (sendfile) to transmit files more efficiently. In other cases this just iterates over chunks that fit into memory. Optional headers such as &lt;code&gt;Content-Length&lt;/code&gt; or &lt;code&gt;Content-Type&lt;/code&gt; are &lt;em&gt;not&lt;/em&gt; set automatically. Use &lt;code&gt;send_file()&lt;/code&gt; if possible. See &lt;a href=&quot;#tutorial-static-files&quot;&gt;Static Files&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d3bf70be10e94477b93e3a8237bf98acb8cf8e" translate="yes" xml:space="preserve">
          <source>Example using &lt;a href=&quot;http://webtest.pythonpaste.org/&quot;&gt;WebTest&lt;/a&gt; and &lt;a href=&quot;http://readthedocs.org/docs/nose&quot;&gt;Nose&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9c12e5e63c25fd781e95d3a088a25269cd0b6b" translate="yes" xml:space="preserve">
          <source>Example: &amp;ldquo;Hello World&amp;rdquo; in a bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="translated">Exceptions</target>
        </trans-unit>
        <trans-unit id="9482ab65c7df845aa07861163f0bd78ab0fe8b0b" translate="yes" xml:space="preserve">
          <source>Executed once after each request regardless of its outcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72790a0f1eb78cbecfc388f42ec5eabdc8080a9e" translate="yes" xml:space="preserve">
          <source>Executed once before each request. The request context is available, but no routing has happened yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a03cb960fdac25b1dd461e3c500ff461558185" translate="yes" xml:space="preserve">
          <source>Explicit routing configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d86bd9744bd3ae9407b5b5e0c369a527d0f0bd" translate="yes" xml:space="preserve">
          <source>FIFO Queue for Bottle built upon redis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e509367792074f4f6856cf772f595643a8c842b0" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;/var/www/yourapp/app.wsgi&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09ab9ea91985578fea6798c7cff8723d2b9441b" translate="yes" xml:space="preserve">
          <source>File Uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ea610b3238de7a5d5848bdefece9e8be7326d6" translate="yes" xml:space="preserve">
          <source>File objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1034ff014ad9c6d1a9f554317aa69386237c2716" translate="yes" xml:space="preserve">
          <source>File uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22edde49a3f255c65c74ff10dd4f9e8fa6b563bd" translate="yes" xml:space="preserve">
          <source>File uploads parsed from &lt;code&gt;multipart/form-data&lt;/code&gt; encoded POST or PUT request body. The values are instances of &lt;a href=&quot;#bottle.FileUpload&quot;&gt;&lt;code&gt;FileUpload&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45db204618825915958a39c61856c31a0bd3a5bd" translate="yes" xml:space="preserve">
          <source>FileUpload</source>
          <target state="translated">FileUpload</target>
        </trans-unit>
        <trans-unit id="f3d7dbbc01181c92048e10481664b638ce5862aa" translate="yes" xml:space="preserve">
          <source>FileUpload::get_header()</source>
          <target state="translated">FileUpload::get_header()</target>
        </trans-unit>
        <trans-unit id="493b684905e3f9a9bdd2208b7ccabe97e7a0258b" translate="yes" xml:space="preserve">
          <source>FileUpload::save()</source>
          <target state="translated">FileUpload::save()</target>
        </trans-unit>
        <trans-unit id="fc29f5409213781a5c9e52c41ba1fddd5a97b9c3" translate="yes" xml:space="preserve">
          <source>Filters and other Meta Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f385a527bfe04702a6492e4f70457164cd74a3" translate="yes" xml:space="preserve">
          <source>Filters are used to define more specific wildcards, and/or transform the covered part of the URL before it is passed to the callback. A filtered wildcard is declared as &lt;code&gt;&amp;lt;name:filter&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;name:filter:config&amp;gt;&lt;/code&gt;. The syntax for the optional config part depends on the filter used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee250e9f7d615176736bbef4c43148fff48d827" translate="yes" xml:space="preserve">
          <source>Filters are used to define more specific wildcards, and/or transform the matched part of the URL before it is passed to the callback. A filtered wildcard is declared as &lt;code&gt;&amp;lt;name:filter&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;name:filter:config&amp;gt;&lt;/code&gt;. The syntax for the optional config part depends on the filter used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0634999069e7f3b8305871caf6fe5cc4b18e85b" translate="yes" xml:space="preserve">
          <source>Final Words</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228002017471df6c82564969575a568edb260515" translate="yes" xml:space="preserve">
          <source>Finally, we need to add a virtual host to the Apache configuration, which looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296e59e9c020cae492e8ec0dd22f6cadf4753fd7" translate="yes" xml:space="preserve">
          <source>Finally: WebSockets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa5483cbd5497f736dd44bcf41c5740760db2fe" translate="yes" xml:space="preserve">
          <source>Find a resource and return a file object, or raise IOError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42138081365be6235d6e1cd9578bad1f98d80f1" translate="yes" xml:space="preserve">
          <source>First Step - Showing All Open Items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04328561037855485018cc25ef886f7acf9fe1c" translate="yes" xml:space="preserve">
          <source>First, we need to create the database we use later on. To do so, save the following script in your project directory and run it with python. You can use the interactive interpreter too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="5b747b7c84e8ebfad895091da52024c265eb3ac7" translate="yes" xml:space="preserve">
          <source>For Bottle, &lt;code&gt;/example&lt;/code&gt; and &lt;code&gt;/example/&lt;/code&gt; are two different routes &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;. To treat both URLs the same you can add two &lt;code&gt;@route&lt;/code&gt; decorators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a84ce368053bf87160b7d59ac7804a9d3f5d71" translate="yes" xml:space="preserve">
          <source>For a detailed discussion, see &lt;a href=&quot;https://github.com/defnull/bottle/issues/92&quot;&gt;compression&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3850bd81f9d4c73c61bb6e6dc3463c7125d7d204" translate="yes" xml:space="preserve">
          <source>For a more detailed explanation, see &lt;a href=&quot;async&quot;&gt;Primer to Asynchronous Applications&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a299da935dc30d81231267feddd5a26d7d5c51" translate="yes" xml:space="preserve">
          <source>For example, if you want to allow Cross-Origin Resource Sharing for the content returned by all of your URL, you can use the hook decorator and setup a callback function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a994578243e0c81e7389f7f19a850f6907d82a9" translate="yes" xml:space="preserve">
          <source>For our ToDo list, we will create a route &lt;code&gt;@route('/edit/:no)&lt;/code&gt;, where &lt;code&gt;no&lt;/code&gt; is the id of the item to edit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dba25fb690b14a15d13a0cd1bab50187588a4e3" translate="yes" xml:space="preserve">
          <source>For performance reasons, however, it might be worthwhile to choose a different wrapper based on current needs, work with closures, or enable or disable a plugin at runtime. Let&amp;rsquo;s take the built-in HooksPlugin as an example: If no hooks are installed, the plugin removes itself from all affected routes and has virtaully no overhead. As soon as you install the first hook, the plugin activates itself and takes effect again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f7a619d8028cd9f6582b28c29cc451fb72f1d99" translate="yes" xml:space="preserve">
          <source>For the sake of introducing Bottle, the Python code &amp;ldquo;in between&amp;rdquo; is kept short, in order to keep the focus. Also all code within the tutorial is working fine, but you may not necessarily use it &amp;ldquo;in the wild&amp;rdquo;, e.g. on a public web server. In order to do so, you may add e.g. more error handling, protect the database with a password, test and escape the input etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98636068f930b2490fc5a2a8b24253474a67f8f6" translate="yes" xml:space="preserve">
          <source>For the sake of simplicity, most examples in this tutorial use a module-level &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator to define routes. This adds routes to a global &amp;ldquo;default application&amp;rdquo;, an instance of &lt;a href=&quot;api#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; that is automatically created the first time you call &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt;. Several other module-level decorators and functions relate to this default application, but if you prefer a more object oriented approach and don&amp;rsquo;t mind the extra typing, you can create a separate application object and use that instead of the global one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d0a830b9bdc9a926e9051e64240cd66324f560" translate="yes" xml:space="preserve">
          <source>For those cases, Bottle offers the &lt;code&gt;@validate&lt;/code&gt; decorator, which validates the &amp;ldquo;input&amp;rdquo; prior to passing it to the function. In order to apply the validator, extend the code as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83597af1087af32fd8f93a5424a6424716550fa2" translate="yes" xml:space="preserve">
          <source>For your plugin, &lt;a href=&quot;api#bottle.Route.config&quot;&gt;&lt;code&gt;Route.config&lt;/code&gt;&lt;/a&gt; is probably the most important attribute. Keep in mind that this dictionary is local to the route, but shared between all plugins. It is always a good idea to add a unique prefix or, if your plugin needs a lot of configuration, store it in a separate namespace within the &lt;code&gt;config&lt;/code&gt; dictionary. This helps to avoid naming collisions between plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dd4fd1482b8cb575f4e0ffd39b59080466542c" translate="yes" xml:space="preserve">
          <source>Forced Download</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c150a0ea5afc4537a06dda26e0f045f585161816" translate="yes" xml:space="preserve">
          <source>Forget any cached values. The next time &lt;a href=&quot;#bottle.Route.call&quot;&gt;&lt;code&gt;call&lt;/code&gt;&lt;/a&gt; is accessed, all plugins are re-applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d758f21f9c37781c7b858beebe8878e2aa77cb8" translate="yes" xml:space="preserve">
          <source>Form fields transmitted via &lt;code&gt;POST&lt;/code&gt; are stored in &lt;a href=&quot;api#bottle.BaseRequest.forms&quot;&gt;&lt;code&gt;BaseRequest.forms&lt;/code&gt;&lt;/a&gt; as a &lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;. The server side code may look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcd11315bb2ff19a8f0caf7d52f884c7741a21f" translate="yes" xml:space="preserve">
          <source>Form values parsed from an &lt;code&gt;url-encoded&lt;/code&gt; or &lt;code&gt;multipart/form-data&lt;/code&gt; encoded POST or PUT request body. The result is returned as a &lt;a href=&quot;#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;. All keys and values are strings. File uploads are stored separately in &lt;a href=&quot;#bottle.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e5068caea7d924407a148a8e4a49033c06e81e" translate="yes" xml:space="preserve">
          <source>FormsDict</source>
          <target state="translated">FormsDict</target>
        </trans-unit>
        <trans-unit id="8b927e25c5fd67936fd6b416585f68daa43537a6" translate="yes" xml:space="preserve">
          <source>FormsDict::decode()</source>
          <target state="translated">FormsDict::decode()</target>
        </trans-unit>
        <trans-unit id="f5d9f84222d5a8ca5578d40f0b8745e10fb2efee" translate="yes" xml:space="preserve">
          <source>FormsDict::getunicode()</source>
          <target state="translated">FormsDict::getunicode()</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">Часто задаваемые вопросы</target>
        </trans-unit>
        <trans-unit id="405e43466bb9c022264f7b61ec2da238d35250be" translate="yes" xml:space="preserve">
          <source>From now on, &lt;code&gt;404 File not Found&lt;/code&gt; errors will display a custom error page to the user. The only parameter passed to the error-handler is an instance of &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;. Apart from that, an error-handler is quite similar to a regular request callback. You can read from &lt;a href=&quot;api#bottle.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt;, write to &lt;a href=&quot;api#bottle.response&quot;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; and return any supported data-type except for &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b85fc1ead86861db821c2c28a5b7093d6cbb86a" translate="yes" xml:space="preserve">
          <source>From the server perspective, the queue object is iterable. It blocks if empty and stops as soon as it reaches &lt;code&gt;StopIteration&lt;/code&gt;. This conforms to WSGI. On the application side, the queue object behaves like a non-blocking socket. You can write to it at any time, pass it around and even start a new (pseudo)thread that writes to it asynchronously. This is how long-polling is implemented most of the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db42b433ad9a6d9f91c7a46b15c5c57f3f50bd7" translate="yes" xml:space="preserve">
          <source>Functional Testing Bottle Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f2d8dc11e199cc8dc027627c0d2c97bdf4f558" translate="yes" xml:space="preserve">
          <source>Further Software Necessities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22ca0cf6beddd104cb09bb007727844d62aacf5" translate="yes" xml:space="preserve">
          <source>GET Form fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac6def9d54f69f0f0dfd0d819cf5df38ccef8e6" translate="yes" xml:space="preserve">
          <source>GIT Workflow Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67895330077bd45dcdadd20a8c9641c3a029d8f" translate="yes" xml:space="preserve">
          <source>Generating content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c6f6a882cc222b8cb1c24a5b81b686ffe7fe60" translate="yes" xml:space="preserve">
          <source>Get a rendered template as a string iterator. You can use a name, a filename or a template string as first parameter. Template rendering arguments can be passed as dictionaries or directly (as keyword arguments).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f348749c4acee27668c43a17377d1de6118c2ea" translate="yes" xml:space="preserve">
          <source>Get involved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96f6cf30bbcf12ad9a4d78cbb56803558519f34" translate="yes" xml:space="preserve">
          <source>Get the Sources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="48d8c627be3c12fac8a0a9ddb9ceaa5e126cf358" translate="yes" xml:space="preserve">
          <source>Goals</source>
          <target state="translated">Goals</target>
        </trans-unit>
        <trans-unit id="cf106254196155b9a82247adb833683e98c1a85f" translate="yes" xml:space="preserve">
          <source>Good old CGI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea53e6c05c8d56c15b73037572ba28d494f4fbb" translate="yes" xml:space="preserve">
          <source>Google AppEngine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e576c71201ca01d702693fa1debf5e57dfac7e2b" translate="yes" xml:space="preserve">
          <source>Greenlets to the rescue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad533ed9e87316e2789147fa45fecb8fbb12d99d" translate="yes" xml:space="preserve">
          <source>Gzip Compression in Bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885463dc89d33e8f75fa5100822a15b833ac6912" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; Handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06dffb0092e2c68ff518cbc09434d1792b272ba" translate="yes" xml:space="preserve">
          <source>HTTP Errors and Redirects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc46670cd995848df63f3703c3400f81060dd482" translate="yes" xml:space="preserve">
          <source>HTTP Headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fdc3e6f5c751d82295ac7ade9d715a4814c0d4" translate="yes" xml:space="preserve">
          <source>HTTP Request Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90949890e569fad1115fe8edd9d0ec7859b512b" translate="yes" xml:space="preserve">
          <source>HTTP authentication data as a (user, password) tuple. This implementation currently supports basic (not digest) authentication only. If the authentication happened at a higher level (e.g. in the front web-server or a middleware), the password field is None, but the user field is looked up from the &lt;code&gt;REMOTE_USER&lt;/code&gt; environ variable. On any errors, None is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289daad79a4676b96604530a4c7fe7b4384e2fcb" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;a href=&quot;../tutorial#plugins&quot;&gt;Plugins&lt;/a&gt; for general questions about plugins (installation, usage). If you plan to develop a new plugin, the &lt;a href=&quot;../plugindev&quot;&gt;Plugin Development Guide&lt;/a&gt; may help you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8658e641865e8ad436f936297df9f515ed2a90" translate="yes" xml:space="preserve">
          <source>HeaderDict</source>
          <target state="translated">HeaderDict</target>
        </trans-unit>
        <trans-unit id="019b97bd95cf650b2f55eacecd35b148823e02f3" translate="yes" xml:space="preserve">
          <source>Helper for Google App Engine deployments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f642c33aec8febe5c3411266e882be73c263bb6" translate="yes" xml:space="preserve">
          <source>Here is a basic example of explicit routing configuration for default bottle application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd5f5ad67d5ede190a7c0ff2b35f76abf6fea94" translate="yes" xml:space="preserve">
          <source>Here is an example template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814f22112bd4c4f22f9225c7098265c938124ff3" translate="yes" xml:space="preserve">
          <source>Here is an example that uses all three functions to implement optional template variables in different ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7667f42de90b6270f4b2ec60f96ebae1471bfc99" translate="yes" xml:space="preserve">
          <source>Here is an incomplete list of things that change in debug mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5591ca4810d0a4974192ba61d1048cabdd4800a" translate="yes" xml:space="preserve">
          <source>Heroku&amp;rsquo;s app stack passes the port that the application needs to listen on for requests, using the &lt;code&gt;os.environ&lt;/code&gt; dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac066591edb7d47406e88eed7ba536040a82daf4" translate="yes" xml:space="preserve">
          <source>Homepage</source>
          <target state="translated">Homepage</target>
        </trans-unit>
        <trans-unit id="bd293c6f8651b06827358e81a62fe2d42802a913" translate="yes" xml:space="preserve">
          <source>How Plugins Work: The Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0fd6131ed1c25d10cb6bdb8aebe63260bc5596" translate="yes" xml:space="preserve">
          <source>How it works: the main process will not start a server, but spawn a new child process using the same command line arguments used to start the main process. All module-level code is executed at least twice! Be careful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d5fd914f90447fd88ccf87f2ffe867b81a6761" translate="yes" xml:space="preserve">
          <source>If anything goes wrong, Bottle displays an informative but fairly plain error page. You can override the default for a specific HTTP status code with the &lt;a href=&quot;api#bottle.error&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt; decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e04081fd610f7e4f29c04685572e79dda05417" translate="yes" xml:space="preserve">
          <source>If defined, this method is used in favor of &lt;a href=&quot;#bottle.Plugin.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; to decorate route callbacks. The additional &lt;code&gt;route&lt;/code&gt; parameter is an instance of &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; and provides a lot of meta-information and context for that route. See &lt;a href=&quot;#route-context&quot;&gt;The Route Context&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ae4dffddbe967de9bf9121333507ef0f4968a6" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;expires&lt;/code&gt; nor &lt;code&gt;max_age&lt;/code&gt; is set (default), the cookie will expire at the end of the browser session (as soon as the browser window is closed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ead4331c6a33a141a43bc6936c7ec4bce7535d0" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;expires&lt;/code&gt; nor &lt;code&gt;max_age&lt;/code&gt; is set, the cookie expires at the end of the browser session or as soon as the browser window is closed. There are some other gotchas you should consider when using cookies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c60d1d8435f4eb92f701a689116dc1b6a4db45" translate="yes" xml:space="preserve">
          <source>If so - congratulations! You are now a successful user of Bottle. In case it did not work and you need to make some changes to the script, remember to stop Bottle serving the page, otherwise the revised version will not be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71171fdd23ac5ab82b2ab09f9d517c91a0a16ad" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; header is &lt;code&gt;application/json&lt;/code&gt;, this property holds the parsed content of the request body. Only requests smaller than &lt;a href=&quot;#bottle.BaseRequest.MEMFILE_MAX&quot;&gt;&lt;code&gt;MEMFILE_MAX&lt;/code&gt;&lt;/a&gt; are processed to avoid memory exhaustion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49949138bc82933a36e55746bc95fbee510cbca4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;download&lt;/code&gt; parameter is just &lt;code&gt;True&lt;/code&gt;, the original filename is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc393e920f12725041c994d8584188fe9fad2ed1" translate="yes" xml:space="preserve">
          <source>If the config file contains sections, their names are used as namespaces for the values within. The two special sections &lt;code&gt;DEFAULT&lt;/code&gt; and &lt;code&gt;bottle&lt;/code&gt; refer to the root namespace (no prefix).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09e653938bb690ffe49805a34961e1e2c34d41d" translate="yes" xml:space="preserve">
          <source>If the first parameter is a string, all keys are prefixed with this namespace. Apart from that it works just as the usual dict.update(). Example: &lt;code&gt;update('some.namespace', key='value')&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c18f09f8a2076178431d40dd62625c607386da" translate="yes" xml:space="preserve">
          <source>If the variable is not defined, create it with the given default value. Return the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45444924c55567af093de90fed21f6edada3fe26" translate="yes" xml:space="preserve">
          <source>If there is no adapter for your favorite server or if you need more control over the server setup, you may want to start the server manually. Refer to the server documentation on how to run WSGI applications. Here is an example for &lt;a href=&quot;http://pythonpaste.org/&quot;&gt;paste&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47982ca4f71c413f5359c0b4a147a11547905808" translate="yes" xml:space="preserve">
          <source>If true (default), unicode strings are first encoded with &lt;code&gt;latin1&lt;/code&gt; and then decoded to match &lt;a href=&quot;#bottle.FormsDict.input_encoding&quot;&gt;&lt;code&gt;input_encoding&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3c20ef36fb84e62224701e82488d442023299c" translate="yes" xml:space="preserve">
          <source>If true, most exceptions are caught and returned as &lt;a href=&quot;#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edbe3b37c4e783ea0f5e4d4237d6a1ccb3533af2" translate="yes" xml:space="preserve">
          <source>If you browse to &lt;code&gt;http://localhost:8080/stream&lt;/code&gt;, you should see &amp;lsquo;START&amp;rsquo;, &amp;lsquo;MIDDLE&amp;rsquo;, and &amp;lsquo;END&amp;rsquo; show up one at a time (rather than waiting 8 seconds to see them all at once).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9af6d079d3fe2a234ce603290c359ef14975127" translate="yes" xml:space="preserve">
          <source>If you find yourself to escape a lot, consider using custom tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6294d8c24dad9fe4b782254a93bbc1066234f4b1" translate="yes" xml:space="preserve">
          <source>If you need the whole dictionary with correctly decoded values (e.g. for WTForms), you can call &lt;a href=&quot;api#bottle.FormsDict.decode&quot;&gt;&lt;code&gt;FormsDict.decode()&lt;/code&gt;&lt;/a&gt; to get a re-encoded copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ac8449cd48caba240dce62e0a7bb77be7394d7" translate="yes" xml:space="preserve">
          <source>If you need to access a variable within a non-Python code line inside the template, you need to put it into double curly braces. This tells the template to insert the actual value of the variable right in place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed103ec2f92ff4fa8ef987307f87231e14d3caff" translate="yes" xml:space="preserve">
          <source>If you run this script and point your browser to &lt;code&gt;http://localhost:8080/stream&lt;/code&gt;, you should see &lt;code&gt;START&lt;/code&gt;, &lt;code&gt;MIDDLE&lt;/code&gt;, and &lt;code&gt;END&lt;/code&gt; show up one by one (rather than waiting 8 seconds to see them all at once). It works exactly as with normal threads, but now your server can handle thousands of concurrent requests without any problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0058c48a6e4c8c2b012273d4b88be2c35661a6" translate="yes" xml:space="preserve">
          <source>If you want to run for example Bottle with the Paste server, use the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41666942ec054180d642dc6e5b96ea15b04c40c" translate="yes" xml:space="preserve">
          <source>Ignore trailing slashes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f77414233ec24b91f51380b4b9267e22c16a15" translate="yes" xml:space="preserve">
          <source>Import a module or fetch an object from a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c52ae784143ca073db3ca6ce482a08efa089f57" translate="yes" xml:space="preserve">
          <source>Import values from a dictionary structure. Nesting can be used to represent namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d52affb3f69987c2eed03e1e4c74bd68b8bd60" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;tutorial#tutorial-dynamic-routes&quot;&gt;dynamic route syntax&lt;/a&gt;, a placeholder token (&lt;code&gt;:name&lt;/code&gt;) matches everything up to the next slash. This equals to &lt;code&gt;[^/]+&lt;/code&gt; in regular expression syntax. To accept slashes too, you have to add a custom regular pattern to the placeholder. An example: &lt;code&gt;/images/:filepath#.*#&lt;/code&gt; would match &lt;code&gt;/images/icons/error.png&lt;/code&gt; but &lt;code&gt;/images/:filename&lt;/code&gt; won&amp;rsquo;t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a013664652bdd41f9d8e6fba465777c7ea506c" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Python 2&lt;/strong&gt; all keys and values are byte-strings. If you need unicode, you can call &lt;a href=&quot;api#bottle.FormsDict.getunicode&quot;&gt;&lt;code&gt;FormsDict.getunicode()&lt;/code&gt;&lt;/a&gt; or fetch values via attribute access. Both methods try to decode the string (default: utf8) and return an empty string if that fails. No need to catch &lt;code&gt;UnicodeError&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8307296a7713317fb96041aa005884716c76df8b" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;Python 3&lt;/strong&gt; all strings are unicode, but HTTP is a byte-based wire protocol. The server has to decode the byte strings somehow before they are passed to the application. To be on the safe side, WSGI suggests ISO-8859-1 (aka latin1), a reversible single-byte codec that can be re-encoded with a different encoding later. Bottle does that for &lt;a href=&quot;api#bottle.FormsDict.getunicode&quot;&gt;&lt;code&gt;FormsDict.getunicode()&lt;/code&gt;&lt;/a&gt; and attribute access, but not for the dict-access methods. These return the unchanged values as provided by the server implementation, which is probably not what you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e4c6e902d99b26abca375621ba6180515e7da3" translate="yes" xml:space="preserve">
          <source>In addition, Bottle automatically pickles and unpickles any data stored to signed cookies. This allows you to store any pickle-able object (not only strings) to cookies, as long as the pickled data does not exceed the 4 KB limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1823355aa049e4850d02558614c87b3c6914ad9" translate="yes" xml:space="preserve">
          <source>In fact, any &lt;code&gt;Bottle&lt;/code&gt; instance routing can be configured same way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76d11e39cffa4b68818351d717320427e54b01c" translate="yes" xml:space="preserve">
          <source>In order to conform to the WSGI standard, all we have to do is to return a body iterable that we can write to asynchronously. With the help of &lt;a href=&quot;http://www.gevent.org/gevent.queue.html&quot;&gt;gevent.queue&lt;/a&gt;, we can &lt;em&gt;simulate&lt;/em&gt; a detached socket and rewrite the previous example as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29805e8e77b878d799483bcd77dbe4c079c90e5f" translate="yes" xml:space="preserve">
          <source>In our case, we want to catch a 403 error. The code is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60e329eae48458dc83284e3c8f6bca0e6e5fc9a" translate="yes" xml:space="preserve">
          <source>In pure WSGI, the range of types you may return from your application is very limited. Applications must return an iterable yielding byte strings. You may return a string (because strings are iterable) but this causes most servers to transmit your content char by char. Unicode strings are not allowed at all. This is not very practical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4aeb1213007179df35b031ff0d0accfde6af98" translate="yes" xml:space="preserve">
          <source>In some rare cases the Python encoding names differ from the names supported by the HTTP specification. Then, you have to do both: first set the &lt;code&gt;Response.content_type&lt;/code&gt; header (which is sent to the client unchanged) and then set the &lt;code&gt;Response.charset&lt;/code&gt; attribute (which is used to encode unicode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ea6c5e89ce70c7275ee27efa48fa667138919e" translate="yes" xml:space="preserve">
          <source>In some rare cases, however, it might be justifiable to break this rule. After you made your changes to the &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; instance, raise &lt;code&gt;RouteReset&lt;/code&gt; as an exception. This removes the current route from the cache and causes all plugins to be re-applied. The router is not updated, however. Changes to &lt;code&gt;rule&lt;/code&gt; or &lt;code&gt;method&lt;/code&gt; values have no effect on the router, but only on plugins. This may change in the future, though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d4cef3d7bd3c3c474854aae08c3af528ef1b43" translate="yes" xml:space="preserve">
          <source>In the example the Bottle route() method is never executed - only index() is tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fb4e8e6a8df7ca3cba338fd80513a2e0b0521f" translate="yes" xml:space="preserve">
          <source>In the following example, we assume that you want to make your application &amp;ldquo;ToDo list&amp;rdquo; accessible through &lt;code&gt;http://www.mypage.com/todo&lt;/code&gt; and your code, templates and SQLite database are stored in the path &lt;code&gt;/var/www/todo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544ba07d539decc4f0b7c49064ae120c831d4177" translate="yes" xml:space="preserve">
          <source>In the last chapter we built a very simple web application with only a single route. Here is the routing part of the &amp;ldquo;Hello World&amp;rdquo; example again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e501658f64aa04549dbc5dacf9a30180532fddd" translate="yes" xml:space="preserve">
          <source>In this document we use the &lt;a href=&quot;api#bottle.template&quot;&gt;&lt;code&gt;template()&lt;/code&gt;&lt;/a&gt; helper in examples for the sake of simplicity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4364dfb3bb8bb7565cc5b9ad7e2601a771574d" translate="yes" xml:space="preserve">
          <source>In this example the &lt;code&gt;/login&lt;/code&gt; URL is linked to two distinct callbacks, one for GET requests and another for POST requests. The first one displays a HTML form to the user. The second callback is invoked on a form submission and checks the login credentials the user entered into the form. The use of &lt;code&gt;Request.forms&lt;/code&gt; is further described in the &lt;a href=&quot;#tutorial-request&quot;&gt;Request Data&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29a1fb6b3f408e7034037f1dde1fd16a20c02b2" translate="yes" xml:space="preserve">
          <source>In this mode, Bottle is much more verbose and provides helpful debugging information whenever an error occurs. It also disables some optimisations that might get in your way and adds some checks that warn you about possible misconfiguration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e5419fb7a324ea8ac0ff591eec82d037250898" translate="yes" xml:space="preserve">
          <source>Inline Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834d4843f6b3418628734c39fb348a74cd3ccb35" translate="yes" xml:space="preserve">
          <source>Install Bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1c005268e24e75936f5066578d2a095e533040" translate="yes" xml:space="preserve">
          <source>Install the latest stable release via &lt;a href=&quot;http://pypi.python.org/pypi/bottle&quot;&gt;PyPI&lt;/a&gt; (&lt;code&gt;easy_install -U bottle&lt;/code&gt;) or download &lt;a href=&quot;https://github.com/defnull/bottle/raw/master/bottle.py&quot;&gt;bottle.py&lt;/a&gt; (unstable) into your project directory. There are no hard &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; dependencies other than the Python standard library. Bottle runs with &lt;strong&gt;Python 2.5+ and 3.x&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="743b984897e71edc7d06990e782c71686b542648" translate="yes" xml:space="preserve">
          <source>Instead of a single Bottle application server, you start one instance for each CPU core available using different local port (localhost:8080, 8081, 8082, ...). You can choose any server adapter you want, even asynchronous ones. Then a high performance load balancer acts as a reverse proxy and forwards each new requests to a random port, spreading the load between all available back-ends. This way you can use all of your CPU cores and even spread out the load between different physical servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf2d5eb347cd09cc31861308d36c62745c7a4f1" translate="yes" xml:space="preserve">
          <source>Instead of running your own HTTP server from within Bottle, you can attach Bottle applications to an &lt;a href=&quot;apache&quot;&gt;Apache server&lt;/a&gt; using &lt;a href=&quot;http://code.google.com/p/modwsgi/&quot;&gt;mod_wsgi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0665227bf2e04114bc1247a99d7c5892410e82" translate="yes" xml:space="preserve">
          <source>Integrates the &lt;code&gt;werkzeug&lt;/code&gt; library (alternative request and response objects, advanced debugging middleware and more).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af425f6e3c8752f33299783d1797f065079f6046" translate="yes" xml:space="preserve">
          <source>Introducing &lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b437e78153c2fc793905addcdd5bc633e7d5d5" translate="yes" xml:space="preserve">
          <source>Is bottle suitable for complex applications?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369005d5ad6193fc5cd3f9afd7c9b5b3211e7bd4" translate="yes" xml:space="preserve">
          <source>It is always a good idea to let GAE serve static files directly. Here is example for a working &lt;code&gt;app.yaml&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ec984677d9d189eaab2feccb4000a629262d06" translate="yes" xml:space="preserve">
          <source>It is basically pretty much the same what we already did above when adding new items, like using &lt;code&gt;GET&lt;/code&gt; data etc. The main addition here is using the dynamic route &lt;code&gt;:no&lt;/code&gt;, which here passes the number to the corresponding function. As you can see, &lt;code&gt;no&lt;/code&gt; is used within the function to access the right row of data within the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c224ab35be457f2ed7ea9d1d55182cd4d1cbda0e" translate="yes" xml:space="preserve">
          <source>Iterables and generators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5f04f0acaa7bfaca6df29095e5ef3cfc0062d5" translate="yes" xml:space="preserve">
          <source>JSON Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e65505051d57c11ac9f9e4380b0a90ce9d365d" translate="yes" xml:space="preserve">
          <source>Just keep in mind that compiling and rendering templates are two different actions, even if the &lt;a href=&quot;api#bottle.template&quot;&gt;&lt;code&gt;template()&lt;/code&gt;&lt;/a&gt; helper hides this fact. Templates are usually compiled only once and cached internally, but rendered many times with different keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e38a7689425231efd436fb5af51b6e176435e4" translate="yes" xml:space="preserve">
          <source>Just make sure not to use the debug mode on a production server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd0147dc8f524c101b7fda35f56e47b4142d2ef" translate="yes" xml:space="preserve">
          <source>Keep-alive requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1347698a922e6be552cfcbb4afc97c59bce10018" translate="yes" xml:space="preserve">
          <source>Keeping track of Sessions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2035a08032bcf2367cdb5b1c7afc419a6af46bab" translate="yes" xml:space="preserve">
          <source>Knowledge Base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73104df30b7814a58e44ad5b15761f5f3c66540" translate="yes" xml:space="preserve">
          <source>Legacy Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403db01a2138646f6ef959efdab1f3183721f440" translate="yes" xml:space="preserve">
          <source>Let us start from the beginning. In HTML, a typical &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0890b0938428afe7bf5aef8d5e8471ce7e322bbf" translate="yes" xml:space="preserve">
          <source>Let us take the &lt;code&gt;SQLitePlugin&lt;/code&gt; plugin for example. It only affects route callbacks that need a database connection. Other routes are left alone. Because of this, we can install the plugin application-wide with no additional overhead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b43e47618fc92a771b98fdfabca6e02d775987" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s have a look at some practical examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b257d2f9a0d136f23acb98f4ac9a650102e01e4e" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s have a look at the code: every line starting with % is interpreted as Python code. Please note that, of course, only valid Python statements are allowed, otherwise the template will raise an exception, just as any other Python code. The other lines are plain HTML markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c31e1ef5ac14aa7994d7dbd74160fdfbcb9d6b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s have a look what we just did: We imported the necessary module &lt;code&gt;sqlite3&lt;/code&gt; to access to SQLite database and from Bottle we imported &lt;code&gt;route&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt;. The &lt;code&gt;run()&lt;/code&gt; statement simply starts the web server included in Bottle. By default, the web server serves the pages on localhost and port 8080. Furthermore, we imported &lt;code&gt;route&lt;/code&gt;, which is the function responsible for Bottle&amp;rsquo;s routing. As you can see, we defined one function, &lt;code&gt;todo_list()&lt;/code&gt;, with a few lines of code reading from the database. The important point is the &lt;a href=&quot;http://docs.python.org/glossary.html#term-decorator&quot;&gt;decorator statement&lt;/a&gt;&lt;code&gt;@route('/todo')&lt;/code&gt; right before the &lt;code&gt;def todo_list()&lt;/code&gt; statement. By doing this, we bind this function to the route &lt;code&gt;/todo&lt;/code&gt;, so every time the browsers calls &lt;code&gt;http://localhost:8080/todo&lt;/code&gt;, Bottle returns the result of the function &lt;code&gt;todo_list()&lt;/code&gt;. That is how routing within bottle works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee933f516cffd5f1ae580bb9f7b5e221719ce7a" translate="yes" xml:space="preserve">
          <source>Lets forget about the low-level details for a while and speak about WebSockets. Since you are reading this article, you probably know what WebSockets are: A bidirectional communication channel between a browser (client) and a web application (server).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e274ea5c1bef50c9af91bc871292b5fa7c8359" translate="yes" xml:space="preserve">
          <source>Lighttpd example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e724c89e690e4e9763b5274cb3f7cdec8bc556b" translate="yes" xml:space="preserve">
          <source>List of available Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1383b35ea5775a13e7e164e4128c0264b35b0178" translate="yes" xml:space="preserve">
          <source>List of keys that do not have a &lt;code&gt;HTTP_&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8436219754c72851dc9c1ed27232f1125c7f3938" translate="yes" xml:space="preserve">
          <source>Listening to configuration changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637dc5e591101e782493aa453b868afb87cef944" translate="yes" xml:space="preserve">
          <source>Load Balancer (Manual Setup)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab7bad5be688e618645ca5788dc38620af2712c" translate="yes" xml:space="preserve">
          <source>Load a bottle application from a module and make sure that the import does not affect the current default application, but returns a separate application object. See &lt;a href=&quot;#bottle.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; for the target parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71d92b6e0bbccad416b6d0e1959e0065365925c" translate="yes" xml:space="preserve">
          <source>Load values from an &lt;a href=&quot;#id1&quot;&gt;&lt;span id=&quot;id2&quot;&gt;*&lt;/span&gt;&lt;/a&gt;.ini style config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8775cb2aec9111460fb485c9117b74499b234618" translate="yes" xml:space="preserve">
          <source>Loading Configuration from a File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8372b9a7ed382ca9f3668bf42e94bce3e89a31" translate="yes" xml:space="preserve">
          <source>Loading Configuration from a nested &lt;code&gt;dict&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cd3148d83f4757a04d6dfb88bb7f05f815277c" translate="yes" xml:space="preserve">
          <source>Loading Configuration from a nested dict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af19291f4b5ba7180686c61478b4723dd14d5df" translate="yes" xml:space="preserve">
          <source>LocalRequest</source>
          <target state="translated">LocalRequest</target>
        </trans-unit>
        <trans-unit id="c5e65bad7beea867b469cbd7fd7db3b1cc494ab1" translate="yes" xml:space="preserve">
          <source>LocalRequest::bind()</source>
          <target state="translated">LocalRequest::bind()</target>
        </trans-unit>
        <trans-unit id="f7d1e0cce3808b800980aeccf591c7358f7189bd" translate="yes" xml:space="preserve">
          <source>LocalResponse</source>
          <target state="translated">LocalResponse</target>
        </trans-unit>
        <trans-unit id="ab6ccbe5ebd6589f313cd9ba5ff348b7e5251339" translate="yes" xml:space="preserve">
          <source>Lookup a config field and return its value, first checking the route.config, then route.app.config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2dd584371f1b289ca8f8f2c5450730b8d0f9d9" translate="yes" xml:space="preserve">
          <source>Macaron</source>
          <target state="translated">Macaron</target>
        </trans-unit>
        <trans-unit id="d7476ec9f85bf032bbe2d8ece831b8306a01a436" translate="yes" xml:space="preserve">
          <source>Macaron is an object-relational mapper (ORM) for SQLite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4485498e8a7f4c951b955f69835ecebbf57af25" translate="yes" xml:space="preserve">
          <source>Main code for the application &lt;code&gt;todo.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c17d48c867549a4c16f4e77ccb0b9a244d09615" translate="yes" xml:space="preserve">
          <source>Make sure the cache does not get to big.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="37ec5fb31d90075c568ab5e42a674ead7516e47b" translate="yes" xml:space="preserve">
          <source>Mark the current template to be later included into a different template. After the current template is rendered, its resulting text is stored in a variable named &lt;code&gt;base&lt;/code&gt; and passed to the base-template, which is then rendered. This can be used to &lt;code&gt;wrap&lt;/code&gt; a template with surrounding text, or simulate the inheritance feature found in other template engines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffffe6301afe8e141437677e1cc1d9c52947a86" translate="yes" xml:space="preserve">
          <source>Maximum size of memory buffer for &lt;a href=&quot;#bottle.BaseRequest.body&quot;&gt;&lt;code&gt;body&lt;/code&gt;&lt;/a&gt; in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1ed0ca3eceeb78324b29107c8d02fbbb6d7086" translate="yes" xml:space="preserve">
          <source>Maybe you already have an &lt;a href=&quot;http://www.apache.org&quot;&gt;Apache&lt;/a&gt; or you want to run a Bottle-based application large scale - then it is time to think about Apache with &lt;a href=&quot;http://code.google.com/p/modwsgi/&quot;&gt;mod_wsgi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf64b297fee0baadcfa3030b1bf8b5e5aaba50d" translate="yes" xml:space="preserve">
          <source>Maybe you already noticed that Bottle sends a short error message to the browser in case something within the script is wrong, e.g. the connection to the database is not working. For debugging purposes it is quite helpful to get more details. This can be easily achieved by adding the following statement to the script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aaf7cb887a73592c75fb8cfcf35b165a61e67c" translate="yes" xml:space="preserve">
          <source>Memcache integration for Bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45279eded72a50e238c8656e6bbec61d6b9b9df8" translate="yes" xml:space="preserve">
          <source>Merge the routes of another &lt;a href=&quot;#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; application or a list of &lt;a href=&quot;#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; objects into this application. The routes keep their &amp;lsquo;owner&amp;rsquo;, meaning that the &lt;a href=&quot;#bottle.Route.app&quot;&gt;&lt;code&gt;Route.app&lt;/code&gt;&lt;/a&gt; attribute is not changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24be19d0d7f68b95469710fa1166dd9006c4fba" translate="yes" xml:space="preserve">
          <source>Meta package to install the bottle plugin collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c1069b1d33fd7a5bbcf140560e3a8a4cc1d1fd" translate="yes" xml:space="preserve">
          <source>Module Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17882af29e427594ebf0167713d05aeec8952b9" translate="yes" xml:space="preserve">
          <source>MongoDB integration for Bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97fdac4417c601267379b9656a2c522643936a6" translate="yes" xml:space="preserve">
          <source>Most browsers try to open downloaded files if the MIME type is known and assigned to an application (e.g. PDF files). If this is not what you want, you can force a download dialog and even suggest a filename to the user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83df64dfae0833625f45b304cd780440a9351c7f" translate="yes" xml:space="preserve">
          <source>Most headers are unique, meaning that only one header per name is send to the client. Some special headers however are allowed to appear more than once in a response. To add an additional header, use &lt;code&gt;Response.add_header()&lt;/code&gt; instead of &lt;code&gt;Response.set_header()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb6cae945b7c3aa0bedaba8f0bb1bb0b4be7671" translate="yes" xml:space="preserve">
          <source>Most plugins are specific to the application they were installed to. Consequently, they should not affect sub-applications mounted with &lt;a href=&quot;api#bottle.Bottle.mount&quot;&gt;&lt;code&gt;Bottle.mount()&lt;/code&gt;&lt;/a&gt;. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98cea24ecebc4ba37fefb1bf0e277cb024d1585" translate="yes" xml:space="preserve">
          <source>Most servers limit the number of threads to avoid their relatively high overhead. Pools of 20 or less threads are common. As soon as all threads are occupied, any new connection is stalled. The server is effectively dead for everyone else. If you want to implement a chat that uses long-polling ajax requests to get real-time updates, you&amp;rsquo;d reach the limited at 20 concurrent connections. That&amp;rsquo;s a pretty small chat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5415dc3d50a680b763ef6aa6e5537751c8ce21c2" translate="yes" xml:space="preserve">
          <source>Most servers limit the size of their worker pools to a relatively low number of concurrent threads, due to the high overhead involved in switching between and creating new threads. While threads are cheap compared to processes (forks), they are still expensive to create for each new connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3684c3793859deb75f2a7ca43c326b3f6ae10a" translate="yes" xml:space="preserve">
          <source>Mount an application (&lt;a href=&quot;#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; or plain WSGI) to a specific URL prefix. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953b15a9991dd3cf45d05422ed2057e683840ca2" translate="yes" xml:space="preserve">
          <source>Multi-threaded</source>
          <target state="translated">Multi-threaded</target>
        </trans-unit>
        <trans-unit id="673dbec47a3d4ec88976e4d25dc20e9c0ccbb72a" translate="yes" xml:space="preserve">
          <source>Multi-threaded and very stable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848be455b50052132cd7ebf77174d1a3a44d6a09" translate="yes" xml:space="preserve">
          <source>Multi-threaded, poweres Pyramid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563a3771258fa5bc65fcb70ca6a951ffd7516293" translate="yes" xml:space="preserve">
          <source>Multi-threaded, stable, tried and tested</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca4fcd9bd867ff311856dfb743b72bd302027b6" translate="yes" xml:space="preserve">
          <source>MultiDict</source>
          <target state="translated">MultiDict</target>
        </trans-unit>
        <trans-unit id="d7ebf917af4f186bff4879a24e36d7a59c1a3c8b" translate="yes" xml:space="preserve">
          <source>MultiDict::append()</source>
          <target state="translated">MultiDict::append()</target>
        </trans-unit>
        <trans-unit id="5143ffdbc6a255bf595ef8309c8139a7b26bb575" translate="yes" xml:space="preserve">
          <source>MultiDict::get()</source>
          <target state="translated">MultiDict::get()</target>
        </trans-unit>
        <trans-unit id="305339e8915789a500e1fd29b5175416a97ce9e0" translate="yes" xml:space="preserve">
          <source>MultiDict::getall()</source>
          <target state="translated">MultiDict::getall()</target>
        </trans-unit>
        <trans-unit id="d07a64d7a254e6d5ce63f7268824d955d51dfcdf" translate="yes" xml:space="preserve">
          <source>MultiDict::getlist()</source>
          <target state="translated">MultiDict::getlist()</target>
        </trans-unit>
        <trans-unit id="30109f5e940c3c8ac2184ce5e44b79f36a96646d" translate="yes" xml:space="preserve">
          <source>MultiDict::getone()</source>
          <target state="translated">MultiDict::getone()</target>
        </trans-unit>
        <trans-unit id="b98d971e3df780fc6459e9ca139d19f3fc8ad0ad" translate="yes" xml:space="preserve">
          <source>MultiDict::replace()</source>
          <target state="translated">MultiDict::replace()</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="72fbeecca995286f20154ae96faabc7bb6812adf" translate="yes" xml:space="preserve">
          <source>Name of the file on the client file system, but normalized to ensure file system compatibility. An empty filename is returned as &amp;lsquo;empty&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243baf661dab3baa99cf4027547c8c23d7242bec" translate="yes" xml:space="preserve">
          <source>Name of the upload form field</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bb70b62383c5e133ef50b906c001abec8862d0" translate="yes" xml:space="preserve">
          <source>Namespaces are separated by dots (e.g. &lt;code&gt;namespace.field&lt;/code&gt; or &lt;code&gt;namespace.subnamespace.field&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b150c33703661a4e069fa3f97c482cd27685ef" translate="yes" xml:space="preserve">
          <source>Naming Convention</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fa61a3452cc1957849834a13724c83849e2c1b" translate="yes" xml:space="preserve">
          <source>New Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcde8ec0560b6129ac7ceb94e6b76437cebda2e" translate="yes" xml:space="preserve">
          <source>New in version 0.10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0798e2f31cc8f6f05534a395874ff516c037ea2" translate="yes" xml:space="preserve">
          <source>New in version 0.9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="0473f2744841942be842e103e918201172b2830a" translate="yes" xml:space="preserve">
          <source>Now it is time to introduce Bottle in order to create a web-based application. But first, we need to look into a basic concept of Bottle: routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8947c9a258cadd7628f8d728000fb5c9e5e92a4a" translate="yes" xml:space="preserve">
          <source>Now it is time to write the corresponding template, which looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf73b8718f7291c2a9c617c9357dd97b5fd06f1e" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s have a look at casting the output of the script into a proper format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccb6c7084f3a18959d95401279a5798fd79ee5f" translate="yes" xml:space="preserve">
          <source>Now we are able to extend our to do list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ac7d6d6590a7fb43b1c7edec62cca1d5d04260" translate="yes" xml:space="preserve">
          <source>Now we are at the end of this introduction and tutorial to Bottle. We learned about the basic concepts of Bottle and wrote a first application using the Bottle framework. In addition to that, we saw how to adapt Bottle for large tasks and serve Bottle through an Apache web server with mod_wsgi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f30390e94c1922739e476138988bac9eba1444" translate="yes" xml:space="preserve">
          <source>Now, after understanding the little script above, it is time to execute it and watch the result yourself. Remember that on Linux- / Unix-based systems the file &lt;code&gt;todo.py&lt;/code&gt; needs to be executable first. Then, just run &lt;code&gt;python todo.py&lt;/code&gt; and call the page &lt;code&gt;http://localhost:8080/todo&lt;/code&gt; in your browser. In case you made no mistake writing the script, the output should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1fb5d0ffd50fd7b427042675b7588217acd1e33" translate="yes" xml:space="preserve">
          <source>Now, bottle only catches its own exceptions (&lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;api#bottle.BottleException&quot;&gt;&lt;code&gt;BottleException&lt;/code&gt;&lt;/a&gt;) and your middleware can handle the rest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270245d71c0466864c4e7307815a572af1eb7fa2" translate="yes" xml:space="preserve">
          <source>Of course this is a very simple example, but it shows the basic concept of how applications are built with Bottle. Continue reading and you&amp;rsquo;ll see what else is possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64236266e222cd1d26ec8f1756cac60ee88ff43b" translate="yes" xml:space="preserve">
          <source>Of course, both parameters can be combined, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57235ec5ff412b0a8d6626b97cc3752b15b31530" translate="yes" xml:space="preserve">
          <source>Of course, this example is somehow artificially constructed - it would be easier to use a plain dynamic route only combined with a validation. Nevertheless, we want to see how regular expression routes work: the line &lt;code&gt;@route(/item:item_#[0-9]+#)&lt;/code&gt; starts like a normal route, but the part surrounded by # is interpreted as a regular expression, which is the dynamic part of the route. So in this case, we want to match any digit between 0 and 9. The following function &amp;ldquo;show_item&amp;rdquo; just checks whether the given item is present in the database or not. In case it is present, the corresponding text of the task is returned. As you can see, only the regular expression part of the route is passed forward. Furthermore, it is always forwarded as a string, even if it is a plain integer number, like in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86ce679d61af1625975d2429d1e07167ac5afd3" translate="yes" xml:space="preserve">
          <source>Of course, this is just a simplification. Plugins can do a lot more than just decorating route callbacks, but it is a good starting point. Lets have a look at some code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549fb38e1142a50b4d8e9c77cfde8fb96940d7c3" translate="yes" xml:space="preserve">
          <source>Old Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42570fa9787fada7f594dce735fce9fe0f352feb" translate="yes" xml:space="preserve">
          <source>Once all plugins are applied to a route, the wrapped callback is cached and subsequent requests are handled by the cached version directly. This means that a plugin is usually applied only once to a specific route. That cache, however, is cleared every time the list of installed plugins changes. Your plugin should be able to decorate the same route more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e0726a4d059d2087d091f434feb6d16feefede" translate="yes" xml:space="preserve">
          <source>Once all plugins are applied to a route, the wrapped route callback is cached to speed up subsequent requests. If the behavior of your plugin depends on configuration, and you want to be able to change that configuration at runtime, you need to read the configuration on each request. Easy enough.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9216067f115975f250d419d4228d81973e223b" translate="yes" xml:space="preserve">
          <source>One of the fastest load balancers available is &lt;a href=&quot;http://www.apsis.ch/pound&quot;&gt;Pound&lt;/a&gt; but most common web servers have a proxy-module that can do the work just fine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8ab470dae4467a1015157ed556f23bd70ba48a" translate="yes" xml:space="preserve">
          <source>Only ASCII letters, digits, dashes, underscores and dots are allowed in the final filename. Accents are removed, if possible. Whitespace is replaced by a single dash. Leading or tailing dots or dashes are removed. The filename is limited to 255 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ad633fbc535bdc4161414e734b1b6c6996719c" translate="yes" xml:space="preserve">
          <source>Open file(-like) object (BytesIO buffer or temporary file)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2daf6b23afbe7dc33bf6a7b322429adbd1ef14" translate="yes" xml:space="preserve">
          <source>Or, if virtualenv is not installed on your system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8089aeb01a40b717bac96cb12faa1ba230d9a83" translate="yes" xml:space="preserve">
          <source>Original Plugin API as described in the 0.9 docs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658d76fbdacc44b69856b6b6f7dd5d69789acd12" translate="yes" xml:space="preserve">
          <source>Other Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936f1ab1cd28d9176ac347bb1f553854dc648c20" translate="yes" xml:space="preserve">
          <source>Other plugin may populate the thread-safe &lt;code&gt;local&lt;/code&gt; object, change details of the &lt;a href=&quot;api#bottle.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; object, filter the data returned by the callback or bypass the callback completely. An &amp;ldquo;auth&amp;rdquo; plugin for example could check for a valid session and return a login page instead of calling the original callback. What happens exactly depends on the plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bc0e2e5d0b0b6530a6d55a4b7f0ff1d855389a" translate="yes" xml:space="preserve">
          <source>POST Form fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="7405d3288f434638048d3cf88845bb692c25ddd3" translate="yes" xml:space="preserve">
          <source>Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b372f41f4f6afdbcad0bea922f7791bc1a3ba083" translate="yes" xml:space="preserve">
          <source>Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="1dfa4fc67014e0dba6e1d2ca4baa388c52478da5" translate="yes" xml:space="preserve">
          <source>Please note that this is just an example. If you want to work with cookies, read &lt;a href=&quot;#tutorial-cookies&quot;&gt;ahead&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc208f8ebe86aa9ee6a37d49d48058be5364bff" translate="yes" xml:space="preserve">
          <source>Plugin</source>
          <target state="translated">Plugin</target>
        </trans-unit>
        <trans-unit id="a21c1554b28d950bc6b8f1592fbd61855a698e7a" translate="yes" xml:space="preserve">
          <source>Plugin API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591c898133caaf91fc8b43d595be7be84bb81177" translate="yes" xml:space="preserve">
          <source>Plugin API changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed63c09c34018762163fe81cf1a91b7c166d62e4" translate="yes" xml:space="preserve">
          <source>Plugin Development Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc01c3c75478045759eb32d2405dc72c7548fef" translate="yes" xml:space="preserve">
          <source>Plugin Example: SQLitePlugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db026adb2912f5e6d6348af766ae2a95be64e23c" translate="yes" xml:space="preserve">
          <source>Plugin::__call__()</source>
          <target state="translated">Plugin::__call__()</target>
        </trans-unit>
        <trans-unit id="00955ec4b1827161cac3a05e11d49c2078a0741f" translate="yes" xml:space="preserve">
          <source>Plugin::apply()</source>
          <target state="translated">Plugin::apply()</target>
        </trans-unit>
        <trans-unit id="5a9160bbda125ddd9473cfea5e1481d5c7efb88b" translate="yes" xml:space="preserve">
          <source>Plugin::close()</source>
          <target state="translated">Plugin::close()</target>
        </trans-unit>
        <trans-unit id="af16d5ccc5c0afac8e07b5cbee0a59c6a9206dc9" translate="yes" xml:space="preserve">
          <source>Plugin::setup()</source>
          <target state="translated">Plugin::setup()</target>
        </trans-unit>
        <trans-unit id="ab2e26dd8b8868a3969cb3321e0c983c0d9d67d4" translate="yes" xml:space="preserve">
          <source>Plugins</source>
          <target state="translated">Plugins</target>
        </trans-unit>
        <trans-unit id="1bcab932a83ade79bfbfe6d55611103effb590a0" translate="yes" xml:space="preserve">
          <source>Plugins and Sub-Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b02e5606eed7782866c02d3e7e0220c58d9f27" translate="yes" xml:space="preserve">
          <source>Plugins are applied immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac47cc690530e6ac9ac5cd8820d19a4bf5f99f4" translate="yes" xml:space="preserve">
          <source>Plugins are applied on demand, that is, as soon as a route is requested for the first time. For this to work properly in multi-threaded environments, the plugin should be thread-safe. This is not a problem most of the time, but keep it in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4167ce7da760e292f810d302d66c7e80150f03" translate="yes" xml:space="preserve">
          <source>Plugins can be installed and removed at any time, even at runtime while serving requests. This enables some neat tricks (installing slow debugging or profiling plugins only when needed) but should not be overused. Each time the list of plugins changes, the route cache is flushed and all plugins are re-applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47991aa50ff9cb0f6ef647d10aec24f57c0e1f39" translate="yes" xml:space="preserve">
          <source>Plugins can be installed application-wide or just to some specific routes that need additional functionality. Most plugins can safely be installed to all routes and are smart enough to not add overhead to callbacks that do not need their functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4369850e02675edac617808b02b05a076387f638" translate="yes" xml:space="preserve">
          <source>Plugins listed here are not part of Bottle or the Bottle project, but developed and maintained by third parties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9299283287ce1e521338037fbedcd0f16f9f90" translate="yes" xml:space="preserve">
          <source>Plugins must be callable or implement &lt;a href=&quot;#bottle.Plugin.apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt;. If &lt;a href=&quot;#bottle.Plugin.apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; is defined, it is always preferred over calling the plugin directly. All other methods and attributes are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081398c0d80a39718ef8f218f662de6da8c888d8" translate="yes" xml:space="preserve">
          <source>Pound example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a4b01f3a60c0d8dcfe73fb6c6b20bf03225cbd" translate="yes" xml:space="preserve">
          <source>Pre-forked, partly written in C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c258f5c3b5d438f6b139f6db6fb48a1d83816ef" translate="yes" xml:space="preserve">
          <source>Primer to Asynchronous Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e780a97290d55edc688146c24a1ceebad8271d54" translate="yes" xml:space="preserve">
          <source>Problems with reverse proxies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbd5d764b887fa0ee58e29483a5557c25b615bf" translate="yes" xml:space="preserve">
          <source>Programmer code that is to be called when some external action happens. In the context of web frameworks, the mapping between URL paths and application code is often achieved by specifying a callback function for each URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57bf40c7383c053d6d9c8e768d382a452132ceb" translate="yes" xml:space="preserve">
          <source>Python is a very powerful language but its whitespace-aware syntax makes it difficult to use as a template language. SimpleTemplate removes some of these restrictions and allows you to write clean, readable and maintainable templates while preserving full access to the features, libraries and speed of the Python language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d599d1787f0c332664326f2c039ba43d41a94710" translate="yes" xml:space="preserve">
          <source>Query Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364f4d4b51bb79503812cd9cdfa8ccbfe2bf10cb" translate="yes" xml:space="preserve">
          <source>Quickstart: &amp;ldquo;Hello World&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b876d5f5297299f084563bab1cdfd40ee619593" translate="yes" xml:space="preserve">
          <source>Raw filename as sent by the client (may contain unsafe characters)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb1092f32d4fcbf9e061ffd718d4ec689c6c95e" translate="yes" xml:space="preserve">
          <source>Recipes</source>
          <target state="translated">Recipes</target>
        </trans-unit>
        <trans-unit id="18be7206abee3b0f422a47cd3dffaf192344a70e" translate="yes" xml:space="preserve">
          <source>Redirects and url-building only works if bottle knows the public address and location of your application. If you run bottle locally behind a reverse proxy or load balancer, some information might get lost along the way. For example, the &lt;code&gt;wsgi.url_scheme&lt;/code&gt; value or the &lt;code&gt;Host&lt;/code&gt; header might reflect the local request by your proxy, not the real request by the client. Here is a small WSGI middleware snippet that helps to fix these values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959efad528ab91460cb2a29f44c6691855f1cd45" translate="yes" xml:space="preserve">
          <source>Redis integration for Bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="b9653992d1ed5a7c913f7c85aca4902d1eb61c20" translate="yes" xml:space="preserve">
          <source>Reference: Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1ab38f38538c932ca7494a5419b540b6a7de0b" translate="yes" xml:space="preserve">
          <source>Reference: Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b081947b490cf2064a01aa0cb89dae8744e893" translate="yes" xml:space="preserve">
          <source>Reference: SimpleTemplate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1c2f3749866c284616012a5186b790ba49dcb0" translate="yes" xml:space="preserve">
          <source>Release 0.10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1a66fd9a47b18f9b1dcf1dc4d7fced71dccac5" translate="yes" xml:space="preserve">
          <source>Release 0.11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bf1bf458eabab3610392d357ec49fa6660593a" translate="yes" xml:space="preserve">
          <source>Release 0.12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c459a6b15ba9196f2cf5716303d1387b8a62fcf" translate="yes" xml:space="preserve">
          <source>Release 0.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9181c870a330924c13f88910fec72ac8079f08ff" translate="yes" xml:space="preserve">
          <source>Release 0.9</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92698ecf02e51ae5478ea29f1c3b9c24ef4cec1c" translate="yes" xml:space="preserve">
          <source>Release Notes and Changelog</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab3b96f890653e5cfcdd2664ae5981cf6e33451" translate="yes" xml:space="preserve">
          <source>Releases and Updates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22bd2ac1ee7587638d0773b8649b51b7834b2ce" translate="yes" xml:space="preserve">
          <source>Remove a callback from a hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e620481459071ec76d619a61e69f19410b947ac5" translate="yes" xml:space="preserve">
          <source>Render a sub-template with the specified variables and insert the resulting text into the current template. The function returns a dictionary containing the local variables passed to or defined within the sub-template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1bcd4d8d619da06fbe426e97e3aa1d7ee98f3a" translate="yes" xml:space="preserve">
          <source>Render function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0138d2ade4f47c34ea09af8b92eeba54fc803553" translate="yes" xml:space="preserve">
          <source>Render the template using keyword arguments as local variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43500ad1672b329c9f905dedcfb2388aa91f3d9f" translate="yes" xml:space="preserve">
          <source>Render the template with the specified local variables and return a single byte or unicode string. If it is a byte string, the encoding must match self.encoding. This method must be thread-safe! Local variables may be provided in dictionaries (args) or directly, as keywords (kwargs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57cca002266023994f31fd425930c2519f891af" translate="yes" xml:space="preserve">
          <source>Renderer plugin for bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d063a25de384c15da2892be378d62cba438be81f" translate="yes" xml:space="preserve">
          <source>Replace the list of values with a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f599190f52e50a91b3cf038e035a56099b4055" translate="yes" xml:space="preserve">
          <source>Repository Structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a871ebe700adcaaab8e215fd7c1954c67f43df7" translate="yes" xml:space="preserve">
          <source>Request Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370aa763d24c7c6a889f8bc1f6473021ef74ab40" translate="yes" xml:space="preserve">
          <source>Request Routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccce87e3e70ae6f603c743ce9804da462d485e2" translate="yes" xml:space="preserve">
          <source>Request path including &lt;a href=&quot;#bottle.BaseRequest.script_name&quot;&gt;&lt;code&gt;script_name&lt;/code&gt;&lt;/a&gt; (if present).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa53fa2a1a7a09dc0f6522c631615ab6b2dddb3a" translate="yes" xml:space="preserve">
          <source>Reset all routes (force plugins to be re-applied) and clear all caches. If an ID or route object is given, only that specific route is affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667671fa4f9416f0d786043650742c5782e4e5d7" translate="yes" xml:space="preserve">
          <source>ResourceManager</source>
          <target state="translated">ResourceManager</target>
        </trans-unit>
        <trans-unit id="d23ac26ce4eed3adad72a99b0e46cb003a837672" translate="yes" xml:space="preserve">
          <source>ResourceManager::add_path()</source>
          <target state="translated">ResourceManager::add_path()</target>
        </trans-unit>
        <trans-unit id="68b4668e4afdc23c89686d016a2d1cd324ad90e8" translate="yes" xml:space="preserve">
          <source>ResourceManager::lookup()</source>
          <target state="translated">ResourceManager::lookup()</target>
        </trans-unit>
        <trans-unit id="1b2c5a54ae2ef3c3f64634d57000a77bc72c4ad9" translate="yes" xml:space="preserve">
          <source>ResourceManager::open()</source>
          <target state="translated">ResourceManager::open()</target>
        </trans-unit>
        <trans-unit id="b75541425a75f9277e93afa1b3549434c27a5cde" translate="yes" xml:space="preserve">
          <source>Response Header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6307e64c96267873dc04b88084a4bd3e85799969" translate="yes" xml:space="preserve">
          <source>Response headers such as &lt;code&gt;Cache-Control&lt;/code&gt; or &lt;code&gt;Location&lt;/code&gt; are defined via &lt;code&gt;Response.set_header()&lt;/code&gt;. This method takes two parameters, a header name and a value. The name part is case-insensitive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f1a474e6a0b00e7f46af52cd1958908d28e55d" translate="yes" xml:space="preserve">
          <source>Response metadata such as the HTTP status code, response headers and cookies are stored in an object called &lt;a href=&quot;api#bottle.response&quot;&gt;&lt;code&gt;response&lt;/code&gt;&lt;/a&gt; up to the point where they are transmitted to the browser. You can manipulate these metadata directly or use the predefined helper methods to do so. The full API and feature list is described in the API section (see &lt;a href=&quot;api#bottle.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt;), but the most common use cases and features are covered here, too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="5a86210b9ce3c03d6fe947c26561c425d0e08af9" translate="yes" xml:space="preserve">
          <source>Return True if the argument looks like a encoded cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963a4a3c6f45dcc5d9b3991ba1c75cd0c3700a85" translate="yes" xml:space="preserve">
          <source>Return True if the variable is defined in the current template namespace, False otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae0ebc6a9fcfb9aaba1cafed8a1077b2aa6bfd4" translate="yes" xml:space="preserve">
          <source>Return a (possibly empty) list of values for a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f693bf3a9d05a9613266b69b7a6eec8d0bf4152" translate="yes" xml:space="preserve">
          <source>Return a decorator that attaches a callback to a hook. See &lt;a href=&quot;#bottle.Bottle.add_hook&quot;&gt;&lt;code&gt;add_hook()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945a89ae324b67fbe014ebd91566acd04d4ec7e6" translate="yes" xml:space="preserve">
          <source>Return a generator for routes that match the signature (name, args) of the func parameter. This may yield more than one route if the function takes optional keyword arguments. The output is best described by example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622c2ca3760d3218f0be3465ab3787e38cc171d0" translate="yes" xml:space="preserve">
          <source>Return a list of argument names the callback (most likely) accepts as keyword arguments. If the callback is a decorated function, try to recover the original function before inspection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475cc1af2d6c02977c853f13c5f855a8a56f0696" translate="yes" xml:space="preserve">
          <source>Return a new &lt;a href=&quot;#bottle.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; with a shallow &lt;a href=&quot;#bottle.BaseRequest.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt; copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842108545aec6997044160b2d9b5a0e8911ab957" translate="yes" xml:space="preserve">
          <source>Return a string that matches a named route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe696d06cb57750b1c92170d145ece2a1c31c8e" translate="yes" xml:space="preserve">
          <source>Return an iterable of meta field names defined for a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d9677538806000d82dec6ef22c73a732bb5d37e" translate="yes" xml:space="preserve">
          <source>Return the callback. If the callback is a decorated function, try to recover the original function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf99750641d2143c47ab79405f1778d436f2838" translate="yes" xml:space="preserve">
          <source>Return the charset specified in the content-type header (default: utf8).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cb16ff3efb74310dfee3cde08a036a325de67c" translate="yes" xml:space="preserve">
          <source>Return the content of a cookie. To read a &lt;code&gt;Signed Cookie&lt;/code&gt;, the &lt;code&gt;secret&lt;/code&gt; must match the one used to create the cookie (see &lt;a href=&quot;#bottle.BaseResponse.set_cookie&quot;&gt;&lt;code&gt;BaseResponse.set_cookie()&lt;/code&gt;&lt;/a&gt;). If anything goes wrong (missing cookie or wrong signature), return a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8d4bc48c7236fdd488151eab83821b834a4046" translate="yes" xml:space="preserve">
          <source>Return the current &lt;a href=&quot;tutorial#default-app&quot;&gt;Default Application&lt;/a&gt;. Actually, these are callable instances of &lt;a href=&quot;#bottle.AppStack&quot;&gt;&lt;code&gt;AppStack&lt;/code&gt;&lt;/a&gt; and implement a stack-like API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0832ea45bdfa921f5b8b4b3d0f071727a62d171" translate="yes" xml:space="preserve">
          <source>Return the current default application and remove it from the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb37e65d9bc17fa9ee08fc164852a49e41fd19fc" translate="yes" xml:space="preserve">
          <source>Return the header value as is (may be bytes or unicode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ffa770101532ae178e5a7d2f0c288f8ae85582" translate="yes" xml:space="preserve">
          <source>Return the most recent value for a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f10a1b9608527ca29f95e681c6f616e7d860c9f" translate="yes" xml:space="preserve">
          <source>Return the value as a unicode string, or the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d37179af51889420bba9ffe8219421691577d86" translate="yes" xml:space="preserve">
          <source>Return the value of a header within the mulripart part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed61f8b9a73c0622e95a9aeda81f7d38d5255c6" translate="yes" xml:space="preserve">
          <source>Return the value of a meta field for a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204b44e35892570faacc864dab7e51adc8666721" translate="yes" xml:space="preserve">
          <source>Return the value of a previously defined header. If there is no header with that name, return a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e508a9f6c33e4a50e007597967f87690a41e7e1" translate="yes" xml:space="preserve">
          <source>Return the value of a request header, or a given default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4849f48f4bcdba22bbf1c71ef6147d3640683c0" translate="yes" xml:space="preserve">
          <source>Return the variable, or a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1ea66b6a71545b58f40629598b9b367342323f" translate="yes" xml:space="preserve">
          <source>Returning JSON Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ae954dba7a5b5adcaef4ec9cf6ba76e3eca243" translate="yes" xml:space="preserve">
          <source>Returning Static Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf9589f972886c307f95b32918d445fa457d3fe" translate="yes" xml:space="preserve">
          <source>Returning these has the same effect as when raising them as an exception. In case of an &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;, the error handler is applied. See &lt;a href=&quot;#tutorial-errorhandling&quot;&gt;Error Pages&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a632885cd29e8ff9b8824996be4c691d7f7c7f" translate="yes" xml:space="preserve">
          <source>Returns a copy of self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d286283c083a0071cb5d281d54e0dcbe9761741" translate="yes" xml:space="preserve">
          <source>Returns a copy with all keys and values de- or recoded to match &lt;a href=&quot;#bottle.FormsDict.input_encoding&quot;&gt;&lt;code&gt;input_encoding&lt;/code&gt;&lt;/a&gt;. Some libraries (e.g. WTForms) want a unicode dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749fcf802c472b6c2f5bd0556805e456ffd5674" translate="yes" xml:space="preserve">
          <source>Returns:</source>
          <target state="translated">Returns:</target>
        </trans-unit>
        <trans-unit id="56a9303783bf817c2f84bd20b5ea3d5553a40d2f" translate="yes" xml:space="preserve">
          <source>Right here, we are going to cast the result of our query showing the open ToDo items into a simple table with two columns: the first column will contain the ID of the item, the second column the text. The result set is, as seen above, a list of tuples, each tuple contains one set of results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4999528efe0f94f8f66b1dc05aad8ebaaae7b2be" translate="yes" xml:space="preserve">
          <source>Route</source>
          <target state="translated">Route</target>
        </trans-unit>
        <trans-unit id="3d766426f7853cfca59c360edfe2f1c59088b455" translate="yes" xml:space="preserve">
          <source>Route decorator can also be directly called as method. This way provides flexibility in complex setups, allowing you to directly control, when and how routing configuration done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f132f8932f433123c43807e54f3bb355776f27" translate="yes" xml:space="preserve">
          <source>Route-specific Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ba9a7d17e98f002ffed88794e7033713fbc73b" translate="yes" xml:space="preserve">
          <source>Route::all_plugins()</source>
          <target state="translated">Route::all_plugins()</target>
        </trans-unit>
        <trans-unit id="7c69cf9dd85173cfe3541000e78794b2cd5962d9" translate="yes" xml:space="preserve">
          <source>Route::get_callback_args()</source>
          <target state="translated">Route::get_callback_args()</target>
        </trans-unit>
        <trans-unit id="b4834315664fe4d17fc774b085f8f81425b5c511" translate="yes" xml:space="preserve">
          <source>Route::get_config()</source>
          <target state="translated">Route::get_config()</target>
        </trans-unit>
        <trans-unit id="3699806dfc544ef76438b05aef00d1bfdaca28ce" translate="yes" xml:space="preserve">
          <source>Route::get_undecorated_callback()</source>
          <target state="translated">Route::get_undecorated_callback()</target>
        </trans-unit>
        <trans-unit id="a23e17b57b7d49623226f0074571f7e62c43f18e" translate="yes" xml:space="preserve">
          <source>Route::prepare()</source>
          <target state="translated">Route::prepare()</target>
        </trans-unit>
        <trans-unit id="e1af85355807c1c7ab09b76482946d01a550c91a" translate="yes" xml:space="preserve">
          <source>Route::reset()</source>
          <target state="translated">Route::reset()</target>
        </trans-unit>
        <trans-unit id="b6d9e5f40fa61ceb7e26b0a660e0b3a9836b0128" translate="yes" xml:space="preserve">
          <source>Routes that contain wildcards are called &lt;code&gt;dynamic routes&lt;/code&gt; (as opposed to &lt;code&gt;static routes&lt;/code&gt;) and match more than one URL at the same time. A simple wildcard consists of a name enclosed in angle brackets (e.g. &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;) and accepts one or more characters up to the next slash (&lt;code&gt;/&lt;/code&gt;). For example, the route &lt;code&gt;/hello/&amp;lt;name&amp;gt;&lt;/code&gt; accepts requests for &lt;code&gt;/hello/alice&lt;/code&gt; as well as &lt;code&gt;/hello/bob&lt;/code&gt;, but not for &lt;code&gt;/hello&lt;/code&gt;, &lt;code&gt;/hello/&lt;/code&gt; or &lt;code&gt;/hello/mr/smith&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="feed8d7ff6f12a095f43b63352c686a1ab8a1a2d" translate="yes" xml:space="preserve">
          <source>Routing Static Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64bf5cade7bd85dd726ef271c7ccdcdc528a9dc" translate="yes" xml:space="preserve">
          <source>Rule Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282b698b3f2ba7596ef0cba446799963d1fe0b4a" translate="yes" xml:space="preserve">
          <source>Run as CGI script</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0ad6fda13edfaeb0a57d4bfa5da36aac88a70d" translate="yes" xml:space="preserve">
          <source>Run as FastCGI process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a340860a17e89527769651dbfb39f0a041d1ba" translate="yes" xml:space="preserve">
          <source>Run preparations (parsing, caching, ...). It should be possible to call this again to refresh a template or to update settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8a70179430e17cb1155f958f2cf388c3675ec7" translate="yes" xml:space="preserve">
          <source>Run the script again and look at the output. Still not really nice, but at least more readable than the list of tuples. Of course, you can spice-up the very simple HTML markup above, e.g. by using in-line styles to get a better looking output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e670854f4f4fae70805f32f1c93d2a2fd66ae7ac" translate="yes" xml:space="preserve">
          <source>Run this script or paste it into a Python console, then point your browser to &lt;a href=&quot;http://localhost:8080/hello/world&quot;&gt;http://localhost:8080/hello/world&lt;/a&gt;. That&amp;rsquo;s it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27965653cb81a13e2e1540d2bf6f81f54b9cb71" translate="yes" xml:space="preserve">
          <source>Running Bottle on Apache with mod_wsgi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebccd5663545f2a957909cc879a89ea0d4d1f779" translate="yes" xml:space="preserve">
          <source>Running Bottle on a different port and IP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c14a6ef5b6c8be3b684922c3a7d92497a45c57d" translate="yes" xml:space="preserve">
          <source>Running Bottle with a different server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8e47ed39631109cf06500d9376df7a600ae079" translate="yes" xml:space="preserve">
          <source>Runtime optimizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da1a309018384eda593c221d2902d4d338e064c" translate="yes" xml:space="preserve">
          <source>SQLAlchemy integration for Bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a072d8d4186881490bb5c96474b8be61a6ce7e8" translate="yes" xml:space="preserve">
          <source>SQLite3 database integration for Bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a465dd139c64709f4ad3a049d5b0be8425dabe08" translate="yes" xml:space="preserve">
          <source>Save file to disk or copy its content to an open file(-like) object. If &lt;em&gt;destination&lt;/em&gt; is a directory, &lt;a href=&quot;#bottle.FileUpload.filename&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/a&gt; is added to the path. Existing files are not overwritten by default (IOError).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c863909098bb30f8de703d2f226d99dcf1f05a" translate="yes" xml:space="preserve">
          <source>Save the code a &lt;code&gt;todo.py&lt;/code&gt;, preferably in the same directory as the file &lt;code&gt;todo.db&lt;/code&gt;. Otherwise, you need to add the path to &lt;code&gt;todo.db&lt;/code&gt; in the &lt;code&gt;sqlite3.connect()&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05bbbeebddaa54bff953b27fa83bb106fdd7987" translate="yes" xml:space="preserve">
          <source>Save the code and call the page again using a &amp;ldquo;403 forbidden&amp;rdquo; value for &lt;code&gt;:no&lt;/code&gt;, e.g. a float. You will receive not an exception, but a &amp;ldquo;403 - Forbidden&amp;rdquo; error, saying that an integer was expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ebfe73860900e99eb5c1cff2d0308013a4a944" translate="yes" xml:space="preserve">
          <source>Save the code as &lt;code&gt;make_table.tpl&lt;/code&gt; in the same directory where &lt;code&gt;todo.py&lt;/code&gt; is stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93880d5dcd7c3afaf774c76a779361d088b8d162" translate="yes" xml:space="preserve">
          <source>Search for a matching route and return a (&lt;a href=&quot;#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; , urlargs) tuple. The second value is a dictionary with parameters extracted from the URL. Raise &lt;a href=&quot;#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; (404/405) on a non-match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a46bc9048357cade5bf0e73334e8061a578ef4" translate="yes" xml:space="preserve">
          <source>Search for a resource and return an absolute file path, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad7fb0416d2de8b55136b37ade741856967d551" translate="yes" xml:space="preserve">
          <source>Search name in all directories specified in lookup. First without, then with common extensions. Return first hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdceb11a8ada92a87f6d8763503dc63ebff67b7" translate="yes" xml:space="preserve">
          <source>Separating the application object improves re-usability a lot, too. Other developers can safely import the &lt;code&gt;app&lt;/code&gt; object from your module and use &lt;a href=&quot;api#bottle.Bottle.mount&quot;&gt;&lt;code&gt;Bottle.mount()&lt;/code&gt;&lt;/a&gt; to merge applications together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fc06f0ff67252f95cdc1117e8c30c06c1fcb1e" translate="yes" xml:space="preserve">
          <source>Server Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db10d807fcb34bf91aa208e73318fb2a9472d8b" translate="yes" xml:space="preserve">
          <source>Server Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfad9d8bab70f47307a379d2adbaadc3a4a9127" translate="yes" xml:space="preserve">
          <source>Set the meta field for a key to a new value. This triggers the on-change handler for existing keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e3a5b6c9260cd543a5c4f418699e606cd5e4dc" translate="yes" xml:space="preserve">
          <source>Several &amp;ldquo;push&amp;rdquo; mechanisms like XHR multipart need the ability to write response data without closing the connection in conjunction with the response header &amp;ldquo;Connection: keep-alive&amp;rdquo;. WSGI does not easily lend itself to this behavior, but it is still possible to do so in Bottle by using the &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; async framework. Here is a sample that works with either the &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; HTTP server or the &lt;a href=&quot;http://pythonpaste.org/modules/evalexception.html&quot;&gt;paste&lt;/a&gt; HTTP server (it may work with others, but I have not tried). Just change &lt;code&gt;server='gevent'&lt;/code&gt; to &lt;code&gt;server='paste'&lt;/code&gt; to use the &lt;a href=&quot;http://pythonpaste.org/modules/evalexception.html&quot;&gt;paste&lt;/a&gt; server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c666b47a20c2f3498eb54dd834b8c31adb10bb" translate="yes" xml:space="preserve">
          <source>Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4e21dd97aba5ee7bec3a0d4c10c191cd436f12" translate="yes" xml:space="preserve">
          <source>Signed Cookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9caeac9bcd135984ae69ee7eca16ec11e0d82f65" translate="yes" xml:space="preserve">
          <source>Signed cookies are not encrypted (the client can still see the content) and not copy-protected (the client can restore an old cookie). The main intention is to make pickling and unpickling safe and prevent manipulation, not to store secret information at client side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7236c3c198b4683813f69a1e2cd6b8fc621d141b" translate="yes" xml:space="preserve">
          <source>Signed cookies may store any pickle-able object and are cryptographically signed to prevent manipulation. Keep in mind that cookies are limited to 4kb in most browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7516ff96b5fa0c4a1c989a084c957812b64b4cb4" translate="yes" xml:space="preserve">
          <source>Simple enough, but there is a snag: All this happens synchronously. If your application needs to wait for data (IO, sockets, databases, ...), it must either yield empty strings (busy wait) or block the current thread. Both solutions occupy the handling thread and prevent it from answering new requests. There is consequently only one ongoing request per thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee05d792db07656e39e4489fc12f9113e9e688e" translate="yes" xml:space="preserve">
          <source>SimpleTemplate</source>
          <target state="translated">SimpleTemplate</target>
        </trans-unit>
        <trans-unit id="0e1e251c2676ec17ca257d66e1116baa1eecdb70" translate="yes" xml:space="preserve">
          <source>SimpleTemplate API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28136f4927ad4b8033a9c3370deabd086d0c50a0" translate="yes" xml:space="preserve">
          <source>SimpleTemplate Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785468afd8cdbdfadd23b336858a8c0c8a32ba98" translate="yes" xml:space="preserve">
          <source>SimpleTemplate Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a06a9e552960394a97ae7034a7da59a941133e" translate="yes" xml:space="preserve">
          <source>SimpleTemplate::render()</source>
          <target state="translated">SimpleTemplate::render()</target>
        </trans-unit>
        <trans-unit id="1a6b7739563b5ebe4b7efe29870512d3a1bb07de" translate="yes" xml:space="preserve">
          <source>Single-threaded default server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1794143e4c05f9bcc81e0f701f3722ac14c78e31" translate="yes" xml:space="preserve">
          <source>So far, we used the standard server used by Bottle, which is the &lt;a href=&quot;http://docs.python.org/library/wsgiref.html#module-wsgiref.simple_server&quot;&gt;WSGI reference Server&lt;/a&gt; shipped along with Python. Although this server is perfectly suitable for development purposes, it is not really suitable for larger applications. But before we have a look at the alternatives, let&amp;rsquo;s have a look how to tweak the settings of the standard server first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5358d3126406c9d3b30218e2a7b08334023d801" translate="yes" xml:space="preserve">
          <source>So we do here two things: first, we import &lt;code&gt;template&lt;/code&gt; from Bottle in order to be able to use templates. Second, we assign the output of the template &lt;code&gt;make_table&lt;/code&gt; to the variable &lt;code&gt;output&lt;/code&gt;, which is then returned. In addition to calling the template, we assign &lt;code&gt;result&lt;/code&gt;, which we received from the database query, to the variable &lt;code&gt;rows&lt;/code&gt;, which is later on used within the template. If necessary, you can assign more than one variable / value to a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc3cd5d8a60a1cea132cbead4b16f4ba5703747" translate="yes" xml:space="preserve">
          <source>So you have learned the basics and want to write your own application? Here are some tips that might help you to be more productive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d453ead1a663eddc9eb65ca6e0521cb8e76e6e" translate="yes" xml:space="preserve">
          <source>So, after understanding the concept of routes, let&amp;rsquo;s create the first one. The goal is to see all open items from the ToDo list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b95aa790d6e051cdbf5bab1db305e5827c2def6" translate="yes" xml:space="preserve">
          <source>So, at first we need to import &lt;code&gt;error&lt;/code&gt; from Bottle and define a route by &lt;code&gt;error(403)&lt;/code&gt;, which catches all &amp;ldquo;403 forbidden&amp;rdquo; errors. The function &amp;ldquo;mistake&amp;rdquo; is assigned to that. Please note that &lt;code&gt;error()&lt;/code&gt; always passes the error-code to the function - even if you do not need it. Thus, the function always needs to accept one argument, otherwise it will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8c4cf4227f7bbee268c7bb2e55133d54d9b62b" translate="yes" xml:space="preserve">
          <source>So, in the next step we format the output in a nicer way. But before we do that, we make our life easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ae6bade1b8b14075944aef338838fc7c8324e5" translate="yes" xml:space="preserve">
          <source>So, just to demonstrate that, let&amp;rsquo;s assume that all single items in our ToDo list should be accessible by their plain number, by a term like e.g. &amp;ldquo;item1&amp;rdquo;. For obvious reasons, you do not want to create a route for every item. Furthermore, the simple dynamic routes do not work either, as part of the route, the term &amp;ldquo;item&amp;rdquo; is static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764e222f8cda1ed38532eb15050a311020ff1dc2" translate="yes" xml:space="preserve">
          <source>So, let&amp;rsquo;s assume we want to return the data generated in the regular expression route example as a JSON object. The code looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4927b250baf39297db2b1a039188ce3af905a0" translate="yes" xml:space="preserve">
          <source>Some JavaScript or REST clients send &lt;code&gt;application/json&lt;/code&gt; content to the server. The &lt;a href=&quot;api#bottle.BaseRequest.json&quot;&gt;&lt;code&gt;BaseRequest.json&lt;/code&gt;&lt;/a&gt; attribute contains the parsed data structure, if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a667cc492de07b67f4dd810ab28fc60b0c8b8acd" translate="yes" xml:space="preserve">
          <source>Some browsers buffer a certain amount of data before they start rendering a page. You might need to yield more than a few bytes to see an effect in these browsers. Additionally, many browsers have a limit of one concurrent connection per URL. If this is the case, you can use a second browser or a benchmark tool (e.g. &lt;code&gt;ab&lt;/code&gt; or &lt;code&gt;httperf&lt;/code&gt;) to measure performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93204f8f4310bd4a5f719bbc46351c241f6514de" translate="yes" xml:space="preserve">
          <source>Some users configure their browsers to not accept cookies at all. Most search engines ignore cookies too. Make sure that your application still works without cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463351471ee7de87815e5c332bc0a8fa392f4852" translate="yes" xml:space="preserve">
          <source>Sometimes it may become necessary to associate a route not to a Python function, but just return a static file. So if you have for example a help page for your application, you may want to return this page as plain HTML. This works as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8d8fc1b0c1ef4f31a2dd466baefce7648e8ce7" translate="yes" xml:space="preserve">
          <source>Special Methods: HEAD and ANY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6da76035c8329099026c311c3b82ca5b2c21f3" translate="yes" xml:space="preserve">
          <source>Start a server instance. This method blocks until the server terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36b5d350aed84a260c249ca049e611785bf3d10" translate="yes" xml:space="preserve">
          <source>Start here if you want to learn how to use the bottle framework for web development. If you have any questions not answered here, feel free to ask the &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;mailing list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8260d7cbf18cf006b7b75afb4c2829db1b13ff48" translate="yes" xml:space="preserve">
          <source>Start multiple server processes and spread the load with a load-balancer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66434cb75abee2a39b510ac9d100d27504460ef3" translate="yes" xml:space="preserve">
          <source>Starting with version 0.10 you can use bottle as a command-line tool:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c031153c642e8130ab037b056c28c991496c45" translate="yes" xml:space="preserve">
          <source>Static Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0263d56f42deca1c6da2f261df6c28c230d2cefc" translate="yes" xml:space="preserve">
          <source>Static files such as images or CSS files are not served automatically. You have to add a route and a callback to control which files get served and where to find them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57c5e699f67bd1d7a2ab3f2c39dcc985e02582d" translate="yes" xml:space="preserve">
          <source>Status Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d60d155957bf7c1d98ab621223b2e34d9df8f5" translate="yes" xml:space="preserve">
          <source>Storage class for a response body as well as headers and cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d31a96e8428a6f98a80c8e85864b94f905b332" translate="yes" xml:space="preserve">
          <source>Submitting Patches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="d33f9bcbbcac2ed59571db5dd532f37c600b8b30" translate="yes" xml:space="preserve">
          <source>Support two differed compression algorithms (gzip and deflate).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6a8fee7ae3477ab10a54a9def0a584ec1a7764" translate="yes" xml:space="preserve">
          <source>Supporting Gzip compression is not a straightforward proposition, due to a number of corner cases that crop up frequently. A proper Gzip implementation must:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd85a64fc7e872748f38cbcf37327c07b8c28981" translate="yes" xml:space="preserve">
          <source>Switching the Server Backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="337fea38f0fbb1afb2e51ebaec196def1a106e77" translate="yes" xml:space="preserve">
          <source>THis time the rendered template looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e475e418c47a96577691340b972ab055abdb4183" translate="yes" xml:space="preserve">
          <source>Template &lt;code&gt;edit_task.tpl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf4d76ee35651fa3476a6c9af55c78178ca7a9c" translate="yes" xml:space="preserve">
          <source>Template &lt;code&gt;make_table.tpl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727a0183c95c471aa40dcc2f8dc607d56896473a" translate="yes" xml:space="preserve">
          <source>Template &lt;code&gt;new_task.tpl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b693c57b47346823b76d99db0a16082f9453f22" translate="yes" xml:space="preserve">
          <source>Template Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="83fd3d0f7552a41eb73c6bbbf0175eedac338f77" translate="yes" xml:space="preserve">
          <source>Templates always return a list of strings, thus there is no need to convert anything. Of course, we can save one line of code by writing &lt;code&gt;return template('make_table', rows=result)&lt;/code&gt;, which gives exactly the same result as above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec204b27f581607a47186791e88ba14e24aa0b6" translate="yes" xml:space="preserve">
          <source>Templates are cached in memory after compilation. Modifications made to the template files will have no affect until you clear the template cache. Call &lt;code&gt;bottle.TEMPLATES.clear()&lt;/code&gt; to do so. Caching is disabled in debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccf87178a8eb212316674f89ad435b68786efa9" translate="yes" xml:space="preserve">
          <source>Templates are not cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c662024dd686bb04ae8552273be811a36d90b8c9" translate="yes" xml:space="preserve">
          <source>Test script:</source>
          <target state="translated">Тестовый сценарий:</target>
        </trans-unit>
        <trans-unit id="b5d2001c2123a9149007641f432d171cdbecb990" translate="yes" xml:space="preserve">
          <source>Thankfully the &lt;a href=&quot;http://pypi.python.org/pypi/gevent-websocket/&quot;&gt;gevent-websocket&lt;/a&gt; package does all the hard work for us. Here is a simple WebSocket endpoint that receives messages and just sends them back to the client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f971656d8e4d8a0fffca3b06ac27cc752d8a2800" translate="yes" xml:space="preserve">
          <source>That &lt;code&gt;debug(True)&lt;/code&gt; is supposed to be used for development only, it should &lt;em&gt;not&lt;/em&gt; be used in production environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47166e243aec327d6df207c04a12e2a26fb17e8a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all. As you can see, the template is plain HTML this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ae88fe57eecbbfe430447782cd79dfa136bb60" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#bottle.BaseRequest.query_string&quot;&gt;&lt;code&gt;query_string&lt;/code&gt;&lt;/a&gt; parsed into a &lt;a href=&quot;#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;. These values are sometimes called &amp;ldquo;URL arguments&amp;rdquo; or &amp;ldquo;GET parameters&amp;rdquo;, but not to be confused with &amp;ldquo;URL wildcards&amp;rdquo; as they are provided by the &lt;code&gt;Router&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acc1a7fcc237ad9bcace55ea17272af4f8e2371" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#bottle.BaseRequest.url&quot;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/a&gt; string as an &lt;a href=&quot;http://docs.python.org/library/urlparse.html#urlparse.SplitResult&quot;&gt;&lt;code&gt;urlparse.SplitResult&lt;/code&gt;&lt;/a&gt; tuple. The tuple contains (scheme, host, path, query_string and fragment), but the fragment is always empty because it is not visible to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18059fbf8b4399036a0ded701830b959ceb39ea1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#bottle.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; class wraps a WSGI environment and provides helpful methods to parse and access form data, cookies, file uploads and other metadata. Most of the attributes are read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57264337a9468a34aedab6e8843aa50a5fda4099" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#bottle.ResourceManager.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; list is searched in order. The first match is returend. Symlinks are followed. The result is cached to speed up future lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721299f05f24b412a338e36b93f551cb7fccec7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#bottle.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; class stores the HTTP status code as well as headers and cookies that are to be sent to the client. Similar to &lt;a href=&quot;#bottle.request&quot;&gt;&lt;code&gt;bottle.request&lt;/code&gt;&lt;/a&gt; there is a thread-local &lt;a href=&quot;#bottle.response&quot;&gt;&lt;code&gt;bottle.response&lt;/code&gt;&lt;/a&gt; instance that can be used to adjust the &lt;code&gt;current&lt;/code&gt; response. Moreover, you can instantiate &lt;a href=&quot;#bottle.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; and return it from your request handler. In this case, the custom instance overrules the headers and cookies defined in the global one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35562b4c266551275333e9d0e5af0a6050fb3dc0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#bottle.SimpleTemplate&quot;&gt;&lt;code&gt;SimpleTemplate&lt;/code&gt;&lt;/a&gt; syntax compiles directly to python bytecode and is executed on each &lt;a href=&quot;#bottle.SimpleTemplate.render&quot;&gt;&lt;code&gt;SimpleTemplate.render()&lt;/code&gt;&lt;/a&gt; call. Do not render untrusted templates! They may contain and execute harmful python code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47e1f32d6e5df0a7bfa1f85d2a9392633923e2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#tutorial-debugging&quot;&gt;Debug Mode&lt;/a&gt; is very helpful during early development, but should be switched off for public applications. Keep that in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b21d992804f22e36be59cf22b33614b99729035" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.BaseRequest.get_cookie&quot;&gt;&lt;code&gt;BaseRequest.get_cookie()&lt;/code&gt;&lt;/a&gt; method is a different way do access cookies. It supports decoding &lt;a href=&quot;#tutorial-signed-cookies&quot;&gt;signed cookies&lt;/a&gt; as described in a separate section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585536b73c25d35be7947ca9745aa4ae190024ea" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.Bottle.config&quot;&gt;&lt;code&gt;Bottle.config&lt;/code&gt;&lt;/a&gt; object behaves a lot like an ordinary dictionary. All the common dict methods work as expected. Let us start with some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125414d9652d8f755e518d6269367b34e21c86a2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.FileUpload.save&quot;&gt;&lt;code&gt;FileUpload.save&lt;/code&gt;&lt;/a&gt; method is highly recommended if you want to store the file to disk. It prevents some common errors (e.g. it does not overwrite existing files unless you tell it to) and stores the file in a memory efficient way. You can access the file object directly via &lt;a href=&quot;api#bottle.FileUpload.file&quot;&gt;&lt;code&gt;FileUpload.file&lt;/code&gt;&lt;/a&gt;. Just be careful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef26f5fb46f843db61cd6e2855f3d4ecd5a0454" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.Response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b47212be389958238274cf85edd6b5415c6845b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; instance passed to &lt;a href=&quot;#bottle.Plugin.apply&quot;&gt;&lt;code&gt;Plugin.apply()&lt;/code&gt;&lt;/a&gt; provides detailed informations about the associated route. The most important attributes are summarized here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34386ece83cd709611ba0bc81e0827dce043a4cd" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.request&quot;&gt;&lt;code&gt;request&lt;/code&gt;&lt;/a&gt; object is a subclass of &lt;a href=&quot;api#bottle.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt; and has a very rich API to access data. We only cover the most commonly used features here, but it should be enough to get started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4651b664bb8e3a2450bb161c1a980b9ab76464eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator binds a piece of code to an URL path. In this case, we link the &lt;code&gt;/hello&lt;/code&gt; path to the &lt;code&gt;hello()&lt;/code&gt; function. This is called a &lt;code&gt;route&lt;/code&gt; (hence the decorator name) and is the most important concept of this framework. You can define as many routes as you want. Whenever a browser requests an URL, the associated function is called and the return value is sent back to the browser. Its as simple as that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e4bd1f1882c2a54c2572609b43b90896398208" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator links an URL path to a callback function, and adds a new route to the &lt;a href=&quot;#tutorial-default&quot;&gt;default application&lt;/a&gt;. An application with just one route is kind of boring, though. Let&amp;rsquo;s add some more:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55da22d739366958b174ae6b6653e348c2f02346" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; call in the last line starts a built-in development server. It runs on &lt;code&gt;localhost&lt;/code&gt; port &lt;code&gt;8080&lt;/code&gt; and serves requests until you hit &lt;code&gt;Control-c&lt;/code&gt;. You can switch the server backend later, but for now a development server is all we need. It requires no setup at all and is an incredibly painless way to get your application up and running for local tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0416fba5c8b75056c8d0b2394ec81edba08951" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;api#bottle.view&quot;&gt;&lt;code&gt;view()&lt;/code&gt;&lt;/a&gt; decorator allows you to return a dictionary with the template variables instead of calling &lt;a href=&quot;api#bottle.template&quot;&gt;&lt;code&gt;template()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf776dacae8ba0a60c5f634744ff1251483c3be3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://werkzeug.pocoo.org/documentation/dev/debug.html&quot;&gt;werkzeug&lt;/a&gt; and &lt;a href=&quot;http://pythonpaste.org/modules/evalexception.html&quot;&gt;paste&lt;/a&gt; libraries both ship with very powerful debugging WSGI middleware. Look at &lt;a href=&quot;http://werkzeug.pocoo.org/docs/debug/#werkzeug.debug.DebuggedApplication&quot;&gt;&lt;code&gt;werkzeug.debug.DebuggedApplication&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;http://werkzeug.pocoo.org/documentation/dev/debug.html&quot;&gt;werkzeug&lt;/a&gt; and &lt;code&gt;paste.evalexception.middleware.EvalException&lt;/code&gt; for &lt;a href=&quot;http://pythonpaste.org/modules/evalexception.html&quot;&gt;paste&lt;/a&gt;. They both allow you do inspect the stack and even execute python code within the stack context, so &lt;strong&gt;do not use them in production&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1ddbfbadef8b0dbeb21760f9b23a71c0fab475" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.gevent.org/&quot;&gt;gevent&lt;/a&gt; module adds &lt;em&gt;greenlets&lt;/em&gt; to the mix. Greenlets behave similar to traditional threads, but are very cheap to create. A gevent-based server can spawn thousands of greenlets (one for each connection) with almost no overhead. Blocking individual greenlets has no impact on the servers ability to accept new requests. The number of concurrent connections is virtually unlimited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3efbe6d97e26635b2ac450988e3d1d76c4aad5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http_code&quot;&gt;HTTP status code&lt;/a&gt; controls the behavior of the browser and defaults to &lt;code&gt;200 OK&lt;/code&gt;. In most scenarios you won&amp;rsquo;t need to set the &lt;code&gt;Response.status&lt;/code&gt; attribute manually, but use the &lt;code&gt;abort()&lt;/code&gt; helper or return an &lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; instance with the appropriate status code. Any integer is allowed, but codes other than the ones defined by the &lt;a href=&quot;http_code&quot;&gt;HTTP specification&lt;/a&gt; will only confuse the browser and break standards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73fd76a2eab36ef69d53a457777c35224bd6b0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; part is a wildcard. See &lt;code&gt;Router&lt;/code&gt; for syntax details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1961026810773f2ffb656ca0d5477ffa93492c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ADDRESS&lt;/code&gt; field takes an IP address or an IP:PORT pair and defaults to &lt;code&gt;localhost:8080&lt;/code&gt;. The other parameters should be self-explanatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9d4abd06f39f8f8017c42781dde80a15091b66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bottle&lt;/code&gt; Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd81f3d859b97684d3f9a5b98f282fb8998eb09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;REQUEST_METHOD&lt;/code&gt; value as an uppercase string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5232f01fc98d8e7ccf27b746d7e7086934b4f357" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request&lt;/code&gt; Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3b992b528451257ee930279eb9f5d88453b925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Response.set_cookie()&lt;/code&gt; method accepts a number of additional keyword arguments that control the cookies lifetime and behavior. Some of the most common settings are described here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb4364424d7b32621ceb132d5e203ad69901832" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Response&lt;/code&gt; Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ecab35d63639af3b1136f886e876d28cb5cf30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Router&lt;/code&gt; distinguishes between two basic types of routes: &lt;strong&gt;static routes&lt;/strong&gt; (e.g. &lt;code&gt;/contact&lt;/code&gt;) and &lt;strong&gt;dynamic routes&lt;/strong&gt; (e.g. &lt;code&gt;/hello/&amp;lt;name&amp;gt;&lt;/code&gt;). A route that contains one or more &lt;em&gt;wildcards&lt;/em&gt; it is considered dynamic. All other routes are static.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a65a116888540875669219ea9ea1a62fe5f20ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;abort()&lt;/code&gt; function is a shortcut for generating HTTP error pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c584cf1a0d4edaf45db5cc62db8be06278eaa684" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; attribute specifies the URL that will receive the form data. &lt;code&gt;method&lt;/code&gt; defines the HTTP method to use (&lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;POST&lt;/code&gt;). With &lt;code&gt;method=&quot;get&quot;&lt;/code&gt; the form values are appended to the URL and available through &lt;a href=&quot;api#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;BaseRequest.query&lt;/code&gt;&lt;/a&gt; as described above. This is considered insecure and has other limitations, so we use &lt;code&gt;method=&quot;post&quot;&lt;/code&gt; here. If in doubt, use &lt;code&gt;POST&lt;/code&gt; forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e10b239569f8052db112230d0614293afa4378" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply&lt;/code&gt; parameter of the &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator comes in handy if you want to install plugins to only a small number of routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca8c1540888cf67e4813a66d8674f77f2b557b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base&lt;/code&gt; parameter makes it easy to reference files installed along with a python module or package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd9e3e8003eea138d532a7e9cb6022e90a4989d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; hook on the application object is triggered each time a value in &lt;a href=&quot;api#bottle.Bottle.config&quot;&gt;&lt;code&gt;Bottle.config&lt;/code&gt;&lt;/a&gt; is changed. This hook can be used to react on configuration changes at runtime, for example reconnect to a new database, change the debug settings on a background service or resize worker thread pools. The hook callback receives two arguments (key, new_value) and is called before the value is actually changed in the dictionary. Raising an exception from a hook callback cancels the change and the old value is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dafed4767d62fa8336d3690316d2df53c94c6eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; parameter of the &lt;a href=&quot;#bottle.Plugin.apply&quot;&gt;&lt;code&gt;Plugin.apply()&lt;/code&gt;&lt;/a&gt; method is now an instance of &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; instead of a context dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51b5cb9b2125910b3ad1a86a7edd13fd29b920b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gae&lt;/code&gt; server adapter is used to run applications on Google App Engine. It works similar to the &lt;code&gt;cgi&lt;/code&gt; adapter in that it does not start a new HTTP server, but prepares and optimizes your application for Google App Engine and makes sure it conforms to their API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73702c4cf532f1e81b073f769abeb9c416b990f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;port&lt;/code&gt; and &lt;code&gt;host&lt;/code&gt; parameter can also be applied when Bottle is running with a different server, as shown in the following section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f04d05fbf2c5e1dda30d363686a4c62f2c492f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; parameter accepts a single value or a list of values. You can use a name, class or instance to identify the plugin that is to be skipped. Set &lt;code&gt;skip=True&lt;/code&gt; to skip all plugins at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88df236ef080ce73627b4ae6082e0a0292e4daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;static_file()&lt;/code&gt; function is a helper to serve files in a safe and convenient way (see &lt;a href=&quot;#tutorial-static-files&quot;&gt;Static Files&lt;/a&gt;). This example is limited to files directly within the &lt;code&gt;/path/to/your/static/files&lt;/code&gt; directory because the &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; wildcard won&amp;rsquo;t match a path with a slash in it. To serve files in subdirectories, change the wildcard to use the &lt;code&gt;path&lt;/code&gt; filter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7f70bf4a335f4dfe49a693d4b51c7084313d2d" translate="yes" xml:space="preserve">
          <source>The API will remain stable even on changes to the relevant PEPs. Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one that uses non-native strings.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe0085a741f5589aace8d283f9cdf25bb3afe67" translate="yes" xml:space="preserve">
          <source>The Apache configuration may look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a486288979450f307ad697ef521abd35ca7d2ce" translate="yes" xml:space="preserve">
          <source>The Bottle Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b2d03de0bac25cc9ae014776d3ac7d904758df" translate="yes" xml:space="preserve">
          <source>The Bottle logo however is &lt;em&gt;NOT&lt;/em&gt; covered by that license. It is allowed to use the logo as a link to the bottle homepage or in direct context with the unmodified library. In all other cases please ask first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c204ee54f2d6148e15b750f8263f84e91c64e7" translate="yes" xml:space="preserve">
          <source>The Content-Type header as a lowercase-string (default: empty).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa3cc047287b5da338d98900bf281576252071d" translate="yes" xml:space="preserve">
          <source>The Default Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95acb256e218d08367986cd80b3e4f3902aef76b" translate="yes" xml:space="preserve">
          <source>The HEAD method is used to ask for the response identical to the one that would correspond to a GET request, but without the response body. This is useful for retrieving meta-information about a resource without having to download the entire document. Bottle handles these requests automatically by falling back to the corresponding GET route and cutting off the request body, if present. You don&amp;rsquo;t have to specify any HEAD routes yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916fd5bf1d1fca5fbbdc5b8f5cd61e134bd1c893" translate="yes" xml:space="preserve">
          <source>The HTTP method as a string (e.g. &lt;code&gt;GET&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4c55fd6d07cec004cef49c20279d9034ef6999" translate="yes" xml:space="preserve">
          <source>The HTTP protocol defines several &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html&quot;&gt;request methods&lt;/a&gt; (sometimes referred to as &amp;ldquo;verbs&amp;rdquo;) for different tasks. GET is the default for all routes with no other method specified. These routes will match GET requests only. To handle other methods such as POST, PUT or DELETE, add a &lt;code&gt;method&lt;/code&gt; keyword argument to the &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator or use one of the four alternative decorators: &lt;a href=&quot;api#bottle.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api#bottle.post&quot;&gt;&lt;code&gt;post()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api#bottle.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api#bottle.delete&quot;&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73faf59fcd7c4a1215beffda79114c802151c780" translate="yes" xml:space="preserve">
          <source>The HTTP request body as a seek-able file-like object. Depending on &lt;a href=&quot;#bottle.BaseRequest.MEMFILE_MAX&quot;&gt;&lt;code&gt;MEMFILE_MAX&lt;/code&gt;&lt;/a&gt;, this is either a temporary file or a &lt;a href=&quot;http://docs.python.org/library/io.html#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; instance. Accessing this property for the first time reads and replaces the &lt;code&gt;wsgi.input&lt;/code&gt; environ variable. Subsequent accesses just do a &lt;code&gt;seek(0)&lt;/code&gt; on the file object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67158817b42011caf65ee94ff5d26ceb91ac4609" translate="yes" xml:space="preserve">
          <source>The HTTP status code as an integer (e.g. 404).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004ec5e833a5bbce0134b4f7ca8d75465be5c5a2" translate="yes" xml:space="preserve">
          <source>The HTTP status line as a string (e.g. &lt;code&gt;404 Not Found&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9ec3fb1e260530b1ebfd5e13ad41eadb3232e3" translate="yes" xml:space="preserve">
          <source>The Limits of Synchronous WSGI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e578c820fd0c4bcc2dfe8813ff5431e8433dc942" translate="yes" xml:space="preserve">
          <source>The POST method is commonly used for HTML form submission. This example shows how to handle a login form using POST:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4c4d2d6cda47d360f17311666bdf45bc15d405" translate="yes" xml:space="preserve">
          <source>The Plugin API is still evolving and changed with Bottle 0.10 to address certain issues with the route context dictionary. To ensure backwards compatibility with 0.9 Plugins, we added an optional &lt;a href=&quot;#bottle.Plugin.api&quot;&gt;&lt;code&gt;Plugin.api&lt;/code&gt;&lt;/a&gt; attribute to tell bottle which API to use. The API differences are summarized here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deda6fbeaf39dc33f58177f562c7847bb36f326b" translate="yes" xml:space="preserve">
          <source>The Plugin API is still evolving. This integer attribute tells bottle which version to use. If it is missing, bottle defaults to the first version. The current version is &lt;code&gt;2&lt;/code&gt;. See &lt;a href=&quot;#plugin-changelog&quot;&gt;Plugin API changes&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a125dacc4a120b926c360f0779ef82e15913b92" translate="yes" xml:space="preserve">
          <source>The Request Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d074a24e60c444dd1e145ee2de7b4710c6c8061" translate="yes" xml:space="preserve">
          <source>The Response Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f16f058105b5db26bc1f815542a8da1edc825d" translate="yes" xml:space="preserve">
          <source>The Route Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2329b247a7509a8265f0d78cfe942ea3e47c538e" translate="yes" xml:space="preserve">
          <source>The app object is not always available, but as long as you are within a request context, you can use the &lt;code&gt;request&lt;/code&gt; object to get the current application and its configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa32daa8b429261d99272280930b0c79ecd39fa" translate="yes" xml:space="preserve">
          <source>The application object this route is installed to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a037bb6430d5930c97562a3d061ceafd5f98870" translate="yes" xml:space="preserve">
          <source>The application this route is installed to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef550adf005f34c12f21fe753e36f3405a046c3" translate="yes" xml:space="preserve">
          <source>The arguments extracted from the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4dba37fa5c0e36e606fc1142b0dae81ae1e2c2" translate="yes" xml:space="preserve">
          <source>The basic statement for a dynamic route looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2058dca0dabba502a4bc09d5f11e15ccc36840" translate="yes" xml:space="preserve">
          <source>The bottle &lt;a href=&quot;#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; object that matches this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f721de22d4de8fa36dd0adde3d3b7d134a7841" translate="yes" xml:space="preserve">
          <source>The bottle &lt;code&gt;run()&lt;/code&gt; function, when called without any parameters, starts a local development server on port 8080. You can access and test your application via &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; if you are on the same host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c326dd3f68dc49bf1667b60a30c88bb4193bf226" translate="yes" xml:space="preserve">
          <source>The bottle WSGI-interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee025d5e996a98d06164af1dd0b7d6a9f0287ca4" translate="yes" xml:space="preserve">
          <source>The built-in default server is based on &lt;a href=&quot;http://docs.python.org/library/wsgiref.html#module-wsgiref.simple_server&quot;&gt;wsgiref WSGIServer&lt;/a&gt;. This non-threading HTTP server is perfectly fine for development and early production, but may become a performance bottleneck when server load increases. There are three ways to eliminate this bottleneck:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13dc82707871570d92261f24fdcc6c59c14e422" translate="yes" xml:space="preserve">
          <source>The child process will have &lt;code&gt;os.environ['BOTTLE_CHILD']&lt;/code&gt; set to &lt;code&gt;True&lt;/code&gt; and start as a normal non-reloading app server. As soon as any of the loaded modules changes, the child process is terminated and re-spawned by the main process. Changes in template files will not trigger a reload. Please use debug mode to deactivate template caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802f619a9f7b91df14864ed5bd755baef78b29ad" translate="yes" xml:space="preserve">
          <source>The client IP as a string. Note that this information can be forged by malicious clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd97d050e6b811a3abb7d66eae6d3a4148dcaf5d" translate="yes" xml:space="preserve">
          <source>The client-site JavaScript API is really straight forward, too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1e500c477033706f033ec7ae9962e2bb183f97" translate="yes" xml:space="preserve">
          <source>The code looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5c783e934aa6f68ace0c06559e4313c625baef" translate="yes" xml:space="preserve">
          <source>The code needs to be extended to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2897f61e451946671f9cab10cb8d328d5ae146" translate="yes" xml:space="preserve">
          <source>The contained python expression is executed at render-time and has access to all keyword arguments passed to the &lt;a href=&quot;#bottle.SimpleTemplate.render&quot;&gt;&lt;code&gt;SimpleTemplate.render()&lt;/code&gt;&lt;/a&gt; method. HTML special characters are escaped automatically to prevent &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-Site_Scripting&quot;&gt;XSS&lt;/a&gt; attacks. You can start the expression with an exclamation mark to disable escaping for that expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18693f727021608dce9ebbf06d4103a52b6a3af" translate="yes" xml:space="preserve">
          <source>The decorator API is quite limited, though. You don&amp;rsquo;t know anything about the route being decorated or the associated application object and have no way to efficiently store data that is shared among all routes. But fear not! Plugins are not limited to just decorator functions. Bottle accepts anything as a plugin as long as it is callable or implements an extended API. This API is described below and gives you a lot of control over the whole process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03e664e2a828d4a86da270d75c5df9250a87310" translate="yes" xml:space="preserve">
          <source>The default error page shows a traceback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127bc5abb10993664fe4c0b79234995ee85401bb" translate="yes" xml:space="preserve">
          <source>The directory which, including its subdirectories, contains all source files for one Sphinx project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76efd509a7716fdcb489384b17d954e8467d9b0a" translate="yes" xml:space="preserve">
          <source>The easiest way to increase performance is to install a multi-threaded server library like &lt;a href=&quot;http://pythonpaste.org/&quot;&gt;paste&lt;/a&gt; or &lt;a href=&quot;http://www.cherrypy.org/&quot;&gt;cherrypy&lt;/a&gt; and tell Bottle to use that instead of the single-threaded server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cc0531a3dd5492815afa34195f9c604a4199c6" translate="yes" xml:space="preserve">
          <source>The effects and APIs of plugins are manifold and depend on the specific plugin. The &lt;code&gt;SQLitePlugin&lt;/code&gt; plugin for example detects callbacks that require a &lt;code&gt;db&lt;/code&gt; keyword argument and creates a fresh database connection object every time the callback is called. This makes it very convenient to use a database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe928c77544e064e11f2c89dba7946b07ba0f74" translate="yes" xml:space="preserve">
          <source>The first line is important. It causes gevent to monkey-patch most of Python&amp;rsquo;s blocking APIs to not block the current thread, but pass the CPU to the next greenlet instead. It actually replaces Python&amp;rsquo;s threading with gevent-based pseudo-threads. This is why you can still use &lt;code&gt;time.sleep()&lt;/code&gt; which would normally block the whole thread. If you don&amp;rsquo;t feel comfortable with monkey-patching python built-ins, you can use the corresponding gevent functions (&lt;code&gt;gevent.sleep()&lt;/code&gt; in this case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ffd9106f941291891b3797a85b7b5b1b45dc65" translate="yes" xml:space="preserve">
          <source>The first route needs a database connection and tells the plugin to create a handle by requesting a &lt;code&gt;db&lt;/code&gt; keyword argument. The second route does not need a database and is therefore ignored by the plugin. The third route does expect a &amp;lsquo;db&amp;rsquo; keyword argument, but explicitly skips the sqlite plugin. This way the argument is not overruled by the plugin and still contains the value of the same-named url argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2645366d771f7e27de9dc97880133b2c81117b57" translate="yes" xml:space="preserve">
          <source>The following chapter give a short introduction how to adapt Bottle for larger projects. Furthermore, we will show how to operate Bottle with web servers which perform better on a higher load / more web traffic than the one we used so far.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f343131cf69dba3da725150e8c20ddffb8f662" translate="yes" xml:space="preserve">
          <source>The following filters are implemented by default and more may be added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86a697a26934fa7694a6a9f5aaef169ea35710c" translate="yes" xml:space="preserve">
          <source>The following standard filters are implemented:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895b05b40554f1f16b58609920b627abf77358dc" translate="yes" xml:space="preserve">
          <source>The following two classes can be raised as an exception. The most noticeable difference is that bottle invokes error handlers for &lt;a href=&quot;#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt;, but not for &lt;a href=&quot;#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; or other response types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43a09c7b1595ee6b2ddddb7524a2a690fbabc82" translate="yes" xml:space="preserve">
          <source>The full list is available through &lt;code&gt;server_names&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735ab1177d98ac79a8d54bd002a2b3845c584827" translate="yes" xml:space="preserve">
          <source>The full request URI including hostname and scheme. If your app lives behind a reverse proxy or load balancer and you get confusing results, make sure that the &lt;code&gt;X-Forwarded-Host&lt;/code&gt; header is set correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c739ec61dd7cc4641bd2e821da6cf10a879d05" translate="yes" xml:space="preserve">
          <source>The hook callbacks cannot &lt;em&gt;change&lt;/em&gt; the value that is to be stored to the dictionary. That is what filters are for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b859929661e2625db3b18af8830252771a30de0e" translate="yes" xml:space="preserve">
          <source>The initial portion of the URL&amp;rsquo;s &lt;code&gt;path&lt;/code&gt; that was removed by a higher level (server or routing middleware) before the application was called. This script path is returned with leading and tailing slashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc2f9c29ef84a3e96a9fe8d02599ade38482741" translate="yes" xml:space="preserve">
          <source>The key point here is the colon. This tells Bottle to accept for &lt;code&gt;:something&lt;/code&gt; any string up to the next slash. Furthermore, the value of &lt;code&gt;something&lt;/code&gt; will be passed to the function assigned to that route, so the data can be processed within the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6f6832c78752adab3d8a4f0ba21d69691192a9" translate="yes" xml:space="preserve">
          <source>The last form accepts not only function calls, but any type of expression. Keyword arguments passed to this function are available as local variables. Example: &lt;code&gt;import_string('re:compile(x)', x='[a-z]')&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
