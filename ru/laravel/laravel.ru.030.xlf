<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="laravel">
    <body>
      <group id="laravel">
        <trans-unit id="0497e984636cc2b1a09153ebcaf9c91dc833ac08" translate="yes" xml:space="preserve">
          <source>Validate that the values of an attribute is in another attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d9e9c96da34104c09bdf7def6a6b29e8ad179f" translate="yes" xml:space="preserve">
          <source>Validate that two attributes match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3620446f2ca1f3fd2eca3a72554a36095785f33" translate="yes" xml:space="preserve">
          <source>Validate the MIME type of a file is an image MIME type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d0e2474bb0af729d0be9b0f3da8607546ace69" translate="yes" xml:space="preserve">
          <source>Validate the MIME type of a file upload attribute is in a set of MIME types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d6cb4266f5555fc71ac82e87b714a3efef1d28" translate="yes" xml:space="preserve">
          <source>Validate the attribute is a valid JSON string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094f2e7e7466c3b3e93038e2ecc51d3c78089a4e" translate="yes" xml:space="preserve">
          <source>Validate the class instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21701b21e598af31812a5f02aeae2fc9e40cfde" translate="yes" xml:space="preserve">
          <source>Validate the date is after a given date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c308a3f37b8b513d1ae686ec9d1848e706ac18" translate="yes" xml:space="preserve">
          <source>Validate the date is before a given date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cccbea395497c23ee52b3ca3ead2731090f2a1" translate="yes" xml:space="preserve">
          <source>Validate the date is before or equal a given date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1383019b7afaf43a658a091823aed663aa6dbbbd" translate="yes" xml:space="preserve">
          <source>Validate the date is equal or after a given date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0ae6e12f0427b9ede930f5818916eb1d993090" translate="yes" xml:space="preserve">
          <source>Validate the dimensions of an image matches the given values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3256a9ae08572e6cb6c4fb4f05a59c2263fa2591" translate="yes" xml:space="preserve">
          <source>Validate the email for the given request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09317486b20a4311e63713a86fa34d0a5e4c3e81" translate="yes" xml:space="preserve">
          <source>Validate the existence of an attribute value in a database table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57c98634df5e8051a1f41f40f38d512056c788e" translate="yes" xml:space="preserve">
          <source>Validate the given attribute is filled if it is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfe149dddd63fa3b2492865a1f39a47d6c2dad5" translate="yes" xml:space="preserve">
          <source>Validate the given class instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3660f89a504538689f3c45669e1dd095fa7a901b" translate="yes" xml:space="preserve">
          <source>Validate the given data against the provided rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdf88ff2af0273270f74150dc03f87346410085" translate="yes" xml:space="preserve">
          <source>Validate the given password reset token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63727740ce5927e5def18a144f697d48a1213352" translate="yes" xml:space="preserve">
          <source>Validate the given request with the given rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafa4f3a58dd76f8787ca2d5a54e2c0a12045092" translate="yes" xml:space="preserve">
          <source>Validate the given value is a valid file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3174d73527340cc452ac07b0971673cfaebde5" translate="yes" xml:space="preserve">
          <source>Validate the guessed extension of a file upload is in a set of file extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731f426adc01f941a4e923878af9bf8761dc583a" translate="yes" xml:space="preserve">
          <source>Validate the size of an attribute is between a set of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef99e0ecfba33c15ccde77b1af91ac175eb3bcfe" translate="yes" xml:space="preserve">
          <source>Validate the size of an attribute is greater than a minimum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a76feae4da54a55c9bf40196ca3592d3a18129" translate="yes" xml:space="preserve">
          <source>Validate the size of an attribute is less than a maximum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc9e9b58dfac3310ea4be7a22d7c6b456bdd57b" translate="yes" xml:space="preserve">
          <source>Validate the size of an attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de2dad5038df71f5d1f6215011c8210c3282559" translate="yes" xml:space="preserve">
          <source>Validate the uniqueness of an attribute value on a given database table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de38fa8a655f8b5e50625c17a41dfeea1cf2a23a" translate="yes" xml:space="preserve">
          <source>Validate the user login request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe65eabeb395f7b300063479ce1fcebed8a77c9" translate="yes" xml:space="preserve">
          <source>ValidatePostSize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bd9f078a7aa54cbfd9792ee811214cfd88639c" translate="yes" xml:space="preserve">
          <source>ValidatePostSize (Foundation\Http)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785c4f87ee49ded109f858c636de1b67a57e5ba9" translate="yes" xml:space="preserve">
          <source>ValidatePostSize::getPostMaxSize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2714ef0c280eb8a650cc2c484823120e6e7b0e" translate="yes" xml:space="preserve">
          <source>ValidatePostSize::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc878921cac9b9f093e4550b344fbf95dcc3443" translate="yes" xml:space="preserve">
          <source>ValidateSignature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ae3bafa217f181e654e04ece79a81cf1c10448" translate="yes" xml:space="preserve">
          <source>ValidateSignature (Routing\Middleware)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6f80ddfb2b22707b6eedb50d2343d46f1d51a4" translate="yes" xml:space="preserve">
          <source>ValidateSignature::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a564685a9be19b2555452b38bbeb7aa085d56c" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2da878831cc17d046f3cfcae6dd4d9feaa41185" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes (Validation\Concerns)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26a2829eb4c948a520201c9bc4d7c5aaa353ea0" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::allFailingRequired()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ab6463be9869ca7decd2725c86ae6804cbdceb" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::anyFailingRequired()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ea82aee8dd7955d918c7575049dd4b50815cce" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::checkDateTimeOrder()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b3f6be1ccd7c4a65473959921e9e6c2f980799" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::compare()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6ef883fb6aab2c4fd83f3a574c5317da9e0537" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::compareDates()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecdab7f49465a08395a49c363503ae61a364390" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::convertValuesToBoolean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9755ba6b5238da9ef1ba9e1f70786033f5868155" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::failsBasicDimensionChecks()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a65b66e00f6b810b38658964776cc50657d1de" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::failsRatioCheck()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f16e6a6081e9637ef6829aec91a770c6e22e34" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getDateFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa5d0f93765937c0c1368dc0092fa540a7e4b10" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getDateTime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea75627158edec50e9d016c73b7becaa7e58ec13" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getDateTimeWithOptionalFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca1c394d5b0ff34d91dd10bc7841344e4ac9b71" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getDateTimestamp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926b2d79fbb05c380c51b3c3a37eff4d2ba44b99" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getExistCount()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59abd6262f05833531c2e1033b06bcbc244b6dd" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getExtraConditions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52e25b945d3eb212e97b4affb4d3cac676c8f25" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getQueryColumn()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8455c55feabd6d7ce068a01e09c2c6b8486ae69b" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getSize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cceefab8c9b2d78f2f606ee90fb219980224da07" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getUniqueExtra()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe4af36e6c262b3fe29811105062a2795c4dbb4" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::getUniqueIds()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5eefe1190bfed327c0a31ea17d8d187c18c3957" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::guessColumnForQuery()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a155e9709c503da5a1b7e6a8aef90390e9558fcc" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::isTestingRelativeDateTime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c73aa79a25c0b52ca96aab466ed860a9f4aae12" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::isValidFileInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7951962e3ab51b64a56f4c2ef90c52fab55c86" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::parseNamedParameters()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313db3e4762d349a8645e5e253080597a0e3269e" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::parseTable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8b24b967f1c30b09de39f3bc3de07fcfc1d8dd" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::prepareUniqueId()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd183c2c64bf139e4dae5056616c2b65dcc74f9" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::requireParameterCount()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb5dd1a9bb118e26d5f232b2d1dc2964a585dbb" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::requireSameType()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d13a5838a4f0c4da19adb3fd2f5bf2390ad77cc" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::shouldBeNumeric()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85ae9ecaf5bfcf31309841360332b1c8b1c8b0d" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::shouldBlockPhpUpload()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb265ae64eae56feb408d97f16b4feb7c582c644" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateAccepted()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87931bddfb6a2f076925a4e18bc1e0910f42c6d" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateActiveUrl()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf63454c83006cd41430505eff7f202fc032510" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateAfter()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3056108db86af1490a780f054255d83d296f54a4" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateAfterOrEqual()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13306c88f3ec881df7cb477c3be669dddfde7cc3" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateAlpha()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4747544e4302a6d6faaa18284256d8dca0d12930" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateAlphaDash()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179edefc28013c221b375bebe12a4b737637fce7" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateAlphaNum()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35575d7897a1687dbea2c9f4c592b83a5f60dd43" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca04e58627c5ed01c71cd5901386a1e3f4e39fdf" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateBail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a0b2dd0a7ceacf8b5581df347c661f68655ee8" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateBefore()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c15f1f2d71d6f89df4030f93d8db0a3ecf9cc21" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateBeforeOrEqual()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b034f66d1277663bc78b1845a81a3eeb33d6c659" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateBetween()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b219e2fbe777d8e86b558fa850073798abd251bb" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateBoolean()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc8ea025cbc8d856957aea0c5549f0b0b5da787" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateConfirmed()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e254bff7405cb3d982d25ef153a5cd2d2a896a9a" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544bc49f8febf9d72c4ec18536f98c0a6f839e1d" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDateEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d940bcf4d3615819f8f922bd36723b3eb0a5d6b" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDateFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152be1cad8c8ae7404d166e8ee7b14f06937a348" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDifferent()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99d5ef40bf60b4794a19274b96ffebd235918d5" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDigits()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3117683274fdc9599428dca5febe4b55b47412e7" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDigitsBetween()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad641c00870bc9c718ad875a9fbb3124bea942c6" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDimensions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032d50039ab84604f989aa7bcce2f07eda5286c6" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateDistinct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e3429d1b02317737400ed6a351bc4ec2bab7ca" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateEmail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9588b6001d8ef93fec693d3ed14c4ae6adf97ada" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateExists()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0bfd3226e2644da8585cf113b09b2c1a2eeb7e3" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0f1429368dcf05a8df3c8ee6e40499948fb023" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateFilled()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4e9f6e2a47f7f65d950a900ebb383353b384b3" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateGt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ba7fa1cd8c3e233c52f75d9f47289de7f987c9" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateGte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c6c145fdaeee7e546e8cfdd2ee95f78b7faece" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateImage()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c851a75a89f0e58991ca4c32567a9725bb8c91c2" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateIn()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cf7aa36bb6d0c11a492a9543064154d8a7482b" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateInArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8543936699e4126458a989d337713b544f546b06" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateInteger()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d291f469bf1aec308ee24c46d6ba0c9c4c10b931" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateIp()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819ffe6dc31a9afc0ea9e1dff2a89db682ec7b4d" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateIpv4()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4e32702f18f5a821ae0769351b7ef892f8ff0c" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateIpv6()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a81f5a919432b01dd535f7d9b99f141d6d723b" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateJson()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5bf08eb2c8df8949b434cebbc1543dab8bf1e6" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateLt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d78fe29f6ac523e756ae962df9aa9abba815f9" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateLte()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1385baff2fe83e3de5283fba0cb9c77782729aeb" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateMax()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505c9f683890eef9a7c5ef3fbdc92a35d27f0db1" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateMimes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95fb3ba2981c6c221afae864c64e58c0a8ec067" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateMimetypes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc961644487cb442024adaabb77563d02b8a494b" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateMin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bc035770e261fcd54fd8f8cfb01c95199383e0" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateNotIn()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4723039d23b91d4352f60c3fed4cc6b9bb1b55" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateNotRegex()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376978bdd35c4e52b342505163f7f860c39ba418" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateNullable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c84b9d951f1bb91a41049c228b4d352e07b967" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateNumeric()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e8973fa41f090d021cd8e2f08f0600ae8fe3dd" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validatePresent()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ed19d61ba5cfae1a5b66d04ef25095b7417918" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRegex()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93b9483de8cb19e716c9b2f981cdacf987665b18" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequired()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c96edce9f256e20fdabb4c53eca4a9b7bc16da4" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequiredIf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df14ccbac1f6968f91992ea832fedb75710c218d" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequiredUnless()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6625f42f8ac126be9f4e250b6b487ff3f42257c6" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequiredWith()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6af8c8b502420f2d63168ce305b0185e424e831" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequiredWithAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516354e47c82f19903911d2d0a54947d6a98afdb" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequiredWithout()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba63898509349c82911d1755cca577c5d9921c9" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateRequiredWithoutAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2d92d4c290fe822d31bec9c262872e61139dc7" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateSame()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a757fa81a30699fb11a5951771a326ba238107c6" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateSize()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dcee6e817014cca8bb1f6290fe530003761a4d" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateSometimes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751232d79c720436f26c06749e3b8058000be3fb" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e84c4b92f57ae5eee015ff2e2aa99b693247b2" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateTimezone()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947212bbac1c5ea9b2d210e8704b3b5958ca0d34" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateUnique()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4316f8e2be1cf266bf11de489843b05f831b8b13" translate="yes" xml:space="preserve">
          <source>ValidatesAttributes::validateUrl()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4e00c068a8796f6dcd067679a6b471ff5cedfd" translate="yes" xml:space="preserve">
          <source>ValidatesRequests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7313f87e451a4fed617cfecb6c360020c54e4f9" translate="yes" xml:space="preserve">
          <source>ValidatesRequests (Foundation\Validation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7aa60a5c48dabb9207ddfe5cd5080de6c2faec5" translate="yes" xml:space="preserve">
          <source>ValidatesRequests::getValidationFactory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf943b1ea7666b2e346af49da9d27ffb566683d4" translate="yes" xml:space="preserve">
          <source>ValidatesRequests::validate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0a77f883907caa6346b31aa02594e835a999f1" translate="yes" xml:space="preserve">
          <source>ValidatesRequests::validateWith()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaad482e5b4fdd3613dd02038395f3271e68eab4" translate="yes" xml:space="preserve">
          <source>ValidatesRequests::validateWithBag()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d14d9e65e3d3bb292e77b97d10971dfaa0eef5" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolved</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c723e903ed899e23a0b50054de836a970d4963" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolved (Contracts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6a1b408ae12ea348c7ca3acaadd11ece13b70c" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolved::validateResolved()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa59a86ea9bada8b6bea60bd9bb399421b0fbfc7" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81f355a3fb20177fa52fa2d8681ad008df73849" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait (Validation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f993d41e2e43ba5fc223fb73128ffc5f48ad1d" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait::failedAuthorization()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342916d642613af3ffbb5442bea7ca11981405e0" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait::failedValidation()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24db7e28f078c5d7cd9dc2d3b9ec7af380949b0" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait::getValidatorInstance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79a5fc20ac340eb7118cde054ad9e5bd5eecd5e" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait::passesAuthorization()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1410346c3e4d95e25b60527831a5f72191d7b263" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait::prepareForValidation()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4a3ddd52e06806692d81e29a6f1f5981f17679" translate="yes" xml:space="preserve">
          <source>ValidatesWhenResolvedTrait::validateResolved()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6150496ab8f08515e54f318062f96918132f6d84" translate="yes" xml:space="preserve">
          <source>Validating Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5e983d5791afb94472f53a83d93a9b149da9bd" translate="yes" xml:space="preserve">
          <source>Validating Signed Route Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca99c365771929f7eb3b62133c00b9482307d2b" translate="yes" xml:space="preserve">
          <source>Validating Successful Uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3172d5c82735caa5b592b69796a580cc233f01a4" translate="yes" xml:space="preserve">
          <source>Validating When Present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b9626d4dae03e41511b7c72e2c70065bf5ddbc" translate="yes" xml:space="preserve">
          <source>Validating array based form input fields doesn't have to be a pain. You may use &quot;dot notation&quot; to validate attributes within an array. For example, if the incoming HTTP request contains a &lt;code&gt;photos[profile]&lt;/code&gt; field, you may validate it like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64663fbc455226f25626eb6e66c56aff0aefa7ac" translate="yes" xml:space="preserve">
          <source>Validation / Storage Customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0600289276ade2488c6f3dd4f302a27cb9ba9013" translate="yes" xml:space="preserve">
          <source>Validation Quickstart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3016277bd4a88df4607f705afe045c61fae853" translate="yes" xml:space="preserve">
          <source>ValidationData</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a74245b1ef9b77b941415400e5ac7bd92f9563d" translate="yes" xml:space="preserve">
          <source>ValidationException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746c009697ef1ccba2be12bbc057998a227a0617" translate="yes" xml:space="preserve">
          <source>ValidationRuleParser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6111fc19b1d2bc9cd9b18bbc9890b5d20bff13e" translate="yes" xml:space="preserve">
          <source>ValidationRuleParser::parseParameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9144d57180c146f2ac0c502d79f742d9d8e77279" translate="yes" xml:space="preserve">
          <source>ValidationServiceProvider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a878fb3195097e6c3030e570840bca668989de" translate="yes" xml:space="preserve">
          <source>Validation\Concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817048f1cede9167f31e7cb1cf94bcde4df7235a" translate="yes" xml:space="preserve">
          <source>Validation\Rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5b7a60980482ab39ae77b25489457b817517cd" translate="yes" xml:space="preserve">
          <source>Validator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f9d594159e3f2c3f8d28d216615dd715ca0095" translate="yes" xml:space="preserve">
          <source>Validator (Contracts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e0fe7247e34cdb327e39e585234667cab29469" translate="yes" xml:space="preserve">
          <source>Validator (Instance)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b336addaaa239952fb415f7fd85918e65045df7" translate="yes" xml:space="preserve">
          <source>Validator (Support\Facades)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5abb5e3af805ac643b776d8760f718835ae744b" translate="yes" xml:space="preserve">
          <source>Validator (Validation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bef6aa283c23efb213d9dffadf61beb55b65477" translate="yes" xml:space="preserve">
          <source>Validator::__call()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bde66161ccef1cb590c46e57ac88ac2533bad14" translate="yes" xml:space="preserve">
          <source>Validator::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abd94f00b3df4694c659478ad29690e3fa0a57f" translate="yes" xml:space="preserve">
          <source>Validator::addCustomAttributes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21594937b1ffe86b61baeaa36f41801ea5169136" translate="yes" xml:space="preserve">
          <source>Validator::addCustomValues()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dde80edd8816711bb5c3b2806786c0fac34b71" translate="yes" xml:space="preserve">
          <source>Validator::addDependentExtension()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716ad347ca4d768925dde99fc3cd4d79cccfc6ad" translate="yes" xml:space="preserve">
          <source>Validator::addDependentExtensions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0df5c0e13371d977c068af45e2a497911bb143f" translate="yes" xml:space="preserve">
          <source>Validator::addExtension()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb5329d9f6d63d5f0359959849c3c333bd1efaa" translate="yes" xml:space="preserve">
          <source>Validator::addExtensions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026a5248f1127c432ba53ac2f495d3a73a3a4f5f" translate="yes" xml:space="preserve">
          <source>Validator::addFailure()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a28e92d6873f4bb574bbe5c5f54cd3ac614511" translate="yes" xml:space="preserve">
          <source>Validator::addImplicitExtension()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80a828b2833ef3a11050fa47855612257a51326" translate="yes" xml:space="preserve">
          <source>Validator::addImplicitExtensions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0488e8ba658aa57c58a61987f9f5a40bcd9532" translate="yes" xml:space="preserve">
          <source>Validator::addReplacer()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d68509a66123cdb1024e383163792b3521a444" translate="yes" xml:space="preserve">
          <source>Validator::addReplacers()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27230774d3beaa78570d935e27f429a1f9e0d73c" translate="yes" xml:space="preserve">
          <source>Validator::addRules()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe6805240f5ec8b4addcc8cddbfa3b06f5da284" translate="yes" xml:space="preserve">
          <source>Validator::after()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa54f2778577b1670233c279e5ae64fc39148337" translate="yes" xml:space="preserve">
          <source>Validator::attributes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d823cef5024bb45f86dcf960916bb5b47f043315" translate="yes" xml:space="preserve">
          <source>Validator::attributesThatHaveMessages()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f681eee205ce9473a40d7962536b6c00c6e1233d" translate="yes" xml:space="preserve">
          <source>Validator::callClassBasedExtension()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdbc39c0af702f572d39b7e3118d2e8cd2251bed" translate="yes" xml:space="preserve">
          <source>Validator::callExtension()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0533704a007ebeef16357656dc7870bff7b77f" translate="yes" xml:space="preserve">
          <source>Validator::dependsOnOtherFields()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88882a126316707bfc806bd1b5fcde47feea3519" translate="yes" xml:space="preserve">
          <source>Validator::errors()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebafc5e71635a883e8afc895d7242d6eba290a0" translate="yes" xml:space="preserve">
          <source>Validator::failed()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488b98eeb868d233b0c30d414a69069f5731ae79" translate="yes" xml:space="preserve">
          <source>Validator::fails()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ae2bca3b6115498d3f7d42de77f69e69bbe1fe" translate="yes" xml:space="preserve">
          <source>Validator::getData()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551ec908fa41f84996feb5a92c20996c7c4dc170" translate="yes" xml:space="preserve">
          <source>Validator::getExplicitKeys()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0303d5906e1bfc36bd833212aa3ba10f00e9652" translate="yes" xml:space="preserve">
          <source>Validator::getFacadeAccessor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45835e605f92b1382945edb67a836e63ddc4d03c" translate="yes" xml:space="preserve">
          <source>Validator::getMessageBag()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba703451e38ca9b4eb087266d90da35d0ebf26ec" translate="yes" xml:space="preserve">
          <source>Validator::getPresenceVerifier()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f0d2ed13b35efd587255a5fac70dc9203e0407" translate="yes" xml:space="preserve">
          <source>Validator::getPresenceVerifierFor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2adaa115b4190ffd5e9641b37486d723ce95f3" translate="yes" xml:space="preserve">
          <source>Validator::getPrimaryAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de7dbfc7c4805fc1a4d2cbaf55b32153d955f8a" translate="yes" xml:space="preserve">
          <source>Validator::getRule()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c0e39b6a0adfdc422299b3e86f75639259eda2" translate="yes" xml:space="preserve">
          <source>Validator::getRules()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e520480b181e3bc995f91f3852a72d39c677c0c" translate="yes" xml:space="preserve">
          <source>Validator::getTranslator()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa84aebc80134eddc22d691525b5bd77647b5fb" translate="yes" xml:space="preserve">
          <source>Validator::getValue()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8131288f8329952e472cd70e4a22699ed44e310" translate="yes" xml:space="preserve">
          <source>Validator::hasNotFailedPreviousRuleIfPresenceRule()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62885d41cea839c09c03ee34c05e26b947e4d06d" translate="yes" xml:space="preserve">
          <source>Validator::hasRule()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eca29b14b4ed23a63d5f393240708d56e00c501" translate="yes" xml:space="preserve">
          <source>Validator::invalid()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce101d689a80b1fa1056d68054fb1c4046505982" translate="yes" xml:space="preserve">
          <source>Validator::isImplicit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024c957288d4def17d50978022c0e415c37ff174" translate="yes" xml:space="preserve">
          <source>Validator::isNotNullIfMarkedAsNullable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58201bd96d770516c5006e4567fcf86bec0768d" translate="yes" xml:space="preserve">
          <source>Validator::isValidatable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="908e4e0cc3b11ad728317e77aebef8f1885f5f73" translate="yes" xml:space="preserve">
          <source>Validator::messages()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058a94a4751640bbbbf1faada3bc723e76578cde" translate="yes" xml:space="preserve">
          <source>Validator::parseData()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243e56898e63baf5d7f1eaec889fa497350ec157" translate="yes" xml:space="preserve">
          <source>Validator::passes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba4e61f18f7580719f8c6cc4519c4fd7c9860dd" translate="yes" xml:space="preserve">
          <source>Validator::passesOptionalCheck()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36d3e2269c50e3feaa8898fe67261623b14d1a2" translate="yes" xml:space="preserve">
          <source>Validator::presentOrRuleIsImplicit()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff795c4327fdb9332cc1ab298a6e995898d74bc7" translate="yes" xml:space="preserve">
          <source>Validator::replaceAsterisksInParameters()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175a6b8827fa8473e598f73a9547c26758e998be" translate="yes" xml:space="preserve">
          <source>Validator::setAttributeNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca0f5a13ad192478ff6811d3b9379a92a606317" translate="yes" xml:space="preserve">
          <source>Validator::setContainer()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d73b27013df883b23bb5bae638b5ba9e668cfcf" translate="yes" xml:space="preserve">
          <source>Validator::setCustomMessages()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cde8278eec1d98a44e571080a49b782ae5741d1" translate="yes" xml:space="preserve">
          <source>Validator::setData()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b90d18719adc21aa647d63e0c00de0c7c5ce9c9" translate="yes" xml:space="preserve">
          <source>Validator::setFallbackMessages()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307bf903285fad521eb54283c712361a5a065b97" translate="yes" xml:space="preserve">
          <source>Validator::setPresenceVerifier()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd7618a7102607f8b0f32531337fb77a5771bc0" translate="yes" xml:space="preserve">
          <source>Validator::setRules()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9030e63023d5174b967ff2a1cec338abbdbb1380" translate="yes" xml:space="preserve">
          <source>Validator::setTranslator()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e36752cbe9dc5a3458be9da925e8f46cd6b6b1" translate="yes" xml:space="preserve">
          <source>Validator::setValueNames()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75dcc3d8c3f533e2fb56de17fa9d57b8070e98e" translate="yes" xml:space="preserve">
          <source>Validator::shouldStopValidating()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fdccd1bede135087c2b485275afe154c5a238c" translate="yes" xml:space="preserve">
          <source>Validator::sometimes()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b03ca2fde9207c2edc07aeea2002841e071f8da" translate="yes" xml:space="preserve">
          <source>Validator::valid()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83093e901543a93a05fa8ae6b5e80bfddbbbfdfa" translate="yes" xml:space="preserve">
          <source>Validator::validate()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8fef8aee038d0909ae6f72fa46c8d0843eedc7" translate="yes" xml:space="preserve">
          <source>Validator::validateAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a314bfa45b3adf1256a77ec0f066e1b68c27d1fa" translate="yes" xml:space="preserve">
          <source>Validator::validateUsingCustomRule()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807e4053bc45088b15dc83ec9738651b61bfa267" translate="yes" xml:space="preserve">
          <source>ValidatorInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59289c44d296d208a7e3dbb4618747129c7e86cd" translate="yes" xml:space="preserve">
          <source>ValidatorInterface (Routing\Matching)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c6cf39d743bcf396be72a4c5516afd721d621e" translate="yes" xml:space="preserve">
          <source>ValidatorInterface::matches()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5a080a2368930bf1b1117949e48fda2eccab46" translate="yes" xml:space="preserve">
          <source>Vanilla JS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846e7a77bc3a6be34611b593969a1111633f94e2" translate="yes" xml:space="preserve">
          <source>Variables that are dynamically passed to mailable views &lt;a href=&quot;https://github.com/laravel/framework/pull/24232&quot;&gt;are now automatically &quot;camel cased&quot;&lt;/a&gt;, which makes mailable dynamic variable behavior consistent with dynamic view variables. Dynamic mailable variables are not a documented Laravel feature, so likelihood of impact to your application is low.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ea8d3e9f119ebc625127ec1eae5ffef60fc7ff" translate="yes" xml:space="preserve">
          <source>Vendor Extraction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60aa156aec8b7900f2fcc7555572da6806ed404e" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9aac51bbeeb2b8d94ded984e70d3278877151e" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand (Foundation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb11c73725827e1bf3217624dac6d495d0eda45" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d82e346662fc447c071b0cb9304cd16d75cd7ce" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::createParentDirectory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9426e4e3b8601829b71ab0d712db62c60fc9844" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::determineWhatShouldBePublished()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2f6ccad9f3376dc271b765f26ce750a8629028" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e16ac2b2e2a07358e63547ba94c2f80f30d0a1" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::moveManagedFiles()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2321b05d3cee837eb16954813b3d18815973beaa" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::parseChoice()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88279687627a36a1ea7f2f4e0bcf6e3d8b1ff47a" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::pathsToPublish()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af47432168b02e3d2e775ca075c44c328e220635" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::promptForProviderOrTag()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1574c7712ed5265ae681647bd3f975f1591bff19" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::publishDirectory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d597f62cffda77e3329a775f8a264509b5e7e1" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::publishFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856a988a5bb31e9afe36f80b79672d4874093d5a" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::publishItem()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cfd1f2871a32069e214897bf1f63a2f5749c94" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::publishTag()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a735a1d49e6abfb0f6decb90440d59ad0559cf6" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::publishableChoices()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c54d5fb6ae5f31f733098e7e205e7e4e894bf3" translate="yes" xml:space="preserve">
          <source>VendorPublishCommand::status()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33817a63b651d4a84e7a5d740d58bef5f67a6a2a" translate="yes" xml:space="preserve">
          <source>Verb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed3b8c6a7c0fbbdbffa59a082415b138a87a6a6" translate="yes" xml:space="preserve">
          <source>Verified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4990372b20215a80d9461942ec22c6a264e5c95b" translate="yes" xml:space="preserve">
          <source>Verified (Auth\Events)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0d19fc5305547873e0fb9363de406bef84d26b" translate="yes" xml:space="preserve">
          <source>Verified::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee90d7d5543cc2e1f5f4aad1d2eaf90d83c96549" translate="yes" xml:space="preserve">
          <source>VerifiesEmails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72daaad87bd915f988de1ef417449fd19be953ef" translate="yes" xml:space="preserve">
          <source>VerifiesEmails (Foundation\Auth)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff533e166c7180ef75e6440b243f94b76893ac74" translate="yes" xml:space="preserve">
          <source>VerifiesEmails::resend()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb00b91262a52e9a6ff5e59654dc1638e2af0ddc" translate="yes" xml:space="preserve">
          <source>VerifiesEmails::show()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11039d8339d484b0840bdb6953f5b77792c6eb53" translate="yes" xml:space="preserve">
          <source>VerifiesEmails::verify()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09c1a37a38b85cd68b664b013db3c35702c3a9e" translate="yes" xml:space="preserve">
          <source>Verify that the encryption payload is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e851551f83af80c4fd460e7dce35b9c25fe81f" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481bca3f16c19b1c667d5d078c5a774f386a275b" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken (Foundation\Http)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b38088228e470a5d75e318ba73e736ba95bd6e" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6e12f9159344da2b6c521f0aa96e5d1dc6c0c4" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::addCookieToResponse()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af8a4e33186e8a9a29edb243d9a356ae84b7c74" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::getTokenFromRequest()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300aeeedac93060543f4fe4dd397b60afa043dc0" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955c69feda3cd458fd7daffa6f49a66f69268cd3" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::inExceptArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9814f4b5f82d2e62700728b15778cea7be6d819" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::isReading()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc8e5b5a6f1413c075d35904ad14868615d112b" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::runningUnitTests()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234104e58b89c3d5c6084eb95bd18d66f91947cf" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::serialized()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d3868387074252929691e7bf30dff30f3240aa" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::shouldAddXsrfTokenCookie()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73aa614209b04bd56d58fa37ddb497da79f05ca9" translate="yes" xml:space="preserve">
          <source>VerifyCsrfToken::tokensMatch()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6be84b1a0b232d34c6744c5051d91d4f2c89b3" translate="yes" xml:space="preserve">
          <source>VerifyEmail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c25950bf5161b431f8eaca12c08d4c676ad0cb" translate="yes" xml:space="preserve">
          <source>VerifyEmail (Auth\Notifications)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6372cb0fd0c2f730f37afcaf4e3243c27ec9661b" translate="yes" xml:space="preserve">
          <source>VerifyEmail::toMail()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747395ae35e22dcd74852d7ffd4969abeb6733f7" translate="yes" xml:space="preserve">
          <source>VerifyEmail::toMailUsing()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f66035652829511a6c585913671d4e3dc07684" translate="yes" xml:space="preserve">
          <source>VerifyEmail::verificationUrl()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13433abad2e71f2638abe9774c3cdc74102f7764" translate="yes" xml:space="preserve">
          <source>VerifyEmail::via()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bb88094ae980a3488e26d5c06c61f56262541c" translate="yes" xml:space="preserve">
          <source>Verifying A Password Against A Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede44ecd9dab58dbdb53971a85a66c62fb10a50f" translate="yes" xml:space="preserve">
          <source>Verifying An Exact JSON Match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bc56b974a9f54ba6d3db31f2adbf63a8300ee6" translate="yes" xml:space="preserve">
          <source>Versioning / Cache Busting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22fc540f2af12c8ec78a747a89bd3b49988f423" translate="yes" xml:space="preserve">
          <source>Versioning Scheme</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8a8491cc0bd951bd841f43ac95a43993e12abd" translate="yes" xml:space="preserve">
          <source>Via Blade Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c53eb56ef64e0264243d307fc1960a19960ab80" translate="yes" xml:space="preserve">
          <source>Via Composer Create-Project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73db5daddd56688e1dda7d522a9b062cd64a0dce" translate="yes" xml:space="preserve">
          <source>Via Controller Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0025b51c080b8656aab5b271be5145d2badee46" translate="yes" xml:space="preserve">
          <source>Via Laravel Installer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b303f4566c13cdee6542f610dba3260651a07126" translate="yes" xml:space="preserve">
          <source>Via Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304b7868d1c04a6b3e24553f168d73d19a0eaacb" translate="yes" xml:space="preserve">
          <source>Via Public Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b33d9592194e2212f54c6a8926eb12365a7ca1" translate="yes" xml:space="preserve">
          <source>Via The &lt;code&gt;with&lt;/code&gt; Method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b61f5d3d2be4aa656894845ce145e491635ee3" translate="yes" xml:space="preserve">
          <source>Via The User Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bd4ef9fbd0894a22759c3766b859defbdedbc8" translate="yes" xml:space="preserve">
          <source>View</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636384962685e7a27a4f3552b6bf81bfe178bd9b" translate="yes" xml:space="preserve">
          <source>View (Contracts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38a4568f526f342e8fcf688778413b79264f388" translate="yes" xml:space="preserve">
          <source>View (Instance)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2091b347f21fadce61dbd640950009db3acb59" translate="yes" xml:space="preserve">
          <source>View (Support\Facades)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce585b3bc9ac6775d43e718a94f4cfbf8f3832e" translate="yes" xml:space="preserve">
          <source>View &lt;strong&gt;creators&lt;/strong&gt; are very similar to view composers; however, they are executed immediately after the view is instantiated instead of waiting until the view is about to render. To register a view creator, use the &lt;code&gt;creator&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8beebfe4516b39e3e9cd125c3b013717fc8fba3" translate="yes" xml:space="preserve">
          <source>View Composers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a887ed3d5c0a73c479f298946b97ae34b6cb6c7" translate="yes" xml:space="preserve">
          <source>View Creators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b356ea8e0756a911b2013cd62103873365bcb04" translate="yes" xml:space="preserve">
          <source>View Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216fac9acc90914885a8b9e2f5ece0b60d24a1cb" translate="yes" xml:space="preserve">
          <source>View Responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad0fbfb5b81d3b4cdda705944cbe470d375c4ce" translate="yes" xml:space="preserve">
          <source>View Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb642ffd803c6d11460735424c344786a7414834" translate="yes" xml:space="preserve">
          <source>View all of your &quot;parked&quot; paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e476fc63786200bda3d812334fb2f3c95b57a2fc" translate="yes" xml:space="preserve">
          <source>View composers are callbacks or class methods that are called when a view is rendered. If you have data that you want to be bound to a view each time that view is rendered, a view composer can help you organize that logic into a single location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d718b41cea54e89300e228033dc8210dc7ab81" translate="yes" xml:space="preserve">
          <source>View::getFacadeAccessor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecef7336a07ca36532e5ac1234cc535c16a1d99" translate="yes" xml:space="preserve">
          <source>View::name()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c002348c4cbfabae7f2aa2a0a353278eb8fc7e59" translate="yes" xml:space="preserve">
          <source>View::with()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b25985c03cdcff5335fe20c390c36551184e23" translate="yes" xml:space="preserve">
          <source>ViewCacheCommand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d3e66bb32bed77f80396350b2630d0e4fe7fef" translate="yes" xml:space="preserve">
          <source>ViewCacheCommand (Foundation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa12ebbd1ebe10822612b0886b83da2ba4bc9c1e" translate="yes" xml:space="preserve">
          <source>ViewCacheCommand::bladeFilesIn()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb687c6fe711efd3db1f8f5fd9fe66ab594ac3d" translate="yes" xml:space="preserve">
          <source>ViewCacheCommand::compileViews()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d24ca6ac83d82e1e73ae828043db1ae7ffa173" translate="yes" xml:space="preserve">
          <source>ViewCacheCommand::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da4330c86144a2696923548a4ebb695880c12ca" translate="yes" xml:space="preserve">
          <source>ViewCacheCommand::paths()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e60e26f0f206f77b5851b78a6269c2fadb089b" translate="yes" xml:space="preserve">
          <source>ViewClearCommand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6e83d8b2d895bb88cee297b02622bfebae916d" translate="yes" xml:space="preserve">
          <source>ViewClearCommand (Foundation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cd454a2d601bf5996be869dc74f5a458da5f8c" translate="yes" xml:space="preserve">
          <source>ViewClearCommand::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd48eeeccbb7cf4f670ee13b18bfe76e7f32fd17" translate="yes" xml:space="preserve">
          <source>ViewClearCommand::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e0c76f563736f6c88b0432a721b2418d20b3b7" translate="yes" xml:space="preserve">
          <source>ViewController</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6cb8dd74a9d9e5e8e455d7a7c4e142859204ff" translate="yes" xml:space="preserve">
          <source>ViewController (Routing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909287a7c532f879ef5c0cc229d7cba3d44ad1c4" translate="yes" xml:space="preserve">
          <source>ViewController::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4a135538ea1460881b660c21dc3e029b8a5fdf" translate="yes" xml:space="preserve">
          <source>ViewController::__invoke()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea61113b1842710f9ac25fd963f7283f452f182" translate="yes" xml:space="preserve">
          <source>ViewErrorBag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7963e44f1ebe85f265d10e7148da4475e6f1c62" translate="yes" xml:space="preserve">
          <source>ViewErrorBag (Support)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d409e2f2ba61778a136c5f6c9c5e1a86e251f6a0" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::__call()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4923f90dd20358f3ef924b3446496f85862bb9f" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::__get()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1b8ef16c752ac7d411f83e2a5222322cf542cc" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::__set()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd33ca55c4589c854d75bac447bd5d12acd98fb" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::__toString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a436fe71d64f9c550e9d310dffa42cf461b8628b" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::any()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06414ba3824b8f3f2c2698c8938a27155d41926" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::count()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec4a0c9600fcd41c2f70eb24a68f5ff8f83631e" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::getBag()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ac1a9a9e028846168aa39e5c657673e479ecaa" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::getBags()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fb491fc002a38275b35a93bf88f10abc8d17e0" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::hasBag()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b09df207b989c9cb5b3a60ac64d8e93d8e71ee6" translate="yes" xml:space="preserve">
          <source>ViewErrorBag::put()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46a0b36d1391d2e2fcd5b8a15363ea9a3069be0" translate="yes" xml:space="preserve">
          <source>ViewFinderInterface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c814cb87f281c21b5263b1341d5b98df7322113" translate="yes" xml:space="preserve">
          <source>ViewName</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd159f6b18e6b33ba7d6277d6eef99edb5c9680d" translate="yes" xml:space="preserve">
          <source>ViewServiceProvider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da6064b2d9fe83acd521ec78b23c36ae3317d6b" translate="yes" xml:space="preserve">
          <source>View\Compilers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5066f522b00a9f6b984a4528eaa66c2a265a8cd" translate="yes" xml:space="preserve">
          <source>View\Concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef9c7846ad7408ed1ca056b587f44ba52f217a0" translate="yes" xml:space="preserve">
          <source>View\Engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f410dbe82914b0c5bf0317bbb149c6280f12c32" translate="yes" xml:space="preserve">
          <source>View\Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ad283f6ad2ced43a72af53523fbb898b795783" translate="yes" xml:space="preserve">
          <source>Views contain the HTML served by your application and separate your controller / application logic from your presentation logic. Views are stored in the &lt;code&gt;resources/views&lt;/code&gt; directory. A simple view might look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0016aa1d302b4434ce107416ddbe852b5be6b50" translate="yes" xml:space="preserve">
          <source>Views rendered via &lt;code&gt;@each&lt;/code&gt; do not inherit the variables from the parent view. If the child view requires these variables, you should use &lt;code&gt;@foreach&lt;/code&gt; and &lt;code&gt;@include&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb837c2918c14957ebf249f5eb0de4adb9ee6f1c" translate="yes" xml:space="preserve">
          <source>VirtualBox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09237dbacbb33a0831b186279d9a2723fdcb6836" translate="yes" xml:space="preserve">
          <source>Vue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c98b2cfaa9d4765b9e2cfb3f936b31569dd6962" translate="yes" xml:space="preserve">
          <source>Vue (Foundation\Console)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6579d8fdec926cbc1031ee4bdaa166a7ab5940c" translate="yes" xml:space="preserve">
          <source>Vue::install()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8649e69091a6d5c4eb2d2d03d7b4bb1f158d41ae" translate="yes" xml:space="preserve">
          <source>Vue::updateBootstrapping()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbcd70a74512eeadab3512921cb7d817164457c4" translate="yes" xml:space="preserve">
          <source>Vue::updateComponent()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2e1df8765b3d354d8b0924e1cc455ecd831db4" translate="yes" xml:space="preserve">
          <source>Vue::updatePackageArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7ded80f30477b8e1df7a28ca05d7fae8123953" translate="yes" xml:space="preserve">
          <source>Vue::updateWebpackConfiguration()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d30632848d3fd0ed2340adbd7be3e3e8e61010" translate="yes" xml:space="preserve">
          <source>Waiting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcf209dcba3241aed59f7200135e60eaf14fe05" translate="yes" xml:space="preserve">
          <source>Waiting For Elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6061f202f89fcf8a46854ddd6e953ac4d52bf4" translate="yes" xml:space="preserve">
          <source>Waiting For Links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c06973b4a2eae112161738c9e56fef2bf19a56f" translate="yes" xml:space="preserve">
          <source>Waiting For Selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8915cfb76f2a79cd2bcef3566a351979bbf7b6f5" translate="yes" xml:space="preserve">
          <source>Waiting For Text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a93e906bd1e623a66b1a5edc4c444c1cb143fb" translate="yes" xml:space="preserve">
          <source>Waiting On JavaScript Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac24870fd2eb25329b6b68d56f0522cc9a7a394" translate="yes" xml:space="preserve">
          <source>Waiting On The Page Location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66f079e10a7d7aec45467c653706f4284c46e572" translate="yes" xml:space="preserve">
          <source>Waiting With A Callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ec1f68508f56c1e6d4c0a48a87e9c014546b05" translate="yes" xml:space="preserve">
          <source>Waiting for Page Reloads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31079e2838d6a488df71812a6406f9902113cf4a" translate="yes" xml:space="preserve">
          <source>Watching Assets For Changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d45f8067cbf5c49bec145ca14df4b3e6457d76" translate="yes" xml:space="preserve">
          <source>We also encourage you to view the changes in the &lt;code&gt;laravel/laravel&lt;/code&gt;&lt;a href=&quot;https://github.com/laravel/laravel&quot;&gt;GitHub repository&lt;/a&gt;. While many of these changes are not required, you may wish to keep these files in sync with your application. Some of these changes will be covered in this upgrade guide, but others, such as changes to configuration files or comments, will not be. You can easily view the changes with the &lt;a href=&quot;https://github.com/laravel/laravel/compare/5.6...master&quot;&gt;GitHub comparison tool&lt;/a&gt; and choose which updates are important to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7156481a1a1be6ca98c965d55920fe22b53ec5fb" translate="yes" xml:space="preserve">
          <source>We attempt to document every possible breaking change. Since some of these breaking changes are in obscure parts of the framework only a portion of these changes may actually affect your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef98fd09547c6700ab606df12b038c51fc1c802b" translate="yes" xml:space="preserve">
          <source>We can mock the call to the &lt;code&gt;Cache&lt;/code&gt; facade by using the &lt;code&gt;shouldReceive&lt;/code&gt; method, which will return an instance of a &lt;a href=&quot;https://github.com/padraic/mockery&quot;&gt;Mockery&lt;/a&gt; mock. Since facades are actually resolved and managed by the Laravel &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt;, they have much more testability than a typical static class. For example, let's mock our call to the &lt;code&gt;Cache&lt;/code&gt; facade's &lt;code&gt;get&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedef6004beb50d50d9aff32fc5f57658ab3cb12" translate="yes" xml:space="preserve">
          <source>We can write the following test to verify that the &lt;code&gt;Cache::get&lt;/code&gt; method was called with the argument we expected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdcc0d5946ce4f8ac5185ba8c4fc842448e9f58" translate="yes" xml:space="preserve">
          <source>We could also modify a column to be nullable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac69c1fb918fc92ab1fd0cd3256e8335a8c9d26" translate="yes" xml:space="preserve">
          <source>We just need to implement each of these methods using a MongoDB connection. For an example of how to implement each of these methods, take a look at the &lt;code&gt;Illuminate\Cache\MemcachedStore&lt;/code&gt; in the framework source code. Once our implementation is complete, we can finish our custom driver registration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a472d31daf95235421ff5f44ec9bfde21808fb22" translate="yes" xml:space="preserve">
          <source>We will access Laravel's authentication services via the &lt;code&gt;Auth&lt;/code&gt;&lt;a href=&quot;facades&quot;&gt;facade&lt;/a&gt;, so we'll need to make sure to import the &lt;code&gt;Auth&lt;/code&gt; facade at the top of the class. Next, let's check out the &lt;code&gt;attempt&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26037b5b0bfa3f49c1a4763e25ee1bee011d319d" translate="yes" xml:space="preserve">
          <source>Web Server Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21fe93b150dc90da16caac8eecd7697af124c0b" translate="yes" xml:space="preserve">
          <source>Web Servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aded54ec3ed315a888256b00507f341b77a42b8e" translate="yes" xml:space="preserve">
          <source>Webhooks &amp;amp; CSRF Protection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de833b27867cf0dabdf48eedb5c8d371dafab45b" translate="yes" xml:space="preserve">
          <source>What if a customer's credit card expires? No worries - Cashier includes a Webhook controller that can easily cancel the customer's subscription for you. As noted above, all you need to do is point a route to the controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87919cd5573ff73c0b5eeb8d810478cacaea886b" translate="yes" xml:space="preserve">
          <source>What if a customer's credit card expires? No worries - Cashier includes a Webhook controller that can easily cancel the customer's subscription for you. Just point a route to the controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a66d4a0910eaef54ed1f2355f51b009b4f380d6" translate="yes" xml:space="preserve">
          <source>When Issuing Personal Access Tokens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892983fe50cf425a97431f2e54dc9df64982ec00" translate="yes" xml:space="preserve">
          <source>When Requesting Authorization Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d90ed812d7b5f98aac8f60b0355bb851e3ff13" translate="yes" xml:space="preserve">
          <source>When To Use Contracts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2426ce7e94e748b33b9c4a6addc3c07e09f43ed2" translate="yes" xml:space="preserve">
          <source>When To Use Facades</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee6e36d9ea3a168ea2a90f52b68861939ab5a5f" translate="yes" xml:space="preserve">
          <source>When a client is created, it will be issued a client ID and client secret. These values will be used when requesting access tokens from your application. The client creation route will return the new client instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79664f80c60a7601888248326f1a8fc76cf3fa74" translate="yes" xml:space="preserve">
          <source>When a column is considered a date, you may set its value to a UNIX timestamp, date string (&lt;code&gt;Y-m-d&lt;/code&gt;), date-time string, and of course a &lt;code&gt;DateTime&lt;/code&gt; / &lt;code&gt;Carbon&lt;/code&gt; instance, and the date's value will automatically be correctly stored in your database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125590675e6bd15a02a86c5eb8b4805c385c6c14" translate="yes" xml:space="preserve">
          <source>When a model &lt;code&gt;belongsTo&lt;/code&gt; or &lt;code&gt;belongsToMany&lt;/code&gt; another model, such as a &lt;code&gt;Comment&lt;/code&gt; which belongs to a &lt;code&gt;Post&lt;/code&gt;, it is sometimes helpful to update the parent's timestamp when the child model is updated. For example, when a &lt;code&gt;Comment&lt;/code&gt; model is updated, you may want to automatically &quot;touch&quot; the &lt;code&gt;updated_at&lt;/code&gt; timestamp of the owning &lt;code&gt;Post&lt;/code&gt;. Eloquent makes it easy. Just add a &lt;code&gt;touches&lt;/code&gt; property containing the names of the relationships to the child model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa7b3468c37ed0ba4e4753a360920a868dd4045" translate="yes" xml:space="preserve">
          <source>When a model is being unserialized, check if it needs to be booted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28308971c138caf83500a5fefb8ef266d7b98000" translate="yes" xml:space="preserve">
          <source>When a notification is sent, the &lt;code&gt;Illuminate\Notifications\Events\NotificationSent&lt;/code&gt; event is fired by the notification system. This contains the &quot;notifiable&quot; entity and the notification instance itself. You may register listeners for this event in your &lt;code&gt;EventServiceProvider&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620ac5e7d1e3b6cc566be2f5b51ac5041d2234d8" translate="yes" xml:space="preserve">
          <source>When a soft deleted model is permanently deleted using &lt;code&gt;forceDelete&lt;/code&gt;, Scout will remove it from the search index automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bed68a026f2be6ba6a1ba11b81caac39b109879" translate="yes" xml:space="preserve">
          <source>When a subscription is cancelled, Cashier will automatically set the &lt;code&gt;ends_at&lt;/code&gt; column in your database. This column is used to know when the &lt;code&gt;subscribed&lt;/code&gt; method should begin returning &lt;code&gt;false&lt;/code&gt;. For example, if a customer cancels a subscription on March 1st, but the subscription was not scheduled to end until March 5th, the &lt;code&gt;subscribed&lt;/code&gt; method will continue to return &lt;code&gt;true&lt;/code&gt; until March 5th.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c425cb0adacc52cf2cf300360d7e8e80a1cd201" translate="yes" xml:space="preserve">
          <source>When a user is successfully authenticated, they will be redirected to the &lt;code&gt;/home&lt;/code&gt; URI. You can customize the post-authentication redirect location by defining a &lt;code&gt;redirectTo&lt;/code&gt; property on the &lt;code&gt;LoginController&lt;/code&gt;, &lt;code&gt;RegisterController&lt;/code&gt;, &lt;code&gt;ResetPasswordController&lt;/code&gt;, and &lt;code&gt;VerificationController&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ca86eee0721c970f4f0f707759a4e87ba67aab" translate="yes" xml:space="preserve">
          <source>When a user is viewing one of their orders, we don't want them to have to refresh the page to view status updates. Instead, we want to broadcast the updates to the application as they are created. So, we need to mark the &lt;code&gt;ShippingStatusUpdated&lt;/code&gt; event with the &lt;code&gt;ShouldBroadcast&lt;/code&gt; interface. This will instruct Laravel to broadcast the event when it is fired:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11599e295b83f1af295523f73811bb41e23c9a15" translate="yes" xml:space="preserve">
          <source>When accessing Eloquent relationships as properties, the relationship data is &quot;lazy loaded&quot;. This means the relationship data is not actually loaded until you first access the property. However, Eloquent can &quot;eager load&quot; relationships at the time you query the parent model. Eager loading alleviates the N + 1 query problem. To illustrate the N + 1 query problem, consider a &lt;code&gt;Book&lt;/code&gt; model that is related to &lt;code&gt;Author&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b323ee3069c4b6808ea86369838a7ae662f6bb46" translate="yes" xml:space="preserve">
          <source>When accessing the records for a model, you may wish to limit your results based on the absence of a relationship. For example, imagine you want to retrieve all blog posts that &lt;strong&gt;don't&lt;/strong&gt; have any comments. To do so, you may pass the name of the relationship to the &lt;code&gt;doesntHave&lt;/code&gt; and &lt;code&gt;orDoesntHave&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c053f435d68621cde60c6767a2dccee97f31915" translate="yes" xml:space="preserve">
          <source>When accessing the records for a model, you may wish to limit your results based on the existence of a relationship. For example, imagine you want to retrieve all blog posts that have at least one comment. To do so, you may pass the name of the relationship to the &lt;code&gt;has&lt;/code&gt; and &lt;code&gt;orHas&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fbe56b17580829f6ed4e37be9ced4b0fd9c8fd" translate="yes" xml:space="preserve">
          <source>When all of Laravel's services are neatly defined within simple interfaces, it is very easy to determine the functionality offered by a given service. &lt;strong&gt;The contracts serve as succinct documentation to the framework's features.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb8366001d90bc865426f48a5271e4ae0523cd6" translate="yes" xml:space="preserve">
          <source>When an event is broadcast, all of its &lt;code&gt;public&lt;/code&gt; properties are automatically serialized and broadcast as the event's payload, allowing you to access any of its public data from your JavaScript application. So, for example, if your event has a single public &lt;code&gt;$user&lt;/code&gt; property that contains an Eloquent model, the event's broadcast payload would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969808d80333b9dba3eb634c42582d4394dc25f4" translate="yes" xml:space="preserve">
          <source>When an exception is uncaught and the &lt;code&gt;APP_DEBUG&lt;/code&gt; environment variable is &lt;code&gt;true&lt;/code&gt;, the debug page will show all environment variables and their contents. In some cases you may want to obscure certain variables. You may do this by updating the &lt;code&gt;debug_blacklist&lt;/code&gt; option in your &lt;code&gt;config/app.php&lt;/code&gt; configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c60a9c7919beaa0268ba1595d1baa54eb25e8c3" translate="yes" xml:space="preserve">
          <source>When assigning middleware, you may also pass the fully qualified class name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c1ed07264972afba59ae985f0771dd7af8def5" translate="yes" xml:space="preserve">
          <source>When attaching a relationship to a model, you may also pass an array of additional data to be inserted into the intermediate table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b662eeb5711cd71c5942a26509a1ff97f04732" translate="yes" xml:space="preserve">
          <source>When attaching files to a message, you may also specify the display name and / or MIME type by passing an &lt;code&gt;array&lt;/code&gt; as the second argument to the &lt;code&gt;attach&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1510a7793661573c67e22803651201b30d0eb3be" translate="yes" xml:space="preserve">
          <source>When attaching the &lt;code&gt;auth&lt;/code&gt; middleware to a route, you may also specify which guard should be used to authenticate the user. The guard specified should correspond to one of the keys in the &lt;code&gt;guards&lt;/code&gt; array of your &lt;code&gt;auth.php&lt;/code&gt; configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df2b7303c72f1b951c8a60f4f94155afd6b0ca9" translate="yes" xml:space="preserve">
          <source>When available, Mix will automatically display OS notifications for each bundle. This will give you instant feedback, as to whether the compilation was successful or not. However, there may be instances when you'd prefer to disable these notifications. One such example might be triggering Mix on your production server. Notifications may be deactivated, via the &lt;code&gt;disableNotifications&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636db3c2aaed2d253bb2842f4a4fc4e26cfe414d" translate="yes" xml:space="preserve">
          <source>When building JSON APIs, you will often need to convert your models and relationships to arrays or JSON. Eloquent includes convenient methods for making these conversions, as well as controlling which attributes are included in your serializations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb85b7adab979c027e20c432bc822368c3c1ed2" translate="yes" xml:space="preserve">
          <source>When building JavaScript driven applications, it is convenient to have your JavaScript HTTP library automatically attach the CSRF token to every outgoing request. By default, the &lt;code&gt;resources/js/bootstrap.js&lt;/code&gt; file registers the value of the &lt;code&gt;csrf-token&lt;/code&gt; meta tag with the Axios HTTP library. If you are not using this library, you will need to manually configure this behavior for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a0cff7b2a84dfe7bdec52e1d3fab79e37be94a" translate="yes" xml:space="preserve">
          <source>When building a third-party package that interacts with Laravel, it's better to inject &lt;a href=&quot;contracts&quot;&gt;Laravel contracts&lt;/a&gt; instead of using facades. Since packages are built outside of Laravel itself, you will not have access to Laravel's facade testing helpers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7378e497110554a6b1844f41f18a6eec883e8c4" translate="yes" xml:space="preserve">
          <source>When building an API, it can be extremely useful to be able to consume your own API from your JavaScript application. This approach to API development allows your own application to consume the same API that you are sharing with the world. The same API may be consumed by your web application, mobile applications, third-party applications, and any SDKs that you may publish on various package managers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be3eacbbca4b74796539528c666baec5cc7d86c" translate="yes" xml:space="preserve">
          <source>When building an API, you may need a transformation layer that sits between your Eloquent models and the JSON responses that are actually returned to your application's users. Laravel's resource classes allow you to expressively and easily transform your models and model collections into JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6607885304fb61d14c604ddeb24934795e6cd0a" translate="yes" xml:space="preserve">
          <source>When building an application that utilizes event broadcasting, you may substitute the &lt;code&gt;event&lt;/code&gt; function with the &lt;code&gt;broadcast&lt;/code&gt; function. Like the &lt;code&gt;event&lt;/code&gt; function, the &lt;code&gt;broadcast&lt;/code&gt; function dispatches the event to your server-side listeners:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b9c4684696d6586f0197e97981726f66bb33b5" translate="yes" xml:space="preserve">
          <source>When building the database schema for the &lt;code&gt;App\User&lt;/code&gt; model, make sure the password column is at least 60 characters in length. Maintaining the default string column length of 255 characters would be a good choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ad7c629a170f1e3a5c02f3772396de4a4513de" translate="yes" xml:space="preserve">
          <source>When calling routes that are protected by Passport, your application's API consumers should specify their access token as a &lt;code&gt;Bearer&lt;/code&gt; token in the &lt;code&gt;Authorization&lt;/code&gt; header of their request. For example, when using the Guzzle HTTP library:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb37fc3e51eccf912c60dabe31580d5db666d650" translate="yes" xml:space="preserve">
          <source>When calling the &lt;code&gt;paginate&lt;/code&gt; method, you will receive an instance of &lt;code&gt;Illuminate\Pagination\LengthAwarePaginator&lt;/code&gt;. When calling the &lt;code&gt;simplePaginate&lt;/code&gt; method, you will receive an instance of &lt;code&gt;Illuminate\Pagination\Paginator&lt;/code&gt;. These objects provide several methods that describe the result set. In addition to these helpers methods, the paginator instances are iterators and may be looped as an array. So, once you have retrieved the results, you may display the results and render the page links using &lt;a href=&quot;blade&quot;&gt;Blade&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba0dc201c3755c53f3cf2c114d2d45911248180" translate="yes" xml:space="preserve">
          <source>When calling the &lt;code&gt;terminate&lt;/code&gt; method on your middleware, Laravel will resolve a fresh instance of the middleware from the &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt;. If you would like to use the same middleware instance when the &lt;code&gt;handle&lt;/code&gt; and &lt;code&gt;terminate&lt;/code&gt; methods are called, register the middleware with the container using the container's &lt;code&gt;singleton&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f297356b226ef75b0e7ea8079e6c0e23182df35" translate="yes" xml:space="preserve">
          <source>When calling this method, the &lt;code&gt;user&lt;/code&gt; arguments may be passed in order to the command line. For example, the following command will set the value of &lt;code&gt;user&lt;/code&gt; to &lt;code&gt;['foo', 'bar']&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6652aed5cd44d989a49ea31c8110db618dbe29" translate="yes" xml:space="preserve">
          <source>When copying a directory, the &lt;code&gt;copy&lt;/code&gt; method will flatten the directory's structure. To maintain the directory's original structure, you should use the &lt;code&gt;copyDirectory&lt;/code&gt; method instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2667b25c72d01d0e8833759f9e7eaacaf7a1626c" translate="yes" xml:space="preserve">
          <source>When creating a custom validation rule, you may sometimes need to define custom place-holder replacements for error messages. You may do so by creating a custom Validator as described above then making a call to the &lt;code&gt;replacer&lt;/code&gt; method on the &lt;code&gt;Validator&lt;/code&gt; facade. You may do this within the &lt;code&gt;boot&lt;/code&gt; method of a &lt;a href=&quot;providers&quot;&gt;service provider&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70de08feb757b5533e6ef8fb54644f5fb74a762" translate="yes" xml:space="preserve">
          <source>When creating an Echo instance that uses the &lt;code&gt;pusher&lt;/code&gt; connector, you may also specify a &lt;code&gt;cluster&lt;/code&gt; as well as whether the connection should be encrypted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1683526f8b6bad10b61652ae2df835962171ee2e" translate="yes" xml:space="preserve">
          <source>When creating files using the &lt;code&gt;fake&lt;/code&gt; method, you may specify the width, height, and size of the image in order to better test your validation rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518235eb7ee927b1366faedbaa7565832ec969ce" translate="yes" xml:space="preserve">
          <source>When customizing Homestead, Ubuntu may ask you if you would like to keep a package's original configuration or overwrite it with a new configuration file. To avoid this, you should use the following command when installing packages to avoid overwriting any configuration previously written by Homestead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea89923970ce3f554740212e339e023bb926040b" translate="yes" xml:space="preserve">
          <source>When dealing with nested arrays or objects, you may specify the key used to determine uniqueness:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9dab00d5c672e6fa72dd329131c98099d23d99d" translate="yes" xml:space="preserve">
          <source>When declaring a resource route, you may specify a subset of actions the controller should handle instead of the full set of default actions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6c69d8fed783cacda4127746365d2a2e451cce" translate="yes" xml:space="preserve">
          <source>When declaring resource routes that will be consumed by APIs, you will commonly want to exclude routes that present HTML templates such as &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;edit&lt;/code&gt;. For convenience, you may use the &lt;code&gt;apiResource&lt;/code&gt; method to automatically exclude these two routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b475c89219d52d249fc059c174753fe77faaf88b" translate="yes" xml:space="preserve">
          <source>When defining a Closure based command, you may use the &lt;code&gt;describe&lt;/code&gt; method to add a description to the command. This description will be displayed when you run the &lt;code&gt;php artisan list&lt;/code&gt; or &lt;code&gt;php artisan help&lt;/code&gt; commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032bac906d489a90c95e8a9209c6eb78ef73404c" translate="yes" xml:space="preserve">
          <source>When defining a child view, use the Blade &lt;code&gt;@extends&lt;/code&gt; directive to specify which layout the child view should &quot;inherit&quot;. Views which extend a Blade layout may inject content into the layout's sections using &lt;code&gt;@section&lt;/code&gt; directives. Remember, as seen in the example above, the contents of these sections will be displayed in the layout using &lt;code&gt;@yield&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493ca91f41aa9fd9d6b54a0ee7ce85fe6e316e51" translate="yes" xml:space="preserve">
          <source>When defining an option that expects an array input, each option value passed to the command should be prefixed with the option name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70da2087238022ca8997c2a2a9b0219c46ccdf11" translate="yes" xml:space="preserve">
          <source>When defining policy methods that will not receive a model instance, such as a &lt;code&gt;create&lt;/code&gt; method, it will not receive a model instance. Instead, you should define the method as only expecting the authenticated user:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49ba9c0bf3574b04acbb6568be9590832dfa438" translate="yes" xml:space="preserve">
          <source>When defining the &lt;code&gt;UserRole&lt;/code&gt; model, we will extend the &lt;code&gt;Pivot&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf72653b8e40816e43dee62856576bb7c94604b" translate="yes" xml:space="preserve">
          <source>When deploying Passport to your production servers for the first time, you will likely need to run the &lt;code&gt;passport:keys&lt;/code&gt; command. This command generates the encryption keys Passport needs in order to generate access token. The generated keys are not typically kept in source control:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2ad0d9cde7eb3b1a3fb631e23c38ecc60e2bc9" translate="yes" xml:space="preserve">
          <source>When deploying to production, make sure that you are optimizing Composer's class autoloader map so Composer can quickly find the proper file to load for a given class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab4c3c9170da76afa526f48ea600d0420dab84e" translate="yes" xml:space="preserve">
          <source>When deploying your application to production, you should make sure that you run the &lt;code&gt;config:cache&lt;/code&gt; Artisan command during your deployment process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b560fcfb364682e703668f064af491a9541439" translate="yes" xml:space="preserve">
          <source>When designing a mailable's template, it is convenient to quickly preview the rendered mailable in your browser like a typical Blade template. For this reason, Laravel allows you to return any mailable directly from a route Closure or controller. When a mailable is returned, it will be rendered and displayed in the browser, allowing you to quickly preview its design without needing to send it to an actual email address:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c099c2d3c0ed83534c5ae0df6449f696583293fb" translate="yes" xml:space="preserve">
          <source>When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to &quot;disable&quot; the actual sending of emails during local development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d066770c417c971ee86970897b32126b29387c57" translate="yes" xml:space="preserve">
          <source>When executing a mass delete statement via Eloquent, the &lt;code&gt;deleting&lt;/code&gt; and &lt;code&gt;deleted&lt;/code&gt; model events will not be fired for the deleted models. This is because the models are never actually retrieved when executing the delete statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbba5dea965ae2dd54f4f5383ed17fd26b796e3" translate="yes" xml:space="preserve">
          <source>When getting started with Laravel, many developers are confused by the lack of a &lt;code&gt;models&lt;/code&gt; directory. However, the lack of such a directory is intentional. We find the word &quot;models&quot; ambiguous since it means many different things to many different people. Some developers refer to an application's &quot;model&quot; as the totality of all of its business logic, while others refer to &quot;models&quot; as classes that interact with a relational database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611d51d36dc67aff091e4f2a7be4bc9ec356b5e6" translate="yes" xml:space="preserve">
          <source>When given an array, the &lt;code&gt;has&lt;/code&gt; method will determine if all of the specified values are present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce11ad0a398efedb0607c3112c42d1b116894b60" translate="yes" xml:space="preserve">
          <source>When hiding relationships, use the relationship's method name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae01e7b52e1d18b232afcf2de3de0f4c1d57311c" translate="yes" xml:space="preserve">
          <source>When in a nested loop, the parent's loop variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a519d5ad3076c7df6ad8c41a3fcaf2c900c8c7" translate="yes" xml:space="preserve">
          <source>When injecting a model ID to a route or controller action, you will often query to retrieve the model that corresponds to that ID. Laravel route model binding provides a convenient way to automatically inject the model instances directly into your routes. For example, instead of injecting a user's ID, you can inject the entire &lt;code&gt;User&lt;/code&gt; model instance that matches the given ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59838b8d4c3d40af66dbfad5a0a5ca84f28599b7" translate="yes" xml:space="preserve">
          <source>When issuing a mass update via Eloquent, the &lt;code&gt;saved&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt; model events will not be fired for the updated models. This is because the models are never actually retrieved when issuing a mass update.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badd832e930e49cc7f3a838f8f1497107483fe29" translate="yes" xml:space="preserve">
          <source>When jobs are available on the queue, the worker will keep processing jobs with no delay in between them. However, the &lt;code&gt;sleep&lt;/code&gt; option determines how long (in seconds) the worker will &quot;sleep&quot; if there are no new jobs available. While sleeping, the worker will not process any new jobs - the jobs will be processed after the worker wakes up again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce94f10f68e74600dc843e2e60d84b6ce303e24" translate="yes" xml:space="preserve">
          <source>When listing the invoices for the customer, you may use the invoice's helper methods to display the relevant invoice information. For example, you may wish to list every invoice in a table, allowing the user to easily download any of them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630491cd1fb162df1d41d18373cd26e63a591db7" translate="yes" xml:space="preserve">
          <source>When looping, a &lt;code&gt;$loop&lt;/code&gt; variable will be available inside of your loop. This variable provides access to some useful bits of information such as the current loop index and whether this is the first or last iteration through the loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c04573d3d5765e7c8354d81a1f28088357b68c2" translate="yes" xml:space="preserve">
          <source>When looping, you may use the &lt;a href=&quot;#the-loop-variable&quot;&gt;loop variable&lt;/a&gt; to gain valuable information about the loop, such as whether you are in the first or last iteration through the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a87a030b094e3f3c88d7997812b03c6b5877bb" translate="yes" xml:space="preserve">
          <source>When making a path assertion such as &lt;code&gt;$browser-&amp;gt;assertPathIs('/home')&lt;/code&gt;, the assertion can fail if &lt;code&gt;window.location.pathname&lt;/code&gt; is being updated asynchronously. You may use the &lt;code&gt;waitForLocation&lt;/code&gt; method to wait for the location to be a given value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112e6bee110402287d445aaaa363d31734163c0c" translate="yes" xml:space="preserve">
          <source>When manually creating a paginator instance, you should manually &quot;slice&quot; the array of results you pass to the paginator. If you're unsure how to do this, check out the &lt;a href=&quot;https://secure.php.net/manual/en/function.array-slice.php&quot;&gt;array_slice&lt;/a&gt; PHP function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e0426f2335d7f8f4061e58791752606c1d0ce5" translate="yes" xml:space="preserve">
          <source>When passing information in this manner, the data should be an array with key / value pairs. Inside your view, you can then access each value using its corresponding key, such as &lt;code&gt;&amp;lt;?php echo $key; ?&amp;gt;&lt;/code&gt;. As an alternative to passing a complete array of data to the &lt;code&gt;view&lt;/code&gt; helper function, you may use the &lt;code&gt;with&lt;/code&gt; method to add individual pieces of data to the view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f7f5f784ae24b730ca163e333bc620653b7876" translate="yes" xml:space="preserve">
          <source>When receiving authorization requests, Passport will automatically display a template to the user allowing them to approve or deny the authorization request. If they approve the request, they will be redirected back to the &lt;code&gt;redirect_uri&lt;/code&gt; that was specified by the consuming application. The &lt;code&gt;redirect_uri&lt;/code&gt; must match the &lt;code&gt;redirect&lt;/code&gt; URL that was specified when the client was created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2832860d0939db625b735827d5fd2e980923b294" translate="yes" xml:space="preserve">
          <source>When referencing the Laravel framework or its components from your application or package, you should always use a version constraint such as &lt;code&gt;5.7.*&lt;/code&gt;, since major releases of Laravel do include breaking changes. However, we strive to always ensure you may update to a new major release in one day or less.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67740bd53dd394d2ca478a0a40cbbcb6f6dd2970" translate="yes" xml:space="preserve">
          <source>When registering routes for single action controllers, you do not need to specify a method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85796647e4fa4a49763539cbd680e854a8f5d50d" translate="yes" xml:space="preserve">
          <source>When removing a &lt;code&gt;belongsTo&lt;/code&gt; relationship, you may use the &lt;code&gt;dissociate&lt;/code&gt; method. This method will set the relationship's foreign key to &lt;code&gt;null&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bf667a1788129a6fa64adeb77396163dd8f8f7" translate="yes" xml:space="preserve">
          <source>When requesting an access token using the authorization code grant, consumers should specify their desired scopes as the &lt;code&gt;scope&lt;/code&gt; query string parameter. The &lt;code&gt;scope&lt;/code&gt; parameter should be a space-delimited list of scopes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f34f7552a82bf023f8adb374ea206e28d2b9b04" translate="yes" xml:space="preserve">
          <source>When returning additional meta data from your resources, you never have to worry about accidentally overriding the &lt;code&gt;links&lt;/code&gt; or &lt;code&gt;meta&lt;/code&gt; keys that are automatically added by Laravel when returning paginated responses. Any additional &lt;code&gt;links&lt;/code&gt; you define will be merged with the links provided by the paginator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235950e59c45df6dbd55d8c7429704a2775b8a87" translate="yes" xml:space="preserve">
          <source>When returning paginated collections in a resource response, Laravel will wrap your resource data in a &lt;code&gt;data&lt;/code&gt; key even if the &lt;code&gt;withoutWrapping&lt;/code&gt; method has been called. This is because paginated responses always contain &lt;code&gt;meta&lt;/code&gt; and &lt;code&gt;links&lt;/code&gt; keys with information about the paginator's state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55aef540220ab8c145c79470cc7804f48f7e641b" translate="yes" xml:space="preserve">
          <source>When running tests via &lt;code&gt;phpunit&lt;/code&gt;, Laravel will automatically set the configuration environment to &lt;code&gt;testing&lt;/code&gt; because of the environment variables defined in the &lt;code&gt;phpunit.xml&lt;/code&gt; file. Laravel also automatically configures the session and cache to the &lt;code&gt;array&lt;/code&gt; driver while testing, meaning no session or cache data will be persisted while testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3642a6010302d9a2d8571729ccc47dd22312b0f6" translate="yes" xml:space="preserve">
          <source>When running tests, Dusk will back-up your &lt;code&gt;.env&lt;/code&gt; file and rename your Dusk environment to &lt;code&gt;.env&lt;/code&gt;. Once the tests have completed, your &lt;code&gt;.env&lt;/code&gt; file will be restored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e548e334c81e5793d6808a41993a74d99fa7f376" translate="yes" xml:space="preserve">
          <source>When running your applications behind a load balancer that terminates TLS / SSL certificates, you may notice your application sometimes does not generate HTTPS links. Typically this is because your application is being forwarded traffic from your load balancer on port 80 and does not know it should generate secure links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c1f1f03f6870f116f900338c453c7b441c7d2f" translate="yes" xml:space="preserve">
          <source>When sending JSON requests to your application, you may access the JSON data via the &lt;code&gt;input&lt;/code&gt; method as long as the &lt;code&gt;Content-Type&lt;/code&gt; header of the request is properly set to &lt;code&gt;application/json&lt;/code&gt;. You may even use &quot;dot&quot; syntax to dig into JSON arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae17b9d6ffa7bc93026e7359a3c906c2bac4b23f" translate="yes" xml:space="preserve">
          <source>When sending mail notifications, be sure to set the &lt;code&gt;name&lt;/code&gt; value in your &lt;code&gt;config/app.php&lt;/code&gt; configuration file. This value will be used in the header and footer of your mail notification messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57bedb41b07e62fe43b1a2fd5924faeb27f2ee0" translate="yes" xml:space="preserve">
          <source>When sending notifications via the &lt;code&gt;mail&lt;/code&gt; channel, the notification system will automatically look for an &lt;code&gt;email&lt;/code&gt; property on your notifiable entity. You may customize which email address is used to deliver the notification by defining a &lt;code&gt;routeNotificationForMail&lt;/code&gt; method on the entity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25492d9feabe4c50f8dd3f0051c456deb51f87bd" translate="yes" xml:space="preserve">
          <source>When sending notifications via the &lt;code&gt;nexmo&lt;/code&gt; channel, the notification system will automatically look for a &lt;code&gt;phone_number&lt;/code&gt; attribute on the notifiable entity. If you would like to customize the phone number the notification is delivered to, define a &lt;code&gt;routeNotificationForNexmo&lt;/code&gt; method on the entity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6c348b0b8a7777e0eaf4112f46152e440a338c" translate="yes" xml:space="preserve">
          <source>When testing Laravel applications, you may wish to &quot;mock&quot; certain aspects of your application so they are not actually executed during a given test. For example, when testing a controller that dispatches an event, you may wish to mock the event listeners so they are not actually executed during the test. This allows you to only test the controller's HTTP response without worrying about the execution of the event listeners, since the event listeners can be tested in their own test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cd3ef6c47c5747bd1a5816f545f1bf53150caa" translate="yes" xml:space="preserve">
          <source>When testing applications that use JavaScript extensively, it often becomes necessary to &quot;wait&quot; for certain elements or data to be available before proceeding with a test. Dusk makes this a cinch. Using a variety of methods, you may wait for elements to be visible on the page or even wait until a given JavaScript expression evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e677ccec4561abdeec928c2288738d1f583e95" translate="yes" xml:space="preserve">
          <source>When testing call to the global &lt;code&gt;cache&lt;/code&gt; function, you may use the &lt;code&gt;Cache::shouldReceive&lt;/code&gt; method just as if you were &lt;a href=&quot;mocking#mocking-facades&quot;&gt;testing a facade&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a879fb5da9e0f8123c074c9f2797e2b8d5418858" translate="yes" xml:space="preserve">
          <source>When testing, it can be helpful to assert that certain events were dispatched without actually triggering their listeners. Laravel's &lt;a href=&quot;mocking#event-fake&quot;&gt;built-in testing helpers&lt;/a&gt; makes it a cinch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0334a3d63f52a743121f1e734015e741d4e1e6" translate="yes" xml:space="preserve">
          <source>When testing, you may need to insert a few records into your database before executing your test. Instead of manually specifying the value of each column when you create this test data, Laravel allows you to define a default set of attributes for each of your &lt;a href=&quot;eloquent&quot;&gt;Eloquent models&lt;/a&gt; using model factories. To get started, take a look at the &lt;code&gt;database/factories/UserFactory.php&lt;/code&gt; file in your application. Out of the box, this file contains one factory definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970d26f19b3db6121d4d650d9fa03c5f92a78c3f" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;auth&lt;/code&gt; middleware detects an unauthorized user, it will redirect the user to the &lt;code&gt;login&lt;/code&gt;&lt;a href=&quot;routing#named-routes&quot;&gt;named route&lt;/a&gt;. You may modify this behavior by updating the &lt;code&gt;redirectTo&lt;/code&gt; function in your &lt;code&gt;app/Http/Middleware/Authenticate.php&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97e5983ec21aef682e4dee19437164ddbb5135f" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;logoutOtherDevices&lt;/code&gt; method is invoked, the user's other sessions will be invalidated entirely, meaning they will be &quot;logged out&quot; of all guards they were previously authenticated by.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a150d50b68b5dd86a664d159484fd6e0ae8bbc9" translate="yes" xml:space="preserve">
          <source>When the Redis broadcaster publishes an event, it will be published on the event's specified channel names and the payload will be a JSON encoded string containing the event name, a &lt;code&gt;data&lt;/code&gt; payload, and the user that generated the event's socket ID (if applicable).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686e4a6bf4809ba17038302a4daa525c2d2af0a2" translate="yes" xml:space="preserve">
          <source>When the application should next be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344323d682cb8cc0c9f899bf1982545dc353be11" translate="yes" xml:space="preserve">
          <source>When the application was put in maintenance mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488b9060c48efe2f9f3131028816e44f046dc38c" translate="yes" xml:space="preserve">
          <source>When the event listener is resolved, the service container will read the type-hints on the constructor of the class, and inject the appropriate value. To learn more about registering things in the service container, check out &lt;a href=&quot;container&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8b6e745ba2d80daa8f5ba25b868f7786122b11" translate="yes" xml:space="preserve">
          <source>When the real-time facade is used, the publisher implementation will be resolved out of the service container using the portion of the interface or class name that appears after the &lt;code&gt;Facades&lt;/code&gt; prefix. When testing, we can use Laravel's built-in facade testing helpers to mock this method call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14f8f84d1785d45a0514e55bfe9ed7ad825bb64" translate="yes" xml:space="preserve">
          <source>When this configuration option is &lt;code&gt;true&lt;/code&gt;, Scout will not remove soft deleted models from the search index. Instead, it will set a hidden &lt;code&gt;__soft_deleted&lt;/code&gt; attribute on the indexed record. Then, you may use the &lt;code&gt;withTrashed&lt;/code&gt; or &lt;code&gt;onlyTrashed&lt;/code&gt; methods to retrieve the soft deleted records when searching:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b041f976ae9e44b805b8454282f50cacb752aaa" translate="yes" xml:space="preserve">
          <source>When updating a &lt;code&gt;belongsTo&lt;/code&gt; relationship, you may use the &lt;code&gt;associate&lt;/code&gt; method. This method will set the foreign key on the child model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1913d09c3c12a86264959aca973242f378ad9afe" translate="yes" xml:space="preserve">
          <source>When updating a JSON column, you should use &lt;code&gt;-&amp;gt;&lt;/code&gt; syntax to access the appropriate key in the JSON object. This operation is only supported on MySQL 5.7+:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14fa222a11fc35bdbdf128483fafed140d93574" translate="yes" xml:space="preserve">
          <source>When updating or deleting records inside the chunk callback, any changes to the primary key or foreign keys could affect the chunk query. This could potentially result in records not being included in the chunked results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de0de645ff2c56e811a930e72310aeb6eeeb2a2" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://pusher.com&quot;&gt;Pusher&lt;/a&gt;, you must enable the &quot;Client Events&quot; option in the &quot;App Settings&quot; section of your &lt;a href=&quot;https://dashboard.pusher.com/&quot;&gt;application dashboard&lt;/a&gt; in order to send client events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6522a2d06c3352beb6a40bc917412e81cdcfced1" translate="yes" xml:space="preserve">
          <source>When using NFS, you should consider installing the &lt;a href=&quot;https://github.com/gael-ian/vagrant-bindfs&quot;&gt;vagrant-bindfs&lt;/a&gt; plug-in. This plug-in will maintain the correct user / group permissions for files and directories within the Homestead box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1484c73f3c1d4c1a3104cb05fbbec4cf0011594f" translate="yes" xml:space="preserve">
          <source>When using PostgreSQL the &lt;code&gt;insertGetId&lt;/code&gt; method expects the auto-incrementing column to be named &lt;code&gt;id&lt;/code&gt;. If you would like to retrieve the ID from a different &quot;sequence&quot;, you may pass the column name as the second parameter to the &lt;code&gt;insertGetId&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd74beac11303272bc7f7e8bba0864ea85df693" translate="yes" xml:space="preserve">
          <source>When using Pusher and &lt;a href=&quot;#installing-laravel-echo&quot;&gt;Laravel Echo&lt;/a&gt;, you should specify &lt;code&gt;pusher&lt;/code&gt; as your desired broadcaster when instantiating the Echo instance in your &lt;code&gt;resources/js/bootstrap.js&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b05bd9b613ec493e02e30023e6d99dd88d2683" translate="yes" xml:space="preserve">
          <source>When using Stripe, the &lt;code&gt;charge&lt;/code&gt; method accepts the amount you would like to charge in the &lt;strong&gt;lowest denominator of the currency used by your application&lt;/strong&gt;. However, when using Braintree, you should pass the full dollar amount to the &lt;code&gt;charge&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2f1124ea2f284bd890f6886a27ff0c96b5bade" translate="yes" xml:space="preserve">
          <source>When using any tool in the &quot;real world&quot;, you feel more confident if you understand how that tool works. Application development is no different. When you understand how your development tools function, you feel more comfortable and confident using them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d048fec3b9053ff80ecb7fe533eab762daa3a3" translate="yes" xml:space="preserve">
          <source>When using chained &lt;code&gt;when&lt;/code&gt; methods, the scheduled command will only execute if all &lt;code&gt;when&lt;/code&gt; conditions return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e81bf67420b6c95c99b248363594ecca214fc72" translate="yes" xml:space="preserve">
          <source>When using dynamic properties, Laravel will first look for the parameter's value in the request payload. If it is not present, Laravel will search for the field in the route parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aac47c28302ef25207a2f8c26a0a14076896fb9" translate="yes" xml:space="preserve">
          <source>When using loops you may also end the loop or skip the current iteration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c0b7d7245475edf68836aeeb8ec57c828c16ba" translate="yes" xml:space="preserve">
          <source>When using multiple connections, you may access each connection via the &lt;code&gt;connection&lt;/code&gt; method on the &lt;code&gt;DB&lt;/code&gt; facade. The &lt;code&gt;name&lt;/code&gt; passed to the &lt;code&gt;connection&lt;/code&gt; method should correspond to one of the connections listed in your &lt;code&gt;config/database.php&lt;/code&gt; configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fce4aab719e44f7672a30acf3d3e6e45be4face" translate="yes" xml:space="preserve">
          <source>When using rate limiting, the number of attempts your job will need to run successfully can be hard to determine. Therefore, it is useful to combine rate limiting with &lt;a href=&quot;#time-based-attempts&quot;&gt;time based attempts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060017671d28b92f1de8c33e481a36133f145e7d" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;database&lt;/code&gt; cache driver, you will need to setup a table to contain the cache items. You'll find an example &lt;code&gt;Schema&lt;/code&gt; declaration for the table below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1369a5d7b887edd8c0089a9246dd4e1584078b" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;database&lt;/code&gt; session driver, you will need to create a table to contain the session items. Below is an example &lt;code&gt;Schema&lt;/code&gt; declaration for the table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db432e3db28bc364782a402cb132e6e05220834b" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;date&lt;/code&gt; or &lt;code&gt;datetime&lt;/code&gt; cast type, you may specify the date's format. This format will be used when the &lt;a href=&quot;eloquent-serialization&quot;&gt;model is serialized to an array or JSON&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975207209fb503f35b85c7445edb8e37482b448e" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;local&lt;/code&gt; driver, all file operations are relative to the &lt;code&gt;root&lt;/code&gt; directory defined in your configuration file. By default, this value is set to the &lt;code&gt;storage/app&lt;/code&gt; directory. Therefore, the following method would store a file in &lt;code&gt;storage/app/file.txt&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5149325692771bf45eac67e1516dc3046e2ce5" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;monolog&lt;/code&gt; driver, the &lt;code&gt;handler&lt;/code&gt; configuration option is used to specify which handler will be instantiated. Optionally, any constructor parameters the handler needs may be specified using the &lt;code&gt;handler_with&lt;/code&gt; configuration option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5baeb3a4ec8d37aa04f4500b2a756a17f5b4d5b8" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;monolog&lt;/code&gt; driver, the Monolog &lt;code&gt;LineFormatter&lt;/code&gt; will be used as the default formatter. However, you may customize the type of formatter passed to the handler using the &lt;code&gt;formatter&lt;/code&gt; and &lt;code&gt;formatter_with&lt;/code&gt; configuration options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088bca3fd2a3772ad5312bcbed3957b8f21e70f5" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;with&lt;/code&gt; method, be careful not to pass any reserved keywords such as &lt;code&gt;state&lt;/code&gt; or &lt;code&gt;response_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035bf286ac2fafb2cf3e7acbebec61e5f5df3614" translate="yes" xml:space="preserve">
          <source>When using the Algolia driver, you should configure your Algolia &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;secret&lt;/code&gt; credentials in your &lt;code&gt;config/scout.php&lt;/code&gt; configuration file. Once your credentials have been configured, you will also need to install the Algolia PHP SDK via the Composer package manager:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e151ae4c86e4a30e0b76b511e1aab919bbaff7b" translate="yes" xml:space="preserve">
          <source>When using the Redis queue, you may use the &lt;code&gt;block_for&lt;/code&gt; configuration option to specify how long the driver should wait for a job to become available before iterating through the worker loop and re-polling the Redis database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e042e11be5e4262a14b7850799d15c3fe08b23bf" translate="yes" xml:space="preserve">
          <source>When using the password grant, you may wish to authorize the token for all of the scopes supported by your application. You can do this by requesting the &lt;code&gt;*&lt;/code&gt; scope. If you request the &lt;code&gt;*&lt;/code&gt; scope, the &lt;code&gt;can&lt;/code&gt; method on the token instance will always return &lt;code&gt;true&lt;/code&gt;. This scope may only be assigned to a token that is issued using the &lt;code&gt;password&lt;/code&gt; grant:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c525bae0b6eb5b0556a3b3e66a413496ee3683a" translate="yes" xml:space="preserve">
          <source>When using the scheduler, you only need to add the following Cron entry to your server. If you do not know how to add Cron entries to your server, consider using a service such as &lt;a href=&quot;https://forge.laravel.com&quot;&gt;Laravel Forge&lt;/a&gt; which can manage the Cron entries for you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ce1962e60dfe805da26e6644a89cff5823d7e4" translate="yes" xml:space="preserve">
          <source>When using this feature, you should always include the &lt;code&gt;id&lt;/code&gt; column in the list of columns you wish to retrieve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6c827a9584805185a2ecb1010e308e855cdeeb" translate="yes" xml:space="preserve">
          <source>When using this method of authentication, the default Laravel JavaScript scaffolding instructs Axios to always send the &lt;code&gt;X-CSRF-TOKEN&lt;/code&gt; and &lt;code&gt;X-Requested-With&lt;/code&gt; headers. However, you should be sure to include your CSRF token in a &lt;a href=&quot;csrf#csrf-x-csrf-token&quot;&gt;HTML meta tag&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1884f13aa2df9bfb73e4a9d59650f01cb94587dd" translate="yes" xml:space="preserve">
          <source>When working with a many-to-many relationship, the &lt;code&gt;save&lt;/code&gt; method accepts an array of additional intermediate table attributes as its second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8648315aa7bbb121adb19a0757243a88b48a69e" translate="yes" xml:space="preserve">
          <source>When working with arrays, the field under validation must not have any duplicate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6799025f3bf5fb8864a4b2cd3e82c390e9886b68" translate="yes" xml:space="preserve">
          <source>When working with forms that contain array inputs, use &quot;dot&quot; notation to access the arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a85f5a0dc2be400e445988ef760d66c17d0a778" translate="yes" xml:space="preserve">
          <source>When writing Blade templates, you may wish to display a portion of the page only if the user is authorized to perform a given action. For example, you may wish to show an update form for a blog post only if the user can actually update the post. In this situation, you may use the &lt;code&gt;@can&lt;/code&gt; and &lt;code&gt;@cannot&lt;/code&gt; family of directives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa36c20cce0d0c6487d4249a4bc2ef3da13f812" translate="yes" xml:space="preserve">
          <source>When writing a Laravel application, it generally does not matter if you use contracts or facades since both provide essentially equal levels of testability. However, when writing packages, your package will not typically have access to all of Laravel's testing helpers. If you would like to be able to write your package tests as if they existed inside a typical Laravel application, you may use the &lt;a href=&quot;https://github.com/orchestral/testbench&quot;&gt;Orchestral Testbench&lt;/a&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c13554cd7d9b753d166649e0c4ffb885bcbdeed" translate="yes" xml:space="preserve">
          <source>When writing console commands, it is common to gather input from the user through arguments or options. Laravel makes it very convenient to define the input you expect from the user using the &lt;code&gt;signature&lt;/code&gt; property on your commands. The &lt;code&gt;signature&lt;/code&gt; property allows you to define the name, arguments, and options for the command in a single, expressive, route-like syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e67771d3f128dd48744241bc0d69fab76ffe29" translate="yes" xml:space="preserve">
          <source>When you call the &lt;code&gt;redirect&lt;/code&gt; helper with no parameters, an instance of &lt;code&gt;Illuminate\Routing\Redirector&lt;/code&gt; is returned, allowing you to call any method on the &lt;code&gt;Redirector&lt;/code&gt; instance. For example, to generate a &lt;code&gt;RedirectResponse&lt;/code&gt; to a named route, you may use the &lt;code&gt;route&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed75b1e1ffe2c1b7a2f3ac6fa85f1ad5bef06fdb" translate="yes" xml:space="preserve">
          <source>When you initialize a Laravel Echo instance, a socket ID is assigned to the connection. If you are using &lt;a href=&quot;https://vuejs.org&quot;&gt;Vue&lt;/a&gt; and &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;Axios&lt;/a&gt;, the socket ID will automatically be attached to every outgoing request as a &lt;code&gt;X-Socket-ID&lt;/code&gt; header. Then, when you call the &lt;code&gt;toOthers&lt;/code&gt; method, Laravel will extract the socket ID from the header and instruct the broadcaster to not broadcast to any connections with that socket ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6eaf2c8fc8dcff2cb8a2a58bd5e1f2dddf66b75" translate="yes" xml:space="preserve">
          <source>When you retrieve an item from the session, you may also pass a default value as the second argument to the &lt;code&gt;get&lt;/code&gt; method. This default value will be returned if the specified key does not exist in the session. If you pass a &lt;code&gt;Closure&lt;/code&gt; as the default value to the &lt;code&gt;get&lt;/code&gt; method and the requested key does not exist, the &lt;code&gt;Closure&lt;/code&gt; will be executed and its result returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4a95aaa0dd5bd045f4e5de5a25fb047935e714" translate="yes" xml:space="preserve">
          <source>When you start a new Laravel project, error and exception handling is already configured for you. The &lt;code&gt;App\Exceptions\Handler&lt;/code&gt; class is where all exceptions triggered by your application are logged and then rendered back to the user. We'll dive deeper into this class throughout this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da04af1c2a8772ddf7eb3cae2e9ab1b145622d2" translate="yes" xml:space="preserve">
          <source>When you use the &lt;code&gt;loadViewsFrom&lt;/code&gt; method, Laravel actually registers two locations for your views: the application's &lt;code&gt;resources/views/vendor&lt;/code&gt; directory and the directory you specify. So, using the &lt;code&gt;courier&lt;/code&gt; example, Laravel will first check if a custom version of the view has been provided by the developer in &lt;code&gt;resources/views/vendor/courier&lt;/code&gt;. Then, if the view has not been customized, Laravel will search the package view directory you specified in your call to &lt;code&gt;loadViewsFrom&lt;/code&gt;. This makes it easy for package users to customize / override your package's views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc13b4803a1ec87f6cae3d6d25e63ac6354875d" translate="yes" xml:space="preserve">
          <source>When you're ready to deploy your Laravel application to production, there are some important things you can do to make sure your application is running as efficiently as possible. In this document, we'll cover some great starting points for making sure your Laravel application is deployed properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fbbfb19e44d5d9e3f714f99352c688a15ae7eb" translate="yes" xml:space="preserve">
          <source>When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to &quot;disable&quot; your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a &lt;code&gt;MaintenanceModeException&lt;/code&gt; will be thrown with a status code of 503.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c8105c4e435a6b685fd63cb1690cf638601272d" translate="yes" xml:space="preserve">
          <source>When your test requires migrations, like the authentication example above, you should never use the &lt;code&gt;RefreshDatabase&lt;/code&gt; trait. The &lt;code&gt;RefreshDatabase&lt;/code&gt; trait leverages database transactions which will not be applicable across HTTP requests. Instead, use the &lt;code&gt;DatabaseMigrations&lt;/code&gt; trait:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8927b41637f70b1b39424c0db6bb52ea5a4ee207" translate="yes" xml:space="preserve">
          <source>Where Clauses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a28d7d2d0dd2cb9b7907b4877467fce02c6307" translate="yes" xml:space="preserve">
          <source>Where Exists Clauses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a57c97033ad3276ea8ba77176e146c7e9a261f" translate="yes" xml:space="preserve">
          <source>Where Is The Models Directory?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d90aea7516067d74aa6f8aa3ea4345185144d10" translate="yes" xml:space="preserve">
          <source>Whether a middleware runs before or after a request depends on the middleware itself. For example, the following middleware would perform some task &lt;strong&gt;before&lt;/strong&gt; the request is handled by the application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7a25630eb4179adc804fc453752c5d62da540d" translate="yes" xml:space="preserve">
          <source>Whether the content is short.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b83a248e4a6417c2c0d8dff3e585f6dabb687a" translate="yes" xml:space="preserve">
          <source>Whether this is the first iteration through the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70eb7c3912465a5e233f4177b665abf06b0a23f" translate="yes" xml:space="preserve">
          <source>Whether this is the last iteration through the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80db56d223d186d805865ba25df831f6e1804ab7" translate="yes" xml:space="preserve">
          <source>Whether to make the table temporary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f093f639eff40a14afd0f1f43a1aed22b9eaff" translate="yes" xml:space="preserve">
          <source>Whether use write pdo for select.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66476ef8f19664adebfa07a61854b1ed85501074" translate="yes" xml:space="preserve">
          <source>Which Branch?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17255d7a182033fd562457a5d56ad2f20ccb04ea" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;$fillable&lt;/code&gt; serves as a &quot;white list&quot; of attributes that should be mass assignable, you may also choose to use &lt;code&gt;$guarded&lt;/code&gt;. The &lt;code&gt;$guarded&lt;/code&gt; property should contain an array of attributes that you do not want to be mass assignable. All other attributes not in the array will be mass assignable. So, &lt;code&gt;$guarded&lt;/code&gt; functions like a &quot;black list&quot;. Of course, you should use either &lt;code&gt;$fillable&lt;/code&gt; or &lt;code&gt;$guarded&lt;/code&gt; - not both. In the example below, all attributes &lt;strong&gt;except for &lt;code&gt;price&lt;/code&gt;&lt;/strong&gt; will be mass assignable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aed4accf02e625fe1315b3f0ab6be75cbac0add" translate="yes" xml:space="preserve">
          <source>While Blade provides this feature, using it frequently may be a signal that you have too much logic embedded within your template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b94b7745d0960b8631e85fcbe3ace61ee839af3" translate="yes" xml:space="preserve">
          <source>While Laravel does not dictate which JavaScript or CSS pre-processors you use, it does provide a basic starting point using &lt;a href=&quot;https://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; and &lt;a href=&quot;https://vuejs.org&quot;&gt;Vue&lt;/a&gt; that will be helpful for many applications. By default, Laravel uses &lt;a href=&quot;https://www.npmjs.org&quot;&gt;NPM&lt;/a&gt; to install both of these frontend packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef2f7a197f14052fc6560df4ffa3d071341260e" translate="yes" xml:space="preserve">
          <source>While most Eloquent collection methods return a new instance of an Eloquent collection, the &lt;code&gt;pluck&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt;, &lt;code&gt;collapse&lt;/code&gt;, &lt;code&gt;flatten&lt;/code&gt; and &lt;code&gt;flip&lt;/code&gt; methods return a &lt;a href=&quot;collections&quot;&gt;base collection&lt;/a&gt; instance. Likewise, if a &lt;code&gt;map&lt;/code&gt; operation returns a collection that does not contain any Eloquent models, it will be automatically cast to a base collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348c94bc88df6a4ae4554be4717014a2ad4e2291" translate="yes" xml:space="preserve">
          <source>While not strictly required to use Scout, you should strongly consider configuring a &lt;a href=&quot;queues&quot;&gt;queue driver&lt;/a&gt; before using the library. Running a queue worker will allow Scout to queue all operations that sync your model information to your search indexes, providing much better response times for your application's web interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ddd56f9a6e231b28ec09bf06984ec9bbede44d" translate="yes" xml:space="preserve">
          <source>While resources translate a single model into an array, resource collections translate a collection of models into an array. It is not absolutely necessary to define a resource collection class for each one of your model types since all resources provide a &lt;code&gt;collection&lt;/code&gt; method to generate an &quot;ad-hoc&quot; resource collection on the fly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18db8efbc5b2962f19f9abc43ec5664dc4d5ecac" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;input&lt;/code&gt; method retrieves values from entire request payload (including the query string), the &lt;code&gt;query&lt;/code&gt; method will only retrieve values from the query string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3263ee6474bc0189a33e9cf3b3cf7df16488e09" translate="yes" xml:space="preserve">
          <source>While your application is in maintenance mode, no &lt;a href=&quot;queues&quot;&gt;queued jobs&lt;/a&gt; will be handled. The jobs will continue to be handled as normal once the application is out of maintenance mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc8481f8e98f789cfa820faf45077429352efa1" translate="yes" xml:space="preserve">
          <source>While your command is executing, you will obviously need to access the values for the arguments and options accepted by your command. To do so, you may use the &lt;code&gt;argument&lt;/code&gt; and &lt;code&gt;option&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8342c13ed330ab09b6fedcb2b457b5e7e116519" translate="yes" xml:space="preserve">
          <source>WhoopsHandler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7534a5342ff1d72a12f61109f6083d5575204f" translate="yes" xml:space="preserve">
          <source>WhoopsHandler (Foundation\Exceptions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922b394baa31a45941be8c5060c62134e9545195" translate="yes" xml:space="preserve">
          <source>WhoopsHandler::directoriesExceptVendor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6eba6524006ccf60161800e05a6efb5bfaee42a" translate="yes" xml:space="preserve">
          <source>WhoopsHandler::forDebug()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655639dfd77d3df9e19f85700bc94444c3195f0a" translate="yes" xml:space="preserve">
          <source>WhoopsHandler::registerApplicationPaths()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0632e6b2726312f02ee6cbbcd6c27d6acc56d2fa" translate="yes" xml:space="preserve">
          <source>WhoopsHandler::registerBlacklist()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af9375d26e068a95bbeecd00d64c3112a1a7040" translate="yes" xml:space="preserve">
          <source>WhoopsHandler::registerEditor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7533329b81e951b47322623b641f6f462ec5b6b3" translate="yes" xml:space="preserve">
          <source>Wildcard Event Listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc9d20817df4c4c0f23d475a957e54e2ba23dbc" translate="yes" xml:space="preserve">
          <source>Wildcard Subscriptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a162f24e233795006248e6eceb7d0912e33599" translate="yes" xml:space="preserve">
          <source>Windows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cdf2f1377b4f1da070d015c6228f3de75910f6" translate="yes" xml:space="preserve">
          <source>With Credit Card Up Front</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18427497c463b152591bf88ca6911e9e7ea8b083" translate="yes" xml:space="preserve">
          <source>With this addition to your &lt;code&gt;webpack.mix.js&lt;/code&gt; file, Mix will no longer match any &lt;code&gt;url()&lt;/code&gt; or copy assets to your public directory. In other words, the compiled CSS will look just like how you originally typed it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96228eccaf6f329d5c25f92f15be89fec18bc36" translate="yes" xml:space="preserve">
          <source>With this single line of code, you may now take advantage of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea6acffe87e259a90dacff8c8e0282eadd35430" translate="yes" xml:space="preserve">
          <source>WithFaker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ce4c57668fd41b5c29bd07f403151a4a3f7a5e" translate="yes" xml:space="preserve">
          <source>WithFaker (Foundation\Testing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded64d3b2d821c90553044af2e3d008f20ea5f49" translate="yes" xml:space="preserve">
          <source>WithFaker::faker()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aded131891a4294d825381a0bd4c5ae5ab968b74" translate="yes" xml:space="preserve">
          <source>WithFaker::makeFaker()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c304dcbfd22a06c97c6e6f7753d76d681b12cc9" translate="yes" xml:space="preserve">
          <source>WithFaker::setUpFaker()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c1d19901383c95d312198345b6e82b271efe7b" translate="yes" xml:space="preserve">
          <source>Within a mailable class' &lt;code&gt;build&lt;/code&gt; method, you may use the &lt;code&gt;view&lt;/code&gt; method to specify which template should be used when rendering the email's contents. Since each email typically uses a &lt;a href=&quot;blade&quot;&gt;Blade template&lt;/a&gt; to render its contents, you have the full power and convenience of the Blade templating engine when building your email's HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6747d9675ebd9f5e1f14782ecab150a332f9d10e" translate="yes" xml:space="preserve">
          <source>Within a service provider, you always have access to the container via the &lt;code&gt;$this-&amp;gt;app&lt;/code&gt; property. We can register a binding using the &lt;code&gt;bind&lt;/code&gt; method, passing the class or interface name that we wish to register along with a &lt;code&gt;Closure&lt;/code&gt; that returns an instance of the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6167527c55baed6217aa6e69545a373e1bccfc8" translate="yes" xml:space="preserve">
          <source>Within an event listener, you may access the &lt;code&gt;notifiable&lt;/code&gt;, &lt;code&gt;notification&lt;/code&gt;, and &lt;code&gt;channel&lt;/code&gt; properties on the event to learn more about the notification recipient or the notification itself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83283f5c7e6ff3dec1324ea5704c72ae1ac6122" translate="yes" xml:space="preserve">
          <source>Within both of these methods you may use the Laravel schema builder to expressively create and modify tables. To learn about all of the methods available on the &lt;code&gt;Schema&lt;/code&gt; builder, &lt;a href=&quot;#creating-tables&quot;&gt;check out its documentation&lt;/a&gt;. For example, this migration example creates a &lt;code&gt;flights&lt;/code&gt; table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4072e2b4bfe33dad8f8ec117143a2854d1ea7955" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;DatabaseSeeder&lt;/code&gt; class, you may use the &lt;code&gt;call&lt;/code&gt; method to execute additional seed classes. Using the &lt;code&gt;call&lt;/code&gt; method allows you to break up your database seeding into multiple files so that no single seeder class becomes overwhelmingly large. Pass the name of the seeder class you wish to run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cecc6db844791d812b59edd96474959871daac" translate="yes" xml:space="preserve">
          <source>Within the Closure, which serves as the factory definition, you may return the default test values of all attributes on the model. The Closure will receive an instance of the &lt;a href=&quot;https://github.com/fzaninotto/Faker&quot;&gt;Faker&lt;/a&gt; PHP library, which allows you to conveniently generate various kinds of random data for testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac61635a9bf84973d2e9e3970c12af375ccb2e7c" translate="yes" xml:space="preserve">
          <source>Without Credit Card Up Front</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df11ff8ee3b580245718abb3b6d106cd59ce60e" translate="yes" xml:space="preserve">
          <source>WithoutEvents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d0d44ddb1ebfcda0145fab96d0c5174a88f710" translate="yes" xml:space="preserve">
          <source>WithoutEvents (Foundation\Testing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccaa1f30c0e25fabcd822b4c443b5961116622e" translate="yes" xml:space="preserve">
          <source>WithoutEvents::disableEventsForAllTests()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769732825bfc4a79eb8091e0cac27d7dcaa739ce" translate="yes" xml:space="preserve">
          <source>WithoutMiddleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd06907c7b6cca217664a812fb2786b7edc790f" translate="yes" xml:space="preserve">
          <source>WithoutMiddleware (Foundation\Testing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021a29bbd9ad429fc63a65edd0bb35e8d32e9baf" translate="yes" xml:space="preserve">
          <source>WithoutMiddleware::disableMiddlewareForAllTests()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577ac1a18e05636244b642116532cc61a963dfce" translate="yes" xml:space="preserve">
          <source>WordPress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04181bb74c5fdef8d94b6263e1e7a284a73bbc85" translate="yes" xml:space="preserve">
          <source>WorkCommand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ef15da06f32e73ccf4be3d6809a9bec1f38b92" translate="yes" xml:space="preserve">
          <source>WorkCommand (Queue)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46362fe509188835d9ce9043d48e461bf047f3b5" translate="yes" xml:space="preserve">
          <source>WorkCommand::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298ebbff254c1ee2fc419b06adaee27bb4144c9e" translate="yes" xml:space="preserve">
          <source>WorkCommand::downForMaintenance()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf0c668bdaad0bdbcfeeafe4a4ba801728e2445" translate="yes" xml:space="preserve">
          <source>WorkCommand::gatherWorkerOptions()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33c3713edf64c046d6a36600b490cbe0ef1f7cd" translate="yes" xml:space="preserve">
          <source>WorkCommand::getQueue()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a0751588b3717556c774461f8aefcc85cd0c23" translate="yes" xml:space="preserve">
          <source>WorkCommand::handle()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3828bbe3cb6ac718fa53e98ad5d2482c33f7bc6a" translate="yes" xml:space="preserve">
          <source>WorkCommand::listenForEvents()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c2edff43e1fdb66a9c110f41221ecf5f3fd7bc" translate="yes" xml:space="preserve">
          <source>WorkCommand::logFailedJob()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f2c07801194352ae8b7b8762bc23565be90698" translate="yes" xml:space="preserve">
          <source>WorkCommand::runWorker()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98901d85f5462e9ebd8dfc3acfab518d8167e343" translate="yes" xml:space="preserve">
          <source>WorkCommand::writeOutput()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d9d307e77294e702bc9c27a5cde4b6f25d0db7" translate="yes" xml:space="preserve">
          <source>WorkCommand::writeStatus()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99edd8c8e615e373739d2cdd38a8942b8a573113" translate="yes" xml:space="preserve">
          <source>Worker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf6a42651f7fd6af562dd08843ca8ce4b01ad9f" translate="yes" xml:space="preserve">
          <source>Worker (Queue)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bcb7a2b68fd57a2301326bc3b4b95e8afb36f6" translate="yes" xml:space="preserve">
          <source>Worker Sleep Duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff64de4dae5bc0fb5436654c47a1cf900bb139b" translate="yes" xml:space="preserve">
          <source>Worker Timeouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d9228d88ce34e541b41c04d7eafec61de3b27a" translate="yes" xml:space="preserve">
          <source>Worker::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64efbe1f879fe6de38f6f5ff98cb8e6508799de" translate="yes" xml:space="preserve">
          <source>Worker::daemon()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9dc622f25b29538450669439e20c9f46671e111" translate="yes" xml:space="preserve">
          <source>Worker::daemonShouldRun()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ec63272fb0917f8bfd5604bd2e87b7d901d0b9" translate="yes" xml:space="preserve">
          <source>Worker::failJob()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc192a4548818c49c39912e28afcd6cde7f58c0" translate="yes" xml:space="preserve">
          <source>Worker::getManager()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8aed3bb7630eb44bd296d61d0e2704d936cf32" translate="yes" xml:space="preserve">
          <source>Worker::getNextJob()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45596eda2a3230d3bdfab1f0e332d23f4c09471f" translate="yes" xml:space="preserve">
          <source>Worker::getTimestampOfLastQueueRestart()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bce0338afa1797fd1b92b6f94a0629ce23287fa" translate="yes" xml:space="preserve">
          <source>Worker::handleJobException()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e6198369e1bc932e43649d02c7b19df0bf3568" translate="yes" xml:space="preserve">
          <source>Worker::kill()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a6f340bd98c4d07cc9f10c8a2773a639017655" translate="yes" xml:space="preserve">
          <source>Worker::listenForSignals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d99aa597060fa0b6be896f3b6d6379bd30c5e2" translate="yes" xml:space="preserve">
          <source>Worker::markJobAsFailedIfAlreadyExceedsMaxAttempts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2c0e19d26c58eb9cfdbe95a9fa19117162d120" translate="yes" xml:space="preserve">
          <source>Worker::markJobAsFailedIfWillExceedMaxAttempts()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203825337d964c1a6876ae26d8b0d1949097de95" translate="yes" xml:space="preserve">
          <source>Worker::memoryExceeded()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da84bb6e36b2a7c19e3ebd1f2d2b804280e6ce20" translate="yes" xml:space="preserve">
          <source>Worker::pauseWorker()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a6022fac9c0badb17efd944592bd1bc2efd939" translate="yes" xml:space="preserve">
          <source>Worker::process()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b488a1896329b71d42c353a339f3dcc5cbebbde4" translate="yes" xml:space="preserve">
          <source>Worker::queueShouldRestart()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c986ebcbd6ab628b3db803233adf9d292c376f57" translate="yes" xml:space="preserve">
          <source>Worker::raiseAfterJobEvent()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a05c1a44dfc985d0d2ca890a0fdb4457c722e9" translate="yes" xml:space="preserve">
          <source>Worker::raiseBeforeJobEvent()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30d8f42bc0eded2686dd3fd14af354c31144e49" translate="yes" xml:space="preserve">
          <source>Worker::raiseExceptionOccurredJobEvent()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec328af29c5c05c304eeeb5f16e217090e9160a" translate="yes" xml:space="preserve">
          <source>Worker::registerTimeoutHandler()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4384766330a8e4c504fbc17e53a243e1652c596" translate="yes" xml:space="preserve">
          <source>Worker::runJob()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee5afb12002dcffbb896cd5ad9793c560b3f783" translate="yes" xml:space="preserve">
          <source>Worker::runNextJob()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9327d2161f8a5447fd244663a64f805e2265ffa" translate="yes" xml:space="preserve">
          <source>Worker::setCache()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3b251dbdd451886681d7651b8c8c6615e34471" translate="yes" xml:space="preserve">
          <source>Worker::setManager()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fc485336622bb8b40cf831c487f7c10dec57d1" translate="yes" xml:space="preserve">
          <source>Worker::sleep()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf59b3c7f79963eb36411e6c54f57ff6b6b3485" translate="yes" xml:space="preserve">
          <source>Worker::stop()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adab4c7d741a37dd8e1b2d6786df8b1a50cc3b4c" translate="yes" xml:space="preserve">
          <source>Worker::stopIfNecessary()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f3be1ff430d09ebcdc034fbc56244a913dd3ed" translate="yes" xml:space="preserve">
          <source>Worker::stopWorkerIfLostConnection()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d555ccd076730f0427825bd59571fc0a3f589ad" translate="yes" xml:space="preserve">
          <source>Worker::supportsAsyncSignals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9a3a9a92c3e01656e376ab418ab2f5a246d385" translate="yes" xml:space="preserve">
          <source>Worker::timeoutForJob()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c80abf6e395bd6f326cb30a261f19ee445cba02" translate="yes" xml:space="preserve">
          <source>WorkerOptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfafd1f25279872281338c9eccf40cb7cad403e" translate="yes" xml:space="preserve">
          <source>WorkerOptions (Queue)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1efb16cf1aeca0ff90043792de669adb637ade99" translate="yes" xml:space="preserve">
          <source>WorkerOptions::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac47a82aad44739274182f74c57efad5c7d5713" translate="yes" xml:space="preserve">
          <source>WorkerStopping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0423e1ef38f63dd52464fd8a7a94c7f5b212ae5b" translate="yes" xml:space="preserve">
          <source>WorkerStopping (Queue\Events)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a940d258d61387a61b8ec254d7e1688e80b476" translate="yes" xml:space="preserve">
          <source>WorkerStopping::__construct()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8456c21c6493209df61d89e322dc918ac8b2a539" translate="yes" xml:space="preserve">
          <source>Working With Error Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d142bccd8adf534bf7480145dda7522b9a0c9342" translate="yes" xml:space="preserve">
          <source>Working With JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1ee088b004cb73af97ea7bcd33facfcca8e835" translate="yes" xml:space="preserve">
          <source>Working With Stylesheets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15936218ddca3ec28e40e6c1403c7d5cc5de944a" translate="yes" xml:space="preserve">
          <source>Wrap a single string in keyword identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03441c2c7343a8a3a299891bff4677f4a5800b77" translate="yes" xml:space="preserve">
          <source>Wrap a table in keyword identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dd44493dea595d599997207177225e518246ba" translate="yes" xml:space="preserve">
          <source>Wrap a value in keyword identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16cad6c50d6e46a4fe12c1f25bd86d1461422aa" translate="yes" xml:space="preserve">
          <source>Wrap a value that has an alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1e18a66a6497bd8fa74f1f4c8a471b6b80bf4b" translate="yes" xml:space="preserve">
          <source>Wrap an array of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013e70e7846d58900256a01a0214f788a8e6ef15" translate="yes" xml:space="preserve">
          <source>Wrap the attributes of the give JSON path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad636fd60cd875cfe1badf1b17bd1327b47ce24e" translate="yes" xml:space="preserve">
          <source>Wrap the given JSON path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68746472396ce319f482056a4698f2fe686b3ffb" translate="yes" xml:space="preserve">
          <source>Wrap the given JSON selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070d6350ab5f3dbd040c732eed1a98cd5b0c29f7" translate="yes" xml:space="preserve">
          <source>Wrap the given closure such that its dependencies will be injected when executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18c5d79646598bcf3bbc8c2edbeee1212f7dab5" translate="yes" xml:space="preserve">
          <source>Wrap the given data if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542418ffeeead578ea1994bcb74190a881a4ddd2" translate="yes" xml:space="preserve">
          <source>Wrap the given value in a collection if applicable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4540ffe9494fa8fa1ab07e2da6bd54ae43077e2f" translate="yes" xml:space="preserve">
          <source>Wrap the given value segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79ee418058bc1e3b4f079255a7262fcfd035e32" translate="yes" xml:space="preserve">
          <source>Wrapping Nested Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edd74a2037c70071e7c78529974a193ffe4a77f" translate="yes" xml:space="preserve">
          <source>Write a message to the log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b2b03835cc401625d68d5e4df59c5b1eee2cd2" translate="yes" xml:space="preserve">
          <source>Write a new environment file with the given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f81b8c96b886b76b0f5600db7f841f09a8e676f" translate="yes" xml:space="preserve">
          <source>Write a new file using a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90c4eb610d4e8bc61c1e8ebd005384a56ea2fe0" translate="yes" xml:space="preserve">
          <source>Write a note to the conosle's output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28f33fc96753f30eeb77c5eefc80d1b20040811" translate="yes" xml:space="preserve">
          <source>Write a status message to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137a8d880ed7cc4e987a30f0fa7eb195dafb7b73" translate="yes" xml:space="preserve">
          <source>Write a string as comment output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2bafae4e56fd799049c0f35dc7a4cc9756fcac" translate="yes" xml:space="preserve">
          <source>Write a string as error output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd3184bcd9d74196a97e27d7755a1a9b2cc4b40" translate="yes" xml:space="preserve">
          <source>Write a string as information output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2292ad58b50c97c524a37c9019f5c1e6f76ace3f" translate="yes" xml:space="preserve">
          <source>Write a string as question output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097d49fa8dde58080223b337c77865fc82d9429c" translate="yes" xml:space="preserve">
          <source>Write a string as standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55a62ac484c7e3851e66ebfaeefd7ebfb09b239" translate="yes" xml:space="preserve">
          <source>Write a string as warning output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b672205ebdbc2e7bd00a694f7bea3931eae4b666" translate="yes" xml:space="preserve">
          <source>Write a string in an alert box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29496254c8dd488f50b10e25972075ed7587bea3" translate="yes" xml:space="preserve">
          <source>Write the Markdown template for the mailable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bdb2fa1b97c88cb03f3daf3df398c3f39087fd" translate="yes" xml:space="preserve">
          <source>Write the contents of a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9e9692f5a5ab59a003b262b778fb938bfadf9d" translate="yes" xml:space="preserve">
          <source>Write the given manifest array to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3c95680b03fc6cc182e6245d5b63b44507ed1c" translate="yes" xml:space="preserve">
          <source>Write the migration file to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea24875a89bd9d207f8f6eba7689fe83aa4ee4d" translate="yes" xml:space="preserve">
          <source>Write the service manifest file to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28adce8f8a931b861fec76434a91dcc8806839ae" translate="yes" xml:space="preserve">
          <source>Write the status output for the queue worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e845ccbe6ad550b13f6b7b65c2882f3ca15587ba" translate="yes" xml:space="preserve">
          <source>Write the stubs for the Sass and JavaScript files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88c191a1a4440cd6b4f0557214d859eacb7a194" translate="yes" xml:space="preserve">
          <source>Writing CSS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e177ff6d61e7a769b5e1e808bebf52c28e8b79" translate="yes" xml:space="preserve">
          <source>Writing Commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d356e1bcf5c54232db6abceebaa3e10f4016be" translate="yes" xml:space="preserve">
          <source>Writing Event Subscribers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8214d93f1f9bbd38ca94c034d86a1d673cac5ef" translate="yes" xml:space="preserve">
          <source>Writing Factories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54819c3802e654455512b46bedf367a75565be6" translate="yes" xml:space="preserve">
          <source>Writing Gates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f873bcd09394b45da6bd73d09b4283685d3f22" translate="yes" xml:space="preserve">
          <source>Writing Global Scopes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3115c76be1a7856a21f408244275a9e45d5094" translate="yes" xml:space="preserve">
          <source>Writing JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72df461b0c8d9a3f9beb4bcb90ae63cd4e9d665" translate="yes" xml:space="preserve">
          <source>Writing Log Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1d7da75f668d033ffe3a7489e475ed0f68d4ae" translate="yes" xml:space="preserve">
          <source>Writing Mailables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33de6858b4d72e97694c0757d4e180e32eecf63" translate="yes" xml:space="preserve">
          <source>Writing Markdown Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6c464445e64b1fd19fceb3008840a88cbfa756" translate="yes" xml:space="preserve">
          <source>Writing Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0945ee68fe6ae5c959204f11302e20ddb27ccc69" translate="yes" xml:space="preserve">
          <source>Writing Policies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3c62c82fa3872f547dfe5e36f2184ee767f85a" translate="yes" xml:space="preserve">
          <source>Writing Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a936061c6c7d37c0ef114f08eb5be0b939f203" translate="yes" xml:space="preserve">
          <source>Writing Seeders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab42e9fb8fa35615d1a64ffdd8104092ea480efe" translate="yes" xml:space="preserve">
          <source>Writing Service Providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e16a3a295f83a0eec88991be1cae3f283a3f61" translate="yes" xml:space="preserve">
          <source>Writing Tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26fb8aab79835cb23aff91b6cbb712bab956c00" translate="yes" xml:space="preserve">
          <source>Writing The Driver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a00e63a29bb0738dcedfcd69c6da0ad08e9da2" translate="yes" xml:space="preserve">
          <source>Writing The Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387dca313a1f8b64166e874b053ed7d3c1031b4b" translate="yes" xml:space="preserve">
          <source>Writing The Message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e89fe86b2fe1e3fdb55eee67dc40fcc2d9243f4" translate="yes" xml:space="preserve">
          <source>Writing The Validation Logic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6cf0c8730c8f7c884a912cbe4e410abbe76746" translate="yes" xml:space="preserve">
          <source>Writing To Specific Channels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df96033382e820ef882a98a099844d06507e5cd2" translate="yes" xml:space="preserve">
          <source>Writing Vue Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e90ca4ac914e81eaf32a8480f0f11bd08be51c" translate="yes" xml:space="preserve">
          <source>Writing a global scope is simple. Define a class that implements the &lt;code&gt;Illuminate\Database\Eloquent\Scope&lt;/code&gt; interface. This interface requires you to implement one method: &lt;code&gt;apply&lt;/code&gt;. The &lt;code&gt;apply&lt;/code&gt; method may add &lt;code&gt;where&lt;/code&gt; constraints to the query as needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3d214482ed4068cbb58998f97054285742a53d" translate="yes" xml:space="preserve">
          <source>X-CSRF-TOKEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67346b381a711963c8ca8951337e7720f74a756" translate="yes" xml:space="preserve">
          <source>X-CSRF-Token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e6e98f12d823413254fa440c550f1453db0950" translate="yes" xml:space="preserve">
          <source>X-XSRF-TOKEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd49232d6cae13bce81dc84a6debf188168f0c8" translate="yes" xml:space="preserve">
          <source>X-XSRF-Token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3c349cae2b4d22022a24569ddd414df98ae5a4" translate="yes" xml:space="preserve">
          <source>XML PHP Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52dca5298cf2768382134244c4fe437f1553ced" translate="yes" xml:space="preserve">
          <source>YEAR equivalent column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f0ae3cf1b937d52d445c99c9d895cfda75e6bb" translate="yes" xml:space="preserve">
          <source>You are able to use any of the &lt;a href=&quot;queries&quot;&gt;query builder&lt;/a&gt; methods on the relationship, so be sure to explore the query builder documentation to learn about all of the methods that are available to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9e1ca367fa3249b3f3a2db570b8ace59b3a0ce" translate="yes" xml:space="preserve">
          <source>You are free to define other testing environment configuration values as necessary. The &lt;code&gt;testing&lt;/code&gt; environment variables may be configured in the &lt;code&gt;phpunit.xml&lt;/code&gt; file, but make sure to clear your configuration cache using the &lt;code&gt;config:clear&lt;/code&gt; Artisan command before running your tests!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e307be38649e2439bdd7efb7376ff3e8ab25cd" translate="yes" xml:space="preserve">
          <source>You can SSH into your virtual machine by issuing the &lt;code&gt;vagrant ssh&lt;/code&gt; terminal command from your Homestead directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8419d954e7b551d2a0c8608c84cc0e37488779b2" translate="yes" xml:space="preserve">
          <source>You can also filter the results returned by &lt;code&gt;belongsToMany&lt;/code&gt; using the &lt;code&gt;wherePivot&lt;/code&gt; and &lt;code&gt;wherePivotIn&lt;/code&gt; methods when defining the relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de471d293aa7d7bf4aebccc74999e9c7eef3274d" translate="yes" xml:space="preserve">
          <source>You can also pass your own callback to determine how to sort the collection values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad9cd8744e219cef47e8c97d068d6ee6f358278" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;assertDatabaseMissing&lt;/code&gt; helper to assert that data does not exist in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3264d9c0867a44b0ae7cbfbdf08b11c99a940ed5" translate="yes" xml:space="preserve">
          <source>You can define a route to this controller action like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ee2e8dbc898ebce02a857bcd41cdf2610e04c6" translate="yes" xml:space="preserve">
          <source>You can force a script to run locally by specifying the server's IP address as &lt;code&gt;127.0.0.1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48eddda1c82497c3db75f25427ad2bef80517d3" translate="yes" xml:space="preserve">
          <source>You can modify the HTML and plain-text template used by mail notifications by publishing the notification package's resources. After running this command, the mail notification templates will be located in the &lt;code&gt;resources/views/vendor/notifications&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf82dc40ccdf860bb2c10c6d7f912c0c0de965f" translate="yes" xml:space="preserve">
          <source>You can overwrite all existing scopes using the &lt;code&gt;setScopes&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f554ff136b3b6214572828108ea65f22b860f6" translate="yes" xml:space="preserve">
          <source>You can query the table to display the notifications in your application's user interface. But, before you can do that, you will need to create a database table to hold your notifications. You may use the &lt;code&gt;notifications:table&lt;/code&gt; command to generate a migration with the proper table schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415fade708166d245f52e7adbc42f84401a6ed83" translate="yes" xml:space="preserve">
          <source>You can refresh models using the &lt;code&gt;fresh&lt;/code&gt; and &lt;code&gt;refresh&lt;/code&gt; methods. The &lt;code&gt;fresh&lt;/code&gt; method will re-retrieve the model from the database. The existing model instance will not be affected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248791fc58c58c80032e1d1b1b7b58343c419707" translate="yes" xml:space="preserve">
          <source>You can rollback the transaction via the &lt;code&gt;rollBack&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0855b435d8410e58bdcdf35314f169c7b41f7cab" translate="yes" xml:space="preserve">
          <source>You can set global environment variables by adding them to your &lt;code&gt;Homestead.yaml&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cfb67d2cf77aea34c4c3a17fb1ae2c2fda2274" translate="yes" xml:space="preserve">
          <source>You can set the Faker locale by adding a &lt;code&gt;faker_locale&lt;/code&gt; option to your &lt;code&gt;config/app.php&lt;/code&gt; configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532e7ec43437b144a5fb583942291b4d3d025d4c" translate="yes" xml:space="preserve">
          <source>You can set the visibility when setting the file via the &lt;code&gt;put&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5b39ec88ac57c80c947836c83a1098347a1bfc" translate="yes" xml:space="preserve">
          <source>You can update Homestead in two simple steps. First, you should update the Vagrant box using the &lt;code&gt;vagrant box update&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dab14c8f7598d1d88515bec8dafede5db886b06" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;valet link&lt;/code&gt; to serve the same project from multiple (sub)domains. To add a subdomain or another domain to your project run &lt;code&gt;valet link subdomain.app-name&lt;/code&gt; from the project folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2ee86de3372b65961cb6ba6bf03d348bb966c6" translate="yes" xml:space="preserve">
          <source>You can write your own Valet &quot;driver&quot; to serve PHP applications running on another framework or CMS that is not natively supported by Valet. When you install Valet, a &lt;code&gt;~/.config/valet/Drivers&lt;/code&gt; directory is created which contains a &lt;code&gt;SampleValetDriver.php&lt;/code&gt; file. This file contains a sample driver implementation to demonstrate how to write a custom driver. Writing a driver only requires you to implement three methods: &lt;code&gt;serves&lt;/code&gt;, &lt;code&gt;isStaticFile&lt;/code&gt;, and &lt;code&gt;frontControllerPath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71173405a72e3302400e2f7c152c419b79952a7" translate="yes" xml:space="preserve">
          <source>You do not need to choose between exclusively using gates or exclusively using policies when building an application. Most applications will most likely contain a mixture of gates and policies, and that is perfectly fine! Gates are most applicable to actions which are not related to any model or resource, such as viewing an administrator dashboard. In contrast, policies should be used when you wish to authorize an action for a particular model or resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdfbeff38a172e94871d595055ca69234f299f6" translate="yes" xml:space="preserve">
          <source>You have total freedom to determine how your resource's relationships are wrapped. If you would like all resource collections to be wrapped in a &lt;code&gt;data&lt;/code&gt; key, regardless of their nesting, you should define a resource collection class for each resource and return the collection within a &lt;code&gt;data&lt;/code&gt; key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83802d3667d34c2ae9d540dfa773f2072906b57" translate="yes" xml:space="preserve">
          <source>You may access the authenticated user via the &lt;code&gt;Auth&lt;/code&gt; facade:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44510618c7d8c649074cd9eafeaa8649e4963717" translate="yes" xml:space="preserve">
          <source>You may access the options in your tasks via Blade's &quot;echo&quot; syntax. Of course, you may also use &lt;code&gt;if&lt;/code&gt; statements and loops within your tasks. For example, let's verify the presence of the &lt;code&gt;$branch&lt;/code&gt; variable before executing the &lt;code&gt;git pull&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485684ad5f42f9604487215e70c3df2dfb47f076" translate="yes" xml:space="preserve">
          <source>You may access uploaded files from a &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; instance using the &lt;code&gt;file&lt;/code&gt; method or using dynamic properties. The &lt;code&gt;file&lt;/code&gt; method returns an instance of the &lt;code&gt;Illuminate\Http\UploadedFile&lt;/code&gt; class, which extends the PHP &lt;code&gt;SplFileInfo&lt;/code&gt; class and provides a variety of methods for interacting with the file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51193e2787cfa0934ccd634d241d5e0d8f6271a7" translate="yes" xml:space="preserve">
          <source>You may add Bash aliases to your Homestead machine by modifying the &lt;code&gt;aliases&lt;/code&gt; file within your Homestead directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c803a3faed41f7681659cc123ffa5222d241c9" translate="yes" xml:space="preserve">
          <source>You may add additional Nginx &lt;code&gt;fastcgi_param&lt;/code&gt; values to your site via the &lt;code&gt;params&lt;/code&gt; site directive. For example, we'll add a &lt;code&gt;FOO&lt;/code&gt; parameter with a value of &lt;code&gt;BAR&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40a7b1a5b0aa708992ac0eccc0a648287838a6c" translate="yes" xml:space="preserve">
          <source>You may add items to the cache by passing an array of key / value pairs to the function. You should also pass the number of minutes or duration the cached value should be considered valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c223bf50b98d691113161bb8040dabc6dbe7e53d" translate="yes" xml:space="preserve">
          <source>You may add the &quot;counts&quot; for multiple relations as well as add constraints to the queries:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b87f0d83361b5d32ba4ec46c8ac8f3c42e0df1" translate="yes" xml:space="preserve">
          <source>You may also access the raw, underlying PDO instance using the &lt;code&gt;getPdo&lt;/code&gt; method on a connection instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad50e021fcfe02c967e2f6d20f439cb84c8b042" translate="yes" xml:space="preserve">
          <source>You may also access user input using dynamic properties on the &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; instance. For example, if one of your application's forms contains a &lt;code&gt;name&lt;/code&gt; field, you may access the value of the field like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69eef4797c9908579e36f1c9dac5e958914aacfb" translate="yes" xml:space="preserve">
          <source>You may also add &quot;attachments&quot; to Slack messages. Attachments provide richer formatting options than simple text messages. In this example, we will send an error notification about an exception that occurred in an application, including a link to view more details about the exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656188acb7c89fb03ab54440afd59f92a741f733" translate="yes" xml:space="preserve">
          <source>You may also add top-level data when constructing resource instances in your route or controller. The &lt;code&gt;additional&lt;/code&gt; method, which is available on all resources, accepts an array of data that should be added to the resource response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c513b4cc21cc44033ed780b3b29cb24e110e8fd" translate="yes" xml:space="preserve">
          <source>You may also alias the relationship count result, allowing multiple counts on the same relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abc640f76740defc05cd471662ae28fcf2ea34b" translate="yes" xml:space="preserve">
          <source>You may also apply any of your &lt;a href=&quot;#factory-states&quot;&gt;states&lt;/a&gt; to the models. If you would like to apply multiple state transformations to the models, you should specify the name of each state you would like to apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063dca384c8a77fa6950f6897c791fff82d01d79" translate="yes" xml:space="preserve">
          <source>You may also assign multiple middleware to the route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc0672d879baae9858e752670b79e368c03399d" translate="yes" xml:space="preserve">
          <source>You may also attach relationships to models using Closure attributes in your factory definitions. For example, if you would like to create a new &lt;code&gt;User&lt;/code&gt; instance when creating a &lt;code&gt;Post&lt;/code&gt;, you may do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba04010082880577835dbd43702eeeecd8e8e15b" translate="yes" xml:space="preserve">
          <source>You may also bind an existing object instance into the container using the &lt;code&gt;instance&lt;/code&gt; method. The given instance will always be returned on subsequent calls into the container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6507b0530fa531414724f8fd5b6bd8eb30eca5a6" translate="yes" xml:space="preserve">
          <source>You may also call the &lt;code&gt;find&lt;/code&gt; method with an array of primary keys, which will return a collection of the matching records:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29613e4097fb577fdfe07449922e3a630f9308a" translate="yes" xml:space="preserve">
          <source>You may also call the &lt;code&gt;first&lt;/code&gt; method with no arguments to get the first element in the collection. If the collection is empty, &lt;code&gt;null&lt;/code&gt; is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ad45557ee552f4412b695d82675a80e854dc73" translate="yes" xml:space="preserve">
          <source>You may also call the &lt;code&gt;firstWhere&lt;/code&gt; method with an operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3965e728be5f185b0b841a3a54df423c152cf9be" translate="yes" xml:space="preserve">
          <source>You may also call the &lt;code&gt;last&lt;/code&gt; method with no arguments to get the last element in the collection. If the collection is empty, &lt;code&gt;null&lt;/code&gt; is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a415118f2d1459b53db3c35f1be8b80bd12438" translate="yes" xml:space="preserve">
          <source>You may also call the &lt;code&gt;putFile&lt;/code&gt; method on the &lt;code&gt;Storage&lt;/code&gt; facade to perform the same file manipulation as the example above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b330c71be88d71799ea705b4d55a3e0fbd2b24da" translate="yes" xml:space="preserve">
          <source>You may also come across situations where you want to update an existing model or create a new model if none exists. Laravel provides an &lt;code&gt;updateOrCreate&lt;/code&gt; method to do this in one step. Like the &lt;code&gt;firstOrCreate&lt;/code&gt; method, &lt;code&gt;updateOrCreate&lt;/code&gt; persists the model, so there's no need to call &lt;code&gt;save()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6b7805211264241ca4af6fc1be43dcd65475dc" translate="yes" xml:space="preserve">
          <source>You may also convert entire &lt;a href=&quot;eloquent-collections&quot;&gt;collections&lt;/a&gt; of models to arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ab7d8d46231effe00ffbe086acf4e078576314" translate="yes" xml:space="preserve">
          <source>You may also create a Collection of many models or create models of a given type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5f6a86e8d85e79456bc4c471d3e4d82ce77fba" translate="yes" xml:space="preserve">
          <source>You may also create additional factory files for each model for better organization. For example, you could create &lt;code&gt;UserFactory.php&lt;/code&gt; and &lt;code&gt;CommentFactory.php&lt;/code&gt; files within your &lt;code&gt;database/factories&lt;/code&gt; directory. All of the files within the &lt;code&gt;factories&lt;/code&gt; directory will automatically be loaded by Laravel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826b3bba8812a9acb7c5e5c8cdde96cafb5bb18e" translate="yes" xml:space="preserve">
          <source>You may also customize the &quot;guard&quot; that is used to authenticate and register users. To get started, define a &lt;code&gt;guard&lt;/code&gt; method on your &lt;code&gt;LoginController&lt;/code&gt;, &lt;code&gt;RegisterController&lt;/code&gt;, and &lt;code&gt;ResetPasswordController&lt;/code&gt;. The method should return a guard instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59fabe2bc87aa959e6b9c19e348c74c6cfd2922" translate="yes" xml:space="preserve">
          <source>You may also define a &lt;code&gt;retryUntil&lt;/code&gt; method on your queued event listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e950e6690b2d5058efdd5e908749e656e52159" translate="yes" xml:space="preserve">
          <source>You may also define callbacks for &lt;a href=&quot;#factory-states&quot;&gt;factory states&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13c73e0825871ca3da37f97d4f204c58a103acf" translate="yes" xml:space="preserve">
          <source>You may also define multiple Gate abilities at once using the &lt;code&gt;resource&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83a98779b0264b3a868c946519c77b054446ac5" translate="yes" xml:space="preserve">
          <source>You may also define place-holder attributes in pluralization strings. These place-holders may be replaced by passing an array as the third argument to the &lt;code&gt;trans_choice&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd6342744cef0239e18ed20584be19febfd71b3" translate="yes" xml:space="preserve">
          <source>You may also determine if a user has cancelled their subscription, but are still on their &quot;grace period&quot; until the subscription fully expires. For example, if a user cancels a subscription on March 5th that was originally scheduled to expire on March 10th, the user is on their &quot;grace period&quot; until March 10th. Note that the &lt;code&gt;subscribed&lt;/code&gt; method still returns &lt;code&gt;true&lt;/code&gt; during this time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f17732eb8fa5a3c1f3a5a2ddef31ca016fd670" translate="yes" xml:space="preserve">
          <source>You may also generate redirects to &lt;a href=&quot;controllers&quot;&gt;controller actions&lt;/a&gt;. To do so, pass the controller and action name to the &lt;code&gt;action&lt;/code&gt; method. Remember, you do not need to specify the full namespace to the controller since Laravel's &lt;code&gt;RouteServiceProvider&lt;/code&gt; will automatically set the base controller namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac39d3823b41d4b26aff20605f76762638c99728" translate="yes" xml:space="preserve">
          <source>You may also include the condition with the directive declaration in one line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e645e149c0aa1594a440c793f893166b9c2c8b" translate="yes" xml:space="preserve">
          <source>You may also install additional Stylus plug-ins, such as &lt;a href=&quot;https://github.com/jescalan/rupture&quot;&gt;Rupture&lt;/a&gt;. First, install the plug-in in question through NPM (&lt;code&gt;npm install rupture&lt;/code&gt;) and then require it in your call to &lt;code&gt;mix.stylus()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce575fd65734991e3bde7678dac555c3d5f50e9" translate="yes" xml:space="preserve">
          <source>You may also make arguments optional and define default values for arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1b85ab9e91a9122cb3809eafdc21c7a294774d7" translate="yes" xml:space="preserve">
          <source>You may also manually register commands by adding its class name to the &lt;code&gt;$commands&lt;/code&gt; property of your &lt;code&gt;app/Console/Kernel.php&lt;/code&gt; file. When Artisan boots, all the commands listed in this property will be resolved by the &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt; and registered with Artisan:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e386f3ec90fbddd5e04809a715a333fafc4409" translate="yes" xml:space="preserve">
          <source>You may also merge your own package configuration file with the application's published copy. This will allow your users to define only the options they actually want to override in the published copy of the configuration. To merge the configurations, use the &lt;code&gt;mergeConfigFrom&lt;/code&gt; method within your service provider's &lt;code&gt;register&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012eb33564a239f898ef4bdec944263466878d49" translate="yes" xml:space="preserve">
          <source>You may also paginate &lt;a href=&quot;eloquent&quot;&gt;Eloquent&lt;/a&gt; queries. In this example, we will paginate the &lt;code&gt;User&lt;/code&gt; model with &lt;code&gt;15&lt;/code&gt; items per page. As you can see, the syntax is nearly identical to paginating query builder results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7adb16e0ea73253b174decf0ee93d62b320e5f6d" translate="yes" xml:space="preserve">
          <source>You may also pass a callback to the method. The callback should return the value to key the collection by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca9ff8b6598b9b4b7d3cab7355401542fb8f2cc" translate="yes" xml:space="preserve">
          <source>You may also pass a class and method to the &lt;code&gt;extend&lt;/code&gt; method instead of a Closure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868e472609fd382c71896f30ac5d7af65245c452" translate="yes" xml:space="preserve">
          <source>You may also pass a comparison operator to the method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca4771d0bcec1b06ffeaffb65bf8e7caa68fed6" translate="yes" xml:space="preserve">
          <source>You may also pass a fourth argument to the &lt;code&gt;@each&lt;/code&gt; directive. This argument determines the view that will be rendered if the given array is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2c002d685b28e370a00fa1750c67e447b6c652" translate="yes" xml:space="preserve">
          <source>You may also pass a key / value pair to the &lt;code&gt;contains&lt;/code&gt; method, which will determine if the given pair exists in the collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8754cac8d946d37fd31c726b5289cc35174639f1" translate="yes" xml:space="preserve">
          <source>You may also pass a negative integer to take the specified amount of items from the end of the collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc5479050adf1fdd9a2bc7ad2efd6eefedb9333" translate="yes" xml:space="preserve">
          <source>You may also pass a second argument to set the key of the prepended item:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31e182f923ec1720730e2b3f7cc6219b295f948" translate="yes" xml:space="preserve">
          <source>You may also pass a second argument to the &lt;code&gt;rescue&lt;/code&gt; function. This argument will be the &quot;default&quot; value that should be returned if an exception occurs while executing the Closure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8411806ad84560611fc41b782c2c9b22933cdfac" translate="yes" xml:space="preserve">
          <source>You may also pass a third argument to change the string that will be appended to the end:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7b7e496186855f0715b9b31532ea1a89fdddae" translate="yes" xml:space="preserve">
          <source>You may also pass additional intermediate table values with the IDs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf45eacfbda303913da681f61b445354dc4a792" translate="yes" xml:space="preserve">
          <source>You may also pass an array of conditions to the &lt;code&gt;where&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fe5590409c98db2fbd917a07c4fcce14fec407" translate="yes" xml:space="preserve">
          <source>You may also pass an array of values to determine if the given string contains any of the values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0e2da8ee247e40e0701a7c0de2c430f3128013" translate="yes" xml:space="preserve">
          <source>You may also pass any options supported by Vagrant's &lt;a href=&quot;https://www.vagrantup.com/docs/synced-folders/basic_usage.html&quot;&gt;Synced Folders&lt;/a&gt; by listing them under the &lt;code&gt;options&lt;/code&gt; key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031f4f8df3e1c99d3ba6e5056047af265d534b78" translate="yes" xml:space="preserve">
          <source>You may also pass arguments to the &lt;code&gt;environment&lt;/code&gt; method to check if the environment matches a given value. The method will return &lt;code&gt;true&lt;/code&gt; if the environment matches any of the given values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ab3691eaed517caa15cda7ec3c3cf829a7b624" translate="yes" xml:space="preserve">
          <source>You may also pass your own callback to determine item uniqueness:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6fcd93dccd08542f882578e627a6b6b14f2d00" translate="yes" xml:space="preserve">
          <source>You may also provide &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt; options to the &lt;code&gt;down&lt;/code&gt; command. The &lt;code&gt;message&lt;/code&gt; value may be used to display or log a custom message, while the &lt;code&gt;retry&lt;/code&gt; value will be set as the &lt;code&gt;Retry-After&lt;/code&gt; HTTP header's value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615124635cebb5a1c235448dd17226852ab5a619" translate="yes" xml:space="preserve">
          <source>You may also provide the exception's response text and custom response headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f853580acf59b47796245f227633a337988b8c8f" translate="yes" xml:space="preserve">
          <source>You may also reference actions with a &quot;callable&quot; array syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bceae545bedab5f1cdccd3c3fd347eb9808ec15" translate="yes" xml:space="preserve">
          <source>You may also retrieve all of the input data as an &lt;code&gt;array&lt;/code&gt; using the &lt;code&gt;all&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f3eed099ebc207a8ef07dccdf6443edfa21c82" translate="yes" xml:space="preserve">
          <source>You may also retrieve the owner of a polymorphic relation from the polymorphic model by accessing the name of the method that performs the call to &lt;code&gt;morphTo&lt;/code&gt;. In our case, that is the &lt;code&gt;commentable&lt;/code&gt; method on the &lt;code&gt;Comment&lt;/code&gt; model. So, we will access that method as a dynamic property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028863ce611249a9ba46ecd7e5395a2af279b648" translate="yes" xml:space="preserve">
          <source>You may also retrieve the owner of a polymorphic relation from the polymorphic model by accessing the name of the method that performs the call to &lt;code&gt;morphedByMany&lt;/code&gt;. In our case, that is the &lt;code&gt;posts&lt;/code&gt; or &lt;code&gt;videos&lt;/code&gt; methods on the &lt;code&gt;Tag&lt;/code&gt; model. So, you will access those methods as dynamic properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbf73aaf52fc2d9c6af338388d5228abb229fdf" translate="yes" xml:space="preserve">
          <source>You may also seed your database using the &lt;code&gt;migrate:refresh&lt;/code&gt; command, which will also rollback and re-run all of your migrations. This command is useful for completely re-building your database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944ffa6a007798618f1570cf8e7a06cdd689b189" translate="yes" xml:space="preserve">
          <source>You may also set the &lt;code&gt;host&lt;/code&gt; option to a UNIX socket path. If you do this, the &lt;code&gt;port&lt;/code&gt; option should be set to &lt;code&gt;0&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3a657a1b3f9c3178ce299020f7d13cfb5bd73d" translate="yes" xml:space="preserve">
          <source>You may also sort the array by the results of the given Closure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d15535a7a1afd312fd055e441d3e30c142ee51" translate="yes" xml:space="preserve">
          <source>You may also specify a custom key column for the returned Collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f721bade9de905343cef7c3734c96b0e99ebadb" translate="yes" xml:space="preserve">
          <source>You may also specify additional columns to update during the operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff0d0b0a46d1ed6d2a9e6a779ef0a2e6cda11a6" translate="yes" xml:space="preserve">
          <source>You may also specify additional query constraints by customizing the query using the &lt;code&gt;where&lt;/code&gt; method. For example, let's add a constraint that verifies the &lt;code&gt;account_id&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd1fa9c2ae1025a6bfe1c60f0a62dfa983c274d" translate="yes" xml:space="preserve">
          <source>You may also specify an operator and count to further customize the query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36b61ce8bdc698f6ad92e9044637e381dffd1a7" translate="yes" xml:space="preserve">
          <source>You may also specify how you wish the resulting collection to be keyed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb21c9402a1866e54fd195c4beb06693983dccd" translate="yes" xml:space="preserve">
          <source>You may also specify how you wish the resulting list to be keyed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e98f3b45ceb74be2f3d36a9806637d9b842ced" translate="yes" xml:space="preserve">
          <source>You may also specify more advanced join clauses. To get started, pass a &lt;code&gt;Closure&lt;/code&gt; as the second argument into the &lt;code&gt;join&lt;/code&gt; method. The &lt;code&gt;Closure&lt;/code&gt; will receive a &lt;code&gt;JoinClause&lt;/code&gt; object which allows you to specify constraints on the &lt;code&gt;join&lt;/code&gt; clause:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acad84fd59816d1a52ec52b799d04040da29066" translate="yes" xml:space="preserve">
          <source>You may also specify route names for controller actions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7e5a51c77da79cad0422679aff807a9740a7d6" translate="yes" xml:space="preserve">
          <source>You may also specify the connection or queue the Artisan command should be dispatched to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4252a4ea5b916a6cbeb11dc05c3d3ae411aa826a" translate="yes" xml:space="preserve">
          <source>You may also specify the desired action for the &quot;on delete&quot; and &quot;on update&quot; properties of the constraint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c892e92c00057f70a03a688fee9d4af1e577d4" translate="yes" xml:space="preserve">
          <source>You may also specify the number of items to return as an optional second argument. Note that providing this argument will return an array, even if only one item is desired:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f131d0f3765d3d23d8d4d82f35df8036bf03aa" translate="yes" xml:space="preserve">
          <source>You may also specify which guard should be used to authenticate the given user by passing the guard name as the second argument to the &lt;code&gt;actingAs&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed4ace54ff9d4f2c052590dfa90a463eaa41d5f" translate="yes" xml:space="preserve">
          <source>You may also specify which queue connection the worker should utilize. The connection name passed to the &lt;code&gt;work&lt;/code&gt; command should correspond to one of the connections defined in your &lt;code&gt;config/queue.php&lt;/code&gt; configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19f3fa8c5d915a4092ed9adf14edf6b464f8078" translate="yes" xml:space="preserve">
          <source>You may also type-hint the &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; class on a route Closure. The service container will automatically inject the incoming request into the Closure when it is executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8611d28091bdebc648909cd499e9e9a7057ba646" translate="yes" xml:space="preserve">
          <source>You may also use Composer to keep your Envoy installation up to date. Issuing the &lt;code&gt;composer global update&lt;/code&gt; command will update all of your globally installed Composer packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8ce478cf20a696aebf31b9858f1a77baf51dc5" translate="yes" xml:space="preserve">
          <source>You may also use HTTP Basic Authentication without setting a user identifier cookie in the session, which is particularly useful for API authentication. To do so, &lt;a href=&quot;middleware&quot;&gt;define a middleware&lt;/a&gt; that calls the &lt;code&gt;onceBasic&lt;/code&gt; method. If no response is returned by the &lt;code&gt;onceBasic&lt;/code&gt; method, the request may be passed further into the application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e68f9d05d39027a0eb7c47471d6ffe5ecc0181" translate="yes" xml:space="preserve">
          <source>You may also use a mass-update query to mark all of the notifications as read without retrieving them from the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36313a21c1f483b55a70343ebfce71f248c18b9" translate="yes" xml:space="preserve">
          <source>You may also use an image as your logo instead of an emoji:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03112b8bccd3327fc4a2a52ca3222088604d58e8" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, and other &lt;a href=&quot;queries#aggregates&quot;&gt;aggregate methods&lt;/a&gt; provided by the &lt;a href=&quot;queries&quot;&gt;query builder&lt;/a&gt;. These methods return the appropriate scalar value instead of a full model instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c9a7a87ae41fe32f0497345c9b2cf3c1742bab" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;create&lt;/code&gt; method to save a new model in a single line. The inserted model instance will be returned to you from the method. However, before doing so, you will need to specify either a &lt;code&gt;fillable&lt;/code&gt; or &lt;code&gt;guarded&lt;/code&gt; attribute on the model, as all Eloquent models protect against mass-assignment by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ead10c12028171e29bab68b37d5cc28151083c9" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;findOrNew&lt;/code&gt;, &lt;code&gt;firstOrNew&lt;/code&gt;, &lt;code&gt;firstOrCreate&lt;/code&gt; and &lt;code&gt;updateOrCreate&lt;/code&gt; methods to &lt;a href=&quot;eloquent#other-creation-methods&quot;&gt;create and update models on relationships&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77c0c28b171cc456bcfac78665fd0d6bf542b1a" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;flashOnly&lt;/code&gt; and &lt;code&gt;flashExcept&lt;/code&gt; methods to flash a subset of the request data to the session. These methods are useful for keeping sensitive information such as passwords out of the session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca5fbdeb0e825502b9cb29868141d2bb2ce2b13" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;onGenericTrial&lt;/code&gt; method if you wish to know specifically that the user is within their &quot;generic&quot; trial period and has not created an actual subscription yet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59fa021b2dbdf98cd23028213845a313fdb7a3c" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;php artisan cache:table&lt;/code&gt; Artisan command to generate a migration with the proper schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0bb9f753ce09c7fd071b2732e3a4fb881f40ba" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;restore&lt;/code&gt; method in a query to quickly restore multiple models. Again, like other &quot;mass&quot; operations, this will not fire any model events for the models that are restored:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593f11441ebb7aac62827517ebd3becf0a876179" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;searchable&lt;/code&gt; method on an Eloquent query to update a collection of models. If the models do not exist in your search index, they will be created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87da4070a625e519e48f6455bad39dc002c62459" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;simplePaginate&lt;/code&gt; method when paginating Eloquent models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfb32ad235c444f9be739ca75aa369b65473ef5" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;sync&lt;/code&gt; method to construct many-to-many associations. The &lt;code&gt;sync&lt;/code&gt; method accepts an array of IDs to place on the intermediate table. Any IDs that are not in the given array will be removed from the intermediate table. So, after this operation is complete, only the IDs in the given array will exist in the intermediate table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d542335ec86c8c4f0e4c1e0d8d62a1be0a67271" translate="yes" xml:space="preserve">
          <source>You may also use the global &lt;code&gt;session&lt;/code&gt; PHP function to retrieve and store data in the session. When the &lt;code&gt;session&lt;/code&gt; helper is called with a single, string argument, it will return the value of that session key. When the helper is called with an array of key / value pairs, those values will be stored in the session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d569c306bc6c1ab2b3107f582ab6f120bba4a7f8" translate="yes" xml:space="preserve">
          <source>You may also validate each element of an array. For example, to validate that each e-mail in a given array input field is unique, you may do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2eee3a87fcdfc204518bc111be0ffc29e953f6" translate="yes" xml:space="preserve">
          <source>You may also wait for a named route's location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b65956d1d8bacc6ca0d5495d3b0f94ee0dbe3d4" translate="yes" xml:space="preserve">
          <source>You may also wait until the given selector is missing from the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729c4537fe3ccd88b3771796155af9e8faa92e1f" translate="yes" xml:space="preserve">
          <source>You may also want to configure a few additional components of Laravel, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df46bf721b96a7689f533afd170ae4a5e56be2fe" translate="yes" xml:space="preserve">
          <source>You may always pass a paginator instance to the &lt;code&gt;collection&lt;/code&gt; method of a resource or to a custom resource collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d58c8c35a11a8954c71b6c9961b80c3108089f" translate="yes" xml:space="preserve">
          <source>You may append to the query string of pagination links using the &lt;code&gt;appends&lt;/code&gt; method. For example, to append &lt;code&gt;sort=votes&lt;/code&gt; to each pagination link, you should make the following call to &lt;code&gt;appends&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32f89ffb7d0e7afabafd62e09aac722d8559a08" translate="yes" xml:space="preserve">
          <source>You may assert on the state of the Vue component like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50f6f90f99812eaa72282348f64d359918d4294" translate="yes" xml:space="preserve">
          <source>You may assign default values to options by specifying the default value after the option name. If no option value is passed by the user, the default value will be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8e5ac3dbd4c63108ec70c30fa2eafff1ef5574" translate="yes" xml:space="preserve">
          <source>You may assign descriptions to input arguments and options by separating the parameter from the description using a colon. If you need a little extra room to define your command, feel free to spread the definition across multiple lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cc9eb49aad4056ed6cda090a72d07975ef364a" translate="yes" xml:space="preserve">
          <source>You may assign middleware to a subset of controller actions; however, it may indicate your controller is growing too large. Instead, consider breaking your controller into multiple, smaller controllers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b10a544d33d7593d52b84925deaa1160b49d2b" translate="yes" xml:space="preserve">
          <source>You may attach a cookie to an outgoing &lt;code&gt;Illuminate\Http\Response&lt;/code&gt; instance using the &lt;code&gt;cookie&lt;/code&gt; method. You should pass the name, value, and number of minutes the cookie should be considered valid to this method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1346639be658f9c92ab8f264fe1abaad3a590cb4" translate="yes" xml:space="preserve">
          <source>You may attach a view composer to multiple views at once by passing an array of views as the first argument to the &lt;code&gt;composer&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0e3712672d6d1a4420790187f9f28d966f9353" translate="yes" xml:space="preserve">
          <source>You may begin searching a model using the &lt;code&gt;search&lt;/code&gt; method. The search method accepts a single string that will be used to search your models. You should then chain the &lt;code&gt;get&lt;/code&gt; method onto the search query to retrieve the Eloquent models that match the given search query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5c8c9e82dacd4dd0db05ed2f28e5064506116c" translate="yes" xml:space="preserve">
          <source>You may call the &lt;code&gt;query&lt;/code&gt; method without any arguments in order to retrieve all of the query string values as an associative array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb108fde8e3c82c24a14f6ec7637616a9a1813cd" translate="yes" xml:space="preserve">
          <source>You may chain where constraints together as well as add &lt;code&gt;or&lt;/code&gt; clauses to the query. The &lt;code&gt;orWhere&lt;/code&gt; method accepts the same arguments as the &lt;code&gt;where&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc6f50f09a11c669bfba6ee89325d933f0326aa" translate="yes" xml:space="preserve">
          <source>You may check if a section has content using the &lt;code&gt;@hasSection&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16f23e82debe9d4a4f0ef8d691d40d455f1b0c6" translate="yes" xml:space="preserve">
          <source>You may clear the entire cache using the &lt;code&gt;flush&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d2a089f46db747c6d62aa0c99d5bbe4d93d09d" translate="yes" xml:space="preserve">
          <source>You may clear the value of an input using the &lt;code&gt;clear&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89da36ac1c4d05a57a7eed88c3a9b8f3f4cb9013" translate="yes" xml:space="preserve">
          <source>You may combine loops and includes into one line with Blade's &lt;code&gt;@each&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350bcc730417f7a550c7f85295129eff7c9aa400" translate="yes" xml:space="preserve">
          <source>You may configure a &quot;fallback language&quot;, which will be used when the active language does not contain a given translation string. Like the default language, the fallback language is also configured in the &lt;code&gt;config/app.php&lt;/code&gt; configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390a122619e2cfeaba2e04d92e7cb7db461375aa" translate="yes" xml:space="preserve">
          <source>You may configure how many seconds are considered a &quot;long wait&quot; within your &lt;code&gt;config/horizon.php&lt;/code&gt; configuration file. The &lt;code&gt;waits&lt;/code&gt; configuration option within this file allows you to control the long wait threshold for each connection / queue combination:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2f5caa359475b4fe38b6b188d50e2278051fa0" translate="yes" xml:space="preserve">
          <source>You may constrain the format of your route parameters using the &lt;code&gt;where&lt;/code&gt; method on a route instance. The &lt;code&gt;where&lt;/code&gt; method accepts the name of the parameter and a regular expression defining how the parameter should be constrained:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585291480002c99785331201937b3b6556a07812" translate="yes" xml:space="preserve">
          <source>You may construct &lt;code&gt;if&lt;/code&gt; statements using the &lt;code&gt;@if&lt;/code&gt;, &lt;code&gt;@elseif&lt;/code&gt;, &lt;code&gt;@else&lt;/code&gt;, and &lt;code&gt;@endif&lt;/code&gt; directives. These directives function identically to their PHP counterparts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97d9c059f29fbc7edad63c1252be9d0db731fa6" translate="yes" xml:space="preserve">
          <source>You may continue to define additional methods on the policy as needed for the various actions it authorizes. For example, you might define &lt;code&gt;view&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; methods to authorize various &lt;code&gt;Post&lt;/code&gt; actions, but remember you are free to give your policy methods any name you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96115908070ae873b4a5906c27d4933aeb0ae6c1" translate="yes" xml:space="preserve">
          <source>You may control how many additional links are displayed on each side of the paginator's URL &quot;window&quot;. By default, three links are displayed on each side of the primary paginator links. However, you may control this number using the &lt;code&gt;onEachSide&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1928a6ceb9d5db103764bfb2fa603e82bb5e877" translate="yes" xml:space="preserve">
          <source>You may customize the default maintenance mode template by defining your own template at &lt;code&gt;resources/views/errors/503.blade.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a1eb9b3703a4100a06de3b09d1ead9f0d53d51" translate="yes" xml:space="preserve">
          <source>You may customize the error messages used by the form request by overriding the &lt;code&gt;messages&lt;/code&gt; method. This method should return an array of attribute / rule pairs and their corresponding error messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="340620b1ee224f3b636b090ff8159cd3e5bf7d8c" translate="yes" xml:space="preserve">
          <source>You may customize the serialization format of individual Eloquent date attributes by specifying the date format in the &lt;a href=&quot;eloquent-mutators#attribute-casting&quot;&gt;cast declaration&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f215a353cef095a7f1cf39c6696c06c1b1a0f531" translate="yes" xml:space="preserve">
          <source>You may customize your queue worker even further by only processing particular queues for a given connection. For example, if all of your emails are processed in an &lt;code&gt;emails&lt;/code&gt; queue on your &lt;code&gt;redis&lt;/code&gt; queue connection, you may issue the following command to start a worker that only processes only that queue:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7bcb036c76f6b6dc9aee6b1f056b8b4cd1c452" translate="yes" xml:space="preserve">
          <source>You may decrypt values using the &lt;code&gt;decrypt&lt;/code&gt; helper. If the value can not be properly decrypted, such as when the MAC is invalid, an &lt;code&gt;Illuminate\Contracts\Encryption\DecryptException&lt;/code&gt; will be thrown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85e27fa55a0a6eed6aa0f7d2676725c3c182013" translate="yes" xml:space="preserve">
          <source>You may define a &lt;code&gt;failed&lt;/code&gt; method directly on your job class, allowing you to perform job specific clean-up when a failure occurs. This is the perfect location to send an alert to your users or revert any actions performed by the job. The &lt;code&gt;Exception&lt;/code&gt; that caused the job to fail will be passed to the &lt;code&gt;failed&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba78328c0061d2e504cb3d0cdd8a695cccaa9af5" translate="yes" xml:space="preserve">
          <source>You may define all of your scheduled tasks in the &lt;code&gt;schedule&lt;/code&gt; method of the &lt;code&gt;App\Console\Kernel&lt;/code&gt; class. To get started, let's look at an example of scheduling a task. In this example, we will schedule a &lt;code&gt;Closure&lt;/code&gt; to be called every day at midnight. Within the &lt;code&gt;Closure&lt;/code&gt; we will execute a database query to clear a table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9161b9935978515eac4310f4963dd5d158591e55" translate="yes" xml:space="preserve">
          <source>You may define as many route parameters as required by your route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4543e5205fe028df72d57fa30c3f893714eb3c1" translate="yes" xml:space="preserve">
          <source>You may define your API's scopes using the &lt;code&gt;Passport::tokensCan&lt;/code&gt; method in the &lt;code&gt;boot&lt;/code&gt; method of your &lt;code&gt;AuthServiceProvider&lt;/code&gt;. The &lt;code&gt;tokensCan&lt;/code&gt; method accepts an array of scope names and scope descriptions. The scope description may be anything you wish and will be displayed to users on the authorization approval screen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5a05c3c6f55ddeaee204c893ac6583a9446a32" translate="yes" xml:space="preserve">
          <source>You may define your own authentication guards using the &lt;code&gt;extend&lt;/code&gt; method on the &lt;code&gt;Auth&lt;/code&gt; facade. You should place this call to &lt;code&gt;extend&lt;/code&gt; within a &lt;a href=&quot;providers&quot;&gt;service provider&lt;/a&gt;. Since Laravel already ships with an &lt;code&gt;AuthServiceProvider&lt;/code&gt;, we can place the code in that provider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3a7c5dee94d7640efae5697d03dbe0e7448a67" translate="yes" xml:space="preserve">
          <source>You may determine if a file is present on the request using the &lt;code&gt;hasFile&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9720124140762a971dc4384f568ee254150df438" translate="yes" xml:space="preserve">
          <source>You may determine if a user has cancelled their subscription but are still on their &quot;grace period&quot; using the &lt;code&gt;onGracePeriod&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e975bfac238f74ee4f6e59e2ebb57baf801164a5" translate="yes" xml:space="preserve">
          <source>You may determine if the user is within their trial period using either the &lt;code&gt;onTrial&lt;/code&gt; method of the user instance, or the &lt;code&gt;onTrial&lt;/code&gt; method of the subscription instance. The two examples below are identical:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca03fd0ec63970d4202d9aa4b8723d0337f0e6ee" translate="yes" xml:space="preserve">
          <source>You may disable package discovery for all packages using the &lt;code&gt;*&lt;/code&gt; character inside of your application's &lt;code&gt;dont-discover&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d344935f09dad738035082a1f755e2d1948003" translate="yes" xml:space="preserve">
          <source>You may display data passed to your Blade views by wrapping the variable in curly braces. For example, given the following route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07e5b2978f7c6bb243de9a976a271af935d8a9f" translate="yes" xml:space="preserve">
          <source>You may display the contents of the &lt;code&gt;name&lt;/code&gt; variable like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6aef2d9316edc0ded4173fcc21c4ba27ef03800" translate="yes" xml:space="preserve">
          <source>You may drop multiple columns from a table by passing an array of column names to the &lt;code&gt;dropColumn&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd19c968e9f42f7cb282dd50ee91126e89bbd3cf" translate="yes" xml:space="preserve">
          <source>You may easily access your configuration values using the global &lt;code&gt;config&lt;/code&gt; helper function from anywhere in your application. The configuration values may be accessed using &quot;dot&quot; syntax, which includes the name of the file and option you wish to access. A default value may also be specified and will be returned if the configuration option does not exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceaa36340f65761c4cdb5c7c4ed740996a42152" translate="yes" xml:space="preserve">
          <source>You may easily check for the existence of a table or column using the &lt;code&gt;hasTable&lt;/code&gt; and &lt;code&gt;hasColumn&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9563bcbe0ac81dc1f181a07610e609a395a0115a" translate="yes" xml:space="preserve">
          <source>You may easily modify the notification class used to send the password reset link to the user. To get started, override the &lt;code&gt;sendPasswordResetNotification&lt;/code&gt; method on your &lt;code&gt;User&lt;/code&gt; model. Within this method, you may send the notification using any notification class you choose. The password reset &lt;code&gt;$token&lt;/code&gt; is the first argument received by the method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438d16845a19de666b37dafa7850a9a7306e2779" translate="yes" xml:space="preserve">
          <source>You may easily retrieve an array of a billable model's invoices using the &lt;code&gt;invoices&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc1659004f38b9d29e3fe37cf4f61d8da46854f" translate="yes" xml:space="preserve">
          <source>You may enable or disable foreign key constraints within your migrations by using the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531282b0faad003570e2b358f341341c7b6d8943" translate="yes" xml:space="preserve">
          <source>You may encrypt a value using the &lt;code&gt;encrypt&lt;/code&gt; helper. All encrypted values are encrypted using OpenSSL and the &lt;code&gt;AES-256-CBC&lt;/code&gt; cipher. Furthermore, all encrypted values are signed with a message authentication code (MAC) to detect any modifications to the encrypted string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a76f9f0bae209a3e3986463f8f6e8f45ad9f7db" translate="yes" xml:space="preserve">
          <source>You may even create more complex pluralization rules which specify translation strings for multiple number ranges:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9326f46d2761e1f6b858b246c1c57558834821ac" translate="yes" xml:space="preserve">
          <source>You may even insert several records into the table with a single call to &lt;code&gt;insert&lt;/code&gt; by passing an array of arrays. Each array represents a row to be inserted into the table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456fc405c6c5204e11098fefb90b8005f15ef258" translate="yes" xml:space="preserve">
          <source>You may even pass a &lt;code&gt;Closure&lt;/code&gt; as the default value. The result of the &lt;code&gt;Closure&lt;/code&gt; will be returned if the specified item does not exist in the cache. Passing a Closure allows you to defer the retrieval of default values from a database or other external service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ae896204ddd0d56bd523be285c470b9945a5ed" translate="yes" xml:space="preserve">
          <source>You may even pass a callback as the default value. The result of the callback will be returned if the specified key does not exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7120cffd702c645f303765889badb65d66aacd88" translate="yes" xml:space="preserve">
          <source>You may even pass an array of columns to an index method to create a compound (or composite) index:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971dee2a5d224f2a98a9976fbb271665b5686ea0" translate="yes" xml:space="preserve">
          <source>You may even register listeners using the &lt;code&gt;*&lt;/code&gt; as a wildcard parameter, allowing you to catch multiple events on the same listener. Wildcard listeners receive the event name as their first argument, and the entire event data array as their second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29283c0e866a2226c2aa5cc8d912db938d0e0637" translate="yes" xml:space="preserve">
          <source>You may even send a &quot;hot key&quot; to the primary CSS selector that contains your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c99f0f0c859c40d3a7a45fbd0e092e5699349b" translate="yes" xml:space="preserve">
          <source>You may export all of the Markdown mail components to your own application for customization. To export the components, use the &lt;code&gt;vendor:publish&lt;/code&gt; Artisan command to publish the &lt;code&gt;laravel-mail&lt;/code&gt; asset tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c34a757d993570d8b3af7d0b5135bb5c26de976" translate="yes" xml:space="preserve">
          <source>You may export all of the Markdown notification components to your own application for customization. To export the components, use the &lt;code&gt;vendor:publish&lt;/code&gt; Artisan command to publish the &lt;code&gt;laravel-mail&lt;/code&gt; asset tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e0e824efe4de99ac19c5fd5e2eac17e7667bb7" translate="yes" xml:space="preserve">
          <source>You may extend Homestead using the &lt;code&gt;after.sh&lt;/code&gt; script in the root of your Homestead directory. Within this file, you may add any shell commands that are necessary to properly configure and customize your virtual machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948affc4d71d47d9e93e3e78bdef571b225c5cc0" translate="yes" xml:space="preserve">
          <source>You may find it helpful to review the implementations of these methods on the &lt;code&gt;Laravel\Scout\Engines\AlgoliaEngine&lt;/code&gt; class. This class will provide you with a good starting point for learning how to implement each of these methods in your own engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad0db0f38b5a146e8ba1d8cc56d5b88f0bfe28e" translate="yes" xml:space="preserve">
          <source>You may find that in certain environments Webpack isn't updating when your files change. If this is the case on your system, consider using the &lt;code&gt;watch-poll&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e727714ed00ac3feacf40ea5571d9b07863845" translate="yes" xml:space="preserve">
          <source>You may flush all items that are assigned a tag or list of tags. For example, this statement would remove all caches tagged with either &lt;code&gt;people&lt;/code&gt;, &lt;code&gt;authors&lt;/code&gt;, or both. So, both &lt;code&gt;Anne&lt;/code&gt; and &lt;code&gt;John&lt;/code&gt; would be removed from the cache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b298ff19cabc2aba0b717d46da70225b72cda415" translate="yes" xml:space="preserve">
          <source>You may generate a policy using the &lt;code&gt;make:policy&lt;/code&gt;&lt;a href=&quot;artisan&quot;&gt;artisan command&lt;/a&gt;. The generated policy will be placed in the &lt;code&gt;app/Policies&lt;/code&gt; directory. If this directory does not exist in your application, Laravel will create it for you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f3235092baec8ce9ff9200db57e30bf87e6fce" translate="yes" xml:space="preserve">
          <source>You may generate an invokable controller by using the &lt;code&gt;--invokable&lt;/code&gt; option of the &lt;code&gt;make:controller&lt;/code&gt; Artisan command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03b019a80b829ec9f15a357de698e3b7cfc2ff8" translate="yes" xml:space="preserve">
          <source>You may get a Redis instance by calling the &lt;code&gt;Redis::connection&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1139de3d7c029033fcbfee960e4e9c65cb22914" translate="yes" xml:space="preserve">
          <source>You may gracefully terminate the master Horizon process on your machine using the &lt;code&gt;horizon:terminate&lt;/code&gt; Artisan command. Any jobs that Horizon is currently processing will be completed and then Horizon will exit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366f0d5fed562c3beb60d08617667b36e39c3988" translate="yes" xml:space="preserve">
          <source>You may hash a password by calling the &lt;code&gt;make&lt;/code&gt; method on the &lt;code&gt;Hash&lt;/code&gt; facade:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852fa71624591a28bc33ca971a80b41717cb13a0" translate="yes" xml:space="preserve">
          <source>You may have noticed in the examples above that we did not specify the full namespace for the event classes. This is because Echo will automatically assume the events are located in the &lt;code&gt;App\Events&lt;/code&gt; namespace. However, you may configure the root namespace when you instantiate Echo by passing a &lt;code&gt;namespace&lt;/code&gt; configuration option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3779bdbb0746df419c224901775abf813908b9d3" translate="yes" xml:space="preserve">
          <source>You may inject environment variables into Mix by prefixing a key in your &lt;code&gt;.env&lt;/code&gt; file with &lt;code&gt;MIX_&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2efd29ae9d9cb541d48f3ddcbfad5ce0f17204" translate="yes" xml:space="preserve">
          <source>You may install Homestead by cloning the repository. Consider cloning the repository into a &lt;code&gt;Homestead&lt;/code&gt; folder within your &quot;home&quot; directory, as the Homestead box will serve as the host to all of your Laravel projects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc7ef925bc7e2fe4da97d2de022486a24c93dd7" translate="yes" xml:space="preserve">
          <source>You may instruct a single model instance to append attributes using the &lt;code&gt;append&lt;/code&gt; method. Or, you may use the &lt;code&gt;setAppends&lt;/code&gt; method to override the entire array of appended properties for a given model instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac876359970a9cbd7051d7f55df51254c8455dd" translate="yes" xml:space="preserve">
          <source>You may interact with Redis by calling various methods on the &lt;code&gt;Redis&lt;/code&gt;&lt;a href=&quot;facades&quot;&gt;facade&lt;/a&gt;. The &lt;code&gt;Redis&lt;/code&gt; facade supports dynamic methods, meaning you may call any &lt;a href=&quot;https://redis.io/commands&quot;&gt;Redis command&lt;/a&gt; on the facade and the command will be passed directly to Redis. In this example, we will call the Redis &lt;code&gt;GET&lt;/code&gt; command by calling the &lt;code&gt;get&lt;/code&gt; method on the &lt;code&gt;Redis&lt;/code&gt; facade:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39264ae1ec6a16c04fc722653d8daa80a8c542d8" translate="yes" xml:space="preserve">
          <source>You may listen for the join event via Echo's &lt;code&gt;listen&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa9703c8a0a3c5b12496650ac631a8587a60776" translate="yes" xml:space="preserve">
          <source>You may not always need every column from the relationships you are retrieving. For this reason, Eloquent allows you to specify which columns of the relationship you would like to retrieve:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b444c5a8743fe046bc9b747efe032b21361bfa5" translate="yes" xml:space="preserve">
          <source>You may omit the component parameters if it has no additional slots:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56af21c8f7803fab59797145573b8e7b89661285" translate="yes" xml:space="preserve">
          <source>You may optionally pass a default value as the second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526b094c2adb620e883eff2cad28e0b859dc27c9" translate="yes" xml:space="preserve">
          <source>You may optionally pass an integer to &lt;code&gt;random&lt;/code&gt; to specify how many items you would like to randomly retrieve. A collection of items is always returned when explicitly passing the number of items you wish to receive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe57394d9d124a7a5b1230a76f485e04e3a166b" translate="yes" xml:space="preserve">
          <source>You may optionally pass an offset as the second argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0612007070d62b3e6cfc1bef2e140d1325bacc01" translate="yes" xml:space="preserve">
          <source>You may optionally pass the function a &quot;depth&quot; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819143c81c3b1ac4856524271b93e7d274eeda18" translate="yes" xml:space="preserve">
          <source>You may override attributes on the model by passing an array to the &lt;code&gt;create&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7b5d60f058f1deaa5cc4859c1796946dac7258" translate="yes" xml:space="preserve">
          <source>You may pass a class or interface name to resolve it from the container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023f1c2fa520ac2c538b9dee0623a2d01855aa04" translate="yes" xml:space="preserve">
          <source>You may pass a default value as the second argument to the &lt;code&gt;input&lt;/code&gt; method. This value will be returned if the requested input value is not present on the request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35328b5291c375d46d0ea8e5733b52c439804d29" translate="yes" xml:space="preserve">
          <source>You may pass a second argument to limit the size of the resulting chunk:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae77e061ebc45b69a24d8da673cda3470e541401" translate="yes" xml:space="preserve">
          <source>You may pass another Closure as the third parameter to the &lt;code&gt;when&lt;/code&gt; method. This Closure will execute if the first parameter evaluates as &lt;code&gt;false&lt;/code&gt;. To illustrate how this feature may be used, we will use it to configure the default sorting of a query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7a7410a022bc65a542e491f8f59cf0b9e01810" translate="yes" xml:space="preserve">
          <source>You may pass either a string (proxy) or object (BrowserSync settings) to this method. Next, start Webpack's dev server using the &lt;code&gt;npm run watch&lt;/code&gt; command. Now, when you modify a script or PHP file, watch as the browser instantly refreshes the page to reflect your changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4075d365f56cba74b6c5a6a4ed5d4c36b0402f8" translate="yes" xml:space="preserve">
          <source>You may pass multiple arguments to the &lt;code&gt;groupBy&lt;/code&gt; method to group by multiple columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba49c8616301f5454b8d503868b71f65f9ed3bad" translate="yes" xml:space="preserve">
          <source>You may pause the Horizon process and instruct it to continue processing jobs using the &lt;code&gt;horizon:pause&lt;/code&gt; and &lt;code&gt;horizon:continue&lt;/code&gt; Artisan commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116f64d33620d0950d8db7815500ff3119dd2322" translate="yes" xml:space="preserve">
          <source>You may propose new features or improvements of existing Laravel behavior in the Laravel Ideas &lt;a href=&quot;https://github.com/laravel/ideas/issues&quot;&gt;issue board&lt;/a&gt;. If you propose a new feature, please be willing to implement at least some of the code that would be needed to complete the feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370554da8640ca38c5b499f85574ee8dddfed17d" translate="yes" xml:space="preserve">
          <source>You may provide an integer as a second argument to the function to retrieve the singular or plural form of the string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2df5f428571705559df0ed0e706637b7f2198a" translate="yes" xml:space="preserve">
          <source>You may provide one of the following as the channel argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f563741d2c0590ffe83f72440cb761a24b38e0b8" translate="yes" xml:space="preserve">
          <source>You may push to a stack as many times as needed. To render the complete stack contents, pass the name of the stack to the &lt;code&gt;@stack&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a614f47edab57dfaa8e6163dd64c7a2c62c029" translate="yes" xml:space="preserve">
          <source>You may query the &lt;code&gt;posts&lt;/code&gt; relationship and add additional constraints to the relationship like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8536b6d252b0de284a747642922a06d90f47bc81" translate="yes" xml:space="preserve">
          <source>You may register many API resource controllers at once by passing an array to the &lt;code&gt;apiResources&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bf7781ae4bafaf07663887368a9af89536bf93" translate="yes" xml:space="preserve">
          <source>You may register many resource controllers at once by passing an array to the &lt;code&gt;resources&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e58598233a69e903d0189e32b0dc05fbe634776" translate="yes" xml:space="preserve">
          <source>You may register the &lt;code&gt;morphMap&lt;/code&gt; in the &lt;code&gt;boot&lt;/code&gt; function of your &lt;code&gt;AppServiceProvider&lt;/code&gt; or create a separate service provider if you wish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2731e3ec1ad3a6ae944e2fdc5926bd0bcdadb9" translate="yes" xml:space="preserve">
          <source>You may remove items from the cache using the &lt;code&gt;forget&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425be7fcbb5e84cf5a7fec865cd85ae90ca9764c" translate="yes" xml:space="preserve">
          <source>You may retrieve lines from language files using the &lt;code&gt;__&lt;/code&gt; helper function. The &lt;code&gt;__&lt;/code&gt; method accepts the file and key of the translation string as its first argument. For example, let's retrieve the &lt;code&gt;welcome&lt;/code&gt; translation string from the &lt;code&gt;resources/lang/messages.php&lt;/code&gt; language file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026336307b25f7c8e98b2422e2f8514e66a3d028" translate="yes" xml:space="preserve">
          <source>You may rollback &amp;amp; re-migrate a limited number of migrations by providing the &lt;code&gt;step&lt;/code&gt; option to the &lt;code&gt;refresh&lt;/code&gt; command. For example, the following command will rollback &amp;amp; re-migrate the last five migrations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818978557688c87d70aa25f70314ead3c2e5e4de" translate="yes" xml:space="preserve">
          <source>You may rollback a limited number of migrations by providing the &lt;code&gt;step&lt;/code&gt; option to the &lt;code&gt;rollback&lt;/code&gt; command. For example, the following command will rollback the last five migrations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea20637541522de38e5ece89fdcdff32ef908f2" translate="yes" xml:space="preserve">
          <source>You may select a random option by omitting the second parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f883e24518c72d9c703042ba1837fc911bd8be6c" translate="yes" xml:space="preserve">
          <source>You may set configuration variables at runtime by passing an array of key / value pairs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e188a785aad541b45fb0f669bbc6966c6a04a83c" translate="yes" xml:space="preserve">
          <source>You may set values by passing an array of key / value pairs to the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df802ff290e0af3dcd8e33f786ff14e0d04de8b" translate="yes" xml:space="preserve">
          <source>You may specify a dynamic request maximum based on an attribute of the authenticated &lt;code&gt;User&lt;/code&gt; model. For example, if your &lt;code&gt;User&lt;/code&gt; model contains a &lt;code&gt;rate_limit&lt;/code&gt; attribute, you may pass the name of the attribute to the &lt;code&gt;throttle&lt;/code&gt; middleware so that it is used to calculate the maximum request count:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5950cfb1d6cf3bc931d22ec9f1fb0c9b8538651b" translate="yes" xml:space="preserve">
          <source>You may specify how many models to retrieve per page by passing the amount as the first argument to the &lt;code&gt;paginate&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e048d0acc85b10e70a45e6362a4fc55c340f5ec" translate="yes" xml:space="preserve">
          <source>You may specify which guard instance you would like to utilize using the &lt;code&gt;guard&lt;/code&gt; method on the &lt;code&gt;Auth&lt;/code&gt; facade. This allows you to manage authentication for separate parts of your application using entirely separate authenticatable models or user tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e2e23051072be86c7b6d433995bfa7f59036ae" translate="yes" xml:space="preserve">
          <source>You may still type-hint the &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; and access your &lt;code&gt;id&lt;/code&gt; parameter by defining your controller method as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94f29593cb7bfb6fe2bc24c791545c2463fd1e0" translate="yes" xml:space="preserve">
          <source>You may still type-hint the &lt;code&gt;Illuminate\Http\Request&lt;/code&gt; and access your route parameter &lt;code&gt;id&lt;/code&gt; by defining your controller method as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c7bc86768838d05016f6f0ab426ef2c45ea9fe" translate="yes" xml:space="preserve">
          <source>You may stop further chunks from being processed by returning &lt;code&gt;false&lt;/code&gt; from the &lt;code&gt;Closure&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b949bd895dbf0b760caed2c4d5604098503b549" translate="yes" xml:space="preserve">
          <source>You may stop iterating through the items by returning &lt;code&gt;false&lt;/code&gt; from the callback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8275d3323f06cdea517a845bbdbb74db61fd31f7" translate="yes" xml:space="preserve">
          <source>You may test this command with the following test which utilizes the &lt;code&gt;expectsQuestion&lt;/code&gt;, &lt;code&gt;expectsOutput&lt;/code&gt;, and &lt;code&gt;assertExitCode&lt;/code&gt; methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dd7daa22a72959c28cbeddc719b78859133061" translate="yes" xml:space="preserve">
          <source>You may then access the named &lt;code&gt;MessageBag&lt;/code&gt; instance from the &lt;code&gt;$errors&lt;/code&gt; variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c085532b370c1629d7b330fc68f611bf2056b634" translate="yes" xml:space="preserve">
          <source>You may type-hint any dependencies you need within the &lt;code&gt;authorize&lt;/code&gt; method's signature. They will automatically be resolved via the Laravel &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b704a44f804893f7df0e75b1d20d5cfaab16fa" translate="yes" xml:space="preserve">
          <source>You may type-hint any dependencies you need within the &lt;code&gt;rules&lt;/code&gt; method's signature. They will automatically be resolved via the Laravel &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ba9ed74e8b422c49d3ae348fbe2581a80d5cdc" translate="yes" xml:space="preserve">
          <source>You may type-hint any dependencies you need within the &lt;code&gt;run&lt;/code&gt; method's signature. They will automatically be resolved via the Laravel &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebf0dba12d29ab1ef8bf15e2887ea5d0d37985f" translate="yes" xml:space="preserve">
          <source>You may type-hint dependencies for your service provider's &lt;code&gt;boot&lt;/code&gt; method. The &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt; will automatically inject any dependencies you need:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bd7cf0ab135694a4da7a71f69469626a51c8f3" translate="yes" xml:space="preserve">
          <source>You may update your Valet installation using the &lt;code&gt;composer global update&lt;/code&gt; command in your terminal. After upgrading, it is good practice to run the &lt;code&gt;valet install&lt;/code&gt; command so Valet can make additional upgrades to your configuration files if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e18b7bf5e972b0bb70992d78484ce66b7716c3" translate="yes" xml:space="preserve">
          <source>You may use &quot;dot&quot; notation to execute a query against a nested relationship. For example, the following query will retrieve all posts with comments from authors that are not banned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0400b9f40a8e6f9a7225aaae3f3c137e060c777e" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;whereJsonContains&lt;/code&gt; to query JSON arrays (not supported on SQLite):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c2c502e940ea537eb6ee31d621393242a25a93" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;whereJsonLength&lt;/code&gt; to query JSON arrays by their length:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e3af7054906a94ca3b3783c8ac30c1f0308944c" translate="yes" xml:space="preserve">
          <source>You may use Artisan's &lt;code&gt;dump-server&lt;/code&gt; command to intercept all &lt;code&gt;dump&lt;/code&gt; calls and display them in your console window instead of your browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe5d31a0399bbe78f104c139398a96fcf8dc283" translate="yes" xml:space="preserve">
          <source>You may use Composer to install Horizon into your Laravel project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="928621560a2a9b1524b8e1deca2f111aaa36518f" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;@method&lt;/code&gt; Blade directive to generate the &lt;code&gt;_method&lt;/code&gt; input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea3d753360406427c5d7e243ed05ff085679ba6" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;Mail&lt;/code&gt; facade's &lt;code&gt;fake&lt;/code&gt; method to prevent mail from being sent. You may then assert that &lt;a href=&quot;mail&quot;&gt;mailables&lt;/a&gt; were sent to users and even inspect the data they received. When using fakes, assertions are made after the code under test is executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075667148b2a4e5778f8269b41eef0e6602fd43e" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;Notification&lt;/code&gt; facade's &lt;code&gt;fake&lt;/code&gt; method to prevent notifications from being sent. You may then assert that &lt;a href=&quot;notifications&quot;&gt;notifications&lt;/a&gt; were sent to users and even inspect the data they received. When using fakes, assertions are made after the code under test is executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff3365f286a8f0252509e7dd64545589d0b484f" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;after&lt;/code&gt; method to define a callback to be executed after every authorization check. However, you may not modify the result of the authorization check from an &lt;code&gt;after&lt;/code&gt; callback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb30236b2f63ac1839bb288a75882e5ffd82d5e" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;createMany&lt;/code&gt; method to create multiple related models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023833e0f74ebe42187910762a167c196d29825b" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;current&lt;/code&gt;, &lt;code&gt;currentRouteName&lt;/code&gt;, and &lt;code&gt;currentRouteAction&lt;/code&gt; methods on the &lt;code&gt;Route&lt;/code&gt; facade to access information about the route handling the incoming request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f035a0a0d5f800a7d59ff303ae5f5d534f5393a" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; methods to customize the sender and recipient. The &lt;code&gt;from&lt;/code&gt; method accepts a username and emoji identifier, while the &lt;code&gt;to&lt;/code&gt; method accepts a channel or username:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fc8f15e094f525aeb8de4f6b69d9e3bd0572e7" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;getLocale&lt;/code&gt; and &lt;code&gt;isLocale&lt;/code&gt; methods on the &lt;code&gt;App&lt;/code&gt; facade to determine the current locale or check if the locale is a given value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4e2f81280d312515eb099b33c66249b71b6c00" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;joinSub&lt;/code&gt;, &lt;code&gt;leftJoinSub&lt;/code&gt;, and &lt;code&gt;rightJoinSub&lt;/code&gt; methods to join a query to a sub-query. Each of these methods receive three arguments: the sub-query, its table alias, and a Closure that defines the related columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e60f43264d4b413e1c1d5a1d08e5889f0e3c71a" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;make&lt;/code&gt; method to resolve a class instance out of the container. The &lt;code&gt;make&lt;/code&gt; method accepts the name of the class or interface you wish to resolve:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889514f5e36cf7aa3d3b8e3ce7d2fb6bd8d4ed03" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;once&lt;/code&gt; method to log a user into the application for a single request. No sessions or cookies will be utilized, which means this method may be helpful when building a stateless API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498e3b5ee5b060ffc33de4be2dd041114b3224e9" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;put&lt;/code&gt; method on the &lt;code&gt;Cache&lt;/code&gt; facade to store items in the cache. When you place an item in the cache, you need to specify the number of minutes for which the value should be cached:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a339d78d53d867cacf570d5d10872ec690e76a" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;rememberForever&lt;/code&gt; method to retrieve an item from the cache or store it forever:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab2eaf7c837f8cc36ec13877916e3ac08d6fe47" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;resize&lt;/code&gt; method to adjust the size of the browser window:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246c3b2042240ac169ffb27e0d177b0848243dda" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;route:clear&lt;/code&gt; command to clear the route cache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a34c6deb45ab761ae2d54bd2e2faaf89e7b82b" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;session:table&lt;/code&gt; Artisan command to generate this migration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a575dbc2ad35fddfc83d6e78d72b89c16feac66" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;table&lt;/code&gt; method on the &lt;code&gt;DB&lt;/code&gt; facade to begin a query. The &lt;code&gt;table&lt;/code&gt; method returns a fluent query builder instance for the given table, allowing you to chain more constraints onto the query and then finally get the results using the &lt;code&gt;get&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa66c8fe39bd7557fe59eab5e103f74f5a75414" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;transaction&lt;/code&gt; method on the &lt;code&gt;DB&lt;/code&gt; facade to run a set of operations within a database transaction. If an exception is thrown within the transaction &lt;code&gt;Closure&lt;/code&gt;, the transaction will automatically be rolled back. If the &lt;code&gt;Closure&lt;/code&gt; executes successfully, the transaction will automatically be committed. You don't need to worry about manually rolling back or committing while using the &lt;code&gt;transaction&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e91591d9ed84d21ceed84391a7032d2e7d39d13" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;url&lt;/code&gt; method to get the URL for the given file. If you are using the &lt;code&gt;local&lt;/code&gt; driver, this will typically just prepend &lt;code&gt;/storage&lt;/code&gt; to the given path and return a relative URL to the file. If you are using the &lt;code&gt;s3&lt;/code&gt; or &lt;code&gt;rackspace&lt;/code&gt; driver, the fully qualified remote URL will be returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7365e4105b357cbb92b6059894f1fd75923e1f51" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;where&lt;/code&gt; method on a query builder instance to add &lt;code&gt;where&lt;/code&gt; clauses to the query. The most basic call to &lt;code&gt;where&lt;/code&gt; requires three arguments. The first argument is the name of the column. The second argument is an operator, which can be any of the database's supported operators. Finally, the third argument is the value to evaluate against the column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099ffb1d0f33106df699443bf7c73e157c809a47" translate="yes" xml:space="preserve">
          <source>You may use the &lt;code&gt;withHeaders&lt;/code&gt; method to customize the request's headers before it is sent to the application. This allows you to add any custom headers you would like to the request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fe84e1cc7912794cab521dbdad67325935c82f" translate="yes" xml:space="preserve">
          <source>You may use the following commands on the schema builder to define the table's options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93ce245294a8f7234a85dfa17b9b21e7b23e83b" translate="yes" xml:space="preserve">
          <source>You may want to publish groups of package assets and resources separately. For instance, you might want to allow your users to publish your package's configuration files without being forced to publish your package's assets. You may do this by &quot;tagging&quot; them when calling the &lt;code&gt;publishes&lt;/code&gt; method from a package's service provider. For example, let's use tags to define two publish groups in the &lt;code&gt;boot&lt;/code&gt; method of a package service provider:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca405b5c22c216a0892e9712a1e03d6d96fbaa35" translate="yes" xml:space="preserve">
          <source>You may wish to create a &lt;code&gt;resources/views/emails&lt;/code&gt; directory to house all of your email templates; however, you are free to place them wherever you wish within your &lt;code&gt;resources/views&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259e9429cb79355c8fa2ae62547e5ca49d4a7940" translate="yes" xml:space="preserve">
          <source>You may write information to the logs using the &lt;code&gt;Log&lt;/code&gt;&lt;a href=&quot;facades&quot;&gt;facade&lt;/a&gt;. As previously mentioned, the logger provides the eight logging levels defined in the &lt;a href=&quot;https://tools.ietf.org/html/rfc5424&quot;&gt;RFC 5424 specification&lt;/a&gt;: &lt;strong&gt;emergency&lt;/strong&gt;, &lt;strong&gt;alert&lt;/strong&gt;, &lt;strong&gt;critical&lt;/strong&gt;, &lt;strong&gt;error&lt;/strong&gt;, &lt;strong&gt;warning&lt;/strong&gt;, &lt;strong&gt;notice&lt;/strong&gt;, &lt;strong&gt;info&lt;/strong&gt; and &lt;strong&gt;debug&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dda4033e41e9c016511a3a555f5da76e351b4dd" translate="yes" xml:space="preserve">
          <source>You must add the &quot;domains&quot; for your Nginx sites to the &lt;code&gt;hosts&lt;/code&gt; file on your machine. The &lt;code&gt;hosts&lt;/code&gt; file will redirect requests for your Homestead sites into your Homestead machine. On Mac and Linux, this file is located at &lt;code&gt;/etc/hosts&lt;/code&gt;. On Windows, it is located at &lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt;. The lines you add to this file will look like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e117c5414a496708b24682d4a5f87a137cbf6ee" translate="yes" xml:space="preserve">
          <source>You only need to place items in the &lt;code&gt;read&lt;/code&gt; and &lt;code&gt;write&lt;/code&gt; arrays if you wish to override the values from the main array. So, in this case, &lt;code&gt;192.168.1.1&lt;/code&gt; will be used as the host for the &quot;read&quot; connection, while &lt;code&gt;192.168.1.2&lt;/code&gt; will be used for the &quot;write&quot; connection. The database credentials, prefix, character set, and all other options in the main &lt;code&gt;mysql&lt;/code&gt; array will be shared across both connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d562e49da57b08dc40b7d6d99c2e74526ac0a35a" translate="yes" xml:space="preserve">
          <source>You should always group &lt;code&gt;orWhere&lt;/code&gt; calls in order to avoid unexpected behavior when global scopes are applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04b790be99708471282b091d9a7298880d0c00d" translate="yes" xml:space="preserve">
          <source>You should avoid using the &lt;code&gt;__DIR__&lt;/code&gt; and &lt;code&gt;__FILE__&lt;/code&gt; constants in your Blade views, since they will refer to the location of the cached, compiled view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1636f24bba7def3b58966361d3a3959c8a896df2" translate="yes" xml:space="preserve">
          <source>You should check out a tagged version of Homestead since the &lt;code&gt;master&lt;/code&gt; branch may not always be stable. You can find the latest stable version on the &lt;a href=&quot;https://github.com/laravel/homestead/releases&quot;&gt;GitHub Release Page&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de0ed989ca1955866beb4b3b2b671443a9e4b89" translate="yes" xml:space="preserve">
          <source>You should not define Closures in your configuration files. They can not be serialized correctly when users execute the &lt;code&gt;config:cache&lt;/code&gt; Artisan command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc29b66e53078bab243902e4d5f1679f796ca69" translate="yes" xml:space="preserve">
          <source>You should not mock the &lt;code&gt;Request&lt;/code&gt; facade. Instead, pass the input you desire into the HTTP helper methods such as &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; when running your test. Likewise, instead of mocking the &lt;code&gt;Config&lt;/code&gt; facade, call the &lt;code&gt;Config::set&lt;/code&gt; method in your tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32568d0eb8997613cca7c93e6e05e09215bc122f" translate="yes" xml:space="preserve">
          <source>You should only use these non-standard ports when connecting to the databases from your host machine. You will use the default 3306 and 5432 ports in your Laravel database configuration file since Laravel is running &lt;em&gt;within&lt;/em&gt; the virtual machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a8a0056b786da2d5690cd2b643ae8769bd24d2" translate="yes" xml:space="preserve">
          <source>You should typically run the &lt;code&gt;php artisan config:cache&lt;/code&gt; command as part of your production deployment routine. The command should not be run during local development as configuration options will frequently need to be changed during the course of your application's development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f7ec130cdcc574a15c7c039a8a016e7bba605a" translate="yes" xml:space="preserve">
          <source>You should use the &lt;code&gt;has&lt;/code&gt; method to determine if a value is present on the request. The &lt;code&gt;has&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; if the value is present on the request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287c6e9cfa5264a782af665236445449e239db30" translate="yes" xml:space="preserve">
          <source>You will also need the verification view stub. This view should be placed at &lt;code&gt;resources/views/auth/verify.blade.php&lt;/code&gt;. You may obtain the view's contents &lt;a href=&quot;https://github.com/laravel/framework/blob/5.7/src/Illuminate/Auth/Console/stubs/make/views/auth/verify.stub&quot;&gt;on GitHub&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c97bea7a8468a6a9492b68040137e48ce0563b4" translate="yes" xml:space="preserve">
          <source>You will also need to configure an &lt;a href=&quot;https://api.slack.com/incoming-webhooks&quot;&gt;&quot;Incoming Webhook&quot;&lt;/a&gt; integration for your Slack team. This integration will provide you with a URL you may use when &lt;a href=&quot;#routing-slack-notifications&quot;&gt;routing Slack notifications&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12334753dffbb456a55514c57df917838afa05cf" translate="yes" xml:space="preserve">
          <source>You will also need to define an error message for your custom rule. You can do so either using an inline custom message array or by adding an entry in the validation language file. This message should be placed in the first level of the array, not within the &lt;code&gt;custom&lt;/code&gt; array, which is only for attribute-specific error messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8348b2e350aa3310fc2bd526c5dc35ff90c07440" translate="yes" xml:space="preserve">
          <source>You will also need to modify your &lt;code&gt;App\User&lt;/code&gt; model to implement the &lt;code&gt;MustVerifyEmail&lt;/code&gt; contract:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4210b47ca2be44ce12f70626c40f05476532707" translate="yes" xml:space="preserve">
          <source>You will often be generating URLs using the primary key of &lt;a href=&quot;eloquent&quot;&gt;Eloquent models&lt;/a&gt;. For this reason, you may pass Eloquent models as parameter values. The &lt;code&gt;route&lt;/code&gt; helper will automatically extract the model's primary key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5066f03e9fc1f35499d1db3caf8ccb095b67be0" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;.env&lt;/code&gt; file should not be committed to your application's source control, since each developer / server using your application could require a different environment configuration. Furthermore, this would be a security risk in the event an intruder gains access to your source control repository, since any sensitive credentials would get exposed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abd83cd7979070d290dcb155cfc0e84d6323587" translate="yes" xml:space="preserve">
          <source>Your custom session driver should implement the &lt;code&gt;SessionHandlerInterface&lt;/code&gt;. This interface contains just a few simple methods we need to implement. A stubbed MongoDB implementation looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb68f4f18695cb3e41395c71014c9c4f7788e522" translate="yes" xml:space="preserve">
          <source>Your event listeners may also type-hint any dependencies they need on their constructors. All event listeners are resolved via the Laravel &lt;a href=&quot;container&quot;&gt;service container&lt;/a&gt;, so dependencies will be injected automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973836488770486d0863512dda034dab3ea41099" translate="yes" xml:space="preserve">
          <source>Your event must use the &lt;code&gt;Illuminate\Broadcasting\InteractsWithSockets&lt;/code&gt; trait in order to call the &lt;code&gt;toOthers&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b92d792d20facbfcdd136cca4987e9902269aaa" translate="yes" xml:space="preserve">
          <source>Your package may have assets such as JavaScript, CSS, and images. To publish these assets to the application's &lt;code&gt;public&lt;/code&gt; directory, use the service provider's &lt;code&gt;publishes&lt;/code&gt; method. In this example, we will also add a &lt;code&gt;public&lt;/code&gt; asset group tag, which may be used to publish groups of related assets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7efe04d154690d59fee701c927b41acd844f8a1f" translate="yes" xml:space="preserve">
          <source>Zend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062e2ee2d262ecd2240ecf44fc5bf3c3f32d9e32" translate="yes" xml:space="preserve">
          <source>Zend Z-Ray</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e3dcfee88568ccfa73748cf5f0bca6ba6c715f" translate="yes" xml:space="preserve">
          <source>Zip the collection together with one or more arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba6871c0ed772fb683441aa622557bc320f0fa7" translate="yes" xml:space="preserve">
          <source>\Access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b598b7d0022ee9a8e972b2c4f568544f878a172e" translate="yes" xml:space="preserve">
          <source>\Auth\Access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26619c95c499698e6156670334f5a7e16f5663ec" translate="yes" xml:space="preserve">
          <source>\Bootstrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb80745726a624e054f010f13bd671879bd3d13" translate="yes" xml:space="preserve">
          <source>\Broadcasters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb743f45af77798d1c24be40af0bafa61edf9c12" translate="yes" xml:space="preserve">
          <source>\Broadcasting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937fc6f93cb70822e247f9e93f2e11901cedcff5" translate="yes" xml:space="preserve">
          <source>\Cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad94d0d8bc5acb848a681fc131b712d07243e03" translate="yes" xml:space="preserve">
          <source>\Capsule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112e795778ca7eb400701f612dd59b7ab9c06276" translate="yes" xml:space="preserve">
          <source>\Channels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b85c2f3133a1f29292ecbea04e0f7a6d38620d3" translate="yes" xml:space="preserve">
          <source>\Compilers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefd9a6967f9f5a1517b6a37d2c8c4992672fb27" translate="yes" xml:space="preserve">
          <source>\Concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c47abccd0c7169d451b154a94a9b31f4d83416" translate="yes" xml:space="preserve">
          <source>\Config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffc087e85b22502788a86be338750dafab11a2a" translate="yes" xml:space="preserve">
          <source>\Connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fefc81114041cb4dbce93e1d86332fb92f741f80" translate="yes" xml:space="preserve">
          <source>\Connectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49053b354ff161d3cf09d0b08eb969a45c62f63" translate="yes" xml:space="preserve">
          <source>\Console</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46548433a8d754cd390c1dcf4ed79744f41514e" translate="yes" xml:space="preserve">
          <source>\Console\Factories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951aa0658b3f5217048fb02250d70d0004fd22bf" translate="yes" xml:space="preserve">
          <source>\Console\Migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da665f1de44d6e161238432c20d3760c73427e3" translate="yes" xml:space="preserve">
          <source>\Console\Presets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fded808d8f76c1b850fed1cc1d6c8df988b3a8a" translate="yes" xml:space="preserve">
          <source>\Console\Seeds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be6e554b7d90b3f283a80f051c97952f1938dbd" translate="yes" xml:space="preserve">
          <source>\Constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbd55fc05ed74db0714c8ab8d5fce3bbd0acd79" translate="yes" xml:space="preserve">
          <source>\Container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26649016374836d678b4e100b9e9eee2691c8de3" translate="yes" xml:space="preserve">
          <source>\Contracts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f766f349fe09ccd62d041b0f2d7721c2cf0b149e" translate="yes" xml:space="preserve">
          <source>\Cookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd3af0ae22b94b23b9419db6ce5cd51165d378c" translate="yes" xml:space="preserve">
          <source>\Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a36ccabd7479e3b308fa0630230430e9e7f3d0" translate="yes" xml:space="preserve">
          <source>\Debug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251d6b3bf07d3e5eb9165b381bc25f42802fa03d" translate="yes" xml:space="preserve">
          <source>\Eloquent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d791876b61d8034fb70cd6453a584302eebd9bd4" translate="yes" xml:space="preserve">
          <source>\Encryption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f52b32f0b24a945e152680909a438142640477" translate="yes" xml:space="preserve">
          <source>\Engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2592bea1dec2a094c4866c2ae36713ff9151ec3c" translate="yes" xml:space="preserve">
          <source>\Events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5480484cbaf465e208c61c0eec83855e55a171" translate="yes" xml:space="preserve">
          <source>\Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d1bf2719418e850647515e7f644eb08250c4d6" translate="yes" xml:space="preserve">
          <source>\Facades</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279a2ced33cbfe8c8e1a9f17af6a12661b8a996f" translate="yes" xml:space="preserve">
          <source>\Failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6222860b7c343d7ed373aee88e853630f35a7242" translate="yes" xml:space="preserve">
          <source>\Fakes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2fbed259e48c5acfe9253e3705a7c871e9f12b3" translate="yes" xml:space="preserve">
          <source>\Filesystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a429c99545bc43778d2bcb7d5332c8e135461df" translate="yes" xml:space="preserve">
          <source>\Foundation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cadb6da059b71ec198ad02469f67e591a1022ea" translate="yes" xml:space="preserve">
          <source>\Grammars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145a9dff67e0a6c3afb960abbc6ee67b28e04491" translate="yes" xml:space="preserve">
          <source>\Hashing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de7d953c6264ef364bedfd1eedd007c5acfdbf9" translate="yes" xml:space="preserve">
          <source>\Limiters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a20e64f4e2c4bd9c79d3d11d47bdc17df119b05" translate="yes" xml:space="preserve">
          <source>\Listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb6447856921fd4dc5122c178126f973e110efc" translate="yes" xml:space="preserve">
          <source>\Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88645e05a89cd1f1ba4b41fbe7ce7c52a99bc676" translate="yes" xml:space="preserve">
          <source>\Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8545f988d1190368e7993e4597eda2c855fe2c64" translate="yes" xml:space="preserve">
          <source>\Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d2e257c9cbb12e275de6b4695e6ed489ae7fa2" translate="yes" xml:space="preserve">
          <source>\Migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f443908a4a2606785870f9246c7810c10a8a15" translate="yes" xml:space="preserve">
          <source>\Notifications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9d97da6d3e93838ebd93ee01df95d03cf0fe2f" translate="yes" xml:space="preserve">
          <source>\Pagination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9449d7bc1496b079dc105a2bb90a23868871eef5" translate="yes" xml:space="preserve">
          <source>\Passwords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1b8d8ac63b4733e7168301612c1c303e577aa5" translate="yes" xml:space="preserve">
          <source>\Pipeline</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a083991630b258aecf4adaa97ab165de2ee2c0c" translate="yes" xml:space="preserve">
          <source>\Processors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07459f1277e9be76ada98cafb3721142c275580e" translate="yes" xml:space="preserve">
          <source>\Providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a24ae83de88f3acf417c71fee1179060afc27d1" translate="yes" xml:space="preserve">
          <source>\Query</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
