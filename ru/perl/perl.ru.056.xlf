<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="8cbeea0224ce600061809e17d31a9c13d5fec96b" translate="yes" xml:space="preserve">
          <source>perlinterp</source>
          <target state="translated">perlinterp</target>
        </trans-unit>
        <trans-unit id="6203067eb633229c6e0240778df6a32b59ef631e" translate="yes" xml:space="preserve">
          <source>perlinterp - An overview of the Perl interpreter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30addf54646ed73419deae243ad2c14dab40468" translate="yes" xml:space="preserve">
          <source>perlintro</source>
          <target state="translated">perlintro</target>
        </trans-unit>
        <trans-unit id="fa02f6ea33b836f77634033d40c9d99bfe2a8fb5" translate="yes" xml:space="preserve">
          <source>perlintro -- a brief introduction and overview of Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e59b0cf04c951a04d9a934ca00a936c115629f" translate="yes" xml:space="preserve">
          <source>perlio.c</source>
          <target state="translated">perlio.c</target>
        </trans-unit>
        <trans-unit id="e619fc49ca10341acf5612d3878ea56eb131fce2" translate="yes" xml:space="preserve">
          <source>perliol</source>
          <target state="translated">perliol</target>
        </trans-unit>
        <trans-unit id="bb0a5d4d250f93c67e74803ab4d5b4c9fb01cc7c" translate="yes" xml:space="preserve">
          <source>perliol - C API for Perl's implementation of IO in Layers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d19c20fd0e85006ea98bb8148ef71465805a1c1" translate="yes" xml:space="preserve">
          <source>perliol.h</source>
          <target state="translated">perliol.h</target>
        </trans-unit>
        <trans-unit id="45f6397d67f55d2d9d0e35e9b6c28689b6546ffe" translate="yes" xml:space="preserve">
          <source>perlipc</source>
          <target state="translated">perlipc</target>
        </trans-unit>
        <trans-unit id="a49e96aecdd9dc0da3f247d5cc0b0e3810d795dd" translate="yes" xml:space="preserve">
          <source>perlipc - Perl interprocess communication (signals, fifos, pipes, safe subprocesses, sockets, and semaphores)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2858a9b5fa24466e9a0972e938e60136273a0889" translate="yes" xml:space="preserve">
          <source>perlirix</source>
          <target state="translated">perlirix</target>
        </trans-unit>
        <trans-unit id="bc8b39fcc3eaa28b926da4c11a1b64282b3fe1f9" translate="yes" xml:space="preserve">
          <source>perlirix - Perl version 5 on Irix systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40baeeda147234d62237c0cb5beb17fb5401167" translate="yes" xml:space="preserve">
          <source>perlivp</source>
          <target state="translated">perlivp</target>
        </trans-unit>
        <trans-unit id="b3f36fd620984012e167a7eac4647f9a8dbff828" translate="yes" xml:space="preserve">
          <source>perlivp - Perl Installation Verification Procedure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801e74e0a91b81f1d6553c34e9af54dd62ac8102" translate="yes" xml:space="preserve">
          <source>perllexwarn</source>
          <target state="translated">perllexwarn</target>
        </trans-unit>
        <trans-unit id="6d9b7e58e8654a82882d09b44feb293ed4fd8459" translate="yes" xml:space="preserve">
          <source>perllexwarn - Perl Lexical Warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b5efa517d74a3d7d245c62b0b9f97bdf7e22a0" translate="yes" xml:space="preserve">
          <source>perllinux</source>
          <target state="translated">perllinux</target>
        </trans-unit>
        <trans-unit id="ac1fb1a75521b325b5fe3caa8f06e2ec71980005" translate="yes" xml:space="preserve">
          <source>perllinux - Perl version 5 on Linux systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98df0e35e4e6828a70b40d5bbe8ac60962c43448" translate="yes" xml:space="preserve">
          <source>perllocale</source>
          <target state="translated">perllocale</target>
        </trans-unit>
        <trans-unit id="5e227ad9d62b6937f3a327536315ddccbe29f209" translate="yes" xml:space="preserve">
          <source>perllocale - Perl locale handling (internationalization and localization)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3e803d4f75d40ac44f6fd00066eaf32b14165f" translate="yes" xml:space="preserve">
          <source>perllol</source>
          <target state="translated">perllol</target>
        </trans-unit>
        <trans-unit id="9dd05f0136beb2e0770e5c37d5292014264b8413" translate="yes" xml:space="preserve">
          <source>perllol - Manipulating Arrays of Arrays in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66eecab2f98018863226304a030f4221965aaed" translate="yes" xml:space="preserve">
          <source>perlmacos</source>
          <target state="translated">perlmacos</target>
        </trans-unit>
        <trans-unit id="6dcff2109273b656139450a6386641f076f6f7ee" translate="yes" xml:space="preserve">
          <source>perlmacos - Perl under Mac OS (Classic)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633938a486fa66aae10f521bcbdabdc5a5a1a6e5" translate="yes" xml:space="preserve">
          <source>perlmacosx</source>
          <target state="translated">perlmacosx</target>
        </trans-unit>
        <trans-unit id="46d47024e8ea75e9b40844772852e66c6571e001" translate="yes" xml:space="preserve">
          <source>perlmacosx - Perl under Mac OS X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f06c1f519eea30df821d2b1863e2158df7a743" translate="yes" xml:space="preserve">
          <source>perlmain.c</source>
          <target state="translated">perlmain.c</target>
        </trans-unit>
        <trans-unit id="ff0277a50b96c115ea1d212d15ef39c8c1bc2746" translate="yes" xml:space="preserve">
          <source>perlmain.o</source>
          <target state="translated">perlmain.o</target>
        </trans-unit>
        <trans-unit id="e57c3f7ed489ab5bd7aaed566f81361419a99b73" translate="yes" xml:space="preserve">
          <source>perlmod</source>
          <target state="translated">perlmod</target>
        </trans-unit>
        <trans-unit id="4d1b639e8fdef3f83c23b241c996044d9c1133db" translate="yes" xml:space="preserve">
          <source>perlmod - Perl modules (packages and symbol tables)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05dfa1745fe1ea2b82a290e0f31811f06b0872d0" translate="yes" xml:space="preserve">
          <source>perlmodinstall</source>
          <target state="translated">perlmodinstall</target>
        </trans-unit>
        <trans-unit id="ca2bbf665e17c2f71139713aa50ef81edfb41b81" translate="yes" xml:space="preserve">
          <source>perlmodinstall - Installing CPAN Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3baec7d63286d9c4a7658e48dfeb49e933093b96" translate="yes" xml:space="preserve">
          <source>perlmodlib</source>
          <target state="translated">perlmodlib</target>
        </trans-unit>
        <trans-unit id="224974dcabd50c66375d527c45ba58aefbb4c922" translate="yes" xml:space="preserve">
          <source>perlmodlib - constructing new Perl modules and finding existing ones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e5f227459dfc5176460aff5a4d7c5bef4c7e47" translate="yes" xml:space="preserve">
          <source>perlmodstyle</source>
          <target state="translated">perlmodstyle</target>
        </trans-unit>
        <trans-unit id="3f3c9ab797c1387a8bfc095d9a5897cb435cbb88" translate="yes" xml:space="preserve">
          <source>perlmodstyle - Perl module style guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e26d26cb668ca2bdeb32c74971b4b79c0ac35a" translate="yes" xml:space="preserve">
          <source>perlmroapi</source>
          <target state="translated">perlmroapi</target>
        </trans-unit>
        <trans-unit id="6d61da5a33cfcd9762a3074077664a097daa859e" translate="yes" xml:space="preserve">
          <source>perlmroapi - Perl method resolution plugin interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e850cbbe6047515278ee2007d9acd594ee9fec7a" translate="yes" xml:space="preserve">
          <source>perlnetware</source>
          <target state="translated">perlnetware</target>
        </trans-unit>
        <trans-unit id="26162c8ad9e7ea39a6da7e25fe263c469f7ad2c7" translate="yes" xml:space="preserve">
          <source>perlnetware - Perl for NetWare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19254121bb165b0461758b124ba74f00ed663dc7" translate="yes" xml:space="preserve">
          <source>perlnewmod</source>
          <target state="translated">perlnewmod</target>
        </trans-unit>
        <trans-unit id="51d1b77dee92c6295287fd379d57749e11c7370c" translate="yes" xml:space="preserve">
          <source>perlnewmod - preparing a new module for distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf77c68fa1c4d447364961d0815b6a82d2e45fa" translate="yes" xml:space="preserve">
          <source>perlnumber</source>
          <target state="translated">perlnumber</target>
        </trans-unit>
        <trans-unit id="8f6e588ff48a1ab9a5de7a67e2cdee5d13f1eeda" translate="yes" xml:space="preserve">
          <source>perlnumber - semantics of numbers and numeric operations in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314ef0ec905ec3d4d4556c8146ea88932ae8217f" translate="yes" xml:space="preserve">
          <source>perlobj</source>
          <target state="translated">perlobj</target>
        </trans-unit>
        <trans-unit id="3589dcd7eca70811d041fe4905e9067bfc22c7df" translate="yes" xml:space="preserve">
          <source>perlobj - Perl object reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129adc7076f9da244876470cf9862a4c3378f68c" translate="yes" xml:space="preserve">
          <source>perlootut</source>
          <target state="translated">perlootut</target>
        </trans-unit>
        <trans-unit id="418ed9eabcccccab57a125fd680b96c463e06185" translate="yes" xml:space="preserve">
          <source>perlootut - Object-Oriented Programming in Perl Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7625d46bb13bbbb1214b23993bd7bfe9fb9b8d00" translate="yes" xml:space="preserve">
          <source>perlop</source>
          <target state="translated">perlop</target>
        </trans-unit>
        <trans-unit id="c60bd832fea813668b38f946df45c5bb3bb2ecb2" translate="yes" xml:space="preserve">
          <source>perlop - Perl operators and precedence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6121bd6fcfe9d19be8e6d70078fb0bf536255f" translate="yes" xml:space="preserve">
          <source>perlop(3)</source>
          <target state="translated">perlop(3)</target>
        </trans-unit>
        <trans-unit id="c7a27e447c069e9dd547b1176ff959249d9ee4d9" translate="yes" xml:space="preserve">
          <source>perlopenbsd</source>
          <target state="translated">perlopenbsd</target>
        </trans-unit>
        <trans-unit id="cb615687aa98bc9c8acbb5c7774de83762033558" translate="yes" xml:space="preserve">
          <source>perlopenbsd - Perl version 5 on OpenBSD systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67b83192293636c0f29850eec0ada1770667735" translate="yes" xml:space="preserve">
          <source>perlopentut</source>
          <target state="translated">perlopentut</target>
        </trans-unit>
        <trans-unit id="1124bf4e1d810361d24776466b4f1c7fba8cb058" translate="yes" xml:space="preserve">
          <source>perlopentut - simple recipes for opening files and pipes in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e03fa937ea7438653779402e8ae26804bd6db01" translate="yes" xml:space="preserve">
          <source>perlos2</source>
          <target state="translated">perlos2</target>
        </trans-unit>
        <trans-unit id="2d985a3abf4e829bc7500eda401bb2d689dcecae" translate="yes" xml:space="preserve">
          <source>perlos2 - Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3474ea2e88c189b2e749b85096709c3e7a1583" translate="yes" xml:space="preserve">
          <source>perlos390</source>
          <target state="translated">perlos390</target>
        </trans-unit>
        <trans-unit id="324b5832b6953cefbb793e394b1afb306e494f0b" translate="yes" xml:space="preserve">
          <source>perlos390 - building and installing Perl for OS/390 and z/OS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7509056b6c26b47c43d6f5873f16296e292ddd" translate="yes" xml:space="preserve">
          <source>perlos400</source>
          <target state="translated">perlos400</target>
        </trans-unit>
        <trans-unit id="7d9ff9ed9761d0b3162d1ad59daafb0a28ddedc6" translate="yes" xml:space="preserve">
          <source>perlos400 - Perl version 5 on OS/400</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef666b55c52beb0c28226c7d13a87ab8dd54bae" translate="yes" xml:space="preserve">
          <source>perlpacktut</source>
          <target state="translated">perlpacktut</target>
        </trans-unit>
        <trans-unit id="4f959ed6afc1b1e5d9426d5fe3078caf8cbe1e99" translate="yes" xml:space="preserve">
          <source>perlpacktut - tutorial on &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c2efba60415b2dd43345c3ffce3e7b6f4213a6" translate="yes" xml:space="preserve">
          <source>perlpath.U</source>
          <target state="translated">perlpath.U</target>
        </trans-unit>
        <trans-unit id="2ae06586493c9bfb8b1ddac21f6e9b386769318e" translate="yes" xml:space="preserve">
          <source>perlperf</source>
          <target state="translated">perlperf</target>
        </trans-unit>
        <trans-unit id="d9b0edcb20b216241bd695d30510817972eb8c39" translate="yes" xml:space="preserve">
          <source>perlperf - Perl Performance and Optimization Techniques</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f339c5b390e434e313bd69ad5b31222e4959f45" translate="yes" xml:space="preserve">
          <source>perlplan9</source>
          <target state="translated">perlplan9</target>
        </trans-unit>
        <trans-unit id="89c259e9eeee451b606cc52f3653bc30bc7f23c2" translate="yes" xml:space="preserve">
          <source>perlplan9 - Plan 9-specific documentation for Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f67794f77b25597500a35e14fcf272876454f1c" translate="yes" xml:space="preserve">
          <source>perlpod</source>
          <target state="translated">perlpod</target>
        </trans-unit>
        <trans-unit id="b5648129b0b79b0a4a6a6bd69de651c404f43d38" translate="yes" xml:space="preserve">
          <source>perlpod - the Plain Old Documentation format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ae7c605e64cd50754eea67aa88947fa7eaeeda" translate="yes" xml:space="preserve">
          <source>perlpod(1)</source>
          <target state="translated">perlpod(1)</target>
        </trans-unit>
        <trans-unit id="6c1d35c63aa386266ed640a23cf2d5d19ffa8366" translate="yes" xml:space="preserve">
          <source>perlpodspec</source>
          <target state="translated">perlpodspec</target>
        </trans-unit>
        <trans-unit id="3d860b8dc657203adc5b9085e5e8624fed62fd8c" translate="yes" xml:space="preserve">
          <source>perlpodspec - Plain Old Documentation: format specification and notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d747572a54d5752f8835bdf55aa05c775fa7b8" translate="yes" xml:space="preserve">
          <source>perlpodstyle</source>
          <target state="translated">perlpodstyle</target>
        </trans-unit>
        <trans-unit id="8ac10b5b70d5c0b6ed4a167debfba13cd9990ef2" translate="yes" xml:space="preserve">
          <source>perlpodstyle - Perl POD style guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de29a48d77ca6cf204664680e727929df1b7e0b" translate="yes" xml:space="preserve">
          <source>perlpodstyle(1)</source>
          <target state="translated">perlpodstyle(1)</target>
        </trans-unit>
        <trans-unit id="e8b4c00b7894bb5d8d85fdf7a8c2ae1944063f9f" translate="yes" xml:space="preserve">
          <source>perlpolicy</source>
          <target state="translated">perlpolicy</target>
        </trans-unit>
        <trans-unit id="ad7174a367b5c5e9711458d14918fe24256403dd" translate="yes" xml:space="preserve">
          <source>perlpolicy - Various and sundry policies and commitments related to the Perl core</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c0c1b81b109e9b9a727e669d4b5d3b9cad5bde" translate="yes" xml:space="preserve">
          <source>perlport</source>
          <target state="translated">perlport</target>
        </trans-unit>
        <trans-unit id="a8cd2156d1ebf6679d6b3bf07ebdc8af9f3c5efa" translate="yes" xml:space="preserve">
          <source>perlport - Writing portable Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5950b25962ccfec3cd378790bd2a2ad969b04f" translate="yes" xml:space="preserve">
          <source>perlpragma</source>
          <target state="translated">perlpragma</target>
        </trans-unit>
        <trans-unit id="b7768877ab0508fc91afcc2c44daba261db0104d" translate="yes" xml:space="preserve">
          <source>perlpragma - how to write a user pragma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f601af17086c4ec26dc6c8f06a7ea80fcb6fb7" translate="yes" xml:space="preserve">
          <source>perlqnx</source>
          <target state="translated">perlqnx</target>
        </trans-unit>
        <trans-unit id="8f10f38864d63895a80fae1bd269695e4eb0b0a9" translate="yes" xml:space="preserve">
          <source>perlqnx - Perl version 5 on QNX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b677a020f3a460550ee7606b1a49a1a4454bd74" translate="yes" xml:space="preserve">
          <source>perlre</source>
          <target state="translated">perlre</target>
        </trans-unit>
        <trans-unit id="0d1f07140c943c6f650accbdef5a401a0c897db6" translate="yes" xml:space="preserve">
          <source>perlre - Perl regular expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d8366e52025508c50e5a447edd4fc1ac8802e5" translate="yes" xml:space="preserve">
          <source>perlreapi</source>
          <target state="translated">perlreapi</target>
        </trans-unit>
        <trans-unit id="bed5d27bd623273139bcd641fb73eb639b414eba" translate="yes" xml:space="preserve">
          <source>perlreapi - Perl regular expression plugin interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004500a1679f3b92ca805595bd062c148f34cbe9" translate="yes" xml:space="preserve">
          <source>perlrebackslash</source>
          <target state="translated">perlrebackslash</target>
        </trans-unit>
        <trans-unit id="425590f84d731ad298bad2eb98ee88d479406828" translate="yes" xml:space="preserve">
          <source>perlrebackslash - Perl Regular Expression Backslash Sequences and Escapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398654cbed8789f771738c78e89839099a165783" translate="yes" xml:space="preserve">
          <source>perlrecharclass</source>
          <target state="translated">perlrecharclass</target>
        </trans-unit>
        <trans-unit id="f2cb62ff62dedff13828213f72cf5487c61c0ac9" translate="yes" xml:space="preserve">
          <source>perlrecharclass - Perl Regular Expression Character Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369cf31c824a7cd745c41967dc7528add2d4ccbf" translate="yes" xml:space="preserve">
          <source>perlref</source>
          <target state="translated">perlref</target>
        </trans-unit>
        <trans-unit id="312d3ae4b0d46b8d95c125d4ae89a4f079305450" translate="yes" xml:space="preserve">
          <source>perlref - Perl references and nested data structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a19654f3d5eb3b76f5f08be09741c80d39211e1" translate="yes" xml:space="preserve">
          <source>perlreftut</source>
          <target state="translated">perlreftut</target>
        </trans-unit>
        <trans-unit id="398427a820bcb044bebe4d4c738777ad1437bf84" translate="yes" xml:space="preserve">
          <source>perlreftut - Mark's very short tutorial about references</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e74ca17ba0792df831217b2c56131e5801b5de" translate="yes" xml:space="preserve">
          <source>perlreguts</source>
          <target state="translated">perlreguts</target>
        </trans-unit>
        <trans-unit id="d6ec72817d27598f62bd5e216a4c64291f1c91b0" translate="yes" xml:space="preserve">
          <source>perlreguts - Description of the Perl regular expression engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c948451c96a44f7c6b07b22dfff628f960f38d8" translate="yes" xml:space="preserve">
          <source>perlrepository</source>
          <target state="translated">perlrepository</target>
        </trans-unit>
        <trans-unit id="2cb63a6ff16d2f54ac8b91400cbddddb43307334" translate="yes" xml:space="preserve">
          <source>perlrepository - Links to current information on the Perl source repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0af654e2eefca648be7bc38fb19a647123e090a" translate="yes" xml:space="preserve">
          <source>perlrequick</source>
          <target state="translated">perlrequick</target>
        </trans-unit>
        <trans-unit id="90b472887cbc9f8edf19f1c9df08b0f24a1314e5" translate="yes" xml:space="preserve">
          <source>perlrequick - Perl regular expressions quick start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46bffe2325e78e402926e84dbd8c8579fc2f079" translate="yes" xml:space="preserve">
          <source>perlreref</source>
          <target state="translated">perlreref</target>
        </trans-unit>
        <trans-unit id="085c83af3fd5510a705c6166cfb60a80c777fec4" translate="yes" xml:space="preserve">
          <source>perlreref - Perl Regular Expressions Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee057a4ffea0c1d52b3ee41386608de3f8f59b13" translate="yes" xml:space="preserve">
          <source>perlretut</source>
          <target state="translated">perlretut</target>
        </trans-unit>
        <trans-unit id="54f4ab380989cf3a1d6d4e38938934dd1a6da736" translate="yes" xml:space="preserve">
          <source>perlretut - Perl regular expressions tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6350f058169c2be68684e75bd8c12de09a3d6d91" translate="yes" xml:space="preserve">
          <source>perlriscos</source>
          <target state="translated">perlriscos</target>
        </trans-unit>
        <trans-unit id="57a24fdff5090bc3ef366f1cc58688966062ffdb" translate="yes" xml:space="preserve">
          <source>perlriscos - Perl version 5 for RISC OS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff6d4dc33cd1a85e39228688b710aef42cd81b3" translate="yes" xml:space="preserve">
          <source>perlrun</source>
          <target state="translated">perlrun</target>
        </trans-unit>
        <trans-unit id="8f729414120063d0b3692ca5a4ed5af47918b411" translate="yes" xml:space="preserve">
          <source>perlrun - how to execute the Perl interpreter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a1e9dbaeca3ebaf56fcba55b8f0365c58a526d" translate="yes" xml:space="preserve">
          <source>perlsec</source>
          <target state="translated">perlsec</target>
        </trans-unit>
        <trans-unit id="532537703a7e6d2f7c05e2691a6f86f3d46e624a" translate="yes" xml:space="preserve">
          <source>perlsec - Perl security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa76fa19c0020b3fcce54bb6092e67728e96ee26" translate="yes" xml:space="preserve">
          <source>perlsolaris</source>
          <target state="translated">perlsolaris</target>
        </trans-unit>
        <trans-unit id="4eb8f2137f7afed4e8a4c0e3100baf72e193c4d1" translate="yes" xml:space="preserve">
          <source>perlsolaris - Perl version 5 on Solaris systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1600d9d82c4955168ea36ec5dffec52990007cc3" translate="yes" xml:space="preserve">
          <source>perlsource</source>
          <target state="translated">perlsource</target>
        </trans-unit>
        <trans-unit id="fa14bcec1a4d119dcad89ecc0ee36fe9bbfa05d7" translate="yes" xml:space="preserve">
          <source>perlsource - A guide to the Perl source tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b28a581182ddf84fba59681a621027b7d03f3ac" translate="yes" xml:space="preserve">
          <source>perlstyle</source>
          <target state="translated">perlstyle</target>
        </trans-unit>
        <trans-unit id="989a6e4ecd377d848da0d1070d1dbafd44bff823" translate="yes" xml:space="preserve">
          <source>perlstyle - Perl style guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccbe65994a96c156025485749c8994fd9623378" translate="yes" xml:space="preserve">
          <source>perlsub</source>
          <target state="translated">perlsub</target>
        </trans-unit>
        <trans-unit id="32b05a9ab29a6b7b78adb10fec4f8595ba06ad91" translate="yes" xml:space="preserve">
          <source>perlsub - Perl subroutines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525ca92fdd31e253beea739e9f40eb0ed48496a2" translate="yes" xml:space="preserve">
          <source>perlsymbian</source>
          <target state="translated">perlsymbian</target>
        </trans-unit>
        <trans-unit id="f1fc3bdff09d8c4f2e305adab4732a41528b8828" translate="yes" xml:space="preserve">
          <source>perlsymbian - Perl version 5 on Symbian OS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5ea72b4a2628e3908b4f45dbd2c384c7803d8a" translate="yes" xml:space="preserve">
          <source>perlsyn</source>
          <target state="translated">perlsyn</target>
        </trans-unit>
        <trans-unit id="b41a2c0064bd95ea2ae54c8e8d345337b95fe874" translate="yes" xml:space="preserve">
          <source>perlsyn - Perl syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff9180a65cfaee1d796712eddea5578074dd31e" translate="yes" xml:space="preserve">
          <source>perlthanks</source>
          <target state="translated">perlthanks</target>
        </trans-unit>
        <trans-unit id="1af25ee444faa4b9885ef011b689f828810a0904" translate="yes" xml:space="preserve">
          <source>perlthrtut</source>
          <target state="translated">perlthrtut</target>
        </trans-unit>
        <trans-unit id="a5d553491aa3018c4ea631af6500f0aefe80a02f" translate="yes" xml:space="preserve">
          <source>perlthrtut - Tutorial on threads in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee8ac403541d6ba798f0e620c08e2d5079d837d" translate="yes" xml:space="preserve">
          <source>perltie</source>
          <target state="translated">perltie</target>
        </trans-unit>
        <trans-unit id="ceb1c8bf1c968ed8fb9846cedfcc70d757181e46" translate="yes" xml:space="preserve">
          <source>perltie - how to hide an object class in a simple variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a321726bad90bad5e2e9748c822fe24369f037a" translate="yes" xml:space="preserve">
          <source>perltooc</source>
          <target state="translated">perltooc</target>
        </trans-unit>
        <trans-unit id="7ecfcd331d61251c53a5e64d459b1454337d661c" translate="yes" xml:space="preserve">
          <source>perltooc - Links to information on object-oriented programming in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba11a219ae42c3d81200bf459250e3b98092ee67" translate="yes" xml:space="preserve">
          <source>perltoot</source>
          <target state="translated">perltoot</target>
        </trans-unit>
        <trans-unit id="54405bb72cd57d7afec4deca6697d7f37f3e0d71" translate="yes" xml:space="preserve">
          <source>perltoot - Links to information on object-oriented programming in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cce982906896beb6f42a579d3599c9febb21db3" translate="yes" xml:space="preserve">
          <source>perltrap</source>
          <target state="translated">perltrap</target>
        </trans-unit>
        <trans-unit id="6b06b72dd2d30fed516b9da1f0139ed299160726" translate="yes" xml:space="preserve">
          <source>perltrap - Perl traps for the unwary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff083d973e453c8539659149644481ab26d1b7a" translate="yes" xml:space="preserve">
          <source>perltru64</source>
          <target state="translated">perltru64</target>
        </trans-unit>
        <trans-unit id="d27a50abe261d4e86c0109ef7ec71f352a084e08" translate="yes" xml:space="preserve">
          <source>perltru64 - Perl version 5 on Tru64 (formerly known as Digital UNIX formerly known as DEC OSF/1) systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09a0e86d4d2c5d75ce21f2eace872861b0a8d17" translate="yes" xml:space="preserve">
          <source>perlunicode</source>
          <target state="translated">perlunicode</target>
        </trans-unit>
        <trans-unit id="0ba098ecf1c73b7d313b8a2e799e30747b79ae4a" translate="yes" xml:space="preserve">
          <source>perlunicode - Unicode support in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57bbc9f600ba5afee1faeab0e3010712777f177" translate="yes" xml:space="preserve">
          <source>perlunicook</source>
          <target state="translated">perlunicook</target>
        </trans-unit>
        <trans-unit id="0e079065b86abc152e7ad2d15c2f09ce2c9648c2" translate="yes" xml:space="preserve">
          <source>perlunicook - cookbookish examples of handling Unicode in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15bf03b709cb5ef6f043793785943fbbb1e1082" translate="yes" xml:space="preserve">
          <source>perlunifaq</source>
          <target state="translated">perlunifaq</target>
        </trans-unit>
        <trans-unit id="ada6c9951009b597f5a65806ed68637609f17e26" translate="yes" xml:space="preserve">
          <source>perlunifaq - Perl Unicode FAQ</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bcb331bd7f1f8e59c06ecada6f981b9f74f063" translate="yes" xml:space="preserve">
          <source>perluniintro</source>
          <target state="translated">perluniintro</target>
        </trans-unit>
        <trans-unit id="fa3387fa4bf7f185cd88afc54d41468370a5a4e8" translate="yes" xml:space="preserve">
          <source>perluniintro - Perl Unicode introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a738c92594491e816002eb5c7c332cdb1b219220" translate="yes" xml:space="preserve">
          <source>perluniprops</source>
          <target state="translated">perluniprops</target>
        </trans-unit>
        <trans-unit id="445e89ff169000cbd7e24db8e9b266fc17b95002" translate="yes" xml:space="preserve">
          <source>perluniprops - Index of Unicode Version 7.0.0 character properties in Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33839fbdd1a3d5521e3f7cb54eab56654e84c038" translate="yes" xml:space="preserve">
          <source>perlunitut</source>
          <target state="translated">perlunitut</target>
        </trans-unit>
        <trans-unit id="fdeffea63832d4a41354fde3205215dc61715758" translate="yes" xml:space="preserve">
          <source>perlunitut - Perl Unicode Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0599ca5d40d47ec3f29b4240bc2f0a14c7bd42" translate="yes" xml:space="preserve">
          <source>perlunitut isn't really a Unicode tutorial, is it?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c3bab4a6ab8657b83de563e18bef929467215a" translate="yes" xml:space="preserve">
          <source>perlutil</source>
          <target state="translated">perlutil</target>
        </trans-unit>
        <trans-unit id="78783712a2b34b64b447f6d563ea0172cc07fbbe" translate="yes" xml:space="preserve">
          <source>perlutil - utilities packaged with the Perl distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0531b4e29c78761b260b3ddac6b82950fa5387e5" translate="yes" xml:space="preserve">
          <source>perlvar</source>
          <target state="translated">perlvar</target>
        </trans-unit>
        <trans-unit id="8ce980e5c2a803c3c3fe10a30b2378c30b82f116" translate="yes" xml:space="preserve">
          <source>perlvar - Perl predefined variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de586a802327c93d124b2a3f38e90c50c1998d20" translate="yes" xml:space="preserve">
          <source>perlvar/$</source>
          <target state="translated">perlvar/$</target>
        </trans-unit>
        <trans-unit id="10374a60d5f350c4897cdc26e1d80f781963118d" translate="yes" xml:space="preserve">
          <source>perlvars.h</source>
          <target state="translated">perlvars.h</target>
        </trans-unit>
        <trans-unit id="1255a9b1a5ed4f4e50b92836690e59c0659f1446" translate="yes" xml:space="preserve">
          <source>perlvms</source>
          <target state="translated">perlvms</target>
        </trans-unit>
        <trans-unit id="62a4f2344c76c38d1f0d065d86daff75fdad128d" translate="yes" xml:space="preserve">
          <source>perlvms - VMS-specific documentation for Perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f1bf915a1109b369d1108f8fd50fc15154c467" translate="yes" xml:space="preserve">
          <source>perlvos</source>
          <target state="translated">perlvos</target>
        </trans-unit>
        <trans-unit id="579b0cf72378f6eac7e3778b69c278c291d80c31" translate="yes" xml:space="preserve">
          <source>perlvos - Perl for Stratus OpenVOS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ae6874eaead216e6b15436bc24763b6ddb36f6" translate="yes" xml:space="preserve">
          <source>perlwin32</source>
          <target state="translated">perlwin32</target>
        </trans-unit>
        <trans-unit id="1c19c0eed4ce8cef57990b26e60c382ae8c9fd6f" translate="yes" xml:space="preserve">
          <source>perlwin32 - Perl under Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389f7d9e8590acde7f33a34d676992079ef2ad61" translate="yes" xml:space="preserve">
          <source>perlxs</source>
          <target state="translated">perlxs</target>
        </trans-unit>
        <trans-unit id="78b9461d3ed76eab59c5ec98fc79e1fec3fddff6" translate="yes" xml:space="preserve">
          <source>perlxs - XS language reference manual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077e53bf53310b6e3f0f225cb920a030bac24ac0" translate="yes" xml:space="preserve">
          <source>perlxsi.c</source>
          <target state="translated">perlxsi.c</target>
        </trans-unit>
        <trans-unit id="2e056944e62798e2d0d3b19fd0ebc75b4d9aa0da" translate="yes" xml:space="preserve">
          <source>perlxstut</source>
          <target state="translated">perlxstut</target>
        </trans-unit>
        <trans-unit id="b2ac85634f6b2ec26bad93a97172dcea82876f83" translate="yes" xml:space="preserve">
          <source>perlxstut - Tutorial for writing XSUBs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d387df22c8ee8651ca4866ca0cdf930da41b2219" translate="yes" xml:space="preserve">
          <source>perlxstypemap</source>
          <target state="translated">perlxstypemap</target>
        </trans-unit>
        <trans-unit id="97a8869f95bc4f1d06a48b0e83c6a07c13ce2571" translate="yes" xml:space="preserve">
          <source>perlxstypemap - Perl XS C/Perl type mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fb13308d33b6c9bb8e1730e7f011b6b91f8361" translate="yes" xml:space="preserve">
          <source>perlxv.U</source>
          <target state="translated">perlxv.U</target>
        </trans-unit>
        <trans-unit id="1fdce5630addc90b5af5f93d3308b604bc2ed06c" translate="yes" xml:space="preserve">
          <source>perlxvf.U</source>
          <target state="translated">perlxvf.U</target>
        </trans-unit>
        <trans-unit id="2c69a8b0cf82a9b8e95c312b5043b43e33b903bb" translate="yes" xml:space="preserve">
          <source>perly.c</source>
          <target state="translated">perly.c</target>
        </trans-unit>
        <trans-unit id="d5233f9bc4bcc3b1fda0f325dbc5b594fe934c7c" translate="yes" xml:space="preserve">
          <source>perly.y</source>
          <target state="translated">perly.y</target>
        </trans-unit>
        <trans-unit id="3d061e29bb060f863c5ce001df352117c5593090" translate="yes" xml:space="preserve">
          <source>perm</source>
          <target state="translated">perm</target>
        </trans-unit>
        <trans-unit id="5c087031f9463d11fef3ea2418203b21963717ba" translate="yes" xml:space="preserve">
          <source>permit (OP, ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3b3b355d1ea7d6bef0fde6a089fa51d0746685" translate="yes" xml:space="preserve">
          <source>permit_only (OP, ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cfbbb1b566c221fa14efd970545c5fa44252e4c" translate="yes" xml:space="preserve">
          <source>persistent.c</source>
          <target state="translated">persistent.c</target>
        </trans-unit>
        <trans-unit id="444bbd0ad72a49a03573927eb046254e08341fe3" translate="yes" xml:space="preserve">
          <source>phi</source>
          <target state="translated">phi</target>
        </trans-unit>
        <trans-unit id="b02e5b66ace6dc3b459be661062c452b50ea1c13" translate="yes" xml:space="preserve">
          <source>pi</source>
          <target state="translated">pi</target>
        </trans-unit>
        <trans-unit id="f23b0ee5e714ea7767eb344f78c5bfdda9fb09e1" translate="yes" xml:space="preserve">
          <source>pi/2</source>
          <target state="translated">pi/2</target>
        </trans-unit>
        <trans-unit id="e2ba178b8e8da5462b49e6aa789ad36209cfeab3" translate="yes" xml:space="preserve">
          <source>pi/2 + k * pi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f44a57a7ae7bb6f025e039d9eedc5cea0f4aaf2" translate="yes" xml:space="preserve">
          <source>piconv</source>
          <target state="translated">piconv</target>
        </trans-unit>
        <trans-unit id="2455fe692a2cc486b9e51a5e99de66490080097f" translate="yes" xml:space="preserve">
          <source>piconv -- iconv(1), reinvented in perl</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dac6da464a82e78e0f1281656520fff9e197cf3" translate="yes" xml:space="preserve">
          <source>piconv converts the character encoding of either STDIN or files specified in the argument and prints out to STDOUT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63df594ab6c0653f26505b7353e3f5c1f827c498" translate="yes" xml:space="preserve">
          <source>pidtype.U</source>
          <target state="translated">pidtype.U</target>
        </trans-unit>
        <trans-unit id="c7cb9d17361e14cea11eb4fcfcfa4d421523fa95" translate="yes" xml:space="preserve">
          <source>piece of string, rather than a maximal piece. For this purpose, Larry Wall created the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa83eac6890a9a6e2273ea51d6f2f2915b1a019" translate="yes" xml:space="preserve">
          <source>pipe</source>
          <target state="translated">pipe</target>
        </trans-unit>
        <trans-unit id="b52a00db7cfe55b92566bd2ea12c3903e124bf09" translate="yes" xml:space="preserve">
          <source>pipe READHANDLE,WRITEHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686ad86e04f57f0fa88dd0b927dcbffe4237866d" translate="yes" xml:space="preserve">
          <source>pjfarley@banet.net</source>
          <target state="translated">pjfarley@banet.net</target>
        </trans-unit>
        <trans-unit id="68ee142eb335eecce9d9195bcdeda4d165e3e8bd" translate="yes" xml:space="preserve">
          <source>pl2bat.bat</source>
          <target state="translated">pl2bat.bat</target>
        </trans-unit>
        <trans-unit id="d1056831f373b03b8e97cf7cfca82c5528e0bbac" translate="yes" xml:space="preserve">
          <source>pl2cmd</source>
          <target state="translated">pl2cmd</target>
        </trans-unit>
        <trans-unit id="2ec081168ca10c77af81365f806a9ae9ba7dffeb" translate="yes" xml:space="preserve">
          <source>plan methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3fdcd7bc58b8980f3082e6b85d83a3dd263506" translate="yes" xml:space="preserve">
          <source>plane (0x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86b7d790e221c0dbd281944c8502f0692b5d25d" translate="yes" xml:space="preserve">
          <source>platform_constants</source>
          <target state="translated">platform_constants</target>
        </trans-unit>
        <trans-unit id="4347cc48d20f9ff6f6e132dd04ece3025ffad474" translate="yes" xml:space="preserve">
          <source>please ignore it since it is nothing serious (the build process of renames the Perl makedef.pl as nomakedef.pl to avoid confusing it with a makedef.pl of the SDK).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1555832da486f82614c64cb0d45477ee059e3f9f" translate="yes" xml:space="preserve">
          <source>plus &lt;code&gt;on_rgb&lt;i&gt;RGB&lt;/i&gt;&lt;/code&gt; for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7067dd149fd72f352a6dcb59dcdf2cdb17d16a3" translate="yes" xml:space="preserve">
          <source>plus &lt;code&gt;rgb&lt;i&gt;RGB&lt;/i&gt;&lt;/code&gt; for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dfb09ff78b3b2da53ad6f7ecd3918ce0326687d" translate="yes" xml:space="preserve">
          <source>pmqs@cpan.org</source>
          <target state="translated">pmqs@cpan.org</target>
        </trans-unit>
        <trans-unit id="13a5d51391f6a6ff5a94394b0dee6a35bf66fd73" translate="yes" xml:space="preserve">
          <source>po</source>
          <target state="translated">po</target>
        </trans-unit>
        <trans-unit id="f2836420a2c6e5eadf4a8f0bcc60d09679ebb7d3" translate="yes" xml:space="preserve">
          <source>pod.idx</source>
          <target state="translated">pod.idx</target>
        </trans-unit>
        <trans-unit id="3075d19461f14e8187cc48f12a1acfa62ac4bec3" translate="yes" xml:space="preserve">
          <source>pod/</source>
          <target state="translated">pod/</target>
        </trans-unit>
        <trans-unit id="29ca9c041915979ae7fcd4204967352443bd6d4a" translate="yes" xml:space="preserve">
          <source>pod/perlamiga.pod</source>
          <target state="translated">pod/perlamiga.pod</target>
        </trans-unit>
        <trans-unit id="9b0af0f0d27cde4e7021f3707f13cc2036c66d75" translate="yes" xml:space="preserve">
          <source>pod/perldelta.pod</source>
          <target state="translated">pod/perldelta.pod</target>
        </trans-unit>
        <trans-unit id="bdf22497edec5bff29d47bd371967a7d5b269aa8" translate="yes" xml:space="preserve">
          <source>pod/perlfunc</source>
          <target state="translated">pod/perlfunc</target>
        </trans-unit>
        <trans-unit id="e0ba0b52ec975591960df4764929ac4ff174f317" translate="yes" xml:space="preserve">
          <source>pod/perlfunc.pod</source>
          <target state="translated">pod/perlfunc.pod</target>
        </trans-unit>
        <trans-unit id="b690369ff6bb9c721376dd64c3783f1056d31310" translate="yes" xml:space="preserve">
          <source>pod/perlos2.pod</source>
          <target state="translated">pod/perlos2.pod</target>
        </trans-unit>
        <trans-unit id="8bf9dfdbb4147b6f2390648e808d3e159c1d0a9f" translate="yes" xml:space="preserve">
          <source>pod2html</source>
          <target state="translated">pod2html</target>
        </trans-unit>
        <trans-unit id="94a728c637bac0123a8cd65f09a49db4b847f4aa" translate="yes" xml:space="preserve">
          <source>pod2html - convert .pod files to .html files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5953ee84dd3c61c382841178b47b7e4001896907" translate="yes" xml:space="preserve">
          <source>pod2html takes the following arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="636163b4a062e6fb24739ff2b2c4c63e9c69a3a7" translate="yes" xml:space="preserve">
          <source>pod2ipf(1)</source>
          <target state="translated">pod2ipf(1)</target>
        </trans-unit>
        <trans-unit id="1e7bb66622f33f67b7d2ca88ce04018422f8905c" translate="yes" xml:space="preserve">
          <source>pod2latex</source>
          <target state="translated">pod2latex</target>
        </trans-unit>
        <trans-unit id="db5c9cae8b7db88f276c5072482fa92c013fbf7f" translate="yes" xml:space="preserve">
          <source>pod2man</source>
          <target state="translated">pod2man</target>
        </trans-unit>
        <trans-unit id="d6ace26811098ff5d0767767014575249812fd7c" translate="yes" xml:space="preserve">
          <source>pod2man - Convert POD data to formatted *roff input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7ddece8148fc831211f7310d0ea32a0f69363f" translate="yes" xml:space="preserve">
          <source>pod2man &lt;b&gt;--help&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7391026698296dfada0fe4350376352452a21fd8" translate="yes" xml:space="preserve">
          <source>pod2man [&lt;b&gt;--center&lt;/b&gt;=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454029779daf4e963a2b7583c1c44b9ee8dfe0b5" translate="yes" xml:space="preserve">
          <source>pod2man() is a function performing most of the duties of the pod2man program. Its arguments are exactly the same as pod2man as of 5.8.0 with the addition of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47fdfb06ea6da846a073e65cb213902714edafda" translate="yes" xml:space="preserve">
          <source>pod2man(1)</source>
          <target state="translated">pod2man(1)</target>
        </trans-unit>
        <trans-unit id="18a0a4e2cdbe3b6cf9437964994406ee33934190" translate="yes" xml:space="preserve">
          <source>pod2text</source>
          <target state="translated">pod2text</target>
        </trans-unit>
        <trans-unit id="dca6a2e905c05e668b6578ff3cb6f79768951d7c" translate="yes" xml:space="preserve">
          <source>pod2text - Convert POD data to formatted ASCII text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0cdb98ae60474686d78a27046d0ee0f3ad004e0" translate="yes" xml:space="preserve">
          <source>pod2text &lt;b&gt;-h&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0202f6807d0fae691dfd26afcc15a186521f3c" translate="yes" xml:space="preserve">
          <source>pod2text [&lt;b&gt;-aclostu&lt;/b&gt;] [&lt;b&gt;--code&lt;/b&gt;] [&lt;b&gt;--errors&lt;/b&gt;=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d495f74753512a793c942c625cab357755640f" translate="yes" xml:space="preserve">
          <source>pod2text(1)</source>
          <target state="translated">pod2text(1)</target>
        </trans-unit>
        <trans-unit id="a23a91c32c4e2a3821787a69d93a914613562b65" translate="yes" xml:space="preserve">
          <source>pod2usage</source>
          <target state="translated">pod2usage</target>
        </trans-unit>
        <trans-unit id="cf69bd68ad528997bc2f2bacc7dd031ff63d8551" translate="yes" xml:space="preserve">
          <source>pod2usage - print usage messages from embedded pod docs in files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b296bf56829dea2151ad2d47e1f8da9e1d5398ba" translate="yes" xml:space="preserve">
          <source>pod_find( { %opts } , @directories )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6062c8d34a35f107a032972cdbdd9b11d2ae3a" translate="yes" xml:space="preserve">
          <source>pod_where( { %opts }, $pod )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6048ee794199a1829375f0207d15be753c056e1c" translate="yes" xml:space="preserve">
          <source>podchecker</source>
          <target state="translated">podchecker</target>
        </trans-unit>
        <trans-unit id="6e8191901da2ceef9e966e208361b1506c65320e" translate="yes" xml:space="preserve">
          <source>podchecker - check the syntax of POD format documentation files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197a7f13e0546a9db9d7f4b093a7b7de85c3d980" translate="yes" xml:space="preserve">
          <source>podchecker()</source>
          <target state="translated">podchecker()</target>
        </trans-unit>
        <trans-unit id="f0d3d9593dfdad882e6f870968521159deaa9fe3" translate="yes" xml:space="preserve">
          <source>podchecker(1)</source>
          <target state="translated">podchecker(1)</target>
        </trans-unit>
        <trans-unit id="90135c32963086cae2b6ccbe5b3bde14dc972ed2" translate="yes" xml:space="preserve">
          <source>podpage in the Perl source tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735b7149e4c3e7e2aa983c7a4a806dbbfc1c41d4" translate="yes" xml:space="preserve">
          <source>podselect</source>
          <target state="translated">podselect</target>
        </trans-unit>
        <trans-unit id="b302dd18bbbe97ab4a416c58a21c250256446dc2" translate="yes" xml:space="preserve">
          <source>podselect - print selected sections of pod documentation on standard output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a935239e3df3876a6031e2b47daaac3baa2ac41" translate="yes" xml:space="preserve">
          <source>podselect()</source>
          <target state="translated">podselect()</target>
        </trans-unit>
        <trans-unit id="5698db2e68961c767c420f0c179376df643e52f7" translate="yes" xml:space="preserve">
          <source>pointing to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70601c54519a6244a78094380233c561ad0c13b5" translate="yes" xml:space="preserve">
          <source>points are checked in order, and the value obtained from the first successful lookup is returned. If the name of the &lt;code&gt;%ENV&lt;/code&gt; element contains a semi-colon, it and any characters after it are removed. These are ignored when the CRTL &lt;code&gt;environ&lt;/code&gt; array or a CLI symbol table is consulted. However, the name is looked up in a logical name table, the suffix after the semi-colon is treated as the translation index to be used for the lookup. This lets you look up successive values for search list logical names. For instance, if you say</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a5356bf0e52b0de848b8536e50ab3b6d965c9e" translate="yes" xml:space="preserve">
          <source>points to a data structure which allows tailoring of the specific interface method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c0431e7b6d3ca2f60124ff6925569af134a673" translate="yes" xml:space="preserve">
          <source>points to libperl.a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e4baa0f1ea77afdc437bf1156dc1ad4fbe9f7" translate="yes" xml:space="preserve">
          <source>points to the rest of the &lt;code&gt;refcounted_he&lt;/code&gt; chain to be attached to the new &lt;code&gt;refcounted_he&lt;/code&gt; . This function takes ownership of one reference to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd161a961c3cce4686441f8bd3064f550fbc99c0" translate="yes" xml:space="preserve">
          <source>points to the storage location where a pointer to the next function in the chain will be stored. The value of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f345d593810c7ebe4d6ea8569e514f2db642f6" translate="yes" xml:space="preserve">
          <source>points. If this causes a logical name to be created, it is defined in supervisor mode. (The same is done if an existing logical name was defined in executive or kernel mode; an existing user or supervisor mode logical name is reset to the new value.) If the value is an empty string, the logical name's translation is defined as a single &lt;code&gt;NUL&lt;/code&gt; (ASCII &lt;code&gt;\0&lt;/code&gt; ) character, since a logical name cannot translate to a zero-length string. (This restriction does not apply to CLI symbols or CRTL &lt;code&gt;environ&lt;/code&gt; values; they are set to the empty string.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e909f30aa17db28a5e19a48dcf1d2675e61779" translate="yes" xml:space="preserve">
          <source>polar</source>
          <target state="translated">polar</target>
        </trans-unit>
        <trans-unit id="7ba32a737b4e0ce5e7dcb08d763b40a101c2f20d" translate="yes" xml:space="preserve">
          <source>polar pretty-printing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697da8bbe099277ee44fc88e867dc5f7309a542a" translate="yes" xml:space="preserve">
          <source>poll(2)</source>
          <target state="translated">poll(2)</target>
        </trans-unit>
        <trans-unit id="44751cd0a65cac92d3c800742da0f21ca45292e5" translate="yes" xml:space="preserve">
          <source>polychromos</source>
          <target state="translated">polychromos</target>
        </trans-unit>
        <trans-unit id="4f197c99a78b8411f1cf48ab409a0a6d176b99b7" translate="yes" xml:space="preserve">
          <source>pop</source>
          <target state="translated">pop</target>
        </trans-unit>
        <trans-unit id="44064d0ca06f30cfc39e76e2f5e0fa6e9b1777d1" translate="yes" xml:space="preserve">
          <source>pop ARRAY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71c02fc240012ec0ffac8eda9f9dbbe9ab5b96d" translate="yes" xml:space="preserve">
          <source>pop EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e556aebdb57bcb19d02ce89fe6b4b3805e9aa5d" translate="yes" xml:space="preserve">
          <source>portable filename characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034818b9b7bf8774b5115ea5699fdffb8ee9547f" translate="yes" xml:space="preserve">
          <source>ports/</source>
          <target state="translated">ports/</target>
        </trans-unit>
        <trans-unit id="1478c028a16709cb32d8b1a69ccca032ca1d9ef5" translate="yes" xml:space="preserve">
          <source>pos</source>
          <target state="translated">pos</target>
        </trans-unit>
        <trans-unit id="139e507504c901a69ce08978f167aec27a978663" translate="yes" xml:space="preserve">
          <source>pos SCALAR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157f7b44319a9f5ecf22154a50837071b35f0d7b" translate="yes" xml:space="preserve">
          <source>position doesn't alter the path, i.e. these arguments are ignored. (When a &quot;&quot; is passed as the first argument, it has a special meaning, see (6)). This way, a colon &quot;:&quot; is handled like a &quot;.&quot; (curdir) on Unix, while an empty string &quot;&quot; is generally ignored (see &lt;code&gt;Unix-&amp;gt;canonpath()&lt;/code&gt; ). Likewise, a &quot;::&quot; is handled like a &quot;..&quot; (updir), and a &quot;:::&quot; is handled like a &quot;../..&quot; etc. E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1cd18c484213e0df32cecacc245c69446b4095" translate="yes" xml:space="preserve">
          <source>possessive quantifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ae6d9af1075c71c400fb368b99aa33b552a3af" translate="yes" xml:space="preserve">
          <source>possibility before giving up. So be careful with nested &lt;code&gt;*&lt;/code&gt; 's, &lt;code&gt;{n,m}&lt;/code&gt;'s, and &lt;code&gt;+&lt;/code&gt; 's. The book</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7c8cf9138543af696119284dd544440ef1fdbf" translate="yes" xml:space="preserve">
          <source>possible</source>
          <target state="translated">possible</target>
        </trans-unit>
        <trans-unit id="f80adca81095de6415313df6a603bfb35aa940f6" translate="yes" xml:space="preserve">
          <source>possibly</source>
          <target state="translated">possibly</target>
        </trans-unit>
        <trans-unit id="f4e37959cda4ab36fb686128bd47e1cd8c09bb26" translate="yes" xml:space="preserve">
          <source>possibly |-ed with IS_NUMBER_TRAILING.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b466094ec991a03cb95c489c19c4d75635f0ae5" translate="yes" xml:space="preserve">
          <source>post</source>
          <target state="translated">post</target>
        </trans-unit>
        <trans-unit id="8819d19069fae6b4bac183d1f16553abab16b54f" translate="yes" xml:space="preserve">
          <source>potatoes</source>
          <target state="translated">potatoes</target>
        </trans-unit>
        <trans-unit id="f0b2b2ae5e318d4b40a35c656a956b46a764f76b" translate="yes" xml:space="preserve">
          <source>potentially</source>
          <target state="translated">potentially</target>
        </trans-unit>
        <trans-unit id="deb2ce62a303649bfd53184b7ac8456314cde90b" translate="yes" xml:space="preserve">
          <source>pow()</source>
          <target state="translated">pow()</target>
        </trans-unit>
        <trans-unit id="fe865e7a6728a5ca015f21b018fb11b7d59b9d90" translate="yes" xml:space="preserve">
          <source>power.c</source>
          <target state="translated">power.c</target>
        </trans-unit>
        <trans-unit id="62aaf3d90f8cc48c7edd2dc473946ba9ee08fd7b" translate="yes" xml:space="preserve">
          <source>power.pl</source>
          <target state="translated">power.pl</target>
        </trans-unit>
        <trans-unit id="6d3236ec3c88039ca534b81acad564e847ecb062" translate="yes" xml:space="preserve">
          <source>pp</source>
          <target state="translated">pp</target>
        </trans-unit>
        <trans-unit id="52c9153d7c507ff72718ff94f71235f50f0874f7" translate="yes" xml:space="preserve">
          <source>pp*.c</source>
          <target state="translated">pp*.c</target>
        </trans-unit>
        <trans-unit id="a446e9c57c6159013c29ad59724d552db9f1b727" translate="yes" xml:space="preserve">
          <source>pp.c</source>
          <target state="translated">pp.c</target>
        </trans-unit>
        <trans-unit id="08d1c493ed906491f12f944b8012d90d3cea2050" translate="yes" xml:space="preserve">
          <source>pp.c~</source>
          <target state="translated">pp.c~</target>
        </trans-unit>
        <trans-unit id="8965f752b8ad28af30eaf60eb4e71cfb35190a23" translate="yes" xml:space="preserve">
          <source>pp_ctl.c</source>
          <target state="translated">pp_ctl.c</target>
        </trans-unit>
        <trans-unit id="1e3a89a7de94ced5a0e04db0337942e0569c1246" translate="yes" xml:space="preserve">
          <source>pp_hot.c</source>
          <target state="translated">pp_hot.c</target>
        </trans-unit>
        <trans-unit id="589cdfe5d4f685281db87b33bbf5a5a4b2c7ee80" translate="yes" xml:space="preserve">
          <source>pp_pack.c</source>
          <target state="translated">pp_pack.c</target>
        </trans-unit>
        <trans-unit id="c1438e79208a2b25c126baf351f2e33481405fdf" translate="yes" xml:space="preserve">
          <source>pp_sys.c</source>
          <target state="translated">pp_sys.c</target>
        </trans-unit>
        <trans-unit id="78ae69918b6f34c67a434a4cb9fba6979f9cdb76" translate="yes" xml:space="preserve">
          <source>ppercase,</source>
          <target state="translated">ppercase,</target>
        </trans-unit>
        <trans-unit id="ab18508c7229e01d16f6cf1c336438af100b5470" translate="yes" xml:space="preserve">
          <source>ppport.h</source>
          <target state="translated">ppport.h</target>
        </trans-unit>
        <trans-unit id="6627da0645c01002191e5890978b714525400575" translate="yes" xml:space="preserve">
          <source>pprivate</source>
          <target state="translated">pprivate</target>
        </trans-unit>
        <trans-unit id="c1f1ca4327212349c025af296c64b4961e5e4bae" translate="yes" xml:space="preserve">
          <source>pragma methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65aafbc683a4d415cb643bbec8536166fa0dd202" translate="yes" xml:space="preserve">
          <source>pre</source>
          <target state="translated">pre</target>
        </trans-unit>
        <trans-unit id="77c3cf9ba4744381d71f9e9c8016f0dd4e4378a2" translate="yes" xml:space="preserve">
          <source>precisely</source>
          <target state="translated">precisely</target>
        </trans-unit>
        <trans-unit id="b80f7aa47ce85e52c7f2adebc0143508caa206a8" translate="yes" xml:space="preserve">
          <source>precision, or maximum width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ea01f8c900ce1634c082fa10130492af194342" translate="yes" xml:space="preserve">
          <source>precomp prelen</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44daeb6b12bcde227b4812b7988a81e308337696" translate="yes" xml:space="preserve">
          <source>precomposed</source>
          <target state="translated">precomposed</target>
        </trans-unit>
        <trans-unit id="a3e0f60c21b70180b71a3251e49b6d31e4960cf2" translate="yes" xml:space="preserve">
          <source>prefix.U</source>
          <target state="translated">prefix.U</target>
        </trans-unit>
        <trans-unit id="3a381339f6e6f575132fe67124fa7093f9086c28" translate="yes" xml:space="preserve">
          <source>prefixifying on VMS is simple. Each should simply be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cdb42af9ecd861c140c449af8f3fe3577b6a03" translate="yes" xml:space="preserve">
          <source>prefs</source>
          <target state="translated">prefs</target>
        </trans-unit>
        <trans-unit id="e77ed5feb0cfa99dbe87ff5b99f4c824e0700dce" translate="yes" xml:space="preserve">
          <source>prepends itself to the normal prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f599daef2c4dac424f1b5237042948d6503102" translate="yes" xml:space="preserve">
          <source>presumes has already been demonstrated to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297e789baf9bb3d1e0fd24fe0808ffd814733ccd" translate="yes" xml:space="preserve">
          <source>pretend_does_not_exists</source>
          <target state="translated">pretend_does_not_exists</target>
        </trans-unit>
        <trans-unit id="355f28f2c0c387add6231fd1a568b9377fd2fb37" translate="yes" xml:space="preserve">
          <source>previous</source>
          <target state="translated">previous</target>
        </trans-unit>
        <trans-unit id="e3b7c980d763196e9d134c3ec1c3de0ded54e5ce" translate="yes" xml:space="preserve">
          <source>primary</source>
          <target state="translated">primary</target>
        </trans-unit>
        <trans-unit id="7240e268ef2f3fc21c0dde3074e5aa8ba3f34722" translate="yes" xml:space="preserve">
          <source>primed</source>
          <target state="translated">primed</target>
        </trans-unit>
        <trans-unit id="6d0d5876e6710ebb4f309b5af01090cb97381d06" translate="yes" xml:space="preserve">
          <source>print</source>
          <target state="translated">print</target>
        </trans-unit>
        <trans-unit id="8eaaaa4d3292e6cc4b51ac6841bed9af650d1013" translate="yes" xml:space="preserve">
          <source>print FILEHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c3c466b39193404d61708df873020a73279ec0" translate="yes" xml:space="preserve">
          <source>print FILEHANDLE LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c8dc6578e3750b83d301d9274e71097f172bdd" translate="yes" xml:space="preserve">
          <source>print LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec8d45b64cdd0c1f8750755ebd3f957ff71004c" translate="yes" xml:space="preserve">
          <source>print_subs() is a B::GV method you have declared. Also see &lt;a href=&quot;#B%3a%3aGV-Methods&quot;&gt;B::GV Methods&lt;/a&gt;, below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a9a99704b7cdad55fef32720094e7be4a38478" translate="yes" xml:space="preserve">
          <source>printable</source>
          <target state="translated">printable</target>
        </trans-unit>
        <trans-unit id="df39b4caf493869772ff3a0f95cca6a9ae7934dc" translate="yes" xml:space="preserve">
          <source>printf</source>
          <target state="translated">printf</target>
        </trans-unit>
        <trans-unit id="93fa07bfed0a22d757ba5514d976a5629ab3f647" translate="yes" xml:space="preserve">
          <source>printf FILEHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad3a3684b68dd56f81b104aea63f45c13ae5c02" translate="yes" xml:space="preserve">
          <source>printf FILEHANDLE FORMAT, LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07a36c0b7a397d3747561636a86f41424911af0" translate="yes" xml:space="preserve">
          <source>printf FORMAT, LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f512997c34b44050010408db6ce8499e3ee8394" translate="yes" xml:space="preserve">
          <source>printf(3)</source>
          <target state="translated">printf(3)</target>
        </trans-unit>
        <trans-unit id="2782c596468de7f39f9744f8d4a08207e607ffae" translate="yes" xml:space="preserve">
          <source>printing the standard message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a53c0acf5d5f08233ec2c75afae98dbb0f2b7ca" translate="yes" xml:space="preserve">
          <source>printing the usage message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b024f8c2bfa6dbc6442cb571d5d5d6243c0ca744" translate="yes" xml:space="preserve">
          <source>prints</source>
          <target state="translated">prints</target>
        </trans-unit>
        <trans-unit id="ddccec26555e74fc4b3e21d8eca8f3e4ca1a1d62" translate="yes" xml:space="preserve">
          <source>prints &quot;FOUR TEARDROP-SPOKED ASTERISK&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e9aadad892a403657e34b7b41aae798e0e5b33" translate="yes" xml:space="preserve">
          <source>prints &quot;U+2722&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e56a2d4da2a548aec89f7fe4fff9cbd1e5ced77" translate="yes" xml:space="preserve">
          <source>prints &lt;code&gt;13,5&lt;/code&gt; . This is because in that locale, the comma is the decimal point character. The &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; thus expands to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6325cbe7a47f8289c901906cfa0784f3b593f97" translate="yes" xml:space="preserve">
          <source>prints a summary of the options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755407c2e998066dc575ee90af532a8a6df7d506" translate="yes" xml:space="preserve">
          <source>prints summary of the major perl configuration values and the current values of @INC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2940d68109e2acb203ccc0a75c658f7154e528af" translate="yes" xml:space="preserve">
          <source>prints the current value of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ff64085c685eaba7a492de1a559e22e81860ac" translate="yes" xml:space="preserve">
          <source>prints the integer value of &lt;code&gt;2**100&lt;/code&gt; . Note that without conversion of constants the expression 2**100 will be calculated as perl scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b90649b15cb703d375353d6b63a16747f3ee795" translate="yes" xml:space="preserve">
          <source>prints the value of &lt;code&gt;2E-100&lt;/code&gt; . Note that without conversion of constants the expression 2E-100 will be calculated as normal floating point number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffce7cbd1467fd2274e2be3e3182fba0a0addbe" translate="yes" xml:space="preserve">
          <source>prints the version and patchlevel of your perl executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3bab6f000c2b5328000af0dcb85e44f808500c" translate="yes" xml:space="preserve">
          <source>prints this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e605a802a5e8c71c75039e03269749026f74ac" translate="yes" xml:space="preserve">
          <source>prints warnings about dubious constructs, such as variable names mentioned only once and scalar variables used before being set; redefined subroutines; references to undefined filehandles; filehandles opened read-only that you are attempting to write on; values used as a number that don't</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f399fa1c6023339b03a0228c091ba95d898bbf" translate="yes" xml:space="preserve">
          <source>prints:</source>
          <target state="translated">prints:</target>
        </trans-unit>
        <trans-unit id="e80721793c24ae14edfca9b26ad406a9815cd3ff" translate="yes" xml:space="preserve">
          <source>private</source>
          <target state="translated">private</target>
        </trans-unit>
        <trans-unit id="258d6985883b15ea752512cc27707a8e2d5ad736" translate="yes" xml:space="preserve">
          <source>privlib.U</source>
          <target state="translated">privlib.U</target>
        </trans-unit>
        <trans-unit id="6d80435c3dc90449d33c508107f4d026718467db" translate="yes" xml:space="preserve">
          <source>probably doesn't do what you expect at first glance. The parentheses enclose the argument list for &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; which is evaluated (printing the result of &lt;code&gt;$foo &amp;amp; 255&lt;/code&gt; ). Then one is added to the return value of &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; (usually 1). The result is something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6461207a915540cffe560f125fc7b605ed90cb2a" translate="yes" xml:space="preserve">
          <source>probes</source>
          <target state="translated">probes</target>
        </trans-unit>
        <trans-unit id="15778dfe50010c492563d4f59c9f0dac48a0fd92" translate="yes" xml:space="preserve">
          <source>problems.</source>
          <target state="translated">problems.</target>
        </trans-unit>
        <trans-unit id="e6433a4c4def7b1e5a9d34953561b2dd020b4915" translate="yes" xml:space="preserve">
          <source>process itself, which the &lt;b&gt;interpreter&lt;/b&gt; then interprets. There are, however, extension &lt;b&gt;modules&lt;/b&gt; to get Perl to act more like a &amp;ldquo;real&amp;rdquo; compiler. See Camel chapter 16, &amp;ldquo;Compiling&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e138197ec1e6bb2575a865bbbb890e9a18918cb2" translate="yes" xml:space="preserve">
          <source>process itself, which the Perl &lt;b&gt;runtime&lt;/b&gt; system then interprets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9486134b5e94c395f2db413d18c2b9da08aa9a6c" translate="yes" xml:space="preserve">
          <source>process time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113b186be0ebb2d2e546c682bbd3565e36b7d366" translate="yes" xml:space="preserve">
          <source>processing input from a filehandle. The base class implementation does nothing, however, subclasses may override it to perform any per-file cleanup actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db6912a5e1818ec905ea84198e43be38a7c2c2d" translate="yes" xml:space="preserve">
          <source>processing input from a filehandle. The base class implementation does nothing, however, subclasses may override it to perform any per-file initializations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8823c1fc5de374ed975aa9e3735803cd1624204" translate="yes" xml:space="preserve">
          <source>produce, respectively</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c5fb14936b7b8d27e72e207aca33e4a45b11f8" translate="yes" xml:space="preserve">
          <source>produces</source>
          <target state="translated">produces</target>
        </trans-unit>
        <trans-unit id="2a51664ea57fa88d3492fce9703a68bdc45be3a2" translate="yes" xml:space="preserve">
          <source>produces a fairly useless mixture of native bytes and UTF-8, as well as a warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f78f8615864d429f7738efc393f813508a9e1ed" translate="yes" xml:space="preserve">
          <source>produces raw bytes that Perl happens to use to internally encode the Unicode string. Perl's internal encoding depends on the system as well as what characters happen to be in the string at the time. If any of the characters are at code points &lt;code&gt;0x100&lt;/code&gt; or above, you will get a warning. To ensure that the output is explicitly rendered in the encoding you desire--and to avoid the warning--open the stream with the desired encoding. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697fb2af5f9c0bcaa0af98af2208dda3a4f67a3b" translate="yes" xml:space="preserve">
          <source>produces something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5391063b9b0089741b941f234e603a15de4c6acd" translate="yes" xml:space="preserve">
          <source>produces the output ' :a:b:c' (rather than ': :a:b:c').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7517f948dba1f5da2a85d386a109e7f077c449d4" translate="yes" xml:space="preserve">
          <source>produces the output ' :a:b:c:'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24492d45ab4d11b135486178217ada3d4e74349" translate="yes" xml:space="preserve">
          <source>produces the output ':abc'. However, a zero-width match at the beginning of EXPR never produces an empty field, so that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca9fa3240bdf4fe8416c6f07aa9e679dc454c56" translate="yes" xml:space="preserve">
          <source>produces the output 'a:b:c', but the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8498c145ab424ba886735e396f9356cc54831b11" translate="yes" xml:space="preserve">
          <source>produces the output 'a:b:c'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150ca988ccdecc0d16e24a2839e58fa13e08e426" translate="yes" xml:space="preserve">
          <source>produces the output 'a:b:c:::'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fdf8f3cf2deab96f0ec1cbebd6a96f62ed8f9f" translate="yes" xml:space="preserve">
          <source>produces the output 'a:bc', and each of these:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ee983f4038076768ac3ebd5fe4aafc5571e39f" translate="yes" xml:space="preserve">
          <source>produces the output 'abc', and this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcec56171df3c6150684b60fb0f16c51e1923ed" translate="yes" xml:space="preserve">
          <source>produces:</source>
          <target state="translated">produces:</target>
        </trans-unit>
        <trans-unit id="38a007151abe87cc01a5b6e9cc418e85286e2087" translate="yes" xml:space="preserve">
          <source>product</source>
          <target state="translated">product</target>
        </trans-unit>
        <trans-unit id="de692334bb9f510512cf1911c3015f265ad826a2" translate="yes" xml:space="preserve">
          <source>profiler, a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb08faa6a74540fcecb6da2145a4eb0b9d0adf2c" translate="yes" xml:space="preserve">
          <source>profiler, all at once. It can also use sub-microsecond (100ns) resolution on systems which provide &lt;code&gt;clock_gettime()&lt;/code&gt; . It can be started and stopped even by the program being profiled. It's a one-line entry to profile &lt;code&gt;mod_perl&lt;/code&gt; applications. It's written in &lt;code&gt;c&lt;/code&gt; and is probably the fastest profiler available for Perl. The list of coolness just goes on. Enough of that, let's see how to it works - just use the familiar &lt;code&gt;-d&lt;/code&gt; switch to plug it in and run the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d152897589dcd7e02d8a23a5eb85b4e65400a4c8" translate="yes" xml:space="preserve">
          <source>prog.pl</source>
          <target state="translated">prog.pl</target>
        </trans-unit>
        <trans-unit id="81d9aeea0e1a408d65b6660a176c5de83dc98e7b" translate="yes" xml:space="preserve">
          <source>program</source>
          <target state="translated">program</target>
        </trans-unit>
        <trans-unit id="f85fd6d9676f31600e5becd91c95bca30483007e" translate="yes" xml:space="preserve">
          <source>program (not supplied). This speeds startup at the expense of some disk space (which you can minimize by stripping the executable). (Still, a &quot;hello world&quot; executable comes out to about 200K on my machine.) If you want to execute a portion of your program before dumping, use the dump() operator instead. Note: availability of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b2d10cbe92aebad7a409fb4bdd35e672c73286" translate="yes" xml:space="preserve">
          <source>program from the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Tussle&quot;&gt;Unicode::Tussle&lt;/a&gt; CPAN module for a convenient command-line interface to this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad06a5a7baabf3bc57c3a330b3445ecc964c2da8" translate="yes" xml:space="preserve">
          <source>program gives you access to all the documentation that comes with Perl. You can get more documentation, tutorials and community support online at &lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26727c3ffa9f467252dfbfa1e6fe48090b0a0159" translate="yes" xml:space="preserve">
          <source>program included with Cygwin automatically appends a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5263166fed0e573c5fe7040a655b5efde0db686" translate="yes" xml:space="preserve">
          <source>program included with the LWP modules from CPAN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7074225487355058c09cf2aecd66d0df062687a5" translate="yes" xml:space="preserve">
          <source>program is not a compiler by this definition, but it does contain a kind of compiler that takes a program and turns it into a more executable form (&lt;b&gt;syntax trees&lt;/b&gt;) within the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319701e2a7208a71e8ad9edbd76aea9560dfc0ee" translate="yes" xml:space="preserve">
          <source>program is set up at Perl source code build time to test the Perl version it was built under. It can be used after running &lt;code&gt;make
install&lt;/code&gt; (or your platform's equivalent procedure) to verify that perl and its libraries have been installed correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4702109fce747547cfbabc4d4f043e285b3cb14" translate="yes" xml:space="preserve">
          <source>program mentioned above accepts a &lt;code&gt;--locale&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5535a43e13c53dd55fe977e12eab26a7ffca8c2d" translate="yes" xml:space="preserve">
          <source>program that builds Perl tries to figure this out for itself, so you should never have to specify this yourself. Most modern releases of SysVr4 and BSD 4.4 use this approach to avoid the kernel race condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5a8630a2625c2637321f70113cf4fe477798e3" translate="yes" xml:space="preserve">
          <source>program that comes with Perl:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec530290a7a8ea656f61aea0f059e70a833bc13e" translate="yes" xml:space="preserve">
          <source>program to run the test suite (except under Win32 where it uses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fbf86d284045a2db35fa4f8352b7664175e5e5" translate="yes" xml:space="preserve">
          <source>program to send mail from the machine where your code runs, you should be able to use this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb8af317622f007d5fa4c097096c5b1dd888512" translate="yes" xml:space="preserve">
          <source>program when you configure and build a new Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6b066503016cdcbac2de9f8b78b9a9a42f5524" translate="yes" xml:space="preserve">
          <source>program, if you have it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8098a510a26d8c44bad12f40dcdc819bc285e1c7" translate="yes" xml:space="preserve">
          <source>program, passing it &lt;code&gt;&quot;surprise&quot;&lt;/code&gt; an argument. The second version didn't; it tried to run a program named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3abc05cdc1037793ef590709342fe91226a334" translate="yes" xml:space="preserve">
          <source>program.</source>
          <target state="translated">program.</target>
        </trans-unit>
        <trans-unit id="bf8a401d9d93b436235cc4496c250a9e11f49d80" translate="yes" xml:space="preserve">
          <source>program. If you are unable to go through the firewall with a simple Perl setup, it is likely that you can configure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5f8399fc69d1e32d5d3578221b4365874fc650" translate="yes" xml:space="preserve">
          <source>programfile</source>
          <target state="translated">programfile</target>
        </trans-unit>
        <trans-unit id="9f00f211923532910ce73fa2337351975f9facc9" translate="yes" xml:space="preserve">
          <source>programs, you can install this script as a convenient drop-in replacement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a7d82d1a353697281d5cee2038d8714a9e6ddb" translate="yes" xml:space="preserve">
          <source>programs. It also supplies these programs, all of which are general filters that do Unicode-y things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244148e24743576dcd725f43790b7bde2b19d31a" translate="yes" xml:space="preserve">
          <source>propagate across threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4bef6e429828e2cfdad63c06781934cb6c88fb" translate="yes" xml:space="preserve">
          <source>propagate into string &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; statements, although it can be explicitly enabled inside a string &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0449e86077449843777d1958aff83cf086dbcba" translate="yes" xml:space="preserve">
          <source>properties</source>
          <target state="translated">properties</target>
        </trans-unit>
        <trans-unit id="dfe805b7589f203ffca737907f45fd26c3226539" translate="yes" xml:space="preserve">
          <source>proto</source>
          <target state="translated">proto</target>
        </trans-unit>
        <trans-unit id="9e5da5b77d1b3ede75e17ce2eb1d7a4cdcfc0774" translate="yes" xml:space="preserve">
          <source>protosv</source>
          <target state="translated">protosv</target>
        </trans-unit>
        <trans-unit id="7c257c6a8cd537400e7297bcb92b9a1ef6e30d00" translate="yes" xml:space="preserve">
          <source>prototype</source>
          <target state="translated">prototype</target>
        </trans-unit>
        <trans-unit id="2b08e6f9a12b3f4995e2cded4431ac3fa8db17e2" translate="yes" xml:space="preserve">
          <source>prototype FUNCTION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478dfe775f96f033bdfe751f3a9466d9685eeb32" translate="yes" xml:space="preserve">
          <source>prototype.U</source>
          <target state="translated">prototype.U</target>
        </trans-unit>
        <trans-unit id="82ffc9435b79fa76e68aa3f285c8a414d8b630c4" translate="yes" xml:space="preserve">
          <source>prove</source>
          <target state="translated">prove</target>
        </trans-unit>
        <trans-unit id="4c39698a0e2dd1dfab229994d43c2c6a3a9f9f75" translate="yes" xml:space="preserve">
          <source>prove - Run tests through a TAP harness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="302084c555d08418461e5efd38a716d09f04cedc" translate="yes" xml:space="preserve">
          <source>prove introduces a separation between &quot;options passed to the perl which runs prove&quot; and &quot;options passed to the perl which runs tests&quot;; this distinction is by design. Thus the perl which is running a test starts with the default &lt;code&gt;@INC&lt;/code&gt; . Additional library directories can be added via the &lt;code&gt;PERL5LIB&lt;/code&gt; environment variable, via -Ifoo in &lt;code&gt;PERL5OPT&lt;/code&gt; or via the &lt;code&gt;-Ilib&lt;/code&gt; option to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bc28154c9fcd43498383fba78c815dabf00dda4" translate="yes" xml:space="preserve">
          <source>provide either a &lt;code&gt;new&lt;/code&gt; or a &lt;code&gt;TIESCALAR&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365f29820aae2d65d47abab1883448162aea8c03" translate="yes" xml:space="preserve">
          <source>provide special syntax for method invocation, the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator. We will cover this in more detail later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8d9d64a77c351c6aaff4c0ef9b436f904638b7" translate="yes" xml:space="preserve">
          <source>provided</source>
          <target state="translated">provided</target>
        </trans-unit>
        <trans-unit id="134125694a929e2bdaa078d8b4595875bd9a2c7b" translate="yes" xml:space="preserve">
          <source>provided initial port of Perl, which appears to be most essential work, as it was a breakthrough on having Perl ported at all. Many thanks and obligations to Rainer!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c5d1358d128117989fc21f2897a25c99205e50" translate="yes" xml:space="preserve">
          <source>provider</source>
          <target state="translated">provider</target>
        </trans-unit>
        <trans-unit id="cded061f76999f8ee554e426bd020cc69b437245" translate="yes" xml:space="preserve">
          <source>provides method inheritance as a built-in feature. Attribute inheritance is left up the class to implement. See the &lt;a href=&quot;#Writing-Accessors&quot;&gt;Writing Accessors&lt;/a&gt; section for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4532509f14e43f1ae5e595de22443d18a9b751" translate="yes" xml:space="preserve">
          <source>provides the earliest opportunity to perform version checks. One can put something like this in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8cc9b915cb1ebeb731adf060d55703565b09c2" translate="yes" xml:space="preserve">
          <source>pseudo-block</source>
          <target state="translated">pseudo-block</target>
        </trans-unit>
        <trans-unit id="1de9374dd8d7e1815c908503aabf308702b37847" translate="yes" xml:space="preserve">
          <source>pstruct</source>
          <target state="translated">pstruct</target>
        </trans-unit>
        <trans-unit id="41facc57250bb61df853013ca44379139a05f4c0" translate="yes" xml:space="preserve">
          <source>ptar</source>
          <target state="translated">ptar</target>
        </trans-unit>
        <trans-unit id="84f7e915fbcce51d5bf1ad051ff830cee44c800c" translate="yes" xml:space="preserve">
          <source>ptardiff</source>
          <target state="translated">ptardiff</target>
        </trans-unit>
        <trans-unit id="4de2e229b9ee24f0c0a378e858b39f9ddcda2331" translate="yes" xml:space="preserve">
          <source>ptardiff - program that diffs an extracted archive against an unextracted one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7f9560f37f513a6c56aeda29b7faa47a85eaa4" translate="yes" xml:space="preserve">
          <source>ptargrep</source>
          <target state="translated">ptargrep</target>
        </trans-unit>
        <trans-unit id="0cd9c0eab2bbee9abfdbc2b3d460efb55e750ef4" translate="yes" xml:space="preserve">
          <source>pthread.h</source>
          <target state="translated">pthread.h</target>
        </trans-unit>
        <trans-unit id="daf4a923626420fa50e11cdf1f69b7ac3a91a362" translate="yes" xml:space="preserve">
          <source>ptr</source>
          <target state="translated">ptr</target>
        </trans-unit>
        <trans-unit id="9caa6bebc4260cf5dd7c249218139a5f08c59332" translate="yes" xml:space="preserve">
          <source>ptree</source>
          <target state="translated">ptree</target>
        </trans-unit>
        <trans-unit id="5830ad0324adbd7a4165392d4583578b8f27fc3c" translate="yes" xml:space="preserve">
          <source>ptrsize.U</source>
          <target state="translated">ptrsize.U</target>
        </trans-unit>
        <trans-unit id="dc867c03d6f1f4385a2475b4be1137e585036dd1" translate="yes" xml:space="preserve">
          <source>push</source>
          <target state="translated">push</target>
        </trans-unit>
        <trans-unit id="a96ebaa3a216483b37d5306882680898511e5ff6" translate="yes" xml:space="preserve">
          <source>push ARRAY,LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92f51b24b94471c76ef3318648586577a2a8572" translate="yes" xml:space="preserve">
          <source>push EXPR,LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3c0fe2442ffd1be74faa2c42e398caa146f49c" translate="yes" xml:space="preserve">
          <source>putstate</source>
          <target state="translated">putstate</target>
        </trans-unit>
        <trans-unit id="0592584a3636f2da8d88edfe5cf5bfd293015e28" translate="yes" xml:space="preserve">
          <source>putstate()</source>
          <target state="translated">putstate()</target>
        </trans-unit>
        <trans-unit id="9b879864942a33d1bccda3c057d3629e5092b9ba" translate="yes" xml:space="preserve">
          <source>pv</source>
          <target state="translated">pv</target>
        </trans-unit>
        <trans-unit id="e45b83c5dc5ae0fae24ec1db5ad8af67b6e609c7" translate="yes" xml:space="preserve">
          <source>pwd.h</source>
          <target state="translated">pwd.h</target>
        </trans-unit>
        <trans-unit id="910d7a216de824530d1833c5776162b0996f08c0" translate="yes" xml:space="preserve">
          <source>pwd_mkdb(8)</source>
          <target state="translated">pwd_mkdb(8)</target>
        </trans-unit>
        <trans-unit id="22ea1c649c82946aa6e479e1ffd321e4a318b1b0" translate="yes" xml:space="preserve">
          <source>q</source>
          <target state="translated">q</target>
        </trans-unit>
        <trans-unit id="98b7ede759f3df202376ce1c341cfbd5e631e747" translate="yes" xml:space="preserve">
          <source>q/STRING/</source>
          <target state="translated">q/STRING/</target>
        </trans-unit>
        <trans-unit id="bed4eb698c6eeea7f1ddf5397d480d3f2c0fb938" translate="yes" xml:space="preserve">
          <source>qq</source>
          <target state="translated">qq</target>
        </trans-unit>
        <trans-unit id="7f6fbfc9b4549fb57316d2409089354ab4450330" translate="yes" xml:space="preserve">
          <source>qq/STRING/</source>
          <target state="translated">qq/STRING/</target>
        </trans-unit>
        <trans-unit id="452fa1301cda884033cf219f83e50355e9b42769" translate="yes" xml:space="preserve">
          <source>qr</source>
          <target state="translated">qr</target>
        </trans-unit>
        <trans-unit id="43d7790d982bc9cff3b378a822a6bdfe32c48f2e" translate="yes" xml:space="preserve">
          <source>qr/STRING/</source>
          <target state="translated">qr/STRING/</target>
        </trans-unit>
        <trans-unit id="7d47b1f9c46834609c77b8f9af645445dc74c252" translate="yes" xml:space="preserve">
          <source>qr_package</source>
          <target state="translated">qr_package</target>
        </trans-unit>
        <trans-unit id="c32e6adde195dca3baece3e56c6a8caaebdc868b" translate="yes" xml:space="preserve">
          <source>quadfio.U</source>
          <target state="translated">quadfio.U</target>
        </trans-unit>
        <trans-unit id="3bba9222aa68e8b1a8125a73241b0dc928898153" translate="yes" xml:space="preserve">
          <source>quadmath_format_needed() returns true if the format string seems to contain at least one non-Q-prefixed %[efgaEFGA] format specifier, or returns false otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a7356bdbb0ffb0f14001a80783739e2ab37260" translate="yes" xml:space="preserve">
          <source>quadmath_format_single() can and will actually patch in the missing &lt;code&gt;Q&lt;/code&gt; , if necessary. In this case it will return the modified copy of the format, &lt;b&gt;which the caller will need to free.&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0822fe9bdd56d82c77e21515002addcb09173356" translate="yes" xml:space="preserve">
          <source>quadmath_format_single() checks that the intended single spec looks sane: begins with &lt;code&gt;%&lt;/code&gt; , has only one &lt;code&gt;%&lt;/code&gt; , ends with &lt;code&gt;[efgaEFGA]&lt;/code&gt; , and has &lt;code&gt;Q&lt;/code&gt; before it. This is not a full &quot;printf syntax check&quot;, just the basics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd83f37493bb198386202354d50de6616fc3a500" translate="yes" xml:space="preserve">
          <source>quadmath_snprintf() is very strict about its format string and will fail, returning -1, if the format is invalid. It acccepts exactly one format spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6cd0c0f97c9514a026ea494b622016c29f61df" translate="yes" xml:space="preserve">
          <source>quadratic</source>
          <target state="translated">quadratic</target>
        </trans-unit>
        <trans-unit id="ffa8df1c59875ec2fc49b06d142c807848603838" translate="yes" xml:space="preserve">
          <source>quadtype.U</source>
          <target state="translated">quadtype.U</target>
        </trans-unit>
        <trans-unit id="634a901c92767ffdd5d60fe4155aaf0487ffb7b2" translate="yes" xml:space="preserve">
          <source>quantifier</source>
          <target state="translated">quantifier</target>
        </trans-unit>
        <trans-unit id="4b84cfd8e0a2b4f958589f0f27862ffa4e236a7d" translate="yes" xml:space="preserve">
          <source>quantifier, if there is one, gets to grab as much of the string as possible, leaving the rest of the regexp to fight over scraps. Thus in our example, the first quantifier &lt;code&gt;.*&lt;/code&gt; grabs most of the string, while the second quantifier &lt;code&gt;.*&lt;/code&gt; gets the empty string. Quantifiers that grab as much of the string as possible are called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe2b441b12f9895fe1ab8befb6b911e3dd3662b" translate="yes" xml:space="preserve">
          <source>quantifiers &lt;code&gt;??&lt;/code&gt; , &lt;code&gt;*?&lt;/code&gt; , &lt;code&gt;+?&lt;/code&gt;, and &lt;code&gt;{}?&lt;/code&gt;. These are the usual quantifiers with a &lt;code&gt;?&lt;/code&gt; appended to them. They have the following meanings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92e6989e5a1fe1d20464751635e45092c9845a8" translate="yes" xml:space="preserve">
          <source>quantifiers.</source>
          <target state="translated">quantifiers.</target>
        </trans-unit>
        <trans-unit id="7e12db3e466491bf7098ace4854001d36eea9b19" translate="yes" xml:space="preserve">
          <source>quantifying</source>
          <target state="translated">quantifying</target>
        </trans-unit>
        <trans-unit id="c64d694fa83da87d28d21f294241447a48e45e72" translate="yes" xml:space="preserve">
          <source>query the database until the latest possible moment, but always read the docs which come with your choice of libraries. Among the many issues facing developers dealing with databases should remain aware of is to always use &lt;code&gt;SQL&lt;/code&gt; placeholders and to consider pre-fetching data sets when this might prove advantageous. Splitting up a large file by assigning multiple processes to parsing a single file, using say &lt;code&gt;POE&lt;/code&gt; , &lt;code&gt;threads&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; can also be a useful way of optimizing your usage of the available &lt;code&gt;CPU&lt;/code&gt; resources, though this technique is fraught with concurrency issues and demands high attention to detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26176327fe0a3f978a58733143de9f9adcf194e" translate="yes" xml:space="preserve">
          <source>quick hint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272cd2fca2076f3c436825121b11a9e90c40ccca" translate="yes" xml:space="preserve">
          <source>quote_dep</source>
          <target state="translated">quote_dep</target>
        </trans-unit>
        <trans-unit id="b42c4c01979837c95540a054c1500394cbca3183" translate="yes" xml:space="preserve">
          <source>quote_literal</source>
          <target state="translated">quote_literal</target>
        </trans-unit>
        <trans-unit id="641d42e07d9d197e935a9cafaf60f8c687955613" translate="yes" xml:space="preserve">
          <source>quotemeta</source>
          <target state="translated">quotemeta</target>
        </trans-unit>
        <trans-unit id="f07c247bbbbc858068e0b2b9d602122be0c226f6" translate="yes" xml:space="preserve">
          <source>quotemeta (and &lt;code&gt;\Q&lt;/code&gt; ... &lt;code&gt;\E&lt;/code&gt; ) are useful when interpolating strings into regular expressions, because by default an interpolated variable will be considered a mini-regular expression. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e93c6d522c0e51d9e0035864ae40347031ec415" translate="yes" xml:space="preserve">
          <source>quotemeta EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3ee087652cd10b96585e1ab25b962e6fb85cb3" translate="yes" xml:space="preserve">
          <source>quotes</source>
          <target state="translated">quotes</target>
        </trans-unit>
        <trans-unit id="3fb4379ccc26c7b7bde966b1735cc2a6d8ac1bc1" translate="yes" xml:space="preserve">
          <source>qw</source>
          <target state="translated">qw</target>
        </trans-unit>
        <trans-unit id="e6d81996671773b02e3e6deed357bf0f3231f604" translate="yes" xml:space="preserve">
          <source>qw/STRING/</source>
          <target state="translated">qw/STRING/</target>
        </trans-unit>
        <trans-unit id="04affb5109a0a8874c988e11f0385f49a12efb8c" translate="yes" xml:space="preserve">
          <source>qx</source>
          <target state="translated">qx</target>
        </trans-unit>
        <trans-unit id="b44c88ed49d38f5ac0719f7d54a19cda44b84b31" translate="yes" xml:space="preserve">
          <source>qx/STRING/</source>
          <target state="translated">qx/STRING/</target>
        </trans-unit>
        <trans-unit id="4dc7c9ec434ed06502767136789763ec11d2c4b7" translate="yes" xml:space="preserve">
          <source>r</source>
          <target state="translated">r</target>
        </trans-unit>
        <trans-unit id="96a71f281e6fd7f1cf40946eb94b126ddfdb076f" translate="yes" xml:space="preserve">
          <source>r [Module|/Regexp/]...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f733fbc6f1c2b8e20c1761e713d89a886cb028ea" translate="yes" xml:space="preserve">
          <source>race condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff80e64f23d4fe9a6afab8998180066fe0158dbc" translate="yes" xml:space="preserve">
          <source>radial</source>
          <target state="translated">radial</target>
        </trans-unit>
        <trans-unit id="b64c177fb2ce0726bc1f54d53654cd392bb2d811" translate="yes" xml:space="preserve">
          <source>radians or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8e1d61c5b5d32158d7fb55f61d68d209206c2d" translate="yes" xml:space="preserve">
          <source>radians) do not have waypoints between them (they would have an an &quot;equator&quot; between them), and therefore &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned for antipodal points. If the points are the same and the distance therefore zero and all waypoints therefore identical, the first point (either point) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524005606ce5a9dca230b8d334e82c37526bd9a5" translate="yes" xml:space="preserve">
          <source>rand</source>
          <target state="translated">rand</target>
        </trans-unit>
        <trans-unit id="60d695687dcb191724698e1af8f27d515b191e67" translate="yes" xml:space="preserve">
          <source>rand EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e4897a3d66d96f3f13365800cb28c4eccef8b9" translate="yes" xml:space="preserve">
          <source>randfunc.U</source>
          <target state="translated">randfunc.U</target>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="8234671ef2d25a6e36bbc07ae84aff2c8f2ee549" translate="yes" xml:space="preserve">
          <source>randomness.</source>
          <target state="translated">randomness.</target>
        </trans-unit>
        <trans-unit id="4d55af37dbbb6a42088d917caa1ca25428ec42c9" translate="yes" xml:space="preserve">
          <source>range</source>
          <target state="translated">range</target>
        </trans-unit>
        <trans-unit id="63ccf73995a98a1ffc6e4d83774be11ab0a806fb" translate="yes" xml:space="preserve">
          <source>range set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2a564b5f066a436571b0e8925a6aa0c4500541" translate="yes" xml:space="preserve">
          <source>rare to have to use &lt;code&gt;PREREQ_FATAL&lt;/code&gt; . Its use by module authors is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d5c49086004debdd4153a04c92cac5277b2fec" translate="yes" xml:space="preserve">
          <source>rather than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b7b078f6f0ef0cc55e32c2bb322909dd05575a" translate="yes" xml:space="preserve">
          <source>rather than just a block. Such declarations are effective for the entire file for which they were declared. You cannot rescind them with &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt;
vars&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; subs&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0b0ffa2e42fb7e17a4af77c05b87e50aaea77f" translate="yes" xml:space="preserve">
          <source>rather than the contents of &lt;code&gt;$?&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272e6b443a2bbec9bd113419dc08bddf566a5028" translate="yes" xml:space="preserve">
          <source>rather than the expected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c580d7e1bd3c9761b25efb006556efde61db7bf6" translate="yes" xml:space="preserve">
          <source>rather than this more cryptic mess:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90bc1cd9af14d00ad540598dc7075041f046efe" translate="yes" xml:space="preserve">
          <source>rather than your script setuid or setgid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b524d90dbcf160ddb4a560d1503123520ae7c4" translate="yes" xml:space="preserve">
          <source>rather than:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a373e1c145e7fb337c1d5d4fe81b4c7a01cecb8" translate="yes" xml:space="preserve">
          <source>rather, the smart match distributive rule takes precedence, so $obj is smart matched against each array element in turn until a match is found, so you may see between one and three of these calls instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce15802a8c5e8e9db0ffaf10130ef265296e9ea4" translate="yes" xml:space="preserve">
          <source>raw</source>
          <target state="translated">raw</target>
        </trans-unit>
        <trans-unit id="93c441a3461c95a430c34985221e1a81072df245" translate="yes" xml:space="preserve">
          <source>raw source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc3669ddd568be896e988ca05d2f7fef018d840" translate="yes" xml:space="preserve">
          <source>rawdeflate $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03086ac0c570d1f4c447e7a73bf97385aed9949f" translate="yes" xml:space="preserve">
          <source>rawinflate $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179a88b477d45031df388eb470bdb1bbea8a913f" translate="yes" xml:space="preserve">
          <source>rdo (FILENAME)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c387c982a132d05cbd5f88840aef2c8157740049" translate="yes" xml:space="preserve">
          <source>re</source>
          <target state="translated">re</target>
        </trans-unit>
        <trans-unit id="6a82af180481c23c397d36c848bbc13dec87b16b" translate="yes" xml:space="preserve">
          <source>re - Perl pragma to alter regular expression behaviour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baff1506c2674f5b091c41ce364a10188d9c9f0c" translate="yes" xml:space="preserve">
          <source>reach</source>
          <target state="translated">reach</target>
        </trans-unit>
        <trans-unit id="a7afddb68260a60f86c02a021efba7f216c2e7cf" translate="yes" xml:space="preserve">
          <source>read</source>
          <target state="translated">read</target>
        </trans-unit>
        <trans-unit id="ef54cc84df0a4c09cd0841780a5277e2cbbb7e42" translate="yes" xml:space="preserve">
          <source>read FILEHANDLE,SCALAR,LENGTH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6528f9f53f5fc4636eb61d85489e9267b93ee5" translate="yes" xml:space="preserve">
          <source>read FILEHANDLE,SCALAR,LENGTH,OFFSET</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793941af96c409d6c56018ffd1784ffa33878c36" translate="yes" xml:space="preserve">
          <source>read cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fce8545de6af3cd18e41304e46915731ef967c3" translate="yes" xml:space="preserve">
          <source>read or write the file during the &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call. (Exception: Using &lt;code&gt;mode =&amp;gt; O_TRUNC&lt;/code&gt; will, of course, erase the file during the &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; call. If you want to do this safely, then open the file without &lt;code&gt;O_TRUNC&lt;/code&gt; , lock the file, and use &lt;code&gt;@array = ()&lt;/code&gt; .)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d0c601af1afbb3be170ccaa0e281bf2a2b2af3" translate="yes" xml:space="preserve">
          <source>read the following documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401f06437899c415ec136826c8ae603a9809653e" translate="yes" xml:space="preserve">
          <source>read-filehandle</source>
          <target state="translated">read-filehandle</target>
        </trans-unit>
        <trans-unit id="1d8d39a6e91a5d579d831544fb5c2b08d7ea8d5d" translate="yes" xml:space="preserve">
          <source>read-only</source>
          <target state="translated">read-only</target>
        </trans-unit>
        <trans-unit id="dfee97a14e985bfac7fff1f55fe035fd5a3d2627" translate="yes" xml:space="preserve">
          <source>read_cur_obj_info: bad file magic number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d99e9e7c294ca9bf08657d2122e92d785a53b57" translate="yes" xml:space="preserve">
          <source>readdir</source>
          <target state="translated">readdir</target>
        </trans-unit>
        <trans-unit id="1a804d96d8086f100c230151cbdb0dca7fad9b8e" translate="yes" xml:space="preserve">
          <source>readdir DIRHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9e02a8a394d595c1ab54f6315b05691962004a" translate="yes" xml:space="preserve">
          <source>readline</source>
          <target state="translated">readline</target>
        </trans-unit>
        <trans-unit id="f87393dd1d937b9b85afc23e295c39a07fa94dc0" translate="yes" xml:space="preserve">
          <source>readline EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd11917efc0793598b6957b47b4078902b90168d" translate="yes" xml:space="preserve">
          <source>readlink</source>
          <target state="translated">readlink</target>
        </trans-unit>
        <trans-unit id="a7201c3293b9dce374f534faa07a4cddce6ea9f4" translate="yes" xml:space="preserve">
          <source>readlink EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a27718297218c3757c365d357d13f49d0fa3065" translate="yes" xml:space="preserve">
          <source>readonly</source>
          <target state="translated">readonly</target>
        </trans-unit>
        <trans-unit id="0abe7ae16f97ce68f7b9b93d54f019a3b5fdefb5" translate="yes" xml:space="preserve">
          <source>readpipe</source>
          <target state="translated">readpipe</target>
        </trans-unit>
        <trans-unit id="ba6ed2ef0688f27e0b426ebc35e54374f608c55d" translate="yes" xml:space="preserve">
          <source>readpipe EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7b63990f6ec1fe4b48e4efa0f20472e6393209" translate="yes" xml:space="preserve">
          <source>reads a named &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; file (defaults to &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; in the current directory) and returns a CODE reference that tests whether a given filename should be skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acecba67be528af9a30b5720d32ed3650a3786b6" translate="yes" xml:space="preserve">
          <source>reads a named &lt;code&gt;MANIFEST&lt;/code&gt; file (defaults to &lt;code&gt;MANIFEST&lt;/code&gt; in the current directory) and returns a HASH reference with files being the keys and comments being the values of the HASH. Blank lines and lines which start with &lt;code&gt;#&lt;/code&gt; in the &lt;code&gt;MANIFEST&lt;/code&gt; file are discarded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c64e071d2853bc7906c017a231ad1cc46ab630" translate="yes" xml:space="preserve">
          <source>real</source>
          <target state="translated">real</target>
        </trans-unit>
        <trans-unit id="6f3be58a8f19ccd637f392dc57a557abbdefde8a" translate="yes" xml:space="preserve">
          <source>real time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe249104fbf17dcc4c6c041017e1b18499d670d" translate="yes" xml:space="preserve">
          <source>realclean (o)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a1195a569759fe9835ce615855bafef5ea2fc7" translate="yes" xml:space="preserve">
          <source>realclean_subdirs_target</source>
          <target state="translated">realclean_subdirs_target</target>
        </trans-unit>
        <trans-unit id="084ab4093f675b9f4eb22dc243a80d8adc4ff27c" translate="yes" xml:space="preserve">
          <source>really</source>
          <target state="translated">really</target>
        </trans-unit>
        <trans-unit id="759cc80a7701ce9961f1b730690dc4d1b1b85538" translate="yes" xml:space="preserve">
          <source>reasonable</source>
          <target state="translated">reasonable</target>
        </trans-unit>
        <trans-unit id="30c392a22284f577f3323151cdb2fe0247e15078" translate="yes" xml:space="preserve">
          <source>recent ***EXPERIMENTAL COMMAND***</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6db853b9567e4e91a1b30e09fbd0a82d17288b" translate="yes" xml:space="preserve">
          <source>recno(3)</source>
          <target state="translated">recno(3)</target>
        </trans-unit>
        <trans-unit id="445b48d60ab56491a642fc4070651b197812a33c" translate="yes" xml:space="preserve">
          <source>recoded to use &lt;code&gt;ST&lt;/code&gt; instead of &lt;code&gt;POP*&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcb6ddaf7f1b5794f5895f0358d982143329f9d" translate="yes" xml:space="preserve">
          <source>recommended, but if you insist on being able to do this, then the subclass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90beacd2862cc032b84a7cbc87ff06f3874b3f50" translate="yes" xml:space="preserve">
          <source>recompile</source>
          <target state="translated">recompile</target>
        </trans-unit>
        <trans-unit id="fc2e5148c922fb4b71ecdbabb3af067ec38ccd9e" translate="yes" xml:space="preserve">
          <source>recompile() is a special command that takes no argument and runs the make/test/install cycle with brute force over all installed dynamically loadable extensions (a.k.a. XS modules) with 'force' in effect. The primary purpose of this command is to finish a network installation. Imagine you have a common source tree for two different architectures. You decide to do a completely independent fresh installation. You start on one architecture with the help of a Bundle file produced earlier. CPAN installs the whole Bundle for you, but when you try to repeat the job on the second architecture, CPAN responds with a &lt;code&gt;&quot;Foo up to date&quot;&lt;/code&gt; message for all modules. So you invoke CPAN's recompile on the second architecture and you're done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076bcb8ec4aba14df74d4b16240578ff488a52b8" translate="yes" xml:space="preserve">
          <source>recsep</source>
          <target state="translated">recsep</target>
        </trans-unit>
        <trans-unit id="be3f32295f57b2fc01a24d21dc3cc14c438aff7f" translate="yes" xml:space="preserve">
          <source>recursively</source>
          <target state="translated">recursively</target>
        </trans-unit>
        <trans-unit id="3b3cea7ab5b6598258360321d292b1bdd68e0c3c" translate="yes" xml:space="preserve">
          <source>recv</source>
          <target state="translated">recv</target>
        </trans-unit>
        <trans-unit id="20b272cc4d28117ab15e9ca8f0ba0c57665ddf34" translate="yes" xml:space="preserve">
          <source>recv SOCKET,SCALAR,LENGTH,FLAGS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c988947217e204c175284904bc4f465fd200a5" translate="yes" xml:space="preserve">
          <source>recvmsg(3)</source>
          <target state="translated">recvmsg(3)</target>
        </trans-unit>
        <trans-unit id="a843d3e98ccb01f0f2ac376d60a6b33c8edf3ed2" translate="yes" xml:space="preserve">
          <source>redirection</source>
          <target state="translated">redirection</target>
        </trans-unit>
        <trans-unit id="4d64c2287901f3bbbfe4054df3721517c5bb6e82" translate="yes" xml:space="preserve">
          <source>redo</source>
          <target state="translated">redo</target>
        </trans-unit>
        <trans-unit id="6543d9c179200383ade9d3a37c0888876abb538d" translate="yes" xml:space="preserve">
          <source>redo EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c98ad896e31639496599fd55cfb21745c3b282" translate="yes" xml:space="preserve">
          <source>redo LABEL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd5c3411f2c5f0d021c544f7eb676f0c2f316e1" translate="yes" xml:space="preserve">
          <source>reentr.h</source>
          <target state="translated">reentr.h</target>
        </trans-unit>
        <trans-unit id="69449f994d55805535b9e8fab16f6c39934e9ba4" translate="yes" xml:space="preserve">
          <source>ref</source>
          <target state="translated">ref</target>
        </trans-unit>
        <trans-unit id="412655add96c7b2869f19ac88cf7b612044bb747" translate="yes" xml:space="preserve">
          <source>ref EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb4f12beb628a0bd4a81d78862fde46c3402606" translate="yes" xml:space="preserve">
          <source>ref. &lt;a href=&quot;http://csrc.nist.gov/groups/ST/hash/statement.html&quot;&gt;http://csrc.nist.gov/groups/ST/hash/statement.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35787ef285e73b6ab376eeb977196ac50acee965" translate="yes" xml:space="preserve">
          <source>refaddr</source>
          <target state="translated">refaddr</target>
        </trans-unit>
        <trans-unit id="9dca9b5977529ddc5f192e9a35eefdcbd21506de" translate="yes" xml:space="preserve">
          <source>refcnt</source>
          <target state="translated">refcnt</target>
        </trans-unit>
        <trans-unit id="02ab610f42452d706ba305f258e0f91fd271be3b" translate="yes" xml:space="preserve">
          <source>reference</source>
          <target state="translated">reference</target>
        </trans-unit>
        <trans-unit id="70b6d092264532d859854b40e350a0e0cf121d7f" translate="yes" xml:space="preserve">
          <source>reference to a variable, because there's already a reference to the variable in the symbol table. But the symbol table reference might go away, and you'll still have the reference that the backslash returned. Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ec5cba31a84c46b07d67198794abe88f3ae15a" translate="yes" xml:space="preserve">
          <source>reference used as a key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c9a69f715c3c60aa2fc15795b3834d2dc51b9d" translate="yes" xml:space="preserve">
          <source>references</source>
          <target state="translated">references</target>
        </trans-unit>
        <trans-unit id="43ac898d3b740a3a9aca4a83a71c9d27b4da9951" translate="yes" xml:space="preserve">
          <source>references to the tied object are destroyed. Both the tied variable, &lt;code&gt;%x&lt;/code&gt; , and &lt;code&gt;$X&lt;/code&gt; above hold a reference to the object. The call to untie() will destroy the first, but &lt;code&gt;$X&lt;/code&gt; still holds a valid reference, so the destructor will not get called and the database file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c044a726a0dc1c5ade5fa704b3c527d7b86317" translate="yes" xml:space="preserve">
          <source>referent</source>
          <target state="translated">referent</target>
        </trans-unit>
        <trans-unit id="ba8147677f58df75507af77789c3cbff58d2f110" translate="yes" xml:space="preserve">
          <source>refers to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2f220fe54b0b3869964ccb949ac84fca83b41a" translate="yes" xml:space="preserve">
          <source>refers to a position in this XSUB's part of the stack. Position 0 for that function would be known to the XSUB as ST(0). The XSUB's incoming parameters and outgoing return values always begin at ST(0). For many simple cases the &lt;b&gt;xsubpp&lt;/b&gt; compiler will generate the code necessary to handle the argument stack by embedding code fragments found in the typemaps. In more complex cases the programmer must supply the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f6744538a8076da5b16ba479cfc0284e88129d" translate="yes" xml:space="preserve">
          <source>refers to a string type (&lt;code&gt;&quot;A&quot;&lt;/code&gt; , &lt;code&gt;&quot;a&quot;&lt;/code&gt; , or &lt;code&gt;&quot;Z&quot;&lt;/code&gt; ), the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4fa4b9bd157f2cf8bfdb3f3c2c67dd5d9e0203" translate="yes" xml:space="preserve">
          <source>refers to the Nth set of parentheses, so &lt;code&gt;\g&lt;i&gt;N&lt;/i&gt;&lt;/code&gt; refers to whatever has been matched by that set of parentheses. Thus &lt;code&gt;\g1&lt;/code&gt; refers to the first capture group in the regex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd1aad4a3825e05af5546e2cf1b43ad4fe61c17" translate="yes" xml:space="preserve">
          <source>reformatted output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31fd30fc09afc6a6440b544002c25a4682f30bf" translate="yes" xml:space="preserve">
          <source>reftype</source>
          <target state="translated">reftype</target>
        </trans-unit>
        <trans-unit id="aeeed271cb055ad6a84bbe30599d4604784b77e5" translate="yes" xml:space="preserve">
          <source>regcomp.c</source>
          <target state="translated">regcomp.c</target>
        </trans-unit>
        <trans-unit id="9d5ab3cb3eda17bb75581826451758ddd1c0fd3a" translate="yes" xml:space="preserve">
          <source>regcomp.h</source>
          <target state="translated">regcomp.h</target>
        </trans-unit>
        <trans-unit id="c68393490506f7948a5863ecb075c1d679a24348" translate="yes" xml:space="preserve">
          <source>regcomp.pl</source>
          <target state="translated">regcomp.pl</target>
        </trans-unit>
        <trans-unit id="b5b982c557b1cc5f9a23915a6d0c7adcb7b251af" translate="yes" xml:space="preserve">
          <source>regcomp.sym</source>
          <target state="translated">regcomp.sym</target>
        </trans-unit>
        <trans-unit id="453475e2524c443afd05f5ff6661a367f55d94c8" translate="yes" xml:space="preserve">
          <source>regen/op_private</source>
          <target state="translated">regen/op_private</target>
        </trans-unit>
        <trans-unit id="8763f7cd5330a62dee2e91301169b3a11488c0cf" translate="yes" xml:space="preserve">
          <source>regen/unicode_constants.pl</source>
          <target state="translated">regen/unicode_constants.pl</target>
        </trans-unit>
        <trans-unit id="9dbdda2651d1432af23bc1e6328f8d6bdcf8e4de" translate="yes" xml:space="preserve">
          <source>regexp pattern. This is great for matching an array of regexps that must have different modifiers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a036b3cb9850e50a52aeceaee40503e4e521cb" translate="yes" xml:space="preserve">
          <source>regexp.h</source>
          <target state="translated">regexp.h</target>
        </trans-unit>
        <trans-unit id="145a3c14b9e03bf0252821c13b9ad84af75ccde9" translate="yes" xml:space="preserve">
          <source>regexps in the program. So if raw performance is a goal of your application, they should be avoided. If you need to extract the corresponding substrings, use &lt;code&gt;@-&lt;/code&gt; and &lt;code&gt;@+&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4afe43ae5651e72e21ce5dd4b4a80599b689e35" translate="yes" xml:space="preserve">
          <source>register a client object/package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faefaa55b8a33b31c7da9d18fa5816e18b6fb01e" translate="yes" xml:space="preserve">
          <source>regnodes.h</source>
          <target state="translated">regnodes.h</target>
        </trans-unit>
        <trans-unit id="6a3426160375844ae89930661ec26583f4d509a5" translate="yes" xml:space="preserve">
          <source>regression test in the Perl source directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa7a42ea8e67802ad7ce174ccf2b57916a11263" translate="yes" xml:space="preserve">
          <source>regular expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca488282f27b88302c058b1e6c81fb21b55d0fa5" translate="yes" xml:space="preserve">
          <source>regular expression modifier (see &lt;a href=&quot;#The-dot&quot;&gt;The dot&lt;/a&gt; above). Note that the form &lt;code&gt;\N{...}&lt;/code&gt; may mean something completely different. When the &lt;code&gt;{...}&lt;/code&gt; is a &lt;a href=&quot;perlre#Quantifiers&quot;&gt;quantifier&lt;/a&gt;, it means to match a non-newline character that many times. For example, &lt;code&gt;\N{3}&lt;/code&gt; means to match 3 non-newlines; &lt;code&gt;\N{5,}&lt;/code&gt; means to match 5 or more non-newlines. But if &lt;code&gt;{...}&lt;/code&gt; is not a legal quantifier, it is presumed to be a named character. See &lt;a href=&quot;charnames&quot;&gt;charnames&lt;/a&gt; for those. For example, none of &lt;code&gt;\N{COLON}&lt;/code&gt; , &lt;code&gt;\N{4F}&lt;/code&gt;, and &lt;code&gt;\N{F4}&lt;/code&gt; contain legal quantifiers, so Perl will try to find characters whose names are respectively &lt;code&gt;COLON&lt;/code&gt; , &lt;code&gt;4F&lt;/code&gt;, and &lt;code&gt;F4&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c717dabba6669f73a50a0356803ee3dfe0530c12" translate="yes" xml:space="preserve">
          <source>regular expression must match, not just part of it. So if the beginning of a pattern containing a quantifier succeeds in a way that causes later parts in the pattern to fail, the matching engine backs up and recalculates the beginning part--that's why it's called backtracking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89972fe17d661d739cd390e63e068789998cbf3" translate="yes" xml:space="preserve">
          <source>relative</source>
          <target state="translated">relative</target>
        </trans-unit>
        <trans-unit id="69c90151444c6c3708b80bfdd4e8f2b4d7368fee" translate="yes" xml:space="preserve">
          <source>relative to a search path, we should find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a26d6f4aab9bc632ef3b0b244135354c76f93c" translate="yes" xml:space="preserve">
          <source>rename</source>
          <target state="translated">rename</target>
        </trans-unit>
        <trans-unit id="84ba1bf3385785ec568b19c4ec05b1c7cd49dea8" translate="yes" xml:space="preserve">
          <source>rename OLDNAME,NEWNAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44c45c2fb1d6ef9ee6a1ba99306fd7d63fd2e01" translate="yes" xml:space="preserve">
          <source>rename your program to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f5055e7df7e1032e654b579cc326ca69e9e004" translate="yes" xml:space="preserve">
          <source>renderable. They do not signify whitespace, are merely part of the formatting codes themselves. That is, these are all synonymous:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ac4842418e34583859262c033965cfd49454e0" translate="yes" xml:space="preserve">
          <source>repeat</source>
          <target state="translated">repeat</target>
        </trans-unit>
        <trans-unit id="3cacc7bfac0a382c669a884c953d0401a689785d" translate="yes" xml:space="preserve">
          <source>replace</source>
          <target state="translated">replace</target>
        </trans-unit>
        <trans-unit id="4da4c43565262b91a66713b9f1a62d5e2952c6b6" translate="yes" xml:space="preserve">
          <source>replaced</source>
          <target state="translated">replaced</target>
        </trans-unit>
        <trans-unit id="9eafb5e7c3eee28101581337357f4d0e06b88f03" translate="yes" xml:space="preserve">
          <source>replaced with XS code by Tom Hughes &amp;lt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c8fbceaa2e2156fb53962ad064fe03043e4bd0" translate="yes" xml:space="preserve">
          <source>replaces</source>
          <target state="translated">replaces</target>
        </trans-unit>
        <trans-unit id="cb6185196314644dbc49c7d8307632695526875a" translate="yes" xml:space="preserve">
          <source>replaces strings '::' with '.' in MAN*POD man page names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27297bde9732f2e73fbc06db2611764e3ad9855" translate="yes" xml:space="preserve">
          <source>report</source>
          <target state="translated">report</target>
        </trans-unit>
        <trans-unit id="6af91413ccae40ff7272454f4bf89b96f810cec2" translate="yes" xml:space="preserve">
          <source>report Bundle|Distribution|Module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0613600c774517ef71f037ed86fde4e921deb1ce" translate="yes" xml:space="preserve">
          <source>report, you can click through the various links to bore down into each subroutine and each line of code. Because we're using the text reporting here, and there's a whole directory full of reports built for each source file, we'll just display a part of the corresponding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc40f89295ea520744b642fb379e320964a0af2" translate="yes" xml:space="preserve">
          <source>reported with very old version of tr and sed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7992ddbbd3e29cdab0c7c915f5b063be8b2a72c8" translate="yes" xml:space="preserve">
          <source>reports which files are below the build directory but not in the MANIFEST file and vice versa. (See ExtUtils::Manifest::fullcheck() for details)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da0f9909c363b48a691f9f0fd25f1058de2b540" translate="yes" xml:space="preserve">
          <source>reports which files are skipped due to the entries in the &lt;code&gt;MANIFEST.SKIP&lt;/code&gt; file (See ExtUtils::Manifest::skipcheck() for details)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556803524b2e473971e500ec8fba83ed2cc57142" translate="yes" xml:space="preserve">
          <source>represents a byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e2274d144197373a9cba2b76bbf027bbe229b8" translate="yes" xml:space="preserve">
          <source>represents a decimal digit this is its integer numeric value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a399198953fec136c9b5b94090c8d3486c3817" translate="yes" xml:space="preserve">
          <source>represents a whole or rational number, this is its numeric value. Rational values are expressed as a string like &lt;code&gt;1/4&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f908d57e214b716e00c5db45efc6dc72383304" translate="yes" xml:space="preserve">
          <source>represents some other digit-like number, this is its integer numeric value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2636141fa01a7f00d85e7bde78cbfeb8b72b7d2e" translate="yes" xml:space="preserve">
          <source>represents the context type, roughly based on the type of op that would do the modifying, although &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local()&lt;/a&gt;&lt;/code&gt; is represented by OP_NULL, because it has no op type of its own (it is signalled by a flag on the lvalue op).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3bab488eed16e8f5d4169aad99df1dec3d87e1" translate="yes" xml:space="preserve">
          <source>represents.</source>
          <target state="translated">represents.</target>
        </trans-unit>
        <trans-unit id="623e76c36aa2a886542011e28412cc761d7ceb01" translate="yes" xml:space="preserve">
          <source>require</source>
          <target state="translated">require</target>
        </trans-unit>
        <trans-unit id="b09903a6dc1190e06228ad8bbfd7a1d79c8d3f7b" translate="yes" xml:space="preserve">
          <source>require EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ff543139f42153f645737e9007d983085fc0c1" translate="yes" xml:space="preserve">
          <source>require VERSION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542f13545884269f98f923ec04a2394e9f7b6563" translate="yes" xml:space="preserve">
          <source>require you to construct pointers in this roundabout way. You simply pass a string variable, and Perl forwards the address.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a77d416224cbbe77a439cfd6c198030cb522872" translate="yes" xml:space="preserve">
          <source>required</source>
          <target state="translated">required</target>
        </trans-unit>
        <trans-unit id="8351d7c3e6a56b584719f962e556ece9c1fa009c" translate="yes" xml:space="preserve">
          <source>requires a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbeb09ecce3aa34863182ca696ec363844b9120f" translate="yes" xml:space="preserve">
          <source>reserved with respect to labels and filehandles, however, which don't have an initial special character. You can't have a filehandle named &quot;log&quot;, for instance. Hint: you could say &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(LOG,'logfile')&lt;/a&gt;&lt;/code&gt; rather than &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open(log,'logfile')&lt;/a&gt;&lt;/code&gt;. Using uppercase filehandles also improves readability and protects you from conflict with future reserved words. Case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf95a1a5d09d50314c93ef41dfbfd68000815b0" translate="yes" xml:space="preserve">
          <source>reserved.</source>
          <target state="translated">reserved.</target>
        </trans-unit>
        <trans-unit id="91ef0c1608b20c9c5bd9e003bbb600229c0dfeb1" translate="yes" xml:space="preserve">
          <source>reset</source>
          <target state="translated">reset</target>
        </trans-unit>
        <trans-unit id="6b58a716357cf606e11cce504b239b3a4e0d53c4" translate="yes" xml:space="preserve">
          <source>reset EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609676d8a294ff3250105e9c3459e5b3221a25cd" translate="yes" xml:space="preserve">
          <source>resolve the names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12a7598b4fa62f291ff406f1a2a6d026c0b793b" translate="yes" xml:space="preserve">
          <source>resolve_man_page_link</source>
          <target state="translated">resolve_man_page_link</target>
        </trans-unit>
        <trans-unit id="b80ceee03342c401f2ffa131012d430a2d5263ff" translate="yes" xml:space="preserve">
          <source>resolve_pod_page_link</source>
          <target state="translated">resolve_pod_page_link</target>
        </trans-unit>
        <trans-unit id="5a8c56019edec9775ef01bbb9d556ff8d77f73c4" translate="yes" xml:space="preserve">
          <source>resolved based on the object's class. This is important, because it lets methods at different levels within a deep inheritance hierarchy each correctly call their respective parent methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b524c0a30889e1b0fd4847e6d7ec9481d82592" translate="yes" xml:space="preserve">
          <source>respect the $check during decoding. It is deliberately done that way. If you need minute control, use &lt;code&gt;decode&lt;/code&gt; followed by &lt;code&gt;encode&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3918caf1f1216192050a3c60a7b78c81cecd575" translate="yes" xml:space="preserve">
          <source>restores default banner behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4d2385b84329a52ca542285b93d9c4618420df" translate="yes" xml:space="preserve">
          <source>restricted</source>
          <target state="translated">restricted</target>
        </trans-unit>
        <trans-unit id="37a5301a88da334dc5afc5b63979daa0f3f45e68" translate="yes" xml:space="preserve">
          <source>result</source>
          <target state="translated">result</target>
        </trans-unit>
        <trans-unit id="2c8cfc2aa986e510574448ca62178dec7ccc1bba" translate="yes" xml:space="preserve">
          <source>result factory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f09131c9c0e95596cc4bf8dacf26d19e144d7f" translate="yes" xml:space="preserve">
          <source>result types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fa6fc31b12b6df95d88dd23257cdbd69ea516f" translate="yes" xml:space="preserve">
          <source>result_class</source>
          <target state="translated">result_class</target>
        </trans-unit>
        <trans-unit id="cdf7e925f5746741c316f5fbcf39ad0dfca90775" translate="yes" xml:space="preserve">
          <source>results</source>
          <target state="translated">results</target>
        </trans-unit>
        <trans-unit id="ea0d137fa0077ce0c7953f0dceb93af4ba0cb4fa" translate="yes" xml:space="preserve">
          <source>results in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b32cfd8a2c426f113a52ac346643a6e71ff2390" translate="yes" xml:space="preserve">
          <source>results in &lt;code&gt;&amp;lt;&amp;gt;&amp;lt;b&amp;gt;&amp;lt;&amp;gt;&amp;lt;a&amp;gt;&amp;lt;&amp;gt;&amp;lt;r&amp;gt;&amp;lt;&amp;gt;&lt;/code&gt; . At each position of the string the best match given by non-greedy &lt;code&gt;??&lt;/code&gt; is the zero-length match, and the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b41bbaa70d5e60853e1011e31a6488e8eac1ac" translate="yes" xml:space="preserve">
          <source>resume</source>
          <target state="translated">resume</target>
        </trans-unit>
        <trans-unit id="63143b6f8007b98c53ca2149822777b3566f9241" translate="yes" xml:space="preserve">
          <source>return</source>
          <target state="translated">return</target>
        </trans-unit>
        <trans-unit id="c564341b81dc8375800242874f314886ecb4712e" translate="yes" xml:space="preserve">
          <source>return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, because there is a bug in some versions of Perl that will cause a spurious FETCH if the EXISTS method returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b4a178f1f037f041ffddd8197d0639a94695d7" translate="yes" xml:space="preserve">
          <source>return EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b545cd18d93b2d6a94cb5abcea70730f63eb649" translate="yes" xml:space="preserve">
          <source>return TRUE upon successful printing of the message. If &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is given, then the &lt;b&gt;carp&lt;/b&gt; builtin is used to issue error messages (this is the default behavior).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452b0ad00029677917dec6f188402b2c5b3390d2" translate="yes" xml:space="preserve">
          <source>return false for &lt;code&gt;is_ok&lt;/code&gt; , regardless of whether or not the test &lt;code&gt;has_todo&lt;/code&gt; (see &lt;a href=&quot;parser/result/test&quot;&gt;TAP::Parser::Result::Test&lt;/a&gt; for more information about this).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26675635903e3be60a98af47616a6d7a52e76c9" translate="yes" xml:space="preserve">
          <source>return false for &lt;code&gt;is_ok&lt;/code&gt; , regardless of whether or not the test &lt;code&gt;has_todo&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261f673fda466b4c5297a8e6ea5163eab43b573f" translate="yes" xml:space="preserve">
          <source>return the filehandles for input and output or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;&lt;a href=&quot;../functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; input and output cannot be used for Perl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a49434b06693803f40b4f119739e03f0554c985" translate="yes" xml:space="preserve">
          <source>return their last value in scalar context as one might expect. They currently return the number of values, but &lt;b&gt;this may change in the future&lt;/b&gt;. Do not use constants with multiple values in scalar context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd81da956b2c72024c57fdf7f73d937c5cfdad5" translate="yes" xml:space="preserve">
          <source>return undef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462af2695f5bef3ee3b44a2e254fa14c1e884818" translate="yes" xml:space="preserve">
          <source>returnaddress</source>
          <target state="translated">returnaddress</target>
        </trans-unit>
        <trans-unit id="f78802d7b23112444126c15e65b0e44f5bcfd99a" translate="yes" xml:space="preserve">
          <source>returned &lt;code&gt;Z_ERRORNO&lt;/code&gt; ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3570a339a7becb542c230cc440b96207c451be38" translate="yes" xml:space="preserve">
          <source>returning...</source>
          <target state="translated">returning...</target>
        </trans-unit>
        <trans-unit id="a092f3f5c7bb6a1c4b6a2f29c4d8441557d16e20" translate="yes" xml:space="preserve">
          <source>returns a data structure like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b75b5c0a638691a76d7d65ea7dae99d65dd749" translate="yes" xml:space="preserve">
          <source>returns a hash reference. The keys of the hash are the files found below the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0ee21464bdd4cccbd8cb0629bfaae900ff7af0" translate="yes" xml:space="preserve">
          <source>returns a list of the valid match attributes (see the Distroprefs section in &lt;a href=&quot;../cpan&quot;&gt;CPAN&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a8f9719d5188d1c31cf4ecf12cde9bb2f4d299" translate="yes" xml:space="preserve">
          <source>returns a random integer between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;9&lt;/code&gt; , inclusive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bab864e28deb91c87acea5ea282fb1a0bbfa5b" translate="yes" xml:space="preserve">
          <source>returns a reference to a hash which describes internal configuration of the package. Names of keys in this hash conform to standard conventions with the leading &lt;code&gt;rl_&lt;/code&gt; stripped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef8acc81c2979fd16a21d7b784279a3344e377e" translate="yes" xml:space="preserve">
          <source>returns an array with two strings that give most appropriate names for files for input and output using conventions &lt;code&gt;&quot;&amp;lt;$in&quot;&lt;/code&gt; , &lt;code&gt;&quot;&amp;gt;out&quot;&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367430f858e12a7446519f8f0597732f1bffd434" translate="yes" xml:space="preserve">
          <source>returns an encoder object. Its data is initialized with $data if present, and its encoding is set to $encoding if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969efa1227f9f4be18c8ef0d059c0ca93af3c065" translate="yes" xml:space="preserve">
          <source>returns the actual package that executes the commands. Among possible values are &lt;code&gt;Term::ReadLine::Gnu&lt;/code&gt; , &lt;code&gt;Term::ReadLine::Perl&lt;/code&gt; , &lt;code&gt;Term::ReadLine::Stub&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b030dcacd2163d8e765cb29890fc3c730f4b8bd" translate="yes" xml:space="preserve">
          <source>returns the handle for subsequent calls to following functions. Argument is the name of the application. Optionally can be followed by two arguments for &lt;code&gt;IN&lt;/code&gt; and &lt;code&gt;OUT&lt;/code&gt; filehandles. These arguments should be globs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c70fa0ffba54699119d52c0289510a6bed1751" translate="yes" xml:space="preserve">
          <source>returns the number of bytes in the UTF-8 encoded character whose first (perhaps only) byte is pointed to by &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65451e3d449f39c9db03734c8af4d5ac26067692" translate="yes" xml:space="preserve">
          <source>returns the number of bytes required to represent the code point &lt;code&gt;cp&lt;/code&gt; when encoded as UTF-8. &lt;code&gt;cp&lt;/code&gt; is a native (ASCII or EBCDIC) code point if less than 255; a Unicode code point otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68083c79ef8f718aa084bc5df33cfb04a088a65c" translate="yes" xml:space="preserve">
          <source>returns the regex:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a618a263961a7f614dedf8380991fe063631999f" translate="yes" xml:space="preserve">
          <source>returns the string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b8dabf0b7bfae1c2eecb47a6afcd8bc92cc94c" translate="yes" xml:space="preserve">
          <source>returns:</source>
          <target state="translated">returns:</target>
        </trans-unit>
        <trans-unit id="76992be7c2dcf2f498a0f95a33cdf7a7e7d93211" translate="yes" xml:space="preserve">
          <source>reusable</source>
          <target state="translated">reusable</target>
        </trans-unit>
        <trans-unit id="bb493a297313a1a48a47ea5e548fbe1cefc6981e" translate="yes" xml:space="preserve">
          <source>reval (STRING, STRICT)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75470a3076d8da06e21a0f542f3a535af3f72e94" translate="yes" xml:space="preserve">
          <source>reverse</source>
          <target state="translated">reverse</target>
        </trans-unit>
        <trans-unit id="2a525518e102434f5330ec1cd80cfac13c898cfc" translate="yes" xml:space="preserve">
          <source>reverse LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6f2aa78ca80d437d37b4ca3c199ed7d32c7afd" translate="yes" xml:space="preserve">
          <source>rewinddir</source>
          <target state="translated">rewinddir</target>
        </trans-unit>
        <trans-unit id="5200de6ef51e3bac6424882198366177ad28ae58" translate="yes" xml:space="preserve">
          <source>rewinddir DIRHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce12a98d549836370160c0749535f7964b47b53" translate="yes" xml:space="preserve">
          <source>rewrites the MANIFEST file, adding all remaining files found (See ExtUtils::Manifest::mkmanifest() for details)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd50cc279429522ae064ca74a3f9d75e79d1783" translate="yes" xml:space="preserve">
          <source>rho</source>
          <target state="translated">rho</target>
        </trans-unit>
        <trans-unit id="d27a1f11771200949714b1af99f048a416f5d6f4" translate="yes" xml:space="preserve">
          <source>right</source>
          <target state="translated">right</target>
        </trans-unit>
        <trans-unit id="b83745909bf456708238676595a3d6c8f5d144c8" translate="yes" xml:space="preserve">
          <source>right before</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7345db8ed4e38e208cb4be649162573569d45ab2" translate="yes" xml:space="preserve">
          <source>right then and there, and then use that value as if it had been there all along. This happens before we even look in any superclass %Lexicons!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6536242704f8f578479b83355c7b0b766d608d" translate="yes" xml:space="preserve">
          <source>rindex</source>
          <target state="translated">rindex</target>
        </trans-unit>
        <trans-unit id="44783593cd849c0b0582fe4733417fe81604635b" translate="yes" xml:space="preserve">
          <source>rindex STR,SUBSTR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f21210765c2ff6e8c530038e99ae880a8ac0fa" translate="yes" xml:space="preserve">
          <source>rindex STR,SUBSTR,POSITION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b078cf62838bf4ea264d788dc187c0080d8e03" translate="yes" xml:space="preserve">
          <source>rjbs for refactoring Pod::Usage to not use Pod::Parser any more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1928e4e5ae9e25db7676cc058f135badff13a97d" translate="yes" xml:space="preserve">
          <source>rm -f $tmpfile -----8&amp;lt;----------8&amp;lt;-----</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6d5b0495fa677cfd07d92ee4c09c485f0b90ca" translate="yes" xml:space="preserve">
          <source>rmdir</source>
          <target state="translated">rmdir</target>
        </trans-unit>
        <trans-unit id="9007e221ae849eac409138f8d68d70de2de2cb56" translate="yes" xml:space="preserve">
          <source>rmdir FILENAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c59c5cf7e82f3f836200b373ba8aad6e1e630cd" translate="yes" xml:space="preserve">
          <source>robinson_s (at) sc.maricopa.edu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721dd44b33d4463b47790a038dffede17172cf1b" translate="yes" xml:space="preserve">
          <source>roehrich@cray.com</source>
          <target state="translated">roehrich@cray.com</target>
        </trans-unit>
        <trans-unit id="dc76e9f0c0006e8f919e0c515c66dbba3982f785" translate="yes" xml:space="preserve">
          <source>root</source>
          <target state="translated">root</target>
        </trans-unit>
        <trans-unit id="55a8d07bfffeddf6bc5d20297945e64e0aa49514" translate="yes" xml:space="preserve">
          <source>root (NAMESPACE)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90081b373fefc9b6734c0390c7417c36a4fb32b4" translate="yes" xml:space="preserve">
          <source>rootbeer@redcat.com</source>
          <target state="translated">rootbeer@redcat.com</target>
        </trans-unit>
        <trans-unit id="ae6c793ddb6a3eddd4e1f921d9116f8023a7c753" translate="yes" xml:space="preserve">
          <source>roots of some complex, where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f401c39320153f51f314302e7fabac0e9362dff1" translate="yes" xml:space="preserve">
          <source>roperty.</source>
          <target state="translated">roperty.</target>
        </trans-unit>
        <trans-unit id="a2b7d3e3725acea07a14b1bf3c0f45b235a18d6f" translate="yes" xml:space="preserve">
          <source>round to minus infinity, i.e. always round down. E.g., when rounding to the first sigdig, 0.45 becomes 0.4, -0.55 becomes -0.6, but 0.4501 becomes 0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d2b47d6d435de088c90f4844c532d135b21665" translate="yes" xml:space="preserve">
          <source>round to plus infinity, i.e. always round up. E.g., when rounding to the first sigdig, 0.45 becomes 0.5, -0.55 becomes -0.5, and 0.4501 also becomes 0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a596bf30673b215b997cc470f0cee9357e8809" translate="yes" xml:space="preserve">
          <source>round to zero, i.e. positive numbers down, negative ones up. E.g., when rounding to the first sigdig, 0.45 becomes 0.4, -0.55 becomes -0.5, but 0.4501 becomes 0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db310661fe578adeb98357e7fbf2a84480946342" translate="yes" xml:space="preserve">
          <source>round up if the digit immediately to the right of the rounding place is 5 or greater, otherwise round down. E.g., 0.15 becomes 0.2 and 0.149 becomes 0.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f415dd296a824bfa10634c9bd9daddf11e21449" translate="yes" xml:space="preserve">
          <source>rounds the digit at the rounding place to 0, 2, 4, 6, or 8 if it is not already. E.g., when rounding to the first sigdig, 0.45 becomes 0.4, -0.55 becomes -0.6, but 0.4501 becomes 0.5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdbb0d225d80bce276cd86ae8d0884080695bf7" translate="yes" xml:space="preserve">
          <source>rounds the digit at the rounding place to 1, 3, 5, 7, or 9 if it is not already. E.g., when rounding to the first sigdig, 0.45 becomes 0.5, -0.55 becomes -0.5, but 0.5501 becomes 0.6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0469cf7dc7062f97586dbe2c4f395970d7aafb" translate="yes" xml:space="preserve">
          <source>roup.</source>
          <target state="translated">roup.</target>
        </trans-unit>
        <trans-unit id="93f108dbf77186f88da4561e60e7b97ea194d265" translate="yes" xml:space="preserve">
          <source>routine. &lt;code&gt;$(&lt;/code&gt; and &lt;code&gt;$)&lt;/code&gt; can be swapped only on machines supporting &lt;code&gt;setregid()&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d44d57bb2938f4e8c5c8b4232e4de3b016d7855" translate="yes" xml:space="preserve">
          <source>routine. Note that unlike &lt;code&gt;gzerror()&lt;/code&gt; , the error is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ff1e49a91630329590f32bc43118bce9607c42" translate="yes" xml:space="preserve">
          <source>rsfp</source>
          <target state="translated">rsfp</target>
        </trans-unit>
        <trans-unit id="0dab5c56c2cc8a9355c7d09ac0caad9db67d7daf" translate="yes" xml:space="preserve">
          <source>rsx.exe</source>
          <target state="translated">rsx.exe</target>
        </trans-unit>
        <trans-unit id="60ba00d5201ae3e6f354da83d716a6abb6a913e4" translate="yes" xml:space="preserve">
          <source>rtl; it also looks for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e6e005f1212900ee7750136a9988bd3b08d493" translate="yes" xml:space="preserve">
          <source>rudimentary per-package memory usage dump. If set, &lt;code&gt;dumpvars&lt;/code&gt; calculates total size of strings in variables in the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6ad19037c97987c4ff9792810c0e145356717c" translate="yes" xml:space="preserve">
          <source>run</source>
          <target state="translated">run</target>
        </trans-unit>
        <trans-unit id="84fbbee3eb02103408fa855ad53aa2d033ee26e6" translate="yes" xml:space="preserve">
          <source>run some more (until a breakpt is reached)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24b29d07d7609ad0659a2834e406cc39e139e30" translate="yes" xml:space="preserve">
          <source>run.c</source>
          <target state="translated">run.c</target>
        </trans-unit>
        <trans-unit id="3c49d9cc3c0c83421a1cfb921cdd4aa35dc1ba5c" translate="yes" xml:space="preserve">
          <source>running</source>
          <target state="translated">running</target>
        </trans-unit>
        <trans-unit id="a508f5d5722fbf80ecd434356a3c4cbfc3230c37" translate="yes" xml:space="preserve">
          <source>running the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78bf358e6b34c55e6078f1d2465155cce5c10d2" translate="yes" xml:space="preserve">
          <source>running threads. die() and exit() have this property, and perl does an exit when the main thread exits, perhaps implicitly by falling off the end of your code, even if that's not what you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7c94c5192084f7b8bff195db7fa6b68d43440a" translate="yes" xml:space="preserve">
          <source>runops_debug() returns true if the current</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1adb57e6d77ed78d82dea15fffce16e8af4efd7a" translate="yes" xml:space="preserve">
          <source>runs fine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1082a5945548b11a10e76b612550aa72e0c6ea3e" translate="yes" xml:space="preserve">
          <source>runs the program under the Perl debugger. See &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;. If &lt;b&gt;t&lt;/b&gt; is specified, it indicates to the debugger that threads will be used in the code being debugged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e860764c7b00c3e6a6c7bbb78143918d8190dc7" translate="yes" xml:space="preserve">
          <source>runs the program under the control of a debugging, profiling, or tracing module installed as &lt;code&gt;Devel::&lt;i&gt;MOD&lt;/i&gt;&lt;/code&gt;. E.g., &lt;b&gt;-d:DProf&lt;/b&gt; executes the program using the &lt;code&gt;Devel::DProf&lt;/code&gt; profiler. As with the &lt;b&gt;-M&lt;/b&gt; flag, options may be passed to the &lt;code&gt;Devel::&lt;i&gt;MOD&lt;/i&gt;&lt;/code&gt; package where they will be received and interpreted by the &lt;code&gt;Devel::&lt;i&gt;MOD&lt;/i&gt;::import&lt;/code&gt; routine. Again, like &lt;b&gt;-M&lt;/b&gt;, use -&lt;b&gt;-d:-&lt;i&gt;MOD&lt;/i&gt;&lt;/b&gt; to call &lt;code&gt;Devel::&lt;i&gt;MOD&lt;/i&gt;::unimport&lt;/code&gt; instead of import. The comma-separated list of options must follow a &lt;code&gt;=&lt;/code&gt; character. If &lt;b&gt;t&lt;/b&gt; is specified, it indicates to the debugger that threads will be used in the code being debugged. See &lt;a href=&quot;perldebug&quot;&gt;perldebug&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97ae5f90dd7e569ee3d4b929b52aa16c2012dc3" translate="yes" xml:space="preserve">
          <source>runtests( @test_files )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00d41be00371811702eb94d9ba8b3dca8085f50" translate="yes" xml:space="preserve">
          <source>runtime symbol lookups in code called from a compartment but not compiled within it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f1490a20d0211c997b44bc357e1972deab8ae3" translate="yes" xml:space="preserve">
          <source>s</source>
          <target state="translated">s</target>
        </trans-unit>
        <trans-unit id="630fc44aa12023943d95d0042c493f5323dbfd3a" translate="yes" xml:space="preserve">
          <source>s a Perl module (such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449534aa60ef6834b269f910e9d6d4d5b15ed17a" translate="yes" xml:space="preserve">
          <source>s are in the hash ref format as given in the description of &lt;code&gt;C_constant&lt;/code&gt; , and must all have the names of the same length, given by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb41e3329c6ed55d352f4c1fe48c317019f2cb43" translate="yes" xml:space="preserve">
          <source>s are the same as for C_constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da944da364b1a8ef4509dfe3fb41e019d3a38ea5" translate="yes" xml:space="preserve">
          <source>s by the output C code (see &lt;a href=&quot;../perlguts&quot;&gt;perlguts&lt;/a&gt;). Not optimizing may significantly slow down the generated code, but this is the way &lt;b&gt;xsubpp&lt;/b&gt; of 5.005 and earlier operated. Default is to optimize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5fa32758da6b2f1afebfdc5b3fd74562d3676ea" translate="yes" xml:space="preserve">
          <source>s by the output C code (see &lt;a href=&quot;perlguts&quot;&gt;perlguts&lt;/a&gt;). This may significantly slow down the generated code, but this is the way &lt;b&gt;xsubpp&lt;/b&gt; of 5.005 and earlier operated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdd1dd3055ff04fe687a6f9b8f637a8e6730b00" translate="yes" xml:space="preserve">
          <source>s do have &lt;code&gt;SVs_PADTMP&lt;/code&gt; set, it can also be set on variables that have never resided in a pad, but nonetheless act like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f81bbd18205e8a941a06e39a0655e5de80daf41" translate="yes" xml:space="preserve">
          <source>s for opcodes are created. The answer is that they are created when the current unit--a subroutine or a file (for opcodes for statements outside of subroutines)--is compiled. During this time a special anonymous Perl array is created, which is called a scratchpad for the current unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db384f2b690ee7bc78f1d497f4c9afdb14cf251" translate="yes" xml:space="preserve">
          <source>s for the components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c519463c44876e0bc8d11b72c9c6d0b4699f8a8b" translate="yes" xml:space="preserve">
          <source>s have &lt;code&gt;SVs_PADTMP&lt;/code&gt; set. But this has never been fully true. &lt;code&gt;SVs_PADMY&lt;/code&gt; could be set on a variable that no longer resides in any pad. While</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8aed444ef7962be41b6085bdedb460f4add6d3" translate="yes" xml:space="preserve">
          <source>s is not 1-to-1. Different OPs in the compile tree of the unit can use the same target, if this would not conflict with the expected life of the temporary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7342b3160977f102f77482e00000fdaec74dc9e4" translate="yes" xml:space="preserve">
          <source>s modifier (//s): Treat string as a single long line. &lt;code&gt;'.'&lt;/code&gt; matches any character, even &lt;code&gt;&quot;\n&quot;&lt;/code&gt; . &lt;code&gt;^&lt;/code&gt; matches only at the beginning of the string and &lt;code&gt;$&lt;/code&gt; matches only at the end or before a newline at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c344f381ddb86bc235433a3b70a1abd1354ff8" translate="yes" xml:space="preserve">
          <source>s on this scratchpad are &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;s, but they are already marked with correct flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2829b6cf220f198417230514a92f67270fcfd20e" translate="yes" xml:space="preserve">
          <source>s separated by dots. This represents the sequence formed by the characters. This is an internal form only, subject to change, and you should not try to use it yourself.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d61385e5c0bdd40565f4c2b80bed2ac8c8b505b" translate="yes" xml:space="preserve">
          <source>s with the same length of name, then the code to switch between them is placed into a function named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a027a1fd1b266b87eebc937b47cc63a26e86999" translate="yes" xml:space="preserve">
          <source>s without causing problems - the hash is passed in to save generating it afresh for each call).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5bb3f687fcf3b374ff0737584f6ae0dac853fc" translate="yes" xml:space="preserve">
          <source>s) which are (as a corollary) not constantly freed/created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7446b5b61ec14c6bff97e4807ee61b679972ef2e" translate="yes" xml:space="preserve">
          <source>s, for instance. Sometimes we also say &amp;ldquo;block&amp;rdquo; to mean a lexical scope; that is, a sequence of statements that acts like a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d7456070a0877845c91e46eb844fc065dbe288" translate="yes" xml:space="preserve">
          <source>s.</source>
          <target state="translated">s.</target>
        </trans-unit>
        <trans-unit id="654ac7500e4f5c7fd18e40bac969b3519ff919a1" translate="yes" xml:space="preserve">
          <source>s. As of perl 5.21.5, the &lt;code&gt;SVs_PADMY&lt;/code&gt; flag is no longer used and is defined as 0. &lt;code&gt;SvPADMY()&lt;/code&gt; now returns true for anything without &lt;code&gt;SVs_PADTMP&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec6303ed25e70b149abae31698ac55df2c07d2d" translate="yes" xml:space="preserve">
          <source>s. The resultant list should be the same list of types that &lt;code&gt;XS_constant&lt;/code&gt; is given. [Otherwise &lt;code&gt;XS_constant&lt;/code&gt; and &lt;code&gt;C_constant&lt;/code&gt; may differ in the number of parameters to the constant function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a21f9fc630400918817bd242384d50bdf8088b" translate="yes" xml:space="preserve">
          <source>s///</source>
          <target state="translated">s///</target>
        </trans-unit>
        <trans-unit id="bf31c52c32b0fcda1dc3e7c0c91803a7d1c9e891" translate="yes" xml:space="preserve">
          <source>safe</source>
          <target state="translated">safe</target>
        </trans-unit>
        <trans-unit id="ff3390557335ba88d37755e41514beb03bc499ec" translate="yes" xml:space="preserve">
          <source>same</source>
          <target state="translated">same</target>
        </trans-unit>
        <trans-unit id="4a753c22a91c554e7a4bd4a7ef9d5566ceafbd20" translate="yes" xml:space="preserve">
          <source>same as _emx_env of EMX, a number similar to 0x8001.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12c8473c720b340bb633511328fd4b0b5b302b5" translate="yes" xml:space="preserve">
          <source>save PL_comppad and PL_curpad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc01c6b7487aab92695f7ba918540cf5051f72f4" translate="yes" xml:space="preserve">
          <source>say</source>
          <target state="translated">say</target>
        </trans-unit>
        <trans-unit id="5a0b9983321d328490a44d4ff8804ce3e1da7c9d" translate="yes" xml:space="preserve">
          <source>say FILEHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5516e9f3a4146431738f2e2a803bb3c4211b57ae" translate="yes" xml:space="preserve">
          <source>say FILEHANDLE LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359a8cf14b0777d015b6893c69ee451c2990987a" translate="yes" xml:space="preserve">
          <source>say LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e5d48bf09124cfdf124bc3fefb37314c6aec01" translate="yes" xml:space="preserve">
          <source>say, from another XSUB. (This example supposes that there was no INTERFACE_MACRO: section, otherwise one needs to use something else instead of &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; , see the next section.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0ff50ac1644ee38bce5794ad80f051780c8cc7" translate="yes" xml:space="preserve">
          <source>says to import the functions &lt;code&gt;this()&lt;/code&gt; and &lt;code&gt;that()&lt;/code&gt; as well as set the plan to be 23 tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e93c3619f1baabaeceb2e4bfc8d49a6c318538" translate="yes" xml:space="preserve">
          <source>scalar</source>
          <target state="translated">scalar</target>
        </trans-unit>
        <trans-unit id="5ddf25f9dd43f01000791afc8e4d8af45340832f" translate="yes" xml:space="preserve">
          <source>scalar EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0c3679e11a740ae6f3dadb0f14efe4d8c759db" translate="yes" xml:space="preserve">
          <source>scalar option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60020d1b19707b587574a1c80412af51ea9e12b3" translate="yes" xml:space="preserve">
          <source>scale</source>
          <target state="translated">scale</target>
        </trans-unit>
        <trans-unit id="f5a99b9dd2b369dbc0887ce56afb429e927c7622" translate="yes" xml:space="preserve">
          <source>scale and type; and different software projects have different ideas of what the right thing is to do in failure conditions. I could simply say that failure always throws an exception, and that if you want to be careful, you'll just have to wrap every call to $lh-&amp;gt;maketext in an eval { }. However, I want programmers to reserve the right (via the &quot;fail&quot; attribute) to treat lookup failure as something other than an exception of the same level of severity as a config file being unreadable, or some essential resource being inaccessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb4ce36c8d7ee3b1ad0da0e80346d61234606e0" translate="yes" xml:space="preserve">
          <source>scans current perl installation for modules that have a newer version available on CPAN and provides a list of them. If called without argument, all potential upgrades are listed; if called with arguments the list is filtered to the modules and regexps given as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd86d29c2639abeb206c1a06680ad7e88e15a0f" translate="yes" xml:space="preserve">
          <source>schwern@pobox.com</source>
          <target state="translated">schwern@pobox.com</target>
        </trans-unit>
        <trans-unit id="e100ac81758848a74da67094df9a7c53aba518d0" translate="yes" xml:space="preserve">
          <source>scope is currently being compiled. To give an example with the CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Semi::Semicolons&quot;&gt;Semi::Semicolons&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54620882c44d232560f4e8aaeb9e72e5425122a" translate="yes" xml:space="preserve">
          <source>scope.h</source>
          <target state="translated">scope.h</target>
        </trans-unit>
        <trans-unit id="20b94277388f9b56c095ce9f50914690f5e470a3" translate="yes" xml:space="preserve">
          <source>scopes higher. You can limit the variables that you see with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5346a081dcf654061b7f897ea14d9b43140712" translate="yes" xml:space="preserve">
          <source>script</source>
          <target state="translated">script</target>
        </trans-unit>
        <trans-unit id="9daccbb0259fe28b322ddc47523b1beaccd74bd9" translate="yes" xml:space="preserve">
          <source>script (available from your nearest CPAN archive in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f4d6dde95f5b0cf7428c8032002b07489294f0" translate="yes" xml:space="preserve">
          <source>script above. It reads from standard input and writes a gzip data stream to standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c5b88af8b682e0f5420bcc14dcb97d0cb8d2c3" translate="yes" xml:space="preserve">
          <source>script in the root directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc151e4ea8e926f7932051c8c2306e08f9c127c" translate="yes" xml:space="preserve">
          <source>script is ultimately responsible for generating a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4648841a74a18654a2c9a146920fef9f8d23035a" translate="yes" xml:space="preserve">
          <source>script which tries to detect common problems with misconfigured installations. There is a pretty large chance it will discover which step of the installation you managed to goof. &lt;code&gt;;-)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fb6089777a46452e5550a570ea944d973a2113" translate="yes" xml:space="preserve">
          <source>script&quot; (and if it doesn't hyphenate it, then the &lt;code&gt;E&amp;lt;shy&amp;gt;&lt;/code&gt; doesn't show up at all). And if it is to hyphenate &quot;Jarkko&quot; and/or &quot;Hietaniemi&quot;, it can do so only at the points where there is a &lt;code&gt;E&amp;lt;shy&amp;gt;&lt;/code&gt; code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dbc5bfa6117ef7a24c8c1ee1145521c821c72e" translate="yes" xml:space="preserve">
          <source>scriptdir.U</source>
          <target state="translated">scriptdir.U</target>
        </trans-unit>
        <trans-unit id="d209e20e350ba237d45d3f5c5d7dd35dd2703c54" translate="yes" xml:space="preserve">
          <source>sdbm store returned -1, errno 22, key &quot;...&quot; at ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec2b82c7d898afabe1adb2d9e5b807c7a1daf16" translate="yes" xml:space="preserve">
          <source>search and replace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56d243228be32256d0658335c79ed80bf62abf1" translate="yes" xml:space="preserve">
          <source>search path, which is occasionally inadvertent (but is often simply a case of a user's path dir having a more recent version than the system's general path dirs in general.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c0236f0aa0c04b5761391de8887a736789a294" translate="yes" xml:space="preserve">
          <source>search path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce14a39f3d0b8b354a8e8054f88af6b248847ac" translate="yes" xml:space="preserve">
          <source>sebastien@aperghis.net</source>
          <target state="translated">sebastien@aperghis.net</target>
        </trans-unit>
        <trans-unit id="a93bd27684e33d0817c96ce83dac01b82b4c0d03" translate="yes" xml:space="preserve">
          <source>second best</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1481e29253f8233863f86799e5d0df925fcb86" translate="yes" xml:space="preserve">
          <source>seconds (see &lt;a href=&quot;../functions/time&quot;&gt;time&lt;/a&gt; for more) as parameters, unlocks the variable, and blocks until the timeout is reached or another thread signals the variable. A false value is returned if the timeout is reached, and a true value otherwise. In either case, the variable is re-locked upon return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e10d6a998f1bd61e7b893679b3bbeeb4a47b0f" translate="yes" xml:space="preserve">
          <source>seconds the same as would be used with &lt;a href=&quot;../threads/shared#cond_timedwait-VARIABLE%2c-ABS_TIMEOUT&quot;&gt;cond_timedwait()&lt;/a&gt;. Fractional seconds (e.g., 2.5 seconds) are also supported (to the extent of the underlying implementation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20182fbc10716eb197ea16bc03277c7d8c3730b2" translate="yes" xml:space="preserve">
          <source>section</source>
          <target state="translated">section</target>
        </trans-unit>
        <trans-unit id="02fccc1b56ba0448200d902362a560b0aa4e858e" translate="yes" xml:space="preserve">
          <source>section to guide you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bda81173ccfeee74cd59e85da77fa4b5288f817" translate="yes" xml:space="preserve">
          <source>section). If that fails, try the following command lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2d98346510e8271368d96fc78d319acf84e40f" translate="yes" xml:space="preserve">
          <source>section-spec</source>
          <target state="translated">section-spec</target>
        </trans-unit>
        <trans-unit id="57bbb7e6834263c657e708487515fb458aac449b" translate="yes" xml:space="preserve">
          <source>sections into</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63802b7f04b7d366a3906966ba07cde0e61c5ea7" translate="yes" xml:space="preserve">
          <source>sections:</source>
          <target state="translated">sections:</target>
        </trans-unit>
        <trans-unit id="c15b7b735c97215ce1d2a4b5502e96b9b8cbbe57" translate="yes" xml:space="preserve">
          <source>sed</source>
          <target state="translated">sed</target>
        </trans-unit>
        <trans-unit id="f4f1996359cd4e52e26cc6ce8bd2b7bb7469a873" translate="yes" xml:space="preserve">
          <source>sed -n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bebf26f867141773a7715a52b09d943e8815fe8" translate="yes" xml:space="preserve">
          <source>sed.</source>
          <target state="translated">sed.</target>
        </trans-unit>
        <trans-unit id="3d637fc604995b51a048db0058a7c210e57a38cc" translate="yes" xml:space="preserve">
          <source>see</source>
          <target state="translated">see</target>
        </trans-unit>
        <trans-unit id="5596e6b8ffe432d9f2998a53dca301829ae4e49a" translate="yes" xml:space="preserve">
          <source>see &lt;a href=&quot;#PERL_BADFREE&quot;&gt;PERL_BADFREE&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9662370f7748146b2d0c75b9b289784910d094" translate="yes" xml:space="preserve">
          <source>see the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1594b7a4636275b8677ca3b88f1883f42adb6824" translate="yes" xml:space="preserve">
          <source>seek</source>
          <target state="translated">seek</target>
        </trans-unit>
        <trans-unit id="df0b8d652807ac394f0f5f4e0799575d74218bc1" translate="yes" xml:space="preserve">
          <source>seek FILEHANDLE,POSITION,WHENCE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d811c6da7f0b9d95842deed2c6cd4ed2addb8718" translate="yes" xml:space="preserve">
          <source>seekdir</source>
          <target state="translated">seekdir</target>
        </trans-unit>
        <trans-unit id="8d3f18ff1ec7bfe22ee303663cd59f28767ea155" translate="yes" xml:space="preserve">
          <source>seekdir DIRHANDLE,POS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f15b250fdd58ccfae958dace1213f71d6d41ad" translate="yes" xml:space="preserve">
          <source>seem</source>
          <target state="translated">seem</target>
        </trans-unit>
        <trans-unit id="823b1a632ff0a222da33570e16c98b59d0642358" translate="yes" xml:space="preserve">
          <source>seen_evals</source>
          <target state="translated">seen_evals</target>
        </trans-unit>
        <trans-unit id="81448fe273247b533b9f018e96c158cab7901247" translate="yes" xml:space="preserve">
          <source>select</source>
          <target state="translated">select</target>
        </trans-unit>
        <trans-unit id="860042b77a5664aac2dd335e14eb3464f6326010" translate="yes" xml:space="preserve">
          <source>select FILEHANDLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f58caded9399a0690a15fb190ee1bbecf1e5cf1" translate="yes" xml:space="preserve">
          <source>select RBITS,WBITS,EBITS,TIMEOUT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e59659da1712342adc66931c456f31967808e8" translate="yes" xml:space="preserve">
          <source>selectminbits.U</source>
          <target state="translated">selectminbits.U</target>
        </trans-unit>
        <trans-unit id="5691e979d0d0b2169d4bd8b96aaaf7f49ad6493d" translate="yes" xml:space="preserve">
          <source>selects functions/macros to process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389c01bbf95cc516bcc4a1f8cc24df4a865a907f" translate="yes" xml:space="preserve">
          <source>selecttype.U</source>
          <target state="translated">selecttype.U</target>
        </trans-unit>
        <trans-unit id="83254a500bb2f1492944c6581ab682bae14df7c7" translate="yes" xml:space="preserve">
          <source>semctl</source>
          <target state="translated">semctl</target>
        </trans-unit>
        <trans-unit id="562b82fb722720d37949c363dbd26c2b07ebeac0" translate="yes" xml:space="preserve">
          <source>semctl ID,SEMNUM,CMD,ARG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5754d7ae54299263d0b3bdea78aaea2382e864" translate="yes" xml:space="preserve">
          <source>semget</source>
          <target state="translated">semget</target>
        </trans-unit>
        <trans-unit id="aadc89fbd4f1b049208ea689ad9ef68c3edbda38" translate="yes" xml:space="preserve">
          <source>semget KEY,NSEMS,FLAGS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a62938a75a07b9370b24129b6ca609614eda23" translate="yes" xml:space="preserve">
          <source>semop</source>
          <target state="translated">semop</target>
        </trans-unit>
        <trans-unit id="ae2fd68bd0b6289e59ff57aeb5de00e42b511191" translate="yes" xml:space="preserve">
          <source>semop KEY,OPSTRING</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ed539c0cef13959abd980bebf30f4922f606e3" translate="yes" xml:space="preserve">
          <source>send</source>
          <target state="translated">send</target>
        </trans-unit>
        <trans-unit id="1d6446db8c95363f65e8fe09f76ebd260976efaf" translate="yes" xml:space="preserve">
          <source>send SOCKET,MSG,FLAGS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87172568cee54bd5ba184d763559697813cc596" translate="yes" xml:space="preserve">
          <source>send SOCKET,MSG,FLAGS,TO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79396fae276daec8d93e019b4fe2b045fefb7899" translate="yes" xml:space="preserve">
          <source>send to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a98f69f7c523b9f21b5e2fc0d36a073c687c99" translate="yes" xml:space="preserve">
          <source>sendmail</source>
          <target state="translated">sendmail</target>
        </trans-unit>
        <trans-unit id="633cee00555ef88c788a21f87377780c4be310a1" translate="yes" xml:space="preserve">
          <source>sendmsg(3)</source>
          <target state="translated">sendmsg(3)</target>
        </trans-unit>
        <trans-unit id="1aaccfb5b185786dfd1a9e053bafde0ca89ba47d" translate="yes" xml:space="preserve">
          <source>seq</source>
          <target state="translated">seq</target>
        </trans-unit>
        <trans-unit id="842d7bccf4f97b1551e9c17311268f57ca42e51a" translate="yes" xml:space="preserve">
          <source>sequence cannot be represented in the native 8 bit encoding. On failure dies or, if the value of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32de4cc4f6b63a792674935cccc694e585125a2" translate="yes" xml:space="preserve">
          <source>sequence in the callback (and not, of course, specifying the G_DISCARD flag).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5aefec60441ad577332b2cda35192de6181191" translate="yes" xml:space="preserve">
          <source>sequence-item</source>
          <target state="translated">sequence-item</target>
        </trans-unit>
        <trans-unit id="1f475bf7df2e67da567fa86dce3dd28c5a03dcdd" translate="yes" xml:space="preserve">
          <source>serialised</source>
          <target state="translated">serialised</target>
        </trans-unit>
        <trans-unit id="660bdf6ed7ea364897c2ab5c220728130ce9d4d3" translate="yes" xml:space="preserve">
          <source>serialized</source>
          <target state="translated">serialized</target>
        </trans-unit>
        <trans-unit id="a515b262cc00dba9d524fe82e952ccaab7e3d936" translate="yes" xml:space="preserve">
          <source>set $1 on exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc6958556b9ac93fcecd5fabad174a915f866ec" translate="yes" xml:space="preserve">
          <source>set &lt;code&gt;$Module::errstr&lt;/code&gt; or similar (&lt;code&gt;errstr&lt;/code&gt; is a common name used by DBI and other popular modules; if you choose something else, be sure to document it clearly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3af4bd017558843328ebdc59b58d24a1dfa9adc" translate="yes" xml:space="preserve">
          <source>set &lt;code&gt;PERL_CORE&lt;/code&gt; ; this exposes the full perl internals, and is likely to cause breakage of the XS in each new perl release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f152b38b7e482dca36841cfb8bcb004ef98298c4" translate="yes" xml:space="preserve">
          <source>set but</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d03a192d885c9b9405c5994a3ad2407feada77" translate="yes" xml:space="preserve">
          <source>set environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bfb7a3bfea88c5df9b12fef9098c0f68968b38" translate="yes" xml:space="preserve">
          <source>set this variable, doing so is generally discouraged, although it can be invaluable for some testing purposes. It will be reset automatically across &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d479270aa0912c64c828164edd14efc4c2ee7005" translate="yes" xml:space="preserve">
          <source>set[re][ug]id()</source>
          <target state="translated">set[re][ug]id()</target>
        </trans-unit>
        <trans-unit id="1cef9581ee001f00cc6be30d9b9fcb59319c5312" translate="yes" xml:space="preserve">
          <source>set_prototype</source>
          <target state="translated">set_prototype</target>
        </trans-unit>
        <trans-unit id="829fac9aba4c7e5065c2d0c4567ae5825968017b" translate="yes" xml:space="preserve">
          <source>set_style()</source>
          <target state="translated">set_style()</target>
        </trans-unit>
        <trans-unit id="1862749ece86d3e78d5d79b3ff5e07d6afcdb1b4" translate="yes" xml:space="preserve">
          <source>set_style_standard($name)</source>
          <target state="translated">set_style_standard($name)</target>
        </trans-unit>
        <trans-unit id="c514528c851b2396a3ad2e24c205551a842bef5a" translate="yes" xml:space="preserve">
          <source>setargv.obj is required to build perlglob.exe (and perl.exe if the USE_SETARGV option is enabled). The Platform SDK supplies this object file in source form in %PlatformSDKDir%\src\crt. Copy setargv.c, cruntime.h and internal.h from there to some temporary location and build setargv.obj using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fd88bfb7fd3bf06d36ee7ec0fe0ba40b75e181" translate="yes" xml:space="preserve">
          <source>setgrent</source>
          <target state="translated">setgrent</target>
        </trans-unit>
        <trans-unit id="95ff4a0a9735d4ba80b538a10dc1dd95a617311a" translate="yes" xml:space="preserve">
          <source>sethostent</source>
          <target state="translated">sethostent</target>
        </trans-unit>
        <trans-unit id="b00836f787be9f608a0e289ae5aa356294015965" translate="yes" xml:space="preserve">
          <source>sethostent STAYOPEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3759cd6f488db65678a42fb611535e187baed392" translate="yes" xml:space="preserve">
          <source>setjmp.h</source>
          <target state="translated">setjmp.h</target>
        </trans-unit>
        <trans-unit id="7732cc65b7675cd7f4d4256b3c61dc4b84860a0a" translate="yes" xml:space="preserve">
          <source>setlocale()</source>
          <target state="translated">setlocale()</target>
        </trans-unit>
        <trans-unit id="3e5a960545f021092a60af74924c9739994e5f0a" translate="yes" xml:space="preserve">
          <source>setlocale(3)</source>
          <target state="translated">setlocale(3)</target>
        </trans-unit>
        <trans-unit id="c38131b4d8159563c8efb08716cc3778ae5fa7d7" translate="yes" xml:space="preserve">
          <source>setnetent</source>
          <target state="translated">setnetent</target>
        </trans-unit>
        <trans-unit id="1cc22ab066d38b0302d2147295547b91828996a7" translate="yes" xml:space="preserve">
          <source>setnetent STAYOPEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25d9c7c1d258b8ad76566c781d7dad402fc4c9a" translate="yes" xml:space="preserve">
          <source>setpgrp</source>
          <target state="translated">setpgrp</target>
        </trans-unit>
        <trans-unit id="9504b980acdbd0aa5f6e3a2ad65c94f0179f794b" translate="yes" xml:space="preserve">
          <source>setpgrp PID,PGRP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d29366cfcd7f879d30c4f78263de18c645dffa" translate="yes" xml:space="preserve">
          <source>setpriority</source>
          <target state="translated">setpriority</target>
        </trans-unit>
        <trans-unit id="c0b4465e54f2405b3b12bce4119159f0f9800827" translate="yes" xml:space="preserve">
          <source>setpriority WHICH,WHO,PRIORITY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edb457529297d4c9c70733fdc652faf24719d22" translate="yes" xml:space="preserve">
          <source>setpriority, getpriority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b7bf07240ef5977b82edc7ab771c29c4b7a780" translate="yes" xml:space="preserve">
          <source>setprotoent</source>
          <target state="translated">setprotoent</target>
        </trans-unit>
        <trans-unit id="36547e8062c6493909b44fff1c54e63e57f9a69c" translate="yes" xml:space="preserve">
          <source>setprotoent STAYOPEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f0cb0ed74d570f748fce6baa3156954c1c126e" translate="yes" xml:space="preserve">
          <source>setpwent</source>
          <target state="translated">setpwent</target>
        </trans-unit>
        <trans-unit id="6970a7a84fa71e8a0362d531aa1d5760bc3e65ce" translate="yes" xml:space="preserve">
          <source>sets @dl_require_symbols to &lt;code&gt;(&quot;boot_$module&quot;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa761dd1f3ac6a741193c18154a7ff5d4fff4e0" translate="yes" xml:space="preserve">
          <source>sets debug mode for packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7138f42549f1b1cb20928caec5801415e4edfb1" translate="yes" xml:space="preserve">
          <source>sets debugging flags. To watch how it executes your program, use &lt;b&gt;-Dtls&lt;/b&gt;. (This works only if debugging is compiled into your Perl.) Another nice value is &lt;b&gt;-Dx&lt;/b&gt;, which lists your compiled syntax tree. And &lt;b&gt;-Dr&lt;/b&gt; displays compiled regular expressions; the format of the output is explained in &lt;a href=&quot;perldebguts&quot;&gt;perldebguts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96f29dd730ce59814d5b5155b1f6aae71846cc6" translate="yes" xml:space="preserve">
          <source>sets the stack up so that we can use the &lt;code&gt;ST&lt;/code&gt; macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fea0a2680568880b0d52aff2246cea4265abd31" translate="yes" xml:space="preserve">
          <source>setservent</source>
          <target state="translated">setservent</target>
        </trans-unit>
        <trans-unit id="8ff9b4d20966b87988bce7eac84951bf7f3c8f5d" translate="yes" xml:space="preserve">
          <source>setservent STAYOPEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec6ea5a0fd8ea5a18bc9b4abfdc9ca7f9bb033a" translate="yes" xml:space="preserve">
          <source>setsockopt</source>
          <target state="translated">setsockopt</target>
        </trans-unit>
        <trans-unit id="521f5ff45aa64c035fe78c92dcc87df7c40f7624" translate="yes" xml:space="preserve">
          <source>setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724184a27024c13577e1b97247e4ec79de769784" translate="yes" xml:space="preserve">
          <source>setting LIB overrides any setting of INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSITELIB, INSTALLSITEARCH (and they are not affected by PREFIX);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd2f8cdec45479bf1d52bfd2a8af3af6c7ab629" translate="yes" xml:space="preserve">
          <source>settings.</source>
          <target state="translated">settings.</target>
        </trans-unit>
        <trans-unit id="826420e65ec10f9c0cdf82faa8ced6390832f5e6" translate="yes" xml:space="preserve">
          <source>setup.exe</source>
          <target state="translated">setup.exe</target>
        </trans-unit>
        <trans-unit id="16795633e2c1543064a3ad70ac3ba71d3d589b3b" translate="yes" xml:space="preserve">
          <source>sh</source>
          <target state="translated">sh</target>
        </trans-unit>
        <trans-unit id="3ebf75b1706a5911b4279e76173a6d271f5fd843" translate="yes" xml:space="preserve">
          <source>sh.U</source>
          <target state="translated">sh.U</target>
        </trans-unit>
        <trans-unit id="e605bfa5bed50c309a4509ca4a6fdbd404c8b828" translate="yes" xml:space="preserve">
          <source>sh.exe</source>
          <target state="translated">sh.exe</target>
        </trans-unit>
        <trans-unit id="2371fd20001841ae805d2daab917681a9f4dc147" translate="yes" xml:space="preserve">
          <source>sh_dos.zip</source>
          <target state="translated">sh_dos.zip</target>
        </trans-unit>
        <trans-unit id="61aa08d4ef287793b52cf7fe3fb3c655b070aafd" translate="yes" xml:space="preserve">
          <source>sha()</source>
          <target state="translated">sha()</target>
        </trans-unit>
        <trans-unit id="71cdf13129d63f3c987036283b2ff4d5b438076e" translate="yes" xml:space="preserve">
          <source>sha1sum</source>
          <target state="translated">sha1sum</target>
        </trans-unit>
        <trans-unit id="d80471ba097485e8efa10bc67d7ce5a1ca81b8df" translate="yes" xml:space="preserve">
          <source>sha224sum</source>
          <target state="translated">sha224sum</target>
        </trans-unit>
        <trans-unit id="487cad34f638565a322777134e85811e073f7892" translate="yes" xml:space="preserve">
          <source>sha256_base64(&quot;abc&quot;)</source>
          <target state="translated">sha256_base64(&quot;abc&quot;)</target>
        </trans-unit>
        <trans-unit id="4fdccf1132dd2af3ca8f87c270cd99fbe57ed984" translate="yes" xml:space="preserve">
          <source>sha256sum</source>
          <target state="translated">sha256sum</target>
        </trans-unit>
        <trans-unit id="7e6db972e8d6fee41c3c3777b38f8c269bb37dea" translate="yes" xml:space="preserve">
          <source>sha384sum</source>
          <target state="translated">sha384sum</target>
        </trans-unit>
        <trans-unit id="db29aa12a1056adb97244bcf946da53673a89846" translate="yes" xml:space="preserve">
          <source>sha512sum</source>
          <target state="translated">sha512sum</target>
        </trans-unit>
        <trans-unit id="ae51f0ad4c5d554a39dced28eb927173319eeeed" translate="yes" xml:space="preserve">
          <source>sha_base64()</source>
          <target state="translated">sha_base64()</target>
        </trans-unit>
        <trans-unit id="9a4cbd7216bb8735a32f096200d32968e6e1d1d2" translate="yes" xml:space="preserve">
          <source>sha_hex()</source>
          <target state="translated">sha_hex()</target>
        </trans-unit>
        <trans-unit id="aab90dfe8c6f152a4fb071f5f4f9df804626e6ab" translate="yes" xml:space="preserve">
          <source>share</source>
          <target state="translated">share</target>
        </trans-unit>
        <trans-unit id="d50b52942768241575487c2fcf4686ba783bd696" translate="yes" xml:space="preserve">
          <source>share (NAME, ...)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0310b79f6c96a6e4cc40bf8d0965837db826ea" translate="yes" xml:space="preserve">
          <source>share_from (PACKAGE, ARRAYREF)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5529123c1d5c4550a0041590a6bbac5d02156574" translate="yes" xml:space="preserve">
          <source>shasum</source>
          <target state="translated">shasum</target>
        </trans-unit>
        <trans-unit id="6e3f1b6dee1702a5a67bd0155a001956a3ae9875" translate="yes" xml:space="preserve">
          <source>shasum - Print or Check SHA Checksums</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab6fa1e97a03d1b8a07d4aa673ab8e5fc563fd6" translate="yes" xml:space="preserve">
          <source>shay@cpan.org</source>
          <target state="translated">shay@cpan.org</target>
        </trans-unit>
        <trans-unit id="8180641598d4579ece6f5ac8b40ef4d24b48b988" translate="yes" xml:space="preserve">
          <source>shell commands, like &lt;code&gt;`copy a b`&lt;/code&gt; (internal for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e689248278904d2ed4d7a9dbccbb3b3665f258d" translate="yes" xml:space="preserve">
          <source>shell metacharacters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd79b319f5c1e5dc62a2688677515c6804c3c36" translate="yes" xml:space="preserve">
          <source>shift</source>
          <target state="translated">shift</target>
        </trans-unit>
        <trans-unit id="93243818f05269d8cb5236761232152cb6924eff" translate="yes" xml:space="preserve">
          <source>shift ARRAY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e0e994deec4ff90ddc16a0de8ac09268d6e385" translate="yes" xml:space="preserve">
          <source>shift EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b06c5d48ca125c3a1e6dd2374013ebacb75531c" translate="yes" xml:space="preserve">
          <source>shifts or pops the array in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601ea6d76d9582c232f47ec2b53e39042944c700" translate="yes" xml:space="preserve">
          <source>shm*()</source>
          <target state="translated">shm*()</target>
        </trans-unit>
        <trans-unit id="fd037486333be7d7c98d2b33350ad2efb1ccffba" translate="yes" xml:space="preserve">
          <source>shmctl</source>
          <target state="translated">shmctl</target>
        </trans-unit>
        <trans-unit id="bfa88e96cc1277a1fb36919a3c13db4edcc9deca" translate="yes" xml:space="preserve">
          <source>shmctl ID,CMD,ARG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ea2d706dbc5e03b0969e69b7704bfbf05327fe" translate="yes" xml:space="preserve">
          <source>shmget</source>
          <target state="translated">shmget</target>
        </trans-unit>
        <trans-unit id="6d20a03565c729ca9398fb7ca5d4fed8a09d825f" translate="yes" xml:space="preserve">
          <source>shmget KEY,SIZE,FLAGS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e859e953f6b0fc1f971bd1493601654738001b7a" translate="yes" xml:space="preserve">
          <source>shmread</source>
          <target state="translated">shmread</target>
        </trans-unit>
        <trans-unit id="f12eb55f535ea6531c326dc1ed8ac5d40179611f" translate="yes" xml:space="preserve">
          <source>shmread ID,VAR,POS,SIZE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="809497b5c5aa6dfbefc431d2d367e80d4208fcb3" translate="yes" xml:space="preserve">
          <source>shmwrite</source>
          <target state="translated">shmwrite</target>
        </trans-unit>
        <trans-unit id="23c3201242b0d60b87594621b08969ecfe1056bc" translate="yes" xml:space="preserve">
          <source>shmwrite ID,STRING,POS,SIZE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f4ea7d91495df92bbac2e2149dfb850fe81396" translate="yes" xml:space="preserve">
          <source>short</source>
          <target state="translated">short</target>
        </trans-unit>
        <trans-unit id="c8c8f37b0ab36e86608a8152053406861b28ab1a" translate="yes" xml:space="preserve">
          <source>shortly.)</source>
          <target state="translated">shortly.)</target>
        </trans-unit>
        <trans-unit id="c6dc9bc9f77b486a13b3f63ffb2ffd1cb3fef4db" translate="yes" xml:space="preserve">
          <source>should</source>
          <target state="translated">should</target>
        </trans-unit>
        <trans-unit id="434ca35703432935c7f5a69b43c49a6f5ff950a4" translate="yes" xml:space="preserve">
          <source>should be NULL or a pointer to an NV. The scan stops at the end of the string, or the first invalid character. Unless &lt;code&gt;PERL_SCAN_SILENT_ILLDIGIT&lt;/code&gt; is set in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f71b895c5d12ec8680ec6af61da7f1b6ce74f48" translate="yes" xml:space="preserve">
          <source>should be a digit, with higher values meaning more expansion. As with &lt;b&gt;-q&lt;/b&gt;, this actually involves turning off special cases in B::Deparse's normal operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae471d193a8e426e8014ec6891b5d5a4bd264b0" translate="yes" xml:space="preserve">
          <source>should be an opcode indicating the type of operation that the pad entry is to support. This doesn't affect operational semantics, but is used for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019285e8454f350566089c250b6aa59dd253d7eb" translate="yes" xml:space="preserve">
          <source>should be an undefined scalar variable to be filled in by the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; function if it succeeds;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd92ece347b20b0a536664e6254b1d3e39759015" translate="yes" xml:space="preserve">
          <source>should be at least an &lt;code&gt;UNOP&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41490bd42cf860e807dd72d413b57a0dea46af4d" translate="yes" xml:space="preserve">
          <source>should be better rewritten as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0556a5d15e519edd1c42eecdae22c5c6b3d330" translate="yes" xml:space="preserve">
          <source>should be called as &lt;code&gt;dump_chars($string)&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ed5a69112a03bde7c32876cd009f93a14595ca" translate="yes" xml:space="preserve">
          <source>should be defined like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b69cac9f06021df4569d832d191444a44430c4" translate="yes" xml:space="preserve">
          <source>should be enough, the Configure should automatically probe for the correct 64-bit settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b29aec6a6943bc31ffd6a86f3f0e47ffc6f078" translate="yes" xml:space="preserve">
          <source>should be given either as a comma separated list of types that the C subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb2077e9eec52de762fd2d65887e1f23c9502e6" translate="yes" xml:space="preserve">
          <source>should be given either as a comma separated list of types that the C subroutine &lt;code&gt;constant&lt;/code&gt; will generate or as a reference to a hash. It should be the same list of types as &lt;code&gt;C_constant&lt;/code&gt; was given. [Otherwise &lt;code&gt;XS_constant&lt;/code&gt; and &lt;code&gt;C_constant&lt;/code&gt; may have different ideas about the number of parameters passed to the C function &lt;code&gt;constant&lt;/code&gt; ]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f8d712045467a4c495b8608cf3c4dc81ce0300" translate="yes" xml:space="preserve">
          <source>should be passed to &lt;code&gt;PerlLIO_open3&lt;/code&gt; ; &lt;code&gt;'r'&lt;/code&gt; means &lt;b&gt;r&lt;/b&gt;ead, &lt;code&gt;'w'&lt;/code&gt; means &lt;b&gt;w&lt;/b&gt;rite and &lt;code&gt;'a'&lt;/code&gt; means &lt;b&gt;a&lt;/b&gt;ppend. The &lt;code&gt;'+'&lt;/code&gt; suffix means that both reading and writing/appending are permitted. The &lt;code&gt;'b'&lt;/code&gt; suffix means file should be binary, and &lt;code&gt;'t'&lt;/code&gt; means it is text. (Almost all layers should do the IO in binary mode, and ignore the b/t bits. The &lt;code&gt;:crlf&lt;/code&gt; layer should be pushed to handle the distinction.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc811db241953da94224b91d22155e3a55a87e0" translate="yes" xml:space="preserve">
          <source>should be replaced by calls to this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d882ed43f92b070be801dd7556515e1938065e90" translate="yes" xml:space="preserve">
          <source>should be sent upstream and should not be applied to the Perl core individually. If a patch to a file in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27aafd32083e4b3ec81eb0e7a7daccd93c6c83b4" translate="yes" xml:space="preserve">
          <source>should be unified into one paragraph (&quot;\tuse Foo;\n\n\tprint Foo-&amp;gt;VERSION&quot;) before being passed to the formatter or other processor. Parsers may also allow an option for overriding this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951954a7663cf07ebf17a95bb0f9241db05bc55c" translate="yes" xml:space="preserve">
          <source>should be used from Perl as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75aec965181c0cc912d3e6231e953406e385483" translate="yes" xml:space="preserve">
          <source>should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac40e2390ac1138da6f99638949c4dc429ae4a0" translate="yes" xml:space="preserve">
          <source>should either be passed as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028fe10ac80ae91d3b203f93c709845cd27c6945" translate="yes" xml:space="preserve">
          <source>should make an effort to work with earlier versions of Perl 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54478620cce561675d673e6f389ff35e814bc234" translate="yes" xml:space="preserve">
          <source>should not be broken across lines. Example: &lt;code&gt;S&amp;lt;$x ? $y : $z&amp;gt;&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab22f880bffdadf26f265fef96559efe31f90a0" translate="yes" xml:space="preserve">
          <source>should produce something like this (take or leave few last decimals):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d493a27087d3b07b5daf5506933773cd1c4b898b" translate="yes" xml:space="preserve">
          <source>should work to generate 64bit shared libraries for HP-UX 11.00 and 11i.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c73471ca57232f58dc8f7d346348f57407a56c" translate="yes" xml:space="preserve">
          <source>shown above you need to have a good understanding of the concept of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea4056a9f9e7456a0acef5c9d4dd932720be2e6" translate="yes" xml:space="preserve">
          <source>shows an example of this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcfbb6a2bd52a8260a64be216d4e55bc128a617" translate="yes" xml:space="preserve">
          <source>shows how to access this value on the stack. Remember that regardless of how many items the Perl subroutine returns, only the last one will be accessible from the stack - think of the case where only one value is returned as being a list with only one element. Any other items that were returned will not exist by the time control returns from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1929c046b74ddc682ae05d9d48428aa0bb394c" translate="yes" xml:space="preserve">
          <source>shows that number of returned elements can differ from the number of input elements. To omit an element, return an empty list (). This could also be achieved by writing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a928cd9cc93422709ec4083b6ddfaa7789f8351" translate="yes" xml:space="preserve">
          <source>shows that the numeric value of $c follows changes to the values of $a and $b.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab3db15bd1192e72f94674bb1db30165136c3a7" translate="yes" xml:space="preserve">
          <source>shows you do not have it, do</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33640cc3f81e2a354b4cd5358018fb6f36afd0ba" translate="yes" xml:space="preserve">
          <source>showtime</source>
          <target state="translated">showtime</target>
        </trans-unit>
        <trans-unit id="38afd10a7fb5bcdd82b9b9a720e26e004a812923" translate="yes" xml:space="preserve">
          <source>showtime.c</source>
          <target state="translated">showtime.c</target>
        </trans-unit>
        <trans-unit id="ad2457e1a0b2872edb89ac328f3e71b7dcfdfc19" translate="yes" xml:space="preserve">
          <source>showtime.pl</source>
          <target state="translated">showtime.pl</target>
        </trans-unit>
        <trans-unit id="6a21bf827d9f24fe38e0b5a9a7d75e243676309f" translate="yes" xml:space="preserve">
          <source>shr and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187dc5704ade702282b5b98eb42eca8f784f7977" translate="yes" xml:space="preserve">
          <source>shuffle</source>
          <target state="translated">shuffle</target>
        </trans-unit>
        <trans-unit id="53669f193b2174641c72654b5c3e5b67950334ae" translate="yes" xml:space="preserve">
          <source>shutdown</source>
          <target state="translated">shutdown</target>
        </trans-unit>
        <trans-unit id="a2d01557f8eaaf160f2b63e3e0cd346dbbd752de" translate="yes" xml:space="preserve">
          <source>shutdown SOCKET,HOW</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c8e812bd7459e4a1621eacfe9349547b56fa12" translate="yes" xml:space="preserve">
          <source>side of the &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5166da9dd5b82294d57af0b42d7f689e21233e7f" translate="yes" xml:space="preserve">
          <source>sig_name.U</source>
          <target state="translated">sig_name.U</target>
        </trans-unit>
        <trans-unit id="4567f04672080b36fbfde6b032e8a4589158dc9c" translate="yes" xml:space="preserve">
          <source>signal.h</source>
          <target state="translated">signal.h</target>
        </trans-unit>
        <trans-unit id="708acf5e9c5b7c5e88c713742790dc0df48ff360" translate="yes" xml:space="preserve">
          <source>signals at the Perl-level such that signal handlers are called in the appropriate thread. For example, sending &lt;code&gt;$thr-&amp;gt;kill('STOP')&lt;/code&gt; does not actually suspend a thread (or the whole process), but does cause a &lt;code&gt;$SIG{'STOP'}&lt;/code&gt; handler to be called in that thread (as illustrated above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab5f62863cdedc5143552c9d37d6679e3304f7a" translate="yes" xml:space="preserve">
          <source>signature</source>
          <target state="translated">signature</target>
        </trans-unit>
        <trans-unit id="60e2a380c9d2520b18dac179e250f11d20869e1e" translate="yes" xml:space="preserve">
          <source>signature_target</source>
          <target state="translated">signature_target</target>
        </trans-unit>
        <trans-unit id="051b46459e81280e3641f3f3cadabff161b7a91f" translate="yes" xml:space="preserve">
          <source>signed integer, at least 32 bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9431017144a1655378772ad492440491a458890f" translate="yes" xml:space="preserve">
          <source>significant in verbatim paragraphs (although, in processing, tabs are probably expanded).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582b990cb7b1ed7da6d4b88acce8b8ffaf5b50bc" translate="yes" xml:space="preserve">
          <source>significant--&quot;FOO&quot;, &quot;Foo&quot;, and &quot;foo&quot; are all different names. Names that start with a letter or underscore may also contain digits and underscores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd6d5f433ff2b766eb05baf6a036faefede99dc" translate="yes" xml:space="preserve">
          <source>sigtrap</source>
          <target state="translated">sigtrap</target>
        </trans-unit>
        <trans-unit id="445a09d035b264bae3d2ca6232cb766c68e2cc78" translate="yes" xml:space="preserve">
          <source>sigtrap - Perl pragma to enable simple signal handling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7d0d088b6ea936fb25b477722d734706fe8b40" translate="yes" xml:space="preserve">
          <source>simple</source>
          <target state="translated">simple</target>
        </trans-unit>
        <trans-unit id="8605714aa8406bac1a5dd4f1ee21e180217f5477" translate="yes" xml:space="preserve">
          <source>simplified</source>
          <target state="translated">simplified</target>
        </trans-unit>
        <trans-unit id="1beb3728913a10b7d2f95b9eee8511d9763648ba" translate="yes" xml:space="preserve">
          <source>simplify_name( $str )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1689f42f78865decccd125132a3100296752a166" translate="yes" xml:space="preserve">
          <source>simply loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b1ea76015f0413d8bf90c6bbeb3feae1a6cc9b" translate="yes" xml:space="preserve">
          <source>simply open STDERR to be a dup of STDOUT in your Perl program and avoid calling the shell to do the redirection. This doesn't work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373959d79f80a5db1264aa8cb06baf09fbecd829" translate="yes" xml:space="preserve">
          <source>simply take a reference to a Perl variable. (Although that value certainly is a memory address, it's not the address where the variable's contents are stored.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa16f13ea8396fc5bd5f9c7fb98ed181c64636b" translate="yes" xml:space="preserve">
          <source>simply the inverse of &lt;code&gt;:crlf&lt;/code&gt; . Other layers that would affect the binary nature of the stream are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c20d88dd6be8a038aa577f8de8a9f5d3c84c05" translate="yes" xml:space="preserve">
          <source>simultaneously: they share the memory of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d14c04a713a160cb60e929cea38887511c6bbc4" translate="yes" xml:space="preserve">
          <source>sin</source>
          <target state="translated">sin</target>
        </trans-unit>
        <trans-unit id="2d9c1c889d2e481a76339ab5581bce3355741f9b" translate="yes" xml:space="preserve">
          <source>sin EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472aa4534dfc089d6441d3489d765d77f141e6ca" translate="yes" xml:space="preserve">
          <source>since 0x5d0 is above 255.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af422887e030021213864a02de8fe35f7359c3ca" translate="yes" xml:space="preserve">
          <source>since both sets of &lt;code&gt;'{..}'&lt;/code&gt; brackets are properly nested and evenly balanced. (In a scalar context just the first element of the array would be returned. In a void context, &lt;code&gt;$text&lt;/code&gt; would be replaced by an empty string.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70fa9ffd142f3a1da4cd593cfef97b9f9d7249c7" translate="yes" xml:space="preserve">
          <source>since overload calls &lt;code&gt;&lt;a href=&quot;../functions/sub&quot;&gt;sub($x,0,1);&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;neg($x)&lt;/code&gt; . The first variant needs to preserve $x since it does not know that it later will get overwritten. This makes a copy of $x and takes O(N), but $x-&amp;gt;bneg() is O(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95845252a8d1083202279030a524da3dc7e5faa7" translate="yes" xml:space="preserve">
          <source>since some other module, may want to read data from some file in the default &quot;line mode&quot;, so if the code we have just presented has been executed, the global value of &lt;code&gt;$/&lt;/code&gt; is now changed for any other code running inside the same Perl interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e4fd9e7042eac2c9786b0a1d57b9428a5b2674" translate="yes" xml:space="preserve">
          <source>since the &lt;code&gt;NaN&lt;/code&gt; is not equivalent to anything, &lt;b&gt;including itself&lt;/b&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317b1c878e94dddceca1fa8ce527aaa819fd8b5c" translate="yes" xml:space="preserve">
          <source>since the &lt;code&gt;\xDF&lt;/code&gt; (ISO 8859-7 GREEK SMALL LETTER IOTA WITH TONOS) on the left will &lt;b&gt;not&lt;/b&gt; be upgraded to &lt;code&gt;\x{3af}&lt;/code&gt; (Unicode GREEK SMALL LETTER IOTA WITH TONOS) because of the &lt;code&gt;\x{100}&lt;/code&gt; on the left. You should not be mixing your legacy data and Unicode in the same string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d8236e3754a582534f3ce6e76065dc0065d613" translate="yes" xml:space="preserve">
          <source>single line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b77c0870145ec84d1f7fdec97f85c2c62035090" translate="yes" xml:space="preserve">
          <source>single step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d91afcd8d6b005ce67091e8341f2601ec4b6dd" translate="yes" xml:space="preserve">
          <source>sisify.pl</source>
          <target state="translated">sisify.pl</target>
        </trans-unit>
        <trans-unit id="22c0d77365389f177aaa76dd913fe310f6773061" translate="yes" xml:space="preserve">
          <source>site_perl</source>
          <target state="translated">site_perl</target>
        </trans-unit>
        <trans-unit id="d2d5f657420f10154b068549221bb218e473195e" translate="yes" xml:space="preserve">
          <source>sitearch.U</source>
          <target state="translated">sitearch.U</target>
        </trans-unit>
        <trans-unit id="abbd25ea993dc99f2a79d8bf95b3191af01d9c23" translate="yes" xml:space="preserve">
          <source>sitebin.U</source>
          <target state="translated">sitebin.U</target>
        </trans-unit>
        <trans-unit id="a6ef92a141ec0baaca9b2e2bdaa8195bfb699030" translate="yes" xml:space="preserve">
          <source>sitecustomize.pl</source>
          <target state="translated">sitecustomize.pl</target>
        </trans-unit>
        <trans-unit id="f8a44923ec78fc282255668a4f7620cfc5d890dc" translate="yes" xml:space="preserve">
          <source>sitehtml1dir.U</source>
          <target state="translated">sitehtml1dir.U</target>
        </trans-unit>
        <trans-unit id="eaf161da81f74b8a9312aedc6f75cdbb3ab9dc83" translate="yes" xml:space="preserve">
          <source>sitehtml3dir.U</source>
          <target state="translated">sitehtml3dir.U</target>
        </trans-unit>
        <trans-unit id="f2a12a824446c41dcf7daea98814273d15d91f33" translate="yes" xml:space="preserve">
          <source>sitelib</source>
          <target state="translated">sitelib</target>
        </trans-unit>
        <trans-unit id="447211ee9c19095474abb0d7590c45f9272414f7" translate="yes" xml:space="preserve">
          <source>sitelib.U</source>
          <target state="translated">sitelib.U</target>
        </trans-unit>
        <trans-unit id="227e18bf82d924b977f27204aba1065f0d06711f" translate="yes" xml:space="preserve">
          <source>siteman1dir.U</source>
          <target state="translated">siteman1dir.U</target>
        </trans-unit>
        <trans-unit id="dd76462476b575706a32fa68aae913fc1d73945a" translate="yes" xml:space="preserve">
          <source>siteman3dir.U</source>
          <target state="translated">siteman3dir.U</target>
        </trans-unit>
        <trans-unit id="9a202723ded50cf1907d8d28a787a8b3498ba8a6" translate="yes" xml:space="preserve">
          <source>siteprefix.U</source>
          <target state="translated">siteprefix.U</target>
        </trans-unit>
        <trans-unit id="5cfcf673483bca85b277a7c77843768360efbf57" translate="yes" xml:space="preserve">
          <source>sitescript.U</source>
          <target state="translated">sitescript.U</target>
        </trans-unit>
        <trans-unit id="89368e1d68015693ab48ee189d0632cb5d6edfb3" translate="yes" xml:space="preserve">
          <source>size</source>
          <target state="translated">size</target>
        </trans-unit>
        <trans-unit id="67a4145898e2036271dc3e870e7ad319b1f66a63" translate="yes" xml:space="preserve">
          <source>sizesize.U</source>
          <target state="translated">sizesize.U</target>
        </trans-unit>
        <trans-unit id="42838eff10940d7b5815a39a425b50afce36f9b0" translate="yes" xml:space="preserve">
          <source>sizetype.U</source>
          <target state="translated">sizetype.U</target>
        </trans-unit>
        <trans-unit id="53b559311a78599c7e347231f2eec665882982c8" translate="yes" xml:space="preserve">
          <source>skimo@dns.ufsia.ac.be</source>
          <target state="translated">skimo@dns.ufsia.ac.be</target>
        </trans-unit>
        <trans-unit id="c7e16815bdd61271801523e21224f6226d9ab29d" translate="yes" xml:space="preserve">
          <source>skip</source>
          <target state="translated">skip</target>
        </trans-unit>
        <trans-unit id="9247b13706fcca69a00b4a1962b33f7dea46026a" translate="yes" xml:space="preserve">
          <source>skip_if_reason</source>
          <target state="translated">skip_if_reason</target>
        </trans-unit>
        <trans-unit id="a2f05f4b0e10674ad73f89b7815398b8140a02a6" translate="yes" xml:space="preserve">
          <source>skip_if_true</source>
          <target state="translated">skip_if_true</target>
        </trans-unit>
        <trans-unit id="c3ca5f787365eae0dea86250e27d476406956478" translate="yes" xml:space="preserve">
          <source>sleep</source>
          <target state="translated">sleep</target>
        </trans-unit>
        <trans-unit id="e989dc4ca48fe07b6038d83b22da5da1ae761a21" translate="yes" xml:space="preserve">
          <source>sleep EXPR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b972c8ef2b9a433cffd255165f7163e7ce390700" translate="yes" xml:space="preserve">
          <source>slowly</source>
          <target state="translated">slowly</target>
        </trans-unit>
        <trans-unit id="8604340071fffe0da1ea6e7998ce1203587e0d1e" translate="yes" xml:space="preserve">
          <source>smallprof.out</source>
          <target state="translated">smallprof.out</target>
        </trans-unit>
        <trans-unit id="7c352116a989c492acb4dd74ff384b9d87ab416c" translate="yes" xml:space="preserve">
          <source>smoke ***EXPERIMENTAL COMMAND***</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28284508218f2bab98c4a0a447d3f44eb590e73" translate="yes" xml:space="preserve">
          <source>snprintf() - the return type is unportable. Use my_snprintf() instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1b646ebd1f6844c60dd91951c6867e43857114" translate="yes" xml:space="preserve">
          <source>so</source>
          <target state="translated">so</target>
        </trans-unit>
        <trans-unit id="b7891d4b2849c9c4647fcfa946b0a898f87e15c6" translate="yes" xml:space="preserve">
          <source>so G_NOARGS can be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a35dc24481f56d42a564c0fc6ad22880313d805" translate="yes" xml:space="preserve">
          <source>so instead of this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07b6c4a814dc962ec9b2f4bb8942bc7233b6e66" translate="yes" xml:space="preserve">
          <source>so now you can do ivx and pvx lookups or you can plug there the sv_peek &quot;conversion&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3289eb951f9f1e9f9894c6797f13fdab84279b3b" translate="yes" xml:space="preserve">
          <source>so replace the array name, &lt;code&gt;@array&lt;/code&gt; , with the reference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da755c1c5cdac3c6922faf35cdaab8db660af1c" translate="yes" xml:space="preserve">
          <source>so that &lt;code&gt;MAKE&lt;/code&gt; is set if needed, and not if not needed. Possible values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0c4629ef1dd3ab7f8cd1600dd2c58753765a24" translate="yes" xml:space="preserve">
          <source>so that STDOUT is captured in a file for later inspection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4444ffcf920cd2b884f9f5d4333f225c364e1ea9" translate="yes" xml:space="preserve">
          <source>so that a shell script sourcing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb9cd42a6cd49e298aa3594be65ef2af87506a8" translate="yes" xml:space="preserve">
          <source>so that any print statements will have that separator added back on. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b033c82120a6ce9822581c70e3bfea4e16529bf4" translate="yes" xml:space="preserve">
          <source>so that it works through your firewall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec4adb5ac0368b7a06ac2275231067d5149ce1e" translate="yes" xml:space="preserve">
          <source>so that one can use remote debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cabde5e1dd50fb017fb28d3287d7c37f3f2c3a" translate="yes" xml:space="preserve">
          <source>so that people can relink the perl DLL preserving the binary compatibility, or can create compatibility DLLs. Include the diff files (&lt;code&gt;diff -pu old new&lt;/code&gt; ) of fixes you did so that people can rebuild your version. Include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e2e7df24399df8352b187df04a323eba552a7e" translate="yes" xml:space="preserve">
          <source>so that random output doesn't wind up on the user's terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92a9361bb5043c36aa9dc2f3132381109c61947" translate="yes" xml:space="preserve">
          <source>so that we can all share.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47950020aed7a8a69c93eb886f2361c1a76b44f3" translate="yes" xml:space="preserve">
          <source>so we have used the G_EVAL flag. Not specifying this flag would mean that the program would terminate immediately at the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a594b6d16e787b5a8632a2b1356e99f5327a4d68" translate="yes" xml:space="preserve">
          <source>so wince-arm-pocket-wce400 is the MACHINE type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1587640c5d347ed06c7b84e4bfe38ddbfe939e21" translate="yes" xml:space="preserve">
          <source>so you have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b4e2bfbbb47c0001c74d4964cf6ca96d4988e1" translate="yes" xml:space="preserve">
          <source>so.U</source>
          <target state="translated">so.U</target>
        </trans-unit>
        <trans-unit id="947bee90585bd0d55ccef58dd46685ceb2c4ffd2" translate="yes" xml:space="preserve">
          <source>sock_init(3)</source>
          <target state="translated">sock_init(3)</target>
        </trans-unit>
        <trans-unit id="897d21056a341314b60764c31b36c1fad542e78a" translate="yes" xml:space="preserve">
          <source>socket</source>
          <target state="translated">socket</target>
        </trans-unit>
        <trans-unit id="747922f78f3160fd463cb0eb8a44adafb3ba3d6b" translate="yes" xml:space="preserve">
          <source>socket SOCKET,DOMAIN,TYPE,PROTOCOL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c81c077916a000abf0411ca643309e3a94a422" translate="yes" xml:space="preserve">
          <source>socket.h</source>
          <target state="translated">socket.h</target>
        </trans-unit>
        <trans-unit id="7f56c838a898bda3cf23c7941e3b8d34d94abb18" translate="yes" xml:space="preserve">
          <source>socketpair</source>
          <target state="translated">socketpair</target>
        </trans-unit>
        <trans-unit id="c03e2baad08134da1b4f62c7a3ed5ca8287e7921" translate="yes" xml:space="preserve">
          <source>socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ade947135aa34791aab5044ab3afcdf8e38bc3" translate="yes" xml:space="preserve">
          <source>socketpair(3)</source>
          <target state="translated">socketpair(3)</target>
        </trans-unit>
        <trans-unit id="55d1875e4a97c10866cbda978585ea6c29d65a34" translate="yes" xml:space="preserve">
          <source>sockets</source>
          <target state="translated">sockets</target>
        </trans-unit>
        <trans-unit id="4672861ab32ff4822137b2bb0139a2e1ebf05f82" translate="yes" xml:space="preserve">
          <source>socksizetype.U</source>
          <target state="translated">socksizetype.U</target>
        </trans-unit>
        <trans-unit id="26c327a3ffc7d9efadeec81506de12de6783af18" translate="yes" xml:space="preserve">
          <source>soft reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb93bb966c801b3a72230e8f3b752b62ef22929" translate="yes" xml:space="preserve">
          <source>sol</source>
          <target state="translated">sol</target>
        </trans-unit>
        <trans-unit id="293f758ea4ec4b719fc7eb8c8d47aa2acc76a770" translate="yes" xml:space="preserve">
          <source>some features of the UNIX filesystem regarding link count and file dates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb96e1615761223c442c97fbbc012c7c5d4aecc4" translate="yes" xml:space="preserve">
          <source>some operators that interact with the platform's operating system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04515d7e4e51621227501bcb488f218c0a440c12" translate="yes" xml:space="preserve">
          <source>some versions of cygwin when doing a &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat(&quot;foo&quot;)&lt;/a&gt;&lt;/code&gt; and if not finding it may then attempt to &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat(&quot;foo.exe&quot;)&lt;/a&gt;&lt;/code&gt; (Cygwin)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c14ce870daea179ed4dff9223e6a189298be602" translate="yes" xml:space="preserve">
          <source>some_true_value</source>
          <target state="translated">some_true_value</target>
        </trans-unit>
        <trans-unit id="d31186cd71477f85e425102c2cf4f03af15699cc" translate="yes" xml:space="preserve">
          <source>somebody</source>
          <target state="translated">somebody</target>
        </trans-unit>
        <trans-unit id="48ec6b8c319ab4f4b9dc98fa4456f03fab8cc4af" translate="yes" xml:space="preserve">
          <source>somehow. Unicode defines several</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af17e73721dbe0c40011b82ed4bb1a7dbe3ce29" translate="yes" xml:space="preserve">
          <source>something</source>
          <target state="translated">something</target>
        </trans-unit>
        <trans-unit id="ea61c198c053041a19d3ccfd45f53355ab4a7114" translate="yes" xml:space="preserve">
          <source>something different than a language tag. A language tag denotes a language. A locale ID denotes a language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297f31f02b99ab3fd2219c31def8a1392a5f35b7" translate="yes" xml:space="preserve">
          <source>sometimes</source>
          <target state="translated">sometimes</target>
        </trans-unit>
        <trans-unit id="45f4d26fe87ff542a21e6a9eb0e55f266d843276" translate="yes" xml:space="preserve">
          <source>somewhere</source>
          <target state="translated">somewhere</target>
        </trans-unit>
        <trans-unit id="98c4b8f6e2d770a0f2b54233669d65ff6eddc472" translate="yes" xml:space="preserve">
          <source>sort</source>
          <target state="translated">sort</target>
        </trans-unit>
        <trans-unit id="ee7e87a8a771c517cf3d68200526a558358fdbe2" translate="yes" xml:space="preserve">
          <source>sort - perl pragma to control sort() behaviour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe6009968529f4b5ef61eea50a59728125901a7" translate="yes" xml:space="preserve">
          <source>sort BLOCK LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42f14b0efb4509307080840fa995c505bc205dd" translate="yes" xml:space="preserve">
          <source>sort LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb438570f7a86dd22739ff555857d1a45d88117" translate="yes" xml:space="preserve">
          <source>sort SUBNAME LIST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf5f291e0dc375b0b1d5217e9a83e098f5fb4c3" translate="yes" xml:space="preserve">
          <source>sort preserves the input order of elements that compare equal. Although quicksort's run time is O(NlogN) when averaged over all arrays of length N, the time can be O(N**2),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7427e91cd8352968cb6fed5520c590a025649a9c" translate="yes" xml:space="preserve">
          <source>sort() returns aliases into the original list, much as a for loop's index variable aliases the list elements. That is, modifying an element of a list returned by sort() (for example, in a &lt;code&gt;foreach&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt;) actually modifies the element in the original list. This is usually something to be avoided when writing clear code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad16dbc6e8fc28eccaa2efab7a0649559fe13b96" translate="yes" xml:space="preserve">
          <source>sort() returns aliases into the original list, much as a for loop's index variable aliases the list elements. That is, modifying an element of a list returned by sort() (for example, in a &lt;code&gt;foreach&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt;) actually modifies the element in the original list. This is usually something to be avoided when writing clear code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f9f157dbd321807a0a389b34bf5bb0b9d79fdd" translate="yes" xml:space="preserve">
          <source>sort.exe</source>
          <target state="translated">sort.exe</target>
        </trans-unit>
        <trans-unit id="828d338a9b04221c9cbe286f50cd389f68de4ecf" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="translated">source</target>
        </trans-unit>
        <trans-unit id="0744f4d6a80d663da2b630e59da45a853bf0124a" translate="yes" xml:space="preserve">
          <source>source file; that is, a dMY_CTX in one source file will access a different structure than a dMY_CTX in another source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="057e33035b3e0fd13a7ef685afd1bbae98bee0e2" translate="yes" xml:space="preserve">
          <source>source filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47508e3f6cc1ba55aa8e179ce0d614798515483b" translate="yes" xml:space="preserve">
          <source>source names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7f73223db6a60d20de649849ba58b884313215" translate="yes" xml:space="preserve">
          <source>source stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3086f0858ed8fccdfd576cf023a8cd0d6c5149" translate="yes" xml:space="preserve">
          <source>source, and package it up in a &lt;a href=&quot;iterator&quot;&gt;TAP::Parser::Iterator&lt;/a&gt; for the parser to consume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce16dd0260827ecf338c787f1206f77860cacc5" translate="yes" xml:space="preserve">
          <source>sources</source>
          <target state="translated">sources</target>
        </trans-unit>
        <trans-unit id="6ae1f92cefd6498e99ce673c6dd559b792056029" translate="yes" xml:space="preserve">
          <source>sources, and provide some useful meta data about them. They are used by &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s, which do whatever is required to produce &amp;amp; capture a stream of TAP from the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e239dd52cfb807c6291d7fce94d319ab5eaf5e8" translate="yes" xml:space="preserve">
          <source>spaces must be eaten by the middle part, and the same goes for the second word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217bab1f8d3c5376cbb54615b4417a1ff3aa4c78" translate="yes" xml:space="preserve">
          <source>spaces. Note that this means while you can have properties 'foo' and 'foo2', you cannot render 'foo2', but you could with 'foo2a'. You would be wise not to rely on this behavior going forward ;-)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6900a064deb17648569789ad5748b5e9f92ef050" translate="yes" xml:space="preserve">
          <source>spaceship</source>
          <target state="translated">spaceship</target>
        </trans-unit>
        <trans-unit id="4523043bf98c7b0b0c582a95d3bfb2d1e47b9e8b" translate="yes" xml:space="preserve">
          <source>spawning a shell, and reads its standard output via the &lt;code&gt;PS_PIPE&lt;/code&gt; filehandle. The corresponding syntax to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6c653a86ce321a4a024c4015111820f2a2157e" translate="yes" xml:space="preserve">
          <source>special treatment by a Pod processor; &quot; 0 1 2 3 &quot; doesn't look like a number in any base, so it would presumably be looked up in the table of HTML-like names. Since there isn't (and cannot be) an HTML-like entity called &quot; 0 1 2 3 &quot;, this will be treated as an error. However, Pod processors may treat &quot;E&amp;lt; 0 1 2 3 &amp;gt;&quot; or &quot;E&amp;lt;e-acute&amp;gt;&quot; as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f775f09c1b33c31be321ff6bd740211224d8e707" translate="yes" xml:space="preserve">
          <source>special_targets</source>
          <target state="translated">special_targets</target>
        </trans-unit>
        <trans-unit id="660cffc21b661e4c7984b5b2a88f911ddd5d1dd4" translate="yes" xml:space="preserve">
          <source>specific</source>
          <target state="translated">specific</target>
        </trans-unit>
        <trans-unit id="03d6a194f4b02abf07f3fda776760ecf88ab4ca6" translate="yes" xml:space="preserve">
          <source>specification</source>
          <target state="translated">specification</target>
        </trans-unit>
        <trans-unit id="b9e66d102578bf99db21818049ba6dc4b093e5c8" translate="yes" xml:space="preserve">
          <source>specified but the verbose level is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8838b971aa44080b25933f55337939750338d13b" translate="yes" xml:space="preserve">
          <source>specified but verbose level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7842c37b27f90dd4ed8d3d323dd93fcf69313e6" translate="yes" xml:space="preserve">
          <source>specified in &lt;code&gt;$CPAN::Config-&amp;gt;{lynx}&lt;/code&gt; . If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188f3a348c24e7dedb15b2197799dbb00da0051c" translate="yes" xml:space="preserve">
          <source>specifies that files processed by the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; construct are to be edited in-place. It does this by renaming the input file, opening the output file by the original name, and selecting that output file as the default for print() statements. The extension, if supplied, is used to modify the name of the old file to make a backup copy, following these rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1520d2e9ea270e4dc5bb014dff1b22c7292be810" translate="yes" xml:space="preserve">
          <source>specifies the input record separator (&lt;code&gt;$/&lt;/code&gt; ) as an octal or hexadecimal number. If there are no digits, the null character is the separator. Other switches may precede or follow the digits. For example, if you have a version of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bb4fcfc6a6546dc3f3ba852447eace901dc2d2" translate="yes" xml:space="preserve">
          <source>specifies the intended opcode for the list. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410a5a407e2d7cdffb127f4a028af9dfbc63ae35" translate="yes" xml:space="preserve">
          <source>specifies the intended opcode for the list. If either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148bad2cef9f9e234bf76cd13aaef9b16efb52d2" translate="yes" xml:space="preserve">
          <source>specifies the number of values this option takes per occurrence on the command line. It has the format &lt;code&gt;{&lt;/code&gt; [</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353db488bd7dc6cb823604fe91e8c79f0cfa05c7" translate="yes" xml:space="preserve">
          <source>specifies the pattern to split on for &lt;b&gt;-a&lt;/b&gt;. The pattern may be surrounded by &lt;code&gt;//&lt;/code&gt; , &lt;code&gt;&quot;&quot;&lt;/code&gt; , or &lt;code&gt;''&lt;/code&gt; , otherwise it will be put in single quotes. You can't use literal whitespace in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010bafd5b1ff56a0aaed7e5b9f3b72916a727d4c" translate="yes" xml:space="preserve">
          <source>specifies which type of op is to be affected.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
