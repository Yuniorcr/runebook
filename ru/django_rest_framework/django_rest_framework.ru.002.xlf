<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="django_rest_framework">
    <body>
      <group id="django_rest_framework">
        <trans-unit id="e9c543a358437599437e1e7fcf525b858b441e83" translate="yes" xml:space="preserve">
          <source>For details on configuration and usage see the Django REST framework OAuth documentation for &lt;a href=&quot;https://jpadilla.github.io/django-rest-framework-oauth/authentication/&quot;&gt;authentication&lt;/a&gt; and &lt;a href=&quot;https://jpadilla.github.io/django-rest-framework-oauth/permissions/&quot;&gt;permissions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a62585b9e40eb7a68025161fc597202770dc35" translate="yes" xml:space="preserve">
          <source>For example if your API serves JSON responses and the HTML browsable API, you might want to make &lt;code&gt;JSONRenderer&lt;/code&gt; your default renderer, in order to send &lt;code&gt;JSON&lt;/code&gt; responses to clients that do not specify an &lt;code&gt;Accept&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e5a4d0186d2460fdc99ce833a56ac7008d745f" translate="yes" xml:space="preserve">
          <source>For example if your URL config contained an entry like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4383d1c5017c24e1535c79e53ba6c81fb3bd2217" translate="yes" xml:space="preserve">
          <source>For example the following is an HTTP request to the &lt;code&gt;http://v1.example.com/bookings/&lt;/code&gt; URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1777ddd8445aef4be2edec441ea13139ed8f5b" translate="yes" xml:space="preserve">
          <source>For example your project's &lt;code&gt;settings.py&lt;/code&gt; file might include something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db04e79976eeaaf78a0153684b722b46a2a5b911" translate="yes" xml:space="preserve">
          <source>For example, given the following &lt;code&gt;Accept&lt;/code&gt; header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f800d8cb0f348b3eecfa070213caa4ec712169e" translate="yes" xml:space="preserve">
          <source>For example, given the following model for a tag, which has a generic relationship with other arbitrary models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f409a523ff3068b3f284f7bbf82013c2336e48a" translate="yes" xml:space="preserve">
          <source>For example, given the following views...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11189d71aab8784bc10c45c7c0a980f4435a7848" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;has_expired&lt;/code&gt; was a property on the &lt;code&gt;Account&lt;/code&gt; model, then the following serializer would automatically generate it as a &lt;code&gt;ReadOnlyField&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db04e43d8de6330aac13ffc7aa4912be619b754e" translate="yes" xml:space="preserve">
          <source>For example, if you need to lookup objects based on multiple fields in the URL conf, you could create a mixin class like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4daaa9c483c26920fb313e344e2c132ea2515a7" translate="yes" xml:space="preserve">
          <source>For example, if you want to change the URL for our custom action to &lt;code&gt;^users/{pk}/change-password/$&lt;/code&gt;, you could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02660097feb3b9b5a09175b1c04c6204b72b0902" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to be able to set which fields should be used by a serializer at the point of initializing it, you could create a serializer class like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c26de526ee046af3f5145c5efb0a3e1f46f2c5d" translate="yes" xml:space="preserve">
          <source>For example, if your API relies on a third party service that may sometimes be unreachable, you might want to implement an exception for the &quot;503 Service Unavailable&quot; HTTP response code. You could do this like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7245b6e5becdd0323a2d7a3a297ef39060c2ac73" translate="yes" xml:space="preserve">
          <source>For example, it's easier to inspect &lt;code&gt;response.data&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886db48c31c39c83fec55a846cc4b09933990363" translate="yes" xml:space="preserve">
          <source>For example, multiple user throttle rates could be implemented by using the following classes...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14d8960c9dd49c3ffd1eee2dc1e435e215c479a" translate="yes" xml:space="preserve">
          <source>For example, suppose we wanted to ensure that &lt;code&gt;User&lt;/code&gt; instances and &lt;code&gt;Profile&lt;/code&gt; instances are always created together as a pair. We might write a custom manager class that looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690b680dc1d5bdb8d75a0409c32ad821ac033387" translate="yes" xml:space="preserve">
          <source>For example, the following additional route could be used on a viewset to provide a linkable schema endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402b0745198813513d520d882ca7700bab55d618" translate="yes" xml:space="preserve">
          <source>For example, the following request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33676b463006adb8c9579f696b792bb0497d8619" translate="yes" xml:space="preserve">
          <source>For example, the following serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8b2d16da98838438db929a22b3e6778f06dec3" translate="yes" xml:space="preserve">
          <source>For example, the following serializer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296c6a4db703f561414d20277b2d64aeef1bda29" translate="yes" xml:space="preserve">
          <source>For example, to add support for using &lt;code&gt;format='html'&lt;/code&gt; in test requests, you might have something like this in your &lt;code&gt;settings.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdc1e90b8f8d2e3724c66682de4c8b23b0c2da2" translate="yes" xml:space="preserve">
          <source>For example, to create a field that validates a mapping of strings to strings, you would write something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8df27e89380cd328709cb7ca975b2bf7dc81631" translate="yes" xml:space="preserve">
          <source>For example, to include a field that always provides the current time as part of the serializer validated data, you would use the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85df1b95a16d09692cf8582d2eaf951a6771db2" translate="yes" xml:space="preserve">
          <source>For example, to order users by username:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad72f7773f4a35cc6adbb016a638b482d89750a7" translate="yes" xml:space="preserve">
          <source>For example, to validate a list of integers you might use something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08769d3a75519425b9b5b0bd60ee3bb9f9d6265" translate="yes" xml:space="preserve">
          <source>For example, using &lt;code&gt;APIRequestFactory&lt;/code&gt;, you can make a form PUT request like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2462c92d64a08a7b25d123efa8b0bc3ce76ac8af" translate="yes" xml:space="preserve">
          <source>For example, we could define a relational field to serialize a track to a custom string representation, using its ordering, title, and duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463f1f5468e90ee54861782be95a2efaef0ef979" translate="yes" xml:space="preserve">
          <source>For example, when forcibly authenticating using a token, you might do something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c8402a95725f0469c107df023b11aaef5e0f92" translate="yes" xml:space="preserve">
          <source>For example, you can append &lt;code&gt;router.urls&lt;/code&gt; to a list of existing views...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68fccfc29b1fd6d3ee2148a9ee0714dadba0bc6" translate="yes" xml:space="preserve">
          <source>For example, you may return additional user information beyond the &lt;code&gt;token&lt;/code&gt; value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce526da432eca509fb4cc7e47c1054ed542b99b7" translate="yes" xml:space="preserve">
          <source>For example, you might need to restrict users to only being able to see objects they created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a42ff9d060992df35e6b18b5d4ab83f3d02926" translate="yes" xml:space="preserve">
          <source>For example, you might want to ensure that all error responses include the HTTP status code in the body of the response, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a9a1afba08c0e0323d4da1c781504ee13c4f37" translate="yes" xml:space="preserve">
          <source>For example...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4198a1d731707d17d2ea01a556eefe18f957c0a" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;http://example.com/organizations.csv/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25c7ce9bd47aa05d832134c49da88fb77eac25c" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;http://example.com/organizations/?format=csv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7928ba71a1508aa804bf30b5b18498ea66d5e57" translate="yes" xml:space="preserve">
          <source>For full details see the &lt;a href=&quot;../relations/index&quot;&gt;serializer relations&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22c0509bfd4f98392b4cadb6e9a68a12a5bb9ca" translate="yes" xml:space="preserve">
          <source>For further examples on &lt;code&gt;HiddenField&lt;/code&gt; see the &lt;a href=&quot;../validators/index&quot;&gt;validators&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b351c4f846a64bcfc723f8ba666dac82e61c705" translate="yes" xml:space="preserve">
          <source>For good examples of custom media types, see GitHub's use of a custom &lt;a href=&quot;https://developer.github.com/v3/media/&quot;&gt;application/vnd.github+json&lt;/a&gt; media type, and Mike Amundsen's IANA approved &lt;a href=&quot;http://www.amundsen.com/media-types/collection/&quot;&gt;application/vnd.collection+json&lt;/a&gt; JSON-based hypermedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40314d028a214bf4225b8e5f1713f4a5ff521677" translate="yes" xml:space="preserve">
          <source>For information on how to setup the permission polices for your API please see the &lt;a href=&quot;../permissions/index&quot;&gt;permissions documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaee8d0fdb389b51f7ccae53f31628f22fd028b" translate="yes" xml:space="preserve">
          <source>For instance, given the previous example, and a product with an id of &lt;code&gt;4675&lt;/code&gt;, the following URL would either return the corresponding object, or return a 404 response, depending on if the filtering conditions were met by the given product instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f943581e5b4c92df979994e9a2338a2a620e524" translate="yes" xml:space="preserve">
          <source>For more advanced filtering requirements you can specify a &lt;code&gt;FilterSet&lt;/code&gt; class that should be used by the view. You can read more about &lt;code&gt;FilterSet&lt;/code&gt;s in the &lt;a href=&quot;https://django-filter.readthedocs.io/en/latest/index.html&quot;&gt;django-filter documentation&lt;/a&gt;. It's also recommended that you read the section on &lt;a href=&quot;https://django-filter.readthedocs.io/en/latest/guide/rest_framework.html&quot;&gt;DRF integration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99465d71c6b7eb2e797e612128d62bc6950d21b9" translate="yes" xml:space="preserve">
          <source>For more complex cases you might also want to override various methods on the view class. For example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c33397768e68b24ba0dbfee1fa83a5e3d1489d" translate="yes" xml:space="preserve">
          <source>For more details on this approach see the Django documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/stable/topics/db/managers/&quot;&gt;model managers&lt;/a&gt;, and &lt;a href=&quot;https://www.dabapps.com/blog/django-models-and-encapsulation/&quot;&gt;this blogpost on using model and manager classes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ca7e35e990b8d1f8a35f78a4af6ab1577bae2a" translate="yes" xml:space="preserve">
          <source>For more details see the &lt;a href=&quot;../authentication/index&quot;&gt;authentication documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b45df454852a460f2072fe5bb9bc928b58153bc" translate="yes" xml:space="preserve">
          <source>For more details see the &lt;a href=&quot;../parsers/index&quot;&gt;parsers documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9b85d5dfa4f6278213353472edacdd3c9d25c4" translate="yes" xml:space="preserve">
          <source>For more details see the &lt;a href=&quot;https://django-oauth-toolkit.readthedocs.io/en/latest/rest-framework/getting_started.html&quot;&gt;Django REST framework - Getting started&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b501d3215cf9be383d40435033542c3316b5b7" translate="yes" xml:space="preserve">
          <source>For more details see the &lt;a href=&quot;https://www.django-rest-framework.org/topics/html-and-forms/&quot;&gt;HTML &amp;amp; Forms&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e8c073330381bfe31520d3e2752757fe2553fc" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;a href=&quot;https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;Django documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bd58375db3c9cafb99b7a7d756c92dbdd0d98d" translate="yes" xml:space="preserve">
          <source>For more information on proper usage of HTTP status codes see &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot;&gt;RFC 2616&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc6585&quot;&gt;RFC 6585&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b2d5a6538e00063b2d2d110ff80107db153f7c" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;HTTP Accept&lt;/code&gt; header, see &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html&quot;&gt;RFC 2616&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea41b21be4cddcaa35166f5bc6263c34524e622" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;https://docs.djangoproject.com/en/stable/ref/contrib/contenttypes/#id1&quot;&gt;the Django documentation on generic relations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef79fa7ce63e3aa8b4952f1313a12d56915daaf4" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;../validators/index&quot;&gt;validators documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2ba95fe4a3f37bc7ca888625c1010fafde11fcb" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://www.django-rest-framework.org/topics/browser-enhancements/&quot;&gt;browser enhancements documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03555c415fd074777a6080120c0a814c8af82fbe" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;https://www.django-rest-framework.org/topics/html-and-forms/&quot;&gt;HTML &amp;amp; Forms&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8533dba87c9741b2c7a6c4f4d254d023fb7df8e6" translate="yes" xml:space="preserve">
          <source>For more information see the documentation on &lt;a href=&quot;../content-negotiation/index&quot;&gt;content negotiation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821ad211b1ced7b449c2635810f2010bdd63e93d" translate="yes" xml:space="preserve">
          <source>For more technical details on the implementation we use for cursor pagination, the &lt;a href=&quot;https://cra.mr/2011/03/08/building-cursors-for-the-disqus-api&quot;&gt;&quot;Building cursors for the Disqus API&quot;&lt;/a&gt; blog post gives a good overview of the basic approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a8b69d5da4c0ccff1d41771312a53f941ed5f2" translate="yes" xml:space="preserve">
          <source>For performance reasons the generic views will not automatically apply object level permissions to each instance in a queryset when returning a list of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261e34432a92bf8ada061223eb2a8f663c363e96" translate="yes" xml:space="preserve">
          <source>For priority support please sign up for a &lt;a href=&quot;https://fund.django-rest-framework.org/topics/funding/&quot;&gt;professional or premium sponsorship plan&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25569ce5bd023431f84f9049a37ecf3eb8f4d6a8" translate="yes" xml:space="preserve">
          <source>For support please see the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/django-rest-framework&quot;&gt;REST framework discussion group&lt;/a&gt;, try the &lt;code&gt;#restframework&lt;/code&gt; channel on &lt;code&gt;irc.freenode.net&lt;/code&gt;, search &lt;a href=&quot;https://botbot.me/freenode/restframework/&quot;&gt;the IRC archives&lt;/a&gt;, or raise a question on &lt;a href=&quot;https://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;, making sure to include the &lt;a href=&quot;https://stackoverflow.com/questions/tagged/django-rest-framework&quot;&gt;'django-rest-framework'&lt;/a&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2380812c45aa66d4707400bb3250168d81b82b4" translate="yes" xml:space="preserve">
          <source>For the purposes of many Web APIs, simple &lt;code&gt;JSON&lt;/code&gt; responses with hyperlinked relations may be sufficient. If you want to fully embrace RESTful design and &lt;a href=&quot;http://timelessrepo.com/haters-gonna-hateoas&quot;&gt;HATEOAS&lt;/a&gt; you'll need to consider the design and usage of your media types in more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd079d4b965973bab00761062345323d15886b1" translate="yes" xml:space="preserve">
          <source>For the purposes of this tutorial we're going to start by creating a simple &lt;code&gt;Snippet&lt;/code&gt; model that is used to store code snippets. Go ahead and edit the &lt;code&gt;snippets/models.py&lt;/code&gt; file. Note: Good programming practices include comments. Although you will find them in our repository version of this tutorial code, we have omitted them here to focus on the code itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc89af918b34c91ed9997a7c81cef276628edeb" translate="yes" xml:space="preserve">
          <source>For these cases you can modify the class that is used when &lt;code&gt;many=True&lt;/code&gt; is passed, by using the &lt;code&gt;list_serializer_class&lt;/code&gt; option on the serializer &lt;code&gt;Meta&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727e619b78a30533e4f73acbe768b196d21e7227" translate="yes" xml:space="preserve">
          <source>For this reason, the nested serialiser approach would be the first to try. You would use the custom field approach when the nested serialiser becomes infeasible or overly complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba092f7a94435f425889220b49ed91e6644425f" translate="yes" xml:space="preserve">
          <source>For updates on REST framework development, you may also want to follow &lt;a href=&quot;https://twitter.com/_tomchristie&quot;&gt;the author&lt;/a&gt; on Twitter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be1ffe9f09f8e04ddda6cef810e4cef5c2407d3" translate="yes" xml:space="preserve">
          <source>For updates you'll want to think carefully about how to handle updates to relationships. For example if the data for the relationship is &lt;code&gt;None&lt;/code&gt;, or not provided, which of the following should occur?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36451460d0d8cbb29af7609e38e838238efd1a79" translate="yes" xml:space="preserve">
          <source>For very simple cases you might want to pass through any class attributes using the &lt;code&gt;.as_view()&lt;/code&gt; method. For example, your URLconf might include something like the following entry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a28448c651ecfcaee48c4ca154606ac0ad114a0" translate="yes" xml:space="preserve">
          <source>Forcing CSRF validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93eb8297ee6e9f615f5d81a119cbcf920bb008e" translate="yes" xml:space="preserve">
          <source>Forcing authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d17c5779f4457ef3d3a22fbb0eeef9a9b53b96a" translate="yes" xml:space="preserve">
          <source>FormParser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651a3eabc714702a1ef48ca736737c9986cf2c4f" translate="yes" xml:space="preserve">
          <source>Format strings may either be &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot;&gt;Python strftime formats&lt;/a&gt; which explicitly specify the format, or the special string &lt;code&gt;'iso-8601'&lt;/code&gt;, which indicates that &lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; style dates should be used. (eg &lt;code&gt;'2013-01-29'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8e1ef2fd6fe19fd5c658cb84781503dde14f84" translate="yes" xml:space="preserve">
          <source>Format strings may either be &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot;&gt;Python strftime formats&lt;/a&gt; which explicitly specify the format, or the special string &lt;code&gt;'iso-8601'&lt;/code&gt;, which indicates that &lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; style datetimes should be used. (eg &lt;code&gt;'2013-01-29T12:34:56.000000Z'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7da15bb357dcaa7b62fc0f96c981b456b273d0" translate="yes" xml:space="preserve">
          <source>Format strings may either be &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior&quot;&gt;Python strftime formats&lt;/a&gt; which explicitly specify the format, or the special string &lt;code&gt;'iso-8601'&lt;/code&gt;, which indicates that &lt;a href=&quot;https://www.w3.org/TR/NOTE-datetime&quot;&gt;ISO 8601&lt;/a&gt; style times should be used. (eg &lt;code&gt;'12:34:56.000000'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2072fee998c46713c191a32ed679d761ae451c2" translate="yes" xml:space="preserve">
          <source>Format suffixes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf386184ad59de61c7bf2e55a096d857564d882" translate="yes" xml:space="preserve">
          <source>From this point we're going to really start covering the core of REST framework. Let's introduce a couple of essential building blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6c116b4e4e9d659812fa703d3a956debea8377" translate="yes" xml:space="preserve">
          <source>Function Based Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd274d21fd5b619ca72a7b31b593f9c26ff4b26d" translate="yes" xml:space="preserve">
          <source>Function based</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff171c66738f3aca6840ae3df12a51c55bce440" translate="yes" xml:space="preserve">
          <source>Funding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0687ce4404ec85a9d4a2f2f232fa625198e2f02" translate="yes" xml:space="preserve">
          <source>Further context on how the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header works, and identifying a remote client IP can be &lt;a href=&quot;http://oxpedia.org/wiki/index.php?title=AppSuite:Grizzly#Multiple_Proxies_in_front_of_the_cluster&quot;&gt;found here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba66bdcf6ec240ef327d98f27d5e7d637567db7" translate="yes" xml:space="preserve">
          <source>Further notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f030bbbd32966cde41037b98a8849c46b76e4bc1" translate="yes" xml:space="preserve">
          <source>GET</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1e0bc4957b876fe54e9201a62876958760e6dc" translate="yes" xml:space="preserve">
          <source>GET, or as specified by `methods` argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8068c8318c37acbd9dee1ba10c5b1f735fdd82" translate="yes" xml:space="preserve">
          <source>Generally we recommend a flat style for API representations where possible, but the nested URL style can also be reasonable when used in moderation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee55c666c5d3cb12ea6bc4b6eae1749e0c93d3f" translate="yes" xml:space="preserve">
          <source>Generating Tokens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564ca03b24becc174f89a4cdc9a77c4d57f6985e" translate="yes" xml:space="preserve">
          <source>Generating a dynamic schema with SchemaView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40c01744ad8babf546885dc03b9cb5499fd318a" translate="yes" xml:space="preserve">
          <source>Generating a static schema with the generateschema management command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1742f633800fa34952421201c4f387efea98cfeb" translate="yes" xml:space="preserve">
          <source>Generating an OpenAPI Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99361b3c3214e2138e024b1875260c964b9b225" translate="yes" xml:space="preserve">
          <source>Generic Error Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643e14ec017c81a2bfbcdd4c145540414f0b1e6b" translate="yes" xml:space="preserve">
          <source>Generic Filtering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec0e44b62eebe75763b09f6f8869e772152ce54" translate="yes" xml:space="preserve">
          <source>Generic filters can also present themselves as HTML controls in the browsable API and admin API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f211fbd015d16ec4d378f3602e55adf18c271d" translate="yes" xml:space="preserve">
          <source>Generic filters may also present an interface in the browsable API. To do so you should implement a &lt;code&gt;to_html()&lt;/code&gt; method which returns a rendered HTML representation of the filter. This method should have the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2bb37295743cc6aaa17b171db5e84b256fa5b1" translate="yes" xml:space="preserve">
          <source>Generic relationships</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f5ba99e85307895b0b82c960b06cf40211dd001" translate="yes" xml:space="preserve">
          <source>Generic view settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5501abd5185b3c6248d23e02a1ce2bfbd96f81c6" translate="yes" xml:space="preserve">
          <source>Generic views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46cc131fc0ec840ef04b25b980bd50067849f6c" translate="yes" xml:space="preserve">
          <source>GenericAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43c15efd56d774c87ad80301e6864841c49525c" translate="yes" xml:space="preserve">
          <source>GenericViewSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86ebc3eb8516bd03cba34a27d62750f207bbb7b" translate="yes" xml:space="preserve">
          <source>GeoFeatureModelSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595f2069a21cf2796d8bed33ce1999ae0c5195b0" translate="yes" xml:space="preserve">
          <source>Given a queryset, filter it with whichever filter backends are in use, returning a new queryset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63da1f16913535c553c38a6704122c4924fabdcf" translate="yes" xml:space="preserve">
          <source>Global setting for the &lt;code&gt;html_cutoff&lt;/code&gt; value. Must be an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e86e0f6dc1718778ac46a0767e84dca84fa722ab" translate="yes" xml:space="preserve">
          <source>Global settings for &lt;a href=&quot;../relations/index#select-field-cutoffs&quot;&gt;select field cutoffs for rendering relational fields&lt;/a&gt; in the browsable API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcc7ede05bdb6f5348b1b612287e6f86376a32a" translate="yes" xml:space="preserve">
          <source>Go ahead and test the API from the command line, as we did in &lt;a href=&quot;../1-serialization/index&quot;&gt;tutorial part 1&lt;/a&gt;. Everything is working pretty similarly, although we've got some nicer error handling if we send invalid requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca413be393b406badebcb96c91cf7b7a57309e5" translate="yes" xml:space="preserve">
          <source>Great, that was easy!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c28d2b893c0d8a40af111dc14a163107a3cb15" translate="yes" xml:space="preserve">
          <source>HStoreField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f2014c4a7bbc7bbcf7bad5c6ec210851de5bcb" translate="yes" xml:space="preserve">
          <source>HStoreSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69db199e819883bc42eabde426053c1de4dca85" translate="yes" xml:space="preserve">
          <source>HTML JSON Forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af21a2cb4171d95bc1593165ba9580d4035294b9" translate="yes" xml:space="preserve">
          <source>HTML Select Field cutoffs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d7ce11c1179d9459f88904d2b5de3753846e8b" translate="yes" xml:space="preserve">
          <source>HTML error views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b01ca7c82eabe20ad18a66963955183a1844fa" translate="yes" xml:space="preserve">
          <source>HTML pagination controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa731860255227851ce3f135e3919c70d8d6e3e7" translate="yes" xml:space="preserve">
          <source>HTMLFormRenderer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e613c1c09f58ba3f9720d643bdd17c69609f8659" translate="yes" xml:space="preserve">
          <source>HTML_SELECT_CUTOFF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a590c16527024e0e079f21615d5ba4fa942a81" translate="yes" xml:space="preserve">
          <source>HTML_SELECT_CUTOFF_TEXT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fddf04b157cb183b3b4c47d7d81612aafcaff1" translate="yes" xml:space="preserve">
          <source>HTTP 401 Unauthorized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7797c04550a2f1d4dd7f490a622228209a09a4" translate="yes" xml:space="preserve">
          <source>HTTP 401 responses must always include a &lt;code&gt;WWW-Authenticate&lt;/code&gt; header, that instructs the client how to authenticate. HTTP 403 responses do not include the &lt;code&gt;WWW-Authenticate&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad5fd1c7ad3f6adc41cf5823fb24502bf0d588b" translate="yes" xml:space="preserve">
          <source>HTTP 403 Permission Denied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0bd707e958f2af349ee4894ba5657c8c2c796a" translate="yes" xml:space="preserve">
          <source>HTTP Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ba1b70752a6e29760e6a454c7b14d09cde7781" translate="yes" xml:space="preserve">
          <source>HTTP Signature (currently a &lt;a href=&quot;https://datatracker.ietf.org/doc/draft-cavage-http-signatures/&quot;&gt;IETF draft&lt;/a&gt;) provides a way to achieve origin authentication and message integrity for HTTP messages. Similar to &lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html&quot;&gt;Amazon's HTTP Signature scheme&lt;/a&gt;, used by many of its services, it permits stateless, per-request authentication. &lt;a href=&quot;https://github.com/etoccalino/&quot;&gt;Elvio Toccalino&lt;/a&gt; maintains the &lt;a href=&quot;https://github.com/etoccalino/django-rest-framework-httpsignature&quot;&gt;djangorestframework-httpsignature&lt;/a&gt; (outdated) package which provides an easy to use HTTP Signature Authentication mechanism. You can use the updated fork version of &lt;a href=&quot;https://github.com/etoccalino/django-rest-framework-httpsignature&quot;&gt;djangorestframework-httpsignature&lt;/a&gt;, which is &lt;a href=&quot;https://github.com/ahknight/drf-httpsig&quot;&gt;drf-httpsig&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889fa1705b0eb885f7d60710578e51d431264f7d" translate="yes" xml:space="preserve">
          <source>HTTP Signature Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35f64384f3ef65b0b23169d559ca699db90c196" translate="yes" xml:space="preserve">
          <source>HTTP has provisions for several mechanisms for &quot;content negotiation&quot; - the process of selecting the best representation for a given response when there are multiple representations available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d09874fb2ae0467cd1e05f163d17b5db01f989" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 420 Enhance Your Calm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddd3faaab88843ba7a3d567d6a152c05b2d9850" translate="yes" xml:space="preserve">
          <source>Handler methods may return REST framework's &lt;code&gt;Response&lt;/code&gt;, instead of Django's &lt;code&gt;HttpResponse&lt;/code&gt;. The view will manage content negotiation and setting the correct renderer on the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9274f39248e1da8f2bf1230ee0366e79fcccaaa2" translate="yes" xml:space="preserve">
          <source>Handling saving related instances in model manager classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785f95ce939b787977f06fd64a741713b658d48a" translate="yes" xml:space="preserve">
          <source>Has the same behavior as &lt;a href=&quot;https://docs.djangoproject.com/en/stable/topics/http/urls/#reverse&quot;&gt;&lt;code&gt;django.urls.reverse&lt;/code&gt;&lt;/a&gt;, except that it returns a fully qualified URL, using the request to determine the host and port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9808701409e22ac5972c5eafe391aaca194bdc" translate="yes" xml:space="preserve">
          <source>Has the same behavior as &lt;a href=&quot;https://docs.djangoproject.com/en/stable/topics/http/urls/#reverse-lazy&quot;&gt;&lt;code&gt;django.urls.reverse_lazy&lt;/code&gt;&lt;/a&gt;, except that it returns a fully qualified URL, using the request to determine the host and port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30862785fb7c5b9b6ff71e893cc9a4d786fbd085" translate="yes" xml:space="preserve">
          <source>Having a web-browsable API is a huge usability win, and makes developing and using your API much easier. It also dramatically lowers the barrier-to-entry for other developers wanting to inspect and work with your API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79358758c0f4048f83be018397ea8e6eb3480273" translate="yes" xml:space="preserve">
          <source>Hawk HTTP Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500e5500bf2a87f2e4356909dcf53fafc0358c13" translate="yes" xml:space="preserve">
          <source>Headers &amp;amp; Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934835a36e88b263f02948e4dbd8c5dd04401bc0" translate="yes" xml:space="preserve">
          <source>Helper functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175b05c3fb1be451d239b757f143eedd4ff404fd" translate="yes" xml:space="preserve">
          <source>Here is the view for an individual snippet, in the &lt;code&gt;views.py&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef0b1798ef971c684a53310fbf9778830acb4b1" translate="yes" xml:space="preserve">
          <source>Here the mapping between the target and source attribute pairs (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;x_coordinate&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;y_coordinate&lt;/code&gt;) is handled in the &lt;code&gt;IntegerField&lt;/code&gt; declarations. It's our &lt;code&gt;NestedCoordinateSerializer&lt;/code&gt; that takes &lt;code&gt;source='*'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85475e7796d1263e2788e54ccb40754776350a06" translate="yes" xml:space="preserve">
          <source>Here we'll take an example of a &lt;em&gt;flat&lt;/em&gt;&lt;code&gt;DataPoint&lt;/code&gt; model with &lt;code&gt;x_coordinate&lt;/code&gt; and &lt;code&gt;y_coordinate&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aefbe55cdc104a08c16241f383ddf709c7eb266" translate="yes" xml:space="preserve">
          <source>Here we've used the &lt;code&gt;ReadOnlyModelViewSet&lt;/code&gt; class to automatically provide the default 'read-only' operations. We're still setting the &lt;code&gt;queryset&lt;/code&gt; and &lt;code&gt;serializer_class&lt;/code&gt; attributes exactly as we did when we were using regular views, but we no longer need to provide the same information to two separate classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43be75fd78340ed55323ac39cfd8535a1199d13" translate="yes" xml:space="preserve">
          <source>Here's a basic &lt;code&gt;ModelSerializer&lt;/code&gt; that we can use for creating or updating instances of &lt;code&gt;CustomerReportRecord&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95af128258e44e86c5a766367bc9934d2a29bf9c" translate="yes" xml:space="preserve">
          <source>Here's a complete example of our previous &lt;code&gt;HighScoreSerializer&lt;/code&gt;, that's been updated to support both read and write operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5f57174631ac6cc9d1043457a672a8fb5a9648" translate="yes" xml:space="preserve">
          <source>Here's an example HTTP request using the accept header versioning style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0379b7882df31f4c946788bf163bd64fd6e26e7d" translate="yes" xml:space="preserve">
          <source>Here's an example for an &lt;code&gt;.update()&lt;/code&gt; method on our previous &lt;code&gt;UserSerializer&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb605c49985a2cc10eb9992ceb8beabe435d2c6" translate="yes" xml:space="preserve">
          <source>Here's an example of a simple URL conf, that uses &lt;code&gt;SimpleRouter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73dfe8288992866f0c84250247c0189e7bb83b1b" translate="yes" xml:space="preserve">
          <source>Here's an example of how you might choose to implement multiple updates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525aa64e1f9c1366eb8a944090c36e82f9809b88" translate="yes" xml:space="preserve">
          <source>Here's an example response that demonstrates the information that is returned by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0413b69bdca6db6872506c437345028661969376" translate="yes" xml:space="preserve">
          <source>Here's our re-wired &lt;code&gt;snippets/urls.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cbd7e5b262e108dc01bd7762dc777b9b0a7771" translate="yes" xml:space="preserve">
          <source>HiddenField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e6fbd48496c9b41a1e0c5d32d1808abd7d541a" translate="yes" xml:space="preserve">
          <source>HostNameVersioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e6b24f1e9bd8f18c962ccd9beacce422982b54" translate="yes" xml:space="preserve">
          <source>Hostname based versioning can be particularly useful if you have requirements to route incoming requests to different servers based on the version, as you can configure different DNS records for different API versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ba7e5bffbfb2db6b5c7190e576c42cd3c715b5" translate="yes" xml:space="preserve">
          <source>How authentication is determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd4a95299370d3cc669411bfd8bf0719647f0fa" translate="yes" xml:space="preserve">
          <source>How clients are identified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ed251ac5463fa95da511c3f1c83585409ace31" translate="yes" xml:space="preserve">
          <source>How do you determine which instance should be updated for each item in the list of data?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54cfbdef5afd8575a913fb1bfde8294696fa4210" translate="yes" xml:space="preserve">
          <source>How hyperlinked views are determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf8b77b026537f3af664093b626cf3f840d1fd9" translate="yes" xml:space="preserve">
          <source>How permissions are determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459b6f987ba6207373dee5779a78c550c76555a9" translate="yes" xml:space="preserve">
          <source>How should insertions be handled? Are they invalid, or do they create new objects?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4606665fe76a471c8ca9b99aa69363b80c78a657" translate="yes" xml:space="preserve">
          <source>How should ordering be handled? Does changing the position of two items imply any state change or is it ignored?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a38153aa0dd696e49b4b82cc33bac57ec804f0" translate="yes" xml:space="preserve">
          <source>How should removals be handled? Do they imply object deletion, or removing a relationship? Should they be silently ignored, or are they invalid?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c2584f45d5d1d7981b085b45eb8c75c04c4499" translate="yes" xml:space="preserve">
          <source>How the parser is determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604c72a8a43b08a758f6cbb4ea0037acafac778c" translate="yes" xml:space="preserve">
          <source>How the renderer is determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096325cc624cf757929dde89ae7cc58861a7fc87" translate="yes" xml:space="preserve">
          <source>How throttling is determined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8562ee34c66675e21d1c6f7679f5037c260ddb9" translate="yes" xml:space="preserve">
          <source>How you vary the API behavior is up to you, but one example you might typically want is to switch to a different serialization style in a newer version. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995d1b21dbe6553976ba253abaa1d73ef33758ca" translate="yes" xml:space="preserve">
          <source>How's it looking?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1356325c14b709bbd99baea5454b8ef107f30355" translate="yes" xml:space="preserve">
          <source>However, sometimes you'll want to place your validation logic into reusable components, so that it can easily be reused throughout your codebase. This can be achieved by using validator functions and validator classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f111c94ad24c1d77d73aef275e190e37c07769" translate="yes" xml:space="preserve">
          <source>However, you can only use this technique to opt out from a field defined declaratively by a parent class; it won&amp;rsquo;t prevent the &lt;code&gt;ModelSerializer&lt;/code&gt; from generating a default field. To opt-out from default fields, see &lt;a href=&quot;#specifying-which-fields-to-include&quot;&gt;Specifying which fields to include&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019d51ae85b203b4599be4e3d85bac0a7ca10e2d" translate="yes" xml:space="preserve">
          <source>HyperlinkedIdentityField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d0d9cb9a3659cc02a736749cca291162869768" translate="yes" xml:space="preserve">
          <source>HyperlinkedModelSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af77b9252508bae5e4a42e92f4a96a8002bbab25" translate="yes" xml:space="preserve">
          <source>HyperlinkedRelatedField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b51daf70e4372fea56eb63ccab1d9af0eb9b19" translate="yes" xml:space="preserve">
          <source>Hyperlinking our API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d61d3792e3e1ee82dd8dec736ba9d83e830bf3" translate="yes" xml:space="preserve">
          <source>IPAddressField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf5477be1d5a66c6f882b98ebe1772b44e44c67" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NamespaceVersioning&lt;/code&gt; was being used, and the API version was 'v1', then the URL lookup used would be &lt;code&gt;'v1:bookings-list'&lt;/code&gt;, which might resolve to a URL like &lt;code&gt;http://example.org/v1/bookings/&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbd3169215b5755912a5239ad0a14499c0913bc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;QueryParameterVersioning&lt;/code&gt; was being used, and the API version was &lt;code&gt;1.0&lt;/code&gt;, then the returned URL might be something like &lt;code&gt;http://example.org/bookings/?version=1.0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151172500eedb4999d5e10c3ce45e86a4919d89a" translate="yes" xml:space="preserve">
          <source>If a client sends a request with a content-type that cannot be parsed then a &lt;code&gt;UnsupportedMediaType&lt;/code&gt; exception will be raised, which by default will be caught and return a &lt;code&gt;415 Unsupported Media Type&lt;/code&gt; response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a2e23a0fb4bc4d68c4fb7bb3c0d6eda8e2272e" translate="yes" xml:space="preserve">
          <source>If a nested representation may optionally accept the &lt;code&gt;None&lt;/code&gt; value you should pass the &lt;code&gt;required=False&lt;/code&gt; flag to the nested serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1624c9270285b4008aabd3df0832432ff79781" translate="yes" xml:space="preserve">
          <source>If all you need is simple equality-based filtering, you can set a &lt;code&gt;filterset_fields&lt;/code&gt; attribute on the view, or viewset, listing the set of fields you wish to filter against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35f9c71ba8acb499b1fcb0eb30207a9a75b5630" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ordering&lt;/code&gt; attribute is set on the view, this will be used as the default ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb5c2a59bbce25ba134c98ab18bb8565a1dded3" translate="yes" xml:space="preserve">
          <source>If an object can be retrieved this returns a &lt;code&gt;200 OK&lt;/code&gt; response, with a serialized representation of the object as the body of the response. Otherwise it will return a &lt;code&gt;404 Not Found&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b737b46902636aa4fe051496038d62345768be" translate="yes" xml:space="preserve">
          <source>If an object is created this returns a &lt;code&gt;201 Created&lt;/code&gt; response, with a serialized representation of the object as the body of the response. If the representation contains a key named &lt;code&gt;url&lt;/code&gt;, then the &lt;code&gt;Location&lt;/code&gt; header of the response will be populated with that value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4004507afebf41a45cce113a5f539f52018854a" translate="yes" xml:space="preserve">
          <source>If an object is deleted this returns a &lt;code&gt;204 No Content&lt;/code&gt; response, otherwise it will return a &lt;code&gt;404 Not Found&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3762d67e46fadd0046cf7922e0498a000de20890" translate="yes" xml:space="preserve">
          <source>If an object is updated this returns a &lt;code&gt;200 OK&lt;/code&gt; response, with a serialized representation of the object as the body of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad1b0f1459e229805a6499a53d26613abb019d9" translate="yes" xml:space="preserve">
          <source>If any of the validation fails, then the method should raise a &lt;code&gt;serializers.ValidationError(errors)&lt;/code&gt;. The &lt;code&gt;errors&lt;/code&gt; argument should be a dictionary mapping field names (or &lt;code&gt;settings.NON_FIELD_ERRORS_KEY&lt;/code&gt;) to a list of error messages. If you don't need to alter deserialization behavior and instead want to provide object-level validation, it's recommended that you instead override the &lt;a href=&quot;#object-level-validation&quot;&gt;&lt;code&gt;.validate()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c82ce334ad23ff527e64cd77f8d563dbdfd972" translate="yes" xml:space="preserve">
          <source>If authentication is attempted but fails, raise a &lt;code&gt;AuthenticationFailed&lt;/code&gt; exception. An error response will be returned immediately, regardless of any permissions checks, and without checking any other authentication schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a28664c171ee61d2af627fc8e33e900518233b4" translate="yes" xml:space="preserve">
          <source>If authentication is not attempted, return &lt;code&gt;None&lt;/code&gt;. Any other authentication schemes also in use will still be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d535c232b6130ee795f2d337922b2765b29a1be" translate="yes" xml:space="preserve">
          <source>If it is called without a &lt;code&gt;filename&lt;/code&gt; URL keyword argument, then the client must set the filename in the &lt;code&gt;Content-Disposition&lt;/code&gt; HTTP header. For example &lt;code&gt;Content-Disposition: attachment; filename=upload.jpg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781ec054e7600192b9cfeff809352220ed8070be" translate="yes" xml:space="preserve">
          <source>If multiple media types have the same specificity, then preference is given to based on the ordering of the renderers configured for the given view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71d2022ba5a59c33bf2edb2d41d3ff0254f5769" translate="yes" xml:space="preserve">
          <source>If no class authenticates, &lt;code&gt;request.user&lt;/code&gt; will be set to an instance of &lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt;, and &lt;code&gt;request.auth&lt;/code&gt; will be set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc335a7d334f1ce9ac5fa81ad06984d5bdc90b3" translate="yes" xml:space="preserve">
          <source>If not specified, the &lt;code&gt;'EXCEPTION_HANDLER'&lt;/code&gt; setting defaults to the standard exception handler provided by REST framework:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8405c9f786a3a19079509256af88db8fb4d039cc" translate="yes" xml:space="preserve">
          <source>If not specified, this setting defaults to allowing unrestricted access:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b755c9a26acc59abf062c580cfcf382c4dfd47db" translate="yes" xml:space="preserve">
          <source>If set, this gives the default value that will be used for the field if no input value is supplied. If not set the default behaviour is to not populate the attribute at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d32608b1eb6ccdc1307e98ee1cc0c3f1b4ce26" translate="yes" xml:space="preserve">
          <source>If set, this is used to map internal viewset method names onto external action names used in the schema generation. This allows us to generate names that are more suitable for an external representation than those that are used internally in the codebase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98ca408c0aec431a544d88204cd8d11d300b56c" translate="yes" xml:space="preserve">
          <source>If set, this maps the &lt;code&gt;'pk'&lt;/code&gt; identifier in the URL conf onto the actual field name when generating a schema path parameter. Typically this will be &lt;code&gt;'id'&lt;/code&gt;. This gives a more suitable representation as &quot;primary key&quot; is an implementation detail, whereas &quot;identifier&quot; is a more general concept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2004d81ff4f7d93f1efefd10b7bc90533e95e43a" translate="yes" xml:space="preserve">
          <source>If set, this value will restrict the set of versions that may be returned by the versioning scheme, and will raise an error if the provided version if not in this set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724bf32cda9301a3160923eacc1bdafdd94e8514" translate="yes" xml:space="preserve">
          <source>If successfully authenticated, &lt;code&gt;BasicAuthentication&lt;/code&gt; provides the following credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0170680e0546d0539f86b3af67111e04db9cf116" translate="yes" xml:space="preserve">
          <source>If successfully authenticated, &lt;code&gt;RemoteUserAuthentication&lt;/code&gt; provides the following credentials:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5d10a064f9ec41b6b209f8e1f52eea774e4d6f" translate="yes" xml:space="preserve">
          <source>If successfully authenticated, &lt;code&gt;SessionAuthentication&lt;/code&gt; provides the following credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dbf4a6450c296e39679277679a03550952acc3" translate="yes" xml:space="preserve">
          <source>If successfully authenticated, &lt;code&gt;TokenAuthentication&lt;/code&gt; provides the following credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17139f567b09df009291ee42ef10e85da42a231e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;.authenticate_header()&lt;/code&gt; method is not overridden, the authentication scheme will return &lt;code&gt;HTTP 403 Forbidden&lt;/code&gt; responses when an unauthenticated request is denied access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc08ff2b1a93412af113ed304cb1737ae38a519a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;.wait()&lt;/code&gt; method is implemented and the request is throttled, then a &lt;code&gt;Retry-After&lt;/code&gt; header will be included in the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c8928fbcfcaa52031b198595e75fbbfd933f9d" translate="yes" xml:space="preserve">
          <source>If the field is used to represent a to-many relationship, you should add the &lt;code&gt;many=True&lt;/code&gt; flag to the serializer field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7759860d1ecdbed30a700fb38ace7ab253cbf247" translate="yes" xml:space="preserve">
          <source>If the generic views don't suit the needs of your API, you can drop down to using the regular &lt;code&gt;APIView&lt;/code&gt; class, or reuse the mixins and base classes used by the generic views to compose your own set of reusable generic views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a390df3edd1db405d9691f8496c1e1a64c0cee6" translate="yes" xml:space="preserve">
          <source>If the queryset is populated, this returns a &lt;code&gt;200 OK&lt;/code&gt; response, with a serialized representation of the queryset as the body of the response. The response data may optionally be paginated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e292621ee644e0903e045531be5e6962b6d3c78f" translate="yes" xml:space="preserve">
          <source>If the renderer returns a bytestring representing raw binary content, you should set a charset value of &lt;code&gt;None&lt;/code&gt;, which will ensure the &lt;code&gt;Content-Type&lt;/code&gt; header of the response will not have a &lt;code&gt;charset&lt;/code&gt; value set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11175bd26ae9a043216a2def09454a4454a14db1" translate="yes" xml:space="preserve">
          <source>If the request data provided for creating the object was invalid, a &lt;code&gt;400 Bad Request&lt;/code&gt; response will be returned, with the error details as the body of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1836c7a58e439d70edb0376218e6272e45c923" translate="yes" xml:space="preserve">
          <source>If the request data provided for updating the object was invalid, a &lt;code&gt;400 Bad Request&lt;/code&gt; response will be returned, with the error details as the body of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b70a2f697203161fe8fbb7adf2e08d541d96ff0" translate="yes" xml:space="preserve">
          <source>If the request is unauthenticated the default value of &lt;code&gt;request.user&lt;/code&gt; is an instance of &lt;code&gt;django.contrib.auth.models.AnonymousUser&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be00917a7cb212517b09975ac295c110e893649" translate="yes" xml:space="preserve">
          <source>If the request is unauthenticated, or if no additional context is present, the default value of &lt;code&gt;request.auth&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64cd8c8685e54a353a93546485db83d3367708b" translate="yes" xml:space="preserve">
          <source>If the requested view was only configured with renderers for &lt;code&gt;YAML&lt;/code&gt; and &lt;code&gt;HTML&lt;/code&gt;, then REST framework would select whichever renderer was listed first in the &lt;code&gt;renderer_classes&lt;/code&gt; list or &lt;code&gt;DEFAULT_RENDERER_CLASSES&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7828acbe527a2daaaa383c73e0725fd540fcfed8" translate="yes" xml:space="preserve">
          <source>If the value of this setting is &lt;code&gt;None&lt;/code&gt; then URL format overrides will be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eefd2c7a9ecdb3b0e2f8e66213de676a4f65d0" translate="yes" xml:space="preserve">
          <source>If the view instance inherits &lt;code&gt;ViewSet&lt;/code&gt;, it may have been initialized with several optional arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f937af6308b40651e6c57fa89817f4705a2f4fa" translate="yes" xml:space="preserve">
          <source>If the view used with &lt;code&gt;FileUploadParser&lt;/code&gt; is called with a &lt;code&gt;filename&lt;/code&gt; URL keyword argument, then that argument will be used as the filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee07002daf78889d0b9379951b4873cfb2854595" translate="yes" xml:space="preserve">
          <source>If unset, this will default to the same value as the &lt;code&gt;COERCE_DECIMAL_TO_STRING&lt;/code&gt; setting, which is &lt;code&gt;True&lt;/code&gt; unless set otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badf43f5f71dea780d1bb47e31ecaa97c8ca9abe" translate="yes" xml:space="preserve">
          <source>If using the &lt;code&gt;i18n_patterns&lt;/code&gt; function provided by Django, as well as &lt;code&gt;format_suffix_patterns&lt;/code&gt; you should make sure that the &lt;code&gt;i18n_patterns&lt;/code&gt; function is applied as the final, or outermost function. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6cedcdac1cfd4ddeabf31e95fe63c505f7d667" translate="yes" xml:space="preserve">
          <source>If we need to, we can bind this viewset into two separate views, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b3c78ca47e0ba56208fac890d659cc9ed61fd0" translate="yes" xml:space="preserve">
          <source>If we open a browser and navigate to the browsable API, you'll find that you can now work your way around the API simply by following links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c2a3708942fdbbc6b25876bd9d06fb61811500" translate="yes" xml:space="preserve">
          <source>If we open up the Django shell using &lt;code&gt;manage.py shell&lt;/code&gt; we can now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74a96c879ee71b3ee740607aee4469f9733da9a" translate="yes" xml:space="preserve">
          <source>If we try to create a snippet without authenticating, we'll get an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937f280cd3aacfd7745f966a57969312a469165d" translate="yes" xml:space="preserve">
          <source>If we want to be able to return complete object instances based on the validated data we need to implement one or both of the &lt;code&gt;.create()&lt;/code&gt; and &lt;code&gt;.update()&lt;/code&gt; methods. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e537c32e3ab92c29be0f57acf967f3a934e3876" translate="yes" xml:space="preserve">
          <source>If we're going to have a hyperlinked API, we need to make sure we name our URL patterns. Let's take a look at which URL patterns we need to name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e06e5a02932703202751967e9d4078cc056cf34" translate="yes" xml:space="preserve">
          <source>If we're interacting with the API programmatically we need to explicitly provide the authentication credentials on each request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cb2b3310c00368f07b3a88b1015101916ddc02" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;do&lt;/em&gt; want to use relative URLs, you should explicitly pass &lt;code&gt;{'request': None}&lt;/code&gt; in the serializer context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceeeb6b592a3860b3f47b57e1dee4577cbb88040" translate="yes" xml:space="preserve">
          <source>If you &lt;em&gt;don't&lt;/em&gt; specify an &lt;code&gt;ordering_fields&lt;/code&gt; attribute on the view, the filter class will default to allowing the user to filter on any readable fields on the serializer specified by the &lt;code&gt;serializer_class&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1f9482e8a9363c06038f743d59129c62e8c4ed" translate="yes" xml:space="preserve">
          <source>If you add a &lt;code&gt;--debug&lt;/code&gt; switch to the &lt;code&gt;http&lt;/code&gt; requests above, you will be able to see the request type in request headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d5c6bce4346ea32c03e44134b0ab11d511fe53" translate="yes" xml:space="preserve">
          <source>If you are confident that the queryset being used by the view doesn't contain any sensitive data, you can also explicitly specify that a view should allow ordering on &lt;em&gt;any&lt;/em&gt; model field or queryset aggregate, by using the special value &lt;code&gt;'__all__'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e4cbea69fbbd9653b41057fcbc950cc577955b" translate="yes" xml:space="preserve">
          <source>If you are deploying to Apache, and using any non-session based authentication, you will need to explicitly configure mod_wsgi to pass the required headers through to the application. This can be done by specifying the &lt;code&gt;WSGIPassAuthorization&lt;/code&gt; directive in the appropriate context and setting it to &lt;code&gt;'On'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22915475458b11688422e3108e08965f06506fd" translate="yes" xml:space="preserve">
          <source>If you are using a mixin across multiple views, you can take this a step further and create your own set of base views that can then be used throughout your project. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d48a6c53043250f1cb0af6a7c313155f814d6f" translate="yes" xml:space="preserve">
          <source>If you believe you&amp;rsquo;ve found something in Django REST framework which has security implications, please &lt;strong&gt;do not raise the issue in a public forum&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09432f3348bbcdce78721c9395ae83b2b1fe6de1" translate="yes" xml:space="preserve">
          <source>If you do need to access the content type of the request you should use the &lt;code&gt;.content_type&lt;/code&gt; property in preference to using &lt;code&gt;request.META.get('HTTP_CONTENT_TYPE')&lt;/code&gt;, as it provides transparent support for browser-based non-form content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330758aebd8e0cc4645be7e7b82dfbcd3cd16258" translate="yes" xml:space="preserve">
          <source>If you don't set the content type, most clients will default to using &lt;code&gt;'application/x-www-form-urlencoded'&lt;/code&gt;, which may not be what you wanted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443d4714f16470b2d6bde33f0df55ef74b2e580a" translate="yes" xml:space="preserve">
          <source>If you explicitly specify a relational field pointing to a &lt;code&gt;ManyToManyField&lt;/code&gt; with a through model, be sure to set &lt;code&gt;read_only&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db160806cbb4e89c6fa2ab08eecd5e21b65914d0" translate="yes" xml:space="preserve">
          <source>If you have ad-hoc methods that should be routable, you can mark them as such with the &lt;code&gt;@action&lt;/code&gt; decorator. Like regular actions, extra actions may be intended for either a single object, or an entire collection. To indicate this, set the &lt;code&gt;detail&lt;/code&gt; argument to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. The router will configure its URL patterns accordingly. e.g., the &lt;code&gt;DefaultRouter&lt;/code&gt; will configure detail actions to contain &lt;code&gt;pk&lt;/code&gt; in their URL patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0009991cbfacf0193e20e01780170981348df506" translate="yes" xml:space="preserve">
          <source>If you have not set a related name for the reverse relationship, you'll need to use the automatically generated related name in the &lt;code&gt;fields&lt;/code&gt; argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2778f0e3e06aa8f5df991405a30428ab69ec3a18" translate="yes" xml:space="preserve">
          <source>If you have specific requirements for creating schema endpoints that are accessed with regular &lt;code&gt;GET&lt;/code&gt; requests, you might consider re-using the metadata API for doing so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f2165129b3d9850ddc9adb78b17b0f49ba5623" translate="yes" xml:space="preserve">
          <source>If you need a customized version of the &lt;code&gt;obtain_auth_token&lt;/code&gt; view, you can do so by subclassing the &lt;code&gt;ObtainAuthToken&lt;/code&gt; view class, and using that in your url conf instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a9f83459d63eb9cbe62ad1a2666d7b6a15572c" translate="yes" xml:space="preserve">
          <source>If you need the target of the relationship to have a nested representation, you can use the required serializers inside the &lt;code&gt;.to_representation()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33469cc6d47562b36e75dd49e810ab01644d3af9" translate="yes" xml:space="preserve">
          <source>If you need to access the values of REST framework's API settings in your project, you should use the &lt;code&gt;api_settings&lt;/code&gt; object. For example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce685b5177b93ce39ff6abea3c58c0e18d54959c" translate="yes" xml:space="preserve">
          <source>If you need to alter the serialization or deserialization behavior of a serializer class, you can do so by overriding the &lt;code&gt;.to_representation()&lt;/code&gt; or &lt;code&gt;.to_internal_value()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7b5da8973593d81f6e7bd7dbaf22bc79865bf2" translate="yes" xml:space="preserve">
          <source>If you need to customize the error responses your API returns you should subclass this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3985e207c5ee6e926cff6ef3cb2b21bc3a8d8d42" translate="yes" xml:space="preserve">
          <source>If you need to explicitly encode the request body, you can do so by setting the &lt;code&gt;content_type&lt;/code&gt; flag. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837c4ba4238c54c8fb61635198a65e70fb8aa769" translate="yes" xml:space="preserve">
          <source>If you need to generic PUT-as-create behavior you may want to include something like &lt;a href=&quot;https://gist.github.com/tomchristie/a2ace4577eff2c603b1b&quot;&gt;this &lt;code&gt;AllowPUTAsCreateMixin&lt;/code&gt; class&lt;/a&gt; as a mixin to your views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e8e7d414ae633aad97d181660bf90d38fdaaf1" translate="yes" xml:space="preserve">
          <source>If you need to get the URL of an action, use the &lt;code&gt;.reverse_action()&lt;/code&gt; method. This is a convenience wrapper for &lt;code&gt;reverse()&lt;/code&gt;, automatically passing the view's &lt;code&gt;request&lt;/code&gt; object and prepending the &lt;code&gt;url_name&lt;/code&gt; with the &lt;code&gt;.basename&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459afe0a30043b0523f501d9b44136c5a1282ade" translate="yes" xml:space="preserve">
          <source>If you need to strictly identify unique client IP addresses, you'll need to first configure the number of application proxies that the API runs behind by setting the &lt;code&gt;NUM_PROXIES&lt;/code&gt; setting. This setting should be an integer of zero or more. If set to non-zero then the client IP will be identified as being the last IP address in the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header, once any application proxy IP addresses have first been excluded. If set to zero, then the &lt;code&gt;REMOTE_ADDR&lt;/code&gt; value will always be used as the identifying IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7092c266ec8a6da91950acf341cdedfb8805fdb8" translate="yes" xml:space="preserve">
          <source>If you need to test if a request is a read operation or a write operation, you should check the request method against the constant &lt;code&gt;SAFE_METHODS&lt;/code&gt;, which is a tuple containing &lt;code&gt;'GET'&lt;/code&gt;, &lt;code&gt;'OPTIONS'&lt;/code&gt; and &lt;code&gt;'HEAD'&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da011226b1c858c25a2a030362ddf82abf07504b" translate="yes" xml:space="preserve">
          <source>If you need to test requests using something other than multipart or json requests, you can do so by setting the &lt;code&gt;TEST_REQUEST_RENDERER_CLASSES&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f83bf4aab12d38e667719df975ec9b051ba5ac7" translate="yes" xml:space="preserve">
          <source>If you need to use a cache other than &lt;code&gt;'default'&lt;/code&gt;, you can do so by creating a custom throttle class and setting the &lt;code&gt;cache&lt;/code&gt; attribute. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d722234ee32ff58eae4952f2d2fb710da358631" translate="yes" xml:space="preserve">
          <source>If you only want a subset of the default fields to be used in a model serializer, you can do so using &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; options, just as you would with a &lt;code&gt;ModelForm&lt;/code&gt;. It is strongly recommended that you explicitly set all fields that should be serialized using the &lt;code&gt;fields&lt;/code&gt; attribute. This will make it less likely to result in unintentionally exposing data when your models change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af2459b09154f2ee940031bb074fe3e42bfc9ac" translate="yes" xml:space="preserve">
          <source>If you open a browser and navigate to the browsable API at the moment, you'll find that you're no longer able to create new code snippets. In order to do so we'd need to be able to login as a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef58e0a6ead2efd033939b9c18cf179b9663eb2" translate="yes" xml:space="preserve">
          <source>If you require a dynamic schema, because foreign key choices depend on database values, for example, you can route a &lt;code&gt;SchemaView&lt;/code&gt; that will generate and serve your schema on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ba50d5d28a006dcfa2308b4c1218373f266101" translate="yes" xml:space="preserve">
          <source>If you require more complex hyperlinked representation you'll need to customize the field, as described in the &lt;a href=&quot;#custom-hyperlinked-fields&quot;&gt;custom hyperlinked fields&lt;/a&gt; section, below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62931f75a212ef99143230cc51ef5223a8140c2" translate="yes" xml:space="preserve">
          <source>If you underspecify the renderer's media type, you should make sure to specify the media type explicitly when you return the response, using the &lt;code&gt;content_type&lt;/code&gt; attribute. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d523f4713786d610ed5e517180bc944f2fdb056" translate="yes" xml:space="preserve">
          <source>If you want every user to have an automatically generated Token, you can simply catch the User's &lt;code&gt;post_save&lt;/code&gt; signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488cc5b736975a6cf1f5a67ec43e6abb7097c101" translate="yes" xml:space="preserve">
          <source>If you want the date field to be entirely hidden from the user, then use &lt;code&gt;HiddenField&lt;/code&gt;. This field type does not accept user input, but instead always returns its default value to the &lt;code&gt;validated_data&lt;/code&gt; in the serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d10cdd2d206d475f23bceadfd0b25cfd29dc4a4" translate="yes" xml:space="preserve">
          <source>If you want the date field to be visible, but not editable by the user, then set &lt;code&gt;read_only=True&lt;/code&gt; and additionally set a &lt;code&gt;default=...&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622139648192d13f7f74beebf0f159b8c902e01e" translate="yes" xml:space="preserve">
          <source>If you want the date field to be writable the only thing worth noting is that you should ensure that it is always available in the input data, either by setting a &lt;code&gt;default&lt;/code&gt; argument, or by setting &lt;code&gt;required=True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d01a7350106c6ba50b1c53296d61e751e7597e" translate="yes" xml:space="preserve">
          <source>If you want to also support &lt;code&gt;.save()&lt;/code&gt; you'll need to also implement either or both of the &lt;code&gt;.create()&lt;/code&gt; and &lt;code&gt;.update()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0419b40ffb675cd9b0244abd6a1d34be05f3038b" translate="yes" xml:space="preserve">
          <source>If you want to create a custom field, you'll need to subclass &lt;code&gt;Field&lt;/code&gt; and then override either one or both of the &lt;code&gt;.to_representation()&lt;/code&gt; and &lt;code&gt;.to_internal_value()&lt;/code&gt; methods. These two methods are used to convert between the initial datatype, and a primitive, serializable datatype. Primitive datatypes will typically be any of a number, string, boolean, &lt;code&gt;date&lt;/code&gt;/&lt;code&gt;time&lt;/code&gt;/&lt;code&gt;datetime&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;. They may also be any list or dictionary like object that only contains other primitive objects. Other types might be supported, depending on the renderer that you are using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e035ba4436d6e1b849f87efde28ced8cff6b915" translate="yes" xml:space="preserve">
          <source>If you want to customize the way the serialization is done you'll need to define the field yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4626c9cb05dae5171d93c4a08e8ed6c564c30395" translate="yes" xml:space="preserve">
          <source>If you want to get a more in depth understanding of how REST framework fits together head on over to &lt;a href=&quot;../1-serialization/index&quot;&gt;the tutorial&lt;/a&gt;, or start browsing the &lt;a href=&quot;../index#api-guide&quot;&gt;API guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f31550f4d2279789e5f2fd04bed881956869bd8" translate="yes" xml:space="preserve">
          <source>If you want to implement a read-write relational field, you must also implement the &lt;code&gt;.to_internal_value(self, data)&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8170d3b2076f134333ab7c374c3392b7dc2691ea" translate="yes" xml:space="preserve">
          <source>If you want to modify particular aspects of the pagination style, you'll want to override one of the pagination classes, and set the attributes that you want to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ad6b83208b32a7961d8a34c236c0a8b24207b0" translate="yes" xml:space="preserve">
          <source>If you want to override this behavior, you'll need to declare the &lt;code&gt;DateTimeField&lt;/code&gt; explicitly on the serializer. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac8c97d6dc0ef008d46c605962467da9a0ee03b" translate="yes" xml:space="preserve">
          <source>If you want to provide a custom metadata class you should override &lt;code&gt;BaseMetadata&lt;/code&gt; and implement the &lt;code&gt;determine_metadata(self, request, view)&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8976cc57fd793cfba0cca6d584d869e3009ab81d" translate="yes" xml:space="preserve">
          <source>If you want to provide totally custom behavior, you can override &lt;code&gt;BaseRouter&lt;/code&gt; and override the &lt;code&gt;get_urls(self)&lt;/code&gt; method. The method should inspect the registered viewsets and return a list of URL patterns. The registered prefix, viewset and basename tuples may be inspected by accessing the &lt;code&gt;self.registry&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94400d66bae1a3c96f58c4ee1025684c9dc596b" translate="yes" xml:space="preserve">
          <source>If you want to serialize a generic foreign key, you need to define a custom field, to determine explicitly how you want to serialize the targets of the relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbeb3c4da0f719e73015962b208ad964d57cc356" translate="yes" xml:space="preserve">
          <source>If you want to support a writable hyperlinked field then you'll also want to override &lt;code&gt;get_object&lt;/code&gt;, in order to map incoming URLs back to the object they represent. For read-only hyperlinked fields there is no need to override this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55cde9d25686c3cab0d280e25e0e955dee19cef" translate="yes" xml:space="preserve">
          <source>If you wish to provide a base &lt;code&gt;AutoSchema&lt;/code&gt; subclass to be used throughout your project you may adjust &lt;code&gt;settings.DEFAULT_SCHEMA_CLASS&lt;/code&gt; appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efa6b8856eeac89e4ebd728c3b85133b29d4b14" translate="yes" xml:space="preserve">
          <source>If you wish to represent &lt;a href=&quot;https://docs.djangoproject.com/en/2.2/topics/db/models/#intermediary-manytomany&quot;&gt;extra fields on a through model&lt;/a&gt; then you may serialize the through model as &lt;a href=&quot;../serializers/index#dealing-with-nested-objects&quot;&gt;a nested object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121d74de94f90a6e55cb3eaf718b63863a44ede4" translate="yes" xml:space="preserve">
          <source>If you wish to use the provided permission classes in order to check object permissions, &lt;strong&gt;you must&lt;/strong&gt; subclass them and implement the &lt;code&gt;has_object_permission()&lt;/code&gt; method described in the &lt;a href=&quot;#custom-permissions&quot;&gt;&lt;em&gt;Custom permissions&lt;/em&gt;&lt;/a&gt; section (below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d538a335f62aaaf9bf21bfdad68adf89867a1a" translate="yes" xml:space="preserve">
          <source>If you're building websites that use &lt;code&gt;TemplateHTMLRenderer&lt;/code&gt; along with other renderer classes, you should consider listing &lt;code&gt;TemplateHTMLRenderer&lt;/code&gt; as the first class in the &lt;code&gt;renderer_classes&lt;/code&gt; list, so that it will be prioritised first even for browsers that send poorly formed &lt;code&gt;ACCEPT:&lt;/code&gt; headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a7ff5c68d9c2713c8f429e41b246ef58a8399d" translate="yes" xml:space="preserve">
          <source>If you're doing REST-based web service stuff ... you should ignore request.POST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7935da2f03c68f04e504051cf1ad4631de53b628" translate="yes" xml:space="preserve">
          <source>If you're intending to use the browsable API you'll probably also want to add REST framework's login and logout views. Add the following to your root &lt;code&gt;urls.py&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4052e38c99e221e5181ae64b99933444efe61e3a" translate="yes" xml:space="preserve">
          <source>If you're not sure exactly what behavior a &lt;code&gt;ModelSerializer&lt;/code&gt; class will generate it is usually a good idea to run &lt;code&gt;manage.py shell&lt;/code&gt;, and print an instance of the serializer, so that you can inspect the fields and validators that it automatically generates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2de65e8db5b6c6fb45472a424e7f8e37bb6ab6" translate="yes" xml:space="preserve">
          <source>If you're supporting writable nested representations you'll need to write &lt;code&gt;.create()&lt;/code&gt; or &lt;code&gt;.update()&lt;/code&gt; methods that handle saving multiple objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da35dbb332c7350e63b23109d8e331a35d4be2c" translate="yes" xml:space="preserve">
          <source>If you're testing views directly using &lt;code&gt;APIRequestFactory&lt;/code&gt;, the responses that are returned will not yet be rendered, as rendering of template responses is performed by Django's internal request-response cycle. In order to access &lt;code&gt;response.content&lt;/code&gt;, you'll first need to render the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96450688e3b933e7655e448f1f504949067a9099" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;RequestsClient&lt;/code&gt; you'll want to ensure that test setup, and results assertions are performed as regular API calls, rather than interacting with the database models directly. For example, rather than checking that &lt;code&gt;Customer.objects.count() == 3&lt;/code&gt; you would list the customers endpoint, and ensure that it contains three records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8974e734dd298d0429cdbe52c8be482cbc0816" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;SessionAuthentication&lt;/code&gt; then you'll need to include a CSRF token for any &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d8387c865010e963bcac67fae75632b6d8dca64" translate="yes" xml:space="preserve">
          <source>If you're using an AJAX style API with SessionAuthentication, you'll need to make sure you include a valid CSRF token for any &quot;unsafe&quot; HTTP method calls, such as &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; requests. See the &lt;a href=&quot;https://docs.djangoproject.com/en/stable/ref/csrf/#ajax&quot;&gt;Django CSRF documentation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a760b5589c367ecb5c3b0c10b8a78049091cc2" translate="yes" xml:space="preserve">
          <source>If you're using either the &lt;code&gt;TemplateHTMLRenderer&lt;/code&gt; or the &lt;code&gt;StaticHTMLRenderer&lt;/code&gt; and an exception is raised, the behavior is slightly different, and mirrors &lt;a href=&quot;https://docs.djangoproject.com/en/stable/topics/http/views/#customizing-error-views&quot;&gt;Django's default handling of error views&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f25723e9d2f21201851ff90a0193e43a1dfaa73" translate="yes" xml:space="preserve">
          <source>If you're using this permission with a view that uses an overridden &lt;code&gt;get_queryset()&lt;/code&gt; method there may not be a &lt;code&gt;queryset&lt;/code&gt; attribute on the view. In this case we suggest also marking the view with a sentinel queryset, so that this class can determine the required permissions. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b114c70dadf43ea19c909b13cdbb226f29928f80" translate="yes" xml:space="preserve">
          <source>If you're working through the browser, make sure to login using the control in the top right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f68c2ff896f7205535585c68a16109f13ff946" translate="yes" xml:space="preserve">
          <source>If you're writing your own views and want to enforce object level permissions, or if you override the &lt;code&gt;get_object&lt;/code&gt; method on a generic view, then you'll need to explicitly call the &lt;code&gt;.check_object_permissions(request, obj)&lt;/code&gt; method on the view at the point at which you've retrieved the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02cf87af64d52b56dd63e57361d8a3957bedd21d" translate="yes" xml:space="preserve">
          <source>If you've already created some users, you can generate tokens for all existing users like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36110577cb7130f7ef619388e2f57f40d59ec41d" translate="yes" xml:space="preserve">
          <source>If your API includes views that can serve both regular webpages and API responses depending on the request, then you might consider making &lt;code&gt;TemplateHTMLRenderer&lt;/code&gt; your default renderer, in order to play nicely with older browsers that send &lt;a href=&quot;http://www.gethifi.com/blog/browser-rest-http-accept-headers&quot;&gt;broken accept headers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e09ba0d2da866d07d99a56e32aba9c797410c90" translate="yes" xml:space="preserve">
          <source>If your object instances correspond to Django models you'll also want to ensure that these methods save the object to the database. For example, if &lt;code&gt;Comment&lt;/code&gt; was a Django model, the methods might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b79c4e7b7e210bf9af47e42cb273de14d5315e3" translate="yes" xml:space="preserve">
          <source>If your schema is static, you can use the &lt;code&gt;generateschema&lt;/code&gt; management command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51727e0970476599cc11a6f111af47ba8dae38a4" translate="yes" xml:space="preserve">
          <source>If your versioning scheme is based on the request URL, you will also want to alter how versioned URLs are determined. In order to do so you should override the &lt;code&gt;.reverse()&lt;/code&gt; method on the class. See the source code for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0f94b7f1d42cba194b2fd041fdea054d7a065e" translate="yes" xml:space="preserve">
          <source>Ignore the data and leave the instance as it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c28397128d45ca02c4c7d754d1b076c2fee261" translate="yes" xml:space="preserve">
          <source>ImageField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9168902583606b20f546445aec86f82111b91551" translate="yes" xml:space="preserve">
          <source>Implementing a custom router isn't something you'd need to do very often, but it can be useful if you have specific requirements about how the URLs for your API are structured. Doing so allows you to encapsulate the URL structure in a reusable way that ensures you don't have to write your URL patterns explicitly for each new view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5294487792e6db8e814bc0dd08dafb9579d9acb6" translate="yes" xml:space="preserve">
          <source>Improving serialization performance for a frequently accessed API endpoint that returns lots of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc0a557b253ef4474f0872ece9d2330715709ea" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../3-class-based-views/index&quot;&gt;tutorial part 3&lt;/a&gt;, we'll start using class-based views, and see how generic views reduce the amount of code we need to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de8f8eece72c42e8ef0595499605c9085caae1e" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../5-relationships-and-hyperlinked-apis/index&quot;&gt;part 5&lt;/a&gt; of the tutorial we'll look at how we can tie everything together by creating an HTML endpoint for our highlighted snippets, and improve the cohesion of our API by using hyperlinking for the relationships within the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8a7bb6e248ab63a50f973c06988804e6bfff7e" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../6-viewsets-and-routers/index&quot;&gt;part 6&lt;/a&gt; of the tutorial we'll look at how we can use ViewSets and Routers to reduce the amount of code we need to build our API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85da5b3f3c33e72a5a4088dab60e816853affd51" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&quot;&gt;the words of Roy Fielding&lt;/a&gt;, &quot;A REST API should spend almost all of its descriptive effort in defining the media type(s) used for representing resources and driving application state, or in defining extended relation names and/or hypertext-enabled mark-up for existing standard media types.&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3364cd64fae1b8e22888f013dc5fa0677045eb0e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;urls.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1c22599e7c1055ba9b4e95fccaa142383c7273" translate="yes" xml:space="preserve">
          <source>In another terminal window, we can test the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f30eedd1f26ff249bc872a0f68b5d92734a45a7" translate="yes" xml:space="preserve">
          <source>In case you want to regenerate the token (for example if it has been compromised or leaked) you can pass an additional parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f868a50ed70044bf1e515be92cd9e9223eba4732" translate="yes" xml:space="preserve">
          <source>In cases where the cutoff is being enforced you may want to instead use a plain input field in the HTML form. You can do so using the &lt;code&gt;style&lt;/code&gt; keyword argument. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688533119976ed4519c058b9b0bea5d2e6f431b9" translate="yes" xml:space="preserve">
          <source>In compiling the schema, &lt;code&gt;SchemaGenerator&lt;/code&gt; calls &lt;code&gt;view.schema.get_operation()&lt;/code&gt; for each view, allowed method, and path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9973c8a9c430982a53f9d763a0d2e6ca01b4afd4" translate="yes" xml:space="preserve">
          <source>In each case, REST framework will return a response with an appropriate status code and content-type. The body of the response will include any additional details regarding the nature of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f864bfceecefc2ce1db9c676440074218c92aa6d" translate="yes" xml:space="preserve">
          <source>In most cases the error detail will be a simple item:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0690e51d2227d8a2fdd9b2d54589edb7a8564bfb" translate="yes" xml:space="preserve">
          <source>In order to alter the style of the response, you could write the following custom exception handler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b851f37b5fe52e602dd164cfa9728452d7a148" translate="yes" xml:space="preserve">
          <source>In order to customise the operation generation, you should provide an &lt;code&gt;AutoSchema&lt;/code&gt; subclass, overriding &lt;code&gt;get_operation()&lt;/code&gt; as you need:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57311f27d476b7265fe4d5be1f0c009f48ebf09b" translate="yes" xml:space="preserve">
          <source>In order to customize the top-level schema sublass &lt;code&gt;rest_framework.schemas.openapi.SchemaGenerator&lt;/code&gt; and provide it as an argument to the &lt;code&gt;generateschema&lt;/code&gt; command or &lt;code&gt;get_schema_view()&lt;/code&gt; helper function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e046c00a4bea26c59a2cddcea0839625c85f94e1" translate="yes" xml:space="preserve">
          <source>In order to explain the various types of relational fields, we'll use a couple of simple models for our examples. Our models will be for music albums, and the tracks listed on each album.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98f4cb080ce59cee3f4d1e0f3cbdd3adf407d47" translate="yes" xml:space="preserve">
          <source>In order to use a &lt;code&gt;GenericViewSet&lt;/code&gt; class you'll override the class and either mixin the required mixin classes, or define the action implementations explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af114e7501515d97ddfee42bc5614300bf12286" translate="yes" xml:space="preserve">
          <source>In rare cases where none of the existing relational styles fit the representation you need, you can implement a completely custom relational field, that describes exactly how the output representation should be generated from the model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe0be8c16eefaae47bb1667e8cbcb0bbec08c72" translate="yes" xml:space="preserve">
          <source>In some advanced cases you might want a validator to be passed the serializer field it is being used with as additional context. You can do so by declaring a &lt;code&gt;set_context&lt;/code&gt; method on a class-based validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb1776dbdcb2d0ba2a0cc302579c4a2b382fba6" translate="yes" xml:space="preserve">
          <source>In some cases the &lt;code&gt;.create()&lt;/code&gt; and &lt;code&gt;.update()&lt;/code&gt; method names may not be meaningful. For example, in a contact form we may not be creating new instances, but instead sending an email or other message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14c92e31d1575bd150457de53bf7a6a7f39efd6" translate="yes" xml:space="preserve">
          <source>In some cases you may also want to set the &lt;code&gt;render_style&lt;/code&gt; attribute to &lt;code&gt;'binary'&lt;/code&gt;. Doing so will also ensure that the browsable API will not attempt to display the binary content as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926943bfc0cfbfb0841944f2962bcc3adb5ce7e7" translate="yes" xml:space="preserve">
          <source>In some cases you may need to customize the behavior of a hyperlinked field, in order to represent URLs that require more than a single lookup field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882e2cc9e1a6bb355f77c0dc5b9abececa3cb487" translate="yes" xml:space="preserve">
          <source>In some cases you might want a renderer to serve a range of media types. In this case you can underspecify the media types it should respond to, by using a &lt;code&gt;media_type&lt;/code&gt; value such as &lt;code&gt;image/*&lt;/code&gt;, or &lt;code&gt;*/*&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acd91baffe82b2a23eab3a33126d2e9e49cedab" translate="yes" xml:space="preserve">
          <source>In some cases you might want your view to use different serialization styles depending on the accepted media type. If you need to do this you can access &lt;code&gt;request.accepted_renderer&lt;/code&gt; to determine the negotiated renderer that will be used for the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad116876b849eeab46ccdb1e9c9094a5abe38fe" translate="yes" xml:space="preserve">
          <source>In some circumstances instead of returning &lt;code&gt;None&lt;/code&gt;, you may want to raise an &lt;code&gt;AuthenticationFailed&lt;/code&gt; exception from the &lt;code&gt;.authenticate()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6a9e5885d07ae5d127e72fb4bc3247ec2bb6ba" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;snippets/urls.py&lt;/code&gt; file we bind our &lt;code&gt;ViewSet&lt;/code&gt; classes into a set of concrete views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f906f6840d5ff34c1d10c0bfe79d8643b361ccb" translate="yes" xml:space="preserve">
          <source>In the case of update operations on &lt;em&gt;nested&lt;/em&gt; serializers there's no way of applying this exclusion, because the instance is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb423586dbd035b1048e62867b192b688b3ccbb7" translate="yes" xml:space="preserve">
          <source>In the case of validation errors the error detail will be either a list or dictionary of items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1e635e26c7d6065e21e8ef27f2945f1c9e176d" translate="yes" xml:space="preserve">
          <source>In the example above, if the &lt;code&gt;Account&lt;/code&gt; model had 3 fields &lt;code&gt;account_name&lt;/code&gt;, &lt;code&gt;users&lt;/code&gt;, and &lt;code&gt;created&lt;/code&gt;, this will result in the fields &lt;code&gt;account_name&lt;/code&gt; and &lt;code&gt;created&lt;/code&gt; to be serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f542bf2493c8e0135b33b0bfe2571e93f8970518" translate="yes" xml:space="preserve">
          <source>In the example request above &lt;code&gt;request.version&lt;/code&gt; attribute would return the string &lt;code&gt;'1.0'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c4b78667cc70007d5c10c4be0ca2b76d18295f" translate="yes" xml:space="preserve">
          <source>In the following example we're giving a set of views two different possible URL prefixes, each under a different namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107235d1e1d5a96c3661309001d0afc11a168864" translate="yes" xml:space="preserve">
          <source>In the same way that Django provides both &lt;code&gt;Form&lt;/code&gt; classes and &lt;code&gt;ModelForm&lt;/code&gt; classes, REST framework includes both &lt;code&gt;Serializer&lt;/code&gt; classes, and &lt;code&gt;ModelSerializer&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2129aca9c3d44aa8a2ebc9624d02a6720fb70c72" translate="yes" xml:space="preserve">
          <source>In the snippets app, create a new file, &lt;code&gt;permissions.py&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f7bc65c0d9f00de0e2c6cd61ee137b474e9321" translate="yes" xml:space="preserve">
          <source>In these cases you may want to disable the automatically generated validators, by specifying an empty list for the serializer &lt;code&gt;Meta.validators&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a05d73c2e5da0f0bb110c4f1c6bbabe4f5b4cd" translate="yes" xml:space="preserve">
          <source>In these cases you might instead choose to override &lt;code&gt;.save()&lt;/code&gt; directly, as being more readable and meaningful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a5058e9c9ef5b7664a86d8c25bab74ae0b457c" translate="yes" xml:space="preserve">
          <source>In this case we'd like to use a hyperlinked style between entities. In order to do so, we'll modify our serializers to extend &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; instead of the existing &lt;code&gt;ModelSerializer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e5ae9773c8a52ac3d36cac41c890c92aa13313" translate="yes" xml:space="preserve">
          <source>In this case we'd need to override &lt;code&gt;HyperlinkedRelatedField&lt;/code&gt; to get the behavior we want:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04763f433f28f252a1b876810bb8b3935379597" translate="yes" xml:space="preserve">
          <source>In this case you will typically need to exclude the validator from the serializer class, and instead write any validation logic explicitly, either in the &lt;code&gt;.validate()&lt;/code&gt; method, or else in the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8320315a47d9cbe21c22ae41e640144d3f06735b" translate="yes" xml:space="preserve">
          <source>In version 2.x a serializer class could &lt;em&gt;sometimes&lt;/em&gt; automatically determine the &lt;code&gt;queryset&lt;/code&gt; argument &lt;em&gt;if&lt;/em&gt; a &lt;code&gt;ModelSerializer&lt;/code&gt; class was being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b8c8d42f5b8e256d00c4aebc7ccebd1ff12920c" translate="yes" xml:space="preserve">
          <source>Including extra context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f346ab5bc9c3fa0be9e75578b5816c77b44b7c4" translate="yes" xml:space="preserve">
          <source>Incoming requests will be authenticated and appropriate permission and/or throttle checks will be run before dispatching the request to the handler method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12364b5b5d2f31b2c1099d4758a14eb4dc5de9a" translate="yes" xml:space="preserve">
          <source>Individual fields on a serializer can include validators, by declaring them on the field instance, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2143d2136bd9fbc7eb18e9ae008dc90e8385bee6" translate="yes" xml:space="preserve">
          <source>Informational - 1xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41b358a4c095820b6c556cf6de2b0c04588535e" translate="yes" xml:space="preserve">
          <source>Inspecting API exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4592d1f9d969d8eceacc50bfd757e6ceaae65efd" translate="yes" xml:space="preserve">
          <source>Inspecting a ModelSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64619cf619624bae08d9d31b0e70e8d5e596c4c9" translate="yes" xml:space="preserve">
          <source>Inspecting relationships.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e835725b6125565d12f7824bc34a014d64086b" translate="yes" xml:space="preserve">
          <source>Install pyyaml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2120cad4e5cffc3226a84f09c6063e015255f999" translate="yes" xml:space="preserve">
          <source>Install the package using &lt;code&gt;pip&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0b2568b224aff08e3aa258c4a9194ca2eb8559" translate="yes" xml:space="preserve">
          <source>Install using &lt;code&gt;pip&lt;/code&gt;, including any optional packages you want...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c5130dc01ae5a68649c4c7875710fa111dac26" translate="yes" xml:space="preserve">
          <source>Install using &lt;code&gt;pip&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d745af040cceeaad04052e841f5ff1f88160a150" translate="yes" xml:space="preserve">
          <source>Install using pip.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9989f58a9680ff093212d449bc5902f3eb524e9a" translate="yes" xml:space="preserve">
          <source>Installation &amp;amp; configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68dcfc2bb18731e2f5aa2801838ca10c0c6581ad" translate="yes" xml:space="preserve">
          <source>Instead of inspecting the result of parsing &lt;code&gt;response.content&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd26b7fc927ba085e48699fd298e298bcd7e8a1" translate="yes" xml:space="preserve">
          <source>Instead of using a concrete generic view, we'll use the base class for representing instances, and create our own &lt;code&gt;.get()&lt;/code&gt; method. In your &lt;code&gt;snippets/views.py&lt;/code&gt; add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fb196fa9650404b51b0c6a0b9643dbf491b236" translate="yes" xml:space="preserve">
          <source>IntegerField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e148dadf58575cb6f6118313b7b04fcf7879e178" translate="yes" xml:space="preserve">
          <source>Introspecting ViewSet actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f90db5206b386352deca0deeae6be2f37571a9f" translate="yes" xml:space="preserve">
          <source>IsAdminUser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e9992bcd26b461360322d36ea3ccdb55d3b7ae" translate="yes" xml:space="preserve">
          <source>IsAuthenticated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bac6d6b563dfa1457b257c5ca2ed2e20cc6af8d" translate="yes" xml:space="preserve">
          <source>IsAuthenticatedOrReadOnly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dc5f7f1837f2f64debfabc5adaa110f2dd45b1" translate="yes" xml:space="preserve">
          <source>It does not include the &lt;code&gt;id&lt;/code&gt; field by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c34a887521bad612d381ca00050ac39c8cd775" translate="yes" xml:space="preserve">
          <source>It includes a &lt;code&gt;url&lt;/code&gt; field, using &lt;code&gt;HyperlinkedIdentityField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bea45bade3d72a23e4f26688912e87156ba1f60" translate="yes" xml:space="preserve">
          <source>It includes all parsed content, including &lt;em&gt;file and non-file&lt;/em&gt; inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848942a5dc93884052d898f7df64a14574bcf2db" translate="yes" xml:space="preserve">
          <source>It includes simple default implementations of &lt;code&gt;.create()&lt;/code&gt; and &lt;code&gt;.update()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b743c47ecf8dc2e6158ebd132102a55e4b46a34" translate="yes" xml:space="preserve">
          <source>It introduces a proper separation of concerns, making your code behavior more obvious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fdf7c8b8b10a161e613e7c4a6c2d8ba4be3291" translate="yes" xml:space="preserve">
          <source>It is actually a misconception. For example, take the following quote from Roy Fielding discussing the relative merits of query parameter media-type indicators vs. file extension media-type indicators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732410e0431137bbc4d1be9387c6072cdbfe33fe" translate="yes" xml:space="preserve">
          <source>It is also possible to create Tokens manually through admin interface. In case you are using a large user base, we recommend that you monkey patch the &lt;code&gt;TokenAdmin&lt;/code&gt; class to customize it to your needs, more specifically by declaring the &lt;code&gt;user&lt;/code&gt; field as &lt;code&gt;raw_field&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a4ce5b755df95fd216fa76d706f82139b1e0d2" translate="yes" xml:space="preserve">
          <source>It is easy to switch between using shortcut &lt;code&gt;ModelSerializer&lt;/code&gt; classes and using explicit &lt;code&gt;Serializer&lt;/code&gt; classes. Any validation behavior being used for &lt;code&gt;ModelSerializer&lt;/code&gt; is simple to replicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765d0dbfe0c1979a6e47885d4c9ff2505c88ce21" translate="yes" xml:space="preserve">
          <source>It is important to understand that if you configure the &lt;code&gt;NUM_PROXIES&lt;/code&gt; setting, then all clients behind a unique &lt;a href=&quot;https://en.wikipedia.org/wiki/Network_address_translation&quot;&gt;NAT'd&lt;/a&gt; gateway will be treated as a single client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ceaeeeda5a1657b4451ce1f5f5498584ed46840" translate="yes" xml:space="preserve">
          <source>It is possible that a third party package may be included alongside the 3.1 release that provides some automatic support for multiple update operations, similar to the &lt;code&gt;allow_add_remove&lt;/code&gt; behavior that was present in REST framework 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc018e0a231d09bbbb8ae48ea1a2ce74b0af12f" translate="yes" xml:space="preserve">
          <source>It leaves less work for your API clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d528f44c7eb011c7074f4471accbb62a582cc7eb" translate="yes" xml:space="preserve">
          <source>It makes it easy to do things like markup HTML representations with hyperlinks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7fcfc1b9092f8f4f9f5d909e83eccf70a8154c" translate="yes" xml:space="preserve">
          <source>It may look unusual that the application has been created within the project directory. Using the project's namespace avoids name clashes with external modules (a topic that goes outside the scope of the quickstart).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d3f7629ce94cafab1adf298950509e71d57a2c" translate="yes" xml:space="preserve">
          <source>It supports REST framework's flexible request parsing, rather than just supporting form data. For example you can handle incoming JSON data in the same way that you handle incoming form data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5550a262c3a6dc5adc02419121eef0532b3f36d5" translate="yes" xml:space="preserve">
          <source>It supports parsing the content of HTTP methods other than &lt;code&gt;POST&lt;/code&gt;, meaning that you can access the content of &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;PATCH&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0216659a21aa3c8864c201b56915e5c8b1355d25" translate="yes" xml:space="preserve">
          <source>It takes a single argument, which is the default value or callable that should be used during create operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73ca6b5820dbd1d34dabe69681f867975dc08a3" translate="yes" xml:space="preserve">
          <source>It will automatically generate a set of fields for you, based on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4f16a93007447aded60f763defd492b8ea5191" translate="yes" xml:space="preserve">
          <source>It will automatically generate validators for the serializer, such as unique_together validators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00faa120a59687d5cfacd633db612d462d80f79" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to declaratively remove a &lt;code&gt;Field&lt;/code&gt; inherited from a parent class by setting the name to be &lt;code&gt;None&lt;/code&gt; on the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4bc6b7140224f7325e781dc5ffcc92230f1baa" translate="yes" xml:space="preserve">
          <source>It's important to remember that &lt;code&gt;ModelSerializer&lt;/code&gt; classes don't do anything particularly magical, they are simply a shortcut for creating serializer classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc441de95978246488d276533176f33b09b12a00" translate="yes" xml:space="preserve">
          <source>It's important when specifying the renderer classes for your API to think about what priority you want to assign to each media type. If a client underspecifies the representations it can accept, such as sending an &lt;code&gt;Accept: */*&lt;/code&gt; header, or not including an &lt;code&gt;Accept&lt;/code&gt; header at all, then REST framework will select the first renderer in the list to use for the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef0da00280978aa509333261e0fcd736ce5b717" translate="yes" xml:space="preserve">
          <source>It's more explicit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1802461a9236aa400c0aeb3c587dfe188ec8d4c" translate="yes" xml:space="preserve">
          <source>It's recommended that you explicitly specify which fields the API should allowing in the ordering filter. You can do this by setting an &lt;code&gt;ordering_fields&lt;/code&gt; attribute on the view, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="119f7caa9a491e936157659c5a10864373a6cded" translate="yes" xml:space="preserve">
          <source>It's simple to create a read-only serializer for converting &lt;code&gt;HighScore&lt;/code&gt; instances into primitive data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd520dda2a94c71334a309ef953a11ec9a542392" translate="yes" xml:space="preserve">
          <source>It's unlikely that you'll want to provide a custom content negotiation scheme for REST framework, but you can do so if needed. To implement a custom content negotiation scheme override &lt;code&gt;BaseContentNegotiation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0585b992d7aac528ea76ea1406db45df4c7284a" translate="yes" xml:space="preserve">
          <source>It's worth noting that there are a couple of edge cases we're not dealing with properly at the moment. If we send malformed &lt;code&gt;json&lt;/code&gt;, or if a request is made with a method that the view doesn't handle, then we'll end up with a 500 &quot;server error&quot; response. Still, this'll do for now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de01153545640ea8f5d8eaea7a3207925bd7c514" translate="yes" xml:space="preserve">
          <source>JSON Web Token Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5edfecd4fdbf652b383452f8a775274f059ce02d" translate="yes" xml:space="preserve">
          <source>JSON Web Token is a fairly new standard which can be used for token-based authentication. Unlike the built-in TokenAuthentication scheme, JWT Authentication doesn't need to use a database to validate a token. A package for JWT authentication is &lt;a href=&quot;https://github.com/davesque/django-rest-framework-simplejwt&quot;&gt;djangorestframework-simplejwt&lt;/a&gt; which provides some features as well as a pluggable token blacklist app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59a6d4cc2a97dda0c89bb441b49907b8b863025" translate="yes" xml:space="preserve">
          <source>JSONField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c6036ddd5d662bc456c530699d3704be7c5087" translate="yes" xml:space="preserve">
          <source>JSONP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0216a4980b579f083b25149b2468bf86428d5ea" translate="yes" xml:space="preserve">
          <source>JSONParser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e353c458a12d999f0d4bbdbc6b1f599beaf87bfb" translate="yes" xml:space="preserve">
          <source>JSONRenderer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ed5fa6126220d08ec26a8ab40e35372a119750" translate="yes" xml:space="preserve">
          <source>Kloudless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a9de65b78abbad1f3ee6660e9e4fe36f4edfd2" translate="yes" xml:space="preserve">
          <source>LaTeX</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11430d6f172fc621cd992f45612278cf16c8aa09" translate="yes" xml:space="preserve">
          <source>Let's define a simple viewset that can be used to list or retrieve all the users in the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904c7e7fca08b12e4673be616da85008f5d57be2" translate="yes" xml:space="preserve">
          <source>Let's look at an example of serializing a class that represents an RGB color value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b021bbe30818830a821ac55bafbb1c1571396d1" translate="yes" xml:space="preserve">
          <source>Let's look at refactoring our serializer using the &lt;code&gt;ModelSerializer&lt;/code&gt; class. Open the file &lt;code&gt;snippets/serializers.py&lt;/code&gt; again, and replace the &lt;code&gt;SnippetSerializer&lt;/code&gt; class with the following.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c29164e15ed47e4db7894d7c02c38030e9d458f" translate="yes" xml:space="preserve">
          <source>Let's see how we can write some API views using our new Serializer class. For the moment we won't use any of REST framework's other features, we'll just write the views as regular Django views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99abeb391f09e909850d3b0dbc590326de05f3f4" translate="yes" xml:space="preserve">
          <source>Let's start by creating a simple object we can use for example purposes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d9721cd9559d2d9305ad6bcdcdda65b8e07f9d" translate="yes" xml:space="preserve">
          <source>Let's take a look at a quick example of using REST framework to build a simple model-backed API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7793ad2e72fe9924c787f70e34650fefd2c1c1" translate="yes" xml:space="preserve">
          <source>Let's take a look at how we can compose the views by using the mixin classes. Here's our &lt;code&gt;views.py&lt;/code&gt; module again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff9884b7b6f5e3f9db79e7af0d777f74e824479" translate="yes" xml:space="preserve">
          <source>Let's take a look at the routes our &lt;code&gt;CustomReadOnlyRouter&lt;/code&gt; would generate for a simple viewset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c27de43434b3af87cc3340f2c9f8575f00c7a9" translate="yes" xml:space="preserve">
          <source>Let's take our current set of views, and refactor them into view sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5b2a062f05dd148b4ef24c76639416ebcc59f3" translate="yes" xml:space="preserve">
          <source>Licensed under the BSD License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a994ebc93a3a08ac2b67f2ffc76510f2752337d" translate="yes" xml:space="preserve">
          <source>Lights On Software</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0c1881eb0924053da3bf4e8a4d29372381a8a9" translate="yes" xml:space="preserve">
          <source>Like Django's &lt;code&gt;Model&lt;/code&gt; and &lt;code&gt;ModelForm&lt;/code&gt; classes, the inner &lt;code&gt;Meta&lt;/code&gt; class on serializers does not implicitly inherit from it's parents' inner &lt;code&gt;Meta&lt;/code&gt; classes. If you want the &lt;code&gt;Meta&lt;/code&gt; class to inherit from a parent class you must do so explicitly. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49bb913ebaff42e34187e6b996b8f137042426a8" translate="yes" xml:space="preserve">
          <source>LimitOffsetPagination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564341936ffd28cb7674aa7bacb111d57249566c" translate="yes" xml:space="preserve">
          <source>Limitations of object level permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6780b78279003920fe3e65b3f6a19861e8bd1d4" translate="yes" xml:space="preserve">
          <source>Limitations of validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ada30218e6b0f89d0863bbd7df583839e7d726" translate="yes" xml:space="preserve">
          <source>ListAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306b3858e49600466e6aaecd4cafaa6d8486def3" translate="yes" xml:space="preserve">
          <source>ListCreateAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0f9116c0ed8840cb05f3d2fc25a3fea1ab9b9e" translate="yes" xml:space="preserve">
          <source>ListField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ae9fad927530cbcad78bac97bf5bdad52b6dc7" translate="yes" xml:space="preserve">
          <source>ListModelMixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112bb50edf0e9bb2a9303eb000e2e1c872cb9371" translate="yes" xml:space="preserve">
          <source>ListSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b6116211dc49c00b6ba2813a65d0d500fbecde" translate="yes" xml:space="preserve">
          <source>Live tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a1b8d5b559559cb96805c720db5a2c866262b3" translate="yes" xml:space="preserve">
          <source>Load and render a template named &lt;code&gt;api_exception.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ebd4d8afb4cbc4c5512cf50d816bd9883eb8ac" translate="yes" xml:space="preserve">
          <source>Load and render a template named &lt;code&gt;{status_code}.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6d8a4a3d80f7a9a4b0fca3ddd96b0e94466abd" translate="yes" xml:space="preserve">
          <source>Low-level API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9266ae1b1357ffe2d4eca6b3b778ccd366b483e" translate="yes" xml:space="preserve">
          <source>Machine interacting web services tend to use more structured formats for sending data than form-encoded, since they're sending more complex data than simple forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bbf0c8455a5a154eb9129e7a6aefcde5a05680" translate="yes" xml:space="preserve">
          <source>Make sure to also import the &lt;code&gt;IsOwnerOrReadOnly&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cb51edcb9160aa934afb5528b72a9d8742f63a" translate="yes" xml:space="preserve">
          <source>Make sure to also import the &lt;code&gt;UserSerializer&lt;/code&gt; class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36af64091c8859d03f0c5912aa8c3e10b3dd9b4" translate="yes" xml:space="preserve">
          <source>Making requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44254034717706abf23be9d0434653cbc1faac1b" translate="yes" xml:space="preserve">
          <source>Making sure our URL patterns are named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c756fe270b8985d04c9262bc94e893aff0304bbf" translate="yes" xml:space="preserve">
          <source>ManyToManyFields with a Through Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79a1aab3a17bad65199969b61243102bd5e687c" translate="yes" xml:space="preserve">
          <source>Marking extra actions for routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600bfef1abe8d0e1c456a49fe2df4331ff112218" translate="yes" xml:space="preserve">
          <source>May be a list including the string &lt;code&gt;'iso-8601'&lt;/code&gt; or Python &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;strftime format&lt;/a&gt; strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a257cf42fc4b3eab836e1a8e71b59cda0cd5e5" translate="yes" xml:space="preserve">
          <source>May be any of &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;'iso-8601'&lt;/code&gt; or a Python &lt;a href=&quot;https://docs.python.org/3/library/time.html#time.strftime&quot;&gt;strftime format&lt;/a&gt; string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309fffea75df437c55dda938dc7fd0439c6e1453" translate="yes" xml:space="preserve">
          <source>May be overridden in order modify the representation style. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d232f33234b58abb0b97396f407734f3b5b4ee3f" translate="yes" xml:space="preserve">
          <source>May be overridden to provide dynamic behavior, such as returning a queryset, that is specific to the user making the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ed1eab7660c403df512f43c905cbff828fbcc1" translate="yes" xml:space="preserve">
          <source>May be overridden to provide dynamic behavior, such as using different serializers for read and write operations, or providing different serializers to different types of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be850c6ec715e588b1182f79c3859e9a098fbcf7" translate="yes" xml:space="preserve">
          <source>May be overridden to provide more complex behavior, such as object lookups based on more than one URL kwarg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb41efa58f7013d13e02f03e76223b230d5ba77c" translate="yes" xml:space="preserve">
          <source>May be set to a function or other callable, in which case the value will be evaluated each time it is used. When called, it will receive no arguments. If the callable has a &lt;code&gt;set_context&lt;/code&gt; method, that will be called each time before getting the value with the field instance as only argument. This works the same way as for &lt;a href=&quot;../validators/index#using-set_context&quot;&gt;validators&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55910840b646f30c3e90f59a7e53588f644254c" translate="yes" xml:space="preserve">
          <source>May raise a &lt;code&gt;NoReverseMatch&lt;/code&gt; if the &lt;code&gt;view_name&lt;/code&gt; and &lt;code&gt;lookup_field&lt;/code&gt; attributes are not configured to correctly match the URL conf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af53d2dce04c62e3e92af2c39cb841727b1e7e55" translate="yes" xml:space="preserve">
          <source>May raise an &lt;code&gt;ObjectDoesNotExist&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5201c043e16e7a0ac4f0e2a4a40238c3bd7da510" translate="yes" xml:space="preserve">
          <source>MessagePack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c409ac10f925f09e05ca03d4b4646dd99af196e5" translate="yes" xml:space="preserve">
          <source>MethodNotAllowed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98ad1d5db9150d3f175cf2295299e8b76c2f1d8" translate="yes" xml:space="preserve">
          <source>Methods which create a request body, such as &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt;, include a &lt;code&gt;format&lt;/code&gt; argument, which make it easy to generate requests using a content type other than multipart form data. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee13aed6dc4feb8283d2bed86ae043a77f90f953" translate="yes" xml:space="preserve">
          <source>Might receive an error response indicating that the &lt;code&gt;DELETE&lt;/code&gt; method is not allowed on that resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354cd645556020593b0ddc51a1a65ab7eec9acad" translate="yes" xml:space="preserve">
          <source>Miscellaneous fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4aefdba022099873bc3ea5cdff46a438a420e7" translate="yes" xml:space="preserve">
          <source>Miscellaneous settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d634308003ff858f289d2833f637dfc9bee3fc78" translate="yes" xml:space="preserve">
          <source>Mixins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c659d2c52e971112d67311c8e4477ec032d2d29" translate="yes" xml:space="preserve">
          <source>Model fields which have &lt;code&gt;editable=False&lt;/code&gt; set, and &lt;code&gt;AutoField&lt;/code&gt; fields will be set to read-only by default, and do not need to be added to the &lt;code&gt;read_only_fields&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20233b15ec4eaace9bf40b99efff28da318e72ea" translate="yes" xml:space="preserve">
          <source>ModelField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae71d93471d439d05478926f6c85bc2e8f036ab" translate="yes" xml:space="preserve">
          <source>ModelRouter (wq.db.rest)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc9d80ad7826b7154e0703775e6ea613d364fd9" translate="yes" xml:space="preserve">
          <source>ModelSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3122ab99af076e422932449b2acceea1dc9fbf92" translate="yes" xml:space="preserve">
          <source>ModelViewSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96bc5f21b84fdbac4fd25f909c04e8ae0a9ea0b" translate="yes" xml:space="preserve">
          <source>Modify your REST framework settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8bd2fd992ef312b6a60b9e2f786f7c96efb4e6" translate="yes" xml:space="preserve">
          <source>Modifying the &lt;code&gt;fields&lt;/code&gt; argument directly allows you to do interesting things such as changing the arguments on serializer fields at runtime, rather than at the point of declaring the serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af95d503f7be2b1c6564a54322423da9bf96027" translate="yes" xml:space="preserve">
          <source>Modifying the behavior slightly for an existing class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955a9ea46ba696b745329e3bffd1e76425d542d5" translate="yes" xml:space="preserve">
          <source>Modifying the pagination style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e9f2c4dc036e24692981311061267704d50098" translate="yes" xml:space="preserve">
          <source>MongoengineModelSerializer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a58a6d0d305d33b199ca24fb8798c0cc7d59598" translate="yes" xml:space="preserve">
          <source>More specific media types are given preference to less specific media types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb1418cf62c4fd295cddf0cf4a834a54c4dd9c4" translate="yes" xml:space="preserve">
          <source>Most error responses will include a key &lt;code&gt;detail&lt;/code&gt; in the body of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c67877584246667dd88bc3657b49471101da6b" translate="yes" xml:space="preserve">
          <source>Most of the time you're dealing with validation in REST framework you'll simply be relying on the default field validation, or writing explicit validation methods on serializer or field classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863384085f5473b735f70fd4eadebf806998987e" translate="yes" xml:space="preserve">
          <source>MultiPartParser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e4c356d6516eabadc165f884b2f2cff58442b0" translate="yes" xml:space="preserve">
          <source>MultiPartRenderer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eae13bc0896675231af763681ea0b1b10aedf8f" translate="yes" xml:space="preserve">
          <source>Multiple orderings may also be specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aedbdb9585b0330432b09edb3a1d29d4df6207d" translate="yes" xml:space="preserve">
          <source>Multiple throttles can also be used if you want to impose both burst throttling rates, and sustained throttling rates. For example, you might want to limit a user to a maximum of 60 requests per minute, and 1000 requests per day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d7245b8071be6e0d4ed5e5e25c51cb7557b63b" translate="yes" xml:space="preserve">
          <source>MultipleChoiceField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d7a5dc9af65279e928590272bbc3c5d16adf7e" translate="yes" xml:space="preserve">
          <source>NGINX (Restricting Access)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49004ae8ebb6e8eeccce26741f201d54cca5438f" translate="yes" xml:space="preserve">
          <source>NON_FIELD_ERRORS_KEY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47bdf59a4e98e24c8b152a477e9902db7ac2a25" translate="yes" xml:space="preserve">
          <source>NUM_PROXIES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7639c0dde3f513851856cfc2e086de94e2d9ec3e" translate="yes" xml:space="preserve">
          <source>NamespaceVersioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace851b6926724f1e5cb214cee9cf5d6e2a14f54" translate="yes" xml:space="preserve">
          <source>Namespaces are one honking great idea - let's do more of those!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021cfd32aa503c2616fa2414404cee36ba4b5847" translate="yes" xml:space="preserve">
          <source>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceaea2d81e75f0cf43b4cfd0d5f710806ad0dc77" translate="yes" xml:space="preserve">
          <source>Nested relationships</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d9c564782d961503e2b118d6d4fd59571ca0daa" translate="yes" xml:space="preserve">
          <source>Nested relationships can be expressed by using serializers as fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb73d4bd00e6a61f6ec08ef4896d393cb812093" translate="yes" xml:space="preserve">
          <source>Nesting the related entity inside the parent representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563c6c1a5c19f0811bbbf8613d1e0cb072569565" translate="yes" xml:space="preserve">
          <source>Next we'll move onto &lt;a href=&quot;../4-authentication-and-permissions/index&quot;&gt;part 4 of the tutorial&lt;/a&gt;, where we'll take a look at how we can deal with authentication and permissions for our API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95018ee5edec4492d349911b3b4d675c9fb34667" translate="yes" xml:space="preserve">
          <source>Next we're going to replace the &lt;code&gt;SnippetList&lt;/code&gt;, &lt;code&gt;SnippetDetail&lt;/code&gt; and &lt;code&gt;SnippetHighlight&lt;/code&gt; view classes. We can remove the three views, and again replace them with a single class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c905dba689783614e7cd8189d7380a8142bf699" translate="yes" xml:space="preserve">
          <source>Normal Python name resolution rules apply. If you have multiple base classes that declare a &lt;code&gt;Meta&lt;/code&gt; inner class, only the first one will be used. This means the child&amp;rsquo;s &lt;code&gt;Meta&lt;/code&gt;, if it exists, otherwise the &lt;code&gt;Meta&lt;/code&gt; of the first parent, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2b2ba443db2dceac1b295aa6fe8f27d2cdd2a2" translate="yes" xml:space="preserve">
          <source>Normally an error will be raised if &lt;code&gt;None&lt;/code&gt; is passed to a serializer field. Set this keyword argument to &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;None&lt;/code&gt; should be considered a valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfa88a4facfababc3dd2966348f27ac24f02da1" translate="yes" xml:space="preserve">
          <source>Normally an error will be raised if a field is not supplied during deserialization. Set to false if this field is not required to be present during deserialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01db10d7fe90908f5a77af80aa3dceb7126434c" translate="yes" xml:space="preserve">
          <source>Normally if a &lt;code&gt;ModelSerializer&lt;/code&gt; does not generate the fields you need by default then you should either add them to the class explicitly, or simply use a regular &lt;code&gt;Serializer&lt;/code&gt; class instead. However in some cases you may want to create a new base class that defines how the serializer fields are created for any given model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9938c294364da7574cb05e6594e42e34971069" translate="yes" xml:space="preserve">
          <source>NotAcceptable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8b6f2ee757b6c9e5df1167f887827ef9452eae" translate="yes" xml:space="preserve">
          <source>NotAuthenticated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f05e7cc9203f83829c08dcc46fafe9db426763f" translate="yes" xml:space="preserve">
          <source>NotFound</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a922bed6a458ec817e7586eeeca1baf25e44a5" translate="yes" xml:space="preserve">
          <source>Note however that upon removal of the &lt;code&gt;queryset&lt;/code&gt; property from your &lt;code&gt;ViewSet&lt;/code&gt;, any associated &lt;a href=&quot;../routers/index&quot;&gt;router&lt;/a&gt; will be unable to derive the basename of your Model automatically, and so you will have to specify the &lt;code&gt;basename&lt;/code&gt; kwarg as part of your &lt;a href=&quot;../routers/index&quot;&gt;router registration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975f0540cd60e834b13127b5d5fbe494caa1beb4" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;DjangoObjectPermissions&lt;/code&gt;&lt;strong&gt;does not&lt;/strong&gt; require the &lt;code&gt;django-guardian&lt;/code&gt; package, and should support other object-level backends equally well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90eff0cb4d0c7b580ecfbdece0b0f7b7aee83d68" translate="yes" xml:space="preserve">
          <source>Note that Django 2.1 removed the &lt;code&gt;blank&lt;/code&gt; kwarg from &lt;code&gt;models.BooleanField&lt;/code&gt;. Prior to Django 2.1 &lt;code&gt;models.BooleanField&lt;/code&gt; fields were always &lt;code&gt;blank=True&lt;/code&gt;. Thus since Django 2.1 default &lt;code&gt;serializers.BooleanField&lt;/code&gt; instances will be generated without the &lt;code&gt;required&lt;/code&gt; kwarg (i.e. equivalent to &lt;code&gt;required=True&lt;/code&gt;) whereas with previous versions of Django, default &lt;code&gt;BooleanField&lt;/code&gt; instances will be generated with a &lt;code&gt;required=False&lt;/code&gt; option. If you want to control this behaviour manually, explicitly declare the &lt;code&gt;BooleanField&lt;/code&gt; on the serializer class, or use the &lt;code&gt;extra_kwargs&lt;/code&gt; option to set the &lt;code&gt;required&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99a7244f261dcb89ae28d36fbddd3b4580a65f1" translate="yes" xml:space="preserve">
          <source>Note that because we want to be able to POST to this view from clients that won't have a CSRF token we need to mark the view as &lt;code&gt;csrf_exempt&lt;/code&gt;. This isn't something that you'd normally want to do, and REST framework views actually use more sensible behavior than this, but it'll do for our purposes right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0572936be3b58ff956a8a91bef728ca1ca2cfd" translate="yes" xml:space="preserve">
          <source>Note that calling &lt;code&gt;credentials&lt;/code&gt; a second time overwrites any existing credentials. You can unset any existing credentials by calling the method with no arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c81450495eee7e283d07e55bc2286b993c3d650" translate="yes" xml:space="preserve">
          <source>Note that due to implementation reasons the &lt;code&gt;Request&lt;/code&gt; class does not inherit from &lt;code&gt;HttpRequest&lt;/code&gt; class, but instead extends the class using composition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c96ab3d91a0abbb188832bd93189c28aba2f0a" translate="yes" xml:space="preserve">
          <source>Note that if a filter backend is configured for a view, then as well as being used to filter list views, it will also be used to filter the querysets used for returning a single object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab7494e1243079f42e1cd890778433302bece29" translate="yes" xml:space="preserve">
          <source>Note that if a renderer class returns a unicode string, then the response content will be coerced into a bytestring by the &lt;code&gt;Response&lt;/code&gt; class, with the &lt;code&gt;charset&lt;/code&gt; attribute set on the renderer used to determine the encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034578091bfdbc3210bec0abd501cafa21fa9602" translate="yes" xml:space="preserve">
          <source>Note that if deploying to &lt;a href=&quot;https://modwsgi.readthedocs.io/en/develop/configuration-directives/WSGIPassAuthorization.html&quot;&gt;Apache using mod_wsgi&lt;/a&gt;, the authorization header is not passed through to a WSGI application by default, as it is assumed that authentication will be handled by Apache, rather than at an application level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57e804278bb4ef65d7a89b351da7c78057dc865" translate="yes" xml:space="preserve">
          <source>Note that if you care about how the ordering of keys is displayed in responses in the browsable API you might choose to use an &lt;code&gt;OrderedDict&lt;/code&gt; when constructing the body of paginated responses, but this is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a12784a97580e76e90704a81cd9aa2b36c7c31d" translate="yes" xml:space="preserve">
          <source>Note that if you wanted to use this style together with the generic views then you'd also need to override &lt;code&gt;.get_object&lt;/code&gt; on the view in order to get the correct lookup behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62327bda9dad5555899953d87c3f029a029dd302" translate="yes" xml:space="preserve">
          <source>Note that if your API doesn't include any object level permissions, you may optionally exclude the &lt;code&gt;self.check_object_permissions&lt;/code&gt;, and simply return the object from the &lt;code&gt;get_object_or_404&lt;/code&gt; lookup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82c866f47484d86dc27da76d3650c3623738507" translate="yes" xml:space="preserve">
          <source>Note that in the case above we're now having to access the serializer &lt;code&gt;.validated_data&lt;/code&gt; property directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f522dd57619627316dbd03f7597a05f405ef1a" translate="yes" xml:space="preserve">
          <source>Note that reverse generic keys, expressed using the &lt;code&gt;GenericRelation&lt;/code&gt; field, can be serialized using the regular relational field types, since the type of the target in the relationship is always known.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c369602f4e84310271ec1a921233e937bc481e" translate="yes" xml:space="preserve">
          <source>Note that reverse relationships are not automatically included by the &lt;code&gt;ModelSerializer&lt;/code&gt; and &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; classes. To include a reverse relationship, you must explicitly add it to the fields list. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51c4c71472aa43c6b40b63007fc76da9c755e1c" translate="yes" xml:space="preserve">
          <source>Note that setting a &lt;code&gt;default&lt;/code&gt; value implies that the field is not required. Including both the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;required&lt;/code&gt; keyword arguments is invalid and will raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b4f44b3219bb7f374733f32a2860a154923f53" translate="yes" xml:space="preserve">
          <source>Note that settings in REST framework are all namespaced into a single dictionary setting, named &lt;code&gt;REST_FRAMEWORK&lt;/code&gt;, which helps keep them well separated from your other project settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded6d2a5e51d60d080fd400bac7c49c9f83e3394" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;WritableField&lt;/code&gt; class that was present in version 2.x no longer exists. You should subclass &lt;code&gt;Field&lt;/code&gt; and override &lt;code&gt;to_internal_value()&lt;/code&gt; if the field supports data input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d766bd22054602e34c5ebfce824a8df70c9ccae" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;basename&lt;/code&gt; is provided by the router during &lt;code&gt;ViewSet&lt;/code&gt; registration. If you are not using a router, then you must provide the &lt;code&gt;basename&lt;/code&gt; argument to the &lt;code&gt;.as_view()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b24fb947c3ec202c6667db8edb60bcba9426f91" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;paginate_queryset&lt;/code&gt; method may set state on the pagination instance, that may later be used by the &lt;code&gt;get_paginated_response&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32adc52f2a2a0f537e56bc32f313b5bfe1537216" translate="yes" xml:space="preserve">
          <source>Note that the URL part of the pattern can be whatever you want to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ace64253d89d4f92cd067c9fc017e3ba06e0c99" translate="yes" xml:space="preserve">
          <source>Note that the URL path can be whatever you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89407dd6375887a6497e32b6b368f623dff66c2f" translate="yes" xml:space="preserve">
          <source>Note that the child field &lt;strong&gt;must&lt;/strong&gt; be an instance of &lt;code&gt;CharField&lt;/code&gt;, as the hstore extension stores values as strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9f392faad7ae769aa54b826c2a96f6094089ad" translate="yes" xml:space="preserve">
          <source>Note that the default &lt;code&gt;obtain_auth_token&lt;/code&gt; view explicitly uses JSON requests and responses, rather than using default renderer and parser classes in your settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545e627cf8a83235ec83ee1b070ff96ab989dc77" translate="yes" xml:space="preserve">
          <source>Note that the default style is to include unicode characters, and render the response using a compact style with no unnecessary whitespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7daff09926cee1b3d519f2a3e717c6d9b5d708" translate="yes" xml:space="preserve">
          <source>Note that the exception handler will only be called for responses generated by raised exceptions. It will not be used for any responses returned directly by the view, such as the &lt;code&gt;HTTP_400_BAD_REQUEST&lt;/code&gt; responses that are returned by the generic views when serializer validation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab6e7bbce3678676095a4c2052e08b275222f00" translate="yes" xml:space="preserve">
          <source>Note that the first group is enclosed in brackets, indicating that this is the matched portion of the hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cd7d3bf0f3d5f13610310be23e9c77b889ba52" translate="yes" xml:space="preserve">
          <source>Note that the generic views will check the appropriate object level permissions, but if you're writing your own custom views, you'll need to make sure you check the object level permission checks yourself. You can do so by calling &lt;code&gt;self.check_object_permissions(request, obj)&lt;/code&gt; from the view once you have the object instance. This call will raise an appropriate &lt;code&gt;APIException&lt;/code&gt; if any object-level permission checks fail, and will otherwise simply return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a60566b56c0507eee502eca8d9f229ddec0346" translate="yes" xml:space="preserve">
          <source>Note that the requests client requires you to pass fully qualified URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a49fafd1499d557b435925e09a86a5f63bad017" translate="yes" xml:space="preserve">
          <source>Note that this example doesn't handle validation. Partly for that reason, in a real project, the coordinate nesting might be better handled with a nested serialiser using &lt;code&gt;source='*'&lt;/code&gt;, with two &lt;code&gt;IntegerField&lt;/code&gt; instances, each with their own &lt;code&gt;source&lt;/code&gt; pointing to the relevant field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a306ac1cf4de274fcf85a8523f170cd74827ad" translate="yes" xml:space="preserve">
          <source>Note that views that have nested or list serializers for their input won't work well with the &lt;code&gt;AdminRenderer&lt;/code&gt;, as the HTML forms are unable to properly support them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94b60b378243f42925aa9a3cbd8c54938fc87fb" translate="yes" xml:space="preserve">
          <source>Note that when a request may successfully authenticate, but still be denied permission to perform the request, in which case a &lt;code&gt;403 Permission Denied&lt;/code&gt; response will always be used, regardless of the authentication scheme.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73311b41a697ea50e8a566522f602aa8b8de45af" translate="yes" xml:space="preserve">
          <source>Note that you can use any of the standard attributes or method overrides provided by &lt;code&gt;GenericAPIView&lt;/code&gt;. For example, to use a &lt;code&gt;ViewSet&lt;/code&gt; that dynamically determines the queryset it should operate on, you might do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f822231cef91e6252a6e2e12481059ebda5f74d7" translate="yes" xml:space="preserve">
          <source>Note that you can use both an overridden &lt;code&gt;.get_queryset()&lt;/code&gt; and generic filtering together, and everything will work as expected. For example, if &lt;code&gt;Product&lt;/code&gt; had a many-to-many relationship with &lt;code&gt;User&lt;/code&gt;, named &lt;code&gt;purchase&lt;/code&gt;, you might want to write a view like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b60356a6dbd453c122a85b0c233845ffa06646a" translate="yes" xml:space="preserve">
          <source>Note that you need to set both the pagination class, and the page size that should be used. Both &lt;code&gt;DEFAULT_PAGINATION_CLASS&lt;/code&gt; and &lt;code&gt;PAGE_SIZE&lt;/code&gt; are &lt;code&gt;None&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4b20d6313feb1288f3b6fbd28c79c913b64388" translate="yes" xml:space="preserve">
          <source>Note that you'll want to ensure you place this code snippet in an installed &lt;code&gt;models.py&lt;/code&gt; module, or some other location that will be imported by Django on startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a473963d7e629244512baad152d598e29571cb" translate="yes" xml:space="preserve">
          <source>Note that, without an explicit &lt;code&gt;default&lt;/code&gt;, setting this argument to &lt;code&gt;True&lt;/code&gt; will imply a &lt;code&gt;default&lt;/code&gt; value of &lt;code&gt;null&lt;/code&gt; for serialization output, but does not imply a default for input deserialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7a356a41eb66f0c09557c6567a0f8faf3f316e" translate="yes" xml:space="preserve">
          <source>Notice how similar the API is to working with forms. The similarity should become even more apparent when we start writing views that use our serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faab1fa02f9cdf2969aaab31769256179c8e5709" translate="yes" xml:space="preserve">
          <source>Notice how we're creating multiple views from each &lt;code&gt;ViewSet&lt;/code&gt; class, by binding the http methods to the required action for each view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce58e9c7b9822089be8ebef1abc45aa28280c63b" translate="yes" xml:space="preserve">
          <source>Notice that we're no longer explicitly tying our requests or responses to a given content type. &lt;code&gt;request.data&lt;/code&gt; can handle incoming &lt;code&gt;json&lt;/code&gt; requests, but it can also handle other formats. Similarly we're returning response objects with data, but allowing REST framework to render the response into the correct content type for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5b992b1a429e6b794c28b7efaaeb3331bd305d" translate="yes" xml:space="preserve">
          <source>Notice that we're using hyperlinked relations in this case with &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt;. You can also use primary key and various other relationships, but hyperlinking is good RESTful design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4957d7e6b6b4c1c37e7c0232d17f9556e4093de" translate="yes" xml:space="preserve">
          <source>Notice that we've also added a new &lt;code&gt;'highlight'&lt;/code&gt; field. This field is of the same type as the &lt;code&gt;url&lt;/code&gt; field, except that it points to the &lt;code&gt;'snippet-highlight'&lt;/code&gt; url pattern, instead of the &lt;code&gt;'snippet-detail'&lt;/code&gt; url pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09056c2971ef1602a20c7a81025ffc7ae838353" translate="yes" xml:space="preserve">
          <source>Notice that we've also used the &lt;code&gt;@action&lt;/code&gt; decorator to create a custom action, named &lt;code&gt;highlight&lt;/code&gt;. This decorator can be used to add any custom endpoints that don't fit into the standard &lt;code&gt;create&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt;/&lt;code&gt;delete&lt;/code&gt; style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb62394d596f98e69eaf8408df83b0685a10904" translate="yes" xml:space="preserve">
          <source>Now go and open the API in a web browser, by visiting &lt;a href=&quot;http://127.0.0.1:8000/snippets/&quot;&gt;http://127.0.0.1:8000/snippets/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515d44174fbc3faea9507a29e2d199c8bba50e39" translate="yes" xml:space="preserve">
          <source>Now if you open up the browser again and refresh the page you'll see a 'Login' link in the top right of the page. If you log in as one of the users you created earlier, you'll be able to create code snippets again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6910cede8885b8639b74ed274828741591efe81b" translate="yes" xml:space="preserve">
          <source>Now sync your database for the first time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04984140c8c84aadcd6177cafc9d21fff7baed4" translate="yes" xml:space="preserve">
          <source>Now that code snippets are associated with users, we want to make sure that only authenticated users are able to create, update and delete code snippets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7908489371b30fbb39e16e9acf10076d342743e4" translate="yes" xml:space="preserve">
          <source>Now that snippets are associated with the user that created them, let's update our &lt;code&gt;SnippetSerializer&lt;/code&gt; to reflect that. Add the following field to the serializer definition in &lt;code&gt;serializers.py&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da0ba1b8a1c6384cf7beb81edcb98a09ed0c87a" translate="yes" xml:space="preserve">
          <source>Now that we're inside a virtual environment, we can install our package requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173c0a1dd33984485aba38ce050dcf1a3adae8da" translate="yes" xml:space="preserve">
          <source>Now that we've bound our resources into concrete views, we can register the views with the URL conf as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be255ad71292e709d61098e1e93a1baefabb2fc9" translate="yes" xml:space="preserve">
          <source>Now that we've got some users to work with, we'd better add representations of those users to our API. Creating a new serializer is easy. In &lt;code&gt;serializers.py&lt;/code&gt; add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094f1b767466b215e918121b287a29f04d9ddea0" translate="yes" xml:space="preserve">
          <source>Now update the &lt;code&gt;snippets/urls.py&lt;/code&gt; file slightly, to append a set of &lt;code&gt;format_suffix_patterns&lt;/code&gt; in addition to the existing URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78cb9cf64f3896bbc3c6145b157050b19b97ca5" translate="yes" xml:space="preserve">
          <source>Now we can add that custom permission to our snippet instance endpoint, by editing the &lt;code&gt;permission_classes&lt;/code&gt; property on the &lt;code&gt;SnippetDetail&lt;/code&gt; view class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28671c9961bd55f63bdbb836866aa03c7864b618" translate="yes" xml:space="preserve">
          <source>Now we can start up a sample server that serves our snippets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378e43074fc197cafd58af4549aa11dc59b01622" translate="yes" xml:space="preserve">
          <source>Now when deserializing data, we can call &lt;code&gt;.save()&lt;/code&gt; to return an object instance, based on the validated data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c672d93ba55278f360e33d6e8f7bc1092313019" translate="yes" xml:space="preserve">
          <source>Now, if you open a browser again, you find that the 'DELETE' and 'PUT' actions only appear on a snippet instance endpoint if you're logged in as the same user that created the code snippet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7c77301a2929db5f73f734c81a60d710e37c20" translate="yes" xml:space="preserve">
          <source>NullBooleanField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f397c30c09c83d0e1fe862cff6333c141af219" translate="yes" xml:space="preserve">
          <source>Numeric fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a8bfc72bb25ac79e23bac257fae4e0c248b99b" translate="yes" xml:space="preserve">
          <source>ORDERING_PARAM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866a656e96fbba9a5c7daf98370166d9a8f414a0" translate="yes" xml:space="preserve">
          <source>Object level permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6bfa22bbe9fea16e3570fc2f5cd54b8018a312" translate="yes" xml:space="preserve">
          <source>Object level permissions are run by REST framework's generic views when &lt;code&gt;.get_object()&lt;/code&gt; is called. As with view level permissions, an &lt;code&gt;exceptions.PermissionDenied&lt;/code&gt; exception will be raised if the user is not allowed to act on the given object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7cdad3d567dc8263a9ca3fde44caab2833a604" translate="yes" xml:space="preserve">
          <source>Object-level validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574d8b2159efe4b94b0b20b5abb51e2e1a10d4f5" translate="yes" xml:space="preserve">
          <source>Occasionally you might need to explicitly specify how the child and parent classes should be instantiated when &lt;code&gt;many=True&lt;/code&gt; is passed. You can do so by using the &lt;code&gt;many_init&lt;/code&gt; class method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3310f53f761054eca9d73669ac16f0d6a930f106" translate="yes" xml:space="preserve">
          <source>Often when you're using object level permissions you'll also want to &lt;a href=&quot;../filtering/index&quot;&gt;filter the queryset&lt;/a&gt; appropriately, to ensure that users only have visibility onto instances that they are permitted to view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16dc994d248ebb1ef8dc39ed87e3425c220264a1" translate="yes" xml:space="preserve">
          <source>Often you'll want serializer classes that map closely to Django model definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625a5d9f8dee1792fa1a9e4497e67a97f60ac501" translate="yes" xml:space="preserve">
          <source>Often you'll want to use the existing generic views, but use some slightly customized behavior. If you find yourself reusing some bit of customized behavior in multiple places, you might want to refactor the behavior into a common class that you can then just apply to any view or viewset as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6801a29b0001a60d0e7508b95cdfe299f5a358b5" translate="yes" xml:space="preserve">
          <source>Okay, let's go ahead and start using these new components to write a few views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b9d5cc876307f4214c13f21715860c1148d424" translate="yes" xml:space="preserve">
          <source>Okay, now let's wire up the API URLs. On to &lt;code&gt;tutorial/urls.py&lt;/code&gt;...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612cdbfb1112d6d77881e4fe97a6507a62bce307" translate="yes" xml:space="preserve">
          <source>Okay, once we've got a few imports out of the way, let's create a couple of code snippets to work with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e869cdaa40fb00f0f37dce3831c4e3ad38fb9bc" translate="yes" xml:space="preserve">
          <source>Okay, we're done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc317b74910d1cd1f12a9a19d2812cf01d53f3f9" translate="yes" xml:space="preserve">
          <source>Okay, we're done. If you run the development server everything should be working just as before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d143c1e6315cee0c434f595e607b63814668e53d" translate="yes" xml:space="preserve">
          <source>Okay, we're ready to get coding. To get started, let's create a new project to work with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50bc850e77ce18ac03078297d022730c6dfb97a" translate="yes" xml:space="preserve">
          <source>Okay, we're ready to roll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e861046c108731731b234169f136003a811b60f3" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GenericAPIView&lt;/code&gt; subclasses you may also set the &lt;code&gt;pagination_class&lt;/code&gt; attribute to select &lt;code&gt;CursorPagination&lt;/code&gt; on a per-view basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef0d4bd3fbd885715131826d369ef4e3f6121f5" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GenericAPIView&lt;/code&gt; subclasses you may also set the &lt;code&gt;pagination_class&lt;/code&gt; attribute to select &lt;code&gt;LimitOffsetPagination&lt;/code&gt; on a per-view basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e77b5841c8a573cd6e9ca4550c353d7c36b65a" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;GenericAPIView&lt;/code&gt; subclasses you may also set the &lt;code&gt;pagination_class&lt;/code&gt; attribute to select &lt;code&gt;PageNumberPagination&lt;/code&gt; on a per-view basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed684499aaee4f1d469e622e5ba2947ba58aefdf" translate="yes" xml:space="preserve">
          <source>On the &lt;code&gt;SnippetList&lt;/code&gt; view class, add the following method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9e6fa6db0a6baa09f83e49fa8a90a67d297864" translate="yes" xml:space="preserve">
          <source>Once a serializer has been initialized, the dictionary of fields that are set on the serializer may be accessed using the &lt;code&gt;.fields&lt;/code&gt; attribute. Accessing and modifying this attribute allows you to dynamically modify the serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a73e3d2fa02eb7b2274f8e6ee1bf246a1c99933" translate="yes" xml:space="preserve">
          <source>Once that's done we can create an app that we'll use to create a simple Web API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5433fcc29c83d63cb7cc96ab51a337accef089ae" translate="yes" xml:space="preserve">
          <source>Once you've created a few code snippets, navigate to the '/users/' endpoint, and notice that the representation includes a list of the snippet ids that are associated with each user, in each user's 'snippets' field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41be347ee3a9c422d61ef423d7b9c24ac557de28" translate="yes" xml:space="preserve">
          <source>Once you've generated a schema in this way you can annotate it with any additional information that cannot be automatically inferred by the schema generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="520d6a29b68d6e04d2589a497d07196a06b94bbc" translate="yes" xml:space="preserve">
          <source>Once you've implemented &lt;code&gt;.to_internal_value()&lt;/code&gt;, the basic validation API will be available on the serializer, and you will be able to use &lt;code&gt;.is_valid()&lt;/code&gt;, &lt;code&gt;.validated_data&lt;/code&gt; and &lt;code&gt;.errors&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1741af68a17399fe36224088116c2c82ccfd9edc" translate="yes" xml:space="preserve">
          <source>Once you've set up a database and the initial user is created and ready to go, open up the app's directory and we'll get coding...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cb2e359eb36e36c8a01e3af0df75deb9ef1f1a" translate="yes" xml:space="preserve">
          <source>One difference worth noting between Django's &lt;code&gt;RequestFactory&lt;/code&gt; and REST framework's &lt;code&gt;APIRequestFactory&lt;/code&gt; is that multipart form data will be encoded for methods other than just &lt;code&gt;.post()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52760e0e7fe50c4271ebc15024b815a72cf142e9" translate="yes" xml:space="preserve">
          <source>One example of this is a read-only relation to the currently authenticated &lt;code&gt;User&lt;/code&gt; which is &lt;code&gt;unique_together&lt;/code&gt; with another identifier. In this case you would declare the user field like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f6d591257b0ec109c18c7d16f80fe71654cdbc" translate="yes" xml:space="preserve">
          <source>One nice property that serializers have is that you can inspect all the fields in a serializer instance, by printing its representation. Open the Django shell with &lt;code&gt;python manage.py shell&lt;/code&gt;, then try the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c9446db7fe492c0a7e7e7df12e0a4bf0148cb3" translate="yes" xml:space="preserve">
          <source>One of the big wins of using class-based views is that it allows us to easily compose reusable bits of behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609d28bf323fc14b31d538e9780a54336438c604" translate="yes" xml:space="preserve">
          <source>One of the key benefits of class-based views is the way they allow you to compose bits of reusable behavior. REST framework takes advantage of this by providing a number of pre-built views that provide for commonly used patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3045b022c08cf1bb514dad73817f2da7edb2828" translate="yes" xml:space="preserve">
          <source>Only authenticated users may create snippets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b673bcc9823e309dac8ec13a7c99412c9ca56a1b" translate="yes" xml:space="preserve">
          <source>Only the creator of a snippet may update or delete it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d691aa2446c1c4d41d5eb8505a8bade71f653b" translate="yes" xml:space="preserve">
          <source>Optional fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d552743956c0bab76b9b58a7cad279c611c25573" translate="yes" xml:space="preserve">
          <source>Optional. If provided, this is a dictionary of contextual information provided by the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9144a6baebc2076c845958ebe3ce851ffa980cc" translate="yes" xml:space="preserve">
          <source>Optional. If provided, this is the accepted media type, as determined by the content negotiation stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b9d10ee78b342d22891cb8c14b99819178c23c" translate="yes" xml:space="preserve">
          <source>Optional. If provided, this is the media type of the incoming request content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb94ae08a10fd0d80a25f1aa66d8e9ce1d00b6d5" translate="yes" xml:space="preserve">
          <source>Optional. If supplied, this argument will be a dictionary containing any additional context that may be required to parse the request content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904aad41da2f418839e9ba8df0bce140724fbef6" translate="yes" xml:space="preserve">
          <source>Optionally you may also override the &lt;code&gt;.wait()&lt;/code&gt; method. If implemented, &lt;code&gt;.wait()&lt;/code&gt; should return a recommended number of seconds to wait before attempting the next request, or &lt;code&gt;None&lt;/code&gt;. The &lt;code&gt;.wait()&lt;/code&gt; method will only be called if &lt;code&gt;.allow_request()&lt;/code&gt; has previously returned &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8c26464fbbd03f80777316db474cfcca1fae44" translate="yes" xml:space="preserve">
          <source>Optionally, you may also set a &lt;code&gt;PAGE_SIZE&lt;/code&gt; key. If the &lt;code&gt;PAGE_SIZE&lt;/code&gt; parameter is also used then the &lt;code&gt;limit&lt;/code&gt; query parameter will be optional, and may be omitted by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1558e806287d1867d20241c30a1ad761460fbd" translate="yes" xml:space="preserve">
          <source>Optionally, you may also specify an additional argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26893cf6937305774d238ada98550b8d2ca97058" translate="yes" xml:space="preserve">
          <source>Or add the filter backend to an individual View or ViewSet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe5c8fce94ab8ce5ee6e0dc4764421228cdd49f" translate="yes" xml:space="preserve">
          <source>Or apply the style globally, using the &lt;code&gt;DEFAULT_PAGINATION_CLASS&lt;/code&gt; settings key. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f28a0ddaf2c6c47c270531a30d8fc342ae001d" translate="yes" xml:space="preserve">
          <source>Or both an application and instance namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f742482488af7b6903db14bcfe1ea4fb73a3910a" translate="yes" xml:space="preserve">
          <source>Or by appending a format suffix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b98bcb1ef807f0b9dd8059fdb3e8b46c83e399" translate="yes" xml:space="preserve">
          <source>Or directly through the browser, by going to the URL &lt;code&gt;http://127.0.0.1:8000/users/&lt;/code&gt;...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f196f1c9732874bb5940857bdb1127c881b3a2b" translate="yes" xml:space="preserve">
          <source>Or use it to serialize multiple instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e828686e604d346b3d8ad45078bbb66588e52f54" translate="yes" xml:space="preserve">
          <source>Or using the &lt;a href=&quot;https://github.com/jakubroztocil/httpie#installation&quot;&gt;httpie&lt;/a&gt;, command line tool...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7c8dad2a96b62e5842068756e3d321fa43f1c4" translate="yes" xml:space="preserve">
          <source>Or we can get a particular snippet by referencing its id:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6f2f9bfb3f17bf14f133b0bf3c4aec84774add" translate="yes" xml:space="preserve">
          <source>Or with class-based views:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37247a7bbc6e7a4dd81691e806c99749e6e7c94f" translate="yes" xml:space="preserve">
          <source>Or you can set the metadata class individually for a view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be92a248988a8c3f0619ae445466c2fb206830a" translate="yes" xml:space="preserve">
          <source>Or, if you're using the &lt;code&gt;@api_view&lt;/code&gt; decorator with function based views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18f69d7ec25f7efef92b50fa6ed2ee45908084e" translate="yes" xml:space="preserve">
          <source>Ordering of renderer classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a680a3f0b6d757b015d957798796af0274cc223" translate="yes" xml:space="preserve">
          <source>OrderingFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6259560526ae1e68cdb3fbdcd8795597dcd6a20b" translate="yes" xml:space="preserve">
          <source>Other versioning settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53dbe63b534153a79dc46d4495e7292756be8783" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;ColorField&lt;/code&gt; class above currently does not perform any data validation. To indicate invalid data, we should raise a &lt;code&gt;serializers.ValidationError&lt;/code&gt;, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6742b6f185e695513d4ce3595f096143cbb2a2e2" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;SnippetSerializer&lt;/code&gt; class is replicating a lot of information that's also contained in the &lt;code&gt;Snippet&lt;/code&gt; model. It would be nice if we could keep our code a bit more concise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191068573e349df477e77d95a5b8072d796b0517" translate="yes" xml:space="preserve">
          <source>Our API views don't do anything particularly special at the moment, beyond serving &lt;code&gt;json&lt;/code&gt; responses, and there are some error handling edge cases we'd still like to clean up, but it's a functioning Web API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320f862b4aacd2726d3d23df08d88e293e985c9d" translate="yes" xml:space="preserve">
          <source>Our instance view is an improvement over the previous example. It's a little more concise, and the code now feels very similar to if we were working with the Forms API. We're also using named status codes, which makes the response meanings more obvious.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0457d8ef4047aa46b9ef6211592ee400d0b4e4d8" translate="yes" xml:space="preserve">
          <source>Our new &lt;code&gt;DataPointSerializer&lt;/code&gt; exhibits the same behaviour as the custom field approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77986b859da6f09a970d3508a0b6a68dd0226ca8" translate="yes" xml:space="preserve">
          <source>Our snippet and user serializers include &lt;code&gt;'url'&lt;/code&gt; fields that by default will refer to &lt;code&gt;'{model_name}-detail'&lt;/code&gt;, which in this case will be &lt;code&gt;'snippet-detail'&lt;/code&gt; and &lt;code&gt;'user-detail'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8213751bcaec3f3a36b0dcc6f9e705584cb6fefc" translate="yes" xml:space="preserve">
          <source>Our snippet serializer includes a field that refers to &lt;code&gt;'snippet-highlight'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9da44a7df070e2cfed3b55e75d1859408ebfa1e" translate="yes" xml:space="preserve">
          <source>Our user serializer includes a field that refers to &lt;code&gt;'snippet-detail'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63b0f0b9d56666416e596c609577446a600a75b" translate="yes" xml:space="preserve">
          <source>Overriding .save() directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710a98a1fccdaf996bb28b5ea77b4b03d1716bbd" translate="yes" xml:space="preserve">
          <source>Overriding serialization and deserialization behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127275baf3ed8ea00418353b5e36f2c08ab49505" translate="yes" xml:space="preserve">
          <source>Overriding the initial queryset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78464d4b318de48c59765cf36b0fbf69d3555264" translate="yes" xml:space="preserve">
          <source>Overriding this method allows you to customize the queryset returned by the view in a number of different ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52994dc88c9712256d6347664b4288df66f87eb" translate="yes" xml:space="preserve">
          <source>PAGE_SIZE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbe29d4d76ec756421aee06e0f34f17fa488ff3" translate="yes" xml:space="preserve">
          <source>PATCH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ff81c30aa3c76e78afea62b2e3bd1dfa49e854" translate="yes" xml:space="preserve">
          <source>POST</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091b0ce42eb0bd96169ea00b16dd938f6d63ac95" translate="yes" xml:space="preserve">
          <source>PUT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834ebff92449ef46b1f64d19bdc65a582073d4c3" translate="yes" xml:space="preserve">
          <source>PUT and PATCH with form data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf5ee6ef7fdef89e6d7ef04443b994e935e2463" translate="yes" xml:space="preserve">
          <source>PUT as create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b148ebbe8b36fb6056c6f49b77b2b97eee6c6a5f" translate="yes" xml:space="preserve">
          <source>PageNumberPagination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100325b8d6de92dc6ff09cd2c078133755bf274f" translate="yes" xml:space="preserve">
          <source>Pagination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6948a373bc8b2b1028e149b9580c1a68bc4e3511" translate="yes" xml:space="preserve">
          <source>Pagination &amp;amp; schemas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b191d9ff50db999afefacc43d5c218daf82e4d94" translate="yes" xml:space="preserve">
          <source>Pagination allows you to control how many objects per page are returned. To enable it add the following lines to &lt;code&gt;tutorial/settings.py&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bbe79f07ac768254d0e6651220966955a8a714" translate="yes" xml:space="preserve">
          <source>Pagination can be turned off by setting the pagination class to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e384c185ae375ace11c2e9af3f61d776d8d160d9" translate="yes" xml:space="preserve">
          <source>Pagination is only performed automatically if you're using the generic views or viewsets. If you're using a regular &lt;code&gt;APIView&lt;/code&gt;, you'll need to call into the pagination API yourself to ensure you return a paginated response. See the source code for the &lt;code&gt;mixins.ListModelMixin&lt;/code&gt; and &lt;code&gt;generics.GenericAPIView&lt;/code&gt; classes for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5a727b265d5b11e5f77941882164008fa61200" translate="yes" xml:space="preserve">
          <source>Pagination links that are included in response headers, such as &lt;code&gt;Content-Range&lt;/code&gt; or &lt;code&gt;Link&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e145a99a900d85fc40c7baf3b167807caf5052" translate="yes" xml:space="preserve">
          <source>Pagination links that are provided as part of the content of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38a991b4b1cbef563a8728c3a8519751f91a0e3" translate="yes" xml:space="preserve">
          <source>Pandas (CSV, Excel, PNG)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df633b0d4b46131792d5ed485e94f872474b0ba2" translate="yes" xml:space="preserve">
          <source>ParseError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdb99a054fb37fae9696b10ed15efeeb9f36b28" translate="yes" xml:space="preserve">
          <source>Parsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43211571b9cb7aac08251bf8bdea0f7a8ec45aa8" translate="yes" xml:space="preserve">
          <source>Parsers and file uploads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1cb17016b65604e7148ee14736706c4bfa6cfa" translate="yes" xml:space="preserve">
          <source>Parses &lt;code&gt;JSON&lt;/code&gt; request content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13485e1cccb0eba2acbbe4b294198f0690710d46" translate="yes" xml:space="preserve">
          <source>Parses HTML form content. &lt;code&gt;request.data&lt;/code&gt; will be populated with a &lt;code&gt;QueryDict&lt;/code&gt; of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93c85d44cdee3fc7bb315295b404b5b9cec8cfa" translate="yes" xml:space="preserve">
          <source>Parses multipart HTML form content, which supports file uploads. Both &lt;code&gt;request.data&lt;/code&gt; will be populated with a &lt;code&gt;QueryDict&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369f1e5652f89541dee6ff5c272827b6be3da7f3" translate="yes" xml:space="preserve">
          <source>Parses raw file upload content. The &lt;code&gt;request.data&lt;/code&gt; property will be a dictionary with a single key &lt;code&gt;'file'&lt;/code&gt; containing the uploaded file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fe54cb0b8ba82b444ae082b2105c137623b124" translate="yes" xml:space="preserve">
          <source>Partial updates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb07fd49c4bbf3f72536aa675ac66ba5260908ce" translate="yes" xml:space="preserve">
          <source>Passing additional attributes to .save()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49e3141c600796225ed3d710d595ee84461ff5a" translate="yes" xml:space="preserve">
          <source>Per-View Customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0dd07a69011441db910a8eebcd7b543a1ead2f" translate="yes" xml:space="preserve">
          <source>Performs any actions that need to occur before the handler method gets called. This method is used to enforce permissions and throttling, and perform content negotiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f04d94c62e9ee70692f850aad239e362d3e7c6d" translate="yes" xml:space="preserve">
          <source>Permission checks are always run at the very start of the view, before any other code is allowed to proceed. Permission checks will typically use the authentication information in the &lt;code&gt;request.user&lt;/code&gt; and &lt;code&gt;request.auth&lt;/code&gt; properties to determine if the incoming request should be permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4636c20125232583a78fcf9bd2b7beb3e0ee79a6" translate="yes" xml:space="preserve">
          <source>PermissionDenied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4deea70e526a9ef98987db7697fd554c37c0fd7" translate="yes" xml:space="preserve">
          <source>Permissions are used to grant or deny access for different classes of users to different parts of the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8dba14e2286baef48985b89f0d26cadbdacbca" translate="yes" xml:space="preserve">
          <source>Permissions in REST framework are always defined as a list of permission classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876ed6f31134f69a4e42535e0c4e8fa1946f84d1" translate="yes" xml:space="preserve">
          <source>Please keep in mind that, if the field has already been explicitly declared on the serializer class, then the &lt;code&gt;extra_kwargs&lt;/code&gt; option will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde49ac2080aa2d4660cc1c6e41dbb3080cc6403" translate="yes" xml:space="preserve">
          <source>Please review the &lt;a href=&quot;../validators/index&quot;&gt;Validators Documentation&lt;/a&gt; for details on the &lt;a href=&quot;../validators/index#uniquetogethervalidator&quot;&gt;UniqueTogetherValidator&lt;/a&gt; and &lt;a href=&quot;../validators/index#currentuserdefault&quot;&gt;CurrentUserDefault&lt;/a&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0edf3e44ab307fc9e605cce5f1b1153a0103d4d4" translate="yes" xml:space="preserve">
          <source>Pretty similar. Again we're using the &lt;code&gt;GenericAPIView&lt;/code&gt; class to provide the core functionality, and adding in mixins to provide the &lt;code&gt;.retrieve()&lt;/code&gt;, &lt;code&gt;.update()&lt;/code&gt; and &lt;code&gt;.destroy()&lt;/code&gt; actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df22240e4dc4ce2fab264554065094380089333f" translate="yes" xml:space="preserve">
          <source>PrimaryKeyRelatedField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9054ab892577a95d226b444fb369976ae9e528a0" translate="yes" xml:space="preserve">
          <source>Printing the &lt;code&gt;repr&lt;/code&gt; of a serializer instance will show you exactly what validation rules it applies. There's no extra hidden validation behavior being called on the model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0580efdda53656c5b208791e376da0efc297d40" translate="yes" xml:space="preserve">
          <source>Prior to version 3.0 the REST framework mixins treated &lt;code&gt;PUT&lt;/code&gt; as either an update or a create operation, depending on if the object already existed or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e72cd3d2e8c6323770f1cbb79c7116a0e7fe1c" translate="yes" xml:space="preserve">
          <source>Project setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ad295710d815c441e1db50d3ee870196244f9a" translate="yes" xml:space="preserve">
          <source>Proper usage of cursor pagination should have an ordering field that satisfies the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5da530b3dbcb722f973231a6884520ad6d88e7c" translate="yes" xml:space="preserve">
          <source>Proper use of cursor based pagination requires a little attention to detail. You'll need to think about what ordering you want the scheme to be applied against. The default is to order by &lt;code&gt;&quot;-created&quot;&lt;/code&gt;. This assumes that &lt;strong&gt;there must be a 'created' timestamp field&lt;/strong&gt; on the model instances, and will present a &quot;timeline&quot; style paginated view, with the most recently added items first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7013144d732472d64e3faaeca11c63b3463dfadc" translate="yes" xml:space="preserve">
          <source>Provide both user and token information associated with the incoming request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b385192bded241b50916dfe7c58e78fd421d46e" translate="yes" xml:space="preserve">
          <source>Provide either flat or nested representations from the same endpoint, depending on the requested media type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac7d5fa51823458e7b8dd9b8a214c35f69e73bb" translate="yes" xml:space="preserve">
          <source>Provided they inherit from &lt;code&gt;rest_framework.permissions.BasePermission&lt;/code&gt;, permissions can be composed using standard Python bitwise operators. For example, &lt;code&gt;IsAuthenticatedOrReadOnly&lt;/code&gt; could be written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c543e0dfa8dfdca8b114bfd53aa6f816e103db15" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; method handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452f83ee9f2a3f76ad84d12641679df3216861f6" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; method handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19ca7204ae0b48660d7d3fd5dc3c257a94cb7d4" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt; method handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7398495b24a31574ac0e1c1ed86930c2be5b77" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; method handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b456570af758ecc02dc8632e5312576b6d16d642" translate="yes" xml:space="preserve">
          <source>Provides &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;patch&lt;/code&gt; method handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec4c969a7db94142374064b1e2a4c9e1d60a2a8" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;.create(request, *args, **kwargs)&lt;/code&gt; method, that implements creating and saving a new model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b53f8fd08c7ab9a1c158dc12db6c28094d2900" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;.destroy(request, *args, **kwargs)&lt;/code&gt; method, that implements deletion of an existing model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ad4cb130e5eb32ebfcb396e34e2fc6ade3a566" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;.list(request, *args, **kwargs)&lt;/code&gt; method, that implements listing a queryset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50316537313584cf9902613337843967734b5344" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;.retrieve(request, *args, **kwargs)&lt;/code&gt; method, that implements returning an existing model instance in a response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7258b1af7508626243797774b13b73c68c762f61" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;.update(request, *args, **kwargs)&lt;/code&gt; method, that implements updating and saving an existing model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c2a58a09d7cffd3e60bc52ed50b8d57fc16cda" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;delete&lt;/code&gt; method handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba91fb643bc9a5a0f6029de79c5831a7c5432e8c" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;get&lt;/code&gt; method handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5de44a4cb9d48da4031cd6199719edc376adcd" translate="yes" xml:space="preserve">
          <source>Provides a &lt;code&gt;post&lt;/code&gt; method handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8efb395412d29a987e493a9fc4428feaa0d16e" translate="yes" xml:space="preserve">
          <source>Provides a consistent pagination view. When used properly &lt;code&gt;CursorPagination&lt;/code&gt; ensures that the client will never see the same item twice when paging through records, even when new items are being inserted by other clients during the pagination process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6757f8461ff3252dc1860ee32df40084aaaca324" translate="yes" xml:space="preserve">
          <source>Providing a template with either of these paths in a global template directory will override the default rendering for the relevant pagination classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ae4babd82f894853c981d9368c11ff073d1296" translate="yes" xml:space="preserve">
          <source>Pulling it all together</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbf249bc8d1469a36edb8ec042669ca077bcda4" translate="yes" xml:space="preserve">
          <source>Python (3.5, 3.6, 3.7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbfbef36e589a411efda8a1391afa645eb761e4" translate="yes" xml:space="preserve">
          <source>Query parameter formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f1adc12ae138ef0077e47986e81e2075ff71c9" translate="yes" xml:space="preserve">
          <source>QueryFields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da525eb34bbedc6d1bb70f4aa5a893692a37a66" translate="yes" xml:space="preserve">
          <source>QueryParameterVersioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fada44ca4f3d7535c5057091bd1d9944ec010a21" translate="yes" xml:space="preserve">
          <source>Quit out of the shell...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9cc2b0a642b0540c5ba634f499f64b144ccb5c" translate="yes" xml:space="preserve">
          <source>REST Condition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e28e061dec299bd3936814d60f921424f696cab" translate="yes" xml:space="preserve">
          <source>REST framework 2 provided an API to allow developers to override how a &lt;code&gt;ModelSerializer&lt;/code&gt; class would automatically generate the default set of fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880be8b26326496c77f5fd46b0e9e36c0286d5c1" translate="yes" xml:space="preserve">
          <source>REST framework adds support for automatic URL routing to Django, and provides you with a simple, quick and consistent way of wiring your view logic to a set of URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e190333aabf41f78c85835094d7e73e69a8e895d" translate="yes" xml:space="preserve">
          <source>REST framework also allows you to work with regular function based views. It provides a set of simple decorators that wrap your function based views to ensure they receive an instance of &lt;code&gt;Request&lt;/code&gt; (rather than the usual Django &lt;code&gt;HttpRequest&lt;/code&gt;) and allows them to return a &lt;code&gt;Response&lt;/code&gt; (instead of a Django &lt;code&gt;HttpResponse&lt;/code&gt;), and allow you to configure how the request is processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0726680912684306c0866ce5acd69c91266f07" translate="yes" xml:space="preserve">
          <source>REST framework also includes a client for interacting with your application using the popular Python library, &lt;code&gt;requests&lt;/code&gt;. This may be useful if:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0b4bc05555b95a911cd24dc6c4279cc987bacf" translate="yes" xml:space="preserve">
          <source>REST framework also introduces a &lt;code&gt;Response&lt;/code&gt; object, which is a type of &lt;code&gt;TemplateResponse&lt;/code&gt; that takes unrendered content and uses content negotiation to determine the correct content type to return to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dff91d1052f2b4e884d6a73c6c2f81ea1fee000" translate="yes" xml:space="preserve">
          <source>REST framework also provides a test case class for isolating &lt;code&gt;urlpatterns&lt;/code&gt; on a per-class basis. Note that this inherits from Django's &lt;code&gt;SimpleTestCase&lt;/code&gt;, and will most likely need to be mixed with another test case class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c803f9285651b9fefa91c11153732766cabc4e94" translate="yes" xml:space="preserve">
          <source>REST framework includes a configurable mechanism for determining how your API should respond to &lt;code&gt;OPTIONS&lt;/code&gt; requests. This allows you to return API schema or other resource information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6392e94e6cbfcf2b9371767c95840510cff121bb" translate="yes" xml:space="preserve">
          <source>REST framework includes a couple of defaults that may be useful in this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0343a7c23fc17cd499ba1461d36b3aaa9ba3fbdf" translate="yes" xml:space="preserve">
          <source>REST framework includes a few helper classes that extend Django's existing test framework, and improve support for making API requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1c6151c4e46acd27061c40d63e10cfdadf0a10" translate="yes" xml:space="preserve">
          <source>REST framework includes a number of built in Parser classes, that allow you to accept requests with various media types. There is also support for defining your own custom parsers, which gives you the flexibility to design the media types that your API accepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29efb753cf488a96b733aa2b8ff9a23ec2ec1158" translate="yes" xml:space="preserve">
          <source>REST framework includes a number of built in Renderer classes, that allow you to return responses with various media types. There is also support for defining your own custom renderers, which gives you the flexibility to design your own media types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cdf9ad6ef92afa8033e147734f51b78739a3df" translate="yes" xml:space="preserve">
          <source>REST framework includes a number of permission classes that we can use to restrict who can access a given view. In this case the one we're looking for is &lt;code&gt;IsAuthenticatedOrReadOnly&lt;/code&gt;, which will ensure that authenticated requests get read-write access, and unauthenticated requests get read-only access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8963149cc79756f8a17f3a9f95c6b16fda0546b" translate="yes" xml:space="preserve">
          <source>REST framework includes an abstraction for dealing with &lt;code&gt;ViewSets&lt;/code&gt;, that allows the developer to concentrate on modeling the state and interactions of the API, and leave the URL construction to be handled automatically, based on common conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c88300f41be30d0c1caf6de751c3e8f24014cec" translate="yes" xml:space="preserve">
          <source>REST framework includes support for customizable pagination styles. This allows you to modify how large result sets are split into individual pages of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437474affca462e3291cafef9dc92a25f72b644c" translate="yes" xml:space="preserve">
          <source>REST framework includes the following test case classes, that mirror the existing Django test case classes, but use &lt;code&gt;APIClient&lt;/code&gt; instead of Django's default &lt;code&gt;Client&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aab35647e175862c0a8ef3dc9f9a7b9bd1206b" translate="yes" xml:space="preserve">
          <source>REST framework introduces a &lt;code&gt;Request&lt;/code&gt; object that extends the regular &lt;code&gt;HttpRequest&lt;/code&gt;, and provides more flexible request parsing. The core functionality of the &lt;code&gt;Request&lt;/code&gt; object is the &lt;code&gt;request.data&lt;/code&gt; attribute, which is similar to &lt;code&gt;request.POST&lt;/code&gt;, but more useful for working with Web APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f68b87812eec299799c438ac4923c01341c7298" translate="yes" xml:space="preserve">
          <source>REST framework is a &lt;em&gt;collaboratively funded project&lt;/em&gt;. If you use REST framework commercially we strongly encourage you to invest in its continued development by &lt;strong&gt;&lt;a href=&quot;https://www.django-rest-framework.org/community/funding/&quot;&gt;signing up for a paid plan&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2360a55c608ac4b94dd40f7936f310142b0a382" translate="yes" xml:space="preserve">
          <source>REST framework permissions also support object-level permissioning. Object level permissions are used to determine if a user should be allowed to act on a particular object, which will typically be a model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe9515e608a58af6db3d51ab8fe5169fb332dc8" translate="yes" xml:space="preserve">
          <source>REST framework provides a number of authentication schemes out of the box, and also allows you to implement custom schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15cc09c94bc4879d337f8fe40525b80ae776644" translate="yes" xml:space="preserve">
          <source>REST framework provides an &lt;code&gt;APIView&lt;/code&gt; class, which subclasses Django's &lt;code&gt;View&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc9fad60070b310dbe25f28647a6ad9d0047433" translate="yes" xml:space="preserve">
          <source>REST framework provides flexible, per-request authentication, that gives you the ability to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492d1a02bdce0c7351e3bd3500e69778eef6312b" translate="yes" xml:space="preserve">
          <source>REST framework provides two utility functions to make it more simple to return absolute URIs from your Web API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf677aac99248dc5489ce84e986610113da9607" translate="yes" xml:space="preserve">
          <source>REST framework provides two wrappers you can use to write API views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e265b3f93979d9e2787e01b71f2b974c595c18c" translate="yes" xml:space="preserve">
          <source>REST framework requires the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d08ab92c3b61083995d9b01687e314ea9c55e63" translate="yes" xml:space="preserve">
          <source>REST framework supports HTTP content negotiation by providing a &lt;code&gt;Response&lt;/code&gt; class which allows you to return content that can be rendered into multiple content types, depending on the client request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0663d6160fea974e4092f8a0772107677e8ee887" translate="yes" xml:space="preserve">
          <source>REST framework supports a few browser enhancements such as browser-based &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; forms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42daee16fffebc5f54a6ef88ecba15118ce0b0e9" translate="yes" xml:space="preserve">
          <source>REST framework supports all of these styles, and can apply them across forward or reverse relationships, or apply them across custom managers such as generic foreign keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158f45037357943662d92c79cc139aa30173c666" translate="yes" xml:space="preserve">
          <source>REST framework uses a simple style of content negotiation to determine which media type should be returned to a client, based on the available renderers, the priorities of each of those renderers, and the client's &lt;code&gt;Accept:&lt;/code&gt; header. The style used is partly client-driven, and partly server-driven.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60703ba510378b0c661036811734c7adb1de777c" translate="yes" xml:space="preserve">
          <source>REST framework's &lt;code&gt;Request&lt;/code&gt; class extends the standard &lt;code&gt;HttpRequest&lt;/code&gt;, adding support for REST framework's flexible request parsing and request authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb153b9b5177b6ef9d9ed42f63210a4a4684fff" translate="yes" xml:space="preserve">
          <source>REST framework's Request objects provide flexible request parsing that allows you to treat requests with JSON data or other media types in the same way that you would normally deal with form data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef79add22e38cf53cc3e9372ab3622d5efd62ad" translate="yes" xml:space="preserve">
          <source>REST framework's content negotiation classes handle selection of both the appropriate parser for the request, and the appropriate renderer for the response, so you should implement both the &lt;code&gt;.select_parser(request, parsers)&lt;/code&gt; and &lt;code&gt;.select_renderer(request, renderers, format_suffix)&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5837ca6ada1d2cb673a680eab91d539a65045de5" translate="yes" xml:space="preserve">
          <source>REST framework's views handle various exceptions, and deal with returning appropriate error responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1667358e0c127c960f41d632436bcb17139bf35c" translate="yes" xml:space="preserve">
          <source>Raise a validation error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c92e184a9403cf0278350ce60f7f20187a7cab9" translate="yes" xml:space="preserve">
          <source>Raised if the request contains malformed data when accessing &lt;code&gt;request.data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac960a02b71c3c8f60e07fd3f6edfea1be98cdf" translate="yes" xml:space="preserve">
          <source>Raised if there are no parsers that can handle the content type of the request data when accessing &lt;code&gt;request.data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db406367f67f4bf92e92b22fda924a8819f393a" translate="yes" xml:space="preserve">
          <source>Raised when a resource does not exists at the given URL. This exception is equivalent to the standard &lt;code&gt;Http404&lt;/code&gt; Django exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0c211abf448ce4f4e2f91369252198096a2d14" translate="yes" xml:space="preserve">
          <source>Raised when an authenticated request fails the permission checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2675d0d5097477c1cddf1170b94bea34a0e89b26" translate="yes" xml:space="preserve">
          <source>Raised when an incoming request fails the throttling checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bdc7bdac61cb8bfd4de6ed80117827693a9a0b1" translate="yes" xml:space="preserve">
          <source>Raised when an incoming request includes incorrect authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a3b50bda3ac92714bc9863a82cfb7b1947887b" translate="yes" xml:space="preserve">
          <source>Raised when an incoming request occurs that does not map to a handler method on the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d7e45d41a92473fd618e52af5e817f1f5008b8" translate="yes" xml:space="preserve">
          <source>Raised when an incoming request occurs with an &lt;code&gt;Accept&lt;/code&gt; header that cannot be satisfied by any of the available renderers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc735d066b051212660790240eccfc8cb1c88ea" translate="yes" xml:space="preserve">
          <source>Raised when an unauthenticated request fails the permission checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a45199f4ebba1d4ce008f3ab4247300cb1a28a2" translate="yes" xml:space="preserve">
          <source>Raising an exception on invalid data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2d62f8a01d436ee4b6b0251db223796267aced" translate="yes" xml:space="preserve">
          <source>Raising validation errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6dd0e17a3a1c90245627e3c8e42c98d05a9c5e" translate="yes" xml:space="preserve">
          <source>Rather than relative URLs, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefb41d5ac993924ddbde4d7bb64637f02dfc047" translate="yes" xml:space="preserve">
          <source>Rather than write multiple views we're grouping together all the common behavior into classes called &lt;code&gt;ViewSets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90726a283a16293be3b685bbadc17b2e18188ea5" translate="yes" xml:space="preserve">
          <source>Rather than writing your own viewsets, you'll often want to use the existing base classes that provide a default set of behavior. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3133fa43b1596a3a2ad081bd82bb3b7feec05c2" translate="yes" xml:space="preserve">
          <source>Read-only BaseSerializer classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff14213f1f79737792047d6e5dc9c4b0e9fdb3c" translate="yes" xml:space="preserve">
          <source>Read-only fields are included in the API output, but should not be included in the input during create or update operations. Any 'read_only' fields that are incorrectly included in the serializer input will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3b4ec76d74814111b1cc49af788792a6675cc7" translate="yes" xml:space="preserve">
          <source>Read-write BaseSerializer classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8558bb40fd34dc2246346fdfd0db426ab1bcf2cb" translate="yes" xml:space="preserve">
          <source>ReadOnlyField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631cd46f76e064977e92b8ac83f7d8e5f4a045df" translate="yes" xml:space="preserve">
          <source>ReadOnlyModelViewSet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5cd62637be1653b4e5db14e6962c7eb03cdfe42" translate="yes" xml:space="preserve">
          <source>Really we'd like all code snippets to be visible to anyone, but also make sure that only the user that created a code snippet is able to update or delete it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5844da1b0e0d971812044e0db1ad44b4c4902fda" translate="yes" xml:space="preserve">
          <source>Redirection - 3xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20bb0f7c4d78b01fa838319a2981e9b417f1f05" translate="yes" xml:space="preserve">
          <source>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ec4bae787e02e75ae9439f5fbfc851c887f70f" translate="yes" xml:space="preserve">
          <source>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7338b5245c44e48d0d288fd4ec6f22445873f8e" translate="yes" xml:space="preserve">
          <source>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405dbb3628a89c922fce6ec4735d55b03ee9ebeb" translate="yes" xml:space="preserve">
          <source>Ref: Authentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abba040e64db0d4437cba8ea3b35460e5c9f31e5" translate="yes" xml:space="preserve">
          <source>Ref: Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49fba8e0e98053464a3342a4e92330e762b6200" translate="yes" xml:space="preserve">
          <source>Ref: Filtering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31bd099533a9ff44a57af96cf408a98173f4bb07" translate="yes" xml:space="preserve">
          <source>Ref: Generic views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c808cd30dc66da1e8ce8cd4fa5e8a1a30054a5b" translate="yes" xml:space="preserve">
          <source>Ref: Pagination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2229b443d2b01e89a485bcde6376d87e34967558" translate="yes" xml:space="preserve">
          <source>Ref: Parsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a2e90b18f77488612161445f1280401515c977" translate="yes" xml:space="preserve">
          <source>Ref: Permissions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dff6ca594597785b8d8694199a1c43e65927650" translate="yes" xml:space="preserve">
          <source>Ref: Renderers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1962544bed979f188166c8eca645878d4548f4" translate="yes" xml:space="preserve">
          <source>Ref: Routers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4347d28065f13f26bc9b61911dcd1efc7339fb69" translate="yes" xml:space="preserve">
          <source>Ref: Serializer fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a8fa573d56a40e5c337e389ad3f9508a316df7" translate="yes" xml:space="preserve">
          <source>Ref: Serializer relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921153299896d17c05ab76067cb0c298d24a8072" translate="yes" xml:space="preserve">
          <source>Ref: Serializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d293fe82987df25fdb0b524123b6b746f1530b" translate="yes" xml:space="preserve">
          <source>Ref: Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655c2fcd56586488e094dcd8e1d213c05d101fc4" translate="yes" xml:space="preserve">
          <source>Ref: Throttling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5764974b13ec74cf33917e3923ecf23091085bca" translate="yes" xml:space="preserve">
          <source>Ref: Validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ede1d441de942646a3344ab885b59d5a7118b1" translate="yes" xml:space="preserve">
          <source>Ref: Versioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bb8dce334d5890ef27c3451513c4e657691d33" translate="yes" xml:space="preserve">
          <source>Ref: ViewSets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab20e00cd979d08454c70130ad88e5f29aaa27b0" translate="yes" xml:space="preserve">
          <source>Refactoring to use ViewSets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d471f36dbc2982caaa3c8d1076d2760a3dc1a3" translate="yes" xml:space="preserve">
          <source>RegexField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0429828de082200e1eed68f832107b100865e5" translate="yes" xml:space="preserve">
          <source>Registering the viewsets with the router is similar to providing a urlpattern. We include two arguments - the URL prefix for the views, and the viewset itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e14322d05b8be1e3275c87c5a2dd1a9f497c78" translate="yes" xml:space="preserve">
          <source>Relational fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca24410212670164bb82955818ef65913d011e9" translate="yes" xml:space="preserve">
          <source>Relational fields are used to represent model relationships. They can be applied to &lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;ManyToManyField&lt;/code&gt; and &lt;code&gt;OneToOneField&lt;/code&gt; relationships, as well as to reverse relationships, and custom relationships such as &lt;code&gt;GenericForeignKey&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a825474b932386d2c40ba0b374e46d68103b0543" translate="yes" xml:space="preserve">
          <source>Relationships use &lt;code&gt;HyperlinkedRelatedField&lt;/code&gt;, instead of &lt;code&gt;PrimaryKeyRelatedField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619841dbc69ba7a2cecf822bd9c270fd14a313a8" translate="yes" xml:space="preserve">
          <source>RemoteUserAuthentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc95ef5866b51fb2e2f1a3e5068f3f8c76d8aaa9" translate="yes" xml:space="preserve">
          <source>Render the HTTP status code and text, for example &quot;404 Not Found&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb59598c634370a7e7270b7912d5ffc5e9389ddc" translate="yes" xml:space="preserve">
          <source>Renderers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18047b947a4e03aaee4f9221eac1c0bfa4baf250" translate="yes" xml:space="preserve">
          <source>Rendering responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b78e8c886b0f6a16c0f2ac093d1c8f5c9e2b1c" translate="yes" xml:space="preserve">
          <source>Renders data into HTML for an admin-like display:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864b07257725389965ae34624fb0a9ab4204098e" translate="yes" xml:space="preserve">
          <source>Renders data into HTML for the Browsable API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bd32225aa732513c197619ab254b7bb2dd9c4d" translate="yes" xml:space="preserve">
          <source>Renders data returned by a serializer into an HTML form. The output of this renderer does not include the enclosing &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags, a hidden CSRF input or any submit buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054c463dc5f42f114d9604fe29c7deb77545c59a" translate="yes" xml:space="preserve">
          <source>Renders data to HTML, using Django's standard template rendering. Unlike other renderers, the data passed to the &lt;code&gt;Response&lt;/code&gt; does not need to be serialized. Also, unlike other renderers, you may want to include a &lt;code&gt;template_name&lt;/code&gt; argument when creating the &lt;code&gt;Response&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c236003b202a54e0c358af86e709c8e72dea1e6" translate="yes" xml:space="preserve">
          <source>Renders the request data into &lt;code&gt;JSON&lt;/code&gt;, using utf-8 encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfd663c4b864341449fcbe2c63f20f1dc2ba35a" translate="yes" xml:space="preserve">
          <source>Repeated logic can be combined into a single class. In the above example, we only need to specify the &lt;code&gt;queryset&lt;/code&gt; once, and it'll be used across multiple views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3003ae03d30be0e2b1c9ed8ad581657a52abd788" translate="yes" xml:space="preserve">
          <source>Request objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff112a80688d34e1d2801a0af88fb33c0839c5c" translate="yes" xml:space="preserve">
          <source>Request parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7194e6a0d0b838382b202853e7c198d693fbabc" translate="yes" xml:space="preserve">
          <source>Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31a577abf3f1936075b663dcf77c17e57528acb" translate="yes" xml:space="preserve">
          <source>Requests passed to the handler methods will be REST framework's &lt;code&gt;Request&lt;/code&gt; instances, not Django's &lt;code&gt;HttpRequest&lt;/code&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f857cce3beafccc0d18ccdb009ede46e453abec1" translate="yes" xml:space="preserve">
          <source>RequestsClient</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567c7a88cb8e256ec6cfb7e6ee98b0842081b33c" translate="yes" xml:space="preserve">
          <source>RequestsClient and working with the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e44eac1867a5f49afff590b28705cfd584adb62" translate="yes" xml:space="preserve">
          <source>Requires either the &lt;code&gt;Pillow&lt;/code&gt; package or &lt;code&gt;PIL&lt;/code&gt; package. The &lt;code&gt;Pillow&lt;/code&gt; package is recommended, as &lt;code&gt;PIL&lt;/code&gt; is no longer actively maintained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96d91b6d9546af9ff2b726e00a19002e5be8a3a" translate="yes" xml:space="preserve">
          <source>Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your index... a resourceful route declares them in a single line of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c78c512002853b251ef9078ef6fdf5584fac17" translate="yes" xml:space="preserve">
          <source>Response objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de3193bd59587f34b8ed4f63db914502e1ada66" translate="yes" xml:space="preserve">
          <source>Response status codes beginning with the digit &quot;5&quot; indicate cases in which the server is aware that it has erred or is incapable of performing the request. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d449e0ee1765be49f04bcca59db5994625740d6" translate="yes" xml:space="preserve">
          <source>Response()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633f6e8b851aad01759e04e23cfe5188859a4d5b" translate="yes" xml:space="preserve">
          <source>Responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f9c2c26414593bc8073bed608705d8cddd422d" translate="yes" xml:space="preserve">
          <source>Rest Framework Generic Relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8be4775f6e23fad95d4c07938f76187ddb56bc17" translate="yes" xml:space="preserve">
          <source>RetrieveAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4e65357b0f00d2b4751beba32eec30ed0ac257" translate="yes" xml:space="preserve">
          <source>RetrieveDestroyAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b252bf85f84e57930516d774b14bc3ddc92d1d2f" translate="yes" xml:space="preserve">
          <source>RetrieveModelMixin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3305a9519a28b6d27eec3f986d609f186e6fde2" translate="yes" xml:space="preserve">
          <source>RetrieveUpdateAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6864ef52b7ec2d874c793e23e797df4c129ee17e" translate="yes" xml:space="preserve">
          <source>RetrieveUpdateDestroyAPIView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e35e1b4e423f2c0d8354fd9a5c9d92291c6cff" translate="yes" xml:space="preserve">
          <source>Returning URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2857a79b63bc9b6f7eba27f6c3277ce936c3e430" translate="yes" xml:space="preserve">
          <source>Returns a URL pattern list which includes format suffix patterns appended to each of the URL patterns provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90bc49086b251cda57f9a201391a353cca6f0dc" translate="yes" xml:space="preserve">
          <source>Returns a dictionary that represents the OpenAPI schema:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc24ece53d3977f0a6add646388b4a0a8070050" translate="yes" xml:space="preserve">
          <source>Returns a response with status code &lt;code&gt;400&lt;/code&gt; and &lt;code&gt;application/json&lt;/code&gt; content type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4948b35a5a0f84bc7b385e81f437525a2baff00e" translate="yes" xml:space="preserve">
          <source>Returns a response with status code &lt;code&gt;500&lt;/code&gt; and &lt;code&gt;application/json&lt;/code&gt; content type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0529855d1c02c838c809353001a154fd48ea49a" translate="yes" xml:space="preserve">
          <source>Returns an object instance that should be used for detail views. Defaults to using the &lt;code&gt;lookup_field&lt;/code&gt; parameter to filter the base queryset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93cc6737de53495a50ea03f3fcd84d3f1742adc" translate="yes" xml:space="preserve">
          <source>Returns the class that should be used for the serializer. Defaults to returning the &lt;code&gt;serializer_class&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2551bd36d5257bd85926bcd7b40ba7f2b86a5b15" translate="yes" xml:space="preserve">
          <source>Returns the queryset that should be used for list views, and that should be used as the base for lookups in detail views. Defaults to returning the queryset specified by the &lt;code&gt;queryset&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8839eaf3a080a07477af458a5c26e6803bd86d9" translate="yes" xml:space="preserve">
          <source>Reverse relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021a44eec413b01bdb27801d4c528b87525bf5d2" translate="yes" xml:space="preserve">
          <source>Reversing URLs for versioned APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7261c3b09d5103cf7fbc0f2e35796d5f25a9d" translate="yes" xml:space="preserve">
          <source>Reversing action URLs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c613fa4e207ca1df5f683f7e749421992d7371e" translate="yes" xml:space="preserve">
          <source>Rewriting our API using class-based views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738fd18a3f32bfa3c466b005712a54adba21a248" translate="yes" xml:space="preserve">
          <source>Right now we have endpoints for 'snippets' and 'users', but we don't have a single entry point to our API. To create one, we'll use a regular function-based view and the &lt;code&gt;@api_view&lt;/code&gt; decorator we introduced earlier. In your &lt;code&gt;snippets/views.py&lt;/code&gt; add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e01b9f05e43dffc77806552385ef2bc250848d" translate="yes" xml:space="preserve">
          <source>Right now, if we created a code snippet, there'd be no way of associating the user that created the snippet, with the snippet instance. The user isn't sent as part of the serialized representation, but is instead a property of the incoming request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d184916a450cba2b8f0c6e27ba85a391979732f9" translate="yes" xml:space="preserve">
          <source>Right, we'd better write some views then. Open &lt;code&gt;tutorial/quickstart/views.py&lt;/code&gt; and get typing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc9b74db6a17f69382e156593de1f1b3cc09561" translate="yes" xml:space="preserve">
          <source>Rollbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71de1eeb90eff3c477ad64ebacc7e70e1fbe621" translate="yes" xml:space="preserve">
          <source>Routers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bc1c8a8728d1215d3bb1e27b7047521c4d46a3" translate="yes" xml:space="preserve">
          <source>Routing additional HTTP methods for extra actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8778077e3d1a7ac817a0486071e28cf2b43d90e" translate="yes" xml:space="preserve">
          <source>Routing for extra actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4744abb68fdceb42247d8ae443ad8ab372339ce" translate="yes" xml:space="preserve">
          <source>SCHEMA_COERCE_METHOD_NAMES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5add3889c4ad5ddd151b318322bcca4a2ba8f4f8" translate="yes" xml:space="preserve">
          <source>SCHEMA_COERCE_PATH_PK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5931f71005424afff1e52abc674cfc994a8f0f" translate="yes" xml:space="preserve">
          <source>SEARCH_PARAM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa58e9a7b4d5e163ee88f0a9400f5b72e6e0b7c" translate="yes" xml:space="preserve">
          <source>STRICT_JSON</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c829b40a5d73ea25cfba7437bfb99e6a3e200f" translate="yes" xml:space="preserve">
          <source>Saving instances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff33a126d41c71a83c268efd8ae036fddfee0ff" translate="yes" xml:space="preserve">
          <source>Say we have a URL for a customer object that takes two keyword arguments, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140309ac8d63e95f829a3122153fa69614ba2d48" translate="yes" xml:space="preserve">
          <source>Saying [that class-based views] is always the superior solution is a mistake.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5230ecdf4e78f0dd162281a0a78c6cdc853cbe8" translate="yes" xml:space="preserve">
          <source>Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952603677f6e7579c7becafc9fb7467d1ef86433" translate="yes" xml:space="preserve">
          <source>Schema Level Customization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8301485eeb88cd7c0442918fd650487b6d5917a1" translate="yes" xml:space="preserve">
          <source>Schema generation controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce8ec153436cd20f0e312cb2d9136220b119098" translate="yes" xml:space="preserve">
          <source>SchemaGenerator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f37eaafb01960f326d5074fa291f5bc9d658a51" translate="yes" xml:space="preserve">
          <source>ScopedRateThrottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2059f77918fcdcf68dd006edc6712bc894b88ab0" translate="yes" xml:space="preserve">
          <source>SearchFilter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd9664cd8568a6b2a24f1441dd8b59f0a9ccb6f" translate="yes" xml:space="preserve">
          <source>Section 6.2.1 does not say that content negotiation should be used all the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9f93f0af11ac6c537ec0c3257c849b7ad8f4ee" translate="yes" xml:space="preserve">
          <source>See Django's &lt;a href=&quot;https://docs.djangoproject.com/en/1.11/topics/http/urls/#url-namespaces&quot;&gt;URL namespaces docs&lt;/a&gt; and the &lt;a href=&quot;https://docs.djangoproject.com/en/2.0/ref/urls/#include&quot;&gt;&lt;code&gt;include&lt;/code&gt; API reference&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a0c4f12a9047d3476460bc7172e5e9de744d07" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;StaticHTMLRenderer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71baa2b6c9b41f4533785a289bbd207652d7e510" translate="yes" xml:space="preserve">
          <source>See also: &lt;code&gt;TemplateHTMLRenderer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88e0b66a4d13b135b04dbaf1ded55766096e83e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://www.django-rest-framework.org/community/contributing/&quot;&gt;Contribution guidelines&lt;/a&gt; for information on how to clone the repository, run the test suite and contribute changes back to REST Framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b960da029e0ae5fbaadd210332af05b2ee82bdb" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://www.django-rest-framework.org/topics/browsable-api/&quot;&gt;browsable api&lt;/a&gt; topic for more information about the browsable API feature and how to customize it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84df64cf1273394afbfad545f607a0b70c90a6ed" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://www.django-rest-framework.org/topics/html-and-forms/&quot;&gt;&lt;em&gt;HTML &amp;amp; Forms&lt;/em&gt; Topic Page&lt;/a&gt; for further examples of &lt;code&gt;TemplateHTMLRenderer&lt;/code&gt; usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fac9119000f710ae014b6707c816b5a1e4343a" translate="yes" xml:space="preserve">
          <source>See the Django documentation on &lt;a href=&quot;https://docs.djangoproject.com/en/stable/topics/db/queries/#following-relationships-backward&quot;&gt;reverse relationships&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4e090e985756b4da07ef4f0731461ecdab9033" translate="yes" xml:space="preserve">
          <source>Select field cutoffs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b49e7940329158c1cfb32de62a6b2d865579b9e" translate="yes" xml:space="preserve">
          <source>Send a description of the issue via email to &lt;a href=&quot;mailto:rest-framework-security@googlegroups.com&quot;&gt;rest-framework-security@googlegroups.com&lt;/a&gt;. The project maintainers will then work with you to resolve any issues where required, prior to any public disclosure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f228be7faef7815f5475737e55f8ffbdd2b4b6" translate="yes" xml:space="preserve">
          <source>Sentry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9899b9d88f2864ca65e2110a5300bdbf12e07758" translate="yes" xml:space="preserve">
          <source>Serialising:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f27bca8d94ff7f010138473fa6661d28c7adcc" translate="yes" xml:space="preserve">
          <source>Serializer Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39634b627817514736bd09d1227d9da1175dd5cc" translate="yes" xml:space="preserve">
          <source>Serializer Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d67467effbdef23e6cb11e953883458da97e7b9" translate="yes" xml:space="preserve">
          <source>Serializer classes can also include reusable validators that are applied to the complete set of field data. These validators are included by declaring them on an inner &lt;code&gt;Meta&lt;/code&gt; class, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc431250d08b753b14c186b8f91d7dd6a494c59" translate="yes" xml:space="preserve">
          <source>Serializer classes generate helpful verbose representation strings, that allow you to fully inspect the state of their fields. This is particularly useful when working with &lt;code&gt;ModelSerializers&lt;/code&gt; where you want to determine what set of fields and validators are being automatically created for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9318b78a7cd321867a9f36d5d824ba82cb4fe254" translate="yes" xml:space="preserve">
          <source>Serializer fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef880d50270812093c055bc663b7545dd877a06b" translate="yes" xml:space="preserve">
          <source>Serializer fields handle converting between primitive values and internal datatypes. They also deal with validating input values, as well as retrieving and setting the values from their parent objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7c361ca63aa09669fb1324ba916a1ccc3f3835" translate="yes" xml:space="preserve">
          <source>Serializer relations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314e0789af8c689409f6c5c15b7d4daa050f3c00" translate="yes" xml:space="preserve">
          <source>SerializerMethodField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71796031218483adb9338df6ac1fe8ad1217e178" translate="yes" xml:space="preserve">
          <source>Serializers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04bf7bbce86a8301afb0eb57e1fe511b54bfc49" translate="yes" xml:space="preserve">
          <source>Serializers allow complex data such as querysets and model instances to be converted to native Python datatypes that can then be easily rendered into &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;XML&lt;/code&gt; or other content types. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98466d2f6e13bf79068964926563aa6a99df754" translate="yes" xml:space="preserve">
          <source>Serializing multiple objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95360ae238038149f91fad4eb8279d556428144b" translate="yes" xml:space="preserve">
          <source>Serializing objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b086fe394120114406b6052be2bd306161f4d988" translate="yes" xml:space="preserve">
          <source>Serpy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d10f5d13256694298e675a4b3fc379b9426cb0" translate="yes" xml:space="preserve">
          <source>Serve both regular HTML webpages, and JSON based API responses from the same endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebc842f88acacdc9a1ab92dcddb618db61a8a81" translate="yes" xml:space="preserve">
          <source>Server Error - 5xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487982028d405a03f06253978dec1f602a2f42da" translate="yes" xml:space="preserve">
          <source>SessionAuthentication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92e1ed6e3644333818b089a8427e2fb2bc49ca3" translate="yes" xml:space="preserve">
          <source>Set as &lt;code&gt;handler400&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7914f2a542b03eb757e20e0dab3b3154c01d48dc" translate="yes" xml:space="preserve">
          <source>Set as &lt;code&gt;handler500&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac8c412b70b51b9475e902dfa480b1126ed6bc1" translate="yes" xml:space="preserve">
          <source>Set automatically by the &lt;code&gt;APIView&lt;/code&gt; or &lt;code&gt;@api_view&lt;/code&gt; immediately before the response is returned from the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fe2b4f60f7f88814bcab603760ab291137e758" translate="yes" xml:space="preserve">
          <source>Set the relationship to &lt;code&gt;NULL&lt;/code&gt; in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729fde881b9c1ce1956509eda5a8ccae26286095" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;True&lt;/code&gt; to ensure that the field is used when serializing a representation, but is not used when creating or updating an instance during deserialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b783073995002441de5c44f12e348d128547c2" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;True&lt;/code&gt; to ensure that the field may be used when updating or creating an instance, but is not included when serializing the representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1caf317e3be78959fc09e44e42c04045813ed4b" translate="yes" xml:space="preserve">
          <source>Setting filter backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b260b1b74c62ff3d8652742c4efa9190fafead" translate="yes" xml:space="preserve">
          <source>Setting the authentication scheme</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564cbcf6d764108fcfd8e906676cde6036246fab" translate="yes" xml:space="preserve">
          <source>Setting the available formats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d2f6385d4f3e1856317e270b80900c1f3bf741a" translate="yes" xml:space="preserve">
          <source>Setting the character set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a4d109e2e4748afd906d42dd92a05335e2adda" translate="yes" xml:space="preserve">
          <source>Setting the content negotiation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03c654b5d2f77e93757602c724623d5e87b24477" translate="yes" xml:space="preserve">
          <source>Setting the default format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f90e15390054e770c3eb615cc5f46d349ba6fed" translate="yes" xml:space="preserve">
          <source>Setting the metadata scheme</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407eb492d514a883b1a2baa99ac4024f54fc8fb5" translate="yes" xml:space="preserve">
          <source>Setting the pagination style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50468dff052e7842da4cc841b067689d1c297dde" translate="yes" xml:space="preserve">
          <source>Setting the parsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131e71f927d71e7d3e6a4bd4a06aff06a0513431" translate="yes" xml:space="preserve">
          <source>Setting the permission policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337b6be62b905245803ef9143d6c6d59e8c05f31" translate="yes" xml:space="preserve">
          <source>Setting the renderers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffac8ce16bdd86b0817740926f760bae8807c2c5" translate="yes" xml:space="preserve">
          <source>Setting the throttling policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10eebcf3dcac617d4fde477adfc0b69d12cc70b1" translate="yes" xml:space="preserve">
          <source>Setting this to &lt;code&gt;False&lt;/code&gt; also allows the object attribute or dictionary key to be omitted from output when serializing the instance. If the key is not present it will simply not be included in the output representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d6e1319feaf00a87a8fd73254abfb70e4edbcf" translate="yes" xml:space="preserve">
          <source>Setting up a new environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70141fb124d4755c0506b6893cb2bad35ead79df" translate="yes" xml:space="preserve">
          <source>Setting up the cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7c7994616a220b47b312bc80aa73aab4f85e3d" translate="yes" xml:space="preserve">
          <source>Should be a non-nullable value that can be coerced to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157d19057bc7c0ee6cb5f8a05dde0373cf04e2c0" translate="yes" xml:space="preserve">
          <source>Should be an unchanging value, such as a timestamp, slug, or other field that is only set once, on creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa77c0dbd0117cc8c25e4d8e7538e48fd39a392" translate="yes" xml:space="preserve">
          <source>Should be unique, or nearly unique. Millisecond precision timestamps are a good example. This implementation of cursor pagination uses a smart &quot;position plus offset&quot; style that allows it to properly support not-strictly-unique values as the ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1982ac0aaa1e01c4ea67d03f383844dc5f3921c" translate="yes" xml:space="preserve">
          <source>Should not be a float. Precision errors easily lead to incorrect results. Hint: use decimals instead. (If you already have a float field and must paginate on that, an &lt;a href=&quot;https://gist.github.com/keturn/8bc88525a183fd41c73ffb729b8865be#file-fpcursorpagination-py&quot;&gt;example &lt;code&gt;CursorPagination&lt;/code&gt; subclass that uses decimals to limit precision is available here&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf997c6d4416ec1e36bcb692ddf7f3436ae8c212" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;DjangoModelPermissions&lt;/code&gt;, but also allows unauthenticated users to have read-only access to the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a038dd8d0d363deb606a76af572f5cefd795fa52" translate="yes" xml:space="preserve">
          <source>Similar to Django forms, you can extend and reuse serializers through inheritance. This allows you to declare a common set of fields or methods on a parent class that can then be used in a number of serializers. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1e73ff2a33c0e0b264da58b64d4f91b0073c97" translate="yes" xml:space="preserve">
          <source>Similarly if a nested representation should be a list of items, you should pass the &lt;code&gt;many=True&lt;/code&gt; flag to the nested serialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2db6ce36a69da9037f43f0f84350f6a4ad51dd" translate="yes" xml:space="preserve">
          <source>Similarly, the &lt;code&gt;.validated_data&lt;/code&gt; property will include nested data structures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0adbe96e55f32fcfe8a67f9d6434f40a780493" translate="yes" xml:space="preserve">
          <source>Similarly, we can control the format of the request that we send, using the &lt;code&gt;Content-Type&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ec65ab40cc71585b934fadcb07ab902486beb6" translate="yes" xml:space="preserve">
          <source>Similarly, you can have the same json displayed by visiting these URLs in a web browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e71a94563d259d7059a656944422cded05a6a4" translate="yes" xml:space="preserve">
          <source>Simple default implementations for the &lt;code&gt;create()&lt;/code&gt; and &lt;code&gt;update()&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0328bff3182af84a5e9bfb982c50f412cfbb4351" translate="yes" xml:space="preserve">
          <source>SimpleRouter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d65632d68627ee45cae101ac5504208046a514" translate="yes" xml:space="preserve">
          <source>Since this parser's &lt;code&gt;media_type&lt;/code&gt; matches any content type, &lt;code&gt;FileUploadParser&lt;/code&gt; should generally be the only parser set on an API view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4db72fcad763718efe427007d7c3462a2ed3aba" translate="yes" xml:space="preserve">
          <source>Since version 3.3.0, it is &lt;strong&gt;mandatory&lt;/strong&gt; to provide one of the attributes &lt;code&gt;fields&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbabda59e71d22499ba4e47af8cd517297d68c8b" translate="yes" xml:space="preserve">
          <source>Since version 3.6.4 it's possible to generate a user token using the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87c9449797d6bbaa4e53274adaf5b4d5f06a6d6" translate="yes" xml:space="preserve">
          <source>SlugField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da064478b1fdf13895d12422ef4c1eb7fafdbf30" translate="yes" xml:space="preserve">
          <source>SlugRelatedField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aef59106baaf97ce2985d6d863e510792e3d603" translate="yes" xml:space="preserve">
          <source>So far, so good. It looks pretty similar to the previous case, but we've got better separation between the different HTTP methods. We'll also need to update the instance view in &lt;code&gt;views.py&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38723025253bf17d36ff220c824fc5c60b67d2a7" translate="yes" xml:space="preserve">
          <source>Some Web frameworks such as Rails provide functionality for automatically determining how the URLs for an application should be mapped to the logic that deals with handling incoming requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d461f4561f192d27b7b9fa6c13efd73c75c41400" translate="yes" xml:space="preserve">
          <source>Some other custom representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ce8c9b47c2e0b42d00f473088fd1fc5d8d9678" translate="yes" xml:space="preserve">
          <source>Some reasons this might be useful include...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df78c26eed05e141edd8d6499ef5b2f30b78dd32" translate="yes" xml:space="preserve">
          <source>Some reasons you might want to use REST framework:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b957dac1aac10d6b137f7b8d84b7d063460bf9a" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to bypass authentication entirely and force all requests by the test client to be automatically treated as authenticated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0a754c6dcca8c958dfb538aa44c529d8d0ec74" translate="yes" xml:space="preserve">
          <source>Sometimes you'll want your view code to be able to inject additional data at the point of saving the instance. This additional data might include information like the current user, the current time, or anything else that is not part of the request data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a219e76b788661e6e020408b753053d513b8125" translate="yes" xml:space="preserve">
          <source>Specify multiple types of HTML representation for API clients to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafde7808c3f61e9098a23721c70eae79b826cb1" translate="yes" xml:space="preserve">
          <source>Specifying a default ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905a1e3620f45af1b89c08301d94922c6e48f84b" translate="yes" xml:space="preserve">
          <source>Specifying fields explicitly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e0ffd1f1069da1f04ad8d8ca6d094241a84961" translate="yes" xml:space="preserve">
          <source>Specifying nested serialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee026f07ee4b3049977a22a6ada1a8e6eb67fad" translate="yes" xml:space="preserve">
          <source>Specifying read only fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7ce229e2fcbabb78512b6b75126b7a715c9ec2" translate="yes" xml:space="preserve">
          <source>Specifying which fields may be ordered against</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a7e140cad64afa602024698f154859bb8b0e29" translate="yes" xml:space="preserve">
          <source>Specifying which fields to include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf5a53a70423e7f39900ab8e88c0dcae5268796" translate="yes" xml:space="preserve">
          <source>Standard HttpRequest attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38cfa26d089c38facf09a6db17b8fb6719c8755" translate="yes" xml:space="preserve">
          <source>Standard HttpResponse attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bcc6c953749d1fc5857a2a4e83909a39440a69" translate="yes" xml:space="preserve">
          <source>Start by adding a &lt;code&gt;format&lt;/code&gt; keyword argument to both of the views, like so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f59505ef09f4d1dada606ac1977d60ec3d2bf6" translate="yes" xml:space="preserve">
          <source>StaticHTMLRenderer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5583f5096a76c834c0bcc4f4885ffca8fe34cd" translate="yes" xml:space="preserve">
          <source>Status Codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bff13ce14f7a70a5d8ebe6f9aed5edc33830a1" translate="yes" xml:space="preserve">
          <source>Status codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc094dc983e58db8345c7b3d74c860e7b33a2d5" translate="yes" xml:space="preserve">
          <source>Strictly speaking the &lt;code&gt;json&lt;/code&gt; media type is not specified as &lt;a href=&quot;https://tools.ietf.org/html/rfc4627#section-6&quot;&gt;including additional parameters&lt;/a&gt;. If you are building a well-specified public API you might consider using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_media_type#Vendor_tree&quot;&gt;vendor media type&lt;/a&gt;. To do so, configure your renderers to use a JSON based renderer with a custom media type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f397c2fe894bbc4e9a03d886970128c384e227" translate="yes" xml:space="preserve">
          <source>String fields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53959011c52e5ee767aea980fff8ccd950e00987" translate="yes" xml:space="preserve">
          <source>StringRelatedField</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a083dca515875c9ff754f1529a476777dec0b6" translate="yes" xml:space="preserve">
          <source>Subclasses of &lt;code&gt;APIException&lt;/code&gt; raised inside REST framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617f311464f55d0ff31246c939366deb2b3555bc" translate="yes" xml:space="preserve">
          <source>Successful - 2xx</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8461134208c35250e4a014add2e1b0ebd92f871" translate="yes" xml:space="preserve">
          <source>Support the use of multiple authentication policies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdf4d0538d17fbfb77998ef365494e0b9558719" translate="yes" xml:space="preserve">
          <source>Supports usage with very large datasets. With extremely large datasets pagination using offset-based pagination styles may become inefficient or unusable. Cursor based pagination schemes instead have fixed-time properties, and do not slow down as the dataset size increases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbed9104762d24bbd35c25ba2d08aee2b9c789b1" translate="yes" xml:space="preserve">
          <source>Suppose we want to replace the default pagination output style with a modified format that includes the next and previous links under in a nested 'links' key. We could specify a custom pagination class like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2766242835aa99c97f32ae5ea08dc0be64515f2" translate="yes" xml:space="preserve">
          <source>TEST_REQUEST_DEFAULT_FORMAT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b21cc34b3a7c9980147c7ec483021c91b1406e" translate="yes" xml:space="preserve">
          <source>TEST_REQUEST_RENDERER_CLASSES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcff10d1557d276c63c24add6ad5a5118d4e375" translate="yes" xml:space="preserve">
          <source>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4415efad8f80db2789d8125ffed0553836a393f7" translate="yes" xml:space="preserve">
          <source>TIME_FORMAT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd52f3fabf110faa27e8d8338f81ec3af0f4fe44" translate="yes" xml:space="preserve">
          <source>TIME_INPUT_FORMATS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59b0421f64adb3dea4d18ca765aaf0a0ef353cd" translate="yes" xml:space="preserve">
          <source>Takes the object instance that requires serialization, and should return a primitive representation. Typically this means returning a structure of built-in Python datatypes. The exact types that can be handled will depend on the render classes you have configured for your API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc830b0e112df790bafeaa47d1cd02ceac5ad95d" translate="yes" xml:space="preserve">
          <source>Takes the unvalidated incoming data as input and should return the validated data that will be made available as &lt;code&gt;serializer.validated_data&lt;/code&gt;. The return value will also be passed to the &lt;code&gt;.create()&lt;/code&gt; or &lt;code&gt;.update()&lt;/code&gt; methods if &lt;code&gt;.save()&lt;/code&gt; is called on the serializer class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0463559421ee0189b711b38dd29173f42bb1981b" translate="yes" xml:space="preserve">
          <source>TemplateHTMLRenderer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d7c07bedd29275b3b6e25efb74eeca6fa26982" translate="yes" xml:space="preserve">
          <source>Templates will render with a &lt;code&gt;RequestContext&lt;/code&gt; which includes the &lt;code&gt;status_code&lt;/code&gt; and &lt;code&gt;details&lt;/code&gt; keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdd308955f7f408b8b6b6fa308a073ba072a786" translate="yes" xml:space="preserve">
          <source>Test settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bfd7de3b0e7fd6e89d450e052b2df0e353de69" translate="yes" xml:space="preserve">
          <source>Testing our API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2615d3b41c5adda17d5ef9c50d6ae80df5e95497" translate="yes" xml:space="preserve">
          <source>Testing our first attempt at a Web API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802b52725b6569631bb94335fbd56065e721f791" translate="yes" xml:space="preserve">
          <source>Testing responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973d90c5e5fe57a58994edd43e30038efc055e54" translate="yes" xml:space="preserve">
          <source>That doesn't mean it's always the right approach to take. There's a similar set of trade-offs to consider as when using class-based views instead of function based views. Using viewsets is less explicit than building your views individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59806672c726bef891fc5bfc82c52c7e40d43068" translate="yes" xml:space="preserve">
          <source>That's looking good. Again, it's still pretty similar to the function based view right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9370f0761144d59babb5da524bbfd80b2db365e0" translate="yes" xml:space="preserve">
          <source>The 4xx class of status code is intended for cases in which the client seems to have erred. Except when responding to a HEAD request, the server SHOULD include an entity containing an explanation of the error situation, and whether it is a temporary or permanent condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f974f8f698d1a6fedcf777e467774b94de988a3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/&quot;&gt;&lt;code&gt;DRF-extensions&lt;/code&gt; package&lt;/a&gt; includes a &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/#paginatebymaxmixin&quot;&gt;&lt;code&gt;PaginateByMaxMixin&lt;/code&gt; mixin class&lt;/a&gt; that allows your API clients to specify &lt;code&gt;?page_size=max&lt;/code&gt; to obtain the maximum allowed page size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebd8e32ccc4d691fbae7ddd89c83f0f9674a1f1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/&quot;&gt;&lt;code&gt;DRF-extensions&lt;/code&gt; package&lt;/a&gt; provides &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/#routers&quot;&gt;routers&lt;/a&gt; for creating &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/#nested-routes&quot;&gt;nested viewsets&lt;/a&gt;, &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/#collection-level-controllers&quot;&gt;collection level controllers&lt;/a&gt; with &lt;a href=&quot;https://chibisov.github.io/drf-extensions/docs/#controller-endpoint-name&quot;&gt;customizable endpoint names&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94085b27509e55c8c795519d8df2e0849ba6d06e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://django-filter.readthedocs.io/en/latest/index.html&quot;&gt;&lt;code&gt;django-filter&lt;/code&gt;&lt;/a&gt; library includes a &lt;code&gt;DjangoFilterBackend&lt;/code&gt; class which supports highly customizable field filtering for REST framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8472ee8fbfc846a4e6d817dabc81f7e01cfef13" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://drf-compound-fields.readthedocs.io&quot;&gt;drf-compound-fields&lt;/a&gt; package provides &quot;compound&quot; serializer fields, such as lists of simple values, which can be described by other fields rather than serializers with the &lt;code&gt;many=True&lt;/code&gt; option. Also provided are fields for typed dictionaries and values that can be either a specific type or a list of items of that type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5427c30793e2b4cdf4172a0cfd1be27def312e3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://florimondmanca.github.io/djangorestframework-api-key/&quot;&gt;Django REST Framework API Key&lt;/a&gt; package provides permissions classes, models and helpers to add API key authorization to your API. It can be used to authorize internal or third-party backends and services (i.e. &lt;em&gt;machines&lt;/em&gt;) which do not have a user account. API keys are stored securely using Django's password hashing infrastructure, and they can be viewed, edited and revoked at anytime in the Django admin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fada373286e1d7af7cacf1e8a850829128ffc1f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/AltSchool/dynamic-rest&quot;&gt;dynamic-rest&lt;/a&gt; package extends the ModelSerializer and ModelViewSet interfaces, adding API query parameters for filtering, sorting, and including / excluding all fields and relationships defined by your serializers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a62a19604a1efca329a1ffbe264a4d9e03afd6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/Helioscene/dry-rest-permissions&quot;&gt;DRY Rest Permissions&lt;/a&gt; package provides the ability to define different permissions for individual default and custom actions. This package is made for apps with permissions that are derived from relationships defined in the app's data model. It also supports permission checks being returned to a client app through the API's serializer. Additionally it supports adding permissions to the default and custom list actions to restrict the data they retrieve per user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7ac8bd36a8608db3d6642af8cd42cae87160db" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/Hipo/drf-extra-fields&quot;&gt;drf-extra-fields&lt;/a&gt; package provides extra serializer fields for REST framework, including &lt;code&gt;Base64ImageField&lt;/code&gt; and &lt;code&gt;PointField&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8279f7b8ef2ace42a46affae32ca8ce407cf8cda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/Ian-Foote/rest-framework-generic-relations&quot;&gt;rest-framework-generic-relations&lt;/a&gt; library provides read/write serialization for generic foreign keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a714360f580c73f28456db4a7ab92e57232bb3af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/alanjds/drf-nested-routers&quot;&gt;drf-nested-routers package&lt;/a&gt; provides routers and relationship fields for working with nested resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af1049264e7df55cb178a17aff38b4ab6faeea7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/allisson/django-rest-framework-role-filters&quot;&gt;Django Rest Framework Role Filters&lt;/a&gt; package provides simple filtering over multiple types of roles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202048ac6fd2124039f4521f651677fde177bf17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/beda-software/drf-writable-nested&quot;&gt;drf-writable-nested&lt;/a&gt; package provides writable nested model serializer which allows to create/update models with nested related data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6a0228ad0f3afd54aa565bdb834763e9fdab52" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/caxap/rest_condition&quot;&gt;REST Condition&lt;/a&gt; package is another extension for building complex permissions in a simple and convenient way. The extension allows you to combine permissions with logical operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39dc31e23e5982012243956b2b0db8c6c3ec5e7c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/clarkduvall/serpy&quot;&gt;serpy&lt;/a&gt; package is an alternative implementation for serializers that is built for speed. &lt;a href=&quot;https://github.com/clarkduvall/serpy&quot;&gt;Serpy&lt;/a&gt; serializes complex datatypes to simple native types. The native types can be easily converted to JSON or any other format needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551cac3e3c62ebf8be8882514ba77db0e92caa33" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/computer-lab/django-rest-framework-roles&quot;&gt;Django Rest Framework Roles&lt;/a&gt; package makes it easier to parameterize your API over multiple types of users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1f4331b6e952e4375d9820f47e949043a4fda6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/dbrgn/drf-dynamic-fields&quot;&gt;drf-dynamic-fields&lt;/a&gt; package provides a mixin to dynamically limit the fields per serializer to a subset specified by an URL parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79eb3fbf204829fe4c37d4365f714b355f07c012" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/djangonauts/django-rest-framework-gis&quot;&gt;django-rest-framework-gis&lt;/a&gt; package provides a &lt;code&gt;GeoFeatureModelSerializer&lt;/code&gt; serializer class that supports GeoJSON both for read and write operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0fc185c5f1a2be1d64b7716f46a9e2206e7ae0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/djangonauts/django-rest-framework-gis&quot;&gt;django-rest-framework-gis&lt;/a&gt; package provides geographic addons for django rest framework like a &lt;code&gt;GeometryField&lt;/code&gt; field and a GeoJSON serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fced487bf8ef6f3c89f8a192b66e39e9f3c40d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/djangonauts/django-rest-framework-hstore&quot;&gt;django-rest-framework-hstore&lt;/a&gt; package provides an &lt;code&gt;HStoreField&lt;/code&gt; to support &lt;a href=&quot;https://github.com/djangonauts/django-hstore&quot;&gt;django-hstore&lt;/a&gt;&lt;code&gt;DictionaryField&lt;/code&gt; model field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e8324b0df3652e03a15fa8e109358ac5bdb5cc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/djangonauts/django-rest-framework-hstore&quot;&gt;django-rest-framework-hstore&lt;/a&gt; package provides an &lt;code&gt;HStoreSerializer&lt;/code&gt; to support &lt;a href=&quot;https://github.com/djangonauts/django-hstore&quot;&gt;django-hstore&lt;/a&gt;&lt;code&gt;DictionaryField&lt;/code&gt; model field and its &lt;code&gt;schema-mode&lt;/code&gt; feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8a4219781fec5a025e790ba598eac832078ba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/evenicoulddoit/django-rest-framework-serializer-extensions&quot;&gt;django-rest-framework-serializer-extensions&lt;/a&gt; package provides a collection of tools to DRY up your serializers, by allowing fields to be defined on a per-view/request basis. Fields can be whitelisted, blacklisted and child serializers can be optionally expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611b241373aae042b4aa1e4baa355860fcc93cbe" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/evonove/django-oauth-toolkit&quot;&gt;Django OAuth Toolkit&lt;/a&gt; package provides OAuth 2.0 support and works with Python 3.4+. The package is maintained by &lt;a href=&quot;https://github.com/evonove/&quot;&gt;Evonove&lt;/a&gt; and uses the excellent &lt;a href=&quot;https://github.com/idan/oauthlib&quot;&gt;OAuthLib&lt;/a&gt;. The package is well documented, and well supported and is currently our &lt;strong&gt;recommended package for OAuth 2.0 support&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd1675f4b08cf4d08873c77224073b55ce03c34" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/miki725/django-rest-framework-bulk&quot;&gt;django-rest-framework-bulk package&lt;/a&gt; implements generic view mixins as well as some common concrete generic views to allow to apply bulk operations via API requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11168496fc45a2eb929d3a0655476bdf710be6ad" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/niwibe/djangorestframework-composed-permissions&quot;&gt;Composed Permissions&lt;/a&gt; package provides a simple way to define complex and multi-depth (with logic operators) permission objects, using small and reusable components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee48f8f151656ec237adb531b31d288c3682ec9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/philipn/django-rest-framework-filters&quot;&gt;django-rest-framework-filters package&lt;/a&gt; works together with the &lt;code&gt;DjangoFilterBackend&lt;/code&gt; class, and allows you to easily create filters across relationships, or create multiple filter lookup types for a given field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16de4cbb6591c13b4764e8db02dba8a8c8a8c0c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rsinger86/drf-access-policy&quot;&gt;Django REST - Access Policy&lt;/a&gt; package provides a way to define complex access rules in declarative policy classes that are attached to view sets or function-based views. The policies are defined in JSON in a format similar to AWS' Identity &amp;amp; Access Management policies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94630ea1be3bb7eef05442fdaf49bd068a98faa8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/rsinger86/drf-flex-fields&quot;&gt;drf-flex-fields&lt;/a&gt; package extends the ModelSerializer and ModelViewSet to provide commonly used functionality for dynamically setting fields and expanding primitive fields to nested models, both from URL parameters and your serializer class definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3647f71d7820ff7280c5665b3d4edc9b7f1fe3" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/tbeadle/django-rest-framework-link-header-pagination&quot;&gt;&lt;code&gt;django-rest-framework-link-header-pagination&lt;/code&gt; package&lt;/a&gt; includes a &lt;code&gt;LinkHeaderPagination&lt;/code&gt; class which provides pagination via an HTTP &lt;code&gt;Link&lt;/code&gt; header as described in &lt;a href=&quot;github-link-pagination&quot;&gt;Github's developer documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0a18a129227fb51990e9700388f13bf8644d43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/trollknurr/django-rest-framework-word-search-filter&quot;&gt;djangorestframework-word-filter&lt;/a&gt; developed as alternative to &lt;code&gt;filters.SearchFilter&lt;/code&gt; which will search full word in text, or exact match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d46c41656e2ba10080fd3c73894dba8af124c97" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/tuffnatty/drf-proxy-pagination&quot;&gt;&lt;code&gt;drf-proxy-pagination&lt;/code&gt; package&lt;/a&gt; includes a &lt;code&gt;ProxyPagination&lt;/code&gt; class which allows to choose pagination class with a query parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99cfd21327962a035a4f46a9ba7ce30902752a1f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/umutbozkurt/django-rest-framework-mongoengine&quot;&gt;django-rest-framework-mongoengine&lt;/a&gt; package provides a &lt;code&gt;MongoEngineModelSerializer&lt;/code&gt; serializer class that supports using MongoDB as the storage layer for Django REST framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c799ed2093748459a0eee7d0093410a5519fa6d7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/wq/html-json-forms&quot;&gt;html-json-forms&lt;/a&gt; package provides an algorithm and serializer for processing &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; submissions per the (inactive) &lt;a href=&quot;https://www.w3.org/TR/html-json-forms/&quot;&gt;HTML JSON Form specification&lt;/a&gt;. The serializer facilitates processing of arbitrarily nested JSON structures within HTML. For example, &lt;code&gt;&amp;lt;input name=&quot;items[0][id]&quot; value=&quot;5&quot;&amp;gt;&lt;/code&gt; will be interpreted as &lt;code&gt;{&quot;items&quot;: [{&quot;id&quot;: &quot;5&quot;}]}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fef5c361ebcd73eec16442f95d2344a90637944" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hawkrest.readthedocs.io/en/latest/&quot;&gt;HawkREST&lt;/a&gt; library builds on the &lt;a href=&quot;https://mohawk.readthedocs.io/en/latest/&quot;&gt;Mohawk&lt;/a&gt; library to let you work with &lt;a href=&quot;https://github.com/hueniverse/hawk&quot;&gt;Hawk&lt;/a&gt; signed requests and responses in your API. &lt;a href=&quot;https://github.com/hueniverse/hawk&quot;&gt;Hawk&lt;/a&gt; lets two parties securely communicate with each other using messages signed by a shared key. It is based on &lt;a href=&quot;https://tools.ietf.org/html/draft-hammer-oauth-v2-mac-token-05&quot;&gt;HTTP MAC access authentication&lt;/a&gt; (which was based on parts of &lt;a href=&quot;https://oauth.net/core/1.0a/&quot;&gt;OAuth 1.0&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c5343d9d72ba2a015fcd55974f504c53e64f94" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://jpadilla.github.io/django-rest-framework-oauth/&quot;&gt;Django REST framework OAuth&lt;/a&gt; package provides both OAuth1 and OAuth2 support for REST framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ca3f41f4c34b58e5486c8ad9b2604d94260d91" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://marshmallow-code.github.io/django-rest-marshmallow/&quot;&gt;django-rest-marshmallow&lt;/a&gt; package provides an alternative implementation for serializers, using the python &lt;a href=&quot;https://marshmallow.readthedocs.io/en/latest/&quot;&gt;marshmallow&lt;/a&gt; library. It exposes the same API as the REST framework serializers, and can be used as a drop-in replacement in some use-cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36847fbc9c7379de1b52a9b697a3e32fe12f3de4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://restframework.herokuapp.com/&quot;&gt;Web browsable API&lt;/a&gt; is a huge usability win for your developers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadfd9b11fbbfeadcb08d9bddac5a3c3fabab5e9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://wq.io/wq.db&quot;&gt;wq.db package&lt;/a&gt; provides an advanced &lt;a href=&quot;https://wq.io/docs/router&quot;&gt;ModelRouter&lt;/a&gt; class (and singleton instance) that extends &lt;code&gt;DefaultRouter&lt;/code&gt; with a &lt;code&gt;register_model()&lt;/code&gt; API. Much like Django's &lt;code&gt;admin.site.register&lt;/code&gt;, the only required argument to &lt;code&gt;rest.router.register_model&lt;/code&gt; is a model class. Reasonable defaults for a url prefix, serializer, and viewset will be inferred from the model and global configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28401e259d3c17b1cde2dab936bd12f3a64862a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'api-auth/'&lt;/code&gt; part of pattern can actually be whatever URL you want to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a5dd6f03ab9f7aa94ca1c9f5276c04c45e6177" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.fail()&lt;/code&gt; method is a shortcut for raising &lt;code&gt;ValidationError&lt;/code&gt; that takes a message string from the &lt;code&gt;error_messages&lt;/code&gt; dictionary. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb31645698dd25567153f45fc8a71e65e1a1d65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.is_valid()&lt;/code&gt; method takes an optional &lt;code&gt;raise_exception&lt;/code&gt; flag that will cause it to raise a &lt;code&gt;serializers.ValidationError&lt;/code&gt; exception if there are validation errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f30bb19b4cffcd3a6d342f3239cfc4d50719b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.to_html()&lt;/code&gt; and &lt;code&gt;.get_html_context()&lt;/code&gt; methods may also be overridden in a custom pagination class in order to further customize how the controls are rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2b6a4967c380af4305fe6c48c4303bb5399d64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.to_representation()&lt;/code&gt; method is called to convert the initial datatype into a primitive, serializable datatype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7cf0c0b4c78d9aef2bff71868dbf982ffd485f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.urls&lt;/code&gt; attribute on a router instance is simply a standard list of URL patterns. There are a number of different styles for how you can include these URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e3aaa5284cd69ec44a36135722596cd0dc91f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@api_view&lt;/code&gt; decorator for working with function based views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693bd5aa80ab7c9158e4c71bd2cb8d2ee20f10e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;APIClient&lt;/code&gt; class supports the same request interface as Django's standard &lt;code&gt;Client&lt;/code&gt; class. This means that the standard &lt;code&gt;.get()&lt;/code&gt;, &lt;code&gt;.post()&lt;/code&gt;, &lt;code&gt;.put()&lt;/code&gt;, &lt;code&gt;.patch()&lt;/code&gt;, &lt;code&gt;.delete()&lt;/code&gt;, &lt;code&gt;.head()&lt;/code&gt; and &lt;code&gt;.options()&lt;/code&gt; methods are all available. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958d0da90b5e70f231a7ab72fa7fc021b6919246" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;APIRequestFactory&lt;/code&gt; class supports an almost identical API to Django's standard &lt;code&gt;RequestFactory&lt;/code&gt; class. This means that the standard &lt;code&gt;.get()&lt;/code&gt;, &lt;code&gt;.post()&lt;/code&gt;, &lt;code&gt;.put()&lt;/code&gt;, &lt;code&gt;.patch()&lt;/code&gt;, &lt;code&gt;.delete()&lt;/code&gt;, &lt;code&gt;.head()&lt;/code&gt; and &lt;code&gt;.options()&lt;/code&gt; methods are all available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4130f447f0ba102b0d62d884fcf2c134ad6c5d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;APIView&lt;/code&gt; class for working with class-based views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405bb47b9825e5e9cc939596878e552197358b64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;APIView&lt;/code&gt; class or &lt;code&gt;@api_view&lt;/code&gt; decorator will ensure that this property is automatically set to a list of &lt;code&gt;Authentication&lt;/code&gt; instances, based on the &lt;code&gt;authentication_classes&lt;/code&gt; set on the view or based on the &lt;code&gt;DEFAULT_AUTHENTICATORS&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d60dda4fabc213fc160899fc93388bd1c50f4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;APIView&lt;/code&gt; class or &lt;code&gt;@api_view&lt;/code&gt; decorator will ensure that this property is automatically set to a list of &lt;code&gt;Parser&lt;/code&gt; instances, based on the &lt;code&gt;parser_classes&lt;/code&gt; set on the view or based on the &lt;code&gt;DEFAULT_PARSER_CLASSES&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce27736ed550df0b15a13eebbb242747bad9ba1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AllowAny&lt;/code&gt; permission class will allow unrestricted access, &lt;strong&gt;regardless of if the request was authenticated or unauthenticated&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c703a314588f28d3cfb6f9b2012a614c9e7ab361" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AnonRateThrottle&lt;/code&gt; will only ever throttle unauthenticated users. The IP address of the incoming request is used to generate a unique key to throttle against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98afe8cb07c049ed388ec2a93f3defb46e83266d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BaseSerializer&lt;/code&gt; class is also useful if you want to implement new generic serializer classes for dealing with particular serialization styles, or for integrating with alternative storage backends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d099070718b3fc0172f75341cbd33a6ec942ce3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CursorPagination&lt;/code&gt; class includes a number of attributes that may be overridden to modify the pagination style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86af01366da9f8f1af7a33b81cada50cabf996c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DEFAULT_THROTTLE_RATES['anon']&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b188db7306ed97234e57dcdbbaa963ade376e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DEFAULT_THROTTLE_RATES['user']&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cfa590acfa6f5445cd77aaeefa358c82abdf6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefaultRouter&lt;/code&gt; class we're using also automatically creates the API root view for us, so we can now delete the &lt;code&gt;api_root&lt;/code&gt; method from our &lt;code&gt;views&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcf36c014d92abef6ecd90fe3b0e7c7c733d6cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileField&lt;/code&gt; and &lt;code&gt;ImageField&lt;/code&gt; classes are only suitable for use with &lt;code&gt;MultiPartParser&lt;/code&gt; or &lt;code&gt;FileUploadParser&lt;/code&gt;. Most parsers, such as e.g. JSON don't support file uploads. Django's regular &lt;a href=&quot;https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-FILE_UPLOAD_HANDLERS&quot;&gt;FILE_UPLOAD_HANDLERS&lt;/a&gt; are used for handling uploaded files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0307406a9637b10ca192aee40ca555a722f344f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileUploadParser&lt;/code&gt; is for usage with native clients that can upload the file as a raw data request. For web-based uploads, or for native clients with multipart upload support, you should use the &lt;code&gt;MultiPartParser&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8683b1c8541a12c8cebd8fb4f44a4c241457dec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GenericViewSet&lt;/code&gt; class inherits from &lt;code&gt;GenericAPIView&lt;/code&gt;, and provides the default set of &lt;code&gt;get_object&lt;/code&gt;, &lt;code&gt;get_queryset&lt;/code&gt; methods and other generic view base behavior, but does not include any actions by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ba80eeb840dc6462760eb4a9017e0690b0e82e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HiddenField&lt;/code&gt; class is usually only needed if you have some validation that needs to run based on some pre-provided field values, but you do not want to expose all of those fields to the end user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709343a8ab7d7f6e13d28156e7c27cfe9421ffc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HostNameVersioning&lt;/code&gt; scheme can be awkward to use in debug mode as you will typically be accessing a raw IP address such as &lt;code&gt;127.0.0.1&lt;/code&gt;. There are various online tutorials on how to &lt;a href=&quot;https://reinteractive.net/posts/199-developing-and-testing-rails-applications-with-subdomains&quot;&gt;access localhost with a custom subdomain&lt;/a&gt; which you may find helpful in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b732e113b702fae815b39b84ffa2d80c92b837cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; class is similar to the &lt;code&gt;ModelSerializer&lt;/code&gt; class except that it uses hyperlinks to represent relationships, rather than primary keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9a6478b1f06252932ae0ac2a61c3af0ead0ce4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; has the following differences from &lt;code&gt;ModelSerializer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3726176894274acac486c8e1b99736465c8bf583" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IsAdminUser&lt;/code&gt; permission class will deny permission to any user, unless &lt;code&gt;user.is_staff&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt; in which case permission will be allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d28d538a96c837f6f8de00c972d21ce0a61048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IsAuthenticated&lt;/code&gt; permission class will deny permission to any unauthenticated user, and allow permission otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3264710e92be2dfe0cd4ba6b3be28e0573092c8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IsAuthenticatedOrReadOnly&lt;/code&gt; will allow authenticated users to perform any request. Requests for unauthorised users will only be permitted if the request method is one of the &quot;safe&quot; methods; &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; or &lt;code&gt;OPTIONS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0eda288a663d7f6df8b54c88cc45f153592657" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LimitOffsetPagination&lt;/code&gt; class includes a number of attributes that may be overridden to modify the pagination style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e239ce83acc26d8ba96adb55d14018b1d18a57d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListField&lt;/code&gt; class also supports a declarative style that allows you to write reusable list field classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a668f27a4a8ff4ce39e84680c119e0104651e77b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListSerializer&lt;/code&gt; class provides the behavior for serializing and validating multiple objects at once. You won't &lt;em&gt;typically&lt;/em&gt; need to use &lt;code&gt;ListSerializer&lt;/code&gt; directly, but should instead simply pass &lt;code&gt;many=True&lt;/code&gt; when instantiating a serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9237b00416e2450996acbd2bb5b4720bc70584" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelField&lt;/code&gt; class is generally intended for internal use, but can be used by your API if needed. In order to properly instantiate a &lt;code&gt;ModelField&lt;/code&gt;, it must be passed a field that is attached to an instantiated model. For example: &lt;code&gt;ModelField(model_field=MyModel()._meta.get_field('custom_field'))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd13578e20225786b737b1c310bf6f6f48b4c20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelSerializer&lt;/code&gt; class provides a shortcut that lets you automatically create a &lt;code&gt;Serializer&lt;/code&gt; class with fields that correspond to the Model fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4996c8372fe4b448d89d5f4a0f04e730a6f63ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ModelViewSet&lt;/code&gt; class inherits from &lt;code&gt;GenericAPIView&lt;/code&gt; and includes implementations for various actions, by mixing in the behavior of the various mixin classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44192bf70d86d4e8d297f828257eb177697b49b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OrderingFilter&lt;/code&gt; class supports simple query parameter controlled ordering of results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a47146936f2e9524cea60f3a760acce0e7ae958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PageNumberPagination&lt;/code&gt; class includes a number of attributes that may be overridden to modify the pagination style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764120474b44cc97ad07f87da020da291be98948" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReadOnlyModelViewSet&lt;/code&gt; class also inherits from &lt;code&gt;GenericAPIView&lt;/code&gt;. As with &lt;code&gt;ModelViewSet&lt;/code&gt; it also includes implementations for various actions, but unlike &lt;code&gt;ModelViewSet&lt;/code&gt; only provides the 'read-only' actions, &lt;code&gt;.list()&lt;/code&gt; and &lt;code&gt;.retrieve()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02eb6a22581abc8b2c8f4afd20aff5675fbe250c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RequestsClient&lt;/code&gt; class is useful if you want to write tests that solely interact with the service interface. This is a little stricter than using the standard Django test client, as it means that all interactions should be via the API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7a4d568225171aa2f46e5ddadf4ef5ebf4be27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Response&lt;/code&gt; class extends &lt;code&gt;SimpleTemplateResponse&lt;/code&gt;, and all the usual attributes and methods are also available on the response. For example you can set headers on the response in the standard way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b461207d4949a92613cb0e30d5b6cdfb2a3e83a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Response&lt;/code&gt; class subclasses Django's &lt;code&gt;SimpleTemplateResponse&lt;/code&gt;. &lt;code&gt;Response&lt;/code&gt; objects are initialised with data, which should consist of native Python primitives. REST framework then uses standard HTTP content negotiation to determine how it should render the final response content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3171dc3328f6477ad0c3bdc80a4ccf11768c189" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScopedRateThrottle&lt;/code&gt; class can be used to restrict access to specific parts of the API. This throttle will only be applied if the view that is being accessed includes a &lt;code&gt;.throttle_scope&lt;/code&gt; property. The unique throttle key will then be formed by concatenating the &quot;scope&quot; of the request with the unique user id or IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3698b0d31f524697067958f9b02aaa5a3c19f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SearchFilter&lt;/code&gt; class supports simple single query parameter based searching, and is based on the &lt;a href=&quot;https://docs.djangoproject.com/en/stable/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields&quot;&gt;Django admin's search functionality&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9333110cbad1cd373c5c2a81252c4ea3b4f0f5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SearchFilter&lt;/code&gt; class will only be applied if the view has a &lt;code&gt;search_fields&lt;/code&gt; attribute set. The &lt;code&gt;search_fields&lt;/code&gt; attribute should be a list of names of text type fields on the model, such as &lt;code&gt;CharField&lt;/code&gt; or &lt;code&gt;TextField&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65720615da11c9c61c645f34c3938f79dbed550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Serializer&lt;/code&gt; class can also handle serializing or deserializing lists of objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4d9de6f4f170ade62f0a5aadcfd11ec72b806c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Serializer&lt;/code&gt; class is itself a type of &lt;code&gt;Field&lt;/code&gt;, and can be used to represent relationships where one object type is nested inside another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d224db30d4a7185a4d9aab492b084c5535022f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserRateThrottle&lt;/code&gt; will throttle users to a given rate of requests across the API. The user id is used to generate a unique key to throttle against. Unauthenticated requests will fall back to using the IP address of the incoming request to generate a unique key to throttle against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f92b13d8f525f29abd5a1b143f6d50c024b8180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValidationError&lt;/code&gt; class should be used for serializer and field validation, and by validator classes. It is also raised when calling &lt;code&gt;serializer.is_valid&lt;/code&gt; with the &lt;code&gt;raise_exception&lt;/code&gt; keyword argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd92b0c00e045e9b0cd36930e66d4be4b3a0c6b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValidationError&lt;/code&gt; exception is slightly different from the other &lt;code&gt;APIException&lt;/code&gt; classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c04698e18a3aa0b19e39781857c76c51867083" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ViewSet&lt;/code&gt; class does not provide any implementations of actions. In order to use a &lt;code&gt;ViewSet&lt;/code&gt; class you'll override the class and define the action implementations explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cd1ef9b267602b226d2d5cfbb679f043a1b5ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ViewSet&lt;/code&gt; class inherits from &lt;code&gt;APIView&lt;/code&gt;. You can use any of the standard attributes such as &lt;code&gt;permission_classes&lt;/code&gt;, &lt;code&gt;authentication_classes&lt;/code&gt; in order to control the API policy on the viewset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b67e692511f5598d86213a16194eaaad1c6e2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;X-Forwarded-For&lt;/code&gt; HTTP header and &lt;code&gt;REMOTE_ADDR&lt;/code&gt; WSGI variable are used to uniquely identify client IP addresses for throttling. If the &lt;code&gt;X-Forwarded-For&lt;/code&gt; header is present then it will be used, otherwise the value of the &lt;code&gt;REMOTE_ADDR&lt;/code&gt; variable from the WSGI environment will be used.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
