<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="b4eb1f22db81e623421f4d78c8138c04486725ed" translate="yes" xml:space="preserve">
          <source>Directives are processed top to bottom, but the order in which files are included by &lt;code&gt;require_tree&lt;/code&gt; is unspecified. You should not rely on any particular order among those. If you need to ensure some particular JavaScript ends up above some other in the concatenated file, require the prerequisite file first in the manifest. Note that the family of &lt;code&gt;require&lt;/code&gt; directives prevents files from being included twice in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f290f0a4a7894f6f2e5ea9ddc17bd20c3b3a271" translate="yes" xml:space="preserve">
          <source>Directly purges each associated attachment (i.e. destroys the blobs and attachments and deletes the files on the service).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074e8c491485071db054305184670f7f3efaad65" translate="yes" xml:space="preserve">
          <source>Directly purges the attachment (i.e. destroys the blob and attachment and deletes the file on the service).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5a06ae49acf38c1119aa226c68fad7228b22aa" translate="yes" xml:space="preserve">
          <source>Dirty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5314e28c647f6674bd27ef504b7dfead2c075337" translate="yes" xml:space="preserve">
          <source>Dirty Tracking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806298347cd2bfa1ce2d909ae52c814f7d28211a" translate="yes" xml:space="preserve">
          <source>Dirty#changed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a31dd0dcef21170b76963107994056e3f3dce29" translate="yes" xml:space="preserve">
          <source>Dirty#changed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0a940f3bec88dc8749bead74e2f10610a3e4c4" translate="yes" xml:space="preserve">
          <source>Dirty#changed_attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0696c1d04634e40d3ab077d2d4e452a743986d10" translate="yes" xml:space="preserve">
          <source>Dirty#changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d22aea57e1b1f467872376922bb0917c5f168cce" translate="yes" xml:space="preserve">
          <source>Dirty#changes_applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e230f0e74ae9ddfb3e21fa5d4f0621a3c64bad08" translate="yes" xml:space="preserve">
          <source>Dirty#clear_attribute_changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b439d124f300c2239a49117f19e10af50cc59f2c" translate="yes" xml:space="preserve">
          <source>Dirty#clear_changes_information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1ce144f5746236f2e23ee1a92fa3a5cc5424f4" translate="yes" xml:space="preserve">
          <source>Dirty#previous_changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3d36f0180fb2c21896acd4c1072dfa536cff2b" translate="yes" xml:space="preserve">
          <source>Dirty#restore_attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da61075fa8af939df52ebc5bf74e9546a68e5862" translate="yes" xml:space="preserve">
          <source>Disable the query cache within the block if Active Record is configured. If it's not, it will execute the given block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3f720da8ca4a72c19822f84d83d5d52a965943" translate="yes" xml:space="preserve">
          <source>Disable the query cache within the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b988863775d66d79251910283f0bc9f7f3263f" translate="yes" xml:space="preserve">
          <source>Disable the transaction wrapping this migration. You can still create your own transactions even after calling disable_ddl_transaction!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac88544ec580babb05933d4d59847c9225c6b5d9" translate="yes" xml:space="preserve">
          <source>Discard the job with no attempts to retry, if the exception is raised. This is useful when the subject of the job, like an Active Record, is no longer available, and the job is thus no longer relevant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8cb7f0d0a8b905999d3b03131c4a532ac2b1ae" translate="yes" xml:space="preserve">
          <source>Discarding Files Stored During Integration Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e93b55cf38f9710ed64104c4734851c488b367" translate="yes" xml:space="preserve">
          <source>Discarding Files Stored During System Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985c13b18ea7f277beee597abd4cdb76bdb0140e" translate="yes" xml:space="preserve">
          <source>Disconnect all connections that have been idle for at least &lt;code&gt;minimum_idle&lt;/code&gt; seconds. Connections currently checked out, or that were checked in less than &lt;code&gt;minimum_idle&lt;/code&gt; seconds ago, are unaffected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600f69f667a3d2c6a38f9fecaff31dc88f11d2bc" translate="yes" xml:space="preserve">
          <source>Disconnect all currently idle connections. Connections currently checked out are unaffected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9fc68e96bcf4934266c1f9022d52b1db4b4720" translate="yes" xml:space="preserve">
          <source>Disconnect all the connections identified by &lt;code&gt;identifiers&lt;/code&gt; on this server or any others via &lt;a href=&quot;../remoteconnections&quot;&gt;RemoteConnections&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7f55665c5a68589a1ee4e645cf2fe5e3d00b4" translate="yes" xml:space="preserve">
          <source>Disconnects all connections in the pool, and clears the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5045bcbb54dc703d7a853a70e5b34a774b381f77" translate="yes" xml:space="preserve">
          <source>Disconnects all currently idle connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92f3295bff5c7dae748b85bc1c46491603b9df6b" translate="yes" xml:space="preserve">
          <source>Disconnects from the database if already connected, and establishes a new connection with the database. Implementors should call super if they override the default implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1338605102b4199d641abe8b14de7ee4353fbc2" translate="yes" xml:space="preserve">
          <source>Disconnects from the database if already connected. Otherwise, this method does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e884c95987c0195a541492a003f41ac7609afe" translate="yes" xml:space="preserve">
          <source>Disk Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd9e3046d1cd8b205e5fd59571e246078e52b260" translate="yes" xml:space="preserve">
          <source>DiskController</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7eeb518139a9b1bf37e39a1f38dd1dff812091" translate="yes" xml:space="preserve">
          <source>DiskController#show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b4cfab988dc5a71f15e800c061cfcb0e3dccc2c" translate="yes" xml:space="preserve">
          <source>DiskController#update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048329b198fc04ca8de185908be0ed737901eb67" translate="yes" xml:space="preserve">
          <source>Dispatched for every file after form submission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1448ff650022f5949e9be6e704e372eb09395e" translate="yes" xml:space="preserve">
          <source>Display an image Active Record in the browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4a95704020f7bb636ad1f48f7a72bb5c71b51c" translate="yes" xml:space="preserve">
          <source>Display aspect ratio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12086044ff340c263350e01c7b7ad5a3e6b40a8" translate="yes" xml:space="preserve">
          <source>Display the screenshot in the terminal using the iTerm image protocol (&lt;a href=&quot;https://iterm2.com/documentation-images.html&quot;&gt;iterm2.com/documentation-images.html&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95caa049bd552e66b10fe40a99e4cc0849d71f96" translate="yes" xml:space="preserve">
          <source>Display the screenshot in the terminal, using the terminal artifact format (&lt;a href=&quot;https://buildkite.github.io/terminal-to-html/inline-images&quot;&gt;buildkite.github.io/terminal-to-html/inline-images&lt;/a&gt;/).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24580b75a476c24c6f7b5252db60b04b7604b062" translate="yes" xml:space="preserve">
          <source>Displaying Validation Errors in Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0119d22af8806e9be14fe4995620b69bc3800b3" translate="yes" xml:space="preserve">
          <source>Displays an image which when clicked will submit the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef214d057b5994563efee1fa4ee1276f9727c765" translate="yes" xml:space="preserve">
          <source>Dissatisfying ways to separate small concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878dc54e263e3e1353be293df2a3054b72f42239" translate="yes" xml:space="preserve">
          <source>Divides the array into one or more subarrays based on a delimiting &lt;code&gt;value&lt;/code&gt; or the result of an optional block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa7e077d8188d9e2b6462aab01ecddeb864f8c7" translate="yes" xml:space="preserve">
          <source>Divides this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; by a &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; and returns a new &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d83cad76dcd020deea93a245483eb761cc60b5" translate="yes" xml:space="preserve">
          <source>Do not add a primary key column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccf03cd5b773a94a97e139cbc2d2f4e2e3f0c4f" translate="yes" xml:space="preserve">
          <source>Do not put secret information in cookie-based sessions!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7041c9ed23100cf28324bcb37c32f1e4f90e5ee8" translate="yes" xml:space="preserve">
          <source>Do not simply replace &lt;code&gt;MultiJson.dump&lt;/code&gt; and &lt;code&gt;MultiJson.load&lt;/code&gt; with &lt;code&gt;JSON.dump&lt;/code&gt; and &lt;code&gt;JSON.load&lt;/code&gt;. These JSON gem APIs are meant for serializing and deserializing arbitrary Ruby objects and are generally &lt;a href=&quot;http://www.ruby-doc.org/stdlib-2.2.2/libdoc/json/rdoc/JSON.html#method-i-load&quot;&gt;unsafe&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423a790fb2f81f1e141f9064f18c268aa9c7f227" translate="yes" xml:space="preserve">
          <source>Do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71931fe42dd5d5cf77b6022013d730db7d876044" translate="yes" xml:space="preserve">
          <source>Do take special care about the &lt;strong&gt;order of your routes&lt;/strong&gt;, so this route declaration does not &quot;eat&quot; other ones. (You may want to add it directly before the &lt;code&gt;root :to&lt;/code&gt; declaration.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a35b8c3a828c6b50ebb9d495090ca5847cf7787" translate="yes" xml:space="preserve">
          <source>Do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5299c4c4bbc608b1017f8aaf98c39c16a982f62f" translate="yes" xml:space="preserve">
          <source>Does the X-CSRF-Token header match the form_authenticity_token?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4616d655b82557a1563b6ada483487392a6b6bb1" translate="yes" xml:space="preserve">
          <source>Does the admin really have to access the interface from everywhere in the world? Think about &lt;em&gt;limiting the login to a bunch of source IP addresses&lt;/em&gt;. Examine request.remote_ip to find out about the user's IP address. This is not bullet-proof, but a great barrier. Remember that there might be a proxy in use, though.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63a5f47c8f9c32570316ad46b71a8fd20be7987" translate="yes" xml:space="preserve">
          <source>Does the database for this adapter exist?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d1deae566bfa7d693ef24050436a462b52209c" translate="yes" xml:space="preserve">
          <source>Does the form_authenticity_token match the given token value from the params?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4832ca0836824e8ab952f69938ab83ada512a9c2" translate="yes" xml:space="preserve">
          <source>Does the same as &lt;code&gt;collection.create&lt;/code&gt; above, but raises &lt;code&gt;ActiveRecord::RecordInvalid&lt;/code&gt; if the record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992465380d228cefea3189ab8b0e8919094ec651" translate="yes" xml:space="preserve">
          <source>Does the same as &lt;code&gt;collection.create&lt;/code&gt;, but raises &lt;a href=&quot;../recordinvalid&quot;&gt;ActiveRecord::RecordInvalid&lt;/a&gt; if the record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccbe65de8de5ac0d4679175a156ecf5dc1035815" translate="yes" xml:space="preserve">
          <source>Does the same as &lt;code&gt;collection.create&lt;/code&gt;, but raises &lt;code&gt;ActiveRecord::RecordInvalid&lt;/code&gt; if the record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47052af571c55dab393d2f6f1f645d34bb156d6c" translate="yes" xml:space="preserve">
          <source>Does the same as &lt;code&gt;create_association&lt;/code&gt; above, but raises &lt;code&gt;ActiveRecord::RecordInvalid&lt;/code&gt; if the record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d15b08c40cc88fce13f7170273a15d782fe5048" translate="yes" xml:space="preserve">
          <source>Does the same as &lt;code&gt;create_association&lt;/code&gt;, but raises &lt;a href=&quot;../recordinvalid&quot;&gt;ActiveRecord::RecordInvalid&lt;/a&gt; if the record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddeb2ee290c38742b9b43e510c3b82f82155eb63" translate="yes" xml:space="preserve">
          <source>Does this adapter support DDL rollbacks in transactions? That is, would CREATE TABLE or ALTER TABLE get rolled back by a transaction?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d14ae5255075c380e0fedf0a69811123ea79b2" translate="yes" xml:space="preserve">
          <source>Does this adapter support application-enforced advisory locking?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521c79b82eb453984b8c31a94aacba983752a62c" translate="yes" xml:space="preserve">
          <source>Does this adapter support creating foreign key constraints in the same statement as creating the table?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b2fef2175ac999a9b2964e18ef8f689172a4b7" translate="yes" xml:space="preserve">
          <source>Does this adapter support creating foreign key constraints?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82eed933778b41a1ee1c6e018e44826f2f5faa72" translate="yes" xml:space="preserve">
          <source>Does this adapter support creating indexes in the same statement as creating the table?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7758d6decfb9df5377e0881c73b7a7ed6c5b2391" translate="yes" xml:space="preserve">
          <source>Does this adapter support creating invalid constraints?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55586e05539456e29cbf88a26b13248b1196d8b0" translate="yes" xml:space="preserve">
          <source>Does this adapter support database extensions?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e8cbe1039a0add9d6b2533f721c67ea577d677d" translate="yes" xml:space="preserve">
          <source>Does this adapter support datetime with precision?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb203ef190989c33ec085c741bcc1d4c4e2aa5b" translate="yes" xml:space="preserve">
          <source>Does this adapter support explain?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e38d1cba66215779c568118967106883877bb2" translate="yes" xml:space="preserve">
          <source>Does this adapter support expression indices?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bba9c451a331c226f572d1b305e4e4faf4d70f" translate="yes" xml:space="preserve">
          <source>Does this adapter support foreign/external tables?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90c24dc39fd27e62082a5f6c3f826b60d5cf23a" translate="yes" xml:space="preserve">
          <source>Does this adapter support index sort order?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83aebc48f4696ed46716c6287db17548da2e36e" translate="yes" xml:space="preserve">
          <source>Does this adapter support json data type?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9416ed9b6453a25c9c484b85053f6af2467fbfd" translate="yes" xml:space="preserve">
          <source>Does this adapter support materialized views?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5722017b0f72ba1cfe51b2d010bb86f92e3b32b1" translate="yes" xml:space="preserve">
          <source>Does this adapter support metadata comments on database objects (tables, columns, indexes)?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d8d5301c93ced72a36e7b3930cce11cc76ed86" translate="yes" xml:space="preserve">
          <source>Does this adapter support multi-value insert?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9aec6bdd4ccafd4a4495ee9f61ea9a8216f28c9" translate="yes" xml:space="preserve">
          <source>Does this adapter support optimizer hints?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c230d75eaaec4e347c1032f3131a8791c974f6ac" translate="yes" xml:space="preserve">
          <source>Does this adapter support partial indices?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc76d299342bb4a8119f0984a43bcd3cbfd11bae" translate="yes" xml:space="preserve">
          <source>Does this adapter support savepoints?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c4f7a0cfd9ff804b1d9eccbb5b4e60e1f89978" translate="yes" xml:space="preserve">
          <source>Does this adapter support setting the isolation level for a transaction?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2488593b410dd51f3e974f20beb47378ad8de34" translate="yes" xml:space="preserve">
          <source>Does this adapter support views?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb457f9e2dca4d86ec2c43dc22d48013d4e48157" translate="yes" xml:space="preserve">
          <source>Does this adapter support virtual columns?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e3f410978a2dd64b547bb14daef20eb5d37752" translate="yes" xml:space="preserve">
          <source>Don't be fooled by security by obfuscation and JavaScript security. Developer tools let you review and change every form's hidden fields. &lt;em&gt;JavaScript can be used to validate user input data, but certainly not to prevent attackers from sending malicious requests with unexpected values&lt;/em&gt;. The Firebug addon for Mozilla Firefox logs every request and may repeat and change them. That is an easy way to bypass any JavaScript validations. And there are even client-side proxies that allow you to intercept any request and response from and to the Internet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8752af95efd5e4d0cfab547ee31b5e6899a1302" translate="yes" xml:space="preserve">
          <source>Don't create associations that have the same name as &lt;a href=&quot;../core&quot;&gt;instance methods&lt;/a&gt; of &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. Since the association adds a method with that name to its model, using an association with the same name as one provided by &lt;code&gt;ActiveRecord::Base&lt;/code&gt; will override the method inherited through &lt;code&gt;ActiveRecord::Base&lt;/code&gt; and will break things. For instance, &lt;code&gt;attributes&lt;/code&gt; and &lt;code&gt;connection&lt;/code&gt; would be bad choices for association names, because those names already exist in the list of &lt;code&gt;ActiveRecord::Base&lt;/code&gt; instance methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7adf9bf5b3848aa98d125daf7b318a481686d96" translate="yes" xml:space="preserve">
          <source>Don't forget to call &lt;code&gt;follow_redirect!&lt;/code&gt; if you plan to make subsequent requests after a redirect is made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330ebeda4136ab1daf881b32294677ad91af413c" translate="yes" xml:space="preserve">
          <source>Don't forget to review the difference, to see if there were any unexpected changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2becd45658e9213c324f75d075645044e82c3a46" translate="yes" xml:space="preserve">
          <source>Don't forget to run &lt;code&gt;bundle install&lt;/code&gt; as usual. By specifying it as a gem within the &lt;code&gt;Gemfile&lt;/code&gt;, Bundler will load it as such, parsing this &lt;code&gt;blorgh.gemspec&lt;/code&gt; file and requiring a file within the &lt;code&gt;lib&lt;/code&gt; directory called &lt;code&gt;lib/blorgh.rb&lt;/code&gt;. This file requires the &lt;code&gt;blorgh/engine.rb&lt;/code&gt; file (located at &lt;code&gt;lib/blorgh/engine.rb&lt;/code&gt;) and defines a base module called &lt;code&gt;Blorgh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9f003bd3e9c61fc1c260a584538f163bcce17c" translate="yes" xml:space="preserve">
          <source>Don't forget to update the permitted params in your controller to also include the &lt;code&gt;_destroy&lt;/code&gt; field:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5ae065f2cb39ea45953c49fcdef22bfef43fe0" translate="yes" xml:space="preserve">
          <source>Don't give a deprecation warning on inspect since test/unit and error logs rely on it for diagnostics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941eddb7c55c4b0c375a3a184895962095c1d368" translate="yes" xml:space="preserve">
          <source>Don't try to correct user input using restricted lists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3183a30dfc03b03912390381fa91238dfec15d7" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;require&lt;/code&gt; because it will break the automatic reloading of classes in the development environment - using &lt;code&gt;require_dependency&lt;/code&gt; ensures that classes are loaded and unloaded in the correct manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59ea55e2b3d18d8dcc54d83515207083371df21" translate="yes" xml:space="preserve">
          <source>Don't use &lt;code&gt;validates_associated&lt;/code&gt; on both ends of your associations. They would call each other in an infinite loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe53022776b66774766532dea4b88ca825f5762" translate="yes" xml:space="preserve">
          <source>Downcases all words except acronyms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffee85a0948187406fe4a576118f3aac488b8f4" translate="yes" xml:space="preserve">
          <source>Download a dynamically-generated tarball:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4592f9ae45a647155e857c8bbbe5e38c83f01e" translate="yes" xml:space="preserve">
          <source>Downloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092aff6faf0efb6004353a9fdd25b7face9bb283" translate="yes" xml:space="preserve">
          <source>Downloading Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f7e09cc462242cb2a8eaf9478dec3e3e913e59" translate="yes" xml:space="preserve">
          <source>Downloading#download_blob_to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9420eba24a3eb5cc1b3a8c7b549697a747f3dbfd" translate="yes" xml:space="preserve">
          <source>Downloading#download_blob_to_tempfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f603a55288442407db469890acaad69938c082" translate="yes" xml:space="preserve">
          <source>Downloading#tempdir</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e238f1297297afc206bb2a168d45779653272a" translate="yes" xml:space="preserve">
          <source>Downloading::included</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c60316725827d27462a0bc9755f23a7eac2253" translate="yes" xml:space="preserve">
          <source>Downloads the blob to a tempfile on disk. Yields the tempfile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92a5809979a99336b08c0f90f150361a6c524ff" translate="yes" xml:space="preserve">
          <source>Downloads the file associated with this blob. If no block is given, the entire file is read into memory and returned. That'll use a lot of RAM for very large files. If a block is given, then the download is streamed and yielded in chunks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d85eff62cd535367dee87c8baa038bad6018cd" translate="yes" xml:space="preserve">
          <source>Drops a table from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff9be90d7eaacfa8d9e37d97537fd8b0f6b87d1" translate="yes" xml:space="preserve">
          <source>Drops the database specified on the &lt;code&gt;name&lt;/code&gt; attribute and creates it again using the provided &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725a1a51f84be7a83ee91c813ebf831f5295bdb8" translate="yes" xml:space="preserve">
          <source>Drops the join table specified by the given arguments. See &lt;a href=&quot;schemastatements#method-i-create_join_table&quot;&gt;create_join_table&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60267d84b1de5dc4057dce9dbe2b0040be6de44" translate="yes" xml:space="preserve">
          <source>Drops the schema for the given schema name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0972c734eebe116aadc2a5c3ecf1944c142e5f5e" translate="yes" xml:space="preserve">
          <source>Duck-types as a Date-like class. See &lt;a href=&quot;object#method-i-acts_like-3F&quot;&gt;Object#acts_like?&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8f51aee98e5ec767758073637664b2ad081021" translate="yes" xml:space="preserve">
          <source>Duck-types as a Time-like class. See &lt;a href=&quot;object#method-i-acts_like-3F&quot;&gt;Object#acts_like?&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4bb023601e5dc76d0e99ed84b6bf304423e1039" translate="yes" xml:space="preserve">
          <source>Due to frequent misuse of &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt;, you need to pass the &lt;code&gt;multiline: true&lt;/code&gt; option in case you use any of these two anchors in the provided regular expression. In most cases, you should be using &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9695aa53dd79b40c699dc464376cf7ac0f12e78" translate="yes" xml:space="preserve">
          <source>Due to the chmod operation &lt;code&gt;atomic_write&lt;/code&gt; performs, if the target file has an ACL set on it this ACL will be recalculated/modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ca117cb0e4b5bb41602bf4205a11f1da11a5d6" translate="yes" xml:space="preserve">
          <source>Due to the migration's name and the column specification after it, Rails will automatically know that you want to add a column to a specific table and write that into the migration for you. You don't need to tell it any more than this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34657d2a9d129225cb1e6113454ff53114ac869f" translate="yes" xml:space="preserve">
          <source>Due to the way Active Record interprets parameters in combination with the way that Rack parses query parameters it was possible to issue unexpected database queries with &lt;code&gt;IS NULL&lt;/code&gt; where clauses. As a response to that security issue (&lt;a href=&quot;https://groups.google.com/forum/#!searchin/rubyonrails-security/deep_munge/rubyonrails-security/8SA-M3as7A8/Mr9fi9X4kNgJ&quot;&gt;CVE-2012-2660&lt;/a&gt;, &lt;a href=&quot;https://groups.google.com/forum/#!searchin/rubyonrails-security/deep_munge/rubyonrails-security/jILZ34tAHF4/7x0hLH-o0-IJ&quot;&gt;CVE-2012-2694&lt;/a&gt; and &lt;a href=&quot;https://groups.google.com/forum/#!searchin/rubyonrails-security/CVE-2012-2660/rubyonrails-security/c7jT-EeN9eI/L0u4e87zYGMJ&quot;&gt;CVE-2013-0155&lt;/a&gt;) &lt;code&gt;deep_munge&lt;/code&gt; method was introduced as a solution to keep Rails secure by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45317cd6a360a890200ff4aea363b110e758e71b" translate="yes" xml:space="preserve">
          <source>Dump the fixture data into a method in case you want to access it directly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66109e6dfd2344936d6f58d9fcf4ae1a60c91098" translate="yes" xml:space="preserve">
          <source>Dumping schema caches for multiple databases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f962786c318e6d8a4694c8d188f5ab8c5b1f7f" translate="yes" xml:space="preserve">
          <source>Dumps objects in &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; (JavaScript &lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt; Notation). See &lt;a href=&quot;http://www.json.org&quot;&gt;www.json.org&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345cb96f43977963753166fc9aa0d247e48c075c" translate="yes" xml:space="preserve">
          <source>Duped objects have no id assigned and are treated as new records. Note that this is a &amp;ldquo;shallow&amp;rdquo; copy as it copies the object's attributes only, not its associations. The extent of a &amp;ldquo;deep&amp;rdquo; copy is application specific and is therefore left to the application to implement according to its need. The dup method does not preserve the timestamps (created|updated)_(at|on).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f75681e8d81ebb045245dae8d40dea9d892c025" translate="yes" xml:space="preserve">
          <source>Duplicating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1370004da76fa4f3b7a5180fd5436065ef4c7d5b" translate="yes" xml:space="preserve">
          <source>Duration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b44e3660d40c66f8f2d4e9f9c8bed5fa2546fe" translate="yes" xml:space="preserve">
          <source>Duration (seconds)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dec88b87fe41fbccbc7a44d87758d45618646f" translate="yes" xml:space="preserve">
          <source>Duration#%</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26c0b8bbe0851187e71d403be76ae5d6cdadec0" translate="yes" xml:space="preserve">
          <source>Duration#&amp;lt;=&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b2a0ced71e66f037f05eea9eba34c4bfc4047c" translate="yes" xml:space="preserve">
          <source>Duration#*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997836a32ab23f5be77e30da8e9e672b9c923d4c" translate="yes" xml:space="preserve">
          <source>Duration#+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2797d79930007b4f277e69a4bc95776ff8877f" translate="yes" xml:space="preserve">
          <source>Duration#-</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a1ca03cff6654a8b6a8412630cd8d28a34d40dc" translate="yes" xml:space="preserve">
          <source>Duration#/</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c45ced6dffe7e61d67b3a06fceba1a31fe1e9bf" translate="yes" xml:space="preserve">
          <source>Duration#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a32b58a5e6bc49e728f8a3b172fe6655454ddf1" translate="yes" xml:space="preserve">
          <source>Duration#after</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42e08005c8f6dd55a8e18345de7eb6fd4af6f2b6" translate="yes" xml:space="preserve">
          <source>Duration#ago</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77076f5737d953772adf2e196e3616b63d884458" translate="yes" xml:space="preserve">
          <source>Duration#before</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a7641f42113a3de4f450a63f1be7729fe96a03" translate="yes" xml:space="preserve">
          <source>Duration#eql?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091758cff011f04552b5f1185ede7921c6363305" translate="yes" xml:space="preserve">
          <source>Duration#from_now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d9e965fb3263786bc11a3d40cfc31084dad12c" translate="yes" xml:space="preserve">
          <source>Duration#hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e072a21625623681758be577fc51e03066d1fef2" translate="yes" xml:space="preserve">
          <source>Duration#iso8601</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfa5653e27b3b9551d177a89d8ad236ce517900" translate="yes" xml:space="preserve">
          <source>Duration#parts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d7dbec34be539f8a9731cef6c68813b00fa65f" translate="yes" xml:space="preserve">
          <source>Duration#since</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8febb017d9c7ce749de3172c7a2fda17130d18" translate="yes" xml:space="preserve">
          <source>Duration#to_i</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c247e108474207d3b0f5c2ecb0c691a98b693b8" translate="yes" xml:space="preserve">
          <source>Duration#to_s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7945de93883a969aa7283840479a5c78fb95c8a" translate="yes" xml:space="preserve">
          <source>Duration#until</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdffaa148637456798694aaa0f696471c7c1db9" translate="yes" xml:space="preserve">
          <source>Duration#value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b9e389b6243b24ad43949ead5053aa6077fd7f" translate="yes" xml:space="preserve">
          <source>Duration::build</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21341c3232d338483355ac0ed95cb9df5bcd8b5f" translate="yes" xml:space="preserve">
          <source>Duration::parse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fed9c72bd4c832820c4a574688a05097012a340" translate="yes" xml:space="preserve">
          <source>Durations can be added to and subtracted from dates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e45a360779a8a0dec64360e0c21e522f6258ff" translate="yes" xml:space="preserve">
          <source>Durations can be added to and subtracted from datetimes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0ac3829e11b020b4656df58b2881123674c99f" translate="yes" xml:space="preserve">
          <source>Durations can be added to and subtracted from time objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a17512123660cd42ea021c319e5f116ad2cfb6" translate="yes" xml:space="preserve">
          <source>During the normal operation of a Rails application, objects may be created, updated, and destroyed. Active Record provides hooks into this &lt;em&gt;object life cycle&lt;/em&gt; so that you can control your application and its data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56abd5511d0a2cff8b383170f9bbbb6e4af9d3c" translate="yes" xml:space="preserve">
          <source>During the precompilation phase an SHA256 is generated from the contents of the compiled files, and inserted into the filenames as they are written to disk. These fingerprinted names are used by the Rails helpers in place of the manifest name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f64096177ea8a14d10eab478194cb8b568c8a4" translate="yes" xml:space="preserve">
          <source>During the processing of the inbound email, the status will be tracked. Before processing begins, the email will normally have the &lt;code&gt;pending&lt;/code&gt; status. Once processing begins, just before callbacks and the &lt;code&gt;#process&lt;/code&gt; method is called, the status is changed to &lt;code&gt;processing&lt;/code&gt;. If processing is allowed to complete, the status is changed to &lt;code&gt;delivered&lt;/code&gt;. If a bounce is triggered, then &lt;code&gt;bounced&lt;/code&gt;. If an unhandled exception is bubbled up, then &lt;code&gt;failed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e18d151e6c159495620ca34c70a6c5b3237e24" translate="yes" xml:space="preserve">
          <source>During the second half of 2007, there were 88 vulnerabilities reported in Mozilla browsers, 22 in Safari, 18 in IE, and 12 in Opera. The &lt;a href=&quot;http://eval.symantec.com/mktginfo/enterprise/white_papers/b-whitepaper_internet_security_threat_report_xiii_04-2008.en-us.pdf&quot;&gt;Symantec Global Internet Security threat report&lt;/a&gt; also documented 239 browser plug-in vulnerabilities in the last six months of 2007. &lt;a href=&quot;http://pandalabs.pandasecurity.com/mpack-uncovered/&quot;&gt;Mpack&lt;/a&gt; is a very active and up-to-date attack framework which exploits these vulnerabilities. For criminal hackers, it is very attractive to exploit an SQL-Injection vulnerability in a web application framework and insert malicious code in every textual table column. In April 2008 more than 510,000 sites were hacked like this, among them the British government, United Nations, and many more high profile targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c00f17cc1b1966754ccb154ff79ddaed600527" translate="yes" xml:space="preserve">
          <source>Dynamic Finders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68c1eed8a5b13c48c7ec75c21b7357e122568cd" translate="yes" xml:space="preserve">
          <source>Dynamic Segments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733c8456ebc6bc6df1aeb57f372f8ec7a993cccc" translate="yes" xml:space="preserve">
          <source>Dynamic attribute-based finders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ae3ba0c59f05baca348e47713ac96a99886720" translate="yes" xml:space="preserve">
          <source>Dynamic attribute-based finders are a mildly deprecated way of getting (and/or creating) objects by simple queries without turning to SQL. They work by appending the name of an attribute to &lt;code&gt;find_by_&lt;/code&gt; like &lt;code&gt;Person.find_by_user_name&lt;/code&gt;. Instead of writing &lt;code&gt;Person.find_by(user_name: user_name)&lt;/code&gt;, you can use &lt;code&gt;Person.find_by_user_name(user_name)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58a10333a817337c510676f32925aefaafb1c1d" translate="yes" xml:space="preserve">
          <source>Dynamic fixtures with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe41360d436a069c77566ee0b8d0ec4ea6acb912" translate="yes" xml:space="preserve">
          <source>Dynamic request matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aa4c35888bbc9904b7ce614b6b953ecd8e12aa" translate="yes" xml:space="preserve">
          <source>Dynamic web applications usually build pages with a variety of components not all of which have the same caching characteristics. When different parts of the page need to be cached and expired separately you can use Fragment Caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5657fba145a29885c79e6bb48c5399dea9be007" translate="yes" xml:space="preserve">
          <source>E.g., the following first tries to translate the key &lt;code&gt;:missing&lt;/code&gt; and then the key &lt;code&gt;:also_missing.&lt;/code&gt; As both do not yield a result, the string &quot;Not here&quot; will be returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c631f17e65e0c38b7ad57b2882c2f9148ff8b3e" translate="yes" xml:space="preserve">
          <source>EMPTY_ARRAY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22484388f6414226d6b7b69a73cac7707bd9dcdd" translate="yes" xml:space="preserve">
          <source>EMPTY_HASH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df04091edb728ce7c5976e8034d0309a8db5de88" translate="yes" xml:space="preserve">
          <source>ENCODED_BLANKS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123db01616ae893c74a6bce3290f05dff40b09af" translate="yes" xml:space="preserve">
          <source>ENCRYPTED_COOKIE_CIPHER</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5493fc703229265b50dd603a06ccd61b019bbe13" translate="yes" xml:space="preserve">
          <source>ENCRYPTED_COOKIE_SALT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55303e0d565f956497053eebfbb90447f26d8d70" translate="yes" xml:space="preserve">
          <source>ENCRYPTED_SIGNED_COOKIE_SALT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a4a4584ae2892a45e34a2fc2326c7aeea651aa" translate="yes" xml:space="preserve">
          <source>ENUM values can't be dropped currently. You can read why &lt;a href=&quot;https://www.postgresql.org/message-id/29F36C7C98AB09499B1A209D48EAA615B7653DBC8A@mail2a.alliedtesting.com&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b9d6e86b0b225a5a69a769d4cf524608050356" translate="yes" xml:space="preserve">
          <source>ENV_METHODS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2859d8584ea8c10b85a549c283d13f20ca15f6d8" translate="yes" xml:space="preserve">
          <source>ERB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e97c9043580ce7d05c27b2762984b51031e1686" translate="yes" xml:space="preserve">
          <source>ERB allows you to embed Ruby code within templates. The YAML fixture format is pre-processed with ERB when Rails loads fixtures. This allows you to use Ruby to help you generate some sample data. For example, the following code generates a thousand users:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5dfd275ff2454e177db7aac7dca9b213289a76" translate="yes" xml:space="preserve">
          <source>ERB::Util</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0896f62d6d9ccbcefd87b1eb853f6ef2fd1e70d1" translate="yes" xml:space="preserve">
          <source>ER_CANNOT_ADD_FOREIGN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163091c84801711301a8e7ad4e09e4388f6efecc" translate="yes" xml:space="preserve">
          <source>ER_CANNOT_CREATE_TABLE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ae3550307b816e5bf924801d7c0f5632363a38" translate="yes" xml:space="preserve">
          <source>ER_DATA_TOO_LONG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a292993b1dd8419979c2f30a85eb342c63f2de90" translate="yes" xml:space="preserve">
          <source>ER_DO_NOT_HAVE_DEFAULT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b7cd8f7b89497549422e84d877cd1d6d418907" translate="yes" xml:space="preserve">
          <source>ER_DUP_ENTRY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dad7489363846e69940863dfa0e5ebba66c4e0" translate="yes" xml:space="preserve">
          <source>ER_FK_INCOMPATIBLE_COLUMNS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf7ceebe2bc21aae5ffd3db898991faeeac33f9" translate="yes" xml:space="preserve">
          <source>ER_LOCK_DEADLOCK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ec2faad0e1eea9134946d386565fc626b7064c" translate="yes" xml:space="preserve">
          <source>ER_LOCK_WAIT_TIMEOUT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93bde7ed3cc79159dba18652513fd878726a1e2" translate="yes" xml:space="preserve">
          <source>ER_NOT_NULL_VIOLATION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af01830eaef67599967a844de73924e514a56b1" translate="yes" xml:space="preserve">
          <source>ER_NO_REFERENCED_ROW</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071ca8ae424c8fd08f6e254281b454c4fdaee3b2" translate="yes" xml:space="preserve">
          <source>ER_NO_REFERENCED_ROW_2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184734755842519c06a205bd926e709a74dd4f4d" translate="yes" xml:space="preserve">
          <source>ER_OUT_OF_RANGE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0aee09634274bd7bfd445c6cf0c663f85170d5" translate="yes" xml:space="preserve">
          <source>ER_QUERY_INTERRUPTED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2bc5f5a078b948702a23d7ed148601dde4c12b" translate="yes" xml:space="preserve">
          <source>ER_QUERY_TIMEOUT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1e872b7eff6185618aedbb5b85eb48ecb29dc1" translate="yes" xml:space="preserve">
          <source>ER_ROW_IS_REFERENCED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d891596401568b0a0b64e38c1bf47ca0e392a4b4" translate="yes" xml:space="preserve">
          <source>ER_ROW_IS_REFERENCED_2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ad8b294efaedbe6a1e59add42766e2a16a26a1" translate="yes" xml:space="preserve">
          <source>ESCAPE_KEY_CHARS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dee7dc80b0ccd9c50d4278650e1686e85cd585f" translate="yes" xml:space="preserve">
          <source>EVENT_NAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f4d66e5f356667218b9a5021677bf4bac7eb0d" translate="yes" xml:space="preserve">
          <source>EXABYTE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21202e46aca74d795eece8945ec8e8b1522daa55" translate="yes" xml:space="preserve">
          <source>EXCLUDE_PARAMETERS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a673a6981a22d79b67046ad1463de973c3c163b" translate="yes" xml:space="preserve">
          <source>EXTENSION_LOOKUP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca35f3afd9bb8358d3822cf7d57622041389896" translate="yes" xml:space="preserve">
          <source>Each action results in a response, which holds the headers and document to be sent to the user's browser. The actual response object is generated automatically through the use of renders and redirects and requires no user intervention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af94e6f91869e51828396f28c16655ea7074187" translate="yes" xml:space="preserve">
          <source>Each channel can then again be streaming zero or more broadcastings. A broadcasting is a pubsub link where anything transmitted by the broadcaster is sent directly to the channel subscribers who are streaming that named broadcasting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34705548fe49e7f38372207cb5e35a0f5b3560e" translate="yes" xml:space="preserve">
          <source>Each comment belongs to one article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5804a881d5125e80dbda299575002107f234e1b2" translate="yes" xml:space="preserve">
          <source>Each consumer can in turn subscribe to multiple cable channels. Each channel encapsulates a logical unit of work, similar to what a controller does in a regular MVC setup. For example, you could have a &lt;code&gt;ChatChannel&lt;/code&gt; and an &lt;code&gt;AppearancesChannel&lt;/code&gt;, and a consumer could be subscribed to either or to both of these channels. At the very least, a consumer should be subscribed to one channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e15c1febcd000e010d9dd48e40cea295711dd7" translate="yes" xml:space="preserve">
          <source>Each environment's configuration can be modified similarly. In this case, we can modify our test environment by changing the options found in &lt;code&gt;config/environments/test.rb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fff8ae57d2602dbb6fa8fec76fb04c47b16f21" translate="yes" xml:space="preserve">
          <source>Each fixture is given a name followed by an indented list of colon-separated key/value pairs. Records are typically separated by a blank line. You can place comments in a fixture file by using the # character in the first column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3c27c173a90e43c42915cf6e254e21301a97c3" translate="yes" xml:space="preserve">
          <source>Each helper accepts an arbitrary number of attribute names, so with a single line of code you can add the same kind of validation to several attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30a5229075bb5840d6cfd30ff769ef1b9d193fc" translate="yes" xml:space="preserve">
          <source>Each instance of the &lt;code&gt;Author&lt;/code&gt; model will have these methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c720b8fcee7bdf8bf56ea9268cd91fb8e5711bd8" translate="yes" xml:space="preserve">
          <source>Each instance of the &lt;code&gt;Book&lt;/code&gt; model will have these methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5258e30e47c48c54ba567cd490ba2893cbbe753b" translate="yes" xml:space="preserve">
          <source>Each instance of the &lt;code&gt;Part&lt;/code&gt; model will have these methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c545528ae3300684abb7def65a58a9aa60b111c" translate="yes" xml:space="preserve">
          <source>Each instance of the &lt;code&gt;Supplier&lt;/code&gt; model will have these methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3e37ed7b979503b80c75083ac3e84e70e381f0" translate="yes" xml:space="preserve">
          <source>Each job uses the &lt;code&gt;I18n.locale&lt;/code&gt; set when the job was created. Useful if you send emails asynchronously:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad151b800b1ed18aac1d3d33a3047ed4e2b948c" translate="yes" xml:space="preserve">
          <source>Each of these classes include &lt;code&gt;Minitest::Assertions&lt;/code&gt;, allowing us to use all of the basic assertions in our tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cb07f68f8c34fad2542625456fd42a036202c5" translate="yes" xml:space="preserve">
          <source>Each of these fixtures has two unique identifiers: one for the database and one for the humans. Why don't we generate the primary key instead? Hashing each fixture's label yields a consistent ID:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2f2c5887d7edef51d0ecbe2c5110951f923385" translate="yes" xml:space="preserve">
          <source>Each of these helpers has a corresponding &lt;code&gt;_url&lt;/code&gt; helper (such as &lt;code&gt;photos_url&lt;/code&gt;) which returns the same path prefixed with the current host, port, and path prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8269be01f57a4aed32e59c7ef622858a221620" translate="yes" xml:space="preserve">
          <source>Each response stream creates a new thread and copies over the thread local variables from the original thread. Having too many thread local variables can negatively impact performance. Similarly, a large number of threads can also hinder performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2074a01cf1c6e0219769d0f339b164daf1f09f8" translate="yes" xml:space="preserve">
          <source>Each thread should be wrapped before it runs application code, so if your application manually delegates work to other threads, such as via &lt;code&gt;Thread.new&lt;/code&gt; or Concurrent Ruby features that use thread pools, you should immediately wrap the block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce3aba2f9aca465338abed4f26b1886f0627377" translate="yes" xml:space="preserve">
          <source>Each would be rendered and added as a separate part to the message, with the corresponding content type. The content type for the entire message is automatically set to &lt;code&gt;multipart/alternative&lt;/code&gt;, which indicates that the email contains multiple different representations of the same email body. The same instance variables defined in the action are passed to all email templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae80e446045ebe7e57d9510b77e77012bb01de8" translate="yes" xml:space="preserve">
          <source>Eager Loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9350ecdd2c2889ca23ac2e3eec86a079599d7b75" translate="yes" xml:space="preserve">
          <source>Eager Loading Associations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912165e05f8d574125a2f111ec3daa7c8830fb8b" translate="yes" xml:space="preserve">
          <source>Eager Loading Multiple Associations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacc7e71ce925103108adcdbefbf23f6226a4993" translate="yes" xml:space="preserve">
          <source>Eager loading is a way to find objects of a certain class and a number of named associations. It is one of the easiest ways to prevent the dreaded N+1 problem in which fetching 100 posts that each need to display their author triggers 101 database queries. Through the use of eager loading, the number of queries will be reduced from 101 to 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051707242050b7ebfde67a26268ece5f0f326f06" translate="yes" xml:space="preserve">
          <source>Eager loading is controlled by the flag &lt;code&gt;config.eager_load&lt;/code&gt;, which is enabled by default in &lt;code&gt;production&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba717ef838ccde4f2e734561435846ac76af6179" translate="yes" xml:space="preserve">
          <source>Eager loading is supported with polymorphic associations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae90c19c57b1d094145aae31c58578781c86ea92" translate="yes" xml:space="preserve">
          <source>Eager loading is the mechanism for loading the associated records of the objects returned by &lt;code&gt;Model.find&lt;/code&gt; using as few queries as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5959126d169ca15f749c39f51f377e1d35caac41" translate="yes" xml:space="preserve">
          <source>Eager loading may trigger more than one query under the hood, and some queries may need the results of previous ones. Because of that, &lt;code&gt;explain&lt;/code&gt; actually executes the query, and then asks for the query plans. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e02e1ca91ab8dcaeb06771a8fffcb85094922e0" translate="yes" xml:space="preserve">
          <source>Eager loading of associations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3258971760e0ab7ef620986fb66c6a32aa64fae5" translate="yes" xml:space="preserve">
          <source>Eager loading the application is part of the boot process, so top-level constants are fine and are still autoloaded, no need to require their files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75348415f57949afd6ea37601c49ae0a46ac7736" translate="yes" xml:space="preserve">
          <source>Early Hints is an HTTP/2 status code that indicates hints to help a client start making preparations for processing the final response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70dd860f4b89ba7ed69b40ce7dbdbe80449d801c" translate="yes" xml:space="preserve">
          <source>Edit the &lt;code&gt;form_with&lt;/code&gt; line inside &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; to look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9ba1a2515114c2d31fe79b93a1d942f595ac41" translate="yes" xml:space="preserve">
          <source>Editing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423141acb5d1e4759e1da322e80d39eeb9648915" translate="yes" xml:space="preserve">
          <source>Efficiently downloads blob data into the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1a2b14f7f3853248ef6cf5db788ccf2ffd3148" translate="yes" xml:space="preserve">
          <source>Either return &lt;code&gt;self&lt;/code&gt; or the time in the local system timezone depending on the setting of &lt;code&gt;ActiveSupport.to_time_preserves_timezone&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050d1175210a40bf0844823a9bb849c662276584" translate="yes" xml:space="preserve">
          <source>Either return an instance of &lt;code&gt;Time&lt;/code&gt; with the same UTC offset as &lt;code&gt;self&lt;/code&gt; or an instance of &lt;code&gt;Time&lt;/code&gt; representing the same time in the local system timezone depending on the setting of on the setting of &lt;code&gt;ActiveSupport.to_time_preserves_timezone&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc851f6f2821c7088e81374ab3e41f76054be825" translate="yes" xml:space="preserve">
          <source>Ellipsis can be customized with the &lt;code&gt;:omission&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc170086385405745bfe59476bba424abef09c0f" translate="yes" xml:space="preserve">
          <source>Email clients have no web context and so paths have no base URL to form complete web addresses. Thus, you should always use the &quot;_url&quot; variant of named route helpers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b65c2f37b13ae80b2f9b96bc1eb6692bf54810c" translate="yes" xml:space="preserve">
          <source>Emails by default are sent in plain text, so a sample view for our model example might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11b2b6c93f7c7c33b6c792b7d09ff158ec677ad" translate="yes" xml:space="preserve">
          <source>Emails do not support relative path links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d528e738b7cedb7cdacda857cfe8d8e5bf016b91" translate="yes" xml:space="preserve">
          <source>Embed in a &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt; to clear all previous ANSI sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28aff15ec5a0131ccfe8e7fb36403c88736cb72f" translate="yes" xml:space="preserve">
          <source>Empty objects as &lt;code&gt;{}&lt;/code&gt;, in the case of &lt;code&gt;Hash&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt;, in the case of &lt;code&gt;Array&lt;/code&gt;, will always be persisted as null.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b2e521b15b784152f847d902e6c37a6af2a01a" translate="yes" xml:space="preserve">
          <source>Empty strings are coerced to &lt;code&gt;nil&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e73cb05c3d7d3e92f1256a6b058428b81ffc0a1" translate="yes" xml:space="preserve">
          <source>Enable the query cache within the block if Active Record is configured. If it's not, it will execute the given block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafaca210bfa8c6835204ce797fd4aa8c7032dfd" translate="yes" xml:space="preserve">
          <source>Enable the query cache within the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69dbe124393f3b2fee1cd57adbc05970d926973" translate="yes" xml:space="preserve">
          <source>Enabled by default for apps that use Action View. Disable by setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e22518c67be4eebd9680af285e8cfd3dc00ff34" translate="yes" xml:space="preserve">
          <source>Enables more predictable duck-typing on String-like classes. See &lt;code&gt;Object#acts_like?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954ff34b3e0e17603433776ca887130da8b4eaf8" translate="yes" xml:space="preserve">
          <source>Enables the formatting of numbers in a variety of ways.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaa69584f2038f18cc582966547038c952fa725" translate="yes" xml:space="preserve">
          <source>Enables the use of byte calculations and declarations, like 45.bytes + 2.6.megabytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898a7a613ed036a56c6dcf367702a1bad0c62b43" translate="yes" xml:space="preserve">
          <source>Enables the use of time calculations and declarations, like &lt;code&gt;4.months + 5.years&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3b78a116fffa1f9bb314606c7a7722f85a5a6b" translate="yes" xml:space="preserve">
          <source>Enables the use of time calculations and declarations, like &lt;code&gt;45.minutes + 2.hours + 4.weeks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6883a433b93d4277369312ea29d8f843e7f1dd66" translate="yes" xml:space="preserve">
          <source>Enables you to run a command from the given directory. For example, if you have a copy of edge rails that you wish to symlink from your new apps, you can do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca62f8f15ea4e3ded26846656c30bcc079d0b7d" translate="yes" xml:space="preserve">
          <source>Enabling Zeitwerk Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1bf48adb9ae44c5d0751e8acc44c91c2f91c16" translate="yes" xml:space="preserve">
          <source>Enabling nested attributes on a one-to-one association allows you to create the member and avatar in one go:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61288a763c83954a689a0afacc6d57f06e742d97" translate="yes" xml:space="preserve">
          <source>Encapsulates a route, which can then be matched against an inbound_email and provide a lookup of the matching mailbox class. See examples for the different route addresses and how to use them in the &lt;code&gt;ActionMailbox::Base&lt;/code&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c997d4f4bf08e5c5dfb7baf3b5da6f59c25036" translate="yes" xml:space="preserve">
          <source>Encapsulates a string representing a filename to provide convenient access to parts of it and sanitization. A &lt;a href=&quot;filename&quot;&gt;Filename&lt;/a&gt; instance is returned by &lt;a href=&quot;blob#method-i-filename&quot;&gt;ActiveStorage::Blob#filename&lt;/a&gt;, and is comparable so it can be used for sorting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771a1a79515429a88d60588cf6906dcd49f10d70" translate="yes" xml:space="preserve">
          <source>Encapsulates the interaction with the view flow so it returns the correct buffer on &lt;code&gt;yield&lt;/code&gt;. This is usually overwritten by helpers to add more behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5411544e5526c2370c6f87d72b3d7c79a4b244ec" translate="yes" xml:space="preserve">
          <source>Encapsulates the notion of a MIME type. Can be used at render time, for example, with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0ff8bcacc045e1f56b61e351924db66e9e23a6" translate="yes" xml:space="preserve">
          <source>Encapsulates the pattern of wanting to validate a password or email address field with a confirmation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6368ea1261559c54fe45dc6c849ebe5673b7d6a7" translate="yes" xml:space="preserve">
          <source>Encapsulates the pattern of wanting to validate the acceptance of a terms of service check box (or similar agreement).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1ce3b628a3d4173cb84f27894888c7b8ef714f" translate="yes" xml:space="preserve">
          <source>Encapsulates the routes that live on the ApplicationMailbox and performs the actual routing when an inbound_email is received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f519d92037e1831f51507835c0f23af941e1a9" translate="yes" xml:space="preserve">
          <source>Encodes the given token and options into an Authorization header value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f019e6fd7597d6e6329a49a2af01ddc32dfb45f7" translate="yes" xml:space="preserve">
          <source>Encrypt and sign a message. We need to sign the message in order to avoid padding attacks. Reference: &lt;a href=&quot;https://www.limited-entropy.com/padding-oracle-attacks&quot;&gt;www.limited-entropy.com/padding-oracle-attacks&lt;/a&gt;/.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f402e6a9afe87240a69b26a03b8b5f8db7d586" translate="yes" xml:space="preserve">
          <source>EncryptedConfiguration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a28d0ed8f8d09994e6fdbb4ea59460aa2bf7bde" translate="yes" xml:space="preserve">
          <source>EncryptedConfiguration#config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d2c63e3f023ad51ed63c8a1ca6c7a518295ace" translate="yes" xml:space="preserve">
          <source>EncryptedConfiguration#read</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986b435d35df58d8ff4b8f1739b4db0bbf2f2e62" translate="yes" xml:space="preserve">
          <source>EncryptedConfiguration#write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc3a00665f6fe4a8564a09368a7be0475b958dd" translate="yes" xml:space="preserve">
          <source>EncryptedConfiguration::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e08a3d5f04d5216d959301eb87e93666943f3adb" translate="yes" xml:space="preserve">
          <source>EncryptedFile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ec6350888ffe872e05e17513441db29281fdeb" translate="yes" xml:space="preserve">
          <source>Endpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f65ddb75ed7d97e701168af35171410be8f9e7" translate="yes" xml:space="preserve">
          <source>Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8809eda578aa991d807dd996bc36bbf039a946a" translate="yes" xml:space="preserve">
          <source>Engine model and controller classes can be extended by open classing them in the main Rails application (since model and controller classes are just Ruby classes that inherit Rails specific functionality). Open classing an Engine class redefines it for use in the main application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e0799d2bf6142c49f0a80de2e01cd120955405" translate="yes" xml:space="preserve">
          <source>Engine setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7987281d22f5a65b5d5974f63cb43bb88c300cdc" translate="yes" xml:space="preserve">
          <source>Engineering notation is still supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c7104486895707b792252e4aa3edfcfeda062e" translate="yes" xml:space="preserve">
          <source>Engines are also closely related to plugins. The two share a common &lt;code&gt;lib&lt;/code&gt; directory structure, and are both generated using the &lt;code&gt;rails plugin new&lt;/code&gt; generator. The difference is that an engine is considered a &quot;full plugin&quot; by Rails (as indicated by the &lt;code&gt;--full&lt;/code&gt; option that's passed to the generator command). We'll actually be using the &lt;code&gt;--mountable&lt;/code&gt; option here, which includes all the features of &lt;code&gt;--full&lt;/code&gt;, and then some. This guide will refer to these &quot;full plugins&quot; simply as &quot;engines&quot; throughout. An engine &lt;strong&gt;can&lt;/strong&gt; be a plugin, and a plugin &lt;strong&gt;can&lt;/strong&gt; be an engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac750367dc7050cffcd3faaf207427bd63078ca" translate="yes" xml:space="preserve">
          <source>Engines can also be isolated from their host applications. This means that an application is able to have a path provided by a routing helper such as &lt;code&gt;articles_path&lt;/code&gt; and use an engine that also provides a path also called &lt;code&gt;articles_path&lt;/code&gt;, and the two would not clash. Along with this, controllers, models and table names are also namespaced. You'll see how to do this later in this guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3d7fb2419b44742c45c914996677dfdcd7a318" translate="yes" xml:space="preserve">
          <source>Engines can be considered miniature applications that provide functionality to their host applications. A Rails application is actually just a &quot;supercharged&quot; engine, with the &lt;code&gt;Rails::Application&lt;/code&gt; class inheriting a lot of its behavior from &lt;code&gt;Rails::Engine&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a649a659bd1543af196091f7856c7c10c971c309" translate="yes" xml:space="preserve">
          <source>Engines can have their own migrations. The default path for migrations is exactly the same as in application: &lt;code&gt;db/migrate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136d2ef98b655d5da8f44caf216a8541cd4f1427" translate="yes" xml:space="preserve">
          <source>Enhance &lt;a href=&quot;../../testhelper&quot;&gt;TestHelper&lt;/a&gt; assertions to handle non-String broadcastings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3066f5ae0c7a1b5e56529f04fa52fd7f987aa6" translate="yes" xml:space="preserve">
          <source>Enqueue a &lt;code&gt;RoutingJob&lt;/code&gt; for this &lt;code&gt;InboundEmail&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ef37ae9be7bf0437405689a42d828d8fa44093" translate="yes" xml:space="preserve">
          <source>Enqueue a job like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45442d2256e3bc7f8528e8f2a5c051a9242d65d5" translate="yes" xml:space="preserve">
          <source>Enqueue the Job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4881f9c886061781c2500440829ba4300c1237cd" translate="yes" xml:space="preserve">
          <source>Enqueues an &lt;a href=&quot;../analyzejob&quot;&gt;ActiveStorage::AnalyzeJob&lt;/a&gt; which calls &lt;a href=&quot;analyzable#method-i-analyze&quot;&gt;analyze&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e7706f9e73a451c3e016acb422f145974d825d" translate="yes" xml:space="preserve">
          <source>Enqueues an &lt;a href=&quot;purgejob&quot;&gt;ActiveStorage::PurgeJob&lt;/a&gt; to call &lt;a href=&quot;blob#method-i-purge&quot;&gt;purge&lt;/a&gt;. This is the recommended way to purge blobs from a transaction, an Active Record callback, or in any other real-time scenario.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b170eb18a288318712c977dc6362f9ba05a459e5" translate="yes" xml:space="preserve">
          <source>Enqueues the email to be delivered through Active Job. When the job runs it will send the email using &lt;code&gt;deliver_now!&lt;/code&gt;. That means that the message will be sent bypassing checking &lt;code&gt;perform_deliveries&lt;/code&gt; and &lt;code&gt;raise_delivery_errors&lt;/code&gt;, so use with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5e7be8ece8a85487b60285ad2ba4540d17cdc4" translate="yes" xml:space="preserve">
          <source>Enqueues the email to be delivered through Active Job. When the job runs it will send the email using &lt;code&gt;deliver_now&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e968dd3a76a9a804382da132cbb907189e05dd3e" translate="yes" xml:space="preserve">
          <source>Enqueues the given &lt;code&gt;message&lt;/code&gt; for delivery and changes the inbound email's status to &lt;code&gt;:bounced&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0689e1252dd70b1cb58b5fc757dce2a5bac316" translate="yes" xml:space="preserve">
          <source>Enqueues the job to be performed by the queue adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506a2f25a01829af4d425620405d7c616d65589c" translate="yes" xml:space="preserve">
          <source>Enqueuing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a62ebec9ebb00ac5e43de63b263492bd3681589" translate="yes" xml:space="preserve">
          <source>Enqueuing#enqueue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5aec89b4c1298faa3b90d32ae84636c6a56023d" translate="yes" xml:space="preserve">
          <source>Enqueuing::ClassMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a89357e7cf785997b0a4bda19476bec80d661b" translate="yes" xml:space="preserve">
          <source>Enqueuing::ClassMethods#job_or_instantiate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9f5b1cfbd96eb3ca78c660855e6e9a1dc660a3" translate="yes" xml:space="preserve">
          <source>Enqueuing::ClassMethods#perform_later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c61819644f71723d12aa60f84baffeca891dd9b" translate="yes" xml:space="preserve">
          <source>Ensure proxy class responds to all methods that underlying time instance responds to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575fe304dd94c1def843a31f6ee03da0a7d7efca" translate="yes" xml:space="preserve">
          <source>Ensure that the &lt;code&gt;InboundEmail&lt;/code&gt; is automatically scheduled for later incineration if the status has been changed to &lt;code&gt;processed&lt;/code&gt;. The later incineration will be invoked at the time specified by the &lt;code&gt;ActionMailbox.incinerate_after&lt;/code&gt; time using the &lt;code&gt;IncinerationJob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0952b04163d00a5ce6a4fae5eb2bbbd9cce028" translate="yes" xml:space="preserve">
          <source>Ensure you have a firm grasp of the &lt;code&gt;params&lt;/code&gt; method, as you'll use it fairly regularly. Let's consider an example URL: &lt;strong&gt;&lt;a href=&quot;http://www.example.com/?username=dhh&amp;amp;email=dhh@email.com&quot;&gt;http://www.example.com/?username=dhh&amp;amp;email=dhh@email.com&lt;/a&gt;&lt;/strong&gt;. In this URL, &lt;code&gt;params[:username]&lt;/code&gt; would equal &quot;dhh&quot; and &lt;code&gt;params[:email]&lt;/code&gt; would equal &quot;&lt;a href=&quot;mailto:dhh@email.com&quot;&gt;dhh@email.com&lt;/a&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72a4335a8917969a93618a97e2363f9c2a18a16" translate="yes" xml:space="preserve">
          <source>Ensure you have support for i18n.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2aca24da8837584c8c4ab90b462c259e6ae73f" translate="yes" xml:space="preserve">
          <source>Ensures failure. This is useful to explicitly mark a test that isn't finished yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c79f14d826ff83c716eabc672c90984d32d75ba" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;expected != actual&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683a4be942171b912e181a0be2707ca5b3fc474c" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;expected == actual&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6667dd27c2ef970b5f1db88e01bf07d1c28c7c40" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;expected.equal?(actual)&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5448e877aa1e40111d23f8d0f97eeb25617c28bf" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;expected.equal?(actual)&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be824e29f4ab1167ef0dd187a6b756c2f2cb0dcb" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj.nil?&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e38bc450373142febc839d62dfd3f4845a7223" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj.nil?&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b870540718b2e6eb1e96afce9ada15037b2f1d9c" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj.predicate&lt;/code&gt; is false, e.g. &lt;code&gt;assert_not_predicate str, :empty?&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acffc91f5c507ab6f9b45fc26eb128605f7d2484" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj.predicate&lt;/code&gt; is true, e.g. &lt;code&gt;assert_predicate str, :empty?&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa247983b4e92277eb89092ef5ba6705050a6afc" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj1.operator(obj2)&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee51f35cb86ac65fa6ae356f6024f36c48e4c04" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj1.operator(obj2)&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c279b21d3cbb32ead7bc63a9b02325cac6714ba1" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; does not respond to &lt;code&gt;symbol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2cb97bcc4605112501211df86ab5204ea98a04" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;empty?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf44d6919a55466c5ae2bb7e2a6a9627e47db0db" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is an instance of &lt;code&gt;class&lt;/code&gt; or is descending from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598f9988c504580bc3762d8848684cd60c2bf583" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is an instance of &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62cf5f2d9ada35d6c51c2ec32a04aa56bfdc69a" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is in &lt;code&gt;collection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e8a3ea381b934279b9e2a84ae382eba12f83e1" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is not &lt;code&gt;empty?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3d2416faa35633be9296271cdba60389ed4ebc" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is not an instance of &lt;code&gt;class&lt;/code&gt; and is not descending from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef4d88c37c6d8556aa018846e16b06f0129285a" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is not an instance of &lt;code&gt;class&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34ad23d5732c4bf151bf197987c909bcbf8ff41" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; is not in &lt;code&gt;collection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7f59f0a85a6a7b7e30c8ddc0c06c9df431459e" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;obj&lt;/code&gt; responds to &lt;code&gt;symbol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3b0c4c76319bb1da181d3e068f0ee1a1574c1f" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;test&lt;/code&gt; is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9cf4c36b8c7ae83621d236404a539c7a3a094f" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;test&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db77c7c7ef5ec762c6344d84317a5dc20b0b9b8" translate="yes" xml:space="preserve">
          <source>Ensures that a string doesn't match the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d393901cdba2fdce7454062ff766735335ce9315" translate="yes" xml:space="preserve">
          <source>Ensures that a string matches the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e008e7327e4114351b83c3079e31c70d2596bfa" translate="yes" xml:space="preserve">
          <source>Ensures that the given block doesn't raise any exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336d5bfedd1c18fdab2f37f21e8370cb24a5192f" translate="yes" xml:space="preserve">
          <source>Ensures that the given block raises one of the given exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be08c2e1c4081aa38cf9d865d0172381f72d204" translate="yes" xml:space="preserve">
          <source>Ensures that the given block throws the symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff10787478626bd653e6bf2d182a3477c4e5a00" translate="yes" xml:space="preserve">
          <source>Ensures that the numbers &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt; are not within &lt;code&gt;delta&lt;/code&gt; of each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678ecd8183bb0fb5651361e5e6ee09f33726b956" translate="yes" xml:space="preserve">
          <source>Ensures that the numbers &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt; are within &lt;code&gt;delta&lt;/code&gt; of each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91de6d54fa950dd237c482d44a1a3f976606799" translate="yes" xml:space="preserve">
          <source>Ensures that the numbers &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt; don't have a relative error less than &lt;code&gt;epsilon&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4959a290fc0bb3a2fcb337cf1dd73cea2bb062be" translate="yes" xml:space="preserve">
          <source>Ensures that the numbers &lt;code&gt;expected&lt;/code&gt; and &lt;code&gt;actual&lt;/code&gt; have a relative error less than &lt;code&gt;epsilon&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3bde5efdd9870d135261a55f860a6d6cace9f5b" translate="yes" xml:space="preserve">
          <source>Enters an exclusive section, but allows dependency loading while blocked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f84f289f88ff6d345a316cf81c4c074e6349dad" translate="yes" xml:space="preserve">
          <source>Entries set via &lt;code&gt;now&lt;/code&gt; are accessed the same way as standard entries: &lt;code&gt;flash['my-key']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abab8484fb22420fea23aac7ece86fbfc8e48d3f" translate="yes" xml:space="preserve">
          <source>Enum#enum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83df7a7ef8fa21dd3116045758d3e9407ca3149d" translate="yes" xml:space="preserve">
          <source>Enumerable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426cd02dc6e8596b4d542b66509e0ececb3dbac7" translate="yes" xml:space="preserve">
          <source>Enumerable#sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0366a10ef9d6d3ef8c64dd51eeccb78bad1656a" translate="yes" xml:space="preserve">
          <source>Enumerated Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3104dd45718e6d1ac6a03b91ae67193ae8361f0" translate="yes" xml:space="preserve">
          <source>Enums</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f285368b384f623960bf30ca3091c2771355872" translate="yes" xml:space="preserve">
          <source>Environment-specific configuration files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d6845644132c12327b02ba21e2b33bca7e2a9f" translate="yes" xml:space="preserve">
          <source>Environmental Security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d352b7558c4fb4031084a42ffca7c0f0a3d828" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[-2]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d6e00bd35a3376e7f79408f0d8e4c8fa3c3815" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[-3]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d951bb360b24689f80a48e47e96fd75eeaf3ec8" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea01ce23249ea3018734c931331b76f20f2bcc7" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[2]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3b100f69f609aa656dfc2e4519dc316d6fe54d" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[3]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64569ff943ff17f37ae52541c085f3e6a96381a" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[41]&lt;/code&gt;. Also known as accessing &amp;ldquo;the reddit&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef798b3b89fa80546b5033762536df81ce868fab" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;self[4]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9529f7f73404bd0b9ea23ff594ca10bb7f129473" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;#==&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44342d5dd041328124842669324242ab418d0e4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;Array#==&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if the two arrays contain the same number of elements and if each element is equal to the corresponding element in the &lt;code&gt;other&lt;/code&gt; array, otherwise returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2a30837c0870d190c02ae372f807ee655408c3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;String#!~&lt;/code&gt;. Match the class name against the given regexp. Returns &lt;code&gt;true&lt;/code&gt; if there is no match, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42bd8da63398730dba38bfeeaed86357b2daddc0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;String#&amp;lt;=&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06a62f603f4b035b415575bc6e91d435c8334e3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;String#==&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if the class name and &lt;code&gt;other&lt;/code&gt; are equal, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc3a0a3e6c5f066c967122c180393d2866c4248" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;String#=~&lt;/code&gt;. Match the class name against the given regexp. Returns the position where the match starts or &lt;code&gt;nil&lt;/code&gt; if there is no match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd80d55c74c4aa16e8cc87c1c392fe6ac5fc11a8" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;String#eql?&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if the class name and &lt;code&gt;other&lt;/code&gt; have the same length and content, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fe2b4fad96809ecf7b2fb6196123edf17f28b6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;String#match?&lt;/code&gt;. Match the class name against the given regexp. Returns &lt;code&gt;true&lt;/code&gt; if there is a match, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2e9b1d20bab8469979f40361921883d9b6848f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;delete_all&lt;/code&gt;. The difference is that returns &lt;code&gt;self&lt;/code&gt;, instead of an array with the deleted objects, so methods can be chained. See &lt;code&gt;delete_all&lt;/code&gt; for more information. Note that because &lt;code&gt;delete_all&lt;/code&gt; removes records by directly running an SQL query into the database, the &lt;code&gt;updated_at&lt;/code&gt; column of the object is not changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71d7ffc556e7cdbb9fa9d98e079f820949cd4c7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;to_s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c6dccedce7c8297887031f9156c91f4eed4a75" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;update_columns(name =&amp;gt; value)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701178c42cea561c9f957b4f4cd35ce1576b3b8b" translate="yes" xml:space="preserve">
          <source>Equivalent to Hash#keep_if, but returns &lt;code&gt;nil&lt;/code&gt; if no changes were made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047da798a59af25860bb890088e92344094aa749" translate="yes" xml:space="preserve">
          <source>Error generated by &lt;code&gt;delegate&lt;/code&gt; when a method is called on &lt;code&gt;nil&lt;/code&gt; and &lt;code&gt;allow_nil&lt;/code&gt; option is not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b858f3888fecebf1f9b1c35a28d2802c22670ae" translate="yes" xml:space="preserve">
          <source>Error handling in transaction callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207a4468e770cb82ac0bc41b74e2bdfb394055e" translate="yes" xml:space="preserve">
          <source>Error messages are first looked up in &lt;code&gt;activemodel.errors.models.MODEL.attributes.ATTRIBUTE.MESSAGE&lt;/code&gt;, if it's not there, it's looked up in &lt;code&gt;activemodel.errors.models.MODEL.MESSAGE&lt;/code&gt; and if that is not there also, it returns the translation of the default message (e.g. &lt;code&gt;activemodel.errors.messages.MESSAGE&lt;/code&gt;). The translated model name, translated attribute name and the value are available for interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9258378e5efacba333e76765a0073ad0bf278152" translate="yes" xml:space="preserve">
          <source>Errors added to &lt;code&gt;record.errors[:base]&lt;/code&gt; relate to the state of the record as a whole, and not to a specific attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f90d3754a0e1215fd915f2d77646659e883042" translate="yes" xml:space="preserve">
          <source>Escape carrier returns and single and double quotes for JavaScript segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc760285c65884937f9aa2830cbae336cf8bbfb" translate="yes" xml:space="preserve">
          <source>Escapes binary strings for bytea input to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f116a1a28620fca683f1c1f63db4fd3eeca687df" translate="yes" xml:space="preserve">
          <source>Escapes carriage returns and single and double quotes for JavaScript segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65d456d7d4dc877db334711ca3d9f5b8e0f82c9" translate="yes" xml:space="preserve">
          <source>Especially for XSS, it is important to do &lt;em&gt;permitted input filtering instead of restricted&lt;/em&gt;. Permitted list filtering states the values allowed as opposed to the values not allowed. Restricted lists are never complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50919693f2d7a86b0c64b4b79d4a6db465494bdd" translate="yes" xml:space="preserve">
          <source>Establishes the connection to the database. Accepts a hash as input where the &lt;code&gt;:adapter&lt;/code&gt; key must be specified with the name of a database adapter (in lower-case) example for regular databases (MySQL, PostgreSQL, etc):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ca4ae748c48005395d93f3e8c50b1b92003392" translate="yes" xml:space="preserve">
          <source>EtagWithFlash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c36aff318b45b430a2dbdc4d3bf1027aecc2533" translate="yes" xml:space="preserve">
          <source>EtagWithTemplateDigest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3953ce2ace414d71208e614028fee10db663f9" translate="yes" xml:space="preserve">
          <source>Eval the given block. All methods available to the current connection adapter are available within the block, so you can easily use the database definition DSL to build up your schema ( &lt;a href=&quot;connectionadapters/schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt;, &lt;a href=&quot;connectionadapters/schemastatements#method-i-add_index&quot;&gt;add_index&lt;/a&gt;, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74f0e391125276c44777683d5f8f78e319245c2" translate="yes" xml:space="preserve">
          <source>Evaluate given block in context of base class, so that you can write class macros here. When you define more than one &lt;code&gt;included&lt;/code&gt; block, it raises an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d52d6df369e2b485008f62cadb0c87ec30733e" translate="yes" xml:space="preserve">
          <source>Even if the file &lt;code&gt;app/models/square.rb&lt;/code&gt; exists and defines the &lt;code&gt;Square&lt;/code&gt; class, if no code yet used that class, &lt;code&gt;Rectangle.all&lt;/code&gt; issues the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f0d7b2cecc676c44f9e5e5ea7efae466c11543" translate="yes" xml:space="preserve">
          <source>Even more, they are totally independent, take for instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2776d9c3f737f26c17c6800b368879c070720b93" translate="yes" xml:space="preserve">
          <source>Even though Active Record lets you specify conditions on the eager loaded associations just like &lt;code&gt;joins&lt;/code&gt;, the recommended way is to use &lt;a href=&quot;#joining-tables&quot;&gt;joins&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34671a5f366faaadfc65a027e470773ba5973f9" translate="yes" xml:space="preserve">
          <source>Event data (&lt;code&gt;event.detail&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e10d77c1933bff4e0983cac1331b5eaa79948b7" translate="yes" xml:space="preserve">
          <source>Event name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd646aaea37691c5d0eea4f57121eec7468b20b" translate="yes" xml:space="preserve">
          <source>Event target</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6e300b6625239223b9894fb9509005c5b82001" translate="yes" xml:space="preserve">
          <source>Evented File System Monitor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd57422294ff575a67dbfa586d5637e1c132560" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;frequency&lt;/code&gt; seconds, the reaper will call &lt;code&gt;reap&lt;/code&gt; and &lt;code&gt;flush&lt;/code&gt; on &lt;code&gt;pool&lt;/code&gt;. A reaper instantiated with a zero frequency will never reap the connection pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70eb59645531b46119ab3606d96581f576a54f36" translate="yes" xml:space="preserve">
          <source>Every HTTP response from your Rails application receives the following default security headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e236a2044c36be30ae89a40e83ed05a8dd292e9" translate="yes" xml:space="preserve">
          <source>Every Rails application comes with a standard set of middleware which it uses in this order in the development environment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b715a6bbea612c2372e73b7bb47f6bdea0c53671" translate="yes" xml:space="preserve">
          <source>Every accessor comes with dirty tracking methods (&lt;code&gt;key_changed?&lt;/code&gt;, &lt;code&gt;key_was&lt;/code&gt; and &lt;code&gt;key_change&lt;/code&gt;) and methods to access the changes made during the last save (&lt;code&gt;saved_change_to_key?&lt;/code&gt;, &lt;code&gt;saved_change_to_key&lt;/code&gt; and &lt;code&gt;key_before_last_save&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70196de75780c9079d5bf0fcc9708526405b54ad" translate="yes" xml:space="preserve">
          <source>Every element of &lt;code&gt;config.autoload_paths&lt;/code&gt; should represent the top-level namespace (&lt;code&gt;Object&lt;/code&gt;) and they cannot be nested in consequence (with the exception of &lt;code&gt;concerns&lt;/code&gt; directories explained above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47eec6a9966bb83778f0afb3a0dcc341f010cbb8" translate="yes" xml:space="preserve">
          <source>Every helper method dependent on &lt;code&gt;url_for&lt;/code&gt; (e.g. helpers for named routes like &lt;code&gt;root_path&lt;/code&gt; or &lt;code&gt;root_url&lt;/code&gt;, resource routes like &lt;code&gt;books_path&lt;/code&gt; or &lt;code&gt;books_url&lt;/code&gt;, etc.) will now &lt;strong&gt;automatically include the locale in the query string&lt;/strong&gt;, like this: &lt;code&gt;http://localhost:3001/?locale=ja&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fccb879f0a7098f0b9bc519ced9f64955e93d6" translate="yes" xml:space="preserve">
          <source>Every major component of Rails (Action Mailer, Action Controller, Active Record, etc.) implements a railtie. Each of them is responsible for their own initialization. This makes Rails itself absent of any component hooks, allowing other components to be used in place of any of the Rails defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8b42dba95dd6927e91b2879ccc4f50c8215de4" translate="yes" xml:space="preserve">
          <source>Every new user gets an activation code to activate their account when they get an e-mail with a link in it. After activating the account, the activation_code columns will be set to NULL in the database. If someone requested a URL like these, they would be logged in as the first activated user found in the database (and chances are that this is the administrator):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732af181ae71d0774ea9ea1167c81b1f4e77b325" translate="yes" xml:space="preserve">
          <source>Every partial also has a local variable with the same name as the partial (minus the leading underscore). You can pass an object in to this local variable via the &lt;code&gt;:object&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc6c50a7c402432fcefdf8992692c76692ae3a1" translate="yes" xml:space="preserve">
          <source>Every test may contain one or more assertions, with no restriction as to how many assertions are allowed. Only when all the assertions are successful will the test pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb8fcc25098d62457498c6eeef5b099a4fd72ef" translate="yes" xml:space="preserve">
          <source>Everything except for the &lt;code&gt;form_with&lt;/code&gt; declaration remained the same. The reason we can use this shorter, simpler &lt;code&gt;form_with&lt;/code&gt; declaration to stand in for either of the other forms is that &lt;code&gt;@article&lt;/code&gt; is a &lt;em&gt;resource&lt;/em&gt; corresponding to a full set of RESTful routes, and Rails is able to infer which URI and method to use. For more information about this use of &lt;code&gt;form_with&lt;/code&gt;, see &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with-label-Resource-oriented+style&quot;&gt;Resource-oriented style&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85101b15ec72cd78eb55e176d898d4e1e83fbd2b" translate="yes" xml:space="preserve">
          <source>Everything this generator has created is neatly namespaced. The controller's class is defined within the &lt;code&gt;Blorgh&lt;/code&gt; module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e682bf1d37e967f003dd3c123ff39791a431febb" translate="yes" xml:space="preserve">
          <source>Everything you need to know to install Rails and create your first application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0178e103c00a74c7959443394834bae4d79d3e83" translate="yes" xml:space="preserve">
          <source>Example (for MySQL):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4be2efc740b1d9b4cceecd671c3e3c4966cd79b" translate="yes" xml:space="preserve">
          <source>Example (for PostgreSQL with pg_hint_plan):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd3f46d09547b62bf07ba9b2943c95d53ddae3" translate="yes" xml:space="preserve">
          <source>Example 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb0a8154996562bf3644bd53887f39664b2c5c9" translate="yes" xml:space="preserve">
          <source>Example 1: User Appearances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c56ea49918b9baed94cf4bc0ee9f324efc8841a" translate="yes" xml:space="preserve">
          <source>Example 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6576b29369e3a2f1e12fec8044472c7e8d7b0409" translate="yes" xml:space="preserve">
          <source>Example 2: Receiving New Web Notifications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf4dab701189a344fa5ab06d7b87c11a74e3da0" translate="yes" xml:space="preserve">
          <source>Example 3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ec5a67938ede7a842f9516985b65bd854fd17d" translate="yes" xml:space="preserve">
          <source>Example Action Mailer Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d9e9e6f4ce5ea49de6402830c224a348be7a83" translate="yes" xml:space="preserve">
          <source>Example Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc0ab406c6c6be47c9cd758eca5c6bb79653c3d" translate="yes" xml:space="preserve">
          <source>Example calling &lt;code&gt;create&lt;/code&gt; action and sending two params:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70bba7d484c2062cb83575bc4b50e51410b4b39" translate="yes" xml:space="preserve">
          <source>Example controller overrides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fb649202a15eed3306ff7c1ec71568caaab9db" translate="yes" xml:space="preserve">
          <source>Example for SQLite database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5191ba01976154d1169b43b99803a3bad775f872" translate="yes" xml:space="preserve">
          <source>Example for deleting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2a6b26be4e697658b2fb7a69a0f31b77d715fd" translate="yes" xml:space="preserve">
          <source>Example for find with a lock: Imagine two concurrent transactions: each will read &lt;code&gt;person.visits == 2&lt;/code&gt;, add 1 to it, and save, resulting in two saves of &lt;code&gt;person.visits = 3&lt;/code&gt;. By locking the row, the second transaction has to wait until the first is finished; we get the expected &lt;code&gt;person.visits == 4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17853fff50896ae3c5477d3963f09af901f2878f" translate="yes" xml:space="preserve">
          <source>Example global policy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c300cc8e430d704d09a0ae0704e3c1499745dd7" translate="yes" xml:space="preserve">
          <source>Example object structure for use with this method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27626cc2a4778547e8a7af1c8b9a390fa121d1b3" translate="yes" xml:space="preserve">
          <source>Example of a more complex migration that also needs to initialize data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09fff215a9ba6b6b686626b5fcc8a95ec265f154" translate="yes" xml:space="preserve">
          <source>Example of a simple migration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927aa803d6176a0d9095808b8905b0db1e98aec9" translate="yes" xml:space="preserve">
          <source>Example of vulnerable code that could be used by attacker, if &lt;code&gt;deep_munge&lt;/code&gt; wasn't performed is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4ccc244461fd2a12825ef96a60da2329e2ce3c" translate="yes" xml:space="preserve">
          <source>Example output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26ed3ec911f99ca90b4cb4a4ac973d6436223db" translate="yes" xml:space="preserve">
          <source>Example using &lt;a href=&quot;classmethods#method-i-has_secure_token&quot;&gt;has_secure_token&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812b1d83402bcb1ab8b20ec92d201184082f4096" translate="yes" xml:space="preserve">
          <source>Example using Active Record (which automatically includes &lt;a href=&quot;../securepassword&quot;&gt;ActiveModel::SecurePassword&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b01708809c7e2836ce9b016922604bfb27aef8" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;:include&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0df306032141652ccb0779d2f6c0166f33970b4" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;@post.person_id =&amp;gt; 2&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd36b0d2741684c20b1b7493510751e40de58c7e" translate="yes" xml:space="preserve">
          <source>Example: Calling the &lt;code&gt;:show&lt;/code&gt; action for the first &lt;code&gt;Article&lt;/code&gt;, passing in an &lt;code&gt;HTTP_REFERER&lt;/code&gt; header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6d3afdafda219dea96dd077bdd8227d7175d39" translate="yes" xml:space="preserve">
          <source>Examples of &lt;code&gt;in?&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0087908949a85c2c707909afa0e04ab7eabd8f2" translate="yes" xml:space="preserve">
          <source>Examples of calling methods on the returned &lt;a href=&quot;batches/batchenumerator&quot;&gt;BatchEnumerator&lt;/a&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad9f8e3aebd0e5af11c08a490079daf3efc93b9" translate="yes" xml:space="preserve">
          <source>Examples of reading:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8a716c7dae95bed0cb5f791996789de63dfa6b" translate="yes" xml:space="preserve">
          <source>Examples of using the default rails validators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c9b736c3a5688944794a28c53aff77fea8ae2f" translate="yes" xml:space="preserve">
          <source>Examples of writing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761970702b542f86fca9c972ac8eeef987d589f4" translate="yes" xml:space="preserve">
          <source>Except for hashes, given an unescaped &lt;code&gt;key&lt;/code&gt; this method constructs the part of a query string that would map such key to what &lt;code&gt;to_param&lt;/code&gt; returns. For example, given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f34232b2bd714ba318a50178df210d760e21de3" translate="yes" xml:space="preserve">
          <source>Exception that can be raised to stop migrations from being rolled back. For example the following migration is not reversible. Rolling back this migration will raise an &lt;a href=&quot;irreversiblemigration&quot;&gt;ActiveRecord::IrreversibleMigration&lt;/a&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3dfbe79fda3a9d92de67b1bd4f1dc9f60ab723" translate="yes" xml:space="preserve">
          <source>Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0313971bf91b98c582cad08feed10832718358" translate="yes" xml:space="preserve">
          <source>Exceptions can be handled at the class level using the familiar &lt;code&gt;Rescuable&lt;/code&gt; approach:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954bbd429f949a44be9288f30636016f8b4535e6" translate="yes" xml:space="preserve">
          <source>Exceptions raised inside exception handlers are not propagated up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3385200c8dbcfc96408b858080468c66bd6a4c12" translate="yes" xml:space="preserve">
          <source>Exceptions#retry_job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03eecb0afef4d2898897b050e5ff5f2a2436125" translate="yes" xml:space="preserve">
          <source>Exceptions::ClassMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683c60828def65777f78b6aed19bc527642b569a" translate="yes" xml:space="preserve">
          <source>Exceptions::ClassMethods#discard_on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1222e1b8267ab9c9168636f14c5e97b989369e14" translate="yes" xml:space="preserve">
          <source>Exceptions::ClassMethods#retry_on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4ac9f05a188bfa180afc1802ebf7c33fea43a7" translate="yes" xml:space="preserve">
          <source>Executable Code in File Uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6897628c4e1cb73a8eaf2ff3d263eb775be0721f" translate="yes" xml:space="preserve">
          <source>Execute the block given if updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ec6a328e2f9b09926b0e8220e998084ec8f969" translate="yes" xml:space="preserve">
          <source>Execute the supplied block while holding an exclusive lock, preventing any other thread from being inside a run_interlock block at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfca9a2c493a75521cd537b362b8247dd2deaeda" translate="yes" xml:space="preserve">
          <source>Execute the supplied block while holding the Exclusive lock. If &lt;code&gt;no_wait&lt;/code&gt; is set and the lock is not immediately available, returns &lt;code&gt;nil&lt;/code&gt; without yielding. Otherwise, returns the result of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41270aaed37b6c508a45a878307aac11b8bfe70a" translate="yes" xml:space="preserve">
          <source>Execute the supplied block while holding the Share lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf404d10f2f52490c6b84fd30ea1a42176bbd5a" translate="yes" xml:space="preserve">
          <source>Execute the supplied block without interference from any concurrent loads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5fb33e1b50f3e54af157464f3c616a7ad960ee2" translate="yes" xml:space="preserve">
          <source>Execute this migration in the named direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91834f7fd5a2006d667e02788083889a1c720d87" translate="yes" xml:space="preserve">
          <source>Executes &lt;code&gt;sql&lt;/code&gt; statement in the context of this connection using &lt;code&gt;binds&lt;/code&gt; as the bind substitutes. &lt;code&gt;name&lt;/code&gt; is logged along with the executed &lt;code&gt;sql&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483184be42fde04fcd38977a69e908d3c880cbb5" translate="yes" xml:space="preserve">
          <source>Executes a custom SQL query against your database and returns all the results. The results will be returned as an array, with the requested columns encapsulated as attributes of the model you call this method from. For example, if you call &lt;code&gt;Product.find_by_sql&lt;/code&gt;, then the results will be returned in a &lt;code&gt;Product&lt;/code&gt; object with the attributes you specified in the SQL query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cc0ab821805c90789117e6688667a713f2aa33" translate="yes" xml:space="preserve">
          <source>Executes a system command, capturing its binary output in a tempfile. Yields the tempfile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c18c6ad39667a00e57eee8644983c5b3f94993" translate="yes" xml:space="preserve">
          <source>Executes an INSERT query and returns the new record's ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cdbf210ef5afaaed18c39d313a546f6024896b0" translate="yes" xml:space="preserve">
          <source>Executes an SQL statement, returning a PG::Result object on success or raising a PG::Error exception otherwise. Note: the PG::Result object is manually memory managed; if you don't need it specifically, you may want consider the &lt;code&gt;exec_query&lt;/code&gt; wrapper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1647e371073ad04a1a13783cb27d4ed9efb0eff1" translate="yes" xml:space="preserve">
          <source>Executes an arbitrary command. Just like the backticks. Let's say you want to remove the &lt;code&gt;README.rdoc&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007dfd990cf4ecbe4c3ab7b43dfc8995158ac21a" translate="yes" xml:space="preserve">
          <source>Executes delete &lt;code&gt;sql&lt;/code&gt; statement in the context of this connection using &lt;code&gt;binds&lt;/code&gt; as the bind substitutes. &lt;code&gt;name&lt;/code&gt; is logged along with the executed &lt;code&gt;sql&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68931881d00ac225254ec719704d85851a68f83e" translate="yes" xml:space="preserve">
          <source>Executes insert &lt;code&gt;sql&lt;/code&gt; statement in the context of this connection using &lt;code&gt;binds&lt;/code&gt; as the bind substitutes. &lt;code&gt;name&lt;/code&gt; is logged along with the executed &lt;code&gt;sql&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b3bcc7990053de6fd80b91cdd147345ff420da" translate="yes" xml:space="preserve">
          <source>Executes the SQL statement in the context of this connection and returns the raw result from the connection adapter. Note: depending on your database connector, the result returned by this method may be manually memory managed. Consider using the &lt;a href=&quot;databasestatements#method-i-exec_query&quot;&gt;#exec_query&lt;/a&gt; wrapper instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b16a352708922fde1361c6f5ed05e77b8f06fea" translate="yes" xml:space="preserve">
          <source>Executes the SQL statement in the context of this connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c702fad82490424f3a6ffc8fe3cc79b899b4c3f8" translate="yes" xml:space="preserve">
          <source>Executes the delete statement and returns the number of rows affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2a334164e33eaee73c9e4647e8815522a2ecf1" translate="yes" xml:space="preserve">
          <source>Executes the given block and updates the latest watched files and timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924a499f11b325de2a53b7c642ec31ffcf166d" translate="yes" xml:space="preserve">
          <source>Executes the truncate statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4466d364d92720cd14540817202f736f2af412e6" translate="yes" xml:space="preserve">
          <source>Executes the update statement and returns the number of rows affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f2d98aabc8adc4d9008469480d9e486231e2ee" translate="yes" xml:space="preserve">
          <source>Executes update &lt;code&gt;sql&lt;/code&gt; statement in the context of this connection using &lt;code&gt;binds&lt;/code&gt; as the bind substitutes. &lt;code&gt;name&lt;/code&gt; is logged along with the executed &lt;code&gt;sql&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d525b71568c2d982f46feb96b332bedcdc6e4a0" translate="yes" xml:space="preserve">
          <source>Execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21e3f3c3f8823a51f9d0d7d0efa01561ee8d0d3" translate="yes" xml:space="preserve">
          <source>Execution#perform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73f2a772067808e320afde3ad3e7b591bb1106e" translate="yes" xml:space="preserve">
          <source>Execution#perform_now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82feace2f44d7e8e136d1688aa894120bcca0f4" translate="yes" xml:space="preserve">
          <source>Execution::ClassMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfb6be09e4d57719171bc7f9dfc9a7339b0abe5" translate="yes" xml:space="preserve">
          <source>Execution::ClassMethods#perform_now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76edb34b71e328ce169115f987d077b5dc463375" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d686fe386f26950f154afadef5b04cde3d9bd1d2" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper#complete!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e35e94100695ebe0894add8c0b165d13e019fae" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper::active</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a07bc6eb55ef35e1a3806ed755a6d65a5035402" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper::register_hook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ef29c701f51bca647a8057229c1b3929362595" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper::run!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a97f1c517d7cc434872da05add840e7884afc20" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper::to_complete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f732cc0de2631edbdd1055a6a16a7887f4fc52" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper::to_run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4e373828555318f20b4bc288f2125acb9401f1" translate="yes" xml:space="preserve">
          <source>ExecutionWrapper::wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f6604b7486fef57febf39070b6b5f55ece6c6b" translate="yes" xml:space="preserve">
          <source>Executor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938eae645b4d9aee17a2e6f97d091b441944b14d" translate="yes" xml:space="preserve">
          <source>Exert &lt;a href=&quot;behavior#method-i-disconnect&quot;&gt;disconnect&lt;/a&gt; on the connection under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7583a1ed65c546121bd433318e910d5ad66b5cad" translate="yes" xml:space="preserve">
          <source>Exim</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a930d9f44591122f4d975fe7b76e3529ac39484f" translate="yes" xml:space="preserve">
          <source>Exim (&amp;lt;tt&amp;gt;bin/rails action_mailbox:ingress:exim)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe7aedbd74125d3f9d4319d72241f50478b41cde" translate="yes" xml:space="preserve">
          <source>Existence of Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ed3d19ace876055e098699c14c65fedd0f0d70" translate="yes" xml:space="preserve">
          <source>Expands all paths against the root and return all unique values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629fe0a66aeb391ad4cf93d03c6a2a7c418f8c79" translate="yes" xml:space="preserve">
          <source>Expands out the &lt;code&gt;key&lt;/code&gt; argument into a key that can be used for the cache store. Optionally accepts a namespace, and all keys will be scoped within that namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c629ed535f5c56361403cca4a35ab93670a1640a" translate="yes" xml:space="preserve">
          <source>Expects arguments in the same format as &lt;a href=&quot;core#method-c-new&quot;&gt;ActiveRecord::Base.new&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd9cb694b0d986699fe91049b7550d968d56067" translate="yes" xml:space="preserve">
          <source>Expects arguments in the same format as &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;ActiveRecord::Base.create&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e02d62e8a5b91d5d9c3f16d64b5657d5c9c445" translate="yes" xml:space="preserve">
          <source>Expects arguments in the same format as &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;ActiveRecord::Base.create!&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb0476f83c1c801ae3e425da0a72aec98093240" translate="yes" xml:space="preserve">
          <source>Expiry in signed or encrypted cookie is now embedded in the cookies values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="185fe4cf8d580178cf4b7cb871610d34d9f1a925" translate="yes" xml:space="preserve">
          <source>Explaining how Rack works is not really in the scope of this guide. In case you are not familiar with Rack's basics, you should check out the &lt;a href=&quot;#resources&quot;&gt;Resources&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8154f4d42663882bdee3a5fa4fc8e5313298b558" translate="yes" xml:space="preserve">
          <source>Explicit block use for &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd4881d11401b91cc1ab481d555cbe8f277a4f0" translate="yes" xml:space="preserve">
          <source>Explicit dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="195f251241709d131b74886fa57fa568e097ef00" translate="yes" xml:space="preserve">
          <source>Explicitly passing a locale:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d747d5e66b80b521d289f5f4525ebc0603783b" translate="yes" xml:space="preserve">
          <source>Expose one or more attributes within a block. Old values are returned after the block concludes. Example demonstrating the common use of needing to set Current attributes outside the request-cycle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7c9a9f809bcf6ba4f834c8fd222e6957b29427" translate="yes" xml:space="preserve">
          <source>Extend core Ruby classes like Hash and String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cec80a7b857612410db1cd668f5560329ffb829" translate="yes" xml:space="preserve">
          <source>Extended modules for your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c5d2e4a03ba2cddcff56256d15a08a8e4baee8" translate="yes" xml:space="preserve">
          <source>Extending Core Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a49199cf9f2a60298769431ea7beadd4e082cbf" translate="yes" xml:space="preserve">
          <source>Extending Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5892a4a539fbe9dba80a4e1a6e224657d13a68e8" translate="yes" xml:space="preserve">
          <source>Extends &lt;code&gt;Array#to_s&lt;/code&gt; to convert a collection of elements into a comma separated id list if &lt;code&gt;:db&lt;/code&gt; argument is given as the format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00a094c1074622ae0260a5e7256e1c1f6969590" translate="yes" xml:space="preserve">
          <source>Extends the default Range#=== to support range comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e988bb8001f0e6eccc57d6eab580a4163fe5b8" translate="yes" xml:space="preserve">
          <source>Extends the default Range#cover? to support range comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8d564936c012c67661e189ea9e54828d6624b4" translate="yes" xml:space="preserve">
          <source>Extends the default Range#include? to support range comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55510833f161abd5eeb2c81606cb9ff6dc86e9d1" translate="yes" xml:space="preserve">
          <source>Extends the module object with class/module and instance accessors for class/module attributes, just like the native attr* accessors for instance attributes, but does so on a per-thread basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba730a47e84dfbea8c6d0ae64bfa8508dde90a37" translate="yes" xml:space="preserve">
          <source>Extends the module object with class/module and instance accessors for class/module attributes, just like the native attr* accessors for instance attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e02948a963806f6725aeac76c7a94fd629c5eaa" translate="yes" xml:space="preserve">
          <source>Extension examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656bcfe284e2da39c77d4fdab55b16ad3c654719" translate="yes" xml:space="preserve">
          <source>Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245394779a4b49a9b0f72ccaea15033127e0d222" translate="yes" xml:space="preserve">
          <source>Extensions can refer to the internals of the association proxy using these three attributes of the &lt;code&gt;proxy_association&lt;/code&gt; accessor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59ce310e169376f6367a5003dfb6bdf9d85840f" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Array&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c703904ec8c4731a70a494149ce0d481155eb4e9" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;BigDecimal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383a64ddac151f20917e899bed4fdfe431609f62" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Class&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162d5d8dc72c0fa90cc9c84a95a7a0ed2c292be5" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Date&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d045e298f9da75f68fbcbc30b2d3f0db1338d708" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;DateTime&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbb83b4bbf3660bf820bd13f2655a0bf1f78080" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Enumerable&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624f2a6730126a04f098b1699cdaa442b8435d4a" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;File&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e2ed99471adf8f5a891c07056c1942bcbdbde5" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Hash&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3943b8538130f07a69c81e22904da52c6e5e3598" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Integer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="061d7075edf225f14b0384f93056ab26d2169f9d" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;LoadError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91833ab551593d77164eda4260cd4cef65efb401" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Marshal&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a81f675e29bc3bdb0f1c13a24770f0d474559dc" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Module&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee9e47ab72c74bd29a9e03793f2e219ffb6794e" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;NameError&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e78ed8af09af2e97bd6d96722e0b5563e13b3f8" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Numeric&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa997262e94bff495c851061a34c497a8b3231d7" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Range&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fdfd34da789649ff4403006f17407f462ac645" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Regexp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b6bfa42b322f64f018a6aecb78cd8d69c4a284" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;String&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3968883ccd97912cb3b4f351aedd20207be3247e" translate="yes" xml:space="preserve">
          <source>Extensions to &lt;code&gt;Time&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f54ed86df05d02ce0e8f2bffabf15f35f2753a5" translate="yes" xml:space="preserve">
          <source>Extensions to All Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fdb5d77c0ea69e962db331c0331d4ccd1f6e481" translate="yes" xml:space="preserve">
          <source>External dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f6e88a00ce14d69d26ec23348c552c37770c9e" translate="yes" xml:space="preserve">
          <source>External redirects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ce7e3a9d3fa6133806c9d4f3d1fa8786497f63" translate="yes" xml:space="preserve">
          <source>Extra options on the associations, as defined in the &lt;code&gt;AssociationReflection::INVALID_AUTOMATIC_INVERSE_OPTIONS&lt;/code&gt; constant, or a custom scope, will also prevent the association's inverse from being found automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae07dff6f5a1fc924a4c6050b0295f323269e752" translate="yes" xml:space="preserve">
          <source>Extra parameters (event.detail)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00585eb1cda77d4c4fd2d07bad0caca2dd071983" translate="yes" xml:space="preserve">
          <source>Extract the action name from the passed data and process it via the channel. The process will ensure that the action requested is a public method on the channel declared by the user (so not one of the callbacks like &lt;a href=&quot;base#method-i-subscribed&quot;&gt;subscribed&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf232522c960197f7d5bcf61fc205d57a465555" translate="yes" xml:space="preserve">
          <source>Extract the name of the missing constant from the exception message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c5fb3f17e9d85f7a9245cfaf12b6962f3248a0" translate="yes" xml:space="preserve">
          <source>Extracting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4d6235b74145266bf8aabfe31883f9d2c5a00b" translate="yes" xml:space="preserve">
          <source>Extracting a plain old Ruby object to encapsulate it and collaborate or delegate to the original object is often a good choice, but when there's no additional state to encapsulate or we're making DSL-style declarations about the parent class, introducing new collaborators can obfuscate rather than simplify.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="427b4d9c68c51271bc839097d57764a7257fefcd" translate="yes" xml:space="preserve">
          <source>Extracting previews requires third-party applications, FFmpeg for video and muPDF for PDFs, and on macOS also XQuartz and Poppler. These libraries are not provided by Rails. You must install them yourself to use the built-in previewers. Before you install and use third-party software, make sure you understand the licensing implications of doing so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2adc3f59132ddd99117cdcbd5c98bce93c428ee" translate="yes" xml:space="preserve">
          <source>Extracts a named &lt;code&gt;association&lt;/code&gt; from the relation. The named association is first preloaded, then the individual association records are collected from the relation. Like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11476d9c98f007a92c91402a99c50dd16f32e510" translate="yes" xml:space="preserve">
          <source>Extracts an excerpt from &lt;code&gt;text&lt;/code&gt; that matches the first instance of &lt;code&gt;phrase&lt;/code&gt;. The &lt;code&gt;:radius&lt;/code&gt; option expands the excerpt on each side of the first occurrence of &lt;code&gt;phrase&lt;/code&gt; by the number of characters defined in &lt;code&gt;:radius&lt;/code&gt; (which defaults to 100). If the excerpt radius overflows the beginning or end of the &lt;code&gt;text&lt;/code&gt;, then the &lt;code&gt;:omission&lt;/code&gt; option (which defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;) will be prepended/appended accordingly. Use the &lt;code&gt;:separator&lt;/code&gt; option to choose the delimitation. The resulting string will be stripped in any case. If the &lt;code&gt;phrase&lt;/code&gt; isn't found, &lt;code&gt;nil&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33eaf43ab612e6d64826fe1cd5a1ef2d8bd127e" translate="yes" xml:space="preserve">
          <source>Extracts and stores metadata from the file associated with this blob using a relevant analyzer. Active Storage comes with built-in analyzers for images and videos. See &lt;a href=&quot;../analyzer/imageanalyzer&quot;&gt;ActiveStorage::Analyzer::ImageAnalyzer&lt;/a&gt; and &lt;a href=&quot;../analyzer/videoanalyzer&quot;&gt;ActiveStorage::Analyzer::VideoAnalyzer&lt;/a&gt; for information about the specific attributes they extract and the third-party libraries they require.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81cf921dac6df26b4828c7dac03b0c3c023b350" translate="yes" xml:space="preserve">
          <source>Extracts options from a set of arguments. Removes and returns the last element in the array if it's a hash, otherwise returns a blank hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c322b3f9b24d20295ac483f734722ee8715992e7" translate="yes" xml:space="preserve">
          <source>Extracts the following from a video blob:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f080546949418564c80bb10e5d15845f1e350a7" translate="yes" xml:space="preserve">
          <source>Extracts the nested parameter from the given &lt;code&gt;keys&lt;/code&gt; by calling &lt;code&gt;dig&lt;/code&gt; at each step. Returns &lt;code&gt;nil&lt;/code&gt; if any intermediate step is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1137cfdea605cc4137d9b69d1f8f0bdf46f70d" translate="yes" xml:space="preserve">
          <source>Extracts width and height in pixels from an image blob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61563acc9954aa655d5371c4c48196aaeaa874f7" translate="yes" xml:space="preserve">
          <source>FALSE_VALUES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26991df929a633ab76ebfb72ba772665aab30a3" translate="yes" xml:space="preserve">
          <source>FILENAME_MAX_SIZE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fbad6881a6502973f74dc6aab223ae74eaff93" translate="yes" xml:space="preserve">
          <source>FILEPATH_MAX_SIZE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212fe1c02214066f8d99afc4c17fc99bec1520c1" translate="yes" xml:space="preserve">
          <source>FIXME: We are avoiding to use alias because a bug on thor that make this method public and add it to the task list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4499ff78a47f7731554d3c1afe1035caa145a9f9" translate="yes" xml:space="preserve">
          <source>FOREIGN_KEY_VIOLATION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c27219f0337c970173ee182b4949d4cbf0a8e6" translate="yes" xml:space="preserve">
          <source>FORMATTED_GEMS_PATTERN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6921bf34079ef3387900e70753234f95f564ca4a" translate="yes" xml:space="preserve">
          <source>FROZEN_EMPTY_ARRAY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c182896fc771396384cbf42a7e1f9abfd081d7" translate="yes" xml:space="preserve">
          <source>FROZEN_EMPTY_HASH</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a812cd4fcfd760f2bf9199f801f6cc43f0c7c96f" translate="yes" xml:space="preserve">
          <source>Failed: An exception was raised during the specific mailbox's execution of the &lt;code&gt;#process&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d790d7b87bd35629e0110833db400f03c9ba8086" translate="yes" xml:space="preserve">
          <source>Failing to close the response stream will leave the corresponding socket open forever. Make sure to call &lt;code&gt;close&lt;/code&gt; whenever you are using a response stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4b3d1af3371878c3957e5abeca4a4081663faf" translate="yes" xml:space="preserve">
          <source>Failsafe: Raises errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0630b13c6ea5636c6136a1e9aa2cb3a9cda63f8f" translate="yes" xml:space="preserve">
          <source>Fallbacks allow your generators to have a single responsibility, increasing code reuse and reducing the amount of duplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b6f4438b61c10c203ae6dcd53eb7281cbea3cc" translate="yes" xml:space="preserve">
          <source>False for method objects; true otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9c2b81e82b07d10af56e40a76d70f4b979549b" translate="yes" xml:space="preserve">
          <source>FalseClass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceb155dd5ad13b2e8d1bb7fc25e250819973096" translate="yes" xml:space="preserve">
          <source>Fault tolerant. If the Redis server is unavailable, no exceptions are raised. &lt;a href=&quot;../cache&quot;&gt;Cache&lt;/a&gt; fetches are all misses and writes are dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d7677e19495f21da984fe4e2829b7ca91b27c7" translate="yes" xml:space="preserve">
          <source>Feedback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44774addc42c860b569f9d0d957fb465f368942" translate="yes" xml:space="preserve">
          <source>Fetches data from the cache, using the given key. If there is data in the cache with the given key, then that data is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56b37f210e04d2f886a8b20294a91a0c36ce6ad" translate="yes" xml:space="preserve">
          <source>Fetches data from the cache, using the given keys. If there is data in the cache with the given keys, then that data is returned. Otherwise, the supplied block is called for each key for which there was no data, and the result will be written to the cache and returned. Therefore, you need to pass a block that returns the data to be written to the cache. If you do not want to write the cache when the cache is not found, use &lt;a href=&quot;store#method-i-read_multi&quot;&gt;read_multi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87da8b91604262ad6d91e4f90e37c53120c65327" translate="yes" xml:space="preserve">
          <source>Fields can be symbols or strings. Values can be single values, arrays, or ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d910abe09fefcd525189ff56b85ac0cd235c45" translate="yes" xml:space="preserve">
          <source>Fields can only appear once in email headers while other fields such as &lt;code&gt;X-Anything&lt;/code&gt; can appear multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95a9dfcd4100cffd3bbfdd8cd63e61e7ac690c07" translate="yes" xml:space="preserve">
          <source>File Downloads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c09ab9ea91985578fea6798c7cff8723d2b9441b" translate="yes" xml:space="preserve">
          <source>File Uploads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c2c00423fba9ab231586e428829389b766aad71" translate="yes" xml:space="preserve">
          <source>File or blob exists or not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab4ebd63f13c58c61f8bd12d7686f9c91d0af5e" translate="yes" xml:space="preserve">
          <source>File/Directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a096bca18609c324b5d895acd7b35f853e8aa39e" translate="yes" xml:space="preserve">
          <source>File/Folder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac6dbee4d8f540761408e72685ba06c2b71eae5" translate="yes" xml:space="preserve">
          <source>FileHandler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="843d23f30b0e1bad8d210261eb4898e2a5ad1980" translate="yes" xml:space="preserve">
          <source>FileHandler#call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505865877caaff7ebaeded01de3d0ed28746e827" translate="yes" xml:space="preserve">
          <source>FileHandler#match?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cc01abca04b24b98f50188566d1f5714bb56cb" translate="yes" xml:space="preserve">
          <source>FileHandler#serve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd90c2de2ada508aebed682e3dff23934c79551" translate="yes" xml:space="preserve">
          <source>FileHandler::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6709799f8af742671a570e2fa5b4572a7407d6a" translate="yes" xml:space="preserve">
          <source>FileSystemResolver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d545e8154aab736060f5e6f5d5dea2d84841bb8" translate="yes" xml:space="preserve">
          <source>FileSystemResolver#==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc8770eca1e87a288321fdeaba2a529a8a89c5a" translate="yes" xml:space="preserve">
          <source>FileSystemResolver#eql?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfdf6c2e4438489ae387e3d03fb4bf3b045831c" translate="yes" xml:space="preserve">
          <source>FileSystemResolver#path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b890d2b480b436489d9faafe444637ffa8fcf11" translate="yes" xml:space="preserve">
          <source>FileSystemResolver#to_path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a42bb1006433052c6bfcfdaf757c145714ec5e" translate="yes" xml:space="preserve">
          <source>FileSystemResolver#to_s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6072fc412d41aed240094921437ffed862d5a730" translate="yes" xml:space="preserve">
          <source>FileSystemResolver::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc862eb2b99e73bfd42412e418cbade1639d3ec2" translate="yes" xml:space="preserve">
          <source>FileUpdateChecker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e1c392711c7dae7f60483670f69ce5ad5d172f" translate="yes" xml:space="preserve">
          <source>FileUpdateChecker#execute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd88a118e92e658c25fca050d8629be7325f8b3f" translate="yes" xml:space="preserve">
          <source>FileUpdateChecker#execute_if_updated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb0490cf1d3845c161e299cf76d0c4751436e0e" translate="yes" xml:space="preserve">
          <source>FileUpdateChecker#updated?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040b287a62de3f3a857cd258b5b442c468af1083" translate="yes" xml:space="preserve">
          <source>FileUpdateChecker::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cbb98ddf5ee976bc1c3be5221d66ce3ca2e867" translate="yes" xml:space="preserve">
          <source>Filename</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd38857d242d84c9b3e72ab8a5c3ca5bd1779bca" translate="yes" xml:space="preserve">
          <source>Filename#&amp;lt;=&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fedeadb8d48b202c23e40399d266dc504eed29c" translate="yes" xml:space="preserve">
          <source>Filename#as_json</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7e73304a01eb0288ffec09fb235d2c52896f90" translate="yes" xml:space="preserve">
          <source>Filename#base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6785722507c0f627c2a182e45b35d36ace3e28f" translate="yes" xml:space="preserve">
          <source>Filename#extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9063ce6395ed39fc24d0cc308731acbbf8e6e6d5" translate="yes" xml:space="preserve">
          <source>Filename#extension_with_delimiter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d109deefe0ba0943de0aaff15204472049c0d33e" translate="yes" xml:space="preserve">
          <source>Filename#extension_without_delimiter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="750e6669da69c9a36000d59408b9eab28fa022e2" translate="yes" xml:space="preserve">
          <source>Filename#sanitized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ccb2013ef431f110dc17946532bd26b9d72f55" translate="yes" xml:space="preserve">
          <source>Filename#to_json</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083d553a1e09b72b176a0a03c127e29ca22911a5" translate="yes" xml:space="preserve">
          <source>Filename#to_s</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25e4318610c636210e481224b00eaba26db2d15" translate="yes" xml:space="preserve">
          <source>Filename::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491d964bf519b4f588bc37ecbe5f26c90630e684" translate="yes" xml:space="preserve">
          <source>Filename::wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56775c15a18cc2c09aac7e08966401bd4e5ab388" translate="yes" xml:space="preserve">
          <source>Files are served from the primary service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9416aca12d73acfba38531e63e62b58118463d79" translate="yes" xml:space="preserve">
          <source>Files defining constants to be autoloaded should never be &lt;code&gt;require&lt;/code&gt;d:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc51867b9e499b3a5642e0eea0c1b39149abfdc5" translate="yes" xml:space="preserve">
          <source>Files without a template handler in their extension will be rendered using the raw handler. Previously Rails would render files using the ERB template handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16803118d16ec89a451d4c2d71a4dd329c1a8c8c" translate="yes" xml:space="preserve">
          <source>Filter that halted the action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31c728f71abe5347f705c917c7ed4d7dd78c919" translate="yes" xml:space="preserve">
          <source>Filters are inherited, so if you set a filter on &lt;code&gt;ApplicationController&lt;/code&gt;, it will be run on every controller in your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fab00f08ea5675ac3cad78e778d86715726a86" translate="yes" xml:space="preserve">
          <source>Filters are methods that are run &quot;before&quot;, &quot;after&quot; or &quot;around&quot; a controller action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aff3253798f95ad628c64f14a3cfff692009b0b" translate="yes" xml:space="preserve">
          <source>Filters are used to modify lines of data, while silencers are used to remove lines entirely. The typical filter use case is to remove lengthy path information from the start of each line, and view file paths relevant to the app directory instead of the file system root. The typical silencer use case is to exclude the output of a noisy library from the backtrace, so that you can focus on the rest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f77a0d2e8cb3f6cb688876f1e59471a3757c58" translate="yes" xml:space="preserve">
          <source>Filters can be specified with a block or a symbol to a method in the mailer class similar to controllers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3a9f32d7621c6c414177d52d0e336cdf8343bb" translate="yes" xml:space="preserve">
          <source>Finally we can assert that our response was successful and our new article is readable on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb42236d5e59c4075f8b7f2a9b799c55e2ae1c34" translate="yes" xml:space="preserve">
          <source>Finally, Action Mailer also supports passing &lt;code&gt;Proc&lt;/code&gt; and &lt;code&gt;Lambda&lt;/code&gt; objects into the default hash, so you can define methods that evaluate as the message is being generated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f575c7f442b7d2f89f790d1e32ae5186fcde00f9" translate="yes" xml:space="preserve">
          <source>Finally, add a 'Destroy' link to your &lt;code&gt;index&lt;/code&gt; action template (&lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;) to wrap everything together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cade7255b9c5fd46cf7165b884577c99295897" translate="yes" xml:space="preserve">
          <source>Finally, add a link to the &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; template to go back to the &lt;code&gt;index&lt;/code&gt; action as well, so that people who are viewing a single article can go back and view the whole list again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139c973215dad87a3d5bd543aa0d2247a5932895" translate="yes" xml:space="preserve">
          <source>Finally, add the configuration in the relevant &lt;code&gt;config/environments/*.rb&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b600f274b2b076b0d1f21dc2618434bf7de84584" translate="yes" xml:space="preserve">
          <source>Finally, all the above styles can be mixed together, and the &lt;code&gt;helper&lt;/code&gt; method can be invoked with a mix of &lt;code&gt;symbols&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;modules&lt;/code&gt; and blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8b02ce620cfd37bbb413ccdbc3e1a4d65357b5" translate="yes" xml:space="preserve">
          <source>Finally, an object which responds to call can be supplied to redirect, allowing you to reuse common redirect routes. The call method must accept two arguments, params and request, and return a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33dc64ae26f912f4c31d8e5c4c7e6e6cf970513" translate="yes" xml:space="preserve">
          <source>Finally, assuming we have two event instances, one which has a time and one which does not, the output might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adaf661621fea24a902486be28e925bee86aae2e" translate="yes" xml:space="preserve">
          <source>Finally, create the &lt;code&gt;core_ext.rb&lt;/code&gt; file and add the &lt;code&gt;to_squawk&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="829c3bc35737a22372a8de554947328a06e81184" translate="yes" xml:space="preserve">
          <source>Finally, engines would not have been possible without the work of James Adam, Piotr Sarnacki, the Rails Core Team, and a number of other people. If you ever meet them, don't forget to say thanks!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492a2b83bf4fb9e53ae20e9ed5978d21658bddcc" translate="yes" xml:space="preserve">
          <source>Finally, if a block is provided, both &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;new&lt;/code&gt; will yield the new object to that block for initialization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a0dc62c08212c07ce612fb67c95922debebbf3" translate="yes" xml:space="preserve">
          <source>Finally, if we DON'T find a template AND the request isn't a browser page load, then we implicitly respond with &lt;code&gt;204 No
Content&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7ed780accc2a01e9ed5109abf1108d3b018218" translate="yes" xml:space="preserve">
          <source>Finally, if you want to generate a URL to an engine's route using &lt;code&gt;polymorphic_url&lt;/code&gt;, you also need to pass the engine helper. Let's say that you want to create a form pointing to one of the engine's routes. All you need to do is pass the helper as the first element in array with attributes for URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c74e5924ea0a0e12578e9009f61ab0f0864a494" translate="yes" xml:space="preserve">
          <source>Finally, in order to use the read-only replica in your application you'll need to activate the middleware for automatic switching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374ad5e141477535b828a2568fde5eedbbff598e" translate="yes" xml:space="preserve">
          <source>Finally, inside &lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt;, instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b42f2f63de029368a9c5a8e74cb6a7218001e7a" translate="yes" xml:space="preserve">
          <source>Finally, it's also possible to explicitly map the relation between attribute and database integer with a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174eb5882f8cdb973e07ead01041e26f346678b5" translate="yes" xml:space="preserve">
          <source>Finally, routes will also be isolated within the engine. This is one of the most important parts about namespacing, and is discussed later in the &lt;a href=&quot;#routes&quot;&gt;Routes&lt;/a&gt; section of this guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71d62af8b62828279c0719617957707da219971" translate="yes" xml:space="preserve">
          <source>Finally, the &lt;code&gt;Path&lt;/code&gt; object also provides a few helpers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b943e31a4b051dd3dac93832ffdab45484a7a906" translate="yes" xml:space="preserve">
          <source>Finally, the assets for this resource are generated in one file: &lt;code&gt;app/assets/stylesheets/blorgh/articles.css&lt;/code&gt;. You'll see how to use these a little later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b655c7bb20789d12d470b9969c9c9dd4e90e2cc" translate="yes" xml:space="preserve">
          <source>Finally, the author's name should be displayed on the article's page. Add this code above the &quot;Title&quot; output inside &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a93a8845cc26c7d2b8707a1bef04d921fedc88e" translate="yes" xml:space="preserve">
          <source>Finally, the block can take block arguments, which can be passed in by &lt;code&gt;yield&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07638cfce2083b47d7c947c5522bb669a962b53" translate="yes" xml:space="preserve">
          <source>Finally, the options &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt;, &lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:allow_blank&lt;/code&gt;, &lt;code&gt;:allow_nil&lt;/code&gt;, &lt;code&gt;:strict&lt;/code&gt; and &lt;code&gt;:message&lt;/code&gt; can be given to one specific validator, as a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9705ba4378bc87609fc055a72d8a74cfddebd70" translate="yes" xml:space="preserve">
          <source>Finally, this method supports a &lt;code&gt;:default&lt;/code&gt; option, which selects a default &lt;a href=&quot;../../activesupport/timezone&quot;&gt;ActiveSupport::TimeZone&lt;/a&gt; if the object's time zone is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478e157bff161ff6fc0168e6bf5c5951fc77bff8" translate="yes" xml:space="preserve">
          <source>Finally, we add a tag to the connection-specific logger with the name of the current user to easily distinguish their messages in the log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd476f1476dca89e182815a527c0f96c315ac2eb" translate="yes" xml:space="preserve">
          <source>Finally, we want to show a link to the &lt;code&gt;edit&lt;/code&gt; action in the list of all the articles, so let's add that now to &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; to make it appear next to the &quot;Show&quot; link:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0fe56a52063f1c32e1f0c72e84d01aba01b4e6" translate="yes" xml:space="preserve">
          <source>Finally, you can also pass &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; as options to &lt;code&gt;initializer&lt;/code&gt;, in case you want to couple it with a specific step in the initialization process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4666eb65f50e1cd0e387ae6a5867ca372157f9df" translate="yes" xml:space="preserve">
          <source>Finally, you can indicate specific attributes of a model for which time zone conversion should not applied, for instance by setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e3c96698852416cd20a4df2f6bdb998567ffdf" translate="yes" xml:space="preserve">
          <source>Finally, you can pass true as the third argument to silence all log activity (other than the timing information) from inside the block. This is great for boiling down a noisy block to just a single statement that produces one log line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba6665f9014534ac6c73918c508bb647afbbafe" translate="yes" xml:space="preserve">
          <source>Find a mailer preview by its underscored class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0453bf999e0278a601f80a5bbc54c2474e916d" translate="yes" xml:space="preserve">
          <source>Find by id - This can either be a specific id (1), a list of ids (1, 5, 6), or an array of ids ([5, 6, 10]). If one or more records cannot be found for the requested ids, then &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; will be raised. If the primary key is an integer, find by id coerces its arguments by using &lt;code&gt;to_i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce7e654217389659a73282d75bb4e56f82f26dd" translate="yes" xml:space="preserve">
          <source>Find or Build a New Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f88643ed770b3cc049b1217652794cf03ff8ff" translate="yes" xml:space="preserve">
          <source>Find the fifth record. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091b73d8ba451d291a884bf2b22f6909b540e0b6" translate="yes" xml:space="preserve">
          <source>Find the first record (or first N records if a parameter is supplied). If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491520c3542cd99259336effa1911b49dc2ff469" translate="yes" xml:space="preserve">
          <source>Find the forty-second record. Also known as accessing &amp;ldquo;the reddit&amp;rdquo;. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16c67b7f03eb3f75212f27b0f678b039374ad05" translate="yes" xml:space="preserve">
          <source>Find the fourth record. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a525677ee48b8edcecfc0abd5eae8d21669011" translate="yes" xml:space="preserve">
          <source>Find the last record (or last N records if a parameter is supplied). If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6539305627fc6b9587a7ac3f29111baf283a287" translate="yes" xml:space="preserve">
          <source>Find the second record. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56b5e7d6cfa22ee40237bb41195a40b813cb901" translate="yes" xml:space="preserve">
          <source>Find the second-to-last record. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846b3ffe7f4e8d5da7e6360691693a1345749b9a" translate="yes" xml:space="preserve">
          <source>Find the third record. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8197116a1029a8745a9278865919e04a5ffaced3" translate="yes" xml:space="preserve">
          <source>Find the third-to-last record. If no order is defined it will order by primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc35b9dcac7ec993dd29c15967b44ed13159220" translate="yes" xml:space="preserve">
          <source>Find with lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34e1ed0d804f7e3155b9832ddfe3ecf227111138" translate="yes" xml:space="preserve">
          <source>Finder methods that return a collection, such as &lt;code&gt;where&lt;/code&gt; and &lt;code&gt;group&lt;/code&gt;, return an instance of &lt;code&gt;ActiveRecord::Relation&lt;/code&gt;. Methods that find a single entity, such as &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;first&lt;/code&gt;, return a single instance of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548ae92a416c3f503fa44ebb3c9040c86fa7ea7e" translate="yes" xml:space="preserve">
          <source>Finding by SQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08df9bdda2892c79adeb17ed89c666becf3a5b62" translate="yes" xml:space="preserve">
          <source>Finding records by a value object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6563f3077a10bf44719cb63033ad802c7db05b6" translate="yes" xml:space="preserve">
          <source>Finds an associated object according to the same rules as &lt;a href=&quot;../findermethods#method-i-find&quot;&gt;ActiveRecord::FinderMethods#find&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cbe0c727f0fb277e048633a708d7a861c21237" translate="yes" xml:space="preserve">
          <source>Finds an associated object responding to the &lt;code&gt;id&lt;/code&gt; and that meets the condition that it has to be associated with this object. Uses the same rules as &lt;a href=&quot;../findermethods#method-i-find&quot;&gt;ActiveRecord::FinderMethods#find&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4991c6478cdc94568603f1d22b24a96cea06113d" translate="yes" xml:space="preserve">
          <source>Finds an object in the collection responding to the &lt;code&gt;id&lt;/code&gt;. Uses the same rules as ActiveRecord::Base.find. Returns &lt;a href=&quot;../recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; error if the object cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dba752f2d08677693987222ad7374fd301b7db3" translate="yes" xml:space="preserve">
          <source>Finds and deletes all records matching the specified conditions. This is short-hand for &lt;code&gt;relation.where(condition).delete_all&lt;/code&gt;. Returns the number of rows affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c968d472a5497d35d179162ebf612f74eb113fd" translate="yes" xml:space="preserve">
          <source>Finds and destroys all records matching the specified conditions. This is short-hand for &lt;code&gt;relation.where(condition).destroy_all&lt;/code&gt;. Returns the collection of objects that were destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6dc4976836983fd162e0a0e0e9b15168e06574a" translate="yes" xml:space="preserve">
          <source>Finds engine with given path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eabf70383defe78c6d95bb2f4ebfea8bd3281c8" translate="yes" xml:space="preserve">
          <source>Finds the correct table name given an Active Record object. Uses the Active Record object's own table_name, or pre/suffix from the options passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feef1e8958111b8f3cc60e81be143205460c6df4" translate="yes" xml:space="preserve">
          <source>Finds the first record matching the specified conditions. There is no implied ordering so if order matters, you should specify it yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3a9a90d7d0edf29bf3acbe365f4193c1f082a3" translate="yes" xml:space="preserve">
          <source>Finds the first record with the given attributes, or creates a record with the attributes if one is not found:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1100a7a70db4bed1615634a5ee2d9b3a4f05d6b7" translate="yes" xml:space="preserve">
          <source>Fingerprint will be added to the filename if config.assets.digest is set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c6df9e50147d842fa401ced316d9e6f32c5473f" translate="yes" xml:space="preserve">
          <source>Fingerprinting fixes these problems by avoiding query strings, and by ensuring that filenames are consistent based on their content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6084437e6e2040ca3c36ea6e7383c25f524c99" translate="yes" xml:space="preserve">
          <source>Fingerprinting is a technique that makes the name of a file dependent on the contents of the file. When the file contents change, the filename is also changed. For content that is static or infrequently changed, this provides an easy way to tell whether two versions of a file are identical, even across different servers or deployment dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9046913994857b4e35448b82a310a21f6ff0236" translate="yes" xml:space="preserve">
          <source>Fingerprinting is enabled by default for both the development and production environments. You can enable or disable it in your configuration through the &lt;code&gt;config.assets.digest&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1ef8fdbaecb63ee2b6ed896dd0d703a1090268" translate="yes" xml:space="preserve">
          <source>Fire the SQL query and retrieve the corresponding results from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cac63ef7981908e32675c25d1a4cb7e30a0088" translate="yes" xml:space="preserve">
          <source>Fire up your server using &lt;code&gt;rails server&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b15caf9936cfa74e6a5bda763dfeda0d85733fb" translate="yes" xml:space="preserve">
          <source>Fired</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a84db8c8b5067e14875e0b737ffcd8c6171a2d6" translate="yes" xml:space="preserve">
          <source>First Contact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863e9a7269cd28886907c16a3adb00f35c657965" translate="yes" xml:space="preserve">
          <source>First additional parameter is used as the signature key for &lt;code&gt;MessageVerifier&lt;/code&gt;. This allows you to specify keys to encrypt and sign data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2128360c9ec4ef8ca60516472b3542d54d6ac365" translate="yes" xml:space="preserve">
          <source>First configurable block to run. Called before any initializers are run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9448b50087a5d19b0cb647d27cf8b4a279df40e0" translate="yes" xml:space="preserve">
          <source>First it checks for &lt;code&gt;posts_controller/post.rb&lt;/code&gt; in &lt;code&gt;autoload_paths&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c8a440e7e512cf2de9109a7d456b91bd77d107" translate="yes" xml:space="preserve">
          <source>First, add &lt;code&gt;gem 'web-console', '~&amp;gt; 2.0'&lt;/code&gt; to the &lt;code&gt;:development&lt;/code&gt; group in your &lt;code&gt;Gemfile&lt;/code&gt; and run &lt;code&gt;bundle install&lt;/code&gt; (it won't have been included when you upgraded Rails). Once it's been installed, you can simply drop a reference to the console helper (i.e., &lt;code&gt;&amp;lt;%= console %&amp;gt;&lt;/code&gt;) into any view you want to enable it for. A console will also be provided on any error page you view in your development environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb4517f6cf6252c239581e43788a114f055c45b" translate="yes" xml:space="preserve">
          <source>First, extend &lt;a href=&quot;callbacks&quot;&gt;ActiveModel::Callbacks&lt;/a&gt; from the class you are creating:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6460b753e52401f8a06071b50ac9d96903bb654" translate="yes" xml:space="preserve">
          <source>First, if we DO find a template, it's rendered. Template lookup accounts for the action name, locales, format, variant, template handlers, and more (see &lt;code&gt;render&lt;/code&gt; for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7140044459c2577a8e1500aeea87640e667265" translate="yes" xml:space="preserve">
          <source>First, include &lt;a href=&quot;callbacks&quot;&gt;ActiveModel::Validations::Callbacks&lt;/a&gt; from the class you are creating:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db0606f89013bb317a55858cca353f0367242c7" translate="yes" xml:space="preserve">
          <source>First, it will ensure that any thrown &lt;code&gt;MissingTranslation&lt;/code&gt; messages will be rendered as inline spans that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124c07d29c8949c0c45ef452750117078d66cfbe" translate="yes" xml:space="preserve">
          <source>First, let's create a simple &lt;code&gt;User&lt;/code&gt; scaffold:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527d1596e469f5fe1f51f86ad2fddf13aad401c8" translate="yes" xml:space="preserve">
          <source>First, notice that we are inheriting from &lt;code&gt;Rails::Generators::NamedBase&lt;/code&gt; instead of &lt;code&gt;Rails::Generators::Base&lt;/code&gt;. This means that our generator expects at least one argument, which will be the name of the initializer, and will be available in our code in the variable &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa4f66b819d957c1cd2205f57684022146f1efc" translate="yes" xml:space="preserve">
          <source>First, one uses the &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt; or &lt;code&gt;head&lt;/code&gt; method to simulate an HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c568a45aca6b79eb9efb04ff988e438ccab9eb4e" translate="yes" xml:space="preserve">
          <source>First, one uses the &lt;code&gt;subscribe&lt;/code&gt; method to simulate subscription creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc0f9a53e3c4957fd6e6f284ffe0f8c6858dfab" translate="yes" xml:space="preserve">
          <source>First, take a look at &lt;code&gt;app/models/comment.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28bec0e2e79a6098e09f2effd434672e2367b710" translate="yes" xml:space="preserve">
          <source>First, the &lt;code&gt;author_name&lt;/code&gt; text field needs to be added to the &lt;code&gt;app/views/blorgh/articles/_form.html.erb&lt;/code&gt; partial inside the engine. This can be added above the &lt;code&gt;title&lt;/code&gt; field with this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7b740fab55e112a3c784c68fb18fe1d94b5077" translate="yes" xml:space="preserve">
          <source>First, the database name for the primary and replica should be the same because they contain the same data. Second, the username for the primary and replica should be different, and the replica user's permissions should be to read and not write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1468a039e189502b3dd31c3150cee48f6a6236f4" translate="yes" xml:space="preserve">
          <source>First, the engine needs to be specified inside the application's &lt;code&gt;Gemfile&lt;/code&gt;. If there isn't an application handy to test this out in, generate one using the &lt;code&gt;rails new&lt;/code&gt; command outside of the engine directory like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc622a4646f4694023946c9dc089c090ea7d75c" translate="yes" xml:space="preserve">
          <source>First, to tell Mail to turn an attachment into an inline attachment, you just call &lt;code&gt;#inline&lt;/code&gt; on the attachments method within your Mailer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c51da04699781ff96429f545394da6cb2b57fb" translate="yes" xml:space="preserve">
          <source>First, we declare that this connection can be identified by its current_user. This allows us to later be able to find all connections established for that current_user (and potentially disconnect them). You can declare as many identification indexes as you like. Declaring an identification means that an attr_accessor is automatically set for that key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b68688153987d6439de8175f29c07d67a7eb9b9" translate="yes" xml:space="preserve">
          <source>First, we will make a comment partial to extract showing all the comments for the article. Create the file &lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt; and put the following into it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb52362b88dc56354b3f3e3e600169f5cafd5d7" translate="yes" xml:space="preserve">
          <source>First, when the &lt;code&gt;module&lt;/code&gt; keyword is processed, the interpreter creates a new entry in the constant table of the class object stored in the &lt;code&gt;Object&lt;/code&gt; constant. Said entry associates the name &quot;Colors&quot; to a newly created module object. Furthermore, the interpreter sets the name of the new module object to be the string &quot;Colors&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1190be35c6213124c2d02d648e330fab1e14a4" translate="yes" xml:space="preserve">
          <source>First: takes a block so it can be used just like &lt;code&gt;Array#select&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd3bdb78d6bb3eb4a0f3e13e554d2fb4983c0df" translate="yes" xml:space="preserve">
          <source>Firstly, &lt;code&gt;super&lt;/code&gt; is called which calls the &lt;code&gt;initialize&lt;/code&gt; method on &lt;code&gt;Rack::Server&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f798e3c3068887b6710efdd9705a38be82d573" translate="yes" xml:space="preserve">
          <source>Firstly, you need a place within the application to create a new article. A great place for that would be at &lt;code&gt;/articles/new&lt;/code&gt;. With the route already defined, requests can now be made to &lt;code&gt;/articles/new&lt;/code&gt; in the application. Navigate to http://localhost:3000/articles/new and you'll see a routing error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9189d91e82e8f7905b5124c7bafaca424e6f4a" translate="yes" xml:space="preserve">
          <source>Fix tests and deprecated features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c32a616d9744ed6d811f633a73a67b1c4191e13" translate="yes" xml:space="preserve">
          <source>Fixture label interpolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5765732c82bf230e595c76b18afa6b128afcee0c" translate="yes" xml:space="preserve">
          <source>Fixtures are a way of organizing data that you want to test against; in short, sample data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743e121f5dd2e84df8ebe7b2fe8791a6d5c189b4" translate="yes" xml:space="preserve">
          <source>Fixtures are a way of organizing test data; they reside in the &lt;code&gt;fixtures&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710514649f0f9c8bc09e196fb1f42dec62e101fd" translate="yes" xml:space="preserve">
          <source>Fixtures are instances of Active Record. As mentioned in point #3 above, you can access the object directly because it is automatically available as a method whose scope is local of the test case. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea93790bd4818efe4da3235b0d6dd8cd36067ff" translate="yes" xml:space="preserve">
          <source>Fixtures are not designed to create every object that your tests need, and are best managed when only used for default data that can be applied to the common case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ff77a8f2eca13b03e22bfd5fbffd68987e2612" translate="yes" xml:space="preserve">
          <source>Fixtures that don't specify an ID get some extra features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923914245da303901960616cc70ead07d0ef00ba" translate="yes" xml:space="preserve">
          <source>Flash message keys are &lt;a href=&quot;https://github.com/rails/rails/commit/a668beffd64106a1e1fedb71cc25eaaa11baf0c1&quot;&gt;normalized to strings&lt;/a&gt;. They can still be accessed using either symbols or strings. Looping through the flash will always yield string keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90530fd8e1d8bca388a24d68d18ccceb0d823f58" translate="yes" xml:space="preserve">
          <source>Flash structure changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914d129a758d1e705286234c2680eac661c2ff4c" translate="yes" xml:space="preserve">
          <source>Flash::ClassMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16193581b3d368cbb2e12880d5c34d491ad02d5" translate="yes" xml:space="preserve">
          <source>Flash::ClassMethods#add_flash_types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2976e56a14fbd5732f9bed144d90d36fbfaaf7" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90a6de1d98d934560f0f6214351ff218b25ba49f" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#[]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7844d6863374bb4cf63688429c357c8ec2a8f11" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#[]=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0177b63a77d61047e4eb70c2f9db3013809131" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#alert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66c2fb938c51adfed41f4f587380f9b48cabb53" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#alert=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa87b5296a2a9e31b0cc54a0a7f5e49b37f457b8" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#clear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21580702e8381935742b7dc79e297b81cfc6e156" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9de39bd326468234a087b4180d945a6ce991f8" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#discard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6d12f451b75c3cf3f67a3672b6ef450dba0428" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c691c15d595052a24998640a0d5f6c0791b2ae3a" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#empty?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2912a95457ec9674999495b256c63e94d2a24279" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#initialize_copy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a8d9e3720db0924004cd134f47880f5444a242" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#keep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4918dd1c695100c39b4843a2c216c104d0bbc1" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#key?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea881a4cb9f8765da53e3c782414fd6548172ff" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e6eb2a7027538c3319ca84aca9bb8cdab68e8c" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#notice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a205f20f2db06e67952d265eb61ae9f90ce0bcc8" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#notice=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d338ea5883e01b9b79b8a1fa5cd9a1d5a4cc28" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#now</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a2ed8fdc166a90a0c84cf637171e38c9c6c72b" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#now_is_loaded?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b5bc63547d6e36bf6f32dea9ff05bbc5a74f88" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#stringify_array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6f1001ce329b84775d32431a7a5ca102ab2824" translate="yes" xml:space="preserve">
          <source>Flash::FlashHash#to_hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d4cbc27879bc99bd85d55d150f66570417c8db" translate="yes" xml:space="preserve">
          <source>Flash::RequestMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07699e7f813ba51ed1fe9a4ed1ec3efee17ea9c" translate="yes" xml:space="preserve">
          <source>Flash::RequestMethods#flash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4adaadbb2b4901a2d33f5c2c45ce61a5265338b4" translate="yes" xml:space="preserve">
          <source>Flash::RequestMethods#flash=</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f6c48133ba7a0375b6ea7262638e214c44eb1f" translate="yes" xml:space="preserve">
          <source>Flash::new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64435fd82de7b1d614dfb9844848a48b14c6cd2c" translate="yes" xml:space="preserve">
          <source>Float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7b4882ce084594064d8a213ce7d218d38a740a" translate="yes" xml:space="preserve">
          <source>Flush all &lt;a href=&quot;logsubscriber#method-c-log_subscribers&quot;&gt;::log_subscribers&lt;/a&gt;' logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f475c6adddac90040c881f45e7ef615c0f76125" translate="yes" xml:space="preserve">
          <source>Follow a single redirect response. If the last response was not a redirect, an exception will be raised. Otherwise, the redirect is performed on the location header. Any arguments are passed to the underlying call to `get`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4d42135d907481dc1f27709879cbb4076cf181" translate="yes" xml:space="preserve">
          <source>Following the &lt;em&gt;convention over configuration&lt;/em&gt; philosophy, Rails I18n provides reasonable default translation strings. When different translation strings are needed, they can be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b4cbffb8d15ff81bab1ce137494ca254c6c41d" translate="yes" xml:space="preserve">
          <source>Following this convention will allow you to use the default route generators (e.g. &lt;code&gt;resources&lt;/code&gt;, etc) without needing to qualify each &lt;code&gt;:path&lt;/code&gt; or &lt;code&gt;:controller&lt;/code&gt;, and will keep named route helpers' usage consistent throughout your application. See &lt;a href=&quot;layouts_and_rendering&quot;&gt;Layouts &amp;amp; Rendering Guide&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8042d1fa8c46f59b6ac0427027ba3251f625ac0" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; controllers, the implicit response is always &lt;code&gt;204 No Content&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="845d136019bc185b8437ca6c3b5a4fda2886ba8d" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt;, &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt; are the same: they cause the records in the join table to be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6871afc36b5eb296d00ee92f9388f5220a04d2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;, &lt;code&gt;destroy&lt;/code&gt; and &lt;code&gt;destroy_all&lt;/code&gt; will always call the &lt;code&gt;destroy&lt;/code&gt; method of the record(s) being removed so that callbacks are run. However &lt;code&gt;delete&lt;/code&gt; and &lt;code&gt;delete_all&lt;/code&gt; will either do the deletion according to the strategy specified by the &lt;code&gt;:dependent&lt;/code&gt; option, or if no &lt;code&gt;:dependent&lt;/code&gt; option is given, then it will follow the default strategy. The default strategy is to do nothing (leave the foreign keys with the parent ids set), except for &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt;, where the default strategy is &lt;code&gt;delete_all&lt;/code&gt; (delete the join records, without running their callbacks).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904678ef8c40284a4397b4b526da6ed401299ec8" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;has_many :through&lt;/code&gt; associations, the default deletion strategy is &lt;code&gt;:delete_all&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f47476879fee98e87b6542011fd00597d9910b" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;has_many&lt;/code&gt; associations, the default deletion strategy is &lt;code&gt;:nullify&lt;/code&gt;. This sets the foreign keys to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d551518d4f38e155ebc21db3ed28e506c5c1b0" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;rails server&lt;/code&gt; the equivalent of the following command is executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78e4858b6e5f03c64f70654748fbc0e9a1f8195" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;countermeasures against CSRF in administration interfaces and Intranet applications, refer to the countermeasures in the CSRF section&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d207a7d4fe314030cfc83d683d2201d468256aca" translate="yes" xml:space="preserve">
          <source>For AJAX requests other than GETs, extract the &amp;ldquo;csrf-token&amp;rdquo; from the meta-tag and send as the &amp;ldquo;X-CSRF-Token&amp;rdquo; HTTP header. If you are using rails-ujs this happens automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b45c7c547dfe153af7b5c2bffc2318f587d77f3" translate="yes" xml:space="preserve">
          <source>For Apache:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b16c65687851e9f77536de961a201d18686a384" translate="yes" xml:space="preserve">
          <source>For NGINX:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee9c3eca46b810b3e5c354af5b98d30bb8322e1" translate="yes" xml:space="preserve">
          <source>For a Rails::Command::TestCommand placed in &lt;code&gt;rails/command/test_command.rb&lt;/code&gt; would return &lt;code&gt;rails/test&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0337e09e3f5441269fd60fb9e46feba5fe0005f4" translate="yes" xml:space="preserve">
          <source>For a cache-only Redis server, set &lt;code&gt;maxmemory-policy&lt;/code&gt; to one of the variants of allkeys. Redis 4+ supports least-frequently-used eviction (&lt;code&gt;allkeys-lfu&lt;/code&gt;), an excellent default choice. Redis 3 and earlier should use least-recently-used eviction (&lt;code&gt;allkeys-lru&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2705926361d3741b615af29f48a9b2d2f6a9a658" translate="yes" xml:space="preserve">
          <source>For a complete writeup of possible configurations see the &lt;a href=&quot;configuring#configuring-action-mailer&quot;&gt;Configuring Action Mailer&lt;/a&gt; in our Configuring Rails Applications guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5329458c35cd39efd8df6906876b1124af456158" translate="yes" xml:space="preserve">
          <source>For a freshly generated Rails application, this might produce something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d43d5cb8e17443e1207469d2744b9d253a0aaab" translate="yes" xml:space="preserve">
          <source>For a full list of all configuration options, see the &lt;code&gt;ActionCable::Server::Configuration&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd474b6f355fe3d66739bb18c38b38cce6fb587" translate="yes" xml:space="preserve">
          <source>For a list of available field types for the &lt;code&gt;type&lt;/code&gt; parameter, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_column&quot;&gt;API documentation&lt;/a&gt; for the add_column method for the &lt;code&gt;SchemaStatements&lt;/code&gt; module. The &lt;code&gt;index&lt;/code&gt; parameter generates a corresponding index for the column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a632cdfeaf0496b79aedd8c39ba65af9bbf75d4a" translate="yes" xml:space="preserve">
          <source>For a list of commands that are reversible, please see &lt;code&gt;ActiveRecord::Migration::CommandRecorder&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308c98d5f29c4938d3ab80d8d4f526fffe9ff1fb" translate="yes" xml:space="preserve">
          <source>For a one-to-one association, this option allows you to specify how nested attributes are going to be used when an associated record already exists. In general, an existing record may either be updated with the new set of attribute values or be replaced by a wholly new record containing those values. By default the &lt;code&gt;:update_only&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt; and the nested attributes are used to update the existing record only if they include the record's &lt;code&gt;:id&lt;/code&gt; value. Otherwise a new record will be instantiated and used to replace the existing one. However if the &lt;code&gt;:update_only&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;, the nested attributes are used to update the record's attributes always, regardless of whether the &lt;code&gt;:id&lt;/code&gt; is present. The option is ignored for collection associations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4637a27cc000ab50c08001e55a209040599bf6" translate="yes" xml:space="preserve">
          <source>For all of these options, see the documentation for &lt;a href=&quot;urlfor&quot;&gt;url_for&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d526585a5f54a30a8eaef44ad2dcfe222f18618" translate="yes" xml:space="preserve">
          <source>For all other controllers, we use these heuristics to decide whether to render a template, raise an error for a missing template, or respond with &lt;code&gt;204 No Content&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f26755f9baea0b86d2c7a04cf2ea08dea99177e" translate="yes" xml:space="preserve">
          <source>For an attacker, of course, this is not useful, as the victim will see their own cookie. The next example will try to load an image from the URL &lt;a href=&quot;http://www.attacker.com/&quot;&gt;http://www.attacker.com/&lt;/a&gt; plus the cookie. Of course this URL does not exist, so the browser displays nothing. But the attacker can review their web server's access log files to see the victim's cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5cf0aca39dc93ecd2e542900ba6ef327c3a3185" translate="yes" xml:space="preserve">
          <source>For an input of &lt;code&gt;'application'&lt;/code&gt;, returns &lt;code&gt;[Mime[:html], Mime[:js], Mime[:xml], Mime[:yaml], Mime[:atom],
Mime[:json], Mime[:rss], Mime[:url_encoded_form]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f619e6e883062cd542c7646212939b88f9d7b987" translate="yes" xml:space="preserve">
          <source>For an input of &lt;code&gt;'text'&lt;/code&gt;, returns &lt;code&gt;[Mime[:json],
Mime[:xml], Mime[:ics], Mime[:html], Mime[:css], Mime[:csv], Mime[:js],
Mime[:yaml], Mime[:text]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082dff27f19a82b3d87be40920fb464199499b2a" translate="yes" xml:space="preserve">
          <source>For any file added with &lt;code&gt;rails encrypted:edit&lt;/code&gt; call &lt;code&gt;read&lt;/code&gt; to decrypt the file with the master key. The master key is either stored in &lt;code&gt;config/master.key&lt;/code&gt; or &lt;code&gt;ENV[&quot;RAILS_MASTER_KEY&quot;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d26752c642996579bf038d8c203e189752946a" translate="yes" xml:space="preserve">
          <source>For associations to reference one another by name, you can use the fixture name instead of specifying the &lt;code&gt;id:&lt;/code&gt; attribute on the associated fixtures. Rails will auto assign a primary key to be consistent between runs. For more information on this association behavior please read the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/FixtureSet.html&quot;&gt;Fixtures API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1098f27c8ef7ae7912308db5dd97ca40b959116f" translate="yes" xml:space="preserve">
          <source>For backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec16a42f04f744d11d0a82df5d22d4b3fd300d5d" translate="yes" xml:space="preserve">
          <source>For cases where you may want to connect to a database outside of the model, you can use &lt;code&gt;connected_to&lt;/code&gt; with a &lt;code&gt;database&lt;/code&gt; argument. The &lt;code&gt;database&lt;/code&gt; argument expects a symbol that corresponds to the database key in your config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a8616d9c6b20605c5f326d3773ea1901499627" translate="yes" xml:space="preserve">
          <source>For collections rendered such:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea9d25b8081ac747b2f34d48957ab89bdc7b74e" translate="yes" xml:space="preserve">
          <source>For content that is shared among all pages in your application, you can use partials directly from layouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d38c6436d48efb2171e61e4ad2e08c22898571c" translate="yes" xml:space="preserve">
          <source>For convenience &lt;code&gt;class_attribute&lt;/code&gt; also defines an instance predicate which is the double negation of what the instance reader returns. In the examples above it would be called &lt;code&gt;x?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ab28284918f43aedd7e55ecddc2142a68c368e" translate="yes" xml:space="preserve">
          <source>For convenience reasons, mailers provide a shortcut for ActionController::UrlFor#url_for. So within mailers, you only have to type &lt;code&gt;url_for&lt;/code&gt; instead of 'ActionController::UrlFor#url_for' in full. However, mailers don't have hostname information, and you still have to provide the &lt;code&gt;:host&lt;/code&gt; argument or set the default host that will be used in all mailers using the configuration option &lt;code&gt;config.action_mailer.default_url_options&lt;/code&gt;. For more information on &lt;a href=&quot;urlfor#method-i-url_for&quot;&gt;#url_for&lt;/a&gt; in mailers read the ActionMailer#Base documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0724c7b15780dba73c5d667fdaee1258b7598b" translate="yes" xml:space="preserve">
          <source>For convenience, an instance predicate method is defined as well. To skip it, pass &lt;code&gt;instance_predicate: false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6814ad5f45e05f234d12c7e5f13bb4e74c7f69a3" translate="yes" xml:space="preserve">
          <source>For creating Rails integration tests, we use the &lt;code&gt;test/integration&lt;/code&gt; directory for our application. Rails provides a generator to create an integration test skeleton for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba11a64102f043ec9929cba436a6e2209917fd9e" translate="yes" xml:space="preserve">
          <source>For creating Rails system tests, you use the &lt;code&gt;test/system&lt;/code&gt; directory in your application. Rails provides a generator to create a system test skeleton for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be092b7fcc3a480411e1c8129b43d20c1d0a0551" translate="yes" xml:space="preserve">
          <source>For dealing with the integration test runner, see &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Integration/Runner.html&quot;&gt;&lt;code&gt;ActionDispatch::Integration::Runner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c24097fa1d78bb11621d9b5ca806a4e1837ced" translate="yes" xml:space="preserve">
          <source>For details on which formats use which options, see &lt;a href=&quot;numberhelper&quot;&gt;ActiveSupport::NumberHelper&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00e2b8c47409365d97d4e6f528ec01bcde3521d" translate="yes" xml:space="preserve">
          <source>For each controller there is an associated directory in the &lt;code&gt;app/views&lt;/code&gt; directory which holds the template files that make up the views associated with that controller. These files are used to display the view that results from each controller action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cecb5f25de0d043523d188ca061eb02e3555352" translate="yes" xml:space="preserve">
          <source>For each hash that does &lt;em&gt;not&lt;/em&gt; have an &lt;code&gt;id&lt;/code&gt; key a new record will be instantiated, unless the hash also contains a &lt;code&gt;_destroy&lt;/code&gt; key that evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2d6a6cfdf650d1f7334b2020902fa0a4e0153a" translate="yes" xml:space="preserve">
          <source>For ease of comparison the examples above left out the submit button, as well as the auto generated hidden fields that enable UTF-8 support and adds an authenticity token needed for cross site request forgery protection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0f62db19f30623c30bc4c5827412523d0b10d8" translate="yes" xml:space="preserve">
          <source>For enqueuing and executing jobs in production you need to set up a queuing backend, that is to say you need to decide for a 3rd-party queuing library that Rails should use. Rails itself only provides an in-process queuing system, which only keeps the jobs in RAM. If the process crashes or the machine is reset, then all outstanding jobs are lost with the default async backend. This may be fine for smaller apps or non-critical jobs, but most production apps will need to pick a persistent backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9a20b3c2af7b1f9af89bbaaaf814a196aae626" translate="yes" xml:space="preserve">
          <source>For every WebSocket connection the Action Cable server accepts, a Connection object will be instantiated. This instance becomes the parent of all of the channel subscriptions that are created from there on. Incoming messages are then routed to these channel subscriptions based on an identifier sent by the Action Cable consumer. The Connection itself does not deal with any specific application logic beyond authentication and authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53bd9e5262d08ab39415e772674388f395185ec" translate="yes" xml:space="preserve">
          <source>For every field (also known as an attribute) you define in your table, Active Record provides a finder method. If you have a field called &lt;code&gt;first_name&lt;/code&gt; on your &lt;code&gt;Client&lt;/code&gt; model for example, you get &lt;code&gt;find_by_first_name&lt;/code&gt; for free from Active Record. If you have a &lt;code&gt;locked&lt;/code&gt; field on the &lt;code&gt;Client&lt;/code&gt; model, you also get &lt;code&gt;find_by_locked&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f825998b8ea48ba6e57af6666f388f344c45f1" translate="yes" xml:space="preserve">
          <source>For every form input, an ID attribute is generated from its name (&lt;code&gt;&quot;q&quot;&lt;/code&gt; in above example). These IDs can be very useful for CSS styling or manipulation of form controls with JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1bb2d1fc0e73d106dce92978cc0b789edcdc81" translate="yes" xml:space="preserve">
          <source>For every instance of your server you create and for every worker your server spawns, you will also have a new instance of Action Cable, but the use of Redis keeps messages synced across connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b131d46a980c58a828cd718fe23664c9b290464e" translate="yes" xml:space="preserve">
          <source>For every request, the router determines the value of the &lt;code&gt;controller&lt;/code&gt; and &lt;code&gt;action&lt;/code&gt; keys. These determine which controller and action are called. The remaining request parameters, the session (if one is available), and the full request with all the HTTP headers are made available to the action through accessor methods. Then the action is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9ee99a2d46a1ade9d8c8f3457e7e52a88dc82b" translate="yes" xml:space="preserve">
          <source>For every single method defined as a core extension this guide has a note that says where such a method is defined. In the case of &lt;code&gt;blank?&lt;/code&gt; the note reads:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b2288ca9dc28befebd61b3de5c073f19acb9b6" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;ActionMailer::Base&lt;/code&gt; defines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="524bf3ca9dadf5f247a4e2dc9bdde0724ffacf98" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;nil&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; return themselves. &lt;code&gt;Array#to_param&lt;/code&gt; calls &lt;code&gt;to_param&lt;/code&gt; on the elements and joins the result with &quot;/&quot;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c413fbbe5dd9cd3a858b2b4096dbe032a4a77e73" translate="yes" xml:space="preserve">
          <source>For example a Ruby Hash providing translations can look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170196ddc4d09ce4cda34f4c4c5ee56ae2abcd1a" translate="yes" xml:space="preserve">
          <source>For example by overwriting the &lt;code&gt;source_paths&lt;/code&gt; method to contain the location of your template. Now methods like &lt;code&gt;copy_file&lt;/code&gt; will accept relative paths to your template's location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3e0784f50a9883d2ee2bc8d15f7c79df866699" translate="yes" xml:space="preserve">
          <source>For example if the response contains two ordered lists, each with four nested list elements then the following tests will both pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f20c4dda23afb7d89aae13ee9bf300fad784d5b" translate="yes" xml:space="preserve">
          <source>For example in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9c7d94226539f8fd01b1ea618c55e3afbb516c" translate="yes" xml:space="preserve">
          <source>For example it might be worth running your tests with an identical setup to production (&lt;code&gt;config.eager_load = true&lt;/code&gt;, &lt;code&gt;config.cache_classes = true&lt;/code&gt;) in order to catch any problems before they hit production (this is compensation for the lack of dev-prod parity). However this will slow down the boot time for individual tests on a dev machine (and is not immediately compatible with spring see below). So one possibility is to do this on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;CI&lt;/a&gt; machine only (which should run without spring).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defc1940a4dd0193e647323988081968494c879e" translate="yes" xml:space="preserve">
          <source>For example the &lt;code&gt;animals&lt;/code&gt; database would look in the &lt;code&gt;db/animals_migrate&lt;/code&gt; directory and &lt;code&gt;primary&lt;/code&gt; would look in &lt;code&gt;db/migrate&lt;/code&gt;. Rails generators now take a &lt;code&gt;--database&lt;/code&gt; option so that the file is generated in the correct directory. The command can be run like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4164d6bdf84d42ceee89df70e0b8125f8655ce78" translate="yes" xml:space="preserve">
          <source>For example this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f34fa7be257762cd81671d8c28f862d285ae2b1" translate="yes" xml:space="preserve">
          <source>For example when you add the following translations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdd64b6edc3015b0feb8ab4bbd89640d7033a07" translate="yes" xml:space="preserve">
          <source>For example you can define the following in your locale (e.g. en.yml).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60c607e3474a7900b265d55fcc3418a0e547bdd" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;Post.all&lt;/code&gt; may return Comments, Messages, and Emails by storing the record's subclass in a &lt;code&gt;type&lt;/code&gt; attribute. By calling &lt;code&gt;instantiate&lt;/code&gt; instead of &lt;code&gt;new&lt;/code&gt;, finder methods ensure they get new instances of the appropriate class for each record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf66d1a44d2101e495b85580babbc259bf80ce4" translate="yes" xml:space="preserve">
          <source>For example, Action Pack uses this method to load the class that provides a certain session store:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6154e45261d0b097d4040e06da7bb873708d6ed7" translate="yes" xml:space="preserve">
          <source>For example, Action Pack uses this method to write asset cache files like &lt;code&gt;all.css&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f7d44904c062a7f688e153aa6aa342262647e5" translate="yes" xml:space="preserve">
          <source>For example, MemCacheStore's &lt;a href=&quot;store#method-i-write&quot;&gt;write&lt;/a&gt; method supports the &lt;code&gt;:raw&lt;/code&gt; option, which tells the memcached server to store all values as strings. We can use this option with &lt;a href=&quot;store#method-i-fetch&quot;&gt;fetch&lt;/a&gt; too:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3d5d287bffd32896b1c0eaa3c12bd6d88e384f" translate="yes" xml:space="preserve">
          <source>For example, RedCloth translates &lt;code&gt;_test_&lt;/code&gt; to &amp;lt;em&amp;gt;test&amp;lt;em&amp;gt;, which makes the text italic. However, up to the current version 3.0.4, it is still vulnerable to XSS. Get the &lt;a href=&quot;http://www.redcloth.org&quot;&gt;all-new version 4&lt;/a&gt; that removed serious bugs. However, even that version has &lt;a href=&quot;http://www.rorsecurity.info/journal/2008/10/13/new-redcloth-security.html&quot;&gt;some security bugs&lt;/a&gt;, so the countermeasures still apply. Here is an example for version 3.0.4:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12eec00a4e2551721df22edd14a78ffe57682d1" translate="yes" xml:space="preserve">
          <source>For example, Twitter uses its &lt;a href=&quot;https://developer.twitter.com/&quot;&gt;public API&lt;/a&gt; in its web application, which is built as a static site that consumes JSON resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c9a73f0a024ecacf20e02eb9ca2d972148c7dc" translate="yes" xml:space="preserve">
          <source>For example, a controller would use it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36807628302cb7f63d61ec9b00c720c3a66328e" translate="yes" xml:space="preserve">
          <source>For example, an Active Record User with the &lt;code&gt;name&lt;/code&gt; attribute has a &lt;code&gt;name?&lt;/code&gt; method that you can call to determine whether the user has a name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd8ddc78651c1fe92b18ef46e19aa0d7820ac326" translate="yes" xml:space="preserve">
          <source>For example, an extension doing any of the following would need a railtie:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ecf83b433a16d76fdbf6a525918a0408c7f7a4" translate="yes" xml:space="preserve">
          <source>For example, assuming &lt;code&gt;User&lt;/code&gt; is not yet loaded, the following will deadlock:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d6e2ba2b5ca72099050bc51954934eb60bffb4" translate="yes" xml:space="preserve">
          <source>For example, consider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5720879c0c094489b8e07786876daa4b930a6b9c" translate="yes" xml:space="preserve">
          <source>For example, consider the following &lt;code&gt;Category&lt;/code&gt;, &lt;code&gt;Article&lt;/code&gt;, &lt;code&gt;Comment&lt;/code&gt;, &lt;code&gt;Guest&lt;/code&gt; and &lt;code&gt;Tag&lt;/code&gt; models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abbc53eb87a910fb8d7fa5fdf0d4aca34fda66f" translate="yes" xml:space="preserve">
          <source>For example, consider the following model declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c06d067e94e94d58cc740894d6023d5a1b6889" translate="yes" xml:space="preserve">
          <source>For example, consider the following situation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a73be60895a600be896f0c57ef39e8b845fc9df" translate="yes" xml:space="preserve">
          <source>For example, given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f70c84ca388e65cf93ecde1b7ce6555b37b8c51" translate="yes" xml:space="preserve">
          <source>For example, given a form builder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d702ce4ea2a9355c7a77e5b441c13b923ca4449" translate="yes" xml:space="preserve">
          <source>For example, given a model &lt;code&gt;User&lt;/code&gt; with attributes of &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;occupation&lt;/code&gt;, the &lt;code&gt;create&lt;/code&gt; method call will create and save a new record into the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bf18f557c03a50fd99ecfb17e5272886b2287f" translate="yes" xml:space="preserve">
          <source>For example, given we have a &lt;code&gt;users&lt;/code&gt; table with &lt;code&gt;guid&lt;/code&gt; as the primary key. If we want a separate &lt;code&gt;todos&lt;/code&gt; table to hold the foreign key &lt;code&gt;user_id&lt;/code&gt; in the &lt;code&gt;guid&lt;/code&gt; column, then we can use &lt;code&gt;primary_key&lt;/code&gt; to achieve this like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c7c440681326a44ffce536da1a198f33839b8a" translate="yes" xml:space="preserve">
          <source>For example, here's a pattern of creating notifications when new comments are posted. (The notification may in turn trigger an email, a push notification, or just appear in the UI somewhere):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1aca8cba6f8183d74233f15b01caf147dec177" translate="yes" xml:space="preserve">
          <source>For example, here's a small section of the &lt;code&gt;rails routes&lt;/code&gt; output for a RESTful route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f94503578c2fbc3b86e869fc30148b6a6329e29" translate="yes" xml:space="preserve">
          <source>For example, here's some code that will trigger this error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5d03ceef19f28d80efa1487f18c1a8d026069c" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;UsersHelper&lt;/code&gt; is implemented in &lt;code&gt;app/helpers/users_helper.rb&lt;/code&gt;, the module is autoloadable, you do not need (and should not write) a &lt;code&gt;require&lt;/code&gt; call for it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b375441949d8cc18b809e9a7067ce453aaacc656" translate="yes" xml:space="preserve">
          <source>For example, if an initializer stores and caches a certain class object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d467439f1634faea77923c6458790d1b88215b" translate="yes" xml:space="preserve">
          <source>For example, if the following templates exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b153b66cd2b084d8e0224d5dde74d748867621b7" translate="yes" xml:space="preserve">
          <source>For example, if the user invoke the controller generator as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c390bd482a93ce5733a8ce30310b3833619189c6" translate="yes" xml:space="preserve">
          <source>For example, if this code triggers autoloading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac1d7c152b8b5872b72d15664fe6ebda91004f8" translate="yes" xml:space="preserve">
          <source>For example, if we have a &lt;code&gt;User&lt;/code&gt; model with &lt;code&gt;category_ids&lt;/code&gt; field and we have the following code in our update action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9527832e1e9fcfe3bb90b44513273f467f05cf86" translate="yes" xml:space="preserve">
          <source>For example, if you generate a &lt;code&gt;ProjectsController&lt;/code&gt;, Rails will also add a new file at &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt;. By default these files will be ready to use by your application immediately using the &lt;code&gt;require_tree&lt;/code&gt; directive. See &lt;a href=&quot;#manifest-files-and-directives&quot;&gt;Manifest Files and Directives&lt;/a&gt; for more details on require_tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3de426c9f417afe3d71314ad675f3b5749bf7b" translate="yes" xml:space="preserve">
          <source>For example, if you have a jQuery library with many modules, which is stored in &lt;code&gt;lib/assets/javascripts/library_name&lt;/code&gt;, the file &lt;code&gt;lib/assets/javascripts/library_name/index.js&lt;/code&gt; serves as the manifest for all files in this library. This file could include a list of all the required files in order, or a simple &lt;code&gt;require_tree&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ddeb14e2a35362bc4455266673f721c7a9ab04" translate="yes" xml:space="preserve">
          <source>For example, if you need to source a gem from &lt;code&gt;&quot;http://gems.github.com&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6659ed58a0e23d309c2880738533927eaf158f0e" translate="yes" xml:space="preserve">
          <source>For example, if you want to find a collection of the dates on which orders were created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a671054948cc7afeffc8e29a1070a79e25d5ddf" translate="yes" xml:space="preserve">
          <source>For example, if you want to load &lt;code&gt;rspec-rails&lt;/code&gt; only in the &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dd3a783227cfeb7097ea5857fe80f176b221fe" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to cache each product on a page, you could use this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8f0559e6fd22508415f77cad6b8ee5d7057fed" translate="yes" xml:space="preserve">
          <source>For example, if you're getting a set of records and want to order them in ascending order by the &lt;code&gt;created_at&lt;/code&gt; field in your table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3f9cf891059c22ed145464705ba954596ae85f" translate="yes" xml:space="preserve">
          <source>For example, if you're in a console session and edit some file behind the scenes, the code can be reloaded with the &lt;code&gt;reload!&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782fec9b21b7646dda3d0eb34ec8b2d6162d8ebb" translate="yes" xml:space="preserve">
          <source>For example, if your application depends on the gems &lt;code&gt;bj&lt;/code&gt; and &lt;code&gt;nokogiri&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7169085c220c519e1edea4ed09c8fa931b19c7ce" translate="yes" xml:space="preserve">
          <source>For example, imagine a loop iterating over each person in &lt;code&gt;@project.people&lt;/code&gt; to generate an input tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efcfb301607d26518c50a702c119e7c9a0df3c39" translate="yes" xml:space="preserve">
          <source>For example, in a controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cbf57c9587f427c012838696f67e39dc0f8fc0" translate="yes" xml:space="preserve">
          <source>For example, in a website where changes have an approval workflow an administrator could be able to preview them easily, just apply them within a transaction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e951031c44cba831fe22b1d299a3dbdd271956ba" translate="yes" xml:space="preserve">
          <source>For example, in the previous situation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d128602c2cef23c043bbcd4130bfdbe9dfb553" translate="yes" xml:space="preserve">
          <source>For example, in the resource generator, the controller should be invoked with a pluralized class name. But by default it is invoked with the same name as the resource generator, which is singular. To change this, we can give a block to customize how the controller can be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8571fb001c03edee3f9a1dff5eb161b62067de8" translate="yes" xml:space="preserve">
          <source>For example, instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b214eaacb21e54b79699baf45df9ed09ba848e" translate="yes" xml:space="preserve">
          <source>For example, let's say we have a standard application layout, but also a special page that requires certain JavaScript that the rest of the site doesn't need. We can use &lt;code&gt;content_for&lt;/code&gt; to include this JavaScript on our special page without fattening up the rest of the site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9881d30ebc25cc189703f067fb870c32f67e33" translate="yes" xml:space="preserve">
          <source>For example, let's suppose you want to place your controllers in &lt;code&gt;lib/controllers&lt;/code&gt;. You can set that as an option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbedede484566197089ec444807b7fef28561224" translate="yes" xml:space="preserve">
          <source>For example, shoulda is considered a test_framework and is an extension of test_unit. However, most part of shoulda generators are similar to test_unit ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010460143995bd631fd29219aa3815c4c396ec21" translate="yes" xml:space="preserve">
          <source>For example, something like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a3ab5bfacf66d125db92261ba899909863fec8" translate="yes" xml:space="preserve">
          <source>For example, suppose that you have 5 models, with the following hierarchy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbfc9324e0a230cb4f88f2e8997c7d8401ca77a" translate="yes" xml:space="preserve">
          <source>For example, suppose that you have a User model, and that you have a &lt;code&gt;resources :users&lt;/code&gt; route. Normally, &lt;code&gt;user_path&lt;/code&gt; will construct a path with the user object's 'id' in it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68db63f6b91bd3f69689a588ca99fef570cbdc01" translate="yes" xml:space="preserve">
          <source>For example, suppose you have an &lt;code&gt;ArticlesController&lt;/code&gt; with a show action. By default, calling this action will render &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt;. But if you set &lt;code&gt;I18n.locale = :de&lt;/code&gt;, then &lt;code&gt;app/views/articles/show.de.html.erb&lt;/code&gt; will be rendered instead. If the localized template isn't present, the undecorated version will be used. This means you're not required to provide localized views for all cases, but they will be preferred and used if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12e578c04af498b50aad3f4930bbd0596b6b9e9" translate="yes" xml:space="preserve">
          <source>For example, suppose your application has a &lt;code&gt;Message&lt;/code&gt; model. If you want each message to have many images, define the &lt;code&gt;Message&lt;/code&gt; model like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e856ca406a28871271dfd09494fffd474135afe9" translate="yes" xml:space="preserve">
          <source>For example, suppose your application has a &lt;code&gt;User&lt;/code&gt; model. If you want each user to have an avatar, define the &lt;code&gt;User&lt;/code&gt; model like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4845e35b532e0a6ae9c9a6d5abf067c22b3f608c" translate="yes" xml:space="preserve">
          <source>For example, take the following view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e06363e5de0de055babf944403b3f5a3aa2393" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;NetworkResource&lt;/code&gt; model has &lt;code&gt;network_address&lt;/code&gt; and &lt;code&gt;cidr_range&lt;/code&gt; attributes that should be aggregated using the &lt;code&gt;NetAddr::CIDR&lt;/code&gt; value class (&lt;a href=&quot;http://www.rubydoc.info/gems/netaddr/1.5.0/NetAddr/CIDR&quot;&gt;www.rubydoc.info/gems/netaddr/1.5.0/NetAddr/CIDR&lt;/a&gt;). The constructor for the value class is called &lt;code&gt;create&lt;/code&gt; and it expects a CIDR address string as a parameter. New values can be assigned to the value object using either another &lt;code&gt;NetAddr::CIDR&lt;/code&gt; object, a string or an array. The &lt;code&gt;:constructor&lt;/code&gt; and &lt;code&gt;:converter&lt;/code&gt; options can be used to meet these requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f87ec70b0394b6278116e1b6cbea8b351e6a69" translate="yes" xml:space="preserve">
          <source>For example, the dependencies mechanism uses them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53b6db9fd02c64bffe49a780016740ac429fb42" translate="yes" xml:space="preserve">
          <source>For example, the file &lt;code&gt;app/helpers/users_helper.rb&lt;/code&gt; should define &lt;code&gt;UsersHelper&lt;/code&gt; and the file &lt;code&gt;app/controllers/admin/payments_controller.rb&lt;/code&gt; should define &lt;code&gt;Admin::PaymentsController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fd907db20ec40e116bd681b46742c041fc1078" translate="yes" xml:space="preserve">
          <source>For example, the file cache store deserializes this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0bf0da571ebaa2761cff539a8aeec320175f38" translate="yes" xml:space="preserve">
          <source>For example, the following database.yml&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97eee7a0d4a084452cc8f1838f80f6a2969b9586" translate="yes" xml:space="preserve">
          <source>For example, the following demo integration test prints the body of the controller response to the console:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490f24b70c9dbfd4d048b909cc4d0a3848bd6feb" translate="yes" xml:space="preserve">
          <source>For example, the following escaped ERB tag would be needed in the template (note the extra &lt;code&gt;%&lt;/code&gt;)...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06e230ea0a7d2054b21c224c8a3198aa9211615" translate="yes" xml:space="preserve">
          <source>For example, the following routes would allow for &lt;code&gt;articles&lt;/code&gt; with &lt;code&gt;to_param&lt;/code&gt; values like &lt;code&gt;1-hello-world&lt;/code&gt; that always begin with a number and &lt;code&gt;users&lt;/code&gt; with &lt;code&gt;to_param&lt;/code&gt; values like &lt;code&gt;david&lt;/code&gt; that never begin with a number to share the root namespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9941c9fe1adbe50c3828b65548ca33f878b31284" translate="yes" xml:space="preserve">
          <source>For example, the parent namespace of the string &quot;A::B::C&quot; is the string &quot;A::B&quot;, the parent namespace of &quot;A::B&quot; is &quot;A&quot;, and the parent namespace of &quot;A&quot; is &quot;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfbc7c1d66e137a08f7d24d6f0c1205a5d7ea87" translate="yes" xml:space="preserve">
          <source>For example, the value returned for the missing translation key &lt;code&gt;&quot;blog.post.title&quot;&lt;/code&gt; will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9ab8367f005b2e5df0fa87e9f15f334106fe55" translate="yes" xml:space="preserve">
          <source>For example, there is a hook provided within Active Record that is called every time Active Record uses an SQL query on a database. This hook could be &lt;strong&gt;subscribed&lt;/strong&gt; to, and used to track the number of queries during a certain action. There's another hook around the processing of an action of a controller. This could be used, for instance, to track how long a specific action has taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61335b399ca0c612135a585163da22e19756f471" translate="yes" xml:space="preserve">
          <source>For example, these files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3999170f0726b8fac607bc2d27b50c91c05916df" translate="yes" xml:space="preserve">
          <source>For example, this method from &lt;code&gt;ActionController::HttpAuthentication::Token::ControllerMethods&lt;/code&gt; uses &lt;code&gt;blank?&lt;/code&gt; for checking whether a token is present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ebdb02a528bccda95b366823ebd1275442f856" translate="yes" xml:space="preserve">
          <source>For example, this migration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbf42caeaf86a1c53263fef527f68e943bb49b6" translate="yes" xml:space="preserve">
          <source>For example, to create a new person you typically set up a new instance of &lt;code&gt;Person&lt;/code&gt; in the &lt;code&gt;PeopleController#new&lt;/code&gt; action, &lt;code&gt;@person&lt;/code&gt;, and in the view template pass that object to &lt;code&gt;form_for&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e9e771cfbff8100cd38dc964351777518c5aef" translate="yes" xml:space="preserve">
          <source>For example, to generate the Car model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe27f8ed8f16b226d7835e951757e8037d9ea3b7" translate="yes" xml:space="preserve">
          <source>For example, to select only &lt;code&gt;viewable_by&lt;/code&gt; and &lt;code&gt;locked&lt;/code&gt; columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9ed07923bb7b4a64450b13fd75255c4d38e870" translate="yes" xml:space="preserve">
          <source>For example, to send newsletters only to users with the primary key starting from 2000 up to 10000:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca45333de25723015609c73a0ca791bc369a34a" translate="yes" xml:space="preserve">
          <source>For example, to send newsletters only to users with the primary key starting from 2000:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e8559e97cd9d81dfe888624c855d15c3e1e85b" translate="yes" xml:space="preserve">
          <source>For example, when an action of &lt;code&gt;ArticlesController&lt;/code&gt; is called Rails tries optimistically to use &lt;code&gt;ArticlesHelper&lt;/code&gt;. It is OK that the helper module does not exist, so if an exception for that constant name is raised it should be silenced. But it could be the case that &lt;code&gt;articles_helper.rb&lt;/code&gt; raises a &lt;code&gt;NameError&lt;/code&gt; due to an actual unknown constant. That should be reraised. The method &lt;code&gt;missing_name?&lt;/code&gt; provides a way to distinguish both cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d190ca2b52d936f728d86a17363fcf644839beef" translate="yes" xml:space="preserve">
          <source>For example, when an action of &lt;code&gt;ArticlesController&lt;/code&gt; is called Rails tries to load &lt;code&gt;articles_helper.rb&lt;/code&gt;, but that file may not exist. That's fine, the helper module is not mandatory so Rails silences a load error. But it could be the case that the helper module does exist and in turn requires another library that is missing. In that case Rails must reraise the exception. The method &lt;code&gt;is_missing?&lt;/code&gt; provides a way to distinguish both cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a8fa466f2f73212535fb97c32b0556e76e1304" translate="yes" xml:space="preserve">
          <source>For example, when there are two placeholders with only one value supplied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5be9961c5068063b6e241f83fe32897da5d624" translate="yes" xml:space="preserve">
          <source>For example, with a &lt;code&gt;app/assets/javascripts/application.js&lt;/code&gt; file containing the following lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ff51d77659af819e801bb7d6c51c09bd30772c" translate="yes" xml:space="preserve">
          <source>For example, with allow_unsafe_raw_sql set to :disabled, the following code would raise this exception:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611ace70746d4380f4a8f14e806d54c55f63cbb2" translate="yes" xml:space="preserve">
          <source>For example, you can replace the Simple backend with the Chain backend to chain multiple backends together. This is useful when you want to use standard translations with a Simple backend but store custom application translations in a database or other backends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe93712629946bf83ed492ad22d25c6ce33f7b7e" translate="yes" xml:space="preserve">
          <source>For example, you could add this setting to &lt;code&gt;config/application.rb&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5f9196086b6ceee7828bfa87b707a6c8025386" translate="yes" xml:space="preserve">
          <source>For example, you could do this in your controller to rollback a transaction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c785eed18ff9bb13ef5bad692ce60a163e1267c" translate="yes" xml:space="preserve">
          <source>For example, you could verify the contents on the title element in your response with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7aa8456e4361405b140cc1ca2ae4ad3a248dfeb" translate="yes" xml:space="preserve">
          <source>For example, you may want to prefix all fragment cache keys with a global version identifier, so you can easily invalidate all caches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a181e84d1ff2bbcf954d2b7f5274157933bb511f" translate="yes" xml:space="preserve">
          <source>For example, you might have an Admin model inheriting from User:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fad6d6b9386ff3807adb3569a7d932329d86df" translate="yes" xml:space="preserve">
          <source>For example, your &lt;code&gt;config/locales&lt;/code&gt; directory could look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b00774a71fe0cf727bd4e0da1b27be0435fc60" translate="yes" xml:space="preserve">
          <source>For fields generated in this way using the &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt;, if &lt;code&gt;:person&lt;/code&gt; also happens to be the name of an instance variable &lt;code&gt;@person&lt;/code&gt;, the default value of the field shown when the form is initially displayed (e.g. in the situation where you are editing an existing record) will be the value of the corresponding attribute of &lt;code&gt;@person&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2cb5e44535088c1b16f9f8031b8806c4b68f4e" translate="yes" xml:space="preserve">
          <source>For full options to the message argument please see the &lt;a href=&quot;#message&quot;&gt;message documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5a28476d189c846e3cbe161eac9fe11110dfb4" translate="yes" xml:space="preserve">
          <source>For further customizability, it is possible to suppress the default validations by passing &lt;code&gt;validations: false&lt;/code&gt; as an argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081785e33ee38d94a2b1fe967089455bd6b360e6" translate="yes" xml:space="preserve">
          <source>For further details have a look at the docs of your production web server: - &lt;a href=&quot;https://tn123.org/mod_xsendfile/&quot;&gt;Apache&lt;/a&gt; - &lt;a href=&quot;https://www.nginx.com/resources/wiki/start/topics/examples/xsendfile/&quot;&gt;NGINX&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee428c034bfedd0bd9c4b170c81d041282ffc75" translate="yes" xml:space="preserve">
          <source>For further information on how to install Valgrind and use with Ruby, refer to &lt;a href=&quot;http://blog.evanweaver.com/articles/2008/02/05/valgrind-and-ruby/&quot;&gt;Valgrind and Ruby&lt;/a&gt; by Evan Weaver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f497bd8fccf35ad1f3c9f4cf110528be8c261a" translate="yes" xml:space="preserve">
          <source>For good tests, you'll need to give some thought to setting up test data. In Rails, you can handle this by defining and customizing fixtures. You can find comprehensive documentation in the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/FixtureSet.html&quot;&gt;Fixtures API documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0021e110456041c0e68a4a209cf0e9cafe7d3d33" translate="yes" xml:space="preserve">
          <source>For hash conditions, you can either use the table name in the key, or use a sub-hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5d86a2f562335d3250e949505a4a77029c422e" translate="yes" xml:space="preserve">
          <source>For instance to change the digest used for signed cookies from SHA1 to SHA256, you would first assign the new configuration value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533bda3f16ed04a12da250098304a2e8ad5e028d" translate="yes" xml:space="preserve">
          <source>For instance, &lt;code&gt;time.ago(24.hours)&lt;/code&gt; will move back exactly 24 hours, while &lt;code&gt;time.ago(1.day)&lt;/code&gt; will move back 23-25 hours, depending on the day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0555f051ef622a3759d8d901430f34f55ed3098" translate="yes" xml:space="preserve">
          <source>For instance, a time + 24.hours will advance exactly 24 hours, while a time + 1.day will advance 23-25 hours, depending on the day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432a889b80998873943abef346adc1b161cc8720" translate="yes" xml:space="preserve">
          <source>For instance, a time - 24.hours will go subtract exactly 24 hours, while a time - 1.day will subtract 23-25 hours, depending on the day.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5acdeb653805919d86d1a9ce5df8284eda2146" translate="yes" xml:space="preserve">
          <source>For instance, if you have PostsController and a template named &lt;code&gt;app/views/layouts/posts.html.erb&lt;/code&gt;, that template will be used for all actions in PostsController and controllers inheriting from PostsController.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f39ec3506ee6c0bc87f33e6db2dd27d026352d" translate="yes" xml:space="preserve">
          <source>For instance, let's store all &amp;ldquo;render&amp;rdquo; events in an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b770f4448e5e929fd693b2aaaf6da25cd3d99e" translate="yes" xml:space="preserve">
          <source>For instance, running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c287dde897ab69c30222f02c065a07a96212ca" translate="yes" xml:space="preserve">
          <source>For instance, the following example would go to the application's &lt;code&gt;articles_path&lt;/code&gt; if that template was rendered from the application, or the engine's &lt;code&gt;articles_path&lt;/code&gt; if it was rendered from the engine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81fa2a9148de4c026b9fc2333a65b051bc87daf" translate="yes" xml:space="preserve">
          <source>For instance, the template above using &lt;code&gt;provide&lt;/code&gt; would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab7760c833a84bf1f465cf1c517bdef6d100866" translate="yes" xml:space="preserve">
          <source>For instance, using the &lt;code&gt;stale?&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081fac8d5083588ca7d68cac1d678ec147120595" translate="yes" xml:space="preserve">
          <source>For instance, while this definition is similar to the previous one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dfaa219f0e366a79492958c9bb99ce19f7d38e" translate="yes" xml:space="preserve">
          <source>For locales, simply place the locale files in the &lt;code&gt;config/locales&lt;/code&gt; directory, just like you would in an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc53aeab1e696d9a231a484c3b1e7b0a5e98758" translate="yes" xml:space="preserve">
          <source>For many resources, loose upgrades are sufficient: if a thread is awaiting a lock, it is not running any other code. With &lt;code&gt;purpose&lt;/code&gt; matching, it is possible to yield only to other threads whose activity will not interfere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff4c1585245da6606f3072f0d97226c836eb452" translate="yes" xml:space="preserve">
          <source>For more complex cases, such as conversion to or from your application domain objects, consider using the &lt;a href=&quot;../../attributes&quot;&gt;ActiveRecord::Attributes&lt;/a&gt; API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a60e17c61b23f54793b61438b571a3881e6c6f" translate="yes" xml:space="preserve">
          <source>For more complex examples such as defining alternate character sets or self-encoding text first, please refer to the &lt;a href=&quot;https://github.com/mikel/mail&quot;&gt;Mail&lt;/a&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9aa008521c931e74225ae51f6e60a1b686bfb21" translate="yes" xml:space="preserve">
          <source>For more detailed information on other functionalities available, please refer to the specific modules included in &lt;code&gt;ActiveModel::Model&lt;/code&gt; (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0908267f30f307c13ec11e1e41e611132b4c66e1" translate="yes" xml:space="preserve">
          <source>For more details and examples of individual methods, check the API documentation. In particular the documentation for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html&quot;&gt;&lt;code&gt;ActiveRecord::ConnectionAdapters::SchemaStatements&lt;/code&gt;&lt;/a&gt; (which provides the methods available in the &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; methods), &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html&quot;&gt;&lt;code&gt;ActiveRecord::ConnectionAdapters::TableDefinition&lt;/code&gt;&lt;/a&gt; (which provides the methods available on the object yielded by &lt;code&gt;create_table&lt;/code&gt;) and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html&quot;&gt;&lt;code&gt;ActiveRecord::ConnectionAdapters::Table&lt;/code&gt;&lt;/a&gt; (which provides the methods available on the object yielded by &lt;code&gt;change_table&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2c9db80b50eb0ad9e15f68cf408e7b7893d292" translate="yes" xml:space="preserve">
          <source>For more details on creating custom types, see the documentation for &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt;. For more details on registering your types to be referenced by a symbol, see &lt;a href=&quot;../type#method-c-register&quot;&gt;ActiveRecord::Type.register&lt;/a&gt;. You can also pass a type object directly, in place of a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1ead23b1228be53c887ea5c02f5e35de106075" translate="yes" xml:space="preserve">
          <source>For more details on key rotation with encrypted and signed messages as well as the various options the &lt;code&gt;rotate&lt;/code&gt; method accepts, please refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/MessageEncryptor.html&quot;&gt;MessageEncryptor API&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/MessageVerifier.html&quot;&gt;MessageVerifier API&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da2a7e63edaa3e19544b269ac230e7df25f63ce" translate="yes" xml:space="preserve">
          <source>For more details on the routing process, see &lt;a href=&quot;routing&quot;&gt;Rails Routing from the Outside In&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7edc0799806823826db064d0716eca378f0a8a" translate="yes" xml:space="preserve">
          <source>For more details read the &lt;a href=&quot;migration&quot;&gt;&amp;ldquo;Transactional Migrations&amp;rdquo; section above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e2e5876de4851bed71d4264251fa966d17185d" translate="yes" xml:space="preserve">
          <source>For more details, including other events you can bind to, check out &lt;a href=&quot;https://github.com/turbolinks/turbolinks/blob/master/README.md&quot;&gt;the Turbolinks README&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f047931c6182258700f5ddb25dead735c079a39" translate="yes" xml:space="preserve">
          <source>For more information about migrations, refer to &lt;a href=&quot;active_record_migrations&quot;&gt;Active Record Migrations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde075bd772de835a77c4dadee48206f95fa03ca" translate="yes" xml:space="preserve">
          <source>For more information about routing, refer to &lt;a href=&quot;routing&quot;&gt;Rails Routing from the Outside In&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303c583b575361bde9efaec26506f8c3e4254406" translate="yes" xml:space="preserve">
          <source>For more information about specifying conditions as a hash or array, see the Conditions section in the introduction to &lt;a href=&quot;base&quot;&gt;ActiveRecord::Base&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe1f64595cd21c7163f2bf2a314a52327d58a2d" translate="yes" xml:space="preserve">
          <source>For more information about the methods defined on the Chars proxy see &lt;a href=&quot;activesupport/multibyte/chars&quot;&gt;ActiveSupport::Multibyte::Chars&lt;/a&gt;. For information about how to change the default Multibyte behavior see &lt;a href=&quot;activesupport/multibyte&quot;&gt;ActiveSupport::Multibyte&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c7b1418ccd5d52f028a056b1bb15cb26845066" translate="yes" xml:space="preserve">
          <source>For more information on &lt;code&gt;Minitest&lt;/code&gt;, refer to &lt;a href=&quot;http://docs.seattlerb.org/minitest&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c89d0fa21e82bf517c533b3cdf12b3cc0323591" translate="yes" xml:space="preserve">
          <source>For more information on Active Record associations, see the &lt;a href=&quot;association_basics&quot;&gt;Active Record Associations&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc249d76b1155b7966298297ad0e4c41612e374f" translate="yes" xml:space="preserve">
          <source>For more information on Builder please consult the &lt;a href=&quot;https://github.com/jimweirich/builder&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d19f4d66c8605ad2dbd8f63a90b898427fb8c8" translate="yes" xml:space="preserve">
          <source>For more information on Rails' routing system and the associated conventions, please see &lt;a href=&quot;routing&quot;&gt;Rails Routing from the Outside In&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a84e9b0b629c050823dc494ec0d1ae82724357b" translate="yes" xml:space="preserve">
          <source>For more information on changes made to Rails 5.0 please see the release notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de5ee863f676d9c75f258741e542824b0a5394d" translate="yes" xml:space="preserve">
          <source>For more information on changes made to Rails 5.1 please see the release notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332de34b15281a0ae0bc57b18259d33941fc8d22" translate="yes" xml:space="preserve">
          <source>For more information on changes made to Rails 5.2 please see the release notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80de18adbdcb0e36c093c7cbf9b193728745ba9" translate="yes" xml:space="preserve">
          <source>For more information on changes made to Rails 6.0 please see the release notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45e3ae53af05ab84c03c41845bc9759d435437d" translate="yes" xml:space="preserve">
          <source>For more information on routing assertions available in Rails, see the API documentation for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html&quot;&gt;&lt;code&gt;ActionDispatch::Assertions::RoutingAssertions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc4fd48f1f8311edd9c91d896c75feceda42021" translate="yes" xml:space="preserve">
          <source>For more information on routing, see the &lt;a href=&quot;routing&quot;&gt;Rails Routing&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e819aaa04ac2ab8f15aa80776b49cb044ce902c" translate="yes" xml:space="preserve">
          <source>For more information on the dangers of SQL injection, see the &lt;a href=&quot;security#sql-injection&quot;&gt;Ruby on Rails Security Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2368c0d305ed909a17ef9dd6a2c18a2864d74b8a" translate="yes" xml:space="preserve">
          <source>For more information see the &lt;a href=&quot;../migration&quot;&gt;&amp;ldquo;Transactional Migrations&amp;rdquo; section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754a6d63416a85f1c57896f56a1c4b93856ce437" translate="yes" xml:space="preserve">
          <source>For more information, read the &lt;a href=&quot;asset_pipeline&quot;&gt;Asset Pipeline guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5073d9c5360dd34de2568a65a085dd60bee58b32" translate="yes" xml:space="preserve">
          <source>For more information, refer to the reference above and &lt;a href=&quot;https://weblog.rubyonrails.org/2012/3/21/strong-parameters/&quot;&gt;this blog article about Strong Parameters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0822b506a154bfc70930e9cc6e2aca2d9d286424" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for the &lt;code&gt;:inverse_of&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb72b198f77ca4c9b9cb1ea79ba163707ea7f58" translate="yes" xml:space="preserve">
          <source>For more on PATCH and why this change was made, see &lt;a href=&quot;https://weblog.rubyonrails.org/2012/2/26/edge-rails-patch-is-the-new-primary-http-method-for-updates/&quot;&gt;this post&lt;/a&gt; on the Rails blog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdca84b31d7108a5f2c3ae47fec4220b568cd710" translate="yes" xml:space="preserve">
          <source>For more, see &lt;code&gt;Routing::Mapper::Resources#resources&lt;/code&gt;, &lt;code&gt;Routing::Mapper::Scoping#namespace&lt;/code&gt;, and &lt;code&gt;Routing::Mapper::Scoping#scope&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73b0e21c09aef6c741098eafb10774dfe69ab34" translate="yes" xml:space="preserve">
          <source>For most conventional &lt;a href=&quot;https://en.wikipedia.org/wiki/Representational_state_transfer&quot;&gt;RESTful&lt;/a&gt; applications, the controller will receive the request (this is invisible to you as the developer), fetch or save data from a model, and use a view to create HTML output. If your controller needs to do things a little differently, that's not a problem, this is just the most common way for a controller to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f79245b7c0875beb69c5cde91cdc7ffc338c48" translate="yes" xml:space="preserve">
          <source>For most stores, this ID is used to look up the session data on the server, e.g. in a database table. There is one exception, and that is the default and recommended session store - the CookieStore - which stores all session data in the cookie itself (the ID is still available to you if you need it). This has the advantage of being very lightweight and it requires zero setup in a new application in order to use the session. The cookie data is cryptographically signed to make it tamper-proof. And it is also encrypted so anyone with access to it can't read its contents. (Rails will not accept it if it has been edited).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27bf22080191b365296dff989dd68e9d0ccde8c" translate="yes" xml:space="preserve">
          <source>For namespaced controllers you can use the directory notation. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e76de24984c2f2b9a6610a13156cbaabcc22df2" translate="yes" xml:space="preserve">
          <source>For namespaced routes, like &lt;code&gt;admin_post_url&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4926bebd110be3befd2e5e561af80d930839b577" translate="yes" xml:space="preserve">
          <source>For now, just keep in mind that common functionality like Rails engines, I18n and Rails configuration are all being defined here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9ae327f85c22d64750df780636ef6dc327979d" translate="yes" xml:space="preserve">
          <source>For one-to-one nested associations, if you build the new (in-memory) child object yourself before assignment, then this module will not overwrite it, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23697fa05e0fecf96d86467c88fbae1ec74b93b6" translate="yes" xml:space="preserve">
          <source>For options, please see the parent section, &lt;a href=&quot;#calculations&quot;&gt;Calculations&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa9f654f30613a573da0c9198aec456093a6d53" translate="yes" xml:space="preserve">
          <source>For options, see &lt;code&gt;Base#match&lt;/code&gt;. For &lt;code&gt;:shallow_path&lt;/code&gt; option, see &lt;code&gt;Resources#resources&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cbed0c063602b9267b0f40ad0e90635837a12c" translate="yes" xml:space="preserve">
          <source>For options, see &lt;code&gt;match&lt;/code&gt;, as &lt;code&gt;mount&lt;/code&gt; uses it internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd8b4f4b24ff91f7b22992befc303194d511b64" translate="yes" xml:space="preserve">
          <source>For options, see &lt;code&gt;match&lt;/code&gt;, as &lt;code&gt;root&lt;/code&gt; uses it internally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4f6b1e9b66b1b4691a655d00d7de12ee029372" translate="yes" xml:space="preserve">
          <source>For other actions, you just need to insert the action name as the first element of the array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc00acf0da313bcef402e8042442480cbc019d2" translate="yes" xml:space="preserve">
          <source>For other durations please refer to the time extensions to &lt;code&gt;Integer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bb00db033a10a802ad177adc98015ab561ad9c" translate="yes" xml:space="preserve">
          <source>For other durations please refer to the time extensions to &lt;code&gt;Numeric&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7225651934596fb993ff0c588eba6818b534b7e" translate="yes" xml:space="preserve">
          <source>For redirects within the same controller, you can even call follow_redirect and the redirect will be followed, triggering another action call which can then be asserted against.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a210a81ad03206eaa1d76224a480c22cc33a76" translate="yes" xml:space="preserve">
          <source>For removing objects from the session, you can either assign a single key to &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60d3b627d051edc6f33ed8fd3ab3e989c35eec6" translate="yes" xml:space="preserve">
          <source>For routes that don't fit the &lt;code&gt;resources&lt;/code&gt; mold, you can use the HTTP helper methods &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5943f5bf0047015c862144ae1384ea5c7c5c7238" translate="yes" xml:space="preserve">
          <source>For session management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a648be68b6570f7c46bf8d963aac0b312be8e4" translate="yes" xml:space="preserve">
          <source>For several reasons the Simple backend shipped with Active Support only does the &quot;simplest thing that could possibly work&quot; &lt;em&gt;for Ruby on Rails&lt;/em&gt;&lt;sup id=&quot;footnote-3-ref&quot;&gt;&lt;a href=&quot;#footnote-3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; ... which means that it is only guaranteed to work for English and, as a side effect, languages that are very similar to English. Also, the simple backend is only capable of reading translations but cannot dynamically store them to any format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccb771b1868d49f80bdb1a24b4a3c514653b4ad" translate="yes" xml:space="preserve">
          <source>For severe security issues all releases in the current major series, and also the last major release series will receive patches and new versions. The classification of the security issue is judged by the core team.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec5bd652cf6324b81872307c77c37a3cbcb54c5" translate="yes" xml:space="preserve">
          <source>For simple class modifications, use &lt;code&gt;Class#class_eval&lt;/code&gt;. For complex class modifications, consider using &lt;code&gt;ActiveSupport::Concern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e00b3463c5c916c2c8cf0901ca46393d8019388" translate="yes" xml:space="preserve">
          <source>For the curious, &lt;code&gt;'articles#index'&lt;/code&gt; actually expands out to &lt;code&gt;ArticlesController.action(:index)&lt;/code&gt;, which returns a valid Rack application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d1aab46d62d4fe6b039884d455728672c8a1b7" translate="yes" xml:space="preserve">
          <source>For the purpose of this guide pretend for a moment that you are an avid bird watcher. Your favorite bird is the Yaffle, and you want to create a plugin that allows other developers to share in the Yaffle goodness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d48d180d0d8ae88ec8e27b38717e261eebe1164" translate="yes" xml:space="preserve">
          <source>For the purposes of unit testing a mailer, fixtures are used to provide an example of how the output &lt;em&gt;should&lt;/em&gt; look. Because these are example emails, and not Active Record data like the other fixtures, they are kept in their own subdirectory apart from the other fixtures. The name of the directory within &lt;code&gt;test/fixtures&lt;/code&gt; directly corresponds to the name of the mailer. So, for a mailer named &lt;code&gt;UserMailer&lt;/code&gt;, the fixtures should reside in &lt;code&gt;test/fixtures/user_mailer&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3350c645746b50e40b536232c6b1ab96b40c7909" translate="yes" xml:space="preserve">
          <source>For the second way, use &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; in both models. This requires a join table that has no corresponding model or primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9d027367e66ff1880ca5f7c8411883f9682c8d" translate="yes" xml:space="preserve">
          <source>For the vast majority of applications this change needs no action. But in the very rare event that your application needs autoloading while running in production mode, set &lt;code&gt;Rails.application.config.enable_dependency_loading&lt;/code&gt; to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28492b4fcdb58ad07d0e63466f4dc02fd025baf" translate="yes" xml:space="preserve">
          <source>For these helpers the first argument is the name of an instance variable and the second is the name of a method (usually an attribute) to call on that object. Rails will set the value of the input control to the return value of that method for the object and set an appropriate input name. If your controller has defined &lt;code&gt;@person&lt;/code&gt; and that person's name is Henry then a form containing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e738173d2db847682b2dec420d36522d33747e3" translate="yes" xml:space="preserve">
          <source>For this section, make sure to run the commands in the root of the &lt;code&gt;blorgh&lt;/code&gt; engine's directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea73237c6c463516bc6d0a1fe4b30b6fe5cfe21" translate="yes" xml:space="preserve">
          <source>For top-level or anonymous modules &lt;code&gt;module_parent_name&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4282455476c88f2d4e5c51401dbaff576f5efde" translate="yes" xml:space="preserve">
          <source>For very simple APIs, this may be true. However, even in very HTML-heavy applications, most of an application's logic lives outside of the view layer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d5977690a0068c8a87050146c913c589fdd3d1" translate="yes" xml:space="preserve">
          <source>Force HTTPS protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbe57b83435ddb7acb09f8ade93a9531aaa98bd" translate="yes" xml:space="preserve">
          <source>Force SSL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4cd9ef2fc9fb7d2d87e08a816391dbefd83e9ab" translate="yes" xml:space="preserve">
          <source>Force default layout behavior with inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020dff7089d2be223511ba9a0984d9c8de56f52e" translate="yes" xml:space="preserve">
          <source>Forces eager loading by performing a LEFT OUTER JOIN on &lt;code&gt;args&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229cba24f1bb4c835f8a78d7c5224cde3cf74c3f" translate="yes" xml:space="preserve">
          <source>Forces reloading of relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35efe543522796c977403286a276da9177a3f032" translate="yes" xml:space="preserve">
          <source>Foreign Key Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee372205e15d8140654b1f5e4b497dd3fb87773" translate="yes" xml:space="preserve">
          <source>Foreign Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3b6b5ab77f8e3b5b876460f080af20f2660c5b" translate="yes" xml:space="preserve">
          <source>Form helpers are designed to make working with models much easier compared to using just standard HTML elements by providing a set of methods for creating forms based on your models. This helper generates the HTML for forms, providing a method for each sort of input (e.g., text, password, select, and so on). When the form is submitted (i.e., when the user hits the submit button or form.submit is called via JavaScript), the form inputs will be bundled into the params object and passed back to the controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3f04cf61327b139ac43f511ef4b0add12bb3fe" translate="yes" xml:space="preserve">
          <source>Form helpers are designed to make working with resources much easier compared to using vanilla HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d62480bc24ce94d867c462b5ea1a053b2304271" translate="yes" xml:space="preserve">
          <source>Form to external resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42baa6a9386bdd8611f928ea9a5d31b72dc2b2b" translate="yes" xml:space="preserve">
          <source>FormBuilder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6e949cce9c1a0b48fbef71036f5979f9b2fa2e" translate="yes" xml:space="preserve">
          <source>FormBuilder#default_form_builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca3791edc7e92e058ef4a781902a111a01c2767" translate="yes" xml:space="preserve">
          <source>FormBuilder::ClassMethods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06439debceded59abd717cf998c78b07967adc6" translate="yes" xml:space="preserve">
          <source>FormBuilder::ClassMethods#default_form_builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c7e3bd2a7ae88a97397841cb221353c5893842" translate="yes" xml:space="preserve">
          <source>FormHelper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c8e14faa240cc7ef6841b9e737dc4bf9a433878" translate="yes" xml:space="preserve">
          <source>FormOptionsHelper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff66420ce0286ed3e95edc21fb03e009325fed5" translate="yes" xml:space="preserve">
          <source>FormTagHelper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12984e06c56fe528d2ad1a23d2911b11cbe0eaaf" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;number&lt;/code&gt; as a percentage string (e.g., 65%). You can customize the format in the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79eb2ae76ca6ec449a6d3ee45c763c126d185edd" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;number&lt;/code&gt; into a currency string (e.g., $13.65). You can customize the format in the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15e696b4343693f24051d95e145307d3556641c" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;number&lt;/code&gt; into a phone number (US by default e.g., (555) 123-9876). You can customize the format in the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9087826827238bee72040680877f1be50e16a6d0" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;number&lt;/code&gt; with grouped thousands using &lt;code&gt;delimiter&lt;/code&gt; (e.g., 12,324). You can customize the format in the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce25360a16bad11c97ab22f6ccdccef057ce5f3" translate="yes" xml:space="preserve">
          <source>Formats a &lt;code&gt;number&lt;/code&gt; with the specified level of &lt;code&gt;:precision&lt;/code&gt; (e.g., 112.32 has a precision of 2 if &lt;code&gt;:significant&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, and 5 if &lt;code&gt;:significant&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;). You can customize the format in the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc776b091b3382b38aed0c280d9ec9d779a97d9" translate="yes" xml:space="preserve">
          <source>Formats a number as a percentage string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24137e01ee4942302bce4b292209b1180f939f0a" translate="yes" xml:space="preserve">
          <source>Formats a number into a currency string (e.g., $13.65).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977f52c1b073e41b3adf1f2c49f4a70d8da74e01" translate="yes" xml:space="preserve">
          <source>Formats a number into a phone number (US by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a3df5495a0e4593c653bd591c7c511a7b817c7" translate="yes" xml:space="preserve">
          <source>Formats a number with grouped thousands using a delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1dc7b44eb9c0739c906e2f69738f3f9c8c1831" translate="yes" xml:space="preserve">
          <source>Formats a number with the specified level of &lt;code&gt;precision&lt;/code&gt;, which defaults to 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0043ae4298b3d06a5fd43ce48d3a38c30d51a9" translate="yes" xml:space="preserve">
          <source>Formats can have different variants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b71df31a450decc3e21d4d1a881a5419c397de3" translate="yes" xml:space="preserve">
          <source>Formats the bytes in &lt;code&gt;number&lt;/code&gt; into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). This method is useful for reporting file sizes to users. You can customize the format in the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e31cad204330e5149984c1f02df1ca22623437" translate="yes" xml:space="preserve">
          <source>Formats the bytes in size into a more understandable representation; useful for reporting file sizes to users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e4b7202eead25ba9651b37a636710a33bceccd" translate="yes" xml:space="preserve">
          <source>FormattedTimeHelper can now be included in a controller, using the &lt;code&gt;helper&lt;/code&gt; class method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841f832857c780b47f478b4f21d34d8995af64b8" translate="yes" xml:space="preserve">
          <source>Formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6064d8c0fdc370c16d0cb1decb7c2f4d2f48bd3" translate="yes" xml:space="preserve">
          <source>Forms in web applications are an essential interface for user input. However, form markup can quickly become tedious to write and maintain because of the need to handle form control naming and its numerous attributes. Rails does away with this complexity by providing view helpers for generating form markup. However, since these helpers have different use cases, developers need to know the differences between the helper methods before putting them to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f90dadb540b75dfd7fe49aa813e22e9fe5c574" translate="yes" xml:space="preserve">
          <source>Forms to External Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51872412424b5b001a8994daa52aa0433211c5d1" translate="yes" xml:space="preserve">
          <source>Forward all undefined methods to the wrapped string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87f1def6b27d559cd70ef16104a21f1b6656c0f" translate="yes" xml:space="preserve">
          <source>Fragment Caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f60731ecb1db88f599e05d5ae64dbc1c05c6e1" translate="yes" xml:space="preserve">
          <source>Fragment Caching allows a fragment of view logic to be wrapped in a cache block and served out of the cache store when the next request comes in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e1a67c93949462da2d64d588540c2e8bf396eca" translate="yes" xml:space="preserve">
          <source>Fragment and Russian doll caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65687f1a127f7a349e21ea3b95524aae25478c49" translate="yes" xml:space="preserve">
          <source>Fragment caching is also supported in multipart emails. Read more about caching in the &lt;a href=&quot;caching_with_rails&quot;&gt;Rails caching guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a87156e114f876662714fbdca15c43e39c59af1" translate="yes" xml:space="preserve">
          <source>Fragment caching is used for caching various blocks within views without caching the entire action as a whole. This is useful when certain elements of an action change frequently or depend on complicated state while other parts rarely change or can be shared amongst multiple parties. The caching is done using the &lt;code&gt;cache&lt;/code&gt; helper available in the Action View. See &lt;a href=&quot;../../actionview/helpers/cachehelper&quot;&gt;ActionView::Helpers::CacheHelper&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b54f8482b53e78899c9d0d675ac1b6e08786a1" translate="yes" xml:space="preserve">
          <source>Framework Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3c6299b8dae81ec79c1a95a20bbc4e1193b226" translate="yes" xml:space="preserve">
          <source>Frequently, though, you don't actually want to transform the variant right away. But rather simply refer to a specific variant that can be created by a controller on-demand. Like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce752397ff409fa4e1ebbf68cd6fd398265a939b" translate="yes" xml:space="preserve">
          <source>From Ruby on Rails 5.0 onwards, Ruby 2.2.2+ is the only supported Ruby version. Make sure you are on Ruby 2.2.2 version or greater, before you proceed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456e67dcfffd46875b07dcdd2979d27d3c444b6e" translate="yes" xml:space="preserve">
          <source>From address of the mail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139e2dd0b8efa41c55955c25ca8ca1b8a8a86604" translate="yes" xml:space="preserve">
          <source>From now on, the victim and the attacker will co-use the web application with the same session: The session became valid and the victim didn't notice the attack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f047f539e66f425c63629e920e4cd735314523a8" translate="yes" xml:space="preserve">
          <source>From the application root, run the model generator. Tell it to generate a &lt;code&gt;Comment&lt;/code&gt; model, with the related table having two columns: an &lt;code&gt;article_id&lt;/code&gt; integer and &lt;code&gt;text&lt;/code&gt; text column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b609484e9868e469cf6b8bf187983551d89dbf" translate="yes" xml:space="preserve">
          <source>From the controller's point of view, there are three ways to create an HTTP response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a020e70c864c57b45c0daa7a9b3ad09b6ff5f4f" translate="yes" xml:space="preserve">
          <source>From the security standpoint, if you don't expect to have any markup in your response body, you should be using &lt;code&gt;render :plain&lt;/code&gt; as most browsers will escape unsafe content in the response for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b62ff8c72a56f8b7ea4baf56058aeff306c16c7b" translate="yes" xml:space="preserve">
          <source>From then on, what happens to the constant and the instance does not matter. For example, the constant could be deleted, the class object could be assigned to a different constant, be stored in no constant anymore, etc. Once the name is set, it doesn't change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d63e4c56f1d2b74aaf3de1c3943ce348748d84" translate="yes" xml:space="preserve">
          <source>From:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2e86b36efeac1ca193b435611b528921adc671" translate="yes" xml:space="preserve">
          <source>Full Text Search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f60e44f69f0342108671d1d4b76b126fc79dec6" translate="yes" xml:space="preserve">
          <source>Full path to template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a708ed7181f3ee5df5f438b8078ce3255c607c0" translate="yes" xml:space="preserve">
          <source>Full usage example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c184078617fe80ea5c3db256e50c1973b7cd84e5" translate="yes" xml:space="preserve">
          <source>Full-Stack Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8cc17fb9092b97f58b24c8584410fc2ce9317e" translate="yes" xml:space="preserve">
          <source>Functional Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81067236545c01740a7616a0c156bd3ad2fb44d4" translate="yes" xml:space="preserve">
          <source>Functional Tests for Your Controllers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c6c55ccb738dd0789051385ca2b4191e1e1619" translate="yes" xml:space="preserve">
          <source>Functional and System Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726801e888550d5681ed8cb7509e8b159e096ee9" translate="yes" xml:space="preserve">
          <source>Functional tests are written as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a538a70b2f89e22b93f533e9e38e79404076b406" translate="yes" xml:space="preserve">
          <source>Functional tests do not verify whether the specified request type is accepted by the action, we're more concerned with the result. Request tests exist for this use case to make your tests more purposeful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fde2ac8490ff2b99ac9c9890e046fdff6e3659" translate="yes" xml:space="preserve">
          <source>Functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f47c4648e8524b4014506fdca1cac11cb6d83cd" translate="yes" xml:space="preserve">
          <source>Fundamentally HTML forms don't know about any sort of structured data, all they generate is name-value pairs, where pairs are just plain strings. The arrays and hashes you see in your application are the result of some parameter naming conventions that Rails uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7aa71a09d6d67d4695dc0add7eb21a682057363" translate="yes" xml:space="preserve">
          <source>Furthermore, if you use the Rails form helpers to generate your forms, when a validation error occurs on a field, it will generate an extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; around the entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5924f715bbe18b4d7d8397af8ba720ee74d36d7" translate="yes" xml:space="preserve">
          <source>Furthermore, unlike &lt;code&gt;select&lt;/code&gt; and other &lt;code&gt;Relation&lt;/code&gt; scopes, &lt;code&gt;pluck&lt;/code&gt; triggers an immediate query, and thus cannot be chained with any further scopes, although it can work with scopes already constructed earlier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e317e6b8e3a8bc6060b771e81e12256161ab847" translate="yes" xml:space="preserve">
          <source>GENERATOR_KEY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f030bbbd32966cde41037b98a8849c46b76e4bc1" translate="yes" xml:space="preserve">
          <source>GET</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b600e280d8aedeb38543314e8324d445dbab011d" translate="yes" xml:space="preserve">
          <source>GET index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8451a53ed163c2d67ec7a8e8b4b4e7f123cc0f" translate="yes" xml:space="preserve">
          <source>GET new POST create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a71d4473704c417a909b2d997465ff002873410" translate="yes" xml:space="preserve">
          <source>GET requests are checked for cross-origin JavaScript after rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e91f2476d8d4e3ea4f15377afd7aad7ad52eab0" translate="yes" xml:space="preserve">
          <source>GET requests are not protected since they don't have side effects like writing to the database and don't leak sensitive information. JavaScript requests are an exception: a third-party site can use a &amp;lt;script&amp;gt; tag to reference a JavaScript URL on your site. When your JavaScript response loads on their site, it executes. With carefully crafted JavaScript on their end, sensitive data in your JavaScript response may be extracted. To prevent this, only XmlHttpRequest (known as XHR or Ajax) requests are allowed to make requests for JavaScript responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdbdc8dde9670885c36821f5c5352313c50d12b" translate="yes" xml:space="preserve">
          <source>GET show GET edit PATCH/PUT update DELETE destroy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab7f09cf6b3df5d7a649934c8905a8d66d856b1" translate="yes" xml:space="preserve">
          <source>GET()&lt;a&gt;Show source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862460a4eaa4ab2cc4be9660a6e5e588d081c956" translate="yes" xml:space="preserve">
          <source>GIGABYTE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becd12810bf9a6ffec3b00da78a601586b644de5" translate="yes" xml:space="preserve">
          <source>GITKEEP_FILES</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5becf070a51b514072cd4c270ed3e295210d6ccc" translate="yes" xml:space="preserve">
          <source>GREEN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abd4fc7472c11a75bb252fdead83c4ed392ae03" translate="yes" xml:space="preserve">
          <source>GZipping your assets</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
