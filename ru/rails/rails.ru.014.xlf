<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="b37b81146f80a1a4919ec9c9b0e5d0cd85718f8c" translate="yes" xml:space="preserve">
          <source>Keep in mind that removing these middlewares will remove support for certain features in Action Controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cd42ebc58551029cf6d64890f34636b5f605b0" translate="yes" xml:space="preserve">
          <source>Keep in mind the order of these preprocessors is important. For example, if you called your JavaScript file &lt;code&gt;app/assets/javascripts/projects.erb.coffee&lt;/code&gt; then it would be processed with the CoffeeScript interpreter first, which wouldn't understand ERB and therefore you would run into problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b50dd97691ece4d75030debc9d7c69689f4370" translate="yes" xml:space="preserve">
          <source>Keep in mind, of course, that anything generated with these commands inside of an engine that has &lt;code&gt;isolate_namespace&lt;/code&gt; in the &lt;code&gt;Engine&lt;/code&gt; class will be namespaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811c5671e6f72a16320e58794cbdd505a4a8bfdd" translate="yes" xml:space="preserve">
          <source>Keep your master key safe. Do not commit your master key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3ffafd6d0bd987a08e86445a216acb025e6c9e" translate="yes" xml:space="preserve">
          <source>Keeping the Postman in Check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d925c36d2e941d2af29d231d5dbe9ae819ce7d" translate="yes" xml:space="preserve">
          <source>Keeps an array of all the emails sent out through the Action Mailer with delivery_method :test. Most useful for unit and functional testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bcbef0779247a6b500aae75580d306dd7aad75" translate="yes" xml:space="preserve">
          <source>Keeps either the entire current flash or a specific flash entry available for the next action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74808d3df030e992e7b9444241625147986487c1" translate="yes" xml:space="preserve">
          <source>Kernel</source>
          <target state="translated">Kernel</target>
        </trans-unit>
        <trans-unit id="c67dd20ee842986086a0a915ddc2a279490130ed" translate="yes" xml:space="preserve">
          <source>Key</source>
          <target state="translated">Key</target>
        </trans-unit>
        <trans-unit id="dccff3da927cfa30d8263467f25f4099d890d528" translate="yes" xml:space="preserve">
          <source>Key aspects of Ruby constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd612611d70de311a74efc2fb60fd72bd02e7463" translate="yes" xml:space="preserve">
          <source>Key prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd3bb93252c4e7c505b9a33e3f33adbbb95274d" translate="yes" xml:space="preserve">
          <source>Key used in the store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74018238351de8a4b5f41ef51f98e3f2c94d5837" translate="yes" xml:space="preserve">
          <source>KeyError</source>
          <target state="translated">KeyError</target>
        </trans-unit>
        <trans-unit id="74b7794756029ab4d216c6b5291e0a3c6b00afdc" translate="yes" xml:space="preserve">
          <source>KeyGenerator</source>
          <target state="translated">KeyGenerator</target>
        </trans-unit>
        <trans-unit id="38565bb17684d112a156b97c9fd4c097d914dfef" translate="yes" xml:space="preserve">
          <source>KeyGenerator#generate_key</source>
          <target state="translated">KeyGenerator#generate_key</target>
        </trans-unit>
        <trans-unit id="5e8529f8277cb52ad5e090f3e1129a3e4596b4ad" translate="yes" xml:space="preserve">
          <source>KeyGenerator::new</source>
          <target state="translated">KeyGenerator::new</target>
        </trans-unit>
        <trans-unit id="759dc506a4c9361dcdcf96ba09aab32ce67fc6aa" translate="yes" xml:space="preserve">
          <source>Keys are Rails &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; names, values are TZInfo identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c91d792d7d8ea478b77ee4fc93f40db3edb4c80" translate="yes" xml:space="preserve">
          <source>Keys are always translated into Strings and are case sensitive. When an object is specified as a key and has a &lt;code&gt;cache_key&lt;/code&gt; method defined, this method will be called to define the key. Otherwise, the &lt;code&gt;to_param&lt;/code&gt; method will be called. Hashes and Arrays can also be used as keys. The elements will be delimited by slashes, and the elements within a &lt;a href=&quot;../../hash&quot;&gt;Hash&lt;/a&gt; will be sorted by key so they are consistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed45856e9e6ecb02a978d31d54e643eb027da025" translate="yes" xml:space="preserve">
          <source>Keys are truncated with their own SHA2 digest if they exceed 1kB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dade8eae87c393093fe35456b0c0546385b2018" translate="yes" xml:space="preserve">
          <source>Keys should normally be unique. If the block returns the same value for different elements no collection is built for that key. The last item will win.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4171878f85224ae8e8085027502b35e802765f" translate="yes" xml:space="preserve">
          <source>Keys with a '_html' suffix and keys named 'html' are marked as HTML safe. When you use them in views the HTML will not be escaped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603962661dd677bfb30ebbf245488be607df467b" translate="yes" xml:space="preserve">
          <source>Knowing this, you can combine &lt;code&gt;select_tag&lt;/code&gt; and &lt;code&gt;options_for_select&lt;/code&gt; to achieve the desired, complete markup:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c048acd3b4935270bc39bf7303395a77e3c631" translate="yes" xml:space="preserve">
          <source>LAST_MODIFIED</source>
          <target state="translated">LAST_MODIFIED</target>
        </trans-unit>
        <trans-unit id="096c41c788487a970ec074e54230e758c0f4c4b5" translate="yes" xml:space="preserve">
          <source>LOCALHOST</source>
          <target state="translated">LOCALHOST</target>
        </trans-unit>
        <trans-unit id="40c3322b3b3d0d946724fe784d34663629e1932a" translate="yes" xml:space="preserve">
          <source>LOCATION</source>
          <target state="translated">LOCATION</target>
        </trans-unit>
        <trans-unit id="f7b234a238285a1f43faf56fe04f8eca0e8187cd" translate="yes" xml:space="preserve">
          <source>LOCK_NOT_AVAILABLE</source>
          <target state="translated">LOCK_NOT_AVAILABLE</target>
        </trans-unit>
        <trans-unit id="098eeaebc4158474bc2be818c08af354bd7af4d9" translate="yes" xml:space="preserve">
          <source>LOOKUP</source>
          <target state="translated">LOOKUP</target>
        </trans-unit>
        <trans-unit id="eea76aa993177151ffe54751f3710090c41018a2" translate="yes" xml:space="preserve">
          <source>Label references for associations (belongs_to, has_one, has_many)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1b43b180145d1655abe2acaac47486dfdc28a0" translate="yes" xml:space="preserve">
          <source>Last configurable block to run. Called after frameworks initialize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091fde44725196b0d7b6b7ede88ee30e526d8fe4" translate="yes" xml:space="preserve">
          <source>Last time we left when the &lt;code&gt;app&lt;/code&gt; method was being defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510f1240320c0b4245e6973ae63e21990f3c7f94" translate="yes" xml:space="preserve">
          <source>Lastly an &lt;code&gt;after_find&lt;/code&gt; and &lt;code&gt;after_initialize&lt;/code&gt; callback is triggered for each object that is found and instantiated by a finder, with &lt;code&gt;after_initialize&lt;/code&gt; being triggered after new objects are instantiated as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8edffefe23a3b0069154ba211dceaa5589a707c" translate="yes" xml:space="preserve">
          <source>Lastly, for new primary databases you need to set the &lt;code&gt;migrations_paths&lt;/code&gt; to the directory where you will store migrations for that database. We'll look more at &lt;code&gt;migrations_paths&lt;/code&gt; later on in this guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11ef8043bdfd5d2effaa0c4ccffaea4aff10bd1" translate="yes" xml:space="preserve">
          <source>Lastly, simple content can be passed as a parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a487af9f0197f34ab23417574667b914a550ec" translate="yes" xml:space="preserve">
          <source>Lastly, the &lt;code&gt;app/views&lt;/code&gt; directory contains a &lt;code&gt;layouts&lt;/code&gt; folder, which contains a file at &lt;code&gt;blorgh/application.html.erb&lt;/code&gt;. This file allows you to specify a layout for the engine. If this engine is to be used as a stand-alone engine, then you would add any customization to its layout in this file, rather than the application's &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0e45525464dbd04e79c657faf5c6b2fb11c005" translate="yes" xml:space="preserve">
          <source>Lastly, you can use sprintf-style % escapes in the template. This works slightly differently than the previous methods; you are responsible for ensuring that the values in the template are properly quoted. The values are passed to the connector for quoting, but the caller is responsible for ensuring they are enclosed in quotes in the resulting SQL. After quoting, the values are inserted using the same escapes as the Ruby core method &lt;code&gt;Kernel::sprintf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392c8854d0981f89d43dab619acc0d260db6fa94" translate="yes" xml:space="preserve">
          <source>Later, when the body of the module definition is interpreted, a new entry is created in the constant table of the module object stored in the &lt;code&gt;Colors&lt;/code&gt; constant. That entry maps the name &quot;RED&quot; to the string &quot;0xff0000&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec266232611c1ccc105a2b7fb87e8c1a59a2eca" translate="yes" xml:space="preserve">
          <source>Launch the web server again if you stopped it to generate the controller (&lt;code&gt;rails
server&lt;/code&gt;) and navigate to http://localhost:3000 in your browser. You'll see the &quot;Hello, Rails!&quot; message you put into &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;, indicating that this new route is indeed going to &lt;code&gt;WelcomeController&lt;/code&gt;'s &lt;code&gt;index&lt;/code&gt; action and is rendering the view correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9e4ca75455ed36ae5cba0ec03de1506f297609" translate="yes" xml:space="preserve">
          <source>Launch!</source>
          <target state="translated">Launch!</target>
        </trans-unit>
        <trans-unit id="3b232ddd1deabfdc739b7f19ed66f965ea3e4797" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-c-at&quot;&gt;::at&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; and &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; instances can be used when called with a single argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450c7c23c31cb0b2f54d83184ce79687a2b74fa0" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on &lt;a href=&quot;time#method-i-eql-3F&quot;&gt;#eql?&lt;/a&gt; so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be eql? to an equivalent &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d321d86ff6cc58af6defb3f60342a2302fa2218" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on DateTime#&amp;lt;=&amp;gt; so that &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be compared with a &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c255a938da046a574f295ca103dddf42d32232" translate="yes" xml:space="preserve">
          <source>Layers additional behavior on Time#&amp;lt;=&amp;gt; so that &lt;a href=&quot;datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances can be chronologically compared with a &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8daa234f4e9273cda7590ab2e63f033cc2e446cd" translate="yes" xml:space="preserve">
          <source>Laying down the groundwork</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc2e0175464c8ae5a4d0b334ec3310ddf23aae7" translate="yes" xml:space="preserve">
          <source>Layout assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01655ad5977ee9d7376ffb682322087942af96db" translate="yes" xml:space="preserve">
          <source>Layout declarations cascade downward in the hierarchy, and more specific layout declarations always override more general ones. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e6f54e33a1151bfd4c7cc4affd14df3525f2db" translate="yes" xml:space="preserve">
          <source>Layouts</source>
          <target state="translated">Layouts</target>
        </trans-unit>
        <trans-unit id="9c2227b01890429dea82f0435c986a7de2991348" translate="yes" xml:space="preserve">
          <source>Layouts and Rendering in Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e792861fadd8548975876f8194dfffbf0cb481c" translate="yes" xml:space="preserve">
          <source>Layouts can be used to render a common view template around the results of Rails controller actions. Typically, a Rails application will have a couple of layouts that pages will be rendered within. For example, a site might have one layout for a logged in user and another for the marketing or sales side of the site. The logged in user layout might include top-level navigation that should be present across many controller actions. The sales layout for a SaaS app might include top-level navigation for things like &quot;Pricing&quot; and &quot;Contact Us&quot; pages. You would expect each layout to have a different look and feel. You can read about layouts in more detail in the &lt;a href=&quot;layouts_and_rendering&quot;&gt;Layouts and Rendering in Rails&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48470ed7993d797dbe5e8d27e23dd9a217c53643" translate="yes" xml:space="preserve">
          <source>Layouts specified at the controller level support the &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; options. These options take either a method name, or an array of method names, corresponding to method names within the controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27583837c86c78aaebaf82c394f36c53e1ccbcf" translate="yes" xml:space="preserve">
          <source>Layouts#action_has_layout?</source>
          <target state="translated">Layouts#action_has_layout?</target>
        </trans-unit>
        <trans-unit id="f7cade8c906e9d8975259c8d26198e469b8c71e4" translate="yes" xml:space="preserve">
          <source>Layouts::ClassMethods</source>
          <target state="translated">Layouts::ClassMethods</target>
        </trans-unit>
        <trans-unit id="5617eb863672173bd45cabc2c17a35b9e442eed4" translate="yes" xml:space="preserve">
          <source>Layouts::ClassMethods#layout</source>
          <target state="translated">Layouts::ClassMethods#layout</target>
        </trans-unit>
        <trans-unit id="dab591e309e317fa64fcc8cc09c071b74932d444" translate="yes" xml:space="preserve">
          <source>Lazily load TZInfo::Timezone instances only when they're needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4acd3d668558126efd2cfb5861479b741fa7210e" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks</source>
          <target state="translated">LazyLoadHooks</target>
        </trans-unit>
        <trans-unit id="05f23ec34b8f5c1c142321cf9fb3a41254f5ed9b" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks#on_load</source>
          <target state="translated">LazyLoadHooks#on_load</target>
        </trans-unit>
        <trans-unit id="43d15a08d31d62de7b68ddb2009b76398fc6fafd" translate="yes" xml:space="preserve">
          <source>LazyLoadHooks#run_load_hooks</source>
          <target state="translated">LazyLoadHooks#run_load_hooks</target>
        </trans-unit>
        <trans-unit id="f56145331f8573663f749e0585fba9bafdedf906" translate="yes" xml:space="preserve">
          <source>Leading colons would make the first segment absolute rather than relative: &lt;code&gt;::Billing::Invoice&lt;/code&gt;. That would force &lt;code&gt;Billing&lt;/code&gt; to be looked up only as a top-level constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0205f20e6f02e7e5bf0f090188c3352d3378c901" translate="yes" xml:space="preserve">
          <source>Lean on the protect_from_forgery declaration to mark which actions are due for same-origin request verification. If protect_from_forgery is enabled on an action, this before_action flags its after_action to verify that JavaScript responses are for XHR requests, ensuring they follow the browser's same-origin policy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80449c77af0b47c205fab1563e049bc44130805" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;a href=&quot;security#custom-credentials&quot;&gt;managing credentials later in this guide&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5120024867e2bd45c0226da8ee5ccca4d252aa19" translate="yes" xml:space="preserve">
          <source>Learn more about &lt;code&gt;redirect_to&lt;/code&gt; and what options you have in &lt;a href=&quot;redirecting&quot;&gt;ActionController::Redirecting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2680ad714bae01fb2a75924986c28aa6fbc21993" translate="yes" xml:space="preserve">
          <source>Learn more about CSRF attacks and securing your application in the &lt;a href=&quot;https://guides.rubyonrails.org/security.html&quot;&gt;Ruby on Rails Security Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03a367fb887c4a017cd9d70d02779563c3dfabe" translate="yes" xml:space="preserve">
          <source>Learn more about Unobtrusive JavaScript on &lt;a href=&quot;working_with_javascript_in_rails&quot;&gt;Working With JavaScript in Rails&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a7c9654d7d32bf1a7434e36ba31c8a9d52bd04" translate="yes" xml:space="preserve">
          <source>Learn more about credentials with &lt;code&gt;rails credentials:help&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6087ad887326b13b7e705f0f5b49332398028b13" translate="yes" xml:space="preserve">
          <source>Learn more about other session storages in &lt;a href=&quot;action_controller_overview#session&quot;&gt;Action Controller Overview Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a361189388c27c3316f9ffe0894462c23768bd0d" translate="yes" xml:space="preserve">
          <source>Learning Rack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4004c46012ce2e74f00d47a6df53669577458d0c" translate="yes" xml:space="preserve">
          <source>Leaving the hash off gives the wrong link:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57cabcc429f05e3d4a452b279c39df253df905c9" translate="yes" xml:space="preserve">
          <source>Legacy syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d8e5ae3e5b6af734ef6545182637310d10213b" translate="yes" xml:space="preserve">
          <source>Let &lt;a href=&quot;proxyobject&quot;&gt;ActiveSupport::ProxyObject&lt;/a&gt; at least raise exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72602d5db80600fb59df54bed6dd5174594a0dd" translate="yes" xml:space="preserve">
          <source>Let us also move that new comment section out to its own partial. Again, you create a file &lt;code&gt;app/views/comments/_form.html.erb&lt;/code&gt; containing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96a0635a516af1771ae2eb32708ac151fe4aaaf8" translate="yes" xml:space="preserve">
          <source>Let us modify &lt;code&gt;test_should_create_article&lt;/code&gt; test in &lt;code&gt;articles_controller_test.rb&lt;/code&gt; so that all our test pass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab4c465b3545675931666804e362f8235200f4c" translate="yes" xml:space="preserve">
          <source>Let us run this newly added test (where &lt;code&gt;6&lt;/code&gt; is the number of line where the test is defined).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fcf90507f73f5eb8f58f17d19d3ae4f2f9910f" translate="yes" xml:space="preserve">
          <source>Let's add a method called &lt;code&gt;welcome_email&lt;/code&gt;, that will send an email to the user's registered email address:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e1f74aa6ec7b5a5077c8b42b57bd04f8515dc5" translate="yes" xml:space="preserve">
          <source>Let's add a replica for the primary, a new writer called animals and a replica for that as well. To do this we need to change our &lt;code&gt;database.yml&lt;/code&gt; from a 2-tier to a 3-tier config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48e65eb47d949d7844ff9e16bf80abf6b052f5f" translate="yes" xml:space="preserve">
          <source>Let's add an integration test to our blog application. We'll start with a basic workflow of creating a new blog article, to verify that everything is working properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e3f79475457cf9a5f2a016839cf6a8e669854a2" translate="yes" xml:space="preserve">
          <source>Let's add links to the other views as well, starting with adding this &quot;New Article&quot; link to &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;, placing it above the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3ecee55d65665c35f62547c455cc419b0dc82d" translate="yes" xml:space="preserve">
          <source>Let's also make a text part for this email. Not all clients prefer HTML emails, and so sending both is best practice. To do this, create a file called &lt;code&gt;welcome_email.text.erb&lt;/code&gt; in &lt;code&gt;app/views/user_mailer/&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfb10465abe14397694d1ef3fbb975786f3e93d" translate="yes" xml:space="preserve">
          <source>Let's analyze an example to really understand what that means. While common abuses of language like &quot;the &lt;code&gt;String&lt;/code&gt; class&quot; are convenient, the exposition is going to be precise here for didactic purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ce79534391e97d4f4aa9c82cc741ad12c8def6" translate="yes" xml:space="preserve">
          <source>Let's assume we want to deploy our application to &quot;/app1&quot;. Rails needs to know this directory to generate the appropriate routes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b6809eee4e5ad984a6e18c3317f2e1911b1c3f" translate="yes" xml:space="preserve">
          <source>Let's break out some more monkeys and pirates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0175bd3560f981f045ac3204ff11ccf5cd1e0c8f" translate="yes" xml:space="preserve">
          <source>Let's break this test down so we can understand it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d411cec433d62e9e5131196fc3d8ca677b9020c5" translate="yes" xml:space="preserve">
          <source>Let's consider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2b72ee8dfb84cee80a7035dfdbf117386402d2" translate="yes" xml:space="preserve">
          <source>Let's consider a flight simulator. The application has a default flight model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00ee8b2221f13d18a00305aa785cc9bb52f8574" translate="yes" xml:space="preserve">
          <source>Let's consider the following module definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26c7d6fe559c363e03a6bd3159ae8ce188a0ff1" translate="yes" xml:space="preserve">
          <source>Let's create a simple Rails application to step through each of these commands in context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1fa58a55971fd9e23ddeee23e8c1d0c89153587" translate="yes" xml:space="preserve">
          <source>Let's imagine that users in some application have login information in the &lt;code&gt;User&lt;/code&gt; model but name and other data in a separate &lt;code&gt;Profile&lt;/code&gt; model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a5e444a84811bf545d3f94d479c8b239f38e28" translate="yes" xml:space="preserve">
          <source>Let's implement the flash message now in our controller. Our &lt;code&gt;:create&lt;/code&gt; action should now look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51c46ffa72a597d58c3017405a3b8080b7928f4" translate="yes" xml:space="preserve">
          <source>Let's introduce now a subclass of &lt;code&gt;Rectangle&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd40f9d2fe4074d731d624f45d324731e74d0541" translate="yes" xml:space="preserve">
          <source>Let's look at the code below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7588d79a31b685899386a77630023f4aad3bc947" translate="yes" xml:space="preserve">
          <source>Let's look at the full error message again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db255fe389309039f7483e2c79350e7b43e7b7d4" translate="yes" xml:space="preserve">
          <source>Let's make our own controller with the controller generator. But what command should we use? Let's ask the generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10ea4f39f4b33b53a25bba08b9359f1fcad5b86" translate="yes" xml:space="preserve">
          <source>Let's make the HABTM fixture go away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3c0983643d82f65dfb7da47772af56e8bae72d" translate="yes" xml:space="preserve">
          <source>Let's say the &lt;code&gt;users&lt;/code&gt; table has &lt;code&gt;id&lt;/code&gt; as the primary_key but it also has a &lt;code&gt;guid&lt;/code&gt; column. The requirement is that the &lt;code&gt;todos&lt;/code&gt; table should hold the &lt;code&gt;guid&lt;/code&gt; column value as the foreign key and not &lt;code&gt;id&lt;/code&gt; value. This can be achieved like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aaa8fd90fd44344aa5ea74de6918d0b560e4441" translate="yes" xml:space="preserve">
          <source>Let's say we have an application with a single primary database and we need to add a new database for some new tables we're adding. The name of the new database will be &quot;animals&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62d2d4961a0889a900d5b7d7deb016aa106cbd4" translate="yes" xml:space="preserve">
          <source>Let's say we're displaying an article on a page which should be wrapped in a &lt;code&gt;div&lt;/code&gt; for display purposes. Firstly, we'll create a new &lt;code&gt;Article&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8579674d7daf7815627e340f71121460d49e4cb2" translate="yes" xml:space="preserve">
          <source>Let's say we're in the &lt;code&gt;http://www.example.com/products&lt;/code&gt; action with method POST in case of invalid product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aec0ccffe5b428a6cb21a91e46b9704b1b5f7fb" translate="yes" xml:space="preserve">
          <source>Let's say we're in the &lt;code&gt;http://www.example.com/shop/checkout?order=desc&amp;amp;page=1&lt;/code&gt; action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e0d2a71301db441896e1ffdd4d512f4c884fe7" translate="yes" xml:space="preserve">
          <source>Let's say you have a &lt;em&gt;BooksController&lt;/em&gt; in your application. Your &lt;em&gt;index&lt;/em&gt; action renders content in &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; template. When you put a &lt;em&gt;localized variant&lt;/em&gt; of this template: &lt;code&gt;index.es.html.erb&lt;/code&gt; in the same directory, Rails will render content in this template, when the locale is set to &lt;code&gt;:es&lt;/code&gt;. When the locale is set to the default locale, the generic &lt;code&gt;index.html.erb&lt;/code&gt; view will be used. (Future Rails versions may well bring this &lt;em&gt;automagic&lt;/em&gt; localization to assets in &lt;code&gt;public&lt;/code&gt;, etc.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e0bd3737a3ceb5c11cdc9352d2399ab7de05d4" translate="yes" xml:space="preserve">
          <source>Let's say you have a navigation menu&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="177e78ab7407be2c090f5ae68f3c072dc96edece" translate="yes" xml:space="preserve">
          <source>Let's say you like using &lt;code&gt;Object#not_nil?&lt;/code&gt; and &lt;code&gt;Object#not_blank?&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cd3934a0abc016ddefcdb09c99e8dd9ccffe99" translate="yes" xml:space="preserve">
          <source>Let's see for example the definition of the &lt;code&gt;caches_action&lt;/code&gt; controller macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda5f06059ddbf981e8fa7bfde1dfc2d0115a597" translate="yes" xml:space="preserve">
          <source>Let's see how Rails autoloads the &lt;code&gt;Post&lt;/code&gt; constant in the &lt;code&gt;PostsController&lt;/code&gt; above assuming the application has a &lt;code&gt;Post&lt;/code&gt; model defined in &lt;code&gt;app/models/post.rb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1212c891c1276d0d0922365aee5189e87122dcb9" translate="yes" xml:space="preserve">
          <source>Let's see the interface Rails created for us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c9f75a14a6a8fa84a573b0eb3a6e227e9516c06" translate="yes" xml:space="preserve">
          <source>Let's see what a &lt;code&gt;--git&lt;/code&gt; option and a &lt;code&gt;--database=postgresql&lt;/code&gt; option will do for us:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2463f5acabbb86e1902e7e40a13ca91e4485de9b" translate="yes" xml:space="preserve">
          <source>Let's start by adding this assertion to our &lt;code&gt;test_should_create_article&lt;/code&gt; test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679242afe97967bee95cf933ac25ed6b6adeee4c" translate="yes" xml:space="preserve">
          <source>Let's start to boot and initialize the app. A Rails application is usually started by running &lt;code&gt;rails console&lt;/code&gt; or &lt;code&gt;rails server&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bbb36043b4b51caaf53b4eb429bbb3cd71c66a" translate="yes" xml:space="preserve">
          <source>Let's suppose that you were making a Karaoke machine and a user wants to get the lyrics for a particular song. Each &lt;code&gt;Song&lt;/code&gt; has a particular number of lines and each line takes time &lt;code&gt;num_beats&lt;/code&gt; to finish singing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39773d51d4340138e114edc90a5ea57419ae99d" translate="yes" xml:space="preserve">
          <source>Let's suppose the following snippet creates a class (rather than reopening it):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e26fc7533f565888b3ecfca314d023ce8533a2" translate="yes" xml:space="preserve">
          <source>Let's suppose we have these class definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4090c16fa4ca8c22ac98f2731e3303c82f681b4" translate="yes" xml:space="preserve">
          <source>Let's suppose you are creating a generator that needs to invoke the controller generator from test unit. Your first attempt is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d8dd280572f4245c2f9798e4cf4307d53e5d5a" translate="yes" xml:space="preserve">
          <source>Let's take a look at one such test, &lt;code&gt;test_should_get_index&lt;/code&gt; from the file &lt;code&gt;articles_controller_test.rb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7b003a2624199393e36191ea09f4b342435f64" translate="yes" xml:space="preserve">
          <source>Let's take a look at some of the things that Rails provides out of the box that are still applicable to API applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563872689b7d13f35f84ce3e7c9d9cb69f5f4742" translate="yes" xml:space="preserve">
          <source>Let's take a look at what Rails does by default when creating a new resource using the scaffold generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b61280695474ba2f4d47ae92ae0ee897d8bc51b" translate="yes" xml:space="preserve">
          <source>Let's take for example this non-persisted object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b75242b93becb500d73edfceaaad470ab7fc77" translate="yes" xml:space="preserve">
          <source>Let's talk about unit tests. Unit tests are code that tests and makes assertions about code. In unit testing, we take a little part of code, say a method of a model, and test its inputs and outputs. Unit tests are your friend. The sooner you make peace with the fact that your quality of life will drastically increase when you unit test your code, the better. Seriously. Please visit &lt;a href=&quot;https://guides.rubyonrails.org/testing.html&quot;&gt;the testing guide&lt;/a&gt; for an in-depth look at unit testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd189d590d8b1b050d1f34adacad7d94c39e61b0" translate="yes" xml:space="preserve">
          <source>Let's use the act of logging out as an example. The controller can send a message which will be displayed to the user on the next request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7302ab1c8547352066ed26da2374047cdadc44" translate="yes" xml:space="preserve">
          <source>Let's wire up the &lt;code&gt;create&lt;/code&gt; in &lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992a5765c7ceef439caa841de820744520c02dab" translate="yes" xml:space="preserve">
          <source>Let's write a test for the &lt;code&gt;:show&lt;/code&gt; action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6388e2763a8787438175ea44759b7a341170f551" translate="yes" xml:space="preserve">
          <source>Lets you selectively disable calls to &lt;code&gt;touch&lt;/code&gt; for the duration of a block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acbdbc31bdc854cb88cd725315b1b68aca7a0e7" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike 4.0 International License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c56b68f39e7603a156bfa82a13c020a53c399d" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;collectionproxy#method-i-create&quot;&gt;create&lt;/a&gt;, except that if the record is invalid, raises an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82455ed657d40dfabb8a5dd6261584322dd09d7" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;findermethods#method-i-find_by&quot;&gt;find_by&lt;/a&gt;, except that if no record is found, raises an &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a36c87f81f627d65cc615f8ae7a9afdbe70794c" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-create_or_find_by&quot;&gt;create_or_find_by&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838678c204cb7edc7ae37ac099a5e73f3f667073" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; so an exception is raised if the created record is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8856f0a8b7199b002c8122ad2fcd4604b1d6719" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;relation#method-i-find_or_create_by&quot;&gt;find_or_create_by&lt;/a&gt;, but calls new instead of &lt;a href=&quot;persistence/classmethods#method-i-create&quot;&gt;create&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981e81b63a865974c1cebae7d45b847c46d0c320" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;distance_of_time_in_words&lt;/code&gt;, but where &lt;code&gt;to_time&lt;/code&gt; is fixed to &lt;code&gt;Time.now&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2abf706df47832d72f8c321855ea5fb7e3691b" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;merge&lt;/code&gt; but the other way around: Merges the receiver into the argument and returns a new hash with indifferent access as result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1945f3936ef206114971a0591dc706d5e224d076" translate="yes" xml:space="preserve">
          <source>Like Action Controller, each mailer class has a corresponding view directory in which each method of the class looks for a template with its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffafe203ca6452b9469b0ee8ef3f5bd66cb64c9" translate="yes" xml:space="preserve">
          <source>Like all of the other components of an engine, the assets should be namespaced. This means that if you have an asset called &lt;code&gt;style.css&lt;/code&gt;, it should be placed at &lt;code&gt;app/assets/stylesheets/[engine name]/style.css&lt;/code&gt;, rather than &lt;code&gt;app/assets/stylesheets/style.css&lt;/code&gt;. If this asset isn't namespaced, there is a possibility that the host application could have an asset named identically, in which case the application's asset would take precedence and the engine's one would be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d575f43f40942a50e4f39a888b719fa5e7f6f38" translate="yes" xml:space="preserve">
          <source>Like all other validations, &lt;code&gt;validates_with&lt;/code&gt; takes the &lt;code&gt;:if&lt;/code&gt;, &lt;code&gt;:unless&lt;/code&gt; and &lt;code&gt;:on&lt;/code&gt; options. If you pass any other options, it will send those options to the validator class as &lt;code&gt;options&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01fcd4d2ae4700b5f2465b1ff92871077189f820" translate="yes" xml:space="preserve">
          <source>Like an &lt;code&gt;image_tag&lt;/code&gt; you can supply a path, either absolute, or relative to the &lt;code&gt;public/videos&lt;/code&gt; directory. Additionally you can specify the &lt;code&gt;size: &quot;#{width}x#{height}&quot;&lt;/code&gt; option just like an &lt;code&gt;image_tag&lt;/code&gt;. Video tags can also have any of the HTML options specified at the end (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; et al).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebbef68061adecb878f7d42134a495f64524522" translate="yes" xml:space="preserve">
          <source>Like everything else in your Rails application, you can test your routes. Route tests reside in &lt;code&gt;test/controllers/&lt;/code&gt; or are part of controller tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee8e6aaa6eb1e9d33d334a7bfe242f7cc49970c" translate="yes" xml:space="preserve">
          <source>Like interceptors, you need to register observers with the Action Mailer framework. You can do this in an initializer file &lt;code&gt;config/initializers/email_delivery_observer.rb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c20106ed1d5b3e7ee5eb18cac235356a844f06" translate="yes" xml:space="preserve">
          <source>Like other &lt;code&gt;before_*&lt;/code&gt; callbacks if &lt;code&gt;before_validation&lt;/code&gt; throws &lt;code&gt;:abort&lt;/code&gt; then &lt;code&gt;valid?&lt;/code&gt; will not be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dd204ef14d7b85ee67171cb097475f1e6871271" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;remove_column&lt;/code&gt; and &lt;code&gt;add_column&lt;/code&gt; Rails provides the &lt;code&gt;change_column&lt;/code&gt; migration method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d6a2738d70d70feb17c5c4ce6fb8a243819c54" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;video_tag&lt;/code&gt;, the &lt;code&gt;audio_tag&lt;/code&gt; has special options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66a5dc476fc73af9f8055914d8ed515c1102014" translate="yes" xml:space="preserve">
          <source>Like the Active Record methods, the callback chain is aborted as soon as one of the methods throws &lt;code&gt;:abort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06becc0802c58a331912f0807cf74457815d184a" translate="yes" xml:space="preserve">
          <source>Like the Executor, the Reloader also wraps application code. If the Executor is not already active on the current thread, the Reloader will invoke it for you, so you only need to call one. This also guarantees that everything the Reloader does, including all its callback invocations, occurs wrapped inside the Executor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366f425cd5b9e6652a38ac7f7aa971788b88b9e8" translate="yes" xml:space="preserve">
          <source>Like the other examples, this will behave similarly to a class method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebba6a2344880667e5d34781e11c86287eaa9d87" translate="yes" xml:space="preserve">
          <source>Like with Hash#merge in the standard library, a block can be provided to merge values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4789449468fc495b47f2645508781ca736af5a" translate="yes" xml:space="preserve">
          <source>Like with any blog, our readers will create their comments directly after reading the article, and once they have added their comment, will be sent back to the article show page to see their comment now listed. Due to this, our &lt;code&gt;CommentsController&lt;/code&gt; is there to provide a method to create comments and delete spam comments when they arrive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5496f02f2e70dd87939f4f922ad6359b435663" translate="yes" xml:space="preserve">
          <source>Likewise, if a message has no purpose it won't be returned when verifying with a specific purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9f56dc5d9dac067cad8e9787f85e70aa8451e2" translate="yes" xml:space="preserve">
          <source>Likewise, in the controller</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9043e4d4d1671a725ba2238469203640ef3b4115" translate="yes" xml:space="preserve">
          <source>Likewise, once retrieved an Active Record object can be destroyed which removes it from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e39e2da3e09996465c4f4ce0479cc61d8bd528e" translate="yes" xml:space="preserve">
          <source>Limit and Offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f68bad7da836e631fb2248fb1abb438211c676f" translate="yes" xml:space="preserve">
          <source>Limit the set of zones provided by TZInfo to a meaningful subset of 134 zones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1605fb4368464e150eb13ea430ef0ff67931d853" translate="yes" xml:space="preserve">
          <source>Limits are honored, and if present there is no requirement for the batch size, it can be less than, equal, or greater than the limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2bb2ad6044f129fa674c47902d971b813e5412" translate="yes" xml:space="preserve">
          <source>Limits are honored, and if present there is no requirement for the batch size: it can be less than, equal to, or greater than the limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0453458ad839bba5dbe50a404dd500b022d2db6" translate="yes" xml:space="preserve">
          <source>Limits the byte size of the string to a number of bytes without breaking characters. Usable when the storage for a string is limited for some reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8717faa36eea1d1c7661ae98c71e5bedde325942" translate="yes" xml:space="preserve">
          <source>Linking to Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ae7cc433871751f8c4fe89e1a46b8934cd7aac" translate="yes" xml:space="preserve">
          <source>Lint Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1464f7beeb518a1b885870631c7f3a94b56fd43" translate="yes" xml:space="preserve">
          <source>List all validators that are being used to validate a specific attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9756c11c70cc0c3e6447ead1a20c3b8bfd39a733" translate="yes" xml:space="preserve">
          <source>List all validators that are being used to validate the model using &lt;code&gt;validates_with&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3720ccefa495f1f67d13bfaf93c2c1ac631f1f" translate="yes" xml:space="preserve">
          <source>List of Free Programming Books</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407b7ccb6a8ea464943a7436167fbbcc36291043" translate="yes" xml:space="preserve">
          <source>List of HTTP request methods from the following RFCs: Hypertext Transfer Protocol &amp;ndash; HTTP/1.1 (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2616.txt&quot;&gt;www.ietf.org/rfc/rfc2616.txt&lt;/a&gt;) HTTP Extensions for Distributed Authoring &amp;ndash; WEBDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc2518.txt&quot;&gt;www.ietf.org/rfc/rfc2518.txt&lt;/a&gt;) Versioning Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3253.txt&quot;&gt;www.ietf.org/rfc/rfc3253.txt&lt;/a&gt;) Ordered Collections Protocol (WebDAV) (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3648.txt&quot;&gt;www.ietf.org/rfc/rfc3648.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) Access Control Protocol (&lt;a href=&quot;https://www.ietf.org/rfc/rfc3744.txt&quot;&gt;www.ietf.org/rfc/rfc3744.txt&lt;/a&gt;) Web Distributed Authoring and Versioning (WebDAV) SEARCH (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5323.txt&quot;&gt;www.ietf.org/rfc/rfc5323.txt&lt;/a&gt;) Calendar Extensions to WebDAV (&lt;a href=&quot;https://www.ietf.org/rfc/rfc4791.txt&quot;&gt;www.ietf.org/rfc/rfc4791.txt&lt;/a&gt;) PATCH &lt;a href=&quot;../method&quot;&gt;Method&lt;/a&gt; for HTTP (&lt;a href=&quot;https://www.ietf.org/rfc/rfc5789.txt&quot;&gt;www.ietf.org/rfc/rfc5789.txt&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99b9b6b4d6ae76f036d8dca5b804e70b84aaf44" translate="yes" xml:space="preserve">
          <source>Listing Existing Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bd4dc53839cb5b27fe373d0c90296d3ac3ae04" translate="yes" xml:space="preserve">
          <source>Listing all articles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0de68777e9549b34e900beb10c9ee85fb7009c4" translate="yes" xml:space="preserve">
          <source>Live Compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87779f8c44830dda0afa1d38923843e3867f226" translate="yes" xml:space="preserve">
          <source>Live Streaming of Arbitrary Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de45b5aa2fca7905d7dc09902ec0937f54991cc" translate="yes" xml:space="preserve">
          <source>Live#process</source>
          <target state="translated">Live#process</target>
        </trans-unit>
        <trans-unit id="6b673d9f50ed21fc6d9ccf9a74fec9716a0a7c34" translate="yes" xml:space="preserve">
          <source>Live#response_body=</source>
          <target state="translated">Live#response_body=</target>
        </trans-unit>
        <trans-unit id="1f8628696f61ead3bad365dcf9e48ec45e356b1a" translate="yes" xml:space="preserve">
          <source>Live::SSE</source>
          <target state="translated">Live::SSE</target>
        </trans-unit>
        <trans-unit id="e80cbd3ad532e9de26e75dec756d632ae670e179" translate="yes" xml:space="preserve">
          <source>Live::SSE#close</source>
          <target state="translated">Live::SSE#close</target>
        </trans-unit>
        <trans-unit id="6ca07fe7ffa55271abd157aad738f9c911eccd09" translate="yes" xml:space="preserve">
          <source>Live::SSE#write</source>
          <target state="translated">Live::SSE#write</target>
        </trans-unit>
        <trans-unit id="2002f9ba4a5ddf3e6317fd5214f79f817a7c0f7b" translate="yes" xml:space="preserve">
          <source>Live::SSE::new</source>
          <target state="translated">Live::SSE::new</target>
        </trans-unit>
        <trans-unit id="0856eaf6a58aba3e18f24940f49d7a541bb5fbf7" translate="yes" xml:space="preserve">
          <source>Load Balancing Replicas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f211060ae86ba78f9cf3ddbf2e12e4cdd937256" translate="yes" xml:space="preserve">
          <source>Load Interlock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b57c97e1176888fbdd46c4bd908ef2a819c9b3e" translate="yes" xml:space="preserve">
          <source>Load Rails generators and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.generators&lt;/code&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e7e9635304b55840a29eb4e6fe7f20cc9f5fa9" translate="yes" xml:space="preserve">
          <source>Load Rails runner and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.runner&lt;/code&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f519035b4f9c4608d417cc7916003ffcfb5efb6" translate="yes" xml:space="preserve">
          <source>Load Rake, railties tasks and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.rake_tasks&lt;/code&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248737ce5d09b3292262076a9f3ec47f2b88e069" translate="yes" xml:space="preserve">
          <source>Load balancing replicas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b040245677803bf954f78cdd2af2a4400d98afd" translate="yes" xml:space="preserve">
          <source>Load console and invoke the registered hooks. Check &lt;code&gt;Rails::Railtie.console&lt;/code&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc55c2158b1ec32df371ef3e42b70f4ecfbd7e5" translate="yes" xml:space="preserve">
          <source>Load data from db/seeds.rb file. It can be used in to load engines' seeds, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ec4dd9e6e9589e6eb04e8827dc323ba0606dc6" translate="yes" xml:space="preserve">
          <source>Load the fixture data into the table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46559e0eb7289033adcb2334be83299e56fb790b" translate="yes" xml:space="preserve">
          <source>LoadError</source>
          <target state="translated">LoadError</target>
        </trans-unit>
        <trans-unit id="c6a9492b638a409f67b0d9e982b3e7d774ce79be" translate="yes" xml:space="preserve">
          <source>LoadError#is_missing?</source>
          <target state="translated">LoadError#is_missing?</target>
        </trans-unit>
        <trans-unit id="680b0dbdca06c127414899a3ee820eac94b1b989" translate="yes" xml:space="preserve">
          <source>Loading Mechanism</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee3534a3ee9902cefe30be9a319bf71af143f92" translate="yes" xml:space="preserve">
          <source>Loading Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d4e36c8ec129c107705cec5ce7a52230bcbdac" translate="yes" xml:space="preserve">
          <source>Loading Rake Tasks and &lt;a href=&quot;generators&quot;&gt;Generators&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc26c6048f64ac1b38aa517f836e37fbf66e2c1d" translate="yes" xml:space="preserve">
          <source>Loading nested relationships is possible using a Hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2179426c96029e473583f4db63f8591c481484" translate="yes" xml:space="preserve">
          <source>Loading priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97bb749d00e9d8d7b4d3cd28987c05e88b7ce8e" translate="yes" xml:space="preserve">
          <source>Loads and returns the entire raw configuration of database from values stored in &lt;code&gt;config/database.yml&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e2841f795c120ab7abbb2a3ce3f19e15e77e86" translate="yes" xml:space="preserve">
          <source>Local Precompilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c19411016a1397c6d7b57cf20afdd1da2dd9035" translate="yes" xml:space="preserve">
          <source>Local cache. Hot in-memory primary cache within block/middleware scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7f74c4406ac9a4770f83a94dfa9c053e17cdd8" translate="yes" xml:space="preserve">
          <source>Local compilation allows you to commit the compiled files into source control, and deploy as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55dab02536ee16f582d5325dacc099456f85791" translate="yes" xml:space="preserve">
          <source>Locales.</source>
          <target state="translated">Locales.</target>
        </trans-unit>
        <trans-unit id="90074f8117f03461acc7b696a5b8d3dccb4b250b" translate="yes" xml:space="preserve">
          <source>Localization can also be based purely on the translation of the attribute-name (if you are using &lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a34118a7f1edcd0e1c47f55d3079c60385b677" translate="yes" xml:space="preserve">
          <source>Localized Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c03678b420b8bf20d3d6c624f864ad7ee683883" translate="yes" xml:space="preserve">
          <source>Locate a specific time zone object. If the argument is a string, it is interpreted to mean the name of the timezone to locate. If it is a numeric value it is either the hour offset, or the second offset, of the timezone to find. (The first one with that offset will be returned.) Returns &lt;code&gt;nil&lt;/code&gt; if no such time zone is known to the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb05c96a9e2a4707170d9c3b8a23447c38f4cffd" translate="yes" xml:space="preserve">
          <source>Locations for Initialization Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710ae4ff639eebf3d4df032ac4c7f3a3743c7b07" translate="yes" xml:space="preserve">
          <source>LockWaitTimeout</source>
          <target state="translated">LockWaitTimeout</target>
        </trans-unit>
        <trans-unit id="70835a0129c110391e7f829d841581f090cc206d" translate="yes" xml:space="preserve">
          <source>Locking Records for Update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df60e973a265b7d703153225e3ca5b47b7d40460" translate="yes" xml:space="preserve">
          <source>Locking is helpful for preventing race conditions when updating records in the database and ensuring atomic updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4169d04da897048c43e4c9684fc2f239bde026" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic</source>
          <target state="translated">Locking::Optimistic</target>
        </trans-unit>
        <trans-unit id="2f864ade87e4b991694ad9e9afa97f92ae24daed" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods</source>
          <target state="translated">Locking::Optimistic::ClassMethods</target>
        </trans-unit>
        <trans-unit id="efc6084f6c49058a0f0ef20343618f9318154bab" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_column</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_column</target>
        </trans-unit>
        <trans-unit id="08b053fe703a6fda9c517d44062753cd85d1e48b" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_column=</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_column=</target>
        </trans-unit>
        <trans-unit id="8b926b531b9aed70e598004702c9afc9ff288d3b" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#locking_enabled?</source>
          <target state="translated">Locking::Optimistic::ClassMethods#locking_enabled?</target>
        </trans-unit>
        <trans-unit id="a93398134569361708a52f98f356d046e6d55882" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#reset_locking_column</source>
          <target state="translated">Locking::Optimistic::ClassMethods#reset_locking_column</target>
        </trans-unit>
        <trans-unit id="c589b468cf024c9825b7795a069b9d21a6f97377" translate="yes" xml:space="preserve">
          <source>Locking::Optimistic::ClassMethods#update_counters</source>
          <target state="translated">Locking::Optimistic::ClassMethods#update_counters</target>
        </trans-unit>
        <trans-unit id="be460ffa012cbe0430d2f9788757f594528a1561" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic</source>
          <target state="translated">Locking::Pessimistic</target>
        </trans-unit>
        <trans-unit id="d06e7be0414bb22dece5eb8c8424c6ced1994179" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic#lock!</source>
          <target state="translated">Locking::Pessimistic#lock!</target>
        </trans-unit>
        <trans-unit id="0feea6ff63eb300cd3671f76b7c22268524140de" translate="yes" xml:space="preserve">
          <source>Locking::Pessimistic#with_lock</source>
          <target state="translated">Locking::Pessimistic#with_lock</target>
        </trans-unit>
        <trans-unit id="1666df53d33ece6d245d229a5b15f3cd95f66b69" translate="yes" xml:space="preserve">
          <source>Log Filtering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0797e5297ca5c23288b5154f0d790da08cf46509" translate="yes" xml:space="preserve">
          <source>Log Levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1c49dd337173f24af84a17222b9b4d40ebbf67" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to +$stderr+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8341546ec1ee881b75ca43bb8090792a0d48ce20" translate="yes" xml:space="preserve">
          <source>Log all deprecation warnings to &lt;code&gt;Rails.logger&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d2e22437d49b9714bdc19ff30351f11a7a7a74" translate="yes" xml:space="preserve">
          <source>Log subscriber also has some helpers to deal with logging and automatically flushes all logs when the request finishes (via &lt;code&gt;action_dispatch.callback&lt;/code&gt; notification) in a Rails environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5250cfa995360aa285147b0f1c57abc6ca7f730" translate="yes" xml:space="preserve">
          <source>Log tags (&lt;code&gt;taggers&lt;/code&gt;) can be an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; containing: methods that the &lt;code&gt;request&lt;/code&gt; object responds to, objects that respond to &lt;code&gt;to_s&lt;/code&gt; or Proc objects that accept an instance of the &lt;code&gt;request&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a90aa65e0a6658543600ca7e1e91262921df2de" translate="yes" xml:space="preserve">
          <source>LogSubscriber</source>
          <target state="translated">LogSubscriber</target>
        </trans-unit>
        <trans-unit id="218d5e774207d1d66e3f9b66f20bd4af3471f172" translate="yes" xml:space="preserve">
          <source>LogSubscriber#deliver</source>
          <target state="translated">LogSubscriber#deliver</target>
        </trans-unit>
        <trans-unit id="55af923ea33dff98ca7c168da85d23e80fa5317c" translate="yes" xml:space="preserve">
          <source>LogSubscriber#logger</source>
          <target state="translated">LogSubscriber#logger</target>
        </trans-unit>
        <trans-unit id="7a2411179d17d59f93aad508af303050b741fa32" translate="yes" xml:space="preserve">
          <source>LogSubscriber#process</source>
          <target state="translated">LogSubscriber#process</target>
        </trans-unit>
        <trans-unit id="6bf53002539406558cd714c6ef5bf62042b5b8a6" translate="yes" xml:space="preserve">
          <source>LogSubscriber#receive</source>
          <target state="translated">LogSubscriber#receive</target>
        </trans-unit>
        <trans-unit id="8432c24573f3f89fad60802fe8eddf1da6315768" translate="yes" xml:space="preserve">
          <source>Logger</source>
          <target state="translated">Logger</target>
        </trans-unit>
        <trans-unit id="676b4fcb697f154bd5a7bc122e393a6385de5014" translate="yes" xml:space="preserve">
          <source>Logger::Formatter</source>
          <target state="translated">Logger::Formatter</target>
        </trans-unit>
        <trans-unit id="3d9e60c602c970a2f5c3509958b4089cbf8c68d1" translate="yes" xml:space="preserve">
          <source>Logger::SimpleFormatter</source>
          <target state="translated">Logger::SimpleFormatter</target>
        </trans-unit>
        <trans-unit id="4d7ad5706deb8532d7eec04b8aa18ef1f42c1a43" translate="yes" xml:space="preserve">
          <source>Logger::SimpleFormatter#call</source>
          <target state="translated">Logger::SimpleFormatter#call</target>
        </trans-unit>
        <trans-unit id="a9707eb17132476d73754f320250ed9502fdf44d" translate="yes" xml:space="preserve">
          <source>Logger::logger_outputs_to?</source>
          <target state="translated">Logger::logger_outputs_to?</target>
        </trans-unit>
        <trans-unit id="d0005f516a11a16bb48bbeb76e0cb73c796b70a7" translate="yes" xml:space="preserve">
          <source>Logger::new</source>
          <target state="translated">Logger::new</target>
        </trans-unit>
        <trans-unit id="f18d79bc26224d883a29b68180c11a40752a2aac" translate="yes" xml:space="preserve">
          <source>LoggerSilence</source>
          <target state="translated">LoggerSilence</target>
        </trans-unit>
        <trans-unit id="8b290acfc10cb27d57e006dd5e54594619754a64" translate="yes" xml:space="preserve">
          <source>LoggerSilence#silence</source>
          <target state="translated">LoggerSilence#silence</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="da23089c20adecce3364e2fd63f0e5cb8ece4167" translate="yes" xml:space="preserve">
          <source>Logging will always have a small impact on the performance of your Rails app, particularly when logging to disk. Additionally, there are a few subtleties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8dba556a702c4b2b02fff1697dced0aa887dad" translate="yes" xml:space="preserve">
          <source>Logging: Rails applications log every request, with a level of verbosity appropriate for the current mode. Rails logs in development include information about the request environment, database queries, and basic performance information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f431dc40465ac4a9323987ccc7c60a2626bcb38a" translate="yes" xml:space="preserve">
          <source>Long-lived channels (and connections) also mean you're responsible for ensuring that the data is fresh. If you hold a reference to a user record, but the name is changed while that reference is held, you may be sending stale data if you don't take precautions to avoid it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa5015243d6b37528285498fd3134e805a65d33" translate="yes" xml:space="preserve">
          <source>Looking at this output, it's easy to understand how generators work in Rails 3.0 and above. The scaffold generator doesn't actually generate anything, it just invokes others to do the work. This allows us to add/replace/remove any of those invocations. For instance, the scaffold generator invokes the scaffold_controller generator, which invokes erb, test_unit and helper generators. Since each generator has a single responsibility, they are easy to reuse, avoiding code duplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b887769549ff1debdc02faa3b40f3f606879358e" translate="yes" xml:space="preserve">
          <source>Looking up Translations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34434162cf0ffe0f5e7c53841247432498ca42c" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;a href=&quot;scoping/named/classmethods#method-i-all&quot;&gt;ActiveRecord::Scoping::Named::ClassMethods#all&lt;/a&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89de374ab7a4be82c038987469668c6f701d3cc7" translate="yes" xml:space="preserve">
          <source>Looping through a collection of records from the database (using the &lt;code&gt;all&lt;/code&gt; method, for example) is very inefficient since it will try to instantiate all the objects at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d216bdf358444e1a0d5e9711e1c686d79571b539" translate="yes" xml:space="preserve">
          <source>Low-Level Caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81eda5632cd54c811f36d9ec9e372ab5faaf038f" translate="yes" xml:space="preserve">
          <source>MAGENTA</source>
          <target state="translated">MAGENTA</target>
        </trans-unit>
        <trans-unit id="b315cd523ae2ef826dbad53529ba6c9c2ad21ff1" translate="yes" xml:space="preserve">
          <source>MAPPING</source>
          <target state="translated">MAPPING</target>
        </trans-unit>
        <trans-unit id="65124a8cda19a4bdcf3161683856e5c9f03eeb50" translate="yes" xml:space="preserve">
          <source>MAX_COOKIE_SIZE</source>
          <target state="translated">MAX_COOKIE_SIZE</target>
        </trans-unit>
        <trans-unit id="9df6c8ec33fd4d7a7eea5fc38ce44524546bce63" translate="yes" xml:space="preserve">
          <source>MAX_ID</source>
          <target state="translated">MAX_ID</target>
        </trans-unit>
        <trans-unit id="ba4091290416138086fb56a894f148cffa494206" translate="yes" xml:space="preserve">
          <source>MAX_KEY_BYTESIZE</source>
          <target state="translated">MAX_KEY_BYTESIZE</target>
        </trans-unit>
        <trans-unit id="284fa63eb59eba7c9e2cd98118f61b0726b934ae" translate="yes" xml:space="preserve">
          <source>MAX_PASSWORD_LENGTH_ALLOWED</source>
          <target state="translated">MAX_PASSWORD_LENGTH_ALLOWED</target>
        </trans-unit>
        <trans-unit id="a98cf28ee66a521605286ef7bf41c421cac7c060" translate="yes" xml:space="preserve">
          <source>MEGABYTE</source>
          <target state="translated">MEGABYTE</target>
        </trans-unit>
        <trans-unit id="8d4dcd2d8fbee8ff07ff7bc53114f0c434eeec56" translate="yes" xml:space="preserve">
          <source>MESSAGE_OPTIONS</source>
          <target state="translated">MESSAGE_OPTIONS</target>
        </trans-unit>
        <trans-unit id="495e45b5da0f07a933bcae72c50ae91eeb20d3f5" translate="yes" xml:space="preserve">
          <source>MIME_NAME</source>
          <target state="translated">MIME_NAME</target>
        </trans-unit>
        <trans-unit id="4a5aa456e74d55cddbb3f26a2e5b910c10b728c1" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER</source>
          <target state="translated">MIME_PARAMETER</target>
        </trans-unit>
        <trans-unit id="aa9e2c39cad2ac07dfa73810c9f0172f4c586568" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER_KEY</source>
          <target state="translated">MIME_PARAMETER_KEY</target>
        </trans-unit>
        <trans-unit id="dcefa2aeec7b7e6e08532fde0a1d873266cb4c02" translate="yes" xml:space="preserve">
          <source>MIME_PARAMETER_VALUE</source>
          <target state="translated">MIME_PARAMETER_VALUE</target>
        </trans-unit>
        <trans-unit id="0c7239873afa3db6794c6cf12a208d9718befee7" translate="yes" xml:space="preserve">
          <source>MIME_REGEXP</source>
          <target state="translated">MIME_REGEXP</target>
        </trans-unit>
        <trans-unit id="468bfc8881876f60b1992fde5e9b6af946206e43" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_QUARTER_YEAR</source>
          <target state="translated">MINUTES_IN_QUARTER_YEAR</target>
        </trans-unit>
        <trans-unit id="1a14e5831f85aa97e54c26370015ca312d486468" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_THREE_QUARTERS_YEAR</source>
          <target state="translated">MINUTES_IN_THREE_QUARTERS_YEAR</target>
        </trans-unit>
        <trans-unit id="ac3a71bb010a31611bf5406bed00ef6e011aa34b" translate="yes" xml:space="preserve">
          <source>MINUTES_IN_YEAR</source>
          <target state="translated">MINUTES_IN_YEAR</target>
        </trans-unit>
        <trans-unit id="479396de59be987e42108d35e44f4b59dc1b4a9e" translate="yes" xml:space="preserve">
          <source>MODULES</source>
          <target state="translated">MODULES</target>
        </trans-unit>
        <trans-unit id="3bc34b9230133df1f9971deec3f33546dc36b624" translate="yes" xml:space="preserve">
          <source>MULTI_VALUE_METHODS</source>
          <target state="translated">MULTI_VALUE_METHODS</target>
        </trans-unit>
        <trans-unit id="d82bb796085b36f19aa29833ac03dc6a50644efe" translate="yes" xml:space="preserve">
          <source>MUST_REVALIDATE</source>
          <target state="translated">MUST_REVALIDATE</target>
        </trans-unit>
        <trans-unit id="a8c694c348d74ec772f1e8f64d687c8999e1e811" translate="yes" xml:space="preserve">
          <source>Mail will automatically Base64 encode an attachment. If you want something different, encode your content and pass in the encoded content and encoding in a &lt;code&gt;Hash&lt;/code&gt; to the &lt;code&gt;attachments&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55ad5c93794819374aa38d68902e3c966dcc117" translate="yes" xml:space="preserve">
          <source>MailHelper</source>
          <target state="translated">MailHelper</target>
        </trans-unit>
        <trans-unit id="3d95a627cdb107ff69b030371d1e7e8b4c10935f" translate="yes" xml:space="preserve">
          <source>MailHelper#attachments</source>
          <target state="translated">MailHelper#attachments</target>
        </trans-unit>
        <trans-unit id="b2f5e480ba0bee4286f1cc3a4ca5a963f43cfe63" translate="yes" xml:space="preserve">
          <source>MailHelper#block_format</source>
          <target state="translated">MailHelper#block_format</target>
        </trans-unit>
        <trans-unit id="7ae23fe551aca162ae1c5589d602a1df8e671748" translate="yes" xml:space="preserve">
          <source>MailHelper#format_paragraph</source>
          <target state="translated">MailHelper#format_paragraph</target>
        </trans-unit>
        <trans-unit id="fb236b1746e1802c3a0b73e9683c6ab41ac24d0b" translate="yes" xml:space="preserve">
          <source>MailHelper#mailer</source>
          <target state="translated">MailHelper#mailer</target>
        </trans-unit>
        <trans-unit id="3e8ee2a92d3b7f52814ab5089a1ff9eee1297fd1" translate="yes" xml:space="preserve">
          <source>MailHelper#message</source>
          <target state="translated">MailHelper#message</target>
        </trans-unit>
        <trans-unit id="f70ea59698ce3b86d3b1359815b6b8b662a4785d" translate="yes" xml:space="preserve">
          <source>Mailer Filters abort further processing if body is set to a non-nil value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13980201fa07cfc07994ed387ca6379609fdff0c" translate="yes" xml:space="preserve">
          <source>Mailer Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680a61c5f502dd97082db34df71463ef11e26d1f" translate="yes" xml:space="preserve">
          <source>Mailer Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21c64ba416f2ab2281167ae92a45b9bf82d97e2" translate="yes" xml:space="preserve">
          <source>Mailer Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e337f3658a60fb99f830ff9b6e79e91a43f276" translate="yes" xml:space="preserve">
          <source>Mailer test cases obtain the mailer being tested from the name of the test class using &lt;code&gt;constantize&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44df4fb76daaa7b1a6be96a25c78d05f88becb98" translate="yes" xml:space="preserve">
          <source>Mailer views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587b49cee9e902b2a9c917c758289cbced65c031" translate="yes" xml:space="preserve">
          <source>Mailer views are located in the &lt;code&gt;app/views/name_of_mailer_class&lt;/code&gt; directory. The specific mailer view is known to the class because its name is the same as the mailer method. In our example from above, our mailer view for the &lt;code&gt;welcome_email&lt;/code&gt; method will be in &lt;code&gt;app/views/user_mailer/welcome_email.html.erb&lt;/code&gt; for the HTML version and &lt;code&gt;welcome_email.text.erb&lt;/code&gt; for the plain text version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36be81ab1542c937801f33caaded349a9bc4127c" translate="yes" xml:space="preserve">
          <source>Mailers are really just another way to render a view. Instead of rendering a view and sending it over the HTTP protocol, they are just sending it out through the email protocols instead. Due to this, it makes sense to just have your controller tell the Mailer to send an email when a user is successfully created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64de1eb796e4922fd13819de6eaab4dcdb1d7c9b" translate="yes" xml:space="preserve">
          <source>Mailers have methods called &quot;actions&quot; and they use views to structure their content. Where a controller generates content like HTML to send back to the client, a Mailer creates a message to be delivered via email.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16066075c5a83dca0ba2cea04fba9274abb07b0e" translate="yes" xml:space="preserve">
          <source>Mailgun</source>
          <target state="translated">Mailgun</target>
        </trans-unit>
        <trans-unit id="8b66a1c9fbdcaa52fb90bc5d0058e4dd90be7b68" translate="yes" xml:space="preserve">
          <source>Main Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae266dfc442b5ec385b4338560900eb345c499d9" translate="yes" xml:space="preserve">
          <source>Main render entry point shared by Action View and Action Controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089471884fb865229f0f9111a9377f8fb353d285" translate="yes" xml:space="preserve">
          <source>Maintaining the test database schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fa33a721957f371e84c8dd9e6fb8b01c0321b1" translate="yes" xml:space="preserve">
          <source>Maintenance Policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d6b980b33f53ac06a743ee46e99cae645364df" translate="yes" xml:space="preserve">
          <source>Maintenance Policy for Ruby on Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252157b41e8c33085114f9d5bae78ff87bf6ade9" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;ApplicationController&lt;/code&gt; inherit from &lt;code&gt;ActionController::API&lt;/code&gt; instead of &lt;code&gt;ActionController::Base&lt;/code&gt;. As with middleware, this will leave out any Action Controller modules that provide functionalities primarily used by browser applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad5d449d0548ace3647803d555c0dbbae48a281" translate="yes" xml:space="preserve">
          <source>Make a temporary table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306b5c693bdfd1595e76e9e9d059f004a98367a8" translate="yes" xml:space="preserve">
          <source>Make an entry in Rails routing file &lt;code&gt;config/routes.rb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b69db2b39800a827d6f6168d3c1a20938083839" translate="yes" xml:space="preserve">
          <source>Make periodic timers no-op</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8399eb539601add9de2d3f82842b56234c0d1f9c" translate="yes" xml:space="preserve">
          <source>Make sure that you declare the database column used for the serialized store as a text, so there's plenty of room.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ac7a454c98bda90c921a3bff6938498dfb3fc2" translate="yes" xml:space="preserve">
          <source>Make sure the lock version column gets updated when counters are updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fdc5e6a8181b505e4377c235dcdba10ccefd2b" translate="yes" xml:space="preserve">
          <source>Make sure to check the modules included in &lt;code&gt;ActionController::Base&lt;/code&gt; if you want to use any other functionality that is not provided by &lt;code&gt;ActionController::API&lt;/code&gt; out of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b94a75acb3e2883ef72226f00cf1c8e7c27ad3d" translate="yes" xml:space="preserve">
          <source>Make sure to configure your server to support these options following the instructions in the &lt;code&gt;Rack::Sendfile&lt;/code&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efdeaf7a8b12f96eb5dc7d68b2ffffb447d6f56" translate="yes" xml:space="preserve">
          <source>Make sure to specify the correct server location in each of your environment config files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8899c331bcf7e348bccc244aac252dc6bbce4cdd" translate="yes" xml:space="preserve">
          <source>Make sure to use &lt;code&gt;and return&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; because &lt;code&gt;&amp;amp;&amp;amp; return&lt;/code&gt; will not work due to the operator precedence in the Ruby Language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7e11f912ac4bdebcc08be41ef772e521bd6ac6" translate="yes" xml:space="preserve">
          <source>Make sure you are comparing Flash message keys against strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e768995acffc826fe3508921661c1719fc07d8" translate="yes" xml:space="preserve">
          <source>Make sure your queuing backend &quot;listens&quot; on your queue name. For some backends you need to specify the queues to listen to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5682e0cf408b02c5d4877c6049064b81b83869ac" translate="yes" xml:space="preserve">
          <source>Make the following changes to your &lt;code&gt;Gemfile&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f964d093f2f5ad4e04fb5d1cac5dfe5b45964069" translate="yes" xml:space="preserve">
          <source>Makes a unique &lt;code&gt;X-Request-Id&lt;/code&gt; header available to the response and enables the &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5036c3834983c0c5d0a51b922a33316cf1efabc5" translate="yes" xml:space="preserve">
          <source>Makes a unique request id available to the &lt;code&gt;action_dispatch.request_id&lt;/code&gt; env variable (which is then accessible through &lt;code&gt;ActionDispatch::Request#request_id&lt;/code&gt; or the alias &lt;code&gt;ActionDispatch::Request#uuid&lt;/code&gt;) and sends the same id to the client via the X-Request-Id header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c87d6f8d7b1bbc1e4b64d6ed3fcf1eeab45281" translate="yes" xml:space="preserve">
          <source>Makes an underscored, lowercase form from the expression in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd3cc6959800f15a2205416f9bd7058de795420" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;httpauthentication/basic&quot;&gt;Basic&lt;/a&gt;, &lt;a href=&quot;httpauthentication/digest&quot;&gt;Digest&lt;/a&gt; and &lt;a href=&quot;httpauthentication/token&quot;&gt;Token&lt;/a&gt; authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab5116953faf0be205b9fc2c28dd2778e91ac89" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP &lt;a href=&quot;token&quot;&gt;Token&lt;/a&gt; authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d90853a9285a97be64f6ddfab56da7048dd4ea" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP Basic authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248ffebb944238814419305b57452011f6e8a054" translate="yes" xml:space="preserve">
          <source>Makes it dead easy to do HTTP Digest authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b65162648b93cf813417157560cc2b1670a2db9" translate="yes" xml:space="preserve">
          <source>Makes it possible for the RemoteConnection to disconnect a specific connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba69823998a36ac20a883dc8e6f67040b179324" translate="yes" xml:space="preserve">
          <source>Making Select Boxes with Ease</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb01187942b0742e6351609b7735a6adcf73fc33" translate="yes" xml:space="preserve">
          <source>Making Your Library or Gem a Pre-Processor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8205e9d586c3493e6f60cebf5165f64f9b3c019e" translate="yes" xml:space="preserve">
          <source>Making messages expire</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ba6a079e12e18c361a6a47933e07e1a7228504" translate="yes" xml:space="preserve">
          <source>Manage &lt;code&gt;Gemfile&lt;/code&gt; indentation for a DSL action block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2aee73bd2e79677bed872d3980e254bec42f2c5" translate="yes" xml:space="preserve">
          <source>Managing dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4e0450a210ba7947ca44f072542be4cd2bbf6e" translate="yes" xml:space="preserve">
          <source>Managing the Locale across Requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0b984f07b1075591ab1d0a27cd0c92e4a47a76" translate="yes" xml:space="preserve">
          <source>Mandrill</source>
          <target state="translated">Mandrill</target>
        </trans-unit>
        <trans-unit id="2d88b61ea857089a4c533daa1a9cf98822177551" translate="yes" xml:space="preserve">
          <source>Manifest Files and Directives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d94fc9b2424981345aad47073ff6221d182b79" translate="yes" xml:space="preserve">
          <source>Manipulating session and cookie variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5bab837311ddf9a2bc63d03a1cd96d18a19ce8" translate="yes" xml:space="preserve">
          <source>Manual Unsubscription</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7686ebdb95a27789f53732e864b2cf3e21d13ff" translate="yes" xml:space="preserve">
          <source>Manually check out a connection from the pool with &lt;a href=&quot;connectionpool#method-i-checkout&quot;&gt;ActiveRecord::Base.connection_pool.checkout&lt;/a&gt;. You are responsible for returning this connection to the pool when finished by calling &lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;ActiveRecord::Base.connection_pool.checkin(connection)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047b759d8afa6da4ea87a2a2059a77060daca4cd" translate="yes" xml:space="preserve">
          <source>Many apps grow beyond simple forms editing a single object. For example, when creating a &lt;code&gt;Person&lt;/code&gt; you might want to allow the user to (on the same form) create multiple address records (home, work, etc.). When later editing that person the user should be able to add, remove, or amend addresses as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51aa84e06e0d4cb20eb010b07acb0a782ae7e1b" translate="yes" xml:space="preserve">
          <source>Many cross-site scripting (XSS) exploits aim at obtaining the user's cookie. You'll read &lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;more about XSS&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94760ac5345671c21adf55c326e4bc74930f068c" translate="yes" xml:space="preserve">
          <source>Many modern web servers can be used as a proxy server to balance third-party elements such as caching servers or application servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68dea1c5c75caa39cba7ba14014f2517fbc6048c" translate="yes" xml:space="preserve">
          <source>Many of Action Dispatcher's internal components are implemented as Rack middlewares. &lt;code&gt;Rails::Application&lt;/code&gt; uses &lt;code&gt;ActionDispatch::MiddlewareStack&lt;/code&gt; to combine various internal and external middlewares to form a complete Rails Rack application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5023dcf79d2fffe404c655626656b9c927384425" translate="yes" xml:space="preserve">
          <source>Many web applications allow users to upload files. &lt;em&gt;File names, which the user may choose (partly), should always be filtered&lt;/em&gt; as an attacker could use a malicious file name to overwrite any file on the server. If you store file uploads at /var/www/uploads, and the user enters a file name like &quot;../../../etc/passwd&quot;, it may overwrite an important file. Of course, the Ruby interpreter would need the appropriate permissions to do so - one more reason to run web servers, database servers, and other programs as a less privileged Unix user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23c36ee0702008b369b29fb802016cb8c1b8277" translate="yes" xml:space="preserve">
          <source>Many web applications have an authentication system: a user provides a user name and password, the web application checks them and stores the corresponding user id in the session hash. From now on, the session is valid. On every request the application will load the user, identified by the user id in the session, without the need for new authentication. The session ID in the cookie identifies the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19390742e5806874fd7fb49160ecbeb01caa65a9" translate="yes" xml:space="preserve">
          <source>Many web applications make it easy to hijack user accounts. Why not be different and make it more difficult?.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24891e5f043d78206edf6518d0d3d35f7785b4f3" translate="yes" xml:space="preserve">
          <source>Many-to-many</source>
          <target state="translated">Many-to-many</target>
        </trans-unit>
        <trans-unit id="c9a42937cf22ca82b4cf9b49a17e155274e834d4" translate="yes" xml:space="preserve">
          <source>Maps asset types to public directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2186a94f3e5893663ec64cffa3a2c9ffa5b5e277" translate="yes" xml:space="preserve">
          <source>MariaDB: &lt;a href=&quot;https://mariadb.com/kb/en/mariadb/explain/&quot;&gt;EXPLAIN&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2e377998906eb21e2af5cfe084f2169f9ad123" translate="yes" xml:space="preserve">
          <source>Mark a key as being a connection identifier index that can then be used to find the specific connection again later. Common identifiers are current_user and current_account, but could be anything, really.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e548ab7cc8720a986d43ffb76f2e1373d171ea" translate="yes" xml:space="preserve">
          <source>Marks a string as trusted safe. It will be inserted into HTML with no additional escaping performed. It is your responsibility to ensure that the string contains no malicious content. This method is equivalent to the &lt;code&gt;raw&lt;/code&gt; helper in views. It is recommended that you use &lt;code&gt;sanitize&lt;/code&gt; instead of this method. It should never be called on user input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf7916b5b85729b16a8ae8093bdc4715dd95f4d" translate="yes" xml:space="preserve">
          <source>Marks the entire flash or a single flash entry to be discarded by the end of the current action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762795e51673105df0f06e3d6f3f9189f42b1615" translate="yes" xml:space="preserve">
          <source>Marks the named method as intended to be redefined, if it exists. Suppresses the Ruby method redefinition warning. Prefer &lt;a href=&quot;module#method-i-redefine_method&quot;&gt;redefine_method&lt;/a&gt; where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0475c3dda41d22daed4981fee4af23c1b9ef4ff1" translate="yes" xml:space="preserve">
          <source>Marks this record as read only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36e9ee63716f8133557ba3c2a06919d8f961b9c" translate="yes" xml:space="preserve">
          <source>Marks this record to be destroyed as part of the parent's save transaction. This does &lt;em&gt;not&lt;/em&gt; actually destroy the record instantly, rather child record will be destroyed when &lt;code&gt;parent.save&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567a561a163f9443feee81023bbb6e3d3d856e7d" translate="yes" xml:space="preserve">
          <source>Mask value of &lt;code&gt;params&lt;/code&gt; if key matches one of filters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3cb3e44a313e8943d59b0c6c633a46ac1ce5d8" translate="yes" xml:space="preserve">
          <source>Masked Authenticity Tokens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1e45d56c039093f8a35ab45a70a26ca3d2a641" translate="yes" xml:space="preserve">
          <source>Matches a URL pattern to one or more routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd37a0f5706371522de514ef180c0fb66ebe5cb" translate="yes" xml:space="preserve">
          <source>Matches a URL pattern to one or more routes. For more information, see &lt;a href=&quot;base#method-i-match&quot;&gt;match&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8477b206cc55c328a42daa3a110d5a902da25e" translate="yes" xml:space="preserve">
          <source>Matches an exception to a handler based on the exception class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392aa4613bb333a2cb618b83882099e4b8d3329d" translate="yes" xml:space="preserve">
          <source>Matching URLs will be marked as '[FILTERED]'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8df2fec28d8948a0326722029c7492b88ee4fbe" translate="yes" xml:space="preserve">
          <source>Maximum</source>
          <target state="translated">Maximum</target>
        </trans-unit>
        <trans-unit id="ea0fd428175d5a7f6c71193bfd0cb7d518663243" translate="yes" xml:space="preserve">
          <source>Media type of response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5f48e858447d5b8bf7bc81648942a5d44922e8" translate="yes" xml:space="preserve">
          <source>Memoizes the value returned by &lt;a href=&quot;getip#method-i-calculate_ip&quot;&gt;calculate_ip&lt;/a&gt; and returns it for &lt;a href=&quot;../request&quot;&gt;ActionDispatch::Request&lt;/a&gt; to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f53a17ddcd691ca1e78252051c126d13cd160ee" translate="yes" xml:space="preserve">
          <source>Merge conflicts can occur in your schema file when two branches modify schema. To resolve these conflicts run &lt;code&gt;rails db:migrate&lt;/code&gt; to regenerate the schema file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="226be574fbe2fe077103b611adc4a492e6b6acbc" translate="yes" xml:space="preserve">
          <source>Merges in the conditions from &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an &lt;a href=&quot;relation&quot;&gt;ActiveRecord::Relation&lt;/a&gt;. Returns an array representing the intersection of the resulting records with &lt;code&gt;other&lt;/code&gt;, if &lt;code&gt;other&lt;/code&gt; is an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d078dcba4eea635c17ac1cc07c092528c89cf22" translate="yes" xml:space="preserve">
          <source>Merges the caller into &lt;code&gt;other_hash&lt;/code&gt;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d98f104e303f9cf5ba6cad0f2e8b90cc2ed8ec" translate="yes" xml:space="preserve">
          <source>Merges the errors from &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="30998fc7b14825bfe3e591f38ea1804d33fd195e" translate="yes" xml:space="preserve">
          <source>Merging of scopes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39479ff33f15bab6f4bff70fe02746b486a928cb" translate="yes" xml:space="preserve">
          <source>MessageDelivery</source>
          <target state="translated">MessageDelivery</target>
        </trans-unit>
        <trans-unit id="2ca3a9f4c5c006a148b7a9932578ec19923bc9f1" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_later</source>
          <target state="translated">MessageDelivery#deliver_later</target>
        </trans-unit>
        <trans-unit id="d58a2072f2c00bcf994136544ed0881f4277955c" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_later!</source>
          <target state="translated">MessageDelivery#deliver_later!</target>
        </trans-unit>
        <trans-unit id="7dc2404b1df899d54d5d918418a7a861a6fd98d7" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_now</source>
          <target state="translated">MessageDelivery#deliver_now</target>
        </trans-unit>
        <trans-unit id="f694e10fbd9555697b01757d6c268f0aba5cf7e5" translate="yes" xml:space="preserve">
          <source>MessageDelivery#deliver_now!</source>
          <target state="translated">MessageDelivery#deliver_now!</target>
        </trans-unit>
        <trans-unit id="d815799b8048b0698d61637622c9b59c5a136e80" translate="yes" xml:space="preserve">
          <source>MessageDelivery#message</source>
          <target state="translated">MessageDelivery#message</target>
        </trans-unit>
        <trans-unit id="ebbce05309872298d3a6ebb2dc89bd5f0a10e93b" translate="yes" xml:space="preserve">
          <source>MessageDelivery#processed?</source>
          <target state="translated">MessageDelivery#processed?</target>
        </trans-unit>
        <trans-unit id="00bd198ba5bc0785f66eced2f7b32668155ba43b" translate="yes" xml:space="preserve">
          <source>MessageEncryptor</source>
          <target state="translated">MessageEncryptor</target>
        </trans-unit>
        <trans-unit id="75851ac20320d046daeb57638d6439c136973683" translate="yes" xml:space="preserve">
          <source>MessageEncryptor#decrypt_and_verify</source>
          <target state="translated">MessageEncryptor#decrypt_and_verify</target>
        </trans-unit>
        <trans-unit id="ec3605655c1dd7df73e97bee16ca0dc06fa4ba72" translate="yes" xml:space="preserve">
          <source>MessageEncryptor#encrypt_and_sign</source>
          <target state="translated">MessageEncryptor#encrypt_and_sign</target>
        </trans-unit>
        <trans-unit id="f92a218377d645f9092dd4c876aaced4944bc4c6" translate="yes" xml:space="preserve">
          <source>MessageEncryptor::key_len</source>
          <target state="translated">MessageEncryptor::key_len</target>
        </trans-unit>
        <trans-unit id="8f1e28e8dce828703d5d80714ec5189d685ade59" translate="yes" xml:space="preserve">
          <source>MessageEncryptor::new</source>
          <target state="translated">MessageEncryptor::new</target>
        </trans-unit>
        <trans-unit id="2fd13a09c7dae2fdbec9311749e402b4ff60c103" translate="yes" xml:space="preserve">
          <source>MessageVerifier</source>
          <target state="translated">MessageVerifier</target>
        </trans-unit>
        <trans-unit id="0a4d6d879f6d4797c6c59a17b65975130fee0209" translate="yes" xml:space="preserve">
          <source>MessageVerifier#generate</source>
          <target state="translated">MessageVerifier#generate</target>
        </trans-unit>
        <trans-unit id="42f90315126a3917fcfb263375bb71bc0a0a0dc4" translate="yes" xml:space="preserve">
          <source>MessageVerifier#valid_message?</source>
          <target state="translated">MessageVerifier#valid_message?</target>
        </trans-unit>
        <trans-unit id="81f77bbedd728547b52ddc40c7f614824f70a36b" translate="yes" xml:space="preserve">
          <source>MessageVerifier#verified</source>
          <target state="translated">MessageVerifier#verified</target>
        </trans-unit>
        <trans-unit id="cb9c675c988d965998ae45b5d73c7f5308bc24f7" translate="yes" xml:space="preserve">
          <source>MessageVerifier#verify</source>
          <target state="translated">MessageVerifier#verify</target>
        </trans-unit>
        <trans-unit id="faade315455c305d9bb171bc107ea83f06e6fa63" translate="yes" xml:space="preserve">
          <source>MessageVerifier::new</source>
          <target state="translated">MessageVerifier::new</target>
        </trans-unit>
        <trans-unit id="90acb406947db8913ac9b53b7532764ff4fcc59e" translate="yes" xml:space="preserve">
          <source>Metal</source>
          <target state="translated">Metal</target>
        </trans-unit>
        <trans-unit id="38196d8520f1d9e342a790c7baee91ba05b7857a" translate="yes" xml:space="preserve">
          <source>Metal#controller_name</source>
          <target state="translated">Metal#controller_name</target>
        </trans-unit>
        <trans-unit id="edb271c6ba74584a5e95fc8a592017e04d034cfe" translate="yes" xml:space="preserve">
          <source>Metal#params</source>
          <target state="translated">Metal#params</target>
        </trans-unit>
        <trans-unit id="e25845eba96b1c6cec462f426fe2054f763d5f7e" translate="yes" xml:space="preserve">
          <source>Metal#params=</source>
          <target state="translated">Metal#params=</target>
        </trans-unit>
        <trans-unit id="ae198879fd9a7f794c7ff37117ecdd787966071f" translate="yes" xml:space="preserve">
          <source>Metal#performed?</source>
          <target state="translated">Metal#performed?</target>
        </trans-unit>
        <trans-unit id="645752c91da4af331d632112e2ff95adf8ceb3d4" translate="yes" xml:space="preserve">
          <source>Metal#reset_session</source>
          <target state="translated">Metal#reset_session</target>
        </trans-unit>
        <trans-unit id="0c1d3d5f890bdd4021fc1683c03282ae40e4b4db" translate="yes" xml:space="preserve">
          <source>Metal#response_body=</source>
          <target state="translated">Metal#response_body=</target>
        </trans-unit>
        <trans-unit id="2592810200ac0ea7cdb516839b5733b45cd7157a" translate="yes" xml:space="preserve">
          <source>Metal#url_for</source>
          <target state="translated">Metal#url_for</target>
        </trans-unit>
        <trans-unit id="5d5a5e7489ce45c5bc7bbfce6515f09fc97fbd9c" translate="yes" xml:space="preserve">
          <source>Metal::action</source>
          <target state="translated">Metal::action</target>
        </trans-unit>
        <trans-unit id="e2a4b21df305be1783c72a1f50c97c1f1d4985a7" translate="yes" xml:space="preserve">
          <source>Metal::controller_name</source>
          <target state="translated">Metal::controller_name</target>
        </trans-unit>
        <trans-unit id="ce79f003cf7ea40ba89e57e2a796360ffd946624" translate="yes" xml:space="preserve">
          <source>Metal::dispatch</source>
          <target state="translated">Metal::dispatch</target>
        </trans-unit>
        <trans-unit id="182ff2b0bc20e306864bb84402eee07193eb45a1" translate="yes" xml:space="preserve">
          <source>Metal::make_response!</source>
          <target state="translated">Metal::make_response!</target>
        </trans-unit>
        <trans-unit id="d382f96858a788760f261e666e4f85ff97426a6b" translate="yes" xml:space="preserve">
          <source>Metal::middleware</source>
          <target state="translated">Metal::middleware</target>
        </trans-unit>
        <trans-unit id="3ed079e8835c2f9c9c9047fad46dd8ccfe5f55f6" translate="yes" xml:space="preserve">
          <source>Metal::new</source>
          <target state="translated">Metal::new</target>
        </trans-unit>
        <trans-unit id="2f72e572e61260367af8b52a4e688488474b8e83" translate="yes" xml:space="preserve">
          <source>Metal::use</source>
          <target state="translated">Metal::use</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="f2a980d54dbcb57ac4454a805bc48519eb1f3e32" translate="yes" xml:space="preserve">
          <source>Method Delegation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcddcbb57206eaf4559c31c460763d2d6db31a20" translate="yes" xml:space="preserve">
          <source>Methods and Actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666268e79826afdec3fff0264016e94ef5b766ab" translate="yes" xml:space="preserve">
          <source>Methods are not duplicable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481f07082abcea98f240ee7383772b4988e84273" translate="yes" xml:space="preserve">
          <source>Methods can be delegated to instance variables, class variables, or constants by providing them as a symbols:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3419a2570908db81b298d7c6d51f10df0e243219" translate="yes" xml:space="preserve">
          <source>Methods defined in Active Record fixtures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e227abc813f4dbe34a05c0e54629b2a9e2fc5be" translate="yes" xml:space="preserve">
          <source>Methods for sending arbitrary data and for streaming files to the browser, instead of rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ae077b906176fdf43ee4e5fa066f1c0a49b9ee" translate="yes" xml:space="preserve">
          <source>Methods must return a &lt;code&gt;Mail::Message&lt;/code&gt; object which can be generated by calling the mailer method without the additional &lt;code&gt;deliver_now&lt;/code&gt; / &lt;code&gt;deliver_later&lt;/code&gt;. The location of the mailer previews directory can be configured using the &lt;code&gt;preview_path&lt;/code&gt; option which has a default of &lt;code&gt;test/mailers/previews&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a445a0c958f699e2d42015e88db5478fad019eca" translate="yes" xml:space="preserve">
          <source>Methods provided by Thor are not covered this guide and can be found in &lt;a href=&quot;http://rdoc.info/github/erikhuda/thor/master/Thor/Actions.html&quot;&gt;Thor's documentation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337d33d863058e0d37f9eac0f10f65d2f777c208" translate="yes" xml:space="preserve">
          <source>Methods that operate on collections are also aware of the hierarchy. For example, &lt;code&gt;Polygon.all&lt;/code&gt; returns all the records of the table, because all rectangles and triangles are polygons. Active Record takes care of returning instances of their corresponding class in the result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cf221c8b87e3529b8c224fef7556811903e14a" translate="yes" xml:space="preserve">
          <source>Methods to create form controls are called &lt;strong&gt;on&lt;/strong&gt; the form builder object &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de9d6fe8584b29709979d39884dc53d6c96e3a5" translate="yes" xml:space="preserve">
          <source>Methods will be added for retrieval and query for a single associated object, for which this object holds an id:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb00c057aeacb4083ac81ba9b645b27dc753532" translate="yes" xml:space="preserve">
          <source>Microsoft Azure Storage Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7507320067b372700f147199bfa6970bc4f77db" translate="yes" xml:space="preserve">
          <source>Middleware class can be inserted as a Rack handler to be local cache for the duration of request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3312ce9eeb6125a88289fa4cc849222be8b06d" translate="yes" xml:space="preserve">
          <source>Middleware stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d38520e4d12785ebcf01316593660ab8608f5f2" translate="yes" xml:space="preserve">
          <source>Middleware that determines which database connection to use in a multiple database application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563b6e9338739fba0218b72d657c3e48b84a5b78" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector</source>
          <target state="translated">Middleware::DatabaseSelector</target>
        </trans-unit>
        <trans-unit id="8f269630c3fc0cbd7d46cc52b6ce2aee1bcbefa6" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#call</source>
          <target state="translated">Middleware::DatabaseSelector#call</target>
        </trans-unit>
        <trans-unit id="1ba8c8c9800962e37f6e1230fd89f8279c0728a5" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#context_klass</source>
          <target state="translated">Middleware::DatabaseSelector#context_klass</target>
        </trans-unit>
        <trans-unit id="01598e7d668159cced3b5d431bd75f29396ede41" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#options</source>
          <target state="translated">Middleware::DatabaseSelector#options</target>
        </trans-unit>
        <trans-unit id="155690df2c425380b1967de734857d9dbea0bb2b" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector#resolver_klass</source>
          <target state="translated">Middleware::DatabaseSelector#resolver_klass</target>
        </trans-unit>
        <trans-unit id="0336e69fa320a456f7b839c7f9ef95e94d2ba03a" translate="yes" xml:space="preserve">
          <source>Middleware::DatabaseSelector::new</source>
          <target state="translated">Middleware::DatabaseSelector::new</target>
        </trans-unit>
        <trans-unit id="33b6b00c01da2bce5880337e4154f952b0cf5e1a" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy</target>
        </trans-unit>
        <trans-unit id="ce6014a5f10c8a7e1157c5ffac9afecce96ff840" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy#call</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy#call</target>
        </trans-unit>
        <trans-unit id="5f8a75a366d8e0cf285b8df25b529ff4733f3dcd" translate="yes" xml:space="preserve">
          <source>MiddlewareStack::InstrumentationProxy::new</source>
          <target state="translated">MiddlewareStack::InstrumentationProxy::new</target>
        </trans-unit>
        <trans-unit id="27e0622c20c96144720c72ae273895e1f0116ee8" translate="yes" xml:space="preserve">
          <source>Middlewares</source>
          <target state="translated">Middlewares</target>
        </trans-unit>
        <trans-unit id="c36c34173f49fa742f965209eed50d88aaff346c" translate="yes" xml:space="preserve">
          <source>Middlewares are loaded once and are not monitored for changes. You will have to restart the server for changes to be reflected in the running application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282f075c796a3d6b9e95474b434c7581a2396fb7" translate="yes" xml:space="preserve">
          <source>Middlewares can also be completely swapped out and replaced with others:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bcdd2131896dea63742df165ba47d28766a503" translate="yes" xml:space="preserve">
          <source>Middlewares that need to manipulate the body won't work with streaming. You should disable those middlewares whenever streaming in development or production. For instance, &lt;code&gt;Rack::Bug&lt;/code&gt; won't work when streaming as it needs to inject contents in the HTML body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0628fa131fd3749ca6f8ae87cbb36a3fdf7a395" translate="yes" xml:space="preserve">
          <source>Might want a shorter timeout depending on whether the request is a PATCH, PUT, or POST, and if the client is a browser or web service. Can be much shorter if the Stale directive is implemented. This would allow a user to use new nonce without prompting the user again for their username and password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de063e32dc06a43a0af8ea312ac86d212f940f81" translate="yes" xml:space="preserve">
          <source>Migrate away from MultiJSON by using &lt;code&gt;obj.to_json&lt;/code&gt;, and &lt;code&gt;JSON.parse(str)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849cf5dbd007a2e8d456dd72aa453236b2c87bd3" translate="yes" xml:space="preserve">
          <source>Migration Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10689ae3fc90ca5bd5d3afa879fe03daf018267" translate="yes" xml:space="preserve">
          <source>Migration to create the comments table in your database (your name will include a different timestamp)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5bd8ca322d93957c7101e41c22684019c85ff5" translate="yes" xml:space="preserve">
          <source>MigrationProxy</source>
          <target state="translated">MigrationProxy</target>
        </trans-unit>
        <trans-unit id="dca984afd74a0089c1d5a5816e4de2e8d46a60b5" translate="yes" xml:space="preserve">
          <source>Migrations</source>
          <target state="translated">Migrations</target>
        </trans-unit>
        <trans-unit id="92fa499d9dbdc22d3d47a8967f65d9b91f5e16f5" translate="yes" xml:space="preserve">
          <source>Migrations &amp;amp; seed data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add41b9c7d182bf31f14e478e595fffc9cc6dbbf" translate="yes" xml:space="preserve">
          <source>Migrations and Seed Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a43495bb4f9921561af4c2e6643f541818d776" translate="yes" xml:space="preserve">
          <source>Migrations are a convenient way to &lt;a href=&quot;https://en.wikipedia.org/wiki/Schema_migration&quot;&gt;alter your database schema over time&lt;/a&gt; in a consistent and easy way. They use a Ruby DSL so that you don't have to write SQL by hand, allowing your schema and changes to be database independent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35eb283061f63c9f2d9c8759c68d4c4790d997dd" translate="yes" xml:space="preserve">
          <source>Migrations are a feature of Active Record that allows you to evolve your database schema over time. Rather than write schema modifications in pure SQL, migrations allow you to use an easy Ruby DSL to describe changes to your tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5636cafa88975771a82a06eb973872d54fc377" translate="yes" xml:space="preserve">
          <source>Migrations are currently supported in MySQL, PostgreSQL, SQLite, SQL Server, and Oracle (all supported databases except DB2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0a5b8c9fe431987a19d0d866524897437e203c" translate="yes" xml:space="preserve">
          <source>Migrations are stored as files in the &lt;code&gt;db/migrate&lt;/code&gt; directory, one for each migration class. The name of the file is of the form &lt;code&gt;YYYYMMDDHHMMSS_create_products.rb&lt;/code&gt;, that is to say a UTC timestamp identifying the migration followed by an underscore followed by the name of the migration. The name of the migration class (CamelCased version) should match the latter part of the file name. For example &lt;code&gt;20080906120000_create_products.rb&lt;/code&gt; should define class &lt;code&gt;CreateProducts&lt;/code&gt; and &lt;code&gt;20080906120001_add_details_to_products.rb&lt;/code&gt; should define &lt;code&gt;AddDetailsToProducts&lt;/code&gt;. Rails uses this timestamp to determine which migration should be run and in what order, so if you're copying a migration from another application or generate a file yourself, be aware of its position in the order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26d12943d7d80825abca46a5dc3235ea3ec50a2" translate="yes" xml:space="preserve">
          <source>Migrations can manage the evolution of a schema used by several physical databases. It's a solution to the common problem of adding a field to make a new feature work in your local database, but being unsure of how to push that change to other developers and to the production server. With migrations, you can describe the transformations in self-contained classes that can be checked into version control systems and executed against another database that might be one, two, or five versions behind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94ebd9500c999984b8945609bc2df7a540d229d" translate="yes" xml:space="preserve">
          <source>Migrations for multiple databases should live in their own folders prefixed with the name of the database key in the configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a3425e7c377c2db63091c03252f49164c0a2bc" translate="yes" xml:space="preserve">
          <source>Migrations, mighty as they may be, are not the authoritative source for your database schema. Your database remains the authoritative source. By default, Rails generates &lt;code&gt;db/schema.rb&lt;/code&gt; which attempts to capture the current state of your database schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3979049ac0db93535e487d19b907375014fe97" translate="yes" xml:space="preserve">
          <source>Mime</source>
          <target state="translated">Mime</target>
        </trans-unit>
        <trans-unit id="837a9cd6761dcbf9f4cc0d2283bc69ff6d49162f" translate="yes" xml:space="preserve">
          <source>Mime::Type</source>
          <target state="translated">Mime::Type</target>
        </trans-unit>
        <trans-unit id="3d541a2228a89762108026001dee109145d47890" translate="yes" xml:space="preserve">
          <source>Mime::[]</source>
          <target state="translated">Mime::[]</target>
        </trans-unit>
        <trans-unit id="0926e3a2597b119bebc1a1fce3d223f29ed8f149" translate="yes" xml:space="preserve">
          <source>Mime::fetch</source>
          <target state="translated">Mime::fetch</target>
        </trans-unit>
        <trans-unit id="050981c2f1d2b6a48d219c1eccf7c86033e0e849" translate="yes" xml:space="preserve">
          <source>MimeResponds</source>
          <target state="translated">MimeResponds</target>
        </trans-unit>
        <trans-unit id="8b545c051d507c480dba95bf413fce8705988b77" translate="yes" xml:space="preserve">
          <source>MimeResponds#respond_to</source>
          <target state="translated">MimeResponds#respond_to</target>
        </trans-unit>
        <trans-unit id="6f5a075fbf5fd5c483250378da86ae9b313d0b5e" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector</source>
          <target state="translated">MimeResponds::Collector</target>
        </trans-unit>
        <trans-unit id="dd15e78a286dc1fcb96a6d760a8accbea04d2f46" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#all</source>
          <target state="translated">MimeResponds::Collector#all</target>
        </trans-unit>
        <trans-unit id="3186ed947655e8e13c11d197e22b057a3b826b5a" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#any</source>
          <target state="translated">MimeResponds::Collector#any</target>
        </trans-unit>
        <trans-unit id="077fae0e3039a4b3ba6f06a7b2493faf6bc94149" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#custom</source>
          <target state="translated">MimeResponds::Collector#custom</target>
        </trans-unit>
        <trans-unit id="0a408c565a901345e13710dce8b46ddc83596604" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#format</source>
          <target state="translated">MimeResponds::Collector#format</target>
        </trans-unit>
        <trans-unit id="d7d7238b3edbaa05ba30c1b8de1d6eae8196c62e" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#negotiate_format</source>
          <target state="translated">MimeResponds::Collector#negotiate_format</target>
        </trans-unit>
        <trans-unit id="a43f44c574ab0f660ef86ec6284e21f6a15123a3" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector#response</source>
          <target state="translated">MimeResponds::Collector#response</target>
        </trans-unit>
        <trans-unit id="c94b172f9c46140e4befb5a3b40843c333dc1bd0" translate="yes" xml:space="preserve">
          <source>MimeResponds::Collector::new</source>
          <target state="translated">MimeResponds::Collector::new</target>
        </trans-unit>
        <trans-unit id="5d398eef3ecc3ea6a161734581d0bd3d920b64d8" translate="yes" xml:space="preserve">
          <source>Minimum</source>
          <target state="translated">Minimum</target>
        </trans-unit>
        <trans-unit id="16596f8408b40402e03fb1fa1fea448e6247038b" translate="yes" xml:space="preserve">
          <source>Minitest::Test</source>
          <target state="translated">Minitest::Test</target>
        </trans-unit>
        <trans-unit id="74043cd8393b54dc6043472a59ad52bfb062b30d" translate="yes" xml:space="preserve">
          <source>Mirror Service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="432aa1daa28e69ab50b92351f6f2af0a95b10677" translate="yes" xml:space="preserve">
          <source>MismatchedForeignKey</source>
          <target state="translated">MismatchedForeignKey</target>
        </trans-unit>
        <trans-unit id="df53296b1d6061c27762beb02feb56a79d980fe5" translate="yes" xml:space="preserve">
          <source>MismatchedForeignKey::new</source>
          <target state="translated">MismatchedForeignKey::new</target>
        </trans-unit>
        <trans-unit id="c9027d21a516adb82b35423ae731d466f68685dd" translate="yes" xml:space="preserve">
          <source>Missing routes keys may be filled in from the current request's parameters (e.g. &lt;code&gt;:controller&lt;/code&gt;, &lt;code&gt;:action&lt;/code&gt;, &lt;code&gt;:id&lt;/code&gt; and any other parameters that are placed in the path). Given that the current action has been reached through &lt;code&gt;GET
/users/1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41937a7bc85765db9aca03191382c7b168e9b5f0" translate="yes" xml:space="preserve">
          <source>Mix this module into your controller, and all actions in that controller will be able to stream data to the client as it's written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="605c579c268184680eec501755fbbe56698c9acc" translate="yes" xml:space="preserve">
          <source>Mix-in noise exiled to its own file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d259b78f39d0db65eeb3909e9dfd3052b08bc7c" translate="yes" xml:space="preserve">
          <source>Mixing in this module allows you to define the events in the object's life cycle that will support callbacks (via &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt;), set the instance methods, procs, or callback objects to be called (via &lt;code&gt;ClassMethods.set_callback&lt;/code&gt;), and run the installed callbacks at the appropriate times (via &lt;code&gt;run_callbacks&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf1644fb9edca063e6ffc86e4f90c94f369309b" translate="yes" xml:space="preserve">
          <source>Mixing with other form helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d28be03faf876ad49209848ad7be7b220d78b7e" translate="yes" xml:space="preserve">
          <source>Mobile Safari looks for a different link tag, pointing to an image that will be used if you add the page to the home screen of an iOS device. The following call would generate such a tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="995901a6d05be888b514f03ce152df52987cf9d7" translate="yes" xml:space="preserve">
          <source>Model / Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506e58da3784558b9ced4bdec6bcfcf767fb21fa" translate="yes" xml:space="preserve">
          <source>Model Class - Singular with the first letter of each word capitalized (e.g., &lt;code&gt;BookClub&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bcd30f814db80cb1f7e7a2796b829953df4af8" translate="yes" xml:space="preserve">
          <source>Model Generators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ac27d1e8badd8f928fc67c97f045d911339e91" translate="yes" xml:space="preserve">
          <source>Model Object Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52c41ee4ca421219a75e5a69582d944082143e0" translate="yes" xml:space="preserve">
          <source>Model Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec9ebd42f054a98c3da4bc4a0a86ee8eda11c19" translate="yes" xml:space="preserve">
          <source>Model attributes have a reader, a writer, and a predicate. You can alias a model attribute having the corresponding three methods defined for you in one shot. As in other aliasing methods, the new name is the first argument, and the old name is the second (one mnemonic is that they go in the same order as if you did an assignment):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55122a12c64767a82f2b9a00f00e2eb10873a428" translate="yes" xml:space="preserve">
          <source>Model tests are used to test the various models of your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6825ada8068d617c4713f563e77b48935cfc12" translate="yes" xml:space="preserve">
          <source>Model tests don't have their own superclass like &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; instead they inherit from &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TestCase.html&quot;&gt;&lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f48817ab34d92bde58ab86f2f428072514122ae" translate="yes" xml:space="preserve">
          <source>Model#persisted?</source>
          <target state="translated">Model#persisted?</target>
        </trans-unit>
        <trans-unit id="4e64f33abdbac5e5ff3f2e0c7fa34b64c6f354dd" translate="yes" xml:space="preserve">
          <source>Model::new</source>
          <target state="translated">Model::new</target>
        </trans-unit>
        <trans-unit id="a5db1f719d035d2f86dd53bc73b31dd5d8068fa4" translate="yes" xml:space="preserve">
          <source>ModelSchema</source>
          <target state="translated">ModelSchema</target>
        </trans-unit>
        <trans-unit id="d441ba5c7e24f4a6db2f90c5e92148cb34f38781" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods</source>
          <target state="translated">ModelSchema::ClassMethods</target>
        </trans-unit>
        <trans-unit id="f0c7506bc80fe2b9aa98f1bff85e0301e077fb1c" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#column_defaults</source>
          <target state="translated">ModelSchema::ClassMethods#column_defaults</target>
        </trans-unit>
        <trans-unit id="e4b875e3ee3c2296967f7855c30256163a85c06b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#column_names</source>
          <target state="translated">ModelSchema::ClassMethods#column_names</target>
        </trans-unit>
        <trans-unit id="00b3898ec2cd08cbe44ab0fc9d248fb3e907a774" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#columns</source>
          <target state="translated">ModelSchema::ClassMethods#columns</target>
        </trans-unit>
        <trans-unit id="8a528d813dbaef3873723d8e3064d1398a98f18b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#content_columns</source>
          <target state="translated">ModelSchema::ClassMethods#content_columns</target>
        </trans-unit>
        <trans-unit id="30ca4105a6f05ea7297f11d83896095972184c21" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#ignored_columns</source>
          <target state="translated">ModelSchema::ClassMethods#ignored_columns</target>
        </trans-unit>
        <trans-unit id="1226cd6aa58cebf7a5e070fb6137578c208b0802" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#ignored_columns=</source>
          <target state="translated">ModelSchema::ClassMethods#ignored_columns=</target>
        </trans-unit>
        <trans-unit id="ebe513fb11fd20dba0ba645e2edd6ed770f802f4" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#inheritance_column</source>
          <target state="translated">ModelSchema::ClassMethods#inheritance_column</target>
        </trans-unit>
        <trans-unit id="39d4c5f29d57690fb20af6be5053214a278517c1" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#inheritance_column=</source>
          <target state="translated">ModelSchema::ClassMethods#inheritance_column=</target>
        </trans-unit>
        <trans-unit id="638056b926ae5b5e9d04d40a36348eeff37ec51b" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#initialize_load_schema_monitor</source>
          <target state="translated">ModelSchema::ClassMethods#initialize_load_schema_monitor</target>
        </trans-unit>
        <trans-unit id="cfdf8706cebcfc8f7edbfa7e020989f53119191c" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#next_sequence_value</source>
          <target state="translated">ModelSchema::ClassMethods#next_sequence_value</target>
        </trans-unit>
        <trans-unit id="b3de9d78e61cce1bfb45aebe65dee739fec0c3b6" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#prefetch_primary_key?</source>
          <target state="translated">ModelSchema::ClassMethods#prefetch_primary_key?</target>
        </trans-unit>
        <trans-unit id="5c638cca0496e75fa8bdd3ef760687b62143bd87" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#protected_environments</source>
          <target state="translated">ModelSchema::ClassMethods#protected_environments</target>
        </trans-unit>
        <trans-unit id="b49a9d0078e1a6b59d5626d3edb9b0be56f14a2e" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#protected_environments=</source>
          <target state="translated">ModelSchema::ClassMethods#protected_environments=</target>
        </trans-unit>
        <trans-unit id="df0f9208df053b27a067b113784578798515de75" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#quoted_table_name</source>
          <target state="translated">ModelSchema::ClassMethods#quoted_table_name</target>
        </trans-unit>
        <trans-unit id="34aa90a1129948e9f4a0488047f67ef89969c5fc" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#reset_column_information</source>
          <target state="translated">ModelSchema::ClassMethods#reset_column_information</target>
        </trans-unit>
        <trans-unit id="4ec0770a96fdf697248442b1010e45ec5cc2648a" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#sequence_name</source>
          <target state="translated">ModelSchema::ClassMethods#sequence_name</target>
        </trans-unit>
        <trans-unit id="8aac7e2479a471101f94603dc47c6282e17718d1" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#sequence_name=</source>
          <target state="translated">ModelSchema::ClassMethods#sequence_name=</target>
        </trans-unit>
        <trans-unit id="32b16c33fdddfbf58ef1861aeb3e5fa24adc6132" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_exists?</source>
          <target state="translated">ModelSchema::ClassMethods#table_exists?</target>
        </trans-unit>
        <trans-unit id="2daf3196846b82ba6ce8254246befb81255884e0" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_name</source>
          <target state="translated">ModelSchema::ClassMethods#table_name</target>
        </trans-unit>
        <trans-unit id="17d64cbc84f6a89f2fb5594f6be6487222648148" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#table_name=</source>
          <target state="translated">ModelSchema::ClassMethods#table_name=</target>
        </trans-unit>
        <trans-unit id="b7be56821c21245487af1e9e89268a7fa3a26889" translate="yes" xml:space="preserve">
          <source>ModelSchema::ClassMethods#type_for_attribute</source>
          <target state="translated">ModelSchema::ClassMethods#type_for_attribute</target>
        </trans-unit>
        <trans-unit id="1bece6f5eaebefa7dd968a26fca03b1c68c0cca3" translate="yes" xml:space="preserve">
          <source>ModelSchema::implicit_order_column</source>
          <target state="translated">ModelSchema::implicit_order_column</target>
        </trans-unit>
        <trans-unit id="fb87d535030cc77f6eea99000bb3cea45e1edc55" translate="yes" xml:space="preserve">
          <source>ModelSchema::implicit_order_column=</source>
          <target state="translated">ModelSchema::implicit_order_column=</target>
        </trans-unit>
        <trans-unit id="431e95ad2f8f90f99412581d3cd5dfe16abee564" translate="yes" xml:space="preserve">
          <source>ModelSchema::internal_metadata_table_name</source>
          <target state="translated">ModelSchema::internal_metadata_table_name</target>
        </trans-unit>
        <trans-unit id="98b6b1f31f822ce45ba0cb29e89ac6123c8d48f4" translate="yes" xml:space="preserve">
          <source>ModelSchema::internal_metadata_table_name=</source>
          <target state="translated">ModelSchema::internal_metadata_table_name=</target>
        </trans-unit>
        <trans-unit id="8590c49fd4bb679ea3badb5e84d0a0953bbbd833" translate="yes" xml:space="preserve">
          <source>ModelSchema::pluralize_table_names</source>
          <target state="translated">ModelSchema::pluralize_table_names</target>
        </trans-unit>
        <trans-unit id="ebcf9310ab2b6b0318d091ceb7b1c703c0ac45b7" translate="yes" xml:space="preserve">
          <source>ModelSchema::pluralize_table_names=</source>
          <target state="translated">ModelSchema::pluralize_table_names=</target>
        </trans-unit>
        <trans-unit id="b43262e7c70a6f23fc2c45ec6b8a726355f76039" translate="yes" xml:space="preserve">
          <source>ModelSchema::primary_key_prefix_type</source>
          <target state="translated">ModelSchema::primary_key_prefix_type</target>
        </trans-unit>
        <trans-unit id="6c1cb907a3190d2cb95d00e64613bae792025c7c" translate="yes" xml:space="preserve">
          <source>ModelSchema::primary_key_prefix_type=</source>
          <target state="translated">ModelSchema::primary_key_prefix_type=</target>
        </trans-unit>
        <trans-unit id="de67ebceb5546c59b706f434213517811df93916" translate="yes" xml:space="preserve">
          <source>ModelSchema::schema_migrations_table_name</source>
          <target state="translated">ModelSchema::schema_migrations_table_name</target>
        </trans-unit>
        <trans-unit id="39ef611dd8b38aff324d220142a154c1bc699e95" translate="yes" xml:space="preserve">
          <source>ModelSchema::schema_migrations_table_name=</source>
          <target state="translated">ModelSchema::schema_migrations_table_name=</target>
        </trans-unit>
        <trans-unit id="a9efeee47a5a06ca364ef4cb85ffe51ec9687c6d" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_prefix</source>
          <target state="translated">ModelSchema::table_name_prefix</target>
        </trans-unit>
        <trans-unit id="8f5e531aa919cbc02fa58144c8b391e2dc8af1fa" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_prefix=</source>
          <target state="translated">ModelSchema::table_name_prefix=</target>
        </trans-unit>
        <trans-unit id="6c66134e0c6448bba29b0fc5c80c6bc88daf08db" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_suffix</source>
          <target state="translated">ModelSchema::table_name_suffix</target>
        </trans-unit>
        <trans-unit id="33b6803388ddcb50e4870abc9e5cad2d62b56c1d" translate="yes" xml:space="preserve">
          <source>ModelSchema::table_name_suffix=</source>
          <target state="translated">ModelSchema::table_name_suffix=</target>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="translated">Models</target>
        </trans-unit>
        <trans-unit id="30f7aa9f7fd11d6341a4cf482eb7088bbc806644" translate="yes" xml:space="preserve">
          <source>Models in Rails use a singular name, and their corresponding database tables use a plural name. Rails provides a generator for creating models, which most Rails developers tend to use when creating new models. To create the new model, run this command in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212e02f4daf070220d134976d698fbfd6435b031" translate="yes" xml:space="preserve">
          <source>Models uploaded files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ea079ded57effba0d3c11311c33855f14ee35e" translate="yes" xml:space="preserve">
          <source>Modification</source>
          <target state="translated">Modification</target>
        </trans-unit>
        <trans-unit id="2625f3c6940984f6f3e4268c2479f099c0bbd324" translate="yes" xml:space="preserve">
          <source>Modifying code is generally straightforward. If you have a line of code that refers to a Rails framework such as &lt;code&gt;ActiveRecord::Base&lt;/code&gt; you can wrap that code in an &lt;code&gt;on_load&lt;/code&gt; hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b313c3c2650f892a30a82cbbbbfb0962b6ae7b5" translate="yes" xml:space="preserve">
          <source>Modifying code to use &lt;code&gt;on_load&lt;/code&gt; hooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="35f34b19ff60e68c68b8e81cf54c250dd275712f" translate="yes" xml:space="preserve">
          <source>Module::Concerning</source>
          <target state="translated">Module::Concerning</target>
        </trans-unit>
        <trans-unit id="9d4eba0f3d95edee88947f6d524fd5959c3a0997" translate="yes" xml:space="preserve">
          <source>Module::DelegationError</source>
          <target state="translated">Module::DelegationError</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="ec0f10698082c93db66cc3bacc7c4262043d5c37" translate="yes" xml:space="preserve">
          <source>Monitor</source>
          <target state="translated">Monitor</target>
        </trans-unit>
        <trans-unit id="541d63743d11a8fb491dae7ec4b904d23e530d3d" translate="yes" xml:space="preserve">
          <source>More Complete Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba917a0f4aba99c86e775d91895afeb4b93ff99a" translate="yes" xml:space="preserve">
          <source>More advanced use of the command line is focused around finding useful (even surprising at times) options in the utilities, and fitting those to your needs and specific work flow. Listed here are some tricks up Rails' sleeve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383f0e0e882a4dc2683b66372e6aa52e3a75f04b" translate="yes" xml:space="preserve">
          <source>More examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a6b992b86c1ba7e1983d83fe134aaae1109b0e" translate="yes" xml:space="preserve">
          <source>More information about migrations can be found in the &lt;a href=&quot;active_record_migrations&quot;&gt;Migrations&lt;/a&gt; guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6053fd77164aa71fabc62e1525d3a4af41ecd65" translate="yes" xml:space="preserve">
          <source>More information can be found in &lt;a href=&quot;core/classmethods#method-i-set&quot;&gt;ActiveJob::Core::ClassMethods#set&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a85b705b6839888932e068d061c266aa144e7aa" translate="yes" xml:space="preserve">
          <source>More precisely, if the web server is running and application files have been modified, Rails unloads all autoloaded constants just before the next request is processed. That way, application classes or modules used during that request are going to be autoloaded, thus picking up their current implementation in the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7a86c3c7bb6f061ed4b7dd4612a07ea2e55494" translate="yes" xml:space="preserve">
          <source>More reading:</source>
          <target state="translated">Больше чтения:</target>
        </trans-unit>
        <trans-unit id="1bc0107abee30f824ef23a770858703e03f38a74" translate="yes" xml:space="preserve">
          <source>Moreover, &lt;code&gt;Kernel#require&lt;/code&gt; loads files once, but development is much more smooth if code gets refreshed when it changes without restarting the server. It would be nice to be able to use &lt;code&gt;Kernel#load&lt;/code&gt; in development, and &lt;code&gt;Kernel#require&lt;/code&gt; in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d327e6ec6a6af69476c66c4050cf30edbe14a000" translate="yes" xml:space="preserve">
          <source>Moreover, it gracefully handles module dependencies. Given a &lt;code&gt;Foo&lt;/code&gt; module and a &lt;code&gt;Bar&lt;/code&gt; module which depends on the former, we would typically write the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1336dbab8404ab8354f8b7e595d9f9da94e52e6a" translate="yes" xml:space="preserve">
          <source>Moreover, since the test class extends from &lt;code&gt;ActionView::TestCase&lt;/code&gt;, you have access to Rails' helper methods such as &lt;code&gt;link_to&lt;/code&gt; or &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b40b9cf93fa0667fdbc7fa5d068e722af43930" translate="yes" xml:space="preserve">
          <source>Most CDNs will cache contents of an asset based on the complete URL. This means that a request to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f008a7d63f26d69778b0b37e05dd3fcfe81eed47" translate="yes" xml:space="preserve">
          <source>Most WYSIWYG editors are wrappers around HTML&amp;rsquo;s &lt;code&gt;contenteditable&lt;/code&gt; and &lt;code&gt;execCommand&lt;/code&gt; APIs, designed by Microsoft to support live editing of web pages in Internet Explorer 5.5, and &lt;a href=&quot;https://blog.whatwg.org/the-road-to-html-5-contenteditable#history&quot;&gt;eventually reverse-engineered&lt;/a&gt; and copied by other browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab978ad55eb3ed14757f1864bfc815a255aea29c" translate="yes" xml:space="preserve">
          <source>Most applications need to keep track of state for users that interact with the application. This could be the contents of a shopping basket, or the user id of the currently logged in user. This kind of user-specific state can be stored in the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133d632a5c7bc56c3f2c19e3db9d200e367fc939" translate="yes" xml:space="preserve">
          <source>Most bots are really dumb. They crawl the web and put their spam into every form's field they can find. Negative CAPTCHAs take advantage of that and include a &quot;honeypot&quot; field in the form which will be hidden from the human user by CSS or JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0776721a91b86a474e68e52f939aa617b046e9" translate="yes" xml:space="preserve">
          <source>Most commonly, the streamed broadcast is sent straight to the subscriber on the client-side. The channel just acts as a connector between the two parties (the broadcaster and the channel subscriber). Here's an example of a channel that allows subscribers to get all new comments on a given page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc330b7ded91a1d90bd743f5169cca15ece50bb" translate="yes" xml:space="preserve">
          <source>Most databases don't support true nested transactions. At the time of writing, the only database that supports true nested transactions that we're aware of, is MS-SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ceee0a51c6eda13292b80b4053139906be4f6b" translate="yes" xml:space="preserve">
          <source>Most databases don't support true nested transactions. At the time of writing, the only database that we're aware of that supports true nested transactions, is MS-SQL. Because of this, Active Record emulates nested transactions by using savepoints on MySQL and PostgreSQL. See &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/savepoint.html&quot;&gt;dev.mysql.com/doc/refman/5.7/en/savepoint.html&lt;/a&gt; for more information about savepoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523cf2e23b0af5d149ca0c1cf81d6fcdfeb6bb03" translate="yes" xml:space="preserve">
          <source>Most important of these are of course the controller, located at &lt;code&gt;app/controllers/welcome_controller.rb&lt;/code&gt; and the view, located at &lt;code&gt;app/views/welcome/index.html.erb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206cc7806b5824567f552027393f40e4e3d5b31f" translate="yes" xml:space="preserve">
          <source>Most likely your application is going to contain bugs or otherwise throw an exception that needs to be handled. For example, if the user follows a link to a resource that no longer exists in the database, Active Record will throw the &lt;code&gt;ActiveRecord::RecordNotFound&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d53cfefc19e9e67195ba8f79217ade0838cd9b3" translate="yes" xml:space="preserve">
          <source>Most methods expect a &lt;code&gt;number&lt;/code&gt; argument, and will return it unchanged if can't be converted into a valid number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eccfd56b24b3d8bc52ff7d0ed06cbf4578f063b0" translate="yes" xml:space="preserve">
          <source>Most of the adapters support multiple queues. With Active Job you can schedule the job to run on a specific queue:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee7e8c5aedcd813f43d22b5dfb2bc83dced0847" translate="yes" xml:space="preserve">
          <source>Most of the methods in the adapter are useful during migrations. Most notably, the instance methods provided by &lt;a href=&quot;schemastatements&quot;&gt;SchemaStatements&lt;/a&gt; are very useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b34b3aab7d85bd74d4b838155569578ab804d8" translate="yes" xml:space="preserve">
          <source>Most of the queries here are happening in the controller. In order to benefit from streaming you would want to rewrite it as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497bca5cc5e9c844d37444e5315fa4c8d45fc350" translate="yes" xml:space="preserve">
          <source>Most people don't clear out the cookies after working at a public terminal. So if the last user didn't log out of a web application, you would be able to use it as this user. Provide the user with a &lt;em&gt;log-out button&lt;/em&gt; in the web application, and &lt;em&gt;make it prominent&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571b335d230721224ba2cc7dd94150881d920e90" translate="yes" xml:space="preserve">
          <source>Most template dependencies can be derived from calls to &lt;code&gt;render&lt;/code&gt; in the template itself. Here are some examples of render calls that &lt;code&gt;ActionView::Digestor&lt;/code&gt; knows how to decode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4bf900addd8f529d8a91a4897d35ae99eedb25" translate="yes" xml:space="preserve">
          <source>Most template dependencies can be derived from calls to render in the template itself. Here are some examples of render calls that Cache Digests knows how to decode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b723d7488a6748257fd951690affee4ed1b12a30" translate="yes" xml:space="preserve">
          <source>Most text helpers that generate HTML output sanitize the given input by default, but do not escape it. This means HTML tags will appear in the page but all malicious code will be removed. Let's look at some examples using the &lt;code&gt;simple_format&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4acaae05139d290e7eb7c3702ecdfb4740715e" translate="yes" xml:space="preserve">
          <source>Most times you only care about the data itself. Here is a shortcut to just get the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be95de95c3a694cdfaa9b01f941d8b4d82957f5" translate="yes" xml:space="preserve">
          <source>Mount a Rack-based application to be used within the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66103f0e1c609f714c07a70bc4e128e09dc1a34" translate="yes" xml:space="preserve">
          <source>Mount priority</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e4ece6255d32204ed3ced596b87d73f3245e49" translate="yes" xml:space="preserve">
          <source>Mounting the Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e27a2147826a19a93ca554aefc33b75b0f0e77" translate="yes" xml:space="preserve">
          <source>Move to the latest patch version after your current version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69755f4dfaa3969fcb5b25c274c95fbd2193790b" translate="yes" xml:space="preserve">
          <source>Move to the latest patch version of the next minor version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2a29dbde4926cfbfe6b23506f21556494d10f9" translate="yes" xml:space="preserve">
          <source>Much like &lt;code&gt;form_with&lt;/code&gt; a &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; instance associated with the scope or model is yielded, so any generated field names are prefixed with either the passed scope or the scope inferred from the &lt;code&gt;:model&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c669cfe6f565d5e96b459b6a859e113771af92a" translate="yes" xml:space="preserve">
          <source>Much of Action Controller's functionality is implemented as Middlewares. The following list explains the purpose of each of them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdad3ac6d447afe1cd48c10de24f4c825fd91666" translate="yes" xml:space="preserve">
          <source>MultiJSON has reached its &lt;a href=&quot;https://github.com/rails/rails/pull/10576&quot;&gt;end-of-life&lt;/a&gt; and has been removed from Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577e584a04dfea954500058f69395d5b90b186e3" translate="yes" xml:space="preserve">
          <source>Multibyte</source>
          <target state="translated">Multibyte</target>
        </trans-unit>
        <trans-unit id="44b3146bc43b4204d4d02b6c17400bdc44be353f" translate="yes" xml:space="preserve">
          <source>Multibyte proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfe775843033ba1d1d04a0b95553ec396faea3b" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars</source>
          <target state="translated">Multibyte::Chars</target>
        </trans-unit>
        <trans-unit id="a77c779095fcad786d63d02ed4f10da364a918f8" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#compose</source>
          <target state="translated">Multibyte::Chars#compose</target>
        </trans-unit>
        <trans-unit id="3a71236f57c99aa27508902711cb5b914367a5af" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#decompose</source>
          <target state="translated">Multibyte::Chars#decompose</target>
        </trans-unit>
        <trans-unit id="c3aed8a0bd7f2e27cc61c4584bdef95c2754574b" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#grapheme_length</source>
          <target state="translated">Multibyte::Chars#grapheme_length</target>
        </trans-unit>
        <trans-unit id="2cb346ad51d1b8e1ab5d6fdd3b0e315e78fe54d3" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#limit</source>
          <target state="translated">Multibyte::Chars#limit</target>
        </trans-unit>
        <trans-unit id="edb500693690502b4ce906e2d6de066647b583de" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#method_missing</source>
          <target state="translated">Multibyte::Chars#method_missing</target>
        </trans-unit>
        <trans-unit id="c9aff960c5a6365bbe220c67d92ca35bf231b25f" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#normalize</source>
          <target state="translated">Multibyte::Chars#normalize</target>
        </trans-unit>
        <trans-unit id="61fd0c3d0704b5be2b2ddc64f01f05d3cdfae11e" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#respond_to_missing?</source>
          <target state="translated">Multibyte::Chars#respond_to_missing?</target>
        </trans-unit>
        <trans-unit id="fcac9f6b46e0d66cd3b2e48b54cb4838d98b1d70" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#reverse</source>
          <target state="translated">Multibyte::Chars#reverse</target>
        </trans-unit>
        <trans-unit id="29c57575d0fe497cfc6df410d77261ee859bff5c" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#slice!</source>
          <target state="translated">Multibyte::Chars#slice!</target>
        </trans-unit>
        <trans-unit id="60924aa309b322723072e8b5d1d25f3bfc84f185" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#split</source>
          <target state="translated">Multibyte::Chars#split</target>
        </trans-unit>
        <trans-unit id="c54415b49d5dd255e971711f05c0921ca91f9567" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#tidy_bytes</source>
          <target state="translated">Multibyte::Chars#tidy_bytes</target>
        </trans-unit>
        <trans-unit id="5696a1b68036edfea1149f28955c5171aaa066dd" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#titlecase</source>
          <target state="translated">Multibyte::Chars#titlecase</target>
        </trans-unit>
        <trans-unit id="29562d818637c005447d41a14c53e35ca819d736" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#titleize</source>
          <target state="translated">Multibyte::Chars#titleize</target>
        </trans-unit>
        <trans-unit id="3c0ba0b40fbfb06c8ff8eb5ac6b1a814a13abe65" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#to_s</source>
          <target state="translated">Multibyte::Chars#to_s</target>
        </trans-unit>
        <trans-unit id="4e507c3e7ade2459ad387acbc199ef65753f44e1" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#to_str</source>
          <target state="translated">Multibyte::Chars#to_str</target>
        </trans-unit>
        <trans-unit id="e0852a435607775956151f2d12a44d374e367131" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars#wrapped_string</source>
          <target state="translated">Multibyte::Chars#wrapped_string</target>
        </trans-unit>
        <trans-unit id="f1b49e7f7cacefac11c721baed55601e72598ac0" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars::consumes?</source>
          <target state="translated">Multibyte::Chars::consumes?</target>
        </trans-unit>
        <trans-unit id="25b5a149fcfab95d5e9ac1f6c3bc6b238d1a76b6" translate="yes" xml:space="preserve">
          <source>Multibyte::Chars::new</source>
          <target state="translated">Multibyte::Chars::new</target>
        </trans-unit>
        <trans-unit id="dd207e116a1881d14e8755e2dd8afad68ca66404" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode</source>
          <target state="translated">Multibyte::Unicode</target>
        </trans-unit>
        <trans-unit id="99e5ba7441254093fd472ba8b48bd5cf04210a9c" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#compose</source>
          <target state="translated">Multibyte::Unicode#compose</target>
        </trans-unit>
        <trans-unit id="6a9bf80aa3e8755c3b8785c2e82d94106dafbbea" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#decompose</source>
          <target state="translated">Multibyte::Unicode#decompose</target>
        </trans-unit>
        <trans-unit id="3ab6d7fd74955bfcdd88d1183d496821920971c7" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#default_normalization_form</source>
          <target state="translated">Multibyte::Unicode#default_normalization_form</target>
        </trans-unit>
        <trans-unit id="2f590db3a14c669921995363de50c9aa7b62f029" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#normalize</source>
          <target state="translated">Multibyte::Unicode#normalize</target>
        </trans-unit>
        <trans-unit id="497c9088f01c7ac11114f3ce775aac42f7b50b8c" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#pack_graphemes</source>
          <target state="translated">Multibyte::Unicode#pack_graphemes</target>
        </trans-unit>
        <trans-unit id="93ea9b938b0c09536d97df26cee8e9d7797e904e" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#tidy_bytes</source>
          <target state="translated">Multibyte::Unicode#tidy_bytes</target>
        </trans-unit>
        <trans-unit id="f24dbeb8438b74efbec9b1765decb2e0a554ecd2" translate="yes" xml:space="preserve">
          <source>Multibyte::Unicode#unpack_graphemes</source>
          <target state="translated">Multibyte::Unicode#unpack_graphemes</target>
        </trans-unit>
        <trans-unit id="8478db7c1329df5939eeb843202273bc3ca6f4fd" translate="yes" xml:space="preserve">
          <source>Multibyte::proxy_class</source>
          <target state="translated">Multibyte::proxy_class</target>
        </trans-unit>
        <trans-unit id="5b6a01d724fec572618c3d6bbaca05853b8359ee" translate="yes" xml:space="preserve">
          <source>Multibyte::proxy_class=</source>
          <target state="translated">Multibyte::proxy_class=</target>
        </trans-unit>
        <trans-unit id="1c0b905d64b0517973b54b47221309dc3ae10f49" translate="yes" xml:space="preserve">
          <source>Multipart Emails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb49c6706b5ec72ba15cb3e74cd18b230c613911" translate="yes" xml:space="preserve">
          <source>Multipart messages can also be used implicitly because Action Mailer will automatically detect and use multipart templates, where each template is named after the name of the action, followed by the content type. Each such detected template will be added to the message, as a separate part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afb1cbb87b4c678f1749be244babe3f86a208c0" translate="yes" xml:space="preserve">
          <source>Multiple Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be88eb95f46dc97a706ddd49f5cd1af0da18459d" translate="yes" xml:space="preserve">
          <source>Multiple Conditions for Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c54482647fa51932f62b990e2f89b4da939bdd" translate="yes" xml:space="preserve">
          <source>Multiple Databases with Active Record</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1749c5f39d08135c935affc6ac69182f5bb4c0" translate="yes" xml:space="preserve">
          <source>Multiple delegates to the same target are allowed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f3de59be21ca6540293770d2cd9c3d3037f833" translate="yes" xml:space="preserve">
          <source>Multiple joins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20aff80eb14d75fd5040fa242c1b2eceb165bbca" translate="yes" xml:space="preserve">
          <source>Multiple primary databases and a replica for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e59425d6c39d5b290427731b5200017ee438a" translate="yes" xml:space="preserve">
          <source>Multiplies this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; by a &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; and returns a new &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ad5edf0857ae96f7e8e591fea83fc0be2cbb1d" translate="yes" xml:space="preserve">
          <source>Mutator methods called on Relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f6be056c62007ce171d677af3018f64ae6643c" translate="yes" xml:space="preserve">
          <source>MySQL doesn't support DDL transactions. If you perform a DDL operation, then any created savepoints will be automatically released. For example, if you've created a savepoint, then you execute a CREATE TABLE statement, then the savepoint that was created will be automatically released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c321d50bbcd9b5772400c058a31390e2decc62" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html&quot;&gt;EXPLAIN Output Format&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09679f1a4e7693179ccf0966910ba55b4da55040" translate="yes" xml:space="preserve">
          <source>MySQL: &lt;code&gt;:precision&lt;/code&gt; [1..63], &lt;code&gt;:scale&lt;/code&gt; [0..30]. Default is (10,0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6ce4a25a9c51664b4dcdfc725f8eefd86a4c19" translate="yes" xml:space="preserve">
          <source>MySpace blocked many tags, but allowed CSS. So the worm's author put JavaScript into CSS like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ec39473e78b6ba391da473c04b8788442c949f" translate="yes" xml:space="preserve">
          <source>N/A: The adapter does not run in a separate process, and therefore doesn't support retries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9089a789f0069c4bce0cc6730a22c574fd4aa9e0" translate="yes" xml:space="preserve">
          <source>N/A: The adapter does not support queuing, and therefore sorting them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0fcee9ccee4f7f243b5a494a4b2459fafb9c16a" translate="yes" xml:space="preserve">
          <source>N/A: The adapter does not support queuing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90355c194c9abb6ca5245c0286a948195ec867f6" translate="yes" xml:space="preserve">
          <source>N/A: This adapter does not run in a separate process, and therefore timeout is unsupported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aabc7fc6e90c4c16eb42d4f9847ec6f8b51711" translate="yes" xml:space="preserve">
          <source>NAME_COMPILABLE_REGEXP</source>
          <target state="translated">NAME_COMPILABLE_REGEXP</target>
        </trans-unit>
        <trans-unit id="364b0ae6cebce8b9b4faf58d96a008e3e0acd1b0" translate="yes" xml:space="preserve">
          <source>NATIVE_DATABASE_TYPES</source>
          <target state="translated">NATIVE_DATABASE_TYPES</target>
        </trans-unit>
        <trans-unit id="34b8b86577c6bd56c6ad5b564be28cd2f908903d" translate="yes" xml:space="preserve">
          <source>NB: The output may still contain unescaped '&amp;lt;', '&amp;gt;', '&amp;amp;' characters and confuse browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66aabd91fc41cc4635aad94dc77d93a0e2eac67b" translate="yes" xml:space="preserve">
          <source>NEW</source>
          <target state="translated">NEW</target>
        </trans-unit>
        <trans-unit id="dadac5bcf4c6b4db403b0dcea4d07dd23acca6ba" translate="yes" xml:space="preserve">
          <source>NORMALIZATION_FORMS</source>
          <target state="translated">NORMALIZATION_FORMS</target>
        </trans-unit>
        <trans-unit id="5050fdd648c2c3c100230e8520feff151e76b22f" translate="yes" xml:space="preserve">
          <source>NOT Conditions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4c044303492a84dc9ba161a054727b65adabe0" translate="yes" xml:space="preserve">
          <source>NOTE! Unless told otherwise, Rails expects an action to render a template with the same name, contained in a folder named after its controller. If this controller is an API responding with 204 (No Content), which does not require a template, then this error will occur when trying to access it via browser, since we expect an HTML template to be rendered for such requests. If that's the case, carry on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c9b907d5e9772f96c352467530121723a24dcc" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;a href=&quot;test&quot;&gt;Test&lt;/a&gt; adapter extends the &lt;code&gt;ActionCable::SubscriptionsAdapter::Async&lt;/code&gt; adapter, so it could be used in system tests too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b300c91ff4f01a70796137110481c8c73e629a" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;method_name&lt;/code&gt; passed to &lt;a href=&quot;callbacks#method-i-define_model_callbacks&quot;&gt;#define_model_callbacks&lt;/a&gt; must not end with &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0ce667a0ad77170e45745c759f9a92c263c9f7" translate="yes" xml:space="preserve">
          <source>NOTE: By its nature, batch processing is subject to race conditions if other processes are modifying the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b33c7bf4dc36bae9675fcf16d7f5676777c7ff" translate="yes" xml:space="preserve">
          <source>NOTE: Calling &lt;code&gt;validate&lt;/code&gt; multiple times on the same method will overwrite previous definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1244e2875a89e59d59e46c3fbb7b9c9041b6c73" translate="yes" xml:space="preserve">
          <source>NOTE: Calling the same callback multiple times will overwrite previous callback definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459a5611b4fb3651cbcf5fb40048074d44f62f2e" translate="yes" xml:space="preserve">
          <source>NOTE: Discarded selects will default to 1. So if no month select is available, January will be assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bb5d930d5344ab9c4661a4a291c03f392618bf" translate="yes" xml:space="preserve">
          <source>NOTE: Each nesting level will merge inherited defaults in addition to their own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e780dd9cbb0eaceca23a69ca7ca982d3efb3e44a" translate="yes" xml:space="preserve">
          <source>NOTE: If you are going to iterate through each record, you should call each_record on the yielded BatchEnumerator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9110f77a80c94aa7c9d01ac9563f7305028fc714" translate="yes" xml:space="preserve">
          <source>NOTE: If you are using structured database data types (eg. PostgreSQL &lt;code&gt;hstore&lt;/code&gt;/&lt;code&gt;json&lt;/code&gt;, or MySQL 5.7+ &lt;code&gt;json&lt;/code&gt;) there is no need for the serialization provided by .store. Simply use .store_accessor instead to generate the accessor methods. Be aware that these columns use a string keyed hash and do not allow access using a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5aa3f2e463dee8d6a93b822667caffdd28ed89f" translate="yes" xml:space="preserve">
          <source>NOTE: It's not possible to set the order. That is automatically set to ascending on the primary key (&amp;ldquo;id ASC&amp;rdquo;) to make the batch ordering consistent. Therefore the primary key must be orderable, e.g. an integer or a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde7531f52bc0c757ff3d34c5fe675032ed0dc59" translate="yes" xml:space="preserve">
          <source>NOTE: It's not possible to set the order. That is automatically set to ascending on the primary key (&amp;ldquo;id ASC&amp;rdquo;) to make the batch ordering work. This also means that this method only works when the primary key is orderable (e.g. an integer or string).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f14cc49202f0a1b0bb8a6f8ce37815657aef23" translate="yes" xml:space="preserve">
          <source>NOTE: Must be subscribed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc6141be1468034c8070346d640d8a829f5f57d" translate="yes" xml:space="preserve">
          <source>NOTE: Only the option tags are returned, you have to wrap this call in a regular HTML select tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6943a719f65fb990d18007df480f8c42cd9b18c1" translate="yes" xml:space="preserve">
          <source>NOTE: Other URL helpers can be called in the block but be careful not to invoke your custom URL helper again otherwise it will result in a stack overflow error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b156bf73ae0bbaecb78b98c9bfa46bc9edd1b4e2" translate="yes" xml:space="preserve">
          <source>NOTE: Ruby 2.4 and later support native Unicode case mappings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d739e914d4cbb746ba24e8856710882ef4ceb321" translate="yes" xml:space="preserve">
          <source>NOTE: The :local timezone is Ruby's &lt;strong&gt;process&lt;/strong&gt; timezone, i.e. ENV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a7e32800af02b9f8831a9f78781ff3e3c0fa4e" translate="yes" xml:space="preserve">
          <source>NOTE: The &lt;code&gt;direct&lt;/code&gt; method can't be used inside of a scope block such as &lt;code&gt;namespace&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt; and will raise an error if it detects that it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84504c0e05d0a3bcbefa67ca6b2d127e74bce741" translate="yes" xml:space="preserve">
          <source>NOTE: The &lt;code&gt;resolve&lt;/code&gt; method can't be used inside of a scope block such as &lt;code&gt;namespace&lt;/code&gt; or &lt;code&gt;scope&lt;/code&gt; and will raise an error if it detects that it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e424a8b8f539c8c51767bfb36b1996ecd86b6d7" translate="yes" xml:space="preserve">
          <source>NOTE: The HTML options &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;readonly&lt;/code&gt;, and &lt;code&gt;multiple&lt;/code&gt; can all be treated as booleans. So specifying &lt;code&gt;disabled: true&lt;/code&gt; will give &lt;code&gt;disabled=&quot;disabled&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4273e9c86cc14cbdf878c0d79b4f8635103aeab2" translate="yes" xml:space="preserve">
          <source>NOTE: The default validations with the exception of &lt;code&gt;uniqueness&lt;/code&gt; will work. For example, if you want to check for &lt;code&gt;uniqueness&lt;/code&gt; with &lt;code&gt;hstore&lt;/code&gt; you will need to use a custom validation to handle it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2abfcf21d7eecb069b20fd390f5d0cd5e855b1" translate="yes" xml:space="preserve">
          <source>NOTE: The formatting and content of this middleware's output is intended for human consumption, and should be expected to change between releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba561ebdca75e4e27ed2d7158136f74d0787b8fb" translate="yes" xml:space="preserve">
          <source>NOTE: The returned records are in the same order as the ids you provide. If you want the results to be sorted by database, you can use &lt;a href=&quot;querymethods#method-i-where&quot;&gt;ActiveRecord::QueryMethods#where&lt;/a&gt; method and provide an explicit &lt;a href=&quot;querymethods#method-i-order&quot;&gt;ActiveRecord::QueryMethods#order&lt;/a&gt; option. But &lt;a href=&quot;querymethods#method-i-where&quot;&gt;ActiveRecord::QueryMethods#where&lt;/a&gt; method doesn't raise &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d051f3032ec6e426d27e0a95cae128b377cb5dff" translate="yes" xml:space="preserve">
          <source>NOTE: There is no &lt;code&gt;key_will_change!&lt;/code&gt; method for accessors, use &lt;code&gt;store_will_change!&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762c4a804d75ee92e1459fdc1f1254495115d31d" translate="yes" xml:space="preserve">
          <source>NOTE: This approach has been deprecated for end-user code in favor of &lt;a href=&quot;../module#method-i-thread_mattr_accessor&quot;&gt;thread_mattr_accessor&lt;/a&gt; and friends. Please use that approach instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0de1ac13c80a92b6f77a642c82b1dcfb7e1d9e9" translate="yes" xml:space="preserve">
          <source>NOTE: This check is performed only if &lt;code&gt;password_confirmation&lt;/code&gt; is not &lt;code&gt;nil&lt;/code&gt;. To require confirmation, make sure to add a presence check for the confirmation attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84dd77619c472769d8bdcac15ddd778d56672d39" translate="yes" xml:space="preserve">
          <source>NOTE: This custom behavior only applies to simple polymorphic URLs where a single model instance is passed and not more complicated forms, e.g:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951ec43c360ce92554228518ef500aed9eae55c6" translate="yes" xml:space="preserve">
          <source>NOTE: This validation will not fail if the association hasn't been assigned. If you want to ensure that the association is both present and guaranteed to be valid, you also need to use &lt;a href=&quot;classmethods#method-i-validates_presence_of&quot;&gt;validates_presence_of&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e81557c5494f5f1a9d85acc000f2a8822047be" translate="yes" xml:space="preserve">
          <source>NOTE: This validation will not fail while using it with an association if the latter was assigned but not valid. If you want to ensure that it is both present and valid, you also need to use &lt;a href=&quot;classmethods#method-i-validates_associated&quot;&gt;validates_associated&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f9e20a8fba6546eac5061bae525520123d4e92" translate="yes" xml:space="preserve">
          <source>NOTE: This won't affect any &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; objects that have already been created, e.g. any model timestamp attributes that have been read before the block will remain in the application's default timezone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01485856ed54cb882a5920d009b94f662f247905" translate="yes" xml:space="preserve">
          <source>NOTE: You cannot call class methods implicitly inside of with_options. You can access these methods using the class name instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001af184a34c3b7f841644c2049b13fde9247dcf" translate="yes" xml:space="preserve">
          <source>NOTE: queue_classic supports job scheduling since version 3.1. For older versions you can use the queue_classic-later gem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2e3aa9db1f23e790f7456ee1a1e5d29681ed24" translate="yes" xml:space="preserve">
          <source>NOT_NULL_VIOLATION</source>
          <target state="translated">NOT_NULL_VIOLATION</target>
        </trans-unit>
        <trans-unit id="d2a96aa7908b40b3466fee80b9d1ee30c01975eb" translate="yes" xml:space="preserve">
          <source>NO_CACHE</source>
          <target state="translated">NO_CACHE</target>
        </trans-unit>
        <trans-unit id="00b1f4e9b252474c44034ab40ad8a0aa89bcea94" translate="yes" xml:space="preserve">
          <source>NO_CONTENT_CODES</source>
          <target state="translated">NO_CONTENT_CODES</target>
        </trans-unit>
        <trans-unit id="d21e27fa2aab628c195a197ed9f03845aeb79542" translate="yes" xml:space="preserve">
          <source>NULL_ORIGIN_MESSAGE</source>
          <target state="translated">NULL_ORIGIN_MESSAGE</target>
        </trans-unit>
        <trans-unit id="99a01813d236bc88b0d2843edbc671a623558b8d" translate="yes" xml:space="preserve">
          <source>NUMERIC_VALUE_OUT_OF_RANGE</source>
          <target state="translated">NUMERIC_VALUE_OUT_OF_RANGE</target>
        </trans-unit>
        <trans-unit id="70baa5f2e3ea149d3efba73d8ae1136c8b2465d4" translate="yes" xml:space="preserve">
          <source>Name of gem where method is deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e659ad4b09e8447ec3181bf0a4d92b88b4c1c6" translate="yes" xml:space="preserve">
          <source>Name of the channel class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a2fbae76fe99fa8a275b3c0d7d46236e5b55a9" translate="yes" xml:space="preserve">
          <source>Name of the mailer class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031346423a1b0ce1d227b1b30affcb044013a924" translate="yes" xml:space="preserve">
          <source>Name of the middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78457f7d39785050562a7dff3d2e99a2e0e79866" translate="yes" xml:space="preserve">
          <source>Name of the operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03122e3a5b21f57d2d883c6a0a49357e202d911c" translate="yes" xml:space="preserve">
          <source>Name of the service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4922e237a35b808877d9a82e3b4f1d76a9d175" translate="yes" xml:space="preserve">
          <source>Name#!~</source>
          <target state="translated">Name#!~</target>
        </trans-unit>
        <trans-unit id="e792f5520042a09fdd9b5e1e673cfeee3c77200f" translate="yes" xml:space="preserve">
          <source>Name#&amp;lt;=&amp;gt;</source>
          <target state="translated">Name#&amp;lt;=&amp;gt;</target>
        </trans-unit>
        <trans-unit id="1179728f0d5f43d5293a76a78366464d8a60734c" translate="yes" xml:space="preserve">
          <source>Name#==</source>
          <target state="translated">Name#==</target>
        </trans-unit>
        <trans-unit id="72068bf4dc62054d1aa334d91a8f73f1a4df79d4" translate="yes" xml:space="preserve">
          <source>Name#===</source>
          <target state="translated">Name#===</target>
        </trans-unit>
        <trans-unit id="7e2c499ce65cfd2fc2c0d8d2ec1ae1cf9580ba97" translate="yes" xml:space="preserve">
          <source>Name#=~</source>
          <target state="translated">Name#=~</target>
        </trans-unit>
        <trans-unit id="e3a602bd022b88eb5fde04d80ef58513bf53d879" translate="yes" xml:space="preserve">
          <source>Name#cache_key</source>
          <target state="translated">Name#cache_key</target>
        </trans-unit>
        <trans-unit id="4681debcf82ac876bdf9bce21fce76c198d4aa93" translate="yes" xml:space="preserve">
          <source>Name#collection</source>
          <target state="translated">Name#collection</target>
        </trans-unit>
        <trans-unit id="ddf13fdc6f4b9d40165f558c9f93bad094528b73" translate="yes" xml:space="preserve">
          <source>Name#element</source>
          <target state="translated">Name#element</target>
        </trans-unit>
        <trans-unit id="463ae0c60d41feba7ad71200788dc4337d894175" translate="yes" xml:space="preserve">
          <source>Name#eql?</source>
          <target state="translated">Name#eql?</target>
        </trans-unit>
        <trans-unit id="98daf91647588f6bd7efd46dce99631c206bb5c1" translate="yes" xml:space="preserve">
          <source>Name#human</source>
          <target state="translated">Name#human</target>
        </trans-unit>
        <trans-unit id="c97e546358582b5a5ba1ea7bdf50be71b53e922b" translate="yes" xml:space="preserve">
          <source>Name#i18n_key</source>
          <target state="translated">Name#i18n_key</target>
        </trans-unit>
        <trans-unit id="c22528385d14458160cc452921eaab5c5a7bdce5" translate="yes" xml:space="preserve">
          <source>Name#match?</source>
          <target state="translated">Name#match?</target>
        </trans-unit>
        <trans-unit id="eee58f9d0bbf2eb7debc13e44da843d09fd29e93" translate="yes" xml:space="preserve">
          <source>Name#name</source>
          <target state="translated">Name#name</target>
        </trans-unit>
        <trans-unit id="18b2ab85207f22841861f5f4e4e3c8548355b26c" translate="yes" xml:space="preserve">
          <source>Name#param_key</source>
          <target state="translated">Name#param_key</target>
        </trans-unit>
        <trans-unit id="d7cc97c1964b5845cb4a881ef26f71711ce1bde7" translate="yes" xml:space="preserve">
          <source>Name#plural</source>
          <target state="translated">Name#plural</target>
        </trans-unit>
        <trans-unit id="c5f2701a378862cb6c909900693c993cdb5a070a" translate="yes" xml:space="preserve">
          <source>Name#route_key</source>
          <target state="translated">Name#route_key</target>
        </trans-unit>
        <trans-unit id="ea2815d1e3255ea3fe84eecd0b1534fda2f22333" translate="yes" xml:space="preserve">
          <source>Name#singular</source>
          <target state="translated">Name#singular</target>
        </trans-unit>
        <trans-unit id="3f1cb4167052af9701bd98eaab092beb46b304fb" translate="yes" xml:space="preserve">
          <source>Name#singular_route_key</source>
          <target state="translated">Name#singular_route_key</target>
        </trans-unit>
        <trans-unit id="5a69bdd1ef58b83bac730aaf7e46814d70697147" translate="yes" xml:space="preserve">
          <source>Name#to_s</source>
          <target state="translated">Name#to_s</target>
        </trans-unit>
        <trans-unit id="7ce74ccf007c0a9889745b2a5abd494e855bfcfa" translate="yes" xml:space="preserve">
          <source>Name#to_str</source>
          <target state="translated">Name#to_str</target>
        </trans-unit>
        <trans-unit id="055abe0c93806fd5fddede2eb9dd54fec55fd4c4" translate="yes" xml:space="preserve">
          <source>Name::new</source>
          <target state="translated">Name::new</target>
        </trans-unit>
        <trans-unit id="552b247919a3a4142c7193f3218e6c006dc56731" translate="yes" xml:space="preserve">
          <source>NameError</source>
          <target state="translated">NameError</target>
        </trans-unit>
        <trans-unit id="cd2bcf0c29669d641e5e068f2807dc580ed514d4" translate="yes" xml:space="preserve">
          <source>NameError#missing_name</source>
          <target state="translated">NameError#missing_name</target>
        </trans-unit>
        <trans-unit id="6519308d40a377cea33b21720a5e1eee430463f7" translate="yes" xml:space="preserve">
          <source>NameError#missing_name?</source>
          <target state="translated">NameError#missing_name?</target>
        </trans-unit>
        <trans-unit id="83cd88833f32f706e162e5b2c5207612273bba68" translate="yes" xml:space="preserve">
          <source>Named Route Helper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6243d7a9ebe509fa90d17fc1dec58ea6b19bcd3f" translate="yes" xml:space="preserve">
          <source>Named routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb73760ca2f5e5b7055b35a7dfc2d2a936f9ee3d" translate="yes" xml:space="preserve">
          <source>Named scopes can also have extensions, just as with &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53b64fd17c082e6beb4e1aca64ab7d44f35aa7e" translate="yes" xml:space="preserve">
          <source>Namespace isolation to &lt;code&gt;config/routes.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e8ca566bc6852923638a4ac14a1f95414dd757" translate="yes" xml:space="preserve">
          <source>Namespace isolation to &lt;code&gt;lib/blorgh/engine.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4617b659a51d0b5756991a46730570511eef04" translate="yes" xml:space="preserve">
          <source>Naming</source>
          <target state="translated">Naming</target>
        </trans-unit>
        <trans-unit id="8af56df8a9cb35f56b67edd6d269d4e86defc0d0" translate="yes" xml:space="preserve">
          <source>Naming Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2aa7c616223e41c395f07cffdda74786d5855d" translate="yes" xml:space="preserve">
          <source>Naming Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727e70bd9d31b16f99e09131ffa84f73d9c0cdab" translate="yes" xml:space="preserve">
          <source>Naming conflicts of this kind are rare in practice, but if one occurs, &lt;code&gt;require_dependency&lt;/code&gt; provides a solution by ensuring that the constant needed to trigger the heuristic is defined in the conflicting place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003199f690943e090431ea9315afa6128057cf84" translate="yes" xml:space="preserve">
          <source>Naming#model_name</source>
          <target state="translated">Naming#model_name</target>
        </trans-unit>
        <trans-unit id="37b2dfaa964981c5857c8884cc0c8a3ba035ecb2" translate="yes" xml:space="preserve">
          <source>Naming::param_key</source>
          <target state="translated">Naming::param_key</target>
        </trans-unit>
        <trans-unit id="15a5e01708eab09298595ec3df33c78823c5effa" translate="yes" xml:space="preserve">
          <source>Naming::plural</source>
          <target state="translated">Naming::plural</target>
        </trans-unit>
        <trans-unit id="e94910e8a8fee93c260867ec51d1f9417720d305" translate="yes" xml:space="preserve">
          <source>Naming::route_key</source>
          <target state="translated">Naming::route_key</target>
        </trans-unit>
        <trans-unit id="b08cbd482856c7e71807d58479b402a5eb900c01" translate="yes" xml:space="preserve">
          <source>Naming::singular</source>
          <target state="translated">Naming::singular</target>
        </trans-unit>
        <trans-unit id="e81567d4f4bc1b7dbbb3dc05722255fd642072fd" translate="yes" xml:space="preserve">
          <source>Naming::singular_route_key</source>
          <target state="translated">Naming::singular_route_key</target>
        </trans-unit>
        <trans-unit id="607b36733fc1c205aa141382646fa32e1828d2be" translate="yes" xml:space="preserve">
          <source>Naming::uncountable?</source>
          <target state="translated">Naming::uncountable?</target>
        </trans-unit>
        <trans-unit id="c7fccf3309993cfc8b035745c98b4d3c7546b8da" translate="yes" xml:space="preserve">
          <source>Neither of these rails commands do anything you could not do with &lt;code&gt;db:migrate&lt;/code&gt;. They are simply more convenient, since you do not need to explicitly specify the version to migrate to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e509697d698a7906a469d4a7b75c6a68f919eb56" translate="yes" xml:space="preserve">
          <source>Nested Associations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fba4d7bfc8f67d21d0ab22eb56f0af865916a65" translate="yes" xml:space="preserve">
          <source>Nested Attributes Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c468c4b63e979418047fd8eb368f74fa116c4f0" translate="yes" xml:space="preserve">
          <source>Nested Forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248022a870eb27897fa53e16452caafdbdabcf57" translate="yes" xml:space="preserve">
          <source>Nested Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a886336ca42a0ed213b8b9ef83363bbd6b3472ac" translate="yes" xml:space="preserve">
          <source>Nested attribute writers are normal setter methods named after an association. The most common way of defining these writers is either with &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; in a model definition or by defining a method with the proper name. For example: the attribute writer for the association &lt;code&gt;:address&lt;/code&gt; is called &lt;code&gt;address_attributes=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dba121940b3381c7ce96a44cb7145f206ea973c" translate="yes" xml:space="preserve">
          <source>Nested attributes allow you to save attributes on associated records through the parent. By default nested attribute updating is turned off and you can enable it using the &lt;a href=&quot;classmethods#method-i-accepts_nested_attributes_for&quot;&gt;#accepts_nested_attributes_for&lt;/a&gt; class method. When you enable nested attributes an attribute writer is defined on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f1637e9c296faeb50bd64d9b1abd9662cb9a3a" translate="yes" xml:space="preserve">
          <source>Nested attributes for an associated collection can also be passed in the form of a hash of hashes instead of an array of hashes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a35878c09308aa9049fa9b9a6d7c7e15c3dfe08" translate="yes" xml:space="preserve">
          <source>Nested classes are given table names prefixed by the singular form of the parent's table name. Enclosing modules are not considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f019e717e0ab6a9f532990a577c18fa3ae04dc" translate="yes" xml:space="preserve">
          <source>Nested joins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66f56f1f5c5f4b1c4c4c05d227838c7dc604645" translate="yes" xml:space="preserve">
          <source>Nested resources and/or namespaces are also supported, as illustrated in the example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2f14466890989a0ffb68ac10638261362707cc" translate="yes" xml:space="preserve">
          <source>Nested routes allow you to capture this relationship in your routing. In this case, you could include this route declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127f49081f658cece5f3811cf0dc1334ffa1512f" translate="yes" xml:space="preserve">
          <source>Nested transactions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c835d6d0c484ded0471029d4ba8a6d1f070134ea" translate="yes" xml:space="preserve">
          <source>Nested transactions support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="091718b4816f1f70d7c2f882eaebf502f50ff1e1" translate="yes" xml:space="preserve">
          <source>Nesting and Qualified Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4970c28f364d041c28f5d5ff2bc88daf1a13ad01" translate="yes" xml:space="preserve">
          <source>Network Address Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e76369081894cf103d91859c60296711dc576f5" translate="yes" xml:space="preserve">
          <source>Network traffic is mostly based on the limited Western alphabet, so new character encodings, such as Unicode, emerged, to transmit characters in other languages. But, this is also a threat to web applications, as malicious code can be hidden in different encodings that the web browser might be able to process, but the web application might not. Here is an attack vector in UTF-8 encoding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869ed4b7fdab7fee2a402b5ed8ba08fa65a80dda" translate="yes" xml:space="preserve">
          <source>Nevertheless, integration tests may want to inspect controller responses in more detail, and that's when Response can be useful for application developers. Integration test methods such as &lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch::Integration::RequestHelpers#get&lt;/a&gt; and &lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch::Integration::RequestHelpers#post&lt;/a&gt; return objects of type &lt;a href=&quot;testresponse&quot;&gt;TestResponse&lt;/a&gt; (which are of course also of type Response).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025519ea3f483eb11a3c8608b8a731eee0947b1b" translate="yes" xml:space="preserve">
          <source>New Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f7814b9783bf405ce9a2b8a2eb91a07086d026" translate="yes" xml:space="preserve">
          <source>New Framework Defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c45ae6d5b92c7fc2da8f10d18dfa0aa37127c7" translate="yes" xml:space="preserve">
          <source>New Rails applications no longer generate functional style controller tests and they should only be used for backward compatibility. Integration style controller tests perform actual requests, whereas functional style controller tests merely simulate a request. Besides, integration tests are as fast as functional tests and provide lot of helpers such as &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;parsed_body&lt;/code&gt; for effective testing of controller actions including even &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf53ae5b6704e72f88c820669c6bc32c67a8631" translate="yes" xml:space="preserve">
          <source>New Rails projects are configured to use this implementation in development environment by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c893b28bccafb88f76f9633609b9c93a062f23a" translate="yes" xml:space="preserve">
          <source>New applications will include these lines commented out in the production.rb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4943683ac5afab318415394f93a1c063933cd2e1" translate="yes" xml:space="preserve">
          <source>New features are only added to the master branch and will not be made available in point releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaf4b4268072c64d096dcb7ec72db000a572a03" translate="yes" xml:space="preserve">
          <source>New features, may contain API changes (Serve as major versions of Semver). Breaking changes are paired with deprecation notices in the previous minor or major release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c84fb1c0af34488ee6f00a9554a1204b67cf86b" translate="yes" xml:space="preserve">
          <source>New features, will likely contain API changes. The difference between Rails' minor and major releases is the magnitude of breaking changes, and usually reserved for special occasions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850c22852ead9d4a27eec9acc5dd2785ed98f6a9" translate="yes" xml:space="preserve">
          <source>New objects can be instantiated as either empty (pass no construction parameter) or pre-set with attributes but not yet saved (pass a hash with key names matching the associated table column names). In both instances, valid attribute keys are determined by the column names of the associated table &amp;ndash; hence you can't have attributes that aren't part of the table columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e4f9e6427a21080bbdeb14fdcf91252bfb5031" translate="yes" xml:space="preserve">
          <source>New rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the pluralization and singularization rules that is runs. This guarantees that your rules run before any of the rules that may already have been loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b6589f6e1b2065a2343b20e9cdbdd4af676bc1" translate="yes" xml:space="preserve">
          <source>Next the message contains &lt;code&gt;request.formats&lt;/code&gt; which specifies the format of template to be served in response. It is set to &lt;code&gt;text/html&lt;/code&gt; as we requested this page via browser, so Rails is looking for an HTML template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6767b8acbd10fc0b00f829278ae1fa51ceecbf6f" translate="yes" xml:space="preserve">
          <source>Next we need to &lt;em&gt;internationalize&lt;/em&gt; our application by abstracting every locale-specific element. Finally, we need to &lt;em&gt;localize&lt;/em&gt; it by providing necessary translations for these abstracts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109a21d6ff6f2d60ba3c1008a17050d0acac596e" translate="yes" xml:space="preserve">
          <source>Next, let's look at our first assertion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313433b09f8307e7e5ca150e5483eea4b6548eb6" translate="yes" xml:space="preserve">
          <source>Next, the &lt;code&gt;scaffold_controller&lt;/code&gt; generator is invoked, generating a controller called &lt;code&gt;Blorgh::ArticlesController&lt;/code&gt; (at &lt;code&gt;app/controllers/blorgh/articles_controller.rb&lt;/code&gt;) and its related views at &lt;code&gt;app/views/blorgh/articles&lt;/code&gt;. This generator also generates tests for the controller (&lt;code&gt;test/controllers/blorgh/articles_controller_test.rb&lt;/code&gt; and &lt;code&gt;test/system/blorgh/articles_test.rb&lt;/code&gt;) and a helper (&lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40bc064bdc43c09c7cef9fb43ea119e01e614001" translate="yes" xml:space="preserve">
          <source>Next, the &lt;code&gt;test_unit&lt;/code&gt; generator is invoked for this model, generating a model test at &lt;code&gt;test/models/blorgh/article_test.rb&lt;/code&gt; (rather than &lt;code&gt;test/models/article_test.rb&lt;/code&gt;) and a fixture at &lt;code&gt;test/fixtures/blorgh/articles.yml&lt;/code&gt; (rather than &lt;code&gt;test/fixtures/articles.yml&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652c33338cb22e43de7f0560517c2ebd49ae8f39" translate="yes" xml:space="preserve">
          <source>Next, the partial that this line will render needs to exist. Create a new directory at &lt;code&gt;app/views/blorgh/comments&lt;/code&gt; and in it a new file called &lt;code&gt;_form.html.erb&lt;/code&gt; which has this content to create the required partial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf9d80ade823a9926ce223f831b819c233b8f93" translate="yes" xml:space="preserve">
          <source>Next, there needs to be a form so that comments can be created on an article. To add this, put this line underneath the call to &lt;code&gt;render @article.comments&lt;/code&gt; in &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff2d584c2e41a9b0f9b33f4ba937921760355d0" translate="yes" xml:space="preserve">
          <source>Next, we need to create the &lt;code&gt;update&lt;/code&gt; action in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;. Add it between the &lt;code&gt;create&lt;/code&gt; action and the &lt;code&gt;private&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4802c4e596e6d343d4a0852de355df71a877078" translate="yes" xml:space="preserve">
          <source>Next, we need to update our &lt;code&gt;Blorgh::ArticleController#article_params&lt;/code&gt; method to permit the new form parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35efe3520fc6014820c61a3334ada013d78945e" translate="yes" xml:space="preserve">
          <source>Next, we will generate the three models that inherit from Vehicle. For this, we can use the &lt;code&gt;--parent=PARENT&lt;/code&gt; option, which will generate a model that inherits from the specified parent and without equivalent migration (since the table already exists).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599b45c8b1a4abe02f50f7999c00f774c6c961f6" translate="yes" xml:space="preserve">
          <source>Next, you have to tell Rails where your actual home page is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8add796b363b6597a08923490d74903e475356" translate="yes" xml:space="preserve">
          <source>Nil values can be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e1d872b31958c396eaac1d61b9e46aa2f5531f" translate="yes" xml:space="preserve">
          <source>NilClass</source>
          <target state="translated">NilClass</target>
        </trans-unit>
        <trans-unit id="7714fef354b8c1d34f1ea5bdaf4f7461127e5c71" translate="yes" xml:space="preserve">
          <source>NilClass#try</source>
          <target state="translated">NilClass#try</target>
        </trans-unit>
        <trans-unit id="44d04e33768b6d74220565215cdeaf0ed068ca29" translate="yes" xml:space="preserve">
          <source>NilClass#try!</source>
          <target state="translated">NilClass#try!</target>
        </trans-unit>
        <trans-unit id="158227f6a11ceb02d0183bb376e17da5f25f7553" translate="yes" xml:space="preserve">
          <source>No args - Returns &lt;code&gt;false&lt;/code&gt; if the relation is empty, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3f27db7e37442a5e3cfabfca8ff608e7a3a15c" translate="yes" xml:space="preserve">
          <source>No expiry is set on cache entries by default. Redis is expected to be configured with an eviction policy that automatically deletes least-recently or -frequently used keys when it reaches max memory. See &lt;a href=&quot;https://redis.io/topics/lru-cache&quot;&gt;redis.io/topics/lru-cache&lt;/a&gt; for cache server setup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecec418cda521616578d32392c1ebbdd160c1be8" translate="yes" xml:space="preserve">
          <source>No further processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db97ed13f2ed7f611f5ba31f10f0d82c2012ecc9" translate="yes" xml:space="preserve">
          <source>No namespace is set by default. Provide one if the Redis cache server is shared with other apps: &lt;code&gt;namespace: 'myapp-cache'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221a5c8be43af1725cb6eacac4221d7dd3fe4e70" translate="yes" xml:space="preserve">
          <source>No: Does not allow the priority of jobs to be configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16763f29fae6d620d661620376b81b8978bfbd1d" translate="yes" xml:space="preserve">
          <source>No: The adapter will run jobs at the next opportunity and cannot use perform_later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255548651b6f315ea8148ee71a1dcca3c1b3706e" translate="yes" xml:space="preserve">
          <source>No: The job is run in the same process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444ea91c7df550f94f3d747738c1f1a3466e0cc6" translate="yes" xml:space="preserve">
          <source>NoMethodError</source>
          <target state="translated">NoMethodError</target>
        </trans-unit>
        <trans-unit id="7bdb712b7ee9cb1572c977c6c62388b01305f84f" translate="yes" xml:space="preserve">
          <source>NoTouching</source>
          <target state="translated">NoTouching</target>
        </trans-unit>
        <trans-unit id="4409378f8e0b176c22d8f84d1d9f6e7b19f6bf2f" translate="yes" xml:space="preserve">
          <source>NoTouching#no_touching?</source>
          <target state="translated">NoTouching#no_touching?</target>
        </trans-unit>
        <trans-unit id="c47a7fa1d4ed36caf76d6aae9c8337d194a32586" translate="yes" xml:space="preserve">
          <source>NoTouching::ClassMethods</source>
          <target state="translated">NoTouching::ClassMethods</target>
        </trans-unit>
        <trans-unit id="ba98193055fdb0c7813315b4239b68f38d2b05af" translate="yes" xml:space="preserve">
          <source>NoTouching::ClassMethods#no_touching</source>
          <target state="translated">NoTouching::ClassMethods#no_touching</target>
        </trans-unit>
        <trans-unit id="ef59dd33658fd629a399aabbada1e44d1143840c" translate="yes" xml:space="preserve">
          <source>Noisy syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0542163c0ba3f59fb289f1dc9e8dba5d3af2730" translate="yes" xml:space="preserve">
          <source>Non-Resourceful Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55db06fa97f077282c5464f82b0f22e2389c4ca" translate="yes" xml:space="preserve">
          <source>Non-resourceful routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0b7793c252e73868462c36c6ba36d9dd714b74" translate="yes" xml:space="preserve">
          <source>Non-significant zeros after the decimal separator are stripped out by default (set &lt;code&gt;:strip_insignificant_zeros&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to change that):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="356a42c934b09cbbe5bf46e0b7b4b0ced1bcb0a1" translate="yes" xml:space="preserve">
          <source>Normal callbacks hook into the life cycle of Active Record objects, allowing you to work with those objects at various points. For example, you can use a &lt;code&gt;:before_save&lt;/code&gt; callback to cause something to happen just before an object is saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a13e9d32efa4b424c6392e61c6acc0eb80b45b5" translate="yes" xml:space="preserve">
          <source>Normal use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab70b8dd2f6d458c3ed264ce52d8181dab57e68" translate="yes" xml:space="preserve">
          <source>Normalize args by converting &lt;code&gt;render &quot;foo&quot;&lt;/code&gt; to &lt;code&gt;render :action =&amp;gt; &quot;foo&quot;&lt;/code&gt; and &lt;code&gt;render
&quot;foo/bar&quot;&lt;/code&gt; to &lt;code&gt;render :file =&amp;gt;
&quot;foo/bar&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ebf82afd9f2e7f802d7312d3d247b17cb36365" translate="yes" xml:space="preserve">
          <source>Normalize options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe63d1d809fb134b05b3d5638fd48aa6ce84994" translate="yes" xml:space="preserve">
          <source>Normalizes arguments, options and then delegates &lt;a href=&quot;rendering#method-i-render_to_body&quot;&gt;#render_to_body&lt;/a&gt; and sticks the result in &lt;code&gt;self.response_body&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8d8521ec1f363e13523415591e2d1d5a9b1bbc" translate="yes" xml:space="preserve">
          <source>Normally Rails ignores duplicate parameter names. If the parameter name contains an empty set of square brackets &lt;code&gt;[]&lt;/code&gt; then they will be accumulated in an array. If you wanted users to be able to input multiple phone numbers, you could place this in the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08e0da51423cc8cb2840120eee1ece651d5987b" translate="yes" xml:space="preserve">
          <source>Normally when you create controllers, helpers and models inside an engine, they are treated as if they were created inside the application itself. This means that all helpers and named routes from the application will be available to your engine's controllers as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef9f817caabf9bb9efcc4d6d589e7a64ec3f630" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;ApplicationController&lt;/code&gt; is the only controller that inherits from &lt;code&gt;ActionController::API&lt;/code&gt;. All other controllers in turn inherit from &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1813582ee34406c4e4de37d56648ffafa91b226" translate="yes" xml:space="preserve">
          <source>Normally, this mechanism is used on a per-client basis. The cache middleware allows us to share this caching mechanism across clients. We can enable cross-client caching in the call to &lt;code&gt;stale?&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997531dd7ea0389626b86133c48895591fcda728" translate="yes" xml:space="preserve">
          <source>Normally, you do not have to call this method directly at all. Use the factory class methods of &lt;code&gt;build_after_upload&lt;/code&gt; and &lt;code&gt;create_after_upload!&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5007b07c89f0ace0d40e4bbc19ce4ffe7536c3" translate="yes" xml:space="preserve">
          <source>Not all migrations change the schema. Some just fix the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fca96ad94b6af17e7dbcc07cff7f6d533f7b221" translate="yes" xml:space="preserve">
          <source>Not all web servers support streaming out-of-the-box. You need to check the instructions for each of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06657b8133ea9b4e185fb080234e3a0364fad6ca" translate="yes" xml:space="preserve">
          <source>Not very DRY, eh? We can fix this by using events instead. We'll add a &lt;code&gt;data-*&lt;/code&gt; attribute to our link, and then bind a handler to the click event of every link that has that attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a01dd84a7593bdb2c8fb765b3146a0f514f25b7" translate="yes" xml:space="preserve">
          <source>NotNullViolation</source>
          <target state="translated">NotNullViolation</target>
        </trans-unit>
        <trans-unit id="9e126b084c1db58a37584261f9012e35f671ac72" translate="yes" xml:space="preserve">
          <source>Notably, the Rails routing system calls &lt;code&gt;to_param&lt;/code&gt; on models to get a value for the &lt;code&gt;:id&lt;/code&gt; placeholder. &lt;code&gt;ActiveRecord::Base#to_param&lt;/code&gt; returns the &lt;code&gt;id&lt;/code&gt; of a model, but you can redefine that method in your models. For example, given</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae806db7c0984a3428e2d88329b2a10cf8332e7" translate="yes" xml:space="preserve">
          <source>Note about replacing already defined headers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c095fd5765c7e05c2ff1778309b8fa41345203ed" translate="yes" xml:space="preserve">
          <source>Note also that destroying a record preserves its ID in the model instance, so deleted models are still comparable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7694cc2f1f0145560dfa9380500275db32ac89c8" translate="yes" xml:space="preserve">
          <source>Note an object is not required to implement all APIs in order to work with Action Pack. This module only intends to provide guidance in case you want all features out of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d151fd14b51016b3cc7c384691610fb0bb532780" translate="yes" xml:space="preserve">
          <source>Note here that the routes are drawn upon the &lt;code&gt;Blorgh::Engine&lt;/code&gt; object rather than the &lt;code&gt;YourApp::Application&lt;/code&gt; class. This is so that the engine routes are confined to the engine itself and can be mounted at a specific point as shown in the &lt;a href=&quot;#test-directory&quot;&gt;test directory&lt;/a&gt; section. It also causes the engine's routes to be isolated from those routes that are within the application. The &lt;a href=&quot;#routes&quot;&gt;Routes&lt;/a&gt; section of this guide describes it in detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c5cab7750f2ca8837b173b4a826ddf4d2d4cca" translate="yes" xml:space="preserve">
          <source>Note in particular that truncation takes into account the length of the omission string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b28b6681145d5417ac3c0780f932b9f655ecb1" translate="yes" xml:space="preserve">
          <source>Note in the previous example only one key was symbolized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf0874701acc0cffe506f4241beac6925cd1806" translate="yes" xml:space="preserve">
          <source>Note in the previous example that increments may be negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9212787e26354a3c8b4c889cac5d5888c2c0c12" translate="yes" xml:space="preserve">
          <source>Note that &quot;%0d%0a&quot; is URL-encoded for &quot;\r\n&quot; which is a carriage-return and line-feed (CRLF) in Ruby. So the resulting HTTP header for the second example will be the following because the second Location header field overwrites the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66d170fe2e3fe3157ac0fda9773660aea982fef" translate="yes" xml:space="preserve">
          <source>Note that &amp;ldquo;TRUNCATE&amp;rdquo; is also a MySQL DDL statement!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44c012e2aa14d3cf71de66005ce218c80932da4" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../nestedattributes/classmethods#method-i-accepts_nested_attributes_for&quot;&gt;ActiveRecord::NestedAttributes::ClassMethods#accepts_nested_attributes_for&lt;/a&gt; sets &lt;code&gt;:autosave&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38923273a1ac5388fdafcc0d052b80b100edca09" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; will automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can pass &lt;code&gt;include_id: false&lt;/code&gt; to prevent &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; from rendering it automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fa56f7cb58d6bceba0d8992232bc1ce70dad69" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; will automatically generate a hidden field to store the ID of the record. There are circumstances where this hidden field is not needed and you can pass &lt;code&gt;include_id: false&lt;/code&gt; to prevent &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; from rendering it automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6baf90f202a6f42a23fe78dcfdfc40689608ba" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;https://github.com/guard/listen#issues--limitations&quot;&gt;some setups are unsupported&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d319a82de5469887e65f4e1b3e5b326d201bb0" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;includes&lt;/a&gt; works with association names while &lt;a href=&quot;querymethods#method-i-references&quot;&gt;references&lt;/a&gt; needs the actual table name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8e687fc1dc77b6bcff094a5807d77a44d345aed" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;schemastatements#method-i-create_join_table&quot;&gt;create_join_table&lt;/a&gt; does not create any indices by default; you can use its block form to do so yourself:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c811d3f55dffacb3921985a1c74934b15a7fe8d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:controller&lt;/code&gt;, &lt;code&gt;:action&lt;/code&gt; and &lt;code&gt;:id&lt;/code&gt; are interpreted as URL query parameters and thus available through &lt;code&gt;params&lt;/code&gt; in an action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3176ed2b3dd187522e4366e6d013975d35837d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:dependent&lt;/code&gt; is implemented using Rails' callback system, which works by processing callbacks in order. Therefore, other callbacks declared either before or after the &lt;code&gt;:dependent&lt;/code&gt; option can affect what it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ce03a2af56f6db4c7888f2270689c9d52b7eb4" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:dependent&lt;/code&gt; option is ignored for &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; associations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325dbc5769cb675d6be42dbd169dff67360c0183" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:dependent&lt;/code&gt; option is ignored when using &lt;code&gt;:through&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0da45d44e4ef2c4f7a2df800102b6112ec456b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:if&lt;/code&gt; has priority over &lt;code&gt;:except&lt;/code&gt; in case they are used together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a64c122b47cf95270a43e85eeebf6bb50d00438" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;:only&lt;/code&gt; has priority over &lt;code&gt;:if&lt;/code&gt; in case they are used together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565db700fe7dd945135cedb2356482108c2bba25" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;ActiveModel::Validations&lt;/code&gt; automatically adds an &lt;code&gt;errors&lt;/code&gt; method to your instances initialized with a new &lt;code&gt;ActiveModel::Errors&lt;/code&gt; object, so there is no need for you to do this manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ddc1fd214cfcde0937046ec7f0683ab8c3bf5c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;autosave: false&lt;/code&gt; is not same as not declaring &lt;code&gt;:autosave&lt;/code&gt;. When the &lt;code&gt;:autosave&lt;/code&gt; option is not present then new association records are saved but the updated association records are not saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d80f72f917064aa72f4120b7e0525fbac8be68" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;classify&lt;/code&gt; returns a class name as a string. You can get the actual class object invoking &lt;code&gt;constantize&lt;/code&gt; on it, explained next.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c01f02771dd2025c81366f7b4ab305fdcf9eff" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;connected_to&lt;/code&gt; with a role will look up an existing connection and switch using the connection specification name. This means that if you pass an unknown role like &lt;code&gt;connected_to(role: :nonexistent)&lt;/code&gt; you will get an error that says &lt;code&gt;ActiveRecord::ConnectionNotEstablished (No connection pool with 'AnimalsBase' found
for the 'nonexistent' role.)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25a94880736f451c356dfd25b8f9700646689b1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;content_for&lt;/code&gt; concatenates (default) the blocks it is given for a particular identifier in order. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f709bc03cc9989b690018bd7796015bd85e42d21" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;deliver_later&lt;/code&gt; will execute your method from the background job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace384731e2681d12d2903467f1e2b7abe234a6d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;reverse_update&lt;/code&gt; has no bang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d41aeffaefbf99cbff2faf9bf36f1aca03dbce1" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;save&lt;/code&gt; also has the ability to skip validations if passed &lt;code&gt;validate:
false&lt;/code&gt; as an argument. This technique should be used with caution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9f6fa6da45470fd512ddf42d74032a3e93aecc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;touch&lt;/code&gt; must be used on a persisted object, or else an &lt;a href=&quot;activerecorderror&quot;&gt;ActiveRecordError&lt;/a&gt; will be thrown. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9543a285676c6581ed0cdcd17dc85dccd1e4f6a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;try&lt;/code&gt; will swallow no-method errors, returning nil instead. If you want to protect against typos, use &lt;code&gt;try!&lt;/code&gt; instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723edf597c0f2c3bfba4a36a28e7ff66ad9453dc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;where(...)&lt;/code&gt; returns a relation, not an array like the old finders. If you require an &lt;code&gt;Array&lt;/code&gt;, use &lt;code&gt;where(...).to_a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89aeb743b6e9b920399d003494bf2bc2791d70d4" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;cross-site scripting (XSS) vulnerabilities bypass all CSRF protections&lt;/em&gt;. XSS gives the attacker access to all elements on a page, so they can read the CSRF security token from a form or directly submit the form. Read &lt;a href=&quot;#cross-site-scripting-xss&quot;&gt;more about XSS&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7947c734a16dab7b02f65f3261e5ec81aacc1fd7" translate="yes" xml:space="preserve">
          <source>Note that Active Record models will automatically detect their primary key. This can be avoided by using &lt;a href=&quot;../attributemethods/primarykey/classmethods#method-i-primary_key-3D&quot;&gt;self.primary_key=&lt;/a&gt; on the model to define the key explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22356cd337b0c6c9dab8adae88cbd559bed7ad97" translate="yes" xml:space="preserve">
          <source>Note that an &quot;around&quot; filter also wraps rendering. In particular, if in the example above, the view itself reads from the database (e.g. via a scope), it will do so within the transaction and thus present the data to preview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c38c998a3ea7a672e44bb1c497e9aae87c43e8" translate="yes" xml:space="preserve">
          <source>Note that an object instantiated with &lt;code&gt;new&lt;/code&gt; will not report errors even if it's technically invalid, because validations are automatically run only when the object is saved, such as with the &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;save&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1c15a9adf9cf7aefea6b6a4f52f3bdd59c79b7" translate="yes" xml:space="preserve">
          <source>Note that anything marked as an identifier will automatically create a delegate by the same name on any channel instances created off the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf442486084fb72e4ad77056cb08bfbaed774fb" translate="yes" xml:space="preserve">
          <source>Note that appending directly to &lt;code&gt;I18n.load_paths&lt;/code&gt; instead of to the application's configured i18n will &lt;em&gt;not&lt;/em&gt; override translations from external gems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a4821ec5868bd38360ccd2974f3d24f5c11f98" translate="yes" xml:space="preserve">
          <source>Note that basic authentication is insecure over unencrypted HTTP. An attacker that intercepts cleartext requests to the Postmark ingress can learn its password. You should only use the Postmark ingress over HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5374749430d739cb1e5e2cfb76a02f30988ae462" translate="yes" xml:space="preserve">
          <source>Note that basic authentication is insecure over unencrypted HTTP. An attacker that intercepts cleartext requests to the SendGrid ingress can learn its password. You should only use the SendGrid ingress over HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ec50d8410464d568b5c05fc066b0c1779894de" translate="yes" xml:space="preserve">
          <source>Note that basic authentication is insecure over unencrypted HTTP. An attacker that intercepts cleartext requests to the ingress can learn its password. You should only use this ingress over HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78dbd1cc164b82b4dcb8b006687d565c7961a7a4" translate="yes" xml:space="preserve">
          <source>Note that being unreachable does not imply being anonymous:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d3ecb667ba792a097afde3710779d973b5d3cf" translate="yes" xml:space="preserve">
          <source>Note that building your own string from user input may expose your application to injection attacks if not done properly. As an alternative, it is recommended to use one of the following methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c3e83adab9320795c50aab4d553ec7f849c321" translate="yes" xml:space="preserve">
          <source>Note that changing your secret_key_base will invalidate all existing session. Additionally, you should take care to make sure you are not relying on the ability to decode signed cookies generated by your app in external applications or JavaScript before changing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df0738b3ba5e7544dc16135160c562824d55adc" translate="yes" xml:space="preserve">
          <source>Note that checking for uniqueness using something like &lt;code&gt;include?&lt;/code&gt; is subject to race conditions. Do not attempt to use &lt;code&gt;include?&lt;/code&gt; to enforce distinctness in an association. For instance, using the article example from above, the following code would be racy because multiple users could be attempting this at the same time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae15203738a3a52937b4eae19c6cd23f7d2a5d67" translate="yes" xml:space="preserve">
          <source>Note that core extensions define &lt;code&gt;Hash#with_indifferent_access&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab3b21d54b61763e1564b0cc5ab99fbc9bfb2e4" translate="yes" xml:space="preserve">
          <source>Note that if a query matches multiple records, &lt;code&gt;find_by&lt;/code&gt; will fetch only the first one and ignore the others (see the &lt;code&gt;LIMIT 1&lt;/code&gt; statement above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f44b8fe38600ce94c3eb35df237f1de437ac4de" translate="yes" xml:space="preserve">
          <source>Note that if the target is not &lt;code&gt;nil&lt;/code&gt; then the call is attempted regardless of the &lt;code&gt;:allow_nil&lt;/code&gt; option, and thus an exception is still raised if said object does not respond to the method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72ef2b72c287b15edb8d7e8e3522050aa85ca8a" translate="yes" xml:space="preserve">
          <source>Note that if you do not specify the &lt;code&gt;:inverse_of&lt;/code&gt; option, then Active Record will try to automatically guess the inverse association based on heuristics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbde3470700eeb4eeaddf252a725a2d26c26cf8" translate="yes" xml:space="preserve">
          <source>Note that if you return a path without a leading slash then the URL is prefixed with the current SCRIPT_NAME environment variable. This is typically '/' but may be different in a mounted engine or where the application is deployed to a subdirectory of a website.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61f8e19cb72840c59ad034d835c6608ba8ae691" translate="yes" xml:space="preserve">
          <source>Note that if you use &lt;code&gt;permit&lt;/code&gt; in a key that points to a hash, it won't allow all the hash. You also need to specify which attributes inside the hash should be permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc227d776d965752397dbfd3f1acdf5bc6a2ed1" translate="yes" xml:space="preserve">
          <source>Note that if you want to immediately require dependencies when the engine is required, you should require them before the engine's initialization. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa297c0fe95f42b1a1cac85dbe866912a193d048" translate="yes" xml:space="preserve">
          <source>Note that in that case &lt;code&gt;module_parent&lt;/code&gt; returns &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b4e173af86d46b015dbb7131d2e90d6a871b4b" translate="yes" xml:space="preserve">
          <source>Note that in that case &lt;code&gt;module_parent_name&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d18aa10fe13a77b68f28afe44d33a98a83b983" translate="yes" xml:space="preserve">
          <source>Note that in the above example, to disallow the creation of a plain &lt;code&gt;Polygon&lt;/code&gt;, you should use &lt;code&gt;validates :type, presence:
true&lt;/code&gt;, instead of setting it as an abstract class. This way, &lt;code&gt;Polygon&lt;/code&gt; will stay in the hierarchy, and Active Record will continue to correctly derive the table name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ee3be5d2ed36a645c1e37b3a6a3854e08fb2cc" translate="yes" xml:space="preserve">
          <source>Note that interceptors need to be registered both with &lt;code&gt;register_interceptor&lt;/code&gt; and &lt;code&gt;register_preview_interceptor&lt;/code&gt; if they should operate on both sending and previewing emails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e002c10e961f1c824fc07296b73d779cf5dde89f" translate="yes" xml:space="preserve">
          <source>Note that it also means that associations marked for destruction won't be destroyed directly. They will however still be marked for destruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a0409f0e1222b726a5d13c3e9b75b2f1cb2598" translate="yes" xml:space="preserve">
          <source>Note that it handles both ASCII and Unicode whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072cbc6561b444de9cb58baa2b73bc9a7f982077" translate="yes" xml:space="preserve">
          <source>Note that it is also possible to assign a flash message as part of the redirection. You can assign &lt;code&gt;:notice&lt;/code&gt;, &lt;code&gt;:alert&lt;/code&gt; or the general purpose &lt;code&gt;:flash&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc3e916a86372cb28ffccd804eefdd6ebdbdcff" translate="yes" xml:space="preserve">
          <source>Note that it's still possible to generate a race condition in the database in the same way that &lt;a href=&quot;../validations/classmethods#method-i-validates_uniqueness_of&quot;&gt;validates_uniqueness_of&lt;/a&gt; can. You're encouraged to add a unique index in the database to deal with this even more unlikely scenario.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cce95eb30e93b5a6838836fe15a98374b38e1be" translate="yes" xml:space="preserve">
          <source>Note that keys are treated differently than &lt;a href=&quot;activesupport/hashwithindifferentaccess&quot;&gt;HashWithIndifferentAccess&lt;/a&gt;, meaning that string and symbol keys will not match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad94e60a7f2b7c1f49651af5196003959035f01b" translate="yes" xml:space="preserve">
          <source>Note that negative CAPTCHAs are only effective against dumb bots and won't suffice to protect critical applications from targeted bots. Still, the negative and positive CAPTCHAs can be combined to increase the performance, e.g., if the &quot;honeypot&quot; field is not empty (bot detected), you won't need to verify the positive CAPTCHA, which would require an HTTPS request to Google ReCaptcha before computing the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b604cb6faa93098b0d6c2b2506cc1683cb7ae6ca" translate="yes" xml:space="preserve">
          <source>Note that new records are different from any other record by definition, unless the other record is the receiver itself. Besides, if you fetch existing records with &lt;code&gt;select&lt;/code&gt; and leave the ID out, you're on your own, this predicate will return false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c983e77149090556408a4b167a572de601b14a" translate="yes" xml:space="preserve">
          <source>Note that now there can be more than one router in your application, and it's better to avoid passing requests through many routers. Consider this situation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb19839e635e04134fc7b559e09ccea24da6e26b" translate="yes" xml:space="preserve">
          <source>Note that numbers are not mentioned. In particular, 0 and 0.0 are &lt;strong&gt;not&lt;/strong&gt; blank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7419129c6af853c63a695a7e5692fb54165cfa7" translate="yes" xml:space="preserve">
          <source>Note that partials are not supported to be rendered with streaming, so in such cases, we just wrap them in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae24f5949134ca75ea07bd1f7b2e67eacecdb162" translate="yes" xml:space="preserve">
          <source>Note that passing custom disallowed types will override the default types, which are Symbol and YAML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84d9529ac53faf44afee2779503602281d1a9c0" translate="yes" xml:space="preserve">
          <source>Note that running the &lt;code&gt;db:migrate&lt;/code&gt; command also invokes the &lt;code&gt;db:schema:dump&lt;/code&gt; command, which will update your &lt;code&gt;db/schema.rb&lt;/code&gt; file to match the structure of your database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ece01fe72a7508a1b0c964b1a65ee164b23bb9" translate="yes" xml:space="preserve">
          <source>Note that setting the UUID primary key default value to &lt;code&gt;nil&lt;/code&gt; will require you to assure that you always provide a UUID value before saving a record (as primary keys cannot be &lt;code&gt;nil&lt;/code&gt;). This might be done via the &lt;code&gt;SecureRandom.uuid&lt;/code&gt; method and a &lt;code&gt;before_save&lt;/code&gt; callback, for instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289fcb6dd0c2e250498b73e7a017f254410a24ff" translate="yes" xml:space="preserve">
          <source>Note that some databases are configured to perform case-insensitive searches anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350f976200592f01983e5260d34b1c6c064ed87c" translate="yes" xml:space="preserve">
          <source>Note that some of the migrations may be skipped if a migration with the same name already exists in application. In such a situation you must decide whether to leave that migration or rename the migration in the application and rerun copying migrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56eed9c041b6163206a5e9b6cdce438725ed6596" translate="yes" xml:space="preserve">
          <source>Note that the +do end+ syntax for the redirect block wouldn't work, as Ruby would pass the block to &lt;code&gt;get&lt;/code&gt; instead of &lt;code&gt;redirect&lt;/code&gt;. Use &lt;code&gt;{ ... }&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b42c6a4a4341fd9958532c716f1eb5ee92beecb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;:as&lt;/code&gt; option given to mount takes the &lt;code&gt;engine_name&lt;/code&gt; as default, so most of the time you can simply omit it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a468e9d4e4a4f9bded222303b80c21107fd3a82" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;:autosave&lt;/code&gt; option is automatically enabled on every association that &lt;a href=&quot;classmethods#method-i-accepts_nested_attributes_for&quot;&gt;#accepts_nested_attributes_for&lt;/a&gt; is used for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f9248fbb6cde034e039397fee13f9a82a3513e" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;projects_attributes=&lt;/code&gt; writer method is in fact required for &lt;a href=&quot;formbuilder#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; to correctly identify &lt;code&gt;:projects&lt;/code&gt; as a collection, and the correct indices to be set in the form markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba717142b3857ce76f41cd84a25f35a3e8fb25a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;projects_attributes=&lt;/code&gt; writer method is in fact required for &lt;a href=&quot;formhelper#method-i-fields_for&quot;&gt;#fields_for&lt;/a&gt; to correctly identify &lt;code&gt;:projects&lt;/code&gt; as a collection, and the correct indices to be set in the form markup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fe7c790c83e9c2b8372df6432ade06d4a90302" translate="yes" xml:space="preserve">
          <source>Note that the MD5 is taken of the entire template file, not just what's within the cache do/end call. So it's possible that changing something outside of that call will still expire the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d218f2ca0876e04a64af92cc587d9b53ea48ef" translate="yes" xml:space="preserve">
          <source>Note that the above code is database-agnostic: it will run in MySQL, PostgreSQL, Oracle, and others. You can learn more about migrations in the &lt;a href=&quot;active_record_migrations&quot;&gt;Active Record Migrations guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71620954de70d1be268160bad4cd86ec4e084773" translate="yes" xml:space="preserve">
          <source>Note that the closing tag cannot be of the style &lt;code&gt;-%&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686dd5a3681eb94aa1b29e89f703ca327c41ee3d" translate="yes" xml:space="preserve">
          <source>Note that the default error messages are plural (e.g., &quot;is too short (minimum is %{count} characters)&quot;). For this reason, when &lt;code&gt;:minimum&lt;/code&gt; is 1 you should provide a personalized message or use &lt;code&gt;presence: true&lt;/code&gt; instead. When &lt;code&gt;:in&lt;/code&gt; or &lt;code&gt;:within&lt;/code&gt; have a lower limit of 1, you should either provide a personalized message or call &lt;code&gt;presence&lt;/code&gt; prior to &lt;code&gt;length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f0fde9874f69ccb2896442786f865a18ee23ff" translate="yes" xml:space="preserve">
          <source>Note that the endpoint, default values, and submit button label are tailored for &lt;code&gt;@person&lt;/code&gt;. That works that way because the involved helpers know whether the resource is a new record or not, and generate HTML accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b5d730eba76cc27fd97c8d6e638a4e37441c7b" translate="yes" xml:space="preserve">
          <source>Note that the filter in this case uses &lt;code&gt;send&lt;/code&gt; because the &lt;code&gt;logged_in?&lt;/code&gt; method is private and the filter does not run in the scope of the controller. This is not the recommended way to implement this particular filter, but in more simple cases it might be useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7678e438c40cc3477299adc32378f068a1ddef" translate="yes" xml:space="preserve">
          <source>Note that the implicit render done by ActionController detects if &lt;code&gt;render&lt;/code&gt; has been called, so the following will work without errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5be3e7764ae5644163769bf7cfc5d6fd2d1a1e" translate="yes" xml:space="preserve">
          <source>Note that the model is &lt;em&gt;not&lt;/em&gt; yet removed from the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954907bb7af2f55cb897a52cdad3e0923f08a201" translate="yes" xml:space="preserve">
          <source>Note that the model will &lt;em&gt;not&lt;/em&gt; be destroyed until the parent is saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a01b211c29bd75de844342e9c04d4a40fbfccc" translate="yes" xml:space="preserve">
          <source>Note that the partial layout has access to the local &lt;code&gt;article&lt;/code&gt; variable that was passed into the &lt;code&gt;render&lt;/code&gt; call. However, unlike application-wide layouts, partial layouts still have the underscore prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3e84c4e2bb503561ce5906bf724d8b22651774" translate="yes" xml:space="preserve">
          <source>Note that the prefix takes scopes into account as well, so relations between &lt;code&gt;Catalog::Category&lt;/code&gt; and &lt;code&gt;Catalog::Product&lt;/code&gt; or &lt;code&gt;Catalog::Category&lt;/code&gt; and &lt;code&gt;CatalogProduct&lt;/code&gt; need to be updated similarly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0b56e9abd80e969b8d26b5222d80ad053541d7" translate="yes" xml:space="preserve">
          <source>Note that the proc/lambda is evaluated right at the start of the mail message generation, so if you set something in the default hash using a proc, and then set the same thing inside of your mailer method, it will get overwritten by the mailer method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d1d39da63c97db09a691dee40a2f72872404f2" translate="yes" xml:space="preserve">
          <source>Note that the request method is not verified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc36a612f1887cd847fa353befaf752f6184ff5" translate="yes" xml:space="preserve">
          <source>Note that the request method is not verified. The different methods are available to make the tests more expressive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17d9050880b0000053a7919d1eaaab1da7ea52f" translate="yes" xml:space="preserve">
          <source>Note that the return value of validation methods is not relevant. It's not possible to halt the validate callback chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6264af4b7ec518a4c0d4264b64656418078b121d" translate="yes" xml:space="preserve">
          <source>Note that the usec for the time passed will be set to 0 to prevent rounding errors with external services, like MySQL (which will round instead of floor, leading to off-by-one-second errors).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09aeb0d119ddd40cd5438bcd1ca87c38a2dc4212" translate="yes" xml:space="preserve">
          <source>Note that the validator is initialized only once for the whole application life cycle, and not on each validation run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46848172b64a0977b58ec6feefd30b9073bc4ca6" translate="yes" xml:space="preserve">
          <source>Note that the validator will be initialized &lt;em&gt;only once&lt;/em&gt; for the whole application life cycle, and not on each validation run, so be careful about using instance variables inside it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae0dd2d063090bea5af276a745916be1df9fd6a9" translate="yes" xml:space="preserve">
          <source>Note that these methods do not strictly require &lt;code&gt;Post&lt;/code&gt; to be a subclass of &lt;a href=&quot;../activerecord/base&quot;&gt;ActiveRecord::Base&lt;/a&gt;. Any &lt;code&gt;Post&lt;/code&gt; class will work as long as its instances respond to &lt;code&gt;to_key&lt;/code&gt; and &lt;code&gt;model_name&lt;/code&gt;, given that &lt;code&gt;model_name&lt;/code&gt; responds to &lt;code&gt;param_key&lt;/code&gt;. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9001a2a86f3ffa7a896a66019a9acaefea21e1" translate="yes" xml:space="preserve">
          <source>Note that this conversion makes some assumptions about the duration of some periods, e.g. months are always 1/12 of year and years are 365.2425 days:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cc080b11bb02e1e002cb526197387a11eb18f5" translate="yes" xml:space="preserve">
          <source>Note that this is simply 'syntactic sugar' for defining an actual class method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ebd4a9a6512094d1e187bcc14bccbc19a4f2eb" translate="yes" xml:space="preserve">
          <source>Note that this method actually runs the queries, since the results of some are needed by the next ones when eager loading is going on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400d486fc3da7592d3e9fa738dc428190cc7b83a" translate="yes" xml:space="preserve">
          <source>Note that this module is completely decoupled from HTTP - the only requirement is a valid &lt;code&gt;_routes&lt;/code&gt; implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a867944d9d1c972ce2678c23acf249fcb7f57d6" translate="yes" xml:space="preserve">
          <source>Note that this only protects you against the most common mistake when using the format validator - you always need to keep in mind that ^ and $ match the &lt;strong&gt;line&lt;/strong&gt; beginning and line end in Ruby, and not the beginning and end of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e976053cd24cf89ca5afb4e56aca4c1a475bf8" translate="yes" xml:space="preserve">
          <source>Note that this option was added as a security measure, to ensure user input cannot be used as locale information unless it is previously known. Therefore, it's recommended not to disable this option unless you have a strong reason for doing so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd7cad2f920a22df3327dba7bec9bcba84d5107" translate="yes" xml:space="preserve">
          <source>Note that this option will not affect Active Support callbacks since they never halted the chain when any value was returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd22df73644dceb2d81a8d497944e60fc8cb29d" translate="yes" xml:space="preserve">
          <source>Note that this protects you only from automatic bots, targeted tailor-made bots cannot be stopped by this. So &lt;em&gt;negative CAPTCHAs might not be good to protect login forms&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8f134d1a5ae3dfb5037cd0d0c9a0e0c1fbc96d" translate="yes" xml:space="preserve">
          <source>Note that this will also delete records marked as &lt;a href=&quot;core#method-i-readonly-3F&quot;&gt;#readonly?&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620da313e90e0691449cfa180d7b0fbfd2313d4c" translate="yes" xml:space="preserve">
          <source>Note that this will clear anything that is being used to validate the model for both the &lt;code&gt;validates_with&lt;/code&gt; and &lt;code&gt;validate&lt;/code&gt; methods. It clears the validators that are created with an invocation of &lt;code&gt;validates_with&lt;/code&gt; and the callbacks that are set by an invocation of &lt;code&gt;validate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59556d783955e645825d2046dcb1ae4013692a97" translate="yes" xml:space="preserve">
          <source>Note that to create a variant it's necessary to download the entire blob file from the service. Because of this process, you also want to be considerate about when the variant is actually processed. You shouldn't be processing variants inline in a template, for example. Delay the processing to an on-demand controller, like the one provided in &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd0b997f03075f0fd5f7d6476535e63dc8ab0e2" translate="yes" xml:space="preserve">
          <source>Note that unless you have a specific reason to do so, you should prefer using &lt;code&gt;before_action&lt;/code&gt; rather than &lt;code&gt;after_action&lt;/code&gt; in your Action Mailer classes so that headers are parsed properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c297a0082106a309bccb2c304dff13f9d16faac5" translate="yes" xml:space="preserve">
          <source>Note that we define the change that we want to happen moving forward in time. Before this migration is run, there will be no table. After, the table will exist. Active Record knows how to reverse this migration as well: if we roll this migration back, it will remove the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e926ed7e503e22b4111ceb30ccb88dce58134ae" translate="yes" xml:space="preserve">
          <source>Note that we don't have explicit render at the end of the index action in accordance with &quot;convention over configuration&quot; principle. The rule is that if you do not explicitly render something at the end of a controller action, Rails will automatically look for the &lt;code&gt;action_name.html.erb&lt;/code&gt; template in the controller's view path and render it. So in this case, Rails will render the &lt;code&gt;app/views/books/index.html.erb&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc309473d6129fce9427ca4ffd7a719d23d30f2b" translate="yes" xml:space="preserve">
          <source>Note that we needed to instantiate a new &lt;code&gt;PictureFileCallbacks&lt;/code&gt; object, since we declared our callback as an instance method. This is particularly useful if the callbacks make use of the state of the instantiated object. Often, however, it will make more sense to declare the callbacks as class methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f078fa0d6abee21360b3c264683efe5cc570183" translate="yes" xml:space="preserve">
          <source>Note that we used Mime for the csv mime type as it comes with Rails. For a custom renderer, you'll need to register a mime type with &lt;code&gt;Mime::Type.register&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493e11f2139307e1b857ae2583c8a70294f296ed" translate="yes" xml:space="preserve">
          <source>Note that when an array is used, the implicit mapping from the values to database integers is derived from the order the values appear in the array. In the example, &lt;code&gt;:active&lt;/code&gt; is mapped to &lt;code&gt;0&lt;/code&gt; as it's the first element, and &lt;code&gt;:archived&lt;/code&gt; is mapped to &lt;code&gt;1&lt;/code&gt;. In general, the &lt;code&gt;i&lt;/code&gt;-th element is mapped to &lt;code&gt;i-1&lt;/code&gt; in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c316595d7f1cc476b48b9d06316e2c4531c197bc" translate="yes" xml:space="preserve">
          <source>Note that while for session values you set the key to &lt;code&gt;nil&lt;/code&gt;, to delete a cookie value you should use &lt;code&gt;cookies.delete(:key)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375abaf21583ac20acd9292c3b8eefbb701bc9fb" translate="yes" xml:space="preserve">
          <source>Note that you can define &lt;code&gt;perform&lt;/code&gt; with as many arguments as you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cfa3abeb2458e86a60f8ec1b460db8fb10e9dc" translate="yes" xml:space="preserve">
          <source>Note that you can define your own XML parameter parser which would allow you to describe multiple entities in a single request (i.e., by wrapping them all in a single root node), but if you just go with the flow and accept Rails' defaults, life will be much easier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fcc4bd31806b338f29c759262bfc0f506b7150" translate="yes" xml:space="preserve">
          <source>Note that you cannot pass a &lt;code&gt;Numeric&lt;/code&gt; value to &lt;code&gt;time_ago_in_words&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f1061c05c09718d57e4b98d385870b473c4dab2" translate="yes" xml:space="preserve">
          <source>Note that you must specify the extension of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe12ac2a13ce2a7fd2002400594427d3dac75d7" translate="yes" xml:space="preserve">
          <source>Note that, by default, &lt;code&gt;ActiveModel::Model&lt;/code&gt; implements &lt;code&gt;persisted?&lt;/code&gt; to return &lt;code&gt;false&lt;/code&gt;, which is the most common case. You may want to override it in your class to simulate a different scenario:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c0eb83f0bd048cfc7a18f5b34d2c2a7f0774a58" translate="yes" xml:space="preserve">
          <source>Note the &lt;code&gt;data-remote=&quot;true&quot;&lt;/code&gt;. Now, the form will be submitted by Ajax rather than by the browser's normal submit mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b50c32f894b15a18965fc17ad0b160bd64ca480" translate="yes" xml:space="preserve">
          <source>Note the subtle difference between the two: &lt;code&gt;assert_routing&lt;/code&gt; tests that a URL fits options while &lt;code&gt;assert_recognizes&lt;/code&gt; tests that a URL breaks into parameters properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a72b7714830d8e8def9655dd5179990d52e442" translate="yes" xml:space="preserve">
          <source>Note you can't append with &lt;code&gt;atomic_write&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e012da3c873f5e7f25a227356956d77d8cbb45da" translate="yes" xml:space="preserve">
          <source>Note, all the attributes for all the cases are kept in the same table. Read more: &lt;a href=&quot;https://www.martinfowler.com/eaaCatalog/singleTableInheritance.html&quot;&gt;www.martinfowler.com/eaaCatalog/singleTableInheritance.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e23d909c309df5b8483a6d80a959b1e4ab0714c" translate="yes" xml:space="preserve">
          <source>Note, however, the extra bit at the top of that action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11bc31bbee6149856fb4cc76f9292762b870e2b" translate="yes" xml:space="preserve">
          <source>Note, if data was written with the &lt;code&gt;:expires_in&lt;/code&gt; or &lt;code&gt;:version&lt;/code&gt; options, both of these conditions are applied before the data is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173438e96ca17bd100e0efb41be6765ffc5dc263" translate="yes" xml:space="preserve">
          <source>Note, the &lt;code&gt;only: &amp;lt;type&amp;gt;&lt;/code&gt; hash will apply to all callbacks defined on that method call. To get around this you can call the &lt;a href=&quot;callbacks#method-i-define_model_callbacks&quot;&gt;#define_model_callbacks&lt;/a&gt; method as many times as you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e730840f4cf0c423b310013d1509281bf488401d" translate="yes" xml:space="preserve">
          <source>Note, this method will return nil if ActiveRecord::Base.cache_versioning is set to &lt;code&gt;false&lt;/code&gt; (which it is by default until Rails 6.0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86af99f3964446c447ca9ff5afc05885736a4b0" translate="yes" xml:space="preserve">
          <source>Note, you should use &lt;code&gt;return false&lt;/code&gt; to prevent event for &lt;code&gt;jquery-ujs&lt;/code&gt; and &lt;code&gt;e.preventDefault()&lt;/code&gt; for &lt;code&gt;rails-ujs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91573f6985f0c4b16cbd786a58cd14db5f991daf" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;:id&lt;/code&gt; is always present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8634df8460327a401d547cd66d1daa13389930f3" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;yield&lt;/code&gt; can still be used to retrieve the stored content, but calling &lt;code&gt;yield&lt;/code&gt; doesn't work in helper modules, while &lt;code&gt;content_for&lt;/code&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da99924f8d120d0211cdf5e26cda8c8a164764e" translate="yes" xml:space="preserve">
          <source>Note: Acronyms that are passed to &lt;code&gt;pluralize&lt;/code&gt; will no longer be recognized, since the acronym will not occur as a delimited unit in the pluralized result. To work around this, you must specify the pluralized form as an acronym as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a8c7e5a63f17d1875bad1c59c527c97a6dd626d" translate="yes" xml:space="preserve">
          <source>Note: Although it is often much faster than the alternative, &lt;a href=&quot;classmethods#method-i-destroy&quot;&gt;destroy&lt;/a&gt;, skipping callbacks might bypass business logic in your application that ensures referential integrity or performs other essential jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9ece58e771c7dc934cee4b84518319fbbf0ee9" translate="yes" xml:space="preserve">
          <source>Note: As Active Record callbacks are not triggered, this method will not automatically update &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b382d38463c4b9772db0f0e4f20597ea1d44539b" translate="yes" xml:space="preserve">
          <source>Note: Fixtures are unordered. If you want ordered fixtures, use the omap YAML type. See &lt;a href=&quot;http://yaml.org/type/omap.html&quot;&gt;yaml.org/type/omap.html&lt;/a&gt; for the specification. You will need ordered fixtures when you have foreign key constraints on keys in the same table. This is commonly needed for tree structures. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f911ece33a8889898f780391535eeae25b4645" translate="yes" xml:space="preserve">
          <source>Note: If the day is not included as an option but the month is, the day will be set to the 1st to ensure that all month choices are valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455ad7b304457d0818b156a5d5a258e87af23432" translate="yes" xml:space="preserve">
          <source>Note: Instantiation, callback execution, and deletion of each record can be time consuming when you're removing many records at once. It generates at least one SQL &lt;code&gt;DELETE&lt;/code&gt; query per record (or possibly more, to enforce your callbacks). If you want to delete many rows quickly, without concern for their associations or callbacks, use &lt;a href=&quot;relation#method-i-delete_all&quot;&gt;delete_all&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acacd3efece89a8db79dda6270478358ee24035b" translate="yes" xml:space="preserve">
          <source>Note: Joining, eager loading and preloading of these associations is not possible. These operations happen before instance creation and the scope will be called with a &lt;code&gt;nil&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308e33031d5f89bc20b7a0f4592db047a4d56233" translate="yes" xml:space="preserve">
          <source>Note: MySQL only supports index order from 8.0.1 onwards (earlier versions accepted the syntax but ignored it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124f350c136512944ed0f6dcf73a12862c334ad1" translate="yes" xml:space="preserve">
          <source>Note: Partial indexes are only supported for PostgreSQL and SQLite 3.8.0+.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d6873d18327e72cbed60ce10d25503c5b6ff17" translate="yes" xml:space="preserve">
          <source>Note: SQLite doesn't support index length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfc9a11d5d1fa70f8585fb64a2db0c1f6ce0546" translate="yes" xml:space="preserve">
          <source>Note: SSEs are not currently supported by IE. However, they are supported by Chrome, Firefox, Opera, and Safari.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86cc9acd3cc4679a14049283572db943a13a4c8" translate="yes" xml:space="preserve">
          <source>Note: The &lt;code&gt;attachable_type=&lt;/code&gt; method is being called when assigning an &lt;code&gt;attachable&lt;/code&gt;. The &lt;code&gt;class_name&lt;/code&gt; of the &lt;code&gt;attachable&lt;/code&gt; is passed as a &lt;a href=&quot;../../string&quot;&gt;String&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32677b2c1945dcf62d2c8edf09310b4dc2135f1" translate="yes" xml:space="preserve">
          <source>Note: The adapter provided by this method must provide some additional methods from those expected of a standard &lt;code&gt;ActiveJob::QueueAdapter&lt;/code&gt; in order to be used with the active job test helpers. Refer to &lt;code&gt;ActiveJob::QueueAdapters::TestAdapter&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856990d094574273e23f235fcf21d1ef8d7d3679" translate="yes" xml:space="preserve">
          <source>Note: The new instance will share a link to the same attributes as the original class. Therefore the sti column value will still be the same. Any change to the attributes on either instance will affect both instances. If you want to change the sti column as well, use &lt;a href=&quot;persistence#method-i-becomes-21&quot;&gt;becomes!&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e495b3a8620060a6500fb583012fa4372f4b9ce5" translate="yes" xml:space="preserve">
          <source>Note: The old instance's sti column value will be changed too, as both objects share the same set of attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5de37a9fe710621b520911dc22e6273fdacef4" translate="yes" xml:space="preserve">
          <source>Note: The precision is the total number of significant digits, and the scale is the number of digits that can be stored following the decimal point. For example, the number 123.45 has a precision of 5 and a scale of 2. A decimal with a precision of 5 and a scale of 2 can range from -999.99 to 999.99.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9065955578098ed0bb8bd025f933ad59c21c6e6" translate="yes" xml:space="preserve">
          <source>Note: This also works for the methods in &lt;a href=&quot;formoptionshelper&quot;&gt;FormOptionsHelper&lt;/a&gt; and &lt;a href=&quot;datehelper&quot;&gt;DateHelper&lt;/a&gt; that are designed to work with an object as base, like &lt;a href=&quot;formoptionshelper#method-i-collection_select&quot;&gt;ActionView::Helpers::FormOptionsHelper#collection_select&lt;/a&gt; and &lt;a href=&quot;datehelper#method-i-datetime_select&quot;&gt;ActionView::Helpers::DateHelper#datetime_select&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2352219e415aacb6ef215e56a9cd402e35a6e9a" translate="yes" xml:space="preserve">
          <source>Note: This assertion is simply a shortcut for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0e993df538909451f4951854e2341a7ebc0570" translate="yes" xml:space="preserve">
          <source>Note: This is an optimization of &lt;code&gt;Enumerable#excluding&lt;/code&gt; that uses &lt;code&gt;Array#-&lt;/code&gt; instead of &lt;code&gt;Array#reject&lt;/code&gt; for performance reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863ca249317e9c0dbb645dce430c3cd0b6faa965" translate="yes" xml:space="preserve">
          <source>Note: This is purely a browser performance optimization and is not meant for server load balancing. See &lt;a href=&quot;https://www.die.net/musings/page_load_time&quot;&gt;www.die.net/musings/page_load_time&lt;/a&gt;/ for background and &lt;a href=&quot;https://www.browserscope.org/?category=network&quot;&gt;www.browserscope.org/?category=network&lt;/a&gt; for connection limit data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3287c1634d93a72d137f0d950e3c604c3df357" translate="yes" xml:space="preserve">
          <source>Note: To turn off all caching provided by Action Controller, set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b440437b3604be9608bede173ea6d8501bdfdc8" translate="yes" xml:space="preserve">
          <source>Note: Updating a large number of records will run an UPDATE query for each record, which may cause a performance issue. When running callbacks is not needed for each record update, it is preferred to use &lt;a href=&quot;../relation#method-i-update_all&quot;&gt;update_all&lt;/a&gt; for updating all records in a single query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b50481c99d023afaf5455de8ac79fe5a963dac" translate="yes" xml:space="preserve">
          <source>Note: You can't pass in a condition as a string (like &lt;code&gt;name =
'Jamie'&lt;/code&gt;), since it would be sanitized and then queried against the primary key column, like &lt;code&gt;id = 'name =
\'Jamie\''&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e95bdc13adc134c9b83e94f1ac9f03cf6cfc487" translate="yes" xml:space="preserve">
          <source>Note: not all valid &lt;a href=&quot;querymethods#method-i-select&quot;&gt;Relation#select&lt;/a&gt; expressions are valid &lt;a href=&quot;calculations#method-i-count&quot;&gt;count&lt;/a&gt; expressions. The specifics differ between databases. In invalid cases, an error from the database is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb90894dfb9810668140dd5abc132702407b2049" translate="yes" xml:space="preserve">
          <source>Note: only supported by MySQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11012fa2ff042b2ccc5930b6e83ce185707b0ecd" translate="yes" xml:space="preserve">
          <source>Note: only supported by PostgreSQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b979edd03dc476656559cc41b1e4a6d868f05723" translate="yes" xml:space="preserve">
          <source>Note: only supported by PostgreSQL and MySQL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4570c3579af0b879f140c7b30b54ae99eeeb839" translate="yes" xml:space="preserve">
          <source>Note: only supported by PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a83e4f90833243e0c6406c5f754ff630641257d" translate="yes" xml:space="preserve">
          <source>Note: this feature is not available with the threaded parallelization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205d08dcd8d151326e23421d0d1ac6edc18b3313" translate="yes" xml:space="preserve">
          <source>Note: use &lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt; to match the start and end of the string, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; match the start/end of a line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773ff38978dbfe8d2f1950aaff40b3a6289527ac" translate="yes" xml:space="preserve">
          <source>Note: when using &lt;code&gt;controller&lt;/code&gt;, the route is simply named after the method you call on the block parameter rather than map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="39429a684161fc0c5605d56b46f44c1c03d8efe8" translate="yes" xml:space="preserve">
          <source>Notice how the short-style &lt;code&gt;form_with&lt;/code&gt; invocation is conveniently the same, regardless of the record being new or existing. Record identification is smart enough to figure out if the record is new by asking &lt;code&gt;record.new_record?&lt;/code&gt;. It also selects the correct path to submit to, and the name based on the class of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0f7457358771ccbf92d92a4d763b28aca85961" translate="yes" xml:space="preserve">
          <source>Notice that &amp;ldquo;rails:generators:test_unit&amp;rdquo; could be loaded as well, what Rails looks for is the first and last parts of the namespace. This is what allows any test framework to hook into Rails as long as it provides any of the hooks above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5549615aaa370893e3ea8fcbb7c259a1259ddcf" translate="yes" xml:space="preserve">
          <source>Notice that :stream only works with templates. Rendering :json or :xml with :stream won't work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320e974e71e96a6cbd1aead6a719dcffd232a3a4" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;action_methods.include?(&quot;foo&quot;)&lt;/code&gt; may return false and &lt;code&gt;available_action?(&quot;foo&quot;)&lt;/code&gt; returns true because this method considers actions that are also available through other means, for example, implicit render ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe43ee640ff6bcab6590900f5e5cb91b851fec67" translate="yes" xml:space="preserve">
          <source>Notice that in this example we used the &lt;code&gt;cache_key_with_version&lt;/code&gt; method, so the resulting cache key will be something like &lt;code&gt;products/233-20140225082222765838000/competing_price&lt;/code&gt;. &lt;code&gt;cache_key_with_version&lt;/code&gt; generates a string based on the model's class name, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;updated_at&lt;/code&gt; attributes. This is a common convention and has the benefit of invalidating the cache whenever the product is updated. In general, when you use low-level caching for instance level information, you need to generate a cache key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335c6423429f476890129005da902f572747e332" translate="yes" xml:space="preserve">
          <source>Notice that inside the &lt;code&gt;create&lt;/code&gt; action we use &lt;code&gt;render&lt;/code&gt; instead of &lt;code&gt;redirect_to&lt;/code&gt; when &lt;code&gt;save&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;render&lt;/code&gt; method is used so that the &lt;code&gt;@article&lt;/code&gt; object is passed back to the &lt;code&gt;new&lt;/code&gt; template when it is rendered. This rendering is done within the same request as the form submission, whereas the &lt;code&gt;redirect_to&lt;/code&gt; will tell the browser to issue another request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200ef77ed6574c244c4ae9bf1d5933c2dfdd03d7" translate="yes" xml:space="preserve">
          <source>Notice that no &lt;code&gt;:id&lt;/code&gt; parameter was provided to the first &lt;code&gt;url_for&lt;/code&gt; call and the helper used the one from the route's path. Any path parameter implicitly used by &lt;code&gt;url_for&lt;/code&gt; can always be overwritten like shown on the last &lt;code&gt;url_for&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519aa6a6e5d6afab6a7e2eb41a4439a4f9329106" translate="yes" xml:space="preserve">
          <source>Notice that only &lt;em&gt;one&lt;/em&gt; migration was copied over here. This is because the first two migrations were copied over the first time this command was run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df50d170a97756a976395374fdf8c24cc9971e57" translate="yes" xml:space="preserve">
          <source>Notice that the third parameter, the options array, is the same kind of argument you pass to &lt;code&gt;options_for_select&lt;/code&gt;. One advantage here is that you don't have to worry about pre-selecting the correct city if the user already has one - Rails will do this for you by reading from the &lt;code&gt;@person.city_id&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1908ba1c531a2b8259e8a292905b0338f0a4c049" translate="yes" xml:space="preserve">
          <source>Notice that when you add a path using &lt;code&gt;add&lt;/code&gt;, the path object created already contains the path with the same path value given to &lt;code&gt;add&lt;/code&gt;. In some situations, you may not want this behavior, so you can give &lt;code&gt;:with&lt;/code&gt; as option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c8b7d455b3180c88c20d2969451f82d99fc72d" translate="yes" xml:space="preserve">
          <source>Notice the 'E' in the output. It denotes a test with error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b70343665b3497b68b2af72f1fe352646fe9bf" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;category&lt;/code&gt; key of the &lt;code&gt;first&lt;/code&gt; article found in &lt;code&gt;fixtures/articles.yml&lt;/code&gt; has a value of &lt;code&gt;about&lt;/code&gt;. This tells Rails to load the category &lt;code&gt;about&lt;/code&gt; found in &lt;code&gt;fixtures/categories.yml&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f050ea2079c865a020ea6021b3e47525fb921cf9" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;format.js&lt;/code&gt; in the &lt;code&gt;respond_to&lt;/code&gt; block: that allows the controller to respond to your Ajax request. You then have a corresponding &lt;code&gt;app/views/users/create.js.erb&lt;/code&gt; view file that generates the actual JavaScript code that will be sent and executed on the client side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679dcd5834f1e3b85618c3828ff5a6c00ccaf1be" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;only_path: true&lt;/code&gt; part. This is because &lt;a href=&quot;urlfor&quot;&gt;UrlFor&lt;/a&gt; has no information about the website hostname that your Rails app is serving. So if you want to include the hostname as well, then you must also pass the &lt;code&gt;:host&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55f230dbbf5a74dbcd7017f3fcdd6a43cc06c8b" translate="yes" xml:space="preserve">
          <source>Notice we're starting to see some duplication in these three tests, they both access the same Article fixture data. We can D.R.Y. this up by using the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; methods provided by &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="753a22b2eb617204efee4644795034b8ace1ee14" translate="yes" xml:space="preserve">
          <source>Notifications</source>
          <target state="translated">Notifications</target>
        </trans-unit>
        <trans-unit id="8c8eaaf882c955457360616271c1ee8f60912482" translate="yes" xml:space="preserve">
          <source>Notifies the logs that the request has begun. After the request is complete, flushes all the logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b083a26e6e8d5c85e90f954d51b377ab9d6cb915" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;@articles&lt;/code&gt; is included in the instance variables, because the line defining it was executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b042097ab2d91df48ebb6afa5f5c762fbec1027" translate="yes" xml:space="preserve">
          <source>Now add a rotation for the old SHA1 digest so existing cookies are seamlessly upgraded to the new SHA256 digest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41bff3fa5ccfd1232f6ff1584724f94b31f90aa" translate="yes" xml:space="preserve">
          <source>Now all of the following will produce the expected join queries using &lt;code&gt;INNER JOIN&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b7f51321bce2db86858d9563944349508848d5" translate="yes" xml:space="preserve">
          <source>Now all you have to do is change that timestamp when the helper method changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa3370358927296e6f19b98512db3f680400c6c" translate="yes" xml:space="preserve">
          <source>Now if we execute &lt;code&gt;@todo = @user.todos.create&lt;/code&gt; then the &lt;code&gt;@todo&lt;/code&gt; record's &lt;code&gt;user_id&lt;/code&gt; value will be the &lt;code&gt;guid&lt;/code&gt; value of &lt;code&gt;@user&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be04c0ceb80dcbf0f5dc7603a36d5f8eb4fa4974" translate="yes" xml:space="preserve">
          <source>Now if we run our tests, we should see it pass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786773a8b554b8bb590eedf207af886d2f83e1b8" translate="yes" xml:space="preserve">
          <source>Now if you go to http://localhost:3000/articles you will see a list of all the articles that you have created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ab2226544af01e8b9dc9c006fa565e96f7bfd6d" translate="yes" xml:space="preserve">
          <source>Now if you try to create a new article, you will be greeted with a basic HTTP Authentication challenge:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e279c3aab36157f4c5efb237f845b1ef1d7aec" translate="yes" xml:space="preserve">
          <source>Now it &lt;em&gt;is&lt;/em&gt; removed from the database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d061bef62245b1ff344a1120ecc9711baf3295" translate="yes" xml:space="preserve">
          <source>Now it is possible to create an instance of &lt;code&gt;Person&lt;/code&gt; and set attributes using &lt;code&gt;from_json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe05d7f983e2d38c65ce6aec823f42b31eef96f0" translate="yes" xml:space="preserve">
          <source>Now it's possible to access attributes from the database through the value objects instead. If you choose to name the composition the same as the attribute's name, it will be the only way to access that attribute. That's the case with our &lt;code&gt;balance&lt;/code&gt; attribute. You interact with the value objects just like you would with any other attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e723b1bc4f979da3f44583460af0278ed8ce41" translate="yes" xml:space="preserve">
          <source>Now it's time to explore your application. A good place to start is by asking the debugger for help. Type: &lt;code&gt;help&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d346dc9770f3e643ac5bd68ca3943f083eeb299b" translate="yes" xml:space="preserve">
          <source>Now let's open that file and write our first assertion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cae19a080fb992409b81b543049cc89e8ba18c3" translate="yes" xml:space="preserve">
          <source>Now let's set &lt;code&gt;distinct&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9c7c93bfb7eceac813cc301b7376f2f1f280a2" translate="yes" xml:space="preserve">
          <source>Now let's test the flow for creating a new article in our blog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fd0b45cc2d594e81d58237663c5baec9a5d5f1" translate="yes" xml:space="preserve">
          <source>Now our generator can be invoked as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6dc94f4dbd0d8d43c18c69be65ff332773fa5b" translate="yes" xml:space="preserve">
          <source>Now people will only need to go to the root of the engine to see all the articles, rather than visiting &lt;code&gt;/articles&lt;/code&gt;. This means that instead of &lt;code&gt;http://localhost:3000/blorgh/articles&lt;/code&gt;, you only need to go to &lt;code&gt;http://localhost:3000/blorgh&lt;/code&gt; now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c83a55a45b2f01ea698594c8b3e1ad5455f11bf" translate="yes" xml:space="preserve">
          <source>Now routes such as &lt;code&gt;/posts/1&lt;/code&gt; will no longer be valid, but &lt;code&gt;/posts/1.1&lt;/code&gt; will be. The &lt;code&gt;id&lt;/code&gt; parameter must match the constraint passed in for this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4dcaaa6423147b18b2f6af18138b7623923251" translate="yes" xml:space="preserve">
          <source>Now that the engine can create new articles, it only makes sense to add commenting functionality as well. To do this, you'll need to generate a comment model, a comment controller, and then modify the articles scaffold to display comments and allow people to create new ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11605a07ad419c26e10776711e573a3cc8abc17e" translate="yes" xml:space="preserve">
          <source>Now that we have a new database, let's set up the model. In order to use the new database we need to create a new abstract class and connect to the animals databases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732e32122270aef4b9252cc8512ef28b55fe61ee" translate="yes" xml:space="preserve">
          <source>Now that we have a user model to play with, we will just edit the &lt;code&gt;app/controllers/users_controller.rb&lt;/code&gt; make it instruct the &lt;code&gt;UserMailer&lt;/code&gt; to deliver an email to the newly created user by editing the create action and inserting a call to &lt;code&gt;UserMailer.with(user: @user).welcome_email&lt;/code&gt; right after the user is successfully saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08df1c22724db06d31f5eb1a44dd158696e53cf7" translate="yes" xml:space="preserve">
          <source>Now that we have articles and comments working, take a look at the &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; template. It is getting long and awkward. We can use partials to clean it up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a57569c29b3772ca2726e0da0891ffdcc0c35a" translate="yes" xml:space="preserve">
          <source>Now that we have made the controller and view, we need to tell Rails when we want &quot;Hello, Rails!&quot; to show up. In our case, we want it to show up when we navigate to the root URL of our site, http://localhost:3000. At the moment, &quot;Welcome aboard&quot; is occupying that spot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78bf8c3d9d311c23bfefc91cd38fcc387615966" translate="yes" xml:space="preserve">
          <source>Now that we have the &lt;code&gt;database.yml&lt;/code&gt; and the new model set up it's time to create the databases. Rails 6.0 ships with all the rails tasks you need to use multiple databases in Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3658b4e2bb9053598deec9119146b32737b682f1" translate="yes" xml:space="preserve">
          <source>Now that you have a module that modifies the input data, it's time to register it as a preprocessor for your mime type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3f00f9dc7d411f9b208e29217940a44d10cc9f" translate="yes" xml:space="preserve">
          <source>Now that you've seen how generators can be used &lt;em&gt;inside&lt;/em&gt; an application, did you know they can also be used to &lt;em&gt;generate&lt;/em&gt; applications too? This kind of generator is referred to as a &quot;template&quot;. This is a brief overview of the Templates API. For detailed documentation see the &lt;a href=&quot;rails_application_templates&quot;&gt;Rails Application Templates guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b78e5d03ac7a3268586ac2691c80bb6bf5d06b9" translate="yes" xml:space="preserve">
          <source>Now that you've seen how to create a controller, an action, and a view, let's create something with a bit more substance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42baaa9718f13d5c8222d8c8a7cd9c934c39cef" translate="yes" xml:space="preserve">
          <source>Now that you've seen your first Rails application, you should feel free to update it and experiment on your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebf0a06c02ac9ca1316bd4928cbe3c564c0f180" translate="yes" xml:space="preserve">
          <source>Now the behavior is clear, that we are only using the connection information in &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49ba3604f078f72baacf288b548a11038388574" translate="yes" xml:space="preserve">
          <source>Now the header can pick up on the &lt;code&gt;@page_title&lt;/code&gt; variable and use it for outputting a title tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e18d36f17b1d90839ac5dcdbcb33a0e9b504751" translate="yes" xml:space="preserve">
          <source>Now the test should pass. Let us verify by running the test again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778539dc21c575db8a2ca83a7cff62a7c06e5c4c" translate="yes" xml:space="preserve">
          <source>Now the user can request to get a PDF version of a client just by adding &quot;.pdf&quot; to the URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84530ec9df04e7cc3d58660fb582a3729c51d42" translate="yes" xml:space="preserve">
          <source>Now to get this test to pass we can add a model level validation for the &lt;em&gt;title&lt;/em&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188b483bccd4381f8ec9c5e1a3d636878fd9e47c" translate="yes" xml:space="preserve">
          <source>Now we can see the new description by invoking &lt;code&gt;--help&lt;/code&gt; on the new generator. The second way to add a description is by creating a file named &lt;code&gt;USAGE&lt;/code&gt; in the same directory as our generator. We are going to do that in the next step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddc1e5eddf99199ed2f4f24b64350725bf5572a" translate="yes" xml:space="preserve">
          <source>Now we're going to add a system test to our blog application. We'll demonstrate writing a system test by visiting the index page and creating a new blog article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1be2e7a39917788e5f531bf999ce9e2f7f2121" translate="yes" xml:space="preserve">
          <source>Now what if that number could vary, say as an argument from somewhere? The find would then take the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9be071256fdc4d57319b64f14682dd8cf34cb5" translate="yes" xml:space="preserve">
          <source>Now when a new request for the index action is processed, the layout will vary depending on whether the person accessing is logged in or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0ba2bf78d8878cf9ee6fce1e060d440d88a4de" translate="yes" xml:space="preserve">
          <source>Now when your application serves an asset in production, the CDN will store the asset for up to a year. Since most CDNs also cache headers of the request, this &lt;code&gt;Cache-Control&lt;/code&gt; will be passed along to all future browsers seeking this asset, the browser then knows that it can store this asset for a very long time before needing to re-request it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7397dca47478e57252a6d04e34f47f3cce91cb32" translate="yes" xml:space="preserve">
          <source>Now with all the pieces in place, an action will take place that will associate an author - represented by a record in the &lt;code&gt;users&lt;/code&gt; table - with an article, represented by the &lt;code&gt;blorgh_articles&lt;/code&gt; table from the engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4861027a7a7732f007bb28f69aa885ad4bd3bb6" translate="yes" xml:space="preserve">
          <source>Now you can access a serialized Hash of your object using the &lt;code&gt;serializable_hash&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd491ea2cb97bc75ae16420f9d81e845ecc38d4" translate="yes" xml:space="preserve">
          <source>Now you can add articles and comments to your blog and have them show up in the right places.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63f6b7032dcb040af6139789b42742fda3dbb90" translate="yes" xml:space="preserve">
          <source>Now you can create the necessary database tables in your testing database by navigating to your dummy app and migrating the database. First, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b509fba0e74de20ecdb10b71addfc8cad75a3af" translate="yes" xml:space="preserve">
          <source>Now you can display an image inside your email.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e04b515bb030c9b6a664234a0b6eaa9a8d60e0d" translate="yes" xml:space="preserve">
          <source>Now you can have different transliterations for each locale:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57d5608f4f021228ff74f81e7c98fcad5341756" translate="yes" xml:space="preserve">
          <source>Now you can listen to this event with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc952f88284ef46aa74b35dfcd65bb65ac57e4b3" translate="yes" xml:space="preserve">
          <source>Now you can mount your engine in application's routes just like that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cca2a620bb0efd6c8b31ea33601ec518093b64d" translate="yes" xml:space="preserve">
          <source>Now you can see even more output in the console from running the tests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef124558e731720d7cd6ee04cfa0fa14595c87e3" translate="yes" xml:space="preserve">
          <source>Now you can simply do:</source>
          <target state="translated">Теперь ты можешь просто сделать:</target>
        </trans-unit>
        <trans-unit id="97015d7f10515896d46f145fc9b204e09622e272" translate="yes" xml:space="preserve">
          <source>Now you can try running all the tests and they should pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f2c06b04c1d3ffade749660a4a8d51b3ca9356" translate="yes" xml:space="preserve">
          <source>Now you should know where you are in the running trace and be able to print the available variables. But let's continue and move on with the application execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87bb8627d78df2d32264c8cfee94fb35d59902db" translate="yes" xml:space="preserve">
          <source>Now you'll get a nice error message when saving an article without a title when you attempt to do just that on the new article form http://localhost:3000/articles/new:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c963ec9ca58ea98b17b6c7555bcaae882d53c98" translate="yes" xml:space="preserve">
          <source>Now, &lt;code&gt;Engine&lt;/code&gt; will get only requests that were not handled by &lt;code&gt;Application&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203cf7090ffd765e9f27dc2ab3d7d30952df1c61" translate="yes" xml:space="preserve">
          <source>Now, a &lt;code&gt;GET&lt;/code&gt; request to &lt;code&gt;/photos&lt;/code&gt; would succeed, but a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/photos&lt;/code&gt; (which would ordinarily be routed to the &lt;code&gt;create&lt;/code&gt; action) will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af62ed7bdece7af2a862042c75463d54724457e7" translate="yes" xml:space="preserve">
          <source>Now, add another link in &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;, underneath the form, to go back to the &lt;code&gt;index&lt;/code&gt; action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e12adc83e98da965b0202dae25d3e358044f67f" translate="yes" xml:space="preserve">
          <source>Now, create a new file &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; with the following content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab84c9773432db7232bd695fe13dcece6e69f43e" translate="yes" xml:space="preserve">
          <source>Now, if the current user is a special user, they'll get a special layout when viewing a product.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d155cc0c54a8c1103fe54c9484e37a19028bfcab" translate="yes" xml:space="preserve">
          <source>Now, if you POST to &lt;code&gt;/posts/:id&lt;/code&gt;, it will route to the &lt;code&gt;create_comment&lt;/code&gt; action. A GET on the same URL will route to the &lt;code&gt;show&lt;/code&gt; action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd01ddc663c761677d7838ff6ebae0d36785cd0e" translate="yes" xml:space="preserve">
          <source>Now, if you create a Comment scaffold, you will see that the shoulda generators are being invoked, and at the end, they are just falling back to TestUnit generators:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e2d05fe59b341a812b4b192d936fbdab98a334" translate="yes" xml:space="preserve">
          <source>Now, if you noticed, we first wrote a test which fails for a desired functionality, then we wrote some code which adds the functionality and finally we ensured that our test passes. This approach to software development is referred to as &lt;a href=&quot;http://c2.com/cgi/wiki?TestDrivenDevelopment&quot;&gt;&lt;em&gt;Test-Driven Development&lt;/em&gt; (TDD)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b8380c7a32dfa3423cdfea7f660ff2643ddae5" translate="yes" xml:space="preserve">
          <source>Now, let's update the &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; view to use this new partial, rewriting it completely:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217df5a8b404551ff72f541302f83740782a2f6c" translate="yes" xml:space="preserve">
          <source>Now, suppose we wanted to add a new book for an existing author. We'd need to do something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c9105ae03fd512b3df4b1b95b94556311d85ad" translate="yes" xml:space="preserve">
          <source>Now, the &lt;code&gt;LoginsController&lt;/code&gt;'s &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; actions will work as before without requiring the user to be logged in. The &lt;code&gt;:only&lt;/code&gt; option is used to skip this filter only for these actions, and there is also an &lt;code&gt;:except&lt;/code&gt; option which works the other way. These options can be used when adding filters too, so you can add a filter which only runs for selected actions in the first place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dbcfc0b858782509a12208646a29cda7e06af98" translate="yes" xml:space="preserve">
          <source>Now, when &lt;code&gt;Topic#destroy&lt;/code&gt; is run only &lt;code&gt;destroy_author&lt;/code&gt; is called. When &lt;code&gt;Reply#destroy&lt;/code&gt; is run, both &lt;code&gt;destroy_author&lt;/code&gt; and &lt;code&gt;destroy_readers&lt;/code&gt; are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f281387742abe67e917f18111764c49c4a38a8" translate="yes" xml:space="preserve">
          <source>Now, when the helper generator is invoked and TestUnit is configured as the test framework, it will try to invoke both &lt;code&gt;Rails::TestUnitGenerator&lt;/code&gt; and &lt;code&gt;TestUnit::MyHelperGenerator&lt;/code&gt;. Since none of those are defined, we can tell our generator to invoke &lt;code&gt;TestUnit::Generators::HelperGenerator&lt;/code&gt; instead, which is defined since it's a Rails generator. To do that, we just need to add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738f4ee5f2fdec6e2acb7a14ba46229776b15fe5" translate="yes" xml:space="preserve">
          <source>Now, when this view is rendered, it will show an error message which tells you that the translations for the keys &lt;code&gt;:hello_world&lt;/code&gt; and &lt;code&gt;:hello_flash&lt;/code&gt; are missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d961b6eae818de7e713f0e8ff2517e62b85cc0f1" translate="yes" xml:space="preserve">
          <source>Now, when you add the &lt;code&gt;_destroy&lt;/code&gt; key to the attributes hash, with a value that evaluates to &lt;code&gt;true&lt;/code&gt;, you will destroy the associated model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e48bab7662e8b7cbf063bf165fef96ea50592a7" translate="yes" xml:space="preserve">
          <source>Now, when you call the &lt;code&gt;books_path&lt;/code&gt; method you should get &lt;code&gt;&quot;/en/books&quot;&lt;/code&gt; (for the default locale). A URL like &lt;code&gt;http://localhost:3001/nl/books&lt;/code&gt; should load the Dutch locale, then, and following calls to &lt;code&gt;books_path&lt;/code&gt; should return &lt;code&gt;&quot;/nl/books&quot;&lt;/code&gt; (because the locale changed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce4fc5d00e68ba3c104ef525a4771ac4977bf97" translate="yes" xml:space="preserve">
          <source>Now, when you use a form element with the &lt;code&gt;_destroy&lt;/code&gt; parameter, with a value that evaluates to &lt;code&gt;true&lt;/code&gt;, you will destroy the associated model (eg. 1, '1', true, or 'true'):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c809e2c5ebb44a808f82d543f4edd794de0e3536" translate="yes" xml:space="preserve">
          <source>Now, you can use the &lt;code&gt;my_engine&lt;/code&gt; helper inside your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4766e0bf16611e8438a6d53eae97d9cadc5e5fec" translate="yes" xml:space="preserve">
          <source>Null Relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfcf0cddffdd3930b31edb810e7c1a87b793877" translate="yes" xml:space="preserve">
          <source>NullContentTypeHeader</source>
          <target state="translated">NullContentTypeHeader</target>
        </trans-unit>
        <trans-unit id="350e7d8f18b3ca80dc7b075c15a357bcc83872b7" translate="yes" xml:space="preserve">
          <source>Number of partials fetched from cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba15084808a7129a67b592d7bb6d70a61b0c406" translate="yes" xml:space="preserve">
          <source>Number of records that instantiated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098c6454bdf4bbfd58663e390aac0c78846ac19f" translate="yes" xml:space="preserve">
          <source>Number of times this job has been executed (which increments on every retry, like after an exception).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4142ed71d8bb3054e10546418ff4a5622d023e" translate="yes" xml:space="preserve">
          <source>NumberHelper</source>
          <target state="translated">NumberHelper</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
