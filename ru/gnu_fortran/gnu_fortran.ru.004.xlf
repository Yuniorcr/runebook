<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="gnu_fortran">
    <body>
      <group id="gnu_fortran">
        <trans-unit id="c72eafe79816a171589425f21b5ee3853eab2154" translate="yes" xml:space="preserve">
          <source>However, there is no implicit conversion of &lt;code&gt;INTEGER&lt;/code&gt; values in &lt;code&gt;if&lt;/code&gt;-statements, nor of &lt;code&gt;LOGICAL&lt;/code&gt; or &lt;code&gt;INTEGER&lt;/code&gt; values in I/O operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f5c57e154aae15fe5d06283f6d7bb16f6892c8" translate="yes" xml:space="preserve">
          <source>Hyperbolic cosine function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b1f0af57ea1a2b7459e48acc5e76d5fda0a5b7" translate="yes" xml:space="preserve">
          <source>Hyperbolic sine function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284573e0d60520a3cdd6241a351ab32ed82ca6a5" translate="yes" xml:space="preserve">
          <source>Hyperbolic tangent function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="a2030ea2f432870a6132f1db7f1762dbb30a620f" translate="yes" xml:space="preserve">
          <source>ID of device containing directory entry for file (0 if not available)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a193bdaa6021d5364bbe2609be9d2faf185ec606" translate="yes" xml:space="preserve">
          <source>IEEE exceptions. Possible values are (bitwise or-ed) zero (0, default) no trapping, &lt;code&gt;GFC_FPE_INVALID&lt;/code&gt; (1), &lt;code&gt;GFC_FPE_DENORMAL&lt;/code&gt; (2), &lt;code&gt;GFC_FPE_ZERO&lt;/code&gt; (4), &lt;code&gt;GFC_FPE_OVERFLOW&lt;/code&gt; (8), &lt;code&gt;GFC_FPE_UNDERFLOW&lt;/code&gt; (16), and &lt;code&gt;GFC_FPE_INEXACT&lt;/code&gt; (32).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3241fd2a39f2c176f1e2098caf0ac274f20caf" translate="yes" xml:space="preserve">
          <source>IERRNO</source>
          <target state="translated">IERRNO</target>
        </trans-unit>
        <trans-unit id="06cea26e613b201cc0303bb153dcffe700cd5f7e" translate="yes" xml:space="preserve">
          <source>INTENT(INOUT) argument; shall have the same dynamic type and type paramters on all images of the current team. If it is an array, it shall have the same shape on all images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6e8ebe1a8995dc4c80d5c7b59b8df676aef3bc" translate="yes" xml:space="preserve">
          <source>ISATTY</source>
          <target state="translated">ISATTY</target>
        </trans-unit>
        <trans-unit id="730d9d2639ecb89963ba051da9b2e1feb646f3fb" translate="yes" xml:space="preserve">
          <source>ISHFT</source>
          <target state="translated">ISHFT</target>
        </trans-unit>
        <trans-unit id="71062a16ecbc32ab65547342e30aafe98166156f" translate="yes" xml:space="preserve">
          <source>ISHFTC</source>
          <target state="translated">ISHFTC</target>
        </trans-unit>
        <trans-unit id="d3598064a005c9665604827e0d1142d0f24d392d" translate="yes" xml:space="preserve">
          <source>Identifies the preconnected unit identified by the asterisk (&lt;code&gt;*&lt;/code&gt;) in &lt;code&gt;READ&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4138de01e70695c4f83698de37bcbd957777c6" translate="yes" xml:space="preserve">
          <source>Identifies the preconnected unit identified by the asterisk (&lt;code&gt;*&lt;/code&gt;) in &lt;code&gt;WRITE&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c71d01f0c008cc0d18c6edf795ed3cc6a5e8872" translate="yes" xml:space="preserve">
          <source>Identifies the preconnected unit used for error reporting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="3a61b4fd5650c4daa3b2a9265605dd6cff085d06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;RANDOM_SEED&lt;/code&gt; is called without arguments, it is seeded with random data retrieved from the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a430df188f74594bd44ce59b28c82e6a1b08080c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SIGNAL&lt;/code&gt; is called as a subroutine and the &lt;var&gt;STATUS&lt;/var&gt; argument is supplied, it is set to the value returned by &lt;code&gt;signal(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1078750f850f24ef8ed59ba94f88ccd29ffa6bf1" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;P&lt;/var&gt; are of type &lt;code&gt;INTEGER&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f324aec4bb7bb53a08d884c16168791f5b3a1cef" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;P&lt;/var&gt; are of type &lt;code&gt;REAL&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="787d8dcb6987a2e7fed3ee4bcb5357088e968c9e" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;A&lt;/var&gt; is of type &lt;code&gt;COMPLEX&lt;/code&gt;, rule B is applied to the real part of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3568afbbf365fa99784c80b14432f5784b0d87c6" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;A&lt;/var&gt; is of type &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;INT(A) = A&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a4b03f219d2078d67148162446be881477149d" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;A&lt;/var&gt; is of type &lt;code&gt;REAL&lt;/code&gt; and &lt;em&gt;|A| &amp;lt; 1&lt;/em&gt;, &lt;code&gt;INT(A)&lt;/code&gt; equals &lt;code&gt;0&lt;/code&gt;. If &lt;em&gt;|A| \geq 1&lt;/em&gt;, then &lt;code&gt;INT(A)&lt;/code&gt; is the integer whose magnitude is the largest integer that does not exceed the magnitude of &lt;var&gt;A&lt;/var&gt; and whose sign is the same as the sign of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c227901640d5c82c0a60dbb8d477897529947ef0" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;BACK&lt;/var&gt; is either absent or equals &lt;code&gt;FALSE&lt;/code&gt;, this function returns the position of the leftmost character of &lt;var&gt;STRING&lt;/var&gt; that is in &lt;var&gt;SET&lt;/var&gt;. If &lt;var&gt;BACK&lt;/var&gt; equals &lt;code&gt;TRUE&lt;/code&gt;, the rightmost position is returned. If no character of &lt;var&gt;SET&lt;/var&gt; is found in &lt;var&gt;STRING&lt;/var&gt;, the result is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8289dac32f7049050111a508aa6d31f905b1e" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;BACK&lt;/var&gt; is either absent or equals &lt;code&gt;FALSE&lt;/code&gt;, this function returns the position of the leftmost character of &lt;var&gt;STRING&lt;/var&gt; that is not in &lt;var&gt;SET&lt;/var&gt;. If &lt;var&gt;BACK&lt;/var&gt; equals &lt;code&gt;TRUE&lt;/code&gt;, the rightmost position is returned. If all characters of &lt;var&gt;STRING&lt;/var&gt; are found in &lt;var&gt;SET&lt;/var&gt;, the result is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7df80a1bc0f609e77a72dba0be99d71554ebf20" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;COMMAND&lt;/var&gt; is present, stores the entire command line that was used to invoke the program in &lt;var&gt;COMMAND&lt;/var&gt;. If &lt;var&gt;LENGTH&lt;/var&gt; is present, it is assigned the length of the command line. If &lt;var&gt;STATUS&lt;/var&gt; is present, it is assigned 0 upon success of the command, -1 if &lt;var&gt;COMMAND&lt;/var&gt; is too short to store the command line, or a positive value in case of an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13adf8626c0c7a13cecf0100df54a2e72db93886" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the bitwise ALL of all elements in &lt;var&gt;ARRAY&lt;/var&gt; is returned. Otherwise, an array of rank n-1, where n equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;ARRAY&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4ceea29a6e978fd206476ab9b58f140c1867eb" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the bitwise OR of all elements in &lt;var&gt;ARRAY&lt;/var&gt; is returned. Otherwise, an array of rank n-1, where n equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;ARRAY&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ef142fb26214ffd98b0771af12aba00d6884e7" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the bitwise XOR of all elements in &lt;var&gt;ARRAY&lt;/var&gt; is returned. Otherwise, an array of rank n-1, where n equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;ARRAY&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d101583ce24a5514b74d8e390a29aa99cdc4c16" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the parity of all elements in &lt;var&gt;MASK&lt;/var&gt; is returned, i.e. true if an odd number of elements is &lt;code&gt;.true.&lt;/code&gt; and false otherwise. If &lt;var&gt;DIM&lt;/var&gt; is present, an array of rank &lt;em&gt;n-1&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;MASK&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1096dc661ae1572b58d2c6af2b9071f2c5fafaa4" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the product of all elements in &lt;var&gt;ARRAY&lt;/var&gt; is returned. Otherwise, an array of rank n-1, where n equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;ARRAY&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e541aaa7572f36229ceef42a43c656acea1e8bb9" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the square root of the sum of all elements in &lt;var&gt;ARRAY&lt;/var&gt; squared is returned. Otherwise, an array of rank &lt;em&gt;n-1&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;ARRAY&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085958485125e81c5e61847bf66d0aee92f3dce0" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, a scalar with the sum of all elements in &lt;var&gt;ARRAY&lt;/var&gt; is returned. Otherwise, an array of rank n-1, where n equals the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a shape similar to that of &lt;var&gt;ARRAY&lt;/var&gt; with dimension &lt;var&gt;DIM&lt;/var&gt; dropped is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a36d3e115cd67f113c82de10704b209833020f" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, or if &lt;var&gt;ARRAY&lt;/var&gt; has a rank of one, the result is a scalar. If &lt;var&gt;DIM&lt;/var&gt; is present, the result is an array with a rank one less than the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a size corresponding to the size of &lt;var&gt;ARRAY&lt;/var&gt; with the &lt;var&gt;DIM&lt;/var&gt; dimension removed. In all cases, the result is of the same type and kind as &lt;var&gt;ARRAY&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f1740ce67b0a136c527b69e40e614512c47fef" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;DIM&lt;/var&gt; is absent, the result is a rank-one array with a length equal to the rank of &lt;var&gt;ARRAY&lt;/var&gt;. If &lt;var&gt;DIM&lt;/var&gt; is present, the result is an array with a rank one less than the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a size corresponding to the size of &lt;var&gt;ARRAY&lt;/var&gt; with the &lt;var&gt;DIM&lt;/var&gt; dimension removed. If &lt;var&gt;DIM&lt;/var&gt; is present and &lt;var&gt;ARRAY&lt;/var&gt; has a rank of one, the result is a scalar. In all cases, the result is of default &lt;code&gt;INTEGER&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a18fb7791cac7ccb5df0808e21080f7e3df672" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;MOLD&lt;/var&gt; is present, a disassociated pointer of the same type is returned, otherwise the type is determined by context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4805ac2e7679668b17c230a50e5dfc8210b2a520" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;X&lt;/var&gt; and &lt;var&gt;Y&lt;/var&gt; are both of &lt;code&gt;INTEGER&lt;/code&gt; type, then the return value is of default &lt;code&gt;COMPLEX&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea9f1af128bb03f13953367ac18efbca3384c44" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;X&lt;/var&gt; and &lt;var&gt;Y&lt;/var&gt; are of &lt;code&gt;REAL&lt;/code&gt; type, or one is of &lt;code&gt;REAL&lt;/code&gt; type and one is of &lt;code&gt;INTEGER&lt;/code&gt; type, then the return value is of &lt;code&gt;COMPLEX&lt;/code&gt; type with a kind equal to that of the &lt;code&gt;REAL&lt;/code&gt; argument with the highest precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed01b8059b7d2ec0ef0fe711efed30b152aff6d3" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;result_image&lt;/var&gt; is nonzero, the data in the array descriptor &lt;var&gt;a&lt;/var&gt; on all images except of the specified one become undefined; hence, the library may make use of this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec421619945b96ecfab309ee14aa30ba12913726" translate="yes" xml:space="preserve">
          <source>If GNU Fortran invokes the preprocessor, &lt;code&gt;__GFORTRAN__&lt;/code&gt; is defined and &lt;code&gt;__GNUC__&lt;/code&gt;, &lt;code&gt;__GNUC_MINOR__&lt;/code&gt; and &lt;code&gt;__GNUC_PATCHLEVEL__&lt;/code&gt; can be used to determine the version of the compiler. See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/index.html#Top&quot;&gt;Overview&lt;/a&gt; in The C Preprocessor for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa49cf1f64e48996c1d0a0273207fed8e566fab" translate="yes" xml:space="preserve">
          <source>If a pointer is a dummy-argument of an interoperable procedure, it usually has to be declared using the &lt;code&gt;VALUE&lt;/code&gt; attribute. &lt;code&gt;void*&lt;/code&gt; matches &lt;code&gt;TYPE(C_PTR), VALUE&lt;/code&gt;, while &lt;code&gt;TYPE(C_PTR)&lt;/code&gt; alone matches &lt;code&gt;void**&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270a49439209ea4b63b930a85c8327c687f86bee" translate="yes" xml:space="preserve">
          <source>If a pointer is declared with a kind that is too small, the compiler will issue a warning; the resulting binary will probably not work correctly, because the memory addresses stored in the pointers may be truncated. It is safer to omit the first line of the above example; if explicit declaration of ipt&amp;rsquo;s type is omitted, then the compiler will ensure that ipt is an integer variable large enough to hold a pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6205b51ec116d6f29ddbd7526e78389a57a9fe3f" translate="yes" xml:space="preserve">
          <source>If a preprocessed file includes another file with the Fortran &lt;code&gt;INCLUDE&lt;/code&gt; statement, the included file is not preprocessed. To preprocess included files, use the equivalent preprocessor statement &lt;code&gt;#include&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c793038d857dfcf448d3d50ee18a082670440f84" translate="yes" xml:space="preserve">
          <source>If a symbolic link was connected, using the &lt;code&gt;CLOSE&lt;/code&gt; statement with a &lt;code&gt;STATUS=&quot;DELETE&quot;&lt;/code&gt; specifier will cause the symbolic link itself to be deleted, not its target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ba08c3e137747457bc54e1306f43a80741fb66" translate="yes" xml:space="preserve">
          <source>If a time source is available, time will be reported with microsecond resolution. If no time source is available, &lt;var&gt;TIME&lt;/var&gt; is set to &lt;code&gt;-1.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ee220669dde56b667d0f418ae2f46bd9f4b8b8" translate="yes" xml:space="preserve">
          <source>If either &lt;var&gt;I&lt;/var&gt; or &lt;var&gt;J&lt;/var&gt; is a BOZ constant, it is first converted as if by the intrinsic function &lt;code&gt;INT&lt;/code&gt; to an integer type with the kind type parameter of the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a5117e34644f5490394288d1874142b1127534" translate="yes" xml:space="preserve">
          <source>If non zero, enable backtracing on run-time errors. Default: off. (Default in the compiler: on.) Note: Installs a signal handler and requires command-line initialization using &lt;code&gt;_gfortran_set_args&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2945b1104d38ee16308682eb39eb3ad0261b75c3" translate="yes" xml:space="preserve">
          <source>If non zero, enable pedantic checking. Default: off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7de549d64b0928d2f0858914503089586d959e" translate="yes" xml:space="preserve">
          <source>If non zero, supports signed zeros. Default: enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83981aa8f04d54ca9a7287dcf1ccff28136904a" translate="yes" xml:space="preserve">
          <source>If that fails, generate an error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fba7a91976192b8b2868a06f508fa60d8679649" translate="yes" xml:space="preserve">
          <source>If that fails, try to open with &lt;code&gt;ACTION='READ'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2800c2a21007bee3dec3060323c68f5f6fb06466" translate="yes" xml:space="preserve">
          <source>If that fails, try to open with &lt;code&gt;ACTION='WRITE'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b48081916ed179b6e4ad6819d5cce35a6e4a467" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;GFORTRAN_ERROR_BACKTRACE&lt;/code&gt; variable is set to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3136adbb3394d43aa3bb33236016421d44a4d0d" translate="yes" xml:space="preserve">
          <source>If the Fortran intrinsic &lt;code&gt;this_image&lt;/code&gt; is invoked without an argument, which is the only permitted form in Fortran 2008, GCC passes &lt;code&gt;0&lt;/code&gt; as first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95ebf758f9ca85c34e73f3d6fad26c666242086" translate="yes" xml:space="preserve">
          <source>If the arguments are numeric, the return value is a scalar of numeric type, &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, or &lt;code&gt;COMPLEX&lt;/code&gt;. If the arguments are &lt;code&gt;LOGICAL&lt;/code&gt;, the return value is &lt;code&gt;.TRUE.&lt;/code&gt; or &lt;code&gt;.FALSE.&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f054ca8be9a9d0c72b5ae2769d8b45202fa48433" translate="yes" xml:space="preserve">
          <source>If the bitwise representation of the result is longer than that of &lt;var&gt;SOURCE&lt;/var&gt;, then the leading bits of the result correspond to those of &lt;var&gt;SOURCE&lt;/var&gt; and any trailing bits are filled arbitrarily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120422193be3b2c04c10d49efe55d47b3f1c3932" translate="yes" xml:space="preserve">
          <source>If the first letter is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72db38f13efda499fee4edb330453697f0c69f6" translate="yes" xml:space="preserve">
          <source>If the rank of &lt;var&gt;MASK&lt;/var&gt; is one, then &lt;code&gt;ALL(MASK,DIM)&lt;/code&gt; is equivalent to &lt;code&gt;ALL(MASK)&lt;/code&gt;. If the rank is greater than one, then &lt;code&gt;ALL(MASK,DIM)&lt;/code&gt; is determined by applying &lt;code&gt;ALL&lt;/code&gt; to the array sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edabf5693136a93d948b4ff56cf046859238c8b6" translate="yes" xml:space="preserve">
          <source>If the rank of &lt;var&gt;MASK&lt;/var&gt; is one, then &lt;code&gt;ANY(MASK,DIM)&lt;/code&gt; is equivalent to &lt;code&gt;ANY(MASK)&lt;/code&gt;. If the rank is greater than one, then &lt;code&gt;ANY(MASK,DIM)&lt;/code&gt; is determined by applying &lt;code&gt;ANY&lt;/code&gt; to the array sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d64d94a276b7efd6a450976fd76d81f4734d91" translate="yes" xml:space="preserve">
          <source>If there is no clock, or querying the clock fails, &lt;var&gt;COUNT&lt;/var&gt; is set to &lt;code&gt;-HUGE(COUNT)&lt;/code&gt;, and &lt;var&gt;COUNT_RATE&lt;/var&gt; and &lt;var&gt;COUNT_MAX&lt;/var&gt; are set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aee4afea693faf480212e1e7dfd95c798d52751" translate="yes" xml:space="preserve">
          <source>If you are invoking the preprocessor from a shell or shell-like program you may need to use the shell&amp;rsquo;s quoting syntax to protect characters such as spaces that have a meaning in the shell syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd8030eb2edd0056e23821b85e42b891e989a80" translate="yes" xml:space="preserve">
          <source>If you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any). Parentheses are meaningful to most shells, so you will need to quote the option. With sh and csh, &lt;code&gt;-D'name(args...)=definition'&lt;/code&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ca06c25e3b103a5def6afd489b6cd7d559af0e" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;PROGRAM&lt;/code&gt; is compiled with GNU Fortran, you shall not call any of the following functions. The libgfortran initialization functions are shown in C syntax but using C bindings they are also accessible from Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7811944597dfb197f92017300fe575c1e6d8fa" translate="yes" xml:space="preserve">
          <source>Imaginary part of complex number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40989c1b3476144c255ec4259eba3ce2da510bc" translate="yes" xml:space="preserve">
          <source>In Fortran 95, &lt;var&gt;MOLD&lt;/var&gt; is optional. Please note that Fortran 2003 includes cases where it is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ccc0ad4a795443852d0414bea4f450fb98e45b" translate="yes" xml:space="preserve">
          <source>In addition to the integer named constants required by the Fortran 2003 standard and &lt;code&gt;C_PTRDIFF_T&lt;/code&gt; of TS 29113, GNU Fortran provides as an extension named constants for the 128-bit integer types supported by the C compiler: &lt;code&gt;C_INT128_T, C_INT_LEAST128_T, C_INT_FAST128_T&lt;/code&gt;. Furthermore, if &lt;code&gt;__float128&lt;/code&gt; is supported in C, the named constants &lt;code&gt;C_FLOAT128, C_FLOAT128_COMPLEX&lt;/code&gt; are defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf9ec6ed309890d53d99fc78359f555c5651364" translate="yes" xml:space="preserve">
          <source>In addition to the side-effects of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c83bd1a6109e6237ea72a8009a77256465b5c9" translate="yes" xml:space="preserve">
          <source>In either syntax, &lt;var&gt;NAME&lt;/var&gt; is set to the current hostname if it can be obtained, or to a blank string otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3f7f2c6a27fb95424a533185943a79976b344b" translate="yes" xml:space="preserve">
          <source>In either syntax, &lt;var&gt;OFFSET&lt;/var&gt; is set to the current offset of unit number &lt;var&gt;UNIT&lt;/var&gt;, or to &lt;em&gt;-1&lt;/em&gt; if the unit is not currently open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fecffd6b5f755444307eb28961141e31a1c766b" translate="yes" xml:space="preserve">
          <source>In either syntax, &lt;var&gt;STATUS&lt;/var&gt; is set to &lt;code&gt;0&lt;/code&gt; on success and nonzero otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ad9b22c36e0a0cc1ddbb6f42678f53e869cab4" translate="yes" xml:space="preserve">
          <source>In either syntax, &lt;var&gt;TIME&lt;/var&gt; is set to the process&amp;rsquo;s current runtime in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6aed1d78f88e9d18636b5643ba18fedb3a8d16" translate="yes" xml:space="preserve">
          <source>In future versions of GNU Fortran we hope to improve naming and linking issues so that debugging always involves using the names as they appear in the source, even if the names as seen by the linker are mangled to prevent accidental linking between procedures with incompatible interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682aa0385ff59c7e7f0df2e399b34d89bb84d37e" translate="yes" xml:space="preserve">
          <source>In general only one process may hold an exclusive (write) lock for a given file at a time, whereas many processes may hold shared (read) locks for the same file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11733b5bf581b466263165d87641395f955cea01" translate="yes" xml:space="preserve">
          <source>In general, Hollerith constants were used to provide a rudimentary facility for handling character strings in early Fortran compilers, prior to the introduction of &lt;code&gt;CHARACTER&lt;/code&gt; variables in Fortran 77; in those cases, the standard-compliant equivalent is to convert the program to use proper character strings. On occasion, there may be a case where the intent is specifically to initialize a numeric variable with a given byte sequence. In these cases, the same result can be obtained by using the &lt;code&gt;TRANSFER&lt;/code&gt; statement, as in this example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3005d2a5b0048e9a66797ab9dd31951081c4bfcb" translate="yes" xml:space="preserve">
          <source>In general, the lexical comparison intrinsics &lt;code&gt;LGE&lt;/code&gt;, &lt;code&gt;LGT&lt;/code&gt;, &lt;code&gt;LLE&lt;/code&gt;, and &lt;code&gt;LLT&lt;/code&gt; differ from the corresponding intrinsic operators &lt;code&gt;.GE.&lt;/code&gt;, &lt;code&gt;.GT.&lt;/code&gt;, &lt;code&gt;.LE.&lt;/code&gt;, and &lt;code&gt;.LT.&lt;/code&gt;, in that the latter use the processor&amp;rsquo;s character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dab67ef81fbc2cf5b532bcced05c8d632840eeb" translate="yes" xml:space="preserve">
          <source>In many cases, record structures can easily be converted to derived types. To convert, replace &lt;code&gt;STRUCTURE /&lt;/code&gt;&lt;var&gt;structure-name&lt;/var&gt;&lt;code&gt;/&lt;/code&gt; by &lt;code&gt;TYPE&lt;/code&gt;&lt;var&gt;type-name&lt;/var&gt;. Additionally, replace &lt;code&gt;RECORD /&lt;/code&gt;&lt;var&gt;structure-name&lt;/var&gt;&lt;code&gt;/&lt;/code&gt; by &lt;code&gt;TYPE(&lt;/code&gt;&lt;var&gt;type-name&lt;/var&gt;&lt;code&gt;)&lt;/code&gt;. Finally, in the component access, replace the period (&lt;code&gt;.&lt;/code&gt;) by the percent sign (&lt;code&gt;%&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0648491e382f18999a2f067315445f7ebaa0939e" translate="yes" xml:space="preserve">
          <source>In order to ensure that exactly the same variable type and kind is used in C and Fortran, the named constants shall be used which are defined in the &lt;code&gt;ISO_C_BINDING&lt;/code&gt; intrinsic module. That module contains named constants for kind parameters and character named constants for the escape sequences in C. For a list of the constants, see &lt;a href=&quot;iso_005fc_005fbinding#ISO_005fC_005fBINDING&quot;&gt;ISO_C_BINDING&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dded5a37175f7ffa40d2521119b83926ef80ecd" translate="yes" xml:space="preserve">
          <source>In pointer assignments, the lower bound may be specified and the remapping of elements is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9554f88847fea6ab90bea5802c11697f7a3ee0" translate="yes" xml:space="preserve">
          <source>In some cases, options have positive and negative forms; the negative form of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5149b1ed084672c9ec0ec3353aaacbfdf41bfffe" translate="yes" xml:space="preserve">
          <source>In some circumstances GNU Fortran may pass assumed shape array sections via a descriptor describing a noncontiguous area of memory. This option adds code to the function prologue to repack the data into a contiguous block at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8eb6455f16b20593f90d24237c6bdb4520e28e5" translate="yes" xml:space="preserve">
          <source>In structure constructors the components with default values may be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537abfab462914e4757b57a352ae0dc7b793564b" translate="yes" xml:space="preserve">
          <source>In this example, compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cb31bca62cff4f95743e6b79af3ba46e72cb14" translate="yes" xml:space="preserve">
          <source>Increment the event count of the specified event variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855a2a17b0fbf5528e545bca722f90e661449c08" translate="yes" xml:space="preserve">
          <source>Index of command line options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03606ae3e04c28dd8c3c995889f8b3280710d0b" translate="yes" xml:space="preserve">
          <source>Index of concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7d43666bf3b2650dba2a9f64e77713b2ac49b8" translate="yes" xml:space="preserve">
          <source>Index of the last non-blank character in a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258d5665915eb737b3ffa288907ee3cb5379cc4b" translate="yes" xml:space="preserve">
          <source>Indicates which kind of coarray variable should be registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c983db075023d5087854377ceb7219b72a057430" translate="yes" xml:space="preserve">
          <source>Influencing runtime behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bf912f9b96901bc25e2e28741483df5743f6b9" translate="yes" xml:space="preserve">
          <source>Influencing runtime behavior with environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59028ca14e0c6d288c6a052d5a2dc42f08c39212" translate="yes" xml:space="preserve">
          <source>Influencing runtime behavior with environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089379f644d0a2e54c077a56eb6a1c0b62673e19" translate="yes" xml:space="preserve">
          <source>Influencing the linking step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080f1e9a6e2cab41869cd5a7281f008e51e71667" translate="yes" xml:space="preserve">
          <source>Inhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc5e3d617d6c17c77a1d953cf2728b24751cbd6" translate="yes" xml:space="preserve">
          <source>Initialiation function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0396835aa69623283cf8c4d5a3fce0a28e42a9" translate="yes" xml:space="preserve">
          <source>Initialize a pseudo-random number sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18969234f3dbfdf448abc9f07e07414d5833db11" translate="yes" xml:space="preserve">
          <source>Inode number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5fc3d18458465ac674c7631652c1c7d2ce08bb" translate="yes" xml:space="preserve">
          <source>Inquiry function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d6c75cbc521feb99c6a7347bc090e5a414d216e" translate="yes" xml:space="preserve">
          <source>Inquiry function of the module &lt;code&gt;ISO_C_BINDING&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa1284a63ab352b7adb7730845c2d60f9ec8c81" translate="yes" xml:space="preserve">
          <source>Inquiry function of the module &lt;code&gt;ISO_FORTRAN_ENV&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d347b78eae1040e6c2e3af8a81eff39ce7c4ba4" translate="yes" xml:space="preserve">
          <source>Inquiry function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b467d38e8e8ec401f7e3d3e5fbc380b0606c24eb" translate="yes" xml:space="preserve">
          <source>Instead of the normal output, generate a list of &lt;code&gt;'#define'&lt;/code&gt; directives for all the macros defined during the execution of the preprocessor, including predefined macros. This gives you a way of finding out what is predefined in your version of the preprocessor. Assuming you have no file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82abf44d41a7eb36ed7fbb8dd6051e4b232d0eb7" translate="yes" xml:space="preserve">
          <source>Integer ceiling function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17da705ac770a7ed5b64c10fff1ce30eba371e2" translate="yes" xml:space="preserve">
          <source>Integer floor function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d153183c2b102358ab42c8a9266295b87571d808" translate="yes" xml:space="preserve">
          <source>Integer pseudo-random number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c91780a0ad422c17848a20d98b100fbb0ba6a9" translate="yes" xml:space="preserve">
          <source>Integer-to-character conversion function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8022007834e4b9e711afb0aecb5beea8de278c" translate="yes" xml:space="preserve">
          <source>Internal procedures can now be used as actual argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea695c02686d0654f7cf052be369e507ef605b5" translate="yes" xml:space="preserve">
          <source>Interoperability with C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8dda04ec6d3b26ee2e7f2458ba686c9738c79c" translate="yes" xml:space="preserve">
          <source>Interoperability with C including enumerations,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86829ad3d6d997f70f78d27780f0cf075410b820" translate="yes" xml:space="preserve">
          <source>Interoperable function or pointer to such function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4c368f3ed824dc8164a38717d5d52e7a148e37" translate="yes" xml:space="preserve">
          <source>Interprets the bitwise representation of &lt;var&gt;SOURCE&lt;/var&gt; in memory as if it is the representation of a variable or array of the same type and type parameters as &lt;var&gt;MOLD&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d5cd3afd8a1e5afe724389ed7a6dda1460110d" translate="yes" xml:space="preserve">
          <source>Intrinsic</source>
          <target state="translated">Intrinsic</target>
        </trans-unit>
        <trans-unit id="8574ef4dc29cda605f841d54e91231d3f51f9e9c" translate="yes" xml:space="preserve">
          <source>Intrinsic modules supported by GNU Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f172962919e8c11cac8a85f1f0fcd4bc5ff75f2" translate="yes" xml:space="preserve">
          <source>Intrinsic procedures supported by GNU Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71fce086c51628d5bd9a450c387660bb0aee5a07" translate="yes" xml:space="preserve">
          <source>Intrinsics &lt;code&gt;command_argument_count&lt;/code&gt;, &lt;code&gt;get_command&lt;/code&gt;, &lt;code&gt;get_command_argument&lt;/code&gt;, and &lt;code&gt;get_environment_variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="4522e015c0c2c2c66147149e813c48fa6b586dac" translate="yes" xml:space="preserve">
          <source>Invalid Hollerith constants examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab4428e1147454e5ebc285c9ebe19024c2f601f" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;acos#ACOS&quot;&gt;ACOS&lt;/a&gt; Degrees function: &lt;a href=&quot;cosd#COSD&quot;&gt;COSD&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e659da28d62524d8cdf014483f4fb841770c2677" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;acosd#ACOSD&quot;&gt;ACOSD&lt;/a&gt; Radians function: &lt;a href=&quot;cos#COS&quot;&gt;COS&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c730845af0c1b961ed0df82ddeab279271940a7" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;acosh#ACOSH&quot;&gt;ACOSH&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab30c1127417d76ec70db58d1d5b0b475c1c0467" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;asin#ASIN&quot;&gt;ASIN&lt;/a&gt; Degrees function: &lt;a href=&quot;sind#SIND&quot;&gt;SIND&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21903afe07c41672f8bcfd60933ce0975e725257" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;asind#ASIND&quot;&gt;ASIND&lt;/a&gt; Radians function: &lt;a href=&quot;sin#SIN&quot;&gt;SIN&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ddf7ff77ce5df27c9b1fe2db56c35f5901b057" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;atan#ATAN&quot;&gt;ATAN&lt;/a&gt; Degrees function: &lt;a href=&quot;tand#TAND&quot;&gt;TAND&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f66d110b94fc89e5a8827725b047e57862ab3f" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;atand#ATAND&quot;&gt;ATAND&lt;/a&gt; Radians function: &lt;a href=&quot;tan#TAN&quot;&gt;TAN&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dbc090688e2c6d84a7e3d31b609d35154a0906" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;cos#COS&quot;&gt;COS&lt;/a&gt; Degrees function: &lt;a href=&quot;acosd#ACOSD&quot;&gt;ACOSD&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce356b22fa4a2bc0fe1c54a4dd8d797ad7bfcaf9" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;cosd#COSD&quot;&gt;COSD&lt;/a&gt; Radians function: &lt;a href=&quot;acos#ACOS&quot;&gt;ACOS&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a3b7886f2c9ddd99a594fd1c713960fb8c55f6" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;cosh#COSH&quot;&gt;COSH&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8f0aecc7affdbcefb2d37c7c883e9329055375" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;sin#SIN&quot;&gt;SIN&lt;/a&gt; Degrees function: &lt;a href=&quot;asind#ASIND&quot;&gt;ASIND&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769f516a1b9daf103ffd05af4973bd00c3d70177" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;sind#SIND&quot;&gt;SIND&lt;/a&gt; Radians function: &lt;a href=&quot;asin#ASIN&quot;&gt;ASIN&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c6e812ab63ab95cb61e4af0a4c09256c5d7b33" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;sinh#SINH&quot;&gt;SINH&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e955fcb7303aa8ac90ee4bd691afe9ed597f1dc4" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;tan#TAN&quot;&gt;TAN&lt;/a&gt; Degrees function: &lt;a href=&quot;atand#ATAND&quot;&gt;ATAND&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d8a333f87a2bc95b53b411b6e89d96c16f38a0" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;tand#TAND&quot;&gt;TAND&lt;/a&gt; Radians function: &lt;a href=&quot;atan#ATAN&quot;&gt;ATAN&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b528c05813b82f9af4b9a185510cfd1260c1fae6" translate="yes" xml:space="preserve">
          <source>Inverse function: &lt;a href=&quot;tanh#TANH&quot;&gt;TANH&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49325c46f12ca8fa7ba40de02370d73f83794354" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic cosine function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac925ae4ac839399d8ef388bd329ec0d26c1d29" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic sine function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db0733c3f4bfd7f7f1099904e6328177953adb8" translate="yes" xml:space="preserve">
          <source>Inverse hyperbolic tangent function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5af7ec888758d9d53bf652c52979a25f8e3623f" translate="yes" xml:space="preserve">
          <source>Invoked for an &lt;code&gt;ERROR STOP&lt;/code&gt; statement which has a string as argument. The function should terminate the program with a nonzero-exit code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207ba46926c95fdfba52f9e026f7c7fdb5e4a6e" translate="yes" xml:space="preserve">
          <source>Invoked for an &lt;code&gt;ERROR STOP&lt;/code&gt; statement which has an integer argument. The function should terminate the program with the specified exit code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d0241f2b7a253e981af184c49cd1b59bc6acd4" translate="yes" xml:space="preserve">
          <source>Invoked for an &lt;code&gt;FAIL IMAGE&lt;/code&gt; statement. The function should terminate the current image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e70fc78693cf558e9f17390cf9c5d86c3019ab4" translate="yes" xml:space="preserve">
          <source>Issue warnings for uses of extensions to Fortran 95.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd61e5275e1f681ad5e5dd004c73d1fb3a4044f6" translate="yes" xml:space="preserve">
          <source>It also affects the search paths used by &lt;code&gt;cpp&lt;/code&gt; when used to preprocess Fortran source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e485e2677d67b75a3eeace8e611b67c503bb4075" translate="yes" xml:space="preserve">
          <source>It can be used as in the following Fortran code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ad43f55b6a0800158167ce3cda6a3fa601488a" translate="yes" xml:space="preserve">
          <source>It is permitted to have &lt;code&gt;image_index&lt;/code&gt; equal the current image; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using &lt;code&gt;memmove&lt;/code&gt; which handles (partially) overlapping memory. If &lt;var&gt;may_require_tmp&lt;/var&gt; is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and &lt;code&gt;memmove&lt;/code&gt; takes care of overlap issues).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7bf055a79bd11bd2208152a491b6149734aa62" translate="yes" xml:space="preserve">
          <source>It is permitted to have &lt;var&gt;image_index&lt;/var&gt; equal the current image; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using &lt;code&gt;memmove&lt;/code&gt; which handles (partially) overlapping memory. If &lt;var&gt;may_require_tmp&lt;/var&gt; is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and &lt;code&gt;memmove&lt;/code&gt; takes care of overlap issues).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d5c2291fa6c9aa224c10d949c0ac0ceb468485" translate="yes" xml:space="preserve">
          <source>It is permitted to have the same image index for both &lt;var&gt;src_image_index&lt;/var&gt; and &lt;var&gt;dst_image_index&lt;/var&gt;; the memory of the send-to and the send-from might (partially) overlap in that case. The implementation has to take care that it handles this case, e.g. using &lt;code&gt;memmove&lt;/code&gt; which handles (partially) overlapping memory. If &lt;var&gt;may_require_tmp&lt;/var&gt; is true, the library might additionally create a temporary variable, unless additional checks show that this is not required (e.g. because walking backward is possible or because both arrays are contiguous and &lt;code&gt;memmove&lt;/code&gt; takes care of overlap issues).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e3d64e0c8933af103e00d37bc3d8532257663c" translate="yes" xml:space="preserve">
          <source>It should be noted that the default terminator is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="98c6f61d08ed6b303581b5da803e632e815f9d37" translate="yes" xml:space="preserve">
          <source>Keyword Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1551a7ee1f78cee50211b592c2734b9386d2d54b" translate="yes" xml:space="preserve">
          <source>Kind of an entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab7ef4c7064e68c557c3a8cf2ef3e7c6827bc9b" translate="yes" xml:space="preserve">
          <source>Kind type parameters to specify a REAL type with a storage size of 32, 64, and 128 bits. It is negative if a target platform does not support the particular kind. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6207b0c4f6cd1630e99259a3a5e5d62ebe5ded86" translate="yes" xml:space="preserve">
          <source>Kind type parameters to specify an INTEGER type with a storage size of 16, 32, and 64 bits. It is negative if a target platform does not support the particular kind. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1bbd9d8f7a0645057266fc203d231a2b9fd6447" translate="yes" xml:space="preserve">
          <source>LINK</source>
          <target state="translated">LINK</target>
        </trans-unit>
        <trans-unit id="b0ecd94326a96753bed5e705196ed32be1af1a1a" translate="yes" xml:space="preserve">
          <source>Language extensions implemented by GNU Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c660404ea442e1eacb0483cb61766a558579dc4" translate="yes" xml:space="preserve">
          <source>Largest number of a kind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27ea870e756a4996b6e5548e72dad903dff893f" translate="yes" xml:space="preserve">
          <source>Last access time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6b3c229485ed0ca87c2d135388d2f0dd0020a2" translate="yes" xml:space="preserve">
          <source>Last file status change time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ae7c6bdca85d087ad5892abd46d332ae4415d4" translate="yes" xml:space="preserve">
          <source>Last modification time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcab630ce3ed0f326db0fc209c0308636c56ab09" translate="yes" xml:space="preserve">
          <source>Leading character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50e2841612a85e1a253a41b513fa0211128a88b" translate="yes" xml:space="preserve">
          <source>Left adjust a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cd0abd2433ed52bdfa0032b224cf261eb8b35c" translate="yes" xml:space="preserve">
          <source>Left justified mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab1c2256c381beee948a90f36638f4339d1df90" translate="yes" xml:space="preserve">
          <source>Left shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5975510c214c4daa847ad52688b3993dab1724b1" translate="yes" xml:space="preserve">
          <source>Left shift bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae5ee73fa32f8c98c922b726711d7840f3b7a59" translate="yes" xml:space="preserve">
          <source>Legacy interpretation of the first character (see below)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f0d30e010d441ea1cae9788d6624b7a03b4f62" translate="yes" xml:space="preserve">
          <source>Length of a character entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0cf8576d2b87deafe30f3ebe465833b937ff48" translate="yes" xml:space="preserve">
          <source>Length of a character entity without trailing blank characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97227c7273c040f5a30a4fecde9ce6689f49b389" translate="yes" xml:space="preserve">
          <source>Length of the record marker; valid values are 4 and 8. Default is 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f84d2bc2c7088755e410ed7ac734998ccc977b" translate="yes" xml:space="preserve">
          <source>Let us consider two examples of actually passing a procedure pointer from C to Fortran and vice versa. Note that these examples are also very similar to passing ordinary pointers between both languages. First, consider this code in C:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa146da0d449532fb6d500f41fb6c02db2554a8" translate="yes" xml:space="preserve">
          <source>Lexical greater than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a5d19db628a415dffa91613d7e2037efbd2de9" translate="yes" xml:space="preserve">
          <source>Lexical greater than or equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb6ceebebe3a25726b836e321122b8cb4b78bc2" translate="yes" xml:space="preserve">
          <source>Lexical less than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc4078414eccf52f3a6459f0f48c06874b32d0e" translate="yes" xml:space="preserve">
          <source>Lexical less than or equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e393ce2d408e8663d0b0f4462207f1faff5ef4eb" translate="yes" xml:space="preserve">
          <source>Library-based coarray parallelization; a suitable GNU Fortran coarray library needs to be linked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0ff6d065b5d622b994bd5180d901b19bf13b11" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU Free Documentation License, Version 1.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e02c95fe85052fcadf9745a5f1d0358088d936" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="translated">Like</target>
        </trans-unit>
        <trans-unit id="6262ff73128a0abefed72254f810c542a985e42e" translate="yes" xml:space="preserve">
          <source>Limits the maximum number of error messages to &lt;var&gt;n&lt;/var&gt;, at which point GNU Fortran bails out rather than attempting to continue processing the source code. If &lt;var&gt;n&lt;/var&gt; is 0, there is no limit on the number of error messages produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3822d503f6fdfaf315e8b54cd553dfda61cad1" translate="yes" xml:space="preserve">
          <source>Line feed (no carriage return)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7504c594decfccdceb396e539782bb13df31875" translate="yes" xml:space="preserve">
          <source>Line feed and carriage return</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3832473f0fadd93e7db6ba18539dd5bce2d5c1" translate="yes" xml:space="preserve">
          <source>Link Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c73f7483a9660d9e6ff95a01a0a1f185435d435" translate="yes" xml:space="preserve">
          <source>Locate and gather machine code already generated to perform actions requested by statements in the user&amp;rsquo;s program. This machine code is organized into &lt;em&gt;modules&lt;/em&gt; and is located and &lt;em&gt;linked&lt;/em&gt; to the user program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5605d6d0152b66a08b94c86e31207ddbd756d6b" translate="yes" xml:space="preserve">
          <source>Location of the maximum value within an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a05018eee48b3efb66f96399c2b6e9d3f2f66a" translate="yes" xml:space="preserve">
          <source>Location of the minimum value within an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ec6e9affa4ece7fba1ac47c3eb67ea70ebf2d5" translate="yes" xml:space="preserve">
          <source>Locking a lock variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53207c28b36272341ba0c50e132652d9949df450" translate="yes" xml:space="preserve">
          <source>Logarithm function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61502f1c9040dfb4a05cefb27795439a9f39f510" translate="yes" xml:space="preserve">
          <source>Logarithm of the Gamma function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0890c5cd9a5eabf96a35cb4d43e56b2db315d809" translate="yes" xml:space="preserve">
          <source>Logarithm of the Gamma function: &lt;a href=&quot;log_005fgamma#LOG_005fGAMMA&quot;&gt;LOG_GAMMA&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122f1700f952290f57d9cb80437f579187bf8842" translate="yes" xml:space="preserve">
          <source>Logical</source>
          <target state="translated">Logical</target>
        </trans-unit>
        <trans-unit id="ff5d5c519f4c3bb77429911d9e4777ff8d9f0131" translate="yes" xml:space="preserve">
          <source>Logical negation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e0a1bfc4057bbcec52468b1517173b5e402eec" translate="yes" xml:space="preserve">
          <source>Low level file positioning subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbb72a6ed735ce06b4a67f2d869b891dab189f9" translate="yes" xml:space="preserve">
          <source>Lower codimension bounds of an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11215b7bf0841d27a5542e991b7cc4da462c7b19" translate="yes" xml:space="preserve">
          <source>Lower dimension bounds of an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63dc4f1b4f7c5a980c804c9400f843d0f50eb072" translate="yes" xml:space="preserve">
          <source>MALLOC</source>
          <target state="translated">MALLOC</target>
        </trans-unit>
        <trans-unit id="36903c3f68704d6a6a98ad41acdb673f1272e159" translate="yes" xml:space="preserve">
          <source>MASKL</source>
          <target state="translated">MASKL</target>
        </trans-unit>
        <trans-unit id="983840beaf1b22f9bfc69fc65b37ae2b76ef4371" translate="yes" xml:space="preserve">
          <source>MASKR</source>
          <target state="translated">MASKR</target>
        </trans-unit>
        <trans-unit id="ec4b11bad0edbdb99e67935796df60d779713be8" translate="yes" xml:space="preserve">
          <source>MOD</source>
          <target state="translated">MOD</target>
        </trans-unit>
        <trans-unit id="e20b6c854bf67b1252c620404eef921f96fbd978" translate="yes" xml:space="preserve">
          <source>MODULO</source>
          <target state="translated">MODULO</target>
        </trans-unit>
        <trans-unit id="7c494dff151c0770a74273286a611f6cf7fde933" translate="yes" xml:space="preserve">
          <source>Make an assertion with the predicate &lt;var&gt;predicate&lt;/var&gt; and answer &lt;var&gt;answer&lt;/var&gt;. This form is preferred to the older form -A predicate(answer), which is still supported, because it does not use shell special characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9981881244615e30e0e6d9dc9076b060714fa91" translate="yes" xml:space="preserve">
          <source>Makes a (hard) link from file &lt;var&gt;PATH1&lt;/var&gt; to &lt;var&gt;PATH2&lt;/var&gt;. A null character (&lt;code&gt;CHAR(0)&lt;/code&gt;) can be used to mark the end of the names in &lt;var&gt;PATH1&lt;/var&gt; and &lt;var&gt;PATH2&lt;/var&gt;; otherwise, trailing blanks in the file names are ignored. If the &lt;var&gt;STATUS&lt;/var&gt; argument is supplied, it contains 0 on success or a nonzero error code upon return; see &lt;code&gt;link(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49905b0210758db0722fab7b9950412f5f87df59" translate="yes" xml:space="preserve">
          <source>Makes a symbolic link from file &lt;var&gt;PATH1&lt;/var&gt; to &lt;var&gt;PATH2&lt;/var&gt;. A null character (&lt;code&gt;CHAR(0)&lt;/code&gt;) can be used to mark the end of the names in &lt;var&gt;PATH1&lt;/var&gt; and &lt;var&gt;PATH2&lt;/var&gt;; otherwise, trailing blanks in the file names are ignored. If the &lt;var&gt;STATUS&lt;/var&gt; argument is supplied, it contains 0 on success or a nonzero error code upon return; see &lt;code&gt;symlink(2)&lt;/code&gt;. If the system does not supply &lt;code&gt;symlink(2)&lt;/code&gt;, &lt;code&gt;ENOSYS&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6997537ee8d9bf18bd573772e8d029eb0ddd30e" translate="yes" xml:space="preserve">
          <source>Malformed environment variables are silently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d364109921998597b145456b1c7c702647c48dd" translate="yes" xml:space="preserve">
          <source>Many Fortran compilers including GNU Fortran allow passing the source code through a C preprocessor (CPP; sometimes also called the Fortran preprocessor, FPP) to allow for conditional compilation. In the case of GNU Fortran, this is the GNU C Preprocessor in the traditional mode. On systems with case-preserving file names, the preprocessor is automatically invoked if the filename extension is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b673cea4bac8f2c92b06cf37ddae5c74e850a3ee" translate="yes" xml:space="preserve">
          <source>Many constraints have been relaxed, in particular for the &lt;code&gt;C_LOC&lt;/code&gt; and &lt;code&gt;C_F_POINTER&lt;/code&gt; intrinsics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb1ed3f7deaffd6b922f0a465d51e4749b2b686" translate="yes" xml:space="preserve">
          <source>Many of the intrinsic procedures take one or more optional arguments. This document follows the convention used in the Fortran 95 standard, and denotes such arguments by square brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396c600df716b715e6908527e0552afed1093e6a" translate="yes" xml:space="preserve">
          <source>Many, if not most, floating point operations incur loss of precision due to rounding, and hence the &lt;code&gt;ffpe-trap=inexact&lt;/code&gt; is likely to be uninteresting in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5b41a91b43e9925f1cd6b05ad283cf52bbea89" translate="yes" xml:space="preserve">
          <source>Mark the image failed and end its execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a7bcef18b966adc5917142f6dfcf4595ac7dd2" translate="yes" xml:space="preserve">
          <source>Maximal value on the current set of images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc686c0246cdac33e35defd5fe4bd798a773c19" translate="yes" xml:space="preserve">
          <source>Maximum exponent of a real kind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae84c2d859909ea35ff046f6e7f08b7dac76e3a9" translate="yes" xml:space="preserve">
          <source>Maximum value of an argument list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e98ec5a4c500987af4bebd0ba84d3fcc5da115a" translate="yes" xml:space="preserve">
          <source>Maximum value of an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca249738368eabb30a5dd0ba4743ef0d5bef5ca" translate="yes" xml:space="preserve">
          <source>May be any type, not scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a70f7f5c27686a9e445d040ea92624267b0231a" translate="yes" xml:space="preserve">
          <source>May be of any type and may be a pointer, scalar or array value, or a dummy procedure. It shall be the name of an optional dummy argument accessible within the current subroutine or function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1518ab4ae95b3379acd6791637e69195bb3600" translate="yes" xml:space="preserve">
          <source>May be of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="0039b07a426b375d2db61be98aee0327a2657758" translate="yes" xml:space="preserve">
          <source>Memory de-allocation subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faf3a93240169eec874248543e2a8cfb9062ded" translate="yes" xml:space="preserve">
          <source>Merge arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210fd7b2cd9db062d1329f1e5b0a8a82ca9c3590" translate="yes" xml:space="preserve">
          <source>Merge of bits under mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a12929304d9f9f57d87d98236f2d31ecf700ee7" translate="yes" xml:space="preserve">
          <source>Minimal value on the current set of images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13494276ec60f4f45c15f65149ca4d485ee52760" translate="yes" xml:space="preserve">
          <source>Minimum exponent of a real kind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40a8ea17d9eafa46b96a9e052b46d1d5cf8cdde" translate="yes" xml:space="preserve">
          <source>Minimum value of an argument list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f2eebd1f3b99c2b9bfcb4d3b2e01a11fdfdf05" translate="yes" xml:space="preserve">
          <source>Minimum value of an array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6ac60b5209583d2c84178e2e54de000370b01e" translate="yes" xml:space="preserve">
          <source>Minor I/O features: Rounding during formatted output, using of a decimal comma instead of a decimal point, setting whether a plus sign should appear for positive numbers. On systems where &lt;code&gt;strtod&lt;/code&gt; honours the rounding mode, the rounding mode is also supported for input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0fb90fb5ba6cd619cb7bf263ddc973b12ef58e" translate="yes" xml:space="preserve">
          <source>Minor features: obsolesce diagnostics for &lt;code&gt;ENTRY&lt;/code&gt; with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aba0202969b49894cf803b4c278527365b7469" translate="yes" xml:space="preserve">
          <source>Minutes after the hour, range 0&amp;ndash;59</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf73226c355aa5cdfc5bbeb7c21b91d47cc2cec" translate="yes" xml:space="preserve">
          <source>Modulo function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be27ead4cd43dafd5f62ecf16341e6a06cff89e8" translate="yes" xml:space="preserve">
          <source>Moreover, the following two named constants are defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1de17a62dee02240eeb1321c2ac46bdf9cd493" translate="yes" xml:space="preserve">
          <source>Most of them have both positive and negative forms; the negative form of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c68f4bba4e9e38a1bbfa571e43d34f91d5c9b4" translate="yes" xml:space="preserve">
          <source>Move allocation from one object to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c16867333023efac7eafed5dca46bf3ab1163d" translate="yes" xml:space="preserve">
          <source>Move bits from one integer to another</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ec42657587dfb7c7efadb4172795e66a93699b" translate="yes" xml:space="preserve">
          <source>Moves &lt;var&gt;LEN&lt;/var&gt; bits from positions &lt;var&gt;FROMPOS&lt;/var&gt; through &lt;code&gt;FROMPOS+LEN-1&lt;/code&gt; of &lt;var&gt;FROM&lt;/var&gt; to positions &lt;var&gt;TOPOS&lt;/var&gt; through &lt;code&gt;TOPOS+LEN-1&lt;/code&gt; of &lt;var&gt;TO&lt;/var&gt;. The portion of argument &lt;var&gt;TO&lt;/var&gt; not affected by the movement of bits is unchanged. The values of &lt;code&gt;FROMPOS+LEN-1&lt;/code&gt; and &lt;code&gt;TOPOS+LEN-1&lt;/code&gt; must be less than &lt;code&gt;BIT_SIZE(FROM)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4057b4c0c68b27f68d0f3d39f8433e8f255761" translate="yes" xml:space="preserve">
          <source>Moves &lt;var&gt;UNIT&lt;/var&gt; to the specified &lt;var&gt;OFFSET&lt;/var&gt;. If &lt;var&gt;WHENCE&lt;/var&gt; is set to 0, the &lt;var&gt;OFFSET&lt;/var&gt; is taken as an absolute value &lt;code&gt;SEEK_SET&lt;/code&gt;, if set to 1, &lt;var&gt;OFFSET&lt;/var&gt; is taken to be relative to the current position &lt;code&gt;SEEK_CUR&lt;/code&gt;, and if set to 2 relative to the end of the file &lt;code&gt;SEEK_END&lt;/code&gt;. On error, &lt;var&gt;STATUS&lt;/var&gt; is set to a nonzero value. If &lt;var&gt;STATUS&lt;/var&gt; the seek fails silently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57598c9ccd62944b03316edb796ce4fa5b37ff9" translate="yes" xml:space="preserve">
          <source>Multiplies the elements of &lt;var&gt;ARRAY&lt;/var&gt; along dimension &lt;var&gt;DIM&lt;/var&gt; if the corresponding element in &lt;var&gt;MASK&lt;/var&gt; is &lt;code&gt;TRUE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="1417d2118bba6440275b87c20f5035f45f639b28" translate="yes" xml:space="preserve">
          <source>NOTE A simple implementation could be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69fc18a69727f31dc484cc6cc5d98f4552fffd6" translate="yes" xml:space="preserve">
          <source>NOTES</source>
          <target state="translated">NOTES</target>
        </trans-unit>
        <trans-unit id="eef19c54306daa69eda49c0272623bdb5e2b341f" translate="yes" xml:space="preserve">
          <source>NULL</source>
          <target state="translated">NULL</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="ee6356c71fa0b6e9767d843fec6c0b93d6e692c5" translate="yes" xml:space="preserve">
          <source>Named constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6c7e0277e044cae83fe0440e0bf51944981016" translate="yes" xml:space="preserve">
          <source>Namelist input/output for internal files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91dc3d90db29e1e2609e81b01946841c00bec62" translate="yes" xml:space="preserve">
          <source>Nearest representable number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a5b6c328ee914e416c03a5cb7cebfcc15278c5" translate="yes" xml:space="preserve">
          <source>Nearest whole number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2410fcc35447dc77477d434b407df9fb9153c4" translate="yes" xml:space="preserve">
          <source>New line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85999ae5cdf0a7237e8bf4b5d1aa802e5c6e9763" translate="yes" xml:space="preserve">
          <source>New line character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb767b92650dbd25846d979102119fb0feef3b1" translate="yes" xml:space="preserve">
          <source>New page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0de1ac5e17b1c46e1c0def8e40eea51984873cc" translate="yes" xml:space="preserve">
          <source>Next, we want to call a C routine that expects a procedure pointer argument and pass it a Fortran procedure (which clearly must be interoperable!). Again, the C function may be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0886c994b731569b46ca06857829b7c09f0dbcf7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fderegister#g_t_005fgfortran_005fcaf_005fderegister&quot;&gt;_gfortran_caf_deregister&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fstopped_005fimages#g_t_005fgfortran_005fcaf_005fstopped_005fimages&quot;&gt;_gfortran_caf_stopped_images&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99e4d97560a59f1ae61a57ac2941026aeabf520" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fevent_005fquery#g_t_005fgfortran_005fcaf_005fevent_005fquery&quot;&gt;_gfortran_caf_event_query&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fevent_005fpost#g_t_005fgfortran_005fcaf_005fevent_005fpost&quot;&gt;_gfortran_caf_event_post&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b82c23410ace2f5fda1706aa366b4ad8d45a3e3" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fget#g_t_005fgfortran_005fcaf_005fget&quot;&gt;_gfortran_caf_get&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fis_005fpresent#g_t_005fgfortran_005fcaf_005fis_005fpresent&quot;&gt;_gfortran_caf_is_present&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cdb49dc8cabbfdcfdd35e9da4e2fd349985cda" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fget_005fby_005fref#g_t_005fgfortran_005fcaf_005fget_005fby_005fref&quot;&gt;_gfortran_caf_get_by_ref&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fsendget#g_t_005fgfortran_005fcaf_005fsendget&quot;&gt;_gfortran_caf_sendget&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4468152963cbb0a33d455e84276e3840d5c57eb0" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005flock#g_t_005fgfortran_005fcaf_005flock&quot;&gt;_gfortran_caf_lock&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fget_005fby_005fref#g_t_005fgfortran_005fcaf_005fget_005fby_005fref&quot;&gt;_gfortran_caf_get_by_ref&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40c85cc57c3c0a6f2c398d359c15b6a7569aa4e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fsend_005fby_005fref#g_t_005fgfortran_005fcaf_005fsend_005fby_005fref&quot;&gt;_gfortran_caf_send_by_ref&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fget#g_t_005fgfortran_005fcaf_005fget&quot;&gt;_gfortran_caf_get&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366d5e09ebddb4dd168832b386cd38bcf9d4d293" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fsendget#g_t_005fgfortran_005fcaf_005fsendget&quot;&gt;_gfortran_caf_sendget&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fsend#g_t_005fgfortran_005fcaf_005fsend&quot;&gt;_gfortran_caf_send&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af12fd838b9a784474265cf423415a28545b855" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fcaf_005fsendget_005fby_005fref#g_t_005fgfortran_005fcaf_005fsendget_005fby_005fref&quot;&gt;_gfortran_caf_sendget_by_ref&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fsend_005fby_005fref#g_t_005fgfortran_005fcaf_005fsend_005fby_005fref&quot;&gt;_gfortran_caf_send_by_ref&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06cc744f0d939286c7b9f1c3d89870b817d63206" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;_005fgfortran_005fset_005fconvert#g_t_005fgfortran_005fset_005fconvert&quot;&gt;_gfortran_set_convert&lt;/a&gt;, Previous: &lt;a href=&quot;_005fgfortran_005fset_005fargs#g_t_005fgfortran_005fset_005fargs&quot;&gt;_gfortran_set_args&lt;/a&gt;, Up: &lt;a href=&quot;non_002dfortran-main-program#Non_002dFortran-Main-Program&quot;&gt;Non-Fortran Main Program&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa95d0941621698e032728314f9cf103c607303d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;abort#ABORT&quot;&gt;ABORT&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113616f69a25ba977bc4ed8e44991a040c579ebc" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;allocated#ALLOCATED&quot;&gt;ALLOCATED&lt;/a&gt;, Previous: &lt;a href=&quot;alarm#ALARM&quot;&gt;ALARM&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3efb9a98aa546228dc8c534e4820754dcc8d18" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;asin#ASIN&quot;&gt;ASIN&lt;/a&gt;, Previous: &lt;a href=&quot;anint#ANINT&quot;&gt;ANINT&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d722cb2a86eb63da1cf32401227c151d8c600ba9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;atan#ATAN&quot;&gt;ATAN&lt;/a&gt;, Previous: &lt;a href=&quot;asinh#ASINH&quot;&gt;ASINH&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5806a2f4848b6e9929ce07735bc8f2360bc54886" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;atan2d#ATAN2D&quot;&gt;ATAN2D&lt;/a&gt;, Previous: &lt;a href=&quot;atand#ATAND&quot;&gt;ATAND&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbca989d5381c211efcce4ace6e641e5f9aa755" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;atanh#ATANH&quot;&gt;ATANH&lt;/a&gt;, Previous: &lt;a href=&quot;atan2#ATAN2&quot;&gt;ATAN2&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45b258dcda7777e9ea75a7b58eb3f03a6e1c931" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;bessel_005fy0#BESSEL_005fY0&quot;&gt;BESSEL_Y0&lt;/a&gt;, Previous: &lt;a href=&quot;bessel_005fj1#BESSEL_005fJ1&quot;&gt;BESSEL_J1&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9328720fbee8aa402f1dd5fda1da0852291d1f86" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;bge#BGE&quot;&gt;BGE&lt;/a&gt;, Previous: &lt;a href=&quot;bessel_005fy1#BESSEL_005fY1&quot;&gt;BESSEL_Y1&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855f40c68e434eea615c437a1f07824481d6fe54" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;caf_005fteam_005ft#caf_005fteam_005ft&quot;&gt;caf_team_t&lt;/a&gt;, Previous: &lt;a href=&quot;caf_005fderegister_005ft#caf_005fderegister_005ft&quot;&gt;caf_deregister_t&lt;/a&gt;, Up: &lt;a href=&quot;type-and-enum-abi-documentation#Type-and-enum-ABI-Documentation&quot;&gt;Type and enum ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5b578eb4c109ee291f237782d49ab010354cf1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;co_005fsum#CO_005fSUM&quot;&gt;CO_SUM&lt;/a&gt;, Previous: &lt;a href=&quot;co_005fmin#CO_005fMIN&quot;&gt;CO_MIN&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a602a95ce3e2f9213c2bc6f3c134a27f16a9cef7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;convert-specifier#CONVERT-specifier&quot;&gt;CONVERT specifier&lt;/a&gt;, Previous: &lt;a href=&quot;hollerith-constants-support#Hollerith-constants-support&quot;&gt;Hollerith constants support&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4486b6804aff2861fd5af69f9387c57eb5b04f6b" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;cpu_005ftime#CPU_005fTIME&quot;&gt;CPU_TIME&lt;/a&gt;, Previous: &lt;a href=&quot;cotand#COTAND&quot;&gt;COTAND&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c80f7937e8156fe1d3bf506d0ee98a82f3c692" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;data-consistency-and-durability#Data-consistency-and-durability&quot;&gt;Data consistency and durability&lt;/a&gt;, Previous: &lt;a href=&quot;internal-representation-of-logical-variables#Internal-representation-of-LOGICAL-variables&quot;&gt;Internal representation of LOGICAL variables&lt;/a&gt;, Up: &lt;a href=&quot;compiler-characteristics#Compiler-Characteristics&quot;&gt;Compiler Characteristics&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5236680a1a25af7492127615eaa073e60f2c47d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;dble#DBLE&quot;&gt;DBLE&lt;/a&gt;, Previous: &lt;a href=&quot;ctime#CTIME&quot;&gt;CTIME&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c6b19dcb95ee53efce009387b881286a084c40" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;Debugging Options&lt;/a&gt;, Previous: &lt;a href=&quot;preprocessing-options#Preprocessing-Options&quot;&gt;Preprocessing Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gnu-fortran#Invoking-GNU-Fortran&quot;&gt;Invoking GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb7154ae12b45c2fcbb40d9aee27bd557b5fe58" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Directory Options&lt;/a&gt;, Previous: &lt;a href=&quot;error-and-warning-options#Error-and-Warning-Options&quot;&gt;Error and Warning Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gnu-fortran#Invoking-GNU-Fortran&quot;&gt;Invoking GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6811d04595fdb9b0a76b58cfaf89e299a015b6a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;, Previous: &lt;a href=&quot;runtime-options#Runtime-Options&quot;&gt;Runtime Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gnu-fortran#Invoking-GNU-Fortran&quot;&gt;Invoking GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153ac1d60f9134fd871a7a8576b90e9978f5fedd" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;eoshift#EOSHIFT&quot;&gt;EOSHIFT&lt;/a&gt;, Previous: &lt;a href=&quot;dshiftr#DSHIFTR&quot;&gt;DSHIFTR&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f455134c0e1a3802c65ace55eac72dde631f791" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;epsilon#EPSILON&quot;&gt;EPSILON&lt;/a&gt;, Previous: &lt;a href=&quot;dtime#DTIME&quot;&gt;DTIME&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75c5b2d82dc8c476574a559d175a43352f7c851" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;error-and-warning-options#Error-and-Warning-Options&quot;&gt;Error and Warning Options&lt;/a&gt;, Previous: &lt;a href=&quot;fortran-dialect-options#Fortran-Dialect-Options&quot;&gt;Fortran Dialect Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gnu-fortran#Invoking-GNU-Fortran&quot;&gt;Invoking GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcca43a265bd6b79dc9a5578b4b6a31b52319057" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;event_005fquery#EVENT_005fQUERY&quot;&gt;EVENT_QUERY&lt;/a&gt;, Previous: &lt;a href=&quot;erfc_005fscaled#ERFC_005fSCALED&quot;&gt;ERFC_SCALED&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0ed4b16c724503593d427e936c8ddd34cca819" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;exit#EXIT&quot;&gt;EXIT&lt;/a&gt;, Previous: &lt;a href=&quot;event_005fquery#EVENT_005fQUERY&quot;&gt;EVENT_QUERY&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec23025f9230ca3477538b9b24fb444ffe08ab89" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;extensions-not-implemented-in-gnu-fortran#Extensions-not-implemented-in-GNU-Fortran&quot;&gt;Extensions not implemented in GNU Fortran&lt;/a&gt;, Up: &lt;a href=&quot;extensions#Extensions&quot;&gt;Extensions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46848c5bcd926a6ede97d9695f06da76a3c20a54" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;files-opened-without-an-explicit-action_003d-specifier#Files-opened-without-an-explicit-ACTION_003d-specifier&quot;&gt;Files opened without an explicit ACTION= specifier&lt;/a&gt;, Previous: &lt;a href=&quot;thread_002dsafety-of-the-runtime-library#Thread_002dsafety-of-the-runtime-library&quot;&gt;Thread-safety of the runtime library&lt;/a&gt;, Up: &lt;a href=&quot;compiler-characteristics#Compiler-Characteristics&quot;&gt;Compiler Characteristics&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6dcf5778bf4a9781efd9813a78d5e8165468ea" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;fortran-2008-status#Fortran-2008-status&quot;&gt;Fortran 2008 status&lt;/a&gt;, Up: &lt;a href=&quot;fortran-2003-and-2008-status#Fortran-2003-and-2008-status&quot;&gt;Fortran 2003 and 2008 status&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b939dfbf59ed0735f786d0a0f7a1824000ff45b6" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;fortran-dialect-options#Fortran-Dialect-Options&quot;&gt;Fortran Dialect Options&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gnu-fortran#Invoking-GNU-Fortran&quot;&gt;Invoking GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ecc16ddd6ea2c3805d5556021d05c08d07b23a9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;, Previous: &lt;a href=&quot;free#FREE&quot;&gt;FREE&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53326b3f4c748b6f71c0cb33c4c065ff84bd2394" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C&quot;&gt;Further Interoperability of Fortran with C&lt;/a&gt;, Previous: &lt;a href=&quot;interoperable-subroutines-and-functions#Interoperable-Subroutines-and-Functions&quot;&gt;Interoperable Subroutines and Functions&lt;/a&gt;, Up: &lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Interoperability with C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0da481ef5ae250646e5acf09691b39d03cb228" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;getgid#GETGID&quot;&gt;GETGID&lt;/a&gt;, Previous: &lt;a href=&quot;getenv#GETENV&quot;&gt;GETENV&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa81c18c7e8089136181bee5a6d34c75edba630" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;gfortran_005ferror_005fbacktrace#GFORTRAN_005fERROR_005fBACKTRACE&quot;&gt;GFORTRAN_ERROR_BACKTRACE&lt;/a&gt;, Previous: &lt;a href=&quot;gfortran_005flist_005fseparator#GFORTRAN_005fLIST_005fSEPARATOR&quot;&gt;GFORTRAN_LIST_SEPARATOR&lt;/a&gt;, Up: &lt;a href=&quot;runtime#Runtime&quot;&gt;Runtime&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cc7aea2f09797412b0f2e2b2f97e573006e460" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;gnu-fortran-and-gcc#GNU-Fortran-and-GCC&quot;&gt;GNU Fortran and GCC&lt;/a&gt;, Up: &lt;a href=&quot;introduction#Introduction&quot;&gt;Introduction&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7697cdd6bf6640a7de6099b4465df4f56528800c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;idate#IDATE&quot;&gt;IDATE&lt;/a&gt;, Previous: &lt;a href=&quot;ibset#IBSET&quot;&gt;IBSET&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c9fe8c87adf1f6db7423d97d78bc094177e8aa" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;ieee-modules#IEEE-modules&quot;&gt;IEEE modules&lt;/a&gt;, Previous: &lt;a href=&quot;iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV&quot;&gt;ISO_FORTRAN_ENV&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-modules#Intrinsic-Modules&quot;&gt;Intrinsic Modules&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018d1c0dca3c70db85e626a8db8d3850e8c35081" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;intrinsic-modules#Intrinsic-Modules&quot;&gt;Intrinsic Modules&lt;/a&gt;, Previous: &lt;a href=&quot;coarray-programming#Coarray-Programming&quot;&gt;Coarray Programming&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4bf0b0293db0afd54491a17d0d123b47d89bb83" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;introduction#Introduction&quot;&gt;Introduction&lt;/a&gt;, Up: &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/dir/index.html&quot;&gt;(dir)&lt;/a&gt; [&lt;a href=&quot;#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7524979a98ed53073fca4f60067c05b00029b24" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;iso_005fc_005fbinding#ISO_005fC_005fBINDING&quot;&gt;ISO_C_BINDING&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-modules#Intrinsic-Modules&quot;&gt;Intrinsic Modules&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c0b25d88a984ba15ffe67314aa125736dcd76e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;legacy-parameter-statements#Legacy-PARAMETER-statements&quot;&gt;Legacy PARAMETER statements&lt;/a&gt;, Previous: &lt;a href=&quot;bitwise-logical-operators#Bitwise-logical-operators&quot;&gt;Bitwise logical operators&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19df84ccde500a9753d79e2761ab482b11405a33" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;maxval#MAXVAL&quot;&gt;MAXVAL&lt;/a&gt;, Previous: &lt;a href=&quot;maxexponent#MAXEXPONENT&quot;&gt;MAXEXPONENT&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b65caa9458a8e7392c07e8442242a39739c121" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;minval#MINVAL&quot;&gt;MINVAL&lt;/a&gt;, Previous: &lt;a href=&quot;minexponent#MINEXPONENT&quot;&gt;MINEXPONENT&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49bfb4556ad2c4103e08c670e1d13332e80420c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;naming-and-argument_002dpassing-conventions#Naming-and-argument_002dpassing-conventions&quot;&gt;Naming and argument-passing conventions&lt;/a&gt;, Previous: &lt;a href=&quot;gnu-fortran-compiler-directives#GNU-Fortran-Compiler-Directives&quot;&gt;GNU Fortran Compiler Directives&lt;/a&gt;, Up: &lt;a href=&quot;mixed_002dlanguage-programming#Mixed_002dLanguage-Programming&quot;&gt;Mixed-Language Programming&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f7a569848e3c4dede888d38c672ca859dfa7d1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;non_002dfortran-main-program#Non_002dFortran-Main-Program&quot;&gt;Non-Fortran Main Program&lt;/a&gt;, Previous: &lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Interoperability with C&lt;/a&gt;, Up: &lt;a href=&quot;mixed_002dlanguage-programming#Mixed_002dLanguage-Programming&quot;&gt;Mixed-Language Programming&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="144713f310de7941db438abf9ed7a3d3d1214522" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;openacc#OpenACC&quot;&gt;OpenACC&lt;/a&gt;, Previous: &lt;a href=&quot;convert-specifier#CONVERT-specifier&quot;&gt;CONVERT specifier&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f0646243338097c38f79b300e8c4fdb974326e" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;openmp#OpenMP&quot;&gt;OpenMP&lt;/a&gt;, Previous: &lt;a href=&quot;cray-pointers#Cray-pointers&quot;&gt;Cray pointers&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3df5a7ec23371f4749dea67246c37044ce5ba5" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;parity#PARITY&quot;&gt;PARITY&lt;/a&gt;, Previous: &lt;a href=&quot;or#OR&quot;&gt;OR&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd150b97ebef4c39527b53399d690bb0f982a17" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;preprocessing-and-conditional-compilation#Preprocessing-and-conditional-compilation&quot;&gt;Preprocessing and conditional compilation&lt;/a&gt;, Previous: &lt;a href=&quot;about-gnu-fortran#About-GNU-Fortran&quot;&gt;About GNU Fortran&lt;/a&gt;, Up: &lt;a href=&quot;introduction#Introduction&quot;&gt;Introduction&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd42398580bcc47d86936a449544909378b976a" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;preprocessing-options#Preprocessing-Options&quot;&gt;Preprocessing Options&lt;/a&gt;, Previous: &lt;a href=&quot;option-summary#Option-Summary&quot;&gt;Option Summary&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gnu-fortran#Invoking-GNU-Fortran&quot;&gt;Invoking GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f36e94e02b4ec30e06a43c76fd8d7ca7005f96d" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;range#RANGE&quot;&gt;RANGE&lt;/a&gt;, Previous: &lt;a href=&quot;random_005fnumber#RANDOM_005fNUMBER&quot;&gt;RANDOM_NUMBER&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b47ab4d2dfdd4936fecfd7719b475df976b590" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;real-array-indices#Real-array-indices&quot;&gt;Real array indices&lt;/a&gt;, Previous: &lt;a href=&quot;q-exponent_002dletter#Q-exponent_002dletter&quot;&gt;&lt;code&gt;Q&lt;/code&gt; exponent-letter&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55da1b4934d0001bd923c116dc9838f8c5a646ca" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;rename#RENAME&quot;&gt;RENAME&lt;/a&gt;, Previous: &lt;a href=&quot;rank#RANK&quot;&gt;RANK&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd713417e190dc0f3c40007b6f58f3bf6f84ca9" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;runtime#Runtime&quot;&gt;Runtime&lt;/a&gt;, Previous: &lt;a href=&quot;introduction#Introduction&quot;&gt;Introduction&lt;/a&gt;, Up: &lt;a href=&quot;index#Top&quot;&gt;Top&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02cbcf4c3b49be337eb6b7da99e58c2ff383ccd1" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;set_005fexponent#SET_005fEXPONENT&quot;&gt;SET_EXPONENT&lt;/a&gt;, Previous: &lt;a href=&quot;selected_005fint_005fkind#SELECTED_005fINT_005fKIND&quot;&gt;SELECTED_INT_KIND&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8222a9084512ca225a4685b3c74db721e23369d3" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;standards#Standards&quot;&gt;Standards&lt;/a&gt;, Previous: &lt;a href=&quot;gnu-fortran-and-g77#GNU-Fortran-and-G77&quot;&gt;GNU Fortran and G77&lt;/a&gt;, Up: &lt;a href=&quot;introduction#Introduction&quot;&gt;Introduction&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e7dff5a2fc141f9d10193e17e9d496e12cef6f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;storage_005fsize#STORAGE_005fSIZE&quot;&gt;STORAGE_SIZE&lt;/a&gt;, Previous: &lt;a href=&quot;srand#SRAND&quot;&gt;SRAND&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471d9cbab720e837acc114cb71a060247b3db3e7" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;tan#TAN&quot;&gt;TAN&lt;/a&gt;, Previous: &lt;a href=&quot;system#SYSTEM&quot;&gt;SYSTEM&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2427f2d63a58273157ad97731255a15513cb135c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;time#TIME&quot;&gt;TIME&lt;/a&gt;, Previous: &lt;a href=&quot;tanh#TANH&quot;&gt;TANH&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9120d98222d6efc48808a6f24a6dd7d049f38c" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;transpose#TRANSPOSE&quot;&gt;TRANSPOSE&lt;/a&gt;, Previous: &lt;a href=&quot;trailz#TRAILZ&quot;&gt;TRAILZ&lt;/a&gt;, Up: &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77658af5cc72ef016c5f7328ca30859cb5eb521" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;ts-29113-status#TS-29113-status&quot;&gt;TS 29113 status&lt;/a&gt;, Previous: &lt;a href=&quot;fortran-2003-status#Fortran-2003-status&quot;&gt;Fortran 2003 status&lt;/a&gt;, Up: &lt;a href=&quot;fortran-2003-and-2008-status#Fortran-2003-and-2008-status&quot;&gt;Fortran 2003 and 2008 status&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7d1af592510a6b6ef2a9b78d050e30209fbb33" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;type-variants-for-integer-intrinsics#Type-variants-for-integer-intrinsics&quot;&gt;Type variants for integer intrinsics&lt;/a&gt;, Previous: &lt;a href=&quot;structure-and-record#STRUCTURE-and-RECORD&quot;&gt;STRUCTURE and RECORD&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413033a5bb14938d31b1f08a694711723726cff8" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;union-and-map#UNION-and-MAP&quot;&gt;UNION and MAP&lt;/a&gt;, Previous: &lt;a href=&quot;read_002fwrite-after-eof-marker#Read_002fWrite-after-EOF-marker&quot;&gt;Read/Write after EOF marker&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314e48a78ac9fa7ef56078a2a2a2ffb5d4db8925" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;working-with-pointers#Working-with-Pointers&quot;&gt;Working with Pointers&lt;/a&gt;, Previous: &lt;a href=&quot;interoperable-global-variables#Interoperable-Global-Variables&quot;&gt;Interoperable Global Variables&lt;/a&gt;, Up: &lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Interoperability with C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba0dc9c6f05e791ea2f5c30d044bfc69d5fec8f" translate="yes" xml:space="preserve">
          <source>Next: &lt;a href=&quot;x-format-descriptor-without-count-field#X-format-descriptor-without-count-field&quot;&gt;X format descriptor without count field&lt;/a&gt;, Previous: &lt;a href=&quot;old_002dstyle-variable-initialization#Old_002dstyle-variable-initialization&quot;&gt;Old-style variable initialization&lt;/a&gt;, Up: &lt;a href=&quot;extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran&quot;&gt;Extensions implemented in GNU Fortran&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f5c0783b76f06f0d19c05789a67590a8109885" translate="yes" xml:space="preserve">
          <source>No intrinsic exists to convert between a numeric value and a formatted character string representation &amp;ndash; for instance, given the &lt;code&gt;CHARACTER&lt;/code&gt; value &lt;code&gt;'154'&lt;/code&gt;, obtaining an &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt; value with the value 154, or vice versa. Instead, this functionality is provided by internal-file I/O, as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e9588378fa1734d088110502f5010ba417de51" translate="yes" xml:space="preserve">
          <source>No separator between records</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f3ce6db4f94f713cb22be03bc29f91c7e27164" translate="yes" xml:space="preserve">
          <source>Non-pointer variables with &lt;code&gt;TARGET&lt;/code&gt; attribute can be used as actual argument to &lt;code&gt;POINTER&lt;/code&gt; dummies with &lt;code&gt;INTENT(IN)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe2bf8dda1239bf312bb0f9cc95282355f87856" translate="yes" xml:space="preserve">
          <source>Nonalloatable coarrays have to be registered prior use from remote images. In order to guarantee this, they have to be registered before the main program. This can be achieved by creating constructor functions. That is what GCC does such that also nonallocatable coarrays the memory is allocated and no static memory is used. The token permits to identify the coarray; to the processor, the token is a nonaliasing pointer. The library can, for instance, store the base address of the coarray in the token, some handle or a more complicated struct. The library may also store the array descriptor &lt;var&gt;DESC&lt;/var&gt; when its rank is non-zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eef6648406c333a4035cd5e60d0bf2ecf2606d7" translate="yes" xml:space="preserve">
          <source>None</source>
          <target state="translated">None</target>
        </trans-unit>
        <trans-unit id="9a9707be07da6862114abd49d2570046d4810ca5" translate="yes" xml:space="preserve">
          <source>None.</source>
          <target state="translated">None.</target>
        </trans-unit>
        <trans-unit id="d5a8f130ad0ce8e17ea62550e29ab4aa1511bec2" translate="yes" xml:space="preserve">
          <source>Normally &lt;code&gt;%LOC&lt;/code&gt; is allowed only in parameter lists. However the intrinsic function &lt;code&gt;LOC&lt;/code&gt; does the same thing, and is usable as the right-hand-side of assignments. For compatibility, GNU Fortran supports the use of &lt;code&gt;%LOC&lt;/code&gt; as an alias for the builtin &lt;code&gt;LOC&lt;/code&gt; with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9692e469136a4123089c8e5bef987162bd00d5" translate="yes" xml:space="preserve">
          <source>Not all these elements are relevant on all systems. If an element is not relevant, it is returned as 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a4113bd9ede143bb2302d6df4a5dd6809acfdc" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;GETENV&lt;/code&gt; need not be thread-safe. It is the responsibility of the user to ensure that the environment is not being updated concurrently with a call to the &lt;code&gt;GETENV&lt;/code&gt; intrinsic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09a6b7603f4c686a6c657819bdd9f41de1d8ae4" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;GET_ENVIRONMENT_VARIABLE&lt;/code&gt; need not be thread-safe. It is the responsibility of the user to ensure that the environment is not being updated concurrently with a call to the &lt;code&gt;GET_ENVIRONMENT_VARIABLE&lt;/code&gt; intrinsic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9428370488177c8b3d8b83b6a9c6a0e3d97c1423" translate="yes" xml:space="preserve">
          <source>Note that &lt;var&gt;TIME&lt;/var&gt; may contain a, system dependent, arbitrary offset and may not start with &lt;code&gt;0.0&lt;/code&gt;. For &lt;code&gt;CPU_TIME&lt;/code&gt;, the absolute value is meaningless, only differences between subsequent calls to this subroutine, as shown in the example below, should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724abbd829e6cc2361d4ae2fff6eee278972db14" translate="yes" xml:space="preserve">
          <source>Note that array dimensions are reversely ordered in C and that arrays in C always start with index 0 while in Fortran they start by default with 1. Thus, an array declaration &lt;code&gt;A(n,m)&lt;/code&gt; in Fortran matches &lt;code&gt;A[m][n]&lt;/code&gt; in C and accessing the element &lt;code&gt;A(i,j)&lt;/code&gt; matches &lt;code&gt;A[j-1][i-1]&lt;/code&gt;. The element following &lt;code&gt;A(i,j)&lt;/code&gt; (C: &lt;code&gt;A[j-1][i-1]&lt;/code&gt;; assuming &lt;em&gt;i &amp;lt; n&lt;/em&gt;) in memory is &lt;code&gt;A(i+1,j)&lt;/code&gt; (C: &lt;code&gt;A[j-1][i]&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8df0b8d11a3017d38fa311af3f8b1cf5d5d8bfc1" translate="yes" xml:space="preserve">
          <source>Note that in a multi-threaded program (e.g. using OpenMP directives), each thread will have its own random number state. For details of the seeding procedure, see the documentation for the &lt;code&gt;RANDOM_SEED&lt;/code&gt; intrinsic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0492db9b2e09c6a81e9368a1ecea6ff4b686c186" translate="yes" xml:space="preserve">
          <source>Note that initializing an &lt;code&gt;INTEGER&lt;/code&gt; variable with a statement such as &lt;code&gt;DATA i/Z'FFFFFFFF'/&lt;/code&gt; will give an integer overflow error rather than the desired result of &lt;em&gt;-1&lt;/em&gt; when &lt;code&gt;i&lt;/code&gt; is a 32-bit integer on a system that supports 64-bit integers. The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6268da71b8d3fed9a7df585844be9dd2d2cc358" translate="yes" xml:space="preserve">
          <source>Note that just because the names match does &lt;em&gt;not&lt;/em&gt; mean that the interface implemented by GNU Fortran for an external name matches the interface implemented by some other language for that same name. That is, getting code produced by GNU Fortran to link to code produced by some other compiler using this or any other method can be only a small part of the overall solution&amp;mdash;getting the code generated by both compilers to agree on issues other than naming can require significant effort, and, unlike naming disagreements, linkers normally cannot detect disagreements in these other areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb739454e5576698283f004a3baaf93d546e745" translate="yes" xml:space="preserve">
          <source>Note that pointer arguments also frequently need the &lt;code&gt;VALUE&lt;/code&gt; attribute, see &lt;a href=&quot;working-with-pointers#Working-with-Pointers&quot;&gt;Working with Pointers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643a90b7cc572aa8f24a2a4aeec18309319e74d7" translate="yes" xml:space="preserve">
          <source>Note that the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ffab44d1000739ba584c6f7da775a57eec48c0" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;FGET&lt;/code&gt; intrinsic is provided for backwards compatibility with &lt;code&gt;g77&lt;/code&gt;. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also &lt;a href=&quot;fortran-2003-status#Fortran-2003-status&quot;&gt;Fortran 2003 status&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b300932207361024e4ba1ed8208d90addb927f3" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;system&lt;/code&gt; function need not be thread-safe. It is the responsibility of the user to ensure that &lt;code&gt;system&lt;/code&gt; is not called concurrently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a90d8db26d77a0ba7651999d8ecf5008c11016" translate="yes" xml:space="preserve">
          <source>Note that the assignment of a scalar to an array is permitted. In addition, the library has to handle numeric-type conversion and for strings, padding and different character kinds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af5d34475b687fba19b9985fef68c630cd211a96" translate="yes" xml:space="preserve">
          <source>Note that the library has to handle numeric-type conversion and for strings, padding and different character kinds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f64f00b7e1d7561343d5c9de1e9e90a10342082" translate="yes" xml:space="preserve">
          <source>Note that this conversion will occur if at least one operand is of integral type. As a result, a logical operand will be converted to an integer when the other operand is an integer in a logical operation. In this case, &lt;code&gt;.TRUE.&lt;/code&gt; is converted to &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;.FALSE.&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32318606d957bff5cc6453287f341aa288c1a6e" translate="yes" xml:space="preserve">
          <source>Note that this is an experimental feature, incomplete, and subject to change in future versions of GCC. See &lt;a href=&quot;https://gcc.gnu.org/wiki/OpenACC&quot;&gt;https://gcc.gnu.org/wiki/OpenACC&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5719c026b3b364ce2031eb5fb13e494c260bea1b" translate="yes" xml:space="preserve">
          <source>Note that variables which are explicitly initialized in declarations or in &lt;code&gt;DATA&lt;/code&gt; statements automatically acquire the &lt;code&gt;SAVE&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb9f48edd061366f9a394cd45db21d066208b99" translate="yes" xml:space="preserve">
          <source>Note, however, that &lt;code&gt;TYPE(*)&lt;/code&gt; only accepts scalar arguments, unless the &lt;code&gt;DIMENSION&lt;/code&gt; is explicitly specified. As &lt;code&gt;DIMENSION(*)&lt;/code&gt; only supports array (including array elements) but no scalars, it is not a full replacement for &lt;code&gt;C_LOC&lt;/code&gt;. On the other hand, assumed-type assumed-rank dummy arguments (&lt;code&gt;TYPE(*), DIMENSION(..)&lt;/code&gt;) allow for both scalars and arrays, but require special code on the callee side to handle the array descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83423c198b6099edba08f185f940042d5dba3b79" translate="yes" xml:space="preserve">
          <source>Note:</source>
          <target state="translated">Note:</target>
        </trans-unit>
        <trans-unit id="06ec448757ab0d461600f5726a5d3fbeb29ee937" translate="yes" xml:space="preserve">
          <source>Note: Currently, GNU Fortran does not support the array descriptor (dope vector) as specified in the Technical Specification, but uses an array descriptor with different fields. The Chasm Language Interoperability Tools, &lt;a href=&quot;http://chasm-interop.sourceforge.net/&quot;&gt;http://chasm-interop.sourceforge.net/&lt;/a&gt;, provide an interface to GNU Fortran&amp;rsquo;s array descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda0ab1eeb6cd0ce9fdfa4b078d9fbe22a43bba1" translate="yes" xml:space="preserve">
          <source>Note: In the future this may also include other forms of checking, e.g., checking substring references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ace1158b7aa64bba3bf887a0e518662f0af8c7" translate="yes" xml:space="preserve">
          <source>Note: The warning is only printed once per location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3befe7e22c8667bc957541f49b0ee79970b588" translate="yes" xml:space="preserve">
          <source>Notes:</source>
          <target state="translated">Notes:</target>
        </trans-unit>
        <trans-unit id="b62a5d065d926f5ac84b0a0fa0edaf2ee4fe7a12" translate="yes" xml:space="preserve">
          <source>Null pointers (including &lt;code&gt;NULL()&lt;/code&gt;) and not-allocated variables can be used as actual argument to optional non-pointer, non-allocatable dummy arguments, denoting an absent argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66becde1907b2ea47dd72508e0ba88a8a59db56e" translate="yes" xml:space="preserve">
          <source>Number of bits set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1b052dbeb67238bbc44157b877f0ec5b34e85c" translate="yes" xml:space="preserve">
          <source>Number of blocks allocated (-1 if not available)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f08cacb10562f2a83dc90f5805f7a9a6c89a33" translate="yes" xml:space="preserve">
          <source>Number of days since Sunday, range 0&amp;ndash;6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e110986fe0fa2ef3141d3cfa2f47a37526d860a0" translate="yes" xml:space="preserve">
          <source>Number of images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc37770edd8de99a01b6d25f46f0250036ac7ae" translate="yes" xml:space="preserve">
          <source>Number of leading zero bits of an integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3275a16ef5f550e3a9777e377a1e501bfdab390" translate="yes" xml:space="preserve">
          <source>Number of links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4dc77ae1d9e332a6f5838f60193c10563e04838" translate="yes" xml:space="preserve">
          <source>Number of months since January, range 0&amp;ndash;11</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16ba369e76f8ff0a6572719261f465061fdfe74" translate="yes" xml:space="preserve">
          <source>Number of trailing zero bits of an integer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a62380404b3b267a5c4e21b5e111455d09031e" translate="yes" xml:space="preserve">
          <source>Numeric</source>
          <target state="translated">Numeric</target>
        </trans-unit>
        <trans-unit id="ee51e073da81fd57ffa6120e365108d0dffb43f1" translate="yes" xml:space="preserve">
          <source>Obtain the C address of a procedure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bb5b7e32480087e2fdb2a1b1e9df92eebe17ce" translate="yes" xml:space="preserve">
          <source>Obtain the C address of an object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733abab1a15c197f5021c3d3e2d99f66dbfb001d" translate="yes" xml:space="preserve">
          <source>Obtaining the value of a variable atomically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb11d089e173fd344f11980aa63730eec1cfe22" translate="yes" xml:space="preserve">
          <source>Old-style use of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a01d4ca6f8f100cbd3d4d79210deca4d95f8c0" translate="yes" xml:space="preserve">
          <source>On POSIX systems, you can request that all data is transferred to the storage device by calling the &lt;code&gt;fsync&lt;/code&gt; function, with the POSIX file descriptor of the I/O unit as argument (retrieved with GNU intrinsic &lt;code&gt;FNUM&lt;/code&gt;). The following example shows how:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e7f6b017d40505701d13f8a985c048a2b45983" translate="yes" xml:space="preserve">
          <source>On glibc-based systems, OpenMP enabled applications cannot be statically linked due to limitations of the underlying pthreads-implementation. It might be possible to get a working solution if &lt;code&gt;-Wl,--whole-archive -lpthread -Wl,--no-whole-archive&lt;/code&gt; is added to the command line. However, this is not supported by &lt;code&gt;gcc&lt;/code&gt; and thus not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f79a499f7d72cd79670baf1b39413cf67e49c1" translate="yes" xml:space="preserve">
          <source>On some systems, procedures and global variables (module variables and &lt;code&gt;COMMON&lt;/code&gt; blocks) need special handling to be accessible when they are in a shared library. The following attributes are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47322040adf06b71f362aea92753f5851d86b784" translate="yes" xml:space="preserve">
          <source>On some systems, the underlying timings are represented using types with sufficiently small limits that overflows (wrap around) are possible, such as 32-bit types. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61759f6ed3890f04c249dd91cb9dd263d93f566" translate="yes" xml:space="preserve">
          <source>On systems that provide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ee8d0fdf93e090b1f57bcee57b2ae7b06a8eee" translate="yes" xml:space="preserve">
          <source>On the MinGW target, the directory returned by the &lt;code&gt;GetTempPath&lt;/code&gt; function. Alternatively, on the Cygwin target, the &lt;code&gt;TMP&lt;/code&gt; and &lt;code&gt;TEMP&lt;/code&gt; environment variables, if they exist, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b8f5a70407d020355a02c665efcf512778b05e" translate="yes" xml:space="preserve">
          <source>On the Windows platform, the version with &lt;var&gt;kind=4&lt;/var&gt; arguments uses the &lt;code&gt;GetTickCount&lt;/code&gt; function, whereas the &lt;var&gt;kind=8&lt;/var&gt; version uses &lt;code&gt;QueryPerformanceCounter&lt;/code&gt; and &lt;code&gt;QueryPerformanceCounterFrequency&lt;/code&gt;. For more information, and potential caveats, please see the platform documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35edbcf9b53e992f19170d481fdc4fd98480199" translate="yes" xml:space="preserve">
          <source>One line feed between records (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c99df0ba2459ad70c6cb72e9a46e2a6e8d9027" translate="yes" xml:space="preserve">
          <source>Only significant when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc68b383682db709a9166e665766fcd902b2ad2" translate="yes" xml:space="preserve">
          <source>Opaque pointer to represent a team-handle. This type is a stand-in for the future implementation of teams. It is about to change without further notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="802b48e116b59b82aa7d37d5ce4583c61f5ad838" translate="yes" xml:space="preserve">
          <source>OpenACC Application Programming Interface v2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bb820ffe55a1c4f7f37dc7f2adaf3b90e7ae64" translate="yes" xml:space="preserve">
          <source>OpenACC is an application programming interface (API) that supports offloading of code to accelerator devices. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f42afc0137056f2547dddee077a8893c7c0335" translate="yes" xml:space="preserve">
          <source>OpenMP (Open Multi-Processing) is an application programming interface (API) that supports multi-platform shared memory multiprocessing programming in C/C++ and Fortran on many architectures, including Unix and Microsoft Windows platforms. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9f0af27ee41aea23dd75b086ccaab2d414313e" translate="yes" xml:space="preserve">
          <source>OpenMP Application Program Interface v4.5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="2c7ca22e5600046b144f3d24624f25c564332dee" translate="yes" xml:space="preserve">
          <source>Option Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48945fda6c17d686363d5183bb3c39690f1e7726" translate="yes" xml:space="preserve">
          <source>Options passed to the compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d6d563333ba52b4c5ea636840c0e6845a21420" translate="yes" xml:space="preserve">
          <source>Other flags enabled by this switch are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6514709ce45799c9611d2f989136e0a99eb3bf" translate="yes" xml:space="preserve">
          <source>Otherwise, with this option, an external name such as &lt;code&gt;MAX_COUNT&lt;/code&gt; is implemented as a reference to the link-time external symbol &lt;code&gt;max_count__&lt;/code&gt;, instead of &lt;code&gt;max_count_&lt;/code&gt;. This is required for compatibility with &lt;code&gt;g77&lt;/code&gt; and &lt;code&gt;f2c&lt;/code&gt;, and is implied by use of the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dde64e363b6994a9c86a118d350dc4f266d578d" translate="yes" xml:space="preserve">
          <source>Output &lt;code&gt;'#include'&lt;/code&gt; directives in addition to the result of preprocessing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec9ca4d715199b089af5de23f7ac0f5c33f5cc5" translate="yes" xml:space="preserve">
          <source>Output separating character(s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049a6e0d39abc4f4b61a8402d63a003f45ebbd54" translate="yes" xml:space="preserve">
          <source>Output the internal parse tree after translating the source program into internal representation. Only really useful for debugging the GNU Fortran compiler itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f079cf82231824831cbdcfee66afe3eca67557f6" translate="yes" xml:space="preserve">
          <source>Output the internal parse tree after translating the source program into internal representation. Only really useful for debugging the GNU Fortran compiler itself. This option is deprecated; use &lt;code&gt;-fdump-fortran-original&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b4212d1270db9fecb872eb55d55a4623a51798" translate="yes" xml:space="preserve">
          <source>Output the parse tree after front-end optimization. Only really useful for debugging the GNU Fortran compiler itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad51469697a69d77e4dcc2b16290dc625c1725b" translate="yes" xml:space="preserve">
          <source>Overprinting</source>
          <target state="translated">Overprinting</target>
        </trans-unit>
        <trans-unit id="48a75e7d06bee25f05d21fbcd7985cbe3dc0f1bd" translate="yes" xml:space="preserve">
          <source>Overprinting (no advance)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21006e5db840943dd401c3c0d3393102d0e40842" translate="yes" xml:space="preserve">
          <source>Owner&amp;rsquo;s gid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc953f940adefbd3d194a168291ef11edb029374" translate="yes" xml:space="preserve">
          <source>Owner&amp;rsquo;s uid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcb6973e5866c4f785dbac99992209c3deb6f56" translate="yes" xml:space="preserve">
          <source>PERROR</source>
          <target state="translated">PERROR</target>
        </trans-unit>
        <trans-unit id="964bd5656c7a016ef0c9ada7382da7ca1fee27a4" translate="yes" xml:space="preserve">
          <source>PRODUCT</source>
          <target state="translated">PRODUCT</target>
        </trans-unit>
        <trans-unit id="43e5a5cc98c84aad675e1f5a3811f793169a2579" translate="yes" xml:space="preserve">
          <source>Pack an array into an array of rank one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d799a2979091ad29c697b9fbf05f972e59218b5" translate="yes" xml:space="preserve">
          <source>Parity of the number of bits set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7996240e9ec60517273e2572d4e2e1f9a0bf3284" translate="yes" xml:space="preserve">
          <source>Part I: Invoking GNU Fortran</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf9db06c515d3ddc73d3e3859ee4729bcb2de2b" translate="yes" xml:space="preserve">
          <source>Part II: Language Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28336c64804913385c13c2e8eb52dfe1af1e6f7" translate="yes" xml:space="preserve">
          <source>Passes the command &lt;var&gt;COMMAND&lt;/var&gt; to a shell (see &lt;code&gt;system(3)&lt;/code&gt;). If argument &lt;var&gt;STATUS&lt;/var&gt; is present, it contains the value returned by &lt;code&gt;system(3)&lt;/code&gt;, which is presumably 0 if the shell command succeeded. Note that which shell is used to invoke the command is system-dependent and environment-dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2b99b877c651a1782bcf98ec81aa469e228dbb" translate="yes" xml:space="preserve">
          <source>Performs a matrix multiplication on numeric or logical arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813909da923068de4b80faba54cf9661fb546cc5" translate="yes" xml:space="preserve">
          <source>Please note that GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also &lt;a href=&quot;fortran-2003-status#Fortran-2003-status&quot;&gt;Fortran 2003 status&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7bc9c8f0b42a0a5d21f2281c64c3b4f24f58f2" translate="yes" xml:space="preserve">
          <source>Please note that in GNU Fortran, these two sets of intrinsics (&lt;code&gt;RAND&lt;/code&gt;, &lt;code&gt;IRAND&lt;/code&gt; and &lt;code&gt;SRAND&lt;/code&gt; on the one hand, &lt;code&gt;RANDOM_NUMBER&lt;/code&gt; and &lt;code&gt;RANDOM_SEED&lt;/code&gt; on the other hand) access two independent pseudo-random number generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da73b2879dd6c7d1424ac8e32e68cb5dc6cd162" translate="yes" xml:space="preserve">
          <source>Please note, that this implementation is thread safe if used within OpenMP directives, i.e., its state will be consistent while called from multiple threads. However, if &lt;code&gt;DTIME&lt;/code&gt; is called from multiple threads, the result is still the time since the last invocation. This may not give the intended results. If possible, use &lt;code&gt;CPU_TIME&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b092b192a4d648e172b4a375b0666e778cde5015" translate="yes" xml:space="preserve">
          <source>Please note:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94da1cf066c95bd8c992d2c60a9e2bda67407f74" translate="yes" xml:space="preserve">
          <source>Pointer arithmetic is valid with Cray pointers, but it is not the same as C pointer arithmetic. Cray pointers are just ordinary integers, so the user is responsible for determining how many bytes to add to a pointer in order to increment it. Consider the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa85b7a2c6b924068750dc9be8923d3de63c6cfc" translate="yes" xml:space="preserve">
          <source>Pointer/pointee pairs are declared in statements of the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f29d99fd6a6e0d0819156163e126809613b840" translate="yes" xml:space="preserve">
          <source>Pointers including procedure pointers and those in a derived type (pointer components) can now be initialized by a target instead of only by &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9faed1c330b5c2318a30adc5278e204178a467c" translate="yes" xml:space="preserve">
          <source>Polymorphic entities (&amp;ldquo;&lt;code&gt;CLASS&lt;/code&gt;&amp;rdquo;) for derived types and unlimited polymorphism (&amp;ldquo;&lt;code&gt;CLASS(*)&lt;/code&gt;&amp;rdquo;) &amp;ndash; including &lt;code&gt;SAME_TYPE_AS&lt;/code&gt;, &lt;code&gt;EXTENDS_TYPE_OF&lt;/code&gt; and &lt;code&gt;SELECT TYPE&lt;/code&gt; for scalars and arrays and finalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34c9a50b345b1c4e8de1d279b14fc51316efc05" translate="yes" xml:space="preserve">
          <source>Popular values for &lt;var&gt;n&lt;/var&gt; include 72 (the standard and the default), 80 (card image), and 132 (corresponding to &amp;ldquo;extended-source&amp;rdquo; options in some popular compilers). &lt;var&gt;n&lt;/var&gt; may also be &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43961c9783621d3b1501833d80b2708317d64014" translate="yes" xml:space="preserve">
          <source>Position of a substring within a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4421d7ce618ef5e51024c273f2f7fd364823ee" translate="yes" xml:space="preserve">
          <source>Positive difference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2723124ed203b84036ae3eafe109e54fb05b87d" translate="yes" xml:space="preserve">
          <source>Positive, scalar default-integer constant used as STAT= return value if the argument in the statement requires communication with an image, which has is in the failed state. (TS 18508 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd427f4ed18fd873f9d744b6904a336c7bb7477d" translate="yes" xml:space="preserve">
          <source>Positive, scalar default-integer constant used as STAT= return value if the argument in the statement requires synchronisation with an image, which has initiated the termination of the execution. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5461b2b4dd5f4c8b4ccb33c1cc90f22406e958" translate="yes" xml:space="preserve">
          <source>Post an event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c647105056e253fc65667f55fcc8604c6c25b3e5" translate="yes" xml:space="preserve">
          <source>Predefine name as a macro, with definition &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1eef140451d333cac5a6bcd1f4fe2010bd2abd7" translate="yes" xml:space="preserve">
          <source>Preferred I/O block size (-1 if not available)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a7b318b2180a1eea0d2cdfcfe0f0063a794160" translate="yes" xml:space="preserve">
          <source>Preprocessing Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec1f4538c9a0e3f79c7a64d1e1f2818e3ec924a" translate="yes" xml:space="preserve">
          <source>Preprocessor related options. See section &lt;a href=&quot;preprocessing-and-conditional-compilation#Preprocessing-and-conditional-compilation&quot;&gt;Preprocessing and conditional compilation&lt;/a&gt; for more detailed information on preprocessing in &lt;code&gt;gfortran&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d9cfb6b0f4f68b9a81d03b945f7cc16162fbe7" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;_005fgfortran_005fcaf_005fco_005fsum#g_t_005fgfortran_005fcaf_005fco_005fsum&quot;&gt;_gfortran_caf_co_sum&lt;/a&gt;, Up: &lt;a href=&quot;function-abi-documentation#Function-ABI-Documentation&quot;&gt;Function ABI Documentation&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d10b1bef971d0603567c3c65370e38ad1b8060" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;naming-conventions#Naming-conventions&quot;&gt;Naming conventions&lt;/a&gt;, Up: &lt;a href=&quot;naming-and-argument_002dpassing-conventions#Naming-and-argument_002dpassing-conventions&quot;&gt;Naming and argument-passing conventions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d8f770d45cf5b5588efdbce6041a9c0fef02b4" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;type-and-enum-abi-documentation#Type-and-enum-ABI-Documentation&quot;&gt;Type and enum ABI Documentation&lt;/a&gt;, Up: &lt;a href=&quot;coarray-programming#Coarray-Programming&quot;&gt;Coarray Programming&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c4c1971734c8eab2b0c2ef1ff1e9298f6ccc26" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;working-with-pointers#Working-with-Pointers&quot;&gt;Working with Pointers&lt;/a&gt;, Up: &lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Interoperability with C&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.2.0/gfortran/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bb9d1450c43cefd066f2c7341cf8cd86e9bd51" translate="yes" xml:space="preserve">
          <source>Print leading + where permitted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ebf11b6345734fa01d4a496fd987189b92f4db" translate="yes" xml:space="preserve">
          <source>Print system error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c0f9bec7d0625d20c3142e1d8d388dff3c9dc1" translate="yes" xml:space="preserve">
          <source>Print the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the &lt;code&gt;'#include'&lt;/code&gt; stack it is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b3a062d3f220b94878645c788e35e344e763a7" translate="yes" xml:space="preserve">
          <source>Prints (on the C &lt;code&gt;stderr&lt;/code&gt; stream) a newline-terminated error message corresponding to the last system error. This is prefixed by &lt;var&gt;STRING&lt;/var&gt;, a colon and a space. See &lt;code&gt;perror(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d092df748797cbd6127732a5c8e96ed2d9f2602" translate="yes" xml:space="preserve">
          <source>Procedure pointers are handled analogously to pointers; the C type is &lt;code&gt;TYPE(C_FUNPTR)&lt;/code&gt; and the intrinsic conversion procedures are &lt;code&gt;C_F_PROCPOINTER&lt;/code&gt; and &lt;code&gt;C_FUNLOC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199d18d52a5d3e64cf2744079c521b6d2d4aa2fb" translate="yes" xml:space="preserve">
          <source>Procedure pointers including procedure-pointer components with &lt;code&gt;PASS&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44db8e5e32f5ad7aa1beb6d5312b1b72ae5c51b4" translate="yes" xml:space="preserve">
          <source>Procedures which are bound to a derived type (type-bound procedures) including &lt;code&gt;PASS&lt;/code&gt;, &lt;code&gt;PROCEDURE&lt;/code&gt; and &lt;code&gt;GENERIC&lt;/code&gt;, and operators bound to a type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c94e2be529e948d83d22fde4653baf3f59925a4" translate="yes" xml:space="preserve">
          <source>Process ID function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e0d5f4d15efe2de2baa38cee222d6d3cfa9a94" translate="yes" xml:space="preserve">
          <source>Produce a warning if a real-literal-constant contains a &lt;code&gt;q&lt;/code&gt; exponent-letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ee3fdada6f62d633bc6690a4bd40295358dff8" translate="yes" xml:space="preserve">
          <source>Produce a warning when &amp;ldquo;suspicious&amp;rdquo; code constructs are encountered. While technically legal these usually indicate that an error has been made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d10a60330a0dbfe20c1306c7bb32b36f13fdc6" translate="yes" xml:space="preserve">
          <source>Produce a warning when numerical constant expressions are encountered, which yield an UNDERFLOW during compilation. Enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888c11a0d840c7f6411561a2f7bb2d447eb34353" translate="yes" xml:space="preserve">
          <source>Product of array elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e890d5f0fffe09587c55dce74e9a6febf59b5c" translate="yes" xml:space="preserve">
          <source>Projects</source>
          <target state="translated">Projects</target>
        </trans-unit>
        <trans-unit id="b55afeae061537f9d4f00a095156cff2a7fdbfa0" translate="yes" xml:space="preserve">
          <source>Promote all &lt;code&gt;INTEGER(KIND=4)&lt;/code&gt; entities to an &lt;code&gt;INTEGER(KIND=8)&lt;/code&gt; entities. If &lt;code&gt;KIND=8&lt;/code&gt; is unavailable, then an error will be issued. This option should be used with care and may not be suitable for your codes. Areas of possible concern include calls to external procedures, alignment in &lt;code&gt;EQUIVALENCE&lt;/code&gt; and/or &lt;code&gt;COMMON&lt;/code&gt;, generic interfaces, BOZ literal constant conversion, and I/O. Inspection of the intermediate representation of the translated Fortran code, produced by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de50d1ba76c90eb1d66a6b47f2f4b47451dcd6eb" translate="yes" xml:space="preserve">
          <source>Promote all &lt;code&gt;REAL(KIND=M)&lt;/code&gt; entities to &lt;code&gt;REAL(KIND=N)&lt;/code&gt; entities. If &lt;code&gt;REAL(KIND=N)&lt;/code&gt; is unavailable, then an error will be issued. All other real kind types are unaffected by this option. These options should be used with care and may not be suitable for your codes. Areas of possible concern include calls to external procedures, alignment in &lt;code&gt;EQUIVALENCE&lt;/code&gt; and/or &lt;code&gt;COMMON&lt;/code&gt;, generic interfaces, BOZ literal constant conversion, and I/O. Inspection of the intermediate representation of the translated Fortran code, produced by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d970e24b22fc0f6e277e6e1b9c10241b2293ff1" translate="yes" xml:space="preserve">
          <source>Prompting</source>
          <target state="translated">Prompting</target>
        </trans-unit>
        <trans-unit id="e3db19e90351c81a97e675f08dca5933ab2300d2" translate="yes" xml:space="preserve">
          <source>Proposed Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75c2520586325667a1286e64c3455b3fd1ff5a2" translate="yes" xml:space="preserve">
          <source>Provide information in the generated machine code that can make it easier to find bugs in the program (using a debugging tool, called a &lt;em&gt;debugger&lt;/em&gt;, such as the GNU Debugger &lt;code&gt;gdb&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77c6d0204499637744e3994eb55d5a8bb470cf0" translate="yes" xml:space="preserve">
          <source>Provide optional information about the translation passes from the source code to machine code. This can help a user of the compiler to find the cause of certain bugs which may not be obvious in the source code, but may be more easily found at a lower level compiler output. It also helps developers to find bugs in the compiler itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed9ae773ed61023d9933122fb21bbbc2c04e253" translate="yes" xml:space="preserve">
          <source>Provide the user with information about the reasons why the compiler is unable to create a binary from the source code. Usually this will be the case if the source code is flawed. The Fortran 90 standard requires that the compiler can point out mistakes to the user. An incorrect usage of the language causes an &lt;em&gt;error message&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909db5eb0e1b9292b4d975ca6b0fd2e82b4bb47e" translate="yes" xml:space="preserve">
          <source>Pseudo-random number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579a7acadd5f22fba9efcaa3c828e6c13c68aaea" translate="yes" xml:space="preserve">
          <source>Pure subroutine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5f88397a19782271a358bded55e68096f2ef71" translate="yes" xml:space="preserve">
          <source>Query dynamic type for extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df438339c33a8643f7fd168a36371353010a7a7" translate="yes" xml:space="preserve">
          <source>Query dynamic type for extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd4886b77d8b6e970c8345809c78684aa1ddf02" translate="yes" xml:space="preserve">
          <source>Query dynamic types for equality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c4d609281429eb5186cd250ef9630b2474cc22" translate="yes" xml:space="preserve">
          <source>Query dynamic types for equality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eed78b83ab60872b9a96907ce720eed87713b18" translate="yes" xml:space="preserve">
          <source>Query event count</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9211b86dee9a3c593770b61de98e3545eddad0" translate="yes" xml:space="preserve">
          <source>Query the status of an image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbdfe86e65cbb3a60624dd936f1de65a4f568e0" translate="yes" xml:space="preserve">
          <source>Query whether a coarray event has occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708f0ab8f54b828797efd98eb92cb5f851c444f0" translate="yes" xml:space="preserve">
          <source>Query whether an allocatable or pointer component in a derived type coarray is allocated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d5cc4a5c736d61d608f7a7d7f1cda0c658af37" translate="yes" xml:space="preserve">
          <source>Querying of the namelist when inputting from stdin. After at least one space, entering &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9691cd0a4e2376da115e3c1e8dbb7ef68c3e19" translate="yes" xml:space="preserve">
          <source>Querying the image number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c64ca7b42abe031d48fa6c76aac6ae0cb197e2" translate="yes" xml:space="preserve">
          <source>Querying the maximal number of images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b42c823f76426efb3c69829a0fd4edff57afc98" translate="yes" xml:space="preserve">
          <source>RANDOM_NUMBER</source>
          <target state="translated">RANDOM_NUMBER</target>
        </trans-unit>
        <trans-unit id="e9cfcf1ed94f186da9d07f805d39597b66ef95d9" translate="yes" xml:space="preserve">
          <source>RANDOM_SEED</source>
          <target state="translated">RANDOM_SEED</target>
        </trans-unit>
        <trans-unit id="3b330731a188b19fdf61999609e5e9b932bb400b" translate="yes" xml:space="preserve">
          <source>REAL</source>
          <target state="translated">REAL</target>
        </trans-unit>
        <trans-unit id="7d84a3e5b07a2b5d39bd388741475d8fdca9644b" translate="yes" xml:space="preserve">
          <source>RRSPACING</source>
          <target state="translated">RRSPACING</target>
        </trans-unit>
        <trans-unit id="3a32fcec1ddd2e520fb2d6e9d97ed3896c07ce0d" translate="yes" xml:space="preserve">
          <source>Radians</source>
          <target state="translated">Radians</target>
        </trans-unit>
        <trans-unit id="a3f9157be4fde8f029725f1b459856f45d81b1f5" translate="yes" xml:space="preserve">
          <source>Rank of a data object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6265c150435be8993bdc284b5236ec8abc2fad7d" translate="yes" xml:space="preserve">
          <source>Read a single character in stream mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c633534fc1dcbd9c71e2b96cb72e36cc2662281" translate="yes" xml:space="preserve">
          <source>Read a single character in stream mode by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecb48a96fb1f599257704f953bcfd32df4636d1" translate="yes" xml:space="preserve">
          <source>Read a single character in stream mode from stdin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e6d5cc66aee9a85ab48f5b952a51c535b7fcce" translate="yes" xml:space="preserve">
          <source>Read a single character in stream mode from stdin by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc2621115158c83661b1f08a00ba067cab374d5" translate="yes" xml:space="preserve">
          <source>Read a user&amp;rsquo;s program, stored in a file and containing instructions written in Fortran 77, Fortran 90, Fortran 95, Fortran 2003 or Fortran 2008. This file contains &lt;em&gt;source code&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b4efea8401571f231b81413b510c260f922c70" translate="yes" xml:space="preserve">
          <source>Real pseudo-random number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d82bf67110a67e1072286d2f3f5043a2d366ad4" translate="yes" xml:space="preserve">
          <source>Reallocation on assignment: If an intrinsic assignment is used, an allocatable variable on the left-hand side is automatically allocated (if unallocated) or reallocated (if the shape is different). Currently, scalar deferred character length left-hand sides are correctly handled but arrays are not yet fully implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471e0ab6c79c61a68b1bf7675103e3b09c060ef3" translate="yes" xml:space="preserve">
          <source>Reciprocal of the relative spacing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915219d1724598e53858bdf9be534914daf51c91" translate="yes" xml:space="preserve">
          <source>Record structures are a pre-Fortran-90 vendor extension to create user-defined aggregate data types. Support for record structures in GNU Fortran can be enabled with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784ed76b00380aa96ebb35d5f4282f756339bf78" translate="yes" xml:space="preserve">
          <source>Reduces with bitwise AND the elements of &lt;var&gt;ARRAY&lt;/var&gt; along dimension &lt;var&gt;DIM&lt;/var&gt; if the corresponding element in &lt;var&gt;MASK&lt;/var&gt; is &lt;code&gt;TRUE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e358a11dc1812c2cae2cd4678cf9f9217aa256" translate="yes" xml:space="preserve">
          <source>Reduces with bitwise OR (inclusive or) the elements of &lt;var&gt;ARRAY&lt;/var&gt; along dimension &lt;var&gt;DIM&lt;/var&gt; if the corresponding element in &lt;var&gt;MASK&lt;/var&gt; is &lt;code&gt;TRUE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af11996db1d7d8cb30f228d093cbf1b235b41677" translate="yes" xml:space="preserve">
          <source>Reduces with bitwise XOR (exclusive or) the elements of &lt;var&gt;ARRAY&lt;/var&gt; along dimension &lt;var&gt;DIM&lt;/var&gt; if the corresponding element in &lt;var&gt;MASK&lt;/var&gt; is &lt;code&gt;TRUE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93683af5b225a1c4d29feb9eb20aa0d0f5d6f1a2" translate="yes" xml:space="preserve">
          <source>Reduction of values on the current set of images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cd255ab70f8dd97db678a96e329251cb6734f5" translate="yes" xml:space="preserve">
          <source>Reduction with exclusive OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85f78462a60787bc304b820a6262cd46439da2e" translate="yes" xml:space="preserve">
          <source>Reference atomically a value of a kind-4 integer or logical variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a1d967d3429d1413f82c801cf5e474fb4664d7" translate="yes" xml:space="preserve">
          <source>Registering coarrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e5972f3d0080237634a6d20f2a3e2e1a7ba301" translate="yes" xml:space="preserve">
          <source>Registers memory for a coarray and creates a token to identify the coarray. The routine is called for both coarrays with &lt;code&gt;SAVE&lt;/code&gt; attribute and using an explicit &lt;code&gt;ALLOCATE&lt;/code&gt; statement. If an error occurs and &lt;var&gt;STAT&lt;/var&gt; is a &lt;code&gt;NULL&lt;/code&gt; pointer, the function shall abort with printing an error message and starting the error termination. If no error occurs and &lt;var&gt;STAT&lt;/var&gt; is present, it shall be set to zero. Otherwise, it shall be set to a positive value and, if not-&lt;code&gt;NULL&lt;/code&gt;, &lt;var&gt;ERRMSG&lt;/var&gt; shall be set to a string describing the failure. The routine shall register the memory provided in the &lt;code&gt;DATA&lt;/code&gt;-component of the array descriptor &lt;var&gt;DESC&lt;/var&gt;, when that component is non-&lt;code&gt;NULL&lt;/code&gt;, else it shall allocate sufficient memory and provide a pointer to it in the &lt;code&gt;DATA&lt;/code&gt;-component of &lt;var&gt;DESC&lt;/var&gt;. The array descriptor has rank zero, when a scalar object is to be registered and the array descriptor may be invalid after the call to &lt;code&gt;_gfortran_caf_register&lt;/code&gt;. When an array is to be allocated the descriptor persists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41da4187cd2b99c72a3cb41751a0cbbe05c006bb" translate="yes" xml:space="preserve">
          <source>Reinitialize the random number generator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2759caed45735290834e38462e732a81cee56c4" translate="yes" xml:space="preserve">
          <source>Release a lock on the given image on a scalar locking variable or for the given array element for an array-valued variable. Unlocking a lock variable which is unlocked or has been locked by a different image is an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bf836454f5297688a5c3366d71671762d19667" translate="yes" xml:space="preserve">
          <source>Remainder function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a8dab9134fe025f24077593fb24ede484056c9" translate="yes" xml:space="preserve">
          <source>Remove a file from the file system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75daff2ae29c142545843c90e6030b2f78262d49" translate="yes" xml:space="preserve">
          <source>Remove trailing blank characters of a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cd2eeaa53a0aff0def3d317266ccd0e4cf76a4" translate="yes" xml:space="preserve">
          <source>Removes trailing blank characters of a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0904861ebe57004a8eb3d40b476d16313409d99" translate="yes" xml:space="preserve">
          <source>Rename a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daa37d6ee9979f9e02cfb1e0e4c19c7f572ff74" translate="yes" xml:space="preserve">
          <source>Renames a file from file &lt;var&gt;PATH1&lt;/var&gt; to &lt;var&gt;PATH2&lt;/var&gt;. A null character (&lt;code&gt;CHAR(0)&lt;/code&gt;) can be used to mark the end of the names in &lt;var&gt;PATH1&lt;/var&gt; and &lt;var&gt;PATH2&lt;/var&gt;; otherwise, trailing blanks in the file names are ignored. If the &lt;var&gt;STATUS&lt;/var&gt; argument is supplied, it contains 0 on success or a nonzero error code upon return; see &lt;code&gt;rename(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e0a93d29dbbd83c2f3bc2015263dea2d3f9324" translate="yes" xml:space="preserve">
          <source>Renaming of operators in the &lt;code&gt;USE&lt;/code&gt; statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e581e75cfb4021d4ffe896a38f78e2449789b26" translate="yes" xml:space="preserve">
          <source>Repeated string concatenation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6766a6042303fa42095a66757665a7cae15c5c" translate="yes" xml:space="preserve">
          <source>Replicates a &lt;var&gt;SOURCE&lt;/var&gt; array &lt;var&gt;NCOPIES&lt;/var&gt; times along a specified dimension &lt;var&gt;DIM&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7c5c9149fda9ae33c15aae55240d384ad4d6de" translate="yes" xml:space="preserve">
          <source>Reshapes &lt;var&gt;SOURCE&lt;/var&gt; to correspond to &lt;var&gt;SHAPE&lt;/var&gt;. If necessary, the new array may be padded with elements from &lt;var&gt;PAD&lt;/var&gt; or permuted as defined by &lt;var&gt;ORDER&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6ea2c811a763951c58a57ddcfa818ce7dd6036" translate="yes" xml:space="preserve">
          <source>Restarts or queries the state of the pseudorandom number generator used by &lt;code&gt;RANDOM_NUMBER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1841dd4c2e3c1c94c94256287b4650766cc8c0" translate="yes" xml:space="preserve">
          <source>Result variable, when the function result is passed by reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8756e79136a71f6138fdfc9532c3e5bb4001dc9d" translate="yes" xml:space="preserve">
          <source>Results of INQUIRE statements of the &amp;ldquo;inquire by file&amp;rdquo; form will relate to the target of the symbolic link. For example, &lt;code&gt;INQUIRE(FILE=&quot;foo&quot;,EXIST=ex)&lt;/code&gt; will set &lt;var&gt;ex&lt;/var&gt; to &lt;var&gt;.true.&lt;/var&gt; if &lt;var&gt;foo&lt;/var&gt; is a symbolic link pointing to an existing file, and &lt;var&gt;.false.&lt;/var&gt; if &lt;var&gt;foo&lt;/var&gt; points to an non-existing file (&amp;ldquo;dangling&amp;rdquo; symbolic link).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39872aca8622556709c278843185a802ee13f0ad" translate="yes" xml:space="preserve">
          <source>Retrieve the &lt;var&gt;NUMBER&lt;/var&gt;-th argument that was passed on the command line when the containing program was invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17d8380adaa5b95a7b7e6cc06a8ce90d970c2b2" translate="yes" xml:space="preserve">
          <source>Retrieve the &lt;var&gt;POS&lt;/var&gt;-th argument that was passed on the command line when the containing program was invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4faddf7a9bcaaf6210dcd89ff506bb411822ce" translate="yes" xml:space="preserve">
          <source>Retrieve the entire command line that was used to invoke the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1e5a7cada914e75af14688987532cfa7f73ee8" translate="yes" xml:space="preserve">
          <source>Retrieves the current position within an open file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b6f84f10f45dac0e3c576f1ec0f644fb979ced" translate="yes" xml:space="preserve">
          <source>Retrieves the host name of the system on which the program is running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f2b3f5a0eff8fce83b5ded45c3cac6f39abfd9" translate="yes" xml:space="preserve">
          <source>Return Type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b783597c37d987dbcea2bae3a3fcf5e48c96a247" translate="yes" xml:space="preserve">
          <source>Return Value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7ad2a40cb7385baa2c6598c01190ddba7299ec" translate="yes" xml:space="preserve">
          <source>Return the event count of the specified event variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b1fb407b7fa442b77381701968fb175362cf78" translate="yes" xml:space="preserve">
          <source>Return type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0f4aca16fcfaa6cac730d783925636f5e4b5c8" translate="yes" xml:space="preserve">
          <source>Return value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca3a57e8a28efd64e8eaabe575d077326fdd157" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;.TRUE.&lt;/code&gt; if &lt;code&gt;STRING_A &amp;gt; STRING_B&lt;/code&gt;, and &lt;code&gt;.FALSE.&lt;/code&gt; otherwise, based on the ASCII ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30230c381062c3272532d9917feda14f87b279a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;.TRUE.&lt;/code&gt; if &lt;code&gt;STRING_A &amp;gt;= STRING_B&lt;/code&gt;, and &lt;code&gt;.FALSE.&lt;/code&gt; otherwise, based on the ASCII ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a22c30d472c699ab6ca03de792ca43643ff98c" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;.TRUE.&lt;/code&gt; if &lt;code&gt;STRING_A &amp;lt; STRING_B&lt;/code&gt;, and &lt;code&gt;.FALSE.&lt;/code&gt; otherwise, based on the ASCII ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed8c97351617c9fbbef532774c8548f7a846e3b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;.TRUE.&lt;/code&gt; if &lt;code&gt;STRING_A &amp;lt;= STRING_B&lt;/code&gt;, and &lt;code&gt;.FALSE.&lt;/code&gt; otherwise, based on the ASCII ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abfb67c8541727c319808f772c72f43845c3e71" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;.TRUE.&lt;/code&gt; if the &lt;var&gt;UNIT&lt;/var&gt; is connected to a terminal device, &lt;code&gt;.FALSE.&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fda5c930193a70555b648b314e7a42e55a3c15" translate="yes" xml:space="preserve">
          <source>Returns &lt;var&gt;A&lt;/var&gt; with the fractional portion of its magnitude eliminated by rounding to the nearest whole number and with its sign preserved, converted to an &lt;code&gt;INTEGER&lt;/code&gt; of the default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bb8e1f9725a880a765cf48d05187cfecd05e2f" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;LOGICAL&lt;/code&gt; of the default kind, which &lt;code&gt;.TRUE.&lt;/code&gt; if &lt;var&gt;I&lt;/var&gt; has the value which indicates an end of file condition for &lt;code&gt;IOSTAT=&lt;/code&gt; specifiers, and is &lt;code&gt;.FALSE.&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d7ad2ffac283f91e5ea69c07b0a2e4f13fae46" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;REAL(4)&lt;/code&gt; value representing the elapsed CPU time in seconds. This provides the same functionality as the standard &lt;code&gt;CPU_TIME&lt;/code&gt; intrinsic, and is only included for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab6f91549d22c5ab0143e17cd49e264d2e2f94b" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;REAL&lt;/code&gt; value representing the elapsed CPU time in seconds. This is useful for testing segments of code to determine execution time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e71181c416a72586dc6d6cd1812469dca751e1d" translate="yes" xml:space="preserve">
          <source>Returns a &lt;var&gt;CHARACTER&lt;/var&gt; scalar of length one with the new-line character of the same kind as parameter &lt;var&gt;C&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda3b7f3e33fd7e902b6e0b004df575ab9281ada" translate="yes" xml:space="preserve">
          <source>Returns a default-kind &lt;code&gt;LOGICAL&lt;/code&gt;. The returned value is &lt;code&gt;TRUE&lt;/code&gt; if &lt;var&gt;X&lt;/var&gt; is a NaN and &lt;code&gt;FALSE&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="968a20a1733d304249f6595e31cd39ab4681fb2b" translate="yes" xml:space="preserve">
          <source>Returns a disassociated pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40fc1b4008818961411264c77b22e144fe80999" translate="yes" xml:space="preserve">
          <source>Returns a scalar &lt;code&gt;INTEGER&lt;/code&gt;, which is &lt;code&gt;0&lt;/code&gt; if the file is accessible in the given mode; otherwise or if an invalid argument has been given for &lt;code&gt;MODE&lt;/code&gt; the value &lt;code&gt;1&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113730818dac044b8abef03fa47255d085ba2e2b" translate="yes" xml:space="preserve">
          <source>Returns a single pseudorandom number or an array of pseudorandom numbers from the uniform distribution over the range &lt;em&gt;0 \leq x &amp;lt; 1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaabbceb650c0dce2372ea8785041cec68b675f" translate="yes" xml:space="preserve">
          <source>Returns an array of same type and rank as the &lt;var&gt;ARRAY&lt;/var&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d21f6aa4c9d03bd43024ebdefc0b9bf130924eb" translate="yes" xml:space="preserve">
          <source>Returns either &lt;code&gt;TRUE&lt;/code&gt; if the optional argument &lt;var&gt;A&lt;/var&gt; is present, or &lt;code&gt;FALSE&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8f77aa34a4a8bf0c21026d2d2de8073807d426" translate="yes" xml:space="preserve">
          <source>Returns the address of a variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e1b8ea8741869980212836e0538425f9dfd3e3" translate="yes" xml:space="preserve">
          <source>Returns the argument with the largest (most positive) value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12955fa5c732f992e73c9f2b21b4da0313fd91ea" translate="yes" xml:space="preserve">
          <source>Returns the argument with the smallest (most negative) value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fecba5b3bf7d6b6d5208c195e2cafccfdb1c1b" translate="yes" xml:space="preserve">
          <source>Returns the cosubscript for this image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b236c4ced867ee7292155739b0f47e8f40030e" translate="yes" xml:space="preserve">
          <source>Returns the current time encoded as an integer (in the manner of the function &lt;code&gt;time(3)&lt;/code&gt; in the C standard library). This value is suitable for passing to &lt;a href=&quot;ctime#CTIME&quot;&gt;CTIME&lt;/a&gt;, &lt;a href=&quot;gmtime#GMTIME&quot;&gt;GMTIME&lt;/a&gt;, and &lt;a href=&quot;ltime#LTIME&quot;&gt;LTIME&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a56ff29c21603b26dbfc0e505334ad34f1f55f" translate="yes" xml:space="preserve">
          <source>Returns the image index belonging to a cosubscript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c520bc22dc7d785c56b218d030b258ffc49aa7" translate="yes" xml:space="preserve">
          <source>Returns the last system error number, as given by the C &lt;code&gt;errno&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d33296bb35bf49a0c90e017a90ea0a3df2f46ae" translate="yes" xml:space="preserve">
          <source>Returns the length of a character string, ignoring any trailing blanks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea4b63fc73fde737de5964fca1b77266dac011a" translate="yes" xml:space="preserve">
          <source>Returns the length of a character string, ignoring any trailing blanks. This is identical to the standard &lt;code&gt;LEN_TRIM&lt;/code&gt; intrinsic, and is only included for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8a5d1f142397d0a94264d40425e1cf483521d7" translate="yes" xml:space="preserve">
          <source>Returns the length of a character string. If &lt;var&gt;STRING&lt;/var&gt; is an array, the length of an element of &lt;var&gt;STRING&lt;/var&gt; is returned. Note that &lt;var&gt;STRING&lt;/var&gt; need not be defined when this intrinsic is invoked, since only the length, not the content, of &lt;var&gt;STRING&lt;/var&gt; is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e76b528b882e1edc2eee844e355b76d95a988e" translate="yes" xml:space="preserve">
          <source>Returns the lower bounds of a coarray, or a single lower cobound along the &lt;var&gt;DIM&lt;/var&gt; codimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7c5d2ebddfaf234afb2b725fc4dc5740a007fc" translate="yes" xml:space="preserve">
          <source>Returns the lower bounds of an array, or a single lower bound along the &lt;var&gt;DIM&lt;/var&gt; dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb3a43ca1e7bf0cc9bd7c962591f0744075b2b0" translate="yes" xml:space="preserve">
          <source>Returns the number of clock ticks since the start of the process, based on the function &lt;code&gt;clock(3)&lt;/code&gt; in the C standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19876a082f942859cfbeaea51ba4ff68962d768d" translate="yes" xml:space="preserve">
          <source>Returns the number of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013d9e8b3ca94f09540f0b5d277b6839b75e62ea" translate="yes" xml:space="preserve">
          <source>Returns the numerical group ID of the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70e4e1d0604ba02e0a479c7803d52806f6f8640" translate="yes" xml:space="preserve">
          <source>Returns the numerical process identifier of the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382e7d4ef104261b2fe92b7b89d69ed01ef289b4" translate="yes" xml:space="preserve">
          <source>Returns the numerical user ID of the current process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d105e73f67ab7f1af6667f255d8bb66c24112bb3" translate="yes" xml:space="preserve">
          <source>Returns the position of the start of the first occurrence of string &lt;var&gt;SUBSTRING&lt;/var&gt; as a substring in &lt;var&gt;STRING&lt;/var&gt;, counting from one. If &lt;var&gt;SUBSTRING&lt;/var&gt; is not present in &lt;var&gt;STRING&lt;/var&gt;, zero is returned. If the &lt;var&gt;BACK&lt;/var&gt; argument is present and true, the return value is the start of the last occurrence rather than the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d974443f12cdccd1ab7edb28239c2c38d974fb5a" translate="yes" xml:space="preserve">
          <source>Returns the storage size of argument &lt;var&gt;A&lt;/var&gt; in bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030fed1a4a2d8688a3064b28762f70afc4f33f9f" translate="yes" xml:space="preserve">
          <source>Returns the system error message corresponding to the last system error. This resembles the functionality of &lt;code&gt;strerror(3)&lt;/code&gt; in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5db6aa6b94304631cf2d1e844160a324a3e9659" translate="yes" xml:space="preserve">
          <source>Returns the upper bounds of an array, or a single upper bound along the &lt;var&gt;DIM&lt;/var&gt; dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6800caeea6d410da018bd455bee29f1e1ed3571" translate="yes" xml:space="preserve">
          <source>Returns the upper cobounds of a coarray, or a single upper cobound along the &lt;var&gt;DIM&lt;/var&gt; codimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a03c748490662d071e2d69385f0a2818ef7052" translate="yes" xml:space="preserve">
          <source>Right adjust a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1961283cddaa930494cae150067a7581a93e5c7e" translate="yes" xml:space="preserve">
          <source>Right justified mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e640dab9c72b92ec931b703f79d317fa079e48" translate="yes" xml:space="preserve">
          <source>Right shift</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc507ea72a97072f7267fc53460470d60e1970b" translate="yes" xml:space="preserve">
          <source>Right shift bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3139db62c1e590d67d85e0488d8e8356f4d7d300" translate="yes" xml:space="preserve">
          <source>Right shift with fill</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b24f0575d77ccaa5dbc4903cc08b8ba4237af70" translate="yes" xml:space="preserve">
          <source>Run time since start in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c76e4e2264f0583f28d2cfeea755ff61b99d84" translate="yes" xml:space="preserve">
          <source>Runtime Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d02afe98208e564519a22e45d26ab8e697c48a" translate="yes" xml:space="preserve">
          <source>SAME_TYPE_AS</source>
          <target state="translated">SAME_TYPE_AS</target>
        </trans-unit>
        <trans-unit id="dd15369004030cf6385a8b3d0b972142f444a2a3" translate="yes" xml:space="preserve">
          <source>SELECTED_REAL_KIND</source>
          <target state="translated">SELECTED_REAL_KIND</target>
        </trans-unit>
        <trans-unit id="cbfe91baa47787adeb127a36f02e122b726a873e" translate="yes" xml:space="preserve">
          <source>SHAPE</source>
          <target state="translated">SHAPE</target>
        </trans-unit>
        <trans-unit id="766a32c46d75039cf0e1bb3076dfffce9cee9f83" translate="yes" xml:space="preserve">
          <source>SPACING</source>
          <target state="translated">SPACING</target>
        </trans-unit>
        <trans-unit id="2c798885ebfbe383227dbd5c2205277f8af9d524" translate="yes" xml:space="preserve">
          <source>SUM</source>
          <target state="translated">SUM</target>
        </trans-unit>
        <trans-unit id="29d43743c43bda9873fc7a79c99f2ec4b6b442b1" translate="yes" xml:space="preserve">
          <source>SYSTEM</source>
          <target state="translated">SYSTEM</target>
        </trans-unit>
        <trans-unit id="4b2d87f4223d14d97876e6c21b4dc80dfbe2238b" translate="yes" xml:space="preserve">
          <source>Same type as &lt;var&gt;ARRAY&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b56ea75da837d4da05bac97e10c42ed48847e7" translate="yes" xml:space="preserve">
          <source>Sat Aug 19 18:13:14 1995</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1075035fad46864ee7101bd713a6ac3eee82840" translate="yes" xml:space="preserve">
          <source>Save command-line arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571f4d7d7433006a0242937222632be440092f79" translate="yes" xml:space="preserve">
          <source>Scalar &lt;code&gt;CHARACTER&lt;/code&gt; of default kind giving the file permission. &lt;var&gt;MODE&lt;/var&gt; uses the same syntax as the &lt;code&gt;chmod&lt;/code&gt; utility as defined by the POSIX standard. The argument shall either be a string of a nonnegative octal number or a symbolic mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2385ed82321b96dca1928651839fa4f146adb4" translate="yes" xml:space="preserve">
          <source>Scalar &lt;code&gt;CHARACTER&lt;/code&gt; of default kind with the file access mode, may be any concatenation of &lt;code&gt;&quot;r&quot;&lt;/code&gt; (readable), &lt;code&gt;&quot;w&quot;&lt;/code&gt; (writable) and &lt;code&gt;&quot;x&quot;&lt;/code&gt; (executable), or &lt;code&gt;&quot; &quot;&lt;/code&gt; to check for existence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49875211f73d2ee0109c382325a80cc977b46041" translate="yes" xml:space="preserve">
          <source>Scalar &lt;code&gt;CHARACTER&lt;/code&gt; of default kind with the file name. Tailing blank are ignored unless the character &lt;code&gt;achar(0)&lt;/code&gt; is present, then all characters up to and excluding &lt;code&gt;achar(0)&lt;/code&gt; are used as file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd951a309ff236aeb57ebe416c718bf00910549d" translate="yes" xml:space="preserve">
          <source>Scalar &lt;code&gt;CHARACTER&lt;/code&gt; of default kind with the file name. Trailing blanks are ignored unless the character &lt;code&gt;achar(0)&lt;/code&gt; is present, then all characters up to and excluding &lt;code&gt;achar(0)&lt;/code&gt; are used as the file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddd61a296af4ed744aaa937194f1926b3dd5a97" translate="yes" xml:space="preserve">
          <source>Scalar coarray or coindexed variable of either integer type with &lt;code&gt;ATOMIC_INT_KIND&lt;/code&gt; kind or logical type with &lt;code&gt;ATOMIC_LOGICAL_KIND&lt;/code&gt; kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656dc7ecef7b71803d9e089fc017467abb882500" translate="yes" xml:space="preserve">
          <source>Scalar coarray or coindexed variable of integer type with &lt;code&gt;ATOMIC_INT_KIND&lt;/code&gt; kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cf1b98bcbac3e780a8d600a8cbc0855afe85bc" translate="yes" xml:space="preserve">
          <source>Scalar coarray or coindexed variable of integer type with &lt;code&gt;ATOMIC_INT_KIND&lt;/code&gt; kind. &lt;code&gt;ATOMIC_LOGICAL_KIND&lt;/code&gt; kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356d04470148a87612b05230010896c2cc309356" translate="yes" xml:space="preserve">
          <source>Scalar default integer with the value of the image index which corresponds to the cosubscripts. For invalid cosubscripts the result is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c64dca0f2589281dfc0f1304a53c7800f6c7177" translate="yes" xml:space="preserve">
          <source>Scalar default-integer constant used as STAT= return value by &lt;code&gt;LOCK&lt;/code&gt; to denote that the lock variable is locked by the executing image. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0767ae40125d3c285d50dc060d184fe92013ed" translate="yes" xml:space="preserve">
          <source>Scalar default-integer constant used as STAT= return value by &lt;code&gt;UNLOCK&lt;/code&gt; to denote that the lock variable is locked by another image. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478480fcf0947b9942467bf58a9168d519cdda3e" translate="yes" xml:space="preserve">
          <source>Scalar default-integer constant used as STAT= return value by &lt;code&gt;UNLOCK&lt;/code&gt; to denote that the lock variable is unlocked. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ced51dad3c4951b9f24ab82c761383abb79a14" translate="yes" xml:space="preserve">
          <source>Scalar default-integer constant, used by &lt;code&gt;INQUIRE&lt;/code&gt; for the &lt;code&gt;IOSTAT=&lt;/code&gt; specifier to denote an that a unit number identifies an internal unit. (Fortran 2008 or later.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72787ecaec62ae0755d96b78ad526f661890817c" translate="yes" xml:space="preserve">
          <source>Scalar default-kind integer. If &lt;var&gt;DISTANCE&lt;/var&gt; is not present or has value 0, the number of images in the current team is returned. For values smaller or equal distance to the initial team, it returns the number of images index on the ancestor team which has a distance of &lt;var&gt;DISTANCE&lt;/var&gt; from the invoking team. If &lt;var&gt;DISTANCE&lt;/var&gt; is larger than the distance to the initial team, the number of images of the initial team is returned. If &lt;var&gt;FAILED&lt;/var&gt; is not present the total number of images is returned; if it has the value &lt;code&gt;.TRUE.&lt;/code&gt;, the number of failed images is returned, otherwise, the number of images which do have not the failed status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b63357169fc9f99895df9ec6572ff81e4a171c" translate="yes" xml:space="preserve">
          <source>Scalar of the same type and kind as &lt;var&gt;ATOM&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb976dd63b43efd6ab0ee9797b84f7890d37ce7" translate="yes" xml:space="preserve">
          <source>Scalar of the same type as &lt;var&gt;ATOM&lt;/var&gt;. If the kind is different, the value is converted to the kind of &lt;var&gt;ATOM&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac4312088e39067179fb03af73dd4d3371ebd01" translate="yes" xml:space="preserve">
          <source>Scalar of the type &lt;code&gt;C_PTR&lt;/code&gt; or &lt;code&gt;C_FUNPTR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aba6128be72a381f333a836a5a2b4f0bcc1c5b5" translate="yes" xml:space="preserve">
          <source>Scalar variable of the same type and kind as &lt;var&gt;ATOM&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82460eb493ea626a535f0e7ea5ac5fbd03d5bc07" translate="yes" xml:space="preserve">
          <source>Scalar variable of the same type as &lt;var&gt;ATOM&lt;/var&gt;. If kind is different, the value is converted to the kind of &lt;var&gt;ATOM&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c524dc39227d8c096deaec919a2adefbbf5f1ba0" translate="yes" xml:space="preserve">
          <source>Scale a real value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44375d930f00af9ff7979c1b1fd76ca9f3265459" translate="yes" xml:space="preserve">
          <source>Scan a string for the absence of a set of characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8a5a35cd07d87851001e2f9e045b5f13d12ea3" translate="yes" xml:space="preserve">
          <source>Scan a string for the presence of a set of characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8511fe8599cb873237f6b7003092e6b82f0377b9" translate="yes" xml:space="preserve">
          <source>Scans a &lt;var&gt;STRING&lt;/var&gt; for any of the characters in a &lt;var&gt;SET&lt;/var&gt; of characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99913c9c998f78d6a69c773b797b208b9e4e587f" translate="yes" xml:space="preserve">
          <source>Search &lt;var&gt;dir&lt;/var&gt; for header files, after all directories specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473bfee08b86ad75828ca07c6482cb2966bf5ea0" translate="yes" xml:space="preserve">
          <source>Search &lt;var&gt;dir&lt;/var&gt; for include files, but do it after all directories specified with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98487752cc98fa43ed5758596f3f244e65fc97de" translate="yes" xml:space="preserve">
          <source>Search &lt;var&gt;dir&lt;/var&gt; only for header files requested with &lt;code&gt;#include &quot;file&quot;&lt;/code&gt;; they are not searched for &lt;code&gt;#include &amp;lt;file&amp;gt;&lt;/code&gt;, before all directories specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1a4fd07f85774d9b4132c8a79138dc4331a6ae" translate="yes" xml:space="preserve">
          <source>Seconds after the minute, range 0&amp;ndash;59 or 0&amp;ndash;61 to allow for leap seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb594d27830e100f09b14d8016de15b5e0278e32" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Options for code generation conventions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ee67e44bf18180621aec0c773b338a61c05220" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;convert-specifier#CONVERT-specifier&quot;&gt;CONVERT specifier&lt;/a&gt;, for an alternative way to specify the data representation for unformatted files. See &lt;a href=&quot;runtime-options#Runtime-Options&quot;&gt;Runtime Options&lt;/a&gt;, for setting a default data representation for the whole program. The &lt;code&gt;CONVERT&lt;/code&gt; specifier overrides the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65cbab836c705adb8bba84c2d60a34fc04b7fa1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;Options for debugging your program or GNU Fortran&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f383855ac4889e92f8dfc1b631021b8d6f2a24b4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Options for directory search&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee0478afab4289fad02f693bda8c9933aa3b4cd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;error-and-warning-options#Error-and-Warning-Options&quot;&gt;Options to request or suppress errors and warnings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e97e0f6aa50e7a3d8b34189dfcba1cd7c8504de" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fortran-dialect-options#Fortran-Dialect-Options&quot;&gt;Options controlling Fortran dialect&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4f0ea1babc2e5bcbdfcffe4e806a41b18680b9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;getarg#GETARG&quot;&gt;GETARG&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6806ae8f8aab10ae7b3cc8e3be39fd1e998910" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Code-Gen-Options.html#Code-Gen-Options&quot;&gt;Options for Code Generation Conventions&lt;/a&gt; in Using the GNU Compiler Collection (GCC), for information on more options offered by the GBE shared by &lt;code&gt;gfortran&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt;, and other GNU compilers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9f169fcbd98421bab9d94bb021f4a9cf8e2222" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Debugging-Options.html#Debugging-Options&quot;&gt;Options for Debugging Your Program or GCC&lt;/a&gt; in Using the GNU Compiler Collection (GCC), for more information on debugging options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f10e93c2e6cec30ad680560400747a68ed9369" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html#Directory-Options&quot;&gt;Options for Directory Search&lt;/a&gt; in Using the GNU Compiler Collection (GCC), for information on the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518cac3f51c363893346e32be887056e8211c428" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html#Environment-Variables&quot;&gt;Environment Variables Affecting GCC&lt;/a&gt; in Using the GNU Compiler Collection (GCC), for information on environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb014c3de0931743b30e2d5050db5cdb749db64" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Invoking-GCC.html#Invoking-GCC&quot;&gt;GCC Command Options&lt;/a&gt; in Using the GNU Compiler Collection (GCC), for information on the non-Fortran-specific aspects of the &lt;code&gt;gcc&lt;/code&gt; command (and, therefore, the &lt;code&gt;gfortran&lt;/code&gt; command).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c94f2f471941ffe1d00221b3bd10c65dd0f4f4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#Warning-Options&quot;&gt;Options to Request or Suppress Errors and Warnings&lt;/a&gt; in Using the GNU Compiler Collection (GCC), for information on more options offered by the GBE shared by &lt;code&gt;gfortran&lt;/code&gt;, &lt;code&gt;gcc&lt;/code&gt; and other GNU compilers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d55ce3de68fafab89c365e9f758d51a71584c9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ichar#ICHAR&quot;&gt;ICHAR&lt;/a&gt; for a discussion of converting between numerical values and formatted string representations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f450b7433fcafa821293f6b49939d71f658d434" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;link-options#Link-Options&quot;&gt;Options for influencing the linking step&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7516d8c4c7663a50e29d155d1a17ba0ccca994" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;preprocessing-options#Preprocessing-Options&quot;&gt;Enable and customize preprocessing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3babe55a6ae2502193308be44825eae183ad66" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;runtime#Runtime&quot;&gt;Runtime&lt;/a&gt;, for environment variables that affect the run-time behavior of programs compiled with GNU Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d3ca9d30ff4049bfc542be83677b25e5dd8e76" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;runtime-options#Runtime-Options&quot;&gt;Options for influencing runtime behavior&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a0d49f343c9b49a69c68054f5194d1378b65a3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4781354bc9a49b96f0db0041cd5293d422de468" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;time8#TIME8&quot;&gt;TIME8&lt;/a&gt;, for information on a similar intrinsic that might be portable to more GNU Fortran implementations, though to fewer Fortran compilers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec5e95d489c70ad035aadb862418cf1ab175120" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;GETPID&lt;/code&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564afc931c80a8cdca4bf4283085c938edbaa6a5" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;HUGE&lt;/code&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef348037a2566a724632c723e3e1b1b236931ec5" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;MALLOC&lt;/code&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e86b32ef78c80838a3f0dc7c6b98761a95473f" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;MAXEXPONENT&lt;/code&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ad56902fb7a3275acdb83fc165479e7e41d425" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;PRECISION&lt;/code&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bfeb5db219c7bf364e24a9bffc8732cb7ba415" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;RAND&lt;/code&gt; and &lt;code&gt;IRAND&lt;/code&gt; for examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a08f389a25b863d0fca5015a2885ff6fd5c8cd" translate="yes" xml:space="preserve">
          <source>See Also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96079925a60ea31b47374ec664a6fdb0e5d40d82" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;argument-passing-conventions#Argument-passing-conventions&quot;&gt;Argument passing conventions&lt;/a&gt; and &lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Interoperability with C&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a0496e196573493a3e83a413c99be3cbd814e53" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C&quot;&gt;Further Interoperability of Fortran with C&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371a87eafb4de078ff674d69a5a89c186532eb49" translate="yes" xml:space="preserve">
          <source>See also:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49571cb2d31b301c61bf73fea83a7c10f5e9105e" translate="yes" xml:space="preserve">
          <source>Select values from two arrays according to a logical mask. The result is equal to &lt;var&gt;TSOURCE&lt;/var&gt; if &lt;var&gt;MASK&lt;/var&gt; is &lt;code&gt;.TRUE.&lt;/code&gt;, or equal to &lt;var&gt;FSOURCE&lt;/var&gt; if it is &lt;code&gt;.FALSE.&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ab465545c759cbca44eb94ab6522ac24bd4f3d" translate="yes" xml:space="preserve">
          <source>Send a signal to a process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e6769614b817b56db0aea7630b8b2d5e7576b6" translate="yes" xml:space="preserve">
          <source>Sending data between remote images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33f6d08980433face8a43b3b5ea2d170916d7d7" translate="yes" xml:space="preserve">
          <source>Sending data between remote images using enhanced references</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3efc491821e8b644596eba323e2b75aecdc0aac" translate="yes" xml:space="preserve">
          <source>Sending data from a local image to a remote image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bce63b4ef1442c7f868c6a5399298ffa2951c4e" translate="yes" xml:space="preserve">
          <source>Sending data from a local image to a remote image using enhanced references</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dabeb262e6881fea86dca3b79e01031c184d027" translate="yes" xml:space="preserve">
          <source>Sending data to all images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6ca4e5c94c6f3c60b445c017c3c28e03346732" translate="yes" xml:space="preserve">
          <source>Sends the signal specified by &lt;var&gt;SIGNAL&lt;/var&gt; to the process &lt;var&gt;PID&lt;/var&gt;. See &lt;code&gt;kill(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08d44bc8a4dbcf6de8043d516b7d1a22903dbb9" translate="yes" xml:space="preserve">
          <source>Separator for list output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df07c94c81f1971100124aecdfbcafa581a35e3" translate="yes" xml:space="preserve">
          <source>Set an alarm clock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ac9d50523f1673421b0c721779b30b77ea1cc9" translate="yes" xml:space="preserve">
          <source>Set bit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b076cf57a832c8424ab0250c17687bf87a14e4cc" translate="yes" xml:space="preserve">
          <source>Set column after which characters are ignored in typical fixed-form lines in the source file, and through which spaces are assumed (as if padded to that length) after the ends of short fixed-form lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a548ee28bcb834df7f7e2ddad7cc05efea07a60e" translate="yes" xml:space="preserve">
          <source>Set column after which characters are ignored in typical free-form lines in the source file. The default value is 132. &lt;var&gt;n&lt;/var&gt; may be &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1deacbea2d1ba688c80425aa79e574ddd2f983" translate="yes" xml:space="preserve">
          <source>Set endian conversion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06267b5385dc56e30fc36f97d6b724787c48ec2b" translate="yes" xml:space="preserve">
          <source>Set endianness for unformatted I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadaff9da86d2db0aab16600842bd0c8ed126de0" translate="yes" xml:space="preserve">
          <source>Set length of record markers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d266917292a54b505aa79b4a533c74b5c2f2a7" translate="yes" xml:space="preserve">
          <source>Set library option flags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a05810c4a21572ed04f1c3fc2a3532aa0771f3" translate="yes" xml:space="preserve">
          <source>Set subrecord length</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba3553ca627f777e83253424f7b4fe2d0d30d31" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;DOUBLE PRECISION&lt;/code&gt; type to an 8 byte wide type. Do nothing if this is already the default. If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a97af621321eb8ae64d1438377ec7451d401dc7" translate="yes" xml:space="preserve">
          <source>Set the default accessibility of module entities to &lt;code&gt;PRIVATE&lt;/code&gt;. Use-associated entities will not be accessible unless they are explicitly declared as &lt;code&gt;PUBLIC&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da8390b78ac7a05ca954805f9def79a63da3403" translate="yes" xml:space="preserve">
          <source>Set the default integer and logical types to an 8 byte wide type. This option also affects the kind of integer constants like &lt;code&gt;42&lt;/code&gt;. Unlike</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bcc1c67bdb8dc5925eab0e99ee4d1fc357f4082" translate="yes" xml:space="preserve">
          <source>Set the default real type to an 8 byte wide type. This option also affects the kind of non-double real constants like &lt;code&gt;1.0&lt;/code&gt;, and does promote the default width of &lt;code&gt;DOUBLE PRECISION&lt;/code&gt; to 16 bytes if possible, unless &lt;code&gt;-fdefault-double-8&lt;/code&gt; is given, too. Unlike</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d8ca1007fb9a3cc8f610c3e363d7623ea48424" translate="yes" xml:space="preserve">
          <source>Set the exponent of the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3685b960ed79d75d7efccd14c9343786586bccf5" translate="yes" xml:space="preserve">
          <source>Set the file creation mask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda62e125cadc81001f59ec7fc3cc18f3d977a47" translate="yes" xml:space="preserve">
          <source>Set when a Floating Point Exception should be raised</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79989c587db769ea75b0446f3779f51d8599b0a0" translate="yes" xml:space="preserve">
          <source>Sets the file creation mask to &lt;var&gt;MASK&lt;/var&gt;. If called as a function, it returns the old value. If called as a subroutine and argument &lt;var&gt;OLD&lt;/var&gt; if it is supplied, it is set to the old value. See &lt;code&gt;umask(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910143c6a07e8619f80f1975ada0d2f1c997ff84" translate="yes" xml:space="preserve">
          <source>Setting a variable atomically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293788249b45f5cd8c435eb704980897c4af744c" translate="yes" xml:space="preserve">
          <source>Setting the environment variables should be done on the command line or via the &lt;code&gt;export&lt;/code&gt; command for &lt;code&gt;sh&lt;/code&gt;-compatible shells and via &lt;code&gt;setenv&lt;/code&gt; for &lt;code&gt;csh&lt;/code&gt;-compatible shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b05131fad45e3cf6ee01702cf363c30830f1a3" translate="yes" xml:space="preserve">
          <source>Shall be &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ee3f6419c04632d30d3d3ce2967c3b832d1405" translate="yes" xml:space="preserve">
          <source>Shall be a default &lt;code&gt;CHARACTER&lt;/code&gt; scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0577ef13449faa749be7482583b27121efd458ca" translate="yes" xml:space="preserve">
          <source>Shall be a non-negative scalar of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24382720ef0dd3b51378722db7769b72dfcea851" translate="yes" xml:space="preserve">
          <source>Shall be a scalar &lt;code&gt;CHARACTER&lt;/code&gt;, with &lt;code&gt;INTENT(IN)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ff53ecc9008dfaa4ec405183d2fe58557b1cfc" translate="yes" xml:space="preserve">
          <source>Shall be a scalar &lt;code&gt;INTEGER(kind=4)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cdb2523dbec7e66f6c408dca890f46e1f4d8f8e" translate="yes" xml:space="preserve">
          <source>Shall be a scalar &lt;code&gt;INTEGER&lt;/code&gt; of kind 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7825a9a19e902a0ce040ccb014f0a6e1b100b0d2" translate="yes" xml:space="preserve">
          <source>Shall be a scalar &lt;code&gt;INTEGER&lt;/code&gt;, with &lt;code&gt;INTENT(IN)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e8f5dc2b2c3f6ba37bc2c80b5242816809d25e" translate="yes" xml:space="preserve">
          <source>Shall be a scalar &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3be32d12a43bd7e76e3f25e442f64e5f84783ce" translate="yes" xml:space="preserve">
          <source>Shall be a scalar and of the default character type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4910203762489c2a81bd92ef4bd26f8653fe0f" translate="yes" xml:space="preserve">
          <source>Shall be a scalar and of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c6ed0ff623ca24ae10a38574fcc1b06f0ef1259" translate="yes" xml:space="preserve">
          <source>Shall be a scalar constant expression of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc95a42151543635ca12f56d8aea01570a87938" translate="yes" xml:space="preserve">
          <source>Shall be a scalar integer, with &lt;code&gt;INTENT(IN)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f6b53c351c012c86b2f6c77a92b194dde3a30e" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of the same type and kind as &lt;var&gt;A&lt;/var&gt; and not equal to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f847c0b93a3770a46a1f8d232712c30ea00ef61" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of the same type and kind as &lt;var&gt;A&lt;/var&gt;. It shall not be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1308f95b04ba0493b4fb979ac3c987e12612180b" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;CHARACTER&lt;/code&gt; and of default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ca359a584489be2bf9b73766dbfdaf8a234750" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;CHARACTER&lt;/code&gt;, with &lt;code&gt;INTENT(IN)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4eaa17ef222a2659b3f96516c9eb2563179b64c" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d62c4aee71edb37bff5a76cae286a89df54bd8f" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;INTEGER&lt;/code&gt; and of default kind, &lt;em&gt;&lt;var&gt;NUMBER&lt;/var&gt; \geq 0&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dca200f5cd92b44312b06301a1704678227941" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5986c6fbabe1967ab47f83aa40cbfdd948f00d41" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;INTEGER&lt;/code&gt; with a value in the range from 1 to n+1, where n equals the rank of &lt;var&gt;SOURCE&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77405eb9a1faaa29764c1092d56a0cd6f607881d" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ba6573a6d551633f5e2f893be82386d5fe9545" translate="yes" xml:space="preserve">
          <source>Shall be a scalar of type &lt;code&gt;INTEGER&lt;/code&gt;. Its value shall be either 0, 1 or 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a741eef922a65ea652925f0f37a83c99535fc8" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of any type and a rank less than seven.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03d11cf58b776a3ae2b93f695a6adcdba0f414f" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b502cb2e0593494d3c2485f1bdfaebadb1770f8" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of type &lt;code&gt;INTEGER&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67c1af833bff15e7593e5172f406a5de917db32" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f62fc8637de5938f4a1413fd3821a6ce46731a9" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of type &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7264f51573858292eb519571be9df1d9d3712a70" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of type &lt;code&gt;REAL&lt;/code&gt;; for &lt;code&gt;BESSEL_JN(N1, N2, X)&lt;/code&gt; it shall be scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5dc39b2c04da9f1d4c9988f83abf99bf4523fb" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or an array of type &lt;code&gt;REAL&lt;/code&gt;; for &lt;code&gt;BESSEL_YN(N1, N2, X)&lt;/code&gt; it shall be scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca80405169a9525af1dd71d14b33f25b6c650074" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or array of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002b59464abafed92c478dc27f9e2d8606d4fca2" translate="yes" xml:space="preserve">
          <source>Shall be a scalar or array of type &lt;code&gt;CHARACTER&lt;/code&gt;, with &lt;code&gt;INTENT(IN)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f5c6a1cf509e7fd175d9318ba654ca4fee07d1" translate="yes" xml:space="preserve">
          <source>Shall be an &lt;code&gt;INTEGER&lt;/code&gt; of the default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916cf36687d3dacbc22e269bba5f34fa2ec4cbbe" translate="yes" xml:space="preserve">
          <source>Shall be an array of any type and have a rank of two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4333fea6f24cdb843ef17863bc186cd033271784" translate="yes" xml:space="preserve">
          <source>Shall be an array of any type and rank one. It shall have at least as many elements as &lt;var&gt;MASK&lt;/var&gt; has &lt;code&gt;TRUE&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484a28ecdcb8b31b61b43e84a286864a6d1467f7" translate="yes" xml:space="preserve">
          <source>Shall be an array of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc766833a88978db0726379e66f8300fe9b37e4" translate="yes" xml:space="preserve">
          <source>Shall be an array of any type. If &lt;var&gt;ARRAY&lt;/var&gt; is a pointer it must be associated and allocatable arrays must be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2576eef9d9860b1f4132bbaf36dfc3590e84e9eb" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;INTEGER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0a7461f71e51a11994f725a4e3b4dc8e1814b5" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e62d00b494e039660318dadf9b4e9c2ed913959" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e9458ab3548b2f0237e70dbc36f9ab495455c6" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;LOGICAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87bcae2ce9b15f7f05be210eefae51d345f4526" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;LOGICAL&lt;/code&gt; and of the same size as &lt;var&gt;ARRAY&lt;/var&gt;. Alternatively, it may be a &lt;code&gt;LOGICAL&lt;/code&gt; scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a9d208cd6a4de27f38032d8a872be59f9017ff" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;LOGICAL&lt;/code&gt;, and conformable with &lt;var&gt;ARRAY&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76ab68d71ac96f905cbbe7b0bdaa1960dc6c028" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;LOGICAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfea8295c106b32bc0f67d4075c669fb687b689" translate="yes" xml:space="preserve">
          <source>Shall be an array of type &lt;code&gt;REAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0379dd2c41732f142701b2e564b3123590cb7309" translate="yes" xml:space="preserve">
          <source>Shall be an array or scalar of any type. If &lt;var&gt;SOURCE&lt;/var&gt; is a pointer it must be associated and allocatable arrays must be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edb72b8a1c1d50f196baa3bf4ca91d5c01a29a8" translate="yes" xml:space="preserve">
          <source>Shall be an array, of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a1dac87ce83316e2bb0c0e97594b9089d8d927" translate="yes" xml:space="preserve">
          <source>Shall be an coarray, of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e08c7bd86fa5a9427f282ff93e6a15bb4b3881d" translate="yes" xml:space="preserve">
          <source>Shall be an object of extensible declared type or unlimited polymorphic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2d8ecbc0f6187a439f1d1ed50a2d1cf7534af9" translate="yes" xml:space="preserve">
          <source>Shall be of &lt;code&gt;INTEGER&lt;/code&gt; type, and of the same kind as &lt;var&gt;I&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ce648c67cf6a6f2be6dd996bf73797edd4d26f" translate="yes" xml:space="preserve">
          <source>Shall be of &lt;code&gt;INTEGER&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d906b2de34e53ce4f61a286854e22c56c5df58f" translate="yes" xml:space="preserve">
          <source>Shall be of default &lt;code&gt;CHARACTER&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e086b2556fea559c384548188fd5cb18c743846b" translate="yes" xml:space="preserve">
          <source>Shall be of the same type and kind as &lt;var&gt;A&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b9cb37f1d2941befc9f5cde9d41c357d11bb3c" translate="yes" xml:space="preserve">
          <source>Shall be of the same type and type parameters as &lt;var&gt;TSOURCE&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d113abe0aa910b6bbf9bd6dabdec01c2abe73e" translate="yes" xml:space="preserve">
          <source>Shall be of the same type as &lt;var&gt;VECTOR&lt;/var&gt; and have the same shape as &lt;var&gt;MASK&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5707f76b00af0fa1d21bee8e354737814a4dbaf9" translate="yes" xml:space="preserve">
          <source>Shall be of the type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527a32fc2ed58834387c0ff805e5321f55af36c8" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;CHARACTER&lt;/code&gt; and of default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f945a8f474d172f5646a5ea2d27e2607a679e59" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ceb38fc352b73528ee676f6ca189108fdd525e6" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt; and an array of rank one. Its values must be positive or zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28df60bd6d365697a79dd37ef7f62cc6751be36" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt; and not wider than the default integer kind; &lt;em&gt;&lt;var&gt;POS&lt;/var&gt; \geq 0&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343858f174e47f944fa6303eccf275ff512f7e1f" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt; and of the same kind as &lt;var&gt;I&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6eab5501089c8bfdb2c667817ad027b0ac027e6" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954d209e5b0b12864535f24908ed1b6795815f3c" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt; or a BOZ constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985219633a7a221ce7429a593a7ea98cfdb906ee" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt; or a BOZ constant. If both &lt;var&gt;I&lt;/var&gt; and &lt;var&gt;J&lt;/var&gt; have integer type, then they shall have the same kind type parameter. &lt;var&gt;I&lt;/var&gt; and &lt;var&gt;J&lt;/var&gt; shall not both be BOZ constants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3c1d4e0560d485dd43b4ebc34a355f876a6c7a" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c873ed5080dd40a90b878971029469034ffb7a" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45da5aea5ca8b5b47b9217c3a5a4bf1292a5e85" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79acf4bfdeb561f395641b666b8eeb527fa7f30b" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;INTEGER&lt;/code&gt;. It shall be nonnegative. If &lt;var&gt;I&lt;/var&gt; is not a BOZ constant, then &lt;var&gt;SHIFT&lt;/var&gt; shall be less than or equal to &lt;code&gt;BIT_SIZE(I)&lt;/code&gt;; otherwise, &lt;var&gt;SHIFT&lt;/var&gt; shall be less than or equal to &lt;code&gt;BIT_SIZE(J)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea95c31f7dd63216b1c7aa45165bfcd39cccf538" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;LOGICAL&lt;/code&gt;, &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, &lt;code&gt;COMPLEX&lt;/code&gt; or &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a77199c0cffb898cb5c75c7be6f898ad36befa" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;LOGICAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad37da23a598e497f520e30369bdfdbe6701e4e2" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;REAL(4)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd182ad1d388affbb086f80f8aba65df378eb104" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;REAL&lt;/code&gt; and neither zero nor a negative integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b999ba086341cd3dfb75258cd7695eaacbafda1" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;REAL&lt;/code&gt; and not equal to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107c391232bbe283ec363877b424fb428d8f5e57" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359814fb1296ceee4b5ef2bc8f72cb5b61d75397" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9a87d1634016043c1bd7b02cc6f661e39ee0d2" translate="yes" xml:space="preserve">
          <source>Shall be of type &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61218d30df40f791c380df71487f1be95d84fde5" translate="yes" xml:space="preserve">
          <source>Shall be scalar and of type &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9614ea139357e98391668919a3060003e7eff2" translate="yes" xml:space="preserve">
          <source>Shall be scalar and of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcea1eb59b6b7dd483e7250d1580b2f0d59dc8c3" translate="yes" xml:space="preserve">
          <source>Shall have either the POINTER or TARGET attribute. It shall not be a coindexed object. It shall either be a variable with interoperable type and kind type parameters, or be a scalar, nonpolymorphic variable with no length type parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a8b605dbff49425b285257e265a9db15849f6a" translate="yes" xml:space="preserve">
          <source>Shall of type &lt;code&gt;CHARACTER&lt;/code&gt; and of default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d10107fbe472343ae4471df4e0b50709328691" translate="yes" xml:space="preserve">
          <source>Shall of type &lt;code&gt;CHARACTER&lt;/code&gt; and of default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59679a6e8770200d753263d42992ef3ad88ffcda" translate="yes" xml:space="preserve">
          <source>Shall of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083654838cf828c8f9e9acfd7ba8415e957c97e9" translate="yes" xml:space="preserve">
          <source>Shared (read) lock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a2669a9744063ea3431e093dad3e241f456603" translate="yes" xml:space="preserve">
          <source>Shift bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e2a6b7a9c9ff43661cd10d5b5292993a1cb4d9" translate="yes" xml:space="preserve">
          <source>Shift bits circularly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe491f4c15e6a3a57cef7ef5658d06a18ca9681" translate="yes" xml:space="preserve">
          <source>Short Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6410fa3e9afe342ffd817f52334796138bd31d1d" translate="yes" xml:space="preserve">
          <source>Short form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2c35bbc8a3e749558e0855f51b68c3a1c1041e" translate="yes" xml:space="preserve">
          <source>Show a backtrace</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecff78d7ae95d6244eae6c6673661491f05df28a" translate="yes" xml:space="preserve">
          <source>Show a warning when invoking &lt;code&gt;STOP&lt;/code&gt; and &lt;code&gt;ERROR STOP&lt;/code&gt; if a floating-point exception occurred. Possible values are (bitwise or-ed) &lt;code&gt;GFC_FPE_INVALID&lt;/code&gt; (1), &lt;code&gt;GFC_FPE_DENORMAL&lt;/code&gt; (2), &lt;code&gt;GFC_FPE_ZERO&lt;/code&gt; (4), &lt;code&gt;GFC_FPE_OVERFLOW&lt;/code&gt; (8), &lt;code&gt;GFC_FPE_UNDERFLOW&lt;/code&gt; (16), &lt;code&gt;GFC_FPE_INEXACT&lt;/code&gt; (32). Default: None (0). (Default in the compiler: &lt;code&gt;GFC_FPE_INVALID | GFC_FPE_DENORMAL |
GFC_FPE_ZERO | GFC_FPE_OVERFLOW | GFC_FPE_UNDERFLOW&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f335dbc317b84bd09397d4430be9c08d45dc4c4" translate="yes" xml:space="preserve">
          <source>Show backtrace on run-time errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fe220ce46ad3e61fa43b264dd8ded31e5c7a2f" translate="yes" xml:space="preserve">
          <source>Show location for runtime errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e6e21299565d17654368a67dced2b97efb0b7f" translate="yes" xml:space="preserve">
          <source>Sign copying function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa54822d1cb32774ba5ea7ed1c36aab22020b631" translate="yes" xml:space="preserve">
          <source>Signal handler (&lt;code&gt;INTEGER FUNCTION&lt;/code&gt; or &lt;code&gt;SUBROUTINE&lt;/code&gt;) or dummy/global &lt;code&gt;INTEGER&lt;/code&gt; scalar. &lt;code&gt;INTEGER&lt;/code&gt;. It is &lt;code&gt;INTENT(IN)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434f789a75433f30ae5c8b87b09a522352fd7e80" translate="yes" xml:space="preserve">
          <source>Signal handler (&lt;code&gt;INTEGER FUNCTION&lt;/code&gt; or &lt;code&gt;SUBROUTINE&lt;/code&gt;) or dummy/global &lt;code&gt;INTEGER&lt;/code&gt; scalar. The scalar values may be either &lt;code&gt;SIG_IGN=1&lt;/code&gt; to ignore the alarm generated or &lt;code&gt;SIG_DFL=0&lt;/code&gt; to set the default action. It is &lt;code&gt;INTENT(IN)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5839f31c80bbe22e4ca5c919be73ef68fe0c48b" translate="yes" xml:space="preserve">
          <source>Signal handling subroutine (or function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51ebb79e9543118703366d216afe4ef926bd390" translate="yes" xml:space="preserve">
          <source>Significant digits function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3df63517ac1354e83a34133483110df10d44593" translate="yes" xml:space="preserve">
          <source>Similar to the D/C prefixes to real functions to specify the input/output types, GNU Fortran offers B/I/J/K prefixes to integer functions for compatibility with DEC programs. The types implied by each are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305ae2b905b83f178ceea47d33d714854572bcd5" translate="yes" xml:space="preserve">
          <source>Similarly, replace a code fragment like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b47373c28af15534b0ccf85af5f48cb65a5356f" translate="yes" xml:space="preserve">
          <source>Since Fortran 2003 (ISO/IEC 1539-1:2004(E)) there is a standardized way to generate procedure and derived-type declarations and global variables which are interoperable with C (ISO/IEC 9899:1999). The &lt;code&gt;bind(C)&lt;/code&gt; attribute has been added to inform the compiler that a symbol shall be interoperable with C; also, some constraints are added. Note, however, that not all C features have a Fortran equivalent or vice versa. For instance, neither C&amp;rsquo;s unsigned integers nor C&amp;rsquo;s functions with variable number of arguments have an equivalent in Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b558a3010ff27c938b2481c330c617fd7674187" translate="yes" xml:space="preserve">
          <source>Sine function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd8e331b5a0e7bf18e7b4682be7c54ae74f4cef" translate="yes" xml:space="preserve">
          <source>Sine function, degrees</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20b8c7b39beb05e14dc6ae8ef85d6db93979710" translate="yes" xml:space="preserve">
          <source>Single-image mode, i.e. &lt;code&gt;num_images()&lt;/code&gt; is always one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1e9e2cc00f9cc3e5d7b651a2ce919268bbbe5c" translate="yes" xml:space="preserve">
          <source>Size in bits of the character storage unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847b0443e51c912262b22b5372e7aced274e6a31" translate="yes" xml:space="preserve">
          <source>Size in bits of the file-storage unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d110ab79f7fe17d53cc0b03c0c29ea1f42384796" translate="yes" xml:space="preserve">
          <source>Size in bytes of an expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8703cd257ba0428f4c26f356a7f327e820390280" translate="yes" xml:space="preserve">
          <source>Skip line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83b4eb15bdd4f8ad4bef962a3f9dd58927cc70d1" translate="yes" xml:space="preserve">
          <source>Sleep for the specified number of seconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="851fc3df194bcf3118f479bace1ad57a8d234c3d" translate="yes" xml:space="preserve">
          <source>Smallest distance between two numbers of a given type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f04ff8dc3c8e63b97e01decc57e6caa7034a213" translate="yes" xml:space="preserve">
          <source>Smallest positive number of a real kind</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be514a30cc613020d7191a9562e5e8387969a6b7" translate="yes" xml:space="preserve">
          <source>Some Fortran compilers, including &lt;code&gt;g77&lt;/code&gt;, let the user declare &lt;code&gt;COMMON&lt;/code&gt; with the &lt;code&gt;VOLATILE&lt;/code&gt; attribute. This is invalid standard Fortran syntax and is not supported by &lt;code&gt;gfortran&lt;/code&gt;. Note that &lt;code&gt;gfortran&lt;/code&gt; accepts &lt;code&gt;VOLATILE&lt;/code&gt; variables in &lt;code&gt;COMMON&lt;/code&gt; blocks since revision 4.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b417dcb7f0cdd38035c49c88211f0b0ecfa4dc4a" translate="yes" xml:space="preserve">
          <source>Some Fortran compilers, including &lt;code&gt;g77&lt;/code&gt;, let the user declare &lt;code&gt;OPEN( ... NAME=)&lt;/code&gt;. This is invalid standard Fortran syntax and is not supported by &lt;code&gt;gfortran&lt;/code&gt;. &lt;code&gt;OPEN( ... NAME=)&lt;/code&gt; should be replaced with &lt;code&gt;OPEN( ... FILE=)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa16018396488e45984185fe32c12dca4e437df" translate="yes" xml:space="preserve">
          <source>Some Fortran compilers, including &lt;code&gt;g77&lt;/code&gt;, let the user declare complex functions with the syntax &lt;code&gt;COMPLEX FUNCTION name*16()&lt;/code&gt;, as well as &lt;code&gt;COMPLEX*16 FUNCTION name()&lt;/code&gt;. Both are non-standard, legacy extensions. &lt;code&gt;gfortran&lt;/code&gt; accepts the latter form, which is more common, but not the former.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330e58c7cf201e9e8951112c4f8340857d962f7d" translate="yes" xml:space="preserve">
          <source>Some checks require that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b93ec6372e9d82f250934c32fab66809a012a76" translate="yes" xml:space="preserve">
          <source>Some legacy codes rely on allowing &lt;code&gt;READ&lt;/code&gt; or &lt;code&gt;WRITE&lt;/code&gt; after the EOF file marker in order to find the end of a file. GNU Fortran normally rejects these codes with a run-time error message and suggests the user consider &lt;code&gt;BACKSPACE&lt;/code&gt; or &lt;code&gt;REWIND&lt;/code&gt; to properly position the file before the EOF marker. As an extension, the run-time error may be disabled using -std=legacy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03465045a7324a27b28a2683aefc5ea96f79fad" translate="yes" xml:space="preserve">
          <source>Some of these have no effect when compiling programs written in Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c528c0b130160ed58ee14f8bbba2d7a132054b" translate="yes" xml:space="preserve">
          <source>Some users try to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b93f1d8852ced513a1665df75b215fa78d8b4f" translate="yes" xml:space="preserve">
          <source>Source files with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c92c7afcac737084215f99693bbc5bccfb8b5c6" translate="yes" xml:space="preserve">
          <source>Specific names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c59c79b4cdd1fc7b8e82868c219069dbfbbe1c" translate="yes" xml:space="preserve">
          <source>Specifically,</source>
          <target state="translated">Specifically,</target>
        </trans-unit>
        <trans-unit id="b7d7c4da380841e46021fb0ca037b1a5efba92c6" translate="yes" xml:space="preserve">
          <source>Specify &lt;var&gt;prefix&lt;/var&gt; as the prefix for subsequent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cafcca0fb6829439dd4875c78d1ab99c05367a" translate="yes" xml:space="preserve">
          <source>Specify a list of floating point exception traps to enable. On most systems, if a floating point exception occurs and the trap for that exception is enabled, a SIGFPE signal will be sent and the program being aborted, producing a core file useful for debugging. &lt;var&gt;list&lt;/var&gt; is a (possibly empty) comma-separated list of the following exceptions: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d14f5b9fb87fc452c90c5fd85eec58bb8af5c343" translate="yes" xml:space="preserve">
          <source>Specify a list of floating-point exceptions, whose flag status is printed to &lt;code&gt;ERROR_UNIT&lt;/code&gt; when invoking &lt;code&gt;STOP&lt;/code&gt; and &lt;code&gt;ERROR STOP&lt;/code&gt;. &lt;var&gt;list&lt;/var&gt; can be either &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007bee526510282de934eac4e9bb4f5a71b15290" translate="yes" xml:space="preserve">
          <source>Specify that no implicit typing is allowed, unless overridden by explicit &lt;code&gt;IMPLICIT&lt;/code&gt; statements. This is the equivalent of adding &lt;code&gt;implicit none&lt;/code&gt; to the start of every procedure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934047251e46abde54628aa3fda3c2f88b9ff87a" translate="yes" xml:space="preserve">
          <source>Specify the layout used by the source file. The free form layout was introduced in Fortran 90. Fixed form was traditionally used in older Fortran programs. When neither option is specified, the source form is determined by the file extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9feccb43afe74e83bac143a53815e66e124b9b" translate="yes" xml:space="preserve">
          <source>Specify the length of record markers for unformatted files. Valid values for &lt;var&gt;length&lt;/var&gt; are 4 and 8. Default is 4. &lt;em&gt;This is different from previous versions of &lt;code&gt;gfortran&lt;/code&gt;&lt;/em&gt;, which specified a default record marker length of 8 on most systems. If you want to read or write files compatible with earlier versions of &lt;code&gt;gfortran&lt;/code&gt;, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e44f89fd4b4a7cb11e8742aba60a9407fbdab5" translate="yes" xml:space="preserve">
          <source>Specify the maximum allowed identifier length. Typical values are 31 (Fortran 95) and 63 (Fortran 2003 and Fortran 2008).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f842c86bbc70731f99d854a980b060de5b3876ec" translate="yes" xml:space="preserve">
          <source>Specify the maximum length for a subrecord. The maximum permitted value for length is 2147483639, which is also the default. Only really useful for use by the gfortran testsuite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92aac594a200fd2711a82227e38fe172fea18e0" translate="yes" xml:space="preserve">
          <source>Specify the representation of data for unformatted files. Valid values for conversion are: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4ed15eea461bb8014411c266c96a1a9fc59ec1" translate="yes" xml:space="preserve">
          <source>Specify the standard to which the program is expected to conform, which may be one of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fb77efc8cd285dcec19a190e5fd370517a59b0" translate="yes" xml:space="preserve">
          <source>Specifying conventions for function calls, data layout and register usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf758a512fcb7f79183738aac054c2326607ccf" translate="yes" xml:space="preserve">
          <source>Square-root function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfa66079d9b7229409430972fd5f1567d78a3b6" translate="yes" xml:space="preserve">
          <source>Standard</source>
          <target state="translated">Standard</target>
        </trans-unit>
        <trans-unit id="fdf0b1772ed9fe8b027fb1bdbf1f5645c72d2142" translate="yes" xml:space="preserve">
          <source>Standard-warning flag; prints a warning to standard error. Default: &lt;code&gt;GFC_STD_F95_DEL | GFC_STD_LEGACY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1827308ecb2a0054500ee8ceacdbae700a527098" translate="yes" xml:space="preserve">
          <source>Standard:</source>
          <target state="translated">Standard:</target>
        </trans-unit>
        <trans-unit id="bf57eaa8a992cef83f9a8cc2b5ba8cdf1caa7f14" translate="yes" xml:space="preserve">
          <source>Standards supported by GNU Fortran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e149932fc991487b43d88fbb3c88557a30ae2f" translate="yes" xml:space="preserve">
          <source>Status of GNU Fortran, roadmap, proposed extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd5c058e1730e08895ad358c106e74bc0ca8e5e" translate="yes" xml:space="preserve">
          <source>Status of a C pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ca235b257ccd0860d76314611059c238401ef9" translate="yes" xml:space="preserve">
          <source>Status of a pointer or pointer/target pair</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1220a311dc382a2a6d99c70419cb6dd623e3905" translate="yes" xml:space="preserve">
          <source>Status of allocatable entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16c0b4b39eba191712c74c7827bcc81ed270e11" translate="yes" xml:space="preserve">
          <source>Storage size in bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a03f9b3f2e03ebe7958367b1639444f18c777e" translate="yes" xml:space="preserve">
          <source>Store the elements of &lt;var&gt;VECTOR&lt;/var&gt; in an array of higher rank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3c6a85f92b40e5d5652603eea6753e9e44b23c" translate="yes" xml:space="preserve">
          <source>Stores the current user name in &lt;var&gt;LOGIN&lt;/var&gt;. (On systems where POSIX functions &lt;code&gt;geteuid&lt;/code&gt; and &lt;code&gt;getpwuid&lt;/code&gt; are not available, and the &lt;code&gt;getlogin&lt;/code&gt; function is not implemented either, this will return a blank string.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b89887b0b3769cb75ec7b6a11daec7fdd6c0f77" translate="yes" xml:space="preserve">
          <source>Stores the elements of &lt;var&gt;ARRAY&lt;/var&gt; in an array of rank one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0f2fee5b79b050c6ce64cfa28372afec04f15e" translate="yes" xml:space="preserve">
          <source>Stores the value of &lt;var&gt;NAME&lt;/var&gt; in &lt;var&gt;VALUE&lt;/var&gt;. If &lt;var&gt;VALUE&lt;/var&gt; is not large enough to hold the data, it is truncated. If &lt;var&gt;NAME&lt;/var&gt; is not set, &lt;var&gt;VALUE&lt;/var&gt; will be filled with blanks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227f47ad25f7c5b494804a9dd6a35a5495ff91dc" translate="yes" xml:space="preserve">
          <source>Stores the value of &lt;var&gt;NAME&lt;/var&gt; in &lt;var&gt;VALUE&lt;/var&gt;. If &lt;var&gt;VALUE&lt;/var&gt; is not large enough to hold the data, it is truncated. If &lt;var&gt;NAME&lt;/var&gt; is not set, &lt;var&gt;VALUE&lt;/var&gt; will be filled with blanks. Argument &lt;var&gt;LENGTH&lt;/var&gt; contains the length needed for storing the environment variable &lt;var&gt;NAME&lt;/var&gt; or zero if it is not present. &lt;var&gt;STATUS&lt;/var&gt; is -1 if &lt;var&gt;VALUE&lt;/var&gt; is present but too short for the environment variable; it is 1 if the environment variable does not exist and 2 if the processor does not support environment variables; in all other cases &lt;var&gt;STATUS&lt;/var&gt; is zero. If &lt;var&gt;TRIM_NAME&lt;/var&gt; is present with the value &lt;code&gt;.FALSE.&lt;/code&gt;, the trailing blanks in &lt;var&gt;NAME&lt;/var&gt; are significant; otherwise they are not part of the environment variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd7e5fcdbe4f6544e81555a5624d8c4d66ac1d0" translate="yes" xml:space="preserve">
          <source>Strings are handled quite differently in C and Fortran. In C a string is a &lt;code&gt;NUL&lt;/code&gt;-terminated array of characters while in Fortran each string has a length associated with it and is thus not terminated (by e.g. &lt;code&gt;NUL&lt;/code&gt;). For example, if one wants to use the following C function,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c8c3b89be632fb9b2103e87e817938089482e20" translate="yes" xml:space="preserve">
          <source>Structure types may be declared nested within another parent structure. The syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57d3bcdf7da6a7f377bf807ee9383a5cca867462" translate="yes" xml:space="preserve">
          <source>Structures act like derived types with the &lt;code&gt;SEQUENCE&lt;/code&gt; attribute. Otherwise they may contain no specifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f83e75b3335d3b26aab4293c8147cdcb21fe5a" translate="yes" xml:space="preserve">
          <source>Structures may contain &lt;code&gt;UNION&lt;/code&gt; blocks. For more detail see the section on &lt;a href=&quot;union-and-map#UNION-and-MAP&quot;&gt;UNION and MAP&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647a9b88c6ba11fd20ea096190f7b379a270fde4" translate="yes" xml:space="preserve">
          <source>Structures may share names with other symbols. For example, the following is invalid for derived types, but valid for structures:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84e4ab7045c48258995a851c353c186a922bfd8" translate="yes" xml:space="preserve">
          <source>Structures support old-style initialization of components, like those described in &lt;a href=&quot;old_002dstyle-variable-initialization#Old_002dstyle-variable-initialization&quot;&gt;Old-style variable initialization&lt;/a&gt;. For array initializers, an initializer may contain a repeat specification of the form &lt;code&gt;&amp;lt;literal-integer&amp;gt; * &amp;lt;constant-initializer&amp;gt;&lt;/code&gt;. The value of the integer indicates the number of times to repeat the constant initializer when expanding the initializer list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fab76969984e9a43b1602c03ad65def9839419" translate="yes" xml:space="preserve">
          <source>Submodules are supported. It should noted that &lt;code&gt;MODULEs&lt;/code&gt; do not produce the smod file needed by the descendent &lt;code&gt;SUBMODULEs&lt;/code&gt; unless they contain at least one &lt;code&gt;MODULE PROCEDURE&lt;/code&gt; interface. The reason for this is that &lt;code&gt;SUBMODULEs&lt;/code&gt; are useless without &lt;code&gt;MODULE PROCEDUREs&lt;/code&gt;. See http://j3-fortran.org/doc/meeting/207/15-209.txt for a discussion and a draft interpretation. Adopting this interpretation has the advantage that code that does not use submodules does not generate smod files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1889bba143969c108d68eb72184e742c5e04cfb" translate="yes" xml:space="preserve">
          <source>Subroutine</source>
          <target state="translated">Subroutine</target>
        </trans-unit>
        <trans-unit id="754c0d9c9ba9ef9d6d7c88e404d79d19fdd48d2f" translate="yes" xml:space="preserve">
          <source>Subroutine (or function) to convert a time into a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c323a853729ad8093638531ea3340eab0a9593" translate="yes" xml:space="preserve">
          <source>Subroutine (or function) to get the current time as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4583f6b494968a4f6d91c5d628260c1424017395" translate="yes" xml:space="preserve">
          <source>Subroutine, function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e058745ed0f2b958d88be66a81db31ac623dc424" translate="yes" xml:space="preserve">
          <source>Subroutines and functions have to have the &lt;code&gt;BIND(C)&lt;/code&gt; attribute to be compatible with C. The dummy argument declaration is relatively straightforward. However, one needs to be careful because C uses call-by-value by default while Fortran behaves usually similar to call-by-reference. Furthermore, strings and pointers are handled differently. Note that in Fortran 2003 and 2008 only explicit size and assumed-size arrays are supported but not assumed-shape or deferred-shape (i.e. allocatable or pointer) arrays. However, those are allowed since the Technical Specification 29113, see &lt;a href=&quot;further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C&quot;&gt;Further Interoperability of Fortran with C&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e1c1ab85abe90d71fa3c8975edc11fbe3572b9" translate="yes" xml:space="preserve">
          <source>Subroutines do not return a value (matching C99&amp;rsquo;s &lt;code&gt;void&lt;/code&gt;) while functions either return a value as specified in the platform ABI or the result variable is passed as hidden argument to the function and no result is returned. A hidden result variable is used when the result variable is an array or of type &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa26f312b9334a5a4f8f1fab093a66686392740c" translate="yes" xml:space="preserve">
          <source>Subsequent invocations of &lt;code&gt;DTIME&lt;/code&gt; return values accumulated since the previous invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ab4445ec4faa01525289dc23a91fc3fe290857" translate="yes" xml:space="preserve">
          <source>Sum of array elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f92ff8b9a66ff56d741b1139022df1c2c24f85" translate="yes" xml:space="preserve">
          <source>Sum of values on the current set of images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d80f8cda5d91e566d1de99e8f316869b58a87b4" translate="yes" xml:space="preserve">
          <source>Support for &lt;code&gt;ALLOCATE&lt;/code&gt; with &lt;code&gt;MOLD&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d0ae6890c6068e3b32ebf3cd312809dcb1f2fe" translate="yes" xml:space="preserve">
          <source>Support for Unicode characters (ISO 10646) and UTF-8, including the &lt;code&gt;SELECTED_CHAR_KIND&lt;/code&gt; and &lt;code&gt;NEW_LINE&lt;/code&gt; intrinsic functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45c1318bd9d40a8fdeeff4b420e3be5188abf93" translate="yes" xml:space="preserve">
          <source>Support for binary, octal and hexadecimal (BOZ) constants in the intrinsic functions &lt;code&gt;INT&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, &lt;code&gt;CMPLX&lt;/code&gt; and &lt;code&gt;DBLE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f66e7238910c46fd66a5f462079be9d2ff0e61" translate="yes" xml:space="preserve">
          <source>Support for namelist variables with allocatable and pointer attribute and nonconstant length type parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d4519abbef8f7502d6f73fde411179a797c8cb" translate="yes" xml:space="preserve">
          <source>Support for the &lt;code&gt;CONTIGUOUS&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e2920a5744f6c6c78233c29d4f8f6a373e1208" translate="yes" xml:space="preserve">
          <source>Support for the &lt;code&gt;IMPURE&lt;/code&gt; attribute for procedures, which allows for &lt;code&gt;ELEMENTAL&lt;/code&gt; procedures without the restrictions of &lt;code&gt;PURE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8ea217867460fff7ab67c41efd35c13b62b84c" translate="yes" xml:space="preserve">
          <source>Support for the &lt;code&gt;STORAGE_SIZE&lt;/code&gt; intrinsic inquiry function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af639b2dcc59077cad6ad238d91096cac3652058" translate="yes" xml:space="preserve">
          <source>Support for the asynchronous input/output syntax; however, the data transfer is currently always synchronously performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fd23d38d68170936acfd22c3e88b67e9799f61" translate="yes" xml:space="preserve">
          <source>Support for the declaration of enumeration constants via the &lt;code id=&quot;index-fshort_002denums-1&quot;&gt;ENUM&lt;/code&gt; and &lt;code&gt;ENUMERATOR&lt;/code&gt; statements. Interoperability with &lt;code&gt;gcc&lt;/code&gt; is guaranteed also for the case where the &lt;code&gt;-fshort-enums&lt;/code&gt; command line option is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d8dba928fb9d3055d9746ebac9b9dda4cfa98f" translate="yes" xml:space="preserve">
          <source>Support of the &lt;code&gt;EXECUTE_COMMAND_LINE&lt;/code&gt; intrinsic subroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e60c3b89cf2f18ac57a98b47c681dc87b11d64" translate="yes" xml:space="preserve">
          <source>Support of the &lt;code&gt;PARITY&lt;/code&gt; intrinsic functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef004d704e215229e2c3c35bf2c6848afe98297" translate="yes" xml:space="preserve">
          <source>Symbol tables, measurements, and debugging dumps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d309885a631254e163dd5e47ee38bdffe18fa286" translate="yes" xml:space="preserve">
          <source>Synchronization between the specified images; the program only continues on a given image after this function has been called on all images specified for that image. Note that one image can wait for all other images in the current team (e.g. via &lt;code&gt;sync images(*)&lt;/code&gt;) while those only wait for that specific image. Additionally, &lt;code&gt;sync images&lt;/code&gt; ensures that all pending data transfers of previous segments have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a447f210957da5de9925077a7b89f12227a84bd2" translate="yes" xml:space="preserve">
          <source>Synchronization of all images in the current team; the program only continues on a given image after this function has been called on all images of the current team. Additionally, it ensures that all pending data transfers of previous segment have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de8dba368e7754dc199c99b017f5c51265ee8dc" translate="yes" xml:space="preserve">
          <source>Syntax:</source>
          <target state="translated">Syntax:</target>
        </trans-unit>
        <trans-unit id="295f55db186a0ed6dbe566eddb168e6f5cb08730" translate="yes" xml:space="preserve">
          <source>System time in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaa94dbfd3889bcf9729fe071f31cfb5a17c80d" translate="yes" xml:space="preserve">
          <source>TR 15581:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a23b405dd9b6ceefd61dd375a6f94480eb9e72" translate="yes" xml:space="preserve">
          <source>TS 18508 or later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23f0f18bceb08edf425ceb039bfcc4fdead29ecb" translate="yes" xml:space="preserve">
          <source>TS 29113</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bf927f2de0d8da70e9718788baed87c5c813b3" translate="yes" xml:space="preserve">
          <source>TTYNAM</source>
          <target state="translated">TTYNAM</target>
        </trans-unit>
        <trans-unit id="9730d4326a7b8a0d13c2be3b7fe29b80ad152bf6" translate="yes" xml:space="preserve">
          <source>Table of Contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d70668be1ee6fefa104cf95c84c93674f0ed6fa" translate="yes" xml:space="preserve">
          <source>Tangent function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5024eeaa18746b9c8e2e0438e9092ac03e18b8b" translate="yes" xml:space="preserve">
          <source>Tangent function, degrees</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f394cc412fd3be14e86981af1ff41d5819e50239" translate="yes" xml:space="preserve">
          <source>Technical Specification (TS) 18508 or later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4643e7131e59d0687a8f4c65bed9455384a9a815" translate="yes" xml:space="preserve">
          <source>Technical Specification (TS) 29113</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30df28638fe52ef8b926a803c3916d26c4afd8c4" translate="yes" xml:space="preserve">
          <source>Test for end-of-file value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1df02844df432961ad4933504ac2f4370bb30de" translate="yes" xml:space="preserve">
          <source>Test for end-of-record value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd30c28c0790cde5a79ae8e7287e8f083133a716" translate="yes" xml:space="preserve">
          <source>Tests for a NaN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="translated">The</target>
        </trans-unit>
        <trans-unit id="920b44ba9703f20cc99c30f463396e1bfe7a030f" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;index-ACCESS_003d_0027STREAM_0027-I_002fO&quot;&gt;OPEN&lt;/code&gt; statement supports the &lt;code&gt;ACCESS='STREAM'&lt;/code&gt; specifier, allowing I/O without any record structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45096fc8f1ab49cab0a6901a7e71262ecf34c360" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;index-statement_002c-IMPORT&quot;&gt;IMPORT&lt;/code&gt; statement, allowing to import host-associated derived types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f84c4b5337ae02ab73e33c59078953e36c7099" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;index-statement_002c-PROTECTED&quot;&gt;PROTECTED&lt;/code&gt; statement and attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e88bfdb12c0cf835fe3109c5bb3213b4b76a81a" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;index-statement_002c-VALUE&quot;&gt;VALUE&lt;/code&gt; statement and attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86514f2a65e089b234b1d9556b0bcb1cadae651d" translate="yes" xml:space="preserve">
          <source>The &lt;code id=&quot;index-statement_002c-VOLATILE&quot;&gt;VOLATILE&lt;/code&gt; statement and attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5504146bf19d4e68b6fec560b42b55f404d0020a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ASSOCIATE&lt;/code&gt; construct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c1917fafd7b5d9b38f2c94ec28f4e4c439891b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ASYNCHRONOUS&lt;/code&gt; attribute has been clarified and extended to allow its use with asynchronous communication in user-provided libraries such as in implementations of the Message Passing Interface specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e0615ffeb6018f5b0ce9056ef423f13d5eca97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BLOCK&lt;/code&gt; construct is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc580d700e7004f2cd49fc0c083d55e80b601e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CARRIAGECONTROL&lt;/code&gt; specifier allows a user to control line termination settings between output records for an I/O unit. The specifier has no meaning for readonly files. When &lt;code&gt;CARRAIGECONTROL&lt;/code&gt; is specified upon opening a unit for formatted writing, the exact &lt;code&gt;CARRIAGECONTROL&lt;/code&gt; setting determines what characters to write between output records. The syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fba2fe960da19bc62f070f27b6550cdb35ebb169" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMMAND&lt;/code&gt; argument is passed to the shell and executed, using the C library&amp;rsquo;s &lt;code&gt;system&lt;/code&gt; call. (The shell is &lt;code&gt;sh&lt;/code&gt; on Unix systems, and &lt;code&gt;cmd.exe&lt;/code&gt; on Windows.) If &lt;code&gt;WAIT&lt;/code&gt; is present and has the value false, the execution of the command is asynchronous if the system supports it; otherwise, the command is executed synchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed18c8819b983c42d20b38a26c488521983db98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CO_MIN&lt;/code&gt; and &lt;code&gt;CO_MAX&lt;/code&gt; and &lt;code&gt;SUM&lt;/code&gt; reduction intrinsics. And the &lt;code&gt;CO_BROADCAST&lt;/code&gt; and &lt;code&gt;CO_REDUCE&lt;/code&gt; intrinsic, except that those do not support polymorphic types or types with allocatable, pointer or polymorphic components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7352f03cc2aead00770267e37d8a0c4c87f4e930" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DO CONCURRENT&lt;/code&gt; construct is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facfde94d1951d5b65a2e66bfc6848f3e67203f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EXECUTE_COMMAND_LINE&lt;/code&gt; and &lt;code&gt;SYSTEM&lt;/code&gt; intrinsics are implemented with the &lt;code&gt;system&lt;/code&gt; function, which need not be thread-safe. It is the responsibility of the user to ensure that &lt;code&gt;system&lt;/code&gt; is not called concurrently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8420e4c7eee1e1983bfaef583dedee78915cf077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EXIT&lt;/code&gt; statement (with construct-name) can be now be used to leave not only the &lt;code&gt;DO&lt;/code&gt; but also the &lt;code&gt;ASSOCIATE&lt;/code&gt;, &lt;code&gt;BLOCK&lt;/code&gt;, &lt;code&gt;IF&lt;/code&gt;, &lt;code&gt;SELECT CASE&lt;/code&gt; and &lt;code&gt;SELECT TYPE&lt;/code&gt; constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76bb23be6fc1777a8c9f6b4768f70589bbfaa859" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FLUSH&lt;/code&gt; intrinsic and the Fortran 2003 &lt;code&gt;FLUSH&lt;/code&gt; statement have identical effect: they flush the runtime library&amp;rsquo;s I/O buffer so that the data becomes visible to other processes. This does not guarantee that the data is committed to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4472b4380d9da0c52e01a008ea10625f54d3a97c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IEEE_EXCEPTIONS&lt;/code&gt;, &lt;code&gt;IEEE_ARITHMETIC&lt;/code&gt;, and &lt;code&gt;IEEE_FEATURES&lt;/code&gt; intrinsic modules provide support for exceptions and IEEE arithmetic, as defined in Fortran 2003 and later standards, and the IEC 60559:1989 standard (&lt;em&gt;Binary floating-point arithmetic for microprocessor systems&lt;/em&gt;). These modules are only provided on the following supported platforms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d10dd9bfad9a2504d6cfce17c495c7bd19775c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INT{8,16,32}&lt;/code&gt; and &lt;code&gt;REAL{32,64,128}&lt;/code&gt; kind type parameters and the array-valued named constants &lt;code&gt;INTEGER_KINDS&lt;/code&gt;, &lt;code&gt;LOGICAL_KINDS&lt;/code&gt;, &lt;code&gt;REAL_KINDS&lt;/code&gt; and &lt;code&gt;CHARACTER_KINDS&lt;/code&gt; of the intrinsic module &lt;code&gt;ISO_FORTRAN_ENV&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623d48a4c3d0da47e5e58dcde9bf455eb5ce3ad9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ISO_C_BINDING&lt;/code&gt; module provides the following named constants of type default integer, which can be used as KIND type parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f41e5b4de452a6667599104354b103f86d77b54c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ISO_FORTRAN_ENV&lt;/code&gt; module provides the following scalar default-integer named constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f855677a2dceb909d0cee17c462b23e03ca44e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KIND&lt;/code&gt; type parameters supported by GNU Fortran for the primitive data types are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5b85b6b306cd2f682e99e50b6f6e728ca4c66b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KIND&lt;/code&gt; value matches the storage size in bytes, except for &lt;code&gt;COMPLEX&lt;/code&gt; where the storage size is twice as much (or both real and imaginary part are a real value of the given size). It is recommended to use the &lt;a href=&quot;selected_005fchar_005fkind#SELECTED_005fCHAR_005fKIND&quot;&gt;SELECTED_CHAR_KIND&lt;/a&gt;, &lt;a href=&quot;selected_005fint_005fkind#SELECTED_005fINT_005fKIND&quot;&gt;SELECTED_INT_KIND&lt;/a&gt; and &lt;a href=&quot;selected_005freal_005fkind#SELECTED_005fREAL_005fKIND&quot;&gt;SELECTED_REAL_KIND&lt;/a&gt; intrinsics or the &lt;code&gt;INT8&lt;/code&gt;, &lt;code&gt;INT16&lt;/code&gt;, &lt;code&gt;INT32&lt;/code&gt;, &lt;code&gt;INT64&lt;/code&gt;, &lt;code&gt;REAL32&lt;/code&gt;, &lt;code&gt;REAL64&lt;/code&gt;, and &lt;code&gt;REAL128&lt;/code&gt; parameters of the &lt;code&gt;ISO_FORTRAN_ENV&lt;/code&gt; module instead of the concrete values. The available kind parameters can be found in the constant arrays &lt;code&gt;CHARACTER_KINDS&lt;/code&gt;, &lt;code&gt;INTEGER_KINDS&lt;/code&gt;, &lt;code&gt;LOGICAL_KINDS&lt;/code&gt; and &lt;code&gt;REAL_KINDS&lt;/code&gt; in the &lt;a href=&quot;iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV&quot;&gt;ISO_FORTRAN_ENV&lt;/a&gt; module. For C interoperability, the kind parameters of the &lt;a href=&quot;iso_005fc_005fbinding#ISO_005fC_005fBINDING&quot;&gt;ISO_C_BINDING&lt;/a&gt; module should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14960744dc39f2917ab47918b56e09549fa09ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OPEN&lt;/code&gt; statement now supports the &lt;code&gt;NEWUNIT=&lt;/code&gt; option, which returns a unique file unit, thus preventing inadvertent use of the same unit in different parts of the program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0484a82fa69d5c454cde2d61223f01650e4258e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OPTIONAL&lt;/code&gt; attribute is allowed for dummy arguments of &lt;code&gt;BIND(C) procedures.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446b2ae73b92f72f1aa6827cb25bb3c4e22eacc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OPTIONAL&lt;/code&gt; attribute is now allowed for dummy arguments; an absent argument matches a &lt;code&gt;NULL&lt;/code&gt; pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130a2a358c87406b9053bdb06b11a394a4f0190a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PRIVATE&lt;/code&gt; and &lt;code&gt;PUBLIC&lt;/code&gt; attributes may be given individually to derived-type components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7ae7019ee00782d790b61f71bce853aa5c2eb9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;P_tmpdir&lt;/code&gt; macro if it is defined, otherwise the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fe1852daa15bf731aa12c7f8980de427d6e9a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RANK&lt;/code&gt; intrinsic is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8f45b8e26fae1560b822cf9dde4c60cc30bea6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;READONLY&lt;/code&gt; specifier may be given upon opening a unit, and is equivalent to specifying &lt;code&gt;ACTION='READ'&lt;/code&gt;, except that the file may not be deleted on close (i.e. &lt;code&gt;CLOSE&lt;/code&gt; with &lt;code&gt;STATUS=&quot;DELETE&quot;&lt;/code&gt;). The syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d70d8ed9058b9888c753685590b471ef3b12dcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SHARE&lt;/code&gt; specifier allows system-level locking on a unit upon opening it for controlled access from multiple processes/threads. The &lt;code&gt;SHARE&lt;/code&gt; specifier has several forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d6590bae02fc5b90b294ff7aa4b4bc9def5ef5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SHORT&lt;/code&gt; intrinsic is equivalent to &lt;code&gt;INT2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96dc890ec2c865a859ecac209ee0e6d122506a4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SIGNAL&lt;/code&gt; function returns the value returned by &lt;code&gt;signal(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29c229dedf88da4f005066da51eaa763b4829a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;STOP&lt;/code&gt; and the new &lt;code&gt;ERROR STOP&lt;/code&gt; statements now support all constant expressions. Both show the signals which were signaling at termination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb32f1cbbaf47293cdfbc55ad1c740d0690ed614" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;g0&lt;/code&gt; format descriptor and unlimited format items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33892e073ac4756ea4fbabe940f91a33cfef0b30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gfortran&lt;/code&gt; command itself, which also might be installed as the system&amp;rsquo;s &lt;code&gt;f95&lt;/code&gt; command. &lt;code&gt;gfortran&lt;/code&gt; is just another driver program, but specifically for the Fortran compiler only. The difference with &lt;code&gt;gcc&lt;/code&gt; is that &lt;code&gt;gfortran&lt;/code&gt; will automatically link the correct libraries to your program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48bdc9dfb548241d9dbdeb1a94f5e15866dfda82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gfortran&lt;/code&gt; command supports all the options supported by the &lt;code&gt;gcc&lt;/code&gt; command. Only options specific to GNU Fortran are documented here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b01ed347cee40ea87ddd6df74acb866e67c65d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gfortran&lt;/code&gt; compiler currently does not make use of any environment variables to control its operation above and beyond those that affect the operation of &lt;code&gt;gcc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd4bb303202ec15ee6f4d5a0b61b1f1bd854722" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;opr_flags&lt;/var&gt; denote the following; the values are bitwise ored. &lt;code&gt;GFC_CAF_BYREF&lt;/code&gt; (1) if the result should be returned by reference; &lt;code&gt;GFC_CAF_HIDDENLEN&lt;/code&gt; (2) whether the result and argument string lengths shall be specified as hidden arguments; &lt;code&gt;GFC_CAF_ARG_VALUE&lt;/code&gt; (4) whether the arguments shall be passed by value, &lt;code&gt;GFC_CAF_ARG_DESC&lt;/code&gt; (8) whether the arguments shall be passed by descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9506e81a5231697b8ef5d703abb9251b59fa068" translate="yes" xml:space="preserve">
          <source>The Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000) varying length character strings. While GNU Fortran currently does not support such strings directly, there exist two Fortran implementations for them, which work with GNU Fortran. They can be found at &lt;a href=&quot;http://www.fortran.com/iso_varying_string.f95&quot;&gt;http://www.fortran.com/iso_varying_string.f95&lt;/a&gt; and at &lt;a href=&quot;ftp://ftp.nag.co.uk/sc22wg5/ISO_VARYING_STRING/&quot;&gt;ftp://ftp.nag.co.uk/sc22wg5/ISO_VARYING_STRING/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009794e423653684d6efce277fa7832d799ddf47" translate="yes" xml:space="preserve">
          <source>The Fortran compiler itself, (&lt;code&gt;f951&lt;/code&gt;). This is the GNU Fortran parser and code generator, linked to and interfaced with the GCC backend library. &lt;code&gt;f951&lt;/code&gt; &amp;ldquo;translates&amp;rdquo; the source code to assembler code. You would typically not use this program directly; instead, the &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;gfortran&lt;/code&gt; driver programs will call it for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6dfd15fd670e41586b27bbfd4703af2a1b6760" translate="yes" xml:space="preserve">
          <source>The Fortran preprocessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3d4fe55137b8c62beb83fbb82a02828095a6c8" translate="yes" xml:space="preserve">
          <source>The Fortran standard describes how a conforming program shall behave; however, the exact implementation is not standardized. In order to allow the user to choose specific implementation details, compiler directives can be used to set attributes of variables and procedures which are not part of the standard. Whether a given attribute is supported and its exact effects depend on both the operating system and on the processor; see &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/index.html#Top&quot;&gt;C Extensions&lt;/a&gt; in Using the GNU Compiler Collection (GCC) for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f942ce9e5f69d0a4e5d8d37a5af7e78fd8456694" translate="yes" xml:space="preserve">
          <source>The Fortran standard does not specify how variables of &lt;code&gt;LOGICAL&lt;/code&gt; type are represented, beyond requiring that &lt;code&gt;LOGICAL&lt;/code&gt; variables of default kind have the same storage size as default &lt;code&gt;INTEGER&lt;/code&gt; and &lt;code&gt;REAL&lt;/code&gt; variables. The GNU Fortran internal representation is as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343e4104efb344dcbb7395ba37595b3f6eebc6c3" translate="yes" xml:space="preserve">
          <source>The Fortran standard says that if an &lt;code&gt;OPEN&lt;/code&gt; statement is executed without an explicit &lt;code&gt;ACTION=&lt;/code&gt; specifier, the default value is processor dependent. GNU Fortran behaves as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3468ddae9c32c6132d7433792f69e8085de61ab0" translate="yes" xml:space="preserve">
          <source>The Fortran standard specifies the intrinsic subroutines &lt;code&gt;RANDOM_SEED&lt;/code&gt; to initialize the pseudo-random number generator and &lt;code&gt;RANDOM_NUMBER&lt;/code&gt; to generate pseudo-random numbers. These subroutines should be used in new codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2098b9ade0e09e6d19a1cfed3d9877a4a07f3e" translate="yes" xml:space="preserve">
          <source>The GNU Fortran Compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86e23567bee92f7afe6a3e8f22674d854ff4fc7" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler consists of several components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e0258122355889b39a591c1a0665968276e2d2" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler front end was designed initially as a free replacement for, or alternative to, the Unix &lt;code&gt;f95&lt;/code&gt; command; &lt;code&gt;gfortran&lt;/code&gt; is the command you will use to invoke the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5aafb173dca7bc2d8d896b9d8e7d39d4704948a" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler implements ISO/IEC 1539:1997 (Fortran 95). As such, it can also compile essentially all standard-compliant Fortran 90 and Fortran 77 programs. It also supports the ISO/IEC TR-15581 enhancements to allocatable arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c88254eafa29d9db6b67efa85623636d35bd630" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler is able to compile nearly all standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs, including a number of standard and non-standard extensions, and can be used on real-world programs. In particular, the supported extensions include OpenMP, Cray-style pointers, some old vendor extensions, and several Fortran 2003 and Fortran 2008 features, including TR 15581. However, it is still under development and has a few remaining rough edges. There also is initial support for OpenACC. Note that this is an experimental feature, incomplete, and subject to change in future versions of GCC. See &lt;a href=&quot;https://gcc.gnu.org/wiki/OpenACC&quot;&gt;https://gcc.gnu.org/wiki/OpenACC&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c17b1581b31031502b23bda06531c79972425c" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler is the successor to &lt;code&gt;g77&lt;/code&gt;, the Fortran 77 front end included in GCC prior to version 4. It is an entirely new program that has been designed to provide Fortran 95 support and extensibility for future Fortran language standards, as well as providing backwards compatibility for Fortran 77 and nearly all of the GNU language extensions supported by &lt;code&gt;g77&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac65f53cd2c43cff089a4bf4d8a82ed91c22b77" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler supports several of the new features of Fortran 2008; the &lt;a href=&quot;https://gcc.gnu.org/wiki/Fortran2008Status&quot;&gt;wiki&lt;/a&gt; has some information about the current Fortran 2008 implementation status. In particular, the following is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16c4381d75e9e903798c6d0750bfce9473cb30f" translate="yes" xml:space="preserve">
          <source>The GNU Fortran compiler supports the Fortran 77, 90 and 95 standards completely, parts of the Fortran 2003 and Fortran 2008 standards, and several vendor extensions. The development goal is to provide the following features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8aa17bd72d2642db35eba29c9d44052f01912b" translate="yes" xml:space="preserve">
          <source>The GNU Fortran runtime library uses various C library functions that depend on the locale, such as &lt;code&gt;strtod&lt;/code&gt; and &lt;code&gt;snprintf&lt;/code&gt;. In order to work correctly in locale-aware programs that set the locale using &lt;code&gt;setlocale&lt;/code&gt;, the locale is reset to the default &amp;ldquo;C&amp;rdquo; locale while executing a formatted &lt;code&gt;READ&lt;/code&gt; or &lt;code&gt;WRITE&lt;/code&gt; statement. On targets supporting the POSIX 2008 per-thread locale functions (e.g. &lt;code&gt;newlocale&lt;/code&gt;, &lt;code&gt;uselocale&lt;/code&gt;, &lt;code&gt;freelocale&lt;/code&gt;), these are used and thus the global locale set using &lt;code&gt;setlocale&lt;/code&gt; or the per-thread locales in other threads are not affected. However, on targets lacking this functionality, the global LC_NUMERIC locale is set to &amp;ldquo;C&amp;rdquo; during the formatted I/O. Thus, on such targets it&amp;rsquo;s not safe to call &lt;code&gt;setlocale&lt;/code&gt; concurrently from another thread while a Fortran formatted I/O operation is in progress. Also, other threads doing something dependent on the LC_NUMERIC locale might not work correctly if a formatted I/O operation is in progress in another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b35057219d65638d45dfe5a7ce889a9fb76a1fa" translate="yes" xml:space="preserve">
          <source>The GNU Fortran runtime library, (&lt;code&gt;libgfortran&lt;/code&gt;), supports being called concurrently from multiple threads with the following exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751255d6b7fed456e722786ee0892905efe0f7ec" translate="yes" xml:space="preserve">
          <source>The ID of the remote image; must be a positive number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72c6d4f312bbaa7e04aa9df26448b1968119bc2" translate="yes" xml:space="preserve">
          <source>The Network File System (NFS) implements a relaxed consistency model called open-to-close consistency. Closing a file forces dirty data and metadata to be flushed to the server, and opening a file forces the client to contact the server in order to revalidate cached data. &lt;code&gt;fsync&lt;/code&gt; will also force a flush of dirty data and metadata to the server. Similar to &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt;, acquiring and releasing &lt;code&gt;fcntl&lt;/code&gt; file locks, if the server supports them, will also force cache validation and flushing dirty data and metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6dc7792ca0a2cfc823d88ecf5b9feaea4152d0" translate="yes" xml:space="preserve">
          <source>The OpenACC Fortran runtime library routines are provided both in a form of a Fortran 90 module named &lt;code&gt;openacc&lt;/code&gt; and in a form of a Fortran &lt;code&gt;include&lt;/code&gt; file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c37c4afd6e44605ff1420c752a933c0483e4d7c" translate="yes" xml:space="preserve">
          <source>The OpenACC Fortran runtime library routines are provided both in a form of a Fortran 90 module, named &lt;code&gt;OPENACC&lt;/code&gt;, and in form of a Fortran &lt;code&gt;include&lt;/code&gt; file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b162d56706fe657a604a41e81f820948ae0a6787" translate="yes" xml:space="preserve">
          <source>The OpenMP Fortran runtime library routines are provided both in a form of a Fortran 90 module named &lt;code&gt;omp_lib&lt;/code&gt; and in a form of a Fortran &lt;code&gt;include&lt;/code&gt; file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13188ccaf005a832d681af76a79fc6feb9c5b704" translate="yes" xml:space="preserve">
          <source>The OpenMP Fortran runtime library routines are provided both in a form of two Fortran 90 modules, named &lt;code&gt;OMP_LIB&lt;/code&gt; and &lt;code&gt;OMP_LIB_KINDS&lt;/code&gt;, and in a form of a Fortran &lt;code&gt;include&lt;/code&gt; file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0804f408c1c7791959def4cf9173ba8322256c9" translate="yes" xml:space="preserve">
          <source>The Technical Specification ISO/IEC TS 29113:2012 on further interoperability of Fortran with C extends the interoperability support of Fortran 2003 and Fortran 2008. Besides removing some restrictions and constraints, it adds assumed-type (&lt;code&gt;TYPE(*)&lt;/code&gt;) and assumed-rank (&lt;code&gt;dimension&lt;/code&gt;) variables and allows for interoperability of assumed-shape, assumed-rank and deferred-shape arrays, including allocatables and pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0036793a75f2c12bebaeaa6416cd015d29ee8645" translate="yes" xml:space="preserve">
          <source>The Technical Specification adds the following new features, which are supported by GNU Fortran:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658fb8dc8cd8568fd26b6c7ad3e5834abad14e61" translate="yes" xml:space="preserve">
          <source>The Windows platform supports a relaxed metadata consistency model, where file metadata is written to the directory lazily. This means that, for instance, the &lt;code&gt;dir&lt;/code&gt; command can show a stale size for a file. One can force a directory metadata update by closing the unit, or by calling &lt;code&gt;_commit&lt;/code&gt; on the file descriptor. Note, though, that &lt;code&gt;_commit&lt;/code&gt; will force all dirty data to stable storage, which is often a very slow operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654a287bf20a139f0b3790d36ea6acf003979f70" translate="yes" xml:space="preserve">
          <source>The argument shall be a scalar or array of the type &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29b12cc20765956b21cc35cd2fc3afd82d07424" translate="yes" xml:space="preserve">
          <source>The argument shall be an &lt;code&gt;ALLOCATABLE&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f0d61951015ae19514ccfd39726f8e0f68e0f0" translate="yes" xml:space="preserve">
          <source>The argument shall be an &lt;code&gt;ALLOCATABLE&lt;/code&gt; scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3085d24db139936fd3e707668818fc9cf3f201ee" translate="yes" xml:space="preserve">
          <source>The argument shall be an interoperable data entity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cb9d5b25ecf77eeaf5c2c6659792540bbea7d9" translate="yes" xml:space="preserve">
          <source>The argument shall be of any type, rank or shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9808a4cb971aadbfb8c22d6409aafb5d1d3ca5" translate="yes" xml:space="preserve">
          <source>The arguments are passed in the following order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902a1c9145148c09875d60b409e8033b912ccc04" translate="yes" xml:space="preserve">
          <source>The arguments in the order in which they appear in the Fortran declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ab2b963b552f787db38de5520f601ed9cf6b2e" translate="yes" xml:space="preserve">
          <source>The association status of neither &lt;var&gt;POINTER&lt;/var&gt; nor &lt;var&gt;TARGET&lt;/var&gt; shall be undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3222e54c956ce12b9063356b76a2bd3d5a43dd" translate="yes" xml:space="preserve">
          <source>The attributes are specified using the syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52153740f05ba1061ad18cf77b4afdee2ee2b1bd" translate="yes" xml:space="preserve">
          <source>The beginning of the resulting array is made up of elements whose &lt;var&gt;MASK&lt;/var&gt; equals &lt;code&gt;TRUE&lt;/code&gt;. Afterwards, positions are filled with elements taken from &lt;var&gt;VECTOR&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a5f8fef42522dd71f4166ec2668f5cb21f5dea" translate="yes" xml:space="preserve">
          <source>The behavior of locking may vary with your operating system. On POSIX systems, locking is implemented with &lt;code&gt;fcntl&lt;/code&gt;. Consult your corresponding operating system&amp;rsquo;s manual pages for further details. Locking via &lt;code&gt;SHARE=&lt;/code&gt; is not supported on other systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d8015fbee17bbe3e3af5c1d8b5f8bd6cdfc1d2" translate="yes" xml:space="preserve">
          <source>The behavior of the &lt;code&gt;gfortran&lt;/code&gt; can be influenced by environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6942940da48df8c19c43e3c5cc2fb7ca79818e0" translate="yes" xml:space="preserve">
          <source>The calling conventions used by &lt;code&gt;g77&lt;/code&gt; (originally implemented in &lt;code&gt;f2c&lt;/code&gt;) require functions that return type default &lt;code&gt;REAL&lt;/code&gt; to actually return the C type &lt;code&gt;double&lt;/code&gt;, and functions that return type &lt;code&gt;COMPLEX&lt;/code&gt; to return the values via an extra argument in the calling sequence that points to where to store the return value. Under the default GNU calling conventions, such functions simply return their results as they would in GNU C&amp;mdash;default &lt;code&gt;REAL&lt;/code&gt; functions return the C type &lt;code&gt;float&lt;/code&gt;, and &lt;code&gt;COMPLEX&lt;/code&gt; functions return the GNU C type &lt;code&gt;complex&lt;/code&gt;. Additionally, this option implies the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83642ae96d29e2aaae156d9114f7851e07970824" translate="yes" xml:space="preserve">
          <source>The character length and/or coarray token and offset for the first argument which is a &lt;code&gt;CHARACTER&lt;/code&gt; or a nonallocatable coarray dummy argument, followed by the hidden arguments of the next dummy argument of such a type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1786395782e5235153efa9f6f8df9676c39c1ed" translate="yes" xml:space="preserve">
          <source>The compiler will also attempt to diagnose cases where the user&amp;rsquo;s program contains a correct usage of the language, but instructs the computer to do something questionable. This kind of diagnostics message is called a &lt;em&gt;warning message&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b2633dc0a0fa6d71335e07988d9d232de17b77" translate="yes" xml:space="preserve">
          <source>The contents of &lt;var&gt;definition&lt;/var&gt; are tokenized and processed as if they appeared during translation phase three in a &lt;code&gt;'#define'&lt;/code&gt; directive. In particular, the definition will be truncated by embedded newline characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb09eb93715088013f1929e082c2a0ff1a73c85b" translate="yes" xml:space="preserve">
          <source>The converted date and time as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a7ff67b0be082040277b623a5d7743cf031595" translate="yes" xml:space="preserve">
          <source>The current date and time as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a76961f3d4ead31ef02238eeedb1ff048e69f90" translate="yes" xml:space="preserve">
          <source>The day of the month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be15d8b45854b97b75ca5365a21a53c16c5426b5" translate="yes" xml:space="preserve">
          <source>The default is the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd88a4ce669a627e8ed2141940577056f3cee4a" translate="yes" xml:space="preserve">
          <source>The default value for &lt;var&gt;n&lt;/var&gt; is 30.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6081ff4a2f1a98d5994fbdeaaff108054f7c80f2" translate="yes" xml:space="preserve">
          <source>The default value for &lt;var&gt;n&lt;/var&gt; is 30. The &lt;code&gt;-fblas-matmul-limit&lt;/code&gt; can be used to change this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0bd620edc6c8f8c11c308674d5d8ebb6bd435d" translate="yes" xml:space="preserve">
          <source>The default value for &lt;var&gt;n&lt;/var&gt; is 32768.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3947a056fb111220388e968e34231ffc300e82" translate="yes" xml:space="preserve">
          <source>The default value for &lt;var&gt;n&lt;/var&gt; is 65535.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1b7c9b3ca972a313b3f30beeb11b9788881ead" translate="yes" xml:space="preserve">
          <source>The elements in &lt;code&gt;VALUES&lt;/code&gt; are the same as described by &lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033c72c0536773e0786f7804d1e733d75b24c826" translate="yes" xml:space="preserve">
          <source>The elements of &lt;var&gt;VALUES&lt;/var&gt; are assigned as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7c2cef3c3bca696197fa9ee308b75d474d58e8" translate="yes" xml:space="preserve">
          <source>The elements that are obtained and stored in the array &lt;code&gt;VALUES&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc395b0e32b76c23e65159bbc447af7185cbf8f" translate="yes" xml:space="preserve">
          <source>The enumeration of the &lt;code&gt;KIND&lt;/code&gt; type parameter is processor defined in the Fortran 95 standard. GNU Fortran defines the default integer type and default real type by &lt;code&gt;INTEGER(KIND=4)&lt;/code&gt; and &lt;code&gt;REAL(KIND=4)&lt;/code&gt;, respectively. The standard mandates that both data types shall have another kind, which have more precision. On typical target architectures supported by &lt;code&gt;gfortran&lt;/code&gt;, this kind type parameter is &lt;code&gt;KIND=8&lt;/code&gt;. Hence, &lt;code&gt;REAL(KIND=8)&lt;/code&gt; and &lt;code&gt;DOUBLE PRECISION&lt;/code&gt; are equivalent. In the description of generic intrinsic procedures, the kind type parameter will be specified by &lt;code&gt;KIND=*&lt;/code&gt;, and in the description of specific names for an intrinsic procedure the kind type parameter will be explicitly given (e.g., &lt;code&gt;REAL(KIND=4)&lt;/code&gt; or &lt;code&gt;REAL(KIND=8)&lt;/code&gt;). Finally, for brevity the optional &lt;code&gt;KIND=&lt;/code&gt; syntax will be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5997a422a269154f4da86699d6d5627f1620205a" translate="yes" xml:space="preserve">
          <source>The environment variable &lt;code&gt;TMPDIR&lt;/code&gt;, if it exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad5592ca62c9e4dbab81bd5c8cdab68c384f08c" translate="yes" xml:space="preserve">
          <source>The environment variable named &lt;code&gt;GFORTRAN_UNBUFFERED_PRECONNECTED&lt;/code&gt; controls whether I/O on a preconnected unit (i.e. STDOUT or STDERR) is unbuffered. If the first letter is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28076ae533efc7e87e76a39c013c678e2ef8fe89" translate="yes" xml:space="preserve">
          <source>The example will print &lt;code&gt;.TRUE.&lt;/code&gt; unless you are using a platform where default &lt;code&gt;REAL&lt;/code&gt; variables are unusually padded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde3ffa6e0a5937d5242afca72235900ea87f1a5" translate="yes" xml:space="preserve">
          <source>The first three exceptions (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8087b1d24c24061a4385b6875129e6230ef3371" translate="yes" xml:space="preserve">
          <source>The following bit intrinsics: &lt;code&gt;LEADZ&lt;/code&gt; and &lt;code&gt;TRAILZ&lt;/code&gt; for counting the number of leading and trailing zero bits, &lt;code&gt;POPCNT&lt;/code&gt; and &lt;code&gt;POPPAR&lt;/code&gt; for counting the number of one bits and returning the parity; &lt;code&gt;BGE&lt;/code&gt;, &lt;code&gt;BGT&lt;/code&gt;, &lt;code&gt;BLE&lt;/code&gt;, and &lt;code&gt;BLT&lt;/code&gt; for bitwise comparisons; &lt;code&gt;DSHIFTL&lt;/code&gt; and &lt;code&gt;DSHIFTR&lt;/code&gt; for combined left and right shifts, &lt;code&gt;MASKL&lt;/code&gt; and &lt;code&gt;MASKR&lt;/code&gt; for simple left and right justified masks, &lt;code&gt;MERGE_BITS&lt;/code&gt; for a bitwise merge using a mask, &lt;code&gt;SHIFTA&lt;/code&gt;, &lt;code&gt;SHIFTL&lt;/code&gt; and &lt;code&gt;SHIFTR&lt;/code&gt; for shift operations, and the transformational bit intrinsics &lt;code&gt;IALL&lt;/code&gt;, &lt;code&gt;IANY&lt;/code&gt; and &lt;code&gt;IPARITY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8970c27cc5c469b869cc2ade5383e4da26f39a17" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of &lt;code&gt;MALLOC&lt;/code&gt; and &lt;code&gt;FREE&lt;/code&gt; with Cray pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bd3fffd0f6b34419ed864fea14b8601f5d70b0" translate="yes" xml:space="preserve">
          <source>The following example will trigger the warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2913bb4e65d16b424d8ca27c80c3e250f268938c" translate="yes" xml:space="preserve">
          <source>The following intrinsic procedures are provided by the module; their definition can be found in the section Intrinsic Procedures of this manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada37ca8a632dfe6e4852ecc1cb13184db9338f8" translate="yes" xml:space="preserve">
          <source>The following options control the details of the Fortran dialect accepted by the compiler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85087ac1547792f91bb2dcd97bc3422cf74eb2cd" translate="yes" xml:space="preserve">
          <source>The following scalar integer named constants of the kind &lt;code&gt;omp_sched_kind&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603d726be70c4628da0cf7e3682b94dbfb03d8ff" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;strncpy&lt;/code&gt; copies at most &lt;var&gt;n&lt;/var&gt; characters from string &lt;var&gt;s2&lt;/var&gt; to &lt;var&gt;s1&lt;/var&gt; and returns &lt;var&gt;s1&lt;/var&gt;. In the following example, we ignore the return value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f140bb11d30fcc711f7462e5f5491e89a3b16fe" translate="yes" xml:space="preserve">
          <source>The function is modelled after the initialization function of the Message Passing Interface (MPI) specification. Due to the way coarray registration works, it might not be the first call to the library. If the main program is not written in Fortran and only a library uses coarrays, it can happen that this function is never called. Therefore, it is recommended that the library does not rely on the passed arguments and whether the call has been done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f205b8375c358255f0e939ddc3c86991dab3599c" translate="yes" xml:space="preserve">
          <source>The hour of the day</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f831d2d92f2cd6201b108abd02b2fb4cc9cbb9c" translate="yes" xml:space="preserve">
          <source>The intrinsic modules &lt;code&gt;ISO_FORTRAN_ENVIRONMENT&lt;/code&gt; is supported, which contains parameters of the I/O units, storage sizes. Additionally, procedures for C interoperability are available in the &lt;code&gt;ISO_C_BINDING&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf82e705c7474e43231c43083be398386d3d47d" translate="yes" xml:space="preserve">
          <source>The intrinsic procedures are described in &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3f6df925c962870bf09525c5774480699fcb43" translate="yes" xml:space="preserve">
          <source>The intrinsic procedures provided by GNU Fortran include all of the intrinsic procedures required by the Fortran 95 standard, a set of intrinsic procedures for backwards compatibility with G77, and a selection of intrinsic procedures from the Fortran 2003 and Fortran 2008 standards. Any conflict between a description here and a description in either the Fortran 95 standard, the Fortran 2003 standard or the Fortran 2008 standard is unintentional, and the standard(s) should be considered authoritative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a97e9d05103e47e93ebb972ec72888aa73ecf5" translate="yes" xml:space="preserve">
          <source>The kind of the return value is that of &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;B&lt;/var&gt;. If &lt;em&gt;B\ge 0&lt;/em&gt; then the result is &lt;code&gt;ABS(A)&lt;/code&gt;, else it is &lt;code&gt;-ABS(A)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19560adedc7d80cd2a060527546158047faf6eb" translate="yes" xml:space="preserve">
          <source>The kind value (only 4; always &lt;code&gt;int&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2552e39dc70331a8aa86d12b478502e860329874" translate="yes" xml:space="preserve">
          <source>The last statement does not set &lt;code&gt;ipt&lt;/code&gt; to the address of &lt;code&gt;target(1)&lt;/code&gt;, as it would in C pointer arithmetic. Adding &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;ipt&lt;/code&gt; just adds one byte to the address stored in &lt;code&gt;ipt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99501e539a24dfcaf866a60813b018007a141d1b" translate="yes" xml:space="preserve">
          <source>The latest version of the Fortran standard is ISO/IEC 1539-1:2010, informally known as Fortran 2008. The official version is available from International Organization for Standardization (ISO) or its national member organizations. The the final draft (FDIS) can be downloaded free of charge from &lt;a href=&quot;http://www.nag.co.uk/sc22wg5/links.html&quot;&gt;http://www.nag.co.uk/sc22wg5/links.html&lt;/a&gt;. Fortran is developed by the Working Group 5 of Sub-Committee 22 of the Joint Technical Committee 1 of the International Organization for Standardization and the International Electrotechnical Commission (IEC). This group is known as &lt;a href=&quot;http://www.nag.co.uk/sc22wg5/&quot;&gt;WG5&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14caae37d6399f1b81a88b624ba59a05e54554f" translate="yes" xml:space="preserve">
          <source>The list of flag values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df3cfb1cd2f37ba7061bc73c61065b00effc2d77" translate="yes" xml:space="preserve">
          <source>The long history of the Fortran language, its wide use and broad userbase, the large number of different compiler vendors and the lack of some features crucial to users in the first standards have lead to the existence of a number of important extensions to the language. While some of the most useful or popular extensions are supported by the GNU Fortran compiler, not all existing extensions are supported. This section aims at listing these extensions and offering advice on how best make code that uses them running with the GNU Fortran compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83102d012b5f2690ec7ea35661bc1c657132aef7" translate="yes" xml:space="preserve">
          <source>The mathematical intrinsics &lt;code&gt;ASINH&lt;/code&gt;, &lt;code&gt;ACOSH&lt;/code&gt;, &lt;code&gt;ATANH&lt;/code&gt;, &lt;code&gt;ERF&lt;/code&gt;, &lt;code&gt;ERFC&lt;/code&gt;, &lt;code&gt;GAMMA&lt;/code&gt;, &lt;code&gt;LOG_GAMMA&lt;/code&gt;, &lt;code&gt;BESSEL_J0&lt;/code&gt;, &lt;code&gt;BESSEL_J1&lt;/code&gt;, &lt;code&gt;BESSEL_JN&lt;/code&gt;, &lt;code&gt;BESSEL_Y0&lt;/code&gt;, &lt;code&gt;BESSEL_Y1&lt;/code&gt;, &lt;code&gt;BESSEL_YN&lt;/code&gt;, &lt;code&gt;HYPOT&lt;/code&gt;, &lt;code&gt;NORM2&lt;/code&gt;, and &lt;code&gt;ERFC_SCALED&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d2bd807e5b06ed3ef91838f2dd14f3d6e2bdd1" translate="yes" xml:space="preserve">
          <source>The matrix product of &lt;var&gt;MATRIX_A&lt;/var&gt; and &lt;var&gt;MATRIX_B&lt;/var&gt;. The type and kind of the result follow the usual type and kind promotion rules, as for the &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.AND.&lt;/code&gt; operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5973cba2ae0843b61550cf03a263e93dc0620a94" translate="yes" xml:space="preserve">
          <source>The milliseconds of the second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9e1eb40ce234e0eb55388878f2d3beb8da36c6" translate="yes" xml:space="preserve">
          <source>The minutes of the hour</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9fca5a560e5f0b6bd87f3de4a0fe0e23ab9db8" translate="yes" xml:space="preserve">
          <source>The module also provides the following intrinsic procedures: &lt;a href=&quot;compiler_005foptions#COMPILER_005fOPTIONS&quot;&gt;COMPILER_OPTIONS&lt;/a&gt; and &lt;a href=&quot;compiler_005fversion#COMPILER_005fVERSION&quot;&gt;COMPILER_VERSION&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbbd289a9596abae933087b47f053d429e65f7d" translate="yes" xml:space="preserve">
          <source>The module procedures &lt;code&gt;C_SIZEOF&lt;/code&gt; of the intrinsic module &lt;code&gt;ISO_C_BINDINGS&lt;/code&gt; and &lt;code&gt;COMPILER_VERSION&lt;/code&gt; and &lt;code&gt;COMPILER_OPTIONS&lt;/code&gt; of &lt;code&gt;ISO_FORTRAN_ENV&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf2fd8696d9efa3ae6499c75c752554419071da" translate="yes" xml:space="preserve">
          <source>The module provides the following derived type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bd9b3470d6b725783d42bf082a0cb559a3b801" translate="yes" xml:space="preserve">
          <source>The month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f961831b1f81d2be1d02b084c3cd9d9dce974b73" translate="yes" xml:space="preserve">
          <source>The new atomic ADD, CAS, FETCH and ADD/OR/XOR, OR and XOR intrinsics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a68d6c04ced71dedf9b791a0532251f792987fa" translate="yes" xml:space="preserve">
          <source>The number of command line arguments, type &lt;code&gt;INTEGER(4)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28ac0cb67a39e50904fd8db682a80b5b86ccb71b" translate="yes" xml:space="preserve">
          <source>The pointee may have its type declared before or after the pointer statement, and its array specification (if any) may be declared before, during, or after the pointer statement. The pointer may be declared as an integer prior to the pointer statement. However, some machines have default integer sizes that are different than the size of a pointer, and so the following code is not portable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ad746c9a8e959e2241217fbecddfb6571e3885" translate="yes" xml:space="preserve">
          <source>The pointer can also be set by a call to the &lt;code&gt;MALLOC&lt;/code&gt; intrinsic (see &lt;a href=&quot;malloc#MALLOC&quot;&gt;MALLOC&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82fca16c833ec97657ceefbe369524dc0e91839" translate="yes" xml:space="preserve">
          <source>The pointer is an integer that is intended to hold a memory address. The pointee may be an array or scalar. A pointee can be an assumed size array&amp;mdash;that is, the last dimension may be left unspecified by using a &lt;code&gt;*&lt;/code&gt; in place of a value&amp;mdash;but a pointee cannot be an assumed shape array. No space is allocated for the pointee.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc6ff0bad8686091a157ad08c8fbdf716450259" translate="yes" xml:space="preserve">
          <source>The preprocessor is run in traditional mode. Any restrictions of the file-format, especially the limits on line length, apply for preprocessed output as well, so it might be advisable to use the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11196b888ce30b46aae4f982989c07a7377fc5a" translate="yes" xml:space="preserve">
          <source>The primary work remaining to be done on GNU Fortran falls into three categories: bug fixing (primarily regarding the treatment of invalid code and providing useful error messages), improving the compiler optimizations and the performance of compiled code, and extending the compiler to support future standards&amp;mdash;in particular, Fortran 2003 and Fortran 2008.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7e508ad73d5578febfb8c27f50521b2db25611" translate="yes" xml:space="preserve">
          <source>The references make up a single linked list of reference operations. The &lt;code&gt;NEXT&lt;/code&gt; member links to the next reference or NULL to indicate the end of the chain. Component and array refs can be arbitrarly mixed as long as they comply to the Fortran standard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9076206c5d405bf6f807b1746a63915ce80160d" translate="yes" xml:space="preserve">
          <source>The result has the same type as &lt;var&gt;MATRIX&lt;/var&gt;, and has shape &lt;code&gt;(/ m, n /)&lt;/code&gt; if &lt;var&gt;MATRIX&lt;/var&gt; has shape &lt;code&gt;(/ n, m /)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014378ad23cd5775570f0b602a3bf185eb59f741" translate="yes" xml:space="preserve">
          <source>The result has the same type as &lt;var&gt;MOLD&lt;/var&gt;, with the bit level representation of &lt;var&gt;SOURCE&lt;/var&gt;. If &lt;var&gt;SIZE&lt;/var&gt; is present, the result is a one-dimensional array of length &lt;var&gt;SIZE&lt;/var&gt;. If &lt;var&gt;SIZE&lt;/var&gt; is absent but &lt;var&gt;MOLD&lt;/var&gt; is an array (of any size or shape), the result is a one- dimensional array of the minimum length needed to contain the entirety of the bitwise representation of &lt;var&gt;SOURCE&lt;/var&gt;. If &lt;var&gt;SIZE&lt;/var&gt; is absent and &lt;var&gt;MOLD&lt;/var&gt; is a scalar, the result is a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68687c8549863575b2d1c9bf7b1ca4264320d9d" translate="yes" xml:space="preserve">
          <source>The result is a scalar integer with the kind type parameter specified by KIND (or default integer type if KIND is missing). The result value is the size expressed in bits for an element of an array that has the dynamic type and type parameters of A.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39bf8e391d67c0f2010dc85b407d43eb48d6de2a" translate="yes" xml:space="preserve">
          <source>The result is an array of rank one and the same type as that of &lt;var&gt;ARRAY&lt;/var&gt;. If &lt;var&gt;VECTOR&lt;/var&gt; is present, the result size is that of &lt;var&gt;VECTOR&lt;/var&gt;, the number of &lt;code&gt;TRUE&lt;/code&gt; values in &lt;var&gt;MASK&lt;/var&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4025446bd70d2ade2a070e30d6f3cf8cec9739c4" translate="yes" xml:space="preserve">
          <source>The result is an array of shape &lt;var&gt;SHAPE&lt;/var&gt; with the same type as &lt;var&gt;SOURCE&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf3d4238004921443d030bab99fdc05077039f5" translate="yes" xml:space="preserve">
          <source>The result is an array of the same type as &lt;var&gt;SOURCE&lt;/var&gt; and has rank n+1 where n equals the rank of &lt;var&gt;SOURCE&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ad010fed23e9c42a5271e94f9380c348a5f3ce" translate="yes" xml:space="preserve">
          <source>The result is of the same type and kind as &lt;var&gt;I&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3f5ee6869b34c8f18722a19275a070f74f33ef" translate="yes" xml:space="preserve">
          <source>The result is of the same type and type parameters as &lt;var&gt;TSOURCE&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a1b4f69afd30fb54c8ad11e272f1c7796dcce0" translate="yes" xml:space="preserve">
          <source>The result is of the same type as &lt;var&gt;ARRAY&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee307d9896a5a4f398bba0853efcee815c547b3" translate="yes" xml:space="preserve">
          <source>The result is of the same type as &lt;var&gt;MASK&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeec9ae939b9f90cc0b1a5ab35509e8aa59521ec" translate="yes" xml:space="preserve">
          <source>The result is of the same type as the input argument &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd172b45c8c6ce576351c27db65501195a07cff" translate="yes" xml:space="preserve">
          <source>The resulting array corresponds to &lt;var&gt;FIELD&lt;/var&gt; with &lt;code&gt;TRUE&lt;/code&gt; elements of &lt;var&gt;MASK&lt;/var&gt; replaced by values from &lt;var&gt;VECTOR&lt;/var&gt; in array element order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a76ff807cd4f7fad937ddf22c68201244c7e2ea" translate="yes" xml:space="preserve">
          <source>The return type is &lt;code&gt;INTEGER&lt;/code&gt;, of the same kind as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9747c612e80d9727d1e322ccbe25cb6d7d30de" translate="yes" xml:space="preserve">
          <source>The return type is &lt;code&gt;INTEGER&lt;/code&gt;, of the same kind as the arguments. (If the argument kinds differ, it is of the same kind as the larger argument.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db897dd66079baaeb0abc536a3e107532500fe6e" translate="yes" xml:space="preserve">
          <source>The return type is either a scalar &lt;code&gt;INTEGER&lt;/code&gt; or a scalar &lt;code&gt;LOGICAL&lt;/code&gt;. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1384fad504be36d901099fcfca5b3b4c6cec0fe2" translate="yes" xml:space="preserve">
          <source>The return value corresponds to the maximum value among the arguments, and has the same type and kind as the first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f2dd4b57f79bc03d726b80a316468b988840b9" translate="yes" xml:space="preserve">
          <source>The return value has same type and kind as &lt;var&gt;X&lt;/var&gt;, and its value is in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a806490f0d2d64535668b1a4b916e4db9c1398a8" translate="yes" xml:space="preserve">
          <source>The return value has same type and kind as &lt;var&gt;X&lt;/var&gt;, and its value is in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a40fb5e89dbedf38fec02fdade8a21c0cd90094" translate="yes" xml:space="preserve">
          <source>The return value has same type and kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd59c4dd88e8a6b4634ca6ed2439c4422a307ca" translate="yes" xml:space="preserve">
          <source>The return value has same type and kind as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;X&lt;/var&gt; is complex, the imaginary part of the result is in radians and lies between &lt;em&gt;-\pi/2 \leq \Im \atanh(x) \leq \pi/2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9d6228247d17e5d5f6a0da787e2bd85eac256f" translate="yes" xml:space="preserve">
          <source>The return value has same type and kind as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;X&lt;/var&gt; is complex, the imaginary part of the result is in radians. If &lt;var&gt;X&lt;/var&gt; is &lt;code&gt;REAL&lt;/code&gt;, the return value has a lower bound of one, &lt;em&gt;\cosh (x) \geq 1&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bf91ac114652d69f299b6d4d95ccbf7b2761c7" translate="yes" xml:space="preserve">
          <source>The return value has same type and kind as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;X&lt;/var&gt; is complex, the imaginary part of the result is in radians. If &lt;var&gt;X&lt;/var&gt; is &lt;code&gt;REAL&lt;/code&gt;, the return value lies in the range &lt;em&gt;- 1 \leq tanh(x) \leq 1 &lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe801780ced09fd4afe1a60bb385e4305af80fa" translate="yes" xml:space="preserve">
          <source>The return value has the same type and kind as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;X&lt;/var&gt; is complex, the imaginary part of the result is in radians and lies between &lt;em&gt;0 \leq \Im \acosh(x) \leq \pi&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74180aa97f45c0d516e1a00ce60136f6f1e9b39" translate="yes" xml:space="preserve">
          <source>The return value has the same type and kind type parameter as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d15f94e997d0f5b361f670cafac0a2222fe985e" translate="yes" xml:space="preserve">
          <source>The return value has the same type and kind type parameter as &lt;var&gt;Y&lt;/var&gt;. It is the principal value of the complex number &lt;em&gt;X + i Y&lt;/em&gt;. If &lt;var&gt;X&lt;/var&gt; is nonzero, then it lies in the range &lt;em&gt;-180 \le \atan (x) \leq 180&lt;/em&gt;. The sign is positive if &lt;var&gt;Y&lt;/var&gt; is positive. If &lt;var&gt;Y&lt;/var&gt; is zero, then the return value is zero if &lt;var&gt;X&lt;/var&gt; is strictly positive, &lt;em&gt;180&lt;/em&gt; if &lt;var&gt;X&lt;/var&gt; is negative and &lt;var&gt;Y&lt;/var&gt; is positive zero (or the processor does not handle signed zeros), and &lt;em&gt;-180&lt;/em&gt; if &lt;var&gt;X&lt;/var&gt; is negative and &lt;var&gt;Y&lt;/var&gt; is negative zero. Finally, if &lt;var&gt;X&lt;/var&gt; is zero, then the magnitude of the result is &lt;em&gt;90&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5092c3fbd9dbad3920df4cbd1bd52dd5c0c2c9" translate="yes" xml:space="preserve">
          <source>The return value has the same type and kind type parameter as &lt;var&gt;Y&lt;/var&gt;. It is the principal value of the complex number &lt;em&gt;X + i Y&lt;/em&gt;. If &lt;var&gt;X&lt;/var&gt; is nonzero, then it lies in the range &lt;em&gt;-\pi \le \atan (x) \leq \pi&lt;/em&gt;. The sign is positive if &lt;var&gt;Y&lt;/var&gt; is positive. If &lt;var&gt;Y&lt;/var&gt; is zero, then the return value is zero if &lt;var&gt;X&lt;/var&gt; is strictly positive, &lt;em&gt;\pi&lt;/em&gt; if &lt;var&gt;X&lt;/var&gt; is negative and &lt;var&gt;Y&lt;/var&gt; is positive zero (or the processor does not handle signed zeros), and &lt;em&gt;-\pi&lt;/em&gt; if &lt;var&gt;X&lt;/var&gt; is negative and &lt;var&gt;Y&lt;/var&gt; is negative zero. Finally, if &lt;var&gt;X&lt;/var&gt; is zero, then the magnitude of the result is &lt;em&gt;\pi/2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b0990d245ac1e04bef250969565b8004ceb56d" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;code&gt;INTEGER(2)&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f87ba7e6be0ef2e71b7a91808dab20a89d7585" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;code&gt;INTEGER(4)&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea8d059fb67cf3459e9c3e08c7c24ccec166bc4" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;code&gt;INTEGER(8)&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9439bbde12ee0f35a32a1dffa8c5249cf46558" translate="yes" xml:space="preserve">
          <source>The return value is a &lt;code&gt;LOGICAL&lt;/code&gt; value equal to &lt;var&gt;L&lt;/var&gt;, with a kind corresponding to &lt;var&gt;KIND&lt;/var&gt;, or of the default logical kind if &lt;var&gt;KIND&lt;/var&gt; is not given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ea07110cc5f7db44d2ff16a73e671b95bbe6dd" translate="yes" xml:space="preserve">
          <source>The return value is a default-kind string with system-dependent length. It contains the compiler flags used to compile the file, which called the &lt;code&gt;COMPILER_OPTIONS&lt;/code&gt; intrinsic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc8f5a04f7a464176949bc835658f57ff01772e" translate="yes" xml:space="preserve">
          <source>The return value is a default-kind string with system-dependent length. It contains the name of the compiler and its version number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52346d77132aa714f34b568b1b471e5d175e038" translate="yes" xml:space="preserve">
          <source>The return value is a scalar &lt;code&gt;LOGICAL&lt;/code&gt; with the default logical kind type parameter. If the argument is allocated, then the result is &lt;code&gt;.TRUE.&lt;/code&gt;; otherwise, it returns &lt;code&gt;.FALSE.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccf2ae3d39e9c9c4218b80d3033754ba82d9219" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type &lt;code&gt;INTEGER(4)&lt;/code&gt;, equal to the number of clock ticks since the start of the process, or &lt;code&gt;-1&lt;/code&gt; if the system does not support &lt;code&gt;clock(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d1bd5a4c55d354110899e909e2c5f80ffc0d81" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type &lt;code&gt;INTEGER(4)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55599fe430d7990d2eeacbb5c225e7e442a0655" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type &lt;code&gt;INTEGER(8)&lt;/code&gt;, equal to the number of clock ticks since the start of the process, or &lt;code&gt;-1&lt;/code&gt; if the system does not support &lt;code&gt;clock(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56084ca53c227e3668e2ecadf03faeb6fb0ef56b" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type &lt;code&gt;INTEGER(8)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a43be5bd77f5f2d359074140268e54aa67ad3a" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type &lt;code&gt;INTEGER&lt;/code&gt; and of the default integer kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14964769ca338d06f2fc526b27000918dc2fb400" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type &lt;code&gt;REAL&lt;/code&gt;. It has the same kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9521c34a35f957b19b76fc1d730dedfa2ddb44" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type default logical. It is true if and only if the dynamic type of A is an extension type of the dynamic type of MOLD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f202be64abd4bcabd9aacd5ea8bba256904b79f0" translate="yes" xml:space="preserve">
          <source>The return value is a scalar of type default logical. It is true if and only if the dynamic type of A is the same as the dynamic type of B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa22ed92a5ea22b7cd38548bf7c3121b62811d5" translate="yes" xml:space="preserve">
          <source>The return value is an &lt;code&gt;INTEGER&lt;/code&gt; of default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdffa50d6a7e92d9559930fc19ff75c4798ea4d" translate="yes" xml:space="preserve">
          <source>The return value is of &lt;code&gt;COMPLEX&lt;/code&gt; type, with a kind equal to &lt;var&gt;KIND&lt;/var&gt; if it is specified. If &lt;var&gt;KIND&lt;/var&gt; is not specified, the result is of the default &lt;code&gt;COMPLEX&lt;/code&gt; kind, regardless of the kinds of &lt;var&gt;X&lt;/var&gt; and &lt;var&gt;Y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4752c10f396812e7d8ded79ade01b82e2ebd0099" translate="yes" xml:space="preserve">
          <source>The return value is of &lt;code&gt;INTEGER(kind=4)&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc97e989ddfc84607a7c5085407a3d33a1541e9" translate="yes" xml:space="preserve">
          <source>The return value is of &lt;code&gt;REAL&lt;/code&gt; type and the default kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad856021fa407419683ad9a3fac296f47d6d76d" translate="yes" xml:space="preserve">
          <source>The return value is of same type as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206f99b2aaaf3cd6381c428c8f89f2a61ecb674d" translate="yes" xml:space="preserve">
          <source>The return value is of the same type and kind as &lt;var&gt;X&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f66fdc0ad54cb4f5ddb1282ff7460c8ffb064f1" translate="yes" xml:space="preserve">
          <source>The return value is of the same type and kind as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;X&lt;/var&gt; is complex, the imaginary part of the result is in radians and lies between &lt;em&gt;-\pi/2 \leq \Im \asinh(x) \leq \pi/2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44fe9e4df5c52d474b1edef9c15df2d57ff202f5" translate="yes" xml:space="preserve">
          <source>The return value is of the same type and kind as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;Y&lt;/var&gt; is present, the result is identical to &lt;code&gt;ATAN2(Y,X)&lt;/code&gt;. Otherwise, it the arcus tangent of &lt;var&gt;X&lt;/var&gt;, where the real part of the result is in radians and lies in the range &lt;em&gt;-\pi/2 \leq \Re \atan(x) \leq \pi/2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
