<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="83b0855b5b2fdec20f88550a7559cc5f3fbd42a0" translate="yes" xml:space="preserve">
          <source>Using link-to as an inline component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfc559dfffe991176278a255237452049d26387" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;concatenatedProperties&lt;/code&gt; property, we can tell Ember to mix the content of the properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016843e89fab219d5ff8dfd7056e0e1c600484ca" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;value&lt;/code&gt; option modifies that behavior by extracting that property from the event object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f782cd38bd4d2134d355c024bfa8805f72b089" translate="yes" xml:space="preserve">
          <source>Using the Inspector adds a delay to your rendering, so the durations you see are not an accurate representation of the speed of your production apps. Use these times to compare durations and debug rendering bottlenecks, but not as a way to accurately measure rendering times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74184cac3d00b39dad0d578fed89481eadcba9cb" translate="yes" xml:space="preserve">
          <source>Using the Inspector with JS Bin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa1a79a6306766f409c4bca723bf29d0eb2184f" translate="yes" xml:space="preserve">
          <source>Using the block form of this helper is similar to using the block form of a component. Given the following application template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391f67adbcc74616743bc53de0dfefcb12d91038" translate="yes" xml:space="preserve">
          <source>Using the pencil icon on the top-right of each guide page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04c131609186adfe1bc7ccc394a0ad9c1f75084" translate="yes" xml:space="preserve">
          <source>Using the same process we did for our about and contact pages, we will first generate a new route called &lt;code&gt;index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76df093ba11570d1d43808629350f8343fd79f73" translate="yes" xml:space="preserve">
          <source>Usually you will not need the value or revision parameters at the end. In this case, it is common to write observer methods that take only a sender and key value as parameters or, if you aren't interested in any of these values, to write an observer that has no parameters at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="c88dde9be6de65aa9f6a4053123062cf461174e1" translate="yes" xml:space="preserve">
          <source>VERSIONpublic</source>
          <target state="translated">VERSIONpublic</target>
        </trans-unit>
        <trans-unit id="72661fddf00221bbd8be22e1f6b3314d366e3aaf" translate="yes" xml:space="preserve">
          <source>Value to test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2eb4b0d611b447805fded2ec383687ba6268e8" translate="yes" xml:space="preserve">
          <source>Verifies that a value is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, an empty string, or an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40eefdc490f84d2d7d51132947e203d320fc75e7" translate="yes" xml:space="preserve">
          <source>Very often, batching similar work has benefits. Web browsers do something quite similar by batching changes to the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d356352bbabea4b8461ad53f2b6e5047c3a92bb4" translate="yes" xml:space="preserve">
          <source>Via Bookmarklet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f75e28a09edb173079d6821dcac995b9d3fa468" translate="yes" xml:space="preserve">
          <source>View all registered templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed11cb30e531fe5e8a975933cbf81d152f07822" translate="yes" xml:space="preserve">
          <source>ViewMixin</source>
          <target state="translated">ViewMixin</target>
        </trans-unit>
        <trans-unit id="e0b53d31dd0d08c5d637bdbcfd99da245e929f76" translate="yes" xml:space="preserve">
          <source>ViewMixin.$()</source>
          <target state="translated">ViewMixin.$()</target>
        </trans-unit>
        <trans-unit id="6e319bb0cbbf9bda646e8734599d271812fbe1c8" translate="yes" xml:space="preserve">
          <source>Viewing Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbd58eaa27448b7a8896aa4d192125c461285ac" translate="yes" xml:space="preserve">
          <source>Viewing the Current Route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22d9da12b10d6e11d609d7f966b50128d1e7d62" translate="yes" xml:space="preserve">
          <source>Views / Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab0d7e1c96c3ea19c16733af4fdea5420773df9" translate="yes" xml:space="preserve">
          <source>Virtual DOM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a465424577f9d8a6535a1629848bbf0b98d3c16e" translate="yes" xml:space="preserve">
          <source>Visit &lt;code&gt;chrome://extensions&lt;/code&gt;, then click on &lt;code&gt;Options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c950d9edbfed65c9f96562f33f6915d0dc933e" translate="yes" xml:space="preserve">
          <source>Visit the Add-on page on the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/&quot;&gt;Mozilla Add-ons site&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3678db269e3fe76460953e9c72646a1f16d3cc77" translate="yes" xml:space="preserve">
          <source>Visits the given route and returns a promise that fulfills when all resulting async behavior is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207c7c00630b836d3afb46848bdb24a92023331d" translate="yes" xml:space="preserve">
          <source>Void</source>
          <target state="translated">Void</target>
        </trans-unit>
        <trans-unit id="745c743d98b1b3fb097bf85457820d6602c2ed22" translate="yes" xml:space="preserve">
          <source>W3C Working Draft</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c94052dc8e3b79f99ca4a72f4623c05fefaf225" translate="yes" xml:space="preserve">
          <source>WARNING: This interface is likely to change in order to accomodate &lt;a href=&quot;https://github.com/emberjs/rfcs/pull/4&quot;&gt;https://github.com/emberjs/rfcs/pull/4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa0358a08931c1d7d8fa7c6e9e6fc515572b8cd" translate="yes" xml:space="preserve">
          <source>Wait Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d68e1241b229e5b8feafc79aefd9b39e529fc4f" translate="yes" xml:space="preserve">
          <source>Waiting on Asynchronous Behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828357c3569d7e51335798b042828e1409dc8e89" translate="yes" xml:space="preserve">
          <source>Watchman (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84045d81b9276a47f2e9131445990d42b57f6d87" translate="yes" xml:space="preserve">
          <source>We add another initializer named &lt;code&gt;second&lt;/code&gt;, specifying that it should run after the initializer named &lt;code&gt;first&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed522ad465a007af829de5460c5930e29e604ae" translate="yes" xml:space="preserve">
          <source>We are not testing the actual filtering of rentals in this test, since it is focused on only the capability of the component. We will test the full logic of filtering in acceptance tests, described in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabb5b7c4a4187b9fc6e817a4c98d08de8be9b77" translate="yes" xml:space="preserve">
          <source>We call the record to which a relationship belongs the relationship's &lt;em&gt;owner&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf5809fea567240b7d05ae9629bc0c397775313" translate="yes" xml:space="preserve">
          <source>We can also use a short-hand syntax called &lt;em&gt;brace expansion&lt;/em&gt; to declare the dependents. You surround the dependent properties with braces (&lt;code&gt;{}&lt;/code&gt;), and separate with commas, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3869ad9aae760b9afc2f878d668966932d2ca6e" translate="yes" xml:space="preserve">
          <source>We can do a similar thing for our &lt;code&gt;send-message&lt;/code&gt; component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bab3cee02986c772e29b6bab11c7229c871938" translate="yes" xml:space="preserve">
          <source>We can make additional style tweaks to &lt;code&gt;vendor/ember-tutorial.css&lt;/code&gt;, and the changes will take effect whenever we restart the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7db9fcb1fe54640fa0cdff7fa5f94c653a0b5f" translate="yes" xml:space="preserve">
          <source>We can now also properly test if a helper will respond to property changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fb8ae546ae3ae837ff391be815ee5e21bd8c97" translate="yes" xml:space="preserve">
          <source>We can represent the goals above as &lt;a href=&quot;https://guides.emberjs.com/testing/acceptance/&quot;&gt;Ember acceptance tests&lt;/a&gt;. Acceptance tests interact with our app like an actual person would, but are automated, helping ensure that our app doesn't break in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a2b409d552263133b17d63dc1a008d4585945e" translate="yes" xml:space="preserve">
          <source>We can see the now familiar output for the route generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6848525d747cfeaf1cfe0d7110ea0049ba5a7f" translate="yes" xml:space="preserve">
          <source>We can tell the action to invoke the &lt;code&gt;sendMessage&lt;/code&gt; action directly on the messaging service with the &lt;code&gt;target&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d96f7bbd8d7273fb9ba80b308ff3ffbf64462d" translate="yes" xml:space="preserve">
          <source>We can test that changing the component's &lt;code&gt;name&lt;/code&gt; property updates the component's &lt;code&gt;style&lt;/code&gt; attribute and is reflected in the rendered HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdef20152fdd39508fb6ea7068f63114599e8e2" translate="yes" xml:space="preserve">
          <source>We can use the &lt;code&gt;route:application&lt;/code&gt; to do so. The &lt;code&gt;route:application&lt;/code&gt; is the top-most route in the route hierarchy, and its &lt;code&gt;model&lt;/code&gt; hook gets called once when the app starts up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a772c8776f21128d3db926f8e7cd83bf6500962f" translate="yes" xml:space="preserve">
          <source>We chose funny-name.surge.sh but you may use any unclaimed subdomain you like or use a custom domain that you own and have pointed the DNS to one of surges servers. If the second argument is left blank surge will prompt you with a suggested subdomain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d43d8a045ad3dc68d2c072194acd24bdc73be4b" translate="yes" xml:space="preserve">
          <source>We could have also linked the two records together by updating the blogPost's &lt;code&gt;hasMany&lt;/code&gt; relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a621b360f69638e676da656a565a3966cef035" translate="yes" xml:space="preserve">
          <source>We don't have to use the &lt;code&gt;moduleFor&lt;/code&gt; helper for unit testing helpers. Helpers are functions, which can be easily tested with &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af15d361879d47a1ffb398a38a710339f7d8d31" translate="yes" xml:space="preserve">
          <source>We force the action by generating a &lt;code&gt;keyUp&lt;/code&gt; event on our input field, and then assert that only one item is rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbbae3f342afe3e9010ee1f3f01e1cf465f33d3" translate="yes" xml:space="preserve">
          <source>We introduce two new helpers into this test, &lt;code&gt;fillIn&lt;/code&gt; and &lt;code&gt;keyEvent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b1317d968ebe5e737be5bcb1af90e31abf8c78" translate="yes" xml:space="preserve">
          <source>We might also test this component to ensure that the content of its template is being rendered properly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3677f761534906e5eee3fed2c4d70c64652a0667" translate="yes" xml:space="preserve">
          <source>We now have a model object that we can use for our Ember Data implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5b896f8eda0644ab9681451806087217a00dc9" translate="yes" xml:space="preserve">
          <source>We provide the maps service into our component by initializing a property of our component, called &lt;code&gt;maps&lt;/code&gt;. Services are commonly made available in components and other Ember objects by &lt;a href=&quot;https://guides.emberjs.com/applications/services/#toc_accessing-services&quot;&gt;&quot;service injection&quot;&lt;/a&gt;. When you initialize a property with &lt;code&gt;Ember.inject.service()&lt;/code&gt;, Ember tries to set that property with a service matching its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0392d3120def495c8bb3a75804e9d02babbf5e2c" translate="yes" xml:space="preserve">
          <source>We recommend using native DOM events wrapped inside the run loop or the &lt;a href=&quot;https://github.com/cibernox/ember-native-dom-helpers&quot;&gt;&lt;code&gt;ember-native-dom-helpers&lt;/code&gt;&lt;/a&gt; addon to simulate user interaction and test that the title is updated when the button is clicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a381713ed4d46ca6610fcd38a6d33532494cc13" translate="yes" xml:space="preserve">
          <source>We see that the browser will rerender the template twice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fbab8d9368db17ea6a78e8c40c05cdf7b7f58e" translate="yes" xml:space="preserve">
          <source>We then make a call to the &lt;code&gt;andThen&lt;/code&gt; helper which will wait for the preceding asynchronous test helpers to complete (specifically, &lt;code&gt;andThen&lt;/code&gt; will only be called &lt;strong&gt;after&lt;/strong&gt; the new posts URL was visited, the text filled in and the submit button was clicked, &lt;strong&gt;and&lt;/strong&gt; the browser has returned from doing whatever those actions required). Note &lt;code&gt;andThen&lt;/code&gt; has a single argument of the function that contains the code to execute after the other test helpers have finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d7017358e1fd53677d28f0d7d36b0f3814d3c1" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;--environment=development&lt;/code&gt; here so that Mirage will continue to mock fake data. However, normally we would use &lt;code&gt;ember build --environment=production&lt;/code&gt; which optimizes your application for production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437b3d5d4b5e3d3b7a96a7d22c758c9b17206794" translate="yes" xml:space="preserve">
          <source>We want the component to simply provide an input field and yield the results list to its block, so our template will be simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eca1244a2d042815d63447bfd3d4bafc33c45e" translate="yes" xml:space="preserve">
          <source>We want to arrange for the action to be invoked from within &lt;code&gt;button-with-confirmation&lt;/code&gt; with both arguments. We've seen already that if we provide a &lt;code&gt;messageType&lt;/code&gt; value to the &lt;code&gt;action&lt;/code&gt; helper when we insert &lt;code&gt;button-with-confirmation&lt;/code&gt; into its parent &lt;code&gt;send-message&lt;/code&gt; template, that value will be passed to the &lt;code&gt;sendMessage&lt;/code&gt; action as its first argument automatically when invoked as &lt;code&gt;onConfirm&lt;/code&gt;. If we subsequently pass a single additional argument to &lt;code&gt;onConfirm&lt;/code&gt; explicitly, that argument will be passed to &lt;code&gt;sendMessage&lt;/code&gt; as its second argument (This ability to provide arguments to a function one at a time is known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Currying&quot;&gt;currying&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5748c7642668b5173a2078dab6f3ce97a1306d7" translate="yes" xml:space="preserve">
          <source>We want to verify that we can click on a specific rental and load a detailed view to the page. We'll click on the title and validate that an expanded description of the rental is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d647a4022262d3a708d8f65093c6f6252fdbf8" translate="yes" xml:space="preserve">
          <source>We will start by editing the &lt;code&gt;application&lt;/code&gt; template. This template is always on screen while the user has your application loaded. In your editor, open &lt;code&gt;app/templates/application.hbs&lt;/code&gt; and change it to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e5f5b48c6b928345891aaa143baffe89fe7553" translate="yes" xml:space="preserve">
          <source>We'd like our helper to print pounds sterling rather than US dollars:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621911b4faa7e3dd3e785815b13ad5972379bd5d" translate="yes" xml:space="preserve">
          <source>We'll add some additional functionality to our &lt;code&gt;filterByCity&lt;/code&gt; action to additionally return a single rental, represented by the variable &lt;code&gt;FILTERED_ITEMS&lt;/code&gt; when any value is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5d938a89ee99595180f09de543d94bc99b847c" translate="yes" xml:space="preserve">
          <source>We'll also want to use the component elsewhere, perhaps like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1a55c50bbd1c4fe9c2f78f99cb3a7271f219bd" translate="yes" xml:space="preserve">
          <source>We'll cover these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7141941ff5757a9e139f4b128b4730b901c1ef" translate="yes" xml:space="preserve">
          <source>We'll implement an action on the parent component called &lt;code&gt;userDidDeleteAccount()&lt;/code&gt; that, when called, gets a hypothetical &lt;code&gt;login&lt;/code&gt;&lt;a href=&quot;https://guides.emberjs.com/applications/services/&quot;&gt;service&lt;/a&gt; and calls the service's &lt;code&gt;deleteUser()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa461b4980a08c7849802896e48b45579b62013" translate="yes" xml:space="preserve">
          <source>We'll plan to use the component in a template something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fbd6ef6ee0f4a7335e4946320842c0633ffb54" translate="yes" xml:space="preserve">
          <source>We'll start by using Ember CLI to generate a new acceptance test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b512f7c526eddf7cb5027f4b3755d3635c93db8" translate="yes" xml:space="preserve">
          <source>We'll start with a simple example. We have a &lt;code&gt;Person&lt;/code&gt; object with &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; properties, but we also want a &lt;code&gt;fullName&lt;/code&gt; property that joins the two names when either of them changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d4aab512bcec9f852a9bba9595bee7c9e27c8c" translate="yes" xml:space="preserve">
          <source>We'll take the code created for us by the generator and add a &lt;code&gt;model()&lt;/code&gt; method to the &lt;code&gt;Route&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6d9a78d5453b569f967dc69a5ceb971007c2f8" translate="yes" xml:space="preserve">
          <source>We'll use a unit test to validate the service. Unit tests are more isolated than integration tests and acceptance tests, and are intended for testing specific logic within a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f28fdf4934be1cf10d3779562c79625bf3b8794" translate="yes" xml:space="preserve">
          <source>We're going to demonstrate how to test helpers by testing the &lt;code&gt;format-currency&lt;/code&gt; helper from &lt;a href=&quot;https://guides.emberjs.com/templates/writing-helpers&quot;&gt;Writing Helpers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d418058b4c745f5dd2b0304598ea74f7419421d8" translate="yes" xml:space="preserve">
          <source>We're going to tell our component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e5d59e02f3c455fb66d9e1d5b4e9d1ff8de041" translate="yes" xml:space="preserve">
          <source>We've covered the case when a model promise fulfills, but what if it rejects?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e644093a7a7b66e6a61bd2e7b50d0b70e2ed5d" translate="yes" xml:space="preserve">
          <source>We've seen most of this before, but the &lt;code&gt;{{outlet}}&lt;/code&gt; beneath &lt;code&gt;&amp;lt;div class=&quot;body&quot;&amp;gt;&lt;/code&gt; is new. The &lt;code&gt;{{outlet}}&lt;/code&gt; helper tells Ember where content for our current route (such as &lt;code&gt;about&lt;/code&gt; or &lt;code&gt;contact&lt;/code&gt;) should be shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adbbf981a608a69c175cd257a4594e6b28af94f" translate="yes" xml:space="preserve">
          <source>Web Development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d3b53a7eaf3764d59f45e670b49e2810dc9bf1" translate="yes" xml:space="preserve">
          <source>WebSockets.</source>
          <target state="translated">WebSockets.</target>
        </trans-unit>
        <trans-unit id="5df1449d8121c876d37d0580d5ac59c93e722e17" translate="yes" xml:space="preserve">
          <source>Websocket callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be4cb435a04586775c457a3fbcdeb080a06b851" translate="yes" xml:space="preserve">
          <source>Welcome to the Ember Tutorial! This tutorial is meant to introduce basic Ember concepts while creating a professional looking application. If you get stuck at any point during the tutorial, feel free to download &lt;a href=&quot;https://github.com/ember-learn/super-rentals&quot;&gt;https://github.com/ember-learn/super-rentals&lt;/a&gt; for a working example of the completed app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9842b19893cf1c143654b0168e1196702a8520a6" translate="yes" xml:space="preserve">
          <source>Welcome to the Ember.js Guides! This documentation will take you from total beginner to Ember expert.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bf8908ff31eb0ad409d99921c5c64c1d2f0c96" translate="yes" xml:space="preserve">
          <source>What are Computed Properties?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414cbfaecc94d5ca7aa8d5d4b0b070784cc03fbe" translate="yes" xml:space="preserve">
          <source>What are the queues, and what is their priority order?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8084f8358944029b7c618b1c600f50f0008886dc" translate="yes" xml:space="preserve">
          <source>What array of people to use, via the &lt;code&gt;people&lt;/code&gt; attribute. We'll provide this route's &lt;code&gt;model&lt;/code&gt; as the list of people.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a922ff72dedf9379c499035b1aa5ab32532df37b" translate="yes" xml:space="preserve">
          <source>What happens if I forget to start a run loop in an async handler?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6ddbfe4d20d55010944430453bfb3e2538ad87" translate="yes" xml:space="preserve">
          <source>What happens in these queues?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed3f6e9db41f7194c82e74c8365b1cacfa80b07" translate="yes" xml:space="preserve">
          <source>What is Ember?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6d4999cbbb3d6716c424f48072b86e1a1f6c9d" translate="yes" xml:space="preserve">
          <source>What the Heck is Shadow DOM?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c40774de8da3d6f1735ec3622c0cc4f7f489eb8" translate="yes" xml:space="preserve">
          <source>What title to use, via the &lt;code&gt;title&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50276f62cd48092fe2b224dc32bc245b64733f6" translate="yes" xml:space="preserve">
          <source>What's happening here is we are adding our own stub maps service that simply creates an empty div. Then we are putting it in Ember's &lt;a href=&quot;https://guides.emberjs.com/applications/dependency-injection#toc_factory-registrations&quot;&gt;registry&lt;/a&gt;, and injecting it into the &lt;code&gt;location-map&lt;/code&gt; component that uses it. That way every time that component is created, our stub map service gets injected over the Google maps service. Now when we run our acceptance tests, you'll notice that maps do not get rendered as the test runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b158f903e2985e4cf49bb4bc78b7644c732050" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;autoboot&lt;/code&gt; is disabled, calling &lt;code&gt;visit&lt;/code&gt; would first cause the application to boot, which runs the application initializers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97db7600a941b8c2922fc7d0191155824b7dd9b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;coordinatePoint&lt;/code&gt; is received from the API, it is expected to be an array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8315c0a0f7ae27482af6274c37c80899744e3060" translate="yes" xml:space="preserve">
          <source>When Ember instantiates a controller, view, or other framework component it can attach a dependency to that component. This is often used to provide services to a set of framework components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb96beec7460653b379fff8aec34c25e0afd889" translate="yes" xml:space="preserve">
          <source>When Promises Reject...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6928933b74ca93e68fe065e4e82c69f5eba72f13" translate="yes" xml:space="preserve">
          <source>When a component detects that it is time to remove itself from the DOM, Ember will trigger the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_willDestroyElement&quot;&gt;&lt;code&gt;willDestroyElement()&lt;/code&gt;&lt;/a&gt; method, allowing for any teardown logic to be performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60559043c1e6ffcda817b4e753ae1270d6d60184" translate="yes" xml:space="preserve">
          <source>When a controller's query param property is currently set to its default value, this value won't be serialized into the URL. So in the above example, if &lt;code&gt;page&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, the URL might look like &lt;code&gt;/articles&lt;/code&gt;, but once someone sets the controller's &lt;code&gt;page&lt;/code&gt; value to &lt;code&gt;2&lt;/code&gt;, the URL will become &lt;code&gt;/articles?page=2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f0172b25858f42459a129f9504adf20cbc9e61" translate="yes" xml:space="preserve">
          <source>When a developer adds a new feature to the &lt;code&gt;canary&lt;/code&gt; channel (i.e. the &lt;code&gt;master&lt;/code&gt; branch on github), they also add an entry to &lt;a href=&quot;https://github.com/emberjs/ember.js/blob/master/FEATURES.md&quot;&gt;&lt;code&gt;FEATURES.md&lt;/code&gt;&lt;/a&gt; explaining what the feature does, and linking to their originating pull request. This list is kept current, and reflects what is available in each channel (&lt;code&gt;release&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, and &lt;code&gt;canary&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa8cd77765c3c60ecb4a59d7a68466ab220f46c" translate="yes" xml:space="preserve">
          <source>When a new instance is created, its &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_init&quot;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; method is invoked automatically. This is the ideal place to implement setup required on new instances:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd147475ad0e68eacc33463a5ee33c1accb6a4b3" translate="yes" xml:space="preserve">
          <source>When a transition is attempted, whether via &lt;code&gt;{{link-to}}&lt;/code&gt;, &lt;code&gt;transitionTo&lt;/code&gt;, or a URL change, a &lt;code&gt;willTransition&lt;/code&gt; action is fired on the currently active routes. This gives each active route, starting with the leaf-most route, the opportunity to decide whether or not the transition should occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05f72b55c08ef694a24c0fa35fd9f01a8e3123a" translate="yes" xml:space="preserve">
          <source>When a user comments on a blogPost, we need to create a relationship between the two records. We can simply set the &lt;code&gt;belongsTo&lt;/code&gt; relationship in our new comment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a8ee7ab3a1dca16668aeae3dae6013c870afab" translate="yes" xml:space="preserve">
          <source>When a user visits a link to your application, they will be automatically upgraded or downgraded to the appropriate &lt;code&gt;Location&lt;/code&gt; class, with the URL transformed accordingly, if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3574b2926fe15aafef3260a4a723fa086d31dd5" translate="yes" xml:space="preserve">
          <source>When a view has children, didInsertElement will be called on the child view(s) first and on itself afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c06a37629c59003868c8a0bc648b0f1c0197c9" translate="yes" xml:space="preserve">
          <source>When accessing &lt;code&gt;foo.bar.slow-model&lt;/code&gt; route then Ember will alternate trying to find a &lt;code&gt;routeName-loading&lt;/code&gt; or &lt;code&gt;loading&lt;/code&gt; template in the hierarchy starting with &lt;code&gt;foo.bar.slow-model-loading&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0ef1f1bd292918a7ce621fab2f4beb9dde4995" translate="yes" xml:space="preserve">
          <source>When accessing &lt;code&gt;foo.bar&lt;/code&gt; route then Ember will search for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6d1c5bcfcade4a3672cbc4cb82d989ed22cc24" translate="yes" xml:space="preserve">
          <source>When accessing the properties of an object, use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; accessor methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cc0315c39e8cb28c4ae2782cceccadef8cfb5f" translate="yes" xml:space="preserve">
          <source>When attempting to transition into a route, any of the hooks may return a promise that rejects, at which point an &lt;code&gt;error&lt;/code&gt; action will be fired on the partially-entered routes, allowing for per-route error handling logic, or shared error handling logic defined on a parent route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61670b164652f8ae173d35005c925da03450e9e" translate="yes" xml:space="preserve">
          <source>When called by RESTAdapter.findMany() the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;snapshot&lt;/code&gt; parameters will be arrays of ids and snapshots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bfc77978d0bacc6f9ffec5d288a4472ea7d962" translate="yes" xml:space="preserve">
          <source>When content is passed in mustaches &lt;code&gt;{{}}&lt;/code&gt;, Ember will first try to find a helper or component with that name. For example, the &lt;code&gt;if&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cc7ba0bf3e132da328fe90231204bd0c1537bc" translate="yes" xml:space="preserve">
          <source>When creating a custom serializer you will need to define a &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_normalizeResponse&quot;&gt;normalizeResponse&lt;/a&gt; method to transform the response from the adapter into the normalized JSON object described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8969f49a7e609386d366ca2e4ea2a415a3ba9385" translate="yes" xml:space="preserve">
          <source>When creating an instance, you can initialize the values of its properties by passing an optional hash to the &lt;code&gt;create()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629ef5bec9f779ee35cd16bb47920afce843b83d" translate="yes" xml:space="preserve">
          <source>When defining a subclass, you can override methods but still access the implementation of your parent class by calling the special &lt;code&gt;_super()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e3cf4f0e55bc2c0d67db28e65a276ca7469b19" translate="yes" xml:space="preserve">
          <source>When designing components &lt;code&gt;{{yield}}&lt;/code&gt; is used to denote where, inside the component's template, an optional block passed to the component should render:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49adc628d88d9b445cad3bd2bbbb37405283bda" translate="yes" xml:space="preserve">
          <source>When generating a link you might want to set additional attributes for it. You can do this with additional arguments to the &lt;code&gt;link-to&lt;/code&gt; component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737a131d7c82a11e0b927b79503d079fd017beb5" translate="yes" xml:space="preserve">
          <source>When given a deserialized value from a record attribute this method must return the serialized value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f556ea33c97aa3ae15eedf7ba4b91c387cccf06f" translate="yes" xml:space="preserve">
          <source>When given a serialize value from a JSON object this method must return the deserialized value for the record attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c613241657f144b43e1d69ef2e6270883c2e419c" translate="yes" xml:space="preserve">
          <source>When implementing an action on a component that will be handled outside the component, you need to break it down into two steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e943d12ae84c8eb4c17004cacd8b76a8f5bb87" translate="yes" xml:space="preserve">
          <source>When isEnabled is &lt;code&gt;false&lt;/code&gt;, the resulting HTML representation looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab879db9ef2c681e63a6ee1bef82393cf1a9c0ef" translate="yes" xml:space="preserve">
          <source>When related to JavaScript, this can be part of your build process which &quot;transpiles&quot; (converts) your ES6 syntax JavaScript to JavaScript that is supported by current browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4489e5269dceb9416fcd716acc1fbaa9f0085d" translate="yes" xml:space="preserve">
          <source>When rendered the component will iterate through the given list and apply a class to the one that is selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18069510c43dbb959decfa9fa3c0aee11bcf360" translate="yes" xml:space="preserve">
          <source>When requesting a record, the &lt;code&gt;JSONAPISerializer&lt;/code&gt; expects your server to return a JSON representation of the record that conforms to the following conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b53e9923f14ba529f6f541ccedf15c4fb777656" translate="yes" xml:space="preserve">
          <source>When serialized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42bfbe08862184e760e361fe6fe0cf4dac47793" translate="yes" xml:space="preserve">
          <source>When serializing an embedded record, modify the property (in the json payload) that refers to the parent record (foreign key for relationship).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d5ff38013bca2fb71a004b87802e3240358850" translate="yes" xml:space="preserve">
          <source>When set to a quoted string, these value will be directly applied to the HTML element. When left unquoted, these values will be bound to a property on the template's current rendering context (most typically a controller instance).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d35543d61d259c1518cf1f54cb195d4215500dd" translate="yes" xml:space="preserve">
          <source>When set to a quoted string, these values will be directly applied to the HTML element. When left unquoted, these values will be bound to a property on the template's current rendering context (most typically a controller instance). A very common use of this helper is to bind the &lt;code&gt;value&lt;/code&gt; of an input to an Object's attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1257dc65835687a4870676193b5e4494accdaab" translate="yes" xml:space="preserve">
          <source>When specifying irregular inflection rules for compound words, only the final word or phrase should be specified. For example, to specify the plural of &lt;code&gt;redCow&lt;/code&gt; as &lt;code&gt;redKine&lt;/code&gt; or &lt;code&gt;red-cow&lt;/code&gt; as &lt;code&gt;red-kine&lt;/code&gt;, only the final word segments &lt;code&gt;cow&lt;/code&gt; and &lt;code&gt;kine&lt;/code&gt; should be specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200f4f9f7ce290eb95d22b652a4a6fbc84942851" translate="yes" xml:space="preserve">
          <source>When the $.getJSON completes, and the promise is fulfilled with json, the life cycle attributes will update accordingly. Note that $.getJSON doesn't return an ECMA specified promise, it is useful to wrap this with an &lt;code&gt;RSVP.resolve&lt;/code&gt; so that it behaves as a spec compliant promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db724274ad80fa479002697ccf6ba5ae02e5c9da" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;isEnabled&lt;/code&gt; property on the component is set to &lt;code&gt;false&lt;/code&gt;, it will result in component instances with an HTML representation of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc2f990e87dfce3d7bb566e548f6011fae730cb" translate="yes" xml:space="preserve">
          <source>When the component receives a browser &lt;code&gt;click&lt;/code&gt; event it translate this interaction into application-specific semantics (&quot;play&quot; or &quot;stop&quot;) and calls the specified action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca44dc1d49027785453efc416cdd9ffeeaf2c088" translate="yes" xml:space="preserve">
          <source>When the parameter passed to &lt;code&gt;{{component}}&lt;/code&gt; evaluates to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, the helper renders nothing. When the parameter changes, the currently rendered component is destroyed and the new component is created and brought in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69891a73072830b84004f75bf79c7ad40ccf000a" translate="yes" xml:space="preserve">
          <source>When the record is in the &lt;code&gt;invalid&lt;/code&gt; state this object will contain any errors returned by the adapter. When present the errors hash contains keys corresponding to the invalid property names and values which are arrays of Javascript objects with two keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910e4b3f4e1b0beb887c640eabd243e5e37d67a6" translate="yes" xml:space="preserve">
          <source>When the rendered link matches the current route, and the same object instance is passed into the component, then the link is given &lt;code&gt;class=&quot;active&quot;&lt;/code&gt;. For example, if you were at the URL &lt;code&gt;/photos/2&lt;/code&gt;, the first example above would render as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75ec6efbd86187d1ba1bbc975719ebcc18344fd" translate="yes" xml:space="preserve">
          <source>When the service calls &lt;code&gt;createMap&lt;/code&gt; on our fake utility, we will run asserts to validate that it is called. In our first test notice that we expect four asserts to be run in line 17. Two of the asserts run in the test function, while the other two are run when &lt;code&gt;createMap&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47be05244c78c427307d36b56ede091000647c5b" translate="yes" xml:space="preserve">
          <source>When the user clicks on a &lt;code&gt;{{link-to}}&lt;/code&gt; helper, or when the app initiates a transition by using &lt;code&gt;transitionTo&lt;/code&gt;, the transition will be aborted and the URL will remain unchanged. However, if the browser back button is used to navigate away from &lt;code&gt;route:form&lt;/code&gt;, or if the user manually changes the URL, the new URL will be navigated to before the &lt;code&gt;willTransition&lt;/code&gt; action is called. This will result in the browser displaying the new URL, even if &lt;code&gt;willTransition&lt;/code&gt; calls &lt;code&gt;transition.abort()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa9e9474c5e33d722a4c88e21c5439b21d7fb3f" translate="yes" xml:space="preserve">
          <source>When the user enters their message into the input field, the message text will now be available to the component as &lt;code&gt;confirmValue&lt;/code&gt;. Then, once they click the &quot;OK&quot; button, the &lt;code&gt;submitConfirm&lt;/code&gt; action will be triggered, calling &lt;code&gt;onConfirm&lt;/code&gt; with the provided &lt;code&gt;confirmValue&lt;/code&gt;, thus invoking the &lt;code&gt;sendMessage&lt;/code&gt; action in &lt;code&gt;send-message&lt;/code&gt; with both the &lt;code&gt;messageType&lt;/code&gt; and &lt;code&gt;messageText&lt;/code&gt; arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3df28342d1986410e72085932f57cbca9624936" translate="yes" xml:space="preserve">
          <source>When the user types in the text field in our component, the &lt;code&gt;filterByCity&lt;/code&gt; action in the controller is called. This action takes in the &lt;code&gt;value&lt;/code&gt; property, and filters the &lt;code&gt;rental&lt;/code&gt; data for records in data store that match what the user has typed thus far. The result of the query is returned to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa124f295fc64e4184f169a3c3fb81c0cc7fa34" translate="yes" xml:space="preserve">
          <source>When this &lt;code&gt;{{#each}}&lt;/code&gt; re-renders, Ember will match up the previously rendered items (and reorder the generated DOM elements) based on each item's &lt;code&gt;id&lt;/code&gt; property. By default the item's own reference is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414258534455c22fff5937b4d8b918b7ed1557df" translate="yes" xml:space="preserve">
          <source>When this flag is set to &lt;code&gt;false&lt;/code&gt;, it will disable most browser-specific and interactive features. Specifically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bfae607a70d9d6e41ca6254307fd575bc9c2971" translate="yes" xml:space="preserve">
          <source>When this flag is set to &lt;code&gt;true&lt;/code&gt;, it will disable the entire rendering pipeline. Essentially, this puts the app into &quot;routing-only&quot; mode. No templates will be rendered, and no Components will be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0954ef66448702b13b1f4f596e46ba03c440d8c9" translate="yes" xml:space="preserve">
          <source>When transitioning between routes, the Ember router collects all of the models (via the &lt;code&gt;model&lt;/code&gt; hook) that will be passed to the route's controllers at the end of the transition. If the &lt;code&gt;model&lt;/code&gt; hook (or the related &lt;code&gt;beforeModel&lt;/code&gt; or &lt;code&gt;afterModel&lt;/code&gt; hooks) return normal (non-promise) objects or arrays, the transition will complete immediately. But if the &lt;code&gt;model&lt;/code&gt; hook (or the related &lt;code&gt;beforeModel&lt;/code&gt; or &lt;code&gt;afterModel&lt;/code&gt; hooks) returns a promise (or if a promise was provided as an argument to &lt;code&gt;transitionTo&lt;/code&gt;), the transition will pause until that promise fulfills or rejects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326ad1f96782a1c63b8f16b55934144907c04aed" translate="yes" xml:space="preserve">
          <source>When transitioning into &lt;code&gt;route:tardy&lt;/code&gt;, the &lt;code&gt;model()&lt;/code&gt; hook will be called and return a promise that won't resolve until 3 seconds later, during which time the router will be paused in mid-transition. When the promise eventually fulfills, the router will continue transitioning and eventually call &lt;code&gt;route:tardy&lt;/code&gt;'s &lt;code&gt;setupController()&lt;/code&gt; hook with the resolved object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fd979f8b359618ed351054a1bac137ca9a1a78" translate="yes" xml:space="preserve">
          <source>When transitioning into the linked route, the &lt;code&gt;model&lt;/code&gt; hook will be triggered with parameters including this passed identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f474bfe82a90c4db4a2bdea32190f24985ed84" translate="yes" xml:space="preserve">
          <source>When transitioning to the &lt;code&gt;posts&lt;/code&gt; route if it turns out that there is only one post, the current transition will be aborted in favor of redirecting to the &lt;code&gt;PostRoute&lt;/code&gt; with the single post object being its model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab7e511c3981d00dc6712f7b6fb28a2b4614806" translate="yes" xml:space="preserve">
          <source>When turn into a &lt;code&gt;DS.Errors&lt;/code&gt; object, you can read these errors through the property &lt;code&gt;base&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ac3414d33d0e54baaec356a6c033a5e5c3841d" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;history&lt;/code&gt;, Ember uses the browser's &lt;a href=&quot;http://caniuse.com/history&quot;&gt;history&lt;/a&gt; API to produce URLs with a structure like &lt;code&gt;/posts/new&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc87c6093c8a5e5b66f6d85e2ece6052e7a48d6" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;reopen()&lt;/code&gt;, you can also override existing methods and call &lt;code&gt;this._super&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999d888b75b2a4e9d43ee6fa04e18855611d4252" translate="yes" xml:space="preserve">
          <source>When using boolean class name bindings you can supply a string value other than the property name for use as the &lt;code&gt;class&lt;/code&gt; HTML attribute by appending the preferred value after a &quot;:&quot; character when defining the binding:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29eddbd256c9a4d038cbaddd2fa08b67d30d7481" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;loading&lt;/code&gt; handler, we can make use of the transition promise to know when the loading event is over:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973a1db91072f1a83c02ac82b964cd612f338be8" translate="yes" xml:space="preserve">
          <source>When using the Ember.js canary or beta builds you can enable a &quot;&lt;strong&gt;present&lt;/strong&gt; but &lt;strong&gt;disabled&lt;/strong&gt;&quot; feature by setting its flag value to &lt;code&gt;true&lt;/code&gt; before your application boots:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f8fa361b1109345a0cd5b48e882e510d1323dd" translate="yes" xml:space="preserve">
          <source>When using the debugger helper you will have access to a &lt;code&gt;get&lt;/code&gt; function. This function retrieves values available in the context of the template. For example, if you're wondering why a value &lt;code&gt;{{foo}}&lt;/code&gt; isn't rendering as expected within a template, you could place a &lt;code&gt;{{debugger}}&lt;/code&gt; statement and, when the &lt;code&gt;debugger;&lt;/code&gt; breakpoint is hit, you can attempt to retrieve this value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cb350c561e05763a31a0ba8aa3a67802b49e73" translate="yes" xml:space="preserve">
          <source>When we call &lt;code&gt;findAll&lt;/code&gt;, Ember Data will attempt to fetch rentals from &lt;code&gt;/api/rentals&lt;/code&gt;. If you recall, in the section titled &lt;a href=&quot;../installing-addons&quot;&gt;Installing Addons&lt;/a&gt; we set up an adapter to route data requests through &lt;code&gt;/api&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494e351435f4ac84f243de43fcf3149dde4df7ed" translate="yes" xml:space="preserve">
          <source>When we create a new Ember Project using Ember CLI, it uses the &lt;a href=&quot;https://qunitjs.com/&quot;&gt;&lt;code&gt;QUnit&lt;/code&gt;&lt;/a&gt; JavaScript test framework to define and run tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eef9cd7a7dd9d3e703ff5dc935b50f0613f4acd" translate="yes" xml:space="preserve">
          <source>When we deploy our app to a production server, we will likely want to replace Mirage with a remote server for Ember Data to communicate with for storing and retrieving persisted data. A remote server will allow for data to be shared and updated across users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255f84d9fb219eefbce3ae9ebe6d20a26115fd47" translate="yes" xml:space="preserve">
          <source>When we open the model file, we can see a blank class extending &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;&lt;code&gt;DS.Model&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a7dc65f4fe216aaa5e48ac14700a9120e984c0" translate="yes" xml:space="preserve">
          <source>When working with a collection of Ember objects, you will often want to filter a set of objects based upon the value of some property. The &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_filterBy&quot;&gt;&lt;code&gt;filterBy()&lt;/code&gt;&lt;/a&gt; method provides a shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6a77ac62cc72ae71a0d92e1cf3a63efea2fc34" translate="yes" xml:space="preserve">
          <source>When writing your tests, you need to be keenly aware of the fact that you cannot be sure that the response will return immediately after you make your requests, therefore your assertion code (the &quot;tester&quot;) needs to wait for the thing being tested (the &quot;testee&quot;) to be in a synchronized state. In the example above, that would be when both servers have responded and the test code can go about its business checking the data (whether it is mock data, or real data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6c889dc29562421a1cbed27fc494f80c816936" translate="yes" xml:space="preserve">
          <source>When yielding the component via the &lt;code&gt;hash&lt;/code&gt; helper, the component is invoked directly. See the following snippet:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955afbdd86a66fd0fad6a362eac667cecab3a1cb" translate="yes" xml:space="preserve">
          <source>When yielding the component without the hash helper use the &lt;code&gt;component&lt;/code&gt; helper. For example, below is a &lt;code&gt;full-name&lt;/code&gt; component template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4ce4aabe2a5cbf8cd07f307c94163b20e3f716" translate="yes" xml:space="preserve">
          <source>When you call &lt;code&gt;get&lt;/code&gt; on a computed property, the function will be called and the return value will be returned instead of the function itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bb11aa01b4dce02bd2a33e01ed2c88bcda5ee9" translate="yes" xml:space="preserve">
          <source>When you change query params through a transition (&lt;code&gt;transitionTo&lt;/code&gt; and &lt;code&gt;link-to&lt;/code&gt;), it is not considered a full transition. This means that the controller properties associated with the query params will be updated, as will the URL, but no &lt;code&gt;Route&lt;/code&gt; method hook like &lt;code&gt;model&lt;/code&gt; or &lt;code&gt;setupController&lt;/code&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69e47f37e42158acc7577bc5d9ecff2994656a0" translate="yes" xml:space="preserve">
          <source>When you click on the Data tab, and see this message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbc01ca1dfe0372e7f2252748ab40434c66b771" translate="yes" xml:space="preserve">
          <source>When you hover over the items in the View Tree, the related templates will be highlighted in your app. For every highlighted template, you can see the template name, and its associated objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3cafb4c2c57ff52c2b3bc9d3b62c0c66344f3d" translate="yes" xml:space="preserve">
          <source>When you open the Data tab, you will see a list of model types defined in your application, along with the number of loaded records. The Inspector displays the loaded records when you click on a model type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab149f77bf8009aa699db797bf2762ec6eda70c0" translate="yes" xml:space="preserve">
          <source>When you request data from the server for a model that has relationships with one or more others, you may want to retrieve records corresponding to those related models at the same time. For example, when retrieving a blog post, you may need to access the comments associated with the post as well. The &lt;a href=&quot;http://jsonapi.org/format/#fetching-includes&quot;&gt;JSON API specification allows&lt;/a&gt; servers to accept a query parameter with the key &lt;code&gt;include&lt;/code&gt; as a request to include those related records in the response returned to the client. The value of the parameter should be a comma-separated list of names of the relationships required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8144075bbe72bea2bdce879a516b4559539fae75" translate="yes" xml:space="preserve">
          <source>When you want a new model for your application you need to create a new file under the models folder and extend from &lt;code&gt;DS.Model&lt;/code&gt;. This is more conveniently done by using one of Ember CLI's generator commands. For instance, let's create a &lt;code&gt;person&lt;/code&gt; model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027f30c54b1ac34470b73ea4f3b5515cff4f2455" translate="yes" xml:space="preserve">
          <source>When you want fresh objects to be created for every lookup, register your factories as non-singletons using the &lt;code&gt;singleton: false&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78baa627ce51c69a9ea170e905d5ed8aac6303cb" translate="yes" xml:space="preserve">
          <source>When you want to define a reflexive relation (a model that has a relationship to itself), you must explicitly define the inverse relationship. If there is no inverse relationship then you can set the inverse to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a964e00fc978a0cbd1a2855f3758a3484a1ecb27" translate="yes" xml:space="preserve">
          <source>When you're using dependencies that are not included in an addon, you will have to instruct Ember CLI to include your assets in the build. This is done using the asset manifest file &lt;code&gt;ember-cli-build.js&lt;/code&gt;. You should only try to import assets located in the &lt;code&gt;bower_components&lt;/code&gt; and &lt;code&gt;vendor&lt;/code&gt; folders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bbea6e32f4fa6501f2554759c56309d62efa1d" translate="yes" xml:space="preserve">
          <source>When your application is in &lt;em&gt;testing mode&lt;/em&gt; then Ember will throw an error if you try to schedule work without an available run loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8aaa7fa5531024af7a0819cb54e2d39a6457293" translate="yes" xml:space="preserve">
          <source>When your application starts, the router matches the current URL to the &lt;em&gt;routes&lt;/em&gt; that you've defined. The routes, in turn, are responsible for displaying templates, loading data, and setting up application state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a711049b81b3819eab401d49b2d79f589556ee3c" translate="yes" xml:space="preserve">
          <source>When your components go multiple template layers deep, it is common to need to handle an action several layers up the tree. Using the action helper, parent components can pass actions to child components through templates alone without adding JavaScript code to those child components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482dc4def0e64871e30d23266f8cee25255acfd6" translate="yes" xml:space="preserve">
          <source>When your project has a lot of deprecations, you can start by filtering out deprecations that do not have to be addressed right away. You can use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Debug.html#method_registerDeprecationHandler&quot;&gt;deprecation handlers&lt;/a&gt; API to check for what release a deprecated feature will be removed. An example handler is shown below that filters out all deprecations that are not going away in release 2.0.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e88e7a1d803ae6d6b54e96fe6859beb6851ff8" translate="yes" xml:space="preserve">
          <source>Whenever the arguments you've passed to a helper change, whether they come from a model or a component, Ember will automatically call your helper again with the new values and keep the page up-to-date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd047804ba20fa25426caad93fae6eda1b93317" translate="yes" xml:space="preserve">
          <source>Whenever you use your helper in a template, Ember will call this function and insert whatever you return from the helper into the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1d33243d666f95d2fb14200dcf15b4666b0d41" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;computed.alias&lt;/code&gt; aliases &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;, and allows for bidirectional data flow, &lt;code&gt;computed.oneWay&lt;/code&gt; only provides an aliased &lt;code&gt;get&lt;/code&gt;. The &lt;code&gt;set&lt;/code&gt; will not mutate the upstream property, rather causes the current property to become the value set. This causes the downstream property to permanently diverge from the upstream property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e793bdd5c04fd1cf34a5c957ee4db4a05709a8b" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;computed.oneWay&lt;/code&gt; provides oneWay bindings, &lt;code&gt;computed.readOnly&lt;/code&gt; provides a readOnly one way binding. Very often when using &lt;code&gt;computed.oneWay&lt;/code&gt; one does not also want changes to propagate back up, as they will replace the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abf3e1679790fc51bf8e282ab72f921dfd09900" translate="yes" xml:space="preserve">
          <source>Where can I find more information?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c186039deb48872971e5af2a99aefa510721c5" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;title&lt;/code&gt; is bound to updates of the &lt;code&gt;office&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63fd8e89167c3837b7871cdcff71a69af33da26" translate="yes" xml:space="preserve">
          <source>Which can be bound or set as described in the previous section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649c708e1376e97b1ce6e207271a0b839d8c9dd7" translate="yes" xml:space="preserve">
          <source>Which outputs an input whose value is already bound to &lt;code&gt;model.name&lt;/code&gt; and &lt;code&gt;placeholder&lt;/code&gt; is &quot;Username&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7880392d2f4932e207d45be7e39481299ca23449" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt;&lt;code&gt;didInsertElement()&lt;/code&gt;&lt;/a&gt; is technically an event that can be listened for using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method_on&quot;&gt;&lt;code&gt;on()&lt;/code&gt;&lt;/a&gt;, it is encouraged to override the default method itself, particularly when order of execution is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cbc55433d2acd9d39804c761931d38e649223c" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;content&lt;/code&gt; is unset, setting a property to be delegated will throw an Error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0998b101a4cd2ab4f077903e883d459a8ae864" translate="yes" xml:space="preserve">
          <source>While on the &lt;code&gt;show&lt;/code&gt; route, we will also want to show additional information about our specific rental.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73255ea31681f1f1f36f3de37c4c66601834ad74" translate="yes" xml:space="preserve">
          <source>While templates describe how a user interface looks, components control how the user interface &lt;em&gt;behaves&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce330398bafdc06d03189bb761006dae51deaf1" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;BootOptions&lt;/code&gt; class exposes a large number of knobs, not all combinations of them are valid; certain incompatible combinations might result in unexpected behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d704cde65c4d3b1a1241864a3f06f7c5589633" translate="yes" xml:space="preserve">
          <source>While this approach will keep our results order consistent, there are other things to consider when dealing with multiple concurrent tasks, such as &lt;a href=&quot;https://emberjs.com/api/classes/Ember.run.html#method_debounce&quot;&gt;limiting the number of requests made to the server&lt;/a&gt;. To create effective and robust autocomplete behavior for your applications, we recommend considering the &lt;a href=&quot;http://ember-concurrency.com/#/docs/introduction&quot;&gt;&lt;code&gt;ember-concurrency&lt;/code&gt;&lt;/a&gt; addon project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0d5bcaed0bd1e10c3fc3205ddf958fc77c0950" translate="yes" xml:space="preserve">
          <source>While we try to make the Guides as beginner-friendly as we can, we must establish a baseline so that the guides can keep focused on Ember.js functionality. We will try to link to appropriate documentation whenever a concept is introduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2807fe93fc492c1c3e0484f143b58c32876ee911" translate="yes" xml:space="preserve">
          <source>While working with relationships it is important to remember that they return promises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e581776b4f0526dc2e22ac0f07b677e446867b" translate="yes" xml:space="preserve">
          <source>While you can think of your &lt;code&gt;Ember.Application&lt;/code&gt; as a container that holds the other classes in your application, there are several other responsibilities going on under-the-hood that you may want to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d0625240ec4d66cf7f2e438bfbb3df97e562be" translate="yes" xml:space="preserve">
          <source>Why is the run loop useful?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31371b9ffa547f7bd2175157075a04f541589e22" translate="yes" xml:space="preserve">
          <source>Wildcard / globbing routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef4943ec999e8db7d1a88b9eaafcd5eb161c275" translate="yes" xml:space="preserve">
          <source>Will become &lt;code&gt;true&lt;/code&gt; if the proxied promise is fulfilled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1c13165c51936db10fa63c3e8f52effca9660b" translate="yes" xml:space="preserve">
          <source>Will become &lt;code&gt;true&lt;/code&gt; if the proxied promise is rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac6d9646522fe48ad32b3fffb2a4692cff0ee0f" translate="yes" xml:space="preserve">
          <source>Will become:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967bf6e3e764bd44b5a88c203f09207919ac67cd" translate="yes" xml:space="preserve">
          <source>Will bind the &lt;code&gt;disabled&lt;/code&gt; attribute to the value of &lt;code&gt;entryNotAllowed&lt;/code&gt; in the current context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb75e9cb0eb606b74f61d02123a5c6d4312d1d7" translate="yes" xml:space="preserve">
          <source>Will bind the value of the text area to &lt;code&gt;name&lt;/code&gt; on the current context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ab8fe8130e40e084dc4e1c213c1ca1bb051613" translate="yes" xml:space="preserve">
          <source>Will render:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ea7be50679346bb0ff3e85bae446af0a5f1cdb" translate="yes" xml:space="preserve">
          <source>Will result in a component instance with an HTML representation of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9fd69d283239c5b37eef894efbe5a737283675" translate="yes" xml:space="preserve">
          <source>Will result in component instances with an HTML representation of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597b6d83a7c0d62ea3004fc4f90dd4d4e38edbe7" translate="yes" xml:space="preserve">
          <source>Windows or Mac users can download and run &lt;a href=&quot;http://nodejs.org/en/download/&quot;&gt;this Node.js installer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20d366a0759113bfb7cd09eb9f194c6444ea748" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;App.Comment&lt;/code&gt;, &lt;code&gt;&quot;comments&quot;&lt;/code&gt; and &lt;code&gt;{ id: 1, body: &quot;FIRST&quot; }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d607d78297dc6fa2b7a39dbd6f14454e5af5cca1" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;App.Comment&lt;/code&gt;, &lt;code&gt;&quot;comments&quot;&lt;/code&gt; and &lt;code&gt;{ id: 2, body: &quot;Rails is unagi&quot; }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ddce649a75fe236a3754b74a54cd6f672cc97e7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;App.Post&lt;/code&gt;, &lt;code&gt;&quot;posts&quot;&lt;/code&gt; and &lt;code&gt;{ id: 1, title: &quot;Rails is omakase&quot;, ... }&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce037c28fff2a0540ff9621816588d8265a6748" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;preventDefault=false&lt;/code&gt; omitted, if the user clicked on the link, Ember.js will trigger the action, but the user will remain on the current page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb911e726c920e4e8d286e33b26d8518cfbd8fd9" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;preventDefault=false&lt;/code&gt; present, if the user clicked on the link, Ember.js will trigger the action &lt;em&gt;and&lt;/em&gt; the user will be directed to the new page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca008b375b3c7fd79a920906220dd0d2790d6f97" translate="yes" xml:space="preserve">
          <source>With Ember Data, managing models as your application grows becomes both simple &lt;em&gt;and&lt;/em&gt; easy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d1face5dbed72bcf5dd93c6f2e67335d04fcbf" translate="yes" xml:space="preserve">
          <source>With a service and utility that render a map to a web page element, we'll connect it to our application using a component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d2e7e3b4fbd308fc0b4b0a2d6511026e591593" translate="yes" xml:space="preserve">
          <source>With our &lt;code&gt;maps&lt;/code&gt; service, our component will call the &lt;code&gt;getMapElement&lt;/code&gt; function with the provided location. We append the map element we get back from the service by implementing &lt;code&gt;didInsertElement&lt;/code&gt;, which is a &lt;a href=&quot;https://guides.emberjs.com/components/the-component-lifecycle/#toc_integrating-with-third-party-libraries-with-code-didinsertelement-code&quot;&gt;component lifecycle hook&lt;/a&gt;. This function runs during the component render, after the component's markup gets inserted into the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74694e1997c77eea34afad72b8e60c04c456903" translate="yes" xml:space="preserve">
          <source>With our three routes in place, we are ready to add an index route, which will handle requests to the root URI (&lt;code&gt;/&lt;/code&gt;) of our site. We'd like to make the rentals page the main page of our application, and we've already created a route. Therefore, we want our index route to simply forward to the &lt;code&gt;rentals&lt;/code&gt; route we've already created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc93f0b3397e7c8784db05d922cabbb128144795" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;context&lt;/code&gt; param:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958e54a2c6813f88ee03d2f8d6e46b7770e01129" translate="yes" xml:space="preserve">
          <source>With this code, we have established the following behaviors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593a7df287c3064eddb1573ea6b03e7d39905140" translate="yes" xml:space="preserve">
          <source>With this modification, we can now use the component in &lt;code&gt;send-message&lt;/code&gt; to wrap a text input element whose &lt;code&gt;value&lt;/code&gt; attribute is set to &lt;code&gt;confirmValue&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa2a879186e45980c1b4dd8c08f6c7e24cfb812" translate="yes" xml:space="preserve">
          <source>With:</source>
          <target state="translated">With:</target>
        </trans-unit>
        <trans-unit id="c46c2e06fad675102fab206f9ae9c46755de4b4a" translate="yes" xml:space="preserve">
          <source>Within &lt;code&gt;button-with-confirmation&lt;/code&gt;, the code in the &lt;code&gt;submitConfirm&lt;/code&gt; action does not change. It will still invoke &lt;code&gt;onConfirm&lt;/code&gt; without explicit arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36b87956bba707cfde1a5058787f58f6d44ae891" translate="yes" xml:space="preserve">
          <source>Within a Controller, Route or Component's action handler, the value of the &lt;code&gt;this&lt;/code&gt; context is the Controller, Route or Component object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c284591f2d79f325d91a346b5a994c22ad0e7f4" translate="yes" xml:space="preserve">
          <source>Within the test for this object we'll create an instance, update the &lt;code&gt;foo&lt;/code&gt; property (which should trigger the computed property), and assert that the logic in our computed property is working correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523907bd7f55f4bc190b263ce66c723ab1375079" translate="yes" xml:space="preserve">
          <source>Working with this API directly is not common in most Ember apps, but understanding this example will help you to understand the run-loops algorithm, which will make you a better Ember developer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747b6292ff9f23b22904a47a4c3ad9490c00a29f" translate="yes" xml:space="preserve">
          <source>Would allow the user to swap what fact is being displayed, and also edit that fact via a two-way mutable binding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67a0e3ec1a1e8db8401ce1fa3dedb22663e729b" translate="yes" xml:space="preserve">
          <source>Would result in an object such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfd0503f96b4265073cb83895d8715978b7e19e" translate="yes" xml:space="preserve">
          <source>Would result in instances with the following HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe560e16aa8d2bf860b5ce66ccf60777aa839a9d" translate="yes" xml:space="preserve">
          <source>Would result in the following HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af0e20fc2c428a1420bac915368a4addce03651" translate="yes" xml:space="preserve">
          <source>Wrapping Content in a Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4551a15fed736bc15e03f948b22237ccecd536e1" translate="yes" xml:space="preserve">
          <source>Writing Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c258d40d37f1ceb46ee642d4152034eefa10b4" translate="yes" xml:space="preserve">
          <source>Writing Your Own Enumerable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea344edec4d37d27d7627c2be67e13eb6230916" translate="yes" xml:space="preserve">
          <source>Writing a UI component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825fdb096a77edab0bb1ca62bab2903688f07d71" translate="yes" xml:space="preserve">
          <source>Yes! Controllers are still an integral part of an Ember application architecture, and generated by the framework even if you don't declare a Controller module explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4cf926c7ad59a777c1a2ec109f7194d8b8ab62" translate="yes" xml:space="preserve">
          <source>You are also able to combine &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; helpers to create more complex conditional logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2470a8c296da709327c34f194f1d00dd46bfb812" translate="yes" xml:space="preserve">
          <source>You are left with browsers that have full support of ES2015 and ES2016. If you inspect the compiled code, you will see that some features are not compiled to ES5 code anymore, such as arrow functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178620469436884ad92219f1ec156778668f2c73" translate="yes" xml:space="preserve">
          <source>You are using a protocol other than http or https. For file:// protocol, follow &lt;a href=&quot;../installation#toc_file-protocol&quot;&gt;these steps&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5ae1a8beb93f53eded0a563a09132680ae43c5" translate="yes" xml:space="preserve">
          <source>You are using an old Ember version ( &amp;lt; 1.0 ).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e8bfadeefe8698f807de1a79e1e9eaf1647f7b" translate="yes" xml:space="preserve">
          <source>You can access these environment variables in your application code by importing from &lt;code&gt;your-application-name/config/environment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e964c8fea5783239cfbaff562cd97971b8964a" translate="yes" xml:space="preserve">
          <source>You can also access the context of the view to make sure it is the object that you expect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9adf0e8c0dd7d7e96a39f2ad8e61ed91bc1b43" translate="yes" xml:space="preserve">
          <source>You can also access the special &lt;code&gt;messages&lt;/code&gt; property on the error object to get an array of all the error strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d64bc7dbc1e71c7ab04a3a9175ab32b74f5a75" translate="yes" xml:space="preserve">
          <source>You can also add observers to an object outside of a class definition using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_addObserver&quot;&gt;&lt;code&gt;addObserver()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6fce5351cce1baea3450672234068c6a8fe431" translate="yes" xml:space="preserve">
          <source>You can also add query params to URL transitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d335a5df872ced21fc742cf3cd56a18d14f626c8" translate="yes" xml:space="preserve">
          <source>You can also bind these attributes to differently named properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f112f7bed124d8b8eb661e444e253067a69dffb" translate="yes" xml:space="preserve">
          <source>You can also chain multiple event subscriptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3430a2819d4043f27e8b3ad44a08784ac8bf436" translate="yes" xml:space="preserve">
          <source>You can also click on the &lt;code&gt;$E&lt;/code&gt; button to send the value to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5584838479afb10a8d24bf9dfbed7b7c77af4db6" translate="yes" xml:space="preserve">
          <source>You can also create a &lt;em&gt;subclass&lt;/em&gt; from any existing class by calling its &lt;code&gt;extend()&lt;/code&gt; method. For example, you might want to create a subclass of Ember's built-in &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html&quot;&gt;&lt;code&gt;Ember.Component&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a335c1d15e1f14d3b1eb90fd889a9dfb9fe11dfa" translate="yes" xml:space="preserve">
          <source>You can also create a subclass from any existing class by calling its &lt;code&gt;extend()&lt;/code&gt; method. For example, you might want to create a subclass of Ember's built-in &lt;code&gt;Ember.Component&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b84adec37e709c07b69151af2b82a948deb95f" translate="yes" xml:space="preserve">
          <source>You can also create custom transforms with Ember CLI's &lt;code&gt;transform&lt;/code&gt; generator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768d179c54fdcb053f5de5d279f4435ae0035002" translate="yes" xml:space="preserve">
          <source>You can also define a reflexive relationship that doesn't have an inverse:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fc139240172bd2567095ed38d5bd305ce0e668" translate="yes" xml:space="preserve">
          <source>You can also define a serializer for a specific model. For example, if you had a &lt;code&gt;post&lt;/code&gt; model you could also define a &lt;code&gt;post&lt;/code&gt; serializer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7154e30c3054ead6f8cfc8a21a807c0486c0a01" translate="yes" xml:space="preserve">
          <source>You can also define what Ember should do when setting a computed property by providing additional function (&lt;code&gt;set&lt;/code&gt;) in hash argument. If you try to set a computed property, it will try to invoke setter accessor function with the key and value you want to set it to as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef13f688afcdf3cb317160d7ff711cd08cfd0e33" translate="yes" xml:space="preserve">
          <source>You can also define what Ember should do when setting a computed property. If you try to set a computed property, it will be invoked with the key (property name), and the value you want to set it to. You must return the new intended value of the computed property from the setter function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5af7ed3cfbc688ba23b9d7e3919466d53bd7104" translate="yes" xml:space="preserve">
          <source>You can also expose properties to the console. When you hover over an object's properties, a &lt;code&gt;$E&lt;/code&gt; button will appear next to every property. Click on it to expose the property's value to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3962f6baeb2c6a5aedfd2e2bf34292ff4b8649" translate="yes" xml:space="preserve">
          <source>You can also filter records by entering a query in the search box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb9bef8f99ccd8524f225484eaa3ae2da2d5391" translate="yes" xml:space="preserve">
          <source>You can also implement &lt;code&gt;keyForRelationship&lt;/code&gt;, which takes the name of the relationship as the first parameter, the kind of relationship (&lt;code&gt;hasMany&lt;/code&gt; or &lt;code&gt;belongsTo&lt;/code&gt;) as the second parameter, and the method (&lt;code&gt;serialize&lt;/code&gt; or &lt;code&gt;deserialize&lt;/code&gt;) as the third parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766839f8aefc0c5bfd6507b505fe6724c3f9c474" translate="yes" xml:space="preserve">
          <source>You can also mark computed property as &lt;code&gt;.readOnly()&lt;/code&gt; and block all attempts to set it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790f5b8730f1146bcd682c10416fcea7a1ad2d0c" translate="yes" xml:space="preserve">
          <source>You can also optionally tell &lt;code&gt;import()&lt;/code&gt; to place the file at a different path. The following example will copy the file to &lt;code&gt;dist/assets/fontawesome-webfont.ttf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526368ab062f3f8742f13acd3c8e3cc84e1e74c3" translate="yes" xml:space="preserve">
          <source>You can also pass &lt;code&gt;Mixin&lt;/code&gt; classes to add additional properties to the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cd24c177ec563348586a2f5ff8b35e04660534" translate="yes" xml:space="preserve">
          <source>You can also redirect elsewhere by calling &lt;code&gt;this.transitionTo('elsewhere')&lt;/code&gt; from within &lt;code&gt;willTransition&lt;/code&gt;. Note that &lt;code&gt;willTransition&lt;/code&gt; will not be fired for the redirecting &lt;code&gt;transitionTo&lt;/code&gt;, since &lt;code&gt;willTransition&lt;/code&gt; doesn't fire when there is already a transition underway. If you want subsequent &lt;code&gt;willTransition&lt;/code&gt; actions to fire for the redirecting transition, you must first explicitly call &lt;code&gt;transition.abort()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc90a8ecee78486b79c8d897922743c36a23e9c6" translate="yes" xml:space="preserve">
          <source>You can also remove attributes by setting the &lt;code&gt;serialize&lt;/code&gt; key to &lt;code&gt;false&lt;/code&gt; in your mapping object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad79d33b20e55672ed7e9c04eaf24113ed22091" translate="yes" xml:space="preserve">
          <source>You can also search for Promises by typing a query in the search box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a244a8dd77e3423dfb12d76d6dd5ecf27a2002" translate="yes" xml:space="preserve">
          <source>You can also specify a class which should only be added when the property is &lt;code&gt;false&lt;/code&gt; by declaring &lt;code&gt;classNameBindings&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88629031663799f125ecc79c9c9b0c86c9e8a507" translate="yes" xml:space="preserve">
          <source>You can also specify a template to show if the property is falsey by using the &lt;code&gt;else&lt;/code&gt; helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e024e0d765b5bede80159cdacd45d20e975e65ed" translate="yes" xml:space="preserve">
          <source>You can also specify an inverse on a &lt;code&gt;belongsTo&lt;/code&gt;, which works how you'd expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1def373c9f64a516324d8fe71b4712e2573192ea" translate="yes" xml:space="preserve">
          <source>You can also specify which class names are applied to the component's element by setting its &lt;code&gt;classNames&lt;/code&gt; property to an array of strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dcb6377d51bfed519a9b7e758dc92f9c9d1008" translate="yes" xml:space="preserve">
          <source>You can also toggle &quot;Hide passed tests&quot; to show your passing test case along with the tests that are still failing (because we haven't yet built them).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366753f2f41869dc2e446cc8f654153c1a91bc58" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;@each.property&lt;/code&gt; in your dependent key, the callback will still use the underlying array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1767199b3d98b895cb5f65fade57bde1e730555e" translate="yes" xml:space="preserve">
          <source>You can also use an inline form of &lt;code&gt;{{link-to}}&lt;/code&gt; component by passing the link text as the first argument to the component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72aa79f1b8f384843377aea66d93c8fc47a85395" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_input&quot;&gt;&lt;code&gt;{{input}}&lt;/code&gt;&lt;/a&gt; helper to create a checkbox by setting its &lt;code&gt;type&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5aee03132d9bc261fd345c3973e0a85cd6f8e6" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;value&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336f49b9ae0d3c27311ed52797674adbf85d7c6a" translate="yes" xml:space="preserve">
          <source>You can also use this method on DOM Element objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1081047683b318169e277b614b9fbd48e69e53a8" translate="yes" xml:space="preserve">
          <source>You can avoid passing a string as the first parameter. In that case Ember Data will infer the type from the key name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b46ae54d361d9b8ccac0153dfe2cd64d8512063" translate="yes" xml:space="preserve">
          <source>You can avoid passing a string as the first parameter. In that case Ember Data will infer the type from the singularized key name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ddfdd2a5fc42c5b8feba85a925492634b05595" translate="yes" xml:space="preserve">
          <source>You can bind attributes to the DOM element that represents a component by using &lt;code&gt;attributeBindings&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9986af59d6bcd5244e38bb82e0eeb25e2961dcbc" translate="yes" xml:space="preserve">
          <source>You can configure a Tomster icon to show up in Chrome's URL bar whenever you are visiting a site that uses Ember.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13002d34e50c8cbb269c39a328a94e87ba847104" translate="yes" xml:space="preserve">
          <source>You can configure this error-handling logic via the &lt;code&gt;error&lt;/code&gt; handler on the route's &lt;code&gt;actions&lt;/code&gt; hash. When a promise rejects, an &lt;code&gt;error&lt;/code&gt; event will be fired on that route and bubble up to &lt;code&gt;route:application&lt;/code&gt;'s default error handler unless it is handled by a custom error handler along the way, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1373748a6a40c42d4acd8e8c9df3ac723dfc197" translate="yes" xml:space="preserve">
          <source>You can configure which classes to include prototype extensions for in your application's configuration like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0c546350d929559c32675d186c8c5618e522ee" translate="yes" xml:space="preserve">
          <source>You can continue drill into the Inspector as long as properties contain either an Ember object or an array. In the image below, we clicked on the &lt;code&gt;model&lt;/code&gt; property first, then clicked on the &lt;code&gt;store&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29941d4d50a4b6adb18ff37f3fe5ce1b72234bcc" translate="yes" xml:space="preserve">
          <source>You can create records by calling the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Store.html#method_createRecord&quot;&gt;&lt;code&gt;createRecord()&lt;/code&gt;&lt;/a&gt; method on the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051139e04944ab02bd040472a4b3647f79cf6c9e" translate="yes" xml:space="preserve">
          <source>You can create your own factory type by simply registering a factory with the new type. For example, to create a &lt;code&gt;user&lt;/code&gt; type, you'd simply register your factory with &lt;code&gt;application.register('user:user-to-register')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7270c44b60416700c51aedead2abdaa04a5f46df" translate="yes" xml:space="preserve">
          <source>You can customize how JSONSerializer processes its payload by passing options in the &lt;code&gt;attrs&lt;/code&gt; hash or by subclassing the &lt;code&gt;JSONSerializer&lt;/code&gt; and overriding hooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5666878b6ad0c28cd9e049e3e6fb9c824edcc33" translate="yes" xml:space="preserve">
          <source>You can customize what type of element Ember generates for your component, including its attributes and class names, by creating a subclass of &lt;code&gt;Ember.Component&lt;/code&gt; in your JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9967d4df91336097c218ffa433eb28f772c03f47" translate="yes" xml:space="preserve">
          <source>You can define a &lt;code&gt;ready&lt;/code&gt; method on the &lt;code&gt;Ember.Application&lt;/code&gt; instance, which will be run by Ember when the application is initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9659b7e6f934d57ca0bfeab2ee1a7958b83ef0f" translate="yes" xml:space="preserve">
          <source>You can define nested routes by passing a callback to &lt;code&gt;this.route&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5f0fc5ef7269eaba8dc9370469e09fd35a29ca" translate="yes" xml:space="preserve">
          <source>You can define the component's event handlers to manage the drop event. And if you need to, you may also stop events from bubbling, by using &lt;code&gt;return false;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5155b42adc09f20e8b838447047cf92d99c96b8" translate="yes" xml:space="preserve">
          <source>You can define the following configuration options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535422cf29771d09df6ebc4fd5f89c3e5ddc98cf" translate="yes" xml:space="preserve">
          <source>You can define wildcard routes that will match multiple URL segments. This could be used, for example, if you'd like a catch-all route which is useful when the user enters an incorrect URL not managed by your app. Wildcard routes begin with an asterisk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21b52924eea416c35e82f9fc59fd5ed6c48fab9" translate="yes" xml:space="preserve">
          <source>You can deploy your application to any web server by copying the output from &lt;code&gt;ember build&lt;/code&gt; to any web server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde757d9c4c3d8abc62788701efcc26e5b0db0c8" translate="yes" xml:space="preserve">
          <source>You can easily transform each item in an enumerable using the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#method_map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; method, which creates a new array with results of calling a function on each item in the enumerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70b6bab1536578bc7cec522a368573107514930" translate="yes" xml:space="preserve">
          <source>You can edit &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt; properties in the Inspector. Your changes will be reflected immediately in your app. Click on a property's value to start editing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c519a137c8a7240a8668ceb93f3c3a8158e89328" translate="yes" xml:space="preserve">
          <source>You can expose objects to the console by clicking on the &lt;code&gt;$E&lt;/code&gt; button within the Inspector. This will set the global &lt;code&gt;$E&lt;/code&gt; variable to the chosen object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc46e4ad90c33d8c17299fa950918f15f7deae0d" translate="yes" xml:space="preserve">
          <source>You can filter by clicking on the following pills: &lt;code&gt;Rejected&lt;/code&gt;, &lt;code&gt;Pending&lt;/code&gt;, &lt;code&gt;Fulfilled&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19153f2f011646812cbf369337842417b695217c" translate="yes" xml:space="preserve">
          <source>You can filter the deprecations by typing a query in the search box. You can also clear the current deprecations by clicking on the clear icon at the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d7ee724babad2481b94dc2726abf834c60094f" translate="yes" xml:space="preserve">
          <source>You can find listings of addons on &lt;a href=&quot;http://emberobserver.com&quot;&gt;Ember Observer&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d178dedfcead04d6e5e7cae35cae8dc7208cf65b" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own component with &lt;code&gt;ember generate
component comment-form&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dca45437258033b64333ae9063690cc4f9bf147" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own component with &lt;code&gt;ember generate
component delayed-typeahead&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ac138a56df66cb36c40b9aeeeb1e3c345ed8ed" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own component with &lt;code&gt;ember generate
component location-indicator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ca9bc6f7a18ad144121adfd2e2e31852aaa01f" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own component with &lt;code&gt;ember generate
component magic-title&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7918f87a1abe83575a47a05d159e5095dd02a154" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own component with &lt;code&gt;ember generate
component pretty-color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33941ff4e8458b6f5e7bd69861ecc424d51b0636" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own controller with &lt;code&gt;ember generate
controller post&lt;/code&gt;, and &lt;code&gt;ember generate controller comments&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1600d4c8d43b2ab746957a915dc70aab5527c1f" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own controller with &lt;code&gt;ember generate
controller posts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a28addaf1b706dfe366b74be4e77f13cd3b26c0" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own helper with &lt;code&gt;ember generate helper
format-currency&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a442fa4089f7c54cb0daae45878b21101840f4" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own model with &lt;code&gt;ember generate
model player&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de05884f0101333c8b3e9811573826da92686b4e" translate="yes" xml:space="preserve">
          <source>You can follow along by generating your own user and profile models with &lt;code&gt;ember
generate model user&lt;/code&gt; and &lt;code&gt;ember generate model profile&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745d25bcd464e7c38d3932e96359cd94e12aa1ed" translate="yes" xml:space="preserve">
          <source>You can generate an Ember Data Model using Ember CLI. We'll call our model &lt;code&gt;rental&lt;/code&gt; and generate it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3ef966dac57d478b51077dd76933188cddc580" translate="yes" xml:space="preserve">
          <source>You can have as many of both as you want, so long as the parameters come first:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164c14d6ceca80145023f7c5c55ffa525c2b2c37" translate="yes" xml:space="preserve">
          <source>You can inspect your models by clicking on the &lt;code&gt;Data&lt;/code&gt; tab. Check out &lt;a href=&quot;#toc_building-a-data-custom-adapter&quot;&gt;Building a Data Custom Adapter&lt;/a&gt; below if you maintain your own persistence library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274c90b3871c55c1f8826d9438b969033b8cec47" translate="yes" xml:space="preserve">
          <source>You can install Ember with a single command using npm, the Node.js package manager. Type this into your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33df6fb0fa79f8014dbc0ee16ffa25d94a366ca" translate="yes" xml:space="preserve">
          <source>You can install the Inspector on Google Chrome as a new Developer Tool. To begin, visit the Extension page on the &lt;a href=&quot;https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi&quot;&gt;Chrome Web Store&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e975ce10515cdb401f506933c2eee9857552b8" translate="yes" xml:space="preserve">
          <source>You can install the Inspector on Google Chrome, Firefox, other browsers (via a bookmarklet), and on mobile devices by following the steps below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad630b0266b853bf1c273b32d384023a18d6392" translate="yes" xml:space="preserve">
          <source>You can install the latest version of &lt;code&gt;ember-cli&lt;/code&gt; by following the &lt;a href=&quot;https://guides.emberjs.com/getting-started/quick-start/#toc_install-ember&quot;&gt;Quick Start&lt;/a&gt; guide &quot;Installing Ember&quot; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed0db7ec0b7f94a3006bf5cb306cb0901dee78f" translate="yes" xml:space="preserve">
          <source>You can invoke it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb5e739749aea400d436883367f4899bf8bdf45" translate="yes" xml:space="preserve">
          <source>You can learn more about writing a custom adapter by reading the &lt;code&gt;DS.Adapter&lt;/code&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1530db60399ce39521684a84ecd24238fc4f51d9" translate="yes" xml:space="preserve">
          <source>You can leave off the path if it is the same as the route name. In this case, the following is equivalent to the above example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcba13b361b826bab9f22af229454f3ee5664a3c" translate="yes" xml:space="preserve">
          <source>You can listen for events simply by adding the &lt;code&gt;on&lt;/code&gt; call to the end of your method declarations in classes or mixins that you write. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3df784a86d751131241068dfbaf6c3a26263779" translate="yes" xml:space="preserve">
          <source>You can manually coerce a native array into an array that implements the required interfaces using the convenience method &lt;code&gt;Ember.A&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cab421dd0dd807ca776f6eecf2c0dc60b919c7" translate="yes" xml:space="preserve">
          <source>You can manually set it before calling &lt;code&gt;App.setupForTesting()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4227dcc5e7e9117d1ae54088486c1e6f1b2336b7" translate="yes" xml:space="preserve">
          <source>You can now &lt;code&gt;import&lt;/code&gt; them in your app. (e.g. &lt;code&gt;import { raw as icAjaxRaw } from 'ic-ajax';&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134710248885a52a9eddc487fefc838a23d690e0" translate="yes" xml:space="preserve">
          <source>You can now proceed on to implement the &lt;a href=&quot;../service&quot;&gt;next feature&lt;/a&gt;, or continue on to test our newly created filter component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604459bc895c8326510833e1df11b063d987353b" translate="yes" xml:space="preserve">
          <source>You can observe property changes simply by adding the &lt;code&gt;observes&lt;/code&gt; call to the end of your method declarations in classes that you write. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e380b5925a98b246667af35704179bdb52ce95d" translate="yes" xml:space="preserve">
          <source>You can optionally &lt;code&gt;preload&lt;/code&gt; specific attributes and relationships that you know of by passing them via the passed &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62335e5060f3cdf84f963f9ecfeb712384bd3844" translate="yes" xml:space="preserve">
          <source>You can optionally pass arguments to the action handler. Any values passed to the &lt;code&gt;{{action}}&lt;/code&gt; helper after the action name will be passed to the handler as arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a967dd540dfd8e48503f23a927c45fd5bb22b4" translate="yes" xml:space="preserve">
          <source>You can override any given property of the &lt;code&gt;Ember.LinkComponent&lt;/code&gt; that is generated by the &lt;code&gt;{{link-to}}&lt;/code&gt; component by passing key/value pairs, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facf163a6673b8dc2e5b74811bdcffc5c0c2bd2c" translate="yes" xml:space="preserve">
          <source>You can override the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Route.html#method_renderTemplate&quot;&gt;&lt;code&gt;renderTemplate()&lt;/code&gt;&lt;/a&gt; hook if you want finer control over template rendering. Among other things, it allows you to choose the controller used to configure the template and specific outlet to render it into.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4c074bc31fc838311e6d2ca173e2af5e432bbd" translate="yes" xml:space="preserve">
          <source>You can overwrite computed property with normal property (no longer computed), that won't change if dependencies change, if you set computed property and it won't have setter accessor function defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c072ac76e1c4d3d58f1d847325464e1143d1ce5d" translate="yes" xml:space="preserve">
          <source>You can pass a hash of these values to a computed property like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13ac17c4902b4a0e8b5c3474662b942b80ab77d" translate="yes" xml:space="preserve">
          <source>You can pass a hash with two functions, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;, as an argument to provide both a getter and setter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c93b4ae1807d07df0b269f54a5e2b99ee276f9d" translate="yes" xml:space="preserve">
          <source>You can pass an implementation name (&lt;code&gt;hash&lt;/code&gt;, &lt;code&gt;history&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;auto&lt;/code&gt;) to force a particular implementation to be used in your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39ee1b00fca2c95949c82ff1061ccd901738c12" translate="yes" xml:space="preserve">
          <source>You can pass as many named arguments as you'd like. They get added to the &lt;code&gt;namedArgs&lt;/code&gt; argument passed to the function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d714d9d2dca9ae1378dca6ed91881611d421392" translate="yes" xml:space="preserve">
          <source>You can pass one or more arguments to be used inside the function. In the above example, we passed the amount in cents as the first and only argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60df59635cb1b119be0b3ea353cca7b675c0776a" translate="yes" xml:space="preserve">
          <source>You can pass the following standard &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; attributes within the input helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d908a63c7f10481cea0372e5afe3bb58d462b3" translate="yes" xml:space="preserve">
          <source>You can prevent Ember from making changes to the URL by &lt;a href=&quot;../specifying-url-type&quot;&gt;changing the router's &lt;code&gt;location&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;none&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6156155a1130ff496b90d3de6af34903ab397a96" translate="yes" xml:space="preserve">
          <source>You can provide an &lt;code&gt;onerror&lt;/code&gt; function that will be called with the error details if any errors occur within your promise. This function can be anything, but a common practice is to call &lt;code&gt;console.assert&lt;/code&gt; to dump the error to the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7bba23d9d7eedd979283292d7bfbaa00d2c814" translate="yes" xml:space="preserve">
          <source>You can read more about Ember Data in the &lt;a href=&quot;https://guides.emberjs.com/models/&quot;&gt;Models section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82468447fdc6fd60a840865bf667b27661c295cc" translate="yes" xml:space="preserve">
          <source>You can reload the container tab by clicking on the reload icon. To search for instances, type a query in the search box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2d690f11a37ec44a69c18d88e362bdbbb8eda9" translate="yes" xml:space="preserve">
          <source>You can render &lt;code&gt;photos.hbs&lt;/code&gt; into the &lt;code&gt;&quot;anOutletName&quot;&lt;/code&gt; outlet of &lt;code&gt;application.hbs&lt;/code&gt; by calling &lt;code&gt;render&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aacae50e9f34c96a434675cbc8ae5fa80982409" translate="yes" xml:space="preserve">
          <source>You can respond to user events on your component like double-clicking, hovering, and key presses through event handlers. Simply implement the name of the event you want to respond to as a method on your component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2235a2c16bf318421effd350868b1af616d5683" translate="yes" xml:space="preserve">
          <source>You can retrieve models from the store in several ways. To retrieve a record for a specific id, use &lt;code&gt;DS.Store&lt;/code&gt;'s &lt;code&gt;findRecord()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad87831ee535c97dae89a261e1413fd3f8e2750" translate="yes" xml:space="preserve">
          <source>You can return a promise from this hook to pause the transition until the promise resolves (or rejects). This could be useful, for instance, for retrieving async code from the server that is required to enter a route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c62406c29e1c1c164c9a69275c18d7d99f5c760" translate="yes" xml:space="preserve">
          <source>You can say:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdb460c58d8bc8a2d35d18cd2bcca9731f435a8" translate="yes" xml:space="preserve">
          <source>You can see a hierarchical list of Promises with labels describing each Promise, its state, its settled value, and the time it took to settle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01b63f65fe4b7eedf939fe3afdac968f823fca3" translate="yes" xml:space="preserve">
          <source>You can see that we've replaced &lt;code&gt;{{body}}&lt;/code&gt; with &lt;code&gt;{{yield}}&lt;/code&gt;. This tells Ember that this content will be provided when the component is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020e17120dd0ef511e6021920a028e89609de2e6" translate="yes" xml:space="preserve">
          <source>You can see the path to the current object at the top of the Inspector. You can go back to the previous object by clicking on the left-facing arrow at the top left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881b061cce8150e45980e7d0484a879f2baca638" translate="yes" xml:space="preserve">
          <source>You can see the total number of deprecations next to the &lt;code&gt;Deprecations&lt;/code&gt; menu. You can also see the number of occurrences for each deprecation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6242dc44002047d4bbaca4cf1d3172d46d6ff425" translate="yes" xml:space="preserve">
          <source>You can see this in action if you create a new route that shows a different list of people. As an exercise for the reader, you may try to create a &lt;code&gt;programmers&lt;/code&gt; route that shows a list of famous programmers. By re-using the &lt;code&gt;people-list&lt;/code&gt; component, you can do it in almost no code at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d910c38d8efa562d07ccaa6d6b0569ff35d5eaf" translate="yes" xml:space="preserve">
          <source>You can send Ember objects and arrays to the Inspector by using &lt;code&gt;EmberInspector.inspect&lt;/code&gt; within the console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a369ae750a012526a7b0355eab980dc0c639452" translate="yes" xml:space="preserve">
          <source>You can send the deprecation message's stack trace to the console by clicking on &lt;code&gt;Trace in the console&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8fd6a8c4b2fc2e4adceb17951e4d15309ebf9f" translate="yes" xml:space="preserve">
          <source>You can set up an observer on an object by using &lt;code&gt;Ember.observer&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e54de88613d796b2b79fd8e5dd83832a62074a7" translate="yes" xml:space="preserve">
          <source>You can significantly reduce the amount of code you need to write and maintain by relying on Ember's conventions. Since these conventions will be shared among developers on your team, following them leads to code that is easier to maintain and understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ac3091b6b67b9cec73c0242e17792af2751d25" translate="yes" xml:space="preserve">
          <source>You can specify an alternative event by using the &lt;code&gt;on&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d372a4500ab33dad209a22a672bc78455f2f4b" translate="yes" xml:space="preserve">
          <source>You can specify the class of a component's element at invocation time the same way you would for a regular HTML element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ec6c6a4d8cc32ab23db839055ef7ee6446a6c8" translate="yes" xml:space="preserve">
          <source>You can tell if a record has outstanding changes that have not yet been saved by checking its &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#property_hasDirtyAttributes&quot;&gt;&lt;code&gt;hasDirtyAttributes&lt;/code&gt;&lt;/a&gt; property. You can also see what parts of the record were changed and what the original value was using the &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_changedAttributes&quot;&gt;&lt;code&gt;changedAttributes()&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;changedAttributes&lt;/code&gt; returns an object, whose keys are the changed properties and values are an array of values &lt;code&gt;[oldValue, newValue]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0983a609aca6361b8a199d94596c437f85f63233" translate="yes" xml:space="preserve">
          <source>You can tell the application to append the application template to a different element by specifying its &lt;code&gt;rootElement&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98533fb1639b60399686505fb87fe895445bca25" translate="yes" xml:space="preserve">
          <source>You can then access the metadata via the &lt;code&gt;meta&lt;/code&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a02fad14be2eccbf956190d88b769d0a28703a8" translate="yes" xml:space="preserve">
          <source>You can then define what the action does within the &lt;code&gt;actions&lt;/code&gt; hook of the controller, as you would with a component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7a87bec51239e77b1eea284c82f97a05986626" translate="yes" xml:space="preserve">
          <source>You can then inspect components using the Object Inspector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0d2f91e3d5d46b532442bb3de7380ad580a305" translate="yes" xml:space="preserve">
          <source>You can think of a component as a black box of UI functionality. So far, you've learned how parent components can pass attributes in to a child component, and how that component can use those attributes from both JavaScript and its template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a81aca4bf188fbb9314423030d91a038e8f7e4f" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;payloadKeyFromModelName&lt;/code&gt; to override the root key for an outgoing request. By default, the RESTSerializer returns a camelized version of the model's name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b0c5a976534ee3456104a871955840e8f2ec1c" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;yield&lt;/code&gt; inside a template to include the &lt;strong&gt;contents&lt;/strong&gt; of any block attached to the component. The block will be executed in the context of the surrounding context or outer controller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093a4fefdaba6b8fc52eed85a87f6995326888d9" translate="yes" xml:space="preserve">
          <source>You can use JavaScript's destructuring assignment shorthand in this case as well to clean up the above code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c598d6636f7fd7c0c755d63c357d2f3e26c384b" translate="yes" xml:space="preserve">
          <source>You can use JavaScript's destructuring assignment shorthand to clean up the code. This example is equivalent to the above example (note the function signature):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902a0e43c36ed08288f06c177a35befa6d905057" translate="yes" xml:space="preserve">
          <source>You can use attributes like any other property, including as part of a computed property. Frequently, you will want to define computed properties that combine or transform primitive attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8d3ea2cc005e6e4cae27b9dbdea9e620e25a99" translate="yes" xml:space="preserve">
          <source>You can use computed properties as values to create new computed properties. Let's add a &lt;code&gt;description&lt;/code&gt; computed property to the previous example, and use the existing &lt;code&gt;fullName&lt;/code&gt; property and add in some other properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43abf2c717a2a4e681c77412c768f5117a20b4f0" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;if&lt;/code&gt; helper inside another helper as a nested helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a318792d033717a4416c26b2892fc5ef7be45d0" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;unless&lt;/code&gt; helper inside another helper as a subexpression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a65c7baec2245d719bea9099125030e195a809a" translate="yes" xml:space="preserve">
          <source>You can use the Inspector to measure your app's render times. Click on &lt;code&gt;Render Performance&lt;/code&gt; to start inspecting render times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b407e6dbdec202bf9f76df68780bb62ca56b6c" translate="yes" xml:space="preserve">
          <source>You can use the View Tree to inspect your application's current state. The View Tree shows you the currently rendered templates, models, controllers, and components, in a tree format. Click on the &lt;code&gt;View Tree&lt;/code&gt; menu on the left to see these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d548631b3f69069b0bb0e508648863fc3f49959a" translate="yes" xml:space="preserve">
          <source>You can use the block form of &lt;code&gt;if&lt;/code&gt; to conditionally render a section of the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03638e87105c4e31623acf45f6a4ffb640b8251" translate="yes" xml:space="preserve">
          <source>You can use the methods defined in this module to access and modify array contents in a KVO-friendly way. You can also be notified whenever the membership of an array changes by using &lt;code&gt;.observes('myArray.[]')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea32d9cc66476184ce52400783ba602232c7766d" translate="yes" xml:space="preserve">
          <source>You can use this method to customize how a polymorphic relationship should be extracted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d4cdce8e27f0a73eb4c8575d059aa59a29f2b6" translate="yes" xml:space="preserve">
          <source>You can use this method to customize how a serialized record is added to the complete JSON hash to be sent to the server. By default the JSON Serializer does not namespace the payload and just sends the raw serialized JSON object. If your server expects namespaced keys, you should consider using the RESTSerializer. Otherwise you can override this method to customize how the record is added to the hash. The hash property should be modified by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb561a833b0aacd467fe43d7a7a1341ff4a284b4" translate="yes" xml:space="preserve">
          <source>You can use this method to customize how polymorphic objects are serialized. By default the REST Serializer creates the key by appending &lt;code&gt;Type&lt;/code&gt; to the attribute and value from the model's camelcased model name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad896673bbb88125268cea6dec180cfe8c58c871" translate="yes" xml:space="preserve">
          <source>You can use this method to customize how polymorphic objects are serialized. Objects are considered to be polymorphic if &lt;code&gt;{ polymorphic: true }&lt;/code&gt; is pass as the second argument to the &lt;code&gt;DS.belongsTo&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfc1e7787913a0bebf245631b3dad14973b0364" translate="yes" xml:space="preserve">
          <source>You can use this method to customize the root keys serialized into the JSON. The hash property should be modified by reference (possibly using something like _.extend) By default the REST Serializer sends the modelName of a model, which is a camelized version of the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c8b0da434d99afc09b2e53ad2b7b65fbc6cf6a" translate="yes" xml:space="preserve">
          <source>You can use this method, for example, to normalize underscored keys to camelized or other general-purpose normalizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42f7a21a4e8f59969afa2155bef10aa114c9d3b" translate="yes" xml:space="preserve">
          <source>You can use this method, for example, to normalize underscored keys to camelized or other general-purpose normalizations. You will only need to implement &lt;code&gt;normalize&lt;/code&gt; and manipulate the payload as desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf8b15e2ec35ce235c9e8c5d5898d9529043390" translate="yes" xml:space="preserve">
          <source>You can use your own data persistence library with the Inspector. Build a &lt;a href=&quot;https://github.com/emberjs/ember.js/blob/3ac2fdb0b7373cbe9f3100bdb9035dd87a849f64/packages/ember-extension-support/lib/data_adapter.js&quot;&gt;data adapter&lt;/a&gt;, and you can inspect your models using the Data tab. Use &lt;a href=&quot;https://github.com/emberjs/data/blob/d7988679590bff63f4d92c4b5ecab173bd624ebb/packages/ember-data/lib/system/debug/debug_adapter.js&quot;&gt;Ember Data's data adapter&lt;/a&gt; as an example for how to build your data adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6ab11218c2ab8d4e7df0edb393368b126ee075" translate="yes" xml:space="preserve">
          <source>You click on the Promises tab, and see this message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d856328f483a2e4524ea1f54d0cbc469e7ec252" translate="yes" xml:space="preserve">
          <source>You could then show the list of drafts in your component's template like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30611eb049e5565b7d7c999e584eec8928011feb" translate="yes" xml:space="preserve">
          <source>You create a link to a route using the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_link-to&quot;&gt;&lt;code&gt;{{link-to}}&lt;/code&gt;&lt;/a&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d278178a35feef5e3f9779d017d176da7904e01" translate="yes" xml:space="preserve">
          <source>You don't need to define a class all at once. You can reopen a class and define new properties using the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_reopen&quot;&gt;&lt;code&gt;reopen()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7de9c7e699dc4f1bd8fd3bdb448e4e7913d693" translate="yes" xml:space="preserve">
          <source>You may find the type of an attribute returned by the server does not match the type you would like to use in your JavaScript code. Ember Data allows you to define simple serialization and deserialization methods for attribute types called transforms. You can specify that you would like a transform to run for an attribute by providing the transform name as the first argument to the &lt;code&gt;DS.attr&lt;/code&gt; method. Ember Data supports attribute types of &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, and &lt;code&gt;date&lt;/code&gt;, which coerce the value to the JavaScript type that matches its name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd07ededd3a98f85f8c5167a977e41845cd02db" translate="yes" xml:space="preserve">
          <source>You may have noticed that &lt;code&gt;this.get('location')&lt;/code&gt; refers to a property location we haven't defined. This property will be passed in to the component by its parent template below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82712e95491b6a9efa34075e713a7a2a3f72794d" translate="yes" xml:space="preserve">
          <source>You may move onto the &lt;a href=&quot;../installing-addons&quot;&gt;next page&lt;/a&gt; to keep implementing new features, or continue reading on testing the app you've created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7349a1f1c27af3e1c4ebba86acd8f93ea32f46e3" translate="yes" xml:space="preserve">
          <source>You may now either move onto the &lt;a href=&quot;../subroutes&quot;&gt;next feature&lt;/a&gt;, or continue here to test the maps feature we just added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cbfa89216e5872317a08f371af7996baac5ce2b" translate="yes" xml:space="preserve">
          <source>You may pass any or all of the following options to &lt;code&gt;disconnectOutlet&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47bda309e55c44772054e3aee82c3c3f5d2e8dd" translate="yes" xml:space="preserve">
          <source>You may pass in more than two properties and even use property brace expansion. The computed property will return the first falsy value or last truthy value just like JavaScript's &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68695900e6eebba5efe00151d7a87ff730a7ce3" translate="yes" xml:space="preserve">
          <source>You may pass in more than two properties and even use property brace expansion. The computed property will return the first truthy value or last falsy value just like JavaScript's &lt;code&gt;||&lt;/code&gt; operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81932e7639161a2297b89e39d30a7dba374b170f" translate="yes" xml:space="preserve">
          <source>You may provide multiple arguments to sort by multiple properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2dac0b264f465e2c2c1322c69577930c808c23" translate="yes" xml:space="preserve">
          <source>You might be tempted to make the component responsible for fetching that data and storing it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08fad8e5da8b01c03aa322808afa0bc40d01ef5" translate="yes" xml:space="preserve">
          <source>You might need to bind a property dynamically to an input if you're building a flexible form, for example. To achieve this you need to use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_get&quot;&gt;&lt;code&gt;{{get}}&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_mut&quot;&gt;&lt;code&gt;{{mut}}&lt;/code&gt;&lt;/a&gt; in conjunction like shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c02919f924ed6c5479032fd7849e1792a14779e" translate="yes" xml:space="preserve">
          <source>You might notice that you have a lot of duplicated messages in your workflow file, like the 3 messages in the above example that start with &lt;code&gt;Accessing 'template' in...&lt;/code&gt;. This is because some of the deprecation messages provide context to the specific deprecation, making them different than the same deprecation in other parts of the app. If you want to consolidate the duplication, you can use a simple regular expression with a wildcard (&lt;code&gt;.*&lt;/code&gt;) for the part of the message that varies per instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe9dab0e9d7d3ba3e061eef4ca2bd1ef9ba1ec8" translate="yes" xml:space="preserve">
          <source>You must have a length property. This property should change whenever the number of items in your enumerable object changes. If you use this with an &lt;code&gt;Ember.Object&lt;/code&gt; subclass, you should be sure to change the length property using &lt;code&gt;set().&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b7c199d109995660639ebc4502cd4c810d42a2" translate="yes" xml:space="preserve">
          <source>You must implement &lt;code&gt;nextObject().&lt;/code&gt; See documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8f6bd659ce24198c6267f0ca93493a836b92bb" translate="yes" xml:space="preserve">
          <source>You only need to generate a Controller if you want to customize its properties or provide any &lt;code&gt;actions&lt;/code&gt;. If you have no customizations, Ember will provide a Controller instance for you at run time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06660abc3350b9f2c67222ad078b7090dfc7f739" translate="yes" xml:space="preserve">
          <source>You should be down to only 2 failing tests: One remaining acceptance test failure; and our ESLint test that fails on an unused assert for our unimplemented test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bdef39a66cc3ff9390b599503741803d6de894" translate="yes" xml:space="preserve">
          <source>You should begin a run loop when the callback fires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14212b45f7227e190b822690ace71d0b774e227" translate="yes" xml:space="preserve">
          <source>You should generally implement the &lt;code&gt;copy()&lt;/code&gt; method to return a copy of the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414c01daf6fc0e2f5d84fa84a4a7aaf9a1e1d37b" translate="yes" xml:space="preserve">
          <source>You should use the &lt;code&gt;camelCased&lt;/code&gt; event names, so two-word names like &lt;code&gt;keypress&lt;/code&gt; become &lt;code&gt;keyPress&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b8d636b1904d648b3d05b1b56deaf9b20753a8" translate="yes" xml:space="preserve">
          <source>You should use this method whenever you need to run some action after a period of time instead of using &lt;code&gt;setTimeout()&lt;/code&gt;. This method will ensure that items that expire during the same script execution cycle all execute together, which is often more efficient than using a real setTimeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b83f1ff9741f8fe3e63e41f99e4b0a8b95484a" translate="yes" xml:space="preserve">
          <source>You typically observe property changes simply by using the &lt;code&gt;Ember.observer&lt;/code&gt; function in classes that you write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cf863d5bee380195638bb6011401719f88bf71" translate="yes" xml:space="preserve">
          <source>You will learn about more advanced usages in the Component's &lt;a href=&quot;https://guides.emberjs.com/components/triggering-changes-with-actions/&quot;&gt;Triggering Changes With Actions&lt;/a&gt; guide, but you should familiarize yourself with the following basics first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3760b6263b2d7af99c9002adda39ece467fd2299" translate="yes" xml:space="preserve">
          <source>You will need to add &lt;code&gt;&quot;moment&quot;&lt;/code&gt; to the &lt;code&gt;globals&lt;/code&gt; section in &lt;code&gt;.eslintrc.js&lt;/code&gt; to prevent ESLint errors about using an undefined variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80d458d66bdd1556bcab314e512e42e94558357" translate="yes" xml:space="preserve">
          <source>You will need to have the surge cli tool installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc4134676c933b991101fb8a241181e95547980b" translate="yes" xml:space="preserve">
          <source>You will notice that this is then used to configure your application's router:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09393a4e4e13e85e942ea4c2a3b157e35aa7e6c3" translate="yes" xml:space="preserve">
          <source>You will see output like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7176897946bc6061510c704773079d75dd19f3fd" translate="yes" xml:space="preserve">
          <source>You would define your relationship like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482df8a0e78ccd78b660949b69965278b235a9b0" translate="yes" xml:space="preserve">
          <source>You would use the custom &lt;code&gt;dollars&lt;/code&gt; transform like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48ec885503b90142bfdbbb287b1f0a3115298a5" translate="yes" xml:space="preserve">
          <source>You'll be able to get values from the current item:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecaead5b1d4bd052fc2f48b6b11cfe9912ce078f" translate="yes" xml:space="preserve">
          <source>You'll notice standard JavaScript class patterns and the new ES2015 classes aren't widely used in Ember. Plain objects can still be found, and sometimes they're referred to as &quot;hashes&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46313eb881e0df25b61e1c35d71fec97961d98f" translate="yes" xml:space="preserve">
          <source>You'll see output like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0e6ba31cec4aa278bd9c3542990bf78c64778a" translate="yes" xml:space="preserve">
          <source>Your API might return errors as successful responses with status code 200 and an Errors text or object. You can return a &lt;code&gt;DS.InvalidError&lt;/code&gt; or a &lt;code&gt;DS.AdapterError&lt;/code&gt; (or a sub class) from this hook and it will automatically reject the promise and put your record into the invalid or error state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ba6fe8735fe29aa9dcaad12ad7ec2f604d6d2b" translate="yes" xml:space="preserve">
          <source>Your API might return useful results in the response headers. Response headers are passed in as the second argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b563413c0bc58b1bdd693e101751d31a479070" translate="yes" xml:space="preserve">
          <source>Your app will often need a way to let users interact with controls that change application state. For example, imagine that you have a template that shows a blog title, and supports expanding the post to show the body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442e3bc8c2d4a91877ca32ace7779e5f2ef2e104" translate="yes" xml:space="preserve">
          <source>Your array must support the &lt;code&gt;length&lt;/code&gt; property. Your replace methods should set this property whenever it changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504420a04e0663954fb267fd51573a09e5369c47" translate="yes" xml:space="preserve">
          <source>Your backend may use different property names for your records the store will attempt extract and normalize the errors using the serializer's &lt;code&gt;extractErrors&lt;/code&gt; method before the errors get added to the the model. As a result, it is safe for the &lt;code&gt;InvalidError&lt;/code&gt; to wrap the error payload unaltered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05fe5a86e8cac898b34a53a28c442fa92dab5bc2" translate="yes" xml:space="preserve">
          <source>Your backend would be expected to return an error response that described the problem, so that error messages can be generated on the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fe217dbdb5799101e7abb3dbf72b35a87564d0" translate="yes" xml:space="preserve">
          <source>Your own assets (such as &lt;code&gt;robots.txt&lt;/code&gt;, &lt;code&gt;favicon&lt;/code&gt;, custom fonts, etc) should be placed in the &lt;code&gt;public/&lt;/code&gt; folder in your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1388a8e8e4202fca31370fdbffab5607e9021d" translate="yes" xml:space="preserve">
          <source>Your routes can then render into a specific one of these &lt;code&gt;outlet&lt;/code&gt;s by specifying the &lt;code&gt;outlet&lt;/code&gt; attribute in your &lt;code&gt;renderTemplate&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6fbe7f5b7926a5f1268665f300136fdac32f6b" translate="yes" xml:space="preserve">
          <source>Your server may expect a different JSON format than the built-in serialization format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af314da8e840851fa439923164604edaa4d9245d" translate="yes" xml:space="preserve">
          <source>Your server's configuration may be different so you may need different options. Please see the &lt;a href=&quot;http://httpd.apache.org/docs/2.0/misc/rewriteguide.html&quot;&gt;Apache URL Rewriting Guide&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c3f664076888f887d58171bb311cbe600f1b35" translate="yes" xml:space="preserve">
          <source>Your template would bind to these properties in the &lt;code&gt;blog-post&lt;/code&gt; template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bddb94f3d1240225c8e481304050b5fffdf98d" translate="yes" xml:space="preserve">
          <source>[]public</source>
          <target state="translated">[]public</target>
        </trans-unit>
        <trans-unit id="03877c33dc480adf582df4b8762511ce62570172" translate="yes" xml:space="preserve">
          <source>_path</source>
          <target state="translated">_path</target>
        </trans-unit>
        <trans-unit id="8a2e62d521488a190d55a0fcc20e5f720ccd30c0" translate="yes" xml:space="preserve">
          <source>```javascript // models/blog.js export default DS.Model.extend({ user: DS.belongsTo({ async: true }) });</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f966b055ac9c37b9c73e7b295e92e10dfa81e69" translate="yes" xml:space="preserve">
          <source>`accept`</source>
          <target state="translated">`accept`</target>
        </trans-unit>
        <trans-unit id="da09fa7bb1ab3cf343b06c26207ce7ffcc11ff0b" translate="yes" xml:space="preserve">
          <source>`autocomplete`</source>
          <target state="translated">`autocomplete`</target>
        </trans-unit>
        <trans-unit id="f9483edc984fda67218b942fae870e63e9e67d2d" translate="yes" xml:space="preserve">
          <source>`autofocus`</source>
          <target state="translated">`autofocus`</target>
        </trans-unit>
        <trans-unit id="56c9cf438200de42a4d26637a07e87c04e65db93" translate="yes" xml:space="preserve">
          <source>`autosave`</source>
          <target state="translated">`autosave`</target>
        </trans-unit>
        <trans-unit id="3abfaa9780608e488cb52152035d50d121a56521" translate="yes" xml:space="preserve">
          <source>`belongsTo` or `hasMany`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f34379c26a66e601f085b25c7552a43f2ff5933" translate="yes" xml:space="preserve">
          <source>`disabled`</source>
          <target state="translated">`disabled`</target>
        </trans-unit>
        <trans-unit id="b69377941b05949277bb89be518ec7b180137961" translate="yes" xml:space="preserve">
          <source>`form`</source>
          <target state="translated">`form`</target>
        </trans-unit>
        <trans-unit id="0b482b6f118cdcf1894b723b293bc4f20fc770fa" translate="yes" xml:space="preserve">
          <source>`formaction`</source>
          <target state="translated">`formaction`</target>
        </trans-unit>
        <trans-unit id="e1a7562deb2830f78f1cacf28d7386db9c01954c" translate="yes" xml:space="preserve">
          <source>`formenctype`</source>
          <target state="translated">`formenctype`</target>
        </trans-unit>
        <trans-unit id="0eba06d330684088239ce0dbb164cdc5135244b1" translate="yes" xml:space="preserve">
          <source>`formmethod`</source>
          <target state="translated">`formmethod`</target>
        </trans-unit>
        <trans-unit id="f7d0631424eb0ebed3375d12b07caebde08e2e28" translate="yes" xml:space="preserve">
          <source>`formnovalidate`</source>
          <target state="translated">`formnovalidate`</target>
        </trans-unit>
        <trans-unit id="f32d608992d1f4b86dd534e698d7a0b3e20bd8ba" translate="yes" xml:space="preserve">
          <source>`formtarget`</source>
          <target state="translated">`formtarget`</target>
        </trans-unit>
        <trans-unit id="f5a628d6759f3026fda098cc9ba33c7c520df99c" translate="yes" xml:space="preserve">
          <source>`height`</source>
          <target state="translated">`height`</target>
        </trans-unit>
        <trans-unit id="f69dcdf6ffc96144eb765217074bbac560f0090e" translate="yes" xml:space="preserve">
          <source>`inputmode`</source>
          <target state="translated">`inputmode`</target>
        </trans-unit>
        <trans-unit id="17c8f553b7da3b0becf0f6451908cee7a187539a" translate="yes" xml:space="preserve">
          <source>`max`</source>
          <target state="translated">`max`</target>
        </trans-unit>
        <trans-unit id="c92720e72733cde41db5caf58f96d0455927be98" translate="yes" xml:space="preserve">
          <source>`maxlength`</source>
          <target state="translated">`maxlength`</target>
        </trans-unit>
        <trans-unit id="d7e127bd814e7a9eb7bacea896587fc78647a0f0" translate="yes" xml:space="preserve">
          <source>`min`</source>
          <target state="translated">`min`</target>
        </trans-unit>
        <trans-unit id="e73b0c427dab9339dd532e1a34d8a92a06e426c0" translate="yes" xml:space="preserve">
          <source>`multiple`</source>
          <target state="translated">`multiple`</target>
        </trans-unit>
        <trans-unit id="f97279e76d95d98f7433ff400fab94e189ee6052" translate="yes" xml:space="preserve">
          <source>`name`</source>
          <target state="translated">`name`</target>
        </trans-unit>
        <trans-unit id="4b8be36dc0d51e53d3009bd382a1c9c59dabf307" translate="yes" xml:space="preserve">
          <source>`pattern`</source>
          <target state="translated">`pattern`</target>
        </trans-unit>
        <trans-unit id="686174b37f3e0b7d71bc52900a008103e1885049" translate="yes" xml:space="preserve">
          <source>`placeholder`</source>
          <target state="translated">`placeholder`</target>
        </trans-unit>
        <trans-unit id="274badacbe4b948799e159b8e98ac363edad508a" translate="yes" xml:space="preserve">
          <source>`readonly`</source>
          <target state="translated">`readonly`</target>
        </trans-unit>
        <trans-unit id="421bfaf05a58dc0bc5c0d16b9eac89db0b801cf3" translate="yes" xml:space="preserve">
          <source>`required`</source>
          <target state="translated">`required`</target>
        </trans-unit>
        <trans-unit id="d68653bbd416c3c0f479d97c3708cd614247b8a9" translate="yes" xml:space="preserve">
          <source>`selectionDirection`</source>
          <target state="translated">`selectionDirection`</target>
        </trans-unit>
        <trans-unit id="1e76e9f29c637eafbd87941a3a5740d3222949f1" translate="yes" xml:space="preserve">
          <source>`size`</source>
          <target state="translated">`size`</target>
        </trans-unit>
        <trans-unit id="e1479c07dd09ac6eb703c5eda133ba7661aaef1e" translate="yes" xml:space="preserve">
          <source>`spellcheck`</source>
          <target state="translated">`spellcheck`</target>
        </trans-unit>
        <trans-unit id="5c95c906f48cd41957f7479c8d27054c01a55203" translate="yes" xml:space="preserve">
          <source>`step`</source>
          <target state="translated">`step`</target>
        </trans-unit>
        <trans-unit id="f92a9ba387b9f8f8bcec269a2b8fcb8f7ee9a60b" translate="yes" xml:space="preserve">
          <source>`tabindex`</source>
          <target state="translated">`tabindex`</target>
        </trans-unit>
        <trans-unit id="a5a4283ea7b52fb7dc2bdcd64a5bb9e48b99a901" translate="yes" xml:space="preserve">
          <source>`true` if object is found in the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="890190f700436149ebddfcd85e3715702d00aa34" translate="yes" xml:space="preserve">
          <source>`true` if object is found in the enumerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6891b6e8952067dbbe9ce94387174ebae0e38c30" translate="yes" xml:space="preserve">
          <source>`true` if the passed function returns `true` for any item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4bae9bd52ea45c92946fbed18e02155aa07814" translate="yes" xml:space="preserve">
          <source>`true` if the record should be in the array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf68994fee414c300045b8754f96d86a00e641f" translate="yes" xml:space="preserve">
          <source>`true` if the string was decorated with `htmlSafe`, `false` otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c3ff0da13331c5f56278d4d52058a44f09f62d" translate="yes" xml:space="preserve">
          <source>`type`</source>
          <target state="translated">`type`</target>
        </trans-unit>
        <trans-unit id="1fa64afde3afb7ea14c6a4a6215c4553e1082676" translate="yes" xml:space="preserve">
          <source>`value`</source>
          <target state="translated">`value`</target>
        </trans-unit>
        <trans-unit id="fa5238cc42860278a829992a12cff604523301e3" translate="yes" xml:space="preserve">
          <source>`width`</source>
          <target state="translated">`width`</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="9f3634a1e625df63a529d405c445941110df5915" translate="yes" xml:space="preserve">
          <source>a 'node-style' function that takes a callback as its last argument. The callback expects an error to be passed as its first argument (if an error occurred, otherwise null), and the value from the operation as its second argument ('function(err, value){ }').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b22995bb9c5bf888ac4164c0351fbe2b9c4647e0" translate="yes" xml:space="preserve">
          <source>a Handlebars template (&lt;code&gt;app/templates/components/list-filter.hbs&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80f4ef239078d1c4d0e5c9d68f2e5e863034fc9" translate="yes" xml:space="preserve">
          <source>a JavaScript file (&lt;code&gt;app/components/list-filter.js&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d39915bec30ed18e6a8da6344fc365ed3dcac0" translate="yes" xml:space="preserve">
          <source>a context to send with the action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b3a48d4e3c6fdc8fb0be3c3ceac83fe3b11ad3" translate="yes" xml:space="preserve">
          <source>a dependent key to an array of sort properties (add `:desc` to the arrays sort properties to sort descending) or a function to use when sorting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25a0b0c00fd64142b9e9b108b6e5d9879fe6c51" translate="yes" xml:space="preserve">
          <source>a function that wraps `nodeFunc` to return an `RSVP.Promise`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5adc7792c5b7d26ef95447d4af057ccb4b53c74" translate="yes" xml:space="preserve">
          <source>a hash of options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c78aaed2a7d5d240519c43ccffea07ba21460e" translate="yes" xml:space="preserve">
          <source>a hash of properties to set on the newly created record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df1af8af1ec94b77cd4832bef06b54339557de1" translate="yes" xml:space="preserve">
          <source>a jQuery-compatible selector string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244c99e3255ce9568ad4c30a7f6492a580d91748" translate="yes" xml:space="preserve">
          <source>a promise rejected with the given `reason`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c741f389d51bf384f998af1cb40e0872bb81cbe6" translate="yes" xml:space="preserve">
          <source>a promise that resolves to a JSONAPI document object describing the new value of this relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce603224be4a0981ae5f7fdc266bd97da5a20934" translate="yes" xml:space="preserve">
          <source>a promise that resolves with the ManyArray in this has-many relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66003a3773be838464961bf548a63be38e98abc" translate="yes" xml:space="preserve">
          <source>a promise that resolves with the record in this belongs-to relationship after the reload has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47bc6c80bc28946f4aac3e6c12d317feff79143" translate="yes" xml:space="preserve">
          <source>a promise that resolves with the record in this belongs-to relationship.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefd75fb1b94cd2aa382bd02ce040234d875ffbc" translate="yes" xml:space="preserve">
          <source>a promise that will be resolved when the adapter returns successfully or rejected if the adapter returns with an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d7ff712d0e11027a1a5b3923dd7d6ae7336e0e" translate="yes" xml:space="preserve">
          <source>a promise that will be resolved with the record when the adapter returns successfully or rejected if the adapter returns with an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7349855f3f6549d3c4f983d8c2c14cf506138b1c" translate="yes" xml:space="preserve">
          <source>a promise that will become fulfilled with the given `value`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc296184f70016189c45e2de74f09a3a54cb2a7d" translate="yes" xml:space="preserve">
          <source>acceptsModelName</source>
          <target state="translated">acceptsModelName</target>
        </trans-unit>
        <trans-unit id="d155f857bd62b44cb9959fe0eeeb8468c03d5a89" translate="yes" xml:space="preserve">
          <source>acceptsModelNamepublic</source>
          <target state="translated">acceptsModelNamepublic</target>
        </trans-unit>
        <trans-unit id="34eb4c4ef005207e8b8f916b9f1fffacccd6945e" translate="yes" xml:space="preserve">
          <source>action</source>
          <target state="translated">action</target>
        </trans-unit>
        <trans-unit id="cd1a8cc06243414157e32f12015aaf853e2aac70" translate="yes" xml:space="preserve">
          <source>actionName</source>
          <target state="translated">actionName</target>
        </trans-unit>
        <trans-unit id="a48d5ead1931f62c7a1ae4335f9ab5b1fe5b7c2f" translate="yes" xml:space="preserve">
          <source>actionpublic</source>
          <target state="translated">actionpublic</target>
        </trans-unit>
        <trans-unit id="326b426f9ac7a96ed6baf62f8838565416d27df8" translate="yes" xml:space="preserve">
          <source>actions</source>
          <target state="translated">actions</target>
        </trans-unit>
        <trans-unit id="5e97193c6a7c5595966c7d75e3b2ad3a17783e62" translate="yes" xml:space="preserve">
          <source>actionspublic</source>
          <target state="translated">actionspublic</target>
        </trans-unit>
        <trans-unit id="2c1e2b1daf8e75bbba55ee03e9b6e28c23686988" translate="yes" xml:space="preserve">
          <source>activate</source>
          <target state="translated">activate</target>
        </trans-unit>
        <trans-unit id="b75a48c70241b04306d6825c19e5078e907e4e44" translate="yes" xml:space="preserve">
          <source>activatepublic</source>
          <target state="translated">activatepublic</target>
        </trans-unit>
        <trans-unit id="002f154895a55930b60babeca6f3f212d3c1f724" translate="yes" xml:space="preserve">
          <source>activeClass</source>
          <target state="translated">activeClass</target>
        </trans-unit>
        <trans-unit id="320ae8f05c9d36c5cdb7b9561402d813a01248b6" translate="yes" xml:space="preserve">
          <source>activeClasspublic</source>
          <target state="translated">activeClasspublic</target>
        </trans-unit>
        <trans-unit id="7fe7fcbbf6586bb9560b0192ae21701cc0f7f19d" translate="yes" xml:space="preserve">
          <source>adapter</source>
          <target state="translated">adapter</target>
        </trans-unit>
        <trans-unit id="33fcd42f85515fb01ead1818fccbe54b0bef84ca" translate="yes" xml:space="preserve">
          <source>adapterError</source>
          <target state="translated">adapterError</target>
        </trans-unit>
        <trans-unit id="44f637dff67eeea950ca2f45d4d83577b4c57e7c" translate="yes" xml:space="preserve">
          <source>adapterFor</source>
          <target state="translated">adapterFor</target>
        </trans-unit>
        <trans-unit id="3d2e876335a7c34c2ff684112b498af1e0e2d6d0" translate="yes" xml:space="preserve">
          <source>adapterFor (modelName) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="becc07726b8f6cf41ebd813c8001045433a88f2a" translate="yes" xml:space="preserve">
          <source>adapterpublic</source>
          <target state="translated">adapterpublic</target>
        </trans-unit>
        <trans-unit id="bdded17d3c0e7a4bdf44d8e4b8a266f4c0f6595a" translate="yes" xml:space="preserve">
          <source>addAmt</source>
          <target state="translated">addAmt</target>
        </trans-unit>
        <trans-unit id="c9c16c8123d18cdf7e8f05f4cd33ec011170f1ff" translate="yes" xml:space="preserve">
          <source>addArrayObserver</source>
          <target state="translated">addArrayObserver</target>
        </trans-unit>
        <trans-unit id="06ae788402d9a297098528816fe312c39318bd9c" translate="yes" xml:space="preserve">
          <source>addArrayObserver (target, opts) Ember.Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e0a46c7d84840ba411eea47524727561509868" translate="yes" xml:space="preserve">
          <source>addListener</source>
          <target state="translated">addListener</target>
        </trans-unit>
        <trans-unit id="2f6c3927e01c74eebbbb55db0da5039430f0fda7" translate="yes" xml:space="preserve">
          <source>addListener (obj, eventName, target, method, once) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5bd66a8a0ee0cb08d34c4f1bcbc943d7d3b7f1c" translate="yes" xml:space="preserve">
          <source>addObject</source>
          <target state="translated">addObject</target>
        </trans-unit>
        <trans-unit id="e9030ecf9b727ff166cc3dfb290ff2897dc9bf92" translate="yes" xml:space="preserve">
          <source>addObject (obj) Ember.Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b4be009817af0b36957bf8e40128e2b5dc878c" translate="yes" xml:space="preserve">
          <source>addObject (object) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3281763ef5ab10df1c06a57b58c94fc899c6f97" translate="yes" xml:space="preserve">
          <source>addObjects</source>
          <target state="translated">addObjects</target>
        </trans-unit>
        <trans-unit id="dd9249cfbc3b9fa5c42d95b8b6da33e249f66db5" translate="yes" xml:space="preserve">
          <source>addObjects (objects) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648d0593f2a2d4ad861ec1303ddd800dc0c05482" translate="yes" xml:space="preserve">
          <source>addObserver</source>
          <target state="translated">addObserver</target>
        </trans-unit>
        <trans-unit id="7d49face02c10e7e5606228d994e4687c936fec6" translate="yes" xml:space="preserve">
          <source>addObserver (key, target, method) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9e537fcc40c1aa02c768c531d25c9584f182b7" translate="yes" xml:space="preserve">
          <source>addObserver (obj, _path, target, method) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7428079fa537ec02ce1eddbea575941b501e4b" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/build-url-mixin.js:5</source>
          <target state="translated">addon/-private/adapters/build-url-mixin.js:5</target>
        </trans-unit>
        <trans-unit id="9ec1d2939b803fe80db9755ec7138d5224564b6b" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:12</source>
          <target state="translated">addon/-private/adapters/errors.js:12</target>
        </trans-unit>
        <trans-unit id="9bdff9c25e7601f7f6e6989657310a9552200a66" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:122</source>
          <target state="translated">addon/-private/adapters/errors.js:122</target>
        </trans-unit>
        <trans-unit id="bbfe6621166a8271ee78a67a07aa96c43f980e0b" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:183</source>
          <target state="translated">addon/-private/adapters/errors.js:183</target>
        </trans-unit>
        <trans-unit id="ab47a954a57d7648b1436707ca1833384927ed22" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:218</source>
          <target state="translated">addon/-private/adapters/errors.js:218</target>
        </trans-unit>
        <trans-unit id="dd7afc58b5ab05bd5797c0bdcac64a0ffd4cd144" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:230</source>
          <target state="translated">addon/-private/adapters/errors.js:230</target>
        </trans-unit>
        <trans-unit id="d5bfa1ed37de5d90df87b9ff1a3cecff6287ee8c" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:266</source>
          <target state="translated">addon/-private/adapters/errors.js:266</target>
        </trans-unit>
        <trans-unit id="0b840acfcbb06613f154849991f47d6e4ad396df" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:279</source>
          <target state="translated">addon/-private/adapters/errors.js:279</target>
        </trans-unit>
        <trans-unit id="a61fa5772ab22fd9f407de0c663536b0238f6033" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:318</source>
          <target state="translated">addon/-private/adapters/errors.js:318</target>
        </trans-unit>
        <trans-unit id="069c1bc67d7f1d7cfc17185071e3782194ec9089" translate="yes" xml:space="preserve">
          <source>addon/-private/adapters/errors.js:331</source>
          <target state="translated">addon/-private/adapters/errors.js:331</target>
        </trans-unit>
        <trans-unit id="7a8eaa6e51d2bf1845484f926f2aa9cae76c52da" translate="yes" xml:space="preserve">
          <source>addon/-private/core.js:8</source>
          <target state="translated">addon/-private/core.js:8</target>
        </trans-unit>
        <trans-unit id="73161bbfc24c32b34f4d38314e21452d86174523" translate="yes" xml:space="preserve">
          <source>addon/-private/system/many-array.js:12</source>
          <target state="translated">addon/-private/system/many-array.js:12</target>
        </trans-unit>
        <trans-unit id="e8c147e9397c125eec527f75f36a1b9aa025a39d" translate="yes" xml:space="preserve">
          <source>addon/-private/system/model/errors.js:15</source>
          <target state="translated">addon/-private/system/model/errors.js:15</target>
        </trans-unit>
        <trans-unit id="daf133d55225327c2e3f568ee6eaf2f6fb6a618e" translate="yes" xml:space="preserve">
          <source>addon/-private/system/model/model.js:70</source>
          <target state="translated">addon/-private/system/model/model.js:70</target>
        </trans-unit>
        <trans-unit id="1d91ebee95641c003e4a3ca4a95290a6bc596b75" translate="yes" xml:space="preserve">
          <source>addon/-private/system/model/states.js:10</source>
          <target state="translated">addon/-private/system/model/states.js:10</target>
        </trans-unit>
        <trans-unit id="9da7cde1ac90906a5399aca0482f5d80e27a324e" translate="yes" xml:space="preserve">
          <source>addon/-private/system/promise-proxies.js:37</source>
          <target state="translated">addon/-private/system/promise-proxies.js:37</target>
        </trans-unit>
        <trans-unit id="dc022a961328dc615b86b5c590d338e0a7aff9c2" translate="yes" xml:space="preserve">
          <source>addon/-private/system/promise-proxies.js:6</source>
          <target state="translated">addon/-private/system/promise-proxies.js:6</target>
        </trans-unit>
        <trans-unit id="6d027d2af94eef877b9c1b60be3b91d9edb52116" translate="yes" xml:space="preserve">
          <source>addon/-private/system/promise-proxies.js:80</source>
          <target state="translated">addon/-private/system/promise-proxies.js:80</target>
        </trans-unit>
        <trans-unit id="d72f8c3d9a1b5ec93f57e41e9c7527bf389c28eb" translate="yes" xml:space="preserve">
          <source>addon/-private/system/record-arrays/adapter-populated-record-array.js:11</source>
          <target state="translated">addon/-private/system/record-arrays/adapter-populated-record-array.js:11</target>
        </trans-unit>
        <trans-unit id="c5af73895e69cc2ad103dc0bc74a00fab6b4dc16" translate="yes" xml:space="preserve">
          <source>addon/-private/system/record-arrays/filtered-record-array.js:10</source>
          <target state="translated">addon/-private/system/record-arrays/filtered-record-array.js:10</target>
        </trans-unit>
        <trans-unit id="5b3c9da69781a7c46387d96d1944f216df4fe221" translate="yes" xml:space="preserve">
          <source>addon/-private/system/record-arrays/record-array.js:11</source>
          <target state="translated">addon/-private/system/record-arrays/record-array.js:11</target>
        </trans-unit>
        <trans-unit id="240299b88ca21509e7841a42b800f475b1643c73" translate="yes" xml:space="preserve">
          <source>addon/-private/system/references/belongs-to.js:9</source>
          <target state="translated">addon/-private/system/references/belongs-to.js:9</target>
        </trans-unit>
        <trans-unit id="8ece4ccdd9cf3b13305929c6ad03d7ff14960fc3" translate="yes" xml:space="preserve">
          <source>addon/-private/system/references/has-many.js:16</source>
          <target state="translated">addon/-private/system/references/has-many.js:16</target>
        </trans-unit>
        <trans-unit id="9ff9849c1cebea5fc1e303b9fa47a8f53b3c0555" translate="yes" xml:space="preserve">
          <source>addon/-private/system/references/record.js:4</source>
          <target state="translated">addon/-private/system/references/record.js:4</target>
        </trans-unit>
        <trans-unit id="229c844c0ae2a2c814052367e7f382848096f2f6" translate="yes" xml:space="preserve">
          <source>addon/-private/system/store.js:135</source>
          <target state="translated">addon/-private/system/store.js:135</target>
        </trans-unit>
        <trans-unit id="e49987146c21bb294e9bb2386b5ea60a13fb1251" translate="yes" xml:space="preserve">
          <source>addon/adapter.js:7</source>
          <target state="translated">addon/adapter.js:7</target>
        </trans-unit>
        <trans-unit id="e6fd186a6b0734d8a5abcff4ff9496370f446274" translate="yes" xml:space="preserve">
          <source>addon/adapters/json-api.js:11</source>
          <target state="translated">addon/adapters/json-api.js:11</target>
        </trans-unit>
        <trans-unit id="ae7db88471597039e4479b4c398e037a8da6b511" translate="yes" xml:space="preserve">
          <source>addon/adapters/rest.js:31</source>
          <target state="translated">addon/adapters/rest.js:31</target>
        </trans-unit>
        <trans-unit id="5abb1eca35106c2076c2b03af339703bffc4bb09" translate="yes" xml:space="preserve">
          <source>addon/serializer.js:7</source>
          <target state="translated">addon/serializer.js:7</target>
        </trans-unit>
        <trans-unit id="729649ea8786a8dbee9bbdb3d9ac36352d13e0eb" translate="yes" xml:space="preserve">
          <source>addon/serializers/embedded-records-mixin.js:8</source>
          <target state="translated">addon/serializers/embedded-records-mixin.js:8</target>
        </trans-unit>
        <trans-unit id="1384f9eec5d771289cbafadbe653402f9d702b46" translate="yes" xml:space="preserve">
          <source>addon/serializers/json-api.js:13</source>
          <target state="translated">addon/serializers/json-api.js:13</target>
        </trans-unit>
        <trans-unit id="81735b8146523391176496bea2a99caa1613724c" translate="yes" xml:space="preserve">
          <source>addon/serializers/json.js:17</source>
          <target state="translated">addon/serializers/json.js:17</target>
        </trans-unit>
        <trans-unit id="669be359b618801877a5597f5cdd83195f2fd8ca" translate="yes" xml:space="preserve">
          <source>addon/serializers/rest.js:13</source>
          <target state="translated">addon/serializers/rest.js:13</target>
        </trans-unit>
        <trans-unit id="64d48d1d2036a4634bcd2569652e7bea70ca91cf" translate="yes" xml:space="preserve">
          <source>addon/transforms/boolean.js:6</source>
          <target state="translated">addon/transforms/boolean.js:6</target>
        </trans-unit>
        <trans-unit id="4b35e9510f6ce9c911b13fb3278e638c66db3d63" translate="yes" xml:space="preserve">
          <source>addon/transforms/date.js:35</source>
          <target state="translated">addon/transforms/date.js:35</target>
        </trans-unit>
        <trans-unit id="e8d4eba5406d6848582747e06e42a5ec7a938289" translate="yes" xml:space="preserve">
          <source>addon/transforms/number.js:10</source>
          <target state="translated">addon/transforms/number.js:10</target>
        </trans-unit>
        <trans-unit id="1db9ee44e8d53b36189c6d39670cf76764d4fd4a" translate="yes" xml:space="preserve">
          <source>addon/transforms/string.js:6</source>
          <target state="translated">addon/transforms/string.js:6</target>
        </trans-unit>
        <trans-unit id="d008afd6b41275d6e546bff4f18cc4e6428e0859" translate="yes" xml:space="preserve">
          <source>addon/transforms/transform.js:3</source>
          <target state="translated">addon/transforms/transform.js:3</target>
        </trans-unit>
        <trans-unit id="c059aa7a4877a935f6e64a732362d4447d943be5" translate="yes" xml:space="preserve">
          <source>advanceReadiness</source>
          <target state="translated">advanceReadiness</target>
        </trans-unit>
        <trans-unit id="7912e299df658652011c0e6325dd10d4207131ac" translate="yes" xml:space="preserve">
          <source>advanceReadinesspublic</source>
          <target state="translated">advanceReadinesspublic</target>
        </trans-unit>
        <trans-unit id="1ebf6e4676b0b75d1d9d8ffef7d422158336fb2f" translate="yes" xml:space="preserve">
          <source>afterModel</source>
          <target state="translated">afterModel</target>
        </trans-unit>
        <trans-unit id="a10030fe1788436991ca22abf7d7a3ee394dd2b7" translate="yes" xml:space="preserve">
          <source>afterModel (resolvedModel, transition) Any | Promise&amp;lt;any&amp;gt;public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="c2850d8aa03b457d7530a05b7c88eb88886c10c2" translate="yes" xml:space="preserve">
          <source>alias (dependentKey) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c3c508ac5051ae32957004c7eaa13491fa41c7" translate="yes" xml:space="preserve">
          <source>aliasMethod</source>
          <target state="translated">aliasMethod</target>
        </trans-unit>
        <trans-unit id="cab62eb101b3750a6da1f2ee01180893804daa7b" translate="yes" xml:space="preserve">
          <source>aliasMethod (methodName) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="2471617b2afdc98523987df5c3278f0d92baf071" translate="yes" xml:space="preserve">
          <source>all (array, label)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0894cbc1ff254839bfbbb5b981c4cb61894b9363" translate="yes" xml:space="preserve">
          <source>allSettled</source>
          <target state="translated">allSettled</target>
        </trans-unit>
        <trans-unit id="f83e3b6810a12656437039c3c4cd8195d99fe419" translate="yes" xml:space="preserve">
          <source>allSettled (entries, label) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da4bbe7319405047d7f48987f1bba93b9df5f8f" translate="yes" xml:space="preserve">
          <source>amt</source>
          <target state="translated">amt</target>
        </trans-unit>
        <trans-unit id="612fda0c92b3ca2aad4f36fc9c7e82307bb293f7" translate="yes" xml:space="preserve">
          <source>an Array of parameter names for the current route (in the example, `['post_id']`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d300bb4e28aa1f2c1663e8d43635c9f137c5acda" translate="yes" xml:space="preserve">
          <source>an array mapped to the specified key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44e01c95832c6e2a897a8440cc77fe0df4318a3b" translate="yes" xml:space="preserve">
          <source>an array mapped via the callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf7a31dc6654d888ee2f9f8d76a8f2f673e89f9" translate="yes" xml:space="preserve">
          <source>an array of arrays of records, each of which is to be loaded separately by `findMany`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772d53bfdb8fea28f5e8c0b8958742a0f2d6994b" translate="yes" xml:space="preserve">
          <source>an instance of DS.Store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96b375f76afb3739f75ac6070a9db2b4d5be7139" translate="yes" xml:space="preserve">
          <source>an object whose values are primitive JSON values only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa85ec166b29488582c3fbe47d5bf5041d71d527" translate="yes" xml:space="preserve">
          <source>an object, whose keys are changed properties, and value is an [oldProp, newProp] array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f583011c23166040c680107e167ad46fdd4e9e6" translate="yes" xml:space="preserve">
          <source>an opaque query to be used by the adapter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="a484452c2d5a731194415dc578076f5773fc91bf" translate="yes" xml:space="preserve">
          <source>and (dependentKey) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151dee65473ed0b1b82ef641fae9bfd622ec4085" translate="yes" xml:space="preserve">
          <source>and a component integration test (&lt;code&gt;tests/integration/components/list-filter-test.js&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d20c6b338044f563d6d474e06c1a8af91a06b80" translate="yes" xml:space="preserve">
          <source>and a template to display its attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389de3652199c8b5e1f7f7f52c982c7bec0954b7" translate="yes" xml:space="preserve">
          <source>and executing the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267d18d0747484478ee864fd61605d59a9f68d67" translate="yes" xml:space="preserve">
          <source>and the adapter for the &lt;code&gt;User&lt;/code&gt; model defines a &lt;code&gt;queryRecord()&lt;/code&gt; method that targets that endpoint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="e8d25da651a27b9c6be2e2ba1db826a512adeece" translate="yes" xml:space="preserve">
          <source>any (callback, target) Booleanpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed8250379c1c3b2ca66d30cd0889abb61ab1a49" translate="yes" xml:space="preserve">
          <source>any object, string, number, Element, or primitive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1b7fc6be771befd60dc80f781e4c281f9bbb53" translate="yes" xml:space="preserve">
          <source>any passed value to &lt;code&gt;disabled&lt;/code&gt; will disable it except &lt;code&gt;undefined&lt;/code&gt;. to ensure that only &lt;code&gt;true&lt;/code&gt; disable the &lt;code&gt;link-to&lt;/code&gt; component you can override the global behavior of &lt;code&gt;Ember.LinkComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="bb1c37ab13fb7a92c6c0c451b2d0b67564c0c1f7" translate="yes" xml:space="preserve">
          <source>args*</source>
          <target state="translated">args*</target>
        </trans-unit>
        <trans-unit id="536f158f6dfd529865dcb865a97bb16804e34d70" translate="yes" xml:space="preserve">
          <source>arguments</source>
          <target state="translated">arguments</target>
        </trans-unit>
        <trans-unit id="b10982fdeb01b184e3c8f11fc69a3037c89e0364" translate="yes" xml:space="preserve">
          <source>arguments for the action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c62d3440115ef4ec9fd804640a373cb7f1d99ca" translate="yes" xml:space="preserve">
          <source>arguments*</source>
          <target state="translated">arguments*</target>
        </trans-unit>
        <trans-unit id="b784d13837cc44f0b45c00bd61924c7bd6f673cb" translate="yes" xml:space="preserve">
          <source>ariaRole</source>
          <target state="translated">ariaRole</target>
        </trans-unit>
        <trans-unit id="96e7436203a4b3ebf87065ef17336cace4684d6c" translate="yes" xml:space="preserve">
          <source>ariaRolepublic</source>
          <target state="translated">ariaRolepublic</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="1b2900153aa860f3dd8922b013a55c643bb20025" translate="yes" xml:space="preserve">
          <source>array containing the split strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9aab808ce11e9072efaba32f73405a0b6cbe22" translate="yes" xml:space="preserve">
          <source>array of errors in JSON-API format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd754704d046058309c03c2f51a6ee6f4517d8ed" translate="yes" xml:space="preserve">
          <source>array whose content will be used for replacing the content of the receiver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ba3b245d3b571fff7780da3778b35c93a07e86" translate="yes" xml:space="preserve">
          <source>arrayContentDidChange</source>
          <target state="translated">arrayContentDidChange</target>
        </trans-unit>
        <trans-unit id="58e12ede3e92538d3584989fd095cfd186180da6" translate="yes" xml:space="preserve">
          <source>arrayContentDidChange (startIdx, removeAmt, addAmt) Ember.Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf027961fd585bb5057924d06a51a82275dd553" translate="yes" xml:space="preserve">
          <source>arrayContentWillChange</source>
          <target state="translated">arrayContentWillChange</target>
        </trans-unit>
        <trans-unit id="c4f089e4c1204ec5b9c1a10e62913fda301314c2" translate="yes" xml:space="preserve">
          <source>arrayContentWillChange (startIdx, removeAmt, addAmt) Ember.Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b5daad5073849378993ba34e058d7008293097" translate="yes" xml:space="preserve">
          <source>assert</source>
          <target state="translated">assert</target>
        </trans-unit>
        <trans-unit id="2d5b2c70d8436a05aa29b310e4c3a81ae119a253" translate="yes" xml:space="preserve">
          <source>assert (desc, test) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9009b730f26e909d049a4a0c3612e3c61160f37f" translate="yes" xml:space="preserve">
          <source>assign</source>
          <target state="translated">assign</target>
        </trans-unit>
        <trans-unit id="85ee91079111d676780c83bf77325f4067fb9305" translate="yes" xml:space="preserve">
          <source>assign (original, args) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27c1c1e57f6ba0858176ca4eed4e2f77a777b644" translate="yes" xml:space="preserve">
          <source>asyncEnd</source>
          <target state="translated">asyncEnd</target>
        </trans-unit>
        <trans-unit id="a3e10021149aa7ca6daae31d35f4d93f31a57e36" translate="yes" xml:space="preserve">
          <source>asyncEndpublic</source>
          <target state="translated">asyncEndpublic</target>
        </trans-unit>
        <trans-unit id="d923d15f179862191039fde4603541a0795719fb" translate="yes" xml:space="preserve">
          <source>asyncStart</source>
          <target state="translated">asyncStart</target>
        </trans-unit>
        <trans-unit id="1850d86c0c4f7e645ffd7f08e3fb8471b29c0555" translate="yes" xml:space="preserve">
          <source>asyncStartpublic</source>
          <target state="translated">asyncStartpublic</target>
        </trans-unit>
        <trans-unit id="fc88c6b3cc380853de27e44642207df9743ff63d" translate="yes" xml:space="preserve">
          <source>attr</source>
          <target state="translated">attr</target>
        </trans-unit>
        <trans-unit id="c576c3989a1f6bdf395925a0713eb1482b0be626" translate="yes" xml:space="preserve">
          <source>attr (type, options) Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c317cd0735d9046d7675c475fa1c6dce647953f" translate="yes" xml:space="preserve">
          <source>attribute</source>
          <target state="translated">attribute</target>
        </trans-unit>
        <trans-unit id="d0210793c2dcb66d8439b8861adf659582577ef2" translate="yes" xml:space="preserve">
          <source>attributeBindings</source>
          <target state="translated">attributeBindings</target>
        </trans-unit>
        <trans-unit id="ac2812ff968488be792df47d7af15890743ab5a5" translate="yes" xml:space="preserve">
          <source>attributeBindingspublic</source>
          <target state="translated">attributeBindingspublic</target>
        </trans-unit>
        <trans-unit id="d7f67a250d8254339cc572b200990d99fe1baf29" translate="yes" xml:space="preserve">
          <source>attributes</source>
          <target state="translated">attributes</target>
        </trans-unit>
        <trans-unit id="130856e90bbab066b8bff5aef533f2fbad235efb" translate="yes" xml:space="preserve">
          <source>attrs</source>
          <target state="translated">attrs</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="90d5edff3a81c03312850adf401467a1ced69b75" translate="yes" xml:space="preserve">
          <source>becameError</source>
          <target state="translated">becameError</target>
        </trans-unit>
        <trans-unit id="40907776242f8611e1ab6c686d4e772cfcfd3386" translate="yes" xml:space="preserve">
          <source>becameInvalid</source>
          <target state="translated">becameInvalid</target>
        </trans-unit>
        <trans-unit id="362dddce5a292acaecae5af82ba6aba212c3bf4b" translate="yes" xml:space="preserve">
          <source>beforeModel</source>
          <target state="translated">beforeModel</target>
        </trans-unit>
        <trans-unit id="a3816c80bef3ebdc128bef42cceb39d414edd182" translate="yes" xml:space="preserve">
          <source>beforeModel (transition) Any | Promise&amp;lt;any&amp;gt;public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="2999cce082431c9c9a9c2497e822cd60962731a1" translate="yes" xml:space="preserve">
          <source>beginIndex</source>
          <target state="translated">beginIndex</target>
        </trans-unit>
        <trans-unit id="8f12118835b98ef876342ee2b4cf9067f368cdfc" translate="yes" xml:space="preserve">
          <source>beginVoidpublic</source>
          <target state="translated">beginVoidpublic</target>
        </trans-unit>
        <trans-unit id="53e2f16efa626834856ed48ae854a1acca19d382" translate="yes" xml:space="preserve">
          <source>belongsTo</source>
          <target state="translated">belongsTo</target>
        </trans-unit>
        <trans-unit id="1baaf668007149f58209227fa734e8b3001baf03" translate="yes" xml:space="preserve">
          <source>belongsTo (modelName, options) Ember.computed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12cce69d90539a5fcada817a5530f8042e517a7" translate="yes" xml:space="preserve">
          <source>belongsTo (name) BelongsToReference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdd4db977b0f96aaf3bff2e4300153c648ca382" translate="yes" xml:space="preserve">
          <source>bind</source>
          <target state="translated">bind</target>
        </trans-unit>
        <trans-unit id="8387b44aeaafe2398567d7de0bd7ee19f6df9435" translate="yes" xml:space="preserve">
          <source>bind (obj, to, from) Ember.Bindingpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f173670a857abdc9d0d8cac63e1cd0b7d2e3c8ff" translate="yes" xml:space="preserve">
          <source>bind (target, method, args*) Functionpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9fb8d92972382b39b524ce7f8cdc6213d95500" translate="yes" xml:space="preserve">
          <source>binding</source>
          <target state="translated">binding</target>
        </trans-unit>
        <trans-unit id="118b2d1121611966abdb38a772f9ba74feab27ef" translate="yes" xml:space="preserve">
          <source>binding instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5039d155a71c0a5f7a2b2654ad49cb7ee47a8980" translate="yes" xml:space="preserve">
          <source>bool</source>
          <target state="translated">bool</target>
        </trans-unit>
        <trans-unit id="2e6f14ff0b4526e9f727a9299538588e00ec5eae" translate="yes" xml:space="preserve">
          <source>bool (dependentKey) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="8511a50f351d498a53fe29676955ec0ebc4d8546" translate="yes" xml:space="preserve">
          <source>buildURL</source>
          <target state="translated">buildURL</target>
        </trans-unit>
        <trans-unit id="96598646f08707f63249aa25b03a2778ac83a8cb" translate="yes" xml:space="preserve">
          <source>buildURL (modelName, id, snapshot, requestType, query) String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e5ce90f68be46cf422dcd4dc0f016eb6b271f8" translate="yes" xml:space="preserve">
          <source>cacheFor</source>
          <target state="translated">cacheFor</target>
        </trans-unit>
        <trans-unit id="d5c9b463aabe448804477940aee0f0de6d185256" translate="yes" xml:space="preserve">
          <source>cacheFor (keyName) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d03b5b031a1aed97323838dcdbbf9abe975d792" translate="yes" xml:space="preserve">
          <source>cacheFor (obj, key) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d5b37bf7a986c138ede89e0806f366b5cb1830" translate="yes" xml:space="preserve">
          <source>callback</source>
          <target state="translated">callback</target>
        </trans-unit>
        <trans-unit id="b2695563698f4c6d7387ed53f92437e756310661" translate="yes" xml:space="preserve">
          <source>camelize</source>
          <target state="translated">camelize</target>
        </trans-unit>
        <trans-unit id="3ae58e97a249d94b9652c3b2ad61832fa87af34e" translate="yes" xml:space="preserve">
          <source>camelize (str) Stringpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac48e5f6fd279a998e1f9e931e232a995abfeadb" translate="yes" xml:space="preserve">
          <source>canCatalogEntriesByType</source>
          <target state="translated">canCatalogEntriesByType</target>
        </trans-unit>
        <trans-unit id="1f89c10df11df39c71717979addebde404926d7f" translate="yes" xml:space="preserve">
          <source>canCatalogEntriesByType (type) Booleanpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd0653c4f2aef3b19a3c145bbdc5f4740715a09" translate="yes" xml:space="preserve">
          <source>cancel</source>
          <target state="translated">cancel</target>
        </trans-unit>
        <trans-unit id="c5874a8bee179aa7e7bffd97620ccae9dda53245" translate="yes" xml:space="preserve">
          <source>cancel (timer) Booleanpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d01a341706c2a5c67a30eb227bba3d0fd7ace906" translate="yes" xml:space="preserve">
          <source>capitalize</source>
          <target state="translated">capitalize</target>
        </trans-unit>
        <trans-unit id="c3cb50ed3989efe79fce037334b197ea5bb0b3c0" translate="yes" xml:space="preserve">
          <source>capitalize (str) Stringpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c79943b361485a67783fd582b75f962a64beec" translate="yes" xml:space="preserve">
          <source>catalogEntriesByType</source>
          <target state="translated">catalogEntriesByType</target>
        </trans-unit>
        <trans-unit id="426db3601e3ef7da74b0e8b103bbb3fdced68c07" translate="yes" xml:space="preserve">
          <source>catalogEntriesByType (type) Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebad64e5d2b9542779537fce0354f34c099e7ff" translate="yes" xml:space="preserve">
          <source>catch</source>
          <target state="translated">catch</target>
        </trans-unit>
        <trans-unit id="a4c2dcd142b36dcf11f40036021925135444c80a" translate="yes" xml:space="preserve">
          <source>catch (callback) RSVP.Promisepublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b4526315402989025cfb9532b1f1b612668d96" translate="yes" xml:space="preserve">
          <source>catch (onRejection, label) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7282a0ebbeec5ccc6d119a9cf8dbea2a264f0a8a" translate="yes" xml:space="preserve">
          <source>changedAttributes</source>
          <target state="translated">changedAttributes</target>
        </trans-unit>
        <trans-unit id="e99264b1e1e80d81bb2b815be9f74a773d382e57" translate="yes" xml:space="preserve">
          <source>changedAttributesObject</source>
          <target state="translated">changedAttributesObject</target>
        </trans-unit>
        <trans-unit id="d56fe29f05ee6f3bf8ea6f48b2fe37aeeac91abb" translate="yes" xml:space="preserve">
          <source>checkWaiters</source>
          <target state="translated">checkWaiters</target>
        </trans-unit>
        <trans-unit id="8f5d309823bda99d7fa656518e974a27e93e2ede" translate="yes" xml:space="preserve">
          <source>checkWaiterspublic</source>
          <target state="translated">checkWaiterspublic</target>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">class</target>
        </trans-unit>
        <trans-unit id="ab83591327f673ec5c958d0624ec91f14ce5ce55" translate="yes" xml:space="preserve">
          <source>classNameBindings</source>
          <target state="translated">classNameBindings</target>
        </trans-unit>
        <trans-unit id="a291acb5870eb60969685f94355f38e0b8c561da" translate="yes" xml:space="preserve">
          <source>classNameBindingspublic</source>
          <target state="translated">classNameBindingspublic</target>
        </trans-unit>
        <trans-unit id="959178bb27b91e04c55e8189938100590b3df47a" translate="yes" xml:space="preserve">
          <source>classNames</source>
          <target state="translated">classNames</target>
        </trans-unit>
        <trans-unit id="18104eb9c84f4cd33b05f14201eea48d710b6aa5" translate="yes" xml:space="preserve">
          <source>classNamespublic</source>
          <target state="translated">classNamespublic</target>
        </trans-unit>
        <trans-unit id="6144cd5e38eb39e0abdec68c3842d9cab9a289d6" translate="yes" xml:space="preserve">
          <source>classify</source>
          <target state="translated">classify</target>
        </trans-unit>
        <trans-unit id="3a2d6de82edfcd3a3ffa0e94a6fd9684892d35d7" translate="yes" xml:space="preserve">
          <source>classify (str) Stringpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="translated">clear</target>
        </trans-unit>
        <trans-unit id="6457067b09c3c63e34bd54d69c5093ceb1bcb80f" translate="yes" xml:space="preserve">
          <source>clearEmber.Arraypublic</source>
          <target state="translated">clearEmber.Arraypublic</target>
        </trans-unit>
        <trans-unit id="b93ec56608fb302fea7a8019d7c0e8e7239fc033" translate="yes" xml:space="preserve">
          <source>click</source>
          <target state="translated">click</target>
        </trans-unit>
        <trans-unit id="283029d5aa715391be8ed534dd32e74d1452fb0d" translate="yes" xml:space="preserve">
          <source>click (selector, context) RSVP.Promise&amp;lt;undefined&amp;gt;public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04a55ef391242bae77333cdc782842d1d78bc15" translate="yes" xml:space="preserve">
          <source>coalesceFindRequests</source>
          <target state="translated">coalesceFindRequests</target>
        </trans-unit>
        <trans-unit id="b3d0a8449e0722833f9377138f6a1188f143e76d" translate="yes" xml:space="preserve">
          <source>collect</source>
          <target state="translated">collect</target>
        </trans-unit>
        <trans-unit id="c8ddfea0ff1fa70fe6a075a2b1d638e5967dbfcd" translate="yes" xml:space="preserve">
          <source>collect (dependentKey) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f44e2cffa8f7b516c9e499285c951d788431a28" translate="yes" xml:space="preserve">
          <source>compact</source>
          <target state="translated">compact</target>
        </trans-unit>
        <trans-unit id="eb1de8e176a435635b8a6977790ccfdc210513aa" translate="yes" xml:space="preserve">
          <source>compactArraypublic</source>
          <target state="translated">compactArraypublic</target>
        </trans-unit>
        <trans-unit id="b64ca250f492e3f0444ad32b68be5f60a163bede" translate="yes" xml:space="preserve">
          <source>compare</source>
          <target state="translated">compare</target>
        </trans-unit>
        <trans-unit id="907497e8f4d50fb9261fdd7552ef6a6bbdb8345a" translate="yes" xml:space="preserve">
          <source>compare (v, w) Numberpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335c4c1e2f05b5297a56769d8de75ad9c4874cd3" translate="yes" xml:space="preserve">
          <source>component</source>
          <target state="translated">component</target>
        </trans-unit>
        <trans-unit id="9c41e8f7355be66f7d1593c16d9ada66c344f3ac" translate="yes" xml:space="preserve">
          <source>componentpublic</source>
          <target state="translated">componentpublic</target>
        </trans-unit>
        <trans-unit id="24989d8ee41c1575924630844ad094b55e6b1445" translate="yes" xml:space="preserve">
          <source>compute</source>
          <target state="translated">compute</target>
        </trans-unit>
        <trans-unit id="f858e06b2e1b75f5bfd684c81933a956bcc91ad6" translate="yes" xml:space="preserve">
          <source>compute (params, hash) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e42f42c574d2f46dd45b59c83826204bce7341" translate="yes" xml:space="preserve">
          <source>computed property which converts to boolean the original value for property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c9a1cb971781c311ef5b37294661f04e6e050f" translate="yes" xml:space="preserve">
          <source>computed property which creates a one way computed property to the original value for property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40143bdbfe9dcc8b3ec32fa1d11bfbcdd9786e1" translate="yes" xml:space="preserve">
          <source>computed property which creates an alias to the original value for property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86157947757d69cba70213445f34ab32fadaa455" translate="yes" xml:space="preserve">
          <source>computed property which creates an alias with a deprecation to the original value for property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808f6f2ecab089bf091125f82663355bbe169361" translate="yes" xml:space="preserve">
          <source>computed property which maps values of all passed in properties to an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3dc2fef83546c253d5c6ec6f60e357f1b6de78" translate="yes" xml:space="preserve">
          <source>computed property which match the original value for property against a given RegExp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7c63da9cbbc33366040de63ceba17d47f511ae" translate="yes" xml:space="preserve">
          <source>computed property which negate the original value for property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f6bcef30146325b4524e3f91445f2770cbec96" translate="yes" xml:space="preserve">
          <source>computed property which performs a logical `and` on the values of all the original values for properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a467c976f1f777334ceadb48e80bc12e14a1104d" translate="yes" xml:space="preserve">
          <source>computed property which performs a logical `or` on the values of all the original values for properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184bfdeecb2c62af67f0f9604302f4594d2c6604" translate="yes" xml:space="preserve">
          <source>computed property which returns inverse of the original value for property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1547efcb094f0887b3f56e55ef716ea723ad322f" translate="yes" xml:space="preserve">
          <source>computed property which returns true if original value for property is not empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622a1f7541d337087a6c8a8783d911eab1e57f6f" translate="yes" xml:space="preserve">
          <source>computed property which returns true if original value for property is null or undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8d64d4759366a84af6f430098a600896e13e77" translate="yes" xml:space="preserve">
          <source>computed property which returns true if the original value for property is equal to the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7511442afb774dd4a64f206f5271ac4355666877" translate="yes" xml:space="preserve">
          <source>computed property which returns true if the original value for property is greater or equal then given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445cdb6d347a7a4fb1bb2f49666b17e12f303ddd" translate="yes" xml:space="preserve">
          <source>computed property which returns true if the original value for property is greater than given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d193330a8250d4b0594033d685a3e85a6b77c8" translate="yes" xml:space="preserve">
          <source>computed property which returns true if the original value for property is less or equal than given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2bd8c80f26a74d5a0159dcd4f4e6eecfed93d62" translate="yes" xml:space="preserve">
          <source>computed property which returns true if the original value for property is less then given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9af1b7977e282f9c06def4b48a507bcc1f0ad39" translate="yes" xml:space="preserve">
          <source>computes a new array with all the duplicated elements from the dependent arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2ecb3350ee199ffd154030ca8ebaf2886b6357" translate="yes" xml:space="preserve">
          <source>computes a new array with all the items from the first dependent array that are not in the second dependent array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0948ea9333e01b845e359245daf14de379c1ffde" translate="yes" xml:space="preserve">
          <source>computes a new array with all the unique elements from the dependent array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627e277796c13c3c37222cb780b5f847a4fbac9b" translate="yes" xml:space="preserve">
          <source>computes a new sorted array based on the sort property array or callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813b13914207de7713ea6cb355a9a75c1364f8fa" translate="yes" xml:space="preserve">
          <source>computes the largest value in the dependentKey's array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6b049f7bab1cd6cdd3244b73b6970111915ae3" translate="yes" xml:space="preserve">
          <source>computes the smallest value in the dependentKey's array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41b73f276d1c28970cc4736ee15f66745885cc1" translate="yes" xml:space="preserve">
          <source>computes the sum of all values in the dependentKey's array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ba358c3272c2db40fc6ab2c103669678628b68" translate="yes" xml:space="preserve">
          <source>concat</source>
          <target state="translated">concat</target>
        </trans-unit>
        <trans-unit id="3afe7bd40df2594c67ac1b659c92bf60f9c300e4" translate="yes" xml:space="preserve">
          <source>concatenatedProperties</source>
          <target state="translated">concatenatedProperties</target>
        </trans-unit>
        <trans-unit id="d37f31e41a6b9ee5aff773c47cb0c59e4383606a" translate="yes" xml:space="preserve">
          <source>concatenatedPropertiespublic</source>
          <target state="translated">concatenatedPropertiespublic</target>
        </trans-unit>
        <trans-unit id="e7685b51d3e267bc87885d1dbe31ead01bb07fd6" translate="yes" xml:space="preserve">
          <source>concatpublic</source>
          <target state="translated">concatpublic</target>
        </trans-unit>
        <trans-unit id="2cc7fd40fbdedf3ea94e5b2ae8dc6e773156ce93" translate="yes" xml:space="preserve">
          <source>containerDebugAdapter</source>
          <target state="translated">containerDebugAdapter</target>
        </trans-unit>
        <trans-unit id="f1bed8bce4c7b7655af60424a1f8be96f3b2c304" translate="yes" xml:space="preserve">
          <source>containerDebugAdapterpublic</source>
          <target state="translated">containerDebugAdapterpublic</target>
        </trans-unit>
        <trans-unit id="ec2727b3b71f07635f726026bef44352ec89e452" translate="yes" xml:space="preserve">
          <source>context</source>
          <target state="translated">context</target>
        </trans-unit>
        <trans-unit id="f79a2222c311aaf3748e792896911891d1ff255b" translate="yes" xml:space="preserve">
          <source>controller</source>
          <target state="translated">controller</target>
        </trans-unit>
        <trans-unit id="553cbfe154c4721e6c8540c1b5727dcc35d8ca25" translate="yes" xml:space="preserve">
          <source>controller (name) Ember.InjectedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca08ede44a74b0ac77962ada2f6abaa086230cd" translate="yes" xml:space="preserve">
          <source>controllerFor</source>
          <target state="translated">controllerFor</target>
        </trans-unit>
        <trans-unit id="c2ee21623fcf49a5965b36f28afbaafa7b2c5528" translate="yes" xml:space="preserve">
          <source>controllerFor (name) Ember.Controllerpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef35403014c2bed4973249a9ffd4b33f88c82e6" translate="yes" xml:space="preserve">
          <source>controllerName</source>
          <target state="translated">controllerName</target>
        </trans-unit>
        <trans-unit id="737eb0084321d4b74002fa712cabfa79dd493a50" translate="yes" xml:space="preserve">
          <source>controllerNamepublic</source>
          <target state="translated">controllerNamepublic</target>
        </trans-unit>
        <trans-unit id="7e3a34f749911a38680349ee8464286f1314aed8" translate="yes" xml:space="preserve">
          <source>controllerpublic</source>
          <target state="translated">controllerpublic</target>
        </trans-unit>
        <trans-unit id="f84e2e2dadd87384fb55f25886926b777e8378f1" translate="yes" xml:space="preserve">
          <source>copy</source>
          <target state="translated">copy</target>
        </trans-unit>
        <trans-unit id="06904193b39a1e2d718391162185a10d50ae8062" translate="yes" xml:space="preserve">
          <source>copy (obj, deep) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="8745fab404613f0fe6a71e61e8911c53fdc2ea2d" translate="yes" xml:space="preserve">
          <source>count of objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7c68a918b17eb053809b198d7c9abfc142f30a" translate="yes" xml:space="preserve">
          <source>create</source>
          <target state="translated">create</target>
        </trans-unit>
        <trans-unit id="c2b941a6871ffd494a47b28de37e1f5c7d645fcb" translate="yes" xml:space="preserve">
          <source>create (arguments) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b206ba6f1a343224e901ebcc04cc17d5be2410ba" translate="yes" xml:space="preserve">
          <source>createRecord</source>
          <target state="translated">createRecord</target>
        </trans-unit>
        <trans-unit id="9c9c01af37c49912b9fc147f1e08761c953e4751" translate="yes" xml:space="preserve">
          <source>createRecord (modelName, inputProperties) DS.Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68848c552df4e350b078eab8a1bff415fcc7d16" translate="yes" xml:space="preserve">
          <source>createRecord (store, type, snapshot) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5ac6e9c2e1fd0c98625dd469f874d33a3178cd" translate="yes" xml:space="preserve">
          <source>currentPath</source>
          <target state="translated">currentPath</target>
        </trans-unit>
        <trans-unit id="5e8278808494160d52d5df6889134f639f18aa2e" translate="yes" xml:space="preserve">
          <source>currentPathObjectpublic</source>
          <target state="translated">currentPathObjectpublic</target>
        </trans-unit>
        <trans-unit id="f3d41d45c11e46d35bd61c0e8d512b66b8709e5d" translate="yes" xml:space="preserve">
          <source>currentRouteName</source>
          <target state="translated">currentRouteName</target>
        </trans-unit>
        <trans-unit id="c1607ab0a65d5d4e455dd0b7eca1484ba8d3ab59" translate="yes" xml:space="preserve">
          <source>currentRouteNameObjectpublic</source>
          <target state="translated">currentRouteNameObjectpublic</target>
        </trans-unit>
        <trans-unit id="4193249c10fe1de350364ca1bdd5b15c8da9675e" translate="yes" xml:space="preserve">
          <source>currentURL</source>
          <target state="translated">currentURL</target>
        </trans-unit>
        <trans-unit id="6204494bb8388e6818bc63a7f1b9ee3b2e93cac7" translate="yes" xml:space="preserve">
          <source>currentURLObjectpublic</source>
          <target state="translated">currentURLObjectpublic</target>
        </trans-unit>
        <trans-unit id="658756b0e6a02e17a05c52cda1ef53f113d23fd4" translate="yes" xml:space="preserve">
          <source>currentWhen</source>
          <target state="translated">currentWhen</target>
        </trans-unit>
        <trans-unit id="4f9bbafaa8e3165c0de1de863642af4bbeb18242" translate="yes" xml:space="preserve">
          <source>currentWhenpublic</source>
          <target state="translated">currentWhenpublic</target>
        </trans-unit>
        <trans-unit id="c3ee006c843ada928264ba3c290a2f1e1e4f18db" translate="yes" xml:space="preserve">
          <source>customEvents</source>
          <target state="translated">customEvents</target>
        </trans-unit>
        <trans-unit id="3ba4dd687c9c3402411999903a5373e746fd22d6" translate="yes" xml:space="preserve">
          <source>customEventspublic</source>
          <target state="translated">customEventspublic</target>
        </trans-unit>
        <trans-unit id="1d490eeed9e75872584ad01a482c58d9e5e55588" translate="yes" xml:space="preserve">
          <source>dasherize</source>
          <target state="translated">dasherize</target>
        </trans-unit>
        <trans-unit id="05b4ad38df03bf36f37cb5bbbe75c6aed8cf7f80" translate="yes" xml:space="preserve">
          <source>dasherize (str) Stringpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17c9aaa61e80a1bf71d0d850af4e5baa9800bbd" translate="yes" xml:space="preserve">
          <source>data</source>
          <target state="translated">data</target>
        </trans-unit>
        <trans-unit id="516c763184e0623347208f8a49d1570f6899eed0" translate="yes" xml:space="preserve">
          <source>dataForRequest</source>
          <target state="translated">dataForRequest</target>
        </trans-unit>
        <trans-unit id="44fda4fc994d261461cf648773d7e834935d1a61" translate="yes" xml:space="preserve">
          <source>dataForRequest (params) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="5d310091f52b45f4f934e07e2dcd85dc77eee56a" translate="yes" xml:space="preserve">
          <source>deactivate</source>
          <target state="translated">deactivate</target>
        </trans-unit>
        <trans-unit id="1798b3a44bb909a0ecf2d77f04751764efb56eef" translate="yes" xml:space="preserve">
          <source>deactivatepublic</source>
          <target state="translated">deactivatepublic</target>
        </trans-unit>
        <trans-unit id="e8bc042e894b57e385c141e975f8f8f605b63b87" translate="yes" xml:space="preserve">
          <source>debounce</source>
          <target state="translated">debounce</target>
        </trans-unit>
        <trans-unit id="e050e1f715538c84361cffcec6f4993d41ed6a76" translate="yes" xml:space="preserve">
          <source>debounce (target, method, args*, wait, immediate) Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32faaecac742100f7753f0c1d0aa0add01b4046b" translate="yes" xml:space="preserve">
          <source>debug</source>
          <target state="translated">debug</target>
        </trans-unit>
        <trans-unit id="0c50b6b78e9a7583780cc8c2661a7f20e47273f5" translate="yes" xml:space="preserve">
          <source>debug (message) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fbd02245cf700ea94d638c8d76924ecca52d330" translate="yes" xml:space="preserve">
          <source>debugger</source>
          <target state="translated">debugger</target>
        </trans-unit>
        <trans-unit id="73d3172a526fe68aaca218260f3ae7f46402ed1c" translate="yes" xml:space="preserve">
          <source>debuggerpublic</source>
          <target state="translated">debuggerpublic</target>
        </trans-unit>
        <trans-unit id="da3dcfccf0d1019ebc1f076c4fca898413d24390" translate="yes" xml:space="preserve">
          <source>decamelize</source>
          <target state="translated">decamelize</target>
        </trans-unit>
        <trans-unit id="e896185adb3936208437a43c41495c0d7c931e6a" translate="yes" xml:space="preserve">
          <source>decamelize (str) Stringpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8747153bde6524fb1a852e80cdd561013db583" translate="yes" xml:space="preserve">
          <source>decrement</source>
          <target state="translated">decrement</target>
        </trans-unit>
        <trans-unit id="ae6885061e34119caf142a7293f830f4d6f07052" translate="yes" xml:space="preserve">
          <source>decrementProperty</source>
          <target state="translated">decrementProperty</target>
        </trans-unit>
        <trans-unit id="1abec767ece1dca890d6578f4ad04350df2dbf33" translate="yes" xml:space="preserve">
          <source>decrementProperty (keyName, decrement) Numberpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dde59ff3d79fc2322f4192f74c1d1af30d32cc6" translate="yes" xml:space="preserve">
          <source>deep</source>
          <target state="translated">deep</target>
        </trans-unit>
        <trans-unit id="710393cec09784fd9c2c06727325b1a24f63d115" translate="yes" xml:space="preserve">
          <source>defaultSerializer</source>
          <target state="translated">defaultSerializer</target>
        </trans-unit>
        <trans-unit id="e940d2a8aa21109d83a8b3dad4cee386dabe8439" translate="yes" xml:space="preserve">
          <source>defaultValue</source>
          <target state="translated">defaultValue</target>
        </trans-unit>
        <trans-unit id="d2cc99410cb345cd3bd028ee0fa777efb912e110" translate="yes" xml:space="preserve">
          <source>defer</source>
          <target state="translated">defer</target>
        </trans-unit>
        <trans-unit id="a0cc953694105d5dce8ed5df98780cf146a629af" translate="yes" xml:space="preserve">
          <source>defer (label) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31518f82e77b953a32bb0794617668f6fad6f02" translate="yes" xml:space="preserve">
          <source>deferReadiness</source>
          <target state="translated">deferReadiness</target>
        </trans-unit>
        <trans-unit id="30b8b8b93f2a8ce433f693517c3775c918af0752" translate="yes" xml:space="preserve">
          <source>deferReadinesspublic</source>
          <target state="translated">deferReadinesspublic</target>
        </trans-unit>
        <trans-unit id="e60992e0658fb3c1053013a20c3ec78a16d1604d" translate="yes" xml:space="preserve">
          <source>deleteRecord</source>
          <target state="translated">deleteRecord</target>
        </trans-unit>
        <trans-unit id="18734c2a9e915c142e22e9346a0c0a66621ea6a7" translate="yes" xml:space="preserve">
          <source>deleteRecord (record)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5ffbbdb56735b0bb28be8e18b67a3ef479cfb1" translate="yes" xml:space="preserve">
          <source>deleteRecord (store, type, snapshot) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdea81c9d6ea6445a7e7ea69725498cefac38d9" translate="yes" xml:space="preserve">
          <source>denodeify</source>
          <target state="translated">denodeify</target>
        </trans-unit>
        <trans-unit id="609e39ca5965c51423044a32469afb9747f4a812" translate="yes" xml:space="preserve">
          <source>denodeify (nodeFunc, options) Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54062d23bdba7fa791569a48205cabce34fef4f9" translate="yes" xml:space="preserve">
          <source>dependentKey</source>
          <target state="translated">dependentKey</target>
        </trans-unit>
        <trans-unit id="47f0ecc843e5559f7321b3df13bc633168e55f75" translate="yes" xml:space="preserve">
          <source>deprecate</source>
          <target state="translated">deprecate</target>
        </trans-unit>
        <trans-unit id="9b00c0c3e51234ad7f0d6ee891587dd33f3656be" translate="yes" xml:space="preserve">
          <source>deprecate (message, test, options) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc0ddddb17889253899059753a82db40f265d1a" translate="yes" xml:space="preserve">
          <source>deprecatingAlias</source>
          <target state="translated">deprecatingAlias</target>
        </trans-unit>
        <trans-unit id="24e3b67f57318f8c7b2664a0791e6249e76527fe" translate="yes" xml:space="preserve">
          <source>deprecatingAlias (dependentKey, options) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb80331306dc3bc1cd0f2369ad72d699fe1e995" translate="yes" xml:space="preserve">
          <source>desc</source>
          <target state="translated">desc</target>
        </trans-unit>
        <trans-unit id="59df4159d803b745d2984211a74ab01de3391cae" translate="yes" xml:space="preserve">
          <source>deserialize</source>
          <target state="translated">deserialize</target>
        </trans-unit>
        <trans-unit id="86b85f07129120f5fb113b9f38a919b8f80c4252" translate="yes" xml:space="preserve">
          <source>deserialize (serialized, options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8becb439c1cde93e6dc5f0c165a8837402cc1c3e" translate="yes" xml:space="preserve">
          <source>deserialized</source>
          <target state="translated">deserialized</target>
        </trans-unit>
        <trans-unit id="6870010883a79e8b2a508909dc21a05cc8ff73b8" translate="yes" xml:space="preserve">
          <source>destroy</source>
          <target state="translated">destroy</target>
        </trans-unit>
        <trans-unit id="27bb8ed0963154982a874e42c9fd1fbf4cc928d1" translate="yes" xml:space="preserve">
          <source>destroyEmber.Objectpublic</source>
          <target state="translated">destroyEmber.Objectpublic</target>
        </trans-unit>
        <trans-unit id="8f8eb364f1f67d4f40c65cc2ea82031e11f5e211" translate="yes" xml:space="preserve">
          <source>destroyRecord</source>
          <target state="translated">destroyRecord</target>
        </trans-unit>
        <trans-unit id="4d51a3fa4570d081182f70ff23fdfbf9a57d2365" translate="yes" xml:space="preserve">
          <source>destroyRecord (options) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89b48a964ac86eb7f00523d8740a21b84e1ce58" translate="yes" xml:space="preserve">
          <source>detect() (optional): instructs the location to do any feature detection necessary. If the location needs to redirect to a different URL, it can cancel routing by setting the &lt;code&gt;cancelRouterSetup&lt;/code&gt; property on itself to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d67adbd15339002faa1ef770de08071772ccd1e" translate="yes" xml:space="preserve">
          <source>didCreate</source>
          <target state="translated">didCreate</target>
        </trans-unit>
        <trans-unit id="5cefa9d6c1e080bd33c36392d0c02b01a89a9200" translate="yes" xml:space="preserve">
          <source>didDefineProperty</source>
          <target state="translated">didDefineProperty</target>
        </trans-unit>
        <trans-unit id="08e210300f797f3fc5fa2b7f07305293d84116c2" translate="yes" xml:space="preserve">
          <source>didDefineProperty (proto, key, value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ead3d0febb622666d7eea4a34de4d432e80f3c7" translate="yes" xml:space="preserve">
          <source>didDelete</source>
          <target state="translated">didDelete</target>
        </trans-unit>
        <trans-unit id="8bc90c132a6cea29d365171bf87f8026abefe92a" translate="yes" xml:space="preserve">
          <source>didInsertElement</source>
          <target state="translated">didInsertElement</target>
        </trans-unit>
        <trans-unit id="72ff615640caf7683d17b2742a1f44be62c84bf2" translate="yes" xml:space="preserve">
          <source>didInsertElementpublic</source>
          <target state="translated">didInsertElementpublic</target>
        </trans-unit>
        <trans-unit id="82d53125af1e8e2b52623078b4ded8438fa790de" translate="yes" xml:space="preserve">
          <source>didLoad</source>
          <target state="translated">didLoad</target>
        </trans-unit>
        <trans-unit id="993e6b2eeece269f26ac9db0012e050e6ccd0df2" translate="yes" xml:space="preserve">
          <source>didReceiveAttrs</source>
          <target state="translated">didReceiveAttrs</target>
        </trans-unit>
        <trans-unit id="f400fde5d71de4a3d3696677113aa8e1b0e75fd2" translate="yes" xml:space="preserve">
          <source>didReceiveAttrspublic</source>
          <target state="translated">didReceiveAttrspublic</target>
        </trans-unit>
        <trans-unit id="d023dbe15dedd5ef05645ff53dd2c2a6aa3ac1e2" translate="yes" xml:space="preserve">
          <source>didRender</source>
          <target state="translated">didRender</target>
        </trans-unit>
        <trans-unit id="c0378ab10ab2ac8f973a1b1a7d7bbc4e8df4da34" translate="yes" xml:space="preserve">
          <source>didRenderpublic</source>
          <target state="translated">didRenderpublic</target>
        </trans-unit>
        <trans-unit id="cbd6beabc84ca3b55c42a7fe0f77a2d46500831b" translate="yes" xml:space="preserve">
          <source>didTransition</source>
          <target state="translated">didTransition</target>
        </trans-unit>
        <trans-unit id="f3ddcebf59a74e25efaf2a2d549553ae23025e54" translate="yes" xml:space="preserve">
          <source>didTransitionpublic</source>
          <target state="translated">didTransitionpublic</target>
        </trans-unit>
        <trans-unit id="353cf90400f7b0308844eb3e2408110444c4aeb2" translate="yes" xml:space="preserve">
          <source>didUpdate</source>
          <target state="translated">didUpdate</target>
        </trans-unit>
        <trans-unit id="1f2dd18744d3ab7e2e370912baa9529c5586fb21" translate="yes" xml:space="preserve">
          <source>didUpdateAttrs</source>
          <target state="translated">didUpdateAttrs</target>
        </trans-unit>
        <trans-unit id="0475560d8721cf123b67f2a0cb6bf1255f9747ee" translate="yes" xml:space="preserve">
          <source>didUpdateAttrspublic</source>
          <target state="translated">didUpdateAttrspublic</target>
        </trans-unit>
        <trans-unit id="9f720163b8fefc1e525e4102cfbd935cc9dc0dd3" translate="yes" xml:space="preserve">
          <source>didUpdatepublic</source>
          <target state="translated">didUpdatepublic</target>
        </trans-unit>
        <trans-unit id="2a9fb03e27a9036bb02ef45c7dacb5deeefab08f" translate="yes" xml:space="preserve">
          <source>diff-array</source>
          <target state="translated">diff-array</target>
        </trans-unit>
        <trans-unit id="ca2fd02a7a4450374f16135797ad05f029f8bfd0" translate="yes" xml:space="preserve">
          <source>diff-array (oldArray, newArray) Hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d726a45993ec4016e43530cd684eb26f7acc754" translate="yes" xml:space="preserve">
          <source>dirtyType</source>
          <target state="translated">dirtyType</target>
        </trans-unit>
        <trans-unit id="3a44fe897f2154fe8c72d8bd9cbac7cc3e55e7bc" translate="yes" xml:space="preserve">
          <source>disableCache;</source>
          <target state="translated">disableCache;</target>
        </trans-unit>
        <trans-unit id="60e292faa5feb6b6f0f4e9df8d305b48f5c105c2" translate="yes" xml:space="preserve">
          <source>disableCache;public</source>
          <target state="translated">disableCache;public</target>
        </trans-unit>
        <trans-unit id="5ee17cf12acbfbd14053019b583c78c4a8877356" translate="yes" xml:space="preserve">
          <source>disconnectOutlet</source>
          <target state="translated">disconnectOutlet</target>
        </trans-unit>
        <trans-unit id="4f3b4b067356bb43aa23dfbcb2ed1089fb54dd81" translate="yes" xml:space="preserve">
          <source>disconnectOutlet (options) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8278c89ad16da05fec4fdfc61fe44798b92720" translate="yes" xml:space="preserve">
          <source>document</source>
          <target state="translated">document</target>
        </trans-unit>
        <trans-unit id="8b3f757576c4be4f7e40e345313d56e65e2bd50b" translate="yes" xml:space="preserve">
          <source>documentpublic</source>
          <target state="translated">documentpublic</target>
        </trans-unit>
        <trans-unit id="a8fdc5b2e95124be81f0bf994e3f6f779c858dd7" translate="yes" xml:space="preserve">
          <source>does the object have a subscription for event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca670177c64bf6e520e40c71c8b2a0357c8c441f" translate="yes" xml:space="preserve">
          <source>dynamic use: the &lt;code&gt;disabledWhen&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32f279e548b6fceef4343170778273bfe60658c" translate="yes" xml:space="preserve">
          <source>each</source>
          <target state="translated">each</target>
        </trans-unit>
        <trans-unit id="c0664f95022612375f0dfdfe9edf692ce27699e5" translate="yes" xml:space="preserve">
          <source>each-in</source>
          <target state="translated">each-in</target>
        </trans-unit>
        <trans-unit id="50063d09221f3e392466bb415478b9188f0636a2" translate="yes" xml:space="preserve">
          <source>each-inpublic</source>
          <target state="translated">each-inpublic</target>
        </trans-unit>
        <trans-unit id="0a15b5639a48f04a317eae91071f75b5991d2454" translate="yes" xml:space="preserve">
          <source>eachAttribute</source>
          <target state="translated">eachAttribute</target>
        </trans-unit>
        <trans-unit id="ca000fd982a353b03c23a99773a91797796335bc" translate="yes" xml:space="preserve">
          <source>eachAttribute (callback, binding)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6140244c48afc5df810b99070fdad1315f7cd74" translate="yes" xml:space="preserve">
          <source>eachRelatedType</source>
          <target state="translated">eachRelatedType</target>
        </trans-unit>
        <trans-unit id="9a6e63318b286de4679140acbb6876c496935eda" translate="yes" xml:space="preserve">
          <source>eachRelatedType (callback, binding)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e9d111246c52651e4ac1be0574b0fd8356051ff" translate="yes" xml:space="preserve">
          <source>eachRelationship</source>
          <target state="translated">eachRelationship</target>
        </trans-unit>
        <trans-unit id="413fd0d91b510f015d786158cb7b3ae310e8900e" translate="yes" xml:space="preserve">
          <source>eachRelationship (callback, binding)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583bcd90b0238ad3ef294de780b696784b0a4f5d" translate="yes" xml:space="preserve">
          <source>eachTransformedAttribute</source>
          <target state="translated">eachTransformedAttribute</target>
        </trans-unit>
        <trans-unit id="5d75481045cc1c8960fd8a27ae8d3f2a2b68a1ae" translate="yes" xml:space="preserve">
          <source>eachTransformedAttribute (callback, binding)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204789584b9aa8a3f6823836e022d091f36cf40b" translate="yes" xml:space="preserve">
          <source>eachpublic</source>
          <target state="translated">eachpublic</target>
        </trans-unit>
        <trans-unit id="dece05484839df110745b0a800297c33cc078287" translate="yes" xml:space="preserve">
          <source>element</source>
          <target state="translated">element</target>
        </trans-unit>
        <trans-unit id="5b542005f60b358357eedea1ed9e5d18060c7f99" translate="yes" xml:space="preserve">
          <source>elementId</source>
          <target state="translated">elementId</target>
        </trans-unit>
        <trans-unit id="1b35ff1ce84709891cf95b7b0ffcbd7e99347ae4" translate="yes" xml:space="preserve">
          <source>elementIdpublic</source>
          <target state="translated">elementIdpublic</target>
        </trans-unit>
        <trans-unit id="9d7cf50e277323cfd2d8e23b163ab34894c537dc" translate="yes" xml:space="preserve">
          <source>elementpublic</source>
          <target state="translated">elementpublic</target>
        </trans-unit>
        <trans-unit id="fab0f0d427685749f28164542a6f786818be98dd" translate="yes" xml:space="preserve">
          <source>embeddedSnapshot</source>
          <target state="translated">embeddedSnapshot</target>
        </trans-unit>
        <trans-unit id="64a8bf8874e185841e6a8c7705d411716f94e5e4" translate="yes" xml:space="preserve">
          <source>ember</source>
          <target state="translated">ember</target>
        </trans-unit>
        <trans-unit id="9d1a425c2146410f0a7551698d94d31f6a388305" translate="yes" xml:space="preserve">
          <source>ember-application</source>
          <target state="translated">ember-application</target>
        </trans-unit>
        <trans-unit id="92f8f3e62dd4b92785b055acfae6cbea6e54dba5" translate="yes" xml:space="preserve">
          <source>ember-cli-mirage</source>
          <target state="translated">ember-cli-mirage</target>
        </trans-unit>
        <trans-unit id="cde41e396fff46f0d4fa66785a63d71a44f6dc4d" translate="yes" xml:space="preserve">
          <source>ember-cli-tutorial-style</source>
          <target state="translated">ember-cli-tutorial-style</target>
        </trans-unit>
        <trans-unit id="c09f6553d78de9c21bb46157a6a32124eed6a9be" translate="yes" xml:space="preserve">
          <source>ember-data</source>
          <target state="translated">ember-data</target>
        </trans-unit>
        <trans-unit id="4792fdcdb89b8011f7bf69809f41c1d96b8b021f" translate="yes" xml:space="preserve">
          <source>ember-debug</source>
          <target state="translated">ember-debug</target>
        </trans-unit>
        <trans-unit id="65a2dbc64c95501f82340ae491a925c19d8440ec" translate="yes" xml:space="preserve">
          <source>ember-extension-support</source>
          <target state="translated">ember-extension-support</target>
        </trans-unit>
        <trans-unit id="22dceef11c1f73fd57d4447b1a4c44f0606be9aa" translate="yes" xml:space="preserve">
          <source>ember-glimmer</source>
          <target state="translated">ember-glimmer</target>
        </trans-unit>
        <trans-unit id="d4235f396cb02456f472a727a185575f15bee20e" translate="yes" xml:space="preserve">
          <source>ember-glimmer  (public)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1f6ae22c5fb8e4e4adaf436df906c9c6d06626" translate="yes" xml:space="preserve">
          <source>ember-metal</source>
          <target state="translated">ember-metal</target>
        </trans-unit>
        <trans-unit id="edc6254d010f9d0cc39246d73817f7099eb45e36" translate="yes" xml:space="preserve">
          <source>ember-routing</source>
          <target state="translated">ember-routing</target>
        </trans-unit>
        <trans-unit id="43b3f1b3ac9d472b336a337dbf0a14dfc3986158" translate="yes" xml:space="preserve">
          <source>ember-runtime</source>
          <target state="translated">ember-runtime</target>
        </trans-unit>
        <trans-unit id="e4bf64607a1a7df1fd37cb08c18e846d9f795a9a" translate="yes" xml:space="preserve">
          <source>ember-testing</source>
          <target state="translated">ember-testing</target>
        </trans-unit>
        <trans-unit id="96e0715c8b0de75a84ca51322d87276c9c728cab" translate="yes" xml:space="preserve">
          <source>ember-views</source>
          <target state="translated">ember-views</target>
        </trans-unit>
        <trans-unit id="918b5b3c5daec1fd2d418554816b76dd3cbe0d64" translate="yes" xml:space="preserve">
          <source>emberjs.com - A word on promises</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad87109bfff0765f4dd8cf4943b04d16a4070fea" translate="yes" xml:space="preserve">
          <source>empty</source>
          <target state="translated">empty</target>
        </trans-unit>
        <trans-unit id="aed214405127a03559d1065773f1bf1497e8a804" translate="yes" xml:space="preserve">
          <source>empty (dependentKey) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f521e3e876e2935ea831178480bf98b83cbd5f" translate="yes" xml:space="preserve">
          <source>enableCache</source>
          <target state="translated">enableCache</target>
        </trans-unit>
        <trans-unit id="6c5cd7b3ceddece50d6aa1236c0a57042b37bf66" translate="yes" xml:space="preserve">
          <source>enableCachepublic</source>
          <target state="translated">enableCachepublic</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="29809fbaf5e4fec88f4127f291473b14b195b3c7" translate="yes" xml:space="preserve">
          <source>endIndex</source>
          <target state="translated">endIndex</target>
        </trans-unit>
        <trans-unit id="2627093561aa589ad8b3cec4f646042a70951b3c" translate="yes" xml:space="preserve">
          <source>endVoidpublic</source>
          <target state="translated">endVoidpublic</target>
        </trans-unit>
        <trans-unit id="c64033672f5ca984dfe962909671961e8012f0c5" translate="yes" xml:space="preserve">
          <source>engine</source>
          <target state="translated">engine</target>
        </trans-unit>
        <trans-unit id="c2e311d61416075c5a2e3d05132186c2ce1b7e12" translate="yes" xml:space="preserve">
          <source>entries</source>
          <target state="translated">entries</target>
        </trans-unit>
        <trans-unit id="f57b2d312d9efe8fe993c8eb1f3e19d41ad04030" translate="yes" xml:space="preserve">
          <source>equal</source>
          <target state="translated">equal</target>
        </trans-unit>
        <trans-unit id="ea9e727ac19f84c3507ad89c34dfa9b8cc149038" translate="yes" xml:space="preserve">
          <source>equal (dependentKey, value) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f9578d05e6f7bb58a3cdd00107e9f4e3882671" translate="yes" xml:space="preserve">
          <source>error</source>
          <target state="translated">error</target>
        </trans-unit>
        <trans-unit id="3f05d9313942884ab7f1b0aebac1908366d80777" translate="yes" xml:space="preserve">
          <source>error (error, transition) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570043596e41f9067d43fbff99f1acb348a090bf" translate="yes" xml:space="preserve">
          <source>errors</source>
          <target state="translated">errors</target>
        </trans-unit>
        <trans-unit id="49b12f817783a1b3c7a5101409244e4373e3be8b" translate="yes" xml:space="preserve">
          <source>errorsArrayToHash</source>
          <target state="translated">errorsArrayToHash</target>
        </trans-unit>
        <trans-unit id="21e7dfab6b7d92bbd7945c8dc8d28f4cf403a444" translate="yes" xml:space="preserve">
          <source>errorsArrayToHash (errors) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d5181f5fdcfcd77aa71b53e9135a853d24f69d7" translate="yes" xml:space="preserve">
          <source>errorsFor</source>
          <target state="translated">errorsFor</target>
        </trans-unit>
        <trans-unit id="2b2750be40776ecd482b0a19719722ee9bb84072" translate="yes" xml:space="preserve">
          <source>errorsFor (attribute) Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916d3b05708ea3e071b65543440a55b045c9ef02" translate="yes" xml:space="preserve">
          <source>errorsHashToArray</source>
          <target state="translated">errorsHashToArray</target>
        </trans-unit>
        <trans-unit id="3f9ced94786c5e091559c9522c412afce900316b" translate="yes" xml:space="preserve">
          <source>errorsHashToArray (errors) Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd91db1f81249ac0f5e97d04cef461f92c63830a" translate="yes" xml:space="preserve">
          <source>eventDispatcher</source>
          <target state="translated">eventDispatcher</target>
        </trans-unit>
        <trans-unit id="95715ad41dd81a83044d9cdc2f543ad807a65489" translate="yes" xml:space="preserve">
          <source>eventDispatcherpublic</source>
          <target state="translated">eventDispatcherpublic</target>
        </trans-unit>
        <trans-unit id="3841a78ae59725028ae44bb042a13ebb8a621270" translate="yes" xml:space="preserve">
          <source>eventName</source>
          <target state="translated">eventName</target>
        </trans-unit>
        <trans-unit id="482e4cc78cb65e7409454fdd4e64f2d16e90f43e" translate="yes" xml:space="preserve">
          <source>eventNames</source>
          <target state="translated">eventNames</target>
        </trans-unit>
        <trans-unit id="5873f666d03fb3fb39d0db9c71b5e1f769334088" translate="yes" xml:space="preserve">
          <source>every</source>
          <target state="translated">every</target>
        </trans-unit>
        <trans-unit id="2ccbbc70fbabbbe300477ca99786a65ecdf53d17" translate="yes" xml:space="preserve">
          <source>every (callback, target) Booleanpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d42ad1769f229c76031f30a404b4f7863d68de0" translate="yes" xml:space="preserve">
          <source>exception</source>
          <target state="translated">exception</target>
        </trans-unit>
        <trans-unit id="7799959019f5e61a328705c6a23bbd4e80536657" translate="yes" xml:space="preserve">
          <source>exception (error) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3217fe0e686c575041c1da884f3dcf5282c50c" translate="yes" xml:space="preserve">
          <source>explicitly pass in the default value for that query param into &lt;code&gt;link-to&lt;/code&gt; or &lt;code&gt;transitionTo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de93ba2d15f3dbf65f76e6fd21e1e4b002459dd8" translate="yes" xml:space="preserve">
          <source>extend</source>
          <target state="translated">extend</target>
        </trans-unit>
        <trans-unit id="61c20bac096f38522a33af4fe5da42e842856304" translate="yes" xml:space="preserve">
          <source>extend (mixins, arguments) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c661eea904ca1ca812cf1f1b7c5020ea3103174" translate="yes" xml:space="preserve">
          <source>extractAttributes</source>
          <target state="translated">extractAttributes</target>
        </trans-unit>
        <trans-unit id="1180170207e18d4ca3de49849ce4e953e806fc1c" translate="yes" xml:space="preserve">
          <source>extractAttributes (modelClass, resourceHash) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1397f7edff6070b81fe72f98ef3f2df3ace1941" translate="yes" xml:space="preserve">
          <source>extractErrors</source>
          <target state="translated">extractErrors</target>
        </trans-unit>
        <trans-unit id="02356815308b0e247dd04b8e83b05430b591ab9b" translate="yes" xml:space="preserve">
          <source>extractErrors (store, typeClass, payload, id) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140797d53d8a71ec975e2e8e3bb5a1942c55f7b5" translate="yes" xml:space="preserve">
          <source>extractId</source>
          <target state="translated">extractId</target>
        </trans-unit>
        <trans-unit id="64ec2b3c92c55f090538de8a96815ac2c21d0bb6" translate="yes" xml:space="preserve">
          <source>extractId (modelClass, resourceHash) String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c42962c23fc043a6ddd30f1586643268bc550b1" translate="yes" xml:space="preserve">
          <source>extractMeta</source>
          <target state="translated">extractMeta</target>
        </trans-unit>
        <trans-unit id="515c7806c5eff2f505d3d8b9f734597d402e3af1" translate="yes" xml:space="preserve">
          <source>extractMeta (store, modelClass, payload)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88978cc3d634cdbeb88a6cbd0c973433b453007" translate="yes" xml:space="preserve">
          <source>extractPolymorphicRelationship</source>
          <target state="translated">extractPolymorphicRelationship</target>
        </trans-unit>
        <trans-unit id="380ddda6b8e01067c4eb4da51ae974bce23eda42" translate="yes" xml:space="preserve">
          <source>extractPolymorphicRelationship (relationshipModelName, relationshipHash, relationshipOptions) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c25caa051db5987f15c7208fdc8a808c5496cc0" translate="yes" xml:space="preserve">
          <source>extractPolymorphicRelationship (relationshipType, relationshipHash, relationshipOptions) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c732b1ebda37060a2e017eb38ca361fdf7c32e1" translate="yes" xml:space="preserve">
          <source>extractRelationship</source>
          <target state="translated">extractRelationship</target>
        </trans-unit>
        <trans-unit id="74baae6a12cffb379bb18321206b167d95dce882" translate="yes" xml:space="preserve">
          <source>extractRelationship (relationshipModelName, relationshipHash) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f300d5b75b2a82e430344a949f9054b41a8ac4d7" translate="yes" xml:space="preserve">
          <source>extractRelationships</source>
          <target state="translated">extractRelationships</target>
        </trans-unit>
        <trans-unit id="3dca85fab17ee70ae862d29a4177e2e7787f2351" translate="yes" xml:space="preserve">
          <source>extractRelationships (modelClass, resourceHash) Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b202d57f214af016fe2923be40110740dd5bb91" translate="yes" xml:space="preserve">
          <source>factory</source>
          <target state="translated">factory</target>
        </trans-unit>
        <trans-unit id="3b0860ed987bdc5c4e87e9301a26af69a2782d45" translate="yes" xml:space="preserve">
          <source>factoryNameOrType</source>
          <target state="translated">factoryNameOrType</target>
        </trans-unit>
        <trans-unit id="4b7615dce52c4c05ce4e1d374e9c61a13717ac7c" translate="yes" xml:space="preserve">
          <source>feature</source>
          <target state="translated">feature</target>
        </trans-unit>
        <trans-unit id="70f132fe13e692866a539996a6b9a05b46076a07" translate="yes" xml:space="preserve">
          <source>fields</source>
          <target state="translated">fields</target>
        </trans-unit>
        <trans-unit id="e673e7b60ef044b68b7dd6baf7b7f3382e5a1fd7" translate="yes" xml:space="preserve">
          <source>fillIn</source>
          <target state="translated">fillIn</target>
        </trans-unit>
        <trans-unit id="009518ea45019d39a175f6ae8e4ced0410c91b1b" translate="yes" xml:space="preserve">
          <source>fillIn (selector, text) RSVP.Promise&amp;lt;undefined&amp;gt;public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="238ccb5ea01f9e87fc8c63c294fd1fa437dc2bef" translate="yes" xml:space="preserve">
          <source>filter (callback, target) Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="755f7db97029f6aa67a43889cdef50391542858d" translate="yes" xml:space="preserve">
          <source>filter (dependentKey, callback) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac377632e1c77ab7996ca1ff03a426079c99f1b" translate="yes" xml:space="preserve">
          <source>filter (promises, filterFn, label) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ef99cce85a351d940ddf957e175885fe022ad8" translate="yes" xml:space="preserve">
          <source>filterBy</source>
          <target state="translated">filterBy</target>
        </trans-unit>
        <trans-unit id="e2e89f192839029536d690b364e809c971b8af8c" translate="yes" xml:space="preserve">
          <source>filterBy (dependentKey, propertyKey, value) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcc2e536b2fd89f105d5391b473bdc211b9ced3" translate="yes" xml:space="preserve">
          <source>filterBy (key, value) Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a73b41a3e25b1fe4ae7f66722179d67dcfb66d7" translate="yes" xml:space="preserve">
          <source>filterFn</source>
          <target state="translated">filterFn</target>
        </trans-unit>
        <trans-unit id="91856ce16029821cd1177d73cecca76ed7990eb0" translate="yes" xml:space="preserve">
          <source>filterFunction</source>
          <target state="translated">filterFunction</target>
        </trans-unit>
        <trans-unit id="ba8f09ee015309ea40b5e5cbdbdd112fdc04de6c" translate="yes" xml:space="preserve">
          <source>filterFunction (record) Boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ec14ce80beb4ccb41957636fec287ccd2b0f67" translate="yes" xml:space="preserve">
          <source>filtered array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4e3e3c24bac71b4ffdf2bc0f73246d601766d4" translate="yes" xml:space="preserve">
          <source>finally</source>
          <target state="translated">finally</target>
        </trans-unit>
        <trans-unit id="f3cb42c101a663f9bf8a03e48151cbf151c0bfee" translate="yes" xml:space="preserve">
          <source>finally (callback) RSVP.Promisepublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716efe736e83d59740fc1ab5e38112b844706926" translate="yes" xml:space="preserve">
          <source>finally (callback, label) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded8dae5786fb0e9e6ffb657401fd861ba2efe11" translate="yes" xml:space="preserve">
          <source>find</source>
          <target state="translated">find</target>
        </trans-unit>
        <trans-unit id="31cfa4996d7dfff46a25bb64acee79950cd9df50" translate="yes" xml:space="preserve">
          <source>find (callback, target) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882f201bb8df8cef4a6961f8cd4e84e1e5e635e5" translate="yes" xml:space="preserve">
          <source>find (selector, context) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1715ca7046e2073fe1965723679d9e6d224111a" translate="yes" xml:space="preserve">
          <source>findAll</source>
          <target state="translated">findAll</target>
        </trans-unit>
        <trans-unit id="912608b8ead4fd2491b4a3a383cb508e12e6d84f" translate="yes" xml:space="preserve">
          <source>findAll (modelName, options) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b04ddab11ac164428249893b4da585788d12318" translate="yes" xml:space="preserve">
          <source>findAll (store, type, sinceToken, snapshotRecordArray) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38dcb9ceb1bf0fccbc2301856b7503ef07955a4" translate="yes" xml:space="preserve">
          <source>findBelongsTo</source>
          <target state="translated">findBelongsTo</target>
        </trans-unit>
        <trans-unit id="b66b2c42b7f917192ea712fa791f963e73ca2b63" translate="yes" xml:space="preserve">
          <source>findBelongsTo (store, snapshot, url) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f37675ac655a64494202d41142b4056e8478351" translate="yes" xml:space="preserve">
          <source>findBy</source>
          <target state="translated">findBy</target>
        </trans-unit>
        <trans-unit id="577c8d4ee8dbed1d9a2a493843426df81b4d3e5b" translate="yes" xml:space="preserve">
          <source>findBy (key, value) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3f83d94c26b8616cf47fc6ed8acbefd56bbdab" translate="yes" xml:space="preserve">
          <source>findHasMany</source>
          <target state="translated">findHasMany</target>
        </trans-unit>
        <trans-unit id="0b3e2f57625530481a849119b5056aa7c5bfb453" translate="yes" xml:space="preserve">
          <source>findHasMany (store, snapshot, url, relationship) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bd286e292b9676e1818c2192a1f6d5a2f8b451" translate="yes" xml:space="preserve">
          <source>findMany</source>
          <target state="translated">findMany</target>
        </trans-unit>
        <trans-unit id="a8c0e59d72f49420fc0f477ae0e32e2e98eeb577" translate="yes" xml:space="preserve">
          <source>findMany (store, type, ids, snapshots) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db747abe4a3579c527db77f8227dfac1e434ac63" translate="yes" xml:space="preserve">
          <source>findRecord</source>
          <target state="translated">findRecord</target>
        </trans-unit>
        <trans-unit id="f53c33eb94f0992cee47d0a34303aa491c382829" translate="yes" xml:space="preserve">
          <source>findRecord (modelName, id, options) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f38a637bcb41c28679cbba0604b0eaad1a7a0f2" translate="yes" xml:space="preserve">
          <source>findRecord (store, type, id, snapshot) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7dd7ca5dc6baf156b5204dbb716dd40919242a" translate="yes" xml:space="preserve">
          <source>findWithAssert</source>
          <target state="translated">findWithAssert</target>
        </trans-unit>
        <trans-unit id="8095b7011e0a5b1b3a591410a2d135c2ae0b8783" translate="yes" xml:space="preserve">
          <source>findWithAssert (selector, context) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cddbf7cb057cc6371439951c2c3be621a8ab1c" translate="yes" xml:space="preserve">
          <source>first object to compare</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1c8d7c18e06bae64b1ba867d423670728b1cc9" translate="yes" xml:space="preserve">
          <source>firstObject</source>
          <target state="translated">firstObject</target>
        </trans-unit>
        <trans-unit id="7ece6b825bb5653a9f537bb05ec7004a64306c1d" translate="yes" xml:space="preserve">
          <source>firstObjectObjectpublic</source>
          <target state="translated">firstObjectObjectpublic</target>
        </trans-unit>
        <trans-unit id="edc5ee22beb2b82f4da41914d8d41cca9c53020f" translate="yes" xml:space="preserve">
          <source>forEach</source>
          <target state="translated">forEach</target>
        </trans-unit>
        <trans-unit id="5ca3a26c042f082b08a1a01dab481c611e4286fb" translate="yes" xml:space="preserve">
          <source>forEach (callback, target) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4172ab09a35d521f7f922327b19ada7a877e9448" translate="yes" xml:space="preserve">
          <source>formatURL(url): formats &lt;code&gt;url&lt;/code&gt; to be placed into &lt;code&gt;href&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de02017e4dd678a905024dda616d8f108fc5b7ed" translate="yes" xml:space="preserve">
          <source>formats</source>
          <target state="translated">formats</target>
        </trans-unit>
        <trans-unit id="5045a28e569cd236496d9ebe15ec1243218683a1" translate="yes" xml:space="preserve">
          <source>formatted string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d9bad0583af9ae1efec337f11388c531180475" translate="yes" xml:space="preserve">
          <source>found item or `undefined`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="1230f71253fd26667aadfdc207b31ae83519e093" translate="yes" xml:space="preserve">
          <source>fullName</source>
          <target state="translated">fullName</target>
        </trans-unit>
        <trans-unit id="6f2b164de91d1534e4609e558826ee76f5bd27ab" translate="yes" xml:space="preserve">
          <source>fullName's factory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fdb3623cf5c6ad0283ca5c096018dd2f2ff5ad" translate="yes" xml:space="preserve">
          <source>func</source>
          <target state="translated">func</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="c778a95303695a7f7dc88f83db61544fdb1d7a96" translate="yes" xml:space="preserve">
          <source>function to be called on each fulfilled promise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4349d07a12e85160f667240821b002c01e7cf7d" translate="yes" xml:space="preserve">
          <source>generateIdForRecord</source>
          <target state="translated">generateIdForRecord</target>
        </trans-unit>
        <trans-unit id="f783dbd0511f1d6710ac6893bd495b854e69a5c4" translate="yes" xml:space="preserve">
          <source>generateIdForRecord (store, type, inputProperties) (String|Number)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="translated">get</target>
        </trans-unit>
        <trans-unit id="30f0b2586a858aa4b0ecc10a8d663d5fcb8fd132" translate="yes" xml:space="preserve">
          <source>get (keyName) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e224d31bcf33486685df518d01c354c83b58e775" translate="yes" xml:space="preserve">
          <source>get (obj, keyName) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9230024d2e30fd194c53d2d44c6c03e216fbd2d" translate="yes" xml:space="preserve">
          <source>getEach</source>
          <target state="translated">getEach</target>
        </trans-unit>
        <trans-unit id="4ca762ac9f095047b429541729e951252fbac514" translate="yes" xml:space="preserve">
          <source>getEach (key) Arraypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed83d6030fe0fd05c0dff3186a40245eb061fd5" translate="yes" xml:space="preserve">
          <source>getEngineParent</source>
          <target state="translated">getEngineParent</target>
        </trans-unit>
        <trans-unit id="a419243217bfd207c8ba56ff74fb29004ffc52ab" translate="yes" xml:space="preserve">
          <source>getEngineParent (engine) EngineInstancepublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf678e5aad8e586462af42d4e0d0cac6adbe470" translate="yes" xml:space="preserve">
          <source>getFilters</source>
          <target state="translated">getFilters</target>
        </trans-unit>
        <trans-unit id="8ec79211abb4e69b0670e47960aa4d3d2ed42dbc" translate="yes" xml:space="preserve">
          <source>getFiltersArraypublic</source>
          <target state="translated">getFiltersArraypublic</target>
        </trans-unit>
        <trans-unit id="8ed4f62a01f806a6b1439b312682e8f63c2f1f1d" translate="yes" xml:space="preserve">
          <source>getOwner</source>
          <target state="translated">getOwner</target>
        </trans-unit>
        <trans-unit id="bdab8e9acf08c1a6b5dd942fd436b53272486f33" translate="yes" xml:space="preserve">
          <source>getOwner (object) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cdb40c4f0fdc7e090b73711f643cd1d9e5742d1" translate="yes" xml:space="preserve">
          <source>getProperties</source>
          <target state="translated">getProperties</target>
        </trans-unit>
        <trans-unit id="c6b624348d9bdac403170cbfa31f96e4763256fd" translate="yes" xml:space="preserve">
          <source>getProperties (list) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f77fa6c879fb4abd9c66be8db3af716ebe0813" translate="yes" xml:space="preserve">
          <source>getProperties (obj, list) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d637453b877292a6c35d662d08bcf92491da5585" translate="yes" xml:space="preserve">
          <source>getReference</source>
          <target state="translated">getReference</target>
        </trans-unit>
        <trans-unit id="42b2705ec9e83d320ba730826d46da5cc24e6bc2" translate="yes" xml:space="preserve">
          <source>getReference (modelName, id) RecordReference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832cee0599a5a722870530873220f7c0234d22a9" translate="yes" xml:space="preserve">
          <source>getURL: returns the current URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e2af21317f114073d5d21c60a9ec6127a7a167" translate="yes" xml:space="preserve">
          <source>getWithDefault</source>
          <target state="translated">getWithDefault</target>
        </trans-unit>
        <trans-unit id="e64ea3fdd56bdbdf04d08f0629c1b41d0d99f23e" translate="yes" xml:space="preserve">
          <source>getWithDefault (keyName, defaultValue) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c1e02bcb9007a4141a0c02bd780442d129597f" translate="yes" xml:space="preserve">
          <source>getWithDefault (obj, keyName, defaultValue) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495d1ff5089e7d97344ee0d745cf49a2cf569f67" translate="yes" xml:space="preserve">
          <source>getpublic</source>
          <target state="translated">getpublic</target>
        </trans-unit>
        <trans-unit id="d76d346a9ee39ed207970ba96824462072ded091" translate="yes" xml:space="preserve">
          <source>groupRecordsForFindMany</source>
          <target state="translated">groupRecordsForFindMany</target>
        </trans-unit>
        <trans-unit id="6cd8d5a39038b2dc1525aa765aaee580afd36b9a" translate="yes" xml:space="preserve">
          <source>groupRecordsForFindMany (store, snapshots) Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddf988c838812a4318332f2967bbe1035b2db75" translate="yes" xml:space="preserve">
          <source>gt</source>
          <target state="translated">gt</target>
        </trans-unit>
        <trans-unit id="6db9a533313dbf42fab401049f660a9d10a79d8b" translate="yes" xml:space="preserve">
          <source>gt (dependentKey, value) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8f79b612888edc5242353e47f9fda34a732e0c" translate="yes" xml:space="preserve">
          <source>gte</source>
          <target state="translated">gte</target>
        </trans-unit>
        <trans-unit id="10de72f635f60c6d3bbe34d00fc48a2f48f866cf" translate="yes" xml:space="preserve">
          <source>gte (dependentKey, value) Ember.ComputedPropertypublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ec6bc994cfe5b34331bbafd5b70e8208056b53" translate="yes" xml:space="preserve">
          <source>guidFor</source>
          <target state="translated">guidFor</target>
        </trans-unit>
        <trans-unit id="06f2004214aa6fb529d193274b49534a405b5443" translate="yes" xml:space="preserve">
          <source>guidFor (obj) Stringpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec51c63ace22abc1003813086c430c0ecd5bdf3f" translate="yes" xml:space="preserve">
          <source>handleResponse</source>
          <target state="translated">handleResponse</target>
        </trans-unit>
        <trans-unit id="4e55b70d59a6ae464a0c199114be75b9e5427ea2" translate="yes" xml:space="preserve">
          <source>handleResponse (status, headers, payload, requestData) Object | DS.AdapterError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a81ec93db3740ee3984fc40e34a60b0412643d" translate="yes" xml:space="preserve">
          <source>handler</source>
          <target state="translated">handler</target>
        </trans-unit>
        <trans-unit id="f6f39fbf678d4c03ca72f7d0c7b4f56fb09eb765" translate="yes" xml:space="preserve">
          <source>has</source>
          <target state="translated">has</target>
        </trans-unit>
        <trans-unit id="91a2faff7204133bbe54e62826eff95aa188694d" translate="yes" xml:space="preserve">
          <source>has (attribute) Boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4878c112f91ce1522839a1d1a5e1866ff6da46fe" translate="yes" xml:space="preserve">
          <source>has (name) Booleanpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f92dc28d3bef5d49592694154793faac5981ee" translate="yes" xml:space="preserve">
          <source>hasArrayObservers</source>
          <target state="translated">hasArrayObservers</target>
        </trans-unit>
        <trans-unit id="bf379bcb5cc29f374084e6545ddb2debdfe0ee95" translate="yes" xml:space="preserve">
          <source>hasArrayObserverspublic</source>
          <target state="translated">hasArrayObserverspublic</target>
        </trans-unit>
        <trans-unit id="8aedb063ba33e79cbd02e827fb6e57ceedab49b7" translate="yes" xml:space="preserve">
          <source>hasDirtyAttributes</source>
          <target state="translated">hasDirtyAttributes</target>
        </trans-unit>
        <trans-unit id="1d643fbc27c31c68d3da424577877f827463cfe7" translate="yes" xml:space="preserve">
          <source>hasMany</source>
          <target state="translated">hasMany</target>
        </trans-unit>
        <trans-unit id="f8f466068d492099d02475f07742959a9847e907" translate="yes" xml:space="preserve">
          <source>hasMany (name) HasManyReference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875e11b8eea8f3803b9b03e7bdfae465931a62db" translate="yes" xml:space="preserve">
          <source>hasMany (type, options) Ember.computed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ba25a7dda7307ffefc6a137b120409e5be7521" translate="yes" xml:space="preserve">
          <source>hasRecordForId</source>
          <target state="translated">hasRecordForId</target>
        </trans-unit>
        <trans-unit id="9ed05677fb0274a779604bad25c84d5b70a5507f" translate="yes" xml:space="preserve">
          <source>hasRecordForId (modelName, id) Boolean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39aada87d5167d54a1e108768d47532fc0477c35" translate="yes" xml:space="preserve">
          <source>hasRegistration</source>
          <target state="translated">hasRegistration</target>
        </trans-unit>
        <trans-unit id="bf500be2d02bef3cff1be8e55a981f64c8af755a" translate="yes" xml:space="preserve">
          <source>hasRegistration (fullName) Booleanpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="43aade484660704d8f78f44817f98a0858cf6036" translate="yes" xml:space="preserve">
          <source>hash (object, label) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e81dc7c3b89b9d72c0b9dc699388ac1523af42f" translate="yes" xml:space="preserve">
          <source>hash (options) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9577eb60e64ea11d86acb9524c858f951953714" translate="yes" xml:space="preserve">
          <source>hash containing the parameters of the route `name`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75322b9d06415502f71fe10d60516b60a6454252" translate="yes" xml:space="preserve">
          <source>hash of options passed to `DS.attr`</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76923daf5fd5b860ebc6e8aa4d13eef800237e3f" translate="yes" xml:space="preserve">
          <source>hash with errors as properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce7f9b2d688fdd96fa0876267b939c559a08adf" translate="yes" xml:space="preserve">
          <source>hashSettled</source>
          <target state="translated">hashSettled</target>
        </trans-unit>
        <trans-unit id="44973f4eac3ba54a41ef84f161215eeab76306af" translate="yes" xml:space="preserve">
          <source>hashSettled (object, label) Promise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b47e3d825258ae534f85838d81e93ddd46db1f" translate="yes" xml:space="preserve">
          <source>headers</source>
          <target state="translated">headers</target>
        </trans-unit>
        <trans-unit id="cb34bf6640ba03aa80e5e6502c5987f4d54f3b78" translate="yes" xml:space="preserve">
          <source>headersForRequest</source>
          <target state="translated">headersForRequest</target>
        </trans-unit>
        <trans-unit id="5e959f05076c33399d9e51680f55a76f5ff1c8ef" translate="yes" xml:space="preserve">
          <source>headersForRequest (params) Objectpublic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623c73a6f24d88d84d2235c8a639c80b80004b70" translate="yes" xml:space="preserve">
          <source>helper</source>
          <target state="translated">helper</target>
        </trans-unit>
        <trans-unit id="4a46a72f6f784e04ac8ec66f0449bcfae3571d4c" translate="yes" xml:space="preserve">
          <source>helper (helper) public</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c2f8c24e4664bc66307ae0090efdcabd5f0cc9" translate="yes" xml:space="preserve">
          <source>helperMethod</source>
          <target state="translated">helperMethod</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="86dd1cf45142e904cb2e99c2721fac3ca198c6ca" translate="yes" xml:space="preserve">
          <source>host</source>
          <target state="translated">host</target>
        </trans-unit>
        <trans-unit id="db64ca80201bee4467d8cf8d75aa478a92fe8e2d" translate="yes" xml:space="preserve">
          <source>htmlSafe</source>
          <target state="translated">htmlSafe</target>
        </trans-unit>
        <trans-unit id="74fbe5913661a5f789de6dd2b5b9db9160c7baa2" translate="yes" xml:space="preserve">
          <source>htmlSafeHandlebars.SafeStringpublic</source>
          <target state="translated">htmlSafeHandlebars.SafeStringpublic</target>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="translated">id</target>
        </trans-unit>
        <trans-unit id="e24748607671f9e76bea4879f63bd8d68a0f3025" translate="yes" xml:space="preserve">
          <source>idString</source>
          <target state="translated">idString</target>
        </trans-unit>
        <trans-unit id="3adc09b3cd3d7c4710f562a05bd850e756cba1b8" translate="yes" xml:space="preserve">
          <source>ids</source>
          <target state="translated">ids</target>
        </trans-unit>
        <trans-unit id="4e7f626df794f6491574a236f22c100c34ed804f" translate="yes" xml:space="preserve">
          <source>idx</source>
          <target state="translated">idx</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="93f36a11106194f9a44ae704baaa08fcdffdeb92" translate="yes" xml:space="preserve">
          <source>if no &lt;code&gt;App.ApplicationSerializer&lt;/code&gt; is found, it will attempt to get the &lt;code&gt;defaultSerializer&lt;/code&gt; from the &lt;code&gt;PersonAdapter&lt;/code&gt; (&lt;code&gt;adapterFor('person')&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def53f7f6acb3466ebfcf51fe3c1fb64830a778e" translate="yes" xml:space="preserve">
          <source>if the &lt;code&gt;part&lt;/code&gt; computed property returns &quot;zip&quot;, this will display the result of &lt;code&gt;this.get('address.zip')&lt;/code&gt;. If it returns &quot;city&quot;, you get &lt;code&gt;this.get('address.city')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa5f610891dfc1d9ee6fccaf6328faf64eb5b18" translate="yes" xml:space="preserve">
          <source>if the value returned from this hook is a promise, the transition will pause until the transition resolves. Otherwise, non-promise return values are not utilized in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed501fc428b56e8021cacd5ab2ef469e5086358" translate="yes" xml:space="preserve">
          <source>if this property is &lt;code&gt;true&lt;/code&gt; the observers and bindings were already removed by the effect of calling the &lt;code&gt;destroy()&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ca2a5ce98e931e313524eada2ccba0a00ef71a" translate="yes" xml:space="preserve">
          <source>ifpublic</source>
          <target state="translated">ifpublic</target>
        </trans-unit>
        <trans-unit id="f1d16437085ae1e36539a5328125cec05a91bada" translate="yes" xml:space="preserve">
          <source>immediate</source>
          <target state="translated">immediate</target>
        </trans-unit>
        <trans-unit id="ae679e455824b331569255e30772eeda307ba273" translate="yes" xml:space="preserve">
          <source>implementation: returns the string name used to reference the implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c7ed68f55970624482e9b4f91cf2223db29947" translate="yes" xml:space="preserve">
          <source>includes</source>
          <target state="translated">includes</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
