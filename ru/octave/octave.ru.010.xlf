<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="octave">
    <body>
      <group id="octave">
        <trans-unit id="3466d9af4b0d64865aa8659b9cdb55aeebe69958" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;predicates-for-numeric-objects#XREFisbanded&quot;&gt;isbanded&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFisdiag&quot;&gt;isdiag&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFistril&quot;&gt;istril&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFistriu&quot;&gt;istriu&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909acd60e86ae5ea9f0ae6446ac997627762ced8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;predicates-for-numeric-objects#XREFisfloat&quot;&gt;isfloat&lt;/a&gt;, &lt;a href=&quot;character-arrays#XREFischar&quot;&gt;ischar&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFislogical&quot;&gt;islogical&lt;/a&gt;, &lt;a href=&quot;character-arrays#XREFisstring&quot;&gt;isstring&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFisnumeric&quot;&gt;isnumeric&lt;/a&gt;, &lt;a href=&quot;built_002din-data-types#XREFisa&quot;&gt;isa&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17fa79d0d90f2f3d991924e3ce2035ad444122ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;predicates-for-numeric-objects#XREFisfloat&quot;&gt;isfloat&lt;/a&gt;, &lt;a href=&quot;integer-data-types#XREFisinteger&quot;&gt;isinteger&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFislogical&quot;&gt;islogical&lt;/a&gt;, &lt;a href=&quot;predicates-for-numeric-objects#XREFisnumeric&quot;&gt;isnumeric&lt;/a&gt;, &lt;a href=&quot;#XREFisstring&quot;&gt;isstring&lt;/a&gt;, &lt;a href=&quot;cell-arrays-of-strings#XREFiscellstr&quot;&gt;iscellstr&lt;/a&gt;, &lt;a href=&quot;built_002din-data-types#XREFisa&quot;&gt;isa&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157961fe9ac382be126316cae48fb3c520d7433e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;predicates-for-numeric-objects#XREFismatrix&quot;&gt;ismatrix&lt;/a&gt;, &lt;a href=&quot;basic-usage-of-cell-arrays#XREFiscell&quot;&gt;iscell&lt;/a&gt;, &lt;a href=&quot;built_002din-data-types#XREFisa&quot;&gt;isa&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914623e5f1933178283aa621fa536577e9542eaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;predicates-for-numeric-objects#XREFismatrix&quot;&gt;ismatrix&lt;/a&gt;, &lt;a href=&quot;creating-structures#XREFisstruct&quot;&gt;isstruct&lt;/a&gt;, &lt;a href=&quot;cell-arrays-of-strings#XREFiscellstr&quot;&gt;iscellstr&lt;/a&gt;, &lt;a href=&quot;built_002din-data-types#XREFisa&quot;&gt;isa&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebb0acbd29937bb785b27dccbd83d55501799f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;predicates-for-numeric-objects#XREFismatrix&quot;&gt;ismatrix&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4615151722f1269eaa6e7eb7d700e5068e33973a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;processing-data-in-cell-arrays#XREFcell2mat&quot;&gt;cell2mat&lt;/a&gt;, &lt;a href=&quot;indexing-cell-arrays#XREFcellindexmat&quot;&gt;cellindexmat&lt;/a&gt;, &lt;a href=&quot;function-application#XREFcellfun&quot;&gt;cellfun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06169473033db43a354a2179a4e3fdc3738db20d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;processing-data-in-cell-arrays#XREFcell2struct&quot;&gt;cell2struct&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREFfieldnames&quot;&gt;fieldnames&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREFgetfield&quot;&gt;getfield&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREFsetfield&quot;&gt;setfield&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREFrmfield&quot;&gt;rmfield&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREFisfield&quot;&gt;isfield&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREForderfields&quot;&gt;orderfields&lt;/a&gt;, &lt;a href=&quot;#XREFisstruct&quot;&gt;isstruct&lt;/a&gt;, &lt;a href=&quot;function-application#XREFstructfun&quot;&gt;structfun&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1131d313558d20d0e252fef0fac57f7c9ebf2700" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;processing-data-in-cell-arrays#XREFcell2struct&quot;&gt;cell2struct&lt;/a&gt;, &lt;a href=&quot;manipulating-structures#XREFfieldnames&quot;&gt;fieldnames&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f1732ddc87c9ae61c117836714902bca6140b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;processing-data-in-cell-arrays#XREFcell2struct&quot;&gt;cell2struct&lt;/a&gt;, &lt;a href=&quot;processing-data-in-structures#XREFstruct2cell&quot;&gt;struct2cell&lt;/a&gt;, &lt;a href=&quot;special-utility-matrices#XREFrepmat&quot;&gt;repmat&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f2ae29b22b41ec36559575b181ae79bce0ff22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;processing-data-in-structures#XREFstruct2cell&quot;&gt;struct2cell&lt;/a&gt;, &lt;a href=&quot;#XREFcell2mat&quot;&gt;cell2mat&lt;/a&gt;, &lt;a href=&quot;creating-structures#XREFstruct&quot;&gt;struct&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda063122755993d8b30b176d3fd7f1f4d1c9db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;products-of-polynomials#XREFconv2&quot;&gt;conv2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82540f86d5b935a2167340eccc27170ddda15674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;products-of-polynomials#XREFdeconv&quot;&gt;deconv&lt;/a&gt;, &lt;a href=&quot;products-of-polynomials#XREFconv&quot;&gt;conv&lt;/a&gt;, &lt;a href=&quot;products-of-polynomials#XREFconv2&quot;&gt;conv2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6088c992e6690c4a9b1cf6c4a9db80fe8e336d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;products-of-polynomials#XREFresidue&quot;&gt;residue&lt;/a&gt;, &lt;a href=&quot;miscellaneous-functions#XREFpoly&quot;&gt;poly&lt;/a&gt;, &lt;a href=&quot;#XREFroots&quot;&gt;roots&lt;/a&gt;, &lt;a href=&quot;products-of-polynomials#XREFconv&quot;&gt;conv&lt;/a&gt;, &lt;a href=&quot;products-of-polynomials#XREFdeconv&quot;&gt;deconv&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4eef882a0ebc10caa43205ae642acf279a43ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;quadratic-programming#XREFpqpnonneg&quot;&gt;pqpnonneg&lt;/a&gt;, &lt;a href=&quot;#XREFlscov&quot;&gt;lscov&lt;/a&gt;, &lt;a href=&quot;#XREFoptimset&quot;&gt;optimset&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e601a0a6b1a810ba0dae4ad92c82a9b0bd19753c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;quadratic-programming#XREFqp&quot;&gt;qp&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acf8dc87620ef2c5ee3ae6cf6ab5a2c04518105" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;ranges#XREFdisable_005frange&quot;&gt;disable_range&lt;/a&gt;, &lt;a href=&quot;#XREFdisable_005fdiagonal_005fmatrix&quot;&gt;disable_diagonal_matrix&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5027bbd9c7ecb585c8b6e055ea27374e4bc13d16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;ranges#XREFdisable_005frange&quot;&gt;disable_range&lt;/a&gt;, &lt;a href=&quot;#XREFdisable_005fpermutation_005fmatrix&quot;&gt;disable_permutation_matrix&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f00c7777808321e49e8dd0eb9b7ca8809a2544" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;rearranging-matrices#XREFcat&quot;&gt;cat&lt;/a&gt;, &lt;a href=&quot;functions-of-a-matrix#XREFkron&quot;&gt;kron&lt;/a&gt;, &lt;a href=&quot;#XREFrepmat&quot;&gt;repmat&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a15daeb8b2b0c05d1a6dc32e506bd84d3e2eec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;rearranging-matrices#XREFdiag&quot;&gt;diag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23284e04f91691893c3f4fa130a70b5cc9eb7bf1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;rearranging-matrices#XREFpermute&quot;&gt;permute&lt;/a&gt;, &lt;a href=&quot;special-utility-matrices#XREFrandperm&quot;&gt;randperm&lt;/a&gt;, &lt;a href=&quot;#XREFnchoosek&quot;&gt;nchoosek&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932ec824c4137dc4de9a52a9f4fc0b832a0927fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;rearranging-matrices#XREFreshape&quot;&gt;reshape&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b8f907f066414c89d4ef9958f7a67ad3562137" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;rearranging-matrices#XREFsort&quot;&gt;sort&lt;/a&gt;, &lt;a href=&quot;short_002dcircuit-boolean-operators#XREFmerge&quot;&gt;merge&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989aa2d66097e041be708b193e81a11cbf787464" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;#XREFaxis&quot;&gt;axis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9ae3d95de562edd8f0c010582c2d92b44b59cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b56de205536820413d35d872f55ae438e3ef4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;searching-properties#XREFfindall&quot;&gt;findall&lt;/a&gt;, &lt;a href=&quot;searching-properties#XREFfindobj&quot;&gt;findobj&lt;/a&gt;, &lt;a href=&quot;#XREFget&quot;&gt;get&lt;/a&gt;, &lt;a href=&quot;#XREFset&quot;&gt;set&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa02132de13c197ba9ebe21a77beee67bba19b35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;searching-properties#XREFfindobj&quot;&gt;findobj&lt;/a&gt;, &lt;a href=&quot;searching-properties#XREFfindall&quot;&gt;findall&lt;/a&gt;, &lt;a href=&quot;#XREFallchild&quot;&gt;allchild&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c1e2bba4ee642ae1a849ad94750b8540c6fb31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;set-operations#XREFunion&quot;&gt;union&lt;/a&gt;, &lt;a href=&quot;set-operations#XREFintersect&quot;&gt;intersect&lt;/a&gt;, &lt;a href=&quot;set-operations#XREFsetdiff&quot;&gt;setdiff&lt;/a&gt;, &lt;a href=&quot;set-operations#XREFsetxor&quot;&gt;setxor&lt;/a&gt;, &lt;a href=&quot;set-operations#XREFismember&quot;&gt;ismember&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24703127f739aab14ab1b0899895c351f5d236c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;, &lt;a href=&quot;#XREFintersect&quot;&gt;intersect&lt;/a&gt;, &lt;a href=&quot;#XREFsetdiff&quot;&gt;setdiff&lt;/a&gt;, &lt;a href=&quot;#XREFsetxor&quot;&gt;setxor&lt;/a&gt;, &lt;a href=&quot;#XREFismember&quot;&gt;ismember&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc57d0cc6df9a0f38a18a3396e536ba983d336c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;, &lt;a href=&quot;#XREFmatlab_005flang_005fmakeValidName&quot;&gt;matlab.lang.makeValidName&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecda741ab8353afba7c3b9ec979b2f06a237289" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;, &lt;a href=&quot;#XREFunion&quot;&gt;union&lt;/a&gt;, &lt;a href=&quot;#XREFintersect&quot;&gt;intersect&lt;/a&gt;, &lt;a href=&quot;#XREFsetdiff&quot;&gt;setdiff&lt;/a&gt;, &lt;a href=&quot;#XREFismember&quot;&gt;ismember&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67d326920f2a0705063bafce946bc0a692315ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;, &lt;a href=&quot;#XREFunion&quot;&gt;union&lt;/a&gt;, &lt;a href=&quot;#XREFintersect&quot;&gt;intersect&lt;/a&gt;, &lt;a href=&quot;#XREFsetdiff&quot;&gt;setdiff&lt;/a&gt;, &lt;a href=&quot;#XREFsetxor&quot;&gt;setxor&lt;/a&gt;, &lt;a href=&quot;#XREFismember&quot;&gt;ismember&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7014fe4f963db495fe5a77aa7cc976f3d821a8d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;, &lt;a href=&quot;#XREFunion&quot;&gt;union&lt;/a&gt;, &lt;a href=&quot;#XREFintersect&quot;&gt;intersect&lt;/a&gt;, &lt;a href=&quot;#XREFsetxor&quot;&gt;setxor&lt;/a&gt;, &lt;a href=&quot;#XREFismember&quot;&gt;ismember&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083f6c33701417b384ec7c0f1beff41b41241858" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sets#XREFunique&quot;&gt;unique&lt;/a&gt;, &lt;a href=&quot;#XREFunion&quot;&gt;union&lt;/a&gt;, &lt;a href=&quot;#XREFsetdiff&quot;&gt;setdiff&lt;/a&gt;, &lt;a href=&quot;#XREFsetxor&quot;&gt;setxor&lt;/a&gt;, &lt;a href=&quot;#XREFismember&quot;&gt;ismember&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072943f58aab88158100dc9a7c9728d180456f87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;signal-processing#XREFpchip&quot;&gt;pchip&lt;/a&gt;, &lt;a href=&quot;#XREFspline&quot;&gt;spline&lt;/a&gt;, &lt;a href=&quot;#XREFinterpft&quot;&gt;interpft&lt;/a&gt;, &lt;a href=&quot;multi_002ddimensional-interpolation#XREFinterp2&quot;&gt;interp2&lt;/a&gt;, &lt;a href=&quot;multi_002ddimensional-interpolation#XREFinterp3&quot;&gt;interp3&lt;/a&gt;, &lt;a href=&quot;multi_002ddimensional-interpolation#XREFinterpn&quot;&gt;interpn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895969131a3807f9964b235f65c0b7cfcae69243" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;signal-processing#XREFpchip&quot;&gt;pchip&lt;/a&gt;, &lt;a href=&quot;polynomial-interpolation#XREFppval&quot;&gt;ppval&lt;/a&gt;, &lt;a href=&quot;polynomial-interpolation#XREFmkpp&quot;&gt;mkpp&lt;/a&gt;, &lt;a href=&quot;polynomial-interpolation#XREFunmkpp&quot;&gt;unmkpp&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9551322fd8e3c094b00016f1779b3d4af01b9127" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;simple-file-i_002fo#XREFfdisp&quot;&gt;fdisp&lt;/a&gt;, &lt;a href=&quot;formatted-output#XREFfprintf&quot;&gt;fprintf&lt;/a&gt;, &lt;a href=&quot;binary-i_002fo#XREFfwrite&quot;&gt;fwrite&lt;/a&gt;, &lt;a href=&quot;opening-and-closing-files#XREFfopen&quot;&gt;fopen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc148a4867e22f8823b3cc6c4bd842dd6131ffb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;simple-file-i_002fo#XREFfdisp&quot;&gt;fdisp&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f83d77ed61b685e9657eb63de08ae557f92b93d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;simple-file-i_002fo#XREFtextscan&quot;&gt;textscan&lt;/a&gt;, &lt;a href=&quot;formatted-input#XREFsscanf&quot;&gt;sscanf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="238fddfd9b7ebcfa418a741a63510cb070f79a2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;simple-output#XREFfputs&quot;&gt;fputs&lt;/a&gt;, &lt;a href=&quot;#XREFfgetl&quot;&gt;fgetl&lt;/a&gt;, &lt;a href=&quot;formatted-input#XREFfscanf&quot;&gt;fscanf&lt;/a&gt;, &lt;a href=&quot;binary-i_002fo#XREFfread&quot;&gt;fread&lt;/a&gt;, &lt;a href=&quot;opening-and-closing-files#XREFfopen&quot;&gt;fopen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad750863dd456139c0c305650cdbcb767854e5b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;simple-output#XREFfputs&quot;&gt;fputs&lt;/a&gt;, &lt;a href=&quot;simple-file-i_002fo#XREFfdisp&quot;&gt;fdisp&lt;/a&gt;, &lt;a href=&quot;binary-i_002fo#XREFfwrite&quot;&gt;fwrite&lt;/a&gt;, &lt;a href=&quot;formatted-input#XREFfscanf&quot;&gt;fscanf&lt;/a&gt;, &lt;a href=&quot;#XREFprintf&quot;&gt;printf&lt;/a&gt;, &lt;a href=&quot;#XREFsprintf&quot;&gt;sprintf&lt;/a&gt;, &lt;a href=&quot;opening-and-closing-files#XREFfopen&quot;&gt;fopen&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210161e926b3ccbbe5d1a00b2d08f7a3f08afd40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;simple-output#XREFputs&quot;&gt;puts&lt;/a&gt;, &lt;a href=&quot;simple-output#XREFfputs&quot;&gt;fputs&lt;/a&gt;, &lt;a href=&quot;formatted-output#XREFprintf&quot;&gt;printf&lt;/a&gt;, &lt;a href=&quot;formatted-output#XREFfprintf&quot;&gt;fprintf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c2a6358e9d9f80cc099d07af82fa0fcb6b3a4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;single-precision-data-types#XREFsingle&quot;&gt;single&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d93ba0afffe39d4558324fd68b490e3ed76c3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;solvers#XREFfzero&quot;&gt;fzero&lt;/a&gt;, &lt;a href=&quot;#XREFfminbnd&quot;&gt;fminbnd&lt;/a&gt;, &lt;a href=&quot;#XREFfminunc&quot;&gt;fminunc&lt;/a&gt;, &lt;a href=&quot;#XREFfminsearch&quot;&gt;fminsearch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efd3db3c99da95559f71a368044e7799c09f7d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;solvers#XREFfzero&quot;&gt;fzero&lt;/a&gt;, &lt;a href=&quot;#XREFfminunc&quot;&gt;fminunc&lt;/a&gt;, &lt;a href=&quot;#XREFfminsearch&quot;&gt;fminsearch&lt;/a&gt;, &lt;a href=&quot;linear-least-squares#XREFoptimset&quot;&gt;optimset&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15466ca0c5a6608d5c5029dc487c406a03f4926a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sparse-linear-algebra#XREFcondest&quot;&gt;condest&lt;/a&gt;, &lt;a href=&quot;#XREFrcond&quot;&gt;rcond&lt;/a&gt;, &lt;a href=&quot;#XREFcondeig&quot;&gt;condeig&lt;/a&gt;, &lt;a href=&quot;#XREFnorm&quot;&gt;norm&lt;/a&gt;, &lt;a href=&quot;matrix-factorizations#XREFsvd&quot;&gt;svd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492ded6a938b62a57dd80bd58212ea6811ebe254" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sparse-linear-algebra#XREFeigs&quot;&gt;eigs&lt;/a&gt;, &lt;a href=&quot;matrix-factorizations#XREFsvd&quot;&gt;svd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1387070f9ab58010b58217879650f17b1cb6c8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sparse-linear-algebra#XREFnormest&quot;&gt;normest&lt;/a&gt;, &lt;a href=&quot;sparse-linear-algebra#XREFnormest1&quot;&gt;normest1&lt;/a&gt;, &lt;a href=&quot;#XREFvecnorm&quot;&gt;vecnorm&lt;/a&gt;, &lt;a href=&quot;#XREFcond&quot;&gt;cond&lt;/a&gt;, &lt;a href=&quot;matrix-factorizations#XREFsvd&quot;&gt;svd&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632130ecb9f2b3feaf8e27bb3256ed05394ebaec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;special-functions#XREFbincoeff&quot;&gt;bincoeff&lt;/a&gt;, &lt;a href=&quot;#XREFperms&quot;&gt;perms&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db747c1b0519bb6d6e2c7874110539cfaee9f98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;special-utility-matrices#XREFlinspace&quot;&gt;linspace&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7647f1e00694860e542e7f842393a5219058a4f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;special-utility-matrices#XREFrepmat&quot;&gt;repmat&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0071f2424e0ca3aa2e99c5fddfb6b6c49ac979f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;status-of-variables#XREFwhos&quot;&gt;whos&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077683762520bfc9c174f6ca7870f8180bc3a67e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;string-conversions#XREFstrjust&quot;&gt;strjust&lt;/a&gt;, &lt;a href=&quot;#XREFstrsplit&quot;&gt;strsplit&lt;/a&gt;, &lt;a href=&quot;#XREFdeblank&quot;&gt;deblank&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678ef048e592292656b4ce94a3c5f2bc1d0b8599" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;sums-and-products#XREFprod&quot;&gt;prod&lt;/a&gt;, &lt;a href=&quot;special-functions#XREFgamma&quot;&gt;gamma&lt;/a&gt;, &lt;a href=&quot;special-functions#XREFgammaln&quot;&gt;gammaln&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19965e74463e70a6d3598cc39518f0cd965dc3a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;system-information#XREFver&quot;&gt;ver&lt;/a&gt;, &lt;a href=&quot;getting-help#XREFnews&quot;&gt;news&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf3950ac84d311f6ff2570cc61e9d8f662db3ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;system-information#XREFver&quot;&gt;ver&lt;/a&gt;, &lt;a href=&quot;installing-and-removing-packages#XREFpkg&quot;&gt;pkg&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4252e1e2acbfb4bf1af90d9527b95be4f01bbef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-input#XREFkbhit&quot;&gt;kbhit&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c81ffd8a0ad710cf7dd8d549a9aab246b77e2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-input#XREFmenu&quot;&gt;menu&lt;/a&gt;, &lt;a href=&quot;#XREFerrordlg&quot;&gt;errordlg&lt;/a&gt;, &lt;a href=&quot;#XREFhelpdlg&quot;&gt;helpdlg&lt;/a&gt;, &lt;a href=&quot;#XREFinputdlg&quot;&gt;inputdlg&lt;/a&gt;, &lt;a href=&quot;#XREFmsgbox&quot;&gt;msgbox&lt;/a&gt;, &lt;a href=&quot;#XREFquestdlg&quot;&gt;questdlg&lt;/a&gt;, &lt;a href=&quot;#XREFwarndlg&quot;&gt;warndlg&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c946e34f6468336b3e9f84aa5f04be5404faafba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-output#XREFdisp&quot;&gt;disp&lt;/a&gt;, &lt;a href=&quot;built_002din-data-types#XREFclass&quot;&gt;class&lt;/a&gt;, &lt;a href=&quot;defining-indexing-and-indexed-assignment#XREFsubsref&quot;&gt;subsref&lt;/a&gt;, &lt;a href=&quot;defining-indexing-and-indexed-assignment#XREFsubsasgn&quot;&gt;subsasgn&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26072afe774f48eed6354043f08852ebb624ae7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-output#XREFdisp&quot;&gt;disp&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cccafe02d4277a6b1ac3563587b2636f0f20ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-output#XREFformat&quot;&gt;format&lt;/a&gt;, &lt;a href=&quot;#XREFfixed_005fpoint_005fformat&quot;&gt;fixed_point_format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e208de1bc8a73c71a7e39915e980a74853480176" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-output#XREFformat&quot;&gt;format&lt;/a&gt;, &lt;a href=&quot;#XREFoutput_005fprecision&quot;&gt;output_precision&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4df16f4e59d605a51888c547ec813e153240cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-output#XREFformat&quot;&gt;format&lt;/a&gt;, &lt;a href=&quot;#XREFrat&quot;&gt;rat&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f94469e18deca8f6c81981ddb461ffefc32dd10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;terminal-output#XREFformat&quot;&gt;format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51f0d14ab31213745438b29cd872380e512a451" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-function-plotting#XREFezmesh&quot;&gt;ezmesh&lt;/a&gt;, &lt;a href=&quot;#XREFmeshc&quot;&gt;meshc&lt;/a&gt;, &lt;a href=&quot;#XREFmeshz&quot;&gt;meshz&lt;/a&gt;, &lt;a href=&quot;plotting-the-triangulation#XREFtrimesh&quot;&gt;trimesh&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;#XREFsurf&quot;&gt;surf&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFsurface&quot;&gt;surface&lt;/a&gt;, &lt;a href=&quot;#XREFmeshgrid&quot;&gt;meshgrid&lt;/a&gt;, &lt;a href=&quot;#XREFhidden&quot;&gt;hidden&lt;/a&gt;, &lt;a href=&quot;#XREFshading&quot;&gt;shading&lt;/a&gt;, &lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;axis-configuration#XREFcaxis&quot;&gt;caxis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50658ecc577307d62a888446d90c01336a1403bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-function-plotting#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;#XREFmeshz&quot;&gt;meshz&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;#XREFsurfc&quot;&gt;surfc&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFsurface&quot;&gt;surface&lt;/a&gt;, &lt;a href=&quot;#XREFmeshgrid&quot;&gt;meshgrid&lt;/a&gt;, &lt;a href=&quot;#XREFhidden&quot;&gt;hidden&lt;/a&gt;, &lt;a href=&quot;#XREFshading&quot;&gt;shading&lt;/a&gt;, &lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;axis-configuration#XREFcaxis&quot;&gt;caxis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d854562c0a509146dd7a684307d1ff55341ccb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-function-plotting#XREFezplot3&quot;&gt;ezplot3&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFplot&quot;&gt;plot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcd71dfcdbfe256ff0cfa379ace889fc301fb6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-function-plotting#XREFezsurf&quot;&gt;ezsurf&lt;/a&gt;, &lt;a href=&quot;#XREFsurfc&quot;&gt;surfc&lt;/a&gt;, &lt;a href=&quot;#XREFsurfl&quot;&gt;surfl&lt;/a&gt;, &lt;a href=&quot;#XREFsurfnorm&quot;&gt;surfnorm&lt;/a&gt;, &lt;a href=&quot;plotting-the-triangulation#XREFtrisurf&quot;&gt;trisurf&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFsurface&quot;&gt;surface&lt;/a&gt;, &lt;a href=&quot;#XREFmeshgrid&quot;&gt;meshgrid&lt;/a&gt;, &lt;a href=&quot;#XREFhidden&quot;&gt;hidden&lt;/a&gt;, &lt;a href=&quot;#XREFshading&quot;&gt;shading&lt;/a&gt;, &lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;axis-configuration#XREFcaxis&quot;&gt;caxis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e2546fbf4ac07e2ab13f7626340836a05fa2eaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-function-plotting#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;, &lt;a href=&quot;#XREFsurf&quot;&gt;surf&lt;/a&gt;, &lt;a href=&quot;#XREFsurfl&quot;&gt;surfl&lt;/a&gt;, &lt;a href=&quot;#XREFsurfnorm&quot;&gt;surfnorm&lt;/a&gt;, &lt;a href=&quot;plotting-the-triangulation#XREFtrisurf&quot;&gt;trisurf&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFsurface&quot;&gt;surface&lt;/a&gt;, &lt;a href=&quot;#XREFmeshgrid&quot;&gt;meshgrid&lt;/a&gt;, &lt;a href=&quot;#XREFhidden&quot;&gt;hidden&lt;/a&gt;, &lt;a href=&quot;#XREFshading&quot;&gt;shading&lt;/a&gt;, &lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;axis-configuration#XREFcaxis&quot;&gt;caxis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc30cde9bc6e19c9e22c4296570fef8eb0e0307" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFlighting&quot;&gt;lighting&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFmaterial&quot;&gt;material&lt;/a&gt;, &lt;a href=&quot;#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;#XREFsurface&quot;&gt;surface&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e129de7283b688eafaf02581f3334815752407f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-function-plotting#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;#XREFezsurf&quot;&gt;ezsurf&lt;/a&gt;, &lt;a href=&quot;#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFhidden&quot;&gt;hidden&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc9da0ba7537304cf2839b3bf7ac534dc48563a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;#XREFtetramesh&quot;&gt;tetramesh&lt;/a&gt;, &lt;a href=&quot;#XREFtriplot&quot;&gt;triplot&lt;/a&gt;, &lt;a href=&quot;#XREFtrisurf&quot;&gt;trisurf&lt;/a&gt;, &lt;a href=&quot;delaunay-triangulation#XREFdelaunay&quot;&gt;delaunay&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFhidden&quot;&gt;hidden&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5947932f8d34c70027ad1ba14fc32bf40e8118dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFmeshc&quot;&gt;meshc&lt;/a&gt;, &lt;a href=&quot;#XREFezmesh&quot;&gt;ezmesh&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-function-plotting#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;#XREFezsurf&quot;&gt;ezsurf&lt;/a&gt;, &lt;a href=&quot;#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFhidden&quot;&gt;hidden&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ae0276cfc673235475f4d3aab45aa0d512c0c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFplot3&quot;&gt;plot3&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcomet3&quot;&gt;comet3&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-function-plotting#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;#XREFezmesh&quot;&gt;ezmesh&lt;/a&gt;, &lt;a href=&quot;#XREFezsurf&quot;&gt;ezsurf&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41331d8e764b010fa175dbd029d0893d472af842" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFscatter3&quot;&gt;scatter3&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;#XREFplot&quot;&gt;plot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e313a692aef955877ee97431b40557ae82cc25b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFsurf&quot;&gt;surf&lt;/a&gt;, &lt;a href=&quot;#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-function-plotting#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;#XREFezmesh&quot;&gt;ezmesh&lt;/a&gt;, &lt;a href=&quot;#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFshading&quot;&gt;shading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10f493870ef5c030ba766baf89de5eea1f5af9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFsurf&quot;&gt;surf&lt;/a&gt;, &lt;a href=&quot;#XREFtriplot&quot;&gt;triplot&lt;/a&gt;, &lt;a href=&quot;#XREFtrimesh&quot;&gt;trimesh&lt;/a&gt;, &lt;a href=&quot;delaunay-triangulation#XREFdelaunay&quot;&gt;delaunay&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFshading&quot;&gt;shading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8eaabf1fcf615d7f7e1eed69e73cb514caf57f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFsurf&quot;&gt;surf&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;#XREFline&quot;&gt;line&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da006ecc270123cc168cfdf57db55f258de5b4af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;three_002ddimensional-plots#XREFsurfc&quot;&gt;surfc&lt;/a&gt;, &lt;a href=&quot;#XREFezsurf&quot;&gt;ezsurf&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-function-plotting#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;#XREFezmesh&quot;&gt;ezmesh&lt;/a&gt;, &lt;a href=&quot;#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFshading&quot;&gt;shading&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d97b41b3ba9cd3e75fa61f535511b0196cab92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;timing-utilities#XREFstrftime&quot;&gt;strftime&lt;/a&gt;, &lt;a href=&quot;#XREFhistory_005ffile&quot;&gt;history_file&lt;/a&gt;, &lt;a href=&quot;#XREFhistory_005fsize&quot;&gt;history_size&lt;/a&gt;, &lt;a href=&quot;#XREFhistory_005fsave&quot;&gt;history_save&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a855039b0056f7ecabd1aa0275347d6bf3846a3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;timing-utilities#XREFstrftime&quot;&gt;strftime&lt;/a&gt;, &lt;a href=&quot;#XREFsave_005fdefault_005foptions&quot;&gt;save_default_options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb7faa21414f391cf57f864cebe518130959281" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-function-plotting#XREFezcontour&quot;&gt;ezcontour&lt;/a&gt;, &lt;a href=&quot;#XREFcontourc&quot;&gt;contourc&lt;/a&gt;, &lt;a href=&quot;#XREFcontourf&quot;&gt;contourf&lt;/a&gt;, &lt;a href=&quot;#XREFcontour3&quot;&gt;contour3&lt;/a&gt;, &lt;a href=&quot;plot-annotations#XREFclabel&quot;&gt;clabel&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFmeshc&quot;&gt;meshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFsurfc&quot;&gt;surfc&lt;/a&gt;, &lt;a href=&quot;axis-configuration#XREFcaxis&quot;&gt;caxis&lt;/a&gt;, &lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;#XREFplot&quot;&gt;plot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61801ecd5ff6955a8a35f93d748f7f5afc2938a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-function-plotting#XREFezcontourf&quot;&gt;ezcontourf&lt;/a&gt;, &lt;a href=&quot;#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;#XREFcontourc&quot;&gt;contourc&lt;/a&gt;, &lt;a href=&quot;#XREFcontour3&quot;&gt;contour3&lt;/a&gt;, &lt;a href=&quot;plot-annotations#XREFclabel&quot;&gt;clabel&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFmeshc&quot;&gt;meshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFsurfc&quot;&gt;surfc&lt;/a&gt;, &lt;a href=&quot;axis-configuration#XREFcaxis&quot;&gt;caxis&lt;/a&gt;, &lt;a href=&quot;representing-images#XREFcolormap&quot;&gt;colormap&lt;/a&gt;, &lt;a href=&quot;#XREFplot&quot;&gt;plot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80f3fedf1df095e839f10168ee952fbf43e6ed6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;#XREFezcontourf&quot;&gt;ezcontourf&lt;/a&gt;, &lt;a href=&quot;#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4548752d1aa69e08bb64b5c52307130a41947c54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFcontour&quot;&gt;contour&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcontourf&quot;&gt;contourf&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFcontour3&quot;&gt;contour3&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFmeshc&quot;&gt;meshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-plots#XREFsurfc&quot;&gt;surfc&lt;/a&gt;, &lt;a href=&quot;#XREFtext&quot;&gt;text&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c720efb1481bb85df297d017837e0f6b25156986" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFcontourf&quot;&gt;contourf&lt;/a&gt;, &lt;a href=&quot;#XREFezcontour&quot;&gt;ezcontour&lt;/a&gt;, &lt;a href=&quot;#XREFezplot&quot;&gt;ezplot&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa99c726ca4ad21404fe9b5985895278f1e29a8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFfill&quot;&gt;fill&lt;/a&gt;, &lt;a href=&quot;#XREFget&quot;&gt;get&lt;/a&gt;, &lt;a href=&quot;#XREFset&quot;&gt;set&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7568003f9f9ce207f7fb7ab8535eb1c3d91ca8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFfill&quot;&gt;fill&lt;/a&gt;, &lt;a href=&quot;#XREFmesh&quot;&gt;mesh&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFpcolor&quot;&gt;pcolor&lt;/a&gt;, &lt;a href=&quot;#XREFsurf&quot;&gt;surf&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFsurface&quot;&gt;surface&lt;/a&gt;, &lt;a href=&quot;#XREFhidden&quot;&gt;hidden&lt;/a&gt;, &lt;a href=&quot;#XREFlighting&quot;&gt;lighting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400dfcfb625186d16e38ac0c0712c85b01a9b7a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFhist&quot;&gt;hist&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dbff84ba544cc31d6994078ff20844979b930c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFplot&quot;&gt;plot&lt;/a&gt;, &lt;a href=&quot;#XREFgplot&quot;&gt;gplot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fdef637db6dfe469e3f02ef059781c035810f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFplot&quot;&gt;plot&lt;/a&gt;, &lt;a href=&quot;#XREFtrimesh&quot;&gt;trimesh&lt;/a&gt;, &lt;a href=&quot;#XREFtrisurf&quot;&gt;trisurf&lt;/a&gt;, &lt;a href=&quot;delaunay-triangulation#XREFdelaunay&quot;&gt;delaunay&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a795b0ad30962aba872e6ccf1e0da9dc7cb8de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFplot&quot;&gt;plot&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezplot3&quot;&gt;ezplot3&lt;/a&gt;, &lt;a href=&quot;#XREFezpolar&quot;&gt;ezpolar&lt;/a&gt;, &lt;a href=&quot;#XREFezcontour&quot;&gt;ezcontour&lt;/a&gt;, &lt;a href=&quot;#XREFezcontourf&quot;&gt;ezcontourf&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezmesh&quot;&gt;ezmesh&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezmeshc&quot;&gt;ezmeshc&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezsurf&quot;&gt;ezsurf&lt;/a&gt;, &lt;a href=&quot;three_002ddimensional-function-plotting#XREFezsurfc&quot;&gt;ezsurfc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25ffe226de548e5e7542f39a2dc53fcf0d823fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFpolar&quot;&gt;polar&lt;/a&gt;, &lt;a href=&quot;#XREFezplot&quot;&gt;ezplot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b5b283e986bbe367bea6be1e85bc5c6cd41bec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;two_002ddimensional-plots#XREFscatter&quot;&gt;scatter&lt;/a&gt;, &lt;a href=&quot;graphics-objects#XREFpatch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;two_002ddimensional-plots#XREFplot&quot;&gt;plot&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6741b1589082fa059d2efee7b7942b19fdebba04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;utility-functions#XREFmin&quot;&gt;min&lt;/a&gt;, &lt;a href=&quot;utility-functions#XREFmax&quot;&gt;max&lt;/a&gt;, &lt;a href=&quot;#XREFmedian&quot;&gt;median&lt;/a&gt;, &lt;a href=&quot;#XREFmean&quot;&gt;mean&lt;/a&gt;, &lt;a href=&quot;#XREFstd&quot;&gt;std&lt;/a&gt;, &lt;a href=&quot;#XREFskewness&quot;&gt;skewness&lt;/a&gt;, &lt;a href=&quot;#XREFkurtosis&quot;&gt;kurtosis&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684af85c00b2ba15e9dec78c98b9d3aef5489a58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;utility-functions#XREFprimes&quot;&gt;primes&lt;/a&gt;, &lt;a href=&quot;utility-functions#XREFfactor&quot;&gt;factor&lt;/a&gt;, &lt;a href=&quot;utility-functions#XREFgcd&quot;&gt;gcd&lt;/a&gt;, &lt;a href=&quot;utility-functions#XREFlcm&quot;&gt;lcm&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f264a264fd23ffa4f375f141746f8dfb78820675" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also:&lt;/strong&gt;&lt;a href=&quot;variables#XREFisvarname&quot;&gt;isvarname&lt;/a&gt;, &lt;a href=&quot;status-of-variables#XREFexist&quot;&gt;exist&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b936bb8d1d0a3a89e63a6151ce9ace25ba4456" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 15.1: &lt;/strong&gt;Available special characters in TeX mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef04ad8b7f59ca19f05d96242205a95373cc47c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 34.1: &lt;/strong&gt;Available overloaded operators and their corresponding class method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341405e70e9c3bfda81fa93381fbb962d3a50d0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If the matrix &lt;var&gt;A&lt;/var&gt; does not have the properties listed in the &lt;var&gt;opts&lt;/var&gt; structure then the result will not be accurate AND no warning will be given. When in doubt, let Octave examine the matrix and choose the appropriate solver as this step takes little time and the result is cached so that it is only done once per linear system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b10431ee28d4cd49791a7ab55f02515620808f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; You may need to clear &lt;var&gt;name&lt;/var&gt; before the new definition is available. If you are editing a .cc file, you will need to execute &lt;code&gt;mkoctfile &lt;samp&gt;&lt;var&gt;name&lt;/var&gt;.cc&lt;/samp&gt;&lt;/code&gt; before the definition will be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f572eb84c284276fe464ae4bbb749c8200fc2f2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; leap seconds are ignored. A table of leap seconds is available on the Wikipedia entry for leap seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565eb30bde31d2f2cad06f5e1f9d4d4013bf871f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; the truth value of an empty matrix is always &lt;code&gt;false&lt;/code&gt;, see the previous list item for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03afd4f2477b593131f3d0ed3af6609f1f02e59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; there is one exception to the rule of evaluating &lt;code&gt;all (&lt;var&gt;boolean1&lt;/var&gt;(:))&lt;/code&gt;, which is when &lt;code&gt;boolean1&lt;/code&gt; is the empty matrix. The truth value of an empty matrix is always &lt;code&gt;false&lt;/code&gt; so &lt;code&gt;[] &amp;amp;&amp;amp; true&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt; even though &lt;code&gt;all ([])&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d86959ffad3b80460984b74c48e1174a243c24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt;&lt;code&gt;functions&lt;/code&gt; is provided for debugging purposes only. Its behavior may change in the future and programs should not depend on any particular output format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b18afeb69c1f35145b9c6a51532bd337cc04b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You should not change the files in &lt;samp&gt;/usr/include&lt;/samp&gt;&lt;/strong&gt;. You can find the &lt;code&gt;gcc&lt;/code&gt; include directory tree by running the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a75a18ca84b4c7dbf25b41707f40733b13a0e5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; can be either a square (preferably sparse) matrix or a function handle, inline function or string containing the name of a function which computes &lt;code&gt;&lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt;&lt;/code&gt;. In principle &lt;var&gt;A&lt;/var&gt; should be symmetric and non-singular; if &lt;code&gt;pcr&lt;/code&gt; finds &lt;var&gt;A&lt;/var&gt; to be numerically singular, you will get a warning message and the &lt;var&gt;flag&lt;/var&gt; output parameter will be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ae0a15f68c36d079537db5c8430a9941a4f7d3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; can be passed as a matrix or as a function handle or inline function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x, &quot;notransp&quot;) = A*x&lt;/code&gt; and &lt;code&gt;f(x, &quot;transp&quot;) = A'*x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20e988786d2b22d040e38eea844c94bc97551f9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; has to be Hermitian and Positive Definite (HPD). If &lt;code&gt;pcg&lt;/code&gt; detects &lt;var&gt;A&lt;/var&gt; not to be positive definite, a warning is printed and the &lt;var&gt;flag&lt;/var&gt; output is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dcf999140b8a0672392e4982b82ec4de18bad6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is general rectangular (currently makes no difference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff0ff343aba21ac9b7e63b800ef3604c6cf0a85a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is lower triangular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23acbcdc9d84f1a804139c13d0b62f3927004a54" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is positive definite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28938b4f3102bb0de05e8818d6d44241b3a38f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is symmetric or complex Hermitian (currently makes no difference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414ffcc669fba4ed0243a22f251bfcd15a1074f4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is the adjacency matrix of the array to be plotted and &lt;var&gt;xy&lt;/var&gt; is an &lt;var&gt;n&lt;/var&gt;-by-2 matrix containing the coordinates of the nodes of the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1172e20d6fad08587262e14c8e3aa15b8e1a8b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is the matrix of the linear system and it must be square. &lt;var&gt;A&lt;/var&gt; can be passed as a matrix, function handle, or inline function &lt;code&gt;Afun&lt;/code&gt; such that &lt;code&gt;Afun&amp;nbsp;(x,&amp;nbsp;&quot;notransp&quot;)&amp;nbsp;=&amp;nbsp;A&amp;nbsp;*&amp;nbsp;x&lt;/code&gt; and &lt;code&gt;Afun&amp;nbsp;(x,&amp;nbsp;&quot;transp&quot;)&amp;nbsp;=&amp;nbsp;A'&amp;nbsp;*&amp;nbsp;x&lt;/code&gt;. Additional parameters to &lt;code&gt;Afun&lt;/code&gt; may be passed after &lt;var&gt;x0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05505191eff5d0385e02f0166443b140826031ae" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is the matrix of the linear system and it must be square. &lt;var&gt;A&lt;/var&gt; can be passed as a matrix, function handle, or inline function &lt;code&gt;Afun&lt;/code&gt; such that &lt;code&gt;Afun(x) = A * x&lt;/code&gt;. Additional parameters to &lt;code&gt;Afun&lt;/code&gt; may be passed after &lt;var&gt;x0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b888b17ea20f41c395ceffb642a4b2fc5a52fd5e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is upper Hessenberg (currently makes no difference)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd13d903c1194fdf6383215c16aa7330877f86db" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;A&lt;/var&gt; is upper triangular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429d577e6e62c37657a2f71ce85331dbb4378bf9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;C&lt;/var&gt; contains the points of the Voronoi facets. The list &lt;var&gt;F&lt;/var&gt; contains, for each facet, the indices of the Voronoi points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85335ee8c2a4a39c9b379d1e9bc5c7ad24c42e8f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;M1&lt;/var&gt;, &lt;var&gt;M2&lt;/var&gt; are the preconditioners. The preconditioner &lt;var&gt;M&lt;/var&gt; is given as &lt;code&gt;&lt;var&gt;M&lt;/var&gt; = &lt;var&gt;M1&lt;/var&gt; * &lt;var&gt;M2&lt;/var&gt;&lt;/code&gt;. Both &lt;var&gt;M1&lt;/var&gt; and &lt;var&gt;M2&lt;/var&gt; can be passed as a matrix or as a function handle or inline function &lt;code&gt;g&lt;/code&gt; such that &lt;code&gt;g&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;,&amp;nbsp;&quot;notransp&quot;)&amp;nbsp;=&amp;nbsp;&lt;var&gt;M1&lt;/var&gt;&amp;nbsp;\&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;g&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;,&amp;nbsp;&quot;notransp&quot;)&amp;nbsp;=&amp;nbsp;&lt;var&gt;M2&lt;/var&gt;&amp;nbsp;\&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;g&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;,&amp;nbsp;&quot;transp&quot;)&amp;nbsp;=&amp;nbsp;&lt;var&gt;M1&lt;/var&gt;'&amp;nbsp;\&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;g&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;,&amp;nbsp;&quot;transp&quot;)&amp;nbsp;=&amp;nbsp;&lt;var&gt;M2&lt;/var&gt;'&amp;nbsp;\&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;. If &lt;var&gt;M1&lt;/var&gt; is omitted or empty, then preconditioning is not applied. The preconditioned system is theoretically equivalent to applying the &lt;code&gt;bicg&lt;/code&gt; method to the linear system &lt;code&gt;inv (&lt;var&gt;M1&lt;/var&gt;) * A * inv (&lt;var&gt;M2&lt;/var&gt;) * &lt;var&gt;y&lt;/var&gt; = inv
(&lt;var&gt;M1&lt;/var&gt;) * &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;inv (&lt;var&gt;M2'&lt;/var&gt;) * A' * inv (&lt;var&gt;M1'&lt;/var&gt;) * &lt;var&gt;z&lt;/var&gt; =
inv (&lt;var&gt;M2'&lt;/var&gt;) * &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; and then setting &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = inv (&lt;var&gt;M2&lt;/var&gt;) * &lt;var&gt;y&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d3b34c37a63dc80f6f8cedc871ccd63df8b2fa" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;R1&lt;/var&gt;&amp;rsquo;*&lt;var&gt;R1&lt;/var&gt; = &lt;var&gt;R&lt;/var&gt;&amp;rsquo;*&lt;var&gt;R&lt;/var&gt; + &lt;var&gt;u&lt;/var&gt;*&lt;var&gt;u&lt;/var&gt;&amp;rsquo; if &lt;var&gt;op&lt;/var&gt; is &lt;code&gt;&quot;+&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5028ce4fcd9ccb7616138339ba183845ef20503a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;R1&lt;/var&gt;&amp;rsquo;*&lt;var&gt;R1&lt;/var&gt; = &lt;var&gt;R&lt;/var&gt;&amp;rsquo;*&lt;var&gt;R&lt;/var&gt; - &lt;var&gt;u&lt;/var&gt;*&lt;var&gt;u&lt;/var&gt;&amp;rsquo; if &lt;var&gt;op&lt;/var&gt; is &lt;code&gt;&quot;-&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aaff94262ffb21302e3f2f419421935d99f7f75" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;R_j&lt;/var&gt; must be specified in order. A placeholder of 1 may be used for dimensions which do not need replication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ca2cd5cfe38f18b7eec1a1e089c411366105c4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;S&lt;/var&gt; is a real or complex sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b84ad7252fab5d01320f5fd99911b25eded45c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;T&lt;/var&gt; is typically the output of a Delaunay triangulation of a 3-D set of points. Every row of &lt;var&gt;T&lt;/var&gt; contains four indices into the n-by-3 matrix &lt;var&gt;X&lt;/var&gt; of the vertices of a tetrahedron. Every row in &lt;var&gt;X&lt;/var&gt; represents one point in 3-D space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a1e6626004dca67d180deead7408f4d1b260c0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; are the lower and upper limits of integration. Both limits must be finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30106ebf49ff3dbca209f4b93ed4a2e54d35af81" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; are the lower and upper limits of integration. Either or both limits may be infinite or contain weak end singularities. If either or both limits are complex, &lt;code&gt;integral&lt;/code&gt; will perform a straight line path integral. Alternatively, a complex domain path can be specified using the &lt;code&gt;&quot;Waypoints&quot;&lt;/code&gt; option (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956ee32b7829335c408e593544f0c9a716520a94" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; are the lower and upper limits of integration. Either or both limits may be infinite or contain weak end singularities. Variable transformation will be used to treat any infinite intervals and weaken the singularities. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41881e30cbfaf78fdb5e7572344db5bb12180ad1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; are the lower and upper limits of integration. Either or both limits may be infinite. &lt;code&gt;quadcc&lt;/code&gt; handles an infinite limit by substituting the variable of integration with &lt;code&gt;x = tan (pi/2*u)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830eaf6ac1e3377427802dafa2bf76cc3d801522" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;a&lt;/var&gt; and &lt;var&gt;b&lt;/var&gt; are the lower and upper limits of integration. Either or both may be infinite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e5ac7e00f1641c4578fada6c78cdae60748d45" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;a&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876e647399e2c7a5ab0e9473f435381a3a05d0a5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;af&lt;/var&gt; is a function of the form &lt;code&gt;y = af (x)&lt;/code&gt; where the required return value of &lt;var&gt;af&lt;/var&gt; is determined by the value of &lt;var&gt;sigma&lt;/var&gt;. The four possible forms are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c371baf2b1a3301ecd94afefa90a1e98d67db0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;attributes&lt;/var&gt; must be a cell array with names of checks for &lt;var&gt;A&lt;/var&gt;. Some of them require an additional value to be supplied right after the name (see details for each below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509ecefda05b18b3b3fbd5ffb4aceed8ba9798e1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;b&lt;/var&gt; is the right hand side vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2db8cef6c4d0eb0e28351d08e0b142bcb45b81" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;b&lt;/var&gt; is the right-hand side vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5104ee03129abf7c22b76011fddfffbc4f6c9b23" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;b&lt;/var&gt; is the right-hand side vector. It must be a column vector with the same number of rows as &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a1c2b905b95afc59a5d185fda7717e9f28b4f4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;bigax&lt;/var&gt; is a hidden axes object that surrounds the other axes, such that the commands &lt;code&gt;xlabel&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt;, etc., will be associated with this hidden axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b2b7d4e54a013df0bf7eb00d03182273b686f5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;breaks&lt;/var&gt; must be a vector of strictly increasing values. The number of intervals is given by &lt;code&gt;&lt;var&gt;ni&lt;/var&gt; = length (&lt;var&gt;breaks&lt;/var&gt;) - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc832735dbf957168138d40c39b1ca5cfb6fda07" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;c&lt;/var&gt; and &lt;var&gt;d&lt;/var&gt; must be real matrices, and &lt;var&gt;c&lt;/var&gt; must be symmetric and positive definite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a8ca422a2cf9637cc516bd0f96c864265afc99" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;c&lt;/var&gt; and &lt;var&gt;d&lt;/var&gt; must be real matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddfe7a40040b64d6ee8280585360454925f36400" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;c&lt;/var&gt; is a vector of condition numbers for the eigenvalues of &lt;var&gt;a&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f631418e3c9b912fca1c7c2df0bd3cd6702f9c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;c&lt;/var&gt; is an &lt;var&gt;n&lt;/var&gt;-by-&lt;var&gt;n&lt;/var&gt; matrix whose values correspond to the greatest common divisor of its coordinate values, i.e., &lt;var&gt;c&lt;/var&gt;(i,j) correspond &lt;code&gt;gcd (i, j)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee583669faafd99d455bf9632644f12fb423b13" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;c&lt;/var&gt;, if given, is the constant of integration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f946d21823940ee0576519d4e7b4051bccf460" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;class&lt;/var&gt; must be one of the built-in numeric classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7938000ab8c266cc54b96ee1223c20f5d31320dc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;classes&lt;/var&gt; must be a cell array of strings (an empty cell array is allowed) with the name of classes (remember that a class name is case sensitive). In addition to the class name, the following categories names are also valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbffe106dc9bc15ae76c50f6a9224d1b3c4d41b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;classname&lt;/var&gt; may also be one of the following class categories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1dd16f37136914072017dc4627955f15a125a8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;classname&lt;/var&gt; may be a Java object representing a class or a string containing the fully qualified class name. The size of the object may also be specified with individual integer arguments &lt;var&gt;m&lt;/var&gt;, &lt;var&gt;n&lt;/var&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10171289786bbd063d991bb65d6592662e712780" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;clspath&lt;/var&gt; may either be a directory where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9c831bf27ef7fdb5d253441b91e04af2662181" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;cmember&lt;/var&gt; is an optional vector of length &lt;em&gt;n&lt;/em&gt;. It defines the constraints on the column ordering. If &lt;code&gt;&lt;var&gt;cmember&lt;/var&gt;(j) = &lt;var&gt;c&lt;/var&gt;&lt;/code&gt;, then column &lt;var&gt;j&lt;/var&gt; is in constraint set &lt;var&gt;c&lt;/var&gt; (&lt;var&gt;c&lt;/var&gt; must be in the range 1 to n). In the output permutation &lt;var&gt;p&lt;/var&gt;, all columns in set 1 appear first, followed by all columns in set 2, and so on. &lt;code&gt;&lt;var&gt;cmember&lt;/var&gt; = ones (1,n)&lt;/code&gt; if not present or empty. &lt;code&gt;ccolamd (&lt;var&gt;S&lt;/var&gt;, [], 1 : n)&lt;/code&gt; returns &lt;code&gt;1 : n&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151123628c26a609c017f975e6d484ada5d03ef9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;cmember&lt;/var&gt; is an optional vector of length n. It defines the constraints on the ordering. If &lt;code&gt;&lt;var&gt;cmember&lt;/var&gt;(j) = &lt;var&gt;S&lt;/var&gt;&lt;/code&gt;, then row/column j is in constraint set &lt;var&gt;c&lt;/var&gt; (&lt;var&gt;c&lt;/var&gt; must be in the range 1 to n). In the output permutation &lt;var&gt;p&lt;/var&gt;, rows/columns in set 1 appear first, followed by all rows/columns in set 2, and so on. &lt;code&gt;&lt;var&gt;cmember&lt;/var&gt; = ones (1,n)&lt;/code&gt; if not present or empty. &lt;code&gt;csymamd (&lt;var&gt;S&lt;/var&gt;,[],1:n)&lt;/code&gt; returns &lt;code&gt;1:n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2370f514d6e3218f965e84b0302b5d339be9de14" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;code&lt;/var&gt; must be in the form of a string that is passed to the Octave interpreter via the &lt;code&gt;evalin&lt;/code&gt; function, i.e., a (quoted) string constant or a string variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16da80c402d3bee11dd19dfd051e2aa112bd22a4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;coefs&lt;/var&gt; may also be a multi-dimensional array, specifying a vector-valued or array-valued polynomial. In that case the polynomial order &lt;var&gt;m&lt;/var&gt; is defined by the length of the last dimension of &lt;var&gt;coefs&lt;/var&gt;. The size of first dimension(s) are given by the scalar or vector &lt;var&gt;d&lt;/var&gt;. If &lt;var&gt;d&lt;/var&gt; is not given it is set to &lt;code&gt;1&lt;/code&gt;. In this case &lt;code&gt;&lt;var&gt;p&lt;/var&gt;(&lt;var&gt;r&lt;/var&gt;, &lt;var&gt;i&lt;/var&gt;, :)&lt;/code&gt; contains the coefficients for the &lt;var&gt;r&lt;/var&gt;-th polynomial defined on interval &lt;var&gt;i&lt;/var&gt;. In any case &lt;var&gt;coefs&lt;/var&gt; is reshaped to a 2-D matrix of size &lt;code&gt;[&lt;var&gt;ni&lt;/var&gt;*prod(&lt;var&gt;d&lt;/var&gt;) &lt;var&gt;m&lt;/var&gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cae641799e7e14cc2c3d7294a07dbd3d5d6fd1c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;collapsedelimiters&lt;/var&gt; which may take the value of &lt;code&gt;true&lt;/code&gt; (default) or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a424eec8bb82d75584e96e16d4813c59d18e3240" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;condition&lt;/var&gt; is an expression that controls what the rest of the statement will do. The &lt;var&gt;then-body&lt;/var&gt; is executed only if &lt;var&gt;condition&lt;/var&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95bf8e6958584254e2ee71cc052d0bdf99857093" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;condition&lt;/var&gt; is any Octave expression that can be evaluated in the code context that exists at the breakpoint. When the breakpoint is encountered, &lt;var&gt;condition&lt;/var&gt; will be evaluated, and execution will stop if &lt;var&gt;condition&lt;/var&gt; is true. If &lt;var&gt;condition&lt;/var&gt; cannot be evaluated, for example because it refers to an undefined variable, an error will be thrown. Expressions with side effects (such as &lt;code&gt;y++ &amp;gt; 1&lt;/code&gt;) will alter variables, and should generally be avoided. Conditions containing quotes (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e80c9d9cdbbcaf68977fc4714b7c44a8b27172" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;copies&lt;/var&gt; is an optional input indicating whether a new figure should be created (&lt;code&gt;&quot;new&quot;&lt;/code&gt;) or whether an existing figure may be reused (&lt;code&gt;&quot;reuse&quot;&lt;/code&gt;). An existing figure may be reused if the &lt;code&gt;&quot;FileName&quot;&lt;/code&gt; property matches the specified input &lt;var&gt;filename&lt;/var&gt;. When a figure is reused it becomes the active figure and is shown on top of other figures. If the figure was offscreen, it is re-positioned to be onscreen. The default value for &lt;var&gt;copies&lt;/var&gt; is &lt;code&gt;&quot;new&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65178232aa216fd9961edad960d61e2b8d6e676c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;count&lt;/var&gt; is a vector with the lengths of each repeated value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae415b052f0c0fd7003de5ac51a813c4ea0f43d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;count&lt;/var&gt; is the number of nonzeros in each column, &lt;var&gt;mean&lt;/var&gt; is the mean of the nonzeros in each column, and &lt;var&gt;var&lt;/var&gt; is the variance of the nonzeros in each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d0eeff6780a5c6c72bb2520df85a815ed06f9b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;d&lt;/var&gt; is a serial date number or a date string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0565e44056fdf46c450ab96aabb25b9a0f82a2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;data&lt;/var&gt; must be a non-singleton 3-dimensional matrix. The smoothed data from this matrix is returned in &lt;var&gt;smoothed_data&lt;/var&gt; which is of the same size as &lt;var&gt;data&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581eb3094cddb8ff407f9d42158a4c5cfc97d0c6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;data&lt;/var&gt; must be a single object which means it is usually preferable for it to be a data container such as a cell array or struct so that additional data items can be added easily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0db8eda9259830a20ef66d4bb9f116244c6fd79" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;data&lt;/var&gt;/index.html</source>
          <target state="translated">&lt;var&gt;data&lt;/var&gt;/index.html</target>
        </trans-unit>
        <trans-unit id="135cb3f30fc6f6d099b894ea3c53a53b0abd0cc8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;date&lt;/var&gt; is a serial date number (see &lt;code&gt;datenum&lt;/code&gt;), a date vector (see &lt;code&gt;datevec&lt;/code&gt;), or a string or cell array of strings. In the latter case, it is passed to &lt;code&gt;datevec&lt;/code&gt; to guess the input date format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bafd8673b6585f94f7e2715b27e3dd09e292a29" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;delimiter&lt;/var&gt; The character separating columns of data. Use &lt;code&gt;\t&lt;/code&gt; for tab. (Only valid for ASCII files)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760e1f09c39e856d204d3a9c755962c2c739e6d1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;delimitertype&lt;/var&gt; which may take the value of &lt;code&gt;&quot;simple&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;regularexpression&quot;&lt;/code&gt;. A simple delimiter matches the text exactly as written. Otherwise, the syntax for regular expressions outlined in &lt;code&gt;regexp&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e0373874e0029e1dc4a2f06d5b55eaa9a9e339" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;dialog_name&lt;/var&gt; can be used to customize the dialog title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdafa113e4955fcc5a59fdbddfb4a943d90d9bbb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;dialog_name&lt;/var&gt; can be used to customize the dialog title. If &lt;var&gt;default_file&lt;/var&gt; is given it is preselected in the GUI dialog. If, in addition, a path is given it is also used as current path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2626843b4679722790eadf61986804932ab753da" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;dialog_name&lt;/var&gt; may be used to customize the dialog title.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f752659507732d96b0deac83172b062cca84084" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;dim&lt;/var&gt; can be larger than the dimensions of the N-D array objects and the result will thus have &lt;var&gt;dim&lt;/var&gt; dimensions as the following example shows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2ef8fd96330b73342de96f0ec69ba40cf71756" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;directory&lt;/var&gt; is subject to shell expansion if it contains any wildcard characters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d64632be38ded4b00ee2777f1713d21eda725f9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;eigest&lt;/var&gt; returns the estimate for the smallest &lt;code&gt;&lt;var&gt;eigest&lt;/var&gt;(1)&lt;/code&gt; and largest &lt;code&gt;&lt;var&gt;eigest&lt;/var&gt;(2)&lt;/code&gt; eigenvalues of the preconditioned matrix &lt;code&gt;&lt;var&gt;P&lt;/var&gt;&amp;nbsp;=&amp;nbsp;&lt;var&gt;m&lt;/var&gt;&amp;nbsp;\&amp;nbsp;&lt;var&gt;A&lt;/var&gt;&lt;/code&gt;. In particular, if no preconditioning is used, the estimates for the extreme eigenvalues of &lt;var&gt;A&lt;/var&gt; are returned. &lt;code&gt;&lt;var&gt;eigest&lt;/var&gt;(1)&lt;/code&gt; is an overestimate and &lt;code&gt;&lt;var&gt;eigest&lt;/var&gt;(2)&lt;/code&gt; is an underestimate, so that &lt;code&gt;&lt;var&gt;eigest&lt;/var&gt;(2) / &lt;var&gt;eigest&lt;/var&gt;(1)&lt;/code&gt; is a lower bound for &lt;code&gt;cond (&lt;var&gt;P&lt;/var&gt;, 2)&lt;/code&gt;, which nevertheless in the limit should theoretically be equal to the actual value of the condition number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacb73bee4299d86acad50aa60345f910d618c74" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;err&lt;/var&gt; (scalar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e4adfd0cb7a39ad416d9ff233074a633e9c1fd" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;err&lt;/var&gt; (vector or matrix)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaad00126e99c7a5b49553d58c84ae8dc90108f9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;err&lt;/var&gt; contains an estimate of the error in the solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8263190f5a4dd4eb53a1e0c93ea4e840e70af8be" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;err&lt;/var&gt; is a structure that must contain at least the &lt;code&gt;&quot;message&quot;&lt;/code&gt; and &lt;code&gt;&quot;identifier&quot;&lt;/code&gt; fields. &lt;var&gt;err&lt;/var&gt; can also contain a field &lt;code&gt;&quot;stack&quot;&lt;/code&gt; that gives information on the assumed location of the error. Typically &lt;var&gt;err&lt;/var&gt; is returned from &lt;code&gt;lasterror&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f3d83967d91781dd2a05d768a1a5e3ea10faf40" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;err&lt;/var&gt; is an approximate bound on the error in the integral &lt;code&gt;abs (&lt;var&gt;q&lt;/var&gt; - &lt;var&gt;I&lt;/var&gt;)&lt;/code&gt;, where &lt;var&gt;I&lt;/var&gt; is the exact value of the integral.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81fa98b663aab47fc5d73f21efb270f70780f73" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;err&lt;/var&gt; is an estimate of the absolute integration error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13031b42513b4c387e0e7601a7c23ca45165cf4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;event&lt;/var&gt; contains event data that will be ignored. This construct facilitates a call to movegui from a callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cb0a2e1633cd00082b07d1d8332af2bbadba22" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;extrap&lt;/var&gt; is a scalar number. It replaces values beyond the endpoints with &lt;var&gt;extrap&lt;/var&gt;. Note that if &lt;var&gt;extrap&lt;/var&gt; is used, &lt;var&gt;method&lt;/var&gt; must be specified as well. If &lt;var&gt;extrap&lt;/var&gt; is omitted and the &lt;var&gt;method&lt;/var&gt; is &lt;code&gt;&quot;spline&quot;&lt;/code&gt;, then the extrapolated values of the &lt;code&gt;&quot;spline&quot;&lt;/code&gt; are used. Otherwise the default &lt;var&gt;extrap&lt;/var&gt; value for any other &lt;var&gt;method&lt;/var&gt; is &lt;code&gt;&quot;NA&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4ccf63a43bb1a21087e858c17ab7621a5c145" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;extrapval&lt;/var&gt; is a scalar number. It replaces values beyond the endpoints with &lt;var&gt;extrapval&lt;/var&gt;. Note that if &lt;var&gt;extrapval&lt;/var&gt; is used, &lt;var&gt;method&lt;/var&gt; must be specified as well. If &lt;var&gt;extrapval&lt;/var&gt; is omitted and the &lt;var&gt;method&lt;/var&gt; is &lt;code&gt;&quot;spline&quot;&lt;/code&gt;, then the extrapolated values of the &lt;code&gt;&quot;spline&quot;&lt;/code&gt; are used. Otherwise the default &lt;var&gt;extrapval&lt;/var&gt; value for any other &lt;var&gt;method&lt;/var&gt; is &lt;code&gt;&quot;NA&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb4ea450c37cdbd92f866984ce1c8355592c9d7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; can be an integer which corresponds to one of the codes in the table below, or a date format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a79399f93708f25dc2a7aadeb0420c1ab895afe" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or a string containing the name of the function to evaluate. The function must have the form &lt;code&gt;y =
f (x)&lt;/code&gt; where &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;x&lt;/var&gt; are scalars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73c77cb056d279ebe9de4f254ce4a99422884b4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. &lt;code&gt;quadv&lt;/code&gt; is a vectorized version of &lt;code&gt;quad&lt;/code&gt; and the function defined by &lt;var&gt;f&lt;/var&gt; must accept a scalar or vector as input and return a scalar, vector, or array as output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb6844b5ff090819b5ed684c8d63ec6307435e9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. The function &lt;var&gt;f&lt;/var&gt; must be capable of accepting two column-vector arguments of equal length, or one column vector argument and a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f488fea77fbef6606e29303667a1fb24c2d4e6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. The function &lt;var&gt;f&lt;/var&gt; must be of the form &lt;em&gt;z = f(x,y)&lt;/em&gt; where &lt;var&gt;x&lt;/var&gt; is a vector and &lt;var&gt;y&lt;/var&gt; is a scalar. It should return a vector of the same length and orientation as &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38642b450907aa1256eb8e2b332ed4bae102b20a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. The function &lt;var&gt;f&lt;/var&gt; must be vectorized and must return a vector of output values if given a vector of input values. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5049a4a0955d245c613a7664e17508331028f8de" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. The function &lt;var&gt;f&lt;/var&gt; must be vectorized and return a vector of output values when given a vector of input values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfee7a5f2ca77885e8f4fbc38a223d2ea826b4d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. The function &lt;var&gt;f&lt;/var&gt; must have the form &lt;em&gt;w = f(x,y,z)&lt;/em&gt; where either &lt;var&gt;x&lt;/var&gt; or &lt;var&gt;y&lt;/var&gt; is a vector and the remaining inputs are scalars. It should return a vector of the same length and orientation as &lt;var&gt;x&lt;/var&gt; or &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11db8bbb3178b953e47028cde97d446cd23ac51d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate. The function &lt;var&gt;f&lt;/var&gt; must have the form &lt;em&gt;z = f(x,y)&lt;/em&gt; where &lt;var&gt;x&lt;/var&gt; is a vector and &lt;var&gt;y&lt;/var&gt; is a scalar. It should return a vector of the same length and orientation as &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec254cdf1731620ab77e2570ddbbb829f6db12e7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is a string, inline function, or function handle with two arguments defining the function. By default the plot is over the meshed domain &lt;code&gt;-2*pi &amp;lt;= &lt;var&gt;x&lt;/var&gt; | &lt;var&gt;y&lt;/var&gt; &amp;lt;= 2*pi&lt;/code&gt; with 60 points in each dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99bec80686c6fe06074e223b47ca75822fe1b58" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is an FTP object returned by the &lt;code&gt;ftp&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b329567b2f80c68d3c1c3532da57eca96bca4e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is an FTP object returned by the ftp function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f5ae1dc05cc1c9dd0f9cf9c2e9edb9dd4c6349" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; is the format string used to interpret date strings (see &lt;code&gt;datestr&lt;/code&gt;). If &lt;var&gt;date&lt;/var&gt; is a string, but no format is specified, then a relatively slow search is performed through various formats. It is always preferable to specify the format string &lt;var&gt;f&lt;/var&gt; if it is known. Formats which do not specify a particular time component will have the value set to zero. Formats which do not specify a date will default to January 1st of the current year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf6e4e049452562af9d9af4e38b17974ef3f1b4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;f&lt;/var&gt; must be one of &lt;code&gt;&quot;year&quot;&lt;/code&gt;, &lt;code&gt;&quot;month&quot;&lt;/code&gt;, &lt;code&gt;&quot;day&quot;&lt;/code&gt;, &lt;code&gt;&quot;hour&quot;&lt;/code&gt;, &lt;code&gt;&quot;minute&quot;&lt;/code&gt;, &lt;code&gt;&quot;second&quot;&lt;/code&gt;, or &lt;code&gt;&quot;millisecond&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91057aeb2b81623e2a1fb26039836caeddf04dda" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fcn&lt;/var&gt; can be a function handle, a string or a cell array whose first element is a function handle. If &lt;var&gt;fcn&lt;/var&gt; is a function handle, the corresponding function should accept at least 2 arguments, that will be set to the object handle and the empty matrix respectively. If &lt;var&gt;fcn&lt;/var&gt; is a string, it must be any valid octave expression. If &lt;var&gt;fcn&lt;/var&gt; is a cell array, the first element must be a function handle with the same signature as described above. The next elements of the cell array are passed as additional arguments to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08172ace42446c853176ae02a0ec4e6b7117a9f9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fcn&lt;/var&gt; should accept a vector (array) defining the unknown variables, and return a vector of left-hand sides of the equations. Right-hand sides are defined to be zeros. In other words, this function attempts to determine a vector &lt;var&gt;x&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;fcn&lt;/var&gt; (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; gives (approximately) all zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5822b5a23f98c36ca78d511921618168819ba59" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fcn&lt;/var&gt; should accept a vector (array) defining the unknown variables, and return the objective function value, optionally with gradient. &lt;code&gt;fminunc&lt;/code&gt; attempts to determine a vector &lt;var&gt;x&lt;/var&gt; such that &lt;code&gt;&lt;var&gt;fcn&lt;/var&gt; (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; is a local minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b10ceaa9b5b7d94e6eb49e9face3b0bbdee51b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; may contain globbing patterns such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a5cacdf1ebefa91b182a43a075ecb416a853ba" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; should be a filename or a file id given by &lt;code&gt;fopen&lt;/code&gt;. In the latter case, the file is read until end of file is reached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1028cd2fcd60a28797601bfe5f93c6a9bd1e29ba" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt; should be a filename or a writable file ID given by &lt;code&gt;fopen&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6bc7017776fbeee9f4ad2cd1f06468c8447a909" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;file&lt;/var&gt;.m</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt;.m</target>
        </trans-unit>
        <trans-unit id="7517fee9c50dafa9947a652065737e85edab8ab3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt; defines the name of the output file. If the filename has no suffix then one is inferred from the specified device and appended to the filename. When neither a filename nor the &lt;code&gt;&quot;-RGBImage&quot;&lt;/code&gt; option is present, the output is sent to the printer. The various options and filename arguments may be given in any order, except for the figure handle argument &lt;var&gt;hfig&lt;/var&gt; which must be first if it is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc22fa6dd8b0bc86cfb8ba6830bc00fb1f9c2c4a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt;.(eps|pdf)</source>
          <target state="translated">&lt;var&gt;filename&lt;/var&gt;.(eps|pdf)</target>
        </trans-unit>
        <trans-unit id="3439b9e353bd3e9cf3b274bbcc8244028d6703f7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt;.(ps|eps|pdf)</source>
          <target state="translated">&lt;var&gt;filename&lt;/var&gt;.(ps|eps|pdf)</target>
        </trans-unit>
        <trans-unit id="6918009c251da10b7fbb1ec8be92a68cd555c7c5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;filename&lt;/var&gt;.tex</source>
          <target state="translated">&lt;var&gt;filename&lt;/var&gt;.tex</target>
        </trans-unit>
        <trans-unit id="1c4030638cec07a5e1a2bb5f96215bf7f80ed5a1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;files&lt;/var&gt; is a character array or cell array of strings. Shell wildcards in the filename such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2c3446661e22b3f80eefbf6ed51350a1035d70" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fixed_y0&lt;/var&gt; is a vector which specifies the components of &lt;var&gt;y0&lt;/var&gt; to hold fixed. Choose a maximum of &lt;code&gt;length (&lt;var&gt;y0&lt;/var&gt;)&lt;/code&gt; components between &lt;var&gt;fixed_y0&lt;/var&gt; and &lt;var&gt;fixed_yp0&lt;/var&gt; as fixed values. Set &lt;var&gt;fixed_y0&lt;/var&gt;(i) component to 1 if you want to fix the value of &lt;var&gt;y0&lt;/var&gt;(i). Set &lt;var&gt;fixed_y0&lt;/var&gt;(i) component to 0 if you want to allow the value of &lt;var&gt;y0&lt;/var&gt;(i) to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7262b34c22dccfe56c26f9f20cc1c45c07ce56" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fixed_yp0&lt;/var&gt; is a vector which specifies the components of &lt;var&gt;yp0&lt;/var&gt; to hold fixed. Choose a maximum of &lt;code&gt;length (&lt;var&gt;yp0&lt;/var&gt;)&lt;/code&gt; components between &lt;var&gt;fixed_y0&lt;/var&gt; and &lt;var&gt;fixed_yp0&lt;/var&gt; as fixed values. Set &lt;var&gt;fixed_yp0&lt;/var&gt;(i) component to 1 if you want to fix the value of &lt;var&gt;yp0&lt;/var&gt;(i). Set &lt;var&gt;fixed_yp0&lt;/var&gt;(i) component to 0 if you want to allow the value of &lt;var&gt;yp0&lt;/var&gt;(i) to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289547b0edcb926968f15ea8fd71679adf7c750f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flag&lt;/var&gt; indicates the exit status:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98fafaf87c565cb25254ed42fe8eb9e523c20464" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flag&lt;/var&gt; reports on the convergence. &lt;code&gt;&lt;var&gt;flag&lt;/var&gt; = 0&lt;/code&gt; means the solution converged and the tolerance criterion given by &lt;var&gt;tol&lt;/var&gt; is satisfied. &lt;code&gt;&lt;var&gt;flag&lt;/var&gt; = 1&lt;/code&gt; means that the &lt;var&gt;maxit&lt;/var&gt; limit for the iteration count was reached. &lt;code&gt;&lt;var&gt;flag&lt;/var&gt; = 3&lt;/code&gt; reports a &lt;code&gt;pcr&lt;/code&gt; breakdown, see [1] for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ab678bae5ed51a347487a6dfefc82c10626328" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flag&lt;/var&gt; reports on the convergence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91553915aae5df0bb7a4949642de46ee9e869029" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flag&lt;/var&gt; returns 0 if the algorithm has succesfully converged, and 1 otherwise. The test for convergence is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac2117ff89fc800e84b5ecd61e92f021733757d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flag&lt;/var&gt; will take one of the values &lt;code&gt;&quot;Not installed&quot;&lt;/code&gt;, &lt;code&gt;&quot;Loaded&quot;&lt;/code&gt;, or &lt;code&gt;&quot;Not loaded&quot;&lt;/code&gt; for each of the named packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a91b6c625e1bc899aed0f207be6442de7da3a61" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;flt&lt;/var&gt; contains a (list of) file filter string(s) in one of the following formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784cd95e7146140a2370556b0c672da37ded2ba7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fn&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb70210ef2d69c8a8ac3c41c5d2a555ab65bb85a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fname&lt;/var&gt; The name of the file containing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02a0a59e3ae7868d2222ebcf248613dc011f8af3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;formats&lt;/var&gt; is a structure with information about each supported file format, or from a specific format &lt;var&gt;ext&lt;/var&gt;, the value displayed on the field &lt;var&gt;ext&lt;/var&gt;. It contains the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4c7adb1aa34a23ef6484d4e9b674cfb1befa50" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fun&lt;/var&gt; is a function handle, inline function, or string containing the name of the function that defines the ODE: &lt;code&gt;0 = f(t,y,yp)&lt;/code&gt;. The function must accept three inputs where the first is time &lt;var&gt;t&lt;/var&gt;, the second is the function value &lt;var&gt;y&lt;/var&gt; (a column vector), and the third is the derivative value &lt;var&gt;yp&lt;/var&gt; (a column vector).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bb33358c3dc0332bd9774ec2c351b9cead9ce4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fun&lt;/var&gt; is a function handle, inline function, or string containing the name of the function that defines the ODE: &lt;code&gt;y' = f(t,y)&lt;/code&gt;. The function must accept two inputs where the first is time &lt;var&gt;t&lt;/var&gt; and the second is a column vector of unknowns &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf8d0c42af3d59e961eb7c498e9dde980da39da" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fun&lt;/var&gt; is a function handle, inline function, or string containing the name of the function to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f48773dfe4e4d99d67964847fed01d33c72b8c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fun&lt;/var&gt; is a function handle. The function must accept three inputs where the first is time &lt;var&gt;t&lt;/var&gt;, the second is a column vector of unknowns &lt;var&gt;y&lt;/var&gt;, and the third is a column vector of unknowns &lt;var&gt;yp&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e57bc2021c045d676b690b4469b35cd896b2e00" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fun&lt;/var&gt; must be a function handle or name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacba33c8abbdd500263cbe004f072069ac65916" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;func&lt;/var&gt; is the name of a function on the current &lt;code&gt;path&lt;/code&gt;. When already in debug mode the &lt;var&gt;func&lt;/var&gt; argument can be omitted and the current function will be used. Breakpoints at subfunctions are set with the scope operator &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d93586ef4d032b9639d006612b572458dcff68" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;fx&lt;/var&gt;, &lt;var&gt;fy&lt;/var&gt;, and &lt;var&gt;fz&lt;/var&gt; are strings, inline functions, or function handles with one argument defining the function. By default the plot is over the domain &lt;code&gt;0 &amp;lt;= &lt;var&gt;t&lt;/var&gt; &amp;lt;= 2*pi&lt;/code&gt; with 500 points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c59ab36dfa30f8c3352e7b2a124bde0ca298c8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; is a figure handle, or a handle to a graphics object. In the latter case, its parent figure will be used. If unspecified, &lt;var&gt;h&lt;/var&gt; will be set to the handle of the relevant figure if a callback is being executed (&lt;code&gt;gcbf&lt;/code&gt;), otherwise it will be set to the handle of the current figure (&lt;code&gt;gcf&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a8567c305452385981e26f72c44e475cde76ca7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; may also be a matrix of handles in which case a logical array is returned that is true where the elements of &lt;var&gt;h&lt;/var&gt; are graphics handles and false where they are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b425e246fb1b3127f741076eba258aaafce922c0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; may also be a matrix of handles in which case a logical array is returned that is true where the elements of &lt;var&gt;h&lt;/var&gt; are handles to graphics or Java objects and false where they are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fd5b48fd897dc33f505b6d2e99813156264573" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; may also be a vector of graphics handles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fa79f95c2e7c3e5a4d6cd9ee06a0976cf8cfcd" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; may also be a vector of graphics handles. If no second argument &lt;var&gt;name&lt;/var&gt; is given then &lt;code&gt;getappdata&lt;/code&gt; returns a structure, &lt;var&gt;appdata&lt;/var&gt;, whose fields correspond to the appdata properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137b8cf9a150651a8671657ad3c743eedd14c202" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; may also be a vector of graphics handles. If the application data with the specified &lt;var&gt;name&lt;/var&gt; does not exist, it is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ddeaa97e398acd0004ec82348bef51ca2930a0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;h&lt;/var&gt; may also be a vector of graphics handles. Multiple application data names may be supplied to delete several properties at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c32d9e4bfa78adf1018d1ab150b8e3540a171b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;handle&lt;/var&gt; may be a scalar or vector of graphic handles to delete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f12fed7f9a2dc612c3ab51e1bf60c960603471" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;header_rows&lt;/var&gt; The number of header rows before the data begins. (Only valid for ASCII files)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea35ad099f08f8572cd57c37fbe7ca092a108f2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;i&lt;/var&gt;, &lt;var&gt;j&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961f46d2aa4cc11861f2bb06d6e7aedf517a509" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;ier&lt;/var&gt; contains an integer error code (0 indicates a successful integration).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9052d3afb390d71cbe6f4f7bd042e54ffdc59585" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;index&lt;/var&gt; may also be a vector. In this case, the new axes will enclose the grid locations specified. The first demo illustrates this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728a2298e96fa00a57145519a93a54795697b7a6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;info&lt;/var&gt; may be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc80ff48dbd6330472856b08283b8162859356e1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;init&lt;/var&gt; contains the initial value for the unknowns. If it is a row vector then the solution &lt;var&gt;y&lt;/var&gt; will be a matrix in which each column is the solution for the corresponding initial value in &lt;var&gt;init&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3e40e149fb60100825b5c596e12598fc47a189" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;iter(1)&lt;/var&gt;: number of outer iterations, i.e., how many times the method restarted. (if &lt;var&gt;restart&lt;/var&gt; is empty or &lt;var&gt;N&lt;/var&gt;, then it is 1, if not 1 &amp;le; &lt;var&gt;iter(1)&lt;/var&gt; &amp;le; &lt;var&gt;maxit&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92df1ecf585b74c4f31c62b3da9fb966b68b168e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;iter(2)&lt;/var&gt;: the number of iterations performed before the restart, i.e., the method restarts when &lt;code&gt;&lt;var&gt;iter(2)&lt;/var&gt; = &lt;var&gt;restart&lt;/var&gt;&lt;/code&gt;. If &lt;var&gt;restart&lt;/var&gt; is empty or &lt;var&gt;N&lt;/var&gt;, then 1 &amp;le; &lt;var&gt;iter(2)&lt;/var&gt; &amp;le; &lt;var&gt;maxit&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425c93d443263f345d28527351dc9e0ac0152b6d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;iter&lt;/var&gt; indicates the iteration of &lt;var&gt;x&lt;/var&gt; which it was computed. Since the output &lt;var&gt;x&lt;/var&gt; corresponds to the minimal residual solution, the total number of iterations that the method performed is given by &lt;code&gt;length(resvec) - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddc68cebf4d1a43b5ef86ad1a68171dbe01552d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;iter&lt;/var&gt; is the actual number of iterations performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288aa5a68642d3caaa43ae23ff6ab3221b9d9813" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;iter&lt;/var&gt; is the iteration which &lt;var&gt;x&lt;/var&gt; is computed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e730d9f33e4a961efbffe0a37fb7b6d5aad569bb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;keys&lt;/var&gt; is an array of &lt;em&gt;unique&lt;/em&gt; keys for the map. The keys can be numeric scalars or strings. The type for numeric keys may be one of &lt;code&gt;&quot;double&quot;&lt;/code&gt;, &lt;code&gt;&quot;single&quot;&lt;/code&gt;, &lt;code&gt;&quot;int32&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint32&quot;&lt;/code&gt;, &lt;code&gt;&quot;int64&quot;&lt;/code&gt;, or &lt;code&gt;&quot;uint64&quot;&lt;/code&gt;. Other numeric or logical keys will be converted to &lt;code&gt;&quot;double&quot;&lt;/code&gt;. A single string key may be entered as is. Multiple string keys are entered as a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232b926c53afb986f9903a7c7483fce0d5f0757c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;knobs&lt;/var&gt; is an optional 1-element to 3-element input vector, with a default value of &lt;code&gt;[10 1 0]&lt;/code&gt;. Entries not present are set to their defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec84cbb3c0f16ff33dcce7ab1d8ae477660eb39" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;knobs&lt;/var&gt; is an optional 1-element to 5-element input vector, with a default value of &lt;code&gt;[0 10 10 1 0]&lt;/code&gt; if not present or empty. Entries not present are set to their defaults.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2177b88f77680b06147f847f04ee39815eb2d2cf" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;knobs&lt;/var&gt; is an optional one- to three-element input vector. If &lt;var&gt;S&lt;/var&gt; is m-by-n, then rows with more than &lt;code&gt;max(16,&lt;var&gt;knobs&lt;/var&gt;(1)*sqrt(n))&lt;/code&gt; entries are ignored. Columns with more than &lt;code&gt;max (16,&lt;var&gt;knobs&lt;/var&gt;(2)*sqrt(min(m,n)))&lt;/code&gt; entries are removed prior to ordering, and ordered last in the output permutation &lt;var&gt;p&lt;/var&gt;. Only completely dense rows or columns are removed if &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt;(1)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt;(2)&lt;/code&gt; are &amp;lt; 0, respectively. If &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt;(3)&lt;/code&gt; is nonzero, &lt;var&gt;stats&lt;/var&gt; and &lt;var&gt;knobs&lt;/var&gt; are printed. The default is &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt; = [10 10 0]&lt;/code&gt;. Note that &lt;var&gt;knobs&lt;/var&gt; differs from earlier versions of colamd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1842d27653fca6714ca12c45f29e0f87494eca16" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;knobs&lt;/var&gt; is an optional one- to two-element input vector. If &lt;var&gt;S&lt;/var&gt; is n-by-n, then rows and columns with more than &lt;code&gt;max (16,&lt;var&gt;knobs&lt;/var&gt;(1)*sqrt(n))&lt;/code&gt; entries are removed prior to ordering, and ordered last in the output permutation &lt;var&gt;p&lt;/var&gt;. No rows/columns are removed if &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt;(1) &amp;lt; 0&lt;/code&gt;. If &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt;(2)&lt;/code&gt; is nonzero, &lt;var&gt;stats&lt;/var&gt; and &lt;var&gt;knobs&lt;/var&gt; are printed. The default is &lt;code&gt;&lt;var&gt;knobs&lt;/var&gt; = [10 0]&lt;/code&gt;. Note that &lt;var&gt;knobs&lt;/var&gt; differs from earlier versions of &lt;code&gt;symamd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aba8ef09ca0019b91fb7bf112f7fee7b7c5d05" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;lambda&lt;/var&gt; is the diagonal matrix of eigenvalues of &lt;var&gt;a&lt;/var&gt;. The result is equivalent to calling &lt;code&gt;[&lt;var&gt;v&lt;/var&gt;, &lt;var&gt;lambda&lt;/var&gt;] = eig (&lt;var&gt;a&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b56b3d6440dcb2f9bbc977e8f57ae733f6273bf" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;lerr&lt;/var&gt;, &lt;var&gt;uerr&lt;/var&gt; (scalar)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6816e7778419437abf915b99807c9d13c1b88fc5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;lerr&lt;/var&gt;, &lt;var&gt;uerr&lt;/var&gt; (vector or matrix)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a739d5187b7848b939c8438cde226170f4a6c7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;line&lt;/var&gt; is the line number at which to break. If &lt;var&gt;line&lt;/var&gt; is not specified, it defaults to the first executable line in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb9ad5995467fe17bf44d34f342f20969d94b3f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;lower&lt;/var&gt; and &lt;var&gt;upper&lt;/var&gt; must be non-negative integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9e2d1e41306c09deec3a73adb11e32d3a339f2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;m&lt;/var&gt; is a HPD preconditioning matrix. For any decomposition &lt;code&gt;&lt;var&gt;m&lt;/var&gt; = &lt;var&gt;p1&lt;/var&gt; * &lt;var&gt;p2&lt;/var&gt;&lt;/code&gt; such that &lt;code&gt;inv&amp;nbsp;(&lt;var&gt;p1&lt;/var&gt;)&amp;nbsp;*&amp;nbsp;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;inv&amp;nbsp;(&lt;var&gt;p2&lt;/var&gt;)&lt;/code&gt; is HPD, the conjugate gradient method is formally applied to the linear system &lt;code&gt;inv&amp;nbsp;(&lt;var&gt;p1&lt;/var&gt;)&amp;nbsp;*&amp;nbsp;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;inv&amp;nbsp;(&lt;var&gt;p2&lt;/var&gt;)&amp;nbsp;*&amp;nbsp;&lt;var&gt;y&lt;/var&gt;&amp;nbsp;=&amp;nbsp;inv&amp;nbsp;(&lt;var&gt;p1&lt;/var&gt;)&amp;nbsp;*&amp;nbsp;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt;, with &lt;code&gt;&lt;var&gt;x&lt;/var&gt; = inv (&lt;var&gt;p2&lt;/var&gt;) * &lt;var&gt;y&lt;/var&gt;&lt;/code&gt; (split preconditioning). In practice, at each iteration of the conjugate gradient method a linear system with matrix &lt;var&gt;m&lt;/var&gt; is solved with &lt;code&gt;mldivide&lt;/code&gt;. If a particular factorization &lt;code&gt;&lt;var&gt;m&lt;/var&gt; = &lt;var&gt;m1&lt;/var&gt; * &lt;var&gt;m2&lt;/var&gt;&lt;/code&gt; is available (for instance, an incomplete Cholesky factorization of &lt;var&gt;a&lt;/var&gt;), the two matrices &lt;var&gt;m1&lt;/var&gt; and &lt;var&gt;m2&lt;/var&gt; can be passed and the relative linear systems are solved with the &lt;code&gt;mldivide&lt;/code&gt; operator. Note that a proper choice of the preconditioner may dramatically improve the overall performance of the method. Instead of matrices &lt;var&gt;m1&lt;/var&gt; and &lt;var&gt;m2&lt;/var&gt;, the user may pass two functions which return the results of applying the inverse of &lt;var&gt;m1&lt;/var&gt; and &lt;var&gt;m2&lt;/var&gt; to a vector. If &lt;var&gt;m1&lt;/var&gt; is omitted or empty &lt;code&gt;[]&lt;/code&gt;, then no preconditioning is applied. If no factorization of &lt;var&gt;m&lt;/var&gt; is available, &lt;var&gt;m2&lt;/var&gt; can be omitted or left [], and the input variable &lt;var&gt;m1&lt;/var&gt; can be used to pass the preconditioner &lt;var&gt;m&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecde13d1bc9bfc603cd223f5dc7dab9e004329b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;m&lt;/var&gt; is the (left) preconditioning matrix, so that the iteration is (theoretically) equivalent to solving by &lt;code&gt;pcr&lt;/code&gt;&lt;code&gt;&lt;var&gt;P&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt; \ &lt;var&gt;b&lt;/var&gt;&lt;/code&gt;, with &lt;code&gt;&lt;var&gt;P&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt; \ &lt;var&gt;A&lt;/var&gt;&lt;/code&gt;. Note that a proper choice of the preconditioner may dramatically improve the overall performance of the method. Instead of matrix &lt;var&gt;m&lt;/var&gt;, the user may pass a function which returns the results of applying the inverse of &lt;var&gt;m&lt;/var&gt; to a vector (usually this is the preferred way of using the preconditioner). If &lt;code&gt;[]&lt;/code&gt; is supplied for &lt;var&gt;m&lt;/var&gt;, or &lt;var&gt;m&lt;/var&gt; is omitted, no preconditioning is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2214bdc37fdb2189caf33ca88ac45ab0496b173e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;m&lt;/var&gt; must be a scalar or real array with -Inf &amp;le; &lt;var&gt;m&lt;/var&gt; &amp;le; 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a2f80f727c320157366c46ad2f6d2ad434d394" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;mask&lt;/var&gt; can also be arbitrary numeric type, in which case it is first converted to logical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38afe67bbb38835e409caeadc2e04bf0f03060a8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;maxit&lt;/var&gt; is the maximum allowable number of iterations; if &lt;code&gt;[]&lt;/code&gt; is supplied for &lt;var&gt;maxit&lt;/var&gt;, or &lt;code&gt;pcr&lt;/code&gt; has less arguments, a default value equal to 20 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32addbf62be3e7ef849bbe069abab6e54d047925" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;maxit&lt;/var&gt; is the maximum allowed number of iterations; if &lt;var&gt;maxit&lt;/var&gt; is omitted or empty then a value of 20 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2175481abbcaeb9a6706a921cc9387f5aeac849c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;method&lt;/var&gt; is one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1fb45defbf551d16ba9ecfe03c3a9b2c6e30f3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;mode&lt;/var&gt; is interpreted as an octal number and is subject to umask processing. The final calculated mode is &lt;code&gt;&lt;var&gt;mode&lt;/var&gt; - &lt;var&gt;umask&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd4dd947d9da9bcdeb3b5a8e9cf51b165ceb6f4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt; can also be a contiguous range, either ascending &lt;code&gt;l:u&lt;/code&gt; or descending &lt;code&gt;u:-1:l&lt;/code&gt;, in which case a range of elements is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74e2def6e98ad3bc0e92e1d6a738ff51e4c9f4f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt; is a scalar defining the number of points to use in each dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f34fbcf439dbed0a3a56814cefac89a0c5d3bfa" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt; is a scalar defining the number of points to use in plotting the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8af7619f8e49ba4c48b342513f9b855a588a0e4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt; is the minimum number of points to use. When &lt;var&gt;n&lt;/var&gt; is specified, the maximum stepsize will be &lt;code&gt;(&lt;var&gt;xhi&lt;/var&gt; - &lt;var&gt;xlo&lt;/var&gt;) / &lt;var&gt;n&lt;/var&gt;&lt;/code&gt;. More than &lt;var&gt;n&lt;/var&gt; points may still be used in order to meet the relative tolerance requirement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66523cec06b7024146510bc1ca9820a2e6b1b2d9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt; must be a vector of integers no longer than the number of dimensions in &lt;var&gt;x&lt;/var&gt;. The values of &lt;var&gt;n&lt;/var&gt; can be either positive or negative, which determines the direction in which the values of &lt;var&gt;x&lt;/var&gt; are shifted. If an element of &lt;var&gt;n&lt;/var&gt; is zero, then the corresponding dimension of &lt;var&gt;x&lt;/var&gt; will not be shifted. If &lt;var&gt;n&lt;/var&gt; is a scalar and no &lt;var&gt;dim&lt;/var&gt; is specified then the shift is applied to the first non-singular dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4467b69642dfdeedabfbe98ae64d5d2b78a7bfd" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt;(1) &amp;gt; 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e162ea494cf8cb4b264730569efcb0cf8586375" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;n&lt;/var&gt;(1) &amp;lt; 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375df7d5311be9c452f92c8cffd71a30ed488bc8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341b5dc5709ccc95fdc89d155a6f23a903a24969" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e7024d8f50c21efd0e081035c85d37f8114353" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is a built-in function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614fb36d905fc690f79f41da8693d7419ad9dc3b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is a class. (Note: not currently implemented)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165d549a3862df72e70bddb46484c51f2211ae0a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcdeeaf9a5ffc2145047e8a0a95b292eac19001" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is a function not associated with a file (entered on the command line).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aeefa7b86669f381ad983e5de7318e3b8311e06" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405bd940d52e3411040f57376b2a9c234e7dfbe0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt; is an absolute filename, an ordinary file in Octave&amp;rsquo;s &lt;code&gt;path&lt;/code&gt;, or (after appending &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42000523cb8eebf516d3996615203032f91721c8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;name&lt;/var&gt;.ext</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt;.ext</target>
        </trans-unit>
        <trans-unit id="5c68e4aad987b898f6568ab48d4cc22890b45a90" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;newmap&lt;/var&gt; is always an Mx3 matrix, even if the input image is an intensity grayscale image &lt;var&gt;I&lt;/var&gt; (all three RGB planes are assigned the same value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53874921a7d43514b4c2311f28f1b4ddaca55d9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;nfun&lt;/var&gt; indicates the number of function evaluations that were made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b057af87bbea336b7a592fdebf0726ee77fc0b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;nr_points&lt;/var&gt; is the number of points at which the integrand was evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53d127332a7ee4aedfcb247d56f1f98adecad31" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; may also be an array of objects in which case &lt;var&gt;res&lt;/var&gt; will be a logical array indicating whether each handle has the property &lt;var&gt;prop&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b9017a5e7c5c396aa523685ef3768200e42fd5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; may be an Octave class object or a Java object. &lt;var&gt;classname&lt;/var&gt; may be the name of an Octave class or a Java class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed859be83bf409c40b25631aa0e4610d47b4fa9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/info/octave.info</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/info/octave.info</target>
        </trans-unit>
        <trans-unit id="18f1bf6821c548d171389c4927e397a4f4a10089" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/lib/&lt;var&gt;version&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/lib/&lt;var&gt;version&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="f2557698c9b45a39232da869affee94ed33f5b2d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/lib/octave/&lt;var&gt;version&lt;/var&gt;/m</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/lib/octave/&lt;var&gt;version&lt;/var&gt;/m</target>
        </trans-unit>
        <trans-unit id="06940584143bf57edecdcde76ddd2dd5146b37f4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/libexec/octave/&lt;var&gt;version&lt;/var&gt;/exec/&lt;var&gt;arch&lt;/var&gt;/info</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/libexec/octave/&lt;var&gt;version&lt;/var&gt;/exec/&lt;var&gt;arch&lt;/var&gt;/info</target>
        </trans-unit>
        <trans-unit id="dbfb624dab7365e6e240847604649e7eac05a10a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/etc/built-in-docstrings</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/etc/built-in-docstrings</target>
        </trans-unit>
        <trans-unit id="193d4dc9e7320dbb917b6e834fd0d1a9df7555be" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/etc/doc-cache</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/etc/doc-cache</target>
        </trans-unit>
        <trans-unit id="e4ddc6290f888713443f097b7ddc136667567bfc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/etc/macros.texi</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/etc/macros.texi</target>
        </trans-unit>
        <trans-unit id="5561bc34fb338dbfa5a46bdab9942300993f4f71" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/m</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/m</target>
        </trans-unit>
        <trans-unit id="9c6975e331b35a2bcf8dfddf411adc5901a19075" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;octave-home&lt;/var&gt;\bin\opengl32.dll</source>
          <target state="translated">&lt;var&gt;octave-home&lt;/var&gt;\bin\opengl32.dll</target>
        </trans-unit>
        <trans-unit id="20f18bab47488a376b321eca1c2cd1b8e8a80d82" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt; is a structure specifying additional options. Currently, &lt;code&gt;fzero&lt;/code&gt; recognizes these options: &lt;code&gt;&quot;FunValCheck&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxFunEvals&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxIter&quot;&lt;/code&gt;, &lt;code&gt;&quot;OutputFcn&quot;&lt;/code&gt;, and &lt;code&gt;&quot;TolX&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b05866cc148de643a667958e9a8e709407fe0dc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt; is a structure specifying additional parameters which control the algorithm. Currently, &lt;code&gt;fminbnd&lt;/code&gt; recognizes these options: &lt;code&gt;&quot;Display&quot;&lt;/code&gt;, &lt;code&gt;&quot;FunValCheck&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxFunEvals&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxIter&quot;&lt;/code&gt;, &lt;code&gt;&quot;OutputFcn&quot;&lt;/code&gt;, &lt;code&gt;&quot;TolX&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ca52647d7f7603b101072333e34bf0a5535ad4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt; is a structure specifying additional parameters which control the algorithm. Currently, &lt;code&gt;fminunc&lt;/code&gt; recognizes these options: &lt;code&gt;&quot;AutoScaling&quot;&lt;/code&gt;, &lt;code&gt;&quot;FinDiffType&quot;&lt;/code&gt;, &lt;code&gt;&quot;FunValCheck&quot;&lt;/code&gt;, &lt;code&gt;&quot;GradObj&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxFunEvals&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxIter&quot;&lt;/code&gt;, &lt;code&gt;&quot;OutputFcn&quot;&lt;/code&gt;, &lt;code&gt;&quot;TolFun&quot;&lt;/code&gt;, &lt;code&gt;&quot;TolX&quot;&lt;/code&gt;, &lt;code&gt;&quot;TypicalX&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88d262b467d99f2732cd9696ab6c0dfc6d93709" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt; is a structure specifying additional parameters which control the algorithm. Currently, &lt;code&gt;fsolve&lt;/code&gt; recognizes these options: &lt;code&gt;&quot;AutoScaling&quot;&lt;/code&gt;, &lt;code&gt;&quot;ComplexEqn&quot;&lt;/code&gt;, &lt;code&gt;&quot;FinDiffType&quot;&lt;/code&gt;, &lt;code&gt;&quot;FunValCheck&quot;&lt;/code&gt;, &lt;code&gt;&quot;Jacobian&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxFunEvals&quot;&lt;/code&gt;, &lt;code&gt;&quot;MaxIter&quot;&lt;/code&gt;, &lt;code&gt;&quot;OutputFcn&quot;&lt;/code&gt;, &lt;code&gt;&quot;TolFun&quot;&lt;/code&gt;, &lt;code&gt;&quot;TolX&quot;&lt;/code&gt;, &lt;code&gt;&quot;TypicalX&quot;&lt;/code&gt;, and &lt;code&gt;&quot;Updating&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e232ff4b786665671ab499f88ed47e87162697fe" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt; is an options structure to change the behavior of the algorithm (see &lt;a href=&quot;#XREFoptimset&quot;&gt;optimset&lt;/a&gt;). &lt;code&gt;lsqnonneg&lt;/code&gt; recognizes these options: &lt;code&gt;&quot;MaxIter&quot;&lt;/code&gt;, &lt;code&gt;&quot;TolX&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a312acbc0af65f6a23c9d2f5dcf63c8b800377" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;options&lt;/var&gt; is an options structure to change the behavior of the algorithm (see &lt;a href=&quot;linear-least-squares#XREFoptimset&quot;&gt;optimset&lt;/a&gt;). &lt;code&gt;pqpnonneg&lt;/code&gt; recognizes one option: &lt;code&gt;&quot;MaxIter&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84a0b40a61258440a6f25b3d9a159d40b4d8072" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;opts&lt;/var&gt; is a structure defining options that &lt;code&gt;svds&lt;/code&gt; will pass to &lt;code&gt;eigs&lt;/code&gt;. The possible fields of this structure are documented in &lt;code&gt;eigs&lt;/code&gt;. By default, &lt;code&gt;svds&lt;/code&gt; sets the following three fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2315a93326552ca5f6ba5d124a4257d99a039b7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;opts&lt;/var&gt;.aggressive</source>
          <target state="translated">&lt;var&gt;opts&lt;/var&gt;.aggressive</target>
        </trans-unit>
        <trans-unit id="1437bcb1b51d0e3fbbac980d25a754344b131d0a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;opts&lt;/var&gt;.dense</source>
          <target state="translated">&lt;var&gt;opts&lt;/var&gt;.dense</target>
        </trans-unit>
        <trans-unit id="137927ba585241e5cb04177ff5852009ec8db2e1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;output&lt;/var&gt; is a structure containing runtime information about the &lt;code&gt;fsolve&lt;/code&gt; algorithm. Fields in the structure are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cc722a700cf1c32a606b2b91d052663f340054" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;output&lt;/var&gt; is a structure containing runtime information about the &lt;code&gt;fzero&lt;/code&gt; algorithm. Fields in the structure are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b29208595b3dce0a5aaa43a70f757d3c8e4ba4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; = 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea1d88cb455d91ce06b2230e3652a91465bfa022" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; = &lt;code&gt;&quot;fro&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5a802d3a0dd1e335d1527f98493a052b368fcc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; = &lt;code&gt;-Inf&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33efd2a341f97a467a2f5174fd53b7e0d469e399" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; = &lt;code&gt;1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509e067582d91ebbb7f683934fc53413fb6d6456" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; = &lt;code&gt;2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bceccf2086b62cce691ae4aa975b2bcc3bf700d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; = &lt;code&gt;Inf&lt;/code&gt; or &lt;code&gt;&quot;inf&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42da6d6347386ee8fbd20766b0ebf13843b9f43e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; is a permutation vector such that &lt;code&gt;&lt;var&gt;S&lt;/var&gt;(&lt;var&gt;p&lt;/var&gt;, &lt;var&gt;p&lt;/var&gt;)&lt;/code&gt; tends to have its diagonal elements closer to the diagonal than &lt;var&gt;S&lt;/var&gt;. This is a good preordering for LU or Cholesky factorization of matrices that come from &amp;ldquo;long, skinny&amp;rdquo; problems. It works for both symmetric and asymmetric &lt;var&gt;S&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f4cab402e7186758fad283610b795e9db56b45" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; is a positive integer defining the number of intervals along &lt;var&gt;x&lt;/var&gt;, and &lt;var&gt;p&lt;/var&gt;+1 is the number of breaks. The number of points in each interval differ by no more than 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afa19525b9dff575c8b2d15121ee28dc4af0fb8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; is the year at the start of the century in which two-digit years are to be interpreted in. If not specified, it defaults to the current year minus 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7796d39676259dc3060ee6a77b8bbc68200a9d2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;p&lt;/var&gt; is the year at the start of the century to which two-digit years will be referenced. If not specified, it defaults to the current year minus 50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb49579a60afe795f0d539fb1f1da4791f020399" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;param&lt;/var&gt;, &lt;var&gt;value&lt;/var&gt; are optional pairs of parameters and values which modify the calculation. Valid options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fab83cd9c61cf3bc409447f2859a9db30d54570" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;phi&lt;/var&gt; is the angle relative to the xy-plane.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41425926cc32424b1774b105e6caf36a3b74854" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;pos&lt;/var&gt; is either a two-value numeric vector or a string. If &lt;var&gt;pos&lt;/var&gt; is numeric then it must be of the form &lt;code&gt;[h, v]&lt;/code&gt; specifying the horizontal and vertical offsets of the figure with respect to the screen. A positive value indicates the offset between the left (or bottom for the vertical component) of the screen, and the left (or bottom) of the figure. A negative value indicates the offset between the right (or top) of the screen and the right (or top) of the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aee86af112cde1fe80f4b130f129d14c3b1908c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/bin</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/bin</target>
        </trans-unit>
        <trans-unit id="fa426f02d1b08bfc9e18c3e96430f47406eb3253" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/lib/octave-&lt;var&gt;version&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/lib/octave-&lt;var&gt;version&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="78ac54db75b89108c4f34b60c4630aa1c860777e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/lib/octave/&lt;var&gt;version&lt;/var&gt;/oct/&lt;var&gt;arch&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/lib/octave/&lt;var&gt;version&lt;/var&gt;/oct/&lt;var&gt;arch&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="32ed45842546629b9b6df5e7a4add26dcbce2c87" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/libexec/octave/&lt;var&gt;version&lt;/var&gt;/exec/&lt;var&gt;arch&lt;/var&gt;</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/libexec/octave/&lt;var&gt;version&lt;/var&gt;/exec/&lt;var&gt;arch&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="de14c4276efe609c941f95e7b95f12604d70ca46" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/octave-&lt;var&gt;version&lt;/var&gt;/include/octave</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/octave-&lt;var&gt;version&lt;/var&gt;/include/octave</target>
        </trans-unit>
        <trans-unit id="85dce4d3a5a31ad5ab2b0c5868e363ab46a01f0a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/share</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/share</target>
        </trans-unit>
        <trans-unit id="4389ab4013497d40ee564de4deea56e03a35d88a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/share/info</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/share/info</target>
        </trans-unit>
        <trans-unit id="4d79404c7e0b5f955d3692f0b8a23fe7c1e537e0" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/share/man/man1</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/share/man/man1</target>
        </trans-unit>
        <trans-unit id="075c35761f10ff912e034a763d934831d7de61b8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/imagelib</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/imagelib</target>
        </trans-unit>
        <trans-unit id="d9058b120c0622fcdd01f55485e168b94da40b9e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prefix&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/m</source>
          <target state="translated">&lt;var&gt;prefix&lt;/var&gt;/share/octave/&lt;var&gt;version&lt;/var&gt;/m</target>
        </trans-unit>
        <trans-unit id="7c86adab431710b220e955b4e8ed7d6632be1200" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prop&lt;/var&gt; may be a string when linking a single property, or a cell array of strings for multiple properties. During the linking process all properties in &lt;var&gt;prop&lt;/var&gt; will initially be set to the values that exist on the first object in the list &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8093250780b2ef2e2f6dd719c4ebcc8da9d074ad" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;prop&lt;/var&gt; must be a string naming a valid property in &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f468433e3e4529427f5d1527579b57da8e28b1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;pts&lt;/var&gt; is a matrix of size [n, dim] containing n points in a space of dimension dim.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e3399952bb0e4e37029b567296a312a2b78d9a" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; can either be a vector of 3 elements representing the reduction factors in the x-, y-, and z-directions or a scalar, in which case the same reduction factor is used in all three dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe3ef7a0e3b8f45cc336c3fd184c640220eac60" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; is a 2x&lt;var&gt;N&lt;/var&gt; integer matrix specifying which elements to repeat and how often to repeat each element. Entries in the first row, &lt;var&gt;r&lt;/var&gt;(1,j), select an element to repeat. The corresponding entry in the second row, &lt;var&gt;r&lt;/var&gt;(2,j), specifies the repeat count. If &lt;var&gt;x&lt;/var&gt; is a matrix then the columns of &lt;var&gt;x&lt;/var&gt; are imagined to be stacked on top of each other for purposes of the selection index. A row vector is always returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b032aec3f211561d4b7b5dedb6e35c1dcda835" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; is the distance to the origin (0, 0, 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fe36b450715b146a41d44d9f5ee05304f3b8e3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; is the distance to the z-axis (0, 0, z).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd2166b7dcbc8edb263847c03706baf4497b8884" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;relres&lt;/var&gt; is the ratio of the final residual to its initial value, measured in the Euclidean norm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7eb0dc81cc32f5dc559c8a44191642bff4b57b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;resvec&lt;/var&gt; describes the convergence history of the method, so that &lt;code&gt;&lt;var&gt;resvec&lt;/var&gt; (i)&lt;/code&gt; contains the Euclidean norms of the residual after the (&lt;var&gt;i&lt;/var&gt;-1)-th iteration, &lt;code&gt;&lt;var&gt;i&lt;/var&gt; = 1,2, &amp;hellip;, &lt;var&gt;iter&lt;/var&gt;+1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493793f2550b73b4ad7d468237757cc14c8c73f9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;resvec&lt;/var&gt; describes the convergence history of the method. &lt;code&gt;&lt;var&gt;resvec&lt;/var&gt; (&lt;var&gt;i&lt;/var&gt;, 1)&lt;/code&gt; is the Euclidean norm of the residual, and &lt;code&gt;&lt;var&gt;resvec&lt;/var&gt; (&lt;var&gt;i&lt;/var&gt;, 2)&lt;/code&gt; is the preconditioned residual norm, after the (&lt;var&gt;i&lt;/var&gt;-1)-th iteration, &lt;code&gt;&lt;var&gt;i&lt;/var&gt; = 1, 2, &amp;hellip;, &lt;var&gt;iter&lt;/var&gt;+1&lt;/code&gt;. The preconditioned residual norm is defined as &lt;code&gt;&lt;var&gt;r&lt;/var&gt;' * (&lt;var&gt;m&lt;/var&gt; \ &lt;var&gt;r&lt;/var&gt;)&lt;/code&gt; where &lt;code&gt;&lt;var&gt;r&lt;/var&gt; = &lt;var&gt;b&lt;/var&gt; - &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt;&lt;/code&gt;, see also the description of &lt;var&gt;m&lt;/var&gt;. If &lt;var&gt;eigest&lt;/var&gt; is not required, only &lt;code&gt;&lt;var&gt;resvec&lt;/var&gt; (:, 1)&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f244285f49086b9689a50580c6c15dbdda7f64" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;resvec&lt;/var&gt; is a vector containing the residual at each iteration. The total number of iterations performed is given by &lt;code&gt;length (&lt;var&gt;resvec&lt;/var&gt;) - 1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e880220103acc874c0c1b4a8c53a4aff68984a4c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;s&lt;/var&gt; may also be a cell array of strings, in which case the replacement is done for each element and a cell array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887f015048c42f676edb7bf52c93a8041fbe409b" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;s&lt;/var&gt; may also be a string array or cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb88d906101badd14259b17d2cf78fd5521bff79" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;s&lt;/var&gt; may be a character string, character matrix, or cell array. For character arrays the conversion is repeated for every row, and a double or complex array is returned. Empty rows in &lt;var&gt;s&lt;/var&gt; are deleted and not returned in the numeric array. For cell arrays each character string element is processed and a double or complex array of the same dimensions as &lt;var&gt;s&lt;/var&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326d92f8d706669a260ebcfe6472708392304240" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;shape&lt;/var&gt; = &lt;code&gt;&quot;full&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e334f776bf6c213e70bbe23a7a49871483378289" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;shape&lt;/var&gt; = &lt;code&gt;&quot;same&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c7958fa1d9b8c51fc6b54d225d21a51e5d7d84" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;shape&lt;/var&gt; = &lt;code&gt;&quot;valid&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a8f3029316c7463c7191a058e2fa4c3373e386" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;stats&lt;/var&gt; is an optional 20-element output vector that provides data about the ordering and the validity of the input matrix &lt;var&gt;S&lt;/var&gt;. Ordering statistics are in &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(1 : 3)&lt;/code&gt;. &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(1)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(2)&lt;/code&gt; are the number of dense or empty rows and columns ignored by &lt;small&gt;CCOLAMD&lt;/small&gt; and &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(3)&lt;/code&gt; is the number of garbage collections performed on the internal data structure used by &lt;small&gt;CCOLAMD&lt;/small&gt; (roughly of size &lt;code&gt;2.2 * nnz (&lt;var&gt;S&lt;/var&gt;) + 4 * &lt;var&gt;m&lt;/var&gt; + 7 * &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; integers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a06c376c0a37f192996331a9a447bc1a9e6fd2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;stats&lt;/var&gt; is an optional 20-element output vector that provides data about the ordering and the validity of the input matrix &lt;var&gt;S&lt;/var&gt;. Ordering statistics are in &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(1:3)&lt;/code&gt;. &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(1) = &lt;var&gt;stats&lt;/var&gt;(2)&lt;/code&gt; is the number of dense or empty rows and columns ignored by SYMAMD and &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(3)&lt;/code&gt; is the number of garbage collections performed on the internal data structure used by SYMAMD (roughly of size &lt;code&gt;8.4 * nnz (tril (&lt;var&gt;S&lt;/var&gt;, -1)) + 9 * &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; integers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4786e3dd313992f20a04c86d4faa46023b01acae" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;stats&lt;/var&gt; is an optional 20-element output vector that provides data about the ordering and the validity of the input matrix &lt;var&gt;S&lt;/var&gt;. Ordering statistics are in &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(1:3)&lt;/code&gt;. &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(1)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(2)&lt;/code&gt; are the number of dense or empty rows and columns ignored by &lt;small&gt;COLAMD&lt;/small&gt; and &lt;code&gt;&lt;var&gt;stats&lt;/var&gt;(3)&lt;/code&gt; is the number of garbage collections performed on the internal data structure used by &lt;small&gt;COLAMD&lt;/small&gt; (roughly of size &lt;code&gt;2.2 * nnz(&lt;var&gt;S&lt;/var&gt;) + 4 * &lt;var&gt;m&lt;/var&gt; + 7 * &lt;var&gt;n&lt;/var&gt;&lt;/code&gt; integers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54273a5070dfdf3a47d12b72eb60bcb7f24e0aae" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;str&lt;/var&gt; and &lt;var&gt;ptn&lt;/var&gt; can be ordinary strings, cell array of strings, or character arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c7bc5936fa371dfcbd5b0ede599c6db6c2b761" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;str&lt;/var&gt; may also be a cell array of strings in which case the function executes on every individual string and returns a cell array of tokens and remainders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01b5477d866040b6dd91cbe7931a4d4989b0847" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;sz&lt;/var&gt; is either a vector of 3 elements representing the size of the convolution kernel in x-, y- and z-direction or a scalar, in which case the same size is used in all three dimensions. The default value is 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace9fc35d8f2f292088056f76dc21b9980bbc72d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;t0&lt;/var&gt; is the initial time such that &lt;code&gt;&lt;var&gt;fun&lt;/var&gt;(&lt;var&gt;t0&lt;/var&gt;, &lt;var&gt;y0_new&lt;/var&gt;, &lt;var&gt;yp0_new&lt;/var&gt;) = 0&lt;/code&gt;, specified as a scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8cdc1f4cf246f0c7f370c46551de53871d4617" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;table&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; can also be cell arrays of strings (or &lt;var&gt;y&lt;/var&gt; can be a single string). In this case, string lookup is performed using lexicographical comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d847019d111bcb9f9788772d05c6b031e434e41" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;theta&lt;/var&gt; describes the angle relative to the positive x-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3168e8f86eee80ac1c36b018124edf5df4c478" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;title&lt;/var&gt; is a string and the options may be input as individual strings or as a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3fb4401f4a113da16e7b4fc7f5bbc86f529143" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; defaults to &lt;code&gt;eps * max (size (&lt;var&gt;A&lt;/var&gt;)) * norm (&lt;var&gt;A&lt;/var&gt;, inf)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b656a51d9cff7771b2532a2ef2aa04bb630413" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; defaults to pi.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7632f78e135233b71a0fae28405fb23e8fe5c4e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; is a weighting factor in the range [0, 1) which determines the tolerance of the matching. The default value is &lt;code&gt;100 * eps&lt;/code&gt; and the resulting tolerance for a given complex pair is &lt;code&gt;&lt;var&gt;tol&lt;/var&gt; * abs (&lt;var&gt;z&lt;/var&gt;(i)))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec744326c41911a797c9ea44eada5b7a00a730bb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; is the relative tolerance to use for the plot and defaults to 2e-3 (.2%).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085518a7cbb578c61d6626a692c6eb9813a83929" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; is the required relative tolerance for the residual error, &lt;code&gt;&lt;var&gt;b&lt;/var&gt; - &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt;&lt;/code&gt;. The iteration stops if &lt;code&gt;norm (&lt;var&gt;b&lt;/var&gt; - &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt;) &amp;lt;=
&lt;var&gt;tol&lt;/var&gt; * norm (&lt;var&gt;b&lt;/var&gt; - &lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x0&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;tol&lt;/var&gt; is empty or is omitted, the function sets &lt;code&gt;&lt;var&gt;tol&lt;/var&gt; = 1e-6&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2968910dfe755321baf5a62861b87a526767b1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; is the required relative tolerance for the residual error, &lt;code&gt;&lt;var&gt;b&lt;/var&gt;&amp;nbsp;-&amp;nbsp;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&lt;/code&gt;. The iteration stops if &lt;code&gt;norm&amp;nbsp;(&lt;var&gt;b&lt;/var&gt;&amp;nbsp;-&amp;nbsp;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; &amp;le; &lt;code&gt;&lt;var&gt;tol&lt;/var&gt;&amp;nbsp;*&amp;nbsp;norm&amp;nbsp;(&lt;var&gt;b&lt;/var&gt;)&lt;/code&gt;. If &lt;var&gt;tol&lt;/var&gt; is omitted or empty, then a tolerance of 1e-6 is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f362893a493845ef5c80590d0684d4a2215dc4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tol&lt;/var&gt; is the tolerance to which the 2-norm is calculated. By default &lt;var&gt;tol&lt;/var&gt; is 1e-6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b2ae3143632c4a0a66af8e29d8d262e36b201f1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;trange&lt;/var&gt; specifies the time interval over which the ODE will be evaluated. Typically, it is a two-element vector specifying the initial and final times (&lt;code&gt;[tinit, tfinal]&lt;/code&gt;). If there are more than two elements then the solution will also be evaluated at these intermediate time instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1ac94b56418543baf88b73068df0642800a421" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tri&lt;/var&gt; is typically the output of a Delaunay triangulation over the grid of &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;. Every row of &lt;var&gt;tri&lt;/var&gt; represents one triangle and contains three indices into [&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;] which are the vertices of the triangles in the x-y plane.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e27a707ca2593862f871d709f4f3067d736b7c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tri&lt;/var&gt; is typically the output of a Delaunay triangulation over the grid of &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;. Every row of &lt;var&gt;tri&lt;/var&gt; represents one triangle and contains three indices into [&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;] which are the vertices of the triangles in the x-y plane. &lt;var&gt;z&lt;/var&gt; determines the height above the plane of each vertex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307a8787065347cc855b16fb9383c0338f5cd124" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;tri&lt;/var&gt; is typically the output of a Delaunay triangulation over the grid of &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;. Every row of &lt;var&gt;tri&lt;/var&gt; represents one triangle and contains three indices into [&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;] which are the vertices of the triangles in the x-y plane. &lt;var&gt;z&lt;/var&gt; determines the height above the plane of each vertex. If no &lt;var&gt;z&lt;/var&gt; input is given then the triangles are plotted as a 2-D figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4915a32152bd0f74dbde495827d4452068042e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;type&lt;/var&gt; determines the type of the property to create. &lt;var&gt;args&lt;/var&gt; usually contains the default value of the property, but additional arguments might be given, depending on the type of the property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d843ba8d2a6b8c037cb6912900f90d0b55e591d6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;type&lt;/var&gt; may also be the concatenation of a core object type and a valid property name for that object type. The property created then has the same characteristics as the referenced property (type, possible values, hidden state&amp;hellip;). This allows one to clone an existing property into the graphics object &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2184fc8538d4602f1577ad09002c9ebc83740e77" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;v&lt;/var&gt; is a matrix that is non-singleton in the first 3 dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5266c2dd7f16ae9cd0a5b906bd8b2afb1645454" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;v&lt;/var&gt; is the matrix of right eigenvectors of &lt;var&gt;a&lt;/var&gt;. The result is equivalent to calling &lt;code&gt;[&lt;var&gt;v&lt;/var&gt;, &lt;var&gt;lambda&lt;/var&gt;] = eig (&lt;var&gt;a&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ed52930ccbf4abf8dab3344eac398715e075aa" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;vals&lt;/var&gt; is an array of values for the map with the &lt;em&gt;same&lt;/em&gt; number of elements as &lt;var&gt;keys&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0f0150cb5f0d2011f32180dca013d30ad519b6" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;value1&lt;/var&gt; is the colormap to use when displaying an indexed image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e40587fc1532f92bd4a0a46570a12476dbf4d2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;value1&lt;/var&gt; is the display range as described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8dc0eb660cbea661f7a562152d1803c2c5fbad" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;value&lt;/var&gt; can be either an emtpy or one character specifying the end-of-line character, or the pair &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; (CRLF). In the latter case, any of &lt;code&gt;&quot;\r&quot;&lt;/code&gt;, &lt;code&gt;&quot;\n&quot;&lt;/code&gt; or &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; is counted as a (single) newline. If no value is given, &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b8470ed3897f4244f2b2b15e5f48df95842e4f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;visibility&lt;/var&gt; is an optional input indicating whether to show the figure (&lt;code&gt;&quot;visible&quot;&lt;/code&gt;) or not (&lt;code&gt;&quot;invisible&quot;&lt;/code&gt;). When &lt;var&gt;visibility&lt;/var&gt; is specified as an input to &lt;code&gt;openfig&lt;/code&gt; it overrides the visibility setting stored in &lt;var&gt;filename&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135d1219d1a82c6348945e91e28bd72384de6376" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x0&lt;/var&gt; determines a starting guess. The shape of &lt;var&gt;x0&lt;/var&gt; is preserved in all calls to &lt;var&gt;fcn&lt;/var&gt;, but otherwise is treated as a column vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519ccb76cc49ab582649936ccc91ba26f8a07f87" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x0&lt;/var&gt; is an initial guess for the solution. The shape of &lt;var&gt;x0&lt;/var&gt; is preserved in all calls to &lt;var&gt;fcn&lt;/var&gt;, but otherwise is treated as a column vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c44eafc827211f594a5050ad2b71e3127b622c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x0&lt;/var&gt; is an optional initial guess for the solution &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90125b454cbe15b02f204fa18f049b25f049a0c7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x0&lt;/var&gt; is the initial guess. If &lt;var&gt;x0&lt;/var&gt; is empty or omitted, the function sets &lt;var&gt;x0&lt;/var&gt; to a zero vector by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b75a67b47535f53fd21653dafe9e6cbe953b07" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x0&lt;/var&gt; is the initial guess. If &lt;var&gt;x0&lt;/var&gt; is omitted or empty then the function sets &lt;var&gt;x0&lt;/var&gt; to a zero vector by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611ac2e5138a325432054181b9f46ac4330da532" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x0&lt;/var&gt; should be a two-element vector specifying two points which bracket a zero. In other words, there must be a change in sign of the function between &lt;var&gt;x0&lt;/var&gt;(1) and &lt;var&gt;x0&lt;/var&gt;(2). More mathematically, the following must hold</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6af58c568b1f94d12b27bb84cef1343b736dac" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; * &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0081e7480ea77a5084b702917f15b3952cb93525" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; ** &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850305a94ee540c3835be7558dff9111b7026aca" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; + &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea094b73ee78b15c35ea8c2e83cec5e988d24fb" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; - &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a50ae0600a84643e621520804678db951e88817" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; .* &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31dd5d1edd676986c8439171139deffb35e45e66" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; .** &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f5cb796a4bdccb9d7f18306dd617bf0a0536c5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; .+ &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa33b0890010deb506bfd84226cc3dd58cd27e5" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; .- &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cedd5d39f0fb736901f632e4bd5d1e502edc854" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; ./ &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf4f02d7e8d7fefc89eb6bed12846685cbf5e62" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; .\ &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4f333737bc491c95f5d853fc194777e4f91251" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; .^ &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df881df349c58a80225d51ab5935030e075fcb8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; / &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242b68d7297b24507aa77dddd8f82d186ef9d7b4" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; \ &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72b26dd4bf77f93e1a88b900dc9d0cab189a469" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; ^ &lt;var&gt;y&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794592d4b1672d7bb8c0fe7fca66337de1047340" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are optional 2-element vectors, &lt;code&gt;[min,&amp;nbsp;max]&lt;/code&gt;, which specify the coordinates of the centers of the corner pixels. If a range is specified as &lt;code&gt;[max,&amp;nbsp;min]&lt;/code&gt; then the image will be reversed along that axis. For convenience, &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; may be specified as N-element vectors matching the length of the data in &lt;var&gt;img&lt;/var&gt;. However, only the first and last elements will be used to determine the axis limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59f67e37375bb2eef8d3adbc048f74cc0e94b6b9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are optional 2-element vectors, &lt;code&gt;[min,&amp;nbsp;max]&lt;/code&gt;, which specify the coordinates of the centers of the corner pixels. If a range is specified as &lt;code&gt;[max,&amp;nbsp;min]&lt;/code&gt; then the image will be reversed along that axis. For convenience, &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; may be specified as N-element vectors matching the length of the data in &lt;var&gt;img&lt;/var&gt;. However, only the first and last elements will be used to determine the image limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="357c35cacc4aff86cffbb507f2df74c0141ca075" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; is a vector with real-valued elements in the range [-1, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eed5b9182e8f6f893434e72fe20588b2cba6a98" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; is a vector, and &lt;var&gt;y&lt;/var&gt; is a vector or N-D array. If &lt;var&gt;y&lt;/var&gt; is an N-D array, then &lt;var&gt;x&lt;/var&gt;(j) is matched to &lt;var&gt;y&lt;/var&gt;(:,&amp;hellip;,:,j).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4fc82239c62c7d67e04e8e85c4cbdf9f083fd7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; is an array where each column contains a variable and each row is an observation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db494d39dac13fed06646cf525bb8e0dae66ae8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; is the computed approximation to the solution of &lt;code&gt;&lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt; = &lt;var&gt;b&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8d44c4fdfe1892e7b3da57ed669cab03173345" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; is the computed approximation to the solution of &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;=&amp;nbsp;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt;. If the algorithm did not converge, then &lt;var&gt;x&lt;/var&gt; is the iteration which has the minimum residual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5f594c3e073112b1d15cd2e7d6d2f1eec470c1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; may be a scalar, vector or array. If &lt;var&gt;x&lt;/var&gt; is omitted, the default range [0:0.05:1] is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ea7a482b7700ae25daef671a06b87e641b84b1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; must be a scalar, vector, or N-dimensional array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e50386d11d5d0e56bb5c6b97102167a2543a4e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; must belong to one of the built-in numeric classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1068c6a881a70fe91a54f56f480d3f225ac040d" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt; must have all real entries and &lt;var&gt;n&lt;/var&gt; must be a scalar. If &lt;var&gt;n&lt;/var&gt; is an even integer and &lt;var&gt;x&lt;/var&gt; has negative entries then &lt;code&gt;nthroot&lt;/code&gt; aborts and issues an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c055819a30489dccb5ee12388a437beaf0fa93" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;&amp;rsquo;</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt;&amp;rsquo;</target>
        </trans-unit>
        <trans-unit id="9c13980e4f0ef562848222dd2b82243f14b1e6a8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;, 2, &quot;last&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83c29ad6a9d54aa956f07debfbbd3b349190779" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; must be in the range [0,intmax]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcc7ce774b21c08a8f1d7f6affeb7ebb62d6e8c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;x&lt;/var&gt;.&amp;rsquo;</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt;.&amp;rsquo;</target>
        </trans-unit>
        <trans-unit id="4e2952eca31493faaaafb94d0a68d304a32eb324" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xa&lt;/var&gt;, &lt;var&gt;ya&lt;/var&gt; and &lt;var&gt;xb&lt;/var&gt;, &lt;var&gt;yb&lt;/var&gt; are the lower and upper limits of integration for x and y respectively. The underlying integrator determines whether infinite bounds are accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4250ae99be753a215a5bd2525328538eb239f851" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;xa&lt;/var&gt;, &lt;var&gt;ya&lt;/var&gt;, &lt;var&gt;za&lt;/var&gt; and &lt;var&gt;xb&lt;/var&gt;, &lt;var&gt;yb&lt;/var&gt;, &lt;var&gt;zb&lt;/var&gt; are the lower and upper limits of integration for x, y, and z respectively. The underlying integrator determines whether infinite bounds are accepted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd826878271f11c3c3e01e3fc6db9b768bab456" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;y0&lt;/var&gt; and &lt;var&gt;yp0&lt;/var&gt; contain the initial values for the unknowns &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;yp&lt;/var&gt;. If they are row vectors then the solution &lt;var&gt;y&lt;/var&gt; will be a matrix in which each column is the solution for the corresponding initial value in &lt;var&gt;y0&lt;/var&gt; and &lt;var&gt;yp0&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8e612349905ed08e85cebf869c65b4231a825c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;y0&lt;/var&gt; and &lt;var&gt;yp0&lt;/var&gt; must be consistent initial conditions, meaning that &lt;code&gt;f(t,y0,yp0) = 0&lt;/code&gt; is satisfied. The function &lt;code&gt;decic&lt;/code&gt; may be used to compute consistent initial conditions given initial guesses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63226f6432814735c73cc939c0f10b1fa6b88085" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;y0&lt;/var&gt; is a vector used as the initial guess for &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1b83b9534fe0ef35aceec7cd5738665ab0abf1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;y&lt;/var&gt; and &lt;var&gt;x&lt;/var&gt; must match in size and orientation. The signs of elements of &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;x&lt;/var&gt; are used to determine the quadrants of each resulting value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fa695617a220d3446edeee37a20e10a28b2917" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;y&lt;/var&gt; can be either a vector or array. If &lt;var&gt;y&lt;/var&gt; is a vector it must have a length of either &lt;var&gt;n&lt;/var&gt; or &lt;code&gt;&lt;var&gt;n&lt;/var&gt; + 2&lt;/code&gt;. If the length of &lt;var&gt;y&lt;/var&gt; is &lt;var&gt;n&lt;/var&gt;, then the &lt;code&gt;&quot;not-a-knot&quot;&lt;/code&gt; end condition is used. If the length of &lt;var&gt;y&lt;/var&gt; is &lt;code&gt;&lt;var&gt;n&lt;/var&gt; + 2&lt;/code&gt;, then the first and last values of the vector &lt;var&gt;y&lt;/var&gt; are the values of the first derivative of the cubic spline at the endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2cc5662a03843be2c969e23fb1f092a50243a3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;y&lt;/var&gt; can be either a vector or array. If &lt;var&gt;y&lt;/var&gt; is a vector then it must be the same length &lt;var&gt;n&lt;/var&gt; as &lt;var&gt;x&lt;/var&gt;. If &lt;var&gt;y&lt;/var&gt; is an array then the size of &lt;var&gt;y&lt;/var&gt; must have the form &lt;code&gt;[&lt;var&gt;s1&lt;/var&gt;, &lt;var&gt;s2&lt;/var&gt;, &amp;hellip;, &lt;var&gt;sk&lt;/var&gt;, &lt;var&gt;n&lt;/var&gt;]&lt;/code&gt; The array is reshaped internally to a matrix where the leading dimension is given by &lt;code&gt;&lt;var&gt;s1&lt;/var&gt; * &lt;var&gt;s2&lt;/var&gt; * &amp;hellip; * &lt;var&gt;sk&lt;/var&gt;&lt;/code&gt; and each row of this matrix is then treated separately. Note that this is exactly opposite to &lt;code&gt;interp1&lt;/code&gt; but is done for &lt;small&gt;MATLAB&lt;/small&gt; compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e07107e13b9befe9e0e161c508c0b51be6a3e62" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;yp0&lt;/var&gt; is a vector used as the initial guess for &lt;var&gt;yp&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85d16dce8643d9f88ac6169bdcf36f069b50a2e" translate="yes" xml:space="preserve">
          <source>@&lt;var&gt;classname&lt;/var&gt;/</source>
          <target state="translated">@&lt;var&gt;classname&lt;/var&gt;/</target>
        </trans-unit>
        <trans-unit id="9e3390dbbfed2d88db4fb29dddec166257ac4c86" translate="yes" xml:space="preserve">
          <source>@FIRfilter</source>
          <target state="translated">@FIRfilter</target>
        </trans-unit>
        <trans-unit id="21545d76a457196cf7c574766ce89116e35037f4" translate="yes" xml:space="preserve">
          <source>@ftp</source>
          <target state="translated">@ftp</target>
        </trans-unit>
        <trans-unit id="c9c45cd5800e263ea503995e7fa9c61663d9c1e0" translate="yes" xml:space="preserve">
          <source>@polynomial</source>
          <target state="translated">@polynomial</target>
        </trans-unit>
        <trans-unit id="5daa630ab1cf8320e411a190a5726f010ec7bcf8" translate="yes" xml:space="preserve">
          <source>@polynomial/polynomial.m</source>
          <target state="translated">@polynomial/polynomial.m</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="2e288bbe15cb0179d86e515712fc834fd9b8ecc4" translate="yes" xml:space="preserve">
          <source>A 1-by-2 matrix which holds the coordinates of the point over which the mouse pointer was when a mouse event occurred. The X and Y coordinates are in units defined by the figure&amp;rsquo;s &lt;code&gt;units&lt;/code&gt; property and their origin is the lower left corner of the plotting area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5803147b44315219a3c0cca15371ceb84fd6065d" translate="yes" xml:space="preserve">
          <source>A 2-column cell array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b83610da6c0cd4a897cdf1611fe578068b053b" translate="yes" xml:space="preserve">
          <source>A 2-column cell array containing the file extension in the 1st column and a brief description in the 2nd column. Example: &lt;code&gt;uiputfile ({&quot;*.ext&quot;,&quot;My Description&quot;;&quot;*.xyz&quot;,
&quot;XYZ-Format&quot;})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fa33fcaa0ae2c4800bb06a5b0e2a5ecc83b624" translate="yes" xml:space="preserve">
          <source>A 2-dimensional matrix. Note that vectors and empty matrices have 2 dimensions, one of them being of length 1, or both length 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784c1aafcfe6717e0d4706cc6121180e361ed8a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;pcolor&lt;/code&gt; plot draws rectangles with colors from the matrix &lt;var&gt;c&lt;/var&gt; over the two-dimensional region represented by the matrices &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;. &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are the coordinates of the mesh&amp;rsquo;s vertices and are typically the output of &lt;code&gt;meshgrid&lt;/code&gt;. If &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; are vectors, then a typical vertex is (&lt;var&gt;x&lt;/var&gt;(j), &lt;var&gt;y&lt;/var&gt;(i), &lt;var&gt;c&lt;/var&gt;(i,j)). Thus, columns of &lt;var&gt;c&lt;/var&gt; correspond to different &lt;var&gt;x&lt;/var&gt; values and rows of &lt;var&gt;c&lt;/var&gt; correspond to different &lt;var&gt;y&lt;/var&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399498653887f79e0685c4e59d97bfa55ef2d1d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;properties&lt;/code&gt; block can have additional attributes to specify access rights or to define constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5152055058b5b47d35fbea35d6d2070851c71248" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;scanf&lt;/code&gt; template string is a string that contains ordinary multibyte characters interspersed with conversion specifications that start with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d889f3b264969077394c2783dc548403f566e3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;comment&lt;/em&gt; is some text that is included in a program for the sake of human readers, and which is NOT an executable part of the program. Comments can explain what the program does, and how it works. Nearly all programming languages have provisions for comments, because programs are typically hard to understand without them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="266d2ce97edcfdf648d6233b2911ae12a12a9b6d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;function&lt;/em&gt; is a name for a particular calculation. Because it has a name, you can ask for it by name at any point in the program. For example, the function &lt;code&gt;sqrt&lt;/code&gt; computes the square root of a number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cb7f35ae56bbf59b5bba0e93225df30a148a18" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;numeric constant&lt;/em&gt; may be a scalar, a vector, or a matrix, and it may contain complex values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a8b00b048b3571b39f2621e07c85308a3e2a73" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;parse error&lt;/em&gt; occurs if Octave cannot understand something you have typed. For example, if you misspell a keyword,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4148a92d8746ea4b6dc5fb62a81fd54aa8a11a7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;range&lt;/em&gt; is a convenient way to write a row vector with evenly spaced elements. A range expression is defined by the value of the first element in the range, an optional value for the increment between elements, and a maximum value which the elements of the range will not exceed. The base, increment, and limit are separated by colons (the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940d2797d56714ba746add0ba9f7fc4f5ecf2410" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;string constant&lt;/em&gt; consists of a sequence of characters enclosed in either double-quote or single-quote marks. For example, both of the following expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb951e01696610c1fd183f8445c23348e3f6f6d2" translate="yes" xml:space="preserve">
          <source>A = importdata (fname)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71b50d06e17dec0820911bac5f81bd574c32b8f" translate="yes" xml:space="preserve">
          <source>A = importdata (fname, delimiter)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475b464576ef704761fbff7181de43d2b54a8f9e" translate="yes" xml:space="preserve">
          <source>A = importdata (fname, delimiter, header_rows)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149878f476074be1a0e6c92b4173e05d3b240bbb" translate="yes" xml:space="preserve">
          <source>A = matrix_type (A, &quot;banded&quot;, nl, nu)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbd91eb5228b9947adad3bb56f65cb231238434" translate="yes" xml:space="preserve">
          <source>A = matrix_type (A, &quot;lower&quot;, perm)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ca84d3ad83a69b87456797d0dee5c09d57c8f9" translate="yes" xml:space="preserve">
          <source>A = matrix_type (A, &quot;upper&quot;, perm)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ed11ba24f877ad0103855aa115deb8d32960cb" translate="yes" xml:space="preserve">
          <source>A = matrix_type (A, type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c753992bfa2c2215557b1f458aeb262ea461fb39" translate="yes" xml:space="preserve">
          <source>A = spdiags (v, d, A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf61d313eec9cbc8b2372d29ada60d2eb09fea9" translate="yes" xml:space="preserve">
          <source>A = spdiags (v, d, m, n)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ae176fc63ecf8f3b1b9a9488aefbae54cce17e" translate="yes" xml:space="preserve">
          <source>A Block Algorithm for Matrix 1-Norm Estimation, with an Application to 1-Norm Pseudospectra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a657f9953f204caf09d6e85bbce19be460b9e114" translate="yes" xml:space="preserve">
          <source>A Brief Introduction to Octave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d56932af9abaeb35bc7f65a57c9c551037ec320" translate="yes" xml:space="preserve">
          <source>A Cell Array in Octave is general array that can hold any number of different data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1efcd8387daa3796a0b8dfc343d63f6786ec02" translate="yes" xml:space="preserve">
          <source>A Function on the Path A function that can be found on the users load-path. There can also be Oct-file, mex-file or m-file versions of this function and the precedence between these versions are in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bbd468cdbe34611924cc03d41ea29d872e0e7a" translate="yes" xml:space="preserve">
          <source>A Hankel matrix formed from an m-vector &lt;var&gt;c&lt;/var&gt;, and an n-vector &lt;var&gt;r&lt;/var&gt;, has the elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fb9b9a518c8ccb54e475e85b188754721aa1ca" translate="yes" xml:space="preserve">
          <source>A JIT compiler works by analyzing the body of a loop, translating the Octave statements into another language, compiling the new code segment into an executable, and then running the executable and collecting any results. The process is not simple and there is a significant amount of work to perform for each step. It can still make sense, however, if the number of loop iterations is large. Because Octave is an interpreted language every time through a loop Octave must parse the statements in the loop body before executing them. With a JIT compiler this is done just once when the body is translated to another language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4bdaa9f4eddccc44e4a0446a32c79eb9765c7d2" translate="yes" xml:space="preserve">
          <source>A New sqrtm for &lt;small&gt;MATLAB&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87713ea88460b2c902760d0e712a46c89a0891d1" translate="yes" xml:space="preserve">
          <source>A Pareto chart is a bar graph that arranges information in such a way that priorities for process improvement can be established; It organizes and displays information to show the relative importance of data. The chart is similar to the histogram or bar chart, except that the bars are arranged in decreasing magnitude from left to right along the x-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26b240671ccd868ec88ea2a4a7ab1d2fb43bd1e" translate="yes" xml:space="preserve">
          <source>A Sample Command Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3830b5730347a3887344295754013d799c21d823" translate="yes" xml:space="preserve">
          <source>A Sample Function Description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022d488da152792fa7f6ab58cfd33505047419e8" translate="yes" xml:space="preserve">
          <source>A System-Theoretic Appropriate Realization of the Empty Matrix Concept</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8486283c5b56f279ab90bc8010800857f2ebc655" translate="yes" xml:space="preserve">
          <source>A Toeplitz, or diagonal-constant, matrix has the same value along each diagonal. Although it need not be square, it often is. An MxN Toeplitz matrix has the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b0606a67ef4dbfd727e287d3d9b25849c62163" translate="yes" xml:space="preserve">
          <source>A Vandermonde matrix has the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198ee017fa102f0825dc372fa2aa522c8dd5c269" translate="yes" xml:space="preserve">
          <source>A Voronoi diagram or Voronoi tessellation of a set of points &lt;var&gt;s&lt;/var&gt; in an N-dimensional space, is the tessellation of the N-dimensional space such that all points in &lt;code&gt;&lt;var&gt;v&lt;/var&gt;(&lt;var&gt;p&lt;/var&gt;)&lt;/code&gt;, a partitions of the tessellation where &lt;var&gt;p&lt;/var&gt; is a member of &lt;var&gt;s&lt;/var&gt;, are closer to &lt;var&gt;p&lt;/var&gt; than any other point in &lt;var&gt;s&lt;/var&gt;. The Voronoi diagram is related to the Delaunay triangulation of a set of points, in that the vertexes of the Voronoi tessellation are the centers of the circum-circles of the simplices of the Delaunay tessellation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5287cef5ba4c3ca8c22e9bd58f8dbf3bccb5f6" translate="yes" xml:space="preserve">
          <source>A backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2136d8149325b3f5fc15b3a5b33522bf2a158d" translate="yes" xml:space="preserve">
          <source>A binary image is an M-by-N matrix of class &lt;code&gt;logical&lt;/code&gt;. A pixel in a binary image is black if it is &lt;code&gt;false&lt;/code&gt; and white if it is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0862aa38d2a16a3f40af145531cad98f083dc09" translate="yes" xml:space="preserve">
          <source>A bitmap image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f4e1b0ca5fd3e0aa94a14a446c1d3c30c10130" translate="yes" xml:space="preserve">
          <source>A block algorithm for matrix 1-norm estimation, with and application to 1-norm pseudospectra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eeba34f7166b28e0656f983149e436157d3235c" translate="yes" xml:space="preserve">
          <source>A boolean array class defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a37bf200bb0f4004e170255f22ecb903188627" translate="yes" xml:space="preserve">
          <source>A boolean matrix class defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22be4ccd756379ede329ccb91b5fb0ebe4a26c13" translate="yes" xml:space="preserve">
          <source>A boolean property. This property type is equivalent to a radio property with &quot;on|off&quot; as accepted values. &lt;var&gt;arg&lt;/var&gt; contains the default property value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578749379e9024d48cea6c1c296118ba67d9ee49" translate="yes" xml:space="preserve">
          <source>A boolean sparse matrix class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec052be6207f57c9e86a51f001644d0570290e0" translate="yes" xml:space="preserve">
          <source>A breakpoint may also be set in a subfunction. For example, if a file contains the functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9bda262820607034f5c6764d22ca5940c22c72" translate="yes" xml:space="preserve">
          <source>A cache file significantly improves the performance of the &lt;code&gt;lookfor&lt;/code&gt; command. The default value is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd830c80e0c34a32ef72efed91a7bb4683ad965b" translate="yes" xml:space="preserve">
          <source>A cancel button can be added to the bottom of the waitbar using the &lt;code&gt;&quot;createcancelbtn&quot;&lt;/code&gt; property of waitbar figures. The action to be executed when the user presses the button is specified using a string or function handle &lt;var&gt;fcn&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d344e68d317028b560a86ec62c377ab5d8846f3" translate="yes" xml:space="preserve">
          <source>A cell array containing strings representing the modifiers pressed with the key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efa21f67eb792b3e8766b15cd2c8dc478fa6337" translate="yes" xml:space="preserve">
          <source>A cell array of strings of the labels in the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925e4bd34257b9a93f03f0d8e2231be6c62c044f" translate="yes" xml:space="preserve">
          <source>A cell array of the text not returned by match, i.e., what remains if you split the string based on &lt;var&gt;pat&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a2adde0d428013580a70a69dfc8f97b2b514df" translate="yes" xml:space="preserve">
          <source>A cell array of the text of each match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c10230c31340d160a0726bd737369f6d70896ca" translate="yes" xml:space="preserve">
          <source>A cell array of the text of each token matched</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804a4b969cf639438a5c9d63325c8db54b748f7c" translate="yes" xml:space="preserve">
          <source>A cell array with strings labeling each text field. This input is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60768aee531853bde5980abe23be0f11e87e5e55" translate="yes" xml:space="preserve">
          <source>A character indicating a plot marker to be place at each data point, or &lt;code&gt;&quot;none&quot;&lt;/code&gt;, meaning no markers should be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6edc281ed7a767d350675192ea7f0f5bdaff890" translate="yes" xml:space="preserve">
          <source>A character string in Octave consists of a sequence of characters enclosed in either double-quote or single-quote marks. Internally, Octave currently stores strings as matrices of characters. All the indexing operations that work for matrix objects also work for strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454b211075f26c520aab980df4383d67fa1baa3b" translate="yes" xml:space="preserve">
          <source>A character string in Octave is just a special &lt;code&gt;Array&lt;/code&gt; class. Consider the example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55539bfd5bcc005999a972bb7993264b7c1eaac9" translate="yes" xml:space="preserve">
          <source>A character that specifies the conversion to be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab08ef09ce125040b510336f563f78fbbf7ff430" translate="yes" xml:space="preserve">
          <source>A class may be a child of more than one class (see &lt;a href=&quot;built_002din-data-types#XREFclass&quot;&gt;class&lt;/a&gt;), and inheritance may be nested. There is no limitation to the number of parents or the level of nesting other than memory or other physical issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b00e0d427b225dd79290c293d1cb5de1996835" translate="yes" xml:space="preserve">
          <source>A clear understanding might be had by considering an example of how the above applies to an example matrix. Consider the matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bd76e61dd3e6e3cdf1dddfc8350238d72efdb7" translate="yes" xml:space="preserve">
          <source>A colon (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c26c8ed7bedbd3585cde8eb0b3f20655c38a74" translate="yes" xml:space="preserve">
          <source>A color in HSV space is represented by hue, saturation and value (brightness) levels in a cylindrical coordinate system. Hue is the azimuth and describes the dominant color. Saturation is the radial distance and gives the amount of hue mixed into the color. Value is the height and is the amount of light in the color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0071f2555301f34a4291008ac6c84b4aa495f16a" translate="yes" xml:space="preserve">
          <source>A color in the RGB space consists of red, green, and blue intensities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ef44c20401ef330e2bef64ba9e61d49de7fb3c" translate="yes" xml:space="preserve">
          <source>A color property. &lt;var&gt;arg&lt;/var&gt; contains the default color value. When no default color is given, the property is set to black. An optional second string argument may be given to specify an additional set of accepted string values (like a radio property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681cdf5941055c04944bef031b35f21e027075fe" translate="yes" xml:space="preserve">
          <source>A color value setting the text color for this menu entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e117aeda74dc853cf9096341ace527e06b1086ee" translate="yes" xml:space="preserve">
          <source>A colorbar displays the current colormap along with numerical rulings so that the color scale can be interpreted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e38ebc894dc9f178086caddb5e36c4dbbfc049" translate="yes" xml:space="preserve">
          <source>A colormap is a real matrix, of class single or double, with 3 columns. Each row represents a single color. The 3 columns contain red, green, and blue intensities respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a90888cae8288c082dc80e77ea02b777c10001c" translate="yes" xml:space="preserve">
          <source>A column array containing the objective function coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c670cbfad4c767d752687c65b6ea608deb71e87b" translate="yes" xml:space="preserve">
          <source>A column array containing the right-hand side value for each constraint in the constraint matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295af7d6cafd4ae5305291a8c9c49e118f04621c" translate="yes" xml:space="preserve">
          <source>A column array containing the types of the variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1688403c905798b3c11fdc1a4de1bb0d3aa8893b" translate="yes" xml:space="preserve">
          <source>A common application for sparse matrices is in the solution of Finite Element Models. Finite element models allow numerical solution of partial differential equations that do not have closed form solutions, typically because of the complex shape of the domain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6a0b3e577acb16b6e2b4641575933fc96c321b" translate="yes" xml:space="preserve">
          <source>A common example of when it does become necessary to convert ranges into vectors occurs when they appear within a vector (i.e., inside square brackets). For instance, whereas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035924cb9dd2edcef395fdcbb9d8144f2f1ae083" translate="yes" xml:space="preserve">
          <source>A common text for engineering courses is G. Strang,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941a2144b9cf79bd9e39fcb22caf03af4d8df4df" translate="yes" xml:space="preserve">
          <source>A common use of &lt;code&gt;mlock&lt;/code&gt; is to prevent persistent variables from being removed from memory, as the following example shows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12460cbec28d2114582b2bf40cffec65ae687b22" translate="yes" xml:space="preserve">
          <source>A compatibility wrapper function that will choose between &lt;code&gt;quadv&lt;/code&gt; and &lt;code&gt;quadgk&lt;/code&gt; depending on the integrand and options chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2756815221829e67112a55f6ac1a94555374fb9" translate="yes" xml:space="preserve">
          <source>A complete description of the command line editing capability is given in this manual, see &lt;a href=&quot;command-line-editing#Command-Line-Editing&quot;&gt;Command Line Editing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9a34a24a2aab6ef2af0e58d918b103eff51e5a" translate="yes" xml:space="preserve">
          <source>A complete example showing the capabilities of text printing using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae032f00f218a6e7a6e660d5e2cfa65046112f61" translate="yes" xml:space="preserve">
          <source>A complete input file that will reproduce the bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf0ad9336807af39f4067da1d30865c58a062ef" translate="yes" xml:space="preserve">
          <source>A complete list of any modifications you have made to the interpreter source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b402ea3a353c36ccbf82dd88a9b4048cc948b617" translate="yes" xml:space="preserve">
          <source>A complex array class defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942861a100c0a359877a2a51d32ac80959118251" translate="yes" xml:space="preserve">
          <source>A complex matrix class defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bdafc4f6f4120fd03b1522123f0b323b4cb8f9" translate="yes" xml:space="preserve">
          <source>A complex sparse matrix class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb63d9fc1386ec4a2bdd078f60b0bba93573864" translate="yes" xml:space="preserve">
          <source>A computational procedure for incomplete gamma functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cffa37fefe8d6e3ef4e2be483a05804584af43" translate="yes" xml:space="preserve">
          <source>A consequence is that &amp;ldquo;pulling back&amp;rdquo; on the up vector does not pitch the camera view (as that would require changing the target). Setting the up vector is thus typically used only to roll the camera. A more intuitive command for this purpose is see &lt;a href=&quot;#XREFcamroll&quot;&gt;camroll&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1d5b2fcafe6ce128a7bb71d7101fcdab50f3dd" translate="yes" xml:space="preserve">
          <source>A constant spacing between two points can be provided by the &lt;var&gt;s&lt;/var&gt; parameter. If &lt;var&gt;s&lt;/var&gt; is a scalar, it is assumed to be the spacing for all dimensions. Otherwise, separate values of the spacing can be supplied by the &lt;var&gt;x&lt;/var&gt;, &amp;hellip; arguments. Scalar values specify an equidistant spacing. Vector values for the &lt;var&gt;x&lt;/var&gt;, &amp;hellip; arguments specify the coordinate for that dimension. The length must match their respective dimension of &lt;var&gt;m&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a15400c0317900c62a4253f589df6fa96abee1" translate="yes" xml:space="preserve">
          <source>A continuous variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64015e364344274f8cc02f91e54e4ad638fe182" translate="yes" xml:space="preserve">
          <source>A dash-dot line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39bac862d481be037715714bb5001566351a675" translate="yes" xml:space="preserve">
          <source>A data (matrix) property. &lt;var&gt;arg&lt;/var&gt; contains the default data value. When no default value is given, the data is initialized to the empty matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9acd744f4c58a34c5645ff2443d70f7e284e42" translate="yes" xml:space="preserve">
          <source>A data structure containing the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31dd06d1955ff5aae1285ddded19bd64c12ac500" translate="yes" xml:space="preserve">
          <source>A date vector is a row vector with six members, representing the year, month, day, hour, minute, and seconds respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba23eed9640232b83c71d3f4c038396b9054bf80" translate="yes" xml:space="preserve">
          <source>A description of the envelope of the bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93bbcb3bdb9e968249cd8ad1bd6b1d446a8657f2" translate="yes" xml:space="preserve">
          <source>A description of what behavior you observe that you believe is incorrect. For example, &quot;The interpreter gets a fatal signal,&quot; or, &quot;The output produced at line 208 is incorrect.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72c5903ff9532d253711f6aafe52e9bab4ac07b" translate="yes" xml:space="preserve">
          <source>A diagonal matrix can also be transposed or conjugate-transposed, giving the expected result. Extracting a leading submatrix of a diagonal matrix, i.e., &lt;code&gt;D(1:m,1:n)&lt;/code&gt;, will produce a diagonal matrix, other indexing expressions will implicitly convert to full matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbda6360c640d99bd6d7b5644dc9f5ee7efcd96" translate="yes" xml:space="preserve">
          <source>A diagonal matrix is defined as a matrix that has zero entries outside the main diagonal; that is, &lt;code&gt;D(i,j) == 0&lt;/code&gt; if &lt;code&gt;i != j&lt;/code&gt;. Most often, square diagonal matrices are considered; however, the definition can equally be applied to non-square matrices, in which case we usually speak of a rectangular diagonal matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfca3ce13bc9362b43c32a9099b8825c43b2f2bd" translate="yes" xml:space="preserve">
          <source>A difference between the oct-file interface to structures and the mex-file version is that the functions to operate on structures in mex-files directly include an &lt;code&gt;index&lt;/code&gt; over the elements of the arrays of elements per &lt;code&gt;field&lt;/code&gt;; Whereas, the oct-file structure includes a Cell Array per field of the structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d02b4ac8a4c10741808a258ba6eb73a9256ce0" translate="yes" xml:space="preserve">
          <source>A directory name or path name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9eb4d05d4e071a7937cef862c44c7090eba678c" translate="yes" xml:space="preserve">
          <source>A documentation cache is generated for all functions in &lt;var&gt;directory&lt;/var&gt; which may be a single string or a cell array of strings. The cache is used to speed up the function &lt;code&gt;lookfor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db886fd458e14ab9f4f594f252e60c06844a984" translate="yes" xml:space="preserve">
          <source>A double precision array class defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d4b80359110471e7dab263d7d4684d6538e500" translate="yes" xml:space="preserve">
          <source>A double precision matrix class defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801fe23c4c8b1c014fcb2fdc2a32bfd8dbbd2c77" translate="yes" xml:space="preserve">
          <source>A double precision sparse matrix class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5395f26dc70404075523a2c5f28f31b7dccd79" translate="yes" xml:space="preserve">
          <source>A figure window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c95ed3dfd85fe88904aa31ec2dc7b64ce95803" translate="yes" xml:space="preserve">
          <source>A filled polygon, currently limited to two dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054b6597c06a3e64f093740eaaddb84177f9bb63" translate="yes" xml:space="preserve">
          <source>A fixed set of functions are &lt;em&gt;built-in&lt;/em&gt;, which means they are available in every Octave program. The &lt;code&gt;sqrt&lt;/code&gt; function is one of these. In addition, you can define your own functions. See &lt;a href=&quot;functions-and-scripts#Functions-and-Scripts&quot;&gt;Functions and Scripts&lt;/a&gt;, for information about how to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686d6532b613192ff6f34f402ab65568b8de6e7e" translate="yes" xml:space="preserve">
          <source>A free (unbounded) constraint (the constraint is ignored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceb4c40643cf8e2d8832e436bbab55515b95210" translate="yes" xml:space="preserve">
          <source>A full format string is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f3304cc1f77c43c57e3fe820db2694782e8f15" translate="yes" xml:space="preserve">
          <source>A function file may contain secondary functions called &lt;em&gt;subfunctions&lt;/em&gt;. These secondary functions are only visible to the other functions in the same function file. For example, a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed122a887a24a515b17391f1a46a31f8869f4e4" translate="yes" xml:space="preserve">
          <source>A function handle is a pointer to another function and is defined with the syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8e2ddd3b09e4f37d34d49984fa6a35df38938e" translate="yes" xml:space="preserve">
          <source>A function handle to confirm if a file is of the specified format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364404b55551df46478307eeabff830759b647c7" translate="yes" xml:space="preserve">
          <source>A function handle to obtain image information of the specified format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ebf279aced20dda8b5424c6d7338b7c87a0140" translate="yes" xml:space="preserve">
          <source>A function handle to open files the specified format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62a153b1558dc304e583a7dcb3dc3745c3a628a" translate="yes" xml:space="preserve">
          <source>A function handle to write if a file is of the specified format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0a0d3602a15b2207a0cd98cc59a8c585c757b6" translate="yes" xml:space="preserve">
          <source>A function may be abstracted and referenced via a function handle acquired using the special operator &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cad8adcf5d78ef02a7d3a21f9e080af6be1ca6" translate="yes" xml:space="preserve">
          <source>A function much similar to &lt;code&gt;fputs&lt;/code&gt; is available for writing data to the screen. The &lt;code&gt;puts&lt;/code&gt; function works just like &lt;code&gt;fputs&lt;/code&gt; except it doesn&amp;rsquo;t take a file pointer as its input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582e025475f6a5d02a75a22ce4c469cc52a54312" translate="yes" xml:space="preserve">
          <source>A further constraint on the sparse matrix storage used by Octave is that all elements in the rows are stored in increasing order of their row index, which makes certain operations faster. However, it imposes the need to sort the elements on the creation of sparse matrices. Having disordered elements is potentially an advantage in that it makes operations such as concatenating two sparse matrices together easier and faster, however it adds complexity and speed problems elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13894eaead38d53d6f36de386b8f38a0e5f74b6" translate="yes" xml:space="preserve">
          <source>A general recommendation for users unfamiliar with these techniques is to use the function &lt;code&gt;repmat&lt;/code&gt; for replicating smaller arrays into bigger ones, which uses such tricks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcec2ca4569b2a4e18469d3dfaa691c89b82d65" translate="yes" xml:space="preserve">
          <source>A generalization of the function &lt;code&gt;diag&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbee173e332e5c99b2a3a1328a55f5396b45190" translate="yes" xml:space="preserve">
          <source>A global installation (package available to all users) is forced, even if the user doesn&amp;rsquo;t normally have system privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19161f9604f1d61305ac7f62d8b531f0231a2100" translate="yes" xml:space="preserve">
          <source>A global variable may only be initialized once in a &lt;code&gt;global&lt;/code&gt; statement. For example, after executing the following code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dd6403b95057f8a4c43a9bfa01f90e73080ed2" translate="yes" xml:space="preserve">
          <source>A handle property. This kind of property holds the handle of a graphics object. &lt;var&gt;arg&lt;/var&gt; contains the default handle value. When no default value is given, the property is initialized to the empty matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d728422847dc3ad34dcaed93aaebf774cfa448" translate="yes" xml:space="preserve">
          <source>A legend is implemented as an additional axes object with the &lt;code&gt;tag&lt;/code&gt; property set to &lt;code&gt;&quot;legend&quot;&lt;/code&gt;. Properties of the legend object may be manipulated directly by using &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0975e6d34467e02bd2ab618eb1bc363017b71293" translate="yes" xml:space="preserve">
          <source>A light object has the following properties which alter the appearance of the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1140b71d332685184ec8f6ba1bd89e6364edc19" translate="yes" xml:space="preserve">
          <source>A light object used for lighting effects on patches and surfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4a394ddc07084f1a810731b239ff11b84d8201" translate="yes" xml:space="preserve">
          <source>A line in two or three dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e453d39f45cba6dab10b5c9a2efcd9f9f37519" translate="yes" xml:space="preserve">
          <source>A link starting with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23de715efb48a1650ea08a445b7572ec30627c1" translate="yes" xml:space="preserve">
          <source>A list of default values to place in each text field. It must be a cell array of strings with the same size as &lt;var&gt;prompt&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237eee3248f440f14e359f0c718126f5449202ad" translate="yes" xml:space="preserve">
          <source>A list of graphic handles can also be passed as the first argument. In this case, the properties of these handles and all child &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;surface&lt;/code&gt; objects will be updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf98d776d983431ce711c89c1cdb67f92bfb207" translate="yes" xml:space="preserve">
          <source>A list of ideas for future enhancements is distributed with Octave. See the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355f66d6e206e944e255ab0441e43c187b7dc600" translate="yes" xml:space="preserve">
          <source>A list of other Octave packages that this package depends on. This can include dependencies on particular versions, with a format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438148b2faed871538a1b8cc93519c64df6563f6" translate="yes" xml:space="preserve">
          <source>A list of the basic &lt;code&gt;Matrix&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt; types, the methods to extract these from an &lt;code&gt;octave_value&lt;/code&gt;, and the associated header file is listed below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="273a87f975fe7ab5d3fd0095e893471231d94f6f" translate="yes" xml:space="preserve">
          <source>A local installation (package available only to current user) is forced, even if the user has system privileges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84384e9e91a9afc956d6134a6ea8fa6aa3b88f58" translate="yes" xml:space="preserve">
          <source>A long description of the file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3cbaf97d8fc4567b42ae741142ffc40785adab" translate="yes" xml:space="preserve">
          <source>A lower triangular matrix has nonzero entries only on the main diagonal and below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08d1659acd8b181d2f9942666ae5232f802c11a" translate="yes" xml:space="preserve">
          <source>A magic square is an arrangement of the integers &lt;code&gt;1:n^2&lt;/code&gt; such that the row sums, column sums, and diagonal sums are all equal to the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880abe1e4b24a17f0236bb90192357dd17501aa2" translate="yes" xml:space="preserve">
          <source>A marker is plotted at each point defined by the coordinates in the vectors &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3997dd6f656e40e3ba67b87d9a39ecb521016c8" translate="yes" xml:space="preserve">
          <source>A marker is plotted at each point defined by the coordinates in the vectors &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, and &lt;var&gt;z&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876475c07c00dc7cd4ed839842e43be39fdcfa46" translate="yes" xml:space="preserve">
          <source>A matrix containing the RGB color map for the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876edf03a06d0eabd3dd0306688bac1841eaf4f5" translate="yes" xml:space="preserve">
          <source>A matrix containing the constraints coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62846ffff2be8b38f9b545d9b1b8507ba545fb81" translate="yes" xml:space="preserve">
          <source>A matrix is skew-Hermitian if the complex conjugate transpose of the matrix is equal to the negative of the original matrix: &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;==&amp;nbsp;-&lt;var&gt;A&lt;/var&gt;'&lt;/code&gt;. If a tolerance is given then the calculation is &lt;code&gt;norm (&lt;var&gt;A&lt;/var&gt; + &lt;var&gt;A&lt;/var&gt;', Inf) / norm (&lt;var&gt;A&lt;/var&gt;, Inf) &amp;lt; &lt;var&gt;tol&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaf76ee0469cafe57bb22b54ef72432b3602c73" translate="yes" xml:space="preserve">
          <source>A matrix is skew-symmetric if the transpose of the matrix is equal to the negative of the original matrix: &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;==&amp;nbsp;-&lt;var&gt;A&lt;/var&gt;.'&lt;/code&gt;. If a tolerance is given then skew-symmetry is determined by &lt;code&gt;norm (&lt;var&gt;A&lt;/var&gt; + &lt;var&gt;A&lt;/var&gt;.', Inf) / norm (&lt;var&gt;A&lt;/var&gt;, Inf) &amp;lt; &lt;var&gt;tol&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe3ea2614e4b44da3fa3bb47dd21a91f578c695" translate="yes" xml:space="preserve">
          <source>A matrix may have one or both dimensions zero, and operations on empty matrices are handled as described by Carl de Boor in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c4e353d8dffa3d72a1b7a1522d6ed41d683ce4" translate="yes" xml:space="preserve">
          <source>A matrix type that stores only the nonzero elements is generally called sparse. It is the purpose of this document to discuss the basics of the storage and creation of sparse matrices and the fundamental operations on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b209221a2ff70a222661f4577821f9408840c79" translate="yes" xml:space="preserve">
          <source>A maximum of &lt;code&gt;length (&lt;var&gt;y0&lt;/var&gt;)&lt;/code&gt; components between &lt;var&gt;fixed_y0&lt;/var&gt; and &lt;var&gt;fixed_yp0&lt;/var&gt; may be chosen as fixed values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c0fc7805755a7e41eaa111621b7acc9ecbc7bc" translate="yes" xml:space="preserve">
          <source>A message will be displayed as each of the startup files is read if you invoke Octave with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf5cd13fbcc80a2f7ffca2e8d21f1b78822b807" translate="yes" xml:space="preserve">
          <source>A method taking either an argument of type &lt;code&gt;dim_vector&lt;/code&gt;, or, in the case of a matrix, two arguments of type &lt;code&gt;octave_idx_type&lt;/code&gt; defining the number of rows and columns in the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a034e359305036861d8e9cdd6e40654beea0f35c" translate="yes" xml:space="preserve">
          <source>A mouse button was pressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e7fa639e4ac37c46720d056922d3437f614e9a" translate="yes" xml:space="preserve">
          <source>A mouse button was released</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56190b5097e09dc25cddb63e861ca133713bbc8" translate="yes" xml:space="preserve">
          <source>A movie frame is simply a struct with the fields &lt;code&gt;&quot;cdata&quot;&lt;/code&gt; and &lt;code&gt;&quot;colormap&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6613fba3ee21879a3ed0169fda0b297a558ee707" translate="yes" xml:space="preserve">
          <source>A natural part of image processing is visualization of an image. The most basic function for this is the &lt;code&gt;imshow&lt;/code&gt; function that shows the image given in the first input argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8668a137df2f43e8c9c400858d8ce1881cbeda4d" translate="yes" xml:space="preserve">
          <source>A newline is not required between the &lt;code&gt;do&lt;/code&gt; keyword and the body; but using one makes the program clearer unless the body is very simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da05b6bc5dc58d23df4f188ff04aba97d394bd97" translate="yes" xml:space="preserve">
          <source>A newline is not required between the condition and the body; but using one makes the program clearer unless the body is very simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06fa6dee029880a80ed3523217d7de2614a58e8" translate="yes" xml:space="preserve">
          <source>A non-negative scalar &lt;var&gt;alpha&lt;/var&gt; for incomplete Cholesky factorization of &lt;code&gt;&lt;var&gt;A&lt;/var&gt; + &lt;var&gt;alpha&lt;/var&gt; * diag (diag (&lt;var&gt;A&lt;/var&gt;))&lt;/code&gt; instead of &lt;var&gt;A&lt;/var&gt;. This can be useful when &lt;var&gt;A&lt;/var&gt; is not positive definite. The default value is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d70682b8ccf24c8c116d29a8ce361956dfb1a54" translate="yes" xml:space="preserve">
          <source>A non-negative scalar specifying the drop tolerance for factorization if performing ICT. The default value is 0 which produces the complete Cholesky factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5d849ccd6af7dd2503258069c7984796ee6bcf" translate="yes" xml:space="preserve">
          <source>A non-negative scalar specifying the drop tolerance for factorization. The default value is 0 which produces the complete LU factorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcc7a0a1176e71582f5e7fa4f965fba11a63831" translate="yes" xml:space="preserve">
          <source>A note on terminology: &amp;ldquo;broadcasting&amp;rdquo; is the term popularized by the Numpy numerical environment in the Python programming language. In other programming languages and environments, broadcasting may also be known as &lt;em&gt;binary singleton expansion&lt;/em&gt; (BSX, in &lt;small&gt;MATLAB&lt;/small&gt;, and the origin of the name of the &lt;code&gt;bsxfun&lt;/code&gt; function), &lt;em&gt;recycling&lt;/em&gt; (R programming language), &lt;em&gt;single-instruction multiple data&lt;/em&gt; (SIMD), or &lt;em&gt;replication&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef0bcaeee1b91d74a0eb68bc4ea5fa850d0ba5d" translate="yes" xml:space="preserve">
          <source>A null string (&quot;&quot;) input to &lt;code&gt;error&lt;/code&gt; will be ignored and the code will continue running as if the statement were a NOP. This is for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;. It also makes it possible to write code such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe70b77179968f141c8807bcedbec7dd07eeab7" translate="yes" xml:space="preserve">
          <source>A number of Octave high level plot functions return groups of other graphics objects or they return graphics objects that have their properties linked in such a way that changes to one of the properties results in changes in the others. A graphic object that groups other objects is an &lt;code&gt;hggroup&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9cf4841f0b266db5d9c7eec35acab8ee0b8037" translate="yes" xml:space="preserve">
          <source>A number specifying the size of the marker. The default is 1. A value of 2 is twice as large as the default, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046ca79528461655d58118b4f81ceead7e9d7811" translate="yes" xml:space="preserve">
          <source>A number specifying the width of the line. The default is 1. A value of 2 is twice as wide as the default, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af2a03caeaf5901efd25cd0134e5507059b9f6a" translate="yes" xml:space="preserve">
          <source>A one line description of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fff21ff3c5e0d1105f326c82aef44681998a1fb" translate="yes" xml:space="preserve">
          <source>A one paragraph description of the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749a452f1917958d41c1cf02c0f96234502ff3fa" translate="yes" xml:space="preserve">
          <source>A particular problem of sparse matrices comes about due to the fact that as the zeros are not stored, the sign-bit of these zeros is equally not stored. In certain cases the sign-bit of zero is important. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d0e965cb3e2e472eb068ed0fd7276fd890b0b9" translate="yes" xml:space="preserve">
          <source>A patch for the bug. Patches can be helpful, but if you find a bug, you should report it, even if you cannot send a fix for the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05df32b4928ea8e5c03620a27636a8925e40b40f" translate="yes" xml:space="preserve">
          <source>A permutation matrix can also be returned from the built-in functions &lt;em&gt;lu&lt;/em&gt; and &lt;em&gt;qr&lt;/em&gt;, if a pivoted factorization is requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f787f5f1d612987bba65895204e32619c243b1" translate="yes" xml:space="preserve">
          <source>A permutation matrix can be transposed (or conjugate-transposed, which is the same, because a permutation matrix is never complex), inverting the permutation, or equivalently, turning a row-permutation matrix into a column-permutation one. For permutation matrices, transpose is equivalent to inversion, thus &lt;code&gt;P\M&lt;/code&gt; is equivalent to &lt;code&gt;P'*M&lt;/code&gt;. Transpose of a permutation matrix (or inverse) is a constant-time operation, flipping only a flag internally, and thus the choice between the two above equivalent expressions for inverse permuting is completely up to the user&amp;rsquo;s taste.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e81a270e124e0cef9dce12f0610418fa896b0aa" translate="yes" xml:space="preserve">
          <source>A permutation matrix is defined as a square matrix that has a single element equal to unity in each row and each column; all other elements are zero. That is, there exists a permutation (vector) &lt;code&gt;p&lt;/code&gt; such that &lt;code&gt;P(i,j) == 1&lt;/code&gt; if &lt;code&gt;j == p(i)&lt;/code&gt; and &lt;code&gt;P(i,j) == 0&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5172efe6bd439987aa3d770f9a060753bd1e71c0" translate="yes" xml:space="preserve">
          <source>A positive &lt;var&gt;k&lt;/var&gt; leads to a left shift; A negative value to a right shift.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccada10b3ac099a3cccac6c6a5278ea950e38c89" translate="yes" xml:space="preserve">
          <source>A prime number is conventionally defined as a positive integer greater than 1 (e.g., 2, 3, &amp;hellip;) which is divisible only by itself and 1. Octave extends this definition to include both negative integers and complex values. A negative integer is prime if its positive counterpart is prime. This is equivalent to &lt;code&gt;isprime (abs (x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894a4321b5694298a6fa7d739925292632045ff8" translate="yes" xml:space="preserve">
          <source>A radio property that can have the values &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt; that flags whether the contours to plot are to be filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7d850accb4d6fabe8a78c8431b972457d5d952" translate="yes" xml:space="preserve">
          <source>A read only property that contains the data return by &lt;code&gt;contourc&lt;/code&gt; used to create the contours of the plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e04189193089ae517b20c2d237c918a44b23d2" translate="yes" xml:space="preserve">
          <source>A repeat instruction &lt;var&gt;R_j&lt;/var&gt; must either be a scalar or a vector. If the instruction is a scalar then each component of &lt;var&gt;x&lt;/var&gt; in dimension &lt;var&gt;j&lt;/var&gt; is repeated &lt;var&gt;R_j&lt;/var&gt; times. If the instruction is a vector then it must have the same number of elements as the corresponding dimension &lt;var&gt;j&lt;/var&gt; of &lt;var&gt;x&lt;/var&gt;. In this case, the &lt;var&gt;k&lt;/var&gt;th component of dimension &lt;var&gt;j&lt;/var&gt; is repeated &lt;code&gt;&lt;var&gt;R_j&lt;/var&gt;(&lt;var&gt;k&lt;/var&gt;)&lt;/code&gt; times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d45094648ec6971abaccf23276021d7fb2816eb" translate="yes" xml:space="preserve">
          <source>A row vector that selects which dimensions of the calculation will appear in the output &lt;var&gt;y&lt;/var&gt;. This is only useful when &lt;var&gt;fcn&lt;/var&gt; returns an N-dimensional array in Format 1. The default is to return all output dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf103c27e763ab76f8f02db9c5ba3e5d70235e6" translate="yes" xml:space="preserve">
          <source>A sample usage of &lt;code&gt;mysparse&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4aa2642c1fb9d6e349c04dbd562bccaab99ff75" translate="yes" xml:space="preserve">
          <source>A scalar double property. &lt;var&gt;arg&lt;/var&gt; contains the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8fb51b130b07ce737c414d4008a1b870e3c24b" translate="yes" xml:space="preserve">
          <source>A script file also differs from a function file in that the variables named in a script file are not local variables, but are in the same scope as the other variables that are visible on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8754228e7ba2fb5bfeaab5c8e64bc2d86c833015" translate="yes" xml:space="preserve">
          <source>A script file is a file containing (almost) any sequence of Octave commands. It is read and evaluated just as if you had typed each command at the Octave prompt, and provides a convenient way to perform a sequence of commands that do not logically belong inside a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e1a90b4660ebca36e9c79a5596b38ddc22ad5e" translate="yes" xml:space="preserve">
          <source>A second use of indexing is to speed up code. Indexing is a fast operation and judicious use of it can reduce the requirement for looping over individual array elements, which is a slow operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741f4f59979ad695e8715f9bbd0aa7e5c54c43b5" translate="yes" xml:space="preserve">
          <source>A section is started by typing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464c66725542d8fd8ec18f2c159070c499c7a82c" translate="yes" xml:space="preserve">
          <source>A section starting in the first line of the document, followed by another start of a section that might be empty, is interpreted as a document title and introduction text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4602359e44015b9f8f6cf54deb5b42c08fbfa9" translate="yes" xml:space="preserve">
          <source>A set of axes. This object is a child of a figure object and may be a parent of line, text, image, patch, surface, or light objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c1f2b6fba48df815c63eaf3a1207fea9c4605b" translate="yes" xml:space="preserve">
          <source>A significant difference between &lt;code&gt;interpn&lt;/code&gt; and the other two multi-dimensional interpolation functions is the fashion in which the dimensions are treated. For &lt;code&gt;interp2&lt;/code&gt; and &lt;code&gt;interp3&lt;/code&gt;, the y-axis is considered to be the columns of the matrix, whereas the x-axis corresponds to the rows of the array. As Octave indexes arrays in column major order, the first dimension of any array is the columns, and so &lt;code&gt;interpn&lt;/code&gt; effectively reverses the &amp;rsquo;x&amp;rsquo; and &amp;rsquo;y&amp;rsquo; dimensions. Consider the example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe58535f02b307832ea659219b9dbefb8113607" translate="yes" xml:space="preserve">
          <source>A similar function &lt;code&gt;run&lt;/code&gt; exists for calling user script files, that are not necessarily on the user path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2162a3f58581870b73603346de0063ada4fe71" translate="yes" xml:space="preserve">
          <source>A simple example comes from chemistry and the need to obtain balanced chemical equations. Consider the burning of hydrogen and oxygen to produce water.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366cad87b39df44591f105f809ee0e3afe252a9f" translate="yes" xml:space="preserve">
          <source>A simple example demonstrating the use of structures within oct-files is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f8e391b3304e6ad3aec99007fb937313aa2c9b" translate="yes" xml:space="preserve">
          <source>A simple way of preventing the above from happening is to create a temporary constant version of the sparse matrix. Note that only the container for the sparse matrix will be copied, while the actual representation of the data will be shared between the two versions of the sparse matrix; This is not a costly operation. The example above, re-written to prevent sparse-to-dense conversion, is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a232969e74ea01cbd885e3ef5912841f816e579" translate="yes" xml:space="preserve">
          <source>A single dimension of the return matrix may be left unspecified and Octave will determine its size automatically. An empty matrix ([]) is used to flag the unspecified dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb7f6d956fd1624df1e812b9d72f101f4160a36" translate="yes" xml:space="preserve">
          <source>A single dynamically linked file might define several functions. However, as Octave searches for functions based on the functions filename, Octave needs a manner in which to find each of the functions in the dynamically linked file. On operating systems that support symbolic links, it is possible to create a symbolic link to the original file for each of the functions which it contains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e06450a49a0c2fe77d0fafe65d3410358b5d9a" translate="yes" xml:space="preserve">
          <source>A single file extension &lt;code&gt;&quot;*.ext&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea54309ffd7f73d15e80b8ab8fa3e3b6c4638801" translate="yes" xml:space="preserve">
          <source>A single file extension. Example: &lt;code&gt;uiputfile (&quot;*.ext&quot;)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eadc5147d1db017fb10ae51f12569648ee5ff77" translate="yes" xml:space="preserve">
          <source>A single statement may not be enough of an example&amp;mdash;the bug might depend on other details that are missing from the single statement where the error finally occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1546f7635196668d2cc7578a223310b6f38f1120" translate="yes" xml:space="preserve">
          <source>A slightly more complex example of &lt;code&gt;varargin&lt;/code&gt; is a function &lt;code&gt;print_arguments&lt;/code&gt; that prints all input arguments. Such a function can be defined like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6725c15f56367c35b6d6b022eaee02395ea6105e" translate="yes" xml:space="preserve">
          <source>A sparse boolean matrix whose structure is that of the Cholesky factorization as determined by &lt;var&gt;typ&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62f9fa30258d36224514df212dffdadc55712fb" translate="yes" xml:space="preserve">
          <source>A special case of broadcasting that may be familiar is when all dimensions of the array being broadcast are 1, i.e., the array is a scalar. Thus for example, operations like &lt;code&gt;x - 42&lt;/code&gt; and &lt;code&gt;max
(x, 2)&lt;/code&gt; are basic examples of broadcasting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3597f16fbe80b50385888f4698a91512a605c27" translate="yes" xml:space="preserve">
          <source>A special form of the &lt;code&gt;for&lt;/code&gt; statement allows you to loop over all the elements of a structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64d8733c32dbc141aae89769142ad175178cd93" translate="yes" xml:space="preserve">
          <source>A specified logical operator may be used between &lt;var&gt;prop_name&lt;/var&gt;, &lt;var&gt;prop_value&lt;/var&gt; pairs. The supported logical operators are: &lt;code&gt;&quot;-and&quot;&lt;/code&gt;, &lt;code&gt;&quot;-or&quot;&lt;/code&gt;, &lt;code&gt;&quot;-xor&quot;&lt;/code&gt;, &lt;code&gt;&quot;-not&quot;&lt;/code&gt;. Example code to locate all figure and axes objects is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fe009815af64c05a168911fd0e47d1c490779d" translate="yes" xml:space="preserve">
          <source>A string array is a data type that stores strings (row vectors of characters) at each element in the array. It is distinct from character arrays which are N-dimensional arrays where each element is a single 1x1 character. It is also distinct from cell arrays of strings which store strings at each element, but use cell indexing &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d280177b44fc499656b8fad42980123998406840" translate="yes" xml:space="preserve">
          <source>A string containing the key combination together with CTRL to execute this menu entry (e.g., &lt;code&gt;&quot;x&quot;&lt;/code&gt; for CTRL+x).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11473e300b42571ceb0d8860375604c7732af315" translate="yes" xml:space="preserve">
          <source>A string containing the label for this menu entry. A &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt;-symbol can be used to mark the &lt;code&gt;&quot;accelerator&quot;&lt;/code&gt; character (e.g., &lt;code&gt;&quot;E&amp;amp;xit&quot;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c22056b7b7ae01c5ed4f0ef9e75034c65dac10" translate="yes" xml:space="preserve">
          <source>A string is returned if &lt;var&gt;template&lt;/var&gt; specifies only character conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bace0a403241de19c07a07e6cad29cdf559de0" translate="yes" xml:space="preserve">
          <source>A string property with a limited set of accepted values. The first argument must be a string with all accepted values separated by a vertical bar (&amp;rsquo;|&amp;rsquo;). The default value can be marked by enclosing it with a &amp;rsquo;{&amp;rsquo; &amp;rsquo;}&amp;rsquo; pair. The default value may also be given as an optional second string argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c332a4ac079cce393ef90ca8f020101385dd42c" translate="yes" xml:space="preserve">
          <source>A string property. &lt;var&gt;arg&lt;/var&gt; contains the default string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8548824d7d6d8941d5b2f200b42998797917e3d9" translate="yes" xml:space="preserve">
          <source>A string specifying the method of integration to use to solve the ODE system. Valid values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad885f2de5ee526d84a503678ffc0c4440dd333" translate="yes" xml:space="preserve">
          <source>A struct with geotagging information retrieved from the Exif tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ceab86692c7428bfcf898197bedf30dc0b0fec" translate="yes" xml:space="preserve">
          <source>A struct with information retrieved from the Exif tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b5f6a88a72f9fe25f14d92b2a89ed4ed269c18" translate="yes" xml:space="preserve">
          <source>A structure array is a particular instance of a structure, where each of the fields of the structure is represented by a cell array. Each of these cell arrays has the same dimensions. Conceptually, a structure array can also be seen as an array of structures with identical fields. An example of the creation of a structure array is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00848104e76f370b94e55e23ada6df4b1ef250ee" translate="yes" xml:space="preserve">
          <source>A structure containing information on where the message occurred. This may be an empty structure if the information cannot be obtained. The fields of the structure are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afffec128f2cec4ccdbab6d3ff3e0151670292c6" translate="yes" xml:space="preserve">
          <source>A structure containing the following parameters used to define the behavior of solver. Missing elements in the structure take on default values, so you only need to set the elements that you wish to change from the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3622f981a8c7b590bb7be0445a118c3b23b1efad" translate="yes" xml:space="preserve">
          <source>A structure containing the system CPU time used. The structure has the elements &lt;code&gt;sec&lt;/code&gt; (seconds) &lt;code&gt;usec&lt;/code&gt; (microseconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f4f36a56b89f46d36b14b87481ca9e5e1836b0" translate="yes" xml:space="preserve">
          <source>A structure containing the text of each matched named token, with the name being used as the fieldname. A named token is denoted by &lt;code&gt;(?&amp;lt;name&amp;gt;&amp;hellip;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026c578a70b2dba180a0a93ea57400a36403f475" translate="yes" xml:space="preserve">
          <source>A structure containing the user CPU time used. The structure has the elements &lt;code&gt;sec&lt;/code&gt; (seconds) &lt;code&gt;usec&lt;/code&gt; (microseconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6219e800f7360ad148cb19ca993ed342801592" translate="yes" xml:space="preserve">
          <source>A structure in Octave is a map between a number of fields represented and their values. The Standard Template Library &lt;code&gt;map&lt;/code&gt; class is used, with the pair consisting of a &lt;code&gt;std::string&lt;/code&gt; and an Octave &lt;code&gt;Cell&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49a97d83f27a99c910d665ab991a7baa42766c1" translate="yes" xml:space="preserve">
          <source>A structure or structure array &lt;var&gt;warning_struct&lt;/var&gt;, with fields &lt;code&gt;&quot;state&quot;&lt;/code&gt; and &lt;code&gt;&quot;identifier&quot;&lt;/code&gt;, may be given as an input to achieve equivalent results. The following example shows how to temporarily disable a warning and then restore its original state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61742c227154417d89297281bcce7e4e5e8fedc5" translate="yes" xml:space="preserve">
          <source>A structure returned from &lt;code&gt;optimset&lt;/code&gt; or an empty matrix to indicate that defaults should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77727e267c4e7dc95534c4bd88fd84e670cce812" translate="yes" xml:space="preserve">
          <source>A structure with two fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd3c12dfff1f5676697c204a39c14c0443cbab2" translate="yes" xml:space="preserve">
          <source>A summary view of a data set can be generated quickly with the &lt;code&gt;statistics&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1654365fc4120066cc09c7c36a0dd5f8d454f221" translate="yes" xml:space="preserve">
          <source>A third boolean argument &lt;var&gt;hilev&lt;/var&gt; can be passed to specify whether the function should preserve listeners/callbacks, e.g., for legends or hggroups. The default is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d75f5f81f67ea31a3056ffa68bec8f8f19bac01" translate="yes" xml:space="preserve">
          <source>A third means of creating a sparse matrix is to work directly with the data in compressed row format. An example of this advanced technique might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362eede00ee117b0165de172e4502b345561eadc" translate="yes" xml:space="preserve">
          <source>A three-dimensional surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d713206f596ccf7d007e35a28a723f3a87709a4" translate="yes" xml:space="preserve">
          <source>A trivial example which redefines the &lt;code&gt;sin&lt;/code&gt; function to be the &lt;code&gt;cos&lt;/code&gt; function shows how &lt;code&gt;builtin&lt;/code&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dd706fc8b0e02a221851a1d480f3f47ef063bc" translate="yes" xml:space="preserve">
          <source>A typical case is &lt;var&gt;A&lt;/var&gt; defined by &lt;code&gt;&lt;var&gt;b&lt;/var&gt; ^ &lt;var&gt;m&lt;/var&gt;&lt;/code&gt;, in which the result &lt;code&gt;&lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt;&lt;/code&gt; can be computed without even forming explicitly &lt;code&gt;&lt;var&gt;b&lt;/var&gt; ^ &lt;var&gt;m&lt;/var&gt;&lt;/code&gt; by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9554a73a78de665b6f0e5b92b864e88f99cd2f9" translate="yes" xml:space="preserve">
          <source>A uibuttongroup is used to group uicontrol objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bf838c2d61fd48e54d3eafee45392924c63e3d" translate="yes" xml:space="preserve">
          <source>A uicontrol object is used to create simple interactive controls such as push buttons, checkboxes, edit and list controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6c19554ecbfcb080f1804219276384229fb304" translate="yes" xml:space="preserve">
          <source>A uitable object is used to show tables of data in a figure window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bc901d80ea5d20ae94e0755c10f785b8cec64d" translate="yes" xml:space="preserve">
          <source>A user-defined function executed once per algorithm iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593b4854610faabcd2c42950cb43c354620583f6" translate="yes" xml:space="preserve">
          <source>A user-defined string to label the graphics object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab3b35792ebb0ae6fee1465a1ed36ff02a7821f" translate="yes" xml:space="preserve">
          <source>A valid function name is like a valid variable name: a sequence of letters, digits and underscores, not starting with a digit. Functions share the same pool of names as variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cc2105a675ed992a28eb44ca3b7b30e648efaf" translate="yes" xml:space="preserve">
          <source>A valid variable name is a sequence of letters, digits, and underscores that does not begin with a digit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c5ea4cc3fb875a4964217ece1831d1461100c7" translate="yes" xml:space="preserve">
          <source>A valid variable name is composed of letters, digits, and underscores (&quot;_&quot;), and the first character must not be a digit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53946557f5f64abe69989902436664c06811255e" translate="yes" xml:space="preserve">
          <source>A value of 1 or true instructs &lt;code&gt;textscan&lt;/code&gt; to concatenate consecutive columns of the same class in the output cell array. A value of 0 or false (default) leaves output in distinct columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dcb175bd5d9a421d85c56f430a7a6174cd08f9" translate="yes" xml:space="preserve">
          <source>A value of &lt;code&gt;info = 1&lt;/code&gt; indicates that the solution has converged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4de0acd3d1feb3b3ac6044c929af6ca2da983c" translate="yes" xml:space="preserve">
          <source>A value of &lt;var&gt;zf&lt;/var&gt; larger than 1 &amp;ldquo;zooms in&amp;rdquo; such that the scene appears magnified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d110e1d04f6cf5d9b6b0f0a914c44adc1362658" translate="yes" xml:space="preserve">
          <source>A value smaller than 1 &amp;ldquo;zooms out&amp;rdquo; so the camera can see more of the scene:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598ab3f2a6f2cc2835f65ec9919fd9d05793875c" translate="yes" xml:space="preserve">
          <source>A variable may be declared global using a &lt;code&gt;global&lt;/code&gt; declaration statement. The following statements are all global declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e683463cccc9697f714f248e06aa83d3db37c3f7" translate="yes" xml:space="preserve">
          <source>A variable name is a valid expression by itself. It represents the variable&amp;rsquo;s current value. Variables are given new values with &lt;em&gt;assignment operators&lt;/em&gt; and &lt;em&gt;increment operators&lt;/em&gt;. See &lt;a href=&quot;assignment-ops#Assignment-Ops&quot;&gt;Assignment Expressions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27e18c0dfe9836e51b7b8e773d8cddd499a3397" translate="yes" xml:space="preserve">
          <source>A variable that has been declared &lt;em&gt;global&lt;/em&gt; may be accessed from within a function body without having to pass it as a formal parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe18d6d8a4b85c1c946678b73fe67049ae473367" translate="yes" xml:space="preserve">
          <source>A variable that has been declared &lt;em&gt;persistent&lt;/em&gt; within a function will retain its contents in memory between subsequent calls to the same function. The difference between persistent variables and global variables is that persistent variables are local in scope to a particular function and are not visible elsewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81281e8d079c716bc4b2e4ef6f0ee14872d0695c" translate="yes" xml:space="preserve">
          <source>A vector is a 2-D array where one of the dimensions is equal to 1. As a consequence a 1x1 array, or scalar, is also a vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682dd16f45c06577f1eb9953aeddb4234eaa1814" translate="yes" xml:space="preserve">
          <source>A vector of the following parameters that can be used to control the initial condition calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca41dd2218026e088dd1d939d575d54cede09b0" translate="yes" xml:space="preserve">
          <source>A vector of the same length as the state specifying the type of inequality constraint. Each element of the vector corresponds to an element of the state and should be assigned one of the following codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f199fa859ed65bd938e6430f7ffca1f9ed6e086" translate="yes" xml:space="preserve">
          <source>A vector of the same length as the state vector. A nonzero element indicates that the corresponding element of the state vector is an algebraic variable (i.e., its derivative does not appear explicitly in the equation set).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a0eab9ea62c522fdca03fcad41d97d73edfef5" translate="yes" xml:space="preserve">
          <source>A very basic &lt;code&gt;classdef&lt;/code&gt; value class (see &lt;a href=&quot;value-classes-vs_002e-handle-classes#Value-Classes-vs_002e-Handle-Classes&quot;&gt;Value Classes vs. Handle Classes&lt;/a&gt;) is defined by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64b123d4fc154f5110f49676a6f0a04ff0ba1e6" translate="yes" xml:space="preserve">
          <source>A very common programming pattern is to increment an existing variable with a given value, like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0443587797679798ef5c3a1d2b129a3696b67408" translate="yes" xml:space="preserve">
          <source>A very specific form of polynomial interpretation is the Pad&amp;eacute; approximant. For control systems, a continuous-time delay can be modeled very simply with the approximant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa7f93fc1224f787fc7ef92319f6663a241012f" translate="yes" xml:space="preserve">
          <source>A waterfall plot is similar to a &lt;code&gt;meshz&lt;/code&gt; plot except only mesh lines for the rows of &lt;var&gt;z&lt;/var&gt; (x-values) are shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f39029bce507261d4c051f0faa5cdd041338ef" translate="yes" xml:space="preserve">
          <source>A. George, J.W.H. Liu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b0b631033856bb20a8ad2ea0168279fbed5060" translate="yes" xml:space="preserve">
          <source>A.1 Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa728181fe8a7c48fd7d8bf9dfdda6b29b463196" translate="yes" xml:space="preserve">
          <source>A.1.1 Getting Started with Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4281b650a5a1a2fe5d556d9e6809cbca52f44955" translate="yes" xml:space="preserve">
          <source>A.1.10 Allocating Local Memory in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ab2f2b0a1074471c96948743b2320ce0f1d29b" translate="yes" xml:space="preserve">
          <source>A.1.11 Input Parameter Checking in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f972d102739122ee0d7da57a881169d3181f3db" translate="yes" xml:space="preserve">
          <source>A.1.12 Exception and Error Handling in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabc0c05131e93631993cd0f24a89aa0e0f4afcb" translate="yes" xml:space="preserve">
          <source>A.1.13 Documentation and Testing of Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8d1e8ba980f935b3d669f24ff7b87043319e34" translate="yes" xml:space="preserve">
          <source>A.1.2 Matrices and Arrays in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d30c7e055ac71f79c35ac6432524657515b570" translate="yes" xml:space="preserve">
          <source>A.1.3 Character Strings in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a613bff926cf4353392d5feaedb015143856cb91" translate="yes" xml:space="preserve">
          <source>A.1.4 Cell Arrays in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bb3ce7ca344be861d81f82c586476437519d66" translate="yes" xml:space="preserve">
          <source>A.1.5 Structures in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba145acd37d7519673a0370650a95425165fb05" translate="yes" xml:space="preserve">
          <source>A.1.6 Sparse Matrices in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d524851544c0f0113d4fbb3d037e63f19156bd6b" translate="yes" xml:space="preserve">
          <source>A.1.6.1 Array and Sparse Class Differences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf330ccec1e5312f5b5c94d11a398ae63ffed01" translate="yes" xml:space="preserve">
          <source>A.1.6.2 Creating Sparse Matrices in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6309b0cc128cabd43e9850f98ddf5a65614aaf0" translate="yes" xml:space="preserve">
          <source>A.1.6.3 Using Sparse Matrices in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b830b335894c43ae499fefae7b187b77c8999a" translate="yes" xml:space="preserve">
          <source>A.1.7 Accessing Global Variables in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79db6457460d54709920892b7b2546ccbb0493d8" translate="yes" xml:space="preserve">
          <source>A.1.8 Calling Octave Functions from Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c9c0806c945f0388cf61f63c02a68c1ec46f17" translate="yes" xml:space="preserve">
          <source>A.1.9 Calling External Code from Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460b59dc11f6b741abf14b80ba426d2a41d70f8e" translate="yes" xml:space="preserve">
          <source>A.2 Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c648501f38b62934427a88ec849017400d7eb0" translate="yes" xml:space="preserve">
          <source>A.2.1 Getting Started with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b783c3ddf67defdca89401aef2099a09ace11e73" translate="yes" xml:space="preserve">
          <source>A.2.2 Working with Matrices and Arrays in Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e254aa98863467a647154401a0d5a6a005efc472" translate="yes" xml:space="preserve">
          <source>A.2.3 Character Strings in Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37e2c68053d712051f7b75a29cdd67b81735b1d4" translate="yes" xml:space="preserve">
          <source>A.2.4 Cell Arrays with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9c9fb28fb61d8f1e386306ee2e1f1c800fb97d" translate="yes" xml:space="preserve">
          <source>A.2.5 Structures with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2368d10b248ec8e67b1e48109353fc3a0099340" translate="yes" xml:space="preserve">
          <source>A.2.6 Sparse Matrices with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133e5d4c69596732dbd721e36c5319b621acb930" translate="yes" xml:space="preserve">
          <source>A.2.7 Calling Other Functions in Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25be3ec0679600c1a9518086ca072bf3113fb232" translate="yes" xml:space="preserve">
          <source>A.3 Standalone Programs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74765498848b63cf4512d394f8bbe630ef326f97" translate="yes" xml:space="preserve">
          <source>A.4 Java Interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79eddb437e87d2d095dba3c45379fbe5012a798" translate="yes" xml:space="preserve">
          <source>A.4.1 Making Java Classes Available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33b832eadf7ec8b16a413a39e7cbc3e04d27517" translate="yes" xml:space="preserve">
          <source>A.4.2 How to use Java from within Octave</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a5c7d825d6ffa8abbb3fc9ab3765b636264d44" translate="yes" xml:space="preserve">
          <source>A.4.3 Set up the JVM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b125b6c5446b02ac34845e3746c52933ea07ae8" translate="yes" xml:space="preserve">
          <source>A.4.4 Java Interface Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c94b8aec75d497fa0d2a1de48c1a6a5fc31d26" translate="yes" xml:space="preserve">
          <source>AA = balance (A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5155328e7a0f5b9a25fab509b88fb27da00c1e" translate="yes" xml:space="preserve">
          <source>AA = balance (A, opt)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970093678b182127f60bb51b8af2c94d539eca3a" translate="yes" xml:space="preserve">
          <source>ABCDEF</source>
          <target state="translated">ABCDEF</target>
        </trans-unit>
        <trans-unit id="a85e90f9835e6411e691ebde65582614cea81732" translate="yes" xml:space="preserve">
          <source>ALT</source>
          <target state="translated">ALT</target>
        </trans-unit>
        <trans-unit id="80d305c58f97edfae92a3627f5a66d9bef4d8d46" translate="yes" xml:space="preserve">
          <source>AM</source>
          <target state="translated">AM</target>
        </trans-unit>
        <trans-unit id="2b881d2b6da4b4575dab68553d054ad1e2015236" translate="yes" xml:space="preserve">
          <source>API for portable 2-D and 3-D graphics (&lt;a href=&quot;https://www.opengl.org&quot;&gt;https://www.opengl.org&lt;/a&gt;). An OpenGL implementation is required to provide Octave&amp;rsquo;s OpenGL-based graphics functions. Octave&amp;rsquo;s OpenGL-based graphics functions usually outperform the gnuplot-based graphics functions because plot data can be rendered directly instead of sending data and commands to gnuplot for interpretation and rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02827c241b6c10e63aac33285f392dba4c9d9516" translate="yes" xml:space="preserve">
          <source>ARPACK</source>
          <target state="translated">ARPACK</target>
        </trans-unit>
        <trans-unit id="5ea03c1bb5afb762d11ebe051e1afc8aecb94aa2" translate="yes" xml:space="preserve">
          <source>ASCII art</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6e23b8c1040563ad15c608f791c2b83583275f" translate="yes" xml:space="preserve">
          <source>ASCII mode is only appropriate for text files as it will convert the remote host&amp;rsquo;s newline representation to the local host&amp;rsquo;s newline representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d5416e04f324c64bf4b2fe43eaafd2066316e0" translate="yes" xml:space="preserve">
          <source>ASCII table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e3b0927170e8b515ab89d87e624e31169ba9ae" translate="yes" xml:space="preserve">
          <source>ATLAS instead of reference &lt;small&gt;BLAS&lt;/small&gt; and &lt;small&gt;LAPACK&lt;/small&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348d8b740f7c7e0db6f55b151cd3dba93727b311" translate="yes" xml:space="preserve">
          <source>AWK, sed, and other Unix utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2dbf9d6ee8e87e354d7d154c12e5b2c6a652cc" translate="yes" xml:space="preserve">
          <source>A_LO = tril (A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c07093389a0517d27bc9ced00aef1676005603" translate="yes" xml:space="preserve">
          <source>A_LO = tril (A, k)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad95f28a217e1ca7d8984230875bb6bf3302181" translate="yes" xml:space="preserve">
          <source>A_LO = tril (A, k, pack)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b7c0d6059af0be9730ca0b2a4c34c5e500a00f7" translate="yes" xml:space="preserve">
          <source>A_UP = triu (A)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e58c7ef3126e46c2f00e5eaf7b06cdaad3cb310" translate="yes" xml:space="preserve">
          <source>A_UP = triu (A, k)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7eae80e60e14c2821813d461061c334424698a" translate="yes" xml:space="preserve">
          <source>A_UP = triu (A, k, pack)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b1354957064f90a14a0b8903ae1bce0e675785" translate="yes" xml:space="preserve">
          <source>Abbreviated month name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee20eabfa2c5006473fff9d5c8e63492799e01ab" translate="yes" xml:space="preserve">
          <source>Abbreviated weekday name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fc0c86fcd7a1b25e429341cf282cf553bde304" translate="yes" xml:space="preserve">
          <source>Absolute Central Moment. The moment about the mean ignoring sign defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b97d430a042dd803c2cb8f67aff430165b40d6" translate="yes" xml:space="preserve">
          <source>Absolute Raw Moment. The moment about zero ignoring sign defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6f394660f89f88adf29c49fc23e43fb09bf612" translate="yes" xml:space="preserve">
          <source>Absolute error tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e9a41fce87fb50f39ad6444090c076c945f2d5" translate="yes" xml:space="preserve">
          <source>Absolute tolerance for single precision; may be zero for pure relative error test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2e7f86ba1a6450ae36178abd54ce12cbb423f4" translate="yes" xml:space="preserve">
          <source>Absolute tolerance used to check if the current basic solution is dual feasible. It is not recommended that you change this parameter unless you have a detailed understanding of its purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb3f347f6a683bfecd235d44eda71cfe9ce6365c" translate="yes" xml:space="preserve">
          <source>Absolute tolerance. May be either vector or scalar. If a vector, it must match the dimension of the state vector, and the relative tolerance must also be a vector of the same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ced34df7d9d2c2c1c20e8ac426e28108151c8b1" translate="yes" xml:space="preserve">
          <source>Absolute tolerance. May be either vector or scalar. If a vector, it must match the dimension of the state vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4add528287ed1e7af2dc1c034890d6704563f0c1" translate="yes" xml:space="preserve">
          <source>Absolute tolerance; may be zero for pure relative error test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5dfdefe44f85179e1f26cf32a070b93b187c70a" translate="yes" xml:space="preserve">
          <source>Abstract Window Toolkit for GUIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a35b0d370c4ab723ff7fea9b08e600af198011a" translate="yes" xml:space="preserve">
          <source>Accept the current line regardless of where the cursor is. If the line is non-empty, add it to the history list. If the line was a history line, then restore the history line to its original state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c168b32789f6553d5cac525f1f61786730bbb8e" translate="yes" xml:space="preserve">
          <source>Access via Handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9aa0b74f357b6a47a0de409d63b615fb54a5c7" translate="yes" xml:space="preserve">
          <source>Accessing Global Variables in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e140449fab408364162fe133f9c2a1c9cd956b58" translate="yes" xml:space="preserve">
          <source>Accessing multiple elements of a cell array with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4131041b474b3b65a2c3f23311e04559f53738e2" translate="yes" xml:space="preserve">
          <source>Accessing the fields of the structure can then be performed with &lt;code&gt;mxGetField&lt;/code&gt; and &lt;code&gt;mxSetField&lt;/code&gt; or alternatively with the &lt;code&gt;mxGetFieldByNumber&lt;/code&gt; and &lt;code&gt;mxSetFieldByNumber&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cb4fd1198a5fe5f8986be2f436c95576818651" translate="yes" xml:space="preserve">
          <source>According to broadcasting rules, if one operand is a scalar and the other is a matrix, the scalar is compared to each element of the matrix in turn, and the result is the same size as the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20272651e1709ece1f65c33e2d84c4babba6caaa" translate="yes" xml:space="preserve">
          <source>Accordingly, with &lt;a href=&quot;java-interface-functions#XREFjava_005fset&quot;&gt;java_set&lt;/a&gt; the value of a field can be set. Note that only public Java fields are accessible from within Octave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb406e59fc6ba0ecc95f653b5397477c34802d77" translate="yes" xml:space="preserve">
          <source>Accumulation</source>
          <target state="translated">Accumulation</target>
        </trans-unit>
        <trans-unit id="41c954926825139112b6857a16f1df9f0b98506c" translate="yes" xml:space="preserve">
          <source>Accumulation functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ebcfe59f276beb7f6238d812ac61ce48d3d9c0" translate="yes" xml:space="preserve">
          <source>Acknowledgements</source>
          <target state="translated">Acknowledgements</target>
        </trans-unit>
        <trans-unit id="97c89a4d6630adeb18fa12ba9976a31413fe293e" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="translated">Action</target>
        </trans-unit>
        <trans-unit id="0aca286f20ef283339ca9b7aaa2c65ea156c2b8b" translate="yes" xml:space="preserve">
          <source>Adaptive Quadrature - Revisited</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8277c41fb8ab45c4ced9ea46bbece603fc99db57" translate="yes" xml:space="preserve">
          <source>Adaptive quadrature is used to minimize the estimate of error until the following is satisfied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ce6be8ca2c86ee92b5a51e291923c59cb3d05a" translate="yes" xml:space="preserve">
          <source>Add &lt;var&gt;clspath&lt;/var&gt; to the dynamic class path of the Java virtual machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879b53ad5a722f32a68eb7064ff8d3ce3d2039fa" translate="yes" xml:space="preserve">
          <source>Add &lt;var&gt;q&lt;/var&gt; amount of time (with units &lt;var&gt;f&lt;/var&gt;) to the serial datenum, &lt;var&gt;d&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e2ba9f12ee92e4f78e14bca5f744ed6be529cb" translate="yes" xml:space="preserve">
          <source>Add a colorbar to the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61be8243e9fae69b929a5f59899248f5302e2e9e" translate="yes" xml:space="preserve">
          <source>Add a light object to a figure using a simple interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e82477acc2b502535583ed8b0d0573ce8f814c" translate="yes" xml:space="preserve">
          <source>Add a light object to a plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1ebbeb12fcbbcbf913bf2108dddcefc6ef637b" translate="yes" xml:space="preserve">
          <source>Add a preview to EPS files. Supported formats are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9600040742d629a96651e34887a7c5740c064915" translate="yes" xml:space="preserve">
          <source>Add date-formatted tick labels to an axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3adaf8b35f792a489a1dcc79b2ef465b99db9ca8" translate="yes" xml:space="preserve">
          <source>Add labels to the contours of a contour plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffad07fcac178b407fb7c82bfe7427b2c86ee525" translate="yes" xml:space="preserve">
          <source>Add named directories to the function search path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d306cc0a765430a03982138b7a8d070384e10e" translate="yes" xml:space="preserve">
          <source>Add named packages to the path. After loading a package it is possible to use the functions provided by the package. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca5125a3c707438e18febebf18aee97545b21a3" translate="yes" xml:space="preserve">
          <source>Add new graphic objects to the current axes. This is equivalent to &lt;code&gt;hold on&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3283decac4594df00240d64107fe2f91443742c3" translate="yes" xml:space="preserve">
          <source>Add new graphic objects to the current figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a791b855afd05212ce0bc6d5f42921c38618676" translate="yes" xml:space="preserve">
          <source>Add path to the head of the search path for function files. The value of &lt;var&gt;path&lt;/var&gt; specified on the command line will override any value of &lt;code&gt;OCTAVE_PATH&lt;/code&gt; found in the environment, but not any commands in the system or user startup files that set the internal load path through one of the path functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c543ec65ad15e531f515c8d8948cb70e028815" translate="yes" xml:space="preserve">
          <source>Add path to the head of the search path for images. The value of &lt;var&gt;path&lt;/var&gt; specified on the command line will override any value of &lt;code&gt;OCTAVE_IMAGE_PATH&lt;/code&gt; found in the environment, but not any commands in the system or user startup files that set the built-in variable &lt;code&gt;IMAGE_PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae85965efd5530db8784e81826e67076f4f8cdb2" translate="yes" xml:space="preserve">
          <source>Add the definition DEF to the compiler call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3b4ad5dbca88facc141f912bfed37f1f7cfeff" translate="yes" xml:space="preserve">
          <source>Add the include directory DIR to compile commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f0d799ba7506e33276904ca250787235593693" translate="yes" xml:space="preserve">
          <source>Add the library LIB to the link command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f536f080c667ea2399171f9fc48031a06e8890" translate="yes" xml:space="preserve">
          <source>Add the library directory DIR to the link command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be1e4a8ccc211070580d179fc88fbdde71cd6da" translate="yes" xml:space="preserve">
          <source>Add the named function or function handle &lt;var&gt;fcn&lt;/var&gt; to the list of functions to call periodically when Octave is waiting for input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c6c5096f88c87560cc837ac713b736fe6c5ffd" translate="yes" xml:space="preserve">
          <source>Add the next character that you type to the line verbatim. This is how to insert things like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e1b1a2971a46ddb7e3ff8664d2e0cca97e8bfa" translate="yes" xml:space="preserve">
          <source>Add the preference &lt;var&gt;pref&lt;/var&gt; and associated value &lt;var&gt;val&lt;/var&gt; to the named preference group &lt;var&gt;group&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de908bf0b6dcbd04ab0ef94e1df703689cbfff34" translate="yes" xml:space="preserve">
          <source>Add the run-time path to the link command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c11c7ee6a6629ff679734433348e9c1ac4c955" translate="yes" xml:space="preserve">
          <source>Adding &amp;rsquo;*&amp;rsquo; to the start of any method above forces &lt;code&gt;interp1&lt;/code&gt; to assume that &lt;var&gt;x&lt;/var&gt; is uniformly spaced, and only &lt;code&gt;&lt;var&gt;x&lt;/var&gt;(1)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;x&lt;/var&gt;(2)&lt;/code&gt; are referenced. This is usually faster, and is never slower. The default method is &lt;code&gt;&quot;linear&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5b5fb67d93f9117697b055a69f9c8a816d57f4" translate="yes" xml:space="preserve">
          <source>Adding a diagonal matrix to a full matrix only operates on the diagonal elements. Thus,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3fd2af17cba49a75302698893fdd47663d6a322" translate="yes" xml:space="preserve">
          <source>Addition. If both operands are matrices, the number of rows and columns must both agree, or they must be broadcastable to the same shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0447d6bfd09800b82881120f781f5d1d3e23b435" translate="yes" xml:space="preserve">
          <source>Additional Calling Syntaxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c056418031dbea0f66c1f5fb72666941f6b6b787" translate="yes" xml:space="preserve">
          <source>Additional arguments &lt;var&gt;p1&lt;/var&gt;, etc., are passed directly to the function &lt;var&gt;f&lt;/var&gt;. To use default values for &lt;var&gt;tol&lt;/var&gt; and &lt;var&gt;trace&lt;/var&gt;, one may pass empty matrices ([]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c5027f7e50f04ff05bb5b67ba152f31fda5505" translate="yes" xml:space="preserve">
          <source>Additional arguments are summarized below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a049381559e8c336efe4fa460310ed899b58f5f7" translate="yes" xml:space="preserve">
          <source>Additional arguments determine the shape of the return matrix. When no arguments are specified a single random integer is returned. If one argument &lt;var&gt;n&lt;/var&gt; is specified then a square matrix (&lt;var&gt;n&lt;/var&gt; x &lt;var&gt;n&lt;/var&gt;) is returned. Two or more arguments will return a multi-dimensional matrix (&lt;var&gt;m&lt;/var&gt; x &lt;var&gt;n&lt;/var&gt; x &amp;hellip;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef9910eac39a9c0f67a9df782f0603c3119bbe0" translate="yes" xml:space="preserve">
          <source>Additional arguments name a list of parent classes from which the new class is derived.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f92256872764d03337f006920f18898026ed14" translate="yes" xml:space="preserve">
          <source>Additional arguments to pass to the external plotting program may also be given. The default value is &lt;code&gt;&quot;gnuplot&quot;&lt;/code&gt; with no additional arguments. See &lt;a href=&quot;installation#Installation&quot;&gt;Installation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcf1e434ce0ea6fd932801239e8679840dcb922" translate="yes" xml:space="preserve">
          <source>Additional arguments, are passed directly to &lt;var&gt;f&lt;/var&gt;. To use the default value for &lt;var&gt;tol&lt;/var&gt; or &lt;var&gt;quadf&lt;/var&gt; one may pass &lt;code&gt;':'&lt;/code&gt; or an empty matrix ([]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5674f80d63a4d9c55960001e7afefb5cbae95f" translate="yes" xml:space="preserve">
          <source>Additional devices are supported by Ghostscript. Some examples are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8388cd8f249e3ebcce51ac26721d45380f0470f" translate="yes" xml:space="preserve">
          <source>Additional information about the size of the facets of a Voronoi diagram, and which points of a set of points is in a polygon can be had with the &lt;code&gt;polyarea&lt;/code&gt; and &lt;code&gt;inpolygon&lt;/code&gt; functions respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53bc593ae8a7a39ddeafe46e37c20844631bcdf" translate="yes" xml:space="preserve">
          <source>Additional name/value argument pairs may be used to specify the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccdb138a5a80e383ad88458acf2e7443dcfb0f1" translate="yes" xml:space="preserve">
          <source>Additional optional parameters can be specified using &lt;code&gt;&quot;&lt;var&gt;property&lt;/var&gt;&quot;, &lt;var&gt;value&lt;/var&gt;&lt;/code&gt; pairs. Valid properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa496df3eabaf4a93148f5ed3ede5535f297f1d" translate="yes" xml:space="preserve">
          <source>Additional property/value pairs are passed directly to the underlying axes object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d4f6fad9867c22a5c45d5b7658eddf4cc2e764" translate="yes" xml:space="preserve">
          <source>Additional property/value pairs are passed directly to the underlying patch object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398a9dc30f978f6d3a9ee61f7cdcb15641aa76bc" translate="yes" xml:space="preserve">
          <source>Additional property/value pairs are passed to the underlying patch command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6d5d74b09fadf8c28b8a4eee3a50a0129e0f07" translate="yes" xml:space="preserve">
          <source>Additional property/value pairs that are valid properties of text objects can be given and are passed to the underlying text objects. Moreover, the contour group property &lt;code&gt;&quot;LabelSpacing&quot;&lt;/code&gt; is available which determines the spacing between labels on a contour to be specified. The default is 144 points, or 2 inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d78329de6560cff7813a234a9c28a35edcc5234" translate="yes" xml:space="preserve">
          <source>Additional supported options: &lt;code&gt;milu&lt;/code&gt;, &lt;code&gt;droptol&lt;/code&gt;, &lt;code&gt;udiag&lt;/code&gt;, &lt;code&gt;thresh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c745654b9906d5c131c23d43944958f3034f969" translate="yes" xml:space="preserve">
          <source>Additional supported options: &lt;code&gt;milu&lt;/code&gt;, &lt;code&gt;droptol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14ce03e4375fad9f8983abe7abff68737ed8482" translate="yes" xml:space="preserve">
          <source>Additional supported options: &lt;code&gt;milu&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54f28fc0f350be5930e3fd10c6ac11b27a91c4c" translate="yes" xml:space="preserve">
          <source>Additional user arguments can be passed to callback functions, and will be passed after the two default arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515ad67c1542a0d57511a34069d52ed97b7d9edb" translate="yes" xml:space="preserve">
          <source>Additionally two trademark symbols are supported, just embrace the letters &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c022cd87e430568a7ae691aefd7f5a998252aba2" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;cellfun&lt;/code&gt; accepts an arbitrary function &lt;var&gt;func&lt;/var&gt; in the form of an inline function, function handle, or the name of a function (in a character string). The function can take one or more arguments, with the inputs arguments given by &lt;var&gt;C&lt;/var&gt;, &lt;var&gt;D&lt;/var&gt;, etc. Equally the function can return one or more output arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9be1fcff9ad8364f038df91bcf677fdc5c68732" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;material&lt;/code&gt; can be called with a single output argument. If called without input arguments, a column cell vector &lt;var&gt;mtypes&lt;/var&gt; with the strings for all available materials is returned. If the one input argument &lt;var&gt;mtype_string&lt;/var&gt; is the name of a material, a 1x5 cell vector &lt;var&gt;refl_props&lt;/var&gt; with the reflectance properties of that material is returned. In both cases, no graphic properties are changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf6256a04236645edd2c3597571bb4e474cd348" translate="yes" xml:space="preserve">
          <source>Additionally, class methods can be defined as functions in a folder of the same name as the class prepended with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab22ed17a10b08a585d69a547c574f55303cb3c3" translate="yes" xml:space="preserve">
          <source>Additionally, if &lt;code&gt;sparse_auto_mutate&lt;/code&gt; is true, all sparse functions test the amount of memory occupied by the sparse matrix to see if the amount of storage used is larger than the amount used by the full equivalent. Therefore &lt;code&gt;speye (2) * 1&lt;/code&gt; will return a full matrix as the memory used is smaller for the full version than the sparse version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f87b2c82d9d62268375625d6e240de0e96cd08b" translate="yes" xml:space="preserve">
          <source>Additionally, if &lt;var&gt;i&lt;/var&gt; is a requested output then one of &lt;code&gt;&quot;first&quot;&lt;/code&gt; or &lt;code&gt;&quot;last&quot;&lt;/code&gt; may be given as an input. If &lt;code&gt;&quot;last&quot;&lt;/code&gt; is specified, return the highest possible indices in &lt;var&gt;i&lt;/var&gt;, otherwise, if &lt;code&gt;&quot;first&quot;&lt;/code&gt; is specified, return the lowest. The default is &lt;code&gt;&quot;last&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d78940b21ee1dd185d630447ba0dc0de8b771b3" translate="yes" xml:space="preserve">
          <source>Additionally, index expressions also use lazy copying when Octave can determine that the indexed portion is contiguous in memory. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada3ae8d5c162a74f6cacc83c9333bbf64090272" translate="yes" xml:space="preserve">
          <source>Additionally, the following libraries use &lt;code&gt;int&lt;/code&gt; internally, so maximum problem sizes are always limited:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42b9f41d68a0c627b7960f7f3b335fb5ea2fba1" translate="yes" xml:space="preserve">
          <source>Additionally, the following tools may be needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b16d8a8319cfdc2d14b5c7422ef0c5cd635ce76" translate="yes" xml:space="preserve">
          <source>Additionally, there are dialog boxes for displaying help messages, warnings, or errors, and for getting text input from the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5989a9e3e7f0c0f12db2d04ad60c803606686d4c" translate="yes" xml:space="preserve">
          <source>Additionally, you may append a &lt;code&gt;&quot;z&quot;&lt;/code&gt; to the mode string to open a gzipped file for reading or writing. For this to be successful, you must also open the file in binary mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962125c11e58f2ce0df60653f29ed2ecfc7c2353" translate="yes" xml:space="preserve">
          <source>Administrating Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844469f2b8d8412b5a4567e479daba7bde6a4013" translate="yes" xml:space="preserve">
          <source>Adobe Illustrator (obsolete for Gnuplot versions &amp;gt; 4.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a9df64655f2d3ba6fe67579fc92c420e65f624" translate="yes" xml:space="preserve">
          <source>Advanced Indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f295b836324624013c2fbd24b9174c066cc0e28" translate="yes" xml:space="preserve">
          <source>Advanced Plotting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788fdafb40ba6d1020611357d53041215158e1c3" translate="yes" xml:space="preserve">
          <source>After a successful computation, the value of &lt;var&gt;istate&lt;/var&gt; will be 2 (consistent with the Fortran version of &lt;small&gt;LSODE&lt;/small&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f6c75e576a28a1e5cf7461b47f52b55d9ce764" translate="yes" xml:space="preserve">
          <source>After a successful computation, the value of &lt;var&gt;istate&lt;/var&gt; will be greater than zero (consistent with the Fortran version of &lt;small&gt;DASPK&lt;/small&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbcfce5ac023b52cbebc3cff1463b5bd3e886e83" translate="yes" xml:space="preserve">
          <source>After a successful computation, the value of &lt;var&gt;istate&lt;/var&gt; will be greater than zero (consistent with the Fortran version of &lt;small&gt;DASSL&lt;/small&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5225740c7352fc38d6ca22b150550b62db8195" translate="yes" xml:space="preserve">
          <source>After all of the calling forms have been enumerated, the next line is a concise one-sentence summary of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641a80d7ffb9950b564ac7e884afdbc9b019fcde" translate="yes" xml:space="preserve">
          <source>After being marked as deprecated for two major releases, the following functions have been removed from Octave. The third column of the table shows the version of Octave in which the function was removed. Prior to removal, each function in the list was marked as deprecated for at least two major releases. All deprecated functions issue warnings explaining that they will be removed in a future version of Octave, and which function should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc1edab849dacf46a1cba1b85f77fed9b76108a" translate="yes" xml:space="preserve">
          <source>After defining the function API with these methods, the supplied arguments can be parsed with the &lt;code&gt;parse&lt;/code&gt; method and the parsing results accessed with the &lt;code&gt;Results&lt;/code&gt; accessor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839498171800fa5ea000f805ff788ab3e54e1f07" translate="yes" xml:space="preserve">
          <source>After the &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; arguments there can be 1, 2, or 4 parameters specifying the error values depending on the nature of the error values and the plot format &lt;var&gt;fmt&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1419b4e9c9752e71c3a8086c187f2b0e48163032" translate="yes" xml:space="preserve">
          <source>After the summary there may be documentation on the inputs and outputs, examples of function usage, notes about the algorithm used, and references to related functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0cf853f06f2de9c5afaa1218c6eb1669049f05f" translate="yes" xml:space="preserve">
          <source>After this expression is executed, the variable &lt;code&gt;z&lt;/code&gt; has the value 1. Whatever old value &lt;code&gt;z&lt;/code&gt; had before the assignment is forgotten. The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4525c3bb93922857e95ef3a494c6d62d6903eeeb" translate="yes" xml:space="preserve">
          <source>After this it is possible to evaluate &lt;em&gt;f&lt;/em&gt; at any &lt;em&gt;x&lt;/em&gt; by writing &lt;code&gt;f(x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8ec5278747e54be417fa72b0b6c6cb050b1b57" translate="yes" xml:space="preserve">
          <source>After this the directory &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3434417a8e169ae6812ea314999d1fcfdbeb322e" translate="yes" xml:space="preserve">
          <source>Algebraic eigenvalue balancing uses standard &lt;small&gt;LAPACK&lt;/small&gt; routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a038ebb6b16de1f4f549a1da48813e0c5e468a5" translate="yes" xml:space="preserve">
          <source>Algorithm Note: &lt;code&gt;condest&lt;/code&gt; uses a randomized algorithm to approximate the 1-norms. Therefore, if consistent results are required, the &lt;code&gt;&quot;state&quot;&lt;/code&gt; of the random generator should be fixed before invoking &lt;code&gt;condest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a14c3f1cf2d2b159d6561496ca82e4227c694b1" translate="yes" xml:space="preserve">
          <source>Algorithm Note: &lt;code&gt;normest1&lt;/code&gt; uses random numbers during evaluation. Therefore, if consistent results are required, the &lt;code&gt;&quot;state&quot;&lt;/code&gt; of the random generator should be fixed before invoking &lt;code&gt;normest1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6806c0072d1a259c2daf56e6e8cc3c76d85a0ec3" translate="yes" xml:space="preserve">
          <source>Algorithm Notes: The &lt;small&gt;LAPACK&lt;/small&gt; library provides two routines for calculating the full singular value decomposition (left and right singular matrices as well as singular values). When calculating just the singular values the following discussion is not relevant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371282deef3cff30ed747af4d31c617cf9bce453" translate="yes" xml:space="preserve">
          <source>Algorithm Notes: When calculating the full decomposition (left and right singular matrices in addition to singular values) there is a choice of two routines in &lt;small&gt;LAPACK&lt;/small&gt;. The default routine used by Octave is &lt;code&gt;gesvd&lt;/code&gt;. The alternative is &lt;code&gt;gesdd&lt;/code&gt; which is 5X faster, but may use more memory and may be inaccurate for some input matrices. See the documentation for &lt;code&gt;svd_driver&lt;/code&gt; for more information on choosing a driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661238701f984d64e82da00db553696522487eb6" translate="yes" xml:space="preserve">
          <source>Algorithm taken from Golub and Van Loan,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f7320c8d82a21ae8fd727c2ed0cf8b44ef5bd2" translate="yes" xml:space="preserve">
          <source>Algorithm terminated by &lt;code&gt;OutputFcn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0e292233723cf707d87dc7097f15f9c24a5c28" translate="yes" xml:space="preserve">
          <source>Algorithm: The normal vectors are calculated by taking the cross product of the diagonals of each of the quadrilateral faces in the meshgrid to find the normal vectors at the center of each face. Next, for each meshgrid point the four nearest normal vectors are averaged to obtain the final normal to the surface at the meshgrid point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f119bec6d5a8e053f754a7e2b1d94bbd4f0d3c3" translate="yes" xml:space="preserve">
          <source>All Java-based routines are run in the JVM&amp;rsquo;s shared memory pool, a dedicated and separate part of memory claimed by the JVM from your computer&amp;rsquo;s total memory (which comprises physical RAM and virtual memory / swap space on hard disk).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59fd70f263ae2af6687c8d258c203bd2b5cf3aa4" translate="yes" xml:space="preserve">
          <source>All annotation objects share two properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834c6527da85cf6750d2cd832415588861b48472" translate="yes" xml:space="preserve">
          <source>All arguments must be numeric and either two-dimensional matrices or scalars. If any argument is of type sparse, the output will also be sparse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c2f9d97ae998668068d4dda3ca7d062aaea08e" translate="yes" xml:space="preserve">
          <source>All characters in the pattern, including whitespace, are significant and are used in pattern matching. (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b67bcc8a9ffbfd036fb1d77f059428298340caf" translate="yes" xml:space="preserve">
          <source>All class methods must be defined within &lt;code&gt;methods&lt;/code&gt; blocks. An exception to this rule is described at the end of this subsection. Those &lt;code&gt;methods&lt;/code&gt; blocks can have additional attributes specifying the access rights or whether the methods are static, i.e., methods that can be called without creating an object of that class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd937bc3ec90d0214bccf9fd40e16800778c571c" translate="yes" xml:space="preserve">
          <source>All class properties must be defined within &lt;code&gt;properties&lt;/code&gt; blocks. The definition of a default value for a property is optional and can be omitted. The default initial value for each class property is &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2c5033a0a28630bdbcea0a3d524ec7bb330533" translate="yes" xml:space="preserve">
          <source>All device formats accepted by &lt;code&gt;print&lt;/code&gt; may be used. Common formats are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187e841129e58a6f630d680147332484c236c093" translate="yes" xml:space="preserve">
          <source>All elements must be numeric and of the same size or scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce23de831afed44b2b7ba24a9661a822cce05c80" translate="yes" xml:space="preserve">
          <source>All libraries and header files will be installed in subdirectories of &lt;code&gt;$prefix64&lt;/code&gt; (you must choose the location of this directory).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c6271553eaf5a21eda5e02fb3f713d1aff5bcc" translate="yes" xml:space="preserve">
          <source>All of Octave&amp;rsquo;s comparison operators return a value of 1 if the comparison is true, or 0 if it is false. For matrix values, they all work on an element-by-element basis. Broadcasting rules apply. See &lt;a href=&quot;broadcasting#Broadcasting&quot;&gt;Broadcasting&lt;/a&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281a4cde8876e88cd9eebce4d5efcd73c817ef21" translate="yes" xml:space="preserve">
          <source>All of the file formats supported by &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; are supported. In certain circumstances a user class might contain a field that it doesn&amp;rsquo;t make sense to save, or a field that needs to be initialized before it is saved. This can be done with the &lt;code&gt;saveobj&lt;/code&gt; method of the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3cd487c3023f1c9dc2910a66a26a1c36ab61d6" translate="yes" xml:space="preserve">
          <source>All of the group objects contain data source parameters. There are string parameters that contain an expression that is evaluated to update the relevant data property of the group when the &lt;code&gt;refreshdata&lt;/code&gt; function is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfed15f906c112b3880ca4df1723f046f6353c24" translate="yes" xml:space="preserve">
          <source>All of the solvers above, can calculate an estimate of the condition number. This can be used to detect numerical stability problems in the solution and force a minimum norm solution to be used. However, for narrow banded, triangular or diagonal matrices, the cost of calculating the condition number is significant, and can in fact exceed the cost of factoring the matrix. Therefore the condition number is not calculated in these cases, and Octave relies on simpler techniques to detect singular matrices or the underlying &lt;small&gt;LAPACK&lt;/small&gt; code in the case of banded matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d916acd80875a1f75263b4d97e9982475eb7f7" translate="yes" xml:space="preserve">
          <source>All of these classes inherit from the &lt;code&gt;Sparse&amp;lt;T&amp;gt;&lt;/code&gt; template class, and so all have similar capabilities and usage. The &lt;code&gt;Sparse&amp;lt;T&amp;gt;&lt;/code&gt; class was based on Octave&amp;rsquo;s &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt; class and users familiar with Octave&amp;rsquo;s &lt;code&gt;Array&lt;/code&gt; classes will be comfortable with the use of the sparse classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad08aebcd0b52cdeb1bb4bef053c641e7119e568" translate="yes" xml:space="preserve">
          <source>All string concatenation functions except &lt;code&gt;cstrcat&lt;/code&gt; also accept cell array data (see &lt;a href=&quot;cell-arrays#Cell-Arrays&quot;&gt;Cell Arrays&lt;/a&gt;). &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;strvcat&lt;/code&gt; convert cell arrays into character arrays, while &lt;code&gt;strcat&lt;/code&gt; concatenates within the cells of the cell arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3a40951eeb78de3cc90cdef1849350b6fe743f" translate="yes" xml:space="preserve">
          <source>All string concatenation functions except &lt;code&gt;cstrcat&lt;/code&gt; convert numerical input into character data by taking the corresponding UTF-8 character for each element (or multi-byte sequence), as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5b3bfcb21e33f16f7c1137c09da9ee8b201fe9" translate="yes" xml:space="preserve">
          <source>All text objects&amp;mdash;such as titles, labels, legends, and text&amp;mdash;include the property &lt;code&gt;&quot;interpreter&quot;&lt;/code&gt; that determines the manner in which special control sequences in the text are rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3177ef5712b612668b1bb2519090db4503fe8aec" translate="yes" xml:space="preserve">
          <source>All values are either 1 or 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7634a12ac1795ba0fd2c8722648167afc44cd883" translate="yes" xml:space="preserve">
          <source>All values are even numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e42afd3636a4a42ff70f3cfc33a46392064073" translate="yes" xml:space="preserve">
          <source>All values are finite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72531d05a4ed320e3eb62d70eccfd94e5ebe5e41" translate="yes" xml:space="preserve">
          <source>All values are greater than or equal to the following value in &lt;var&gt;attributes&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cfb4ca92ebfc6ccc3ef997938f87f1cd9b232e" translate="yes" xml:space="preserve">
          <source>All values are greater than the following value in &lt;var&gt;attributes&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8571946361c12f538f21f309d8adfc2c5e7e8d6b" translate="yes" xml:space="preserve">
          <source>All values are integer. This is different than using &lt;code&gt;isinteger&lt;/code&gt; which only checks its an integer type. This checks that each value in &lt;var&gt;A&lt;/var&gt; is an integer value, i.e., it has no decimal part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51b7ea97a42119fcc4c6acfcf6b6c26f528095a" translate="yes" xml:space="preserve">
          <source>All values are less than or equal to the following value in &lt;var&gt;attributes&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16dcd2c824855921381f915bd9097c09997cdade" translate="yes" xml:space="preserve">
          <source>All values are less than the following value in &lt;var&gt;attributes&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8905c18a451acd417d9df1f3a25516a544eeac9" translate="yes" xml:space="preserve">
          <source>All values are non negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2130b8e346bf5e611f2a322630572f7bc35a34" translate="yes" xml:space="preserve">
          <source>All values are odd numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89302b20f7e0a4c0b29d3ec66e02189044cf67ee" translate="yes" xml:space="preserve">
          <source>All values are positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37bcbd071270436c045c69cafd051dd84716b227" translate="yes" xml:space="preserve">
          <source>All values in a colormap should be in the [0 1] range but this is not enforced. Each function must decide what to do for values outside this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a5abeb88bf1a5568fa6d95d30ba0ef21681182" translate="yes" xml:space="preserve">
          <source>All versions of Octave include a number of built-in data types, including real and complex scalars and matrices, character strings, a data structure type, and an array that can contain all data types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186e070f6498d226f60012137d4651bef8700d48" translate="yes" xml:space="preserve">
          <source>Allocating Local Memory in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ee4043a19743c4727e0be61554857ca54d83e6" translate="yes" xml:space="preserve">
          <source>Allocating memory within an oct-file might seem easy, as the C++ new/delete operators can be used. However, in that case great care must be taken to avoid memory leaks. The preferred manner in which to allocate memory for use locally is to use the &lt;code&gt;OCTAVE_LOCAL_BUFFER&lt;/code&gt; macro. An example of its use is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58061aa544398a798e33181a443b15b7746fab16" translate="yes" xml:space="preserve">
          <source>Alpha</source>
          <target state="translated">Alpha</target>
        </trans-unit>
        <trans-unit id="f981014fd674358f8df4fcacb07ecca0179e92d7" translate="yes" xml:space="preserve">
          <source>Alpha (transparency) channel for the image. This must be a matrix with same class, and number of rows and columns of &lt;var&gt;img&lt;/var&gt;. In case of a multipage image, the size of the 4th dimension must also match and the third dimension must be a singleton. By default, image will be completely opaque.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f2f9040e936dcce2fc219a26f2e349dd4eae0b" translate="yes" xml:space="preserve">
          <source>Also exploit broadcasting in these elementwise operators both to avoid looping and unnecessary intermediate memory allocations. See &lt;a href=&quot;broadcasting#Broadcasting&quot;&gt;Broadcasting&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a42fc813c916de0c4c0023f6e182425878fd0f" translate="yes" xml:space="preserve">
          <source>Also for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;, return the right-hand side of the range (10^&lt;var&gt;b&lt;/var&gt;) when just a single value is requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e30f44f4edbcd99dceb62c1073e3f8920289606" translate="yes" xml:space="preserve">
          <source>Also, a diagonal matrix &lt;var&gt;D&lt;/var&gt; can be multiplied or divided by a scalar, or raised to a scalar power if it is square, producing diagonal matrix result in all cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95178adf4329231651fa8791e5df4b1025cdd224" translate="yes" xml:space="preserve">
          <source>Also, the test for positive definiteness is a low-cost test for a Hermitian matrix with a real positive diagonal. This does not guarantee that the matrix is positive definite, but only that it is a probable candidate. When such a matrix is factorized, a Cholesky factorization is first attempted, and if that fails the matrix is then treated with an LU factorization. Once the matrix has been factorized, &lt;code&gt;matrix_type&lt;/code&gt; will return the correct classification of the matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc7e3b04227eb297b02088cb371c91dbb89a143" translate="yes" xml:space="preserve">
          <source>Alternate Names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121a637fc5053be9a698bd7d66175550da00821c" translate="yes" xml:space="preserve">
          <source>Alternation operator. Match one of a choice of regular expressions. The alternatives must be delimited by the grouping operator &lt;code&gt;()&lt;/code&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa9500290cf4dd90d9eac7daf3711abcb335db5d" translate="yes" xml:space="preserve">
          <source>Alternatively the multiplicity may be defined explicitly, for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4115bd0824a2245809f545062b162e83d91b94" translate="yes" xml:space="preserve">
          <source>Alternatively, a value of 128 (&lt;code&gt;GLP_SF_AUTO&lt;/code&gt;) may be also specified, in which case the routine chooses the scaling options automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077ed198293526ca5fecdf1bccfe48248ddd0aef" translate="yes" xml:space="preserve">
          <source>Alternatively, properties of &lt;code&gt;quadgk&lt;/code&gt; can be passed to the function as pairs &lt;code&gt;&quot;&lt;var&gt;prop&lt;/var&gt;&quot;, &lt;var&gt;val&lt;/var&gt;&lt;/code&gt;. Valid properties are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bd9811e9bbfc37c76498323081f47ef77de878" translate="yes" xml:space="preserve">
          <source>Alternatively, the output of the &lt;code&gt;lasterror&lt;/code&gt; function can be found in a variable indicated immediately after the &lt;code&gt;catch&lt;/code&gt; keyword, as in the example below showing how to redirect an error as a warning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71502ea642ba0592772df69eb88dac6cb37b6257" translate="yes" xml:space="preserve">
          <source>Alternatively, to process the data in a structure, the structure might be converted to another type of container before being treated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f05f40e955d7c8bb417fb376c9feb031d2915f" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?-i) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824fa3406fb2c65537840c88d54d28700ee16049" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?-m) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a14f17eee4fd5d9bedd432119f8f1bc2d745487" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?-s) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81375a4a22742fd5705b3dd28b44b88da68c4fb" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?-x) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ddcef3cfee78cc188521debfcc5abe7a4488ea" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?i) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c19c090750b7f6f6c86e5c6dae6cb53ec549aca" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?m) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde05e446744374d61ff29b661cec22696621784" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?s) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceae955858dc811f18b53f87b25096ee16409252" translate="yes" xml:space="preserve">
          <source>Alternatively, use (?x) in the pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121468f624f9ae46c7a35ed43b80d3f3b4ab7ce1" translate="yes" xml:space="preserve">
          <source>Alternatively, we can concatenate &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;B&lt;/var&gt; along the second dimension in the following way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee23f60853bbef76a80126789cfed098beb343c" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the full or relative path to the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223c53cb8047eab49ffd374fddce0f029f7cea43" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the full path to the graphic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a558192348c479f96efbe53d84a57d9061633caf" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;quad&lt;/code&gt; returns a nonzero value for &lt;var&gt;ier&lt;/var&gt;, the result is reasonably accurate (to see why, examine what happens to the result if you move the lower bound to 0.1, then 0.01, then 0.001, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3b4062d69d5d309d82bfeb03464c53dd22722a" translate="yes" xml:space="preserve">
          <source>Although Octave does not automatically report an error if you call a function with more arguments than expected, doing so probably indicates that something is wrong. Octave also does not automatically report an error if a function is called with too few arguments, but any attempt to use a variable that has not been given a value will result in an error. To avoid such problems and to provide useful messages, we check for both possibilities and issue our own error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6dd2601f20dff450738b52b2b8965bf7c1010f" translate="yes" xml:space="preserve">
          <source>Although Octave normally executes commands from script files that have the name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d02394d8491d30ebf55b85a1780be43be7c00f" translate="yes" xml:space="preserve">
          <source>Although Octave uses a compressed column format, it should be noted that compressed row formats are equally possible. However, in the context of mixed operations between mixed sparse and dense matrices, it makes sense that the elements of the sparse matrices are in the same order as the dense matrices. Octave stores dense matrices in column major ordering, and so sparse matrices are equally stored in this manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aae2b32782cb9c195decaa2c9b384ce48d2fdf4" translate="yes" xml:space="preserve">
          <source>Although a range constant specifies a row vector, Octave does &lt;em&gt;not&lt;/em&gt; normally convert range constants to vectors unless it is necessary to do so. This allows you to write a constant like &lt;code&gt;1 : 10000&lt;/code&gt; without using 80,000 bytes of storage on a typical 32-bit workstation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab40642a93ef7bf8976394282eb6975e7eb06296" translate="yes" xml:space="preserve">
          <source>Although accepted, the argument &lt;var&gt;-completenames&lt;/var&gt; is silently ignored. Octave always returns absolute filenames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0116371776f0f1e5b4fa4d80259bf73f34e7857b" translate="yes" xml:space="preserve">
          <source>Although default values may be set for any object, they are set in parent objects and apply to child objects, of the specified object type. For example, setting the default &lt;code&gt;color&lt;/code&gt; property of &lt;code&gt;line&lt;/code&gt; objects to &lt;code&gt;&quot;green&quot;&lt;/code&gt;, for the &lt;code&gt;root&lt;/code&gt; object, will result in all &lt;code&gt;line&lt;/code&gt; objects inheriting the &lt;code&gt;color&lt;/code&gt;&lt;code&gt;&quot;green&quot;&lt;/code&gt; as the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fcea970358542f476aee95176a7850810f9a3c9" translate="yes" xml:space="preserve">
          <source>Although it is possible to put comment lines into keyboard-composed, throw-away Octave programs, it usually isn&amp;rsquo;t very useful because the purpose of a comment is to help you or another person understand the program at a later time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582d8065b739806feefdb65885c8b86b11703a75" translate="yes" xml:space="preserve">
          <source>Although it is possible to rewrite all &lt;code&gt;for&lt;/code&gt; loops as &lt;code&gt;while&lt;/code&gt; loops, the Octave language has both statements because often a &lt;code&gt;for&lt;/code&gt; loop is both less work to type and more natural to think of. Counting the number of iterations is very common in loops and it can be easier to think of this counting as part of looping rather than as something to do inside the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037be7fedd216678bd6b4094e017b9c5e7410e1c" translate="yes" xml:space="preserve">
          <source>Although the user should only include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6def5ca0362c3fd7df452292e849eb426c7480" translate="yes" xml:space="preserve">
          <source>Although there cannot be multiple entry points in a single mex-file, one can use the &lt;code&gt;mexFunctionName&lt;/code&gt; function to determine what name the mex-file was called with. This can be used to alter the behavior of the mex-file based on the function name. For example, if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c036b3e5ba98c506a21c362ad281332a2e1bffc" translate="yes" xml:space="preserve">
          <source>Although this is inconsistent with the normal behavior of Octave&amp;rsquo;s lexer, which usually prefers to break the input into tokens by preferring the longest possible match at any given point, it is more useful in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e326bab85042418bda6a4b4504b5fe93f49ba59a" translate="yes" xml:space="preserve">
          <source>Always include a plus or minus sign in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2327a47c9dcd85492cbba0eeb5581a7188ee36e9" translate="yes" xml:space="preserve">
          <source>Always include a proper bug report for the problem you think you have fixed. We need to convince ourselves that the change is right before installing it. Even if it is right, we might have trouble judging it if we don&amp;rsquo;t have a way to reproduce the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab8cf4009eb348e2778d880e86ec80daf370091" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;assignment&lt;/em&gt; is an expression that stores a new value into a variable. For example, the following expression assigns the value 1 to the variable &lt;code&gt;z&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731ae279391efa26177273a2bf8dea62a48f4444" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;element-by-element boolean expression&lt;/em&gt; is a combination of comparison expressions using the boolean operators &amp;ldquo;or&amp;rdquo; (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9d6714f31a689d6ebcfc7ac7ed41c91234e7b2" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;index expression&lt;/em&gt; allows you to reference or extract selected elements of a vector, a matrix (2-D), or a higher-dimensional array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83ea985af8c01cb3c8ab65bb7cc6794d16ed1c1" translate="yes" xml:space="preserve">
          <source>An Empty Exercise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34db31be21bf71bd1bf88901949c545c6d5a2176" translate="yes" xml:space="preserve">
          <source>An Improved Incomplete Cholesky Factorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae03158082cb06cd288fa53135959985a4bb2758" translate="yes" xml:space="preserve">
          <source>An additional input argument &lt;var&gt;thres&lt;/var&gt;, that defines the pivoting threshold can be given. &lt;var&gt;thres&lt;/var&gt; can be a scalar, in which case it defines the &lt;small&gt;UMFPACK&lt;/small&gt; pivoting tolerance for both symmetric and unsymmetric cases. If &lt;var&gt;thres&lt;/var&gt; is a 2-element vector, then the first element defines the pivoting tolerance for the unsymmetric &lt;small&gt;UMFPACK&lt;/small&gt; pivoting strategy and the second for the symmetric strategy. By default, the values defined by &lt;code&gt;spparms&lt;/code&gt; are used ([0.1, 0.001]).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edab744da9cb281c04ed05b0101a7f26d1614d6" translate="yes" xml:space="preserve">
          <source>An alternative expression to evaluate, so that the speed of two expressions can be directly compared. The default is &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8a046f7cd194a75b4487f3e9b7b50b571aa0e0" translate="yes" xml:space="preserve">
          <source>An alternative is to convert the data to a different container, such as a matrix or a data structure. Depending on the data this is possible using the &lt;code&gt;cell2mat&lt;/code&gt; and &lt;code&gt;cell2struct&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f78da024542da3774bad17477031346178f0048" translate="yes" xml:space="preserve">
          <source>An array containing the lower bound on each of the variables. If &lt;var&gt;lb&lt;/var&gt; is not supplied, the default lower bound for the variables is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d255ad15690054d728f93115349d3f600dd0515" translate="yes" xml:space="preserve">
          <source>An array containing the upper bound on each of the variables. If &lt;var&gt;ub&lt;/var&gt; is not supplied, the default upper bound is assumed to be infinite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b2647e5df91ccc118cc5e116c8952eb7abf652" translate="yes" xml:space="preserve">
          <source>An array of characters containing the sense of each constraint in the constraint matrix. Each element of the array may be one of the following values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a7732b6ec6b1bf76e5763d812ceef942ebf0d0" translate="yes" xml:space="preserve">
          <source>An array of pointers to input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb0cfdf3e9f6d25482bdcbdfb9b945b63084f5b" translate="yes" xml:space="preserve">
          <source>An array of pointers to return arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f3b3d1e2d9fee505e437056e292c18f010fd8e" translate="yes" xml:space="preserve">
          <source>An array with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cd1faa36fe658299e37385173eb8e20247a122" translate="yes" xml:space="preserve">
          <source>An assignment is an expression, so it has a value. Thus, &lt;code&gt;z = 1&lt;/code&gt; as an expression has the value 1. One consequence of this is that you can write multiple assignments together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb423ef1f1253007a9e6bdcfc772c9224db76bd" translate="yes" xml:space="preserve">
          <source>An attempt is made to approximate the cost of individual operations, but it is wildly inaccurate. You can improve the stability somewhat by doing more work for each &lt;code&gt;n&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d322d7aad27d5ff129532e6d9d788a38d33983e3" translate="yes" xml:space="preserve">
          <source>An easy way to get an overview over the collected data is &lt;code&gt;profshow&lt;/code&gt;. This function takes the profiler data returned by &lt;code&gt;profile&lt;/code&gt; as input and prints a flat profile, for instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f14f47bbd2f72d2b8ff1fc96a133d299eaf0475" translate="yes" xml:space="preserve">
          <source>An equality constraint (&lt;code&gt;A(i,:)*x = b(i)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930632f11da558ed2d8ce54cb74b171e78f8577b" translate="yes" xml:space="preserve">
          <source>An equivalent definition is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142edce8df3f66c69797450fc3cb15d161f5463b" translate="yes" xml:space="preserve">
          <source>An equivalent form of the equation is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a0894e26fe38065d5c7303590f648361f46fceb" translate="yes" xml:space="preserve">
          <source>An error is something that occurs when a program is in a state where it doesn&amp;rsquo;t make sense to continue. An example is when a function is called with too few input arguments. In this situation the function should abort with an error message informing the user of the lacking input arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad0088143ec609dfada6eac9ccb16f329ccb23e" translate="yes" xml:space="preserve">
          <source>An error message is printed if the dimensions of the arguments do not agree, or if either argument is complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2dbd11f236c7b267f6afb505591963ca2e57bb" translate="yes" xml:space="preserve">
          <source>An error results if the dimensions of the arguments do not agree, or if either of the arguments is complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9feda69a1da376b6e0e4db8b529ba427c6c8f84" translate="yes" xml:space="preserve">
          <source>An event such as &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;interrupt&lt;/code&gt;, or &lt;code&gt;warning&lt;/code&gt; (see &lt;a href=&quot;#XREFdbstop&quot;&gt;dbstop&lt;/a&gt; for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb10238ee462a2f0aa005bda9a15e4dcbf2f8632" translate="yes" xml:space="preserve">
          <source>An example &lt;code&gt;mtimes&lt;/code&gt; method for the polynomial class might look like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b454614c1d6c2080c5f1e40e570f6d2183d56bb4" translate="yes" xml:space="preserve">
          <source>An example from Octave&amp;rsquo;s built-in char class demonstrates the interpreter behavior when &lt;code&gt;isnull&lt;/code&gt; is used correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c9154e4f3285c20cd1a5698154cdc3f62be239" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;disp&lt;/code&gt; method for the polynomial class might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c60bb5baf993c4cb06b1af2b784e8dbfe22c95d" translate="yes" xml:space="preserve">
          <source>An example of a Delaunay triangulation of a set of points is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837bfa09b234102e6c7d3771546315554d5e1920" translate="yes" xml:space="preserve">
          <source>An example of an isosurface geometry with different additional coloring:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509dc5e401ec88e5e90de15e1f97d0383d9abafe" translate="yes" xml:space="preserve">
          <source>An example of calling &lt;code&gt;sqp&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9110feebb8525ae98a7cc49cd865d4159823f02b" translate="yes" xml:space="preserve">
          <source>An example of creating and filling a matrix might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d29901b0350f56d61f67a45a13ed1402e93e174" translate="yes" xml:space="preserve">
          <source>An example of its expected output is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3864d6aa35fadbf8e9dc09e20c865e4e8c7e4a07" translate="yes" xml:space="preserve">
          <source>An example of its use is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ac892548f98118376dd81f4bbb59c86c71888b" translate="yes" xml:space="preserve">
          <source>An example of its use is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409f2f44e66e502812d8921c06692c5a6e500b5c" translate="yes" xml:space="preserve">
          <source>An example of the behavior of this function within Octave is then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b2e01c80ae1ba47a9a2b9a4b57b92ad4fea99f" translate="yes" xml:space="preserve">
          <source>An example of the inclusion of a Fortran function in an oct-file is given in the following example, where the C++ wrapper is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e3592bfdace1c7b422f27f4990371a0bf8150b" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;accumdim&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67251afc115dd65cea7e7c1326d709077ca77bc" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;clabel&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed89fd614b170c06b8247ab69d595cdbabe9b1ba" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;convhull&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f667bc9d7aac151bc55a892698052921ed010e92" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;dsearch&lt;/code&gt;, using the above values of &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; and &lt;var&gt;tri&lt;/var&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9d5d0b295584ff0cbe9a78c27d1475a2833d38" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;inpolygon&lt;/code&gt; might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17fa3fbc9e340be225536aac353a461f1bc8640" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;interp1&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a00245455632973f90d8cd5f2cb5b23e3f4c6e" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;linkprop&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c551479e132bb0d8b94ed78e7ad695423a28f3fd" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;pareto&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ea37a407a3591b5629fabed57792f08d7bc2fa" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;polyarea&lt;/code&gt; might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90304dbd4871b7c21f3a2f65a9636ab2aa0e1440" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;refreshdata&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d725df488235c39bc14945aa7cc2331adfb83c3" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;surfnorm&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d964c1b35cbe8b074de009746a8edc9d797bdfb" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;tsearch&lt;/code&gt; can be seen with the simple triangulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a266f1e02f6e56c7faf177f8e3ec712d79dea077" translate="yes" xml:space="preserve">
          <source>An example of the use of &lt;code&gt;voronoi&lt;/code&gt; is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a69badd1d9b3e2b8ad1cacd573ac218fe45a03d" translate="yes" xml:space="preserve">
          <source>An example of the use of the &lt;code&gt;griddata&lt;/code&gt; function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8709434c4a8bed9b2de2f98b92218806ddbc2204" translate="yes" xml:space="preserve">
          <source>An example of the use of these two functions might be</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de686f5f3f72b2597d8174b321d5366d86dfc04" translate="yes" xml:space="preserve">
          <source>An example of the use of this function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78eb9063c36130840abd2e2b1a281ea8dd8277ef" translate="yes" xml:space="preserve">
          <source>An example of the use of typecast on a little-endian machine is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06adcc3821076a34254fd6d22054cddc4202082" translate="yes" xml:space="preserve">
          <source>An example that demonstrates how to work with arbitrary real or complex double precision arrays is given by the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45ab12c55f50c7b6036aef936964903bab65d69" translate="yes" xml:space="preserve">
          <source>An example that demonstrates the use of structures in a mex-file can be found in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ca08f5090c863887d83f6aa6fa69ab7ddf4323" translate="yes" xml:space="preserve">
          <source>An explicit conversion to a full matrix can be requested using the built-in function &lt;em&gt;full&lt;/em&gt;. It should also be noted that the diagonal and permutation matrix objects will cache the result of the conversion after it is first requested (explicitly or implicitly), so that subsequent conversions will be very cheap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a647a9b2cb7446677be2c2e03adb32604edea60" translate="yes" xml:space="preserve">
          <source>An expression can serve as a statement on its own. Most other kinds of statements contain one or more expressions which specify data to be operated on. As in other languages, expressions in Octave include variables, array references, constants, and function calls, as well as combinations of these with various operators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aceccf2b5118f99183fabf6f1bbb59ce6f86536f" translate="yes" xml:space="preserve">
          <source>An important use of the Delaunay tessellation is that it can be used to interpolate from scattered data to an arbitrary set of points. To do this the N-simplex of the known set of points is calculated with &lt;code&gt;delaunay&lt;/code&gt; or &lt;code&gt;delaunayn&lt;/code&gt;. Then the simplices in to which the desired points are found are identified. Finally the vertices of the simplices are used to interpolate to the desired points. The functions that perform this interpolation are &lt;code&gt;griddata&lt;/code&gt;, &lt;code&gt;griddata3&lt;/code&gt; and &lt;code&gt;griddatan&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a62449540788f87f3332ffd1e6de5d004e5d9c" translate="yes" xml:space="preserve">
          <source>An index expression consists of a set of parentheses enclosing &lt;em&gt;M&lt;/em&gt; expressions separated by commas. Each individual index value, or component, is used for the respective dimension of the object that it is applied to. In other words, the first index component is used for the first dimension (rows) of the object, the second index component is used for the second dimension (columns) of the object, and so on. The number of index components &lt;em&gt;M&lt;/em&gt; defines the dimensionality of the index expression. An index with two components would be referred to as a 2-D index because it has two dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43071e6b301277959a8ecebda1b2fc0137866f8e" translate="yes" xml:space="preserve">
          <source>An indexed image consists of an M-by-N matrix of integers and a C-by-3 color map. Each integer corresponds to an index in the color map, and each row in the color map corresponds to an RGB color. The color map must be of class &lt;code&gt;double&lt;/code&gt; with values between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc591c08ea4625b4a1edd2d524b93a18ebff480" translate="yes" xml:space="preserve">
          <source>An indicator of convergence. 0 indicates that the iteration count was exceeded, and therefore convergence was not reached; &amp;gt;0 indicates that the algorithm converged. (The algorithm is stable and will converge given enough iterations.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d78f78b406be5883f7e5f4d01420a36f33502e1" translate="yes" xml:space="preserve">
          <source>An inequality constraint with an upper bound (&lt;code&gt;A(i,:)*x &amp;lt;= b(i)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb13a8f3ed331d6062cd91596eed788516ca9d25" translate="yes" xml:space="preserve">
          <source>An inequality constraint with both upper and lower bounds (&lt;code&gt;A(i,:)*x &amp;gt;= -b(i)&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; (&lt;code&gt;A(i,:)*x &amp;lt;= b(i)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9735e0e8646b14c8606582272c81a4187878afed" translate="yes" xml:space="preserve">
          <source>An inequality with a lower bound (&lt;code&gt;A(i,:)*x &amp;gt;= b(i)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0d4cab65ebdaaefaa3a62a11750262388b909a" translate="yes" xml:space="preserve">
          <source>An inline function is created from a string containing the function body using the &lt;code&gt;inline&lt;/code&gt; function. The following code defines the function &lt;em&gt;f(x) = x^2 + 2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92075a96bc69dd2dc303414b3df4a2d10476b33" translate="yes" xml:space="preserve">
          <source>An integer indicating the status of the solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e68ee25eeccb1070cf40b7dd826c54506897963" translate="yes" xml:space="preserve">
          <source>An integer variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b0d72a404885a677a811eb0275069b7a662974" translate="yes" xml:space="preserve">
          <source>An isosurface connects points with the same value and is analogous to a contour plot, but in three dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438e3383149f3b2a6ee11a52edd5b51c17f9a6bc" translate="yes" xml:space="preserve">
          <source>An m-file for the differential equation used above is included with the Octave distribution in the examples directory under the name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d1fed9943ed5cc011442277da5a18974af0d16" translate="yes" xml:space="preserve">
          <source>An object can be resized to more dimensions than it has; in such case the missing dimensions are assumed to be 1. Resizing an object to fewer dimensions is not possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642809894817d6eb67f19198707729fc951a942c" translate="yes" xml:space="preserve">
          <source>An object of class &lt;code&gt;polynomial2&lt;/code&gt; is created by calling the class constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdff866fbf225060652ab613dc4adba83d1bafc" translate="yes" xml:space="preserve">
          <source>An obvious way to do this is by storing the elements of the matrix as triplets, with two elements being their position in the array (rows and column) and the third being the data itself. This is conceptually easy to grasp, but requires more storage than is strictly needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42aa0b746728e1e7e403f4aad1dee1fdbefc1f49" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;flag character&lt;/em&gt; &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6142a364090dc92b87518e7550aa380d074220b5" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;precision&lt;/em&gt; to specify the number of digits to be written for the numeric conversions. If the precision is specified, it consists of a period (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f068cbd116007a9236a7ec48d88483acfbf4ed7" translate="yes" xml:space="preserve">
          <source>An optional &lt;em&gt;type modifier character&lt;/em&gt;. This character is ignored by Octave&amp;rsquo;s &lt;code&gt;printf&lt;/code&gt; function, but is recognized to provide compatibility with the C language &lt;code&gt;printf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7464ea666c2917755eaaaa559c0b87c25aea84a1" translate="yes" xml:space="preserve">
          <source>An optional decimal integer specifying the &lt;em&gt;minimum field width&lt;/em&gt;. If the normal conversion produces fewer characters than this, the field is padded with spaces to the specified width. This is a &lt;em&gt;minimum&lt;/em&gt; value; if the normal conversion produces more characters than this, the field is &lt;em&gt;not&lt;/em&gt; truncated. Normally, the output is right-justified within the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717908376056e6eb6e0056decb5b94860998a095" translate="yes" xml:space="preserve">
          <source>An optional decimal integer that specifies the &lt;em&gt;maximum field width&lt;/em&gt;. Reading of characters from the input stream stops either when this maximum is reached or when a non-matching character is found, whichever happens first. Most conversions discard initial whitespace characters, and these discarded characters don&amp;rsquo;t count towards the maximum field width. Conversions that do not discard initial whitespace are explicitly documented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97540ec7eb22ec0a6570303acc7d52393482fde" translate="yes" xml:space="preserve">
          <source>An optional directory containing any files that are directly installed by the package. Typically this will include any &lt;code&gt;m&lt;/code&gt;-files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fb6180f16181388a0e3b8b832282927d75f39c" translate="yes" xml:space="preserve">
          <source>An optional directory containing code that must be built prior to the packages installation. The Octave package manager will execute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed92f9bc81d3a174dd3a8039d26b014d0f436ee" translate="yes" xml:space="preserve">
          <source>An optional directory containing documentation for the package. The files in this directory will be directly installed in a sub-directory of the installed package for future reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a8cab7c0dcb0249b3adf2ee850ad1beabd76ac" translate="yes" xml:space="preserve">
          <source>An optional directory containing files that will be added to the Octave &lt;code&gt;EXEC_PATH&lt;/code&gt; when the package is loaded. This might contain external scripts, etc., called by functions within the package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d64675f8404b546961006103bae24c4a9f5c8762" translate="yes" xml:space="preserve">
          <source>An optional field with the column number at which the error occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34b3e4f70e08888b7529e1b0e7e6a44d3b5a78da" translate="yes" xml:space="preserve">
          <source>An optional file that includes commands that are run when the package is added to the users path. Note that &lt;code&gt;PKG_ADD&lt;/code&gt; directives in the source code of the package will also be added to this file by the Octave package manager. Note that symbolic links are to be avoided in packages, as symbolic links do not exist on some file systems, and so a typical use for this file is the replacement of the symbolic link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16664f3c7fca472009141fd6268917393cf3e17" translate="yes" xml:space="preserve">
          <source>An optional file that includes commands that are run when the package is removed from the users path. Note that &lt;code&gt;PKG_DEL&lt;/code&gt; directives in the source code of the package will also be added to this file by the Octave package manager. See &lt;a href=&quot;pkg_005fadd-and-pkg_005fdel-directives#PKG_005fADD-and-PKG_005fDEL-Directives&quot;&gt;PKG_ADD and PKG_DEL Directives&lt;/a&gt;, for details on &lt;code&gt;PKG_DEL&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068eb6236dd6baf0de6e501c8582dd69f4f99f0e" translate="yes" xml:space="preserve">
          <source>An optional final argument, which must be a string or cell array of strings, contains options passed to the underlying qhull command. See the documentation for the Qhull library for details &lt;a href=&quot;http://www.qhull.org/html/qh-quick.htm#options&quot;&gt;http://www.qhull.org/html/qh-quick.htm#options&lt;/a&gt;. The default option is &lt;code&gt;{&quot;Qt&quot;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6f7da8e817a925653db04505f5c8e9fc9a57a1" translate="yes" xml:space="preserve">
          <source>An optional final argument, which must be a string or cell array of strings, contains options passed to the underlying qhull command. See the documentation for the Qhull library for details &lt;a href=&quot;http://www.qhull.org/html/qh-quick.htm#options&quot;&gt;http://www.qhull.org/html/qh-quick.htm#options&lt;/a&gt;. The default options are &lt;code&gt;{&quot;Qt&quot;, &quot;Qbb&quot;, &quot;Qc&quot;, &quot;Qz&quot;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d4fc1a31ba9bfdd10ea16cd2c5f1133f518935" translate="yes" xml:space="preserve">
          <source>An optional list of &lt;var&gt;property&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pairs can be used to change the appearance of the created title text object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27fd7425ff27ee8e5036a98f16b4d71e0309998" translate="yes" xml:space="preserve">
          <source>An optional list of &lt;var&gt;property&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pairs can be used to change the properties of the created text label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5124ee277bc9953f09bc1515165ec9e36203c28" translate="yes" xml:space="preserve">
          <source>An optional range specification can be used to list only a portion of the file. The special keyword &lt;code&gt;&quot;end&quot;&lt;/code&gt; is a valid line number specification for the last line of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5c3072cff6c2e3fb063cacff763796433e946cf" translate="yes" xml:space="preserve">
          <source>An optional second argument, which must be a string or cell array of strings, contains options passed to the underlying qhull command. See the documentation for the Qhull library for details &lt;a href=&quot;http://www.qhull.org/html/qh-quick.htm#options&quot;&gt;http://www.qhull.org/html/qh-quick.htm#options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913971c06348ec643be6bf4d8cab8a7fd6bd6447" translate="yes" xml:space="preserve">
          <source>An optional second argument, which must be a string or cell array of strings, contains options passed to the underlying qhull command. See the documentation for the Qhull library for details &lt;a href=&quot;http://www.qhull.org/html/qh-quick.htm#options&quot;&gt;http://www.qhull.org/html/qh-quick.htm#options&lt;/a&gt;. The default options depend on the dimension of the input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18cd347d8ff985aa6c0071db16eea4aa7e30be3c" translate="yes" xml:space="preserve">
          <source>An optional short description of the used license (e.g., GPL version 3 or newer). This is optional since the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a13b61661ef4d1d1a783560533fe5b4794934c3" translate="yes" xml:space="preserve">
          <source>An optional sixth argument specifies the specular exponent (spread) &lt;var&gt;se&lt;/var&gt;. If not given, &lt;var&gt;se&lt;/var&gt; defaults to 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c492d0e2298093b9ff194505a48e7623726ad9" translate="yes" xml:space="preserve">
          <source>An optional structure containing the following parameter(s) used to define the behavior of the solver. Missing elements in the structure take on default values, so you only need to set the elements that you wish to change from the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2208ee04c913e350c4fd5b07ddd2d2d229ee32d" translate="yes" xml:space="preserve">
          <source>An optional third argument &lt;code&gt;&quot;enable&quot;&lt;/code&gt; or &lt;code&gt;&quot;disable&quot;&lt;/code&gt; is accepted but ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a51cad8576067be21e3c9672827d40116a05f56" translate="yes" xml:space="preserve">
          <source>An optional timeout can be specified using the property &lt;code&gt;&quot;timeout&quot;&lt;/code&gt;. This timeout value is the number of seconds to wait for the condition to be true. &lt;var&gt;timeout&lt;/var&gt; must be at least 1. If a smaller value is specified, a warning is issued and a value of 1 is used instead. If the timeout value is not an integer, it is truncated towards 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042a17c1ea683e5b80e4f43c8e0533a31b65c058" translate="yes" xml:space="preserve">
          <source>An optional type modifier character. This character is ignored by Octave&amp;rsquo;s &lt;code&gt;scanf&lt;/code&gt; function, but is recognized to provide compatibility with the C language &lt;code&gt;scanf&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f805701f60830df81d1bd20c5335d7cd8eaea1c" translate="yes" xml:space="preserve">
          <source>An scalar value containing the relative menu position. The entry with the lowest value is at the first position starting from left or top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e308e8f3909aeff9873f75e92c3d168a850719" translate="yes" xml:space="preserve">
          <source>An un-typed property. This kind of property can hold any octave value. &lt;var&gt;args&lt;/var&gt; contains the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e328161ae176b367a2dd68c96a3f87166c5d4c9" translate="yes" xml:space="preserve">
          <source>An upper triangular matrix has nonzero entries only on the main diagonal and above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ff5d2ec4d3de1bf4958c2936f676d71d7b9337" translate="yes" xml:space="preserve">
          <source>Anchoring operators. Requires pattern to occur at the start (&lt;code&gt;^&lt;/code&gt;) or end (&lt;code&gt;$&lt;/code&gt;) of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8dc56a79af20a3be2a63f12609fb0c43443053" translate="yes" xml:space="preserve">
          <source>And to compute the hash value of a file, e.g., &lt;code&gt;file = &quot;file.txt&quot;&lt;/code&gt;, call &lt;code&gt;hash&lt;/code&gt; in combination with the &lt;code&gt;fileread&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01b669a536a4f381b943a718310d3ef2819edc9" translate="yes" xml:space="preserve">
          <source>And, here is how to &lt;em&gt;yank&lt;/em&gt; the text back into the line. Yanking means to copy the most-recently-killed text from the kill buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b8cad38b939ab2e626fb472109be3b187ccb54" translate="yes" xml:space="preserve">
          <source>Anonymous Function Handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f497993755de46018a5ff1778be3f6bc999629d" translate="yes" xml:space="preserve">
          <source>Anonymous Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc1203d9d051a13ccc429e49cded3efce0acb17" translate="yes" xml:space="preserve">
          <source>Anonymous functions are defined using the syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c8d4349d09fa2b8df21b3095b8e1bc53f536f4" translate="yes" xml:space="preserve">
          <source>Another advanced use of linear indexing is to create arrays filled with a single value. This can be done by using an index of ones on a scalar value. The result is an object with the dimensions of the index expression and every element equal to the original scalar. For example, the following statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5938799b5dc9e3884a33e90847c72f62cc781de" translate="yes" xml:space="preserve">
          <source>Another class of error message occurs at evaluation time. These errors are called &lt;em&gt;run-time errors&lt;/em&gt;, or sometimes &lt;em&gt;evaluation errors&lt;/em&gt;, because they occur when your program is being &lt;em&gt;run&lt;/em&gt;, or &lt;em&gt;evaluated&lt;/em&gt;. For example, if after correcting the mistake in the previous function definition, you type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7e751e171bca6d4def5f9f2f251f6cfa35eaaf" translate="yes" xml:space="preserve">
          <source>Another example for decomposition is a finite difference matrix used to solve a boundary value problem on the unit square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20869813e88a7246f9c4ab8972c8ea0386ef40b3" translate="yes" xml:space="preserve">
          <source>Another example of where comma separated lists are used is in the creation of a new array with &lt;code&gt;[]&lt;/code&gt; (see &lt;a href=&quot;matrices#Matrices&quot;&gt;Matrices&lt;/a&gt;) or the creation of a cell array with &lt;code&gt;{}&lt;/code&gt; (see &lt;a href=&quot;basic-usage-of-cell-arrays#Basic-Usage-of-Cell-Arrays&quot;&gt;Basic Usage of Cell Arrays&lt;/a&gt;). In the expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a150d3d73ac2c4a70a02ece534874375a79ee79" translate="yes" xml:space="preserve">
          <source>Another example, where the result is a multi-dimensional 3-D array and the default value (zero) appears in the output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b1b9a16e9d0cd5f189e3bfcbdfdc320a8fe838" translate="yes" xml:space="preserve">
          <source>Another important feature of Octave is its ability to react to the user typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c628bf874c9da9a656dccc9a2da73737ea87690f" translate="yes" xml:space="preserve">
          <source>Another possible workaround is to use the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b685e1b321be84b2b89601415b342394207d8f67" translate="yes" xml:space="preserve">
          <source>Another set of command-line editing functions use Meta characters. To type</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
