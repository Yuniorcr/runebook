<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="opentsdb">
    <body>
      <group id="opentsdb">
        <trans-unit id="73049b543635fbae9eb9096dea2c4be0c2566a4a" translate="yes" xml:space="preserve">
          <source>The UID FSCK command will scan the entire UID table for errors pertaining to name and UID mappings. By default, the run will scan every column in the table and log any errors that were found. With version 2.1 it is possible to fix errors in the table by passing the &quot;fix&quot; flag. UIDMeta objects are skipped during scanning. Possible errors include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95ba2bd5d873b20be72b2a526e2a30e1117d3ee" translate="yes" xml:space="preserve">
          <source>The UID is a positive integer that is unique to the name of the UID object and it's type. Within the storage system there is a counter that is incremented for each &lt;code&gt;metric&lt;/code&gt;, &lt;code&gt;tagk&lt;/code&gt; and &lt;code&gt;tagv&lt;/code&gt;. When you create a new &lt;code&gt;tsdb-uid&lt;/code&gt; table, this counter is set to 0 for each type. So if you put a new data point with a metric of &lt;code&gt;sys.cpu.0&lt;/code&gt; and a tag pair of &lt;code&gt;host=web01&lt;/code&gt; you will have 3 new UID objects, each with a UID of 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e1e3a6d9ff79ec6731a69970e3e5cc61bc6622" translate="yes" xml:space="preserve">
          <source>The UID limit is usually not an issue, however. A tag value is assigned a UID that is completely disassociated from its tag name. If you use numeric identifiers for tag values, the number is assigned a UID once and can be used with many tag names. For example, if we assign a UID to the number &lt;code&gt;2&lt;/code&gt;, we could store timeseries with the tag pairs &lt;code&gt;cpu=2&lt;/code&gt;, &lt;code&gt;interface=2&lt;/code&gt;, &lt;code&gt;hdd=2&lt;/code&gt; and &lt;code&gt;fan=2&lt;/code&gt; while consuming only 1 tag value UID (&lt;code&gt;2&lt;/code&gt;) and 4 tag name UIDs (&lt;code&gt;cpu&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;hdd&lt;/code&gt; and &lt;code&gt;fan&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1650b024a45f4e97f5f6fd59780ee0a5115163" translate="yes" xml:space="preserve">
          <source>The UID utility provides various functions to search or modify information in the &lt;code&gt;tsdb-uid&lt;/code&gt; table. This includes UID assignments for metrics, tag names and tag values as well as UID meta data, timeseries meta data and tree definitions or data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e08bed21feaf3e99b75b4edf4aa04f9f1051b0d" translate="yes" xml:space="preserve">
          <source>The UIDMeta endpoint returns a list of UIDMeta objects that match the query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d976e19573504c57c28735643d660b168bf137e" translate="yes" xml:space="preserve">
          <source>The VCL configuration language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ca27b960057be9c692b385d99b7a666adff482" translate="yes" xml:space="preserve">
          <source>The aggregated average for &lt;code&gt;sys.cpu.user host=webserver01,cpu=0&lt;/code&gt; and &lt;code&gt;sys.cpu.user host=webserver01,cpu=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45776fa5e8350c63b337ad6bc694c6f27db1d2b" translate="yes" xml:space="preserve">
          <source>The aggregated average for &lt;code&gt;sys.cpu.user host=webserver02,cpu=0&lt;/code&gt; and &lt;code&gt;sys.cpu.user host=webserver02,cpu=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13c03174f347e84fca00daa6ce64815011680a8b" translate="yes" xml:space="preserve">
          <source>The aggregated average for &lt;code&gt;sys.cpu.user host=webserver03,cpu=0&lt;/code&gt; and &lt;code&gt;sys.cpu.user host=webserver03,cpu=1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba351138c443c19cb20675cbf937722a601e1aa" translate="yes" xml:space="preserve">
          <source>The aggregation function to use for reducing the data points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0eccdfb114c1b37e44d5d689e3ec2caad45fab" translate="yes" xml:space="preserve">
          <source>The amount of time it took, in milliseconds, to complete the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a13244f2127b9fdf12c7a6030cbceebc92780b2" translate="yes" xml:space="preserve">
          <source>The array of results. Each sub array starts with the timestamp in ms as the first (offset 0) value. The remaining values are the results for each series when a group by was applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e267991298a37837615e4e72157ba4d9e30432e6" translate="yes" xml:space="preserve">
          <source>The benefits of this schema are that you have very deep granularity in your data, e.g., storing usage metrics on a per-core basis. You can also easily craft a query to get the average usage across all cores an all hosts: &lt;code&gt;start=1d-ago&amp;amp;m=avg:sys.cpu.user&lt;/code&gt;. However queries against that particular metric will take longer as there are more rows to sift through.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed1a5b3684d300fe09cb4e822d78aebd51db9b7" translate="yes" xml:space="preserve">
          <source>The best way to contribute code is to fork the main repo and &lt;a href=&quot;https://help.github.com/articles/using-pull-requests&quot;&gt;send a pull request&lt;/a&gt; on GitHub.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60310296c86c8b1058f1d388b722a7acbce3dee" translate="yes" xml:space="preserve">
          <source>The class name of a real time publishing plugin to instantiate. If &lt;code&gt;tsd.rtpublisher.enable&lt;/code&gt; is set to false, this value is ignored. E.g. net.opentsdb.tsd.RabbitMQPublisher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e91bd5659196a1e84d26096d4ec1d5238af397" translate="yes" xml:space="preserve">
          <source>The class name of a search plugin to instantiate. If &lt;code&gt;tsd.search.enable&lt;/code&gt; is set to false, this value is ignored. E.g. net.opentsdb.search.ElasticSearch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152c9c578960286e497ea54d46a3d98b2252050a" translate="yes" xml:space="preserve">
          <source>The class that will be used to implement the HBase API AsyncBigtable will use as a shim between the Bigtable client and OpenTSDB. Set this to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d6f0098f89f002b1a2dc4cbc9d8c59a69d57e5" translate="yes" xml:space="preserve">
          <source>The clients for Bigtable are in beta and undergoing a number of changes. Performance should improve as we adjust the code and uncover new tuning parameters. Please help us out on the mailing list or by modifying the code in GitHub.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67776a1b0a970f817e1cf55bbb42c7a9c5b121cc" translate="yes" xml:space="preserve">
          <source>The cluster ID you assigned to your Bigtable cluster at creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fed16c75eb1b8b5eb43dc5dc8d3216b5b97b026" translate="yes" xml:space="preserve">
          <source>The code for this endpoint is very simple and does not include any security. Thus you should make sure that permissions on your static root directory are secure so that users can't write malicious files and serve them out of OpenTSDB. Users shouldn't be able to write files via OpenTSDB, but take precautions just to be safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b3800038fbec2c89910cb9e10a9597dabe4b0b" translate="yes" xml:space="preserve">
          <source>The command format is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3127b1b2c8ecbc3b318ccdb2bcf59e6900c2e4" translate="yes" xml:space="preserve">
          <source>The common parameters above are required by all the CLI commands. It can be tedious to manually type them over and over again. You can instead store typically used values in a file &lt;code&gt;./tsdb.local&lt;/code&gt;. This file is expected to be a shell script and will be sourced by &lt;code&gt;./tsdb&lt;/code&gt; if it exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6b905af8bbb89afc4e1f923d87d75e3a401eca" translate="yes" xml:space="preserve">
          <source>The configuration file conforms to the Java properties specification. Configuration names are lower-case, dotted strings without spaces. Each name is followed by an equals sign, then the value for the property. All OpenTSDB properties start with &lt;code&gt;tsd.&lt;/code&gt; Comments or inactive configuration lines are blocked by a hash symbol &lt;code&gt;#&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071768e6e986b3028f383e41796ac237ff910ee3" translate="yes" xml:space="preserve">
          <source>The connection queue depth for completed or incomplete connection requests depending on OS. The default may be limited by the 'somaxconn' kernel setting or set by Netty to 3072.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3899cefd6118b1ea06bf5519e8afb8b6d8bc96a8" translate="yes" xml:space="preserve">
          <source>The correct Content-Type is returned for each response, e.g. &lt;code&gt;text/html; charset=UTF-8&lt;/code&gt; for HTML, &lt;code&gt;application/json&lt;/code&gt; for JSON and &lt;code&gt;image/png&lt;/code&gt; for images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65812624ee468c4cf05eadca4a42dd6837f4242e" translate="yes" xml:space="preserve">
          <source>The current number of RPCs sent to HBase and awaiting a response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a2f281de19405e21c4f338555a6008c9b6b1ed" translate="yes" xml:space="preserve">
          <source>The current number of assigned metric UIDs. (NOTE: if random metric UID generation is enabled ids-used will always be 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5b94c6f5790c5d3e8952b201226be89b62f8fa" translate="yes" xml:space="preserve">
          <source>The current number of assigned tagk UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df997c8fb6c02251f8baa21c4d2ddb9ec13c7ff5" translate="yes" xml:space="preserve">
          <source>The current number of assigned tagv UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e9102c387374533af0182fe6a01032baccd42f" translate="yes" xml:space="preserve">
          <source>The current number of available metric UIDs, decrements as UIDs are assigned. (NOTE: if random metric UID generation is enabled ids-used will always be 0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb1f9f5cc6842912153742777c47386c3b5a3e9" translate="yes" xml:space="preserve">
          <source>The current number of available tagk UIDs, decrements as UIDs are assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8804dda7913c3868e69c38d8b49e91051b5c7c" translate="yes" xml:space="preserve">
          <source>The current number of available tagv UIDs, decrements as UIDs are assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accf7b069d5c2a3cb119a1870acd0905e5917ba3" translate="yes" xml:space="preserve">
          <source>The current number of cached metric UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2aae198b0379715915537d200598fa2c49858ec" translate="yes" xml:space="preserve">
          <source>The current number of cached tagk UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d3777742d33d8e59b4c95bb80d9386648564b9" translate="yes" xml:space="preserve">
          <source>The current number of cached tagv UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a9409d7b90be8afebed8b0f75be99c82c6cacd" translate="yes" xml:space="preserve">
          <source>The daemon will continue to run until killed via a Telnet or HTTP command is sent to tell it to stop. If an error occurred, such as failure to connect to Zookeeper or the inability to bind to the proper interface and port, an error will be logged and the daemon will exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e0f033f646c3e9721702fe4fb9558fb456f9b6" translate="yes" xml:space="preserve">
          <source>The data table above would be stored as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0608e7ddc139367bd4dd93c9e54b570b70503e" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;/annotation&lt;/code&gt; endpoint deals with one notation at a time. The &lt;code&gt;/annotation/bulk&lt;/code&gt; endpoint allows for adding or updating multiple annotations at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3f92cf92e007b1a65a3368774fdbb20337fd33" translate="yes" xml:space="preserve">
          <source>The default OpenTSDB serializer parses and returns JSON formatted data. Below you'll find details about the serializer and request parameters that affect only the the JSON serializer. If the serializer has extra parameters for a specific endpoint, they'll be listed below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b5225bbf06ce02d610354ecb466517ea92482f" translate="yes" xml:space="preserve">
          <source>The default for the UI is to aggregate each time series for each host by adding them together (sum). What this means is, TSD is taking the three time series with this metric (host=A, B and C) and adding their values together to come up with the total hits by all web servers at a given time . Note you don't need to send your datapoints at exactly the same time, the TSD will figure it out. So, if each of your hosts was serving 1000 hits per second each at some point in time, the graph would show 3000. What if you wanted to show about how many hits each web server was serving? Two ways. If you just care about the average that each web server was serving, just change the Aggregator method from sum to avg. You can also try the others (max, min) to see the maximum or minimum value. More aggregation functions are in the works (percentiles, etc.). This is done on a per-interval basis , so if at some point in time one of your webservers was serving 50 QPS and the others were serving 100 and later a different webserver was serving 50 QPS and the others were serving 100, for these two points the Min would be 50. In other words it doesn't figure out which time series was the total minimum and just show you that host plot. The other way to see how many hits each web server is serving? This is where we look at the tag fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f12b686f4b6de6773c99daafb597141723b62b" translate="yes" xml:space="preserve">
          <source>The default output for &lt;code&gt;scan&lt;/code&gt; is a raw dump of the rows and columns that match the given queries. This is useful in debugging situations such as data point collisions or encoding issues. As the output includes raw byte arrays and the format changes slightly depending on the data, it is not easily machine paresable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e21c2cebb9ebadbe23edf09f25124ac4eaaeac" translate="yes" xml:space="preserve">
          <source>The different metric names included in the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563d3e773d2e2edbd26dd4ba5a6f0bfba07628f6" translate="yes" xml:space="preserve">
          <source>The documentation for each endpoint listed below will contain details about how to use that endpoint. Eahc page will contain a description of the endpoint, what verbs are supported, the fields in a request, fields in a respone and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489d7dad3ad92f6c176eada509f15bb5a1140a27" translate="yes" xml:space="preserve">
          <source>The easiest way to get started with OpenTSDB is to open up a terminal or telnet client, connect to your TSD and issue a &lt;code&gt;put&lt;/code&gt; command and hit 'enter'. If you are writing a program, simply open a socket, print the string command with a new line and send the packet. The telnet command format is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dea75abaa4aadbf40544a29fd55f78fb7a47c0" translate="yes" xml:space="preserve">
          <source>The end time for the query. If left out, the end is &lt;em&gt;now&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1421c0901110c8ca97d08883a6a667427626a477" translate="yes" xml:space="preserve">
          <source>The exception so far has been the introduction of salted rows in 2.2.0. Disabled by default, using this feature requires creating a new HBase table with a new set of pre-splits and modifying the configuration of every TSD to use the new table with salting enabled. The schema for salted and unsalted tables is incompatible so if users have a lot of data in a previous table, it may be best to leave a few TSDs running to query against the old table and new TSDs to write to and read from the new salted table. For smaller amounts of data, the &lt;a href=&quot;user_guide/cli/scan&quot;&gt;&lt;em&gt;scan&lt;/em&gt;&lt;/a&gt; tool can be used to export and re-import your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f1f82119554290d1086f80c8f289712fc2e7e7" translate="yes" xml:space="preserve">
          <source>The existing UID name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd47bdebd4b7e0aae03c785f9eed4d0fa343cf79" translate="yes" xml:space="preserve">
          <source>The expression ID the output matches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3cfd8e05ed701d61e15b3c6fc6e98f2bbff37cd" translate="yes" xml:space="preserve">
          <source>The expression to execute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cda25d432adec655738db531a0d578e5011d69" translate="yes" xml:space="preserve">
          <source>The fields and examples below refer to the default JSON serializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda8250ed6ae8ff2bb5698bf327b530554ee150e" translate="yes" xml:space="preserve">
          <source>The filter expression to evaluate and depends on the filter being used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec7cb1415ec42139dc99bc02e58a51d0cf10d7da" translate="yes" xml:space="preserve">
          <source>The filter to use when fetching this metric. It must match a filter in the filters array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aedda4e03a58e0682434ffdc05f2df1e5ee28489" translate="yes" xml:space="preserve">
          <source>The first column is a timestamp, the second is the average latency for that 30 second window, and the third is the type of request we're talking about. If you run your cron job on a day worth of logs, you'll end up with 8640 such lines. In order to import those into OpenTSDB, you need to adjust your cron job slightly to produce its output in the following format:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d51c08dde0f40971599ecc76a1bea5bec1d5cc" translate="yes" xml:space="preserve">
          <source>The first sticking point folks run into is ''uid assignment''. Every string for a metric, tag key and tag value must be assigned a UID before the data point can be stored. For example, the metric &lt;code&gt;sys.cpu.user&lt;/code&gt; may be assigned a UID of &lt;code&gt;000001&lt;/code&gt; the first time it is encountered by a TSD. This assignment takes a fair amount of time as it must fetch an available UID, write a UID to name mapping and a name to UID mapping, then use the UID to write the data point's row key. The UID will be stored in the TSD's cache so that the next time the same metric comes through, it can find the UID very quickly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bda1276e1087b43dceacf7ef436f70ff364207f" translate="yes" xml:space="preserve">
          <source>The fix is to delete the forward maps for all names that map to the same UID. Then the UID is given a new name that is a dot seperated concatenation of the previous names with an &quot;fsck&quot; prefix. E.g. in the example above we would have a new name of &quot;fsck.bar.foo&quot;. This name may be used to access data from the corrupt time series. The next time data is written for the errant names, new UIDs will be assigned to each and new time series created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33888d85e4774941d6ae808e9100e601d835527b" translate="yes" xml:space="preserve">
          <source>The fix is to restore the missing reverse map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5be541b1898ab9beb07b9dc54e70a221b916a6c" translate="yes" xml:space="preserve">
          <source>The following fields are required for this endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d14021537cbf1dea9a206e688d7202d686d5851" translate="yes" xml:space="preserve">
          <source>The following fields are used for this endpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a490344f5c8df49584a493584f5de67ccb626d" translate="yes" xml:space="preserve">
          <source>The following fields can be used for all rule endpoint requests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dc00ec9a4fb8b8a220ee32cdc8f38b0773a3c0" translate="yes" xml:space="preserve">
          <source>The following fields can be used for all tree endpoint requests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17677b932c406b4853ef0fea88d650bebddc8056" translate="yes" xml:space="preserve">
          <source>The following fields can be used to request a branch. Only one or the other may be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b733e0ace0e2c16ab424bf1f42485c504235c6c7" translate="yes" xml:space="preserve">
          <source>The following is a description of the aggregation functions available in OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d314305af8f5ea00840d2075c12b927b65a9ff3a" translate="yes" xml:space="preserve">
          <source>The following is a list of errors and/or fixes that can be found or performed with fsck.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3640dec83901a77bacdb01cd6696e4aad98c809" translate="yes" xml:space="preserve">
          <source>The following is a list of example queries using an example data set. We'll illustrate a number of common query types that may be encountered so you can get an understanding of how the query system works. Each time series in the example set has only a single data point stored and the UIDs have been truncated to a single byte to make it easier to read. The example queries are all &lt;em&gt;Metric&lt;/em&gt; queries from the HTTP API and only show the &lt;code&gt;m=&lt;/code&gt; component. See &lt;a href=&quot;../../api_http/query/index&quot;&gt;&lt;em&gt;/api/query&lt;/em&gt;&lt;/a&gt; for details. If you are using a CLI tool, the query format will differ slightly so read the documentation for the particular command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe0337727548d1bffb65cfa2a3e693e34df1285" translate="yes" xml:space="preserve">
          <source>The following is a list of query string parameters that are used by OpenTSDB across the entire API. Don't try to overload their use please:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a8c6027630480ec102b4f89cfdece34f0d7903" translate="yes" xml:space="preserve">
          <source>The following is a sample Varnish configuration recommended for use with OpenTSDB. It uses a slightly custom load balancing strategy to achieve optimal cache hit rate at the TSD level. This configuration requires at least Varnish 2.1.0 to run, but using Varnish 3.0 or above is strongly recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba2289969bbd2bae75f0f262b70437d8cef1b8e" translate="yes" xml:space="preserve">
          <source>The following is a table of configuration options for all tools. When applicable, the corresponding command line override is provided. Please note that individual command line tools may have their own values so see their documentation for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff54a7c5820d0e7fe994cda1943a845462bc49ff" translate="yes" xml:space="preserve">
          <source>The following is a table of required and optional parameters to run OpenTSDB with Bigtable. These are in addition to the standard TSD configuration parameters from &lt;a href=&quot;../configuration&quot;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531073ca8bb5b65d21144d46d03a5bac3094991f" translate="yes" xml:space="preserve">
          <source>The following is a table with required and optional parameters to run OpenTSDB with Cassandra. These are in addition to the standard TSD configuration parameters from &lt;a href=&quot;../configuration&quot;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e2f5f0a7dcdba3c71f7c4381c8318b55a42749" translate="yes" xml:space="preserve">
          <source>The following options are supported via query string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1faa1a1e775dd96dfabf4eb2a5d9b9c234557e" translate="yes" xml:space="preserve">
          <source>The following rules apply to metric and tag values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f99a3b8e96e1e2736d8433b03395c1dc3118ec" translate="yes" xml:space="preserve">
          <source>The following will be returned if &lt;code&gt;tsd.core.auto_create_metrics&lt;/code&gt; are disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b94da3c91a0402e08d50f9828d0b058c8a95a98" translate="yes" xml:space="preserve">
          <source>The format is the same as the Telnet &lt;code&gt;put&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dab0ae626d3fdeb7c3bbf2adec77e86b2808766" translate="yes" xml:space="preserve">
          <source>The full class name of the storage exception handler plugin you wish to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d248d767a2e64201569e76a3f7f88402ce8f7143" translate="yes" xml:space="preserve">
          <source>The full name of a metric in the system. Must be the complete name. Case sensitive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3c23f056197444f6f471666f9ee3d767d47114" translate="yes" xml:space="preserve">
          <source>The full or relative path to an OpenTSDB &lt;a href=&quot;../configuration&quot;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt; file. If this parameter is not provided, the command will attempt to load the default config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8202158d85e13e0e77f0ff9720a58abe54f41c3a" translate="yes" xml:space="preserve">
          <source>The full path to a location where temporary files can be written. E.g. /tmp/opentsdb</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803a3ab6e5ef239d01180a2eac92d3e15b9e4297" translate="yes" xml:space="preserve">
          <source>The full path to the JSON formatted key file associated with the service account you want to use for Bigtable access. Download this from your cloud console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec4ea9b88f6564030fcb7c270a717141d5e7b29" translate="yes" xml:space="preserve">
          <source>The full specification for a metric query string sub query is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6414a465be1ce4ed8e3e07f2d841e2479e1bb875" translate="yes" xml:space="preserve">
          <source>The full tree if successfully parsed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bdfadb95bb3d8f40c806cda84ac9009d156d1b" translate="yes" xml:space="preserve">
          <source>The general process for creating and building a tree is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70f82c07d5d5e2512211f3851667d2f0bf67d7b" translate="yes" xml:space="preserve">
          <source>The global aggregation function to use for all metrics. It may be overridden on a per metric basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e4c3a8ca7ca52992b61ebea3096c1cc482ccd7" translate="yes" xml:space="preserve">
          <source>The goal for this set of rules is to order our timeseres by data center, then host, then by metric. Our company may have thousands of servers around the world so it doesn't make sense to display all of them in one branch of the tree, rather we want to group them by data center and let users drill down as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0db921ea5ba40549f69c4d43ff6ff7aea6ac1b" translate="yes" xml:space="preserve">
          <source>The graph area that displays query results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9dbccd7eb6802186d2065e99df37084d777f9bf" translate="yes" xml:space="preserve">
          <source>The grep sub command performs a regular expression search for the given UID type and returns a list of all UID names that match the expression. Fields required for the grep command include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c8d094bd817bf3589fad4441b9b388baf3bff3" translate="yes" xml:space="preserve">
          <source>The hexadecimal TSUID for the time series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7031078bbb9a1a9bf3b44a19ca648f0328f00cb3" translate="yes" xml:space="preserve">
          <source>The import command enables bulk loading of time series data into OpenTSDB. You provide one or more files and OpenTSDB will parse and load the data. Data must be formatted in the Telnet &lt;code&gt;put&lt;/code&gt; style with one data point per line in a text file. Each file may optionally be compressed with GZip and if so, must end with the &lt;code&gt;.gz&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8213f17f3af6cc9c5a3bf467164339e89f731295" translate="yes" xml:space="preserve">
          <source>The import format is the same as a Telnet style &lt;code&gt;put&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31df8054b02c20495ba31f9f9e8b30bf72b2cf92" translate="yes" xml:space="preserve">
          <source>The index in the data point arrays that the meta refers to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bf1f3a2c0e64f6ae7f279a87245d5610b367d8" translate="yes" xml:space="preserve">
          <source>The index of the sub query in the original user supplied query list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3252afe50e71a23c38fa8efcdc8c8103ec74829" translate="yes" xml:space="preserve">
          <source>The information printed will change depending on the JVM you are running the TSD under. In particular, the pools and GC sections will differ quite a bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c3ab992cb930f99e0b5d8b697c5fbba8984186" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;min&lt;/code&gt;, it returns the largest data point from all of the time series or within a time span. This function will perform linear interpolation across time series. It's useful for looking at the upper bounds of gauge metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26c769e2c822b35c01c88768f58bc1dbcb75baf" translate="yes" xml:space="preserve">
          <source>The join object controls how the various time series for a given metric are merged within an expression. The two basic operations supported at this time are the union and intersection operators. Additional flags control join behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293bd7323da60f7f1f043f2e95d57dd83d999d5e" translate="yes" xml:space="preserve">
          <source>The kind of data stored in the timeseries such as &lt;code&gt;counter&lt;/code&gt;, &lt;code&gt;gauge&lt;/code&gt;, &lt;code&gt;absolute&lt;/code&gt;, etc. These may be defined later but they should be similar to Data Source Types in an &lt;a href=&quot;http://oss.oetiker.ch/rrdtool&quot;&gt;RRD&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c870f06ddc45ae975a4dab298cf2f95624cc5c3d" translate="yes" xml:space="preserve">
          <source>The last 4 bits of either column type describe the data stored. The first bit is a flag that indicates whether or not the value is an integer or floating point. A value of 0 indicates an integer, 1 indicates a float. The last 3 bits indicate the length of the data, offset by 1. A value of &lt;code&gt;000&lt;/code&gt; indicates a 1 byte value while &lt;code&gt;010&lt;/code&gt; indicates a 2 byte value. The length must reflect a value of 1, 2, 4 or 8. Anything else indicates an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7cca3f1d147ed538ed4e121c61283152e22c0f" translate="yes" xml:space="preserve">
          <source>The last byte of a compacted value is for storing meta data. It will usually be &lt;code&gt;0&lt;/code&gt; if all of the data points are encoded in seconds or milliseconds. If there is a mixture of seconds and milliseconds will be set to &lt;code&gt;1&lt;/code&gt;. If the value is something else then it may be from a future version of OpenTSDB or the column may be invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301934179c5fc6daaf00f7d5e08f485f36b5d21b" translate="yes" xml:space="preserve">
          <source>The level in the rule heirarchy where the rule resides. Must be 0 or greater.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4077d304412f517af725dfa2c9999ad3e8681950" translate="yes" xml:space="preserve">
          <source>The list of nodes in your Cassandra cluster. These can be formatted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbb8f16b8d5d8ff9ebef8e03a17736af78b6ef4" translate="yes" xml:space="preserve">
          <source>The list of tag pairs used for lookup queries. May be an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2628768948ce66614e7f32faf395f06cb2046dfe" translate="yes" xml:space="preserve">
          <source>The list of tag pairs used for the lookup. May be an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b43e7f51c5e1d9f9200d7c400b06da7719c26d" translate="yes" xml:space="preserve">
          <source>The literal &lt;code&gt;rate&lt;/code&gt; if the timeseries represents a counter and the results should be returned as delta per second</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0e398c498a55222470992a4f8b53936a057819" translate="yes" xml:space="preserve">
          <source>The lookup command is the default for &lt;code&gt;uid&lt;/code&gt; used to lookup the UID assigned to a name or the name assinged to a UID for a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ebef67ed7a2f73114e936f42125088e2ab671a" translate="yes" xml:space="preserve">
          <source>The maximum number of compaction calls inflight to HBase at any given time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d84e121f2dcad3d5d48c4788a379ffe7a669811" translate="yes" xml:space="preserve">
          <source>The maximum number of items returned in the result set. Currently the limit is ignored for lookup queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd17309f79612b9487ab0c28fc667e17491e35c" translate="yes" xml:space="preserve">
          <source>The maximum number of items returned in the result set. Note that the actual number returned may be less than the limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31d1e273849669598bd1b77738b99b3c83ebb638" translate="yes" xml:space="preserve">
          <source>The maximum number of suggested results to return. Must be greater than 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef9a441366c417a88dcd8019d29de54951a6b1a" translate="yes" xml:space="preserve">
          <source>The maximum number of tag values to include in the regular expression sent to storage during scanning for data. A larger value means more computation on the HBase region servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d2780f4390fd2e8f8fff7a74e8092062fe8af0" translate="yes" xml:space="preserve">
          <source>The maximum number of tags allowed on a data point is defined by a constant (Const.MAX_NUM_TAGS), which at time of writing is 8. Metric names, tag names and tag values have to be made of alpha numeric characters, dash &quot;-&quot;, underscore &quot;_&quot;, period &quot;.&quot;, and forward slash &quot;/&quot;, as is enforced by the package-private function Tags.validateString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ecad35cea9de4aa2587448eeee4f37440434e5" translate="yes" xml:space="preserve">
          <source>The maximum number of tags allowed per data point. &lt;strong&gt;NOTE&lt;/strong&gt; Please be aware of the performance tradeoffs of overusing tags &lt;code&gt;writing&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d7129af3c7c98986f0449813a701882ab2801c" translate="yes" xml:space="preserve">
          <source>The maximum request body size to support for incoming HTTP requests when chunking is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fedf03caa96a729453a5ca03f3574b5140aee8" translate="yes" xml:space="preserve">
          <source>The menu is a group of tabs that can be clicked for different options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4534fce9cbba9e1f6bb5e382011540ca8c0c905" translate="yes" xml:space="preserve">
          <source>The meta section contains ordered information about each time series in the output arrays. The first element in the array will always have a &lt;code&gt;metrics&lt;/code&gt; value of &lt;code&gt;timestamp&lt;/code&gt; and no other data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb3e4a1d25a1275d034d4a978feaeef6b49e851" translate="yes" xml:space="preserve">
          <source>The metric should be a specific thing, like &quot;Ethernet packets&quot; but not be broken out into a particular instance of a thing. Generally you don't want to collect a metric like net.bytes.eth0, net.bytes.eth1, etc. Collect net.bytes and tag eth0 datapoints with iface=eth0, etc. Don't bother creating separate &quot;in&quot; and &quot;out&quot; metrics, either. Add the tag direction=in or direction=out. This way you can easily see the total network activity for a given box without having to plot a bunch of metrics. This still gives you the flexibility to drill down and just show activity for a particular interface, or just a particular direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fad968f442475f6052d9d8569fd158a095b589" translate="yes" xml:space="preserve">
          <source>The metric used for the lookup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f001dcf6e3c76d3bb62a090fcde0de3d9bb7dd5" translate="yes" xml:space="preserve">
          <source>The metrics for a number of systems are generally strings with a separator, such as a period, to deliniate components of the metric. For example, &quot;sys.cpu.0.user&quot;. To build a useful tree, you can use a separator rule that will break apart the string based on a character sequence and create a branch or leaf from each individual value. Setting the separator to &quot;.&quot; for the previous example would yield three branches &quot;sys&quot;, &quot;cpu&quot;, &quot;0&quot; and one leaf &quot;user&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197c77d451c0245ebb53006d01427a269dd7288f" translate="yes" xml:space="preserve">
          <source>The metrics list determines which metrics are included in the expression. There must be at least one metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5126c5f2e36e2ac9523a48cd2cd8511fa9f555" translate="yes" xml:space="preserve">
          <source>The name of a &lt;code&gt;TSMeta&lt;/code&gt; custom field for the rule to operate on. Note that the &lt;code&gt;field&lt;/code&gt; value must also be configured or an exception will be raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4161e82690ef9abdac3c461920adaec29c8742" translate="yes" xml:space="preserve">
          <source>The name of a field for the rule to operate on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f71e67e8770a311101ecd79601ba5f301f02731" translate="yes" xml:space="preserve">
          <source>The name of a metric in OpenTSDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3141e988a778fa3abb1b298adf3935d588cf46fc" translate="yes" xml:space="preserve">
          <source>The name of a metric or a wildcard for lookup queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9946f8e9c70c21bad1d1815dc355867cbb6eede6" translate="yes" xml:space="preserve">
          <source>The name of a metric stored in the system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154f60ab1cfc97b714ca839feaaf9c370570a974" translate="yes" xml:space="preserve">
          <source>The name of a policy to use. The values are listed in the table below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952dc822ea9c45e305f1e2a5fadfef8ff5ebd9e0" translate="yes" xml:space="preserve">
          <source>The name of a serializer to use for parsing input or formatting return data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad7fff4892ee1df7c5fdd2b1d335a261816055f" translate="yes" xml:space="preserve">
          <source>The name of an aggregation function to use. See &lt;a href=&quot;../aggregators&quot;&gt;&lt;em&gt;/api/aggregators&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6cadd522f694d375e9ce2006bc816e8a699211" translate="yes" xml:space="preserve">
          <source>The name of the UID as given when the data point was stored or the UID assigned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1c4944dbe72c2a59346de4713ee107a3e7fb01" translate="yes" xml:space="preserve">
          <source>The name of the filter from the API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa06645aaf46bec58acf4e979ffebe5cf374c6ce" translate="yes" xml:space="preserve">
          <source>The name of the filter to invoke. See &lt;a href=&quot;../config/filters&quot;&gt;&lt;em&gt;/api/config/filters&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f0779d2f9def81baa6f9ddd98795a23a3f7ee2" translate="yes" xml:space="preserve">
          <source>The name of the metric for the timeseries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852cde5ce00c947cdc441c0a56b6af42f033ea69" translate="yes" xml:space="preserve">
          <source>The name of the metric you are storing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8212085940dd7e7f01c6e6bc380c7d8100f0de94" translate="yes" xml:space="preserve">
          <source>The name of the serializer, suitable for use in the query string &lt;code&gt;serializer=&amp;lt;serializer_name&amp;gt;&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44db74cd4c2937e6ae827ab9ca40472263d869a" translate="yes" xml:space="preserve">
          <source>The name of the tagk or custom tag associated with the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a454817298f6866ae8461fdb144eefe80785a2d" translate="yes" xml:space="preserve">
          <source>The new name UID name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67ce3d2f0149204124a8c5fe35a4eddc7a825a5b" translate="yes" xml:space="preserve">
          <source>The notification area and tab area that serves as a menu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb2ac45afc1849782be45ed57c78bbaba4ab1af" translate="yes" xml:space="preserve">
          <source>The number of RPCs queued and waiting for the connection handshake with the region server to complete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5decc4e8026138e6612b5a06b5bb4e02cbdce26" translate="yes" xml:space="preserve">
          <source>The number of RPCs queued in the batched RPC awaiting the next flush or the batch limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebde0448e7b01c723866014a02096215a769165e" translate="yes" xml:space="preserve">
          <source>The number of asynchronous IO worker threads for Netty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1668ea1da5c6f32c0c80a1668c308cf8290b03" translate="yes" xml:space="preserve">
          <source>The number of bytes reported as free by the JVM's Runtime.freeMemory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc1b9d297c749e7d255593bf1f602227b7e45c0" translate="yes" xml:space="preserve">
          <source>The number of bytes reported as used by the JVM's Runtime.totalMemory()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4371f76ac122c7eaf6d8c8559a31a5126b54571" translate="yes" xml:space="preserve">
          <source>The number of currently open Telnet and HTTP connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5b1f7a15194a68e90df0bb8ff2d4736487420a" translate="yes" xml:space="preserve">
          <source>The number of data points emitted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a3c5a5f093a4d48a74b515415e80faa2a104f6" translate="yes" xml:space="preserve">
          <source>The number of data points that could not be queued for storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715cd41b518e3ca970b77c3d42e38517a1d33696" translate="yes" xml:space="preserve">
          <source>The number of data points that were queued successfully for storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ebaf6f797f2ac60a316c118f4f484c3aaf1e8d" translate="yes" xml:space="preserve">
          <source>The number of days of data points to retain for the given timeseries. &lt;strong&gt;Not Implemented&lt;/strong&gt;. When set to 0, the default, data is retained indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078be455f49f4f44728254c8acc4782a4e75f2e3" translate="yes" xml:space="preserve">
          <source>The number of raw data points in the set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4d27dfdb41acf84fe74e19c93b83d63c2c1dbe" translate="yes" xml:space="preserve">
          <source>The number of raw values wrapped into the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdf739dfdf6cf8aad5aefe0d2b3ba0f5e4de4e7" translate="yes" xml:space="preserve">
          <source>The number of rows to scan for UID pre-loading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635c891804ad141bbff5f915bc1ad20b10872afd" translate="yes" xml:space="preserve">
          <source>The number of salt buckets used to distribute load across regions. &lt;strong&gt;NOTE&lt;/strong&gt; Changing this value after writing data may cause TSUID based queries to fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3883dde14f93fcdd6d36e1486632673494034af8" translate="yes" xml:space="preserve">
          <source>The number of sockets opened to the Bigtable API for handling RPCs. For higher throughput consider increasing the channel count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abd99d3812e4addbf1124f9a64218572e553290" translate="yes" xml:space="preserve">
          <source>The number of threads to use when performing a full scan. The default is twice the number of CPU cores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac75df285786129827b182d163ce73c47b6ce6b" translate="yes" xml:space="preserve">
          <source>The number of unique tag values associated with a tag name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59978e2bbc1e833eb9a1b55f93dc249d6fd44740" translate="yes" xml:space="preserve">
          <source>The number of unique time series for a given metric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a830b13194a1d7bed520640d817a7b34e3efca9" translate="yes" xml:space="preserve">
          <source>The numeric value for the statistic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b2807e16754e68c2c7837689a5d497b679bec4" translate="yes" xml:space="preserve">
          <source>The only fix for this error is to delete the column by specifying the &lt;code&gt;--delete-bad-compacts&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f99483dcd547dd3bfe7940a3ff8af4244c38ae" translate="yes" xml:space="preserve">
          <source>The operator to use, either union or intersection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76da30c69de974ffea9bde9c0a67763a01c072c" translate="yes" xml:space="preserve">
          <source>The order within a level where the rule resides. Must be 0 or greater.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31229ed69fdd674c054b7f05817e197642455f90" translate="yes" xml:space="preserve">
          <source>The original way of interacting with OpenTSDB was through a Telnet style API. A user or application simply had to open a socket to the TSD and start sending ASCII string commands and expect a response. This documentation lists the various commands provided by OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410dd2ba63c71e7590d28107510c57040e02aa1c" translate="yes" xml:space="preserve">
          <source>The output for log files and the stats page include other fields with single values as listed below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b8c264d46abefbbc974d91484bbd8af29b5f6a" translate="yes" xml:space="preserve">
          <source>The output generated for a query depends heavily on the chosen serializer &lt;a href=&quot;../serializers/index&quot;&gt;&lt;em&gt;HTTP Serializers&lt;/em&gt;&lt;/a&gt;. A request may result in multiple sets of data returned, particularly if the request included multiple queries or grouping was requested. Some common fields included with each data set in the response will be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33b5b780baca645aec7549422132b41c1cb5808" translate="yes" xml:space="preserve">
          <source>The output is identical to &lt;a href=&quot;index&quot;&gt;&lt;em&gt;/api/query&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bad0de9c1293d4eca9b76b82af02b1c7548e4c" translate="yes" xml:space="preserve">
          <source>The output will be an array of 0 or more data points depending on the data that was found. If a data point for a particular time series was not located within the time specified, it will not appear in the output. Output fields depend on whether or not the &lt;code&gt;resolve&lt;/code&gt; flag was set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc47d9c90013b3e94343e18039d8fff6454a8feb" translate="yes" xml:space="preserve">
          <source>The output will contain a list of objects in the &lt;code&gt;outputs&lt;/code&gt; array with the results in an array of arrays representing each time series followed by meta data for each series and the query overall. Also included is the original query and some summary statistics. The fields include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66736a0377edb55f02e254e05e7bacb4be08eac7" translate="yes" xml:space="preserve">
          <source>The plugin may be missing configuration settings required for it to be initialized. Read the docs and see if anything is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191962eabb05d6a65009577691f540a6c10be808" translate="yes" xml:space="preserve">
          <source>The plugin may not have access to the dependencies it needs. If it has dependencies that are not included with OpenTSDB or packaged into it's own JAR you need to drop the dependencies in the plugin path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b764e034236058b7f25b94624fa2bbf5ce7d1c4" translate="yes" xml:space="preserve">
          <source>The primary purpose of OpenTSDB is to store timeseries data points and allow for various operations on that data. However it helps to know what kind of data is stored and provide some context when working with the information. OpenTSDB's metadata is data about the data points. Much of it is user configurable to provide tie-ins with external tools such as search engines or issue tracking systems. This chapter describes various metadata available and what it's used for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e3360831a8ed8e25864d2acccde3a45cdc8727" translate="yes" xml:space="preserve">
          <source>The processed value. If a rule has an extracted regex group or the value was split by a separator, this represents the value after that processing has occured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9544ff698310643cde3d42f22214472276f26d" translate="yes" xml:space="preserve">
          <source>The project ID hosting your Bigtable cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2929db7c0186edee3ae301aed931650437d9da34" translate="yes" xml:space="preserve">
          <source>The query builder that lets you select what will be displayed and how</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8299b8b4f8d30841e666138cd4a2c2e8c9cb59e" translate="yes" xml:space="preserve">
          <source>The query command line tool is meant to be a quick debugging tool for extracting data from OpenTSDB. The HTTP API will usually be much quicker when querying data as it incorprates caches and open connections to storage. Results are printed to stdout in a text format with one data point per line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058794b1bb6600ec55040b485850f113993fa3fc" translate="yes" xml:space="preserve">
          <source>The query is parsed and verified to make sure that the format is correct and that the metrics, tag names and tag values exist. If a single metric, tag name or value doesn't exist in the system, it will kick back an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93253c5f0fb78f6b76111b124ffe5c6688aea18" translate="yes" xml:space="preserve">
          <source>The query string submitted. May be altered by the plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fab6b28e78a50ac766aed105642effe584b7ef1" translate="yes" xml:space="preserve">
          <source>The rate is the first derivative of the values. It's defined as (v2 - v1) / (t2 - t1). Therefore you will get the rate of change per second. Currently the rate of change between millisecond values defaults to a per second calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b7309dbc6f98aae7173c1474bcf0c5e28992f7" translate="yes" xml:space="preserve">
          <source>The regex expression to search with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f009d9456dc63cade32093a4bcb0423b4ac8e8dc" translate="yes" xml:space="preserve">
          <source>The remaining rows are branch and leaf rows containing information about the hierarchy. The rows are keyed on &lt;code&gt;&amp;lt;tree ID&amp;gt;&amp;lt;branch ID&amp;gt;&lt;/code&gt; where the &lt;code&gt;branch ID&lt;/code&gt; is a concatenation of hashes of the branch display names. For example, if we have a flattened branch &lt;code&gt;dal.web01.myapp.bytes_sent&lt;/code&gt; where each branch name is separated by a period, we would have 3 levels of branching. &lt;code&gt;dal&lt;/code&gt;, &lt;code&gt;web01&lt;/code&gt; and &lt;code&gt;myapp&lt;/code&gt;. The leaf would be named &lt;code&gt;bytes_sent&lt;/code&gt; and links to a TSUID. Hashing each branch name in Java returns a 4 byte integer and converting to hex for readability yields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e057841fb19b18d8555055157dc697db684072d7" translate="yes" xml:space="preserve">
          <source>The request completed successfully</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b0ee21b2ec56cf1554f390d3fccaff2a797cdf" translate="yes" xml:space="preserve">
          <source>The request could not generate a response in the format specified. For example, if you ask for a PNG file of the &lt;code&gt;logs&lt;/code&gt; endpoing, you will get a 406 response since log entries cannot be converted to a PNG image (easily)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fab9a45bd903c1aabda7df5017f2ac22c06446" translate="yes" xml:space="preserve">
          <source>The request has timed out. This may be due to a timeout fetching data from the underlying storage system or other issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c579d2a3832956208b697c66246559f8f7b45a" translate="yes" xml:space="preserve">
          <source>The requested endpoint or file was not found. This is usually related to the static file endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bda3e15051b540e14c4181bb60ff547119934c4" translate="yes" xml:space="preserve">
          <source>The requested feature has not been implemented yet. This may appear with formatters or when calling methods that depend on plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc0a391c59bf6d25d70897af75e304c611899e3" translate="yes" xml:space="preserve">
          <source>The requested verb or method was not allowed. Please see the documentation for the endpoint you are attempting to access</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4558d8aa0b487055f3f30b8830e8c9addd185c32" translate="yes" xml:space="preserve">
          <source>The response includes two arrays. &lt;code&gt;completed&lt;/code&gt; lists the 256 most recent queries that have finished execution, whether successfully or with an error. The &lt;code&gt;running&lt;/code&gt; array contains a list of queries currently executing. If this list is growing, the TSD is under heavy load. Note that the running list will not contain an exception, response code or timing details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e93df8c21ccd1a6d8fa7cf69b9eddb61805c137" translate="yes" xml:space="preserve">
          <source>The response is a hash map of configuration properties and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef463fd8dc1536462cc6e63f6b0db13d2df900d5" translate="yes" xml:space="preserve">
          <source>The response is a hash map of information. Unless something goes wrong, this should always result in a &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;200&lt;/code&gt; and a message of &lt;code&gt;Caches dropped&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfcf7fa5a04d98d7bd9eb0581f8e764a43f9cc7" translate="yes" xml:space="preserve">
          <source>The response is a hash map of version properties and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39e2c939a7c5eaaf42f3226c95b85598736d45a" translate="yes" xml:space="preserve">
          <source>The response is a map of filter names or types and sub maps of examples and descriptions. The examples show how to use them in both URI and JSON queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383d1f4a3838ab98445852338968e6e6f95f77f0" translate="yes" xml:space="preserve">
          <source>The response is an array of objects. Fields in the response include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01660dda87f9025281612c3c56856c02b46fac2d" translate="yes" xml:space="preserve">
          <source>The response is an array of serializer objects. Each object has the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2886ff0fdb8bbbc1d92b65f33d22e6a6906bb7ae" translate="yes" xml:space="preserve">
          <source>The response is an array of strings of the given type that match the query. If nothing was found to match the query, an empty array will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de923e099d8f37ce04a9da810c69b69f826cee0" translate="yes" xml:space="preserve">
          <source>The response is an array of strings that are the names of aggregation functions that can be used in a timeseries query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fdf7bbb6d9bb75714a41da6285c17da610a617" translate="yes" xml:space="preserve">
          <source>The response is an object with multiple sub objects. Top level objects include</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de73f3f092c415eab72c3b9ea0977e9ea41ac36" translate="yes" xml:space="preserve">
          <source>The response is the literal &quot;metrics&quot; followed by the name of the metric and a Java formatted byte array representing the UID assigned or retrieved for each metric, one per line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2280020465f2b55a92cdbdce5742287135f181" translate="yes" xml:space="preserve">
          <source>The response will be the contents of the requested file with appropriate HTTP headers configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="580115e289fecdcf6ac8cd4d9693407cb57e37d2" translate="yes" xml:space="preserve">
          <source>The response will contain a map of successful assignments along with the hex encoded UID value. If one or more values were not assigned, a separate map will contain a list of the values and the reason why they were not assigned. Maps with the type name and &lt;code&gt;&amp;lt;type&amp;gt;_errors&lt;/code&gt; will be generated only if one or more values for that type were provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e888f859bcc4a020940fcab98a80a43e4af880a7" translate="yes" xml:space="preserve">
          <source>The result set with the TSUID, metric and tags for each series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea3f04cde272db0ce7365404600bfc171bd4dd0" translate="yes" xml:space="preserve">
          <source>The result set. The format depends on the endpoint requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c94c8b132a9bb1a02ef4947c7f801e9e3ec9088" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;avg&lt;/code&gt; for a &lt;code&gt;2h&lt;/code&gt; downsampling query would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5846db8915403c138cb9a6be94e03bf270cc6c8" translate="yes" xml:space="preserve">
          <source>The resulting tree would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425abba753ebcf08b975d219efa61270ecf8e7d5" translate="yes" xml:space="preserve">
          <source>The results returned from a query may be too large for the server's buffers to handle. This can happen if you request a lot of raw data from OpenTSDB. In such cases break your query up into smaller queries and run each individually</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e2f5949cc33008bb4ed0df9163659c72104486" translate="yes" xml:space="preserve">
          <source>The results will be logged with settings in the &lt;code&gt;logback.xml&lt;/code&gt; file. For long fscks, it's recommended to run in the background and configure LogBack to have plenty of space for writing data. On completion, statistics about the run will be printed. An example looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0926190af8ecef763121a2190af951f3d338844b" translate="yes" xml:space="preserve">
          <source>The results will be the data points that you requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66f14e9007d9b11efec9771d67ed40cbef70ab1" translate="yes" xml:space="preserve">
          <source>The reverse map points to a different name than the forward map and this should rarely happen. It will be paired with another message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47f7ab0c0351aea2b993671f17f6037f5cfc217" translate="yes" xml:space="preserve">
          <source>The reverse map will be restored, in this case: 000002 -&amp;gt; bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbf8211de5cf959fefd2c19450df6497580a914d" translate="yes" xml:space="preserve">
          <source>The root section is the catch-all logger that determines that default logging level for all messages that don't match an explicit logger. It also handles routing to the different appenders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3bd0d3a0635f68c39659954f885bbf1ed5de60" translate="yes" xml:space="preserve">
          <source>The rules endpoint is used for bulk merging, replacing or deleting the entire ruleset of a tree. Instead of calling the &lt;code&gt;tree/rule&lt;/code&gt; endpoint multiple times for a single rule, you can supply a list of rules that will be merged into, or replace, the current rule set. Note that the &lt;code&gt;GET&lt;/code&gt; verb is not supported for this endpoint. To fetch the ruleset, load the tree via the &lt;code&gt;/tree&lt;/code&gt; endpoint. Also, all data must be provided in request content, query strings are not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8207a79775a9822d7026ff28655cd29b0bf39267" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;wildcard&lt;/code&gt; but case insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b29a47bf30edf4593879faec37eb7f684f3af0c" translate="yes" xml:space="preserve">
          <source>The same as a &lt;code&gt;literal_or&lt;/code&gt; but is case insensitive. Note that this is not efficient like the literal or as it must post-process all rows from storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1172c35f5ed7f8d775d731d36396dba763dbb111" translate="yes" xml:space="preserve">
          <source>The scan command is useful for debugging and exporting data points. Provide a start time, optional end time and one or more queries and the response will be raw byte data from storage or data points in a text format acceptable for use with the &lt;strong&gt;import&lt;/strong&gt; command. Scan also provides a rudimentary means of deleting data. The scan command accepts common CLI arguments. Data is emitted to standard out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb41a38ecc595b6685d3d1487f2377a8ae92c048" translate="yes" xml:space="preserve">
          <source>The scan command returns data on row boundaries (1 hour) so results may include data previous to and after the specified start and end times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417f747fc6688fab17f691430ebb22a06e8c2c97" translate="yes" xml:space="preserve">
          <source>The search command allows for searching OpenTSDB to reteive a list of time series or associated meta data. Search does not return actual data points or time series objects stored in the data table. Use the query tools to access that data. Currently only the &lt;code&gt;lookup&lt;/code&gt; command is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d268d5cbe7b936fce86df9f0dd8eed0f712ac1" translate="yes" xml:space="preserve">
          <source>The second method of operation for aggregation functions is &lt;code&gt;downsampling&lt;/code&gt;. Since OpenTSDB stores data at the original resolution indefinitely, requesting data for a long time span can return millions of points. This can cause a burden on bandwidth or graphing libraries so it's common to request data at a lower resolution for longer spans. Downsampling breaks the long span of data into smaller spans and merges the data for the smaller span into a single data point. Aggregation functions will perform the same calculation as for an aggregation process but instead of working across data points for multiple time series at a single time stamp, downsampling works across multiple data points within a single time series over a given time span.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5af2c577a918fc1ea28eba04af791f5d57efc4" translate="yes" xml:space="preserve">
          <source>The server has completed the request successfully but is not returning content in the body. This is primarily used for storing data points as it is not necessary to return data to caller</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213d21eeae2dea6eb00df949152b5bb48e0aad4e" translate="yes" xml:space="preserve">
          <source>The set operation or &quot;join&quot; to perform for series across sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44d20b8251aaa40f1728ae8514d24651fe0212d" translate="yes" xml:space="preserve">
          <source>The simple split method above assumes that you have roughly an equal number of time series per metric (i.e. a fairly consistent cardinality). E.g. the metric with a UID of &lt;code&gt;000001&lt;/code&gt; may have 200 time series and &lt;code&gt;000FA0&lt;/code&gt; has about 150. If you have a wide range of time series per metric, e.g. &lt;code&gt;000001&lt;/code&gt; has 10,000 time series while &lt;code&gt;000FA0&lt;/code&gt; only has 2, you may need to develop a more complex splitting algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29df3f8f422b6091009eea5d0f1c0278c1a3084" translate="yes" xml:space="preserve">
          <source>The simplest way to pre-split your &lt;code&gt;tsdb&lt;/code&gt; table regions is to estimate the number of unique metric names you'll be recording. If you have designed a naming schema, you should have a pretty good idea. Let's say that we will track 4,000 metrics in our system. That's not to say 4,000 time series, as we're not counting the tags yet, just the metric names such as &quot;sys.cpu.user&quot;. Data points are written in row keys where the metric's UID comprises the first bytes, 3 bytes by default. The first metric will be assigned a UID of &lt;code&gt;000001&lt;/code&gt; as a hex encoded value. The 4,000th metric will have a UID of &lt;code&gt;000FA0&lt;/code&gt; in hex. You can use these as the start and end keys in the script from the &lt;a href=&quot;http://hbase.apache.org/book/perf.writing.html&quot;&gt;HBase Book&lt;/a&gt; to split your table into any number of regions. 256 regions may be a good place to start depending on how many time series share each metric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c600707ebcabc7e4cbee4ee824f59fa6f8b189fd" translate="yes" xml:space="preserve">
          <source>The start time for the query. This can be a relative or absolute timestamp. See &lt;a href=&quot;../../user_guide/query/index&quot;&gt;&lt;em&gt;Querying or Reading Data&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336a8af369345cce2a8cc8bf21725d8bea6ba66b" translate="yes" xml:space="preserve">
          <source>The start time for the query. This may be relative, absolute human readable or absolute Unix Epoch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4370be6833f21a7f028b22204fbec3c3b1b99d" translate="yes" xml:space="preserve">
          <source>The starting index for the current result set as provided in the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6242b8c1f26a51faf4237cf41226ae600cca0c13" translate="yes" xml:space="preserve">
          <source>The string based query to pass to the search engine. This will be parsed by the engine or plugin to perform the actual search. Allowable values depends on the plugin. Ignored for lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c756b532f032b67c5333a87c0a1eabf30cc8e02c" translate="yes" xml:space="preserve">
          <source>The style tab currently has a single box, the &lt;strong&gt;Smooth&lt;/strong&gt; check box. With this checked, the data point characters will be removed from the graph (showing the lines only) and the data will be smoothed with splines (at least three points need to be plotted). Some users prefer this over the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4387e95fdd2160045011cfbcfa06b9127ecc200a" translate="yes" xml:space="preserve">
          <source>The tag key name such as &lt;em&gt;host&lt;/em&gt; or &lt;em&gt;colo&lt;/em&gt; that we filter on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cd7ecbbe08c3d60b68074706d64f836de66d38" translate="yes" xml:space="preserve">
          <source>The tag key to invoke the filter on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8503fb7c4f0122fa4e5fe2768573df962094b5" translate="yes" xml:space="preserve">
          <source>The tag value box can use grouping operators such as the &lt;code&gt;*&lt;/code&gt; and the &lt;code&gt;|&lt;/code&gt;. See &lt;a href=&quot;../query/index&quot;&gt;&lt;em&gt;Querying or Reading Data&lt;/em&gt;&lt;/a&gt; for details. Tag value boxes can also use filters as of version 2.2. E.g. you can enter &quot;wildcard(webserver*)&quot; as a tag value and it will match all hosts starting with &quot;webserver&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417530952e075c2348105d9e01119f6144a23903" translate="yes" xml:space="preserve">
          <source>The thick blue line with triangles is the an aggregation with the &lt;code&gt;avg&lt;/code&gt; function of multiple time series as per the query &lt;code&gt;start=1h-ago&amp;amp;m=avg:duration_seconds&lt;/code&gt;. As we can see, the resulting time series has one data point at each timestamp of all the underlying time series it aggregates, and that data point is computed by taking the average of the values of all the time series at that timestamp. This is also true for the lonely data point of the squared-purple time series, that temporarily boosted the average until the next data point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58dc3df0680582b1389888fef9672b89ad6f85de" translate="yes" xml:space="preserve">
          <source>The threads endpoint is used for debugging the TSD and providing insight into the state and execution of various threads without having to resort to a JStack trace. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063deeee801f96e1aa0e14306366036c564f3a0d" translate="yes" xml:space="preserve">
          <source>The threads endpoint is used for debugging the TSD's JVM process and includes stats about the garbage collector, system load and memory usage. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2786c92c51875f3a2e6458503054b21d01e159a7" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer HTTP requests for the 50th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4fab44f220643fb61e13ef4ab0977d7edbe9487" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer HTTP requests for the 75th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48cf3b50ede1d98d6ab4fd26f44af7aca939fc1" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer HTTP requests for the 90th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453a77780203fa1a65f7220fae61018e6df7d713" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer HTTP requests for the 95th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475436a474dc98e26cb863ca0de8452ab0c27cb0" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer graphing requests for the 50th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47579000412f893471498b758b92334a10b8130" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer graphing requests for the 75th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6780b3e94a0c46d814921a4d862c4cc73f17b43e" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer graphing requests for the 90th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699d788b10b53c2d9083af27dcd15c4919a809db" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to answer graphing requests for the 95th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428780c9fda31fb8873a2e53752458e1d1f90f16" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Put call for the 50th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a57d606fa5905d5d92e988dc7bab9fb614307d" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Put call for the 75th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9ed0a82641ca11311d7c99c97ee7ca6f05e3f5" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Put call for the 90th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5fe18534f1eab46f1c4bbaa9ee02715d58e04f" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Put call for the 95th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc31c451582a56fb97dcfd2e4f4d77eb3e1b63af" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Scan call for the 50th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebef049c13e6a08c7e0cf8c9abcbb957e520d6b6" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Scan call for the 75th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8bf64937db9bf466e9ac76b1bed8e4ac840ae9" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Scan call for the 90th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d9465be6e25ec9aeb33e4410b2f8d7aa1a33ade" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to execute a Scan call for the 95th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f5c91753a6495f501ba0a9aeb2d1046c1060d2" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to generate the GnuPlot graphs for the 50th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a374ffd1f742157c831da3653b10677212e1d63f" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to generate the GnuPlot graphs for the 75th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a635d4058125074c6be59a1954c13074658a790e" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to generate the GnuPlot graphs for the 90th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327007d9a86b200a7006d9172ab347d49f8260a8" translate="yes" xml:space="preserve">
          <source>The time it took, in milliseconds, to generate the GnuPlot graphs for the 95th percentile cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020944482490138e479955c1933abbcee8415af9" translate="yes" xml:space="preserve">
          <source>The time secion determines the timespan for all metrics and time series in your graph. The &lt;strong&gt;Frome&lt;/strong&gt; time determines when your graph will start and the &lt;strong&gt;End&lt;/strong&gt; time determines when it will stop. Both fields must be filled out for a query to execute. Times may be in human readable, absolute format or a relative format. See &lt;a href=&quot;../query/dates&quot;&gt;&lt;em&gt;Dates and Times&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ccce5de8301dd02ceabd408807ad0339941321" translate="yes" xml:space="preserve">
          <source>The time section is required and is a single JSON object. This affects the time range and optional reductions for all metrics requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234dca44892cd7412d1846135b9d5d0af850a3e8" translate="yes" xml:space="preserve">
          <source>The timestamp (Unix epoch in milliseconds) when the query was finished and sent to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ad9cfdf1ff6dec81f25efa4e2c794f49048a1c" translate="yes" xml:space="preserve">
          <source>The timestamp (Unix epoch in milliseconds) when the query was received and started processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6e57f863d5f2fbb7b65243aa10fb4084a94f3c" translate="yes" xml:space="preserve">
          <source>The timestamp is a Unix epoch value in seconds encoded on 4 bytes. Rows are broken up into hour increments, reflected by the timestamp in each row. Thus each timestamp will be normalized to an hour value, e.g. &lt;em&gt;2013-01-01 08:00:00&lt;/em&gt;. This is to avoid stuffing too many data points in a single row as that would affect region distribution. Also, since HBase sorts on the row key, data for the same metric and time bucket, but with different tags, will be grouped together for efficient queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958c23f05930b1d234248d1bd33838113224936c" translate="yes" xml:space="preserve">
          <source>The timestamp must be a positive Unix epoch timestamp. E.g. &lt;code&gt;1479496100&lt;/code&gt; to represent &lt;code&gt;Fri, 18 Nov 2016 19:08:20 GMT&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30835a029357c57a199c514e89a8f262da9d1d99" translate="yes" xml:space="preserve">
          <source>The timestamp of a rolled-up data point should snap to the top of the rollup interval. E.g. if the rollup interval is &lt;code&gt;1h&lt;/code&gt; then it contains 1 hour of data and should snap to the top of the hour. (As all timestamps are written in Unix Epoch format, defined as the UTC timezone, this would be the start of an hour UTC time).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830f869009a936b7a1c40ee6b80a1d61598f62b4" translate="yes" xml:space="preserve">
          <source>The timestamps for count and sum values must match. However, if the expected count value for a sum is missing, the sum will be kicked out of the results. Take the following example set from above where we're now missing a count data point in &lt;code&gt;ts2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655a7653a1ea8f1bff3104c0aeaf7dfff8be030c" translate="yes" xml:space="preserve">
          <source>The top half of the key tab's section deals with the location of the graph key. This is a series of buttons layed out to show you where the key will appear. A box surrounds some of the buttons indicating that the key will appear inside of the graph's box, overlaying the data. The default location is the top right inside of the graph box. Simply select a button to move the key box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48128361438a06820f696edb98e78bd400500192" translate="yes" xml:space="preserve">
          <source>The total exceptions caused by a socket inactivity timeout, i.e. the TSD neither wrote nor received data from a socket within the timeout period. This includes all Telnet and HTTP connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cf984a3ad34ecbc349a6ff4b6d1343f2a1d3f6" translate="yes" xml:space="preserve">
          <source>The total exceptions with an unknown cause. Check the logs for details. This includes all Telnet and HTTP connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e88cdc6884140bcd5b71b63c876d66152387c0f" translate="yes" xml:space="preserve">
          <source>The total number data queries sent to the /api/query endpoint that completed successfully. Note that these may have returned an empty result. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9973186aa110e7d56d88d057adb7c24784cd79e0" translate="yes" xml:space="preserve">
          <source>The total number data queries sent to the /api/query endpoint that threw an exception due to bad user input or an underlying error. See logs for details. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fff48fcab5e2917cf838e274c09fe3f1aba1ca0" translate="yes" xml:space="preserve">
          <source>The total number data queries sent to the /api/query endpoint that were invalid due to user errors such as using the wrong HTTP method, missing parameters or using metrics and tags without UIDs. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbd5d3c97a2c63c0a29f44cca3bd7e497f6b4d4" translate="yes" xml:space="preserve">
          <source>The total number exceptions caught during RPC calls. These may be user error or bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1062ef9c9250429ec7314de8926389b316cbf649" translate="yes" xml:space="preserve">
          <source>The total number of &lt;code&gt;put&lt;/code&gt; requests for writing data points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d12dd55b0dc5376b6cd0b8c0bb68d7a008756be" translate="yes" xml:space="preserve">
          <source>The total number of Delete requests performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221e64aad27f9c41f0d04e1356ebed12bb08ba92" translate="yes" xml:space="preserve">
          <source>The total number of Get requests performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc6fd3aaea7dbc3d15ff57c8cbc981304373f5b" translate="yes" xml:space="preserve">
          <source>The total number of Http RPC requests received</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12389d71fc7ecf74a62f9a030474891993bd0b8" translate="yes" xml:space="preserve">
          <source>The total number of Http RPC requests received and handled by a plugin instead of the built-in APIs. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83dbe59fb62fc9a061d856f895278f4f6de8e45" translate="yes" xml:space="preserve">
          <source>The total number of Increment requests performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b8776cf18cd839538e3c98ef84e13bf02e48c0" translate="yes" xml:space="preserve">
          <source>The total number of No Such Region Exceptions caught. These can happen when a region server crashes, is taken offline or when a region splits (?)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f251c821ad3565827da0f954bbb0cc1cfdeb29" translate="yes" xml:space="preserve">
          <source>The total number of Open Scanner requests performed by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f58692484c1e038ed564d19f6e984dd0cc1c4b6" translate="yes" xml:space="preserve">
          <source>The total number of Put requests performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496dbf7ef2aa7b1415c61275342785ec4ce81f31" translate="yes" xml:space="preserve">
          <source>The total number of RPC errors caused by HBase exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36473b84707596f83fb479eb601721e7ccba5406" translate="yes" xml:space="preserve">
          <source>The total number of RPC errors caused by attempts to &lt;code&gt;put&lt;/code&gt; a metric without an assigned UID. This only increments if &lt;em&gt;auto metrics&lt;/em&gt; is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ffe0fcbea61eed4d2f23db8672269c97ffc786" translate="yes" xml:space="preserve">
          <source>The total number of RPC errors caused by bad data from the user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5743e9e1cbcd2c2553b23a42b81913732167f08f" translate="yes" xml:space="preserve">
          <source>The total number of RPC errors caused invalid &lt;code&gt;put&lt;/code&gt; values from user requests, such as a string instead of a number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2adc23b8826a4585a90f46428fe6bb1bb285252" translate="yes" xml:space="preserve">
          <source>The total number of RPCs sent to HBase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d423d164c40e67c7160691a47b05de2318b1ce17" translate="yes" xml:space="preserve">
          <source>The total number of RPCs that have timed out. This may indicate a slow region server, poor network performance or GC issues with the TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="686ad84878031c70b3d206b68721f167e5a3b46d" translate="yes" xml:space="preserve">
          <source>The total number of Row Lock requests performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b371b780ae435dd53e61190f9d18b4b42a7a85d9" translate="yes" xml:space="preserve">
          <source>The total number of Scan requests performed by the client. These indicate a scan-&amp;gt;next() call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8cad79cdfa5eef9757599cc46153bc22dc8aea" translate="yes" xml:space="preserve">
          <source>The total number of batched requests sent by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a63e8db3498ccb1794cf38cf3b4c1184d5bae7a" translate="yes" xml:space="preserve">
          <source>The total number of calls delayed due to an NSRE that were later successfully executed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c53888723b36b0724ff1726856bf196fc2c1ffa" translate="yes" xml:space="preserve">
          <source>The total number of complex compactions performed by the TSD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb99174d34a025edaba2c371a735867ebd9eabc" translate="yes" xml:space="preserve">
          <source>The total number of connections made by the client to region servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd00fa6239a545e612edce0822b794f876dc448" translate="yes" xml:space="preserve">
          <source>The total number of connections made to OpenTSDB. This includes all Telnet and HTTP connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e7b1c8345130e2d2ecc43d019365912aa53207" translate="yes" xml:space="preserve">
          <source>The total number of connections opened to region servers since the TSD started. If this number is climbing the region servers may be crashing and restarting. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93c14ad925b79a3120214161fe805967ca28229" translate="yes" xml:space="preserve">
          <source>The total number of connections to region servers that were closed due to idle connections. This indicates nothing was read from or written to a server in some time and the TSD will reconnect when it needs to. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e7653e95c6486b303454167056e5adc883c914" translate="yes" xml:space="preserve">
          <source>The total number of contended meta table lookups performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3ca4092c2545803d4000682f3c64ae63c04af98" translate="yes" xml:space="preserve">
          <source>The total number of data points found during compaction that were duplicates at the same time and with the same value. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415385239c6fb7dc7b463d55996138ac1b1fc82c" translate="yes" xml:space="preserve">
          <source>The total number of data points found during compaction that were duplicates at the same time but with a different value. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a8f30e7bc63321972f3b2d8ab8c97e68a2d939" translate="yes" xml:space="preserve">
          <source>The total number of data points recorded for the timeseries. NOTE: This may not be accurate unless you have enabled metadata tracking since creating the TSDB tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c0fa34de1674c3dd1abb90f22a5a8feb3a37dc" translate="yes" xml:space="preserve">
          <source>The total number of data points returned to the user after aggregation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6130355b3dd1eacef97d5c910f2e741b24fecc" translate="yes" xml:space="preserve">
          <source>The total number of data points serialized in the output. Note that this may include NaNs or Nulls if the query specified such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17943109f66df6c249a399f513d21965d0cef278" translate="yes" xml:space="preserve">
          <source>The total number of delete calls made to storage to remove old data that has been compacted. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d436ce2c50966127048509b425c806846c934d7f" translate="yes" xml:space="preserve">
          <source>The total number of exceptions caused by a client disconnecting without closing the socket. This includes all Telnet and HTTP connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6724594a5963286ca94f1ec2a693a11bb0444802" translate="yes" xml:space="preserve">
          <source>The total number of exceptions caused by writes to a channel that was already closed. This can occur if a query takes too long, the client closes their connection gracefully, and the TSD attempts to write to the socket. This includes all Telnet and HTTP connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49427592d0d6f0219b890ed6d2e0ee0ac8b557f" translate="yes" xml:space="preserve">
          <source>The total number of failed cache lookups for metric UIDs that required a call to storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ecaa795aba4a6e539df4316d488bf6e1c232fc" translate="yes" xml:space="preserve">
          <source>The total number of failed cache lookups for tagk UIDs that required a call to storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba2eaadf4eecd4fc3f5eb14134b8f60cadbd8d2" translate="yes" xml:space="preserve">
          <source>The total number of failed cache lookups for tagv UIDs that required a call to storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2c3b743b1f4bcc2c59666486c685c8b34a7010" translate="yes" xml:space="preserve">
          <source>The total number of flushes performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2886bd8a557a12f4e81b9a456da1855cf006a3f" translate="yes" xml:space="preserve">
          <source>The total number of graph requests satisfied from the disk cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="496af99794a7800114f9bee6c9544d6f55e6621d" translate="yes" xml:space="preserve">
          <source>The total number of graph requests that were not cached and required a fetch from storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b49a908f3d1c7d788418be4405d1cb90a5fa76" translate="yes" xml:space="preserve">
          <source>The total number of responses from HBase for RPCs that have previously timedout. This means HBase may be catching up and responding to stale RPCs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b68792b0290c4301805d78b50dea54043d5b8e4" translate="yes" xml:space="preserve">
          <source>The total number of responses received from HBase for which we couldn't find an RPC. This may indicate packet corruption or an incompatible HBase version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dddac542d3608eaf39d0ca1720ba53289836a9d" translate="yes" xml:space="preserve">
          <source>The total number of results matched by the query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370115b5a52ca60a9fd5a15c4f8c917afa4847da" translate="yes" xml:space="preserve">
          <source>The total number of root lookups performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38752b937fa910ed5d0b440441b590bc050a7057" translate="yes" xml:space="preserve">
          <source>The total number of rows that couldn't be re-written to storage due to an error of some sort. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279a160b8d01a2f8b9da11dae8a2e7a741503802" translate="yes" xml:space="preserve">
          <source>The total number of rows that couldn't be read from storage due to an error of some sort. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ef7a96dcd9d75e6d29b9ca216fa55f1eece0cb" translate="yes" xml:space="preserve">
          <source>The total number of rows that couldn't have the old non-compacted data deleted from storage due to an error of some sort. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a051ae2a8afdf0c927c2bb8f807f53105af5b1b" translate="yes" xml:space="preserve">
          <source>The total number of successful cache lookups for metric UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8162c3099d67f9b7b5ce53c2b3cb7375bb19d1f4" translate="yes" xml:space="preserve">
          <source>The total number of successful cache lookups for tagk UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696f182b0d7b89ecd241147a6112103802c80df3" translate="yes" xml:space="preserve">
          <source>The total number of successful cache lookups for tagv UIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e251d90703033688a7156510f47f05032949d082" translate="yes" xml:space="preserve">
          <source>The total number of telnet RPC requests received</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1c07b3246c02eb0068024fff4cfb3b652348fc" translate="yes" xml:space="preserve">
          <source>The total number of times RPCs were blocked due to too many outstanding RPCs waiting for a response from HBase. A positive value indicates the region server is slow or network performance is poor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2660c4bb31250407f3bb890daa8c205f2076ecd" translate="yes" xml:space="preserve">
          <source>The total number of times the TSD was unable to write back to the telnet socket due to a full buffer. If this happens it likely means a number of exceptions were happening. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32bffdd0f6e09fb130fbc132f40b8c02845fd91" translate="yes" xml:space="preserve">
          <source>The total number of times writes to a new region client were discarded because it's pending RPC buffer was full. This should almost always be zero and a positive value indicates the TSD took a long time to connect to a region server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c9368290dce0eee4958e2f4df35735d592d066" translate="yes" xml:space="preserve">
          <source>The total number of trivial compactions performed by the TSD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72046ce6c6d9ab17e010fc21d9dd5ea9aa131f1" translate="yes" xml:space="preserve">
          <source>The total number of uncontended meta table lookups performed by the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="322af25b51b01d21f023dc490e0caa5fad305523" translate="yes" xml:space="preserve">
          <source>The total number of writes back to storage of compacted values. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d102fd64cebfe1514d7b12a007274f93e367df5b" translate="yes" xml:space="preserve">
          <source>The total time from initialization of the scanner to when the scanner completed and closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad56ca1176ad280f1ad30491f01dbfa9705752df" translate="yes" xml:space="preserve">
          <source>The tree the requested rule belongs to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930086a8eea5fe112013bc42e5d3b7c6ce7176a0" translate="yes" xml:space="preserve">
          <source>The type of UID, must be &lt;code&gt;metric&lt;/code&gt;, &lt;code&gt;tagk&lt;/code&gt; or &lt;code&gt;tagv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e7f2bf13343fde65ee3f9284fefcdb9a3fc473" translate="yes" xml:space="preserve">
          <source>The type of data to auto complete on. Must be one of the following: &lt;strong&gt;metrics&lt;/strong&gt;, &lt;strong&gt;tagk&lt;/strong&gt; or &lt;strong&gt;tagv&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37091c2adf7e45b05b33de559d111cde2b6ac764" translate="yes" xml:space="preserve">
          <source>The type of query submitted, i.e. the endpoint called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e1363af28fab79a20e5eced03013eb3c1903f4" translate="yes" xml:space="preserve">
          <source>The type of query submitted, i.e. the endpoint called. Will be one of the endpoints listed above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ab5ae2d798671ac4e6bd10b728c960bbae32c3" translate="yes" xml:space="preserve">
          <source>The type of rule represented. See &lt;a href=&quot;../../user_guide/trees&quot;&gt;&lt;em&gt;Trees&lt;/em&gt;&lt;/a&gt;. &lt;a href=&quot;#id1&quot;&gt;&lt;span id=&quot;id2&quot;&gt;*&lt;/span&gt;&lt;/a&gt;Required when creating a new rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2646ead7d3c71bd6aa41ebd25aa6727da07bcce" translate="yes" xml:space="preserve">
          <source>The type of the UID the name represent. Must be one of &lt;code&gt;metrics&lt;/code&gt;, &lt;code&gt;tagk&lt;/code&gt; or &lt;code&gt;tagv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e308fccb54801a945c7a717f922162ca6a5dcf5" translate="yes" xml:space="preserve">
          <source>The type of the UID the names represent. Must be one of &lt;code&gt;metrics&lt;/code&gt;, &lt;code&gt;tagk&lt;/code&gt; or &lt;code&gt;tagv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8003c957a4624cbcc0e5a1002c8926406b1a2f" translate="yes" xml:space="preserve">
          <source>The type of the UID to search for. Must be one of &lt;code&gt;metrics&lt;/code&gt;, &lt;code&gt;tagk&lt;/code&gt; or &lt;code&gt;tagv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84b62f7052ca739576428709222b8130a5e6498" translate="yes" xml:space="preserve">
          <source>The value must be a number. It may be an integer (maximum and minimum values of Java's &lt;code&gt;long&lt;/code&gt; data type), a floating point value or scientific notation (in the format &lt;code&gt;[-]&amp;lt;#&amp;gt;.&amp;lt;#&amp;gt;[e|E][-]&amp;lt;#&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26fa4693759e7ab9e7a4125474c7c848b219460" translate="yes" xml:space="preserve">
          <source>The value of the data point enclosed in quotation marks as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa559d7a54d337b47e006c63da7f40cb23f6c8b" translate="yes" xml:space="preserve">
          <source>The value to filter on. This depends on the filter in use. See the API for details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f64926c04e10167fad7484c5f019616a6e977d" translate="yes" xml:space="preserve">
          <source>The value to record for this data point. It may be quoted or not quoted and must conform to the OpenTSDB value rules: &lt;code&gt;../../user_guide/writing&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c48be25424005988158a77356f56aedd628103" translate="yes" xml:space="preserve">
          <source>The various formats are listed below. The &lt;code&gt;\t&lt;/code&gt; expression represents a tab. &lt;code&gt;space&lt;/code&gt; indicates a space character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c58119eb81ebc9f99e4c6813e78bd4336ace299" translate="yes" xml:space="preserve">
          <source>The various sections implemented include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69263e7df3167d4896202d18f2cb39b64751945d" translate="yes" xml:space="preserve">
          <source>The width, in bytes, of metric UIDs. &lt;strong&gt;WARNING&lt;/strong&gt; Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e3a956de9714dd26ae2c2d758c9215f237aa9f" translate="yes" xml:space="preserve">
          <source>The width, in bytes, of tag name UIDs. &lt;strong&gt;WARNING&lt;/strong&gt; Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ab8b06b2956a28f95907111d3ab635f705608a" translate="yes" xml:space="preserve">
          <source>The width, in bytes, of tag value UIDs. &lt;strong&gt;WARNING&lt;/strong&gt; Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf339cb70d5f4d21555724b9e22186f1aed4975" translate="yes" xml:space="preserve">
          <source>The width, in bytes, of the salt prefix used to indicate which bucket a time series belongs in. A value of 0 means salting is disabled. &lt;strong&gt;WARNING&lt;/strong&gt; Do not change after writing data to HBase or you will corrupt your tables and not be able to query any more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f5c25fa38e88bf674150c9d7238e3a27afc87f" translate="yes" xml:space="preserve">
          <source>The zone where your Bigtable cluster is operating; chosen at creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df5c661a026c9e8d851885023819c18a0370354" translate="yes" xml:space="preserve">
          <source>Then click the &lt;code&gt;From&lt;/code&gt; box at the top and a date-picker pop-up should appear. Select any time from yesterday and click on another box. At this point you should see &quot;Loading graph..&quot; very briefly followed by the actual graph. If the graph is empty, it may not have found the most recent data points so click the &lt;code&gt;(now)&lt;/code&gt; link and the page should refresh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b7ebbaff2c841d9837d162e41d90bbd44acf27" translate="yes" xml:space="preserve">
          <source>Then define a host in nagios for your TSD server(s). You can give it a check_command that is guaranteed to always return something if the backend is healthy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6876c62eb70cfe6b8711723a3784d118546a643" translate="yes" xml:space="preserve">
          <source>Then define some service checks for the things you want to monitor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca0f243f2f1272256a4da48a4e19568ea1a7180" translate="yes" xml:space="preserve">
          <source>Then each group of data is aggregated using the specific aggregation function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63284ed2453cef2f8bebb895d4c247f2756af494" translate="yes" xml:space="preserve">
          <source>Then it sets up a scanner for the underlying storage system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dcc1ff3d161d0a99ed961f678a4496ffa6ec09" translate="yes" xml:space="preserve">
          <source>There are a number of potential causes for this problem including:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7895001178ade180a1f558f03068b4e86ec3c92c" translate="yes" xml:space="preserve">
          <source>There are a number of ways to setup a Hadoop/HBase cluster and a ton of various tuning tweaks to make, so Google around and ask user groups for advice. Some general recommendations include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba96c9a8aba116571fb0c92d1a45ab13d7347a4d" translate="yes" xml:space="preserve">
          <source>There are almost as many build systems as there are developers so it's impossible to satisfy everyone no matter which system or layout is chosen. Autotools and GNU Make were chosen early on for OpenTSDB because of their flexibility, portability, and especially speed and popular usage. It's not the easiest to configure but for our needs, it's really not too difficult. We'll spell out what you need to change below and give tips for IDE users who want to setup an environment. Note that the build script can now compile a &lt;code&gt;pom.xml&lt;/code&gt; file for compiling with Maven and work is underway to provide better Maven support. However you still have to modify &lt;code&gt;Makefile.am&lt;/code&gt; if you add or remove classes or dependencies and such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d057ae687c726f63028fec43b1e21c2e1540fe97" translate="yes" xml:space="preserve">
          <source>There are currently three main methods to get data into OpenTSDB: Telnet API, HTTP API and batch import from a file. Alternatively you can use a tool that provides OpenTSDB support, or if you're extremely adventurous, use the Java library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef7b05c4f6a4207ced602f8bf9a48e5d20804b7" translate="yes" xml:space="preserve">
          <source>There are four hooks available, and they are called in this order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989225c129cce6949b9e94a97e1b702248becc57" translate="yes" xml:space="preserve">
          <source>There are three main areas of the GUI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="245bade0901d8c08351eefd7c3ca74185fc84583" translate="yes" xml:space="preserve">
          <source>There are three types of rolled up data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb2d1ec80b469f7195e79b964aa92890b58b5ffd" translate="yes" xml:space="preserve">
          <source>There are two main branches in the GIT repo. The &lt;code&gt;master&lt;/code&gt; branch is the latest stable release along with any bug fixes that have been committed between releases. Currently, the &lt;code&gt;master&lt;/code&gt; branch is OpenTSDB 2.0.1. The &lt;code&gt;next&lt;/code&gt; branch is the next major or minor version of OpenTSDB with new features and development. When &lt;code&gt;next&lt;/code&gt; is stable, it will be merged into &lt;code&gt;master&lt;/code&gt;. Currently the &lt;code&gt;next&lt;/code&gt; branch is 2.1.0 RC 1. Additional branches may be present and are used for testing or developing specific features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b949991b3b4f7ffcd63402708e365b3ae0d78b1" translate="yes" xml:space="preserve">
          <source>There is a limited number of unique IDs to assign for each metric, tag name and tag value. By default there are just over 16 million possible IDs per type. If, for example, you ran a very popular web service and tried to track the IP address of clients as a tag, e.g. &lt;code&gt;web.app.hits clientip=38.26.34.10&lt;/code&gt;, you may quickly run into the UID assignment limit as there are over 4 billion possible IP version 4 addresses. Additionally, this approach would lead to creating a very sparse time series as the user at address &lt;code&gt;38.26.34.10&lt;/code&gt; may only use your app sporadically, or perhaps never again from that specific address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea61e713dc01c14e1334538087794d65b1d234e" translate="yes" xml:space="preserve">
          <source>There's a bunch of things in here that we've introduced so far. To help you understand how things work, I'll start with a typical example. Let's say you have a bunch of web servers and you want to track two things: hits to the web server and load average of the system. Let's make up metric names to express this. For load average, let's call it &lt;code&gt;proc.loadavg.1min&lt;/code&gt; (since on Linux you can easily get this data by reading &lt;code&gt;/proc/loadavg&lt;/code&gt;). For many web servers, there is a way to ask the web server for a counter expressing the number of hits to the server since it started. This is a convenient counter upon which to use for a metric we'll call &lt;code&gt;http.hits&lt;/code&gt;. I chose these two examples for two reasons. One, we'll get to see how OpenTSDB easily handles both counters (values that increase over time, except when they get reset by a restart/reboot or overflow) and how it handles normal values that go up and down, like load average. A great advantage of OpenTSDB is that you don't need to do any rate calculation of your counters. It will do it all for you. The second reason is that we can also show you how you can plot two different metrics with different scales on the same graph, which is a great way to correlate different metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550725a0970e6ee14cb0ffa04d6e278d186206e7" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you 'pre-assign' UID to as many metrics, tag keys and tag values as you can. If you have designed a naming schema as recommended above, you'll know most of the values to assign. You can use the CLI tools &lt;code&gt;cli/mkmetric&lt;/code&gt;, &lt;code&gt;cli/uid&lt;/code&gt; or the HTTP API &lt;code&gt;../api_http/uid/index&lt;/code&gt; to perform pre-assignments. Any time you are about to send a bunch of new metrics or tags to a running OpenTSDB cluster, try to pre-assign or the TSDs will bog down a bit when they get the new data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5beb9c7eb16c3ba7e622bf98afe5dd3da76e3f" translate="yes" xml:space="preserve">
          <source>These are just some of the awesome front-ends, utilities, libraries and resources created by the OpenTSDB community. Please let us know if you have a project you'd like to see listed and if you don't see something you need, search for it on Github (new projects are popping up all the time) or your favorite search engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f00362ef8453cfb6689990e8b5c820321717fbf" translate="yes" xml:space="preserve">
          <source>These are some notes on adding to the HTTP API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de416d414128a58b840c6f7ade8431ff16321be" translate="yes" xml:space="preserve">
          <source>These are used to replace &quot;missing&quot; values, i.e. when a data point was expected but couldn't be found in storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c627be4f48ef9a8e28fdedb19570e4165c47093" translate="yes" xml:space="preserve">
          <source>These columns are atomic incrementers that count the number of data points stored for a time series. The qualifier is &lt;code&gt;ts_counter&lt;/code&gt; and the value is an 8 byte signed integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73bac7bac36846285acee79b3a98b651073b60c" translate="yes" xml:space="preserve">
          <source>These columns store UTF-8 encoded, JSON formatted objects similar to UIDMeta objects. The qualifier is always &lt;code&gt;ts_meta&lt;/code&gt;. Do not modify these column values outside of OpenTSDB or it may break CAS calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0b538637db6880dbf37aca6a0377a2cbb475e8" translate="yes" xml:space="preserve">
          <source>These determine the output behavior and allow you to eliminate some expressions from the results or include the raw metrics. By default, if this section is missing, all expressions and only the expressions will be serialized. The field is a list of one or more output objects. More fields will be added later with flags to affect the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eec44d938049427329b4684186c89011e3bf49d" translate="yes" xml:space="preserve">
          <source>These endpoints provides a means of adding, editing or deleting annotations stored in the OpenTSDB backend. Annotations are very basic objects used to record a note of an arbitrary event at some point, optionally associated with a timeseries. Annotations are not meant to be used as a tracking or event based system, rather they are useful for providing links to such systems by displaying a notice on graphs or via API query calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb73c5dc28f46181357ee65d6b0d4373e968f7e5" translate="yes" xml:space="preserve">
          <source>These errors occur when compacted column is found that cannot be parsed into individual data points. This can happen if the qualifier appears correct but the number of bytes in the value array do not match the lengths encoded in the qualifier. Compacted columns with their data points out of order are not considered bad columns. Instead, the column will be sorted properly and re-written if the &lt;code&gt;--fix&lt;/code&gt; or &lt;code&gt;--fix-all&lt;/code&gt; flags are present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb03d0720df4a6ebeb50b7185fe55e0b33f5989" translate="yes" xml:space="preserve">
          <source>These pages serve as a user and administration guide. We highly recommend that you start with the &lt;code&gt;writing&lt;/code&gt; and &lt;a href=&quot;query/index&quot;&gt;&lt;em&gt;Querying or Reading Data&lt;/em&gt;&lt;/a&gt; sections to understand how OpenTSDB handles its core purpose of storing and serving time series information. Then follow up with the &lt;a href=&quot;quickstart&quot;&gt;&lt;em&gt;Quick Start&lt;/em&gt;&lt;/a&gt; section to play around with getting some data into your OpenTSDB instance. Finally follow up with the other pages for details on the other features of OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa9dec9d9c25d2d72d60e2d7ac0b9a2165aeaad" translate="yes" xml:space="preserve">
          <source>Think about how you may want to drill down when querying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0200e3229f1d2e06b491783e40a31061618cd2ab" translate="yes" xml:space="preserve">
          <source>Think about the most common queries you'll be executing and optimize your schema for those queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b310868a344407f4ec06d2ebc2f54b39d4441c99" translate="yes" xml:space="preserve">
          <source>This appender will write to a log file called &lt;code&gt;/var/log/opentsdb/opentsdb.log&lt;/code&gt;. When the file reaches 128MB in size, it will rotate the log to &lt;code&gt;opentsdb.log.1&lt;/code&gt; and start a new &lt;code&gt;opentsdb.log&lt;/code&gt; file. Once the new log fills up, it bumps &lt;code&gt;.1&lt;/code&gt; to &lt;code&gt;.2&lt;/code&gt;, &lt;code&gt;.log&lt;/code&gt; to &lt;code&gt;.1&lt;/code&gt; and creates a new one. It repeats this until there are four log files in total. The next time the log fills up, the last log is deleted. This way you are gauranteed to only use up to 512MB of disk space. Many other appenders are available so see what fits your needs the best.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d013260cc758c7bfd073fbe30d6769daff20b6dd" translate="yes" xml:space="preserve">
          <source>This area deals with altering the Y axes of the graph. &lt;strong&gt;Y&lt;/strong&gt; settings affect the axis on the left and &lt;strong&gt;Y2&lt;/strong&gt; settings affect the axis on the right. Y2 settings are only enabled if at least one of the metrics has had the &lt;strong&gt;Right Axis&lt;/strong&gt; check box checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2519ae99de8eee80fc3bcced8090ff25676a02" translate="yes" xml:space="preserve">
          <source>This area is where you choose the metrics, optional tags, aggregation function and a possible down sampler for your graph. Along the top are a pair of blue tabs. Each graph can display multiple metrics and the tabs organize the different sub queries. Each graph requires at least one metric so you'll choose that metric in the first tab. To add another metric to your graph, click the &lt;code&gt;+&lt;/code&gt; tab and you'll be able to setup another sub query. If you have configured multiple metrics, simply click on the tab that corresponds to the metric you want to modify. The tab will display a subset of the metric name it is associated with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc76e3fd3579aa98deae76a2b67da0a13b0238c" translate="yes" xml:space="preserve">
          <source>This can be caused if you use millisecond timestamps and write thousands of data points for a single metric in a single hour. In this case, the column qualifier and row key can grow larger than the configured &lt;code&gt;hfile.index.block.max.size&lt;/code&gt;. In this situation we recommend that you disable TSD compaction code. In the future we will support appends which will allow for compacted columns with small qualifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c3b039b471d6f5ffde625a623e33adf5dc8592" translate="yes" xml:space="preserve">
          <source>This command is similar to the HTTP &lt;a href=&quot;../api_http/stats/index&quot;&gt;&lt;em&gt;/api/stats&lt;/em&gt;&lt;/a&gt; endpoint in that it will return a list of the TSD stats, one per line, in the &lt;code&gt;put&lt;/code&gt; format. This command does not modify TSD in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5baf3e866fc3f670d3d82184f3f443063d58cac" translate="yes" xml:space="preserve">
          <source>This command is similar to the HTTP &lt;a href=&quot;../api_http/version&quot;&gt;&lt;em&gt;/api/version&lt;/em&gt;&lt;/a&gt; endpoint in that it will return information about the currently running version of OpenTSDB. This command does not modify TSD in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb2626e3fcb51afa38258edcbf9eb5a731beba6" translate="yes" xml:space="preserve">
          <source>This command will cause the running TSD to shutdown and the process to exit. Please use carefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaf3ac750d2cfa2c9e446a99ac238049cbaaa07" translate="yes" xml:space="preserve">
          <source>This command will run through the entire data table, scanning each row of timeseries data and generate missing TSMeta objects and UIDMeta objects or update the created timestamps for each object type if necessary. Use this command after enabling meta tracking with existing data or if you suspect that some timeseries may not have been indexed properly. The command will also push new or updated meta entries to a search engine if a plugin has been configured. If existing meta is corrupted, meaning the TSD is unable to deserialize the object, it will be replaced with a new entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c5e9494e3bb24cf6cd228d92ad32c31cec61ff" translate="yes" xml:space="preserve">
          <source>This endpoint (2.1 and later) provides support for accessing the latest value of individual time series. It provides an optimization over a regular query when only the last data point is required. Locating the last point can be done with the timestamp of the meta data counter or by scanning backwards from the current system time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1957e328706c269ae7824a2f2c142dc556d45ad" translate="yes" xml:space="preserve">
          <source>This endpoint allows for querying data using expressions. The query is broken up into different sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27843bbaf2dd95717fe878da3811208806ebda89" translate="yes" xml:space="preserve">
          <source>This endpoint allows for storing data in OpenTSDB over HTTP as an alternative to the Telnet interface. Put requests can only be performed via content associated with the POST method. The format of the content is dependent on the serializer selected. However there are some common parameters and responses as documented below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be5e10393b5cbf435de0aa48ffdeb0be667517e" translate="yes" xml:space="preserve">
          <source>This endpoint allows for storing rolled up and/or pre-aggregated data in OpenTSDB over HTTP. For details on rollups and pre-aggs, please see the user guide: &lt;a href=&quot;../user_guide/rollups&quot;&gt;&lt;em&gt;Rollup And Pre-Aggregates&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d08780148baef0e976164f83ab4fb7a5fa31c9" translate="yes" xml:space="preserve">
          <source>This endpoint can also change the logging level of ______ at runtime. The query string parameter to use is &lt;code&gt;level=&amp;lt;logging_level&amp;gt;&lt;/code&gt;. For example, you can call &lt;code&gt;http://localhost:4242/logs?level=INFO&lt;/code&gt; to set the log level to &lt;code&gt;INFO&lt;/code&gt;. Valid parameter values are (from the most verbose to the least): &lt;code&gt;ALL&lt;/code&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;code&gt;DEBUG&lt;/code&gt;&lt;code&gt;INFO&lt;/code&gt;&lt;code&gt;WARN&lt;/code&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;code&gt;OFF&lt;/code&gt; (names are case insensitive). Note that this method does not change the &lt;code&gt;logback.xml&lt;/code&gt; configuration file and restarting the TSD will reload from that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876d9759e8951fa52d1a079475d72a1988a93f9c" translate="yes" xml:space="preserve">
          <source>This endpoint can be used for tracking and troubleshooting queries executed against a TSD. It maintains an unbounded list of currently executing queries as well as a list of up to 256 completed queries (rotating the oldest queries out of memory). Information about each query includes the original query, request headers, response code, timing and an exception if thrown. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049cadd4ac580c2006c235b53f07e4db37b1ba39" translate="yes" xml:space="preserve">
          <source>This endpoint does not purge the on-disk temporary cache where graphs and other files are stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa382d4916d2efb7bdd7b1f14dc482e30650197b" translate="yes" xml:space="preserve">
          <source>This endpoint does not require any parameters via query string or body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33a246ac9a78406e5c51a185c9fbf623b4c43f36" translate="yes" xml:space="preserve">
          <source>This endpoint enables assigning UIDs to new metrics, tag names and tag values. Multiple types and names can be provided in a single call and the API will process each name individually, reporting which names were assigned UIDs successfully, along with the UID assigned, and which failed due to invalid characters or had already been assigned. Assignment can be performed via query string or content data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a546dda6ed71f39a1cd3ce043775ca2d7ac16b9" translate="yes" xml:space="preserve">
          <source>This endpoint enables editing or deleting UID meta data information, that is meta data associated with &lt;em&gt;metrics&lt;/em&gt;, &lt;em&gt;tag names&lt;/em&gt; and &lt;em&gt;tag values&lt;/em&gt;. Some fields are set by the TSD but others can be set by the user. When using the &lt;code&gt;POST&lt;/code&gt; method, only the fields supplied with the request will be stored. Existing fields that are not included will be left alone. Using the &lt;code&gt;PUT&lt;/code&gt; method will overwrite all user mutable fields with given values or defaults if a given field is not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f008c5fb0114a12aec4b9f01601d721048b196d" translate="yes" xml:space="preserve">
          <source>This endpoint enables searching, editing or deleting timeseries meta data information, that is meta data associated with a specific timeseries associated with a &lt;em&gt;metric&lt;/em&gt; and one or more &lt;em&gt;tag name/value&lt;/em&gt; pairs. Some fields are set by the TSD but others can be set by the user. When using the &lt;code&gt;POST&lt;/code&gt; method, only the fields supplied with the request will be stored. Existing fields that are not included will be left alone. Using the &lt;code&gt;PUT&lt;/code&gt; method will overwrite all user mutable fields with given values or defaults if a given field is not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32afc8b883821954a2771b093ad7eae2cd9ca4f" translate="yes" xml:space="preserve">
          <source>This endpoint lists the serializer plugins loaded by the running TSD. Information given includes the name, implemented methods, content types and methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af366f361c8d1bd9e146c06ed78cc3a31fe69d79" translate="yes" xml:space="preserve">
          <source>This endpoint provides a basic means of searching OpenTSDB meta data. Lookups can be performed against the &lt;code&gt;tsdb-meta&lt;/code&gt; table when enabled. Optionally, a search plugin can be installed to send and retreive information from an external search indexing service such as Elastic Search. It is up to each search plugin to implement various parts of this endpoint and return data in a consistent format. The type of object searched and returned depends on the endpoint chosen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2db88164678a1141454effd7e09b73a11e68744" translate="yes" xml:space="preserve">
          <source>This endpoint provides a list of statistics for the running TSD. Sub endpoints return details about other TSD components such as the JVM, thread states or storage client. All statistics are read only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e15c71f2016f88d4133c556633cb5116f346762" translate="yes" xml:space="preserve">
          <source>This endpoint provides a means of implementing an &quot;auto-complete&quot; call that can be accessed repeatedly as a user types a request in a GUI. It does not offer full text searching or wildcards, rather it simply matches the entire string passed in the query on the first characters of the stored data. For example, passing a query of &lt;code&gt;type=metrics&amp;amp;q=sys&lt;/code&gt; will return the top 25 metrics in the system that start with &lt;code&gt;sys&lt;/code&gt;. Matching is case sensitive, so &lt;code&gt;sys&lt;/code&gt; will not match &lt;code&gt;System.CPU&lt;/code&gt;. Results are sorted alphabetically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09d5b94ec3a413ae983f81250ed77a8523cbc9e" translate="yes" xml:space="preserve">
          <source>This endpoint purges the in-memory data cached in OpenTSDB. This includes all UID to name and name to UID maps for metrics, tag names and tag values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b91eda958b5dbf24b3da74baba73246c3a56f2f" translate="yes" xml:space="preserve">
          <source>This endpoint returns information about the running configuration of the TSD. It is read only and cannot be used to set configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69783aaf1556ffa9a6949e2cacb0cb0a50e98b57" translate="yes" xml:space="preserve">
          <source>This endpoint returns information about the running version of OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828a9d481adcd20c2c5e492e569b18d27fa8bb71" translate="yes" xml:space="preserve">
          <source>This endpoint should always return data with the JSON serializer as the default. If you think the TSD should have other formatters listed, check the plugin documentation to make sure you have the proper plugin and it's located in the right directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f19c13c7a0611a273d095830229f023b30e4f9" translate="yes" xml:space="preserve">
          <source>This endpoint simply lists the names of implemented aggregation functions used in timeseries queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d313a35eaf6cdef9049f36e2da537009043454" translate="yes" xml:space="preserve">
          <source>This endpoint was introduced in 1.0 as a means of accessing static files on the local system. &lt;code&gt;/s&lt;/code&gt; will be maintained in the future and will not be deprecated. The static root is definied in the config file as &lt;code&gt;tsd.http.staticroot&lt;/code&gt; or CLI via &lt;code&gt;--staticroot&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef373281324018aae312ce22e59494791a5d6c9" translate="yes" xml:space="preserve">
          <source>This endpoint will almost always return a &lt;code&gt;200&lt;/code&gt; with content body. If the query doesn't match any results, the &lt;code&gt;results&lt;/code&gt; field will be an empty array and &lt;code&gt;totalResults&lt;/code&gt; will be 0. If an error occurs, such as a failure to resolve a metric or tag name to a UID, an exception will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dd96be71602f0d90499c76832706003b1ef079" translate="yes" xml:space="preserve">
          <source>This endpoint will almost always return a &lt;code&gt;200&lt;/code&gt; with content body. If the query doesn't match any results, the &lt;code&gt;results&lt;/code&gt; field will be an empty array and &lt;code&gt;totalResults&lt;/code&gt; will be 0. If an error occurs, such as the plugin being disabled or not configured, an exception will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a453f5b99cf8e227780904f75d83c8e7670d59" translate="yes" xml:space="preserve">
          <source>This field contains the numeric HTTP response code and a textual representation of that code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38358ddf81a17abe01a11d8a145b6cba4513b51d" translate="yes" xml:space="preserve">
          <source>This hook could be used to register OpenTSDB with a service discovery mechanism or look up the location of an HBase cluster dynamically and populate the connfiguration. You could potentially create HBase tables if they do not exist at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649c3d5f5f204ef2376dcc2e6051d0e5cfe96732" translate="yes" xml:space="preserve">
          <source>This hook is called once OpenTSDB has been fully initialized and is ready to serve traffic. This hook could be used to set the status to READY in a service discovery system, change the state of in a load balancer or perform other tasks which require a fully functioning OpenTSDB instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86190ca41285324ae2280f129a757c79a911aa85" translate="yes" xml:space="preserve">
          <source>This hook is called when OpenTSDB is performing shutdown tasks. No work should be done here which requires a functioning and connected OpenTSDB instance. You could use this to update the status of this node within your service discovery mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a06a4032fb20337a084c07b295dbe7d3a642a8" translate="yes" xml:space="preserve">
          <source>This indicates one or more UIDs were not used for mapping entries. If a UID was deleted, this message is normal. If UIDs were not deleted, this can indicate wasted UIDs due to auto-assignments by TSDs where data was coming in too fast. Try assigning UIDs up-front as much as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc680d085ae0e88d3ce7388744023732da91126" translate="yes" xml:space="preserve">
          <source>This initial graph will aggregate all of the time series for the metric you selected. Try limiting your query to a specific host by adding &lt;code&gt;host&lt;/code&gt; as a value in the left-hand box next to the &lt;code&gt;Tags&lt;/code&gt; label (if it isn't already there) and add the specific host name (e.g. &lt;code&gt;foo&lt;/code&gt;) in the right-hand box. After clicking in another box you should see the graph re-draw with different information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b2b609b28de0e5e9f0b3b5223da6403cab3cec" translate="yes" xml:space="preserve">
          <source>This is a map of the headers sent with the HTTP request. In a mediocre effort at security, the &lt;code&gt;Cookie&lt;/code&gt; header field is obfuscated with asterisks in the case that it contains user identifiable or secure information. Each request is different so lookup the headers in the HTTP RFCs or your web browser or clients documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015a2b7323ff6165f90564be33cda3d8670e6c4d" translate="yes" xml:space="preserve">
          <source>This is a simple utility for consuming data points from collectors while a TSD, HBase or HDFS is underoing maintenance. The script should be run on the same port as a TSD and accepts data in the &lt;code&gt;put&lt;/code&gt; Telnet style. Data points are then written directly to disk in a format that can be used with the &lt;a href=&quot;../cli/import&quot;&gt;&lt;em&gt;import&lt;/em&gt;&lt;/a&gt; command once HBase is back up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddad3041f947e1b4165040525621f1ffc833e679" translate="yes" xml:space="preserve">
          <source>This is an interface used to implement additional HTTP API endpoints for OpenTSDB. (v2.2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e888767d78bd77862d02d07d6f827e85615814b0" translate="yes" xml:space="preserve">
          <source>This is much easier than dealing with a dependency. You only need to modify &lt;code&gt;Makefile.am&lt;/code&gt; and edit the &lt;code&gt;tsdb_SRC := \&lt;/code&gt; or the &lt;code&gt;test_SRC := \&lt;/code&gt; lists. If you're adding a class, put it in the proper alphabetical position and account for the proper directory and class name. It is case sensitive so make sure to get that right. If removing a class, just delete the line. If moving a class, add the new line and delete the old one. Be careful to handle the line continuation &lt;code&gt;\&lt;/code&gt; backslashes. The last class in each list should NOT end with a backslash, the rest need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f493fa749ec34b3ab40005594d6b1386d149aae2" translate="yes" xml:space="preserve">
          <source>This is the same as a data point table row key without the timestamp. E.g. &lt;code&gt;&amp;lt;metric_uid&amp;gt;&amp;lt;tagk1&amp;gt;&amp;lt;tagv1&amp;gt;[...&amp;lt;tagkN&amp;gt;&amp;lt;tagvN&amp;gt;]&lt;/code&gt;. It is shared for all column types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd82e65415794bb7608fe85f279c2a2f25660af9" translate="yes" xml:space="preserve">
          <source>This is the simplest query to make. TSDB will setup a scanner to fetch all data points for the metric UID &lt;code&gt;01&lt;/code&gt; between &lt;em&gt;&amp;lt;start&amp;gt;&lt;/em&gt; and &lt;em&gt;&amp;lt;end&amp;gt;&lt;/em&gt;. The result will be the a single dataset with time series #1 through #7 summed together. If you have thousands of unique tag combinations for a given metric, they will all be added together into one series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d970fd785437692bddc537d86d2d886407b3947b" translate="yes" xml:space="preserve">
          <source>This is the solution used by many next-generation monitoring solutions such as that at Yahoo!. Yahoo is working to open source their stream processing system for others who need monitoring at massive scales and it plugs neatly into TSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8353208005c79e2131dacc3b1ab066dbd7443e8d" translate="yes" xml:space="preserve">
          <source>This is where a tagging scheme will stand or fall. Let's say you want to get just the data from timeseries #4. With the current system, you are unable to. You would send in query #2 &lt;code&gt;m=sum:cpu.system{host=web01}&lt;/code&gt; thinking that it will return just the data from #4, but as we saw, you'll get the aggregate results for #1, #4, #5 and #6. To prevent such an occurance, you would need to add another tag to #4 that differentiates it from other timeseries in the group. Or if you've already commited, you can use TSUID queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be9ac81acff15dbc749a1b53fba73ca5ccdc310" translate="yes" xml:space="preserve">
          <source>This isn't necesarily the best way to setup your metrics and tags, rather it's meant to be illustrative of how the query system works. In particular, TS #4 and 5, while legitimate timeseries, may screw up your queries unless you know how they work. In general, try to maintain the same number and type of tags for each timeseries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b26a1055602062320232887d91061404659b1f7" translate="yes" xml:space="preserve">
          <source>This may be used in the event that an API call has migrated or should be forwarded to another server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf2c70fb568a00af90f6ec1e0bbd91aeab2ad47" translate="yes" xml:space="preserve">
          <source>This may occur if a TSD crashes before the reverse map is written and would only prevent queries from executing against time series using the UID as they would not be able to lookukp the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2baf6afc2f4b1810059afbae84793a88a0e017c9" translate="yes" xml:space="preserve">
          <source>This may occur if a value is recorded on greater than 8 bytes for a single data point column. Individual data points are stored on 2 or 4 byte qualifiers. This error cannot happen for a data point within a compacted column. If it was compacted, the column would throw a bad compacted column error as it wouldn't be parseable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb32bc9083008f7b41ccb92b735be384be4e7087" translate="yes" xml:space="preserve">
          <source>This method cannot be undone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db112be712f809354b5281590875cd399e9738b4" translate="yes" xml:space="preserve">
          <source>This method cannot be undone. Once executed, the purge will continue running unless the TSD is shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76122dc54a50987c90e3460f54ffe173cd2d2fd0" translate="yes" xml:space="preserve">
          <source>This page documents the OpenTSDB 2.1 fsck utility. For previous versions, only the &lt;code&gt;--fix&lt;/code&gt; flag is available and only data within a query may be fsckd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2db495251b3552764e3e02414803326a940a924" translate="yes" xml:space="preserve">
          <source>This page lists common issues encountered by users of OpenTSDB along with various troubleshooting steps. If you run into an issue, please check the &lt;a href=&quot;https://groups.google.com/forum/#!forum/opentsdb&quot;&gt;OpenTSDB Google Group&lt;/a&gt; or the &lt;a href=&quot;https://github.com/OpenTSDB/opentsdb/issues&quot;&gt;Github Issues&lt;/a&gt;. If you can't find an answer, please include your operating system, TSD version and HBase version in your question.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926d5d665c45a5917ed630c6f3319dbb2799673e" translate="yes" xml:space="preserve">
          <source>This page lists some of the utilities or projects included with OpenTSDB or maintained by the OpenTSDB group. Additional utilities, such as front-ends, clients and publishers can be found on the &lt;a href=&quot;../../resources&quot;&gt;&lt;em&gt;Additional Resources&lt;/em&gt;&lt;/a&gt; page or via a simple Google search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad91c59b836f74855823446b2409a8179a92c97f" translate="yes" xml:space="preserve">
          <source>This question is asked often enough it's worth laying out the reasons here. Looking up or assigning a UID takes up precious cycles in the TSD so folks wonder if it wouldn't be faster to use the raw name of the metric or computer a hash. Indeed, from a write perspective it would be slightly faster, but there are a number of drawbacks that become apparent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbcf243f445811e0be0595e9a083adcdda2e40b" translate="yes" xml:space="preserve">
          <source>This represents a single metric but four time series across three hours. Note how there is one time series with two sets of tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9e40067f86fb5cd493d907dd7c1501f07c5039" translate="yes" xml:space="preserve">
          <source>This requests the stats from the TSD (assuming it's running on the local host and listening to port 4242), extract the names of the metrics from the stats and assigns them UIDs. Then you can use this simple script to collect stats and store them in OpenTSDB:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53de11373587c9acdeb60a465bab7dffd85de86d" translate="yes" xml:space="preserve">
          <source>This sample configuration is for 2 backends, named &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;. You need to substitute at least the host names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8834c7c3c11d237e291cf5e51a3a1d1176f51918" translate="yes" xml:space="preserve">
          <source>This script will purge all files in the directory. Don't store anything important in the temp directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806443a19d2027595bb82f79781eb38501cef7fe" translate="yes" xml:space="preserve">
          <source>This section is a serialization of the query given by the user. In the logs and stats page this will be the full query with timing and global options. When returned with the query results, only the sub query (metric and filters) are returned with the associated result set for identification purposes (e.g. if you request the same metric twice with two different aggregators, you need to know which data set corresponds to which aggregator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71efceea22777b3b589cabfe55f0dd3f4b4b7fb9" translate="yes" xml:space="preserve">
          <source>This sub command is used to assign IDs to new unique names for metrics, tag names or tag values. Supply a list of one or more values to assign UIDs and the list of assignments will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce588c613745b801fd6ad90920e887bdda2798a" translate="yes" xml:space="preserve">
          <source>This sub command will mark all TSMeta and UIDMeta objects for deletion in the UID table. This is useful for downgrading from 2.0 to a 1.x version or simply flushing all meta data and starting over with a &lt;code&gt;metasync&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942a2678bea6be3b4d6775c3e5979711cbc95a09" translate="yes" xml:space="preserve">
          <source>This table behaves as an index, organizing time series into a hierarchical structure similar to a file system for use with tools such as Graphite or other dashboards. A tree is defined by a set of rules that process a TSMeta object to determine where in the hierarchy, if at all, a time series should appear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8b1a6fda56c16d277fa9c4ac750e2117fb66b0c" translate="yes" xml:space="preserve">
          <source>This table is an index of the different time series stored in OpenTSDB and can contain meta-data for each series as well as the number of data points stored for each series. Note that data will only be written to this table if OpenTSDB has been configured to track meta-data or the user creates a TSMeta object via the API. Only one column family is used, the &lt;code&gt;name&lt;/code&gt; family and currently there are two types of columns, the meta column and the counter column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c524512b16bd8e1aefdf3d9db4d16ca9e470d4" translate="yes" xml:space="preserve">
          <source>This way you will collect and store stats from the TSD every 15 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621450dc24b9ecc77453e16609469d2a6d570e83" translate="yes" xml:space="preserve">
          <source>This will create 2 metrics: &lt;code&gt;mysql.bytes_received&lt;/code&gt; and &lt;code&gt;mysql.bytes_sent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdccbc8057607c1804602198f96157b485765a57" translate="yes" xml:space="preserve">
          <source>This will find all of the timeseries that include &quot;host&quot; values for &quot;web01&quot; OR &quot;web02&quot;, then group them by value, similar to the &lt;code&gt;*&lt;/code&gt; operator. Our groups, this time, will look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654f8bc2509d4ebf03859dd5d4f821e6e290b188" translate="yes" xml:space="preserve">
          <source>This will return an aggregate of time series #1, #4, #5 and #6 since they're the only series that include &lt;code&gt;host=web01&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2c0df9fea30d675d23e6bc773d61b1d8c6ee0f" translate="yes" xml:space="preserve">
          <source>This will return the data from timeseries #6 only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92aa1008f141bfbd5b5476ebafb1b06aaa347a6" translate="yes" xml:space="preserve">
          <source>This will store a reading of the 1-minute and 5-minute load average of your server in OpenTSDB by sending simple &quot;telnet-style commands&quot; to the TSD:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8871f0d36be99653aff86c38153695bf07943111" translate="yes" xml:space="preserve">
          <source>This won't compile the GWT UI. If you want to do UI work and have made changes, recompile OpenTSDB or export it as a JAR from your IDE, then execute the following command (assuming the directory structure above):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fd51c7fb6faddc5022431da395feb115c0998d" translate="yes" xml:space="preserve">
          <source>Time Offset - This is an offset based on the rollup table config, generally on 2 bytes. The offset is not a specific number of seconds or minutes from the base, instead it's the index of an interval of an offset. For example, if the table is configured to store 1 day of data at a resolution of 1 hour per row, then the base timestamp of the row key will align on daily boundaries (on Unix epoch timestamps). Then there would be a potential of 24 offsets (1 for each hour in the day) for the row. A data point at midnight for the given day would have an offset of 0 whereas the 23:00 hour value would have an offset of 22. Since rollup timestamps are aligned to time boundaries, qualifiers can save a fair amount of space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef3e11fdc38bd667d112d467edf82b75d8e7af5" translate="yes" xml:space="preserve">
          <source>Time Section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489a0f7a9d63940dbd34658ef6fe08c5b76eb14d" translate="yes" xml:space="preserve">
          <source>Time Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e312672056b00372b038ae5b2af207b4bc1f9637" translate="yes" xml:space="preserve">
          <source>Time Series Cardinality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dea5b9bba29c7bd741f7030630fcdc003dda6ab" translate="yes" xml:space="preserve">
          <source>Time Series Included</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6da341ee1e31055bdb0caea844b3bc49547757" translate="yes" xml:space="preserve">
          <source>Time Zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0f911f6c1acd495213c1806c5d882c62bd147a" translate="yes" xml:space="preserve">
          <source>Times</source>
          <target state="translated">Times</target>
        </trans-unit>
        <trans-unit id="19eabc961735d78f12fc7be906ffcb033853cf85" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="translated">Timestamp</target>
        </trans-unit>
        <trans-unit id="1d859aacd2823c28173ee1beab47dd92ba175dd1" translate="yes" xml:space="preserve">
          <source>Timestamp (ms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04ed1238a14de2b02d7fd14a7e9605bb1b10b96" translate="yes" xml:space="preserve">
          <source>Timestamps</source>
          <target state="translated">Timestamps</target>
        </trans-unit>
        <trans-unit id="90ca97aea224ec84cb287b485cb7b0d08501b931" translate="yes" xml:space="preserve">
          <source>Timestamps are simply the absolute time when a value for a given metric was recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b760bd1302e15474980221297fe907f4f8fae6c7" translate="yes" xml:space="preserve">
          <source>Timestamps with second resolution are stored on 2 bytes while millisecond resolution are stored on 4. Thus if you do not need millisecond resolution or all of your data points are on 1 second boundaries, we recommend that you submit timestamps with 10 digits for second resolution so that you can save on storage space. It's also a good idea to avoid mixing second and millisecond timestamps for a given time series. Doing so will slow down queries as iteration across mixed timestamps takes longer than if you only record one type or the other. OpenTSDB will store whatever you give it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76dd21534bedcff12519881f5fabc50b73412369" translate="yes" xml:space="preserve">
          <source>To actually run OpenTSDB, you'll need to meet the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60359f1b6b7026f69889540ac74c9fdac4b36942" translate="yes" xml:space="preserve">
          <source>To avoid having to run &lt;code&gt;mkmetric&lt;/code&gt; for every metric that tcollector tracks you can to start TSD with the &lt;code&gt;--auto-metric&lt;/code&gt; flag. This is useful to get started quickly, but it's not recommended to keep this flag in the long term, to avoid accidental metric creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e07e592b71efeb2f1e2ed46b2e03ae11cfb2df8" translate="yes" xml:space="preserve">
          <source>To create a plugin, all you have to do is extend one of the &lt;em&gt;abstract&lt;/em&gt; plugin classes, write a service description/manifest, compile, drop your JAR (along with any dependencies needed) into the OpenTSDB plugin folder, edit the TSD config and restart. That's all there is to it. No fancy frameworks, no worrying about loading and unloading at strange times, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c443d4b058fc3575c15f9b2bcf9e9e374ad7449a" translate="yes" xml:space="preserve">
          <source>To develop a plugin, simply extend the &lt;code&gt;net.opentsdb.query.filter.TagVFilter&lt;/code&gt; class, create JAR per the &lt;a href=&quot;../../development/plugins&quot;&gt;&lt;em&gt;Plugins&lt;/em&gt;&lt;/a&gt; documentation and drop it in your plugins directory. On start, the TSD will search for the plugin and load it. If there was an error with the implementation the TSD will not start up and will log the exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb46c7d21ad8320d4fcce025edb6319d46e93c2d" translate="yes" xml:space="preserve">
          <source>To drill down to specific timeseries or group results by tag, supply one or more map values in the same format as the query string. Tags are converted to filters in 2.2. See the notes below about conversions. Note that if no tags are specified, all metrics in the system will be aggregated into the results. &lt;em&gt;Deprecated in 2.2&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a2b367bd5bb346ca7de35c2c9b87f0df2c8259" translate="yes" xml:space="preserve">
          <source>To enable salting you must modify the config file parameter &lt;code&gt;tsd.storage.salt.width&lt;/code&gt; and optionally &lt;code&gt;tsd.storage.salt.buckets&lt;/code&gt;. We recommend setting the salt width to &lt;code&gt;1&lt;/code&gt; and determine the number of buckets based on a factor of the number of region servers in your cluster. Note that at query time, the TSD will fire &lt;code&gt;tsd.storage.salt.buckets&lt;/code&gt; number of scanners to fetch data. The proper number of salt buckets must be determined through experimentation as at some point query performance may suffer due to having too many scanners open and collating the results. In the future the salt width and buckets may be configurable but we didn't want folks changing settings on accident and losing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89381af42351d3225bfe932a7ba6493d1b4f2fa" translate="yes" xml:space="preserve">
          <source>To extract data with millisecond resolution, use the &lt;code&gt;/api/query&lt;/code&gt; endpoint and specify the &lt;code&gt;msResolution&lt;/code&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2b8d9808dd030eb53be711ada35e8fb4d66a48" translate="yes" xml:space="preserve">
          <source>To fetch a specific tree, supply a &lt;a href=&quot;#id5&quot;&gt;&lt;span id=&quot;id6&quot;&gt;``&lt;/span&gt;&lt;/a&gt;treeId' value. The response will include the tree object if found. If the requested tree does not exist, a 404 exception will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bb0ce2063725f6800f6e9adaea2ecac40bcb94" translate="yes" xml:space="preserve">
          <source>To help describe the lower resolution data, lets look at some full resolution (also known as &lt;em&gt;raw&lt;/em&gt; data) example data. The first table defines the time series with a short-cut identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0289a01433a99be32878ebc034f5f7cc75a214ca" translate="yes" xml:space="preserve">
          <source>To plot HTTP hits, you just go to the UI and enter &lt;code&gt;http.hits&lt;/code&gt; as your metric name, and enter the time range. Check the &quot;Rate&quot; button since this particular metric is a rate counter, and voil?, you have a plot of the rate of HTTP hits to your web servers over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2f1d0961ccf579d8319c865282051b5dcc1682" translate="yes" xml:space="preserve">
          <source>To reduce the number of datapoints returned, you can specify a downsampling interval and method, such as 1h-avg or 1d-sum. This is also useful (such as when using the max and min) to find best and worst-case datapoints over a given period. Downsampling is most useful to make the graphing phase less intensive and more readable, especially when graphing more datapoints than screen pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206fc5278f71889a5df790996622469345082b57" translate="yes" xml:space="preserve">
          <source>To retreive a list of all time series with a specific tag value, e.g. a particular host, you could issue a query like &lt;code&gt;{*=web01}&lt;/code&gt; that will return all time series with a tag value of &lt;code&gt;web01&lt;/code&gt;. This can be useful in debugging tag name issues such as some series having &lt;code&gt;host=web01&lt;/code&gt; or &lt;code&gt;server=web01&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3ba06a81941ae0793fa2e863e31650dabaf207" translate="yes" xml:space="preserve">
          <source>To save on bandwidth, the put API allows clients to store multiple data points in a single request. The data points do not have to be related in any way. Each data point is processed individually and an error with one piece of data will not affect the storing of good data. This means if your request has 100 data points and 1 of them has an error, 99 data points will still be written and one will be rejected. See the Response section below for details on determining what data point was not stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb26e03bf6caa382462bbb080b416f004afb7dfd" translate="yes" xml:space="preserve">
          <source>To see the values retreived, and potentially ignored (due to duration), use the &lt;code&gt;--verbose&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1141eb96836ed960ae0be11b9889597388b5df0" translate="yes" xml:space="preserve">
          <source>Token</source>
          <target state="translated">Token</target>
        </trans-unit>
        <trans-unit id="f3eadee436bb785948d8a4454eac0ffa93e13c6b" translate="yes" xml:space="preserve">
          <source>Tokens are case sensitive and must appear only one time per formatter. They must also appear exactly as deliniated in the table below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f87ec395ac606db76f200b147dec7a31e7b7452" translate="yes" xml:space="preserve">
          <source>Too many writes - If the rate of writes to TSD is high, queues can build up in AsyncHBase (see above) or in the compaction queue. If this is the case, check HBase performance and try disabling compactions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bdc9b93299ca57fdc5e1139fc6188616a66b82" translate="yes" xml:space="preserve">
          <source>Total number of row key UIDs resolved to tag values when a regex or wildcard filter is used. If neither filter is used this value should be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aecfccdd05af19794f77cc2c4ef521342c8b36d" translate="yes" xml:space="preserve">
          <source>Total time spent merging the salt scanner results into a single set prior to group by operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657758eebef269a1e952bb28be026e73eb271ce1" translate="yes" xml:space="preserve">
          <source>Total time spent on the query including writing to the socket. This is only found in the log files and stats API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089890710e57b5c26fc22670530dccd26bbae1a6" translate="yes" xml:space="preserve">
          <source>Total time spent processing, fetching data and serializing results for the query until it is written over the wire. This value is sent in the API summary results and used as an estimate of the total time spent processing by the TSD. However it does not include the amount of time it took to send the value over the wire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dcd3d4b81bf17688ed3e6350df63bb4f6b2b1d" translate="yes" xml:space="preserve">
          <source>Total time spent serializing the query results. This includes &lt;code&gt;aggregationTime&lt;/code&gt; and &lt;code&gt;uidToStringTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861ac34b9540c7796fe135cd52c2e3d0c4aad8b8" translate="yes" xml:space="preserve">
          <source>Total time spent waiting on the scanners to return results. This includes the &lt;code&gt;groupByTime&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af560b2e24f1ad58d5d62ac075d516d0ac93b2b5" translate="yes" xml:space="preserve">
          <source>Tree API Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7de4b14bbae9e0420e5c0c37a4da24123a1d451" translate="yes" xml:space="preserve">
          <source>Tree Building</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d9834abfeee6127bb018e1483be51797d10f3d" translate="yes" xml:space="preserve">
          <source>Tree Collision Column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a9ebf94115bd223f813e222f6b56c26ab39a7b" translate="yes" xml:space="preserve">
          <source>Tree Column</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ac3f920b03c026fea222b53c72371a16560c9c" translate="yes" xml:space="preserve">
          <source>Tree Table Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cbb348b9d0c2549479656118483f2904a6d60a" translate="yes" xml:space="preserve">
          <source>Tree Terminology</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dccf7d04c71370b16ef3dc41b6463668e09ce6c" translate="yes" xml:space="preserve">
          <source>Tree containing all network gear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff805fc3d6a56a8ed5a7cf7471cef456e1ac21c3" translate="yes" xml:space="preserve">
          <source>Tree definition rows are keyed with the ID of the tree on two bytes. Columns pertaining to the tree definition, as well as the root branch, appear in this row. Definitions are generated by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7081d736f43ad30574ac906d26acdd03c38ed9" translate="yes" xml:space="preserve">
          <source>Trees</source>
          <target state="translated">Trees</target>
        </trans-unit>
        <trans-unit id="d39b5d285f0cc598f0cb5321e34fab826ebc29f0" translate="yes" xml:space="preserve">
          <source>Trees - Flatten metric and tag combinations into a single name for navigation or usage with different tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794e328c103f1eb70d87f054a9067530d5625342" translate="yes" xml:space="preserve">
          <source>Trees are meta data used to organize time series in a heirarchical structure for browsing similar to a typical file system. A number of endpoints under the &lt;code&gt;/tree&lt;/code&gt; root allow working with various tree related data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">True</target>
        </trans-unit>
        <trans-unit id="61f6794803111387499c42973f9ace9b4eb6f76c" translate="yes" xml:space="preserve">
          <source>Tsddrain does not accept HTTP input at this time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92244b78a999e203c54499593c498f2f97de32b2" translate="yes" xml:space="preserve">
          <source>Tweaking the load balancing strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77da6d1f7dff0d1135159537ab9d17076370fa57" translate="yes" xml:space="preserve">
          <source>Two set operations (or Joins) are allowed. The union of all time series ore the intersection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb69f29376fb89b3259001b13f296cf3415d2af" translate="yes" xml:space="preserve">
          <source>Two special rows may be included. They are keyed on &lt;code&gt;&amp;lt;tree ID&amp;gt;\x01&lt;/code&gt; for the &lt;code&gt;collisions&lt;/code&gt; row and &lt;code&gt;&amp;lt;tree ID&amp;gt;\x02&lt;/code&gt; for the &lt;code&gt;not matched&lt;/code&gt; row. These are generated during tree processing and will be described later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="ca3c1a6731e5a44411741fd9a605c6bf895f304b" translate="yes" xml:space="preserve">
          <source>Type and Length - Similar to the original data table, the last 4 bits of each offset byte array contains the encoding of the data value including it's length and whether or not it's a floating point value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f01d55f40f860d30f2fe8a43da1f39c80d3145" translate="yes" xml:space="preserve">
          <source>Types of Errors and Fixes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee1ceab41a26272255db21efaed512deff2e8ff" translate="yes" xml:space="preserve">
          <source>Types of UID objects include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62fab72bfc6f28ab4ed716737c471e31e8c43bb5" translate="yes" xml:space="preserve">
          <source>Typically you want to gather data about everything in your system. This generates a lot of datapoints, the majority of which don't change very often over time (if ever). However, you want fine-grained resolution when they do change. Tcollector remembers the last value and timestamp that was sent for all of the time series for all of the collectors it manages. If the value doesn't change between sample intervals, it suppresses sending that datapoint. Once the value does change (or 10 minutes have passed), it sends the last suppressed value and timestamp, plus the current value and timestamp. In this way all of your graphs and such are correct. Deduplication typically reduces the number of datapoints TSD needs to collect by a large fraction. This reduces network load and storage in the backend. A future OpenTSDB release however will improve on the storage format by using RLE (among other things), making it essentially free to store repeated values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d946adf52a4783929f122d341b29ac0fe188371c" translate="yes" xml:space="preserve">
          <source>UID</source>
          <target state="translated">UID</target>
        </trans-unit>
        <trans-unit id="efc8bfd13b8d10b2d1a130a353a77c47b91c9dbc" translate="yes" xml:space="preserve">
          <source>UID API Endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543b3c677091a05fcea7bdb14f924473c3f72a77" translate="yes" xml:space="preserve">
          <source>UID Assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5675582ba86f151cbdddf91455de2dde6130b4a" translate="yes" xml:space="preserve">
          <source>UID Assignment Row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8448ea278c4664343196814797d2d7b33c3d96" translate="yes" xml:space="preserve">
          <source>UID Cache - Preload portions of the UID table on startup to improve writes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2ace2601b87fcaa65a51ba9d42e5638b39d99c" translate="yes" xml:space="preserve">
          <source>UID Table Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974c6cb360ec0dbd84dd5a168cb80c2dd357af25" translate="yes" xml:space="preserve">
          <source>UIDMETA Response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7157a721abe60ace958d566e1fe3a2cbebb1a7" translate="yes" xml:space="preserve">
          <source>UIDMeta</source>
          <target state="translated">UIDMeta</target>
        </trans-unit>
        <trans-unit id="f9197c1a4e42b1ade480a1238ddff20479bf283e" translate="yes" xml:space="preserve">
          <source>UIDs and TSUIDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1f9e85962ff3151f54f7c8ea05b7a45c5f8f09" translate="yes" xml:space="preserve">
          <source>UIDs are assigned automatically for new &lt;code&gt;tagk&lt;/code&gt; and &lt;code&gt;tagv&lt;/code&gt; objects when data points are written to a TSD. &lt;code&gt;metric&lt;/code&gt; objects also receive new UIDs but only if the &lt;em&gt;auto metric&lt;/em&gt; setting has been configured to &lt;code&gt;true&lt;/code&gt;. Otherwise data points with new metrics are rejected. The UIDs are looked up in a cached map for every incoming data point. If the lookup fails, then the TSD will attempt to assign a new UID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae22773b0650a5a7f4513a10651c639d8523b6d" translate="yes" xml:space="preserve">
          <source>UIDs can be displayed in a few ways. The most common method is via the HTTP API where the 3 bytes of UID data are encoded as a hexadecimal string. For example, the UID of &lt;code&gt;1&lt;/code&gt; would be written in binary as &lt;code&gt;000000000000000000000001&lt;/code&gt;. As an array of unsigned byte values, you could imagine it as &lt;code&gt;[0, 0, 1]&lt;/code&gt;. Encoded as a hex string, the value would be &lt;code&gt;000001&lt;/code&gt; where the string is padded with 0s for each byte. The UID of 255 would result in a hex value of &lt;code&gt;0000FF&lt;/code&gt; (or as a byte array, &lt;code&gt;[0, 0, 255]&lt;/code&gt;. To convert between a decimal UID to a hex, use any kind of hex conversion tool you prefer and put 0s in front of the resulting value until you have a total of 6 characters. To convert from a hex UID to decimal, simply drop any 0s from the front, then use a tool to convert the hex string to a decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275fba4d52934eeeeaea4a6e1704ebdc91c91c93" translate="yes" xml:space="preserve">
          <source>UIDs can be renamed or deleted. Renaming can be accomplished via the CLI and is generally safe but will affect EVERY time series that includes the renamed ID. E.g. if we have a series &lt;code&gt;sys.cpu.user host=web01&lt;/code&gt; and another &lt;code&gt;apache.requests host=web01&lt;/code&gt; and rename the &lt;code&gt;web01&lt;/code&gt; tag value to &lt;code&gt;web01.mysite.org&lt;/code&gt;, then both series will now reflect the new host name and all queries referring to the old name must be updated.. If a data point comes in that has the previous string, a new UID will be assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6111ab8aff19e224fd7aa0713279e191d852ba7" translate="yes" xml:space="preserve">
          <source>UIDs exposed via the API are encoded as hexadecimal strings. The UID &lt;code&gt;42&lt;/code&gt; would be expressed as &lt;code&gt;00002A&lt;/code&gt; given the default UID width of 3 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9a0b22dcd5350ecefbdaa9c79785bca53d21d47" translate="yes" xml:space="preserve">
          <source>Under Arguments, add the runtime arguments to select your Zookeeper quorum and the static and cache directories</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5065ce45ae6cb88021a77e3a856fb9a062137074" translate="yes" xml:space="preserve">
          <source>Under Java Application, right click and select New from the pop-up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ba162b681d6b6ee5e37c09ea2e8e36df8b03a6" translate="yes" xml:space="preserve">
          <source>Under the Hood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8c61b5e1c51a7efed319315012fd68842885a8" translate="yes" xml:space="preserve">
          <source>Under the Main tab, brows to your &lt;code&gt;opentsdb_dev&lt;/code&gt; project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6b221514dced57c82259e527fb1c95f2148db2" translate="yes" xml:space="preserve">
          <source>Understanding Metrics and Time Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539285ded1b7120d839ed3fe9fcd9a4e66098a62" translate="yes" xml:space="preserve">
          <source>Understanding the order of operations is important. When returning query results the following is the order in which processing takes place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33600cf6d51f9346e2f37fe157401ec25b6bb4b" translate="yes" xml:space="preserve">
          <source>Unfortunately OpenTSDB requires metrics to be named as a single, long word without spaces. Thus metrics are usually recorded using &quot;dotted notation&quot;. For example, the metrics above would have names like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee342101204865fad114187a2c29e871861faf6" translate="yes" xml:space="preserve">
          <source>Unicode characters must be escaped with their hexadecimal representation, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1991628ada29bf2f101603a9262a20c08a71bc46" translate="yes" xml:space="preserve">
          <source>Unit test dependencies go here as well as regular items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b634528810ec52e76f56b6ea40ab7999a71da6f" translate="yes" xml:space="preserve">
          <source>Units reflective of the data stored in the timeseries, may be used in GUIs or calculations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95d7c16a612d93451970f944811995c4f0403e4b" translate="yes" xml:space="preserve">
          <source>Unix epoch timestamp, in seconds, when the statistic was collected and displayed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b439a28e7a28b340333b5212b063a2eef57c7e97" translate="yes" xml:space="preserve">
          <source>Unix timestamps are not supported directly in the boxes. You can click in a box to display the calendar, then paste a Unix timestamp (in seconds) in the &lt;em&gt;UNIX Timestamp&lt;/em&gt; box, then press the &lt;em&gt;TAB&lt;/em&gt; key to convert to a human readable time stamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62769f032e81de985972e84a3c510109f83d37ca" translate="yes" xml:space="preserve">
          <source>Unknown Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da44612554286f7b344d56ffdbb816c4c5a27e73" translate="yes" xml:space="preserve">
          <source>Unless there was an error with the query, you will generally receive a &lt;code&gt;200&lt;/code&gt; status with content. However if your query couldn't find any data, it will return an empty result set. In the case of the JSON serializer, the result will be an empty array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887725b9b2d9de5942f6fd25be6171e1707834a8" translate="yes" xml:space="preserve">
          <source>Unlike other solutions, OpenTSDB allows for writing data for a given time series in any order you want. This enables significant flexibility in writing data to a TSD, allowing for populating current data from your systems, then importing historical data at a later time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7efdcfaa5fef1886c5eac143fdd11d5e446bb90" translate="yes" xml:space="preserve">
          <source>Unlike rollups, pre-aggregates require only one extra piece of information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268e1b3bfe651b314080183be7d9af48bbefa66a" translate="yes" xml:space="preserve">
          <source>Unlike, say, the Apache Software Foundation, we do not require every single code change to be attached to an issue. Feel free to send as many small fixes as you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723bf1f1b206c7d57fb30b939691510cc908d91f" translate="yes" xml:space="preserve">
          <source>Upgrading from 1.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bada923eb537c32b1130b46b21e345aa88e57e6" translate="yes" xml:space="preserve">
          <source>Upgrading from 2.x to a Later 2.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812d4982309d008f7c03d0cb3a94bc41a59d939a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;final&lt;/code&gt; keyword as much as you can, particularly in method parameters and returns statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7179b86bb974ee303c899e0371bb8cc7a88fc161" translate="yes" xml:space="preserve">
          <source>Use the UID utility with the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a62d7be4d20f3ca36605734857c9d9a4f255fc4" translate="yes" xml:space="preserve">
          <source>Use the same number and type of tags for each metric. E.g. don't store &lt;code&gt;my.metric host=foo&lt;/code&gt; and &lt;code&gt;my.metric datacenter=lga&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f58237f9a77c653e547056f98607e47737c630" translate="yes" xml:space="preserve">
          <source>Used for auto-complete calls to match metrics, tag names or tag values on the given string. Returns JSON data only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889e3ce88b4e100bf58ad78f2e5dee7ca859f022" translate="yes" xml:space="preserve">
          <source>Used in combination with the &lt;code&gt;limit&lt;/code&gt; value to page through results. Allowable values depends on the plugin. Ignored for lookups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7caa59a04649df7ca329cc939d0163d6e2ab43f1" translate="yes" xml:space="preserve">
          <source>Used only when &lt;code&gt;DELETE&lt;/code&gt; ing a tree, if this flag is set to true, then the entire tree definition will be deleted along with all branches, collisions and not matched entries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4ec32471cc339eb0bbad07fecfae799469fe69b" translate="yes" xml:space="preserve">
          <source>Used to delete data from the system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01497acb828100c6704a58798225da6666dd614" translate="yes" xml:space="preserve">
          <source>Used to fetch or modify a specific tree. &lt;a href=&quot;#id1&quot;&gt;&lt;span id=&quot;id2&quot;&gt;*&lt;/span&gt;&lt;/a&gt;When creating a new tree, the &lt;code&gt;tree&lt;/code&gt; value must not be present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf7c7b636b7ef81cedeaaa54cc8a16bfb376544" translate="yes" xml:space="preserve">
          <source>Used to fetch the root branch of the tree. If used in combination with a branchId, the tree ID will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da66c1b3889159b91772a81e88c3f8b48fa82323" translate="yes" xml:space="preserve">
          <source>Used to retrieve data from OpenTSDB. Overrides can be provided to modify content. &lt;strong&gt;Note&lt;/strong&gt;: Requests via GET can only use query string parameters; see the note below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0001998e0bdef58f01b9c91f784804a24cb51eb3" translate="yes" xml:space="preserve">
          <source>Used to update or create an object in OpenTSDB using the content body from the request. Will use a formatter to parse the content body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8a2389a20ca0752aa9e95093515517e90e194c" translate="yes" xml:space="preserve">
          <source>User</source>
          <target state="translated">User</target>
        </trans-unit>
        <trans-unit id="bec249e659662f7d5947bf09a1ea1d4a552885b0" translate="yes" xml:space="preserve">
          <source>User Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955e61c4b54b25cea569ccd1cd940c5fb31b3c07" translate="yes" xml:space="preserve">
          <source>User Guide: CLI Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6116fdb4f95e1db34ca319f9fbd0dcc6f44e6a83" translate="yes" xml:space="preserve">
          <source>User Guide: GUI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f100edabcc385a5a77e1583f7f67e983511e64b0" translate="yes" xml:space="preserve">
          <source>User Guide: Querying or Reading Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af33bc99d6f7c86cdb26f88a939e207bccabd558" translate="yes" xml:space="preserve">
          <source>User Guide: Storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360751baad77a78b3942433ccf2631a3004e902d" translate="yes" xml:space="preserve">
          <source>User Guide: Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a5fdfb4caff6a0ef66e67942a892980a681ece" translate="yes" xml:space="preserve">
          <source>User Guide: Writing Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6565f0a0dc77432c23144a7ed97d2c2a617525" translate="yes" xml:space="preserve">
          <source>Users can add, edit and delete annotations via the Http API at &lt;code&gt;../api_http/annotation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67ba8fd3a2de0f48e4a4945a68e05232da1127d" translate="yes" xml:space="preserve">
          <source>Using down sampling we can cleanup the previous graph to arrive at something much more useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eeab03d439e1d9633f9594cc9c120763dda7475" translate="yes" xml:space="preserve">
          <source>Using rollups and pre-aggregates require some analysis and a choice between various trade-offs. Since some OpenTSDB users already have means in place for calculating this kind of data, we simply provide the API to store and query. However here are some tips on how to compute these on your own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e84e40800d75197197a3cc68e6dfce2260cbaeb" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--full-scan&lt;/code&gt; flag, the entire OpenTSDB &lt;code&gt;tsdb&lt;/code&gt; data table will be scanned. By default the utility will launch &lt;code&gt;2 x CPU core&lt;/code&gt; threads for optimal performance. Data is stored with the metric UID as the start of each row key so the utility will determine the maximum metric UID and split up the main data table equally among threads. If your data is distributed among metrics fairly evenly, then each thread should complete in roughly the same amount of time. However some metrics usually have more data or time series than others so these threads may be running much longer than others. Future updates to OpenTSDB will be able to divy up the workload in a more efficient manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c02e9f523f3e75838914c64307790f5b450bce" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;DELETE&lt;/code&gt; method will remove a rule from a tree. A successful deletion will respond with a &lt;code&gt;204&lt;/code&gt; status code and no content body. If the rule did not exist, a &lt;code&gt;404&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f769c31fbe1979b47e3d5884c1b5ca03bdcfab" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;DELETE&lt;/code&gt; method will remove all rules from a tree. A successful deletion will respond with a &lt;code&gt;204&lt;/code&gt; status code and no content body. If the tree did not exist, a &lt;code&gt;404&lt;/code&gt; error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26af793f872504a81d53e941fc79c1ec865a0ee" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;DELETE&lt;/code&gt; method will remove only collisions, not matched entries and branches for the given tree from storage. This endpoint starts a delete. Because the delete can take some time, the endpoint will return a successful 204 response without data if the delete completed. If the tree was not found, it will return a 404. If you want to delete the tree definition itself, you can supply the &lt;code&gt;defintion&lt;/code&gt; flag in the query string with a value of &lt;code&gt;true&lt;/code&gt; and the tree and rule definitions will be removed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e060c6a169bbd5cc7d8f67f11885eea850a73cc4" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; methods, you can create a new rule or edit an existing rule. New rules require a &lt;code&gt;type&lt;/code&gt; value. Existing trees require a valid &lt;code&gt;treeId&lt;/code&gt; ID and any fields that require modification. A successful request will return the modified rule object. Note that if a rule exists at the given level and order, any changes will be merged with or overwrite the existing rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d62ecf5accd6b4f56e139e4bd5594c2887feb2" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;PUT&lt;/code&gt; methods, you can create a new tree or edit most of the fields for an existing tree. New trees require a &lt;code&gt;name&lt;/code&gt; value and for the &lt;code&gt;treeId' value to be empty. Existing trees require a valid ``treeId&lt;/code&gt; ID and any fields that require modification. A successful request will return the modified tree object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc32e8ff10fcc6d195c144a9f9e2bab905e251e5" translate="yes" xml:space="preserve">
          <source>Usually aggregating all of the time series for a metric isn't particularly useful. Instead we can drill down a little by filtering for time series that contain a specific tagk/tagv pair combination. Simply put the pair in curly braces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="0f8ca40d96a452e4180cc0d6220a7564a5e3380c" translate="yes" xml:space="preserve">
          <source>Value Too Long Or Short</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225bed68259ba651e2d6c1d327a5491b646a2a9a" translate="yes" xml:space="preserve">
          <source>Values in the POST query &lt;code&gt;tags&lt;/code&gt; map and the &lt;em&gt;group by&lt;/em&gt; curly brace of URI queries are automatically converted to filters to provide backwards compatibility with existing systems. The auto conversions include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9704bafa7ca1f65bf78a2d7c4af65d12ed352bb9" translate="yes" xml:space="preserve">
          <source>Variable Length Encoding - Use less storage space for smaller integer values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a656cb32022254fe55cc6243baea743427517a" translate="yes" xml:space="preserve">
          <source>Variable-Length Encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bec7b100d00a8c0be466bd00f9d09aaf0240be3" translate="yes" xml:space="preserve">
          <source>Variables need descriptive names &lt;code&gt;like_this&lt;/code&gt; (instead of the typical Java style of &lt;code&gt;likeThis&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33817a63b651d4a84e7a5d740d58bef5f67a6a2a" translate="yes" xml:space="preserve">
          <source>Verb</source>
          <target state="translated">Verb</target>
        </trans-unit>
        <trans-unit id="7802ad32f0ce92df70c7ae50d17c25d1ff11aa8c" translate="yes" xml:space="preserve">
          <source>Verbs</source>
          <target state="translated">Verbs</target>
        </trans-unit>
        <trans-unit id="174d53e18dd86a2b98465bd93b7e2a7071028b04" translate="yes" xml:space="preserve">
          <source>Version - Displays version information about the TSD</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152a325cb9dde54e5d5c0bfad81b6b60308e2bb2" translate="yes" xml:space="preserve">
          <source>Version 1.0 of OpenTSDB included a rudimentary HTTP API that allowed for querying data, suggesting metric or tag names and a means of accessing static files. The 1.0 API has been carried over to 2.0 for backwards compatibility though most of the calls have been deprecated. Below is a list of the different endpoints and how to use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835a37d5985d765c753e15d8f664fe8a438884b5" translate="yes" xml:space="preserve">
          <source>Version 1.X to 2.x</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c697058b729e0797b0d7ec09e225f99744db8420" translate="yes" xml:space="preserve">
          <source>Version 3.0 may discard these deprecated methods so if you are developing tools against the HTTP API, make sure to use the 2.0 version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="775b477f882de4305a43dd316c67cb826bb73391" translate="yes" xml:space="preserve">
          <source>Watch your JVM heap usage when enabling any of the real-time meta data settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1779a979cc8742130b8b722998971bd414106f" translate="yes" xml:space="preserve">
          <source>We found an ID of 42 for metrics but the max ID is only 41! Future IDs may be double-assigned!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d050bac18e579e8de2a962599f4d131c6f6ed92" translate="yes" xml:space="preserve">
          <source>We'll make a quick detour here to talk about the actual graph section. Below the query building area is a spot where details about query results are displayed as well as the actual graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c345da795a9556bc36b310cd688ccc41bccbd52e" translate="yes" xml:space="preserve">
          <source>Webservers usually have many files so we could have a &lt;code&gt;tagk&lt;/code&gt; of &lt;code&gt;file&lt;/code&gt; to arrive at &lt;code&gt;file=logo.jpg&lt;/code&gt; or &lt;code&gt;file=index.php&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c1691245ecf75a0486528560dc971aba0c7613" translate="yes" xml:space="preserve">
          <source>Welcome to OpenTSDB 2.3, the scalable, distributed time series database. We recommend that you start with the &lt;a href=&quot;user_guide/index&quot;&gt;&lt;em&gt;User Guide&lt;/em&gt;&lt;/a&gt; then test your understanding with an &lt;a href=&quot;installation&quot;&gt;&lt;em&gt;Installation&lt;/em&gt;&lt;/a&gt; and read on the &lt;a href=&quot;api_http/index&quot;&gt;&lt;em&gt;HTTP API&lt;/em&gt;&lt;/a&gt; if you need to develop against it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f707dd631007e6f00674e6df653a50cb3b80c8e" translate="yes" xml:space="preserve">
          <source>What does the script do? If you're not a big fan of shell and awk scripting, it may not be obvious how this works. But it's simple. The &lt;code&gt;set -e&lt;/code&gt; command simply instructs bash to exit with an error if any of the commands fail. This simplifies error handling. The script then enters an infinite loop. In this loop, we query MySQL to retrieve 2 of its status variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed3699ff66978ac502b6045e640df53c3a9561a" translate="yes" xml:space="preserve">
          <source>What if you want a specific timeseries? You have to include every tag and coresponding value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5327b36090577d46345fd56199590737f1090b4" translate="yes" xml:space="preserve">
          <source>What&amp;#x27;s New</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2efe202772f684e9538c631455d896fa7d07336" translate="yes" xml:space="preserve">
          <source>What's New</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cde1cbe4dd3701ac40deff8cf090d85f5d496fd" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;strict matching&lt;/em&gt; is enabled for a tree, a TSMeta must match on a rule on every level of the rule set in order to be added to the tree. If one or more levels fail to match, the TSUID will not be added. Similar to &lt;em&gt;collisions&lt;/em&gt;, a not matched entry will be recorded for every TSUID that failed to be written to the tree. The entry will contain the TSUID and a brief message about which rule and level failed to match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2abdabf275377290315e15b4d52f5d153f27b13" translate="yes" xml:space="preserve">
          <source>When OpenTSDB is calculating an aggregation it starts at the first data point found for any series, in this case it will be the data for &lt;code&gt;B&lt;/code&gt; at &lt;code&gt;ts0&lt;/code&gt;. We request a value for &lt;code&gt;A&lt;/code&gt; at &lt;code&gt;ts0&lt;/code&gt; but there isn't any data there. We know that there is data for &lt;code&gt;A&lt;/code&gt; at &lt;code&gt;ts0+10s&lt;/code&gt; but since we don't have any value before that, we can't make a guess as to what it would be. Thus we simply return the value for &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bff2db77a7dc18ca13d3f20a4ff0b0c0a401243" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; request arrives with the &lt;code&gt;Origin&lt;/code&gt; header set to a valid domain name, the server will compare the domain against the configured list. If the domain appears in the list or the wild card was set, the server will add the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; and &lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; headers to the response after processing is complete. The allowed methods will always be &lt;code&gt;GET, POST, PUT, DELETE&lt;/code&gt;. It does not change per end point. If the request is a CORS preflight, i.e. the &lt;code&gt;OPTION&lt;/code&gt; method is used, the response will be the same but with an empty content body and a 200 status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90483ecb75f33c66504aec57044b74b4ddb9446" translate="yes" xml:space="preserve">
          <source>When a data point is written to OpenTSDB, the row key is formatted as &lt;code&gt;&amp;lt;metric_UID&amp;gt;&amp;lt;timestamp&amp;gt;&amp;lt;tagk1_UID&amp;gt;&amp;lt;tagv1_UID&amp;gt;[...&amp;lt;tagkN_UID&amp;gt;&amp;lt;tagvN_UID&amp;gt;]&lt;/code&gt;. By simply dropping the timestamp from the row key, we have a long array of UIDs that combined, form a unique timeseries ID. Encoding the bytes as a hex string will give us a useful TSUID that can be passed around various API calls. Thus from our UID example above where each metric, tag name and value has a UID of 1, our TSUID, encoded as a hexadecimal string, would be &lt;code&gt;000001000001000001&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fab944abf51c879bc1b01b659f566bb9c864d1" translate="yes" xml:space="preserve">
          <source>When a request for &lt;code&gt;GET /s/queryui.nocache.js&lt;/code&gt; comes in, for instance, the file &lt;code&gt;${staticroot}/queryui.nocache.js&lt;/code&gt; is sent to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb795a0996434169e7936c08d9e37cf097ed440" translate="yes" xml:space="preserve">
          <source>When aggregating multiple series OpenTSDB generally performs linear interpolation when a series is missing a value at a timestamp present in one or more other series. Some aggregators substitute specific values such as zero, min or max values. With fill policies you can modify aggregation behavior by flagging a missing value as a NaN or a scalar such as zero. When a NaN is emitted for a series, it is skipped for all calculations. For example, if a query asks for the average of a metric and one or more series are missing values, substituting a 0 would drive down the average and lerping introduces non-extant values. However with NaNs we can flag the value as missing and skip it in the calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f307b85a8de7fbc9cab4207a27f8e15baa9065a" translate="yes" xml:space="preserve">
          <source>When all values are assigned, the endpoint returns a 200 status code but if any value failed assignment, it will return a 400.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7042cd70af33c4def83a3a4348fcca04bdeace" translate="yes" xml:space="preserve">
          <source>When building a graph, if an error occurs, a message will appear above the menu. Click on the arrow to expand the message and determine what the error was.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d44031378cc2fb1b7ef9801c12128a9c51a9f44" translate="yes" xml:space="preserve">
          <source>When combining configuration files and command line arguments, the order of processing is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f928ec1bfcd516d4fbf90e96fd29ce7a6b8f8717" translate="yes" xml:space="preserve">
          <source>When converting human readable timestamps, OpenTSDB will convert to UTC from the timezone configured on the system where the TSD is running. While many servers are configured to UTC, and we recommend that all systems running OpenTSDB use UTC, sometimes a local timezone is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf539127020f4b17e6954b4a5f7859e3b6d89e6" translate="yes" xml:space="preserve">
          <source>When creating a tree it will have the &lt;code&gt;enabled&lt;/code&gt; field set to &lt;code&gt;false&lt;/code&gt; by default. After creating a tree you should add rules then use the &lt;code&gt;tree/test&lt;/code&gt; endpoint with a few TSUIDs to make sure the resulting tree will be what you expected. After you have verified the results, you can set the &lt;code&gt;enabled&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt; and new TSMeta objects or a tree synchronization will start to populate branches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ad345ce54d744e0d4346875a589bbcf877ecd3" translate="yes" xml:space="preserve">
          <source>When creating, modifying or deleting annotations, all changes will be propagated to the search plugin if configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8810e9d5143441e456baf25d86b384e054aa61ef" translate="yes" xml:space="preserve">
          <source>When editing rules, it may happen that some levels or orders are skipped or left empty. In these situations, processing simply skips the empty locations. You should do your best to keep things organized properly but the rule processor is a little forgiving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768400609d1a6d467fe36b04fe25126e2c1edd8c" translate="yes" xml:space="preserve">
          <source>When generating random IDs, TSDB will try up to 10 times to assign a UID without a collision. Thus as the number of assigned metrics increases so too will the number of collisions and the likely hood that a data point may be dropped due to retries. If you enable random IDs and keep adding more metrics then you may want to increase the number of bytes on metric UIDs. Note that the UID change is not backwards compatible so you have to create a new table and migrate your old data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786fb35a9c614a66abb9ebbc3b2fcec92eae77db" translate="yes" xml:space="preserve">
          <source>When it comes to timeseries data, there are lots of terms tossed about that can lead to some confusion. This page is a sort of glossary that helps to define words related to the use of OpenTSDB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589290daaeac9fa4a537718e78a27d42e565c382" translate="yes" xml:space="preserve">
          <source>When making a query string request, multiple names for a given type can be supplied in a comma separated fashion. E.g. &lt;code&gt;metric=sys.cpu.0,sys.cpu.1,sys.cpu.2,sys.cpu.3&lt;/code&gt;. Naming conventions apply: see _______.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db46ecc896bc829a3ede30c6a67d1a838ab0ecce" translate="yes" xml:space="preserve">
          <source>When passing rate options in a query string, the options must be enclosed in curly braces. For example: &lt;code&gt;m=sum:rate{counter,,1000}:if.octets.in&lt;/code&gt;. If you wish to use the default &lt;code&gt;counterMax&lt;/code&gt; but do want to supply a &lt;code&gt;resetValue&lt;/code&gt;, you must add two commas as in the previous example. Additional fields in the &lt;code&gt;rateOptions&lt;/code&gt; object include the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fba73f279100bd3a481913b14403bacac26b84" translate="yes" xml:space="preserve">
          <source>When performing an aggregation, what happens if the time stamps of the data points for each time series fail to line up? Say we record the temperature every 5 minutes in different regions around the world. A sensor in Paris may send a temperature of &lt;code&gt;27c&lt;/code&gt; at &lt;code&gt;1356998400&lt;/code&gt;. Then a sensor in San Francisco may send a value of &lt;code&gt;18c&lt;/code&gt; at &lt;code&gt;1356998430&lt;/code&gt;, 30 seconds later. Antarctica may report &lt;code&gt;-29c&lt;/code&gt; at &lt;code&gt;1356998529&lt;/code&gt;. If we run a query requesting the average temperature, we want all of the data points averaged together into a single point. This is where &lt;strong&gt;interpolation&lt;/strong&gt; comes into play. See &lt;a href=&quot;aggregators&quot;&gt;&lt;em&gt;Aggregators&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397054dbf8d59aec11d0f6f634cc9306b25819e0" translate="yes" xml:space="preserve">
          <source>When processing a TSMeta, if the resulting leaf would overwrite an existing leaf with a different TSUID, a collision will be recorded. This endpoint allows retreiving a list of the TSUIDs that were not included in a tree due to collisions. It is useful for debugging in that if you find a TSUID in this list, you can pass it through the &lt;code&gt;/tree/test&lt;/code&gt; endpoint to get details on why the collision occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f7e3102f2d64532ed98f3f277346a42abfa591" translate="yes" xml:space="preserve">
          <source>When processing a TSMeta, if the tree has &lt;code&gt;strictMatch&lt;/code&gt; enabled and the meta fails to match on a rule in any level of the set, a &lt;em&gt;not matched&lt;/em&gt; entry will be recorded. This endpoint allows for retrieving the list of TSUIDs that failed to match a rule set. It is useful for debugging in that if you find a TSUID in this list, you can pass it through the &lt;code&gt;/tree/test&lt;/code&gt; endpoint to get details on why the meta failed to match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb36a57fc88a67adf5ad26a06aec101b87e6899c" translate="yes" xml:space="preserve">
          <source>When rollups are enabled and you request a downsampler with the &lt;code&gt;avg&lt;/code&gt; function from OpenTSDB, the TSD will scan storage for &lt;code&gt;SUM&lt;/code&gt; and &lt;code&gt;COUNT&lt;/code&gt; values. Then while iterating over the data it will accurately compute the average.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ede39a087efd7518931b086a9dab4a33170282" translate="yes" xml:space="preserve">
          <source>When set, deletes all but the most recently written data point when resolving duplicates. If the config value &lt;code&gt;tsd.storage.fix_duplicates&lt;/code&gt; is set to true, then the latest data point will be kept regardless of this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97127e549ccb13a79e2f4409316d1dec6b12ef6e" translate="yes" xml:space="preserve">
          <source>When starting a TSD or CLI tool, a number of errors may prevent a successful launch due to plugin issues. If something happens you should see an exception in the logs related to a plugin. Some things to troubleshoot include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca9aca34575fa85650c8b6b24cb0c1cbb36090c" translate="yes" xml:space="preserve">
          <source>When storing rollups, it's best to avoid functions such as &lt;strong&gt;average&lt;/strong&gt;, &lt;strong&gt;median&lt;/strong&gt; or &lt;strong&gt;deviation&lt;/strong&gt;. When performing further downsampling or grouping aggregations, such values become meaningless. Instead it's much better to always store the &lt;strong&gt;sum&lt;/strong&gt; and &lt;strong&gt;count&lt;/strong&gt; from which, at least, the &lt;strong&gt;average&lt;/strong&gt; can be computed at query time. For more information, see the section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af2402471f4ef066b11aaa2c4169a62abd87658" translate="yes" xml:space="preserve">
          <source>When submitting a JSON query to OpenTSDB 2.2 or later, use either &lt;code&gt;tags&lt;/code&gt; OR &lt;code&gt;filters&lt;/code&gt;. Only one will take effect and the order is indeterminate as the JSON parser may deserialize one before the other. We recommend using filters for all future queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6043e0afa414523f13d52ceb29591765986e78b4" translate="yes" xml:space="preserve">
          <source>When supplying a &lt;code&gt;separator&lt;/code&gt; or a &lt;code&gt;regex&lt;/code&gt; value, you must supply a valid regular expression. For separators, the most common use is to split dotted metrics into branches. E.g. you may want &quot;sys.cpu.0.user&quot; to be split into &quot;sys&quot;, &quot;cpu&quot;, &quot;0&quot; and &quot;user&quot; branches. You cannot supply just a &quot;.&quot; for the separator value as that will not match properly. Instead, escape the period via &quot;.&quot;. Note that if you are supplying JSON via a POST request, you must escape the backslash as well and supply &quot;\.&quot;. GET request responses will escape all backslashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b516fb80a54d0ce36c259cedbe5128a56b9e78" translate="yes" xml:space="preserve">
          <source>When using HTTP for puts, you may need to enable support for chunks if your HTTP client automatically breaks large requests into smaller packets. For example, CURL will break up messages larger than 2 or 3 data points and by default, OpenTSDB disables chunk support. Enable it by setting &lt;code&gt;tsd.http.request.enable_chunked&lt;/code&gt; to true in the config file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16edde5b640ab67d81700527469fa623a2baec01" translate="yes" xml:space="preserve">
          <source>When using the CliQuery tool, you must use the format that separates the date from the time with a dash. This is because the command line is split on spaces, so if you put a space in the timestamp, it will fail to parse execute properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31611eb440a6bdaa3e0dfeba7d497e00b321d461" translate="yes" xml:space="preserve">
          <source>When using the built-in UI, graphs are cached on disk for 60 seconds. If auto-refresh is enabled and the default of 15s is used, the cached graph will be displayed until the 60 seconds have elapsed. If you have higher resolution data coming in and want to bypass the cache, simply append &lt;code&gt;&amp;amp;nocache&lt;/code&gt; to the GUI URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ab6ba7bb84ba6584c2480a222d126dbf0c85ed" translate="yes" xml:space="preserve">
          <source>When writing to the telnet interface, timestamps may optionally be written in the form &lt;code&gt;1364410924.250&lt;/code&gt;, where three digits representing the milliseconds are placed after a period. Timestamps sent to the &lt;code&gt;/api/put&lt;/code&gt; endpoint over HTTP &lt;em&gt;must&lt;/em&gt; be integers and may not have periods. Data with millisecond resolution can only be extracted via the &lt;code&gt;/api/query&lt;/code&gt; endpoint or CLI command at this time. See &lt;code&gt;query/index&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dfed8adaf8fe61a9a599411f87a9d33b813a69" translate="yes" xml:space="preserve">
          <source>When you create a new tree, it will be disabled by default so TSMeta objects will not be processed through the rule set. This is so you have time to configure the rule set and test it to verify that the tree would be built as you expect it to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb089def2b4d5e5bc0e3bcc4ca78ecee3266e1c0" translate="yes" xml:space="preserve">
          <source>When you design your naming schema, keep these suggestions in mind:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab61fbb775962c4046d49dd5034b3dcb8d13991f" translate="yes" xml:space="preserve">
          <source>When you query OpenTSDB, here's what happens under the hood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18723fce86eabf30e06c61bf94652b6169134bf6" translate="yes" xml:space="preserve">
          <source>Whenever a new UIDMeta object is created or modified, it will be pushed to the Search plugin if a plugin has been configured and loaded. For information about UID values, see &lt;a href=&quot;uids&quot;&gt;&lt;em&gt;UIDs and TSUIDs&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81732fdbcbb0e58074d7496ed19db5c64eee7db8" translate="yes" xml:space="preserve">
          <source>Whenever the aggregation calculations are taking place, overall write throughput of the raw data can be affected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac495d484d102835eb66994a9d41d51a062bfc9d" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;&amp;lt;list of class files&amp;gt;&lt;/code&gt; includes the services file that you created above. E.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f230fa1239f7e7d698c3d89d81f5a1e0c225ec0d" translate="yes" xml:space="preserve">
          <source>Where the aggregator is &lt;code&gt;SUM&lt;/code&gt;, the offset is &lt;code&gt;1&lt;/code&gt; and the length is 1 byte of an integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="2b843fc9afdf09ccda360b4d66a3051b0b5d180a" translate="yes" xml:space="preserve">
          <source>Whether or not TSMeta should be processed through the tree. By default this is set to &lt;code&gt;false&lt;/code&gt; so that you can setup rules and test some objects before building branches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fb82f13005f01b45888694358987792184c447" translate="yes" xml:space="preserve">
          <source>Whether or not a data point with a new metric will assign a UID to the metric. When false, a data point with a metric that is not in the database will be rejected and an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e056e3395384a9fa3fc1fab7c41a0a24f281c400" translate="yes" xml:space="preserve">
          <source>Whether or not a data point with a new tag name will assign a UID to the tagk. When false, a data point with a tag name that is not in the database will be rejected and an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69590288c499f79f4ddfbd4b4f825175abd36436" translate="yes" xml:space="preserve">
          <source>Whether or not a data point with a new tag value will assign a UID to the tagv. When false, a data point with a tag value that is not in the database will be rejected and an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992728e06d868d95054e870177650f497add931f" translate="yes" xml:space="preserve">
          <source>Whether or not collisions and 'not matched' TSUIDs should be recorded. This can create very wide rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5798958fb653f100730bd334766bb03f9ac1b80" translate="yes" xml:space="preserve">
          <source>Whether or not global annotations should be deleted for the range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229c50b46a62cd66fb2d49e3cb01e191f0992fcb" translate="yes" xml:space="preserve">
          <source>Whether or not the FQDN should be returned with statistics requests. The default stats are returned with &lt;code&gt;host=&amp;lt;hostname&amp;gt;&lt;/code&gt; which is not guaranteed to perform a lookup and return the FQDN. Setting this to true will perform a name lookup and return the FQDN if found, otherwise it may return the IP. The stats output should be &lt;code&gt;fqdn=&amp;lt;hostname&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2928ab81f443be9b1b71644ec4608e9c573c27d" translate="yes" xml:space="preserve">
          <source>Whether or not the TSD will allow writing data points. Must be either &lt;code&gt;rw&lt;/code&gt; to allow writing data or &lt;code&gt;ro&lt;/code&gt; to block data point writes. Note that meta data such as UIDs can still be written/modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fee3723508088846b43df6181f7405721462e7" translate="yes" xml:space="preserve">
          <source>Whether or not the data should be converted into deltas before returning. This is useful if the metric is a continuously incrementing counter and you want to view the rate of change between data points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0118d8b3a3584c6e4155bc69a80184d499723c8d" translate="yes" xml:space="preserve">
          <source>Whether or not the query should retrieve global annotations for the requested timespan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe9abad84a3dfa1c653d18579f3e28a939a0b6c" translate="yes" xml:space="preserve">
          <source>Whether or not the query was successfully sent to the client. It may be blocked due to a socket exception or full write buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63bf620a6bac1c701e8a3350b730ddc5e886663e" translate="yes" xml:space="preserve">
          <source>Whether or not the region client is marked as dead due to a connection close event (such as region server going down)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c2e3bc7c9769928d70c818854c84167125cbf9" translate="yes" xml:space="preserve">
          <source>Whether or not the thread was interrupted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d9d9344fc19152ac718aeae419205bb5b5e1a9" translate="yes" xml:space="preserve">
          <source>Whether or not the underlying data is a monotonically increasing counter that may roll over</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd265c20aa0e541f52665acf21a016df5a4f491" translate="yes" xml:space="preserve">
          <source>Whether or not timeseries should be included in the tree if they fail to match one or more rule levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38d1e886b3a0876c0d8d6a3965dfffc564d03f8" translate="yes" xml:space="preserve">
          <source>Whether or not to accept the last written value when parsing data points with duplicate timestamps. When enabled in conjunction with compactions, a compacted column will be written with the latest data points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e16d1303427a7f9243648ff8539ea549453345" translate="yes" xml:space="preserve">
          <source>Whether or not to allow deleting data points from storage during query time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14adbb1ae45de1920f0e6015fd10faff41ef753b" translate="yes" xml:space="preserve">
          <source>Whether or not to allow keep-alive connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c9aa1d9063e688e7f64084ab3dc5f6fb13ee96" translate="yes" xml:space="preserve">
          <source>Whether or not to allow out-of-order values when bulk importing data from a text file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50d232cdc861ea15bab031fed84c857bcc7528e7" translate="yes" xml:space="preserve">
          <source>Whether or not to allow reuse of the bound port within Netty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab348117bd5116da679356c083ee4c1f4563518" translate="yes" xml:space="preserve">
          <source>Whether or not to allow simultaneous duplicate queries from the same host. If disabled, a second query that comes in matching one already running will receive an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3699f371db34e670f733070f507531cce9d0329" translate="yes" xml:space="preserve">
          <source>Whether or not to allow the 2.x HTTP API to function. When disabled, calls to endpoints such as &lt;code&gt;/api/query&lt;/code&gt; or &lt;code&gt;/api/suggest&lt;/code&gt; will return a 404.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861b570620c672f04a4d9a00d6bb19c27bc6f631" translate="yes" xml:space="preserve">
          <source>Whether or not to allow the built-in GUI and legacy HTTP API to function. When disabled, calls to the root endpoint or other such as &lt;code&gt;/logs&lt;/code&gt; or &lt;code&gt;/suggest&lt;/code&gt; will return a 404.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11dc9c2008b7e65e407d0319bfe5be6d94901c90" translate="yes" xml:space="preserve">
          <source>Whether or not to append data to columns when writing data points instead of creating new columns for each value. Avoids the need for compactions after each hour but can use more resources on HBase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9eb649157c779d2f1be59a4b5e9d01fe3bd5610" translate="yes" xml:space="preserve">
          <source>Whether or not to block storing derived aggregations such as &lt;code&gt;AVG&lt;/code&gt; and &lt;code&gt;DEV&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28505634d988f522cda1f2ed1ad967e5bec3a6ef" translate="yes" xml:space="preserve">
          <source>Whether or not to calculate all metrics as rates, i.e. value per second. This is computed before expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529e0d79e9369608c2cef416f47003b954d34d4f" translate="yes" xml:space="preserve">
          <source>Whether or not to continue querying when the query includes a tag value that hasn't been assigned a UID yet and may not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f603ab5b2d072b6ec003ccba408fd0cc5347af12" translate="yes" xml:space="preserve">
          <source>Whether or not to disable TCP buffering before sending data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee79332a44bff878821ca044799116d906e8a21a" translate="yes" xml:space="preserve">
          <source>Whether or not to enable a real time publishing plugin. If true, you must supply a valid &lt;code&gt;tsd.rtpublisher.plugin&lt;/code&gt; class name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3570c0200db9b03cd1b58be33bc3c54c79e56305" translate="yes" xml:space="preserve">
          <source>Whether or not to enable compactions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc6aa451ecce15df3191daa4943a8e35935b25ae" translate="yes" xml:space="preserve">
          <source>Whether or not to enable incoming chunk support for the HTTP RPC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6014803f3002387d0fa5c501a9f8500e82d6b195" translate="yes" xml:space="preserve">
          <source>Whether or not to enable processing new/edited TSMeta through tree rule sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dca489c3a6f58cfe6b3b5440f7c5a016d0939f8" translate="yes" xml:space="preserve">
          <source>Whether or not to enable real-time TSMeta object creation. See &lt;a href=&quot;metadata&quot;&gt;&lt;em&gt;Metadata&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b136963a4e2f95c8ae4a78ea4cad024cd3b68b9d" translate="yes" xml:space="preserve">
          <source>Whether or not to enable real-time UIDMeta object creation. See &lt;a href=&quot;metadata&quot;&gt;&lt;em&gt;Metadata&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cda710fa010befe002b614be668bc760b34b82" translate="yes" xml:space="preserve">
          <source>Whether or not to enable rollup and pre-aggregation storage and writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3770e3dfd0a3a6a122871666b527d79bb420b8d8" translate="yes" xml:space="preserve">
          <source>Whether or not to enable search functionality. If true, you must supply a valid &lt;code&gt;tsd.search.plugin&lt;/code&gt; class name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb52c1230617405dbda44c3f4e4ebdbec08df85" translate="yes" xml:space="preserve">
          <source>Whether or not to enable the FuzzyRowFilter for HBase when making queries using the &lt;code&gt;explicitTags&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ee4c881001a62a42410ef19ec64e29a7744237" translate="yes" xml:space="preserve">
          <source>Whether or not to enable the configured storage exception handler plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353a4b3a7f49373563d3ff5bf56ce4a04ecb88cc" translate="yes" xml:space="preserve">
          <source>Whether or not to enable tracking of TSUIDs by incrementing a counter every time a data point is recorded. See &lt;a href=&quot;metadata&quot;&gt;&lt;em&gt;Metadata&lt;/em&gt;&lt;/a&gt; (Overrides &quot;tsd.core.meta.enable_tsuid_tracking&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d686533fa75c2faa6b9a109cfc87778be32557" translate="yes" xml:space="preserve">
          <source>Whether or not to enable tracking of TSUIDs by storing a &lt;code&gt;1&lt;/code&gt; with the current timestamp every time a data point is recorded. See &lt;a href=&quot;metadata&quot;&gt;&lt;em&gt;Metadata&lt;/em&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef950eef44232380b37e62fb66d6d8bb0332e746" translate="yes" xml:space="preserve">
          <source>Whether or not to group results by the tag values matching this filter. E.g. grouping by host will return one result per host. Not grouping by host would aggregate (using the aggregation function) all results for the metric into one series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d27dd5444bfaafa3253a98d8da289ad0552a83d" translate="yes" xml:space="preserve">
          <source>Whether or not to group the results by each value matched by the filter. By default all values matching the filter will be aggregated into a single series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492ca99e5ba6f54f5b39a49e12336d4e5aaaba4f" translate="yes" xml:space="preserve">
          <source>Whether or not to include the tag keys that were aggregated out of a series in the join key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18618b4ac750344ceb6449519bfc260ad6ae3e02" translate="yes" xml:space="preserve">
          <source>Whether or not to output data point timestamps in milliseconds or seconds. The msResolution flag is recommended. If this flag is not provided and there are multiple data points within a second, those data points will be down sampled using the query's aggregation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3b182cf801a8fa5aa134a6332ab1a9d00b0bb9" translate="yes" xml:space="preserve">
          <source>Whether or not to output the TSUIDs associated with timeseries in the results. If multiple time series were aggregated into one set, multiple TSUIDs will be returned in a sorted manner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcecf625115a1ee0c49c9bbc0a204603ba7d158" translate="yes" xml:space="preserve">
          <source>Whether or not to prefetch the regions for the TSDB tables before starting the network interface. This can improve performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9169a8d667557fe4766713119f1851bdcdc8a4da" translate="yes" xml:space="preserve">
          <source>Whether or not to randomly assign UIDs to new metrics as they are created</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4321164037f2a96b4af57bf981c0594d141a47aa" translate="yes" xml:space="preserve">
          <source>Whether or not to re-write appended data point columns at query time when the columns contain duplicate or out of order data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4d9fd0af4d3d9448cb2213a6b3873c430464c4" translate="yes" xml:space="preserve">
          <source>Whether or not to resolve the TSUIDs of results to their metric and tag names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550637fe92e6d005e19797a19b147482eea521cd" translate="yes" xml:space="preserve">
          <source>Whether or not to return annotations with a query. The default is to return annotations for the requested timespan but this flag can disable the return. This affects both local and global notes and overrides &lt;code&gt;globalAnnotations&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f3b2631904fccb383e285afe53c2c068dd85ff" translate="yes" xml:space="preserve">
          <source>Whether or not to return detailed information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6384effdcffc75246c202722da4fb8f4dfb3c295" translate="yes" xml:space="preserve">
          <source>Whether or not to return errors to the Telnet style socket when writing data via &lt;code&gt;put&lt;/code&gt; or &lt;code&gt;rollup&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6cc40adbfc2d0eac1424e10b7a379bd5863b09" translate="yes" xml:space="preserve">
          <source>Whether or not to return summary information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f423af18230c493ddbf1d8030b9f7671921abe18" translate="yes" xml:space="preserve">
          <source>Whether or not to return the original sub query with the query results. If the request contains many sub queries then this is a good way to determine which results belong to which sub query. Note that in the case of a &lt;code&gt;*&lt;/code&gt; or wildcard query, this can produce a lot of duplicate output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005924bdd11a48040101cd50d8b7adc3aca9363c" translate="yes" xml:space="preserve">
          <source>Whether or not to return the stack trace with an API query response when an exception occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bf2479d4ecac75d7ba89e0a43de8126e26974c" translate="yes" xml:space="preserve">
          <source>Whether or not to show a summary of timings surrounding the query in the results. This creates another object in the map that is unlike the data point objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78acf4fa58b83664fa38920de9b687457808f221" translate="yes" xml:space="preserve">
          <source>Whether or not to tag non-rolled-up and non-pre-aggregated values with the tag key configured in &lt;code&gt;tsd.rollups.agg_tag_key&lt;/code&gt; and value configured in &lt;code&gt;tsd.rollups.raw_agg_tag_value&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ed931f6305a4628c38f4fe5bcdd92cbb48423d" translate="yes" xml:space="preserve">
          <source>Whether or not to use NIO or traditional blocking IO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19ff3245d09adfc362f3921bde6c745660f0751" translate="yes" xml:space="preserve">
          <source>Whether or not to use a Google cloud service account to connect. Set this to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835e633d8d5d5719a99ed362127b9bbdb48a1094" translate="yes" xml:space="preserve">
          <source>Whether or not to use just the tags explicitly defined in the filters when computing the join keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b26d3679c68600295952bb614ef32c75add04a3" translate="yes" xml:space="preserve">
          <source>Whether or not to use the meta data table or the raw data table. The raw table will be much slower.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f77819eb09770b3b432b9ffdf41d70920144be" translate="yes" xml:space="preserve">
          <source>Whether or not to wait for the data to be flushed to storage before returning the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63cb314d8dc49c6f4e71ab4943364b92f4ed5d2" translate="yes" xml:space="preserve">
          <source>While 3.0 is still a ways off, we'll be pushing some of the new features into a new branch of the repo. Some are in progress and other features are planned. If you have any features that you want to see, let us know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd2acce73b6a7906871da3ff3fff4abcc6eb515" translate="yes" xml:space="preserve">
          <source>While OpenTSDB can store data with millisecond resolution, most queries will return the data with second resolution to provide backwards compatibility for existing tools. Unless a down sampling algorithm has been specified with a query, the data will automatically be down sampled to 1 second using the same aggregation function specified in a query. This way, if multiple data points are stored for a given second, they will be aggregated and returned in a normal query correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8278442fcd31dc7e9149a94cebaece41bf0e3c23" translate="yes" xml:space="preserve">
          <source>While TSDB is designed to store original, full resolution data as long as there is space, queries for wide time ranges or over many tag combinations can be quite painful. Such queries can take a long time to complete or, in the worst case, kill TSDs with out-of-memory exceptions. As of OpenTSDB 2.4, a set of new APIs allow for storing and querying lower resolution data to answer such queries much quicker. This page will give you an overview of what rollups and pre-aggregates are, how they work in TSDB and how best to use them. Look in the API's section for specific implementation details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c25f75fbaa41b53012f8c4d7139a4132647d2b2" translate="yes" xml:space="preserve">
          <source>While it's not strictly an error, fsck can be used to compact rows into a single column. Compacting rows saves storage space by merging multiple columns into one. This cuts down on HBase overhead. If a TSD that is configured to compact columns crashes, some rows may be missed and remain in stand-alone data point form. As compaction can consume resources, you can use fsck to compact rows when the load on your cluster is reduced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842e644f281154f62e9911304df57208f08763dc" translate="yes" xml:space="preserve">
          <source>While pre-aggregates certainly help with high-cardinality metrics, users may still want to ask for wide time spans but run into slow queries. Thankfully you can roll up a pre-aggregate in the same way as raw data. Just generate the pre-aggregate, then roll it up using the information above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718d9b6c2ad7a30de4003fe0108a891c8d098cd2" translate="yes" xml:space="preserve">
          <source>While rollups help with wide time span queries, you can still run into query performance issues with small ranges if the metric has high cardinality (i.e. the unique number of time series for the given metric). In the example above, we have 4 web servers. But lets say that we have 10,000 servers. Fetching the sum or average of interface traffic may be fairly slow. If users are often fetching the group by (or some think of it as the spatial aggregate) of large sets like this then it makes sense to store the aggregate and query that instead, fetching &lt;em&gt;much&lt;/em&gt; less data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ddfa18dd5d13220375399a26cf79d75d8f65b2" translate="yes" xml:space="preserve">
          <source>While stream processing is better you still have problems to deal with such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac958bf7e83608770f4fbceffd960a357bec1468" translate="yes" xml:space="preserve">
          <source>While the API does support multiple data points per request, the API will not return until every one has been processed. That means metric and tag names/values must be verified, the value parsed and the data queued for storage. If your put request has a large number of data points, it may take a long time for the API to respond, particularly if OpenTSDB has to assign UIDs to tag names or values. Therefore it is a good idea to limit the maximum number of data points per request; 50 per request is a good starting point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa10e0e7d1bd8c1379c2e05612180c0047d7347" translate="yes" xml:space="preserve">
          <source>While the aggregators and interval are marked as optional above, at least one of the combinations documented below must be satisfied for data to be recorded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47574020ba368affa36deadb89be0ec866451049" translate="yes" xml:space="preserve">
          <source>While the tagging system is flexible, some problems can arise if you don't understand the querying side of OpenTSDB, hence the need for some forethought. Take the example query above: &lt;code&gt;sum:sys.cpu.user{host=webserver01}&lt;/code&gt;. We recorded 64 unique time series for &lt;code&gt;webserver01&lt;/code&gt;, one time series for each of the CPU cores. When we issued that query, all of the time series for metric &lt;code&gt;sys.cpu.user&lt;/code&gt; with the tag &lt;code&gt;host=webserver01&lt;/code&gt; were retrieved, averaged, and returned as one series of numbers. Let's say the resulting average was &lt;code&gt;50&lt;/code&gt; for timestamp &lt;code&gt;1356998400&lt;/code&gt;. Now we were migrating from another system to OpenTSDB and had a process that pre-aggregated all 64 cores so that we could quickly get the average value and simply wrote a new time series &lt;code&gt;sys.cpu.user host=webserver01&lt;/code&gt;. If we run the same query, we'll get a value of &lt;code&gt;100&lt;/code&gt; at &lt;code&gt;1356998400&lt;/code&gt;. What happened? OpenTSDB aggregated all 64 time series &lt;em&gt;and&lt;/em&gt; the pre-aggregated time series to get to that 100. In storage, we would have something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d249938ceaef496a889ce10e60cbd877db410ee3" translate="yes" xml:space="preserve">
          <source>While this TSUID format may be long and ugly, particularly with all of the 0s for early UIDs, there are a few reasons why this is useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87a2f2ff276e3bf5b63a6eafc384f15bc2def2b" translate="yes" xml:space="preserve">
          <source>While you can start a 2.3 TSD with the same command line options as a 1.0 TSD, we highly recommend that you create a configuration file based on the config included at &lt;code&gt;./src/opentsdb.conf&lt;/code&gt;. Or if you install from a package, you'll want to edit the included default config. The config file includes many more options than are accessible via command line and the file is shared with CLI tools. See &lt;a href=&quot;user_guide/configuration&quot;&gt;&lt;em&gt;Configuration&lt;/em&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc94a04e3a2538b6d0a9fdef7b1ad136c720128" translate="yes" xml:space="preserve">
          <source>Why UIDs?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea0e9037888b4eee31f78346d3a6d6c59b28ece" translate="yes" xml:space="preserve">
          <source>Why do this instead of creating another metric? Well, what if sometimes you care about plotting total HTTP hits and sometimes you care about breaking out static vs. dynamic hits? With a tag, it's easy. With this new tag, you'll see a webserver tag appear in the UI when plotting this metric. You can leave it blank and it will aggregate up both values into one plot (according to your Aggregator setting) and you can see the total hits, or you can do webserver=* to break out how much each of your static and dynamic instances are collectively doing across your web servers. You can even go deeper and specify webserver=* and host=* to see the full breakdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9724f27e4f1a676a8791067133fc6fbe9ea83e1" translate="yes" xml:space="preserve">
          <source>Wildcard filter, effectively makes sure the tag key is present in the series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2b074f3ab603ca7204f27b34e36b238adb0d16" translate="yes" xml:space="preserve">
          <source>With 2.2 you can randomly assign UIDs to metrics for better region server write distribution. Because metric UIDs are located at the start of the row key, if a new set of busy metric are created, all writes for those metric will be on the same server until the region splits. With random UID generation enabled, the new metrics will be distributed across the key space and likely to wind up in different regions on different servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bda2e277078ccbdb4f186d03fd10e1154d8c96a" translate="yes" xml:space="preserve">
          <source>With OpenTSDB 2.1 you can enable last-write-wins by setting the &lt;code&gt;tsd.storage.fix_duplicates&lt;/code&gt; configuration value to &lt;code&gt;true&lt;/code&gt;. With this flag enabled, at query time, the most recent value recorded will be returned instead of throwing an exception. A warning will also be written to the log file noting a duplicate was found. If compaction is also enabled, then the original compacted value will be overwritten with the latest value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cca1944fbd7459f4bb7d581803389088c5864f" translate="yes" xml:space="preserve">
          <source>With OpenTSDB 2.1 you may supply a metric style query and, if UIDs exist for the given metric and tags, a new TS meta object will be stored. Data may be supplied via POST for the fields above as per a normal request, however the &lt;code&gt;tsuid&lt;/code&gt; field must be left empty. Additionally two query string parameters must be supplied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df200950f2e0bb750dcfe39498dc2c46bd4a6eab" translate="yes" xml:space="preserve">
          <source>With a forward/reverse miss-match, it is possible that a UID was assigned to multiple names for the same type. If this occurs, then data for two different names has been written to the same time series and that data is effectively corrupt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f813fc6057263ad6f9d8235350c9559a5978eee" translate="yes" xml:space="preserve">
          <source>With compactions enabled, it is possible (though unlikely) that a data point is written while a row is being compacted. In this case, the compacted column will have a &lt;em&gt;later&lt;/em&gt; timestamp than a data point written during the compaction. Therefore the default result of &lt;code&gt;--resolve-duplicates&lt;/code&gt; will keep the stand-alone data point or, if last writes win, then the compacted value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e318cf17acebae19ff4970ab4d4e46dc0314d224" translate="yes" xml:space="preserve">
          <source>With rollups enabled, if you plan to use pre-aggregates, you may want to help differentiate raw data from pre-aggregates by having TSDB automatically inject &lt;code&gt;_aggregate=RAW&lt;/code&gt;. Just configure the &lt;code&gt;tsd.rollups.tag_raw&lt;/code&gt; setting to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90eedcfc697b3778decfae88e385efd2b06b8863" translate="yes" xml:space="preserve">
          <source>With salting enabled (as of OpenTSDB 2.2) the first byte (or bytes) are a hashed salt ID to better distribute data across multiple regions and/or region servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b078764a7eede9f0bcb50cb7e86a61a6b348f727" translate="yes" xml:space="preserve">
          <source>With the config file written, you can start a tsd with the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930d8603becb44c0222ac71734f3e58560577628" translate="yes" xml:space="preserve">
          <source>With the intersection operator, the expression will effectively add &quot;a.web01 + b.web01&quot; and &quot;a.web02 + b.web02&quot; but will skip emitting anything for &quot;web03&quot;. Be aware of this if you see fewer outputs that you expected or you see errors about no series available after intersection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebd0430bc98cecc73400fb01b504ac62bb5b0a6" translate="yes" xml:space="preserve">
          <source>With the union operator the expression will add the &lt;code&gt;web01&lt;/code&gt; and &lt;code&gt;web02&lt;/code&gt; series but for metric &quot;b&quot;, it will substitute the metric's fill policy value for the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8346b62154dfe300e2d43246c28cafd072a8a2" translate="yes" xml:space="preserve">
          <source>With version 2.2 a downsampling query can emit a &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; when a downsample bucket is missing a value for all of the series involved. Because OpenTSDB does not allow for storing literal NaNs at this time, nor does it impose specific intervals on storage, this can be used to mimic systems that do such as RRDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038a325537f7eb1e3aeda1b73f395c496d495cc4" translate="yes" xml:space="preserve">
          <source>With version 2.2 of OpenTSDB a number of details are now available around queries as we focus on improving flexibility and performance. Query details include who made the request (via headers and socket), what the response was (HTTP status codes and/or exceptions) and timing around the various processes the TSD takes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95eddf6ecb7d244940d2690e5174e56dafc80a6" translate="yes" xml:space="preserve">
          <source>With version 2.2 you can enable or disable grouping per tag filter. Additional filters are also available including wildcards and regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de545dec559f7f886f3804870f7b22fa9755080" translate="yes" xml:space="preserve">
          <source>With version 2.2 you can specify a fill policy when downsampling to substitute values for use in cross-series aggregations when data points are &quot;missing&quot;. Because OpenTSDB does not impose constraints on time alignment or when values are supposed to exist, such constraints must be specified at query time. At serialization time, if all series are missing values for an expected timestamp, nothing is emitted. For example, if a series is writing data every minute from T0 to T4, but for some reason the source fails to write data at T3, only 4 values will be serialized when the user may expect 5. With fill policies you can now choose what value is emitted for T3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d32239ddee6f91af4ef59471d1f00eb8a41b814" translate="yes" xml:space="preserve">
          <source>With version 2.2, a checkbox to the right of each pair of check boxes is used to determine if the results should be grouped by the tag filter (checked) or aggregated (unchecked). The boxes are checked by default to exhibit the behavior of TSD prior to 2.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574eb9f5dadbbac36625546f4e776021be173d1b" translate="yes" xml:space="preserve">
          <source>Within &lt;code&gt;services&lt;/code&gt; create a file with the canonical class name of the abstract plugin class you are implementing. E.g. if you implement &lt;code&gt;net.opentsdb.search.SearchPlugin&lt;/code&gt;, use that for the name of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d9325878900bebf331a9be22ca1bf35f8a4cb8" translate="yes" xml:space="preserve">
          <source>Within the &quot;tags&quot; field you can have one or more filter. The list of filters can be found via the &lt;a href=&quot;../config/filters&quot;&gt;&lt;em&gt;/api/config/filters&lt;/em&gt;&lt;/a&gt; endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdfa7d0b914f4b237c569c0bea2f7b2ac19edab" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;META-INF&lt;/code&gt; directory, create a file named &lt;code&gt;MANIFEST.MF&lt;/code&gt;. Again some IDEs can generate this automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76fcb6ebd41de2561360d3da0d7d1ad67ee2b3a" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;id&lt;/code&gt; column family is a row with a single byte key of &lt;code&gt;\x00&lt;/code&gt;. This is the UID row that is incremented for the proper column type (metrics, tagk or tagv) when a new UID is assigned. The column values are 8 byte signed integers and reflect the maximum UID assigned for each type. On assignment, OpenTSDB calls HBase's atomic increment command on the proper column to fetch a new UID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db6f51cd372a9779928412e73d84ae9f1d0c599" translate="yes" xml:space="preserve">
          <source>Without going into too much detail on how collectors send data to the TSD , you write a collector that periodically sends the current value of these datapoints for each server to the TSD. So the TSD can aggregate the data from multiple hosts, you tag each value with a &quot;host&quot; tag. So, if you have web servers A, B, C, etc, they each periodically send something like this to the TSD:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237f79e47a81786e062a5ff7dda7819ed3b03979" translate="yes" xml:space="preserve">
          <source>Wraps the response in a JavaScript function name passed to the parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61199b6bf5d6d15ab4f6651eb4f149e3437d3584" translate="yes" xml:space="preserve">
          <source>Write Filters - Block or allow time series or UID assignments based on plugins or whitelists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869cfa07031a8520d7782bfbf436635d232db0a6" translate="yes" xml:space="preserve">
          <source>Write Performance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e632869f49afb8aba3986c578bc41023c0edd69" translate="yes" xml:space="preserve">
          <source>Writing Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f02859565ff731f647fdc8f9ed8924ec5f29579" translate="yes" xml:space="preserve">
          <source>Writing data points in OpenTSDB is generally idempotent within an hour of the original write. This means you can write the value &lt;code&gt;42&lt;/code&gt; at timestamp &lt;code&gt;1356998400&lt;/code&gt; and then write &lt;code&gt;42&lt;/code&gt; again for the same time and nothing bad will happen. However if you have compactions enabled to reduce storage consumption and write the same data point after the row of data has been compacted, an exception may be returned when you query over that row. If you attempt to write two different values with the same timestamp, a duplicate data point exception may be thrown during query time. This is due to a difference in encoding integers on 1, 2, 4 or 8 bytes and floating point numbers. If the first value was an integer and the second a floating point, the duplicate error will always be thrown. However if both values were floats or they were both integers that could be encoded on the same length, then the original value may be overwritten if a compaction has not occurred on the row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c032adc1ff629c9b66f22749ad667e6beadf144b" translate="yes" xml:space="preserve">
          <source>X</source>
          <target state="translated">X</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="2a9269c1bb899a9c9fd07cd34ecc3fab5ac20773" translate="yes" xml:space="preserve">
          <source>You can also aggregate multiple TSUIDs in the same query, provided they share the same metric. If you attempt to aggregate multiple metrics, the API will issue an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7793c86abbf16c608719149f90541bfdfa5bf8" translate="yes" xml:space="preserve">
          <source>You can also zoom in on a time range by clicking and dragging a red box across a section of the graph. Release and the query will be updated with the new time span. Note that the browser cursor doesn't change when you're over the graph, it will still remain the default arrow your browser or OS provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33be7848021f6226fcebc01d2e3a6bde8b921961" translate="yes" xml:space="preserve">
          <source>You can copy and paste the query into a POST client to execute and find out what data was returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191d8640c33bf1180997cdddc16068c5b686a8dd" translate="yes" xml:space="preserve">
          <source>You can generate a Debian package by calling &lt;code&gt;sh build.sh debian&lt;/code&gt;. The package will be located at &lt;code&gt;./build/opentsdb-2.x.x/opentsdb-2.x.x_all.deb&lt;/code&gt;. Then simply distribute the package and install it as you regularly would. For example &lt;code&gt;dpkg -i opentsdb-2.0.0_all.deb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5814ba67dfcc6e44a26311a01e14487c47c9db2b" translate="yes" xml:space="preserve">
          <source>You can have more than one implementation of the same abstract class in one JAR and in this file. NOTE: If you have widely different implementations, start a different project and JAR. E.g. if you implement a search plugin for ElasticSearch and another for Solr, put Solr in a different project. However if you have two implementations that are very similar but slightly different, you can create one project. For example you could write an ElasticSearch plugin that uses HTTP for a protocol and another that uses Thrift. In that case, you could have a file like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61be89b3adba257fe58dc648c322b6c14b4a8da9" translate="yes" xml:space="preserve">
          <source>You can put comments in the service implementation file. The comment character is the &lt;code&gt;#&lt;/code&gt;, just like a Java properties file. E.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833a39b790f27c21f775475776dc615b93fc0f1b" translate="yes" xml:space="preserve">
          <source>You can supply a single data point in a request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce453fdc225642de974d8f8c0bc3e8b1447a6126" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;--config&lt;/code&gt; command line argument to specify the full path to a configuration file. Otherwise if not specified, OpenTSDB and some of the command-line tools will attempt to search for a valid configuration file in the following locations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c57b11eea5e4730f4f4c23765201429fc61deee" translate="yes" xml:space="preserve">
          <source>You do not have to upgrade all of your TSDs to 2.3 at the same time. Some users upgrade their read-only TSDs first to gain access to the full HTTP API and test the new features. Later on you can upgrade the write-only TSDs at leisure. You can also perform a rolling upgrade without issues. Simply stop traffic to one TSD, upgrade it, restore traffic, and continue on until you have upgraded all of your TSDs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef56348bf8327f3e140ddb8c003ee282b7d9138" translate="yes" xml:space="preserve">
          <source>You don't have to embed all of this code in every collector you write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c470865b18ec646b328f4b7123cdef9fd3a890c3" translate="yes" xml:space="preserve">
          <source>You may also edit meta data associated with timeseries or individual UID objects via the UID endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f83a186df4f6494a3f12f267ca7b646459124b7" translate="yes" xml:space="preserve">
          <source>You may want to jump right in and start throwing data into your TSD, but to really take advantage of OpenTSDB's power and flexibility, you may want to pause and think about your naming schema. After you've done that, you can proceed to pushing data over the Telnet or HTTP APIs, or use an existing tool with OpenTSDB support such as 'tcollector'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46af65e160401371668ca6a0a38cbc7af72f4b13" translate="yes" xml:space="preserve">
          <source>You may want to read up on how OpenTSDB stores timeseries data here: &lt;a href=&quot;../backends/index&quot;&gt;&lt;em&gt;Storage&lt;/em&gt;&lt;/a&gt;. Otherwise, remember that each row in storage has a unique key formatted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f8e5dd79b4228591ebf914c9d06415143fed98" translate="yes" xml:space="preserve">
          <source>You might want to adjust JVM parameters, for instance to turn on GC activity logging or to set the size of various memory regions. In order to do so, simply set the variable JVMARGS in &lt;code&gt;./tsdb.local&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28589fb392b8188752a92c1923552020d4451c9" translate="yes" xml:space="preserve">
          <source>You need to clone tcollector from GitHub:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61823390ea02b1530bcca7967069bd8a6277470" translate="yes" xml:space="preserve">
          <source>You should always test a new plugin in a development or QA environment before enabling them in production. Plugins may adversely affect write or read performance so be sure to do some load testing to avoid taking down your TSDs and losing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa722f496f60c073a9035295d136673bca221f8" translate="yes" xml:space="preserve">
          <source>You still have the late/historical data issue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c3ada727198ca05a3eb567b57355809f064c18" translate="yes" xml:space="preserve">
          <source>You will want to make sure you set the status to PENDING or some other non-ready state in your service discovery system when this is called. TSDB has not been initialized yet at this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26553997c4ead536b7bf0c4987caca36fc51a4a2" translate="yes" xml:space="preserve">
          <source>You'll likely spend a lot of time in this area since there are a number of options to play with. You'll likely want to start by choosing one or more metrics and tags to graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa167b95720a348339af0af51b8b872ecb6dc13" translate="yes" xml:space="preserve">
          <source>Your dev directory should now have a &lt;code&gt;./src&lt;/code&gt; directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41391104648519ac2d9b476302196de092ae24d9" translate="yes" xml:space="preserve">
          <source>Your first datapoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83191c972e70698326927c9531da95d6089d765" translate="yes" xml:space="preserve">
          <source>Your first plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0c76d0c7d81a9c8fc26ff8abe58ec0cf006e68" translate="yes" xml:space="preserve">
          <source>Zero (&lt;code&gt;zero&lt;/code&gt;) - Substitutes a zero when a timestamp is missing. The zero value will be incorporated in aggregated results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c167276bd45514c8b739ca546a838ff44f0cd3b" translate="yes" xml:space="preserve">
          <source>Zero if missing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98116df9b9f5748e301fdccd687e8f2e85084726" translate="yes" xml:space="preserve">
          <source>ZimSum</source>
          <target state="translated">ZimSum</target>
        </trans-unit>
        <trans-unit id="cdcd5c9a3a475f2298b5ee3f4258f8207ba10879" translate="yes" xml:space="preserve">
          <source>[ ]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9257f8fd31ea852baf734ef06d37348bf6e8cb2" translate="yes" xml:space="preserve">
          <source>\.</source>
          <target state="translated">\.</target>
        </trans-unit>
        <trans-unit id="d203bdcf492d3ee0d583a405ec9f3e0fee8888d3" translate="yes" xml:space="preserve">
          <source>\\.</source>
          <target state="translated">\\.</target>
        </trans-unit>
        <trans-unit id="d96542ec7f0676c9533df80d8687eb19c68d93f1" translate="yes" xml:space="preserve">
          <source>^.*\.([a-zA-Z]{3,4})[0-9]{0,1}\..*\..*$</source>
          <target state="translated">^.*\.([a-zA-Z]{3,4})[0-9]{0,1}\..*\..*$</target>
        </trans-unit>
        <trans-unit id="44007aca9b1fe559f5a621c9ab2a5cafce3ff6b7" translate="yes" xml:space="preserve">
          <source>_aggregate</source>
          <target state="translated">_aggregate</target>
        </trans-unit>
        <trans-unit id="fa9044d8655992432f27d07c523bf8678a5e5826" translate="yes" xml:space="preserve">
          <source>_aggregate=COUNT</source>
          <target state="translated">_aggregate=COUNT</target>
        </trans-unit>
        <trans-unit id="e2c8bac773a310bfb50e7c798f61c5d4d17d55f1" translate="yes" xml:space="preserve">
          <source>_aggregate=SUM</source>
          <target state="translated">_aggregate=SUM</target>
        </trans-unit>
        <trans-unit id="f33afba6cd2526e029d8789dd92e3374ebbe8d7b" translate="yes" xml:space="preserve">
          <source>a + b / 1024</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbc2f496199bc34430af8b5f58b0f2ab4ef6bcd" translate="yes" xml:space="preserve">
          <source>absolute(&amp;lt;metric&amp;gt;)</source>
          <target state="translated">absolute(&amp;lt;metric&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="d9a3787d14a071684ac0a5d63ebf75a8a57c3e95" translate="yes" xml:space="preserve">
          <source>accumulation.snow</source>
          <target state="translated">accumulation.snow</target>
        </trans-unit>
        <trans-unit id="2bce561952deb300d9ad49d8a1a12e14e7fee32b" translate="yes" xml:space="preserve">
          <source>additional queries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e796251bd817f3f52264d2d2055bc3b6f80261" translate="yes" xml:space="preserve">
          <source>aggregatedTags</source>
          <target state="translated">aggregatedTags</target>
        </trans-unit>
        <trans-unit id="8af3cd7b7305ba8436016127f5357e9bc38c5afc" translate="yes" xml:space="preserve">
          <source>aggregationTime</source>
          <target state="translated">aggregationTime</target>
        </trans-unit>
        <trans-unit id="e23534fcc52d69727f1ff8041e4f37a323457b0a" translate="yes" xml:space="preserve">
          <source>aggregator</source>
          <target state="translated">aggregator</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="0a14c6830bde2e5a07c0b9cf963faef9759a1142" translate="yes" xml:space="preserve">
          <source>alpn-boot</source>
          <target state="translated">alpn-boot</target>
        </trans-unit>
        <trans-unit id="02a488a3bef14bed8b1c9d90a682184a103c7cb6" translate="yes" xml:space="preserve">
          <source>and edit 'tcollector/startstop' script to set following variable: &lt;code&gt;TSD_HOST=dns.name.of.tsd&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfbedeaad5d654a234d901eab80b3ade99ae988" translate="yes" xml:space="preserve">
          <source>and remove the comments so it appears as &lt;code&gt;&amp;lt;appender-ref ref=&quot;FILE&quot;/&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc61586d1845fc597104237063a69d8b179b8173" translate="yes" xml:space="preserve">
          <source>and set the &lt;code&gt;level&lt;/code&gt; to &lt;code&gt;INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e97da103dbeb4d7fd95f61361ad321d9d2e9d58" translate="yes" xml:space="preserve">
          <source>and simply craft a query &lt;code&gt;start=1356998400&amp;amp;m=sum:sys.cpu.user&lt;/code&gt;, we will get a value of &lt;code&gt;8&lt;/code&gt; at &lt;code&gt;1356998400&lt;/code&gt; that incorporates all 4 time series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516d70777b5ffab32d73d264205e523acd04b40b" translate="yes" xml:space="preserve">
          <source>annotations</source>
          <target state="translated">annotations</target>
        </trans-unit>
        <trans-unit id="9715442fe61cdf241769790be1cc2289815cb06e" translate="yes" xml:space="preserve">
          <source>api/query</source>
          <target state="translated">api/query</target>
        </trans-unit>
        <trans-unit id="7d1043473d55bfa90e8530d35801d4e381bc69f0" translate="yes" xml:space="preserve">
          <source>app</source>
          <target state="translated">app</target>
        </trans-unit>
        <trans-unit id="dd9dcb17eb80061a479a56fb4dd120e2398ffc40" translate="yes" xml:space="preserve">
          <source>app.connections</source>
          <target state="translated">app.connections</target>
        </trans-unit>
        <trans-unit id="a277673e9a9147ec07cbb026c5f78d9610de8d0d" translate="yes" xml:space="preserve">
          <source>app.errors</source>
          <target state="translated">app.errors</target>
        </trans-unit>
        <trans-unit id="fcc9016d1aa6a646348df69e14d31e955d51da60" translate="yes" xml:space="preserve">
          <source>arrays</source>
          <target state="translated">arrays</target>
        </trans-unit>
        <trans-unit id="5148d094f461f44844d3dc310cdd8aa818bd66e0" translate="yes" xml:space="preserve">
          <source>arrays=true</source>
          <target state="translated">arrays=true</target>
        </trans-unit>
        <trans-unit id="9009b730f26e909d049a4a0c3612e3c61160f37f" translate="yes" xml:space="preserve">
          <source>assign</source>
          <target state="translated">assign</target>
        </trans-unit>
        <trans-unit id="02579e3ca74c551aba701841597c5217ae3827af" translate="yes" xml:space="preserve">
          <source>asynccassandra.port</source>
          <target state="translated">asynccassandra.port</target>
        </trans-unit>
        <trans-unit id="b3fe693b69b34aecc891ab18387793e60b924e9c" translate="yes" xml:space="preserve">
          <source>asynccassandra.seeds</source>
          <target state="translated">asynccassandra.seeds</target>
        </trans-unit>
        <trans-unit id="cd6bf061d2e573b8ffa3f7e8ab2a923895b3703d" translate="yes" xml:space="preserve">
          <source>asynccassandra.seeds=127.0.0.1:9160</source>
          <target state="translated">asynccassandra.seeds=127.0.0.1:9160</target>
        </trans-unit>
        <trans-unit id="97e77871b5fcc4941bebceb4338c97c1fd149f8c" translate="yes" xml:space="preserve">
          <source>avg</source>
          <target state="translated">avg</target>
        </trans-unit>
        <trans-unit id="a2022eac1538a124bb766c22eb9a8194545014b3" translate="yes" xml:space="preserve">
          <source>backScan</source>
          <target state="translated">backScan</target>
        </trans-unit>
        <trans-unit id="aeb1356eb9b58d2e1bddca59f80648a387dc5281" translate="yes" xml:space="preserve">
          <source>back_scan</source>
          <target state="translated">back_scan</target>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="10d735e581f1e2505cd69675691925490e447c44" translate="yes" xml:space="preserve">
          <source>branch</source>
          <target state="translated">branch</target>
        </trans-unit>
        <trans-unit id="b1720429f630ba3df16dc2e8e9d85f8b545ae2e4" translate="yes" xml:space="preserve">
          <source>branchId</source>
          <target state="translated">branchId</target>
        </trans-unit>
        <trans-unit id="52a9ce4a0d3c21f1c0c5dc576930fbb59ad74018" translate="yes" xml:space="preserve">
          <source>branches</source>
          <target state="translated">branches</target>
        </trans-unit>
        <trans-unit id="f887e9a160c52393e3db17bec26927e61e0b8211" translate="yes" xml:space="preserve">
          <source>build/tsdb tsd --config=&amp;lt;path&amp;gt;/opentsdb.conf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5cb4600e426f15f31b3528e927fc2ade8e3a111" translate="yes" xml:space="preserve">
          <source>cache=disk</source>
          <target state="translated">cache=disk</target>
        </trans-unit>
        <trans-unit id="0d8396810c147522298cd72fd5c134a55f486c4e" translate="yes" xml:space="preserve">
          <source>cache=miss</source>
          <target state="translated">cache=miss</target>
        </trans-unit>
        <trans-unit id="62395a980f92ab81a874944ebaa050217e60575d" translate="yes" xml:space="preserve">
          <source>cassandra-cli</source>
          <target state="translated">cassandra-cli</target>
        </trans-unit>
        <trans-unit id="2942224b5018940d48da74f8f2199d27881cc139" translate="yes" xml:space="preserve">
          <source>clean_cache.sh</source>
          <target state="translated">clean_cache.sh</target>
        </trans-unit>
        <trans-unit id="d2a04d71301a8915217dd5faf81d12cffd6cd958" translate="yes" xml:space="preserve">
          <source>client</source>
          <target state="translated">client</target>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="translated">code</target>
        </trans-unit>
        <trans-unit id="0d55cc664ee8208d4ce6f4beb81c49ceb6477476" translate="yes" xml:space="preserve">
          <source>colo=lga</source>
          <target state="translated">colo=lga</target>
        </trans-unit>
        <trans-unit id="ac91d4f2b77a51b67ee115f2d8cf21eca9794cf0" translate="yes" xml:space="preserve">
          <source>colo=sjc</source>
          <target state="translated">colo=sjc</target>
        </trans-unit>
        <trans-unit id="ddac9447659b6c8efde284788aa37855deb5de5d" translate="yes" xml:space="preserve">
          <source>com.google.cloud.bigtable.hbase1_0.BigtableConnection</source>
          <target state="translated">com.google.cloud.bigtable.hbase1_0.BigtableConnection</target>
        </trans-unit>
        <trans-unit id="e9bb6fb51756982a94d0905494becbcc7d0ec273" translate="yes" xml:space="preserve">
          <source>commonTags</source>
          <target state="translated">commonTags</target>
        </trans-unit>
        <trans-unit id="db1a055c47b46c9b5bfa651555bbdcf5545c7925" translate="yes" xml:space="preserve">
          <source>compactionTime</source>
          <target state="translated">compactionTime</target>
        </trans-unit>
        <trans-unit id="2b34caee3c0875057e11d789b213e242683248f5" translate="yes" xml:space="preserve">
          <source>configuration property. Simply list the class name of any RPC plugins you wish to load, separated by a comma if you have more than one. RPC plugins are only initialized when running a TSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1926f1c722b8ae2344dc2f421f855357562e7a" translate="yes" xml:space="preserve">
          <source>connections (tsuid=010101)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="458796e4e963a163322319ba62d683315a930a09" translate="yes" xml:space="preserve">
          <source>counter</source>
          <target state="translated">counter</target>
        </trans-unit>
        <trans-unit id="9f36c5eabbfb13f34b69137d62c20c4bbd172631" translate="yes" xml:space="preserve">
          <source>counterMax</source>
          <target state="translated">counterMax</target>
        </trans-unit>
        <trans-unit id="ca49ca4bb6732ef61577364cb33b115854e88f06" translate="yes" xml:space="preserve">
          <source>cpu</source>
          <target state="translated">cpu</target>
        </trans-unit>
        <trans-unit id="202fb7d88c9021d0cd6d53e27c0ad55b8e53da8f" translate="yes" xml:space="preserve">
          <source>cpu.system</source>
          <target state="translated">cpu.system</target>
        </trans-unit>
        <trans-unit id="b933d083a588f4a5d9d6fad0dbbc70d33e6b4ab6" translate="yes" xml:space="preserve">
          <source>cpu.user</source>
          <target state="translated">cpu.user</target>
        </trans-unit>
        <trans-unit id="368a540ac36639b82a203e852076b8a0f93441a5" translate="yes" xml:space="preserve">
          <source>cpubusy</source>
          <target state="translated">cpubusy</target>
        </trans-unit>
        <trans-unit id="9c58a9ea87c0fad123bdb1584a59edf262bf3b0a" translate="yes" xml:space="preserve">
          <source>cpunice</source>
          <target state="translated">cpunice</target>
        </trans-unit>
        <trans-unit id="9b7c68a918b17eb053809b198d7c9abfc142f30a" translate="yes" xml:space="preserve">
          <source>create</source>
          <target state="translated">create</target>
        </trans-unit>
        <trans-unit id="21c50805b553b7a40e48394a5d77d442587ddee2" translate="yes" xml:space="preserve">
          <source>created</source>
          <target state="translated">created</target>
        </trans-unit>
        <trans-unit id="f9ac14b63a75faf57d8db6f919bfabb2502d273c" translate="yes" xml:space="preserve">
          <source>custom</source>
          <target state="translated">custom</target>
        </trans-unit>
        <trans-unit id="f670fbad453981e3c4c72aca0f91ab0282001bd6" translate="yes" xml:space="preserve">
          <source>customField</source>
          <target state="translated">customField</target>
        </trans-unit>
        <trans-unit id="83c4bf215b4492f7696aeba9447f33ae0149b63d" translate="yes" xml:space="preserve">
          <source>custom_field</source>
          <target state="translated">custom_field</target>
        </trans-unit>
        <trans-unit id="57f1e58d6f9bcae6d4976bfc8b1f60d6b22672ae" translate="yes" xml:space="preserve">
          <source>d - Days (24 hours)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63194b027e7a2143aa423aec5fdd002760ba72a" translate="yes" xml:space="preserve">
          <source>dal</source>
          <target state="translated">dal</target>
        </trans-unit>
        <trans-unit id="edb7da5c9962dd5bb5faa1890386c1e1d4392661" translate="yes" xml:space="preserve">
          <source>dataType</source>
          <target state="translated">dataType</target>
        </trans-unit>
        <trans-unit id="5411ba018172ec73e64e74bf5b04f39c227da5f0" translate="yes" xml:space="preserve">
          <source>data_type</source>
          <target state="translated">data_type</target>
        </trans-unit>
        <trans-unit id="0086257c8d753a2c5d8fec60d0c53a8de180b779" translate="yes" xml:space="preserve">
          <source>datapoints</source>
          <target state="translated">datapoints</target>
        </trans-unit>
        <trans-unit id="13211ef68928d927b98c56e3497bfbc0a93a377a" translate="yes" xml:space="preserve">
          <source>dc</source>
          <target state="translated">dc</target>
        </trans-unit>
        <trans-unit id="ba370350516e33319964d063bc7f71f51bc3bb14" translate="yes" xml:space="preserve">
          <source>dc=dal host=web01</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a973aba8ea311707d67e45899ddfbf17e77d405" translate="yes" xml:space="preserve">
          <source>dc=dal host=web02</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8157efa0b67d1e4fad31b09b5bff2ca59a3d6244" translate="yes" xml:space="preserve">
          <source>dc=dal host=web03</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e5897727634f1137a19e3f16df0a64b00c9c57" translate="yes" xml:space="preserve">
          <source>dc=dal, host=web01.dal.mysite.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720df9e4d09f33a6012636e9a2571534c5e5f47c" translate="yes" xml:space="preserve">
          <source>dc=dal, host=web02.dal.mysite.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115b1ab9983c4fa088a8dacdad822f874d861a85" translate="yes" xml:space="preserve">
          <source>dc=dal, host=web03.dal.mysite.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8481228a03f36ff2de1151c449fef29951faccfb" translate="yes" xml:space="preserve">
          <source>dc=lax host=web01</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4851723087a1d53f54e65f6e9b73141f6e62ac" translate="yes" xml:space="preserve">
          <source>dc=lax host=web02</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1627974efcbef652c6c588dd9d0b92ca603feb77" translate="yes" xml:space="preserve">
          <source>dc=lax, host=web01.lax.mysite.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fbf8ecbcf3726c8fcd8fe863c7254fea9db2f5" translate="yes" xml:space="preserve">
          <source>dc=lax, host=web02.lax.mysite.com</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb965dd8c804a3a2833ac61fe1d1f6b1960735a" translate="yes" xml:space="preserve">
          <source>dead</source>
          <target state="translated">dead</target>
        </trans-unit>
        <trans-unit id="f3f1dd33eb2a8b380b64a830e5fd90eab77d9ff3" translate="yes" xml:space="preserve">
          <source>definition</source>
          <target state="translated">definition</target>
        </trans-unit>
        <trans-unit id="9485989ff514b5106b7738850fd73c23e8c1e3f7" translate="yes" xml:space="preserve">
          <source>delete</source>
          <target state="translated">delete</target>
        </trans-unit>
        <trans-unit id="82afdd3f25d27bb747d796b038ebdfa395b92077" translate="yes" xml:space="preserve">
          <source>delete_unknown - Removes any columns in the UID table that do not belong to OpenTSDB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82a8e8dd311d353948062cb1a0b67c9e9850be1" translate="yes" xml:space="preserve">
          <source>depth</source>
          <target state="translated">depth</target>
        </trans-unit>
        <trans-unit id="cb329146a0dd0d566b0628744d67936558741ffa" translate="yes" xml:space="preserve">
          <source>description</source>
          <target state="translated">description</target>
        </trans-unit>
        <trans-unit id="e9711657b066fc8697f6f46ac6be9ce246e43aac" translate="yes" xml:space="preserve">
          <source>details</source>
          <target state="translated">details</target>
        </trans-unit>
        <trans-unit id="34c6fceca75e456f25e7e99531e2425c6c1de443" translate="yes" xml:space="preserve">
          <source>dev</source>
          <target state="translated">dev</target>
        </trans-unit>
        <trans-unit id="85484524bc3731825005a49c09b3177ea61afd65" translate="yes" xml:space="preserve">
          <source>diediedie</source>
          <target state="translated">diediedie</target>
        </trans-unit>
        <trans-unit id="4479a6ed88bff418f5d3e45959fe62a5845e8f9e" translate="yes" xml:space="preserve">
          <source>diffSeries(&amp;lt;metric&amp;gt;[,&amp;lt;metricN&amp;gt;])</source>
          <target state="translated">diffSeries(&amp;lt;metric&amp;gt;[,&amp;lt;metricN&amp;gt;])</target>
        </trans-unit>
        <trans-unit id="8d392f56d616a516ceabb82ed8906418bce4647d" translate="yes" xml:space="preserve">
          <source>directory</source>
          <target state="translated">directory</target>
        </trans-unit>
        <trans-unit id="47a6d8cf98dc893dfcfcdc3e76bfc495d739ace8" translate="yes" xml:space="preserve">
          <source>disk.*write</source>
          <target state="translated">disk.*write</target>
        </trans-unit>
        <trans-unit id="cd44da5a3afc7d2e396569dd7e065f22f3f30b5c" translate="yes" xml:space="preserve">
          <source>displayFormat</source>
          <target state="translated">displayFormat</target>
        </trans-unit>
        <trans-unit id="226e8ab97c399ef7e520a8c77ae9ce3fd60b449f" translate="yes" xml:space="preserve">
          <source>displayName</source>
          <target state="translated">displayName</target>
        </trans-unit>
        <trans-unit id="6b4c645670d6ddfd60a953c6b89e294709580692" translate="yes" xml:space="preserve">
          <source>display_format</source>
          <target state="translated">display_format</target>
        </trans-unit>
        <trans-unit id="586e05edd180b07c41035fe36ef32451431ff3ca" translate="yes" xml:space="preserve">
          <source>display_name</source>
          <target state="translated">display_name</target>
        </trans-unit>
        <trans-unit id="85da8257efc5da99dedbe78b1ea957613a1c028f" translate="yes" xml:space="preserve">
          <source>divideSeries(&amp;lt;metric&amp;gt;[,&amp;lt;metricN&amp;gt;])</source>
          <target state="translated">divideSeries(&amp;lt;metric&amp;gt;[,&amp;lt;metricN&amp;gt;])</target>
        </trans-unit>
        <trans-unit id="f93b869698002e31cc57bb9c1c0c10fa39a2fb18" translate="yes" xml:space="preserve">
          <source>document, and run the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b4e84ee7f31d88617a6b60421451272ebf1a3a" translate="yes" xml:space="preserve">
          <source>doe</source>
          <target state="translated">doe</target>
        </trans-unit>
        <trans-unit id="5de27eebf8673f140fbb5d3be88fa415829e73fa" translate="yes" xml:space="preserve">
          <source>downsample</source>
          <target state="translated">downsample</target>
        </trans-unit>
        <trans-unit id="6138ca35d93bc3370d9c7f0b1b312fe159abcbbb" translate="yes" xml:space="preserve">
          <source>downsample 300000 avg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86181c94e60c3495757bd52c2d71b385dcb7ab6" translate="yes" xml:space="preserve">
          <source>downsample N FUNC</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210053af815b1c93d095dddcd6bd93953095e6dc" translate="yes" xml:space="preserve">
          <source>downsampler</source>
          <target state="translated">downsampler</target>
        </trans-unit>
        <trans-unit id="bb8d6769ab7d3343061f77b7addd4e364179bbed" translate="yes" xml:space="preserve">
          <source>dps</source>
          <target state="translated">dps</target>
        </trans-unit>
        <trans-unit id="2287b1b741e03105262aa9720b993f1b89870fd5" translate="yes" xml:space="preserve">
          <source>dpsMeta</source>
          <target state="translated">dpsMeta</target>
        </trans-unit>
        <trans-unit id="c856763788359b31ded158e284774cfe1b8134d9" translate="yes" xml:space="preserve">
          <source>dropcaches</source>
          <target state="translated">dropcaches</target>
        </trans-unit>
        <trans-unit id="58e6b3a414a1e090dfc6029add0f3555ccba127f" translate="yes" xml:space="preserve">
          <source>e</source>
          <target state="translated">e</target>
        </trans-unit>
        <trans-unit id="7f53a68d324346fc8457a1665141697dcc97ee86" translate="yes" xml:space="preserve">
          <source>e.g.</source>
          <target state="translated">e.g.</target>
        </trans-unit>
        <trans-unit id="4a9aa7f56fa0e37769dff5a6b6f662b963010d7e" translate="yes" xml:space="preserve">
          <source>emittedDPs</source>
          <target state="translated">emittedDPs</target>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="translated">enabled</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="e18933dd75bb5faa24508a6926e473485a7d95ae" translate="yes" xml:space="preserve">
          <source>endTime</source>
          <target state="translated">endTime</target>
        </trans-unit>
        <trans-unit id="9a2e74625cb3b1673e6d2c83984aff90684209da" translate="yes" xml:space="preserve">
          <source>end_time</source>
          <target state="translated">end_time</target>
        </trans-unit>
        <trans-unit id="e13fe41b5c330dd923da91992ed0cedb7e30960f" translate="yes" xml:space="preserve">
          <source>endpoint</source>
          <target state="translated">endpoint</target>
        </trans-unit>
        <trans-unit id="8807d7f9602a93027fa2df1f137390d421aebfaf" translate="yes" xml:space="preserve">
          <source>environment variable to your Bigtable shell directory, make sure the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9c1f03495d307d164b9d31383616054ab8fd68" translate="yes" xml:space="preserve">
          <source>environment variables have been set according to the values in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3ab2fbfc186c7e1b93b3de1faf738b30f2aab1" translate="yes" xml:space="preserve">
          <source>ep50r3</source>
          <target state="translated">ep50r3</target>
        </trans-unit>
        <trans-unit id="f91dc6f72b3a8f5c9f38b8ae3eeef97b3fb810d0" translate="yes" xml:space="preserve">
          <source>ep50r7</source>
          <target state="translated">ep50r7</target>
        </trans-unit>
        <trans-unit id="85e7dbf3af7808d12043b2c6e80bf0cac62d2475" translate="yes" xml:space="preserve">
          <source>ep75r3</source>
          <target state="translated">ep75r3</target>
        </trans-unit>
        <trans-unit id="bbb93524e261d41f7958b97e960476af49495b1f" translate="yes" xml:space="preserve">
          <source>ep75r7</source>
          <target state="translated">ep75r7</target>
        </trans-unit>
        <trans-unit id="ebebcc6a5d34f26a1676aa87eefbdc4b0b69ec16" translate="yes" xml:space="preserve">
          <source>ep90r3</source>
          <target state="translated">ep90r3</target>
        </trans-unit>
        <trans-unit id="a430f039e1748a80a3c623f5706e7223d9f71dfc" translate="yes" xml:space="preserve">
          <source>ep90r7</source>
          <target state="translated">ep90r7</target>
        </trans-unit>
        <trans-unit id="4733e6bd7b67eac1eff306ca77535cba31e93703" translate="yes" xml:space="preserve">
          <source>ep95r3</source>
          <target state="translated">ep95r3</target>
        </trans-unit>
        <trans-unit id="d0a61665a115eb28c867b1aa2c60a4acde203112" translate="yes" xml:space="preserve">
          <source>ep95r7</source>
          <target state="translated">ep95r7</target>
        </trans-unit>
        <trans-unit id="5fe2ecb8b4fa3eb5e3e1c8edd636da0cf8a6935c" translate="yes" xml:space="preserve">
          <source>ep999r3</source>
          <target state="translated">ep999r3</target>
        </trans-unit>
        <trans-unit id="93dfc9456d2829925990ac518bc10f4abbd564b2" translate="yes" xml:space="preserve">
          <source>ep999r7</source>
          <target state="translated">ep999r7</target>
        </trans-unit>
        <trans-unit id="b5376c4672b4e3cb03fcce8ddf33ae864ff8e120" translate="yes" xml:space="preserve">
          <source>ep99r3</source>
          <target state="translated">ep99r3</target>
        </trans-unit>
        <trans-unit id="aa4b820c48d69bbb9e221305bf20703320a5dc8e" translate="yes" xml:space="preserve">
          <source>ep99r7</source>
          <target state="translated">ep99r7</target>
        </trans-unit>
        <trans-unit id="570043596e41f9067d43fbff99f1acb348a090bf" translate="yes" xml:space="preserve">
          <source>errors</source>
          <target state="translated">errors</target>
        </trans-unit>
        <trans-unit id="3d3e78fa9058f34c5d5d72f50fc3fc55a53ef5af" translate="yes" xml:space="preserve">
          <source>errors (tsuid=0101010306)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8aacba1d9f18d2d80cfb1a099bd84111b2e91a4" translate="yes" xml:space="preserve">
          <source>executed</source>
          <target state="translated">executed</target>
        </trans-unit>
        <trans-unit id="86b77de2442fe05048f19c766138a551aa2543be" translate="yes" xml:space="preserve">
          <source>exp</source>
          <target state="translated">exp</target>
        </trans-unit>
        <trans-unit id="fe5acb27d5d5ff4351ab1040b9a001bc797c4dca" translate="yes" xml:space="preserve">
          <source>explicitTags &lt;em&gt;(2.3)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd1860204d6cee43392972817e66792ee702b89" translate="yes" xml:space="preserve">
          <source>expr</source>
          <target state="translated">expr</target>
        </trans-unit>
        <trans-unit id="ec9814396ba26fa02dc3261046ba55a3b4bb32a6" translate="yes" xml:space="preserve">
          <source>expression</source>
          <target state="translated">expression</target>
        </trans-unit>
        <trans-unit id="c09bb890b096f7306f688cc6d1dad34e7e52a223" translate="yes" xml:space="preserve">
          <source>f1</source>
          <target state="translated">f1</target>
        </trans-unit>
        <trans-unit id="5f5f8758f5f22d523e531f58123b6db9161683a4" translate="yes" xml:space="preserve">
          <source>failed</source>
          <target state="translated">failed</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="2da0b68df8841752bb747a76780679bcd87c6215" translate="yes" xml:space="preserve">
          <source>field</source>
          <target state="translated">field</target>
        </trans-unit>
        <trans-unit id="4d3a2209aac04f489a73bef2b0ec5aebc0bbc055" translate="yes" xml:space="preserve">
          <source>file with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480a62ddd1b086a325db8ed26d2b71a47d59f118" translate="yes" xml:space="preserve">
          <source>file with the required and/or optional configuration parameters below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="294864eb85ac48bb3ef51ce6d14341480ea3617b" translate="yes" xml:space="preserve">
          <source>fillPolicy</source>
          <target state="translated">fillPolicy</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="063bb71e199e75a4d65523c5d5ed89f1f55303e5" translate="yes" xml:space="preserve">
          <source>filters &lt;em&gt;(2.2)&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0996a37c13d44c3b06074939d43fa3759bd32c1" translate="yes" xml:space="preserve">
          <source>first</source>
          <target state="translated">first</target>
        </trans-unit>
        <trans-unit id="efed8af022a1709dbc89181294acd3f7d1eb5d21" translate="yes" xml:space="preserve">
          <source>fix - Attempts to fix errors per the table above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112f3a99b283a4e1788dedd8e0e5d35375c33747" translate="yes" xml:space="preserve">
          <source>flag</source>
          <target state="translated">flag</target>
        </trans-unit>
        <trans-unit id="2ce12ec02ae86424bb052211552a086509094dd2" translate="yes" xml:space="preserve">
          <source>formatters</source>
          <target state="translated">formatters</target>
        </trans-unit>
        <trans-unit id="82f512f0d7f5f026e6c6fb35ff1e6c50701a05c9" translate="yes" xml:space="preserve">
          <source>fsck</source>
          <target state="translated">fsck</target>
        </trans-unit>
        <trans-unit id="ec6d9083d77b970950e8340ff01d89108b346e38" translate="yes" xml:space="preserve">
          <source>gc</source>
          <target state="translated">gc</target>
        </trans-unit>
        <trans-unit id="9027cc5a2c1321de60a2d71ccde6229d1152d6d3" translate="yes" xml:space="preserve">
          <source>global</source>
          <target state="translated">global</target>
        </trans-unit>
        <trans-unit id="38f2d6d5bd8a9eaf90d4431b8ecef5dd2e3bbe0c" translate="yes" xml:space="preserve">
          <source>globalAnnotations</source>
          <target state="translated">globalAnnotations</target>
        </trans-unit>
        <trans-unit id="404e01df758154c3fcd5ea0abef9592fbc606de1" translate="yes" xml:space="preserve">
          <source>global_annotations</source>
          <target state="translated">global_annotations</target>
        </trans-unit>
        <trans-unit id="999c7db205b9e43d7f6108cf85e18af2b7c13ed4" translate="yes" xml:space="preserve">
          <source>google.bigtable.auth.json.keyfile</source>
          <target state="translated">google.bigtable.auth.json.keyfile</target>
        </trans-unit>
        <trans-unit id="fa71c4df23962aff5b8afb5f633cebe93aada718" translate="yes" xml:space="preserve">
          <source>google.bigtable.auth.service.account.enable</source>
          <target state="translated">google.bigtable.auth.service.account.enable</target>
        </trans-unit>
        <trans-unit id="7ad2beb43a8a168cbbdcc0a7a985ae16595ba2a0" translate="yes" xml:space="preserve">
          <source>google.bigtable.cluster.name</source>
          <target state="translated">google.bigtable.cluster.name</target>
        </trans-unit>
        <trans-unit id="7a9d7c0b3c87191110f21c0ea8d63758fce18d3a" translate="yes" xml:space="preserve">
          <source>google.bigtable.grpc.channel.count</source>
          <target state="translated">google.bigtable.grpc.channel.count</target>
        </trans-unit>
        <trans-unit id="b503a2e41ca54aaac25a15280226b619e0b6a240" translate="yes" xml:space="preserve">
          <source>google.bigtable.project.id</source>
          <target state="translated">google.bigtable.project.id</target>
        </trans-unit>
        <trans-unit id="cc13179307b5e80e24bfb6d17ead8019ee886fc5" translate="yes" xml:space="preserve">
          <source>google.bigtable.zone.name</source>
          <target state="translated">google.bigtable.zone.name</target>
        </trans-unit>
        <trans-unit id="6f99ebe40786111b7cceba8dccba662029d1e094" translate="yes" xml:space="preserve">
          <source>grep</source>
          <target state="translated">grep</target>
        </trans-unit>
        <trans-unit id="efb22615df12aa7f71e4c5d9ccbcd20e67a8dacd" translate="yes" xml:space="preserve">
          <source>groupBy</source>
          <target state="translated">groupBy</target>
        </trans-unit>
        <trans-unit id="c6afddb4d91603863673224b68b3056dd717d128" translate="yes" xml:space="preserve">
          <source>groupByAggregator</source>
          <target state="translated">groupByAggregator</target>
        </trans-unit>
        <trans-unit id="e44c652e2bc0bcbf54a321c747dee2e504e97db2" translate="yes" xml:space="preserve">
          <source>groupByTime</source>
          <target state="translated">groupByTime</target>
        </trans-unit>
        <trans-unit id="cf55a9599e13a6dec304f2ef3513f6fd8fa184eb" translate="yes" xml:space="preserve">
          <source>h - Hours</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fecdb00d68384740995d1d4d602d4b8eb4812e6" translate="yes" xml:space="preserve">
          <source>hbase.client.connection.impl</source>
          <target state="translated">hbase.client.connection.impl</target>
        </trans-unit>
        <trans-unit id="bf12ba0ea7920aee4052e5c37b3de046d84bbcf9" translate="yes" xml:space="preserve">
          <source>hbaseTime</source>
          <target state="translated">hbaseTime</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="c807582f56ce0e2a7bc3727f595c5fa112eca3db" translate="yes" xml:space="preserve">
          <source>highestCurrent(&amp;lt;metric&amp;gt;,&amp;lt;n&amp;gt;)</source>
          <target state="translated">highestCurrent(&amp;lt;metric&amp;gt;,&amp;lt;n&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="e7175502d48a44fe479e54a57b6895c49cab1d3d" translate="yes" xml:space="preserve">
          <source>highestMax(&amp;lt;metric&amp;gt;,&amp;lt;n&amp;gt;)</source>
          <target state="translated">highestMax(&amp;lt;metric&amp;gt;,&amp;lt;n&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="86dd1cf45142e904cb2e99c2721fac3ca198c6ca" translate="yes" xml:space="preserve">
          <source>host</source>
          <target state="translated">host</target>
        </trans-unit>
        <trans-unit id="3cf9e785ff4811c0b87f7fbd4443d82407af7109" translate="yes" xml:space="preserve">
          <source>host=*,dc=lax</source>
          <target state="translated">host=*,dc=lax</target>
        </trans-unit>
        <trans-unit id="25f22f8350c5aefac09e607cc84181cc7d7d5071" translate="yes" xml:space="preserve">
          <source>host=web01</source>
          <target state="translated">host=web01</target>
        </trans-unit>
        <trans-unit id="2df581d02763416de733a273f309a9fe0eb3b7c1" translate="yes" xml:space="preserve">
          <source>host=web01 owner=jdoe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdab9a695bcbd8854082b13edd1b1a6f2530d89c" translate="yes" xml:space="preserve">
          <source>host=web01.dal.mysite.com</source>
          <target state="translated">host=web01.dal.mysite.com</target>
        </trans-unit>
        <trans-unit id="561a24c17c5cf8651a76cc345396253e8baac455" translate="yes" xml:space="preserve">
          <source>host=web01.dal.mysite.com, owner=doe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf700b56826b8efdf7824152f98e24d7360ac1e" translate="yes" xml:space="preserve">
          <source>host=web02</source>
          <target state="translated">host=web02</target>
        </trans-unit>
        <trans-unit id="77b8a912d88d4966700ffdfa0b8553102d978f89" translate="yes" xml:space="preserve">
          <source>host=web03</source>
          <target state="translated">host=web03</target>
        </trans-unit>
        <trans-unit id="3747c621cc54403bfdcd8d79815d6358b53da38f" translate="yes" xml:space="preserve">
          <source>host=web04</source>
          <target state="translated">host=web04</target>
        </trans-unit>
        <trans-unit id="6007e764af356b3472405384b5f2888bede7bf7d" translate="yes" xml:space="preserve">
          <source>hours worked by an employee</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aefcac1c6526980e5d37b0f4e6f52b2ed99be1e" translate="yes" xml:space="preserve">
          <source>hours.worked</source>
          <target state="translated">hours.worked</target>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="translated">id</target>
        </trans-unit>
        <trans-unit id="356f93e02f0fb61e3f15b3d83c11f15ee0ee22ed" translate="yes" xml:space="preserve">
          <source>if you're using Varnish 2.x (which is not recommended as we would strongly encourage you to migrate to 3.x) you have to replace each function call &lt;code&gt;hash_data(foo);&lt;/code&gt; to set &lt;code&gt;req.hash += foo;&lt;/code&gt; in the VCL configuration above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96f1994da3bd2b91b5d51333f4de7ae8bdcae2f" translate="yes" xml:space="preserve">
          <source>ilteral_or</source>
          <target state="translated">ilteral_or</target>
        </trans-unit>
        <trans-unit id="62fdfbd55d19b2a4671102ad7bca17d875f8207a" translate="yes" xml:space="preserve">
          <source>import</source>
          <target state="translated">import</target>
        </trans-unit>
        <trans-unit id="ea5166cd37d8a9db256bd0363dfc70118314a1ce" translate="yes" xml:space="preserve">
          <source>includeAggTags</source>
          <target state="translated">includeAggTags</target>
        </trans-unit>
        <trans-unit id="e540cdd1328b2b21e29a95405c301b9313b7c346" translate="yes" xml:space="preserve">
          <source>index</source>
          <target state="translated">index</target>
        </trans-unit>
        <trans-unit id="35dbeee2557cf5a762703d915858c46573218533" translate="yes" xml:space="preserve">
          <source>inflightBreached</source>
          <target state="translated">inflightBreached</target>
        </trans-unit>
        <trans-unit id="f7a660b70c6bca397a183acbda77a0a045edeffc" translate="yes" xml:space="preserve">
          <source>interface=eth0</source>
          <target state="translated">interface=eth0</target>
        </trans-unit>
        <trans-unit id="d897bf481c6d3038f32cd50b3a8b5f6cf56b6348" translate="yes" xml:space="preserve">
          <source>interrupted</source>
          <target state="translated">interrupted</target>
        </trans-unit>
        <trans-unit id="4b6914c620d2daa62ebe5994f36f361b3a759bf8" translate="yes" xml:space="preserve">
          <source>intersection</source>
          <target state="translated">intersection</target>
        </trans-unit>
        <trans-unit id="84f4675c98d93edd17ec2f6ed54e9f3ee1086612" translate="yes" xml:space="preserve">
          <source>interval</source>
          <target state="translated">interval</target>
        </trans-unit>
        <trans-unit id="017e3d699559508b1f649695bd3b104568dcb34e" translate="yes" xml:space="preserve">
          <source>is also okay, but not recommended) JSON parameter or query string flag and it will bypass down sampling (unless specified) and return all timestamps in Unix epoch millisecond resolution. Also, the &lt;code&gt;scan&lt;/code&gt; commandline utility will return the timestamp as written in storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e198bafc877fefae0a0d5020566052ee9a49cbb" translate="yes" xml:space="preserve">
          <source>iwildcard</source>
          <target state="translated">iwildcard</target>
        </trans-unit>
        <trans-unit id="c455b38e076228392d1c751d14fe95da50519334" translate="yes" xml:space="preserve">
          <source>join</source>
          <target state="translated">join</target>
        </trans-unit>
        <trans-unit id="def0b140f03f857ea362eab215b3da5f740c15ac" translate="yes" xml:space="preserve">
          <source>jsonp</source>
          <target state="translated">jsonp</target>
        </trans-unit>
        <trans-unit id="8baa94b9eb9d8cdbad001ba02d92e63cc5922993" translate="yes" xml:space="preserve">
          <source>jsonp=callback</source>
          <target state="translated">jsonp=callback</target>
        </trans-unit>
        <trans-unit id="0ef25ae00f40c8471ee44b720036abcc25e96cee" translate="yes" xml:space="preserve">
          <source>kind</source>
          <target state="translated">kind</target>
        </trans-unit>
        <trans-unit id="b93e4cc0e468cfa94c40d341802b83416288622d" translate="yes" xml:space="preserve">
          <source>kind=metrics</source>
          <target state="translated">kind=metrics</target>
        </trans-unit>
        <trans-unit id="dfb7439f3062374e33329b50be099eeb9d1d14bd" translate="yes" xml:space="preserve">
          <source>kind=tagk</source>
          <target state="translated">kind=tagk</target>
        </trans-unit>
        <trans-unit id="d8bcc4703ee93b8e8d95745e2c56201316654d96" translate="yes" xml:space="preserve">
          <source>kind=tagv</source>
          <target state="translated">kind=tagv</target>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="translated">last</target>
        </trans-unit>
        <trans-unit id="8bde6241aa14d9c2fb18a3b4efcd53f8adbe72e3" translate="yes" xml:space="preserve">
          <source>lastReceived</source>
          <target state="translated">lastReceived</target>
        </trans-unit>
        <trans-unit id="e6b0d4635e40ebf7418288dc387bb14a1ae0e326" translate="yes" xml:space="preserve">
          <source>lax</source>
          <target state="translated">lax</target>
        </trans-unit>
        <trans-unit id="841117513f5207a85011298832ca7037b432af53" translate="yes" xml:space="preserve">
          <source>leaves</source>
          <target state="translated">leaves</target>
        </trans-unit>
        <trans-unit id="ad60c535ff88e85bf0254452fe3934f24e9668d5" translate="yes" xml:space="preserve">
          <source>level</source>
          <target state="translated">level</target>
        </trans-unit>
        <trans-unit id="e4d68c5a97e466323c2fbe2b655ab578066a1cd5" translate="yes" xml:space="preserve">
          <source>limit</source>
          <target state="translated">limit</target>
        </trans-unit>
        <trans-unit id="306f2966b55ec9df17b9e0eefeea942d00d78d61" translate="yes" xml:space="preserve">
          <source>literal_or</source>
          <target state="translated">literal_or</target>
        </trans-unit>
        <trans-unit id="334389048b872a533002b34d73f8c29fd09efc50" translate="yes" xml:space="preserve">
          <source>localhost</source>
          <target state="translated">localhost</target>
        </trans-unit>
        <trans-unit id="6b0d31c0d563223024da45691584643ac78c96e8" translate="yes" xml:space="preserve">
          <source>m</source>
          <target state="translated">m</target>
        </trans-unit>
        <trans-unit id="486da61596d214851d41ab4464b607ab8733642e" translate="yes" xml:space="preserve">
          <source>m - Minutes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b60224608c449f1f90ee4a4a046395ed573e4db" translate="yes" xml:space="preserve">
          <source>m or tsuids</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688b30bc8e5317bcb6b8ecc957e2a49a0d5d09ba" translate="yes" xml:space="preserve">
          <source>making sure to end with a blank line. You can add more manifest information if you like. This is the bare minimum to satisfy plugin requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0706025b2bbcec1ed8d64822f4eccd96314938d0" translate="yes" xml:space="preserve">
          <source>max</source>
          <target state="translated">max</target>
        </trans-unit>
        <trans-unit id="b4442021d377cb623bbdef272bfeb438acf4f55c" translate="yes" xml:space="preserve">
          <source>max - An optional maximum number of results to return. The default is 25 and given values must be greater than 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c5d49be9505089d8d248ea96f6d077fd0ab9bd" translate="yes" xml:space="preserve">
          <source>memory</source>
          <target state="translated">memory</target>
        </trans-unit>
        <trans-unit id="6f9b9af3cd6e8b8a73c2cdced37fe9f59226e27d" translate="yes" xml:space="preserve">
          <source>message</source>
          <target state="translated">message</target>
        </trans-unit>
        <trans-unit id="17f3467db103e03ea7354dd6da9a32c1ed2a07e8" translate="yes" xml:space="preserve">
          <source>messages</source>
          <target state="translated">messages</target>
        </trans-unit>
        <trans-unit id="cb030491157b26a570b6ee91e5b068d99c3b72f6" translate="yes" xml:space="preserve">
          <source>meta</source>
          <target state="translated">meta</target>
        </trans-unit>
        <trans-unit id="fba4184c97471f3a6191a3af089ee43f14ba4d37" translate="yes" xml:space="preserve">
          <source>metapurge</source>
          <target state="translated">metapurge</target>
        </trans-unit>
        <trans-unit id="0320e1e38b4e5f4c07f727b0a41ba0c2bebbcbfb" translate="yes" xml:space="preserve">
          <source>metasync</source>
          <target state="translated">metasync</target>
        </trans-unit>
        <trans-unit id="bfbaf8b2d1cdf92bf83857fe1748c0f68de03d47" translate="yes" xml:space="preserve">
          <source>method</source>
          <target state="translated">method</target>
        </trans-unit>
        <trans-unit id="15c3f21db033f3a8080a7523fa0447cea8585a24" translate="yes" xml:space="preserve">
          <source>method=put</source>
          <target state="translated">method=put</target>
        </trans-unit>
        <trans-unit id="aa0c92ca8cd36fcc9557aff33c6d83234ddc6c1a" translate="yes" xml:space="preserve">
          <source>method=scan</source>
          <target state="translated">method=scan</target>
        </trans-unit>
        <trans-unit id="cce1e70e53070c18b728ffb075ada682db114de5" translate="yes" xml:space="preserve">
          <source>method_override=delete</source>
          <target state="translated">method_override=delete</target>
        </trans-unit>
        <trans-unit id="2aa8dd50af1fa5748ea1dcf05102f95e63fcd1dd" translate="yes" xml:space="preserve">
          <source>method_override=post</source>
          <target state="translated">method_override=post</target>
        </trans-unit>
        <trans-unit id="47804c7c9bf1254e17ed5727102bfd4822b57f55" translate="yes" xml:space="preserve">
          <source>method_override=put</source>
          <target state="translated">method_override=put</target>
        </trans-unit>
        <trans-unit id="c5a39a3a7b3df7a7c25d3954cca5306e26c2073a" translate="yes" xml:space="preserve">
          <source>metric</source>
          <target state="translated">metric</target>
        </trans-unit>
        <trans-unit id="3c70a6e31e734ee672eb72958df26f0b333ec349" translate="yes" xml:space="preserve">
          <source>metric - A generic name for the time series such as &lt;code&gt;sys.cpu.user&lt;/code&gt;, &lt;code&gt;stock.quote&lt;/code&gt; or &lt;code&gt;env.probe.temp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966b9734015a6d617d09dae170c907a100bded72" translate="yes" xml:space="preserve">
          <source>metrics</source>
          <target state="translated">metrics</target>
        </trans-unit>
        <trans-unit id="9bb610f6224ad54149157dd6ed4f50e46577af3b" translate="yes" xml:space="preserve">
          <source>mimmax</source>
          <target state="translated">mimmax</target>
        </trans-unit>
        <trans-unit id="19f61b7e3b8bf0d80f8108554b2742961f18a0ad" translate="yes" xml:space="preserve">
          <source>mimmin</source>
          <target state="translated">mimmin</target>
        </trans-unit>
        <trans-unit id="b6c935d4f3c7b220fa038613a1f9c1b56b255a86" translate="yes" xml:space="preserve">
          <source>min</source>
          <target state="translated">min</target>
        </trans-unit>
        <trans-unit id="478108dbd1f658359503addd9638d8e3095ff33c" translate="yes" xml:space="preserve">
          <source>mkmetric</source>
          <target state="translated">mkmetric</target>
        </trans-unit>
        <trans-unit id="efb18431a18389a54ddf17a8d29ca0791f70a869" translate="yes" xml:space="preserve">
          <source>mkmetric is a shortcut to the &lt;code&gt;uid assign metrics &amp;lt;metric&amp;gt;&lt;/code&gt; command where you can provide multiple metric names in a single call and UIDs will be assigned or retrieved. If any of the metrics already exist, the assigned UID will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550a7fbb732ca9ce1311fcfed266ec219b3a5522" translate="yes" xml:space="preserve">
          <source>movingAverage(&amp;lt;metric&amp;gt;,&amp;lt;window&amp;gt;)</source>
          <target state="translated">movingAverage(&amp;lt;metric&amp;gt;,&amp;lt;window&amp;gt;)</target>
        </trans-unit>
        <trans-unit id="26cc3217be640e8220112c25628da6e11c78db95" translate="yes" xml:space="preserve">
          <source>ms</source>
          <target state="translated">ms</target>
        </trans-unit>
        <trans-unit id="d284da330c83f9125bb577857b28c233a983e645" translate="yes" xml:space="preserve">
          <source>ms - Milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee3749525306d28a33dd697a636a459bae96a77" translate="yes" xml:space="preserve">
          <source>msResolution (or ms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c56aa7176731ddc93694ae8f8ffc1788c7a8de" translate="yes" xml:space="preserve">
          <source>ms`</source>
          <target state="translated">ms`</target>
        </trans-unit>
        <trans-unit id="a40f0ad5e01638dccd0399c4515923a361e1c07e" translate="yes" xml:space="preserve">
          <source>multiplySeries(&amp;lt;metric&amp;gt;[,&amp;lt;metricN&amp;gt;])</source>
          <target state="translated">multiplySeries(&amp;lt;metric&amp;gt;[,&amp;lt;metricN&amp;gt;])</target>
        </trans-unit>
        <trans-unit id="a53743bacf14055dfe04245f4cf3e4b35684a0f6" translate="yes" xml:space="preserve">
          <source>n - Months (30 days)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efb4ac2212f109ebc889dc2a735f791dfc4119a" translate="yes" xml:space="preserve">
          <source>na</source>
          <target state="translated">na</target>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="78ee359464258aa746b3c005d807ccac3b4d5d71" translate="yes" xml:space="preserve">
          <source>name:sys.cpu.*</source>
          <target state="translated">name:sys.cpu.*</target>
        </trans-unit>
        <trans-unit id="11e623a37e87cf7995c466723ec99688d55cae8c" translate="yes" xml:space="preserve">
          <source>nan</source>
          <target state="translated">nan</target>
        </trans-unit>
        <trans-unit id="d982642c00a934c0ea242fef2adb115c557da4e3" translate="yes" xml:space="preserve">
          <source>newname</source>
          <target state="translated">newname</target>
        </trans-unit>
        <trans-unit id="57cfa7f941288ab210f80f513936aaddbfe83839" translate="yes" xml:space="preserve">
          <source>noAnnotations</source>
          <target state="translated">noAnnotations</target>
        </trans-unit>
        <trans-unit id="92be4aa1940f7a143e860afd85c1168c5155b1f0" translate="yes" xml:space="preserve">
          <source>no_annotations</source>
          <target state="translated">no_annotations</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">none</target>
        </trans-unit>
        <trans-unit id="8934268070d758174fe585719b02f3509b21599a" translate="yes" xml:space="preserve">
          <source>not_iliteral_or</source>
          <target state="translated">not_iliteral_or</target>
        </trans-unit>
        <trans-unit id="229f7ff16dea4f2e83e00ed82141e9719a1006ce" translate="yes" xml:space="preserve">
          <source>not_literal_or</source>
          <target state="translated">not_literal_or</target>
        </trans-unit>
        <trans-unit id="3add7b9612102f2a7dbe4ed4fe886e07e847c24d" translate="yes" xml:space="preserve">
          <source>notes</source>
          <target state="translated">notes</target>
        </trans-unit>
        <trans-unit id="c9bc849a968f2432684aca234f30596c5a91654f" translate="yes" xml:space="preserve">
          <source>now</source>
          <target state="translated">now</target>
        </trans-unit>
        <trans-unit id="2be88ca4242c76e8253ac62474851065032d6833" translate="yes" xml:space="preserve">
          <source>null</source>
          <target state="translated">null</target>
        </trans-unit>
        <trans-unit id="eeee9b9d7dfb75e03ceb8aba3c54b81c5e829202" translate="yes" xml:space="preserve">
          <source>numRunningQueries</source>
          <target state="translated">numRunningQueries</target>
        </trans-unit>
        <trans-unit id="3fa3b3086702a46dd922100856883a440d31f72c" translate="yes" xml:space="preserve">
          <source>opentsdb.conf</source>
          <target state="translated">opentsdb.conf</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
