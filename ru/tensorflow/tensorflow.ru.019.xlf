<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="tensorflow">
    <body>
      <group id="tensorflow">
        <trans-unit id="b2469d432d1c745f1cf3cb451d986c3da56f4c58" translate="yes" xml:space="preserve">
          <source>Convert a list of texts to a Numpy matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc2e1018d25b3a46bfa9ab347c49ee3b2451df4" translate="yes" xml:space="preserve">
          <source>Convert a model using TOCO. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112e5ca774cd0733f1908a386b040833a077ff17" translate="yes" xml:space="preserve">
          <source>Convert one or more images from HSV to RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7e8bc5b930c18e21e03ca4d9602befd15ad62d" translate="yes" xml:space="preserve">
          <source>Convert raw byte strings into tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beae5802dc635991210ec6f30927f4da7376226c" translate="yes" xml:space="preserve">
          <source>Convert raw byte strings into tensors. (deprecated arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f746063a2a65a2dc410bc011dbc0d976bca586" translate="yes" xml:space="preserve">
          <source>Convert the input SavedModel in 2.0 format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76f47815726c0a04c5b1eca4d9191830e8f951c" translate="yes" xml:space="preserve">
          <source>Convert various option types to a unified string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5efebf2a861b1b067dd65b07231f6c795b13f75" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;IndexedSlices&lt;/code&gt; objects into dense tensors prior to adding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf5f96a2780cf3012a7bc2058779b4e0d940a0a" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;bytes&lt;/code&gt;, or unicode python input types to &lt;code&gt;bytes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fefa43d40725018717df149aca7fe97bbed3ae" translate="yes" xml:space="preserve">
          <source>Converts CTC labels from dense to sparse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef5ba3b381afd1be2c299b7f73d7a8099e1515d" translate="yes" xml:space="preserve">
          <source>Converts a 2D &lt;a href=&quot;sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt; to a &lt;code&gt;RaggedTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8f91ca90ea439e51ab158f629f287c18f1a2ea" translate="yes" xml:space="preserve">
          <source>Converts a 3D Numpy array to a PIL Image instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc363c105a4614bea28dc1f69a8adc22b89f2a2" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt; into a &lt;code&gt;RaggedTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d5ebabc0ca8dea7cbcdacb2f15a898835d1e0d" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;SparseTensor&lt;/code&gt; into a dense tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455c41ae57f0e93bdb4550a15a7aab629e01b56e" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;SparseTensor&lt;/code&gt; of ids into a dense bool indicator tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d6c4b19abfd21f3b4ad23fd8e0999ac551d55f" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;Variable&lt;/code&gt; to a &lt;code&gt;VariableDef&lt;/code&gt; protocol buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7717ab29ad116966d098e4007e77ea83b96d164" translate="yes" xml:space="preserve">
          <source>Converts a Keras model to dot format and save to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f5b2c49aa3bc63489caa3cdffc52bbecefb084" translate="yes" xml:space="preserve">
          <source>Converts a PIL Image instance to a Numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24c3e35c9f700e98a2611452b71543116de1fff" translate="yes" xml:space="preserve">
          <source>Converts a Python entity into a TensorFlow graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7a41642b34a5dfdca417fa51f160f825349431" translate="yes" xml:space="preserve">
          <source>Converts a TensorFlow GraphDef based on instance variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafa9b3e0a31201f646d87d719f09a02927a06fe" translate="yes" xml:space="preserve">
          <source>Converts a TensorFlow model into TensorFlow Lite model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e0f2a0faf0552b98ad1297279c71337cd091e4" translate="yes" xml:space="preserve">
          <source>Converts a class vector (integers) to binary class matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcae264bca28a20b6f31c62c5d38e8721ae5d09" translate="yes" xml:space="preserve">
          <source>Converts a dense tensor into a sparse tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067161613814c50cacace2602d129de2423423fc" translate="yes" xml:space="preserve">
          <source>Converts a graphdef with LiteOp hints into stub operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8369e8460faa10c73bddaedb81888ca1d698043" translate="yes" xml:space="preserve">
          <source>Converts a list of sequences into a Numpy matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a4c9ade5bec35b0a27dc080594307dff576380" translate="yes" xml:space="preserve">
          <source>Converts a sparse representation into a dense tensor. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f19ecf349a1a3bc3daa478a89087e63c5c1511" translate="yes" xml:space="preserve">
          <source>Converts a sparse tensor into a dense tensor and returns it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46dcfb758caefae0a02f8c2056f24e2f0043d2e7" translate="yes" xml:space="preserve">
          <source>Converts a text to a sequence of indexes in a fixed-size hashing space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2795b20536c8e280acafc759700578d13f8641" translate="yes" xml:space="preserve">
          <source>Converts a text to a sequence of words (or tokens).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d83473e55ff8ae9fe3fbb4875e010f48195225e" translate="yes" xml:space="preserve">
          <source>Converts all convolution kernels in a model from Theano to TensorFlow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c818cb7bf452c52bd6c6bf85f3f39ef0e6e8ba" translate="yes" xml:space="preserve">
          <source>Converts an array of flat indices into a tuple of coordinate arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="878cc5832c02f8de36532fe301d66cd92b385e2f" translate="yes" xml:space="preserve">
          <source>Converts any string-like python input types to unicode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7bb823785a65015c4b6b96416f49bcedfaa108" translate="yes" xml:space="preserve">
          <source>Converts each entry in the given tensor to strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb1988554f743e632ce24fa371169277a80607c" translate="yes" xml:space="preserve">
          <source>Converts each string in the input Tensor to its hash mod by a number of buckets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ce16b7599ebf49ffb6f0dc1cccf5a88d5761ce" translate="yes" xml:space="preserve">
          <source>Converts each string in the input Tensor to the specified numeric type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04cddde516ac3594fdf76a34c1faaec88e1b19cc" translate="yes" xml:space="preserve">
          <source>Converts from any python constant representation of a &lt;code&gt;PathLike&lt;/code&gt; object to a string. If the input is not a &lt;code&gt;PathLike&lt;/code&gt; object, simply returns the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3231d19fb9760f5cebae42e6544bb06c328875e" translate="yes" xml:space="preserve">
          <source>Converts input to &lt;code&gt;str&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca444932b1d999f4e3e6d3d6cf9a393d21a620b7" translate="yes" xml:space="preserve">
          <source>Converts input which is a &lt;code&gt;PathLike&lt;/code&gt; object to &lt;code&gt;str&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1369500a7c18e2057686aac0affced479e51b7f8" translate="yes" xml:space="preserve">
          <source>Converts one or more images from Grayscale to RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb082534cd0321007364d07349a34c8fe196676" translate="yes" xml:space="preserve">
          <source>Converts one or more images from RGB to Grayscale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d0a5399e07c7d85ad01224286c590ad26f789d" translate="yes" xml:space="preserve">
          <source>Converts one or more images from RGB to HSV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0802ff30ac6b2f3d60901195a59e372a8a43fd48" translate="yes" xml:space="preserve">
          <source>Converts one or more images from RGB to YIQ.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8317e823c16d27d385186950bec8b93ad9e6bc" translate="yes" xml:space="preserve">
          <source>Converts one or more images from RGB to YUV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3b0c8e0ef5270c313f8633f031c8d299739e68" translate="yes" xml:space="preserve">
          <source>Converts one or more images from YIQ to RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819ff5291f62e173ae9c0c146b251016fb65bb14" translate="yes" xml:space="preserve">
          <source>Converts one or more images from YUV to RGB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc5c4a9560cbe4854392fd89e5080c5332f38d8" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;type_value&lt;/code&gt; to a &lt;code&gt;DType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87811dfb14ea5a5c7e2f93b4959528d581104a0" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;value&lt;/code&gt; to a &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8030ce23fe22f0e39552ae3df237f03b903c282d" translate="yes" xml:space="preserve">
          <source>Converts the given object to a &lt;code&gt;Tensor&lt;/code&gt; or an &lt;code&gt;IndexedSlices&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cae8e8d87f4191113ca1f448b0aa74d77caa683" translate="yes" xml:space="preserve">
          <source>Converts this &lt;code&gt;QueueRunner&lt;/code&gt; to a &lt;code&gt;QueueRunnerDef&lt;/code&gt; protocol buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6129a38dedae731e7819afd7dade646fa94d8290" translate="yes" xml:space="preserve">
          <source>Converts this &lt;code&gt;RaggedTensor&lt;/code&gt; into a &lt;a href=&quot;sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354dbc935ec6b4d1803d9981f72676141177ccde" translate="yes" xml:space="preserve">
          <source>Converts this &lt;code&gt;RaggedTensor&lt;/code&gt; into a &lt;a href=&quot;tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a999dd991421d4156742abf92b1de9ac30bc0184" translate="yes" xml:space="preserve">
          <source>Converts this &lt;code&gt;Saver&lt;/code&gt; to a &lt;code&gt;SaverDef&lt;/code&gt; protocol buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95855749688fcc1ed8cbf54e2995fc8c9acaf1a" translate="yes" xml:space="preserve">
          <source>Converts two real numbers to a complex number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0dadb5b6b941043c8a86d981807153a3d393ac3" translate="yes" xml:space="preserve">
          <source>Converts value to a &lt;code&gt;SparseTensor&lt;/code&gt; or &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae898dc3c9b96097c4aa9294c432c3e04dfd36ae" translate="yes" xml:space="preserve">
          <source>Convolution kernel corresponding to &lt;code&gt;self.spectrum&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b98f9e59ddc355505b12fc235308b6b68766ed" translate="yes" xml:space="preserve">
          <source>Convolutional LSTM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b0af47a53bd44a07371734e1295a8099aab2a1" translate="yes" xml:space="preserve">
          <source>Convolutional Neural Network (CNN)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5d8fc9f5ecb42136a1d001c7c28fddfd685caac" translate="yes" xml:space="preserve">
          <source>Convolutional Variational Autoencoder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9766388a7726a079de9b61aafd72130f86140c68" translate="yes" xml:space="preserve">
          <source>Copies data from &lt;code&gt;oldpath&lt;/code&gt; to &lt;code&gt;newpath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2323bb780f7436b11ebe2d3f89721d005322241" translate="yes" xml:space="preserve">
          <source>Copies data from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7f3fb5f6958ac9903fbe6f6aabb7a5d6ab44ea" translate="yes" xml:space="preserve">
          <source>Copy a tensor setting everything outside a central band in each innermost matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e198f2fd5e65ac42bd130d89dd39723457f1a332" translate="yes" xml:space="preserve">
          <source>Core module for TensorFlow distribution objects and helpers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e995ddac8395ac5668f8fb9ed278fccb91b0f91f" translate="yes" xml:space="preserve">
          <source>Cosine similarity tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bee817ee7ba30979f8193943f6123762f7501c1" translate="yes" xml:space="preserve">
          <source>Count the total number of scalars composing the weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be02ca96664af78609bd3d9438c87cdd9078dc1" translate="yes" xml:space="preserve">
          <source>Counter of accumulated gradients is reset to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039d8ef370904fafe33ed2e049b76d579597cb42" translate="yes" xml:space="preserve">
          <source>Counts the number of occurrences of each value in an integer array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d34f0f0072dfb3c1e69be7e6cb59890be3313d" translate="yes" xml:space="preserve">
          <source>Covariance is (possibly) defined only for non-scalar-event distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da61889ed98729dd04310c63434785fa710bf294" translate="yes" xml:space="preserve">
          <source>Covariance.</source>
          <target state="translated">Covariance.</target>
        </trans-unit>
        <trans-unit id="f00ee3816816c6aa216a51e3c5c4c55752e4d883" translate="yes" xml:space="preserve">
          <source>Cpp Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4606bda1a3d78dd12f1420bbc7944a6e93f992f8" translate="yes" xml:space="preserve">
          <source>Create a 2-batch of 3-class distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e09a211150b5399e777d0146f825b1f6811d487" translate="yes" xml:space="preserve">
          <source>Create a 3-class distribution, with the 3rd class is most likely to be drawn, using logits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0262659ba7c83c3c58c841c816cc8a78aae0b06f" translate="yes" xml:space="preserve">
          <source>Create a 3-class distribution, with the 3rd class is most likely to be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1776c03589b35dfbb2ceae203e48d38b61f5874" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;SaveSliceInfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ce1f9708a5e1c69f73740d0d407ab1802368a9" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;Supervisor&lt;/code&gt;. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bc662d538c43f05b8d4f93375b2cd7bb6cce08" translate="yes" xml:space="preserve">
          <source>Create a FixedLengthRecordReader. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739ad5cd6af2af1c9216ba8dd21488dea8d4f0ad" translate="yes" xml:space="preserve">
          <source>Create a IdentityReader. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd7882d173ae64b4518bdab63ee80cef023f4f0" translate="yes" xml:space="preserve">
          <source>Create a LMDBReader. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c60981d1f42a701dec214cd12bc83a876057630c" translate="yes" xml:space="preserve">
          <source>Create a Linear Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edafe0e4349e6e87b7c226b00a5dfbb2de4d29f8" translate="yes" xml:space="preserve">
          <source>Create a LooperThread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b4fcf851b297e54c8ed393b6042ba68f2c8c8" translate="yes" xml:space="preserve">
          <source>Create a OpHint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe52228254e5a72ee9dd803c469239245a553fa" translate="yes" xml:space="preserve">
          <source>Create a QueueRunner. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="939c3901e0364a1ba6b7f1ad1505eefd301ff6f5" translate="yes" xml:space="preserve">
          <source>Create a RNN cell composed sequentially of a number of RNNCells. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286399e328fcdbb113f31a178da95be7f8fa8cde" translate="yes" xml:space="preserve">
          <source>Create a TFRecordReader. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f89ded9801a3d3440a18ad00cb330e21cf7f37" translate="yes" xml:space="preserve">
          <source>Create a TensorProto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485177f194be555736194837e7cd55b24acef9a1" translate="yes" xml:space="preserve">
          <source>Create a TextLineReader. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a85a101718c09fa1bd6a26e45d713f6c75302b" translate="yes" xml:space="preserve">
          <source>Create a WholeFileReader. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd727d5c553bbe7b1475fdc6b4c9bdc5c6f25bb8" translate="yes" xml:space="preserve">
          <source>Create a Wide &amp;amp; Deep Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c902154624185da03b19409885a3de3896ab5f32" translate="yes" xml:space="preserve">
          <source>Create a case operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cde283bde33a2f509b6b0c9b94916b5586ea0a" translate="yes" xml:space="preserve">
          <source>Create a cell with added input, state, and/or output dropout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de27952f69a17231eb75aa59dd63c19e84d40f5d" translate="yes" xml:space="preserve">
          <source>Create a generator that iterate over the Sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd46dc4cf67a421b07060e50e222a3dc0971d2a" translate="yes" xml:space="preserve">
          <source>Create a head with L2 loss</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994646daf1a80a5808503a2225fdef965746e0e7" translate="yes" xml:space="preserve">
          <source>Create a list of partitioned variables according to the given &lt;code&gt;slicing&lt;/code&gt;. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2561f227d01ae2cc08e8d3f269e38c246c249233" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;DeviceSpec&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f7b4718c29209f9e4fb9e4bbb0fbbb2e4c5cab" translate="yes" xml:space="preserve">
          <source>Create a new Coordinator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ed1d174a330639ddc693b31fd623c57ce2503e" translate="yes" xml:space="preserve">
          <source>Create a new Optimizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad5ec727057baa75daaf49659e0353e2ab71311" translate="yes" xml:space="preserve">
          <source>Create a numpy ndarray from a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee84306d9fa302dca340598b45209361c664ce4" translate="yes" xml:space="preserve">
          <source>Create a numpy ndarray with the same shape and data as the tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44dcebb68b5f4026cf54adcde661f2aeea9f4262" translate="yes" xml:space="preserve">
          <source>Create a queue that dequeues elements in a random order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7418e2ef3fc01aa8b15e562d103e64a3aabdf23c" translate="yes" xml:space="preserve">
          <source>Create a queue using the queue reference from &lt;code&gt;queues[index]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371e8861f71dbb8fe6e0d157066dcda29474675b" translate="yes" xml:space="preserve">
          <source>Create a regularizer that applies an L1 regularization penalty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de19325fe584da93d3fc6f41e9d486f4ca92a579" translate="yes" xml:space="preserve">
          <source>Create a regularizer that applies an L2 regularization penalty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23459058631084065b257c7986aede8d4d799ffe" translate="yes" xml:space="preserve">
          <source>Create a regularizer that applies both L1 and L2 penalties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d580032816d22514a55d9168fa874bfb7326ed16" translate="yes" xml:space="preserve">
          <source>Create a scaffold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af268ebb8cc6120db8d8ff4d02be43746f72f45" translate="yes" xml:space="preserve">
          <source>Create a session on 'master', recovering or initializing the model as needed, or wait for a session to be ready. If running as the chief and &lt;code&gt;start_standard_service&lt;/code&gt; is set to True, also call the session manager to start the standard services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e177f73eec8c872eeb0309320a6d4ecfb4ad9bad" translate="yes" xml:space="preserve">
          <source>Create a source dataset from your input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d192bfd701a542ad03384f9df003e4cc9c320fe" translate="yes" xml:space="preserve">
          <source>Create a switch/case operation, i.e. an integer-indexed conditional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef456afe2430ebaeb144c0e24dd763f040b02dfb" translate="yes" xml:space="preserve">
          <source>Create a temporary directory specific to the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290bea18c57e717a66b6e8d6580f85f39ce07890" translate="yes" xml:space="preserve">
          <source>Create a temporary file specific to the test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c374ce24d517ec42230fe61a1f1fa3f0dc175e6a" translate="yes" xml:space="preserve">
          <source>Create a tensor of n-grams based on &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3c5fb89c988e74784f05f3b9a902a202300510" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;Exporter&lt;/code&gt; to use with &lt;a href=&quot;evalspec&quot;&gt;&lt;code&gt;tf.estimator.EvalSpec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5cf888d715b69ff94974290ddc4ec2452ffe83" translate="yes" xml:space="preserve">
          <source>Create an Estimator from a Keras model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f0ebeedba830dfb8ae4070a56385272998f19c" translate="yes" xml:space="preserve">
          <source>Create an instance of the class that will use the named test method when executed. Raises a ValueError if the instance does not have a method with the specified name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1985575351bdd8d874c7120f4cf5c21c57baf027" translate="yes" xml:space="preserve">
          <source>Create an op that groups multiple operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4624b630f46c030fc80adec33ba7cfd098ce660b" translate="yes" xml:space="preserve">
          <source>Create and return a new object. See help(type) for accurate signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415a3d29241842cafc607623f8dcd2603d9cc991" translate="yes" xml:space="preserve">
          <source>Create and start local servers and return the associated &lt;code&gt;Server&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73767ee359ca0cf8f89da05f7959d9b115fca80e" translate="yes" xml:space="preserve">
          <source>Create batches by randomly shuffling conditionally-enqueued tensors. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdd64b6ad12f6992a6151019ea168b2432d7b92" translate="yes" xml:space="preserve">
          <source>Create batches by randomly shuffling tensors. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf10e4977eed55d1d43435b4726960c1643677c5" translate="yes" xml:space="preserve">
          <source>Create global step tensor in graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78069f927a803068b2eafeb63d4559c42193c038" translate="yes" xml:space="preserve">
          <source>Create new instance of FixedLenFeature(shape, dtype, default_value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="482b7e8da8a7195443ba37d853d586593556ca5a" translate="yes" xml:space="preserve">
          <source>Create new instance of FixedLenSequenceFeature(shape, dtype, allow_missing, default_value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79bd16fdb30259bde90a73e1d071342c68eb91e" translate="yes" xml:space="preserve">
          <source>Create new instance of LSTMStateTuple(c, h)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f72a1e67020bb5ceb8d10a486958338e3a9270" translate="yes" xml:space="preserve">
          <source>Create new instance of LogicalDevice(name, device_type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b58548f7ad46092e8eb4f0e30836eed4019c9e6" translate="yes" xml:space="preserve">
          <source>Create new instance of LogicalDeviceConfiguration(memory_limit,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133218ca6f03c9ec706812c174c4cc796bb210e9" translate="yes" xml:space="preserve">
          <source>Create new instance of PhysicalDevice(name, device_type)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a96d430a012c78721a8a18f2a7a93ce214d975" translate="yes" xml:space="preserve">
          <source>Create new instance of RaggedFeature(dtype, value_key, partitions, row_splits_dtype, validate)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51dc241be2f2b9bdaf4706e249d78d9e6131afd" translate="yes" xml:space="preserve">
          <source>Create new instance of RowLengths(key,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f926b3cbe3735fae436988d90896207eacb59f" translate="yes" xml:space="preserve">
          <source>Create new instance of RowLimits(key,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9633f0b2eaa57cc14b16e0c4e2b33ceb0dbd831" translate="yes" xml:space="preserve">
          <source>Create new instance of RowSplits(key,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2cd94cc34d1564dd375be4da6e8c5ba0504d20" translate="yes" xml:space="preserve">
          <source>Create new instance of RowStarts(key,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0f740593d6de2709e2e11b7974cd29437983f2" translate="yes" xml:space="preserve">
          <source>Create new instance of ServingInputReceiver(features, receiver_tensors, receiver_tensors_alternatives)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb2caabfa7954e75b7ca18bfbbb8106aa49109f" translate="yes" xml:space="preserve">
          <source>Create new instance of SessionRunArgs(fetches, feed_dict, options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f117aac027e2350f4f87245b9d3b53954495a628" translate="yes" xml:space="preserve">
          <source>Create new instance of SessionRunValues(results, options, run_metadata)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fda459201bde7052691da06b116aec401f9abae" translate="yes" xml:space="preserve">
          <source>Create new instance of SparseFeature(index_key, value_key, dtype, size, already_sorted)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3678705406330760dbc5347d07d60c3dca14d86" translate="yes" xml:space="preserve">
          <source>Create new instance of SparseTensorValue(indices, values, dense_shape)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7713fa472e549e115480c59291f9df8fd98de5" translate="yes" xml:space="preserve">
          <source>Create new instance of TPUConfig(iterations_per_loop, num_shards, num_cores_per_replica, per_host_input_for_training, tpu_job_name, initial_infeed_sleep_secs, input_partition_dims, eval_training_input_configuration, experimental_host_call_every_n_steps)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58690bca960202cd31928b89cda4106bd49781a" translate="yes" xml:space="preserve">
          <source>Create new instance of TensorServingInputReceiver(features, receiver_tensors, receiver_tensors_alternatives)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42d69bebb96cb487a0c9452d20217d9b03d169d" translate="yes" xml:space="preserve">
          <source>Create new instance of UniformRowLength(length,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbed9854e838a21545e6b737a90133271da0dd39" translate="yes" xml:space="preserve">
          <source>Create new instance of ValueRowIds(key,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e00a77b79f0c7ad08b5d445c9c9c9e5849fcff81" translate="yes" xml:space="preserve">
          <source>Create new instance of VarLenFeature(dtype,)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8256cddc4f8c790d4d04e8158ab3dee9b6abe8dd" translate="yes" xml:space="preserve">
          <source>Create new instance of VocabInfo(new_vocab, new_vocab_size, num_oov_buckets, old_vocab, old_vocab_size, backup_initializer, axis)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801c2d512e7803bf1c1bdb404125874c86fd6f2f" translate="yes" xml:space="preserve">
          <source>Create new instance of WarmStartSettings(ckpt_to_initialize_from, vars_to_warm_start, var_name_to_vocab_info, var_name_to_prev_var_name)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5419b1d64cb5e78644023a7226be40c1342b2a49" translate="yes" xml:space="preserve">
          <source>Create predictions. See &lt;code&gt;base_head.Head&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e888ed0ce5a5fa0c5070d8a47cbda7f64b25f89" translate="yes" xml:space="preserve">
          <source>Create threads to run the enqueue ops for the given session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7977aea55b66c66f15d2b5292c163e519cdcc59e" translate="yes" xml:space="preserve">
          <source>Create variables on these devices in a &lt;code&gt;with colocate_vars_with(non_slot_devices(...)):&lt;/code&gt; block. Update those using &lt;code&gt;update_non_slot()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ad53f19296a1d5e211f30527128f7fbe480b82" translate="yes" xml:space="preserve">
          <source>Creates a 1D tensor containing a sequence of integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049b146fbb2900d535b082389aa23350f1ab68c8" translate="yes" xml:space="preserve">
          <source>Creates a 2-batch of 3-class distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b36a194a2093ba7f6c46f38f06926e6322fa4acb" translate="yes" xml:space="preserve">
          <source>Creates a 3-class distribution with the 2nd class being most likely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9700ba2fb5a3e962a299c00b33a31eea66fe63" translate="yes" xml:space="preserve">
          <source>Creates a 3-class distribution with the 2nd class being most likely. Parameterized by &lt;a href=&quot;https://en.wikipedia.org/wiki/Logit&quot;&gt;logits&lt;/a&gt; rather than probabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2507c9187a1a1e89dbe364a06d9f6988af3ecb5c" translate="yes" xml:space="preserve">
          <source>Creates a 3-class distribution with the 3rd class being most likely. The distribution functions can be evaluated on counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21de7ff3a0f3948a4b8ee4d55fb862f2e13d8270" translate="yes" xml:space="preserve">
          <source>Creates a 3-class distribution, with the 3rd class is most likely to be drawn. The distribution functions can be evaluated on counts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad10191ff6d53d21bd34a14bfd2b8c5e2711203b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;iterator&quot;&gt;&lt;code&gt;tf.compat.v1.data.Iterator&lt;/code&gt;&lt;/a&gt; for enumerating the elements of a dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34a4909264ad16751152d3b4c7a486db36625c6" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;BinaryAccuracy&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee11d655b90a11479ec50fdfb7c90c46b54231e" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;BinaryCrossentropy&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415eecd3a16724b78238dccc12e3b6cde7b1f096" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;CancelledError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da305c41527671c4e6bf7c70db9228b1071f393f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;CategoricalAccuracy&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5f968a8204c006de6adfabdb3013ade9db19cd" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;ClusterSpec&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f444f6dfe1305eb047780819f1dace6ad407a05e" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;CosineSimilarity&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97185dcfb8f3f446770c35ac86cc5559dff7b5c1" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;CsvDataset&lt;/code&gt; by reading and decoding CSV files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97fa7861fcf792091fc59a4d88e927b2defaa3b6" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DataLossError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583cf311f0bdc54fc671f06936c9aa9079426f55" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; by concatenating the given dataset with this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78ee26311253289f3fbc2f513d48f5ca2f8ecd3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; by zipping together the given datasets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5d76656d5f1c4e892014d00c42c00566e5288c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; from another &lt;code&gt;Dataset&lt;/code&gt; and silently ignores any errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c54187951baaf2adeefc2209224631342fd1298" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; from another &lt;code&gt;Dataset&lt;/code&gt;, discarding duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae324cba369e49e9cdbd6b302d5f1f8ec71263e" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; of a step-separated range of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171d97860afca599701bf794cd5ae8771474f6e3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; that counts from &lt;code&gt;start&lt;/code&gt; in steps of size &lt;code&gt;step&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd8bb26f67174f74ac3882b722c9c18c5e5c108" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; that includes only 1/&lt;code&gt;num_shards&lt;/code&gt; of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a329607ad9d603e5cb8c84f82045184ae57d87" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; that prefetches elements from this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9608b0a2ece4c10c6b413eed3d6beb7a05c19928" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; that skips &lt;code&gt;count&lt;/code&gt; elements from this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d803fc72b245b23008a3c6c2426c92e97ad73f5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; whose elements are generated by &lt;code&gt;generator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c46402155a557a6058cadab7452d0562e301d0c2" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; whose elements are slices of the given tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee094d80df27a25aba3b3f2862bd9accc07d66ed" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; with a single element, comprising the given tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da40bdd4b04e1bfd46ce5b7d87e5952070bcc9db" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Dataset&lt;/code&gt; with at most &lt;code&gt;count&lt;/code&gt; elements from this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969d28b1784aefb18e9c05720a816c72f37c2a79" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DatasetSpec&lt;/code&gt; for the given &lt;a href=&quot;dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2230abe15f72d8700234a79838e123689553d439" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;DeadlineExceededError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebe2b31c6e813a6e12f3a5e13a8414984d35876" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;FailedPreconditionError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d26c7f8b61e51b307157f91184bfa472cd1a91c1" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;FalseNegatives&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a97ce18c960424c1f7e7ac27e106961f42712f0" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;FalsePositives&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c90594f890721b934a208b2b20a57a2248a16e" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;FileWriter&lt;/code&gt;, optionally shared within the given session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65148791748e2286b8f0eead2b7b4f8f5e1cb125" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;FixedLengthRecordDataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d22ebfdf9bc9371f2c9373cdb21b290b24a256b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for logistic regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d0f11cebb6368244d3f288dcdd1068ef89e2b7" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for multi class classification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4549d4575ebe3746fef026ba1cd8452cff3ed5c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for multi-label classification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1403a8795f2c5eeccedb4b51f108b639798443" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for multi-objective learning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06cc28ce85001df1fcb7a86698b0d3e8fc83b7d" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for poisson regression using &lt;a href=&quot;../nn/log_poisson_loss&quot;&gt;&lt;code&gt;tf.nn.log_poisson_loss&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5968194f213c093db6865bd5103aad1878c142c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for regression using the &lt;code&gt;mean_squared_error&lt;/code&gt; loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b23bceda8219158bacdb4472a8237ababe51c1" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Head&lt;/code&gt; for single label binary classification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424f0925fada87bc344693d232dd92c4185dcca3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Mean&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4355e0984bb5bcf5b3b55a3219fc44b6d683cad" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;MeanIoU&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a094077d6fd3409d0f0521c23119a94289f8f0" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;MeanMetricWrapper&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e8f1aa376f2ff90e50bfb8a4e536b428f17c78" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;MeanRelativeError&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96ff9b08bb20b21a1936e6a8af57d024022233c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;MeanTensor&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6064d3b5281f1796787f57879ccd88bd472172e3" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;MonitoredSession&lt;/code&gt; for training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990acee32e80759a51e5a47f56a06e8e5f4ed0c7" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;NotFoundError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf2179c836271fdad169dc9020a2020c829dbbe" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;OneDeviceStrategy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd71b3fd99eff56a2a72dee842e56d26534df29" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;PermissionDeniedError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2abcdbf2de39ee421c442c73ca506fecd633b9" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Precision&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82fc0133223ece11dade784b419dbb81e67fbac" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;PrecisionAtRecall&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acdbf68b70a63e53ad601841c44187ee6dd396c" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; from a nested list of &lt;code&gt;row_lengths&lt;/code&gt; tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75af61115d04d0b95f137f2ab16874b78fa45f4" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; from a nested list of &lt;code&gt;row_splits&lt;/code&gt; tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73aa76df60e846c7f70fd0dc0240adcb7249697" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; from a nested list of &lt;code&gt;value_rowids&lt;/code&gt; tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdd554c6fe58fe70e13cf2e9dafcd3b4fb97910" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with a specified partitioning for &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b34484f85954ca10ecb4b16a7ab8ee24a5e2ee" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with rows partitioned by &lt;code&gt;row_lengths&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1f9b5fa32ed9e38cef6956af950658a64b4970" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with rows partitioned by &lt;code&gt;row_limits&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdd6ee1f7221bd889d6e68a1f4b659aeafea9dd" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with rows partitioned by &lt;code&gt;row_splits&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132aff232ab8912da854276254ee60106f2a4644" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with rows partitioned by &lt;code&gt;row_starts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da61bf571eca31c8be73eb65daac0127a038313f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with rows partitioned by &lt;code&gt;uniform_row_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f29ba70233453ff21d134c34ae4a0a1bb09b58e" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensor&lt;/code&gt; with rows partitioned by &lt;code&gt;value_rowids&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e521f8f4adb323c075424cd032ab2b604d66a58d" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;RaggedTensorValue&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df58f52fab4abb44be391a8a9fd40d40113f7a2" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Recall&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16df7476e1919df0495f23dd4d665fd89600171" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;ResourceExhaustedError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f52cabd425dcf39f7090e748ef712bd711b843" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Saver&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44a34569dc1e416198f7ddfbb3dd9b1e39e0905" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;SensitivityAtSpecificity&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d63bdb3b92ec5d9a73e21b7ad2808c3276e28e6f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Session&lt;/code&gt; on 'master'. If a &lt;code&gt;saver&lt;/code&gt; object is passed in, and &lt;code&gt;checkpoint_dir&lt;/code&gt; points to a directory containing valid checkpoint files, then it will try to recover the model from checkpoint. If no checkpoint files are available, and &lt;code&gt;wait_for_checkpoint&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, then the process would check every &lt;code&gt;recovery_wait_secs&lt;/code&gt;, up to &lt;code&gt;max_wait_secs&lt;/code&gt;, for recovery to succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0abfee82b2ff0b3c41b77b3f8fa9ccbe3870705" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Session&lt;/code&gt;, recovering if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a41ea84dbf9e0f22de186d2906c8ff959cab93" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Session&lt;/code&gt;. Makes sure the model is ready to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e199b35a0d51406c90473d53cdd6c3a0ef78190d" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;SparseTensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a975eb73816506946e9b191fa2c6449ba28c6ac" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;SparseTopKCategoricalAccuracy&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2e44a8c6035badbce507729a660794ea31212b" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;SpecificityAtSensitivity&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444a4f7982256f26fdbdaddaad4f8c752a9fcc92" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;SqlDataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05585427358f5ed4438b1fbddf00c1811f0f021" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;StatsAggregator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a030003a37cc73cbaef4e05555e211438d6fccfe" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Sum&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6537489bfbcda8683897a1d267567043e162d14" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;TFRecordDataset&lt;/code&gt; to read one or more TFRecord files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bca2532a32bdaba05909d1af5002c7995f1ee6" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;TFRecordOptions&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87763a166ab20b75a885978bd454aa8f64035d5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;TextLineDataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2510c869758e03d7481ac5794f38a7e8d66b7222" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;TopKCategoricalAccuracy&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b3d4bbbe8d00cc1791c1a5c1b30ee39268a0c5" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;TrueNegatives&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1548771eb9f5b7c3722dd5e1b6bdb0ecb90c7fef" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;TruePositives&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec6173027750a517bcd9c95d3022993817bdd8d" translate="yes" xml:space="preserve">
          <source>Creates a DatasetV2 object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc647a9268954d2bc38278ea01e9a4480c07c11f" translate="yes" xml:space="preserve">
          <source>Creates a DenseFeatures object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29769fdc4dafcc4e266d22ed41ab87938b47bc32" translate="yes" xml:space="preserve">
          <source>Creates a DuplicateFlagError by providing flag name and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2916221a7a6a8ce2b59cc8e1f4f02df1579ccf3f" translate="yes" xml:space="preserve">
          <source>Creates a RNG state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abdbba49f167c2c01c98144de7bafb99ff20e99" translate="yes" xml:space="preserve">
          <source>Creates a Saver in the current scope and uses the Saver to export the meta graph def. Invoking this API requires the &lt;code&gt;add_meta_graph_and_variables()&lt;/code&gt; API to have been invoked before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded3a39a54329adf4b7b1d2b7d38a98fcb577c4f" translate="yes" xml:space="preserve">
          <source>Creates a Saver to save the variables from the provided session. Exports the corresponding meta graph def. This function assumes that the variables to be saved have been initialized. For a given &lt;code&gt;SavedModelBuilder&lt;/code&gt;, this API must be called exactly once and for the first meta graph to save. For subsequent meta graph defs to be added, the &lt;code&gt;add_meta_graph()&lt;/code&gt; API must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f1f45457ca15de413867afcf2f79b67e89c553" translate="yes" xml:space="preserve">
          <source>Creates a SessionManager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22136ba4f671bdddbeba72a944beeeee600a9979" translate="yes" xml:space="preserve">
          <source>Creates a SimpleClusterResolver from a ClusterSpec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea1371b85a89b04b9eb9110386269080aef0e63" translate="yes" xml:space="preserve">
          <source>Creates a SingularMonitoredSession.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4008c680ae910ab5c6c2d331bd34e4a551ee8f75" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter class from a SavedModel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c69af8ab446ba18ad208dd9af6dbfdf0d035da9" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter class from a TensorFlow Session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7457257695b2c1e013174a24e4181a0cd16731c2" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter class from a file containing a frozen GraphDef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e40fa1a15c824a59d64a9c0c09d4552f10d1fcd" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter class from a tf.keras model file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994b85a84aa535b70f6c2b9017cc2ef28c20377a" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter object from ConcreteFunctions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43980933927ce6be70f7d1b50d4067fba33e3183" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter object from a Keras model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6ef9c875613b4c89500fe655252c635ab7dfeec" translate="yes" xml:space="preserve">
          <source>Creates a TFLiteConverter object from a SavedModel directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87403f847af609302881b731159e50fa0f033961" translate="yes" xml:space="preserve">
          <source>Creates a TensorSpec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2123aa7bcb44e6d9a52b4abfe175df6f483c758b" translate="yes" xml:space="preserve">
          <source>Creates a TocoConverter class from a SavedModel. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288970a6358bf81ec888e443e5d2b64bc838c791" translate="yes" xml:space="preserve">
          <source>Creates a TocoConverter class from a TensorFlow Session. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207deacd1ae4dccc7f17ca163eadc4b9b496a896" translate="yes" xml:space="preserve">
          <source>Creates a TocoConverter class from a file containing a frozen graph. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca3dced97f63f1d30112a950fd9ab6b4614c178" translate="yes" xml:space="preserve">
          <source>Creates a TocoConverter class from a tf.keras model file. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80df806b88d90b90fca46d1860ff3ee1f08ad8d5" translate="yes" xml:space="preserve">
          <source>Creates a bidirectional recurrent neural network. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b47cf9d5fec0ef6fb1f997b332cb675a1d9205" translate="yes" xml:space="preserve">
          <source>Creates a constant tensor from a tensor-like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce2a751608a27dac1b465dd6fe19f5907f3bab4" translate="yes" xml:space="preserve">
          <source>Creates a constant tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e69588664be4cec9afeb6fa0fe2ce9eb4ec3461" translate="yes" xml:space="preserve">
          <source>Creates a critical section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b378112a0b673157a549fa0d5c4b2ecd1cd9f5" translate="yes" xml:space="preserve">
          <source>Creates a cross-entropy loss using tf.nn.sigmoid_cross_entropy_with_logits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c68288850e240947b50945bc2dd3233872c7d37" translate="yes" xml:space="preserve">
          <source>Creates a cross-entropy loss using tf.nn.softmax_cross_entropy_with_logits_v2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629d357bd473bea54fd5f49b671c8148e88c36ad" translate="yes" xml:space="preserve">
          <source>Creates a dataset that deterministically chooses elements from &lt;code&gt;datasets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae47fd2423cf94e7a34fc5c3affc69359a61cd8" translate="yes" xml:space="preserve">
          <source>Creates a deep copy of the distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4474ce6b5f37ece2f81a0529cde9655ce631098e" translate="yes" xml:space="preserve">
          <source>Creates a directory and all parent/intermediate directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fe16a65f29d5c1f215d776cba49d890634000c" translate="yes" xml:space="preserve">
          <source>Creates a directory with the name &lt;code&gt;dirname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d15098ae450e2c267e87713bacc43d5e63f142" translate="yes" xml:space="preserve">
          <source>Creates a directory with the name given by &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6068c7df2e38ba0929f64ae8bee38d24a5ab92ef" translate="yes" xml:space="preserve">
          <source>Creates a dynamic version of bidirectional recurrent neural network. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7dc161f0393c1004c3c7317edddb20bcfe5e3ef" translate="yes" xml:space="preserve">
          <source>Creates a generator by non-deterministically initializing its state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56e77bfdc69bf0917e085f01aef7edc5cb706919" translate="yes" xml:space="preserve">
          <source>Creates a generator from a key and a counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0332700d9a6796a772f75962ba25471e4e2f86c" translate="yes" xml:space="preserve">
          <source>Creates a generator from a seed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3f1cc459c244f3e418e38043841d3c9a37b5be" translate="yes" xml:space="preserve">
          <source>Creates a generator from a state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19265528d3d85cbb92aaff8e7f5db9c757b0bb95" translate="yes" xml:space="preserve">
          <source>Creates a generator to extract data from the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3321719476bfa0773edf3d007aafe9449d0a2bca" translate="yes" xml:space="preserve">
          <source>Creates a generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6907f41ce5cdb99e31d14dd6dbb9db889818676b" translate="yes" xml:space="preserve">
          <source>Creates a grad-pass-through op with the forward behavior provided in f.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333ce6157272958e2df24071f71355bd8b3ac74d" translate="yes" xml:space="preserve">
          <source>Creates a hook to handle SyncReplicasHook ops such as initialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2d319a7abfda2204eedf1e6f1a91c905b0139e" translate="yes" xml:space="preserve">
          <source>Creates a layer from its config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ac3cd4cb0d2d74adfcebfb86763c3473c7622f" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;a href=&quot;estimator&quot;&gt;&lt;code&gt;tf.estimator.Estimator&lt;/code&gt;&lt;/a&gt; which has given metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59bdbf145bf94f0c1b871d84fb7b3d03075b8eb3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;DataType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cee322e71d92d1af0b95e5102842b0bc0892fc" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;OpError&lt;/code&gt; indicating that a particular op failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f4df4c7e3a84178a0cc4a8bfa3f93e23a4caf3" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Session&lt;/code&gt; and waits for model to be ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3545a702720736c635b61449865280e0a144e5" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Session&lt;/code&gt; on 'master'. Waits for the model to be initialized or recovered from a checkpoint. It's expected that another thread or process will make the model ready, and that this is intended to be used by threads/processes that participate in a distributed training configuration where a different thread/process is responsible for initializing or recovering the model being trained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f119ce6dc41baedd8eb3838c435cfe4438fdfe" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Tensor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbc5554f4a7411861a6ad94eb64453df1cdf5b8" translate="yes" xml:space="preserve">
          <source>Creates a new ConditionalAccumulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdbb325ff182261a367a61d7560eb7eee40f184" translate="yes" xml:space="preserve">
          <source>Creates a new Dimension with the given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bbf728aaf91104ce43da38eee71034dea77cf4" translate="yes" xml:space="preserve">
          <source>Creates a new ExponentialMovingAverage object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2dd7d35efe081485c17b1773b0bbcb5d367ee8" translate="yes" xml:space="preserve">
          <source>Creates a new GCEClusterResolver object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857382f70cd76cc22d7c9def9ba16c709344aed1" translate="yes" xml:space="preserve">
          <source>Creates a new GradientTape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef8ba70ff662c514ad092983e498af3f85e81d3" translate="yes" xml:space="preserve">
          <source>Creates a new ReaderBase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafbfb68d17bdb672ec04a7ca3163d2715ff663f" translate="yes" xml:space="preserve">
          <source>Creates a new SlurmClusterResolver object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581b748bbba14d889985906d837cc30407693014" translate="yes" xml:space="preserve">
          <source>Creates a new TFConfigClusterResolver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2aba7c5470d5eb419c4e9823b4c4dbd9330b6b" translate="yes" xml:space="preserve">
          <source>Creates a new TPUClusterResolver object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3debda8015e12aab4782bb93f93abcde9c51246a" translate="yes" xml:space="preserve">
          <source>Creates a new TensorFlow session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96eee3ccee0a16815ed8d92ca7c3570f8ca0b497" translate="yes" xml:space="preserve">
          <source>Creates a new TensorShape with the given dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd3d3d3655f825a5405dff8b30cb32f2d983ff5" translate="yes" xml:space="preserve">
          <source>Creates a new VariableScope with the given properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd321d623a1d9a58589160f7bc13592f6c27242" translate="yes" xml:space="preserve">
          <source>Creates a new checkpoint and manages it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbd13395cb70438d7a00c9d0fca191af62d7d76" translate="yes" xml:space="preserve">
          <source>Creates a new decorator with &lt;code&gt;op_type&lt;/code&gt; as the Operation type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b628608d5ba573feb116d344f69cb349e3822fd" translate="yes" xml:space="preserve">
          <source>Creates a new interactive TensorFlow session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec70e83ff2b102c79f771743e2010cdf1d4ceeb" translate="yes" xml:space="preserve">
          <source>Creates a new iterator from the given iterator resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bfa3868644f36a8cc3774148589bc7e7c2dc44" translate="yes" xml:space="preserve">
          <source>Creates a new server with the given definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac24f1e514d8ea4a6de4f1266c8e2b137ac68a4" translate="yes" xml:space="preserve">
          <source>Creates a new session on 'master'. If the session is not initialized and can be recovered from a checkpoint, recover it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc241a3a07e1a773a95b28b067b80ab4da84fbd" translate="yes" xml:space="preserve">
          <source>Creates a new single-process cluster running on the local host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a289a82df838a6af7195c8628dfeae2b529a6f9" translate="yes" xml:space="preserve">
          <source>Creates a new tensor by applying sparse &lt;code&gt;updates&lt;/code&gt; to individual values or slices within a tensor (initially zero for numeric, empty for string) of the given &lt;code&gt;shape&lt;/code&gt; according to indices. This operator is the inverse of the &lt;a href=&quot;gather_nd&quot;&gt;&lt;code&gt;tf.gather_nd&lt;/code&gt;&lt;/a&gt; operator which extracts values or slices from a given tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9689b2e03b59f1c69a7ebd6765a37b560ba24e" translate="yes" xml:space="preserve">
          <source>Creates a new variable with value &lt;code&gt;initial_value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccb2e02b121052c35507da3fd4e10a2d5c5a378" translate="yes" xml:space="preserve">
          <source>Creates a new variable with value &lt;code&gt;initial_value&lt;/code&gt;. (deprecated arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023a47bd0d205b3c7c89cc033ef7273abed99e6c" translate="yes" xml:space="preserve">
          <source>Creates a new, empty Graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531f5dd6dfafa0b7f47a1484bcf88d5c56fdfea4" translate="yes" xml:space="preserve">
          <source>Creates a new, uninitialized &lt;code&gt;Iterator&lt;/code&gt; based on the given handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebc27a47eef41faefc2998ece6784d46ed4b74d" translate="yes" xml:space="preserve">
          <source>Creates a new, uninitialized &lt;code&gt;Iterator&lt;/code&gt; with the given structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7d99d61c8daa617128da1b0e99f826da683af1" translate="yes" xml:space="preserve">
          <source>Creates a non-initialized &lt;code&gt;HashTable&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="954aad0fff3307a3ca033437e529e88cb4caef48" translate="yes" xml:space="preserve">
          <source>Creates a placeholder for a &lt;a href=&quot;../../../raggedtensor&quot;&gt;&lt;code&gt;tf.RaggedTensor&lt;/code&gt;&lt;/a&gt; that will always be fed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0285c8a4a74f436a49ca6eac5493a1385e827b0a" translate="yes" xml:space="preserve">
          <source>Creates a proper StopAtCheckpointStepHook based on chief status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0099f7fbfe3921133129c290529ab1240c19ed" translate="yes" xml:space="preserve">
          <source>Creates a queue that dequeues elements in a first-in first-out order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a7d2c7f107fed8d80911539d8928bb9b1743ad" translate="yes" xml:space="preserve">
          <source>Creates a recurrent neural network specified by RNNCell &lt;code&gt;cell&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13aa271091e27c868618cb48882361426d216ac7" translate="yes" xml:space="preserve">
          <source>Creates a recurrent neural network specified by RNNCell &lt;code&gt;cell&lt;/code&gt;. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584fc9cd79244a8a3866e248e175637dad494bf3" translate="yes" xml:space="preserve">
          <source>Creates a regularizer from its config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e941888a0c79bfd43b558f4a98f710517a86f06" translate="yes" xml:space="preserve">
          <source>Creates a representative dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6da34392933bd5a6754aee36179fdb9c5b4729" translate="yes" xml:space="preserve">
          <source>Creates a sequence of numbers that begins at &lt;code&gt;start&lt;/code&gt; and extends by increments of &lt;code&gt;delta&lt;/code&gt; up to but not including &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7028ca9d87589b94f54f8a30164f81c5906deeef" translate="yes" xml:space="preserve">
          <source>Creates a sequence of numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adec315fadc52ec22eac1d40cd8494ab075a0512" translate="yes" xml:space="preserve">
          <source>Creates a serving_input_receiver_fn that expects a serialized tf.Example fed into a string placeholder. The function parses the tf.Example according to the provided feature_spec, and returns all parsed Tensors as features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08cc65faa0b71a19974957a8b925fe7cd9efa321" translate="yes" xml:space="preserve">
          <source>Creates a slice helper object given a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7187fb0824f8944a2d7ea63667f6fb5fe279c9" translate="yes" xml:space="preserve">
          <source>Creates a summary file writer for the given log directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e205071bbe4032c5858b4b1565e7b943acc2ef16" translate="yes" xml:space="preserve">
          <source>Creates a table, the type of its keys and values are specified by key_dtype and value_dtype, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffcd4d0e4843eb6337c784184e8e0d31ee91dfe" translate="yes" xml:space="preserve">
          <source>Creates a table, the type of its keys and values are specified by the initializer. Before using the table you will have to initialize it. After initialization the table will be immutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="444286c290908b8c9c1c215b114f41b251b0325d" translate="yes" xml:space="preserve">
          <source>Creates a tensor by tiling &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a51664e2d719fc55ecfca51ca6d49573dc1682" translate="yes" xml:space="preserve">
          <source>Creates a tensor filled with a scalar value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba06c42578d7ce7fd6b359395e765ff921bc247d" translate="yes" xml:space="preserve">
          <source>Creates a tensor of n-grams based on &lt;code&gt;data&lt;/code&gt;. The n-grams are created by joining windows of &lt;code&gt;width&lt;/code&gt; adjacent strings from the inner axis of &lt;code&gt;data&lt;/code&gt; using &lt;code&gt;separator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c70acb1a6ce0ebdf1cce4040718e780ac776fd0" translate="yes" xml:space="preserve">
          <source>Creates a tensor with all elements set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565b504de4d207b520c8ac02edd8e05b73dcf8e4" translate="yes" xml:space="preserve">
          <source>Creates a tensor with all elements set to one (1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581bb558222224f33d84f79d9641fc7ea612ac05" translate="yes" xml:space="preserve">
          <source>Creates a tensor with all elements set to one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa70d9c12a3442e27268ca54ca6b644a26fb7c2" translate="yes" xml:space="preserve">
          <source>Creates a tensor with all elements set to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e49d69401e01838b559b6a2e80f239a44d17bb97" translate="yes" xml:space="preserve">
          <source>Creates a tf.compat.v1.Session for a chief.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c48c841efa8c5995999b18cd8b73ba1879d9c1" translate="yes" xml:space="preserve">
          <source>Creates a tf.compat.v1.Session for a worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08ab66819445e1798f2690764e20489b8664342" translate="yes" xml:space="preserve">
          <source>Creates a two-dimensional sparse tensor with ones along the diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09e468b5331f5b96d8842932dc12c5ababcc2e5" translate="yes" xml:space="preserve">
          <source>Creates a validated &lt;code&gt;EstimatorSpec&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a8f0f8d0de49ec858193e383feffaeef7a2faa" translate="yes" xml:space="preserve">
          <source>Creates a validated &lt;code&gt;EvalSpec&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f0101f87fb2b5a382a83ba4df1ace8801c7736" translate="yes" xml:space="preserve">
          <source>Creates a validated &lt;code&gt;TPUEstimatorSpec&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7665d662b9951da1bd2bcef49e0daea0f9e32b9" translate="yes" xml:space="preserve">
          <source>Creates a validated &lt;code&gt;TrainSpec&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c64a748f5365354d25020ab72ba1a0fede0523" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;AUC&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf32fd4aaecc2028fbbf5cd11811576079414ab" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;AbortedError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa7c2bb8871cda3f8761d3e2b6fee90bd21d8dc" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;AlreadyExistsError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d41aaca2bd7a5ab06e1a6d315b3065250d0f1e7" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;EmbeddingConfigSpec&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd34ba0cb07577f6d2dd5dfeb4f40b77cf2a90c7" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;IndexedSlices&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0cb357a29d9dace0614b2e5104cc8ecd1e5d40" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;InternalError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13c9245568bf124b8090559cd4af8ee224459e9" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;InvalidArgumentError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069596f9a8255d9027b7efde9ab37275c9f2f6d7" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;Iterator&lt;/code&gt; for enumerating the elements of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c4327e9684a45f1a8d2ed8976933c9d049ca8e" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;Iterator&lt;/code&gt; for enumerating the elements of this dataset. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8add767db5b8ef6acdc45d57923dc40edca4d6" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;Operation&lt;/code&gt; in this graph. (deprecated arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5c85b5747ff8200074b8993aaa7492c9ffe72c" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;Operation&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b41bea93d30381c96fda77807fc04f3e708bb2e" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;OutOfRangeError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d4eb5f4c5011435b8b89fe80b352737291ef94" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;RNN&lt;/code&gt; specified by RNNCell &lt;code&gt;cell&lt;/code&gt; and loop function &lt;code&gt;loop_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d56038ceb4716f09fb002640fd2e9513e6df89d" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;UnauthenticatedError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8c076d0cd1489b8a0a852270927c412ea0fe1f" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;UnavailableError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="419ec7687d9d8cf62c54bb3c38f58762ee6c4608" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;UnimplementedError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ed82d5ebd1e4520b5b1b4bd41da6d93401c226" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;UnknownError&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0c1d46c890b481f4f483355544d014e17b82b4" translate="yes" xml:space="preserve">
          <source>Creates an Estimator for running KMeans training and inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a7863c905c5cb2f603a805d3b76a664dd2cda5" translate="yes" xml:space="preserve">
          <source>Creates an absolute test srcdir path given a relative path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a3c1020a0e55766c41f4b6db4a02e1db0f6bf0" translate="yes" xml:space="preserve">
          <source>Creates an empty &lt;code&gt;DenseHashTable&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb4dd5ba16d2806e87c24eb14b5dca7ef985972" translate="yes" xml:space="preserve">
          <source>Creates an equivalent &lt;code&gt;EstimatorSpec&lt;/code&gt; used by CPU train/eval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5aee4e0c6e21b91e37e5ef03d597ab5d68f172" translate="yes" xml:space="preserve">
          <source>Creates an object that stores options for SavedModel saving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0337660a28caedf69d7a32be8e29500abd42158c" translate="yes" xml:space="preserve">
          <source>Creates an optimizer from its config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97eb73721cf433d3e0e4036cc892f2b0e2f69294" translate="yes" xml:space="preserve">
          <source>Creates an serving_input_receiver_fn that expects all features to be fed directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598cf73a787ed73a1db1704bbc4def295296f758" translate="yes" xml:space="preserve">
          <source>Creates another prototype of message, reads the ascii message into it and then compares them using self._AssertProtoEqual().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74774e03852de882d50c4f7ca08d3278b1699a84" translate="yes" xml:space="preserve">
          <source>Creates batches by randomly shuffling conditionally-enqueued tensors. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72f2998f426b4fd2cc32e54ace8a7cf36b6dfa1" translate="yes" xml:space="preserve">
          <source>Creates batches by randomly shuffling tensors. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6e0ff782417328856ac1d655b7a381d53ee9de" translate="yes" xml:space="preserve">
          <source>Creates batches of tensors in &lt;code&gt;tensors&lt;/code&gt;. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c812575bb7760f1c2e4ed6909010201f31dbc0cd" translate="yes" xml:space="preserve">
          <source>Creates classification signature from given examples and predictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b127bad1a3d467e543971d36aef7d031248065e9" translate="yes" xml:space="preserve">
          <source>Creates early-stopping hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6a8d29fe9897b019384f4182a489b64aa39548" translate="yes" xml:space="preserve">
          <source>Creates hook to stop if metric does not decrease within given max steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991a94958a00472837ca467ca26e11b69a4bb584" translate="yes" xml:space="preserve">
          <source>Creates hook to stop if metric does not increase within given max steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fffe2d2da220f0017c61f52c12370dc0930d06" translate="yes" xml:space="preserve">
          <source>Creates hook to stop if the given metric is higher than the threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b55f8d0ac6d9df7f06d425b5dc8d00a76e3290" translate="yes" xml:space="preserve">
          <source>Creates hook to stop if the given metric is lower than the threshold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa3d59e5fe80ee4c741f29a54d06e4479bc1c76" translate="yes" xml:space="preserve">
          <source>Creates metrics. See &lt;code&gt;base_head.Head&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b72865ad523ab7eb92c6c461c728d47c6836d7" translate="yes" xml:space="preserve">
          <source>Creates operations if needed and finalizes the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffba7afc04add1b04c4c1ab09f0bcbaaafd2ce8c" translate="yes" xml:space="preserve">
          <source>Creates parsing spec dictionary from input feature_columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160dc0f052b7e0ad66e3172dbd1f529de2bf61a6" translate="yes" xml:space="preserve">
          <source>Creates prediction signature from given inputs and outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60aa07c989d20f010d2af2757864457938204e18" translate="yes" xml:space="preserve">
          <source>Creates regression signature from given examples and predictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99c1abba623015928aa4766ffd4a6443bcc8173" translate="yes" xml:space="preserve">
          <source>Creates resource variables by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55c8a52aa3632c79643ae04de1de5f2c719f322" translate="yes" xml:space="preserve">
          <source>Creates the LossScale from its config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e64221533b1262260075b8b8a21ebba77de1476" translate="yes" xml:space="preserve">
          <source>Creates the dynamic loss scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3328b695be343cec6706c12e18009537358175d" translate="yes" xml:space="preserve">
          <source>Creates the fixed loss scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679621789cb26fc424067e2997e860d8a6db5e5e" translate="yes" xml:space="preserve">
          <source>Creates the strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572defabc2aa0c3274505d75fc0475a7e5ebe681" translate="yes" xml:space="preserve">
          <source>Creates the variables of the layer (optional, for subclass implementers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de5871cddd6e35a5558896691f44996bd019b8b" translate="yes" xml:space="preserve">
          <source>Creating new subclasses of TypeSpec (outside of TensorFlow core) is not currently supported. In particular, we may make breaking changes to the private methods and properties defined by this base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44016ffa3667ca601004fbf59e0bd206088636b9" translate="yes" xml:space="preserve">
          <source>Critical section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97de07515583ba3fcd5c6db1ed54989d29381cf6" translate="yes" xml:space="preserve">
          <source>Crop the central region of the image(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3dc3fa2ea0ff282710cf4faf346e3262919810" translate="yes" xml:space="preserve">
          <source>Crop the start and end of dimensions &lt;code&gt;[1, ..., M]&lt;/code&gt; of &lt;code&gt;reshaped_permuted&lt;/code&gt; according to &lt;code&gt;crops&lt;/code&gt; to produce the output of shape: [batch / prod(block_shape),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c26f1f2d7517b76b8f4f6d6f018455e0c68f4dfd" translate="yes" xml:space="preserve">
          <source>Crop the start and end of dimensions &lt;code&gt;[1, ..., M]&lt;/code&gt; of &lt;code&gt;reshaped_permuted&lt;/code&gt; according to &lt;code&gt;crops&lt;/code&gt; to produce the output of shape: [batch / prod(block_shape), input_shape[1] * block_shape[0] - crops[0,0] - crops[0,1], ..., input_shape[M] * block_shape[M-1] - crops[M-1,0] - crops[M-1,1], input_shape[M+1], ..., input_shape[N-1]] Some examples: (1) For the following input of shape &lt;code&gt;[4, 1, 1, 1]&lt;/code&gt;, &lt;code&gt;block_shape = [2, 2]&lt;/code&gt;, and &lt;code&gt;crops = [[0, 0], [0, 0]]&lt;/code&gt;: &lt;code&gt;[[[[1]]], [[[2]]], [[[3]]], [[[4]]]]&lt;/code&gt; The output tensor has shape &lt;code&gt;[1, 2, 2, 1]&lt;/code&gt; and value: &lt;code&gt;x = [[[[1], [2]], [[3], [4]]]]&lt;/code&gt; (2) For the following input of shape &lt;code&gt;[4, 1, 1, 3]&lt;/code&gt;, &lt;code&gt;block_shape = [2, 2]&lt;/code&gt;, and &lt;code&gt;crops = [[0, 0], [0, 0]]&lt;/code&gt;: &lt;code&gt;[[[1, 2, 3]], [[4, 5, 6]], [[7, 8, 9]], [[10, 11, 12]]]&lt;/code&gt; The output tensor has shape &lt;code&gt;[1, 2, 2, 3]&lt;/code&gt; and value: &lt;code&gt;x = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]&lt;/code&gt; (3) For the following input of shape &lt;code&gt;[4, 2, 2, 1]&lt;/code&gt;, &lt;code&gt;block_shape = [2, 2]&lt;/code&gt;, and &lt;code&gt;crops = [[0, 0], [0, 0]]&lt;/code&gt;: &lt;code&gt;x = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]], [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]&lt;/code&gt; The output tensor has shape &lt;code&gt;[1, 4, 4, 1]&lt;/code&gt; and value: &lt;code&gt;x = [[[1], [2], [3], [4]], [[5], [6], [7], [8]], [[9], [10], [11], [12]], [[13], [14], [15], [16]]]&lt;/code&gt; (4) For the following input of shape &lt;code&gt;[8, 1, 3, 1]&lt;/code&gt;, &lt;code&gt;block_shape = [2, 2]&lt;/code&gt;, and &lt;code&gt;crops = [[0, 0], [2, 0]]&lt;/code&gt;: &lt;code&gt;x = [[[[0], [1], [3]]], [[[0], [9], [11]]], [[[0], [2], [4]]], [[[0], [10], [12]]], [[[0], [5], [7]]], [[[0], [13], [15]]], [[[0], [6], [8]]], [[[0], [14], [16]]]]&lt;/code&gt; The output tensor has shape &lt;code&gt;[2, 2, 4, 1]&lt;/code&gt; and value: &lt;code&gt;x = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]]], [[[9], [10], [11], [12]], [[13], [14], [15], [16]]]]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20831b87522509671362e620aa9871d715b116ca" translate="yes" xml:space="preserve">
          <source>Cropped and/or padded image. If &lt;code&gt;images&lt;/code&gt; was 4-D, a 4-D float Tensor of shape &lt;code&gt;[batch, new_height, new_width, channels]&lt;/code&gt;. If &lt;code&gt;images&lt;/code&gt; was 3-D, a 3-D float Tensor of shape &lt;code&gt;[new_height, new_width, channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b24dd611406bbc5234515dddac7290ecac65f57" translate="yes" xml:space="preserve">
          <source>Cropping layer for 1D input (e.g. temporal sequence).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17417f54415e67161c08915af52f76e6f675b49" translate="yes" xml:space="preserve">
          <source>Cropping layer for 2D input (e.g. picture).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9017612b939930d6019faa2c6ef003f4c235e672" translate="yes" xml:space="preserve">
          <source>Cropping layer for 3D data (e.g. spatial or spatio-temporal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3126d5f7ce71ad28d41a9d6e58c2ecc1ce0918c8" translate="yes" xml:space="preserve">
          <source>Crops an image to a specified bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7661bba6547ae1eb1b71d97e6eb538b196ffbd8d" translate="yes" xml:space="preserve">
          <source>Crops and/or pads an image to a target width and height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a3c2196c72b79987e546f44fb1c00f8e56db70" translate="yes" xml:space="preserve">
          <source>Cross-entropy loss using &lt;a href=&quot;../../../nn/sparse_softmax_cross_entropy_with_logits&quot;&gt;&lt;code&gt;tf.nn.sparse_softmax_cross_entropy_with_logits&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d928a566b33d4f1b3050cd51ade8a0bb84851a" translate="yes" xml:space="preserve">
          <source>Crossed features will be hashed according to &lt;code&gt;hash_bucket_size&lt;/code&gt;. Conceptually, the transformation can be thought of as: Hash(cartesian product of features) % &lt;code&gt;hash_bucket_size&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1c126265282e3f2d2431d7948b50bb0bb6eeba" translate="yes" xml:space="preserve">
          <source>Cumulative distribution function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75b44a295e5638ad481b8bc599c5787f9a314ab" translate="yes" xml:space="preserve">
          <source>Cumulative product of the values in a tensor, alongside the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ff28c8b384e5523f668275e518ef3829e82f3c" translate="yes" xml:space="preserve">
          <source>Cumulative sum of the values in a tensor, alongside the specified axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef766c955bb6e046881458146808a381e467887" translate="yes" xml:space="preserve">
          <source>Current limitations of this approach are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a37253f442ff65a379b81a71c7fc195c4162234" translate="yes" xml:space="preserve">
          <source>Current limitations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218658ffaf3603bad17911d51b48e7754df7d53b" translate="yes" xml:space="preserve">
          <source>Current thread device policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff8d8683985097d304ac7488924893a928cb97d" translate="yes" xml:space="preserve">
          <source>Current thread execution mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae1759d0e469e127e330b23e633b2b17ae5f35c" translate="yes" xml:space="preserve">
          <source>Currently only Types I, II and III are supported. Type I is implemented using a length &lt;code&gt;2N&lt;/code&gt; padded &lt;a href=&quot;rfft&quot;&gt;&lt;code&gt;tf.signal.rfft&lt;/code&gt;&lt;/a&gt;. Type II is implemented using a length &lt;code&gt;2N&lt;/code&gt; padded &lt;a href=&quot;rfft&quot;&gt;&lt;code&gt;tf.signal.rfft&lt;/code&gt;&lt;/a&gt;, as described here: &lt;a href=&quot;https://dsp.stackexchange.com/a/10606&quot;&gt;Type 2 DCT using 2N FFT padded (Makhoul)&lt;/a&gt;. Type III is a fairly straightforward inverse of Type II (i.e. using a length &lt;code&gt;2N&lt;/code&gt; padded &lt;a href=&quot;irfft&quot;&gt;&lt;code&gt;tf.signal.irfft&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2b9b46d79ffd3a3cad5bcd6b83a296dbc67ac9" translate="yes" xml:space="preserve">
          <source>Currently only Types I, II and III are supported. Type III is the inverse of Type II, and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca93f765e27ea9b7f8d0d8e5f2c78de86b79fdb" translate="yes" xml:space="preserve">
          <source>Currently only one dimension of the full variable can be sliced, and the full variable can be reconstructed by the concatenation of the returned list along that dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2604fb9ef003f431e4c94551a344d7d19ce4e875" translate="yes" xml:space="preserve">
          <source>Currently supports directional feature contributions (DFCs). For each instance, DFCs indicate the aggregate contribution of each feature. See https://arxiv.org/abs/1312.1121 and http://blog.datadive.net/interpreting-random-forests/ for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cf03db2484c414f2e6b82636f24bfeabc4d8c4" translate="yes" xml:space="preserve">
          <source>Currently this is not available on Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346d5583a118e159e8f6b86cd5a8c087d31a1450" translate="yes" xml:space="preserve">
          <source>Currently this is one of the static instances &lt;a href=&quot;https://www.tensorflow.org/probability/api_docs/python/tfp/distributions#FULLY_REPARAMETERIZED&quot;&gt;&lt;code&gt;distributions.FULLY_REPARAMETERIZED&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.tensorflow.org/probability/api_docs/python/tfp/distributions#NOT_REPARAMETERIZED&quot;&gt;&lt;code&gt;distributions.NOT_REPARAMETERIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29f68d1dc00639b55bf5a3006b28891ef4ea2a0" translate="yes" xml:space="preserve">
          <source>Currently, mixed precision is only enabled on NVIDIA Tensor Core GPUs with Compute Capability 7.0 and above (Volta, Turing, or newer architectures). The parts of the graph on CPUs and TPUs are untouched by the graph rewrite. TPU support is coming soon. CPUs are not supported, as CPUs do not run float16 operations faster than float32 operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f941ed8ef88a2a3915ddacf8f12c07ef80c9ee6" translate="yes" xml:space="preserve">
          <source>Currently, only tensors in the first argument to the layer's &lt;code&gt;call&lt;/code&gt; method are casted. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3fd6657a97c57c809a1d88d2f10befe106ac52" translate="yes" xml:space="preserve">
          <source>Currently, only two-dimensional &lt;code&gt;SparseTensors&lt;/code&gt; are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08700df59e99d81d23a5b0cd6cba2a3b6c8188d8" translate="yes" xml:space="preserve">
          <source>Currently, the &lt;code&gt;.fit()&lt;/code&gt; method of the &lt;code&gt;Model&lt;/code&gt; class will include the following quantities in the &lt;code&gt;logs&lt;/code&gt; that it passes to its callbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7ebd659a763be272082145bdf38060b5570a9b" translate="yes" xml:space="preserve">
          <source>Custom getters in the variable scope will eventually resolve down to these custom creators when they do create variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c7123acb5357992b938eabaaa5443a3fc28dcd" translate="yes" xml:space="preserve">
          <source>Custom layers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebea4e780363f7425b14cc46313505c45f9c1762" translate="yes" xml:space="preserve">
          <source>Custom model initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd31c0de4783a2b79c8b1bf40469673472246d86" translate="yes" xml:space="preserve">
          <source>Custom training loop with Keras models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd28e278f7ec4117d178bbb49965beabf4d9e3d5" translate="yes" xml:space="preserve">
          <source>Custom training with tf.distribute.Strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324a2bea14dd9235de00e482f98cacd840e2f922" translate="yes" xml:space="preserve">
          <source>Custom training: basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee533c26fdfc7e1c2323fb64c8debea4dc6e4a6" translate="yes" xml:space="preserve">
          <source>Custom training: walkthrough</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1a5b69a37097d2e359d4c80246a987dcee25a0" translate="yes" xml:space="preserve">
          <source>Customization basics: tensors and operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e1cd94f797aff9060e823b0092d1dfc21c2a04e" translate="yes" xml:space="preserve">
          <source>CycleGAN</source>
          <target state="translated">CycleGAN</target>
        </trans-unit>
        <trans-unit id="ba870ba3692620df2dfcc8645c38074d7f54e958" translate="yes" xml:space="preserve">
          <source>DEPRECATED FUNCTION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7abc10a3de0c59ad2dd320c1325be25abc82c5f9" translate="yes" xml:space="preserve">
          <source>DEPRECATED FUNCTION (deprecated arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49433b31b269eaa0c0c9f9de16460f775023b5d" translate="yes" xml:space="preserve">
          <source>DEPRECATED FUNCTION ARGUMENT VALUES (deprecated arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22f0e687d1c9611bd7884fb1ed479d04c0330c3" translate="yes" xml:space="preserve">
          <source>DEPRECATED FUNCTION ARGUMENTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c07d4b7fe8dc21f4d817b1b829f074233d5f2e" translate="yes" xml:space="preserve">
          <source>DEPRECATED FUNCTION ARGUMENTS (deprecated arguments)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb9bc93eb38d7d131d996c1a3d308c88b6db963" translate="yes" xml:space="preserve">
          <source>DEPRECATED. Same as name_scope above, just different argument order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaad74b5c7943f812d0db15a66bbbbcb323bfaca" translate="yes" xml:space="preserve">
          <source>DEPRECATED:</source>
          <target state="translated">DEPRECATED:</target>
        </trans-unit>
        <trans-unit id="cbcd43ea4041a7f26a57176fb1ce311cc717e58e" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Please use &lt;a href=&quot;lstmcell&quot;&gt;&lt;code&gt;tf.compat.v1.nn.rnn_cell.LSTMCell&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6231d7319b9c7fbc0f1c03a68b57c7dd6cd159" translate="yes" xml:space="preserve">
          <source>DEPRECATED: This method is not available in TF 2.x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e704d11acdff9ab42d3bac04827ec0280132b4cf" translate="yes" xml:space="preserve">
          <source>DEPRECATED: This method is not available in TF 2.x. Please switch to using &lt;code&gt;experimental_run_v2&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049f59a553394e1d4233243292876013f67db74b" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use &lt;code&gt;__floordiv__&lt;/code&gt; via &lt;code&gt;x // y&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba60916e42a8d55d68e5e32a9645a6e599cc7a8" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b46f45ef7486525d4449a76382c9e6f80be06df" translate="yes" xml:space="preserve">
          <source>DEPRECATED: Use set_last_checkpoints_with_time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21763142e1c753522b0e1bda26b4ab451429381" translate="yes" xml:space="preserve">
          <source>DEPRECATED: please use &lt;code&gt;experimental_run_v2&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263b74a9efd71fbf7593b63e10978fdf96ba89d0" translate="yes" xml:space="preserve">
          <source>DEPRECATED: use .extended.steps_per_run instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894c355c62f2afbc691f0dee5827157d1deceb17" translate="yes" xml:space="preserve">
          <source>DO NOT USE, DEV AND TESTING ONLY AT THE MOMENT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eac48b93690b886a2c5217e6c0df763d728dd09" translate="yes" xml:space="preserve">
          <source>Data can be inserted by calling the insert method and removed by calling the remove method. It does not support initialization via the init method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1b2ef29a5e422a55831b3bc028b0a40b27832d" translate="yes" xml:space="preserve">
          <source>Data from the given dataset will be distributed evenly across all the compute replicas. We will assume that the input dataset is batched by the global batch size. With this assumption, we will make a best effort to divide each batch across all the replicas (one or more workers). If this effort fails, an error will be thrown, and the user should instead use &lt;code&gt;make_input_fn_iterator&lt;/code&gt; which provides more control to the user, and does not try to divide a batch across replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94e1e6d427f18c699f0dde0633d61229cdef47b" translate="yes" xml:space="preserve">
          <source>Deciding when to use &lt;code&gt;sparse_tensor_dense_matmul&lt;/code&gt; vs. &lt;code&gt;matmul&lt;/code&gt;(a_is_sparse=True):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c4812f6a9e55fa86bb4c6f63978f7913ad96a0" translate="yes" xml:space="preserve">
          <source>Declares one flag as key to the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86bec96ecf1b1e832acec393f4288928ef48e13" translate="yes" xml:space="preserve">
          <source>Declares that all flags key to a module are key to the current module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5d257849c5d9a8f8823b25e77908bd89f84d6f" translate="yes" xml:space="preserve">
          <source>Declares that the current module will not define any more key flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b84226d6bee047a9d1ce565fec2ba410f14d7cc" translate="yes" xml:space="preserve">
          <source>Decode a 16-bit PCM WAV file to a float tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b442621a1a15b409309007671059a8a0b7876c8a" translate="yes" xml:space="preserve">
          <source>Decode a JPEG-encoded image to a uint8 tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2892ea9b57a93cee5e3dc2a3e5f1a4bb4da7cf45" translate="yes" xml:space="preserve">
          <source>Decode a PNG-encoded image to a uint8 or uint16 tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2467b3385814fa6ec0d29be3238dd15d5ae5d4" translate="yes" xml:space="preserve">
          <source>Decode and Crop a JPEG-encoded image to a uint8 tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236856ed9e20e82739eb5a91865aa426a5e1a70b" translate="yes" xml:space="preserve">
          <source>Decode the first frame of a BMP-encoded image to a uint8 tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485d99d61698a8090e6b79035964f645d86ffc42" translate="yes" xml:space="preserve">
          <source>Decode the frame(s) of a GIF-encoded image to a uint8 tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2295ac38b509d5a35efa0254a917c0d09c638339" translate="yes" xml:space="preserve">
          <source>Decode web-safe base64-encoded strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8356a2fcfa2f2d06ec99f5713c2facb8582e5f1" translate="yes" xml:space="preserve">
          <source>Decodes each string in &lt;code&gt;input&lt;/code&gt; into a sequence of Unicode code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e6797a23feed4bce836681cee90784693c2d85" translate="yes" xml:space="preserve">
          <source>Decodes each string into a sequence of code points with start offsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcb3cdfcdc0a74cf830503987f4ca1eb015949d" translate="yes" xml:space="preserve">
          <source>Decodes the output of a softmax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207c91d09cdd068898f1df3b23ba60e85476291e" translate="yes" xml:space="preserve">
          <source>Decompress strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5596baca060a01487bb1c0a5feb440006d369613" translate="yes" xml:space="preserve">
          <source>Deconvolutional Networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8725b900fdf6457097a4abff7a5354b0e2e6444" translate="yes" xml:space="preserve">
          <source>Decorator that suppresses the conversion of a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1ce45dac7ab60feb57df27b8b258264370653e" translate="yes" xml:space="preserve">
          <source>Decorator to automatically enter the module name scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d05e7e0927783a5a7279d83c9cfca2658c6e575d" translate="yes" xml:space="preserve">
          <source>Decorator to define a function with a custom gradient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7077d467b462dce328dfe23e4c89a9ace01eab" translate="yes" xml:space="preserve">
          <source>Decorator to register a KL divergence implementation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae33cb12926894d3a3a33f143996db3ba15c712" translate="yes" xml:space="preserve">
          <source>Deep Convolutional Generative Adversarial Network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966d07caac0afcf62766dc6b82f91a4bb08741db" translate="yes" xml:space="preserve">
          <source>DeepDream</source>
          <target state="translated">DeepDream</target>
        </trans-unit>
        <trans-unit id="7336bee47f984844a6ccb442b975695766ada0e0" translate="yes" xml:space="preserve">
          <source>Default blank label is 0 rather num_classes - 1, unless overridden by blank_index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef05aabadfb17f0d183e950d089cfb9e4fd4f247" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;'.*'&lt;/code&gt;, which warm-starts all variables in the TRAINABLE_VARIABLES collection. Note that this excludes variables such as accumulators and moving statistics from batch norm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d5c7547ce7aee3134c5f97f9dc0bc88cc973f1" translate="yes" xml:space="preserve">
          <source>Defined in &lt;code&gt;build_toco_convert_protos&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89e6516f993d65242cb407800f282e20eb16a5d" translate="yes" xml:space="preserve">
          <source>Defines an alias flag for an existing one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57c811cf1e371c14a3f5c230173a142d1517e90" translate="yes" xml:space="preserve">
          <source>Degrees of freedom in these Student's t distribution(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788f61f9abe712215a88dd8cd29883032cadae11" translate="yes" xml:space="preserve">
          <source>Delays execution until global step reaches &lt;code&gt;wait_until_step&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76ad2aa2f5eedb98f4996d513a556a80312f2e0" translate="yes" xml:space="preserve">
          <source>Delegate object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709929e4ae84eb7ca7c628e0de7567dadaf37f91" translate="yes" xml:space="preserve">
          <source>Delete the tensor for the given tensor handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ba9a176accb29ae9360768be322473c8520c6a" translate="yes" xml:space="preserve">
          <source>Delete the tensor of a given tensor handle. The tensor is produced in a previous run() and stored in the state of the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4ac2f51d2022691007eb36f4adc0b99fb82d87" translate="yes" xml:space="preserve">
          <source>Deletes everything under dirname recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff25810b13d316e42b6cb793e4515c38775595c" translate="yes" xml:space="preserve">
          <source>Deletes everything under path recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d10726e8af9b16cbef1a6b6cc383123e6d71e67" translate="yes" xml:space="preserve">
          <source>Deletes old checkpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a43a032e38e5a288528379d6e7b39702c6bcfd9" translate="yes" xml:space="preserve">
          <source>Deletes the file located at 'filename'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acafd23d1590f76f65e8cbbbf3578d03de11ec7c" translate="yes" xml:space="preserve">
          <source>Deletes the path located at 'path'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c144dacf46eaf0bd75287354618cf4e2bb40b66e" translate="yes" xml:space="preserve">
          <source>Denote this distribution (&lt;code&gt;self&lt;/code&gt;) by &lt;code&gt;P&lt;/code&gt; and the &lt;code&gt;other&lt;/code&gt; distribution by &lt;code&gt;Q&lt;/code&gt;. Assuming &lt;code&gt;P, Q&lt;/code&gt; are absolutely continuous with respect to one another and permit densities &lt;code&gt;p(x) dr(x)&lt;/code&gt; and &lt;code&gt;q(x) dr(x)&lt;/code&gt;, (Shanon) cross entropy is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98253d99426fdd6c2f9d343bfe84d6d639f7820" translate="yes" xml:space="preserve">
          <source>Denote this distribution (&lt;code&gt;self&lt;/code&gt;) by &lt;code&gt;p&lt;/code&gt; and the &lt;code&gt;other&lt;/code&gt; distribution by &lt;code&gt;q&lt;/code&gt;. Assuming &lt;code&gt;p, q&lt;/code&gt; are absolutely continuous with respect to reference measure &lt;code&gt;r&lt;/code&gt;, the KL divergence is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a7c0f23ce15d564728401a9b89e0cabfe2865f" translate="yes" xml:space="preserve">
          <source>Dense &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;[d_0, d_1, ..., d_{n-1}, e_1, ..., e_m]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8791e97023a20e874f0c8f399f609b2c3680280" translate="yes" xml:space="preserve">
          <source>Dense &lt;code&gt;Tensor&lt;/code&gt; of shape &lt;code&gt;output_shape&lt;/code&gt;. Has the same type as &lt;code&gt;sparse_values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cb995a582ebe65bd2d535467e9c4988dd99651" translate="yes" xml:space="preserve">
          <source>DenseNet models for Keras.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e1a2410b1aa4b24175f291425bf819cf53fb1d" translate="yes" xml:space="preserve">
          <source>Densely-connected layer class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf42eb69012f2801ea8fd434598b04ec98378ea" translate="yes" xml:space="preserve">
          <source>Depending on how a value is produced, it will have a type that will determine how it may be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6847c56cafa8af4fd0ebc1002fa5ac6f44de93" translate="yes" xml:space="preserve">
          <source>Depending on the value of &lt;code&gt;create_scope_now_&lt;/code&gt;, the full variable scope may be captured either at the time of first call or at the time of construction. If this option is set to True, then all Tensors created by repeated calls to the template will have an extra trailing _N+1 to their name, as the first time the scope is entered in the Template constructor no Tensors are created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa80e5b0b146f83ebf5654015ec9f40237fed373" translate="yes" xml:space="preserve">
          <source>Depending on the value of &lt;code&gt;mode&lt;/code&gt;, different arguments are required. Namely</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deef94320159c86fc9e3451901bfa47003543b41" translate="yes" xml:space="preserve">
          <source>Deprecated accessor for &lt;code&gt;rank&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3545ee43b5ab8c55f06a553cf7999b9368857e6b" translate="yes" xml:space="preserve">
          <source>Deprecated: context manager for defining an op that creates variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2aec61210efe7a54904fc1f746ff1d472cb975" translate="yes" xml:space="preserve">
          <source>Depth of recursively defined circulant blocks defining this &lt;code&gt;Operator&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a481dbf1f6bb3750e69588362bde491788c512" translate="yes" xml:space="preserve">
          <source>DepthToSpace for tensors of type T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bbcd2586757ade8a52d9b74b565f89ac884fde" translate="yes" xml:space="preserve">
          <source>Depthwise 2-D convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d582e99dc4651cf1d1133de6e3d1aa627a1101" translate="yes" xml:space="preserve">
          <source>Depthwise Separable convolutions consists in performing just the first step in a depthwise spatial convolution (which acts on each input channel separately). The &lt;code&gt;depth_multiplier&lt;/code&gt; argument controls how many output channels are generated per input channel in the depthwise step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adaa550447a3e2ecb214e5bf1ae267e1a96b5ad7" translate="yes" xml:space="preserve">
          <source>Depthwise separable 1D convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6320cfe678a4ea6b51672b561f9a20ee3348c515" translate="yes" xml:space="preserve">
          <source>Depthwise separable 2D convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f99e6a33b38185d6d75c72dbcc25356564e8c3" translate="yes" xml:space="preserve">
          <source>Dequantize the 'input' tensor into a float Tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4474849cc2df6d86e61b18d672cfb80fe75eef55" translate="yes" xml:space="preserve">
          <source>Dequeues and concatenates &lt;code&gt;n&lt;/code&gt; elements from this queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fc2fa27d509d0699f9dbf4280a3318cad5a7e4" translate="yes" xml:space="preserve">
          <source>Dequeues one element from this queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fea48b74ef02300254888ef68413cabf43227b" translate="yes" xml:space="preserve">
          <source>Derive from TFDecorator. If your decorator needs to be stateful, you can implement it in terms of a TFDecorator. Store whatever state you need in your derived class, and implement the &lt;code&gt;__call__&lt;/code&gt; method to do your work before calling into your target. You can retrieve the target via &lt;code&gt;super(MyDecoratorClass, self).decorated_target&lt;/code&gt;, and call it with whatever parameters it needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f7c9a068262146a4b1c79a85a7960a5591cc6a" translate="yes" xml:space="preserve">
          <source>Describes a tf.Tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32652d48b1fad512836723a86e079f940afdc37" translate="yes" xml:space="preserve">
          <source>Describes how samples from the distribution are reparameterized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfa7c4c52658030196138b4bf6655b1212d5b18" translate="yes" xml:space="preserve">
          <source>Describes how to reduce training loss over batch, such as mean or sum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55da83fa80211247611216ffd730dee15d9b5242" translate="yes" xml:space="preserve">
          <source>Describes the key flags of a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ff623519bdf4b87f2f39541c23f9598d5576f9" translate="yes" xml:space="preserve">
          <source>Describes the key flags of the main module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a9a0513be66913b0fe073e1d4410ed668b28ae" translate="yes" xml:space="preserve">
          <source>Description in terms of block circulant matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34f1648ea85089546563604d147ec5884795e10" translate="yes" xml:space="preserve">
          <source>Description in terms of circulant matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2363d5e2bb68e3c5fed4a961698721c41e17180" translate="yes" xml:space="preserve">
          <source>Description in terms of the frequency spectrum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574ce105a2b9548583ff01460193b7bc46e62262" translate="yes" xml:space="preserve">
          <source>Description in terms of toeplitz matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7acb9c50fabbcfd0933ba17a86343a95e68d864" translate="yes" xml:space="preserve">
          <source>Deserialize and concatenate &lt;code&gt;SparseTensors&lt;/code&gt; from a serialized minibatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8138eea3ae3bd882bf2738aa9b0a3c49a1e58184" translate="yes" xml:space="preserve">
          <source>Destroy Keras' multiprocessing pools to prevent deadlocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4b0d84e6d39410d54962d37420d376420cfede" translate="yes" xml:space="preserve">
          <source>Destroys the current TF graph and creates a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698c12a1ba874259b706de2407b81264eeabb2c7" translate="yes" xml:space="preserve">
          <source>Detailed documentation and user guides are available at &lt;a href=&quot;https://keras.io&quot;&gt;keras.io&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ae4836b7724847e03dabc02d9799fbc8a129cd" translate="yes" xml:space="preserve">
          <source>Details about target device. Converter optimizes the generated model for specific device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daaad0084c2604185e45c5a29dc6efeff0b7fce" translate="yes" xml:space="preserve">
          <source>Details:</source>
          <target state="translated">Details:</target>
        </trans-unit>
        <trans-unit id="d37809ddcf2725dc0f901a5355b093808657da31" translate="yes" xml:space="preserve">
          <source>Detects whether an image is a BMP, GIF, JPEG, or PNG, and performs the appropriate operation to convert the input bytes &lt;code&gt;string&lt;/code&gt; into a &lt;code&gt;Tensor&lt;/code&gt; of type &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbbc35dcfc0768e90f221c53345be58d7ec1fb4" translate="yes" xml:space="preserve">
          <source>Determinant for every batch member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff2235254d35d45328ecb4fcc386798197d81794" translate="yes" xml:space="preserve">
          <source>Determine if this &lt;code&gt;ReparameterizationType&lt;/code&gt; is equal to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744f4a46331aba2df2ef5b5a9fce42dd16b4ae99" translate="yes" xml:space="preserve">
          <source>Determine the script codes of a given tensor of Unicode integer code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24402127a02a2b1d7c98e06c1b8df0fe318d5f0b" translate="yes" xml:space="preserve">
          <source>Determine whether a SignatureDef can be served by TensorFlow Serving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827f1de4f2abed9cb79b44d5e33fdcd448edc53f" translate="yes" xml:space="preserve">
          <source>Determined at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df931c698a6144150cfe5c9bb49f74600a3e5b7a" translate="yes" xml:space="preserve">
          <source>Determines the number of threads used by independent non-blocking operations. 0 means the system picks an appropriate number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96551b4beef0c5f15c88283ebced74ed6ba11e0" translate="yes" xml:space="preserve">
          <source>Determines validity of argument and returns the correct element of enum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378b184dbd8a4f30c2a97297f944256faf0e3411" translate="yes" xml:space="preserve">
          <source>Determines whether a path exists or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64e38fe029607c00e9d80234625d0d916b62a78" translate="yes" xml:space="preserve">
          <source>Deterministically generates and returns the set of all possible classes. For testing purposes. There is no need to use this, since you might as well use full softmax or full logistic regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74d853a71c02fd9f56e1b1afef18d2e5314a808" translate="yes" xml:space="preserve">
          <source>Developers who need to create their own 'Parser' classes for options which can appear multiple times can call this module function to register their flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a78b5ef6fd80e8c5f9a04c8552fb01791d8d15" translate="yes" xml:space="preserve">
          <source>Developing new regularizers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aec0bcef013fa0c33bebd468076f9b25dd5ba86" translate="yes" xml:space="preserve">
          <source>Device Functions are used in &lt;code&gt;with tf.device(device_function):&lt;/code&gt; statement to automatically assign devices to &lt;code&gt;Operation&lt;/code&gt; objects as they are constructed, Device constraints are added from the inner-most context first, working outwards. The merging behavior adds constraints to fields that are yet unset by a more inner context. Currently the fields are (job, task, cpu/gpu).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c15d51d610efb46cdd3621aaa07461d21c32cc4" translate="yes" xml:space="preserve">
          <source>Device index: The device index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8770f776d4f8facc1f307617c3a3a7933db67db4" translate="yes" xml:space="preserve">
          <source>Device type: The device type string (e.g. &quot;CPU&quot; or &quot;GPU&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7044753b220f46c9999cd599f5ae108a4835ae9b" translate="yes" xml:space="preserve">
          <source>Device(s) for non-slot variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ff24f8580c8036f9e1c8c4ac167f68d0f2bed6" translate="yes" xml:space="preserve">
          <source>Device, colocation and dependencies stacks are not thread-local be default. If multiple threads access them, then the state is shared. This means that one thread may affect the behavior of another thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f5d33c90e0d9798d9a480cbc5070c0dbe280ed8" translate="yes" xml:space="preserve">
          <source>Dictionary of configured experimental optimizer options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728b0a7067cfc907b74add2ff5e454b6f21b5a06" translate="yes" xml:space="preserve">
          <source>Dictionary of parameter names mapped to their values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692e97759c5554276675078a2fefb82c8e19cbd6" translate="yes" xml:space="preserve">
          <source>Dictionary of parameters used to instantiate this &lt;code&gt;Distribution&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a129d5879607993b9a5af9730ed1d34c8749054e" translate="yes" xml:space="preserve">
          <source>Dictionary: configuration dictionary. - Keras Optimizer instance (it will be returned unchanged). - TensorFlow Optimizer instance (it will be wrapped as a Keras Optimizer).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7053cc3bf650cd21039b39217036ddd606fbdf92" translate="yes" xml:space="preserve">
          <source>Differences from &lt;code&gt;CheckpointSaverHook&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5979266576871d21b2afe287422bfec66c9f8601" translate="yes" xml:space="preserve">
          <source>Differs from &lt;code&gt;recall_at_k&lt;/code&gt; in that predictions must be in the form of top &lt;code&gt;k&lt;/code&gt; class indices, whereas &lt;code&gt;recall_at_k&lt;/code&gt; expects logits. Refer to &lt;code&gt;recall_at_k&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be909077c0641dc699923f6b079868063b8f51f3" translate="yes" xml:space="preserve">
          <source>Differs from &lt;code&gt;sparse_precision_at_k&lt;/code&gt; in that predictions must be in the form of top &lt;code&gt;k&lt;/code&gt; class indices, whereas &lt;code&gt;sparse_precision_at_k&lt;/code&gt; expects logits. Refer to &lt;code&gt;sparse_precision_at_k&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b21f885f597e9e74a55d4389b351564142f53dd" translate="yes" xml:space="preserve">
          <source>Dimension (in the sense of vector spaces) of the domain of this operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be230f49ad256184670ae811a2455494d85c47d3" translate="yes" xml:space="preserve">
          <source>Dimension (in the sense of vector spaces) of the range of this operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e605fbab33cf913d60208b6de17431f62da70c5d" translate="yes" xml:space="preserve">
          <source>Dimension moduli are computed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddfbac242ac55614543ee86ed26494de45d412b" translate="yes" xml:space="preserve">
          <source>Dimensions are combined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1428aa50cfced90eb241c03bec0e26433bb51c" translate="yes" xml:space="preserve">
          <source>Dimensions are compared as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652fefec3558d17b4cbbf981d82b724df3b2008f" translate="yes" xml:space="preserve">
          <source>Dimensions are divided as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184715345bdd753f41c29c261ac6ecb895b9c071" translate="yes" xml:space="preserve">
          <source>Dimensions are subtracted as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19062e66ee039136c8d284ba410e9e11a1c74f93" translate="yes" xml:space="preserve">
          <source>Dimensions are summed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fa81283d2aa4a2b1537786c7a78e5ebfbdfb4e" translate="yes" xml:space="preserve">
          <source>Directly calling a regularizer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b920e4b3618466000ec34f6f3a5c62331a87d6f7" translate="yes" xml:space="preserve">
          <source>Directory name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ab2c01286b85519de6608b2334ff814f08dd79" translate="yes" xml:space="preserve">
          <source>Dirichlet distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1917ae3fe4d2ed647744d55c2cb8ea81f700b72d" translate="yes" xml:space="preserve">
          <source>Dirichlet-Multinomial compound distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68297b1e56f2e835bd2af468d143d667ced725a4" translate="yes" xml:space="preserve">
          <source>Dirichlet-Multinomial is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Compound_probability_distribution&quot;&gt;compound distribution&lt;/a&gt;, i.e., its samples are generated as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc145048cdbabbcc050df2754ce6b49ee03abc5" translate="yes" xml:space="preserve">
          <source>Disable the currently-enabled debugging dumping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a2605998dad2d1fcad09094c83291b2e53a3aa" translate="yes" xml:space="preserve">
          <source>Disable the eager/graph unified numerics checking mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b798d88b1318376c424af4e62e8d7f241b546c8f" translate="yes" xml:space="preserve">
          <source>Disables TensorFlow 2.x behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521eac72229eba3d7914bfe240d507f9814af96b" translate="yes" xml:space="preserve">
          <source>Disables eager execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d920733a667102618722334c044ebf1ee6edab0c" translate="yes" xml:space="preserve">
          <source>Disables experimental MLIR-Based TensorFlow Compiler Bridge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca32bbcea39d01e178ad885103e73c62caaf7cc5" translate="yes" xml:space="preserve">
          <source>Disables the V2 TensorShape behavior and reverts to V1 behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b59c0ad3afaeeb9957f97a642af99ad71bbdf5" translate="yes" xml:space="preserve">
          <source>Disables the mixed precision graph rewrite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a94fad4038a6c4f3e0eefa175f4ebe5569b6d6" translate="yes" xml:space="preserve">
          <source>Dispatches cwise mul for &quot;Dense&lt;em&gt;Dense&quot; and &quot;Dense&lt;/em&gt;Sparse&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c2dac39cc3cf2bcaa90c8f8c260a4d52934cb6" translate="yes" xml:space="preserve">
          <source>Dispatches to add for strings and add_v2 for all other types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41538a9b6e4478f54a08c16b868672e44d806fc" translate="yes" xml:space="preserve">
          <source>Displays a progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf96e7ea26bee8689a9fb32dee3b96652c0b1998" translate="yes" xml:space="preserve">
          <source>Distributed training with Keras</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0184db4ec730df13780c0bc32937d407e08e80" translate="yes" xml:space="preserve">
          <source>Distributed training with TensorFlow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb66401eefced642a598afe65af5943e81734ce7" translate="yes" xml:space="preserve">
          <source>Distributed version of Stochastic Dual Coordinate Ascent (SDCA) optimizer for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5c699aa3f4d9196eba5dd8be8839096cf69f87" translate="yes" xml:space="preserve">
          <source>Distributes &lt;a href=&quot;../../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; instances created by calls to &lt;code&gt;dataset_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fabb3e99d51e74cd9bf48a43262694d355937f2" translate="yes" xml:space="preserve">
          <source>Distributes &lt;a href=&quot;../../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; instances created by calls to &lt;code&gt;dataset_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3394e1fdd6861a0bbd13c70458c5c7db5ff67b58" translate="yes" xml:space="preserve">
          <source>Distributes &lt;a href=&quot;../../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; instances created by calls to &lt;code&gt;dataset_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb5f91468faf0f4ba99bc8820e017c05f291bdd" translate="yes" xml:space="preserve">
          <source>Distributes &lt;a href=&quot;../data/dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt; instances created by calls to &lt;code&gt;dataset_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192dd8b05d9b41aa26bf9424fba779d44a515f90" translate="yes" xml:space="preserve">
          <source>Distributes a tf.data.Dataset instance provided via &lt;code&gt;dataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d7d4ad30a1f3b6a280f4f0d9a95de8aaac9329" translate="yes" xml:space="preserve">
          <source>Distributes a tf.data.Dataset instance provided via dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9272351388ebc819fa201ab73595f99c851d9b5" translate="yes" xml:space="preserve">
          <source>Distribution parameter for scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200938400bb94e17e87c3c7df85c8268812f04b4" translate="yes" xml:space="preserve">
          <source>Distribution parameter for standard deviation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6f75528c74b056a3bcfcdcd45e98beceb2553e" translate="yes" xml:space="preserve">
          <source>Distribution parameter for the location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89ccf6e77ca8273281a020421991fa84566fb35" translate="yes" xml:space="preserve">
          <source>Distribution parameter for the mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb883e63a4c3f13d19c2425d84223e22d36d438" translate="yes" xml:space="preserve">
          <source>Distribution parameters are automatically broadcast in all functions; see examples for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d90cb11062e93dd06a3c330fa055ba03def4253" translate="yes" xml:space="preserve">
          <source>Divide the model's input(s) into multiple sub-batches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c83131611b315e50330f4357ec0a30492c4e55f" translate="yes" xml:space="preserve">
          <source>Divide this variable by &lt;a href=&quot;../../indexedslices&quot;&gt;&lt;code&gt;tf.IndexedSlices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3cab1dbc4ab5f3e0135860f29cd0a670455ba7" translate="yes" xml:space="preserve">
          <source>Divide this variable by &lt;a href=&quot;indexedslices&quot;&gt;&lt;code&gt;tf.IndexedSlices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fc6bee0dc76250df9c7249450c058a5b1248ea" translate="yes" xml:space="preserve">
          <source>Divide two values using Python 2 semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b11878bad0b769611401c6fae7db2c6d95fbabc" translate="yes" xml:space="preserve">
          <source>Divides &lt;code&gt;x / y&lt;/code&gt; elementwise, rounding toward the most negative integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7054c933ef39643ba301622090f151d74f3786dd" translate="yes" xml:space="preserve">
          <source>Divides a variable reference by sparse updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45c14857e94927b4042c441ca64da6e9584933d0" translate="yes" xml:space="preserve">
          <source>Divides x / y elementwise (using Python 2 division operator semantics). (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d62e7e02cc809f4b5d0b7e656e69318bec428dc" translate="yes" xml:space="preserve">
          <source>Divides x / y elementwise (using Python 3 division operator semantics).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f99d20ff90050d8dfae43f5ffeab6deb712b94a" translate="yes" xml:space="preserve">
          <source>Do not call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e19cbaf835cde80c7e4a1d8a1c24b2e13f0e983" translate="yes" xml:space="preserve">
          <source>Do not generate side-effect outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a78a048e146bfd34662d0525db757b7a96e1cb" translate="yes" xml:space="preserve">
          <source>Documenting RaggedTensor Shapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164630c36dde0c82111b1f3dc0afd4875333d29a" translate="yes" xml:space="preserve">
          <source>Does first run which shows the eval metrics before training.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0886ab9d39600e06d3738d56360cc4a6c8d3f1" translate="yes" xml:space="preserve">
          <source>Does not calculate some metrics that do not make sense, such as AUC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a16e859f7ea844fb2347c5f66d4fdc50974d5b" translate="yes" xml:space="preserve">
          <source>Does not support &lt;code&gt;label_vocabulary&lt;/code&gt;. Instead, labels must be float in the range [0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2083af700419e9f00d99ec199155887f45dff43e" translate="yes" xml:space="preserve">
          <source>Does not write the &lt;code&gt;GraphDef&lt;/code&gt; and &lt;code&gt;MetaGraphDef&lt;/code&gt; to the summary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61d2abccb36c5385e1fe79f0a4f01955d7746b7" translate="yes" xml:space="preserve">
          <source>Does nothing if the EventFileWriter was not closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3dd4e6c21aafe1e3c10a490dd20e8f64e442a7" translate="yes" xml:space="preserve">
          <source>Does nothing. Only useful as a placeholder for control edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db14ebf285ed7bf2f6744a63f15f17d02d61f9f" translate="yes" xml:space="preserve">
          <source>Dominik Csiba, Zheng Qu, Peter Richtarik. 2015</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6907bb65c3f0588d3aeb5d107fec1d5df41c9b41" translate="yes" xml:space="preserve">
          <source>Dot-product attention layer, a.k.a. Luong-style attention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059832445bef72ff3ab2311ac70c27ec32c98a0e" translate="yes" xml:space="preserve">
          <source>Downloads a file from a URL if it not already in the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf70ae2cb6c75d0a9c4fb58d52a95a4a4fb3459" translate="yes" xml:space="preserve">
          <source>Draw bounding boxes on a batch of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4832723fe356ae26384348ce3008f3ec5bc2040f" translate="yes" xml:space="preserve">
          <source>Draw integers: &lt;code&gt;counts = [n_0,...,n_{K-1}] ~ Multinomial(total_count, probs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b35511abd43696bf6f2e8a3e63057c2e2053cb2" translate="yes" xml:space="preserve">
          <source>Draws &lt;code&gt;shape&lt;/code&gt; samples from each of the given Gamma distribution(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f485a98bd7eab55347fa5d55f73b85c721e211f" translate="yes" xml:space="preserve">
          <source>Draws &lt;code&gt;shape&lt;/code&gt; samples from each of the given Poisson distribution(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c5f61f54c9fb2fa435235e5351a40f0e8d2a52" translate="yes" xml:space="preserve">
          <source>Draws deterministic pseudorandom samples from a categorical distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9f458f58c6bdd4d02bf827a8dcab230cd2aa13" translate="yes" xml:space="preserve">
          <source>Draws deterministic pseudorandom samples from a multinomial distribution. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b5d2a737bbdb42a41c618560b2a667a7806c1f" translate="yes" xml:space="preserve">
          <source>Draws samples from a categorical distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071c8e9dd3484d5fab6f23e4b9289081d88d7c16" translate="yes" xml:space="preserve">
          <source>Draws samples from a multinomial distribution. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c26e925d08589194f1628e9ba35c4cbbff118c" translate="yes" xml:space="preserve">
          <source>Dropout consists in randomly setting a fraction &lt;code&gt;rate&lt;/code&gt; of input units to 0 at each update during training time, which helps prevent overfitting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c910938bf7951e235266a0bde634cd7e83f6bb7" translate="yes" xml:space="preserve">
          <source>Dropout consists in randomly setting a fraction &lt;code&gt;rate&lt;/code&gt; of input units to 0 at each update during training time, which helps prevent overfitting. The units that are kept are scaled by &lt;code&gt;1 / (1 - rate)&lt;/code&gt;, so that their sum is unchanged at training time and inference time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc3b807502ca4f8b87062e501e9e44937bf4f8d" translate="yes" xml:space="preserve">
          <source>Dtypes and casting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cce0dbfc4150d144a2b52097f134c7eb97a528d" translate="yes" xml:space="preserve">
          <source>Duality: The erosion of &lt;code&gt;value&lt;/code&gt; by the &lt;code&gt;filters&lt;/code&gt; is equal to the negation of the dilation of &lt;code&gt;-value&lt;/code&gt; by the reflected &lt;code&gt;filters&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de135649e6ee68cb3c671dd05ce04b87cd5cb6ad" translate="yes" xml:space="preserve">
          <source>Duality: The erosion of &lt;code&gt;value&lt;/code&gt; by the &lt;code&gt;kernel&lt;/code&gt; is equal to the negation of the dilation of &lt;code&gt;-value&lt;/code&gt; by the reflected &lt;code&gt;kernel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b6fa41ad24ce7aeced29282a9ba7b232ae4d3b" translate="yes" xml:space="preserve">
          <source>Due to numerical instability, the gradient this function evaluated at x=100 is NaN. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f553621edbd655917227d809420fe6a55a1545e" translate="yes" xml:space="preserve">
          <source>Dummy method to prevent a RaggedTensor from being used as a Python bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa31bd5c69618abc2823fa976d807fbc423f01db" translate="yes" xml:space="preserve">
          <source>Dummy method to prevent a tensor from being used as a Python &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b762a19d2487de9921f5eccbd8c97bad2f06ba2" translate="yes" xml:space="preserve">
          <source>Dummy method to prevent iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033e9b9d832a57a4165f92d3f8bd0ca6c42d1de4" translate="yes" xml:space="preserve">
          <source>Duplicate entries are handled correctly: if multiple &lt;code&gt;indices&lt;/code&gt; reference the same location, their (negated) contributions add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a40b59eaf6d38fb8daf8662b8b0b03a0012ed11" translate="yes" xml:space="preserve">
          <source>Duplicate entries are handled correctly: if multiple &lt;code&gt;indices&lt;/code&gt; reference the same location, their contributions combine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e22b417b9aad707bab26acf128ef0124f02c98" translate="yes" xml:space="preserve">
          <source>Duplicate entries are handled correctly: if multiple &lt;code&gt;indices&lt;/code&gt; reference the same location, their contributions divide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49769bf3963b221867efd0dad9c6f794695da9ab" translate="yes" xml:space="preserve">
          <source>Duplicate entries are handled correctly: if multiple &lt;code&gt;indices&lt;/code&gt; reference the same location, their contributions multiply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3556ffa59e7016962eddbdf5eb6d7a50758ad15f" translate="yes" xml:space="preserve">
          <source>Dynamic loss scaling works by adjusting the loss scale as training progresses. The goal is to keep the loss scale as high as possible without overflowing the gradients. As long as the gradients do not overflow, raising the loss scale never hurts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="553eb325fbe958c2a5134089156c0c0d30531dbd" translate="yes" xml:space="preserve">
          <source>E.g. 'float16', 'float32', 'float64'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b35962744d58a4f3a29a207b905f8bf3e6b32bb" translate="yes" xml:space="preserve">
          <source>E.g. for use with categorical_crossentropy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07399e21baeb77233b6eed898e333a622f5516e" translate="yes" xml:space="preserve">
          <source>E.g. if applied to a list of two tensors &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; of shape &lt;code&gt;(batch_size, n)&lt;/code&gt;, the output will be a tensor of shape &lt;code&gt;(batch_size, 1)&lt;/code&gt; where each entry &lt;code&gt;i&lt;/code&gt; will be the dot product between &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;b[i]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9a9ae577fc05703e91c9c38ac1aa199f5acce8" translate="yes" xml:space="preserve">
          <source>E.g. if your &lt;code&gt;batch_size&lt;/code&gt; is 64 and you use &lt;code&gt;gpus=2&lt;/code&gt;, then we will divide the input into 2 sub-batches of 32 samples, process each sub-batch on one GPU, then return the full batch of 64 processed samples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a50e4ddce82d1e382c64c27bc1a5097eaaf42ae" translate="yes" xml:space="preserve">
          <source>E.g. the file doesn't exist, or has wrong permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087220079a98b1d1823eb02904051957f9c3396d" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL: A context manager for overriding gradient functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244fae62654320ff433d44decdc3be79b3430ab3" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;FixedLenFeature&lt;/code&gt;&lt;code&gt;df&lt;/code&gt; maps to a &lt;code&gt;Tensor&lt;/code&gt; of the specified type (or &lt;a href=&quot;../../../tf#float32&quot;&gt;&lt;code&gt;tf.float32&lt;/code&gt;&lt;/a&gt; if not specified) and shape &lt;code&gt;(serialized.size(),) + df.shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7df4b10a00470916437516599dfdf8bb1e811a1" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;FixedLenFeature&lt;/code&gt;&lt;code&gt;df&lt;/code&gt; maps to a &lt;code&gt;Tensor&lt;/code&gt; of the specified type (or &lt;a href=&quot;../../tf#float32&quot;&gt;&lt;code&gt;tf.float32&lt;/code&gt;&lt;/a&gt; if not specified) and shape &lt;code&gt;(serialized.size(),) + df.shape&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da7e4d019d3e2860dff98a8cb85154875f07d7fb" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt;&lt;code&gt;df&lt;/code&gt; maps to a &lt;code&gt;Tensor&lt;/code&gt; of the specified type (or &lt;a href=&quot;../../../tf#float32&quot;&gt;&lt;code&gt;tf.float32&lt;/code&gt;&lt;/a&gt; if not specified) and shape &lt;code&gt;(serialized.size(), None) + df.shape&lt;/code&gt;. All examples in &lt;code&gt;serialized&lt;/code&gt; will be padded with &lt;code&gt;default_value&lt;/code&gt; along the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227990327c0f9190e29f55dcbf4d15fa08ca91bd" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;FixedLenSequenceFeature&lt;/code&gt;&lt;code&gt;df&lt;/code&gt; maps to a &lt;code&gt;Tensor&lt;/code&gt; of the specified type (or &lt;a href=&quot;../../tf#float32&quot;&gt;&lt;code&gt;tf.float32&lt;/code&gt;&lt;/a&gt; if not specified) and shape &lt;code&gt;(serialized.size(), None) + df.shape&lt;/code&gt;. All examples in &lt;code&gt;serialized&lt;/code&gt; will be padded with &lt;code&gt;default_value&lt;/code&gt; along the second dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff4b1e49bfa42b9d26c149bad5739f6cc2aeb05" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;RaggedFeature&lt;/code&gt; maps to a &lt;code&gt;RaggedTensor&lt;/code&gt; of the specified type. It is formed by stacking the &lt;code&gt;RaggedTensor&lt;/code&gt; for each example, where the &lt;code&gt;RaggedTensor&lt;/code&gt; for each individual example is constructed using the tensors specified by &lt;code&gt;RaggedTensor.values_key&lt;/code&gt; and &lt;code&gt;RaggedTensor.partition&lt;/code&gt;. See the &lt;a href=&quot;../../io/raggedfeature&quot;&gt;&lt;code&gt;tf.io.RaggedFeature&lt;/code&gt;&lt;/a&gt; documentation for details and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8968c019afc90ee635fe7107260ce001e1786670" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;RaggedFeature&lt;/code&gt; maps to a &lt;code&gt;RaggedTensor&lt;/code&gt; of the specified type. It is formed by stacking the &lt;code&gt;RaggedTensor&lt;/code&gt; for each example, where the &lt;code&gt;RaggedTensor&lt;/code&gt; for each individual example is constructed using the tensors specified by &lt;code&gt;RaggedTensor.values_key&lt;/code&gt; and &lt;code&gt;RaggedTensor.partition&lt;/code&gt;. See the &lt;a href=&quot;raggedfeature&quot;&gt;&lt;code&gt;tf.io.RaggedFeature&lt;/code&gt;&lt;/a&gt; documentation for details and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc0e95cd9937e083aa36c1610babea4271ff0514" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;SparseFeature&lt;/code&gt; maps to a &lt;code&gt;SparseTensor&lt;/code&gt; of the specified type representing a Tensor of &lt;code&gt;dense_shape&lt;/code&gt;&lt;code&gt;[batch_size] + SparseFeature.size&lt;/code&gt;. Its &lt;code&gt;values&lt;/code&gt; come from the feature in the examples with key &lt;code&gt;value_key&lt;/code&gt;. A &lt;code&gt;values[i]&lt;/code&gt; comes from a position &lt;code&gt;k&lt;/code&gt; in the feature of an example at batch entry &lt;code&gt;batch&lt;/code&gt;. This positional information is recorded in &lt;code&gt;indices[i]&lt;/code&gt; as &lt;code&gt;[batch, index_0, index_1, ...]&lt;/code&gt; where &lt;code&gt;index_j&lt;/code&gt; is the &lt;code&gt;k-th&lt;/code&gt; value of the feature in the example at with key &lt;a href=&quot;../../io/sparsefeature#index_key&quot;&gt;&lt;code&gt;SparseFeature.index_key[j]&lt;/code&gt;&lt;/a&gt;. In other words, we split the indices (except the first index indicating the batch entry) of a &lt;code&gt;SparseTensor&lt;/code&gt; by dimension into different features of the &lt;code&gt;Example&lt;/code&gt;. Due to its complexity a &lt;code&gt;VarLenFeature&lt;/code&gt; should be preferred over a &lt;code&gt;SparseFeature&lt;/code&gt; whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0f213d9552e1c0b7750efae44b94f6e3a054d5" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;SparseFeature&lt;/code&gt; maps to a &lt;code&gt;SparseTensor&lt;/code&gt; of the specified type representing a Tensor of &lt;code&gt;dense_shape&lt;/code&gt;&lt;code&gt;[batch_size] + SparseFeature.size&lt;/code&gt;. Its &lt;code&gt;values&lt;/code&gt; come from the feature in the examples with key &lt;code&gt;value_key&lt;/code&gt;. A &lt;code&gt;values[i]&lt;/code&gt; comes from a position &lt;code&gt;k&lt;/code&gt; in the feature of an example at batch entry &lt;code&gt;batch&lt;/code&gt;. This positional information is recorded in &lt;code&gt;indices[i]&lt;/code&gt; as &lt;code&gt;[batch, index_0, index_1, ...]&lt;/code&gt; where &lt;code&gt;index_j&lt;/code&gt; is the &lt;code&gt;k-th&lt;/code&gt; value of the feature in the example at with key &lt;a href=&quot;sparsefeature#index_key&quot;&gt;&lt;code&gt;SparseFeature.index_key[j]&lt;/code&gt;&lt;/a&gt;. In other words, we split the indices (except the first index indicating the batch entry) of a &lt;code&gt;SparseTensor&lt;/code&gt; by dimension into different features of the &lt;code&gt;Example&lt;/code&gt;. Due to its complexity a &lt;code&gt;VarLenFeature&lt;/code&gt; should be preferred over a &lt;code&gt;SparseFeature&lt;/code&gt; whenever possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db2f7c49d4f1060f145f5df05f3ac3f70dc51a7" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;SparseTensor&lt;/code&gt; corresponding to &lt;code&gt;sequence_features&lt;/code&gt; represents a ragged vector. Its indices are &lt;code&gt;[time, index]&lt;/code&gt;, where &lt;code&gt;time&lt;/code&gt; is the &lt;code&gt;FeatureList&lt;/code&gt; entry and &lt;code&gt;index&lt;/code&gt; is the value's index in the list of values associated with that time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6b6726eed1f881ece79a8557b7490a3a12373d" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;VarLenFeature&lt;/code&gt; maps to a &lt;code&gt;SparseTensor&lt;/code&gt; of the specified type representing a ragged matrix. Its indices are &lt;code&gt;[batch, index]&lt;/code&gt; where &lt;code&gt;batch&lt;/code&gt; identifies the example in &lt;code&gt;serialized&lt;/code&gt;, and &lt;code&gt;index&lt;/code&gt; is the value's index in the list of values associated with that feature and example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1bc576f02c202f427e41cb41858ad752ac7548f" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;data[i].shape&lt;/code&gt; must start with the corresponding &lt;code&gt;indices[i].shape&lt;/code&gt;, and the rest of &lt;code&gt;data[i].shape&lt;/code&gt; must be constant w.r.t. &lt;code&gt;i&lt;/code&gt;. That is, we must have &lt;code&gt;data[i].shape = indices[i].shape + constant&lt;/code&gt;. In terms of this &lt;code&gt;constant&lt;/code&gt;, the output shape is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89ddb81cecdb78c46e47a25c2243e84460594e3" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;opj&lt;/code&gt; is required to represent a square matrix, and hence will have shape &lt;code&gt;batch_shape_j + [M_j, M_j]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be00db719d1ddeffb3b52a4e144efe9293d8f3f3" translate="yes" xml:space="preserve">
          <source>Each accumulator averages once enough gradients (replicas_to_aggregate) have been accumulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c1de68d7fc0e0b85125dfe0bb3e6024c8a2fef" translate="yes" xml:space="preserve">
          <source>Each bin value in the output indicates number of occurrences of the particular index. Here, index 1 in output has a value 2. This indicates value 1 occurs two times in &lt;code&gt;values&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd67b0ec0b49f6ce7d82128e4a2712babeef4ea" translate="yes" xml:space="preserve">
          <source>Each element in the list has the following properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eff09768619dd4cfe4a6371293c28c087e9bbff" translate="yes" xml:space="preserve">
          <source>Each entry in &lt;code&gt;output&lt;/code&gt; is the mean of the corresponding size &lt;code&gt;ksize&lt;/code&gt; window in &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa1a6302073ad781167a8cd550ee605d20a64a5" translate="yes" xml:space="preserve">
          <source>Each item in texts can also be a list, in which case we assume each item of that list to be a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ef25610b63ee3daa8cb47e92bed65b82174f660" translate="yes" xml:space="preserve">
          <source>Each job may also be specified as a sparse mapping from task indices to network addresses. This enables a server to be configured without needing to know the identity of (for example) all other worker tasks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdb23ee45a94e6a87da472c4a1c6f6fa240b0c1" translate="yes" xml:space="preserve">
          <source>Each layer has a dtype, which is typically the dtype of the layer's computations and variables. A layer's dtype can be queried via the &lt;a href=&quot;layer#dtype&quot;&gt;&lt;code&gt;Layer.dtype&lt;/code&gt;&lt;/a&gt; property. The dtype is specified with the &lt;code&gt;dtype&lt;/code&gt; constructor argument. In TensorFlow 2, the dtype defaults to &lt;a href=&quot;../backend/floatx&quot;&gt;&lt;code&gt;tf.keras.backend.floatx()&lt;/code&gt;&lt;/a&gt; if no dtype is passed. &lt;code&gt;floatx()&lt;/code&gt; itself defaults to &quot;float32&quot;. Additionally, layers will cast their inputs to the layer's dtype in TensorFlow 2. When mixed precision is used, layers may have different computation and variable dtypes. See &lt;a href=&quot;../mixed_precision/experimental/policy&quot;&gt;&lt;code&gt;tf.keras.mixed_precision.experimental.Policy&lt;/code&gt;&lt;/a&gt; for details on layer dtypes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a436999bdcc841459f2d09c5dee0a8dc7aeb18" translate="yes" xml:space="preserve">
          <source>Each meta graph added to the SavedModel must be annotated with tags. The tags provide a means to identify the specific meta graph to load and restore, along with the shared set of variables and assets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d446cb40035fb845f01a6f1a77eaf839d593c4" translate="yes" xml:space="preserve">
          <source>Each output patch can be reshaped to &lt;code&gt;sizes[1], sizes[2], depth&lt;/code&gt;, where &lt;code&gt;depth&lt;/code&gt; is &lt;code&gt;images.shape[3]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97cdddb81cdc590bd76534c8b39698ca73775c8" translate="yes" xml:space="preserve">
          <source>Each output pixel is computed by first transforming the pixel's footprint into the input tensor and then averaging the pixels that intersect the footprint. An input pixel's contribution to the average is weighted by the fraction of its area that intersects the footprint. This is the same as OpenCV's INTER_AREA.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b34b561d406bfd771adf13970772919b62c25d" translate="yes" xml:space="preserve">
          <source>Each output tensor is a dense tensor. This means that it is padded to hold the largest number of repeated elements seen in the input minibatch. (The shape is also padded by one to prevent zero-sized dimensions). The actual repeat counts for each example in the minibatch can be found in the &lt;code&gt;sizes&lt;/code&gt; output. In many cases the output of &lt;code&gt;decode_proto&lt;/code&gt; is fed immediately into tf.squeeze if missing values are not a concern. When using tf.squeeze, always pass the squeeze dimension explicitly to avoid surprises.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c91b6c2633362632f841c1ccb66bafe6332463" translate="yes" xml:space="preserve">
          <source>Each queue element is a tuple of one or more tensors, where each tuple component has a static dtype, and may have a static shape. The queue implementations support versions of enqueue and dequeue that handle single elements, versions that support enqueuing and dequeuing a batch of elements at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551331f0073d6068b977b29fa7d823f6b93a3a5c" translate="yes" xml:space="preserve">
          <source>Each replica will take a single, different input from the inputs provided by one &lt;code&gt;get_next&lt;/code&gt; call on the input iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5901818bcf4a21a5306c5bc783179fa30627b69" translate="yes" xml:space="preserve">
          <source>Each row of the &lt;code&gt;output&lt;/code&gt;&lt;code&gt;RaggedTensor&lt;/code&gt; will contain the explicit values from the same row in &lt;code&gt;st_input&lt;/code&gt;. &lt;code&gt;st_input&lt;/code&gt; must be ragged-right. If not it is not ragged-right, then an error will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c216ccaa4d6eb31eeeeece9b91a97e7a2a1c5560" translate="yes" xml:space="preserve">
          <source>Each row of the returned &lt;code&gt;RaggedTensor&lt;/code&gt; contains a single sequence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17e3eb7d39e837af72f23c35fc67b178925d530b" translate="yes" xml:space="preserve">
          <source>Each sequence has to a list of integers. In other words, sequences should be a list of sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e3878678f2b0a73d6ce75df8834a154d82279a" translate="yes" xml:space="preserve">
          <source>Each value in &lt;code&gt;feed_dict&lt;/code&gt; must be convertible to a numpy array of the dtype of the corresponding key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1e4d53433d9039c46f4248ad092a43c3a14839" translate="yes" xml:space="preserve">
          <source>Each vector is handled independently. The &lt;code&gt;axis&lt;/code&gt; argument sets which axis of the input the finction is applied along.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0468f80c3414aaba1c31f9343982b0cf7d54f2" translate="yes" xml:space="preserve">
          <source>Each yield is a 3-tuple: the pathname of a directory, followed by lists of all its subdirectories and leaf files. That is, each yield looks like: &lt;code&gt;(dirname, [subdirname, subdirname, ...], [filename, filename, ...])&lt;/code&gt;. Each item is a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f50bc776ee8ac768be6f39d5bf960f531e28e50" translate="yes" xml:space="preserve">
          <source>Eager Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47417439c687992a16b5c56566761d74801e7f76" translate="yes" xml:space="preserve">
          <source>Eager defined functions are functions decorated by tf.contrib.eager.defun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b122e79faaa952b4168aa1fa16fa8a264711947" translate="yes" xml:space="preserve">
          <source>Eager execution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26da12bbabc651ef3fa4d97385bc838c93cbbb88" translate="yes" xml:space="preserve">
          <source>Eager execution cannot be enabled after TensorFlow APIs have been used to create or execute graphs. It is typically recommended to invoke this function at program startup and not in a library (as most libraries should be usable both with and without eager execution).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4653faaf8b5c79819a2ca1f3ed18364e2ccc26" translate="yes" xml:space="preserve">
          <source>Eager execution is enabled by default and this API returns &lt;code&gt;True&lt;/code&gt; in most of cases. However, this API might return &lt;code&gt;False&lt;/code&gt; in the following use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d26f61db0485b6d7b42588dcdd8a60acfb62a2" translate="yes" xml:space="preserve">
          <source>Eager execution is typically enabled via &lt;a href=&quot;enable_eager_execution&quot;&gt;&lt;code&gt;tf.compat.v1.enable_eager_execution&lt;/code&gt;&lt;/a&gt;, but may also be enabled within the context of a Python function via tf.contrib.eager.py_func.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d06564a36a9559d2e0a5392cfeb6c660976f37d" translate="yes" xml:space="preserve">
          <source>Eager execution provides an imperative interface to TensorFlow. With eager execution enabled, TensorFlow functions execute operations immediately (as opposed to adding to a graph to be executed later in a &lt;a href=&quot;session&quot;&gt;&lt;code&gt;tf.compat.v1.Session&lt;/code&gt;&lt;/a&gt;) and return concrete values (as opposed to symbolic references to a node in a computational graph).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9bc58428735ee8f0c80598baae3e59551f7ae8f" translate="yes" xml:space="preserve">
          <source>Efficient Backprop, &lt;a href=&quot;http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf&quot;&gt;Lecun et al., 1998&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541e98fb2dce535c7b2da83f12b31189d20f638f" translate="yes" xml:space="preserve">
          <source>Efficient Object Localization Using Convolutional Networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05b9e141fa80e412892c6cd14bcda5f86d6b8da" translate="yes" xml:space="preserve">
          <source>Efficiently get the [batch] diagonal part of this operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffafa3d0304f38e47fbf37a645ad9ccf6604e90" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;alt&lt;/code&gt; based on &lt;code&gt;K.learning_phase&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e5dbc63f9b3142dc5475c5c804320a7f9337ebb" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;alt&lt;/code&gt; based on the &lt;code&gt;training&lt;/code&gt; flag. the &lt;code&gt;training&lt;/code&gt; flag defaults to &lt;code&gt;K.learning_phase()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4db703c5115c54df4b0b6654ecde498f48b471" translate="yes" xml:space="preserve">
          <source>Either a single value if &lt;code&gt;fetches&lt;/code&gt; is a single graph element, or a list of values if &lt;code&gt;fetches&lt;/code&gt; is a list, or a dictionary with the same keys as &lt;code&gt;fetches&lt;/code&gt; if that is a dictionary (described above). Order in which &lt;code&gt;fetches&lt;/code&gt; operations are evaluated inside the call is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf124e1ec0a0a15f09c663dd04829849e8eb3fc" translate="yes" xml:space="preserve">
          <source>Either a single value if &lt;code&gt;fetches&lt;/code&gt; is a single graph element, or a list of values if &lt;code&gt;fetches&lt;/code&gt; is a list, or a dictionary with the same keys as &lt;code&gt;fetches&lt;/code&gt; if that is a dictionary (see documentation for &lt;code&gt;run&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dd63725103a91eac4d917b615e68ab3beaa44b" translate="yes" xml:space="preserve">
          <source>Either assigns values immediately if variables to restore have been created already, or defers restoration until the variables are created. Dependencies added after this call will be matched if they have a corresponding object in the checkpoint (the restore request will queue in any trackable object waiting for the expected dependency to be added).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448b20303154a96259807e9b8b83147054894fb5" translate="yes" xml:space="preserve">
          <source>Either classes or scores or both must be set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f347750abdcdb3827d9ee5d868094a42b375fe5" translate="yes" xml:space="preserve">
          <source>Either matrix can be transposed or adjointed (conjugated and transposed) on the fly by setting one of the corresponding flag to &lt;code&gt;True&lt;/code&gt;. These are &lt;code&gt;False&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53797e79edd27930af5859b922a6b2a7b5bdf1a6" translate="yes" xml:space="preserve">
          <source>Either saves in HDF5 or in TensorFlow format based on the &lt;code&gt;save_format&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98017d368e570d514552b910ff1bd1af7ae428c5" translate="yes" xml:space="preserve">
          <source>Element-wise absolute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78020e1b843ad8d8b0d46f516b9cac5e7dc65b9e" translate="yes" xml:space="preserve">
          <source>Element-wise equality between two tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca64c7c534dabf70dfed1eb6dc70b44fa38b0ccd" translate="yes" xml:space="preserve">
          <source>Element-wise exponential.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213307a14887e855cc376ef29b1c517922979973" translate="yes" xml:space="preserve">
          <source>Element-wise exponentiation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2264a97a4de7acba1b83aee85d16a9f837ae5ff9" translate="yes" xml:space="preserve">
          <source>Element-wise inequality between two tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee943cf4b9c4af0ae00101b435fa732547c6a20" translate="yes" xml:space="preserve">
          <source>Element-wise log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a4d2c72a30a07811d44ea78fbc021903cf4719" translate="yes" xml:space="preserve">
          <source>Element-wise maximum of two tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="792e29246325fc012d7c71ccbfcbec06fc46c4b7" translate="yes" xml:space="preserve">
          <source>Element-wise minimum of two tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf3909281d01b6aeb4e0d7519f5b59953f327cd" translate="yes" xml:space="preserve">
          <source>Element-wise rounding to the closest integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e18f83bff69cdbde9a9f5f55ae3a649e9b0c60" translate="yes" xml:space="preserve">
          <source>Element-wise sigmoid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070f468605c58753ce57d39af8312f11d94c4af5" translate="yes" xml:space="preserve">
          <source>Element-wise sign.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f8da5e2231c69a7a51b7abf0358aeb9ae42429" translate="yes" xml:space="preserve">
          <source>Element-wise square root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8913b917191e051975a666af524532e336480e" translate="yes" xml:space="preserve">
          <source>Element-wise square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a6ac47e9c2496c554ade7ff071a81074d224a3a" translate="yes" xml:space="preserve">
          <source>Element-wise tanh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6405e81daea2ee6eabc8745d4a27bf65b6948c" translate="yes" xml:space="preserve">
          <source>Element-wise truth value of (x &amp;gt; y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b77c6f4cfd5cd17ea8d6410b420dc1c621e7c2" translate="yes" xml:space="preserve">
          <source>Element-wise truth value of (x &amp;gt;= y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b69f9a42693e2346143d414a3e98fe0f8a3639" translate="yes" xml:space="preserve">
          <source>Element-wise truth value of (x &amp;lt; y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2062fabe4ac424967ff0d008cda56315cc93dfab" translate="yes" xml:space="preserve">
          <source>Element-wise truth value of (x &amp;lt;= y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c81beff185a49555c7d38080f1307fa0e996f4" translate="yes" xml:space="preserve">
          <source>Element-wise value clipping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b961a210f2d79245a9d3af5d6f47fd0a5b49e3c6" translate="yes" xml:space="preserve">
          <source>Elements can be nested structures of tuples, named tuples, and dictionaries. Element components can be of any type representable by &lt;a href=&quot;../typespec&quot;&gt;&lt;code&gt;tf.TypeSpec&lt;/code&gt;&lt;/a&gt;, including &lt;a href=&quot;../tensor&quot;&gt;&lt;code&gt;tf.Tensor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dataset&quot;&gt;&lt;code&gt;tf.data.Dataset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../sparse/sparsetensor&quot;&gt;&lt;code&gt;tf.SparseTensor&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../raggedtensor&quot;&gt;&lt;code&gt;tf.RaggedTensor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../tensorarray&quot;&gt;&lt;code&gt;tf.TensorArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837d5bca6a2536af9b3f581528ad4014139ab8ca" translate="yes" xml:space="preserve">
          <source>Elements of &lt;code&gt;x&lt;/code&gt; are compared in row-major order. The tensor &lt;code&gt;[x[0],...]&lt;/code&gt; is non-decreasing if for every adjacent pair we have &lt;code&gt;x[i] &amp;lt;= x[i+1]&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; has less than two elements, it is trivially non-decreasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61d81f0fbebf9d7141fc0ad59baf078a97c457b" translate="yes" xml:space="preserve">
          <source>Elements of &lt;code&gt;x&lt;/code&gt; are compared in row-major order. The tensor &lt;code&gt;[x[0],...]&lt;/code&gt; is strictly increasing if for every adjacent pair we have &lt;code&gt;x[i] &amp;lt; x[i+1]&lt;/code&gt;. If &lt;code&gt;x&lt;/code&gt; has less than two elements, it is trivially strictly increasing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc731347a173d7e073cb0fba2df1b0819210af7" translate="yes" xml:space="preserve">
          <source>Elements of the &lt;code&gt;Dataset&lt;/code&gt; are grouped together by length and then are padded and batched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a0623a4155ed9364977209435f1be44fe29103" translate="yes" xml:space="preserve">
          <source>Elementwise computes the bitwise AND of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb969553b4858295e01a3d6f8ad6eaf372be726c" translate="yes" xml:space="preserve">
          <source>Elementwise computes the bitwise OR of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a05ebe19c26d9b40a955aba0105f5c386a8c09b" translate="yes" xml:space="preserve">
          <source>Elementwise computes the bitwise XOR of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8565fc2ae8f5566706199d638cf76533351bcc91" translate="yes" xml:space="preserve">
          <source>Elementwise computes the bitwise left-shift of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c9971bf7398ee8aae281ee6e2b5f6cdd93c860" translate="yes" xml:space="preserve">
          <source>Elementwise computes the bitwise right-shift of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c075ef1bb96e78c3aeb788db6fdaa2ad6900d8" translate="yes" xml:space="preserve">
          <source>Else</source>
          <target state="translated">Else</target>
        </trans-unit>
        <trans-unit id="f02ec6df2e4d02d170385ed26ba3d8f8db8b5eb9" translate="yes" xml:space="preserve">
          <source>Else, N-D tensor with shape &lt;code&gt;[batch_size, output_size]&lt;/code&gt;, where &lt;code&gt;output_size&lt;/code&gt; could be a high dimension tensor shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d50cb65d0e77a5bb79701db8ed4980b646ac23" translate="yes" xml:space="preserve">
          <source>Else, we will return the global Keras session assuming it matches the current graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbab1f77c2fa1efee02c3a9de683182e574ad133" translate="yes" xml:space="preserve">
          <source>Embedding for a DNN model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2fe59ed1244f53116bb5c0e75cfa18eecac587f" translate="yes" xml:space="preserve">
          <source>Enable dumping debugging information from a TensorFlow program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a9d31054c9d598ffffccd5a4dbb93e89b63981" translate="yes" xml:space="preserve">
          <source>Enable mixed precision via a graph rewrite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0bd6180f771c064da1f1a770b7daac29a771883" translate="yes" xml:space="preserve">
          <source>Enable or disable JIT compilation of operators within the scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222fb4bafa995e3993fcca0f4ff075713e48e674" translate="yes" xml:space="preserve">
          <source>Enable tensor numerics checking in an eager/graph unified fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5a474bba7abadff8b42d6aeff482a53678a17c" translate="yes" xml:space="preserve">
          <source>Enable visualizations for TensorBoard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c564b53610a3d8ae88148f0774441fd283eb58" translate="yes" xml:space="preserve">
          <source>Enables / disables eager execution of &lt;a href=&quot;../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1afb1bf35ef313cbb3e295ba11df528f6e82d34" translate="yes" xml:space="preserve">
          <source>Enables TensorFlow 2.x behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eefb45023037033b3697cb9f9c0b288e668b7b3d" translate="yes" xml:space="preserve">
          <source>Enables eager execution for the lifetime of this program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0b95f0fa43081f563196966995b24de120f0ba" translate="yes" xml:space="preserve">
          <source>Enables experimental MLIR-Based TensorFlow Compiler Bridge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4761221bfce06cf2c473a5ac7aededbd81781ab7" translate="yes" xml:space="preserve">
          <source>Enables this summary writer for the current thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11ea0aebe664ae119dec001a0b9f2d29f3ca87b" translate="yes" xml:space="preserve">
          <source>Encapsulates metric logic and state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d24a34fa72ad98d28372d4386ca19052a1f4fd" translate="yes" xml:space="preserve">
          <source>Encode audio data using the WAV file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdaadb2d4bd18ba0c09e21ce45020cd7b4b86ae" translate="yes" xml:space="preserve">
          <source>Encode strings into web-safe base64 format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c95c7b314e36b497965b9d97cb027f94d7aeb8" translate="yes" xml:space="preserve">
          <source>Encodes each sequence of Unicode code points in &lt;code&gt;input&lt;/code&gt; into a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5683cb6af38e31071180cef9386ec900be332114" translate="yes" xml:space="preserve">
          <source>Enqueues a different list of tensors in different threads. Implemented using a queue -- a &lt;code&gt;QueueRunner&lt;/code&gt; for the queue is added to the current &lt;code&gt;Graph&lt;/code&gt;'s &lt;code&gt;QUEUE_RUNNER&lt;/code&gt; collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60e30314779202231181351b84dd34846567a2f6" translate="yes" xml:space="preserve">
          <source>Enqueues and Dequeues to the &lt;code&gt;PriorityQueue&lt;/code&gt; must include an additional tuple entry at the beginning: the &lt;code&gt;priority&lt;/code&gt;. The priority must be an int64 scalar (for &lt;code&gt;enqueue&lt;/code&gt;) or an int64 vector (for &lt;code&gt;enqueue_many&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce82621edcce5f93df7566dd835d9503feeccdf" translate="yes" xml:space="preserve">
          <source>Enqueues one element to this queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cb2e60d785aff93add1fa0fe7d6d52fb7d8d2d" translate="yes" xml:space="preserve">
          <source>Enqueues zero or more elements to this queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec07a7b9b065fec4ccc1c035390c238f21a7e560" translate="yes" xml:space="preserve">
          <source>Ensures that &lt;code&gt;tensor&lt;/code&gt; is being traced by this tape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa73138967f2617b65584ab4b4ab573ff280e77" translate="yes" xml:space="preserve">
          <source>Ensures that flag is not None during program execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fba0ef82f0ba5fc0578d25be123e547e761deca" translate="yes" xml:space="preserve">
          <source>Ensures that flags are not None during program execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60f893825ab5c6287261b63b08497391b1a898d" translate="yes" xml:space="preserve">
          <source>Ensures that only one flag among flag_names is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4926f456b6fdb9061da1916b7b3991e5255b89" translate="yes" xml:space="preserve">
          <source>Ensures that only one flag among flag_names is not None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3df735c2334b1de3bf6c1f0225248a5c4288f43" translate="yes" xml:space="preserve">
          <source>Ensures the minimum quantization range is at least this value. The legacy default value for this is 0.01, but it is strongly suggested to set it to 0 for new uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108e622621a22768df2fd21e0560d0f2153d1f24" translate="yes" xml:space="preserve">
          <source>Ensures the wrapped &lt;code&gt;cell&lt;/code&gt; is called with &lt;a href=&quot;../../../../device&quot;&gt;&lt;code&gt;tf.device(device)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c85bfc40629f5356a3bdc6b8c8134d0ee69412" translate="yes" xml:space="preserve">
          <source>Ensures the wrapped &lt;code&gt;cell&lt;/code&gt; is called with &lt;a href=&quot;../device&quot;&gt;&lt;code&gt;tf.device(device)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5bdaceef564fe90342bc0f3ce09baebe939955" translate="yes" xml:space="preserve">
          <source>Enter a &lt;code&gt;with&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ae8455b8c259c16540b2b4caa23a215c50998e" translate="yes" xml:space="preserve">
          <source>Entering a context pushes it onto a stack of contexts. The context is exited when the test completes. Contexts are are exited in the reverse order of entering. They will always be exited, regardless of test failure/success. The context stack is specific to the test being run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ecb2f7e332bf0fb5c218b03f880139861b909c" translate="yes" xml:space="preserve">
          <source>Enters a context inside which operations are recorded on this tape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2767c9f459a9d70c78a2313f5bda7adc985835" translate="yes" xml:space="preserve">
          <source>Enum class defining the sets of ops available to generate TFLite models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da1a5e506a157807d67486433bb20b695758042" translate="yes" xml:space="preserve">
          <source>Enum defining the optimizations to apply when generating tflite graphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90423c583dcce5d727bda87136e47d717acb8520" translate="yes" xml:space="preserve">
          <source>Enumerates the elements of this dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3d6832786f1cdc0d074cbe3810dfbe4b6e9e02" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.fftpack.dct.html&quot;&gt;scipy.fftpack.dct&lt;/a&gt; for Type-I, Type-II and Type-III DCT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab669c6ea64e65572ad94f354d53bdd4410c35f5" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.fftpack.idct.html&quot;&gt;scipy.fftpack.idct&lt;/a&gt; for Type-I, Type-II and Type-III DCT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e57bb76843be992582303de7a25b51e9e44284" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;a href=&quot;latest_checkpoint&quot;&gt;&lt;code&gt;tf.train.latest_checkpoint(directory)&lt;/code&gt;&lt;/a&gt; where &lt;code&gt;directory&lt;/code&gt; is the constructor argument to &lt;code&gt;CheckpointManager&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12aa27fa14fcfb779b3cf6f07826d3611283aed6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;adjust_brightness()&lt;/code&gt; using a &lt;code&gt;delta&lt;/code&gt; randomly picked in the interval &lt;code&gt;[-max_delta, max_delta)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b3e81f789e49b586499d0779cb698dbd59d557" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;adjust_contrast()&lt;/code&gt; but uses a &lt;code&gt;contrast_factor&lt;/code&gt; randomly picked in the interval &lt;code&gt;[lower, upper]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96de3d3339d8bc99a5232fb80056e877509a902d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;adjust_hue()&lt;/code&gt; but uses a &lt;code&gt;delta&lt;/code&gt; randomly picked in the interval &lt;code&gt;[-max_delta, max_delta]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23655f0c3ac756adc718b9fd03358f4fad3f0856" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;adjust_saturation()&lt;/code&gt; but uses a &lt;code&gt;saturation_factor&lt;/code&gt; randomly picked in the interval &lt;code&gt;[lower, upper]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404cc18c094b513b6de1b7e6cc0bbe8e08dec237" translate="yes" xml:space="preserve">
          <source>Equivalent to C++ std::nextafter function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72cfeb2ec979751608d18293a4bbbaf58c556044" translate="yes" xml:space="preserve">
          <source>Equivalent to LSTMCell class but adds peephole connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810acbc718abeba54a4adeae3c2bc19fd0867a76" translate="yes" xml:space="preserve">
          <source>Equivalent to exiting and reentering the tape context manager with a new tape. For example, the two following code blocks are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b366fb9cced85d8ec2219c1c3626cd699229e2a0" translate="yes" xml:space="preserve">
          <source>Equivalent to np.all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fc2cd887f06a6be5984678e87d9fbefcde58be" translate="yes" xml:space="preserve">
          <source>Equivalent to np.any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d711c6043710156c83e0fd47abc01149d5b65b9c" translate="yes" xml:space="preserve">
          <source>Equivalent to np.arange</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b171c66d286b4a58fc825ae37893711f5af4c1" translate="yes" xml:space="preserve">
          <source>Equivalent to np.isfinite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf06734befd58f2b3ab4e13986301474581e2b4" translate="yes" xml:space="preserve">
          <source>Equivalent to np.isinf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6374258bee9e66935fc1c66d495136b655269e4f" translate="yes" xml:space="preserve">
          <source>Equivalent to np.isnan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28577bb9f14f8ade1168ec629722ccf6597345cd" translate="yes" xml:space="preserve">
          <source>Equivalent to np.max</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49e9cf38c7cdbe9cab7db7f9370177b6fad0411" translate="yes" xml:space="preserve">
          <source>Equivalent to np.mean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5202370c40436aa2f849ee038707e5fa15d036" translate="yes" xml:space="preserve">
          <source>Equivalent to np.min</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c252cf1e4e24cf6dab4facf869d89e7b422643c" translate="yes" xml:space="preserve">
          <source>Equivalent to np.ndim</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2db935156477455d5981e031397d5045da461a3" translate="yes" xml:space="preserve">
          <source>Equivalent to np.prod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2e12dc7d621e63f14287eb0e10506db2d014d4" translate="yes" xml:space="preserve">
          <source>Equivalent to np.size()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b5636e608c91ffa2f14af120465515724e7c21" translate="yes" xml:space="preserve">
          <source>Equivalent to np.std</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54f8c7f961fc750868c04b530028b12df8cfd2d" translate="yes" xml:space="preserve">
          <source>Equivalent to np.sum apart the fact that numpy upcast uint8 and int32 to int64 while tensorflow returns the same dtype as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94035d29b7b5f5ef4935b41748906c6edd0f44a" translate="yes" xml:space="preserve">
          <source>Equivalent to np.unravel_index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d8d4f70c2a6dcee6138e42da4ea9d8d57941bcf" translate="yes" xml:space="preserve">
          <source>Equivalent to np.var</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3937688953cfcbcfe89823523f42d4889fd2130" translate="yes" xml:space="preserve">
          <source>Equivalent to numpy.fft.fftshift. https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.fftshift.html</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd2b0117f7b7eb348201a45c446fbae4c04b64d" translate="yes" xml:space="preserve">
          <source>Equivalent to numpy.fft.ifftshift. https://docs.scipy.org/doc/numpy/reference/generated/numpy.fft.ifftshift.html</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3c10ac298fc83779d7180b62df3acfd2028ba1" translate="yes" xml:space="preserve">
          <source>Equivalent to numpy.linalg.slogdet, although no sign is returned since only hermitian positive definite matrices are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e3349b347b523ccfe7d2d36cdf4f830d6d6768" translate="yes" xml:space="preserve">
          <source>Equivalent to numpy.polyval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ab93c1fc5b434981966382e2d02f35fad157362" translate="yes" xml:space="preserve">
          <source>Equivalent to scipy.linalg.expm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449cff5debc79a532910321ef441b805ab2c2ee5" translate="yes" xml:space="preserve">
          <source>Equivalent to scipy.linalg.solve_triangular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5717fd66f59e41b5a46912c32daefbc3aef0ab" translate="yes" xml:space="preserve">
          <source>Equivalent to scipy.special.expit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03aaa9170e1859f7e5b84e4283ea1ae7b31ff453" translate="yes" xml:space="preserve">
          <source>Equivalent to scipy.special.i0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9289834302ab9464efb15c64a7277f13e51e14fa" translate="yes" xml:space="preserve">
          <source>Equivalent to scipy.special.i1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d371f28bfea1e852f448381bb4f0bdfccaa7149e" translate="yes" xml:space="preserve">
          <source>Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8be36ef006e5ae5869b06fb4ce1ec0f4902254" translate="yes" xml:space="preserve">
          <source>Equivalent to: &lt;code&gt;from_row_splits(values, concat([0, row_limits]))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f934428c26b01d7bcf82028a03b831fb56280136" translate="yes" xml:space="preserve">
          <source>Equivalent to: &lt;code&gt;from_row_splits(values, concat([row_starts, nvals]))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a645773837690910bfe191d893e21cd8eb8555ea" translate="yes" xml:space="preserve">
          <source>Essentially, any &quot;input&quot; into this pseudo op is fed into an identity, and attributes are added to that input before being used by the constituent ops that make up the pseudo op. A similar process is done to any output that is to be exported from the current op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be113f49d343fbf9bdb54f8a121ec96a1956f264" translate="yes" xml:space="preserve">
          <source>Estimator class to train and evaluate TensorFlow models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416cc25603177f39e318971f80a871d50a7f3f1c" translate="yes" xml:space="preserve">
          <source>Estimator with TPU support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af787345575f0fd2e39357b726f019e445fae069" translate="yes" xml:space="preserve">
          <source>Estimator: High level tools for working with models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52f4d3825efd220d2de6a981b23c8e26fcde5ab" translate="yes" xml:space="preserve">
          <source>Estimators</source>
          <target state="translated">Estimators</target>
        </trans-unit>
        <trans-unit id="af9670f7a09c493acafa589d4a49f01a2c26b1e8" translate="yes" xml:space="preserve">
          <source>Estimators are not compatible with eager execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80aba17df6ad98b90215b78b10de509262f4ee8" translate="yes" xml:space="preserve">
          <source>Estimators can be used while eager execution is enabled. Note that &lt;code&gt;input_fn&lt;/code&gt; and all hooks are executed inside a graph context, so they have to be written to be compatible with graph mode. Note that &lt;code&gt;input_fn&lt;/code&gt; code using &lt;a href=&quot;../../../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; generally works in both graph and eager modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb20f6b000f74c9b8993c6209840216e01db70f6" translate="yes" xml:space="preserve">
          <source>Estimators can be used while eager execution is enabled. Note that &lt;code&gt;input_fn&lt;/code&gt; and all hooks are executed inside a graph context, so they have to be written to be compatible with graph mode. Note that &lt;code&gt;input_fn&lt;/code&gt; code using &lt;a href=&quot;../data&quot;&gt;&lt;code&gt;tf.data&lt;/code&gt;&lt;/a&gt; generally works in both graph and eager modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c8f7aec13ca9beaa33e9ffb481df7f5c134062" translate="yes" xml:space="preserve">
          <source>Evaluated values of &lt;code&gt;predictions&lt;/code&gt; tensors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b03b079690ef84f55b17ebc43b48b934b906b85" translate="yes" xml:space="preserve">
          <source>Evaluated values of &lt;code&gt;predictions&lt;/code&gt; tensors. The &lt;code&gt;predictions&lt;/code&gt; tensors will contain at least two keys 'dfc' and 'bias' for model explanations. The &lt;code&gt;dfc&lt;/code&gt; value corresponds to the contribution of each feature to the overall prediction for this instance (positive indicating that the feature makes it more likely to select class 1 and negative less likely). The &lt;code&gt;dfc&lt;/code&gt; is an OrderedDict, where the keys are the feature column names and the values are the contributions. It is sorted by the absolute value of the contribution (e.g OrderedDict([('age', -0.54), ('gender', 0.4), ('fare', 0.21)])). The 'bias' value will be the same across all the instances, corresponding to the probability (classification) or prediction (regression) of the training data distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76038f0588757b840cdc5f204dab1364cf8043c3" translate="yes" xml:space="preserve">
          <source>Evaluates tensors and returns numpy values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f3d0259235141125775431f66c96eedebbbfdb" translate="yes" xml:space="preserve">
          <source>Evaluates the model given evaluation data &lt;code&gt;input_fn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef0884484aa688ed75f2c6150bd98f64412bc0f" translate="yes" xml:space="preserve">
          <source>Evaluates the model on a data generator. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19439d681060998c65fa8a49375cbf14d7f1b6d2" translate="yes" xml:space="preserve">
          <source>Evaluates the value of a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462093d87b1e51760b2f9cc1fc346faa48a26ec8" translate="yes" xml:space="preserve">
          <source>Evaluates this sparse tensor in a &lt;code&gt;Session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58bb64bee2dee0e3524de394e209a784dcb0f34" translate="yes" xml:space="preserve">
          <source>Evaluates this tensor in a &lt;code&gt;Session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7513853508e7c6e3aa07908df2a450a026eb88" translate="yes" xml:space="preserve">
          <source>Evaluation</source>
          <target state="translated">Evaluation</target>
        </trans-unit>
        <trans-unit id="0cd35e83aa25817cd1618d052bf5cc8037dc8e37" translate="yes" xml:space="preserve">
          <source>Evaluation-related metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2134478429a6124d3817e9431c37bcebf0953c" translate="yes" xml:space="preserve">
          <source>Event shape describes the shape of a single draw from the distribution; it may be dependent across dimensions. For scalar distributions, the event shape is &lt;code&gt;[]&lt;/code&gt;. For a 5-dimensional MultivariateNormal, the event shape is &lt;code&gt;[5]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25be266b05af077a0ad8cad7a0ec10e539d9e8c6" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;Iterator&lt;/code&gt; must implement the &lt;code&gt;_get_batches_of_transformed_samples&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8b10297f23cdaa6155e6a8f85d988c3f770227" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;RNNCell&lt;/code&gt; must have the properties below and implement &lt;code&gt;call&lt;/code&gt; with the signature &lt;code&gt;(output, next_state) = call(input, state)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1161061553cd086534b164c366eee7799627f7" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;RNNCell&lt;/code&gt; must have the properties below and implement &lt;code&gt;call&lt;/code&gt; with the signature &lt;code&gt;(output, next_state) = call(input, state)&lt;/code&gt;. The optional third input argument, &lt;code&gt;scope&lt;/code&gt;, is allowed for backwards compatibility purposes; but should be left off for new subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299d42e26abca2a31082df354b4ce65b46c0fca9" translate="yes" xml:space="preserve">
          <source>Every &lt;code&gt;Sequence&lt;/code&gt; must implement the &lt;code&gt;__getitem__&lt;/code&gt; and the &lt;code&gt;__len__&lt;/code&gt; methods. If you want to modify your dataset between epochs you may implement &lt;code&gt;on_epoch_end&lt;/code&gt;. The method &lt;code&gt;__getitem__&lt;/code&gt; should return a complete batch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba703b38e62df0a565a8b36051f1b5465409c88f" translate="yes" xml:space="preserve">
          <source>Every layer should expose (if appropriate) an &lt;code&gt;input_spec&lt;/code&gt; attribute: a list of instances of InputSpec (one per input tensor).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd051443b2507e1e127e99b553cf6ecedbd48b0" translate="yes" xml:space="preserve">
          <source>Everything else is converted to string an passed as such.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="d6077956451fe769ecd79ba197242b337aa56e97" translate="yes" xml:space="preserve">
          <source>Example (MNIST):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5ccd8cab037ca820324afb7dcac63b912e00e1" translate="yes" xml:space="preserve">
          <source>Example 1: Dump tensor data from only MatMul and Relu ops &lt;code&gt;op_regex=&quot;^(MatMul|Relu)$&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54793e4dba84f7eb76a0c7f033fb712c51563cbd" translate="yes" xml:space="preserve">
          <source>Example 1: Training models with weights merge on CPU</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3ce3e08ccb49fe9b24c378131cf033db05e0d0" translate="yes" xml:space="preserve">
          <source>Example 1: When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are matrices (order 2), the case &lt;code&gt;axes = 1&lt;/code&gt; is equivalent to matrix multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8576e377acadb06ae63ce3356fa61a5f7c100a8d" translate="yes" xml:space="preserve">
          <source>Example 1: plain reading and writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0072322bb33224e627486eea8196e2cef187111" translate="yes" xml:space="preserve">
          <source>Example 2: Dump tensors from all ops &lt;em&gt;except&lt;/em&gt; Relu: &lt;code&gt;op_regex=&quot;(?!^Relu$)&quot;&lt;/code&gt;. This filter operates in a logical AND relation with &lt;code&gt;tensor_dtypes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa5225a972efb4ae38389305cf614f741f3d1a81" translate="yes" xml:space="preserve">
          <source>Example 2: Fibonacci sequence algorithm that writes in a loop then returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515816f78c8886d90b64cb87784a0e52b994e92b" translate="yes" xml:space="preserve">
          <source>Example 2: Training models with weights merge on CPU using cpu_relocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f4b73ff4f42e9b3ac7b8892c354d447dfc1b6e" translate="yes" xml:space="preserve">
          <source>Example 2: When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are matrices (order 2), the case &lt;code&gt;axes = [[1], [0]]&lt;/code&gt; is equivalent to matrix multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4166bf97179d81c42dccef3ab9d1594a5dec5d" translate="yes" xml:space="preserve">
          <source>Example 3:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a96c081d4f4394bb3b52f2f3107ea003ee80610" translate="yes" xml:space="preserve">
          <source>Example 3: A simple loop interacting with a tf.Variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518a9d9961987c5c80745f1ee48711b13ff01f7d" translate="yes" xml:space="preserve">
          <source>Example 3: Training models with weights merge on GPU (recommended for NV-link)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc402b2102c57373c5203d5cf2a384bbae75dfc" translate="yes" xml:space="preserve">
          <source>Example 3: When &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are matrices (order 2), the case &lt;code&gt;axes=0&lt;/code&gt; gives the outer product, a tensor of order 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f56d8c4e40812933a18ec960fa550620bea44e5" translate="yes" xml:space="preserve">
          <source>Example 4: Suppose that \(a_{ijk}\) and \(b_{lmn}\) represent two tensors of order 3. Then, &lt;code&gt;contract(a, b, [[0], [2]])&lt;/code&gt; is the order 4 tensor \(c_{jklm}\) whose entry corresponding to the indices \((j,k,l,m)\) is given by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d9e9e6f4ce5ea49de6402830c224a348be7a83" translate="yes" xml:space="preserve">
          <source>Example Usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c9431a353d348bf8c4106eea5b09e0b7f2778c" translate="yes" xml:space="preserve">
          <source>Example Use with canned &lt;a href=&quot;dnnestimator&quot;&gt;&lt;code&gt;tf.estimator.DNNEstimator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12ac3226f96243d920a907c8a0e054170d6de2a" translate="yes" xml:space="preserve">
          <source>Example docstring for subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2470add2c6a58385f524faf02b9f161d2b9bc41e" translate="yes" xml:space="preserve">
          <source>Example of &lt;code&gt;TF_CONFIG&lt;/code&gt; for chief training worker (must have one and only one):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cae7f2cb3eaf2c3f14687c6350d50e604ce166" translate="yes" xml:space="preserve">
          <source>Example of &lt;code&gt;TF_CONFIG&lt;/code&gt; for evaluator task. Evaluator is a special task that is not part of the training cluster. There could be only one. It is used for model evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2f1dc4fba9e75335a84bfba753831e0da2c4a4" translate="yes" xml:space="preserve">
          <source>Example of &lt;code&gt;TF_CONFIG&lt;/code&gt; for non-chief training worker (optional, could be multiple):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded11bc3e41cf55332a58d41ca020fcd2188cd47" translate="yes" xml:space="preserve">
          <source>Example of &lt;code&gt;TF_CONFIG&lt;/code&gt; for parameter server, aka ps (could be multiple):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379a2f6a98c8e26698ce4b95cb603e6934140326" translate="yes" xml:space="preserve">
          <source>Example of Hermitian spectrum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410ba918bf6ec843555f4b7293b763b00b8cc2ef" translate="yes" xml:space="preserve">
          <source>Example of a Toeplitz operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f83dfee4e4a7f3dc6a9fe829210faa673ca277" translate="yes" xml:space="preserve">
          <source>Example of a self-adjoint positive definite operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd71b08b62b75e20a6fe472c0485a74694a90a9a" translate="yes" xml:space="preserve">
          <source>Example of adding a dependency to an operation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b1020ef2b58eb6f4263d8e0a075a3c4bb220fe" translate="yes" xml:space="preserve">
          <source>Example of checkpointing the training pipeline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58777718a24aefbe5a8f18566dd1948a1ccda1d" translate="yes" xml:space="preserve">
          <source>Example of chief node:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598ad303ca20efc27a6504a95d01c0ebffb9a01c" translate="yes" xml:space="preserve">
          <source>Example of creating a BestExporter for training and evaluation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12f0c5dc38b2d562905eaf2ecae6ab52735894e" translate="yes" xml:space="preserve">
          <source>Example of defining in terms of a real convolution kernel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a787a1cecc5ed812272f0d7761614b0f57551910" translate="yes" xml:space="preserve">
          <source>Example of defining in terms of a real convolution kernel,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1833ce48bd953f7fd46604bc9bce116e25b3c1" translate="yes" xml:space="preserve">
          <source>Example of distributed training:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecde918e06456ccf3e309b6af50e5db3b7c87f0a" translate="yes" xml:space="preserve">
          <source>Example of evaluator node (evaluator is not part of training cluster):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daaacb4ed6b5ae6e3e41fcd268463fb2ccc0f877" translate="yes" xml:space="preserve">
          <source>Example of forcing real &lt;code&gt;dtype&lt;/code&gt; when spectrum is Hermitian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918b8c1d76391d7274c5d707b3918475217ced2f" translate="yes" xml:space="preserve">
          <source>Example of local (non-distributed) training:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e010de83f03e8242af1897d4347b3a81d8ac97e5" translate="yes" xml:space="preserve">
          <source>Example of non-chief node:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e3466008dace46e07f808a1f06c480bbbb79c1" translate="yes" xml:space="preserve">
          <source>Example of overriding the generated code for an Op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cf4690fc42df9a6f19c4ccafdd420bd4e92fac" translate="yes" xml:space="preserve">
          <source>Example of restoring the shadow variable values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e92e4b9c782e54338b631c928bc19d13a6a181" translate="yes" xml:space="preserve">
          <source>Example of separate_compiled_gradients: # In the example below, the computations for f, g and h will all be compiled # in separate scopes. with tf.xla.experimental.jit_scope( separate_compiled_gradients=True): f = tf.matmul(a, b) g = tf.gradients([f], [a, b], name='mygrads1') h = tf.gradients([f], [a, b], name='mygrads2')</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bea3d481c7a2794a987da82b4e5f8d462a88cb7" translate="yes" xml:space="preserve">
          <source>Example of transforming images and masks together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1136270e452edec85ece96cdcd819465f02495" translate="yes" xml:space="preserve">
          <source>Example of usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0322b2251169a4535d936bc1bccd14d484afce5" translate="yes" xml:space="preserve">
          <source>Example of using &lt;code&gt;.flow(x, y)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0865312d276fd0319aad510a1030d3d4f8c75ff" translate="yes" xml:space="preserve">
          <source>Example of using &lt;code&gt;.flow_from_directory(directory)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ee9c7dc231b0022d7e16e963e816d3352760d2" translate="yes" xml:space="preserve">
          <source>Example output of parsing spec:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc7841c33080ffba2d1a0ca228445d0e2ddf4147" translate="yes" xml:space="preserve">
          <source>Example subclass implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fc0aed6d9786af922825e910e0abddb6daeae3" translate="yes" xml:space="preserve">
          <source>Example usage of custom metric which uses features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527331abb9a52bf41a6b1416d788e85f6a63201e" translate="yes" xml:space="preserve">
          <source>Example usage when creating a training model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50bc38165379f784619be50f96100e5733f89c78" translate="yes" xml:space="preserve">
          <source>Example usage when graph building:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d491a17cd1bf3dfee0c39d0be6f0237a61eac0da" translate="yes" xml:space="preserve">
          <source>Example usage with &lt;a href=&quot;function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt; graph execution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d925e2167606d6281c7a1f9f1e3722e50282b90" translate="yes" xml:space="preserve">
          <source>Example usage with a classifier:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd8e2ddb23eb53f7b94afc131020ea44347eb1d" translate="yes" xml:space="preserve">
          <source>Example usage with a regressor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e115860bfdc04344656cefb82bb56606592684c7" translate="yes" xml:space="preserve">
          <source>Example usage with eager execution enabled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f636fd517a7e7db44a40549cdde033c8ec480ba" translate="yes" xml:space="preserve">
          <source>Example usage with eager execution, the default in TF 2.0:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4b7b9efd8878f1980dc8448f032a1237ad9ca9" translate="yes" xml:space="preserve">
          <source>Example usage with legacy TF 1.x graph execution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab7721397827b925456d2a147cb5704105a62a7" translate="yes" xml:space="preserve">
          <source>Example usage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bdc51ed832749b92021e3dd981f9c56dedbdf5" translate="yes" xml:space="preserve">
          <source>Example using shape_invariants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f2357642c5f96165493821d43a89ed35fbd56e" translate="yes" xml:space="preserve">
          <source>Example which demonstrates non-strict semantics: In the following example, the final value of the counter &lt;code&gt;i&lt;/code&gt; does not depend on &lt;code&gt;x&lt;/code&gt;. So the &lt;code&gt;while_loop&lt;/code&gt; can increment the counter parallel to updates of &lt;code&gt;x&lt;/code&gt;. However, because the loop counter at one loop iteration depends on the value at the previous iteration, the loop counter itself cannot be incremented in parallel. Hence if we just want the final value of the counter (which we print on the line &lt;code&gt;print(sess.run(i))&lt;/code&gt;), then &lt;code&gt;x&lt;/code&gt; will never be incremented, but the counter will be updated on a single thread. Conversely, if we want the value of the output (which we print on the line &lt;code&gt;print(sess.run(out).shape)&lt;/code&gt;), then the counter may be incremented on its own thread, while &lt;code&gt;x&lt;/code&gt; can be incremented in parallel on a separate thread. In the extreme case, it is conceivable that the thread incrementing the counter runs until completion before &lt;code&gt;x&lt;/code&gt; is incremented even a single time. The only thing that can never happen is that the thread updating &lt;code&gt;x&lt;/code&gt; can never get ahead of the counter thread because the thread incrementing &lt;code&gt;x&lt;/code&gt; depends on the value of the counter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3b161e7903a377f4897fa329d44f597e09c69b" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;default_value&lt;/code&gt;: File '/us/states.txt' contains 51 lines - the first line is 'XX', and the other 50 each have a 2-character U.S. state abbreviation. Both a literal 'XX' in input, and other values missing from the file, will be assigned ID 0. All others are assigned the corresponding line number 1-50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3692e468e65c6e00dbcc913dca39948c41e9a2c8" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;default_value&lt;/code&gt;: File &lt;code&gt;'/us/states.txt'&lt;/code&gt; contains 51 lines - the first line is &lt;code&gt;'XX'&lt;/code&gt;, and the other 50 each have a 2-character U.S. state abbreviation. Both a literal &lt;code&gt;'XX'&lt;/code&gt; in input, and other values missing from the file, will be assigned ID 0. All others are assigned the corresponding line number 1-50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bcd2321ebb901af6f07ff3194e39b45e4583569" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;default_value&lt;/code&gt;: In the following example, each input in &lt;code&gt;vocabulary_list&lt;/code&gt; is assigned an ID 0-4 corresponding to its index (e.g., input 'B' produces output 3). All other inputs are assigned &lt;code&gt;default_value&lt;/code&gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041df3298d747f84dc836614f9a8d0706b82bb0c" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;num_oov_buckets&lt;/code&gt;: File '/us/states.txt' contains 50 lines, each with a 2-character U.S. state abbreviation. All inputs with values in that file are assigned an ID 0-49, corresponding to its line number. All other values are hashed and assigned an ID 50-54.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f561d6bc93f5cf5b940311eba631bc8eebd85e" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;num_oov_buckets&lt;/code&gt;: File &lt;code&gt;'/us/states.txt'&lt;/code&gt; contains 50 lines, each with a 2-character U.S. state abbreviation. All inputs with values in that file are assigned an ID 0-49, corresponding to its line number. All other values are hashed and assigned an ID 50-54.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dba832f3b5e04108a0e19946d3c85263dad3f49" translate="yes" xml:space="preserve">
          <source>Example with &lt;code&gt;num_oov_buckets&lt;/code&gt;: In the following example, each input in &lt;code&gt;vocabulary_list&lt;/code&gt; is assigned an ID 0-3 corresponding to its index (e.g., input 'B' produces output 2). All other inputs are hashed and assigned an ID 4-5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23061b7cd392ab5eb922c8ff6543c34bdcb5a2d" translate="yes" xml:space="preserve">
          <source>Example with nesting and a namedtuple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72363b38997b4f64381ddc4dee5e0c9078d4238" translate="yes" xml:space="preserve">
          <source>Example with two replicas: Replica 0 &lt;code&gt;value&lt;/code&gt;: {'a': 1, 'b': [40, 1]} Replica 1 &lt;code&gt;value&lt;/code&gt;: {'a': 3, 'b': [ 2, 98]}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="567d171adb2f3af5c831c8014d6d2644694164d6" translate="yes" xml:space="preserve">
          <source>Example: - [0, 1, 1] and [1, 0, 1] compare equal. - [0, 0, 1] and [0, 1] compare unequal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f9b94d080f139845f4dafcda33f41b366ff378" translate="yes" xml:space="preserve">
          <source>Example: Create summaries manually every 100 steps in the chief.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173aca822521be5b122b73f49f1871722c08366e" translate="yes" xml:space="preserve">
          <source>Example: Print selected summary values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a784b5743567dd18b16e6d3b489c110a8d1c990b" translate="yes" xml:space="preserve">
          <source>Example: Print the contents of an events file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e6fc1b2b82b717f6610ef6179737c68ecbc81b" translate="yes" xml:space="preserve">
          <source>Example: Start a thread to print losses. We want this thread to run every 60 seconds, so we launch it with &lt;code&gt;sv.loop()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f6ca6939c144eae87aaf899e625c5d04303ebc" translate="yes" xml:space="preserve">
          <source>Example: The following ragged tensors are equivalent, and all represent the nested list &lt;code&gt;[[3, 1, 4, 1], [], [5, 9, 2], [6], []]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6000fe791e40d6738b7d6b145a5c4796da7c9eff" translate="yes" xml:space="preserve">
          <source>Example: The sparse tensor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4831dd77f2817a6c577b6208057931f2ede2496f" translate="yes" xml:space="preserve">
          <source>Example: decay 1/t with a rate of 0.5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be7d9a2564ff822574226c3c6979bdbd88cd6e4" translate="yes" xml:space="preserve">
          <source>Example: decay every 100000 steps with a base of 0.96:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace5a52f8a2edfc2fb79b4c37c4790b5eb41eee8" translate="yes" xml:space="preserve">
          <source>Example: decay exponentially with a base of 0.96:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce11d63dc1b31ac81a1b58ec71985d1a67e4f9f8" translate="yes" xml:space="preserve">
          <source>Example: decay from 0.1 to 0.01 in 10000 steps using sqrt (i.e. power=0.5):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793c28fc14e5a01f7866d225e6c0168a3353b837" translate="yes" xml:space="preserve">
          <source>Example: use a learning rate that's 1.0 for the first 100001 steps, 0.5 for the next 10000 steps, and 0.1 for any additional steps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104a08ed7eb335488d3ea3f93c6210a1cc4746c" translate="yes" xml:space="preserve">
          <source>Example::</source>
          <target state="translated">Example::</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="87dd337717aa93a3e1f625c5009322053b08b819" translate="yes" xml:space="preserve">
          <source>Examples of initialization of one or a batch of distributions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d99cda6b7a8a98bf3b0ce2b08deac42570d99ca" translate="yes" xml:space="preserve">
          <source>Examples with batched 'params' and 'indices':</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="7db926df5edbb2e0244efc4cb72d768c859bda52" translate="yes" xml:space="preserve">
          <source>Exception handling:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1fd6ee78dd93cc7393132c2166292f654b771e" translate="yes" xml:space="preserve">
          <source>Exception types for TensorFlow errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce152fd2a50b95401ab6996a9060742977853fe6" translate="yes" xml:space="preserve">
          <source>Exceptions include: 1) None output: a NoOp would be returned which control-depends on computation. 2) Single value output: A tuple containing the value would be returned. 3) Operation-only outputs: a NoOp would be returned which control-depends on computation. TODO(b/121383831): Investigate into removing these special cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a435b066a07d346a649075f82061604178c943e1" translate="yes" xml:space="preserve">
          <source>Exceptions raised but not handled by the &lt;code&gt;QueueRunner&lt;/code&gt; threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c0668261fe61ad5e97be94ab196c8aaabcd82c1" translate="yes" xml:space="preserve">
          <source>Exceptions raised in queue runner threads are handled in one of two ways depending on whether or not a &lt;code&gt;Coordinator&lt;/code&gt; was passed to &lt;code&gt;create_threads()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a50ad2d338624f150d3e12c3d98da4eca3b2fd" translate="yes" xml:space="preserve">
          <source>Exceptions that indicate that the training inputs have been exhausted, &lt;a href=&quot;../../../errors/outofrangeerror&quot;&gt;&lt;code&gt;tf.errors.OutOfRangeError&lt;/code&gt;&lt;/a&gt;, also cause &lt;code&gt;sv.should_stop()&lt;/code&gt; to return &lt;code&gt;True&lt;/code&gt; but are not re-raised from the &lt;code&gt;with&lt;/code&gt; block: they indicate a normal termination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f3013605a5648326257001d4f2130af330c7e64" translate="yes" xml:space="preserve">
          <source>Execute all cleanup functions. Normally called for you after tearDown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e375cf08a633917df1df912958f4d60e2eee13" translate="yes" xml:space="preserve">
          <source>Execute function &lt;code&gt;fn()&lt;/code&gt; inside the critical section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbdd16c5192dee3ed26ddf33bb3da6a11b3d34c" translate="yes" xml:space="preserve">
          <source>Executes ops specified by &lt;code&gt;fn&lt;/code&gt; on each replica. If &lt;code&gt;args&lt;/code&gt; or &lt;code&gt;kwargs&lt;/code&gt; have &quot;per-replica&quot; values, such as those produced by a &quot;distributed &lt;code&gt;Dataset&lt;/code&gt;&quot;, when &lt;code&gt;fn&lt;/code&gt; is executed on a particular replica, it will be executed with the component of those &quot;per-replica&quot; values that correspond to that replica.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a75d59c79f71a41f7d05e765e21135e40ec896e" translate="yes" xml:space="preserve">
          <source>Executing inside &lt;a href=&quot;../../function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;, unless under &lt;a href=&quot;../../init_scope&quot;&gt;&lt;code&gt;tf.init_scope&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../config/experimental_run_functions_eagerly&quot;&gt;&lt;code&gt;tf.config.experimental_run_functions_eagerly(True)&lt;/code&gt;&lt;/a&gt; is previously called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a10bab3a1306869bb43217c1e5e4cddf7e6bfae" translate="yes" xml:space="preserve">
          <source>Executing inside &lt;a href=&quot;function&quot;&gt;&lt;code&gt;tf.function&lt;/code&gt;&lt;/a&gt;, unless under &lt;a href=&quot;init_scope&quot;&gt;&lt;code&gt;tf.init_scope&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;config/experimental_run_functions_eagerly&quot;&gt;&lt;code&gt;tf.config.experimental_run_functions_eagerly(True)&lt;/code&gt;&lt;/a&gt; is previously called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ae6f15527ec34c1543d31bebd784257e5cbaf2" translate="yes" xml:space="preserve">
          <source>Executing inside a transformation function for &lt;code&gt;tf.dataset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0f9a8e624edb47e9fd7dbb2e16409d83c4e71d" translate="yes" xml:space="preserve">
          <source>Exit a &lt;code&gt;with&lt;/code&gt; block, closing the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d33b74e48885a60aeaefa61848809d032af067" translate="yes" xml:space="preserve">
          <source>Exit the training loop by causing &lt;code&gt;should_stop()&lt;/code&gt; to return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b741870e6731ad0d91e1fee0b121c9f3b3a9d19" translate="yes" xml:space="preserve">
          <source>Exit: At the &lt;code&gt;close()&lt;/code&gt;, the hooked session does following things in order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b327accbcb0a5b8afa0c7176dd223df7684025" translate="yes" xml:space="preserve">
          <source>Exit: At the &lt;code&gt;close()&lt;/code&gt;, the monitored session does following things in order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5215e7ca7db8397a68e271056050a9a72b04b5" translate="yes" xml:space="preserve">
          <source>Exits the recording context, no further operations are traced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a9c909a6870e627a057373b51b024e1e234caa" translate="yes" xml:space="preserve">
          <source>Expands &lt;code&gt;signal&lt;/code&gt;'s &lt;code&gt;axis&lt;/code&gt; dimension into frames of &lt;code&gt;frame_length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2ad79af0021ac4858d9226489ac9c04faf0e6f5" translate="yes" xml:space="preserve">
          <source>Experimental API for building input pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ff10b66d8731358ac8244e1c00f640e01f684c" translate="yes" xml:space="preserve">
          <source>Experimental Distribution Strategy library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c121ce5da3d3b76d2d947821ab9df93eb5477aa7" translate="yes" xml:space="preserve">
          <source>Experimental context manager for use when defining a custom summary op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926762eb23930f8e3ae64c0d83b8664da2e042b6" translate="yes" xml:space="preserve">
          <source>Experimental: this exists to support the usage of V1-style manual summary writing (via the construction of a &lt;a href=&quot;../../compat/v1/summary&quot;&gt;&lt;code&gt;tf.compat.v1.Summary&lt;/code&gt;&lt;/a&gt; protocol buffer) with the V2 summary writing API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a785ca84d56b6101e1f706382fe3e7b06ddbd6" translate="yes" xml:space="preserve">
          <source>Explicitly marks flags as parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc0eb352d4fd554ec47ef13b09615fbcdd6b7f9" translate="yes" xml:space="preserve">
          <source>Exponential Linear Unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5f4f32cc189b6f4dd670fd7b30f74c670b7228" translate="yes" xml:space="preserve">
          <source>Exponential activation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e03e02cd515bba42965eafc38e09638d1ba2c6f" translate="yes" xml:space="preserve">
          <source>Exponential distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9101b4b871e5e17bd87173bc3ae8137c9a7080f0" translate="yes" xml:space="preserve">
          <source>Exponential linear unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d014f81f67852159a641e23ea7c906c62bb828" translate="yes" xml:space="preserve">
          <source>Exponentially scaled modified Bessel function of order 0 defined as &lt;code&gt;bessel_i0e(x) = exp(-abs(x)) bessel_i0(x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77d30ccae12ce68a067ccfe3da843d3e6bcf076" translate="yes" xml:space="preserve">
          <source>Exponentially scaled modified Bessel function of order 0 defined as &lt;code&gt;bessel_i1e(x) = exp(-abs(x)) bessel_i1(x)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eafc8668c9f38493ae76076b35f34c2fd52217" translate="yes" xml:space="preserve">
          <source>Export output defaults to &lt;code&gt;RegressionOutput&lt;/code&gt;, whereas &lt;code&gt;BinaryClassHead&lt;/code&gt; defaults to &lt;code&gt;PredictOutput&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37343fbc2a734ed5d2673a49ae41a53a7d7f024" translate="yes" xml:space="preserve">
          <source>Exporting</source>
          <target state="translated">Exporting</target>
        </trans-unit>
        <trans-unit id="c2c3e4d4e94806a23552dd6d4ca1e15b82a0cf12" translate="yes" xml:space="preserve">
          <source>Exporting from a function without a fixed signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9270ad488e74dac5b3f8cf66707fb174a4a97cc" translate="yes" xml:space="preserve">
          <source>Exporting/importing meta graphs is not supported unless both &lt;code&gt;graph_def&lt;/code&gt; and &lt;code&gt;graph&lt;/code&gt; are provided. No graph exists when eager execution is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972bac7a70608bcda85786ab7a37bc49e2557b73" translate="yes" xml:space="preserve">
          <source>Exporting/importing meta graphs is not supported. No graph exists when eager execution is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ec1e4960a7b50429456e650b9743c6b77af376" translate="yes" xml:space="preserve">
          <source>Exports a &lt;a href=&quot;../../../../keras/model&quot;&gt;&lt;code&gt;tf.keras.Model&lt;/code&gt;&lt;/a&gt; as a Tensorflow SavedModel. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037b7cc0a3b1a8fa8456d461b271816999bb63f2" translate="yes" xml:space="preserve">
          <source>Exports a &lt;code&gt;SavedModel&lt;/code&gt; with &lt;code&gt;tf.MetaGraphDefs&lt;/code&gt; for each requested mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178c80ffa7dd8fc1feabbbefe3b4b843e40d326c" translate="yes" xml:space="preserve">
          <source>Exports inference graph as a &lt;code&gt;SavedModel&lt;/code&gt; into the given dir.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18db89eda532930544f1808335bc755809b1d792" translate="yes" xml:space="preserve">
          <source>Exports inference graph as a &lt;code&gt;SavedModel&lt;/code&gt; into the given dir. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fa3e5e307c033249da957003469524b5f0592b" translate="yes" xml:space="preserve">
          <source>Exports the Trackable object &lt;code&gt;obj&lt;/code&gt; to &lt;a href=&quot;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/saved_model/README.md&quot;&gt;SavedModel format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1098ed652cfc03241430f4e8dedb771d99c6430" translate="yes" xml:space="preserve">
          <source>Exports the given &lt;code&gt;Estimator&lt;/code&gt; to a specific format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7149496d9a4839c6fb3b5c02bc8d74740f250834" translate="yes" xml:space="preserve">
          <source>Expressions:</source>
          <target state="translated">Expressions:</target>
        </trans-unit>
        <trans-unit id="164ea69930ab8df3bb4d3ee0410b1d6bda0c2a6c" translate="yes" xml:space="preserve">
          <source>Extra assets may be written into the &lt;code&gt;SavedModel&lt;/code&gt; via the &lt;code&gt;assets_extra&lt;/code&gt; argument. This should be a dict, where each key gives a destination path (including the filename) relative to the assets.extra directory. The corresponding value gives the full path of the source file to be copied. For example, the simple case of copying a single file without renaming it is specified as &lt;code&gt;{'my_asset_file.txt': '/path/to/my_asset_file.txt'}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492bdefca5e8d605f4b78c8b4ffdeb101c4ed050" translate="yes" xml:space="preserve">
          <source>Extract &lt;code&gt;patches&lt;/code&gt; from &lt;code&gt;images&lt;/code&gt; and put them in the &quot;depth&quot; output dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fef71d1e5d8b73071d4f157fbc1a59a9a9a893" translate="yes" xml:space="preserve">
          <source>Extract &lt;code&gt;patches&lt;/code&gt; from &lt;code&gt;images&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584d91d7ab384adf62f6fecbe1176e042c71db3c" translate="yes" xml:space="preserve">
          <source>Extract &lt;code&gt;patches&lt;/code&gt; from &lt;code&gt;input&lt;/code&gt; and put them in the &quot;depth&quot; output dimension. 3D extension of &lt;code&gt;extract_image_patches&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69af2d30e21c558a02bea7b213da79207f5bd726" translate="yes" xml:space="preserve">
          <source>Extract the shape information of a JPEG-encoded image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="538a777bb1a01feffc2ac87710b68583d6d20265" translate="yes" xml:space="preserve">
          <source>Extract the subgraph that can reach any of the nodes in 'dest_nodes'. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cea78f9cb3874209e78f283267d217fe6be5d3" translate="yes" xml:space="preserve">
          <source>Extraction of the average gradient is blocked until the required number of gradients has been accumulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafc900bb37fc83073f4ab7e2220e6aa0f85ad74" translate="yes" xml:space="preserve">
          <source>Extracts a glimpse from the input tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a34851a4628f1022c20a689edabaafb13781ffb" translate="yes" xml:space="preserve">
          <source>Extracts a slice from a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c645ed0f344783927bb0e282ac98e2846942b8fa" translate="yes" xml:space="preserve">
          <source>Extracts a strided slice of a tensor (generalized python array indexing).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e84628410abbba57634c26ee47624e6fb5c5296" translate="yes" xml:space="preserve">
          <source>Extracts crops from the input image tensor and resizes them using bilinear sampling or nearest neighbor sampling (possibly with aspect ratio change) to a common output size specified by &lt;code&gt;crop_size&lt;/code&gt;. This is more general than the &lt;code&gt;crop_to_bounding_box&lt;/code&gt; op which extracts a fixed size slice from the input image and does not allow resizing or aspect ratio change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962f25f0a4474fb874998be05b54cc637211919e" translate="yes" xml:space="preserve">
          <source>Extracts crops from the input image tensor and resizes them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef180b7f701790513171158add127c2106f4b90" translate="yes" xml:space="preserve">
          <source>Extracts image patches from the input tensor to form a &lt;em&gt;virtual&lt;/em&gt; tensor of shape &lt;code&gt;[batch, out_height, out_width, filter_height * filter_width * in_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa59b7e25f71438c8e4f2fdd9767a47ee015c4d1" translate="yes" xml:space="preserve">
          <source>FILL THIS IN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b64b5401b853d517a09f93af33024aa358f75b" translate="yes" xml:space="preserve">
          <source>FP32/FP16 precision</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68c9f5ad44202d7785d32aa64913fc9806abe58" translate="yes" xml:space="preserve">
          <source>FP32/FP16 precision with pre-built engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf05de317e8bffe740353b81c2056ee7a780f56c" translate="yes" xml:space="preserve">
          <source>Fail if the two objects are equal as determined by the '!=' operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d688f47ff119167da8f40aca7cf48da60d0e1d3c" translate="yes" xml:space="preserve">
          <source>Fail if the two objects are equal as determined by their difference rounded to the given number of decimal places (default 7) and comparing to zero, or by comparing that the difference between the two objects is less than the given delta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6d0b1d84f00848578493c90ccdd59e68b9978d" translate="yes" xml:space="preserve">
          <source>Fail if the two objects are unequal as determined by the '==' operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1cddafab3d11ebc7f9b67baa9212b85f01704a" translate="yes" xml:space="preserve">
          <source>Fail if the two objects are unequal as determined by their difference rounded to the given number of decimal places (default 7) and comparing to zero, or by comparing that the difference between the two objects is more than the given delta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90c05535c1484beaa10b9e343151d2dda2df269" translate="yes" xml:space="preserve">
          <source>Fail if the two sequences are unequal as determined by their value differences rounded to the given number of decimal places (default 7) and comparing to zero, or by comparing that the difference between each value in the two sequences is more than the given delta.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b09491a2e091e0d4883b90c183a399ea8883f86" translate="yes" xml:space="preserve">
          <source>Fail immediately with the given message, optionally prefixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54388df2306db1f46868df1364def0f8214cbb4" translate="yes" xml:space="preserve">
          <source>Fail the test if the text matches the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18174045d242bd42e10c3c0a79548ccc7b04f8e1" translate="yes" xml:space="preserve">
          <source>Fail the test unless the text matches the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317a53187e390a71514cd2ea9224a8dd8fd2c2cb" translate="yes" xml:space="preserve">
          <source>Fail unless a log message of level &lt;em&gt;level&lt;/em&gt; or higher is emitted on &lt;em&gt;logger_name&lt;/em&gt; or its children. If omitted, &lt;em&gt;level&lt;/em&gt; defaults to INFO and &lt;em&gt;logger&lt;/em&gt; defaults to the root logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224a729bea443ca313463dee8480aee3bf36395c" translate="yes" xml:space="preserve">
          <source>Fail unless a warning of class warnClass is triggered by the callable when invoked with specified positional and keyword arguments. If a different type of warning is triggered, it will not be handled: depending on the other warning filtering rules in effect, it might be silenced, printed out, or raised as an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794fe5fe43f2b133d3282805e5b8fcb9248b06f4" translate="yes" xml:space="preserve">
          <source>Fail unless an exception of class expected_exception is raised by the callable when invoked with specified positional and keyword arguments. If a different type of exception is raised, it will not be caught, and the test case will be deemed to have suffered an error, exactly as for an unexpected exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9444367645842529e9a3b57a826433c9c9f6b6" translate="yes" xml:space="preserve">
          <source>Fake-quantize the 'inputs' tensor of type float and one of the shapes: &lt;code&gt;[d]&lt;/code&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ef99c6b8428d09f63e4a7d97f3a72400b7c4f6" translate="yes" xml:space="preserve">
          <source>Fake-quantize the 'inputs' tensor of type float via global float scalars &lt;code&gt;min&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f52fe643923782ecf2f3d6c9b84b44b2ba6f1284" translate="yes" xml:space="preserve">
          <source>Fake-quantize the 'inputs' tensor, type float to 'outputs' tensor of same type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6466b40658f50255a966ff6bc949e1eaf7f324" translate="yes" xml:space="preserve">
          <source>False: executes each operation asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bacbc01b8e8d65a81b7a577564a2ad70746d23" translate="yes" xml:space="preserve">
          <source>Fashion-MNIST dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe9878782b0da78594267486a5626a0be461e0b" translate="yes" xml:space="preserve">
          <source>Fast Fourier transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360d68ba6f807c157ba9ba7b70550e6c9f3ffa4d" translate="yes" xml:space="preserve">
          <source>Fast GRU implementation backed by cuDNN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8bb42b9fb0290de9166de7c16619501a1feb12" translate="yes" xml:space="preserve">
          <source>Fast LSTM implementation backed by cuDNN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4245fa3f7cbed5285f7a0350256c3ba269ba7d00" translate="yes" xml:space="preserve">
          <source>Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b1c1fc16a871c94652815a12e26ab11263cad5" translate="yes" xml:space="preserve">
          <source>Faster than sigmoid. Returns &lt;code&gt;0.&lt;/code&gt; if &lt;code&gt;x &amp;lt; -2.5&lt;/code&gt;, &lt;code&gt;1.&lt;/code&gt; if &lt;code&gt;x &amp;gt; 2.5&lt;/code&gt;. In &lt;code&gt;-2.5 &amp;lt;= x &amp;lt;= 2.5&lt;/code&gt;, returns &lt;code&gt;0.2 * x + 0.5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c1e072633d22e2aade44664891ba9a15e50cd9" translate="yes" xml:space="preserve">
          <source>Faster to compute than sigmoid activation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bfe60cc099d90bd06ed304ed295cf858476330" translate="yes" xml:space="preserve">
          <source>Feature columns are of type V2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070e6dab4ad4acc3df2f022293102d5f296b468a" translate="yes" xml:space="preserve">
          <source>Feature-wise normalization of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0393f05a48a53b0acc3a57a2c1f23aefef05410" translate="yes" xml:space="preserve">
          <source>Felix Gers, Jurgen Schmidhuber, and Fred Cummins. &quot;Learning to forget: Continual prediction with LSTM.&quot; IET, 850-855, 1999.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef781e4eba5fab9683184738bf500b8295f2bfa" translate="yes" xml:space="preserve">
          <source>Fetch the current asset path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db8b651e30c06e23e32a46b09058541af7a5658" translate="yes" xml:space="preserve">
          <source>Fetches a list of optimizer variables in the default graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="208b0c51cfaca2d2db585f2665561398e6f952bf" translate="yes" xml:space="preserve">
          <source>Fetches the Jacobian-vector product computed for &lt;code&gt;primals&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a293b575bf1d5a103c6e0e28889a74b7565cee" translate="yes" xml:space="preserve">
          <source>Fields:</source>
          <target state="translated">Fields:</target>
        </trans-unit>
        <trans-unit id="6c74664d5467bedeeec61d6de90b295aefeb2531" translate="yes" xml:space="preserve">
          <source>Figure illustrates the interaction of these components. &quot;/job:worker/task:0&quot; and &quot;/job:ps/task:0&quot; are both tasks with worker services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159e9d467070447df6944016c6ee0bba81137641" translate="yes" xml:space="preserve">
          <source>File I/O wrappers without thread locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2587e69f02d48d802800b9b142e0a026de4abb" translate="yes" xml:space="preserve">
          <source>FileStatistics struct that contains information about the path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47805197178266d81d15ed833d217302d0468cd7" translate="yes" xml:space="preserve">
          <source>Files in tar, tar.gz, tar.bz, and zip formats can also be extracted. Passing a hash will verify the file after download. The command line programs &lt;code&gt;shasum&lt;/code&gt; and &lt;code&gt;sha256sum&lt;/code&gt; can compute the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed5236bdaf974f37a0f419a92c7732085d21554" translate="yes" xml:space="preserve">
          <source>Fills empty rows in the input 2-D &lt;code&gt;SparseTensor&lt;/code&gt; with a default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191ef391edf179c62838570c65fd5d59b43d8a96" translate="yes" xml:space="preserve">
          <source>Filters &lt;code&gt;sk_params&lt;/code&gt; and returns those in &lt;code&gt;fn&lt;/code&gt;'s arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f85fe5e0eb5829649fc74501c2797e0a5749f7" translate="yes" xml:space="preserve">
          <source>Filters stack frames from the module where this is used (best effort).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73b921eb11bf8c6c7c26ac1f940650c83b38724" translate="yes" xml:space="preserve">
          <source>Filters this dataset according to &lt;code&gt;predicate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f09cc083d67b76042568ffa75f3802f349b3495d" translate="yes" xml:space="preserve">
          <source>Filters this dataset according to &lt;code&gt;predicate&lt;/code&gt;. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c903b1bc45a8ada25a60850da0b09b84ebcde19f" translate="yes" xml:space="preserve">
          <source>Finalizes this graph, making it read-only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecfa9d80e6f64745e132d951f00acbf9be7b6485" translate="yes" xml:space="preserve">
          <source>Finally use a method (such as &lt;a href=&quot;strategy#reduce&quot;&gt;&lt;code&gt;tf.distribute.Strategy.reduce&lt;/code&gt;&lt;/a&gt;) to convert the resulting &quot;per-replica&quot; values into ordinary &lt;code&gt;Tensor&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acf3bc9d828b2ec13c9c22f9d93cb8857e33537" translate="yes" xml:space="preserve">
          <source>Finds the filename of latest saved checkpoint file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5714c745bc465ce920adeb9148ea0e19c01510a" translate="yes" xml:space="preserve">
          <source>Finds the filename of the latest saved checkpoint file in &lt;code&gt;model_dir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c497ed1562ad942752e69be962a205e29a0fa402" translate="yes" xml:space="preserve">
          <source>Finds the index of the closest cluster center to each input point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801ce4a21b2fba42ff49470d900e55ccd05344b0" translate="yes" xml:space="preserve">
          <source>Finds unique elements in a 1-D tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67864305a840562104d7b5e16db9cc161966329" translate="yes" xml:space="preserve">
          <source>Finds values and indices of the &lt;code&gt;k&lt;/code&gt; largest entries for the last dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af30be9d790e1e119e17560066c8c66fb8f37088" translate="yes" xml:space="preserve">
          <source>Fingerprint op considers the first dimension of &lt;code&gt;data&lt;/code&gt; as the batch dimension, and &lt;code&gt;output[i]&lt;/code&gt; contains the fingerprint value generated from contents in &lt;code&gt;data[i, ...]&lt;/code&gt; for all &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c15bbb59710f1b314ab98c78d26b50b325ff21" translate="yes" xml:space="preserve">
          <source>Fingerprint op writes fingerprint values as byte arrays. For example, the default method &lt;code&gt;farmhash64&lt;/code&gt; generates a 64-bit fingerprint value at a time. This 8-byte value is written out as an &lt;a href=&quot;../tf#uint8&quot;&gt;&lt;code&gt;tf.uint8&lt;/code&gt;&lt;/a&gt; array of size 8, in little-endian order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0294ba11a5be64d665b2772cb87eba1fb22ce5ec" translate="yes" xml:space="preserve">
          <source>First we define the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4e055f26792fc37dc0795930fb9e3effd084cc" translate="yes" xml:space="preserve">
          <source>Fits the data generator to some sample data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b7fa426d96a8c15b52923880d79992cbbd900d" translate="yes" xml:space="preserve">
          <source>Fits the model on data yielded batch-by-batch by a Python generator. (deprecated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d2a04ec34e8795ff7f5f33aa56f7a77c8bcc78" translate="yes" xml:space="preserve">
          <source>Fits the state of the preprocessing layer to the data being passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f150a50fe544ef1c90226d7313155896658e69c" translate="yes" xml:space="preserve">
          <source>Fits the state of the preprocessing layer to the dataset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7c20b6836a1a8e925b2cd5cc10ae1834fe3d78" translate="yes" xml:space="preserve">
          <source>Flatten a tensor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f67378d5dfd2e28a398854dac316c760ad7f67" translate="yes" xml:space="preserve">
          <source>Flattening a 3D tensor to 2D by collapsing the last dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d6725dbcd4174b52a67ca8012a9fe8d4866758" translate="yes" xml:space="preserve">
          <source>Flattens an input tensor while preserving the batch axis (axis 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56b885e27e87eca4ac7366c4be1d9b94ad78c3ef" translate="yes" xml:space="preserve">
          <source>Flattens the filter to a 2-D matrix with shape &lt;code&gt;[filter_height * filter_width * in_channels, output_channels]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2a63b5612a9d61a1bb9f06334c61eebfd78ea2" translate="yes" xml:space="preserve">
          <source>Flattens the input. Does not affect the batch size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604fa3f4b0a02d70b991c191d54820a41775d62a" translate="yes" xml:space="preserve">
          <source>Flip an image horizontally (left to right).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b52601c861ca2ab292144c650c85f55273f72f" translate="yes" xml:space="preserve">
          <source>Flip an image vertically (upside down).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3f317cb7fee65325f7052ae8fe630967b8fe4c" translate="yes" xml:space="preserve">
          <source>Flip each bit of supported types. For example, type &lt;code&gt;int8&lt;/code&gt; (decimal 2) binary 00000010 becomes (decimal -3) binary 11111101. This operation is performed on each element of the tensor argument &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a522d2554ce1f4be52f55076b2741713cbd45ec" translate="yes" xml:space="preserve">
          <source>Flush the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8d4e8b184b36bf829848dabccbd29eed8aad30" translate="yes" xml:space="preserve">
          <source>Flushes and closes the summary writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbf53cec96a5446255caa0966d9befabc811892" translate="yes" xml:space="preserve">
          <source>Flushes any buffered data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb205e45a353b942abb883e789503bde26fce540" translate="yes" xml:space="preserve">
          <source>Flushes the Writable file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba4cab89493ed49c06282e139f3f44d50a23884" translate="yes" xml:space="preserve">
          <source>Flushes the event file to disk and close the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411ec1b384ddb34e5e50e858b2000e66bb3e655d" translate="yes" xml:space="preserve">
          <source>Flushes the event file to disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15713d62ed5ca4009b476df4c237ce2bc0ad0830" translate="yes" xml:space="preserve">
          <source>Following explains differences between the expected SparseTensors: For example if dense form of your sparse data has shape &lt;code&gt;[3, 5]&lt;/code&gt; and values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f9a841a7e0cc5b022e6318bea78b55a9efc104" translate="yes" xml:space="preserve">
          <source>For 'channels_last' data_format, the 2nd, 3rd and 4th dimension will be padded. For 'channels_first' data_format, the 3rd, 4th and 5th dimension will be padded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d447d9221f45cdb582dda20329208318ce162fc" translate="yes" xml:space="preserve">
          <source>For 0 &amp;lt;= i &amp;lt; len(spatial_dims), we assign:</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
