<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="1dad324eea1e02746dc15d325e015070ea526f47" translate="yes" xml:space="preserve">
          <source>But an interceptor can change this to an &lt;em&gt;observable&lt;/em&gt; that emits more than once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bd50bba245c58f59752096de59db1d05418d3c" translate="yes" xml:space="preserve">
          <source>But clicking a link in an email, entering it in the browser address bar, or merely refreshing the browser while on the hero detail page &amp;mdash; all of these actions are handled by the browser itself, &lt;em&gt;outside&lt;/em&gt; the running application. The browser makes a direct request to the server for that URL, bypassing the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa03a76338d6f6af61aea8774405dc940313388b" translate="yes" xml:space="preserve">
          <source>But first, make a few changes to the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27f7b3e935b9fc74c79376898a71d98935aa436" translate="yes" xml:space="preserve">
          <source>But in the absence of a compelling reason to keep them around, your preference should be to remove DOM elements that the user can't see and recover the unused resources with a structural directive like &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edb9da96e057d100aa5383d0834fa22e414c6e1" translate="yes" xml:space="preserve">
          <source>But interceptors that examine and modify the response from &lt;code&gt;next.handle()&lt;/code&gt; will see all of these events. Your interceptor should return &lt;em&gt;every event untouched&lt;/em&gt; unless it has a &lt;em&gt;compelling reason to do otherwise&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36ff3370e272264824942a257a5f735eab10803" translate="yes" xml:space="preserve">
          <source>But on the shared or production server, you might serve the app from a subfolder. For example, when the URL to load the app is something like &lt;code&gt;http://www.mysite.com/my/app/&lt;/code&gt;, the subfolder is &lt;code&gt;my/app/&lt;/code&gt; and you should add &lt;code&gt;&amp;lt;base href=&quot;/my/app/&quot;&amp;gt;&lt;/code&gt; to the server version of the &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b97cebd5bc435fb7714257eba2ba270e61f5214" translate="yes" xml:space="preserve">
          <source>But the compiler won't throw an error when it encounters &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt;. It simply renders them as empty tags and the browser ignores them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e1ffc936f0d832154812aedbbbdd45670ea6cb" translate="yes" xml:space="preserve">
          <source>But the router is still loading the &lt;code&gt;AdminModule&lt;/code&gt; even if the user can't visit any of its components. Ideally, you'd only load the &lt;code&gt;AdminModule&lt;/code&gt; if the user is logged in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf7129241a1e1a5c0fa7cf971437230767eaf7b" translate="yes" xml:space="preserve">
          <source>But the test's asynchronous nature is revealed by the call to &lt;code&gt;fixture.whenStable()&lt;/code&gt;, which breaks the linear flow of control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cea244f43f2793e842872ae957b0a1f13e42a42" translate="yes" xml:space="preserve">
          <source>But there's plenty of template complexity even in this simple form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b11b3e52dfeccee3a7be0007f3d3766d07568c9" translate="yes" xml:space="preserve">
          <source>But when using them from AngularJS templates, you must use kebab-case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943e02425418f80a99a67821520af9a48faca8cd" translate="yes" xml:space="preserve">
          <source>But you can also start adding &lt;em&gt;type annotations&lt;/em&gt; to get even more out of TypeScript's type system. For instance, you can annotate the checkmark filter so that it explicitly expects booleans as arguments. This makes it clearer what the filter is supposed to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfadbd7a577133041a60f331a0e2ad6af20f3f8b" translate="yes" xml:space="preserve">
          <source>By</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9979e502bac7109b83a440b9de42340f258ddfa0" translate="yes" xml:space="preserve">
          <source>By adding &lt;code&gt;&amp;lt;live-example&amp;gt;&lt;/code&gt; to the page you generate links that run sample code in the Stackblitz live coding environment and download that code to the reader's file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cf4fb2c70012c8404bf6ea7e18e7ae9d001da1c" translate="yes" xml:space="preserve">
          <source>By clicking a hero in the dashboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c882c348dd5f75caf8d98a0cc0eb826d015cff" translate="yes" xml:space="preserve">
          <source>By clicking a hero in the heroes list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea68802c089f45528d4b35900b0fde6854239f2" translate="yes" xml:space="preserve">
          <source>By clicking the browser's back button, you can go back to the hero list or dashboard view, depending upon which sent you to the detail view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5dc8091fb2b001718c9b188eeb628b36637423" translate="yes" xml:space="preserve">
          <source>By compiling your application using the &lt;code&gt;ngc&lt;/code&gt; command-line tool, you can bootstrap directly to a module factory, so you don't need to include the Angular compiler in your JavaScript bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83663bb4eeda0ed5495f37b7c40ecac703dc7a4" translate="yes" xml:space="preserve">
          <source>By contrast, Angular registers &lt;code&gt;AppComponent&lt;/code&gt; providers with the &lt;code&gt;AppComponent&lt;/code&gt;'s own injector. &lt;code&gt;AppComponent&lt;/code&gt; services are available only to that component and its component tree. They have component scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00a813e7486c3605092212dc4aceb4cad4fd7d3" translate="yes" xml:space="preserve">
          <source>By convention, HTML attributes use lowercase names (&lt;code&gt;tabindex&lt;/code&gt;), while properties use camelCase names (&lt;code&gt;tabIndex&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b63586546cd1a81c918d1e5257f96a507ec674b" translate="yes" xml:space="preserve">
          <source>By convention, the module class name is &lt;code&gt;AppRoutingModule&lt;/code&gt; and it belongs in the &lt;code&gt;app-routing.module.ts&lt;/code&gt; in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a4df132d346ecc03036957b443d37171ef0e22" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; supports the following &lt;code&gt;macroTasks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf91cf79be5a08d74ebc94a4d5ee160fbcd355c" translate="yes" xml:space="preserve">
          <source>By default no files are replaced. You can add file replacements for specific build targets. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51695b957eb12e3eaecfb926c54f3ed8f96364b1" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;.ts&lt;/code&gt; file supplied in the &lt;code&gt;files&lt;/code&gt; field is assumed to be the library index. If more than one &lt;code&gt;.ts&lt;/code&gt; file is specified, &lt;code&gt;libraryIndex&lt;/code&gt; is used to select the file to use. If more than one &lt;code&gt;.ts&lt;/code&gt; file is supplied without a &lt;code&gt;libraryIndex&lt;/code&gt;, an error is produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5914dfa1fd7ba2af1bd87033b229c44bc750e76" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ng new&lt;/code&gt; creates an initial skeleton application at the root level of the workspace, along with its end-to-end tests. The skeleton is for a simple Welcome application that is ready to run and easy to modify. The root-level application has the same name as the workspace, and the source files reside in the &lt;code&gt;src/&lt;/code&gt; subfolder of the workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdde175d8d5cd355f83e0d12cd962bd43d0f6ace" translate="yes" xml:space="preserve">
          <source>By default, Angular always starts at the current &lt;code&gt;&lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; and keeps searching all the way up. Modifiers allow you to change the starting (self) or ending location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c246f990199a0a6cf74efb68b5e6a57d51a1c478" translate="yes" xml:space="preserve">
          <source>By default, Angular only contains locale data for &lt;code&gt;en-US&lt;/code&gt;. If you set the value of &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; to another locale, you must import locale data for that new locale. The CLI imports the locale data for you when you use the parameter &lt;code&gt;--configuration&lt;/code&gt; with &lt;code&gt;ng serve&lt;/code&gt; and &lt;code&gt;ng build&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38ab5e3eefabb0e0f4fea157820aa9ee2ccacc6" translate="yes" xml:space="preserve">
          <source>By default, Angular uses the locale &lt;code&gt;en-US&lt;/code&gt;, which is English as spoken in the United States of America.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6489a7440ae99238e395cfb6007fae40fb09ae" translate="yes" xml:space="preserve">
          <source>By default, NgModules are eagerly loaded, which means that as soon as the app loads, so do all the NgModules, whether or not they are immediately necessary. For large apps with lots of routes, consider lazy loading&amp;mdash;a design pattern that loads NgModules as needed. Lazy loading helps keep initial bundle sizes smaller, which in turn helps decrease load times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2fd556d26003ca54a9e732916c3e8fb2840bae" translate="yes" xml:space="preserve">
          <source>By default, a &lt;code&gt;production&lt;/code&gt; configuration is defined, and the &lt;code&gt;ng build&lt;/code&gt; command has &lt;code&gt;--prod&lt;/code&gt; option that builds using this configuration. The &lt;code&gt;production&lt;/code&gt; configuration sets defaults that optimize the app in a number of ways, such as bundling files, minimizing excess whitespace, removing comments and dead code, and rewriting code to use short, cryptic names (&quot;minification&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6104e2784b3d5459f07069827571091b50f300af" translate="yes" xml:space="preserve">
          <source>By default, a live example link opens a Stackblitz in a separate browser tab. You can embed the Stackblitz within the guide page itself by adding the &lt;code&gt;embedded&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81e3b2c1800abfb9519aca9fcc5374fb1a22984" translate="yes" xml:space="preserve">
          <source>By default, all validators are run after every form value change. With synchronous validators, this will not likely have a noticeable impact on application performance. However, it's common for async validators to perform some kind of HTTP request to validate the control. Dispatching an HTTP request after every keystroke could put a strain on the backend API, and should be avoided if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb054c411f164d76b27f15037b08121e4e98dde4" translate="yes" xml:space="preserve">
          <source>By default, an Angular app always has at least one entry component, the root component, &lt;code&gt;AppComponent&lt;/code&gt;. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95d52a0fff91150c8cb9f7bb76b9d498b34a5e8" translate="yes" xml:space="preserve">
          <source>By default, an interceptor sends this header on all mutating requests (such as POST) to relative URLs, but not on GET/HEAD requests or on requests with an absolute URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29612b8986641e9c62a3c15504623ae3e86c6192" translate="yes" xml:space="preserve">
          <source>By default, if the control has children, all children are enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e243dc5ef99c3ce4659ac5ffc13cb25f6f1f760c" translate="yes" xml:space="preserve">
          <source>By default, it also updates the value and validity of its ancestors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d26dd91eba4447650188c535f2705b5cd1b74d" translate="yes" xml:space="preserve">
          <source>By default, legacy browsers such as IE 9-11 are ignored, and the compilation target is ES2015. As a result, this produces two builds, and differential loading is enabled. If you ignore browsers without ES2015 support, a single build is produced. To see the build result for differential loading based on different configurations, refer to the table below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4d24c550e53bc0f5bebd201e971a470cb6283c" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;spawn()&lt;/code&gt; method outputs everything to the process standard output and error. To make it easier to test and debug, we can forward the output to the CLI Builder logger instead. This also allows the builder itself to be executed in a separate process, even if the standard output and error are deactivated (as in an &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron app&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfbd486aab7d0d92e1d421a68656a3e0c20983d" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;xi18n&lt;/code&gt; command generates a translation file named &lt;code&gt;messages.xlf&lt;/code&gt; in the &lt;a href=&quot;https://en.wikipedia.org/wiki/XLIFF&quot;&gt;XML Localization Interchange File Format (XLIFF, version 1.2)&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d941e4f6148aedde9261a9a0cf15f5ba8a31113e" translate="yes" xml:space="preserve">
          <source>By default, the AOT compiler removes whitespace characters as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a7612d9fccf041650c5c969b9038616f83e502" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate component&lt;/code&gt;&lt;/a&gt; generates components with a template file. You can override that with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa76f3155ef0748e4e8ab3fd4aaa4c1fd24528b" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate service&lt;/code&gt;&lt;/a&gt; registers a provider with the root injector for your service by including provider metadata in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. The tutorial uses this method to register the provider of HeroService class definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2bbe47a91244e664efba1dcfef903739625e635" translate="yes" xml:space="preserve">
          <source>By default, the Angular CLI command &lt;code&gt;ng generate service&lt;/code&gt; registers a provider with the &lt;em&gt;root injector&lt;/em&gt; for your service by including provider metadata, that is &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root'&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b07b4ab8b7660869dbbd653625f529f802c444b" translate="yes" xml:space="preserve">
          <source>By default, the CLI command &lt;code&gt;ng new my-app&lt;/code&gt; creates a workspace folder named &quot;my-app&quot; and generates a new application skeleton in a &lt;code&gt;src/&lt;/code&gt; folder at the top level of the workspace. A newly generated application contains source files for a root module, with a root component and template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55eded90bf61b8ed39ccdda5d400e9b5e0adf278" translate="yes" xml:space="preserve">
          <source>By default, the change detector assumes that the object instance identifies the node in the iterable. When this function is supplied, the directive uses the result of calling this function to identify the item node, rather than the identity of the object itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793355b486faa68c3f5a96afa98bcba17673aaaa" translate="yes" xml:space="preserve">
          <source>By default, the command creates a file named &lt;code&gt;messages.xlf&lt;/code&gt; in your project's root directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3064f6c11c8a9e2889671ed9f14030d3fa084f" translate="yes" xml:space="preserve">
          <source>By default, the compiler replaces decorators with a static field in the class, which allows advanced tree-shakers like &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure compiler&lt;/a&gt; to remove unused classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6300bbcf1bdafeb32e8a213f18ff110a8c0cc5f" translate="yes" xml:space="preserve">
          <source>By default, the files for a new initial app (with the same name as the workspace) are placed in the &lt;code&gt;src/&lt;/code&gt; subfolder. Corresponding end-to-end tests are placed in the &lt;code&gt;e2e/&lt;/code&gt; subfolder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8582915bde1d5201e954cc693f0f835f7a95e185" translate="yes" xml:space="preserve">
          <source>By default, the injector throws an error when it can't find a requested provider. The &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; decorator means not finding the service is OK. The injector returns &lt;code&gt;null&lt;/code&gt;, the &lt;code&gt;parentModule&lt;/code&gt; parameter is null, and the constructor concludes uneventfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59494e4c795cdee22a3b89f3a638403a11d22a5" translate="yes" xml:space="preserve">
          <source>By default, the router checks URL elements from the left to see if the URL matches a given path, and stops when there is a match. For example, '/team/11/user' matches 'team/:id'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a43a86194b96294c0a89a6c30e5587c974c168c" translate="yes" xml:space="preserve">
          <source>By default, the target is &lt;code&gt;es2015&lt;/code&gt;, which is supported only in modern browsers. You can configure the target to &lt;code&gt;es5&lt;/code&gt; to specifically support legacy browsers. &lt;a href=&quot;deployment#differential-loading&quot;&gt;Differential loading&lt;/a&gt; is also provided by the Angular CLI to support modern, and legacy browsers with separate bundles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41868320016c660205217a38b2ee8095f3d655f6" translate="yes" xml:space="preserve">
          <source>By default, the target is &lt;code&gt;es2015&lt;/code&gt;. If you are targeting &lt;code&gt;es5&lt;/code&gt;, you still have newer type declarations due to the list of declaration files included:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b58ea2ecb9512652cbb7eb35d524285feb8fe024" translate="yes" xml:space="preserve">
          <source>By default, these criteria are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5efeabdc4761db17da76ed72cd97d01e3582f0" translate="yes" xml:space="preserve">
          <source>By default, this feature is disabled. To enable it, set a global flag before importing &lt;code&gt;zone-testing&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737d872d4aa1137431d336c09f5cba06097c9d53" translate="yes" xml:space="preserve">
          <source>By default, this is true, unless a user calls &lt;code&gt;&lt;a href=&quot;enableprodmode&quot;&gt;enableProdMode&lt;/a&gt;&lt;/code&gt; before calling this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="895cfca638aab96c2e4c68a44a374a362e111c0c" translate="yes" xml:space="preserve">
          <source>By default, throws an error when zero items are found. Set the &lt;code&gt;&lt;a href=&quot;animationqueryoptions#optional&quot;&gt;optional&lt;/a&gt;&lt;/code&gt; flag to ignore this error. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b38aef427efb542e3ceae80895c955069c64dfc" translate="yes" xml:space="preserve">
          <source>By default, when a translation is missing, the build succeeds but generates a warning such as &lt;code&gt;Missing translation for &lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt; &quot;foo&quot;&lt;/code&gt;. You can configure the level of warning that is generated by the Angular compiler:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f88cf4b54ca18c2f47342d965f1bdec83e0be88" translate="yes" xml:space="preserve">
          <source>By default, when you use this pattern, you will see a deprecation warning once in dev mode. You can choose to silence this warning by providing a config for &lt;code&gt;&lt;a href=&quot;reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; at import time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e414d22540c0f1ae4f946db786ae55fdc12b7a" translate="yes" xml:space="preserve">
          <source>By default, writes output to a folder named dist/ in the current project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd1c464bf12f5fb5b52349cdf92a0a00b334436" translate="yes" xml:space="preserve">
          <source>By pasting a &quot;deep link&quot; URL into the browser address bar that identifies the hero to display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde6963f476446a45cc29e3b93aaf4ef55f49da3" translate="yes" xml:space="preserve">
          <source>By providing &lt;code&gt;VillainsService&lt;/code&gt; in the &lt;code&gt;VillainsListComponent&lt;/code&gt; metadata and nowhere else, the service becomes available only in the &lt;code&gt;VillainsListComponent&lt;/code&gt; and its sub-component tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e598ce57a7b24da0404d550c8e77311fe81cd0" translate="yes" xml:space="preserve">
          <source>By re-exporting &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, any other module that imports this &lt;code&gt;SharedModule&lt;/code&gt;, gets access to directives like &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; and can bind to component properties with &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt;, a directive in the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="283fdefdd6d1f0a83829f00ef235e73a7152b4e1" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cec4402059ea00c6d712a42340d4c89e450d6df" translate="yes" xml:space="preserve">
          <source>By the end of this tutorial you will be able to do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f210331839801b71d9bdc60036a3a6c72ef3ca14" translate="yes" xml:space="preserve">
          <source>By transcluding or projecting content from the other framework. ngUpgrade bridges the related concepts of AngularJS transclusion and Angular content projection together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadb9f1898ae42aeddccb80695bb2ff36cdd5430" translate="yes" xml:space="preserve">
          <source>By using a component from the other framework: An AngularJS template using an Angular component, or an Angular template using an AngularJS component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d317743f301e033fe05c5da5516eefef9fab01e" translate="yes" xml:space="preserve">
          <source>By using the In-memory Web API, you won't have to set up a server to learn about &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b79b9a8cccf72bf74da2766e3aa142e67bff38" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be a safe resource URL, i.e. a location that may be used to load executable code from, like &lt;code&gt;&amp;lt;script src&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db6a85413c3a62448f8e24b9cd62b97af777782" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used in hyperlinks or &lt;code&gt;&amp;lt;img src&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a85a9de1b624d9a281f803426a0c32bef3e8171" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML is unsafe (e.g. contains &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags) and the code should be executed. The sanitizer will leave safe HTML intact, so in most situations this method should not be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22734a3b413e2ed5c26b1b233ef8006fccfd2ce7" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be safe JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589711522f3adf8b9c47b84407ddfb6f212d4894" translate="yes" xml:space="preserve">
          <source>Bypass security and trust the given value to be safe style value (CSS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da3c14fe68d007dd948bc0a37349c8d84280bcd" translate="yes" xml:space="preserve">
          <source>Bypass the proxy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a4bea2f3447ba097746f02424c164f98dfee16" translate="yes" xml:space="preserve">
          <source>Bypassing the service worker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a7892d0df4e20dffd1da4a2ba8cfb9cc8d059d" translate="yes" xml:space="preserve">
          <source>CLDR website</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f49e2d65f9b334363f376775aeebd652cb905d" translate="yes" xml:space="preserve">
          <source>CLI Overview and Command Reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e92b110d4f6d555eade5dd441fe110ec6d62ab6" translate="yes" xml:space="preserve">
          <source>CLI builders</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b72ce98d68681f85db235c515ed234796b0ca1c" translate="yes" xml:space="preserve">
          <source>CLI command-language syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bf433ec5cf4675ef3c8596d8512dfdab2f6f0fd" translate="yes" xml:space="preserve">
          <source>CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;, &lt;a href=&quot;https://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;, and &lt;a href=&quot;http://www.protractortest.org/&quot;&gt;Protractor&lt;/a&gt;. For details, see &lt;a href=&quot;workspace-config&quot;&gt;Angular Workspace Configuration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8caf1ee0de7eeac9fea3c587a7f16ec05c4f45cf" translate="yes" xml:space="preserve">
          <source>CLI-generated tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e0fad234061448b6aeb61b281e3307ef9f497c" translate="yes" xml:space="preserve">
          <source>COMPILER_OPTIONS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d430c3fc0de431b42a6f7090a75092e0f1d2fc3" translate="yes" xml:space="preserve">
          <source>COMPOSITION_BUFFER_MODE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4078e32911d6f5d679797645f636c7e696b15e8e" translate="yes" xml:space="preserve">
          <source>CSS @imports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8341ce8d88650eb66817af40baa993cf445ec2f2" translate="yes" xml:space="preserve">
          <source>CSS classes applied</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b5583437724ee43c4c64a2eb01060aaf2595c8" translate="yes" xml:space="preserve">
          <source>CSS grid layout support in Autoprefixer, which was previously on by default, is off by default in Angular 8 and higher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e11144489b2f269249757fca859d7096307f304" translate="yes" xml:space="preserve">
          <source>CUSTOM_ELEMENTS_SCHEMA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7d7a23879dbe205ad31457186146482db2c33f" translate="yes" xml:space="preserve">
          <source>Caching an application is like installing a native application. The application is cached as one unit, and all files update together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7dcd8556967edbf9dc15b2dd9c7696a8a73d43b" translate="yes" xml:space="preserve">
          <source>Caching behavior; for example, &lt;code&gt;If-Modified-Since&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b46de0011e7af89a350bd98b9a1fd29a77cc8cf3" translate="yes" xml:space="preserve">
          <source>Caching layers in between the origin server and the end user could serve stale content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261eb580b5dbd737463584be0e96288856d0fcff" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; methods &lt;em&gt;within&lt;/em&gt; a &lt;code&gt;beforeEach()&lt;/code&gt; to ensure a fresh start before each individual test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55478a8e2da2b9d13233927ad4ce964932c556ef" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;configureTestingModule&lt;/code&gt; to refine the testing module configuration for a particular set of tests by adding and removing imports, declarations (of components, directives, and pipes), and providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cc3a4f15b0cb9d21d181ba24371c672d6b47e7d" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;request.flush()&lt;/code&gt; with an error message, as seen in the following example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c7fc903cfd1566d2b98e6e679bed67b09b10a6" translate="yes" xml:space="preserve">
          <source>Call it in &lt;code&gt;ngOnInit()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6027ee4df59b4012aaea1f2c5f4181d0bf2a7184" translate="yes" xml:space="preserve">
          <source>Call it to initialize the component (it calls &lt;code&gt;ngOnInit&lt;/code&gt;) and after your test code, change the component's data bound property values. Angular can't see that you've changed &lt;code&gt;personComponent.name&lt;/code&gt; and won't update the &lt;code&gt;name&lt;/code&gt; binding until you call &lt;code&gt;detectChanges&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e5babeab32e45e806fbc3b19174a99b11c23ca" translate="yes" xml:space="preserve">
          <source>Call within an animation &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; call to specify an animation step that applies given style data to the parent animation for a given amount of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1771add456fd5236fb4ceb3907b9902363284a43" translate="yes" xml:space="preserve">
          <source>Callbacks can serve as a debugging tool, for example in conjunction with &lt;code&gt;console.warn()&lt;/code&gt; to view the application's progress in a browser's Developer JavaScript Console. The following code snippet creates console log output for our original example, a button with the two states of &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760346b355881672a0a6d496758fb65d68eaf88c" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;just before&lt;/em&gt; Angular destroys the directive/component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43d88a726fcdc88f9eb54c0fd5d13581ff0616e" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;once&lt;/em&gt; after the first &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec40bf1cbc2faab1a865283dcd9baa5bb7dfd6f" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;once&lt;/em&gt; after the first &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed61dce56e76b70f3a1dafc6de01c809ad00c2df" translate="yes" xml:space="preserve">
          <source>Called &lt;em&gt;once&lt;/em&gt;, after the &lt;em&gt;first&lt;/em&gt;&lt;code&gt;ngOnChanges()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9940e1eeb5a7c145f2b10ef2094d91adf0e011e" translate="yes" xml:space="preserve">
          <source>Called after &lt;code&gt;ngAfterContentInit&lt;/code&gt; when the component's views and child views / the view that a directive is in has been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e8308ef6731afacab2d2cf1a1d82e6d5d18c59" translate="yes" xml:space="preserve">
          <source>Called after &lt;code&gt;ngOnInit&lt;/code&gt; when the component's or directive's content has been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abf88459dea9d48107a15886f727107471dbb96" translate="yes" xml:space="preserve">
          <source>Called after every change to input properties and before processing content or child views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a130609bac88d5543ea30ad6133139b03b01ecf7" translate="yes" xml:space="preserve">
          <source>Called after every check of the component's or directive's content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a0e3aa13b4388685cf9d7c3507f3e1ee153db1a" translate="yes" xml:space="preserve">
          <source>Called after every check of the component's views and child views / the view that a directive is in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f8068273dc6ecea537534ade623776122365e21" translate="yes" xml:space="preserve">
          <source>Called after the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; and every subsequent &lt;code&gt;ngAfterContentChecked()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5705918e476cb904b5fa668ed214206ec73591" translate="yes" xml:space="preserve">
          <source>Called after the &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; and every subsequent &lt;code&gt;ngDoCheck()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f0d6f5d02969dcc38e9b8f7dab33c5b8ec6a67" translate="yes" xml:space="preserve">
          <source>Called after the constructor, initializing input properties, and the first call to &lt;code&gt;ngOnChanges&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3992a9223eaa475ee02765bb281acfe9016e9587" translate="yes" xml:space="preserve">
          <source>Called before &lt;code&gt;ngOnInit()&lt;/code&gt; and whenever one or more data-bound input properties change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338e219ba9c4ad2d93a1252ea07e78fcd5812653" translate="yes" xml:space="preserve">
          <source>Called before any other lifecycle hook. Use it to inject dependencies, but avoid any serious work here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079a33e34b46ed902e2756f083cec3f074677ba5" translate="yes" xml:space="preserve">
          <source>Called during every change detection run, immediately after &lt;code&gt;ngOnChanges()&lt;/code&gt; and &lt;code&gt;ngOnInit()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a8186d4eef069a787d88d5ad608795d2a3b749" translate="yes" xml:space="preserve">
          <source>Called every time that the input properties of a component or a directive are checked. Use it to extend change detection by performing a custom check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded11fd49a01c772c26b4a79906617586dfcc389" translate="yes" xml:space="preserve">
          <source>Called once, before the instance is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6370b8dc1866c030c38bf3c5b2f85b9cec9f1e45" translate="yes" xml:space="preserve">
          <source>Called when a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive is destroyed. We need to keep the context as the outlet could be destroyed inside a NgIf and might be re-created later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c27d5c41ab5ae9ad7c8e33864c2395541456d6" translate="yes" xml:space="preserve">
          <source>Called when a &lt;code&gt;&lt;a href=&quot;routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive is instantiated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc03480e95937267c839f086bcde846aaa91db9" translate="yes" xml:space="preserve">
          <source>Called when the &lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; instructs to detach the subtree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da38a77071e29a9e7664a3315f4f4e75e060eafe" translate="yes" xml:space="preserve">
          <source>Called when the &lt;code&gt;&lt;a href=&quot;routereusestrategy&quot;&gt;RouteReuseStrategy&lt;/a&gt;&lt;/code&gt; instructs to re-attach a previously detached subtree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fa98865ffd00d148b8d531c88a1378d0836148" translate="yes" xml:space="preserve">
          <source>Called when the corresponding route is deactivated during navigation. Because the component get destroyed, all children outlet are destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23fcda0d1a865ac392be3ef0e2925a05f5b0881" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns the first &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; that matches the &lt;a href=&quot;testing#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in the subtree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a824c35c2959755fd808822de4dedf95fd4d39cb" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;../api/core/applicationref#tick&quot;&gt;tick()&lt;/a&gt;&lt;/code&gt; simulates the passage of time until all pending asynchronous activities finish. In this case, it waits for the error handler's &lt;code&gt;setTimeout()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a792f34c98efbd65d1a036e7a6d5db68e24cebe7" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;compileComponents()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c757d2f6cb308f6cb586c83e9fc16ef99eaa72" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;compileComponents()&lt;/code&gt; closes the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance to further configuration. You cannot call any more &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration methods, not &lt;code&gt;configureTestingModule()&lt;/code&gt; nor any of the &lt;code&gt;override...&lt;/code&gt; methods. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; throws an error if you try.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f2e83289b8c70bc906bf5b04c1061ef6002a40" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;queryAll(predicate: &lt;a href=&quot;../api/core/predicate&quot;&gt;Predicate&lt;/a&gt;&amp;lt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&amp;gt;)&lt;/code&gt; returns all &lt;code&gt;DebugElements&lt;/code&gt; that matches the &lt;a href=&quot;testing#query-predicate&quot;&gt;predicate&lt;/a&gt; at any depth in subtree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c905b75753a481a14356fc6d2b86a0900d82b11b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;setErrors&lt;/code&gt; also updates the validity of the parent control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c343329d27e796c6369216dce0e24cb05d5809" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;subscribe(...)&lt;/code&gt; triggers execution of the observable and causes &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to compose and send the HTTP request to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2dfd54f809b36b4b1c053edef7371ae8619628" translate="yes" xml:space="preserve">
          <source>Calling any of the &lt;code&gt;bypassSecurityTrust...&lt;/code&gt; APIs disables Angular's built-in sanitization for the value passed in. Carefully check and audit all values and code paths going into this call. Make sure any user data is appropriately escaped for this security context. For more detail, see the &lt;a href=&quot;http://g.co/ng/security&quot;&gt;Security Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb81e7cc6d31b5ab7893b8f4c6563164aa2b633" translate="yes" xml:space="preserve">
          <source>Callouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d34b10af87e2cc9ccbc0459df289025ef6c7c79" translate="yes" xml:space="preserve">
          <source>Callouts are meant to grab the user's attention. They are not for casual asides. Please use them sparingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3c3e0b5de6c6e0e7dca5076e6ad88d9df7c7e1" translate="yes" xml:space="preserve">
          <source>Callouts use the same &lt;em&gt;urgency levels&lt;/em&gt; that alerts do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505a7e75cfac8596300522544e26062f958a48a4" translate="yes" xml:space="preserve">
          <source>Callouts, like alerts, are meant to draw attention to important points. Use a callout when you want a riveting header and multi-line content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a19b7e26b2ba75ac27255f31f21e98a34d62953" translate="yes" xml:space="preserve">
          <source>Calls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7458f20cc67730b3cfc74274de606821b58649f" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; on the view that is leaving, to run its child animations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054740b116bb7ad21ec189e277687edb090d5e7a" translate="yes" xml:space="preserve">
          <source>Calls method &lt;code&gt;readRainbow&lt;/code&gt; when a click event is triggered on this button element (or its children) and passes in the event object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec80b36df3dfad6ec2a2e4c829bb5c8f1486470" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; method on the new view to run its child animations after the main animation completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b5d8714282fb0a73c671dbc1257f65ec30bfa4" translate="yes" xml:space="preserve">
          <source>Can I re-export classes and modules?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909f15135d74304c1d1061422b73388345640cf1" translate="yes" xml:space="preserve">
          <source>Can be used to instruct the template compiler to produce &lt;code&gt;.metadata.json&lt;/code&gt; files for distribution with an &lt;code&gt;npm&lt;/code&gt; package while avoiding the production of &lt;code&gt;.ngfactory.js&lt;/code&gt; and &lt;code&gt;.ngstyle.js&lt;/code&gt; files that cannot be distributed to &lt;code&gt;npm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f36799879d0cf41af5b4c27f7d960b58598905d" translate="yes" xml:space="preserve">
          <source>Can be used to wrap inject() calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeca2657940329cf291b081d93f9892584f17b53" translate="yes" xml:space="preserve">
          <source>Can be used together with other parameter decorators that modify how dependency injection operates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b41daf8b17e839983b484ba6d073adc7e542e89e" translate="yes" xml:space="preserve">
          <source>Can change a tax return without affecting a return in another component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9100670ff9a13c528e1d1a5b727b0630c83c454" translate="yes" xml:space="preserve">
          <source>Can contain &lt;em&gt;host views&lt;/em&gt; (created by instantiating a component with the &lt;code&gt;createComponent()&lt;/code&gt; method), and &lt;em&gt;embedded views&lt;/em&gt; (created by instantiating a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;createEmbeddedView()&lt;/code&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6904ca2fb9f0915a919fc5e9a9879f3583b0ff87" translate="yes" xml:space="preserve">
          <source>Can the user actually select the hero displayed by &lt;code&gt;DashboardHeroComponent&lt;/code&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180f5279c67f2eeb8b2298fb91ef00bb31f943f7" translate="yes" xml:space="preserve">
          <source>CanActivate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503b1aee292a84a5015a1b05f05d75a1b4bb3b78" translate="yes" xml:space="preserve">
          <source>CanActivateChild</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ee059e4c3b96beb90cacc882d7bc9f311ba0ef" translate="yes" xml:space="preserve">
          <source>CanDeactivate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a043a9144fd1167b1a2529e7a366de5b9973fd0a" translate="yes" xml:space="preserve">
          <source>CanLoad</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fab6a02d9a28f3ff9036951307010813ac79bc0" translate="yes" xml:space="preserve">
          <source>CanLoad blocks preload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f74d08e03072e546e3877aef507f93c09e6839" translate="yes" xml:space="preserve">
          <source>Cancel and save</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b496c07eb5af98f1ed2e504cdf9e47afef8c701c" translate="yes" xml:space="preserve">
          <source>Cancel ongoing AJAX requests if their results will be invalidated by the updated results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319aaae4dec46a75861fd10bcf8d182f4a77298d" translate="yes" xml:space="preserve">
          <source>Cancellation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff56e1549fd7a6a5f354ee4a0ca235953d70f07" translate="yes" xml:space="preserve">
          <source>Cannot assign to template variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b34940b15c08ee3ff0e607747050d9f6089f16f" translate="yes" xml:space="preserve">
          <source>Capture a state change between any states:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f2ba4c017e10b7dd998487ea0fdc703f74b715" translate="yes" xml:space="preserve">
          <source>Capture the current value and validation status of a form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f52ea4cfe6d3f65fa26be21bdbd52f13fb53ea" translate="yes" xml:space="preserve">
          <source>Case study: Building a custom progress bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f34f8eb641732996a47d4a852ea593e50abe92e" translate="yes" xml:space="preserve">
          <source>Catch-all state change for when an element is inserted into the page and the destination state is unknown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c686e711e4720f99b4562bb3dbaae7ab658cf2" translate="yes" xml:space="preserve">
          <source>Category</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80656e1ac8d7229db56620ded26ed78c22d67a05" translate="yes" xml:space="preserve">
          <source>Certain NgModules, such as &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;, implement such a guard. Here is a custom constructor for an NgModule called &lt;code&gt;GreetingModule&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8fee1b61a78b05f3275829dbb034edaa941c4e" translate="yes" xml:space="preserve">
          <source>Certain services, such as the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, only work when you register them in the application root injector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480bd17189258d07915ad129dccf24a948c44df7" translate="yes" xml:space="preserve">
          <source>Chaining</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d97b4fb4d072582f9b61039d71706e3deb2db1" translate="yes" xml:space="preserve">
          <source>Chaining RxJS operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9700d3ee9c183d3666b2b94f12e30f5e47ca2416" translate="yes" xml:space="preserve">
          <source>Chaining expressions with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;,&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1cdea71a3322e7230575959abb41daaf51e783" translate="yes" xml:space="preserve">
          <source>Chaining pipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4991d5ea5af682d4bd01c3240e19cd513867cab6" translate="yes" xml:space="preserve">
          <source>Change Detection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343b1717461275ac4ca7b57386b4e4fd9f50b8f1" translate="yes" xml:space="preserve">
          <source>Change Detection with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8c1160f24c95950eb5896ce2ace4d289f1b622" translate="yes" xml:space="preserve">
          <source>Change an input value with &lt;em&gt;dispatchEvent()&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3056a3bc48b6af974962366a13a95bb358bd68e6" translate="yes" xml:space="preserve">
          <source>Change detection begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c401dce4625f6d4132ee55d56ac329792d87ae" translate="yes" xml:space="preserve">
          <source>Change detection completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8f51ff0e0f41b2723a3b0ddb1fc762ca1bbe07" translate="yes" xml:space="preserve">
          <source>Change propagation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69fd5c5cd83b7b0a7e790bf0a78ee6893f67b64" translate="yes" xml:space="preserve">
          <source>Change root relative URLs in stylesheets to include base HREF and deploy URL. Use only for compatibility and transition. The behavior of this option is non-standard and will be removed in the next major release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8babe69a0e11422b542467ffba728e60ba1c55e3" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;admin&lt;/code&gt;&lt;strong&gt;path&lt;/strong&gt; in the &lt;code&gt;admin-routing.module.ts&lt;/code&gt; from &lt;code&gt;'admin'&lt;/code&gt; to an empty string, &lt;code&gt;''&lt;/code&gt;, the &lt;em&gt;empty path&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1cabd01ed824d898e58ebeb17c5d4a449cd6cd" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;crisis-center&lt;/code&gt; path in the &lt;code&gt;CrisisCenterRoutingModule&lt;/code&gt; to an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="434daac2c5b3d1ab473246ae8b1e713c54dc7351" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;selector&lt;/code&gt; to &lt;code&gt;app-hero-list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dde64b8dbb0bcbea9f57171ea80c7d963b7477" translate="yes" xml:space="preserve">
          <source>Change the application title</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9186ea4fea7f7f8a33d6b896351d60a43fdd1cf8" translate="yes" xml:space="preserve">
          <source>Change the component class name to &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927385537fbe1015a617be665c6693f672fb3a52" translate="yes" xml:space="preserve">
          <source>Change the history state object when called with one parameter and return &lt;code&gt;$location&lt;/code&gt;. The state object is later passed to &lt;code&gt;pushState&lt;/code&gt; or &lt;code&gt;replaceState&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe643cd41ad6bd8325838b21bb5f217bb25eaba" translate="yes" xml:space="preserve">
          <source>Change the name of the property to something non-numeric.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c003a9c6e71c4ca88e8ccd27f3508b897ae2a8" translate="yes" xml:space="preserve">
          <source>Change the text &lt;code&gt;Welcome to {{title}}!&lt;/code&gt; to &lt;code&gt;Bienvenue &amp;agrave; {{title}}!&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8676d4d635410ca2c077409dad69d9f77ca2647f" translate="yes" xml:space="preserve">
          <source>ChangeDetectionStrategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9610416e7bcb35a070b1afee3e1ecbe89b251021" translate="yes" xml:space="preserve">
          <source>ChangeDetectorRef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb8f6f68f506aa805d98d21bb31757a770f8982" translate="yes" xml:space="preserve">
          <source>Changes can be observed by subscribing to the changes &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28e885c282bb260b0a322754ee5b453345cab30" translate="yes" xml:space="preserve">
          <source>Changes the browser's URL to a normalized version of a given URL, and pushes a new item onto the platform's history.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d841e1b40e8a43f3b1d465ce7175f1d1d080099d" translate="yes" xml:space="preserve">
          <source>Changes the browser's URL to a normalized version of the given URL, and replaces the top item on the platform's history stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0528bf143935bb6c0e63d6c319330abc5897e287" translate="yes" xml:space="preserve">
          <source>Changes to &lt;code&gt;$location&lt;/code&gt; during the current &lt;code&gt;$digest&lt;/code&gt; will replace the current history record, instead of adding a new one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696e045172b10914e55a284add7f292269adccb9" translate="yes" xml:space="preserve">
          <source>Changes to styles elsewhere in the application don't affect the component's styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831ab0dd3e14c19a13759f4e73d7a68f79e884a9" translate="yes" xml:space="preserve">
          <source>Changing /heroes to /superheroes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcac6dfa3f865ecb219e677bce8f4ac4fd43e75a" translate="yes" xml:space="preserve">
          <source>Changing the observable to be multicasting could look something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23fafb17a150814dab8b9300a9bdd995dd6aaf3b" translate="yes" xml:space="preserve">
          <source>Changing your app's location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e688823a84fa6f43670fb82f99c26f690e6bccb5" translate="yes" xml:space="preserve">
          <source>Cheat Sheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99957d5920a0c408d447b33739a6c587076d7c4c" translate="yes" xml:space="preserve">
          <source>Cheat sheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1aba76971244577871fcf686981c5cf54bbfec3" translate="yes" xml:space="preserve">
          <source>Check all internal dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd6bd8ea1d42310566ae35ff189fa25bce0739c6" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;https://github.com/angular-buch/angular-cli-ghpages&quot;&gt;angular-cli-ghpages&lt;/a&gt;, a full featured package that does all this for you and has extra functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cfb73fbe5a898080633faeb8d721bec2e82d45" translate="yes" xml:space="preserve">
          <source>Check out this full animation &lt;a href=&quot;http://animationsftw.in/#/&quot;&gt;demo&lt;/a&gt; with accompanying &lt;a href=&quot;https://www.youtube.com/watch?v=JhNo3Wvj6UQ&amp;amp;feature=youtu.be&amp;amp;t=2h47m53s&quot;&gt;presentation&lt;/a&gt;, shown at the AngularConnect conference in November 2017.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c384f9025a9aede92802f2295e03b1a23a81d08b" translate="yes" xml:space="preserve">
          <source>Check self and check parent injector if needed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf59c30dc2e2cfc9815c66b412795ea380622ec" translate="yes" xml:space="preserve">
          <source>Check the &lt;strong&gt;Offline box&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a91267f194e09a874c756ae0e5cd6fbc5e9b4b" translate="yes" xml:space="preserve">
          <source>Check whether the new value is the first value assigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34e8033f22ef7572d3f7bef622110673a0b903e" translate="yes" xml:space="preserve">
          <source>Check whether there is an enabled control with the given name in the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5944be645c910b902d4178536960e0dd6bb46e" translate="yes" xml:space="preserve">
          <source>CheckboxControlValueAccessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c879093d869ad86b0566a12fe19cb46968467703" translate="yes" xml:space="preserve">
          <source>CheckboxRequiredValidator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78948b2a07ee0efcb3ac6f4a1a272b534d287c7b" translate="yes" xml:space="preserve">
          <source>Checking for updates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ac9dbbeb11bfee8438eb0df9da52f319181942" translate="yes" xml:space="preserve">
          <source>Checking your version of Angular</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039ccb2918e7c3b5e496faa1cbfa7e89bb915059" translate="yes" xml:space="preserve">
          <source>Checks for existence of a given header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19cdeb053f13ef119dad6eaba0ab038717b11b2" translate="yes" xml:space="preserve">
          <source>Checks that there currently is a platform which contains the given token as a provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27e534014d7f6c5ef04a4cb1f5834c05cadd4a7f" translate="yes" xml:space="preserve">
          <source>Checks the change detector and its children, and throws if any changes are detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7375845b6700eea70b230cf6ef23256bc66b1e" translate="yes" xml:space="preserve">
          <source>Checks this view and its children. Use in combination with &lt;a href=&quot;changedetectorref#detach&quot;&gt;detach&lt;/a&gt; to implement local change detection checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40446a4774953299d744b037f3fabd61581c55cd" translate="yes" xml:space="preserve">
          <source>Checks whether the two strings are equal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="105070f0db5c610c2e3799d698d9f3ec337beb1a" translate="yes" xml:space="preserve">
          <source>Child &lt;code&gt;ModuleInjector&lt;/code&gt;s are created when lazy loading other &lt;code&gt;@NgModules&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45018b9cbbbefcc8dbba9b84a7cc1c2fb002971" translate="yes" xml:space="preserve">
          <source>Child interfaces</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51d827784282762a77db2ecf655e40e63440b111" translate="yes" xml:space="preserve">
          <source>Child modules and component injectors are independent of each other, and create their own separate instances of the provided services. When Angular destroys an NgModule or component instance, it also destroys that injector and that injector's service instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add021ebee29a859789ac87532524f9916e8f376" translate="yes" xml:space="preserve">
          <source>Child route configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3dc916760d8ae9ca4995453a2ebc7e0d16f4105" translate="yes" xml:space="preserve">
          <source>Child routes (the &lt;em&gt;Crisis Center&lt;/em&gt; has its own routes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae7a7e0215bdbccdaa70a62527624da49d7b032" translate="yes" xml:space="preserve">
          <source>Child routing component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b39289ca7dd8c2d34548ec58a2bd80a309b34054" translate="yes" xml:space="preserve">
          <source>ChildActivationEnd</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fba8126259467946ad228f3bbc5ad08bcc49f2a" translate="yes" xml:space="preserve">
          <source>ChildActivationStart</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597f94e85e956cc34d0e81bd2267a3d55397342d" translate="yes" xml:space="preserve">
          <source>ChildrenOutletContexts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a500f7710fc992ffd582db793ce56b2deb14e80" translate="yes" xml:space="preserve">
          <source>Chinese Simplified</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475bd05d677945b1aa0853356a8a8a2f5ba3dccb" translate="yes" xml:space="preserve">
          <source>Chinese Traditional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f76285d4993d793b551055eee78e271b1ac0fb6" translate="yes" xml:space="preserve">
          <source>Chinese Traditional Hong Kong</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c5aee7d1808096ae2d774042d1f051379d83ae" translate="yes" xml:space="preserve">
          <source>Choose one pattern or the other and follow that pattern consistently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9e178bd0af63fe006adcde0a8d9cf243536ca1" translate="yes" xml:space="preserve">
          <source>Choosing a compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5ea27fc9f713601c67aa8664fbea01d4964a0b" translate="yes" xml:space="preserve">
          <source>Choosing a strategy begins with understanding the strengths and weaknesses of the options presented. Low-level API and form model access, predictability, mutability, straightforward validation and testing strategies, and scalability are all important considerations in choosing the infrastructure you use to build your forms in Angular. Template-driven forms are similar to patterns in AngularJS, but they have limitations given the criteria of many modern, large-scale Angular apps. Reactive forms minimize these limitations. Reactive forms integrate with reactive patterns already present in other areas of the Angular architecture, and complement those requirements well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e75c7a912404b048fff0747e40108873b6334" translate="yes" xml:space="preserve">
          <source>Chrome</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7a66fee54cb2c0a49086533407c84c154c93b6" translate="yes" xml:space="preserve">
          <source>Chrome, Firefox, Edge,  Safari, Android, IE 10+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8154a233a656dec9151d776f59d14b5ece214584" translate="yes" xml:space="preserve">
          <source>Class binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f6bf21bd790c8c0ca4c69e84a202669b340aec" translate="yes" xml:space="preserve">
          <source>Class binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix &lt;code&gt;class&lt;/code&gt;, optionally followed by a dot (&lt;code&gt;.&lt;/code&gt;) and the name of a CSS class: &lt;code&gt;[class.class-name]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e08bce289f366c056ecd9ce1d6fbabe31242faa" translate="yes" xml:space="preserve">
          <source>Class decorators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead76f2265a0d81882e6ad9f43d58b17ab60cd2e" translate="yes" xml:space="preserve">
          <source>Class field decorators for directives and components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8d578a2c9be2adfd97344aa626fa426c36137a" translate="yes" xml:space="preserve">
          <source>Class if false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f4d9eb1a6cf37d8d57164c8727fe1da9d6c802" translate="yes" xml:space="preserve">
          <source>Class if true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703e9eebcf42bdd8b7a0a6b496df19654d526ebe" translate="yes" xml:space="preserve">
          <source>Class implementations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e4305e03e0dd23aa189c7dfb11b275650b4811" translate="yes" xml:space="preserve">
          <source>Class interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a80022dc562a4854ed320709d4e5f295abcbf93" translate="yes" xml:space="preserve">
          <source>Class names and selectors are local to the component and don't collide with classes and selectors used elsewhere in the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25ec41c9f0b314b93d2865f50d88ae917e6ff6e" translate="yes" xml:space="preserve">
          <source>Class providers with dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce2b7d2960a43ff91bdce39b41516a092f557c0" translate="yes" xml:space="preserve">
          <source>Class providers: &lt;code&gt;useClass&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75f311366207e7e2aa503909afb6f888aa1e24b" translate="yes" xml:space="preserve">
          <source>Class to instantiate for the &lt;code&gt;token&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81eac26029ad80be2ecb31b3a105a54bd607ca4" translate="yes" xml:space="preserve">
          <source>ClassProvider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad4dcce4a04b908b87b184e0e237aaad3f93967" translate="yes" xml:space="preserve">
          <source>ClassSansProvider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1846afee3be21521286932b99e2aeae9e6414a" translate="yes" xml:space="preserve">
          <source>Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6251b998cd47a22f6f10a241477788107ff1abe" translate="yes" xml:space="preserve">
          <source>Cleanup just before Angular destroys the directive/component. Unsubscribe Observables and detach event handlers to avoid memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5079dd77d657c0cf099c0418da34731184f7b0" translate="yes" xml:space="preserve">
          <source>Clearing secondary routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db54a049d498c60f89ca10bde98edb2d6069ad2" translate="yes" xml:space="preserve">
          <source>Clearing the request body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf50fa318db0085017303d0a35f24a05f1663bbc" translate="yes" xml:space="preserve">
          <source>Clearly, some values benefit from a bit of editing. You may notice that you desire many of the same transformations repeatedly, both within and across many applications. You can almost think of them as styles. In fact, you might like to apply them in your HTML templates as you do styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026c9a5b393972d1b74e879509efaf02047efffd" translate="yes" xml:space="preserve">
          <source>Clears all caches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ad879d1b6ba3a92ecf85c2bf72ec70799ba4b4" translate="yes" xml:space="preserve">
          <source>Clears out the shared fake async zone for a test. To be called in a global &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da02b23929580e57414dead83052520181965c8" translate="yes" xml:space="preserve">
          <source>Clears the cache for the given component/ngModule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ceee3f3ff9ea2b24225f5c50bf87f4ef4199c6e" translate="yes" xml:space="preserve">
          <source>Click &quot;Buy&quot; to add the product to the cart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84c2305c2632803a02e65fcadee7fbd81e73dfa" translate="yes" xml:space="preserve">
          <source>Click &quot;Checkout&quot; to see the cart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83429308d7a703087079aed854d4057e2973e9c0" translate="yes" xml:space="preserve">
          <source>Click OK to close the dialog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b80126611af848948c0c6774dbd3810ab84e9a" translate="yes" xml:space="preserve">
          <source>Click inside the name box, then click outside it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25323834f15a5cdd5d9c332bdf408c9fad445293" translate="yes" xml:space="preserve">
          <source>Click links on the page and the browser navigates to a new page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0294549b373fb604bb541a36952363ee1e0c0d" translate="yes" xml:space="preserve">
          <source>Click links on the page, and the browser navigates to a new page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d717da4be4f860e0609091c741c5e385bc988d" translate="yes" xml:space="preserve">
          <source>Click on &quot;My Store&quot; to go to the product list page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c86dcc2337bad128a9e7611b8fe25cad3729d0" translate="yes" xml:space="preserve">
          <source>Click on a product name to display its details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f156fc0205f2cf0b5cf9f3f4c67e5de0395f6e" translate="yes" xml:space="preserve">
          <source>Click on the &quot;Checkout&quot; button to see the updated cart. (Remember that changing the app causes the preview to refresh, which empties the cart.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a780f7c233867ca1d42bf0443d903007584aa372" translate="yes" xml:space="preserve">
          <source>Click on the Orders or Customers button. If you see a chunk appear, everything is wired up properly and the feature module is being lazy loaded. A chunk should appear for Orders and for Customers but will only appear once for each.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86f4b3cfca3cd1f70a3cc2d66645da062b527d2b" translate="yes" xml:space="preserve">
          <source>Click on the link to navigate to the shipping prices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cc08c66323eccb2590d691177ee8938357b986" translate="yes" xml:space="preserve">
          <source>Click the &quot;Buy&quot; button. The product is added to the stored list of items in the cart, and a message is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e67d710f138d2b710872747ba7ea759254edd1" translate="yes" xml:space="preserve">
          <source>Click the &lt;code&gt;Refresh&lt;/code&gt; icon in Solution Explorer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16411a223f86d4e726b416df57543b1081256a5e" translate="yes" xml:space="preserve">
          <source>Click the &lt;code&gt;Show &lt;a href=&quot;visual-studio-2015&quot;&gt;All&lt;/a&gt; Files&lt;/code&gt; button in Solution Explorer to reveal all of the hidden files in the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2ced5bb5829ad40830165be365705611673e8b" translate="yes" xml:space="preserve">
          <source>Click the &lt;em&gt;Heroes&lt;/em&gt; link and look at the URL again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c249fbe128a1032fa4f807ec53c9425bc77a9b75" translate="yes" xml:space="preserve">
          <source>Click the &lt;strong&gt;DEBUG&lt;/strong&gt; button; it opens a new browser tab and re-runs the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e578611e4803016143a92e1ef69e1623c79dcb" translate="yes" xml:space="preserve">
          <source>Click the browser's back and forward buttons and the browser navigates backward and forward through the history of pages you've seen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceea20d77290f0cb78d5f302dff2055b8d170030" translate="yes" xml:space="preserve">
          <source>Click the browser's back and forward buttons, and the browser navigates backward and forward through the history of pages you've seen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c0280b7777b8cef4c29b98f8d337fb8e934ef7" translate="yes" xml:space="preserve">
          <source>Click the element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="950e0a5a7930594e16bd57f00c733233272c41ae" translate="yes" xml:space="preserve">
          <source>Click the link. The address bar updates to &lt;code&gt;/heroes&lt;/code&gt; and the list of heroes appears.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09703d1ff01a59ef498218efeacdae1639095d1f" translate="yes" xml:space="preserve">
          <source>Clicking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da2ea4a87d6f19823b803f949be3d7491916217" translate="yes" xml:space="preserve">
          <source>Clicking a button triggers emission of a &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the boolean &lt;em&gt;payload&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb49b11f73402cdd0bffcf5889ea5a109de39f23" translate="yes" xml:space="preserve">
          <source>Clicking a button, an anchor, or an arbitrary HTML element is a common test task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e48257c907b0db2169f81abb1cd380daa59c644" translate="yes" xml:space="preserve">
          <source>Clicking a hero item now does nothing. You'll &lt;a href=&quot;toh-pt5#heroes-component-links&quot;&gt;fix that shortly&lt;/a&gt; after you enable routing to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a1b225039f1d739bb3ad5c0e447f8353e3f6c3" translate="yes" xml:space="preserve">
          <source>Clicking a hero on the Heroes page does nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c4d1f403e12c12ef8797335854dcbcd6dfc676b" translate="yes" xml:space="preserve">
          <source>Clicking the &quot;Back&quot; button returns you to the Dashboard. Links at the top take you to either of the main views. If you click &quot;Heroes,&quot; the app displays the &quot;Heroes&quot; master list view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3931f42f723a39b2782772fe00cbe5cefdd4bca6" translate="yes" xml:space="preserve">
          <source>Clicking the &quot;send&quot; or &quot;cancel&quot; buttons &lt;em&gt;does&lt;/em&gt; clear the popup view. To see how, look at the &lt;code&gt;closePopup()&lt;/code&gt; method again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bedc0826561d31a8b6c6010ebae551f66676ec2d" translate="yes" xml:space="preserve">
          <source>Clicking the anchor should trigger the &lt;code&gt;onClick()&lt;/code&gt; method, which sets the stub's telltale &lt;code&gt;navigatedTo&lt;/code&gt; property. Tests inspect &lt;code&gt;navigatedTo&lt;/code&gt; to confirm that clicking the anchor set the expected route definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833d3dfcf8141f8ab032d805db00496f93b18f57" translate="yes" xml:space="preserve">
          <source>Clicking the buttons updates the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; via the two-way binding. The revised &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; value flows through to the &lt;em&gt;style&lt;/em&gt; binding, making the displayed text bigger or smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce15a56b0476c91447205e4359b504b835e90758" translate="yes" xml:space="preserve">
          <source>Clicking the first link opens the code sample on StackBlitz in a new browser tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9d81bfcc7b8b133f0723740f8c5243f83c2166" translate="yes" xml:space="preserve">
          <source>Clicking the hero should raise a &lt;code&gt;selected&lt;/code&gt; event that the host component (&lt;code&gt;DashboardComponent&lt;/code&gt; presumably) can hear:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2cb6b6d4534d0f7d4f44550ee1cd3f63622c02" translate="yes" xml:space="preserve">
          <source>Client-server interaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d05b7f9deccb2161007447387fcc1ecd84c7c85" translate="yes" xml:space="preserve">
          <source>ClientMessageBroker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7cb0d70d74fee09271bd2dc0ab81ce5975a34ae" translate="yes" xml:space="preserve">
          <source>ClientMessageBrokerFactory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8cdb573350de78596e4852bc9cacfc94e8d17ed" translate="yes" xml:space="preserve">
          <source>Clone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c510c50acb1cdb4194bcb189503fb557b8f0d1d" translate="yes" xml:space="preserve">
          <source>Close the application tab, but not the window. This should also close the Developer Tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f63b79b03d3993269429e6178e7579689d4daf" translate="yes" xml:space="preserve">
          <source>Closest replacement in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e671772e24b04909f77713dfe4745675929c9db3" translate="yes" xml:space="preserve">
          <source>Closest replacement in &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e26d090c81cd0ae4e4685584b8cbc871399a5ff" translate="yes" xml:space="preserve">
          <source>Code Tabs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb03260f7d7c972c5f881252a1bf5974c61308ba" translate="yes" xml:space="preserve">
          <source>Code associated with a component that defines how to render the component's &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f8d7e5de50c48432a82b39f956846ac9a3edf2" translate="yes" xml:space="preserve">
          <source>Code coverage enforcement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46c72bf4ae7eb48d96f55e4013ee3f2d7142778" translate="yes" xml:space="preserve">
          <source>Code example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f24c84fb8f4849c887796b363e0764aa6358136" translate="yes" xml:space="preserve">
          <source>Code folding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d0e7e0e4dd707c2571466fd21232a0c600fae4" translate="yes" xml:space="preserve">
          <source>Code review</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9e83946f82934cc9af7eabf849f56e5568af17" translate="yes" xml:space="preserve">
          <source>Code samples are located in sub-folders of the &lt;code&gt;content/examples&lt;/code&gt; directory of the &lt;code&gt;angular/angular&lt;/code&gt; repository. An example folder name should be the same as the guide page it supports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41d178927f51afd0c45ad6d7fa26a126615f9ca" translate="yes" xml:space="preserve">
          <source>Code snippet from a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224c92aae86d4dcbe90c7f9da817abd49a68a22a" translate="yes" xml:space="preserve">
          <source>Code snippet markup is always in the form of a comment. Here's the default &lt;em&gt;docregion&lt;/em&gt; markup for a TypeScript or JavaScript file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12290540d14510f52b7f0030a442c0c44cb71ecb" translate="yes" xml:space="preserve">
          <source>Code snippet markup is not supported for JSON files because comments are forbidden in JSON files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98236b3d17ceed033b542d4613eb46ba6e125324" translate="yes" xml:space="preserve">
          <source>Code snippet markup is not supported in JSON files because comments are forbidden in JSON files. See &lt;a href=&quot;docs-style-guide#json-files&quot;&gt;below&lt;/a&gt; for details and workarounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f3eed2a4a45d8750a9e33d1ea2457771c53179" translate="yes" xml:space="preserve">
          <source>Code snippets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2970f6e6c3e24b562997868c5c1c3fdd412357" translate="yes" xml:space="preserve">
          <source>Code snippets and code samples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c800abf691fed44650ecde40fa2cf5185767d18" translate="yes" xml:space="preserve">
          <source>Code tabs display code much like &lt;em&gt;code examples&lt;/em&gt; do. The added advantage is that they can display multiple code samples within a tabbed interface. Each tab is displayed using &lt;em&gt;code pane&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ddc435fb2f971e641394b8fc884d949522ab45" translate="yes" xml:space="preserve">
          <source>Code that defines the transformation logic for a named schematic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a9b1e9a69e6a776df404d65c076ef88075529c" translate="yes" xml:space="preserve">
          <source>Code-example attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205fb81b522095ce244f559338855e2127cf2d16" translate="yes" xml:space="preserve">
          <source>Code-pane attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b719f3a5e89b82f76e2afe3515e95ab5698cea1" translate="yes" xml:space="preserve">
          <source>Code-tabs attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8011ac79125624099e9d32e8ef670f86528c2033" translate="yes" xml:space="preserve">
          <source>Codelyzer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da50236eb720bd1413455d107dba335697d2a6a" translate="yes" xml:space="preserve">
          <source>Collection contents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8caf58ebc2730336f5d66018e3945727efc9abc" translate="yes" xml:space="preserve">
          <source>CollectionChangeRecord</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db316d38e0f2c64e217b3a2605bcc3104e4dc570" translate="yes" xml:space="preserve">
          <source>Combination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4444c960a283390201d4508071d4dfe606c872" translate="yes" xml:space="preserve">
          <source>Combination of NgModuleFactory and ComponentFactorys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96027d3744e326ba68544f30c3f8c184f6f702c7" translate="yes" xml:space="preserve">
          <source>Combining fragments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd1876ade856fe13c97a7af4232c252d357d410" translate="yes" xml:space="preserve">
          <source>Combining wildcard and void states</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a13131a199f7ed2b2e53bae9c0a5634c9185ef" translate="yes" xml:space="preserve">
          <source>Command Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d23da4f1861c2de251864384cc90103263376a" translate="yes" xml:space="preserve">
          <source>Command syntax is shown as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0136eb7ffb449c2fa1b21274a97fdd8125ef15a" translate="yes" xml:space="preserve">
          <source>Commands that create or operate on apps and libraries (such as &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;generate&lt;/code&gt;) must be executed from within a workspace folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63648a31e444c32ef66681b6888f0fca2836a055" translate="yes" xml:space="preserve">
          <source>Commit your changes and push.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f749ce740e43f064650c91d9a8aebd2ae4577f" translate="yes" xml:space="preserve">
          <source>Common foundation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044d38e8939c8f6fc027ea1c90729d6aca7109d3" translate="yes" xml:space="preserve">
          <source>Common operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badb8aff5ba142329a4ad7b62d8078cf42193553" translate="yes" xml:space="preserve">
          <source>CommonModule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c86ad5105299805677289b9b80314247887cba" translate="yes" xml:space="preserve">
          <source>Compare to &lt;a href=&quot;glossary#aot&quot;&gt;ahead-of-time (AOT) compilation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d26218f8a73479c8f90335a3a6a00b6f337b22" translate="yes" xml:space="preserve">
          <source>Compare to &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c022e170fda3db787738674a20dda4b677e11ddc" translate="yes" xml:space="preserve">
          <source>Compare to &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9d691190a1543ad5b5951dda02661148f1dad1" translate="yes" xml:space="preserve">
          <source>Compare using the form builder to creating the instances manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3180d25790308ffef9fbe2de02c0c538d01c88" translate="yes" xml:space="preserve">
          <source>Compare with the less preferred &lt;code&gt;&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; metadata alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231783f3babfb643d604e3827c29b662da5ecc82" translate="yes" xml:space="preserve">
          <source>Comparing dates inside fakeAsync()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b02994ca75141a94477242c55d0ff492b4469de" translate="yes" xml:space="preserve">
          <source>Compatibility note: The primary goal of the backward compatibility promise is to ensure that changes in the core framework and tooling don't break the existing ecosystem of components and applications and don't put undue upgrade/migration burden on Angular application and component authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7351891215f76c0244ff90f141a455e333b9ba9d" translate="yes" xml:space="preserve">
          <source>Compilation phases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23c833bc98e34fcc44de353781870a6809c2ce3" translate="yes" xml:space="preserve">
          <source>Compile components with a &lt;code&gt;templateUrl&lt;/code&gt; for the test's NgModule. It is necessary to call this function as fetching urls is asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e019565fd0e122114fad2a76572cafa4c0d552" translate="yes" xml:space="preserve">
          <source>Compile the testing module asynchronously after you've finished configuring it. You &lt;strong&gt;must&lt;/strong&gt; call this method if &lt;em&gt;any&lt;/em&gt; of the testing module components have a &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; because fetching component template and style files is necessarily asynchronous. See &lt;a href=&quot;testing#compile-components&quot;&gt;above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes" xml:space="preserve">
          <source>Compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ff411395a91d5b1dc79f3d1278e69cf04aa8b5" translate="yes" xml:space="preserve">
          <source>CompilerFactory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc2ee3abd448529e3588f53e80d60d1f5288a64" translate="yes" xml:space="preserve">
          <source>CompilerOptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b49f0cb07fed5cfdb96ce2bba96d96a96d357fa" translate="yes" xml:space="preserve">
          <source>Compiles an Angular app into an output directory named dist/ at the given output path. Must be executed from within a workspace directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f023360e44232d193e338a890e4c19d000308a" translate="yes" xml:space="preserve">
          <source>Compiles the application with the &lt;a href=&quot;glossary#jit&quot;&gt;JIT compiler&lt;/a&gt; and &lt;a href=&quot;bootstrapping&quot;&gt;bootstraps&lt;/a&gt; the application's main module (&lt;code&gt;AppModule&lt;/code&gt;) to run in the browser. The JIT compiler is a reasonable choice during the development of most projects and it's the only viable choice for a sample running in a &lt;em&gt;live-coding&lt;/em&gt; environment such as Stackblitz. Alternative &lt;a href=&quot;aot-compiler&quot;&gt;compilation&lt;/a&gt;, &lt;a href=&quot;build&quot;&gt;build&lt;/a&gt;, and &lt;a href=&quot;deployment&quot;&gt;deployment&lt;/a&gt; options are available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50708126059fa40a6b557ef77b37be70a346beb5" translate="yes" xml:space="preserve">
          <source>Compiles the given NgModule and all of its components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b7b9c6e3ac2f9105c846798742f2893a8be9e7" translate="yes" xml:space="preserve">
          <source>Compiles the given NgModule and all of its components. All templates of the components listed in &lt;code&gt;entryComponents&lt;/code&gt; have to be inlined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de39b9b91b8f7180a411b770d0b07b5599e52b42" translate="yes" xml:space="preserve">
          <source>Completions lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8888e0cf1a2c2fd0498704b282ff6ffc60e95cb3" translate="yes" xml:space="preserve">
          <source>Complex animation Sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c208d675cf6c07a5ea2f5b619875954f7edeb3a" translate="yes" xml:space="preserve">
          <source>Complex animation sequences</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38bb4df6bab9aede2293cef9b9ad58be0b3a29a1" translate="yes" xml:space="preserve">
          <source>Complex animations can have many things happening at once. But what if you want to create an animation involving several animations happening one after the other? Earlier we used &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; to run multiple animations all at the same time, in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b80648a434b40526c0d9e8ab3bbc1771baf9d8" translate="yes" xml:space="preserve">
          <source>Complex configuration values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="516d8480c6ea7e5e78171eef9373ac7cd5f70db0" translate="yes" xml:space="preserve">
          <source>Component (B) is the parent of another component (C) that defines its own, even &lt;em&gt;more specialized&lt;/em&gt; provider for &lt;code&gt;CarService&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6a824a16623ee0b32f2357a8d7b8db120fe3be" translate="yes" xml:space="preserve">
          <source>Component DOM testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea7f737b1c6dd041d0d69bb58b053702ef34738" translate="yes" xml:space="preserve">
          <source>Component Interaction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1119a03609be0e26f0b83ce1b815ac1ef4ba2995" translate="yes" xml:space="preserve">
          <source>Component Styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7585be91ae5aa056821ee74e95e1de1b09310c" translate="yes" xml:space="preserve">
          <source>Component Test Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc991f93e2c88dc262e01671c09afbe0757e6c8e" translate="yes" xml:space="preserve">
          <source>Component Test Scenarios</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd40a457b9e4e1afef35a0f7de1f3f1f701d052a" translate="yes" xml:space="preserve">
          <source>Component binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd24457c9b7dc7ba1d421757845f793c80019fa2" translate="yes" xml:space="preserve">
          <source>Component class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78197fcc61b947f45c6d27cabc4c7c8a26dd350e" translate="yes" xml:space="preserve">
          <source>Component class testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd1cb80eef428ae3b3e4c894c36b107b7a92287" translate="yes" xml:space="preserve">
          <source>Component configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e403eb48a3799fbeef85de47dee17fd3567678c4" translate="yes" xml:space="preserve">
          <source>Component custom prefix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92223451f571ab07fa63eb6c4fdc64e185de9c7d" translate="yes" xml:space="preserve">
          <source>Component decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b156bc6b7215149af0299458e72e26181d26575" translate="yes" xml:space="preserve">
          <source>Component directives &lt;strong&gt;should not&lt;/strong&gt; use the following attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2c144285210dd5bbe0792678f5f896a79660c5" translate="yes" xml:space="preserve">
          <source>Component directives may also use the following attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54468e20f7644178b82ade992718614d8369ce7" translate="yes" xml:space="preserve">
          <source>Component inside a test host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b6cd1c5c2fe07aede776527928b5d7682adba2" translate="yes" xml:space="preserve">
          <source>Component lifecycle hooks overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04d57678cf109bf45daef3aa34052f94933e2d0" translate="yes" xml:space="preserve">
          <source>Component marble tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6c549ff22b030abd1a117d74976137e2550458" translate="yes" xml:space="preserve">
          <source>Component metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad800316fe97dc21af2417441adf06059ed33e1e" translate="yes" xml:space="preserve">
          <source>Component outputs are dispatched as HTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent&quot;&gt;Custom Events&lt;/a&gt;, with the name of the custom event matching the output name. For example, for a component with &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;() valueChanged = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;()&lt;/code&gt;, the corresponding custom element will dispatch events with the name &quot;valueChanged&quot;, and the emitted data will be stored on the event&amp;rsquo;s &lt;code&gt;detail&lt;/code&gt; property. If you provide an alias, that value is used; for example, &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;('myClick') clicks = new &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&amp;lt;string&amp;gt;();&lt;/code&gt; results in dispatch events with the name &quot;myClick&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ea9312f0e536e509ee307db80d647c47b6a4a7" translate="yes" xml:space="preserve">
          <source>Component selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8863b469cad5dc791fae35412b4254fed7745b28" translate="yes" xml:space="preserve">
          <source>Component styles have a few special &lt;em&gt;selectors&lt;/em&gt; from the world of shadow DOM style scoping (described in the &lt;a href=&quot;https://www.w3.org/TR/css-scoping-1&quot;&gt;CSS Scoping Module Level 1&lt;/a&gt; page on the &lt;a href=&quot;https://www.w3.org&quot;&gt;W3C&lt;/a&gt; site). The following sections describe these selectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c446f8314ac20002e5ecf53891c030438828a2ec" translate="yes" xml:space="preserve">
          <source>Component styles normally apply only to the HTML in the component's own template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2ecee4a949dbf40e4abdfb3f361cc06d154b19" translate="yes" xml:space="preserve">
          <source>Component templates are not always fixed. An application may need to load new components at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadc85e8437b1cdd7af92ff5b173596395910c6e" translate="yes" xml:space="preserve">
          <source>Component templates often have nested components, whose templates may contain more components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43652ff79cfd8f9d0118ca00f815b83151f09899" translate="yes" xml:space="preserve">
          <source>Component with a dependency</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8bf28b2e5f05d7a69da7a49da675689404155c" translate="yes" xml:space="preserve">
          <source>Component with async service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ed493fa280ebc7f4b7605ea8c601d5796f60cb" translate="yes" xml:space="preserve">
          <source>Component with external files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68b8dbf2387ec137e9b2d3fc6b9da1e905d6b34" translate="yes" xml:space="preserve">
          <source>Component with inputs and outputs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1236f7608681ed2a1269df0535b9888ff0c1324" translate="yes" xml:space="preserve">
          <source>Component-less route: grouping routes without a component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685f6e115c5169adc25a44d77aed6eb00bc124cb" translate="yes" xml:space="preserve">
          <source>ComponentFactory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86525493504d87a98402483f8c3054424e31bb06" translate="yes" xml:space="preserve">
          <source>ComponentFactoryResolver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a101fd475d77eb764e9fed972a6bbd46bc80495" translate="yes" xml:space="preserve">
          <source>ComponentFixture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e293c8cf590c8746d84456b1dc0aa586f017de" translate="yes" xml:space="preserve">
          <source>ComponentFixtureAutoDetect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14a2773bbf3d8a6ab2a1d8aa1ed7bae8a0f0c06" translate="yes" xml:space="preserve">
          <source>ComponentFixtureNoNgZone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e98cec7c3eaf575c1d34319d462717d0387fe3" translate="yes" xml:space="preserve">
          <source>ComponentRef</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6c4b6618cfc741ae22fbd010f4d93752f06491" translate="yes" xml:space="preserve">
          <source>Componentless Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04871d72df14f67889a30f54a88254070cdbf35d" translate="yes" xml:space="preserve">
          <source>Components and the DOM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec4533ed719f39b381cbdfc417b27788619074f" translate="yes" xml:space="preserve">
          <source>Components are directives, and the &lt;code&gt;providers&lt;/code&gt; option is inherited from &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;. You can also configure providers for directives and pipes at the same level as the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6ccc6716d5ea20911cd8f2b468603ff8cc07e3" translate="yes" xml:space="preserve">
          <source>Components are normally marked as dirty (in need of rerendering) when inputs have changed or events have fired in the view. Call this method to ensure that a component is checked even if these triggers have not occured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111fdb54ac7de4a5014fda70ad4653ce5adce0c1" translate="yes" xml:space="preserve">
          <source>Components are the most basic UI building block of an Angular app. An Angular app contains a tree of Angular components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e8f3bc2333c7cc18c50daf6aa116204f2ef464" translate="yes" xml:space="preserve">
          <source>Components are used in your templates, as in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69dc5e05a59cdc6a7dabbb6d83c2adc09bba15dc" translate="yes" xml:space="preserve">
          <source>Components as elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e394315dc7817973d18be1e075c8e2dd6217e7" translate="yes" xml:space="preserve">
          <source>Components define &lt;em&gt;views&lt;/em&gt;, which are sets of screen elements that Angular can choose among and modify according to your program logic and data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584e4a632efc57983135945abb97b1a89e6f3c71" translate="yes" xml:space="preserve">
          <source>Components in external modules continue to receive the instance provided by their injectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7084833ae18593d05fba020fc794dab748ba3ed2" translate="yes" xml:space="preserve">
          <source>Components in route definitions are also &lt;em&gt;entry components&lt;/em&gt;. A route definition refers to a component by its &lt;em&gt;type&lt;/em&gt;. The router ignores a routed component's selector, if it even has one, and loads the component dynamically into a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f2f799d4b9ac0bf7ee88c6bd79441decb0f884" translate="yes" xml:space="preserve">
          <source>Components often have service dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cd4f8b0ba0728b87ad402a9c2782f583d5ae1fd" translate="yes" xml:space="preserve">
          <source>Components should expose their interactions through inputs for providing context, and outputs for communicating events to other components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408fdb18600b6c51987875e2857d0bd7de437dc5" translate="yes" xml:space="preserve">
          <source>Components shouldn't fetch or save data directly and they certainly shouldn't knowingly present fake data. They should focus on presenting data and delegate data access to a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd8d99abc38e74108276aa2bf4da03f77f0284d" translate="yes" xml:space="preserve">
          <source>Components that are only loaded dynamically by the router or by bootstrapping. Such &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;entry components&lt;/a&gt; can never be selected in another component's template. While there's no harm in exporting them, there's also no benefit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537c22bb75822c4c36bedeb23ff56c63634900e8" translate="yes" xml:space="preserve">
          <source>Components use &lt;em&gt;services&lt;/em&gt;, which provide specific functionality not directly related to views. Service providers can be &lt;em&gt;injected&lt;/em&gt; into components as &lt;em&gt;dependencies&lt;/em&gt;, making your code modular, reusable, and efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a95007464d33e889aaba72bdf85c74650118684" translate="yes" xml:space="preserve">
          <source>Components with &lt;code&gt;RouterLink&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccedd94d6bed4d22293639bbe5172d0520a683ac" translate="yes" xml:space="preserve">
          <source>Components&amp;mdash;directives with a template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613ad0917443866a4cb165203f1ee52098da7920" translate="yes" xml:space="preserve">
          <source>Components, directives, and pipes must belong to &lt;em&gt;exactly&lt;/em&gt; one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported directly or indirectly from another module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4bfab1753d945b45d24b8a8f9b694887544a20" translate="yes" xml:space="preserve">
          <source>Compose multiple async validators into a single function that returns the union of the individual error objects for the provided control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713796f29d99bd25c93da871cdbfc3841e1f3dd4" translate="yes" xml:space="preserve">
          <source>Compose multiple validators into a single function that returns the union of the individual error maps for the provided control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a25d5f8a23e5ca75242aa5e2740c8f9f249d5f" translate="yes" xml:space="preserve">
          <source>Composing multiple streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4099139a76dd41e01b827890573d000064768d5d" translate="yes" xml:space="preserve">
          <source>Compute a difference between the previous state and the new &lt;code&gt;object&lt;/code&gt; state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9131da43681025794422d5020969e00fe64736c6" translate="yes" xml:space="preserve">
          <source>Computer notation for exponential value (n times a power of 10). Example: 1.2E3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd720ee45c492d6d7ed703e270ad918fb8c585e" translate="yes" xml:space="preserve">
          <source>Conceptually, you can imagine the Angular service worker as a forward cache or a CDN edge that is installed in the end user's web browser. The service worker's job is to satisfy requests made by the Angular app for resources or data from a local cache, without needing to wait for the network. Like any cache, it has rules for how content is expired and updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52b9120da6a8af8541ebd623c609817158aa62a" translate="yes" xml:space="preserve">
          <source>Concrete injectors implement this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f1b7e372d92a878669324d80007121df0e9993" translate="yes" xml:space="preserve">
          <source>Conditional display with NgIf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d8c4f438a64027d9c179cbd6cac7228180ae16" translate="yes" xml:space="preserve">
          <source>Conditional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb462985047418e569f749429a8e241082dca68" translate="yes" xml:space="preserve">
          <source>Conditionally swaps the contents of the div by selecting one of the embedded templates based on the current value of &lt;code&gt;conditionExpression&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12923d02188453229d798291560b0e402e0cdc2" translate="yes" xml:space="preserve">
          <source>Config object passed to initialize the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1100f1c9c4d1eb55d7214837d3fb9654ee74a6" translate="yes" xml:space="preserve">
          <source>Configuration defaults for Architect builder targets for this project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0724d66ac5fde4442631a00bd09131b2dd58588a" translate="yes" xml:space="preserve">
          <source>Configuration file used by &lt;a href=&quot;https://github.com/ng-packagr/ng-packagr&quot;&gt;ng-packagr&lt;/a&gt; for building your library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dd88079f541af57e4adfcddaae6fb163e6da93" translate="yes" xml:space="preserve">
          <source>Configuration for SystemJsNgModuleLoader. token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f59039a9582f5ef9337d8fd89fec8a897a3f8c" translate="yes" xml:space="preserve">
          <source>Configuration for code editors. See &lt;a href=&quot;https://editorconfig.org/&quot;&gt;EditorConfig&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c15ee8a67a30e7e9a9e71785f7b672937eec9ce" translate="yes" xml:space="preserve">
          <source>Configuration inheritance with extends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0ea8f50fd69e0d1f261fb22638d876ef51713d" translate="yes" xml:space="preserve">
          <source>Configuration options determine how the control propagates changes and emits events after updates and validity checks are applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904ea1c4be060c0b5f8bd86dec83859df182f291" translate="yes" xml:space="preserve">
          <source>Configuration options for LocationUpgrade.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080e38262b19342c92f70dcb4f588e0426189269" translate="yes" xml:space="preserve">
          <source>Configuration options object for the &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt;. The object can have two shapes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c43124a5e5f33bef1c53433d118dd7a497ccab" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control emits events after marking is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc1e7137af00b8101306741dc390346f387c194" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after marking is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60371f334a83c028ab5ba1cd688d36dd7b388f85" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the control is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54bb3a87a91320a8a66b7f3a8ab342702b3a630" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the marking is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e068b29775ffa65327c0c8208d34c6077b4704" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the value changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eef8c09918819b33239a64a7704d2dc27700f4ed" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the value changes. The configuration options are passed to the &lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7da654574374e97b1b1d633c048bae7669cdbc6" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events after the value is patched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8c51fa4affb5692281be0093de6971007241a1" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events events after marking is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e20f0372bd831c5bf266eaa0e2a5d55a55725a0" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events when the group is reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95346d92ef28a1f10e1fda94a68c78f7ddc899d" translate="yes" xml:space="preserve">
          <source>Configuration options that determine how the control propagates changes and emits events when the value changes. The configuration options are passed to the &lt;a href=&quot;abstractcontrol#updateValueAndValidity&quot;&gt;updateValueAndValidity&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f225227a9ede3a3a8dd6e1abda67f983abb549ed" translate="yes" xml:space="preserve">
          <source>Configure CLI for CI testing in Chrome</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b29bddffe31db8562618db2dcd2e4e60815f01" translate="yes" xml:space="preserve">
          <source>Configure IIS rewrite rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b41b15bfe9509457f2290a57e31d089c487f02" translate="yes" xml:space="preserve">
          <source>Configure Visual Studio to use the global external web tools instead of the tools that ship with Visual Studio:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbfa3351a7da736d0f49a97dc1ad6c0732013f9" translate="yes" xml:space="preserve">
          <source>Configure XSRF protection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed8d54f9a98aa953033d3f194a4460811675a05f" translate="yes" xml:space="preserve">
          <source>Configure a custom route matcher for AngularJS routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dd712a3b2c0fb2198e61700e7b674122237218" translate="yes" xml:space="preserve">
          <source>Configure an injector with a service provider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13e3e83717f3b6e903c9549155c22d7088485f0" translate="yes" xml:space="preserve">
          <source>Configure environment-specific defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4264ed71674e27966b2c0b46b2608327f0ad1b6c" translate="yes" xml:space="preserve">
          <source>Configure options that control how the control propagates changes and emits events when marked as untouched</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf7ca44f8f33409d312682ce9ad98ded1245676" translate="yes" xml:space="preserve">
          <source>Configure options that determine how the control propagates changes and emits events after the value changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb57e0371e2fc9618005ed283bc5a627e0d0503d" translate="yes" xml:space="preserve">
          <source>Configure project for Circle CI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170e1de26a76b0b5d609277eac722fc254816590" translate="yes" xml:space="preserve">
          <source>Configure project for Travis CI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a9aa72cb715e4fdbe55f12687848393d9768d2" translate="yes" xml:space="preserve">
          <source>Configure target-specific file replacements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d35a8912f7e5dc75b8b11df8308bd48528c3ace" translate="yes" xml:space="preserve">
          <source>Configure the Angular Router to defer loading of all other modules (and their associated code), either by &lt;a href=&quot;router#preloading&quot;&gt;waiting until the app has launched&lt;/a&gt; or by &lt;a href=&quot;router#asynchronous-routing&quot;&gt;&lt;em&gt;lazy loading&lt;/em&gt;&lt;/a&gt; them on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4c2e92d82a4ec3de973912a2abd2f9c68b616d" translate="yes" xml:space="preserve">
          <source>Configure the control to update on a blur event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea6116a1253fc1036b641181589e01fbb198bb9" translate="yes" xml:space="preserve">
          <source>Configure the control to update on a submit event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f746a68905eaf70487c3a4b6c2f9fdf25b6f714" translate="yes" xml:space="preserve">
          <source>Configure the new schematic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51965dab4793a37225d1a1be0a49b829d5e23bf4" translate="yes" xml:space="preserve">
          <source>Configure the router module with &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1a902d750f1c3a051ac9adef4d547529be7083" translate="yes" xml:space="preserve">
          <source>Configure the routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac47d13e9fb69ec283379427c60cda732da4a6e6" translate="yes" xml:space="preserve">
          <source>Configure the server to redirect requests for missing files to &lt;code&gt;index.html&lt;/code&gt;. Learn more about server-side redirects &lt;a href=&quot;deployment#fallback&quot;&gt;below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b4e42ab75b8784da8b861251f32df14e4e0ed8" translate="yes" xml:space="preserve">
          <source>Configures &lt;a href=&quot;npm-packages&quot;&gt;npm package dependencies&lt;/a&gt; that are available to all projects in the workspace. See &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npm documentation&lt;/a&gt; for the specific format and contents of this file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d23157ddf003648e8e746d3559880a65b4dc54" translate="yes" xml:space="preserve">
          <source>Configures &lt;a href=&quot;npm-packages&quot;&gt;npm package dependencies&lt;/a&gt; that are required for this library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd14ca10fd76adaadc5939ae472d04f24c24d40" translate="yes" xml:space="preserve">
          <source>Configures &lt;code&gt;HttpClientTestingBackend&lt;/code&gt; as the &lt;code&gt;&lt;a href=&quot;../httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; used by &lt;code&gt;&lt;a href=&quot;../httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf933ef56571a123747f65a5b55a64b98ada50f" translate="yes" xml:space="preserve">
          <source>Configures &lt;code&gt;HttpClientTestingBackend&lt;/code&gt; as the &lt;code&gt;&lt;a href=&quot;httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; used by &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb7e4485932cfd1de7a060e475b3815ae97dfc1" translate="yes" xml:space="preserve">
          <source>Configures XSRF protection support for outgoing requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a1de12ced777c182047fc1700c6e22c8edc707" translate="yes" xml:space="preserve">
          <source>Configures a browser-based app to transition from a server-rendered app, if one is present on the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a434ad619286dfe86adfce0465b9d38610c08bc2" translate="yes" xml:space="preserve">
          <source>Configures a preloading strategy. One of &lt;code&gt;&lt;a href=&quot;preloadallmodules&quot;&gt;PreloadAllModules&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;nopreloading&quot;&gt;NoPreloading&lt;/a&gt;&lt;/code&gt; (the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a709e8acb46c26ccfe94d302e108117ba50bc817" translate="yes" xml:space="preserve">
          <source>Configures and initializes environment for unit testing and provides methods for creating components and services in unit tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d974520f6e13caa7523a050c50112dac9842e81c" translate="yes" xml:space="preserve">
          <source>Configures if the scroll position needs to be restored when navigating back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355e28af987d6e19841341eeb2a4d70ee68fa8fa" translate="yes" xml:space="preserve">
          <source>Configures routes for the application. Supports static, parameterized, redirect, and wildcard routes. Also supports custom route data and resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655c57a99af0d3109e31ed75d5bcd9d001455065" translate="yes" xml:space="preserve">
          <source>Configures sharing of target browsers and Node.js versions among various front-end tools. See &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist on GitHub&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad517b56561202c6f4359a9192de454ae8a95b9c" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for JSONP. Without this module, Jsonp requests reach the backend with method JSONP, where they are rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="017bdec14b57ac5df6673be7e9fcc7965f792356" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for XSRF. Automatically imported by &lt;code&gt;&lt;a href=&quot;httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71aa94662f29578035b51374daebcceb523a1a5c" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for JSONP. Without this module, Jsonp requests reach the backend with method JSONP, where they are rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abb8b7af799cf935e6d74a82f16cc3df381fd3fa" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;dependency injector&lt;/a&gt; for &lt;code&gt;&lt;a href=&quot;http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; with supporting services for XSRF. Automatically imported by &lt;code&gt;&lt;a href=&quot;http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="790982c1da92d9a4a3757d5e97cbd5482faeab59" translate="yes" xml:space="preserve">
          <source>Configures the &lt;a href=&quot;../../guide/glossary#injector&quot;&gt;injector&lt;/a&gt; of this directive or component with a &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;token&lt;/a&gt; that maps to a &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; of a dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a45f7929e71f4ba59f4a8ad3da1adfaa36da765" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;&lt;a href=&quot;core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02ed916f1e49de03daf252a306ed41a87a8e713" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useClass&lt;/code&gt; function. Base for &lt;code&gt;&lt;a href=&quot;core/classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92fc25f9eceebfbb5082c1b90a7de5b094fe6c6" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e479568b218802812c025359083e541bc6ccb05" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token. Base for &lt;code&gt;&lt;a href=&quot;core/valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6353fce328281bccc557008062dcf3fbfb3cedd6" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;&lt;a href=&quot;core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6912db51cd3dbd31d8209b6df1e76d3826ee6b25" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; when `Type' is used as the token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e48ca749f7103d266a954f62377d9c41ee37b78" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215555381dc174a710d55310df8470a1903bc17e" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token. Base for &lt;code&gt;&lt;a href=&quot;core/staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2774323b86ff54bc138cf89007f4a111fe978949" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46876796cbd43a683b28fd882c707ae7ed9c73fd" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3555b19661005ca96609d18ab3d5155c9a989f4" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value by invoking a &lt;code&gt;useClass&lt;/code&gt; function. Base for &lt;code&gt;&lt;a href=&quot;classprovider&quot;&gt;ClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa4d8f65f33963b2c13a185cc39738c1582c90e" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad425856dc4fab4c772b6dfd94e9573673341fe" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value for a token. Base for &lt;code&gt;&lt;a href=&quot;valueprovider&quot;&gt;ValueProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00f9d960028889f815c04e01ccebf365295c64b" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return a value of another &lt;code&gt;&lt;a href=&quot;existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ce9b3787c81b461a2ff3c1e6eccab1e8a5db21" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; when `Type' is used as the token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c785c093ab8db357541ce09421b2905d251c6f62" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0534fa68714679e5acd551385a86e37f431e6ad6" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of &lt;code&gt;useClass&lt;/code&gt; for a token. Base for &lt;code&gt;&lt;a href=&quot;staticclassprovider&quot;&gt;StaticClassProvider&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1cdae9c54d30865f0bd4567e4ad345bca4298f1" translate="yes" xml:space="preserve">
          <source>Configures the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; to return an instance of a token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ceed2ced13e45139fbd79ba14b4345f5f02552" translate="yes" xml:space="preserve">
          <source>Configures the URL codec for encoding and decoding URLs. Default is the &lt;code&gt;AngularJSCodec&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d4362ba6a5c2b25cf80a318749279e2913f30c" translate="yes" xml:space="preserve">
          <source>Configures the base href when used in client-side rendered applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33672527f455ecfddcd35c1002dc3b16a4c07a8" translate="yes" xml:space="preserve">
          <source>Configures the base href when used in server-side rendered applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef7ef749cff709e887e2c2aa691baf2be4fa36e" translate="yes" xml:space="preserve">
          <source>Configures the gathering of Angular CLI usage metrics. See &lt;a href=&quot;https://v8.angular.io/cli/usage-analytics-gathering&quot;&gt;https://v8.angular.io/cli/usage-analytics-gathering&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44dba6deb045365ba90eda211459a90a314cfa1" translate="yes" xml:space="preserve">
          <source>Configures the generation of the application's HTML index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606e40d38c3c6176492de2e8767b8f16cc82d975" translate="yes" xml:space="preserve">
          <source>Configures the hash prefix used in the URL when using the &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354ac0d80d0935b4f0ed926e11149cc7187b891c" translate="yes" xml:space="preserve">
          <source>Configures the queries that will be injected into the directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b85c7e4fa593ef2684a74687e147f20c772314" translate="yes" xml:space="preserve">
          <source>Configures the root injector for an app with providers of &lt;code&gt;@angular/core&lt;/code&gt; dependencies that &lt;code&gt;&lt;a href=&quot;applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; needs to bootstrap components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bb1a91c1b98343a1a9158d20a1b1a8de04d5f3" translate="yes" xml:space="preserve">
          <source>Configures the root injector for an app with providers of &lt;code&gt;@angular/core&lt;/code&gt; dependencies that &lt;code&gt;&lt;a href=&quot;core/applicationref&quot;&gt;ApplicationRef&lt;/a&gt;&lt;/code&gt; needs to bootstrap components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ea32179e836ed9d697fdab772550567562d715" translate="yes" xml:space="preserve">
          <source>Configures the scroll offset the router will use when scrolling to an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bfb6c394274e9e69dc237b1ee54d632c4b77f09" translate="yes" xml:space="preserve">
          <source>Configures the top offset used when scrolling to an anchor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbb80073f5a7c31464f131d4117751088863bdb" translate="yes" xml:space="preserve">
          <source>Configures whether the location upgrade module should use the &lt;code&gt;&lt;a href=&quot;../hashlocationstrategy&quot;&gt;HashLocationStrategy&lt;/a&gt;&lt;/code&gt; or the &lt;code&gt;&lt;a href=&quot;../pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fc56ebc0f714bdfd0dff1e82922f959b5ef867" translate="yes" xml:space="preserve">
          <source>Configuring AOT compilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca5d7436fb543c24f85516f553280684c834989" translate="yes" xml:space="preserve">
          <source>Configuring CLI schematics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad07be672efeb55ca3cb3f37c69044afcf5f7b7" translate="yes" xml:space="preserve">
          <source>Configuring application environments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec21d8d7cb50228b36397333d5669d30dd474349" translate="yes" xml:space="preserve">
          <source>Configuring browser compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc5290c9bfe3ed7f891c80e59aa43584653ac02" translate="yes" xml:space="preserve">
          <source>Configuring builder targets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daaea589cfdcba68c6fb4439f82db13e2663ef08" translate="yes" xml:space="preserve">
          <source>Configuring custom cookie/header names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3318dc8949af442001c4edd02bb7f568634038c4" translate="yes" xml:space="preserve">
          <source>Configuring differential loading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e730960b7171130fca481fc1f10e9e9263328d" translate="yes" xml:space="preserve">
          <source>Configuring serve for ES5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e167f3c501b11cdaa3153d8880a1210498664831" translate="yes" xml:space="preserve">
          <source>Configuring size budgets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4a4c665250aa208aa365794302cdfdd8be4d9e" translate="yes" xml:space="preserve">
          <source>Configuring the e2e command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8c7079cd89d0939b266f6d64431c7e2ae58c57" translate="yes" xml:space="preserve">
          <source>Configuring the request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd2811811ef917c6598a28f5343087cf2fd7267" translate="yes" xml:space="preserve">
          <source>Configuring the test command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a24839fb22b5bafd46364046d4cbddbff408ca" translate="yes" xml:space="preserve">
          <source>Confirm it&amp;rsquo;s working</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224f48dab1e5cf55b03ac2f1ac05bea3b8bedb00" translate="yes" xml:space="preserve">
          <source>Confirm this for yourself by temporarily removing the &lt;code&gt;subscribe()&lt;/code&gt;, clicking &quot;Dashboard&quot;, then clicking &quot;Heroes&quot;. You'll see the full list of heroes again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6715f3903bc2449584179fb098598b283932a25" translate="yes" xml:space="preserve">
          <source>Congratulations! You have a complete online store application with a product catalog, a shopping cart, and a checkout function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7ad5d0678afbe3fd7553084cf4787b6e9c0c989" translate="yes" xml:space="preserve">
          <source>Congratulations! You have an online store application with a product catalog and shopping cart. You also have the ability to look up and display shipping prices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c6e279d38be8fc1d0310fb7edeaf498cdea917" translate="yes" xml:space="preserve">
          <source>Congratulations! You have integrated routing into your online store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec4a8ae4ac6c91ea3ef7e362745b3a129323812" translate="yes" xml:space="preserve">
          <source>Congratulations! You're running a hybrid application! The existing AngularJS code works as before &lt;em&gt;and&lt;/em&gt; you're ready to start adding Angular code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d629e3fa6fd492821bf50a06af042ffb3bd5c9e" translate="yes" xml:space="preserve">
          <source>Congratulations! You've completed your first Angular app!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d43a2b85f7f934e83c32a6dd269b7b686aad20" translate="yes" xml:space="preserve">
          <source>Connect your CLI to your Firebase account and initialize the connection to your project using &lt;code&gt;firebase login&lt;/code&gt; and &lt;code&gt;firebase init&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c27449d136ee0edd471d5b2bcf5d772b4ffe53d" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; that capitalizes the first letter of each word. Here's a naive implementation with a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f11af7b9a0daf678a95a2bb3545a00907b3f43a5" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;setCurrentClasses()&lt;/code&gt; component method that sets a component property, &lt;code&gt;currentClasses&lt;/code&gt;, with an object that adds or removes three classes based on the &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; state of three other component properties. Each key of the object is a CSS class name; its value is &lt;code&gt;true&lt;/code&gt; if the class should be added, &lt;code&gt;false&lt;/code&gt; if it should be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704938e400612dc2bb86a91cf695ea802ba5df28" translate="yes" xml:space="preserve">
          <source>Consider a Car component that depends on several services. Suppose you configured the root injector (marked as A) with &lt;em&gt;generic&lt;/em&gt; providers for &lt;code&gt;CarService&lt;/code&gt;, &lt;code&gt;EngineService&lt;/code&gt; and &lt;code&gt;TiresService&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6dd46525b101f499b4173e45474719d3b73bc3" translate="yes" xml:space="preserve">
          <source>Consider a simple app with only an &lt;code&gt;AppComponent&lt;/code&gt; and a &lt;code&gt;ChildComponent&lt;/code&gt;. The most basic rendered view would look like nested HTML elements such as the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0c87c273b1cd440c8e08219bd3d9f4c12b560b" translate="yes" xml:space="preserve">
          <source>Consider adding component tests such as this one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ab25c1b93a2faa63cd5aea01571afde09c39f6" translate="yes" xml:space="preserve">
          <source>Consider an &lt;code&gt;ItemDetailComponent&lt;/code&gt; that presents item information and responds to user actions. Although the &lt;code&gt;ItemDetailComponent&lt;/code&gt; has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bbfebd52a6fc2dcad975ebb9246faf762507f1" translate="yes" xml:space="preserve">
          <source>Consider creating a &quot;barrel&quot; file that gathers all the interceptor providers into an &lt;code&gt;httpInterceptorProviders&lt;/code&gt; array, starting with this first one, the &lt;code&gt;NoopInterceptor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b722f410e317e9cfe009f859ff75c60e3c1f71c7" translate="yes" xml:space="preserve">
          <source>Consider giving each feature module its own route configuration file. It may seem like overkill early when the feature routes are simple. But routes have a tendency to grow more complex and consistency in patterns pays off over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b361db120d8326b1672390a514f03096ea8586f8" translate="yes" xml:space="preserve">
          <source>Consider how Angular bootstraps the app with the following in &lt;code&gt;main.ts&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2610c84394a549686952f121986b0a1dfafaabe" translate="yes" xml:space="preserve">
          <source>Consider placing such helpers in a &lt;code&gt;testing&lt;/code&gt; folder sibling to the &lt;code&gt;app&lt;/code&gt; folder. This sample puts &lt;code&gt;ActivatedRouteStub&lt;/code&gt; in &lt;code&gt;testing/activated-route-stub.ts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a30ec038af240bb0c63a65ef68c17c3e707a72" translate="yes" xml:space="preserve">
          <source>Consider the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA&quot;&gt;ARIA&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG&quot;&gt;SVG&lt;/a&gt;. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfcd76249e9ea71a17509fe3b793289b07d8e06" translate="yes" xml:space="preserve">
          <source>Consider the &lt;code&gt;forbiddenNameValidator&lt;/code&gt; function from previous &lt;a href=&quot;form-validation#reactive-component-class&quot;&gt;examples&lt;/a&gt; in this guide. Here's what the definition of that function looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9832950e2039437daf274f99d97ab976ff07a91b" translate="yes" xml:space="preserve">
          <source>Consider the first parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df750f99f759535256c70ba046322057d97e3891" translate="yes" xml:space="preserve">
          <source>Consider the following &lt;code&gt;LoggingInterceptor&lt;/code&gt;, which captures the time of the request, the time of the response, and logs the outcome with the elapsed time with the injected &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa153aa2b6717da43d4aa5c2f8cdfa675736fe8" translate="yes" xml:space="preserve">
          <source>Consider the following component decorator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d49b38c45368606b30731a4e8c9d9b37fce625c" translate="yes" xml:space="preserve">
          <source>Consider the following component definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba02a047d2fa606c8b62d0728733a71f12e0cff9" translate="yes" xml:space="preserve">
          <source>Consider the following module from an imaginary app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3930ac2c45c0dfd74cd50df77026bee3f43670b" translate="yes" xml:space="preserve">
          <source>Consider the following route configuration: &lt;code&gt;[{ path: 'user/:name', component: UserCmp }]&lt;/code&gt;. When linking to this &lt;code&gt;user/:name&lt;/code&gt; route, you use the &lt;code&gt;&lt;a href=&quot;routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39319f460f4fb9c39f4884a7c1a88c15c5e5d19b" translate="yes" xml:space="preserve">
          <source>Consider the following template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc5918ab96c8ae8dd385d33d9088492a8181d54" translate="yes" xml:space="preserve">
          <source>Consider the next example, with a &lt;code&gt;nullItem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db65abc70042beb9455d6a81f9ffe531ed87cd5" translate="yes" xml:space="preserve">
          <source>Consider this &lt;code&gt;LightswitchComponent&lt;/code&gt; which toggles a light on and off (represented by an on-screen message) when the user clicks the button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd55686b3b9fcd196785761c13b6856f6e18c3d" translate="yes" xml:space="preserve">
          <source>Consider this example of a child/parent relationship:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565e25b1be863570aa48357d4e37a3cb9b1014a4" translate="yes" xml:space="preserve">
          <source>Consider this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373e414166550c8a0819f99056b315d0e56007a0" translate="yes" xml:space="preserve">
          <source>Consider this translation to French:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b7723591959083ad1b46043ee91e613fb4e932" translate="yes" xml:space="preserve">
          <source>Consider this variation on the &lt;a href=&quot;lifecycle-hooks#afterview&quot;&gt;previous &lt;em&gt;AfterView&lt;/em&gt;&lt;/a&gt; example. This time, instead of including the child view within the template, it imports the content from the &lt;code&gt;AfterContentComponent&lt;/code&gt;'s parent. Here's the parent's template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19ffd846c37d7414552d50785c96ff829945eb9" translate="yes" xml:space="preserve">
          <source>Consider writing a more capable version of this stub class with the &lt;a href=&quot;testing#marble-testing&quot;&gt;&lt;em&gt;marble testing library&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="123acf3eb0958698db3b9d6cb8b39fb90d98951d" translate="yes" xml:space="preserve">
          <source>Consolidated setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599005e9d0a1ed8a6d678501e1cd08f335ab014c" translate="yes" xml:space="preserve">
          <source>Constants for the categories of parameters that can be defined for animations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b523fd10da4469f4b2ce06dba3999dc4b270b7d" translate="yes" xml:space="preserve">
          <source>Constants in API documentation to find more built-in tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e68a873a2be3470675b9ee933b98d781ae7fef" translate="yes" xml:space="preserve">
          <source>Constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef05208dd9ec71f70387f2d769aa146308ccbd23" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; with the given state, validators and options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2579e03480a20036b5089c167b3f0020b0184c" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76dfa2168304d703ec211079e60eaef5f1dbdec" translate="yes" xml:space="preserve">
          <source>Construct a new &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7861f190be64ab7c7a39786a00727bb16847d" translate="yes" xml:space="preserve">
          <source>Constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670ca6b9ef09915407c033157280805e28b73c2f" translate="yes" xml:space="preserve">
          <source>Constructor or variable initialization?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05a9515511c565726bade9a20901e8a1b93defa" translate="yes" xml:space="preserve">
          <source>ConstructorProvider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b55a3bf49768e5a45166266fd99336a9be3e26c" translate="yes" xml:space="preserve">
          <source>ConstructorSansProvider</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce1dbb7519fe8f24420e28f982f8fb187e4b298" translate="yes" xml:space="preserve">
          <source>Constructors should do little more than initialize variables. This rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server. That's why you call the &lt;code&gt;HeroService&lt;/code&gt; from within the &lt;code&gt;ngOnInit&lt;/code&gt; rather than the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cadb1df353b99c4e051b6edc1ad945766aada1" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c7265bc324b3ca092e2e42b20774ac1a7962cf" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d752e575bd5ac363323d94fd1cddc80f248c081e" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9734e30c9c3fb4f3087180f1f53dda27759aa7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7b345a02c8a2e0b156bf32fd1d956468c16cba" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fa3c91d93b2834d54dad25333e8d6c6f04d52a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5763f853957277c256fe8bece71d26cd1c302989" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d395c4f8772ed966eb476d4553f3622f3c9eb516" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text string and returns a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42594ac52811090242806c1017dfff7afc2cc39" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb015cee9533f889ac31fcc95a89d588735115b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d4b7b588e3563475edba42714ce450d5308cc9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e38f7f2d5fea29306efef924f497a2f58946854" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650e1e417750bced0f54cbe9f418025dc567dc8f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt; request the interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad93856adb8d6b8425b7acc5385a4808c8d006a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;DELETE&lt;/code&gt;request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf9b19b246c66a2020726251530d48bc738a8aa" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e49725f1a9ae4e2054271d70637a4ebfc5fe534" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c388ade7bdd889621caad9b4ece27fe7dd1606" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3281ae3f5f4f5c1ceb31d26c685149c405cf34c9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdb056ccc601478c9de526dba99533277c63fc3" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8808b94c91f6cb918a6e23418d801f00d007f86" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c4983aaec309563fd4823755b91abad4118959" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a JSON object and returns the response body in a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef0b29101aeda5c1971e298a033227042da30da" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88acb84a8dc8a7a7bf125dd68851430ba5c28b6f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2cceab39f1e7e7efe2e2f6e579fd544fa697936" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d900f5a2b2c2135dbbd2f5f071bfe09b7344a7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85cb8493e8fa7eb489f1d771a1b639079de6048e" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a07c27d0a666876d3e577af932ae161d141709c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;GET&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response in an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae9709e5254a29fde908937342183243336d2e6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e41bc7a0a26a5593b8c106a2849513992d208a4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bff2414a25c7a3a355f0ac107ce0ab2220bab8" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a0f75d10f9dd47c3ef30634c7082613b93db48" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f863170a130f7b10701f3d033e7924e426505f54" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full HTTP event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8ba56427c69a4a299cc298ca03f14f9791c4c6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e2986956d3b70b1a243ef9d1891b235b3a7cf7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0410e3f2cf2f25269594792fad8a56045d9622fd" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c6793971907cea6cbeff4c666ee19920fc8790" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17465a76f8919024e4dab5202a2b02db5f624e11" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32aab72547341461188042bc33d708b084b2739" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75281f828c52beee78e72c74e921142c4418838c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651a1e9c194461a541b1e9b035c2716dab91434f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e699f4d178bb9685d4393ffad3b66517220e5c" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;HEAD&lt;/code&gt; request that interprets the body as text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3faa3853dcee5fe3d9fe9443a6f3cbab522583" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;JSONP&lt;/code&gt; request for the given URL and name of the callback parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235abbed0544ac665d44263fa9d57156d8a7d0d4" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c496639b74673e61acab392af8229707d80e94" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3860ec6228891ae23996bbb6ec573173db852b0a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f17861f529c27980d80ff43a891f5712038253" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362c13fb84402f01f2d429576ef5e4a4f5b33b07" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c5b11223130ad747170436e71886fdb3ac790f" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62dc2dc0a6122d2737ade209d92cf331f28fc41b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cc25279f1fe8a55b73b50a0f3061b5bf769645" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e38458638cf0324b1712678aff908b60855c606" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6d700be22e47259958685c709c9505c5740728" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02057de6678548f190b9df379d020308af41aed6" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b28f32d4a88ab248f7cf83aa28581d3fb53de32" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cd7acd8580c2038f0ddac265f4a05e8c9fd805" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PATCH&lt;/code&gt; request that interprets the body as as a text string and returns the response as a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81bd3729afd38c9b3f199dd3cba59451666f8e8" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641cb490191b751283ceeb07b3880411b3e331d9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3115bea78d82e234317f39a3678fc0f698690441" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response in an observable of the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba1bd26d70d1d409c49914ddecb60499cb87756" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fb5bb7bfe7c0f33819f0f7b890f9a166a77955" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eaf2b0bba2543a7459ce52211e4f71a92ce1366" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253b00de387b55f60aac23305f4fd5c1946433c7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4eb5da1850699a1fe63fd490a53282f34e0d9a" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a789907a379c1ba1cf8c5c66a9f3b5f6488c4ba" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54dee4e9bfdab77a1cce5b278205d1aa8b0386cb" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3edb2404101ecf07ed861998b4a029fdffde857" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;POST&lt;/code&gt; request that interprets the body as an as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b99be82744dd378073f66e4b7c97962ac602f7" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1235d4b058347a55fb90fed94e459e7a014ba09" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b5392428552e3c8efb88251093c2bdbfba5d51" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba74799172ea8fcc067f636db902fd80a63cbea" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns an observable of the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca01bbee7247503c8ed6b402d209233876b14b1" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the full HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b44df6f74adf2927b103251d3acd57cefb019cd" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd26bb4f36e9f3d74c0083a4024dc81cab4d0b3" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d09f0b2e98042f496b98ff20dca620252b483b9" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text stream and returns the full HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863358fd573521107236693d767077976e59fa2b" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377246ad02c79bf2e4d51b4f8419d3ddeeafb681" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as a text string and returns the response as a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c0cd9a96668e8b3343fee0e252136c45340d24" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns an observable of the full HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1beb4560a375619148b6bd82dab41ae22771ac" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0d5617ed1d692d198b945c2d880bf92ea9bb23" translate="yes" xml:space="preserve">
          <source>Constructs a &lt;code&gt;PUT&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2f9b7c6872456661c302e7b127ee817109f69f" translate="yes" xml:space="preserve">
          <source>Constructs a DELETE request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fdf78c52ba12f844dc35ac6ac10fec8165d09d8" translate="yes" xml:space="preserve">
          <source>Constructs a POST request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f16550cba971f5543bee854b84b69167c02e12" translate="yes" xml:space="preserve">
          <source>Constructs a POST request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPresponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faca82d4645ac5209a169e17a54b5429d35b82f5" translate="yes" xml:space="preserve">
          <source>Constructs a new &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; from the given array of configurations, validators and options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f1a1329904af95fdafaf68a3286a1f491fb41e" translate="yes" xml:space="preserve">
          <source>Constructs a new HTTP header object with the given values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c7c42791c3ed6d93d51cd2e390649e3d52a08c" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f5145b1c07e56fcc5a94d8f45486317d521e44" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as a blob and returns the response as a blob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4c3f3a26fcbf5a54904048a00ea04e24b7829c" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as a text string and returns a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80832bf903757ba9e7a0204dc49d67b0e482a5dc" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response in an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d4aa3bbd4f5b076380c1ce5b2d9fc9aa237020" translate="yes" xml:space="preserve">
          <source>Constructs a request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a8388af3067eb92a40e42161e27adde33ad707" translate="yes" xml:space="preserve">
          <source>Constructs a request where response type and requested observable are not known statically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2e5129749ea1ac51e3940bcad6196f2e3f0d57" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c05e9b870c9e45179a8c60dd8a491ee6d879818" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt; as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd177b01d4106a11ace58c091c67fb2667e5e3e" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt; with the response body in the requested type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e239c478d8d610cfd7229cf417e18307e479fca9" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ca9e2cabc5e8cad7907af5722bad9b8c4841ae" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff310655babdbd12ef2099887de65800e95ad4a" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a JSON object with the response body of the requested type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d357b5fa671a3acf59792934174d67c5969e195" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe5633d3438abe9fc1598aad6c50f76be1c984b" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589ee8b3009a97edc2e105e386455f14a6ac6eaf" translate="yes" xml:space="preserve">
          <source>Constructs a request which interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211b45077edf145b2c1ab7a5658740f2629293f1" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f70f447bdb712016999ddd1f486a06582ad414a" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2191707361f8916dd245724c3fb5d2162f638c" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a &lt;code&gt;Blob&lt;/code&gt; and returns the response as a &lt;code&gt;Blob&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cb6838561e80e7628ba396368ee45ef8e2d8b2" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902129b5eca64cc2f16d81e1fc10e63df1bee3be" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7fdf047af3a8958038a757c74e1c63d9542aef" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the response body as a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b11290c8cfbb3b730421dfbca1d1cf02c66dd3e" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a JSON object and returns the response in a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a2a5ef838d241037e01caa8ee9f37a5af4e540" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a text string and returns a string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7f2fe48b89261fe52e259b2880964247765df8" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as a text string and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179fcc296f7004ba8fa6e08e127a0d3bc8fab23b" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef02beb6aacabe6634023a8cbc4f937cce1f3fdc" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the full event stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f638583ad8ec6239b9861a9997058059eefcb1b8" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as an &lt;code&gt;ArrayBuffer&lt;/code&gt; and returns the response as an &lt;code&gt;ArrayBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d7e2d2bd804f43e701c41db670762438d1e121" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;OPTIONS&lt;/code&gt; request that interprets the body as text stream and returns the full &lt;code&gt;HTTPResponse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf9d7353005581788d3e7598a8800407a55cf3e" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Observable&lt;/code&gt; that, when subscribed, causes a request with the special method &lt;code&gt;JSONP&lt;/code&gt; to be dispatched via the interceptor pipeline. The &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP pattern&lt;/a&gt; works around limitations of certain API endpoints that don't support newer, and preferable &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt; protocol. JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the requests even if the API endpoint is not located on the same domain (origin) as the client-side application making the request. The endpoint API must support JSONP callback for JSONP requests to work. The resource API returns the JSON response wrapped in a callback function. You can pass the callback function name as one of the query parameters. Note that JSONP requests can only be used with &lt;code&gt;GET&lt;/code&gt; requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d247830e912c20bc354ff04c22370298537dbd" translate="yes" xml:space="preserve">
          <source>Constructs an &lt;code&gt;Observable&lt;/code&gt; that, when subscribed, causes the configured &lt;code&gt;OPTIONS&lt;/code&gt; request to execute on the server. This method allows the client to determine the supported HTTP methods and other capabilites of an endpoint, without implying a resource action. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b5ebdc23ba0671b7d2b5bfdd6f880fcc5a4543" translate="yes" xml:space="preserve">
          <source>Constructs an observable for a generic HTTP request that, when subscribed, fires the request through the chain of registered interceptors and on to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1895b2612f30f28c01f0bc2082e2c07b7909c9" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;DELETE&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d806e1dcedcaa693d77cf017adc44b16c578330" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;GET&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71f7794dd42ec39f50c82779f160807bf91746a3" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;HEAD&lt;/code&gt; request to execute on the server. The &lt;code&gt;HEAD&lt;/code&gt; method returns meta information about the resource without transferring the resource itself. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ae6e3d51c8c3b5cc2d797d171f548c95c272af" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;PATCH&lt;/code&gt; request to execute on the server. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1a1c8aa44cdebcb48a20947d39495c036898ea" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;POST&lt;/code&gt; request to execute on the server. The server responds with the location of the replaced resource. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b596a81fbfe7be8f37ef25519b1c7cfdd896b547" translate="yes" xml:space="preserve">
          <source>Constructs an observable that, when subscribed, causes the configured &lt;code&gt;PUT&lt;/code&gt; request to execute on the server. The &lt;code&gt;PUT&lt;/code&gt; method replaces an existing resource with a new set of values. See the individual overloads for details on the return type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f261e39825bcaba86eb199bd75bc95a965046f" translate="yes" xml:space="preserve">
          <source>Consuming controls in a grouping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5921ce9b794517579875e899237be92946964b92" translate="yes" xml:space="preserve">
          <source>Contains a re-usable animation. See &lt;code&gt;&lt;a href=&quot;animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05469e3e34f048954fcfa8ac3ef87c944b1adfa" translate="yes" xml:space="preserve">
          <source>Contains a set of CSS property-value pairs into a named style. See &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9db0cfc91810c23685cf4af0b7fabd5592665d" translate="yes" xml:space="preserve">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;group&quot;&gt;group()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbb3cc83027338145bb5743b8785d8f12444f5a" translate="yes" xml:space="preserve">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619b3f5fbeae7c81c1f626c289ef61fe0f527a4b" translate="yes" xml:space="preserve">
          <source>Contains a set of animation steps. See &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac17a2d017d4488a0bb4df8f79eeed303020ae0" translate="yes" xml:space="preserve">
          <source>Contains all the &lt;a href=&quot;router#child-routing-component&quot;&gt;child routes&lt;/a&gt; activated under the current route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad51011dfba99d373a5435f05a6da9109da527b8" translate="yes" xml:space="preserve">
          <source>Contains an animation step. See &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadaa32099232d5dc3ba2a9025a9702c2d38ab0e" translate="yes" xml:space="preserve">
          <source>Contains an animation trigger. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c25e46166e889e0b68feb40f1111fd91225ff1" translate="yes" xml:space="preserve">
          <source>Contains an animation trigger. Instantiated and returned by the &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb6f63e05ffd985d9055b7076f337ba4c06f62d" translate="yes" xml:space="preserve">
          <source>Contains animation parameters for a re-usable animation. See &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff4adbdda17b5bf178e5e3fb064038ba273ce45" translate="yes" xml:space="preserve">
          <source>Contains build configuration options for particular target environments. By default there is an unnamed standard development environment and a production (&quot;prod&quot;) environment. You can define additional target environment configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab3ecf2264326072c36faae174b6f032dac8fbd3" translate="yes" xml:space="preserve">
          <source>Contains child-animation query data. See &lt;code&gt;&lt;a href=&quot;query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7da1e369d7c4399691bc55fea56917d1fe0acd" translate="yes" xml:space="preserve">
          <source>Contains data for staggering an animation sequence. See &lt;code&gt;&lt;a href=&quot;stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c761f47fc9cbfff9f17d454605795b06422010b6" translate="yes" xml:space="preserve">
          <source>Contains data to use in executing child animations returned by a query. See &lt;code&gt;&lt;a href=&quot;animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efceaeecd88f26fad7fc54f488fd3156edae1d13" translate="yes" xml:space="preserve">
          <source>Contains image and other asset files to be copied as-is when you build your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451c833683655ca4c54bfa816ff7243e17177730" translate="yes" xml:space="preserve">
          <source>Contains the component files in which your application logic and data are defined. See details &lt;a href=&quot;file-structure#app-src&quot;&gt;below&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3570af1ff9a0c0195985687f4d9fb49189b88a" translate="yes" xml:space="preserve">
          <source>Contains the first &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; in the list of this route's child routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2508437a48b549ece3f2976c0ec7536dde1129b" translate="yes" xml:space="preserve">
          <source>Contains the information about a route associated with a component loaded in an outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router state tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba27a67003af1668cdba1d05e81fca07794cf13" translate="yes" xml:space="preserve">
          <source>Contains the version of Angular to use for the documentation. If not provided, the command uses your current Angular core version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6673d15b94e89eb12696401bb24c2f3bdd46cbde" translate="yes" xml:space="preserve">
          <source>Contains your library project's logic and data. Like an application project, a library project can contain components, services, modules, directives, and pipes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237350064b8c3b0e11e70b93fd554306d2a4f39f" translate="yes" xml:space="preserve">
          <source>Content Security Policy (CSP) is a defense-in-depth technique to prevent XSS. To enable CSP, configure your web server to return an appropriate &lt;code&gt;Content-Security-Policy&lt;/code&gt; HTTP header. Read more about content security policy at &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;An Introduction to Content Security Policy&lt;/a&gt; on the HTML5Rocks website.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6202692206dad79a1b14d6088be61b681526178" translate="yes" xml:space="preserve">
          <source>Content projection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a019a50d07f41ea70df9c0821615ec4ff0dc202f" translate="yes" xml:space="preserve">
          <source>Content projection: yes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e05a83d745ac98da7773c2108efde552ef95257" translate="yes" xml:space="preserve">
          <source>Content queries are set before the &lt;code&gt;ngAfterContentInit&lt;/code&gt; callback is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132d57a8ba3715878400596fcd4e56d25812cdcb" translate="yes" xml:space="preserve">
          <source>Content queries are set before the &lt;code&gt;ngAfterContentInit&lt;/code&gt; callback is called. View queries are set before the &lt;code&gt;ngAfterViewInit&lt;/code&gt; callback is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61218e768de2538cdbdc58d958fa9e9d9945325e" translate="yes" xml:space="preserve">
          <source>Content security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5cbf363cbbce7cd02a96e382ca1a5a03a3865a" translate="yes" xml:space="preserve">
          <source>Content security policy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe6c28565cc3c25e091112f9228a8f6d49d056a" translate="yes" xml:space="preserve">
          <source>ContentChild</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e33e2fb56f68033efbded7c57f7a1bcd8a17c6" translate="yes" xml:space="preserve">
          <source>ContentChildren</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30dfef912c135ce3653ecd0049ab1a0d09975808" translate="yes" xml:space="preserve">
          <source>Context-dependant translation forms for strings. Typically the standalone version is for the nominative form of the word, and the format version is used for the genitive case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e639aff42d79ce7d04ac679b47d7888105a27b9c" translate="yes" xml:space="preserve">
          <source>Continue working in &lt;code&gt;cart.service.ts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d30ae3f1bb7f9fb155a5bf681d817c8c98d5be" translate="yes" xml:space="preserve">
          <source>Continuing with the same example, suppose the components of a module truly require a private, custom &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b994060af598c09bf8841e4b648fa4521474cd2" translate="yes" xml:space="preserve">
          <source>Contribute to Angular docs by creating &lt;a href=&quot;https://github.com/angular/angular/pulls&quot;&gt;pull requests&lt;/a&gt; on the Angular Github repository. See &lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md&quot;&gt;Contributing to Angular&lt;/a&gt; for information about submission guidelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d038e7e3efd3548f310850f15533c4258c0fb1" translate="yes" xml:space="preserve">
          <source>Control status CSS classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229ecc00162e04334fa4b4ccac6c92e3cb27952a" translate="yes" xml:space="preserve">
          <source>ControlContainer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="343d7cf91d2920daa7e4cf70ebe4169f5fbad163" translate="yes" xml:space="preserve">
          <source>ControlValueAccessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c704de049fa7f49d7e27a189c2f7435244863da7" translate="yes" xml:space="preserve">
          <source>Controller function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf31001eb1cfd639a6e756df156289b71c30f3e" translate="yes" xml:space="preserve">
          <source>Controller lifecycle hook methods &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onInit&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;$onDestroy()&lt;/code&gt;, and &lt;code&gt;$&lt;a href=&quot;upgrade&quot;&gt;onChanges&lt;/a&gt;()&lt;/code&gt; are another convenient feature that AngularJS 1.5 introduces. They all have nearly exact &lt;a href=&quot;lifecycle-hooks&quot;&gt;equivalents in Angular&lt;/a&gt;, so organizing component lifecycle logic around them will ease the eventual Angular upgrade process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a55898ba4d0c3606814215066c44fdde71f8efa" translate="yes" xml:space="preserve">
          <source>Controller registration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0568a8e25668de0a1132c1123479b554368dac" translate="yes" xml:space="preserve">
          <source>Controller to be injected into tests, that allows for mocking and flushing of requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c2b035771a9eb356524d9a56b916b77b9f7291" translate="yes" xml:space="preserve">
          <source>Controlling the &lt;em&gt;Submit&lt;/em&gt; button's enabled state by binding to &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; validity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a192682500970780576e3105c9ffd0bc6ec8ac" translate="yes" xml:space="preserve">
          <source>Controls the type check for linting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be77b92308e4d8d1f11ce842fbb550d826c3b78b" translate="yes" xml:space="preserve">
          <source>Convert that method to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b2a18414b957028b4f77b2246b6dc3ecee7517" translate="yes" xml:space="preserve">
          <source>Convert the phone detail component template into Angular syntax as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461a5706ccc3e456140291e61b965e6d8ccf1d72" translate="yes" xml:space="preserve">
          <source>Converting existing code for async operations into observables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078947d90aafa4b154394b9558fb454be3bdea6f" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; instance to a &lt;code&gt;&lt;a href=&quot;parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d29d83b162042524ce3f03b85cb9262c204f0e" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;router/params&quot;&gt;Params&lt;/a&gt;&lt;/code&gt; instance to a &lt;code&gt;&lt;a href=&quot;router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9993dde6f70ec00b27b0a3b88374796590de2ce3" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;&lt;a href=&quot;urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; into a url</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b6e9efdfda32b5cc193fd23ed3d6560b8ed92f" translate="yes" xml:space="preserve">
          <source>Converts a JavaScript object into a JSON string. This is useful for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf77768d6a39db93cdef5c7aa5d05d8ae44ccfc" translate="yes" xml:space="preserve">
          <source>Converts a value into its JSON-format representation. Useful for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b89863d56f5fa5231bd9ba6831296dcbd916d71" translate="yes" xml:space="preserve">
          <source>Converts the string to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a496e4dc738110449ee481338a94d58994d8e7f" translate="yes" xml:space="preserve">
          <source>Cookie name default is &lt;code&gt;XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decdd902fbecc98f23f54011ff264d9219f15f90" translate="yes" xml:space="preserve">
          <source>Copy &lt;em&gt;everything&lt;/em&gt; within the output folder (&lt;code&gt;dist/&lt;/code&gt; by default) to a folder on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96dfe6c055de09a0fe4ab8d1cd89274f9e0b328" translate="yes" xml:space="preserve">
          <source>Copy files from the starter Angular app into the folder containing the &lt;code&gt;.csproj&lt;/code&gt; file. Include the files in the Visual Studio project as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0c4cd2fc66e099007547c595d8fb3af64016d1" translate="yes" xml:space="preserve">
          <source>Copy the &lt;code&gt;hero-detail&lt;/code&gt; folder, the &lt;code&gt;hero.ts&lt;/code&gt;, &lt;code&gt;hero.service.ts&lt;/code&gt;, and &lt;code&gt;mock-heroes.ts&lt;/code&gt; files into the &lt;code&gt;heroes&lt;/code&gt; subfolder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e12febf5873dca574759667733b5e5e66e6ba98" translate="yes" xml:space="preserve">
          <source>Copy the &lt;code&gt;message.service.ts&lt;/code&gt; into the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc6a23cf0c8732b658ce947fd5dc5af75d63b93" translate="yes" xml:space="preserve">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.css&lt;/code&gt; from the live example into the &lt;code&gt;hero-list.component.css&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e21cb207ee7e3057d9095acd497da7ad01d4339" translate="yes" xml:space="preserve">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.html&lt;/code&gt; from the &lt;span name=&quot;toh-pt4&quot;&gt;&quot;Services&quot; tutorial&lt;/span&gt; into the &lt;code&gt;hero-list.component.html&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006748a2c8575f2736445cd6e1cb632b2d1c3f84" translate="yes" xml:space="preserve">
          <source>Copy the contents of the &lt;code&gt;heroes/heroes.component.ts&lt;/code&gt; from the live example into the &lt;code&gt;hero-list.component.ts&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e69777d644990a712d9156ccfe6d33b49e0d98" translate="yes" xml:space="preserve">
          <source>Copy the files and folders from &lt;code&gt;app/heroes&lt;/code&gt; into the new &lt;code&gt;crisis-center&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac16c8969e359f571689b91327c6dcf652187725" translate="yes" xml:space="preserve">
          <source>Copy this &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;, overriding its contents with the given parameter hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d8ecfd782a2f39dac14d8d6b51eb1f52ca13f6" translate="yes" xml:space="preserve">
          <source>Core AngularJS services Importing this &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; will add providers for the core &lt;a href=&quot;https://docs.angularjs.org/api/ng/service&quot;&gt;AngularJS services&lt;/a&gt; to the root injector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39220a429cf1bece1b687538bd0e0fc0b34e712" translate="yes" xml:space="preserve">
          <source>Correspondingly, when you upgrade an AngularJS component and use it from Angular, all the bindings defined for the component directive's &lt;code&gt;&lt;a href=&quot;../api/service-worker/swregistrationoptions#scope&quot;&gt;scope&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;bindToController&lt;/code&gt;) will be hooked into Angular change detection. They will be treated as regular Angular inputs. Their values will be written to the upgraded component's scope (or controller) when they change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee21c7732ceea657ba582876098e48649d633db" translate="yes" xml:space="preserve">
          <source>Could not resolve type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4018045cfb458b2734d2b09cf762c2567878c41" translate="yes" xml:space="preserve">
          <source>Counter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7570836d6154e29e2f406e09548419037760602" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;HeroSearchComponent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da63132d4553a2504164f54ad55c134cc4edc6ad" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;MessagesComponent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9376163183db8e23239d334e0ae6a7ea6411dd85" translate="yes" xml:space="preserve">
          <source>Create Angular components to display hero details and show an array of heroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5fe036d57773794e72a8d112d9907ead0619d8" translate="yes" xml:space="preserve">
          <source>Create a &quot;top component&quot; that acts as the root for all of the module's components. Add the custom &lt;code&gt;&lt;a href=&quot;../api/common/http/httpbackend&quot;&gt;HttpBackend&lt;/a&gt;&lt;/code&gt; provider to the top component's &lt;code&gt;providers&lt;/code&gt; list rather than the module's &lt;code&gt;providers&lt;/code&gt;. Recall that Angular creates a child injector for each component instance and populates the injector with the component's own providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0911b2990c85edee45f304d359a364bc6364bd" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5222191cefbcbf34292d4ccac4f8d3099452e0" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;platform-browser/statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that can be used to store value of type T with &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da12bfbf8cba36936cab8d5080627812d3bc5b9a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;&lt;a href=&quot;statekey&quot;&gt;StateKey&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; that can be used to store value of type T with &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33824bbdfa9db4cd33cb2cc28044b8bb7bd994f1" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;Hero&lt;/code&gt; class in its own file in the &lt;code&gt;src/app&lt;/code&gt; folder. Give it &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c71c09584ab2fa05b7a2f1d605f961915809721" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;HeroSearchComponent&lt;/code&gt; with the CLI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6845c0f15a7f2d03e5f9f62fa58801361ed5c80a" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;HeroesModule&lt;/code&gt; with routing in the heroes folder and register it with the root &lt;code&gt;AppModule&lt;/code&gt;. This is where you'll be implementing the &lt;em&gt;hero management&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17210801dfaf29924a75d1ab920c332968468da3" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;crisis-center&lt;/code&gt; subfolder in the &lt;code&gt;src/app&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1365a808082b38561ee0f9ea6407a8ea2c7915" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;files/&lt;/code&gt; folder inside the &lt;code&gt;schematics/my-service/&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a8b37194cd9a6ed4fef9b8e6ffb334c714f01f" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;schema.json&lt;/code&gt; file and define the available options for the schematic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7653907d1390a7958748cfad0de2f7e15929597c" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;schema.ts&lt;/code&gt; file and define an interface that stores the values of the options defined in the &lt;code&gt;schema.json&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fd7bd2de7171d715f1f538a385409bbedf60fd2" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;typings.d.ts&lt;/code&gt; file in your &lt;code&gt;src/&lt;/code&gt; folder. This file is automatically included as global type definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff616cbff238ee78c83cb4c2d5667f04727c2c70" translate="yes" xml:space="preserve">
          <source>Create a Hero class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7fd1d13091dc87fa2bc6cd7f30b4c62da30c2a" translate="yes" xml:space="preserve">
          <source>Create a cart component and set up routing to the new component. At this point, the cart page will only have default text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3c0796b0b271bbd7027cd5fd74cea722c3bd61" translate="yes" xml:space="preserve">
          <source>Create a component to render AngularJS content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb341a6339ef12f828a7d5f6c43fd81df5c13d1" translate="yes" xml:space="preserve">
          <source>Create a custom &lt;code&gt;&lt;a href=&quot;../api/router/route#matcher&quot;&gt;matcher&lt;/a&gt;&lt;/code&gt; function for AngularJS-specific URLs and configure the Angular &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; with the custom matcher for AngularJS routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c523f2d6f0ef5f2efd18e3076a9038458c296a55" translate="yes" xml:space="preserve">
          <source>Create a factory function that returns that instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2bb69920f627470e948635b846ad2f55548877" translate="yes" xml:space="preserve">
          <source>Create a feature module with routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3992d8892162bfa0ed8361ad16356d6012ed972d" translate="yes" xml:space="preserve">
          <source>Create a file &lt;code&gt;proxy.conf.json&lt;/code&gt; in your project's &lt;code&gt;src/&lt;/code&gt; folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ffd1d35c5f02ae42ec30c59609ce9da41df565" translate="yes" xml:space="preserve">
          <source>Create a file called &lt;code&gt;mock-heroes.ts&lt;/code&gt; in the &lt;code&gt;src/app/&lt;/code&gt; folder. Define a &lt;code&gt;HEROES&lt;/code&gt; constant as an array of ten heroes and export it. The file should look like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69732bba9870de84d675267cbe1cf4d45f861919" translate="yes" xml:space="preserve">
          <source>Create a file named &lt;code&gt;__name@dasherize__.service.ts.template&lt;/code&gt; that defines a template you can use for generating files. This template will generate a service that already has Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; injected into its constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e4fd9e90f6b4cd021df9e4dfcbb8d302140ea2" translate="yes" xml:space="preserve">
          <source>Create a file named &lt;code&gt;builders.json&lt;/code&gt; file that looks like this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a3216de4a1d482ff94f06e3f6620f72a039129" translate="yes" xml:space="preserve">
          <source>Create a form array with array-level validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96a11ccc1a7f7f1033388de141e67f8a7692bf0" translate="yes" xml:space="preserve">
          <source>Create a form component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c779731b129ec9a1f0f54ba194f30d8bf6d9a3b" translate="yes" xml:space="preserve">
          <source>Create a form group with 2 controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31a843ccda278265868ae591babbbbffa0aaec9" translate="yes" xml:space="preserve">
          <source>Create a form group with a group-level validator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8349529ff67aeb3fe069d4c4eaa3d215f2841f84" translate="yes" xml:space="preserve">
          <source>Create a function to retrieve the heroes from the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa54a2c7f2ebf4339e64d173a825d3b05732eab" translate="yes" xml:space="preserve">
          <source>Create a localization folder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64438b98d4f21e3d55b771cbac8f715217ae08d" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; with the given parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78efc26fbc9687ec57888c9bb37b7f4b34c26875" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; instance. You should not normally need to do this. Instead you should derive a new class from this one and call the super constructor from the base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a46de9f6729bf067c43047c43ae56c3aae4a7e7" translate="yes" xml:space="preserve">
          <source>Create a new Angular CLI workspace using the &lt;a href=&quot;https://angular.io/start/cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380217cd2bc441b341d7dabe2374197b8ed3e719" translate="yes" xml:space="preserve">
          <source>Create a new Injector which is configure using &lt;code&gt;&lt;a href=&quot;staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b9c46559c7dd10c68eb2430214ec17d7126c85" translate="yes" xml:space="preserve">
          <source>Create a new file, &lt;code&gt;tsconfig-es5.spec.json&lt;/code&gt; next to &lt;code&gt;tsconfig.spec.json&lt;/code&gt; with the following content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ee4f0cae672b78fd7e5b509ff749d4be5d8a16" translate="yes" xml:space="preserve">
          <source>Create a new product alerts component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325cf797263cfffdce479b5e173823121f9d4d73" translate="yes" xml:space="preserve">
          <source>Create a new project</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5248aa9278aa812df34236f34bfb64a599867920" translate="yes" xml:space="preserve">
          <source>Create a new project named &lt;code&gt;angular-forms&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fc5f1c2569e6cb934fdcbd8926b0aea6127a7e7" translate="yes" xml:space="preserve">
          <source>Create a new project, giving it any name you like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b6f7cb2d362348a78391179b8ff8adbe19ae679" translate="yes" xml:space="preserve">
          <source>Create a new workspace and an initial application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afd136a424f288c44a26af64d8ab3faed2ff799" translate="yes" xml:space="preserve">
          <source>Create a new workspace and initial app project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1fe121a8217214148d3bcf1b9368c81c062807" translate="yes" xml:space="preserve">
          <source>Create a property in the component class named &lt;code&gt;profileForm&lt;/code&gt; and set the property to a new form group instance. To initialize the form group, provide the constructor with an object of named keys mapped to their control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccecb770b3d91f132f45bd90c77041c30154648" translate="yes" xml:space="preserve">
          <source>Create a routable component for AngularJS content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b4c2964b7e843bca61619451307961ed2ded49" translate="yes" xml:space="preserve">
          <source>Create a service that lazy loads and bootstraps your AngularJS app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bdfa1b1cdec9562cbda972de4cad92bbe26fc5" translate="yes" xml:space="preserve">
          <source>Create a service to lazy load AngularJS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="289c9e1ad69aa92c9ace5d2ee7c3bdfd5e926d60" translate="yes" xml:space="preserve">
          <source>Create a shared service to assemble the heroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2351297a3e386ea193139a04f7279b11dad0025e" translate="yes" xml:space="preserve">
          <source>Create a static method &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; on the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a04964f1c5e0d871805d925f133724b75e3819c" translate="yes" xml:space="preserve">
          <source>Create a template with the initial form layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcd448777d61181ebde74f3b1dbf8d75ef3f0b6" translate="yes" xml:space="preserve">
          <source>Create a translation file: Use the Angular CLI &lt;code&gt;xi18n&lt;/code&gt; command to extract the marked text into an industry-standard translation source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5baf3cac85465507f34ecd0fca31009f61bda43b" translate="yes" xml:space="preserve">
          <source>Create a translation source file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fe13715c442caee7511e2ad6d5f07636523a48" translate="yes" xml:space="preserve">
          <source>Create an &lt;a href=&quot;deployment#configuring-serve-for-es5&quot;&gt;ES5 serve configuration&lt;/a&gt; as explained above, and configuration an ES5 configuration for the E2E target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="028aa78227ee6a6c789b49247eb2726d759154ab" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;AppRouting&lt;/code&gt; module in the &lt;code&gt;/app&lt;/code&gt; folder to contain the routing configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d287260e0fdc0dcca4bec41b7d0e73c535afaf" translate="yes" xml:space="preserve">
          <source>Create an &lt;code&gt;animations.ts&lt;/code&gt; file in the root &lt;code&gt;src/app/&lt;/code&gt; folder. The contents look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c771f4fa8c1303411b2989c7ec0ecfd845266d4e" translate="yes" xml:space="preserve">
          <source>Create an array of form controls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a120814121d988e4c710394df55d52945567c179" translate="yes" xml:space="preserve">
          <source>Create an initial HTML form template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e14e01f44a8e4033e50fdca7caa0554a8c69c1" translate="yes" xml:space="preserve">
          <source>Create an injectable service class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a67433070c190604f306f05455b8778943324e" translate="yes" xml:space="preserve">
          <source>Create an injection token for an instance of the ambient type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3f0fe233aa778aa76ea5dae93999776ae70d48" translate="yes" xml:space="preserve">
          <source>Create an instance by invoking the &lt;code&gt;new&lt;/code&gt; operator and supplying additional arguments. This form is a short form of &lt;code&gt;&lt;a href=&quot;typeprovider&quot;&gt;TypeProvider&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b222ce3ce34cbe2c058a214917ed1a3f5416dc" translate="yes" xml:space="preserve">
          <source>Create an instance of a component of type &lt;code&gt;T&lt;/code&gt; based on the current &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration. After calling &lt;code&gt;compileComponent&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad92015ad7f4f4f784b8261d606ff16ad76df686" translate="yes" xml:space="preserve">
          <source>Create and register an injectable service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2cfd9c584dadfe8ded7f9bfc6f0127dc27a3cb7" translate="yes" xml:space="preserve">
          <source>Create corresponding translation providers for the JIT compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d78cab03508298b6394500ff143a4ce920f1fe8" translate="yes" xml:space="preserve">
          <source>Create custom validators and input elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc63713ba8febf462717ec5962af4e913e424da" translate="yes" xml:space="preserve">
          <source>Create mock heroes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f481fe418f6a86292f6a24415f5606049d07a7" translate="yes" xml:space="preserve">
          <source>Create reusable animations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b13d67ee451c85d72b12d7fed79afe9f2123ba" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;Hero&lt;/code&gt; model class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6c222726d757393261bf16b1c2a79df66bfed7" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f3283d735b1d144cc0f99ad0d254cbfe035065" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;MessageService&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada89949412585d9e7c1136054d118223a5d0b4c" translate="yes" xml:space="preserve">
          <source>Create the &lt;code&gt;PageNotFoundComponent&lt;/code&gt; to display when users visit invalid URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172a4c3b0ec11bc59cd589335fc6303ab44ee4ae" translate="yes" xml:space="preserve">
          <source>Create the &lt;em&gt;Routing Module&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da675249097ef52e40ae720707f5a7b94684a800" translate="yes" xml:space="preserve">
          <source>Create the ASP.NET 4.x project in the usual way as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d21b04456ab21aa92e8f2845d72a4cbfeb6b23" translate="yes" xml:space="preserve">
          <source>Create the Hero model class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2452645fe3a4ccd04b9ca32f2a950631d3598e61" translate="yes" xml:space="preserve">
          <source>Create the cart page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4dd7fe4f4f5e851ad992b436f57ba5de1dc1c9" translate="yes" xml:space="preserve">
          <source>Create the checkout form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ff72f4f3c8b91ef4c89715e795b00cc3d2d5e1" translate="yes" xml:space="preserve">
          <source>Create the component that controls the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10035e89e8d4f31dd3e423e7d84cb7cc1782c8c" translate="yes" xml:space="preserve">
          <source>Create the directive class file in a terminal window with the CLI command &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate directive&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c755355358c6f60194f94dff700393523f07e5b4" translate="yes" xml:space="preserve">
          <source>Create the feature module with the CLI, using the &lt;code&gt;--route&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b642d44edff5ee83ad4bfe6b09f6e34711c193f" translate="yes" xml:space="preserve">
          <source>Create the feature module&amp;rsquo;s component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313ba270b7a9c190b1c190d7d84c2a206514a6ab" translate="yes" xml:space="preserve">
          <source>Create the heroes component</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5c35b2cb11b55d12aa2d98b7a0f1aea4eaef61" translate="yes" xml:space="preserve">
          <source>Create the initial Bazel configuration files by running the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c3cdf1c844d3db6a269727dd35b1b2669fffd03" translate="yes" xml:space="preserve">
          <source>Create the main file, &lt;code&gt;index.ts&lt;/code&gt; and add the source code for your schematic factory function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658a7f9024e9c73ccabe751982901d6d4924e575" translate="yes" xml:space="preserve">
          <source>Create the main file, &lt;code&gt;index.ts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53254f7fb49a06ca530fbd59f0f4f685065ab168" translate="yes" xml:space="preserve">
          <source>Create the shopping cart service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65fa03331046adf1f90a172897e6a189676d1aa" translate="yes" xml:space="preserve">
          <source>Create the translation files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631ced2ba2c2f7187c709f53e2a55495fa82e49d" translate="yes" xml:space="preserve">
          <source>Create trace scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347617d306b391c7a5529223aa0bf45ed4268eff" translate="yes" xml:space="preserve">
          <source>Create your custom renderer using &lt;code&gt;&lt;a href=&quot;rendererfactory2&quot;&gt;RendererFactory2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc717190186e3ee44cd32129c62e0deba59b07df" translate="yes" xml:space="preserve">
          <source>Creates a &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; and attaches it to a given HTML element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6530e3441dce3f9ee236ed544557b7007cf2e1f" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance from a domain model and binds it to a form control element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caae2a71e30d7d7b7b9727c56659985439b5bd05" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance from a domain model and binds it to a form control element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0cd9f72328ab86c66b5fcd62c3ef99cf3da6eb" translate="yes" xml:space="preserve">
          <source>Creates a child injector from previously resolved providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef3971537b3f0a1dde1128e255f52d415265611" translate="yes" xml:space="preserve">
          <source>Creates a custom element class based on an Angular component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d72128265d04963c687f715964b2a2d13bcad5" translate="yes" xml:space="preserve">
          <source>Creates a directory &lt;code&gt;src/app/hero-detail&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d9883ebf4a7b06ec424ffe070d29aca9b5d2ea" translate="yes" xml:space="preserve">
          <source>Creates a factory for a platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b2ab3fe3f2aa6f449308649563df0b4c724003" translate="yes" xml:space="preserve">
          <source>Creates a link to a different view based on a route instruction consisting of a route path, required and optional parameters, query parameters, and a fragment. To navigate to a root route, use the &lt;code&gt;/&lt;/code&gt; prefix; for a child route, use the &lt;code&gt;./&lt;/code&gt;prefix; for a sibling or parent, use the &lt;code&gt;../&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a084a9515c51a254bece9083e3958b5aaaa0d6d" translate="yes" xml:space="preserve">
          <source>Creates a local variable &lt;code&gt;movieplayer&lt;/code&gt; that provides access to the &lt;code&gt;video&lt;/code&gt; element instance in data-binding and event-binding expressions in the current template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71801c6c1100db5ff200cf005463064053764345" translate="yes" xml:space="preserve">
          <source>Creates a module with all the router directives and a provider registering routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180a05c153eaeb2a0b36ac47d5c4868c47babf27" translate="yes" xml:space="preserve">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="411673ac1b73f98373de35f525ceaa2303a5bf06" translate="yes" xml:space="preserve">
          <source>Creates a named animation trigger, containing a list of &lt;code&gt;&lt;a href=&quot;common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; entries to be evaluated when the expression bound to the trigger changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9417e5b45d0789e51adb54752a793fce271faf" translate="yes" xml:space="preserve">
          <source>Creates a named set of CSS styles that should be applied on successful transition to a given state. The state can then be referenced by name within other animation functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198dc08c4d8d1323300a4a6314f67f468b5e290d" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36efdd5c1e89e4e8486865cfcc0c4b03c4ef9807" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513102355274ffbdb1d07ac37091bb21593c9c07" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620859ab54ea93c6e79f9cce56c1578e49659d14" translate="yes" xml:space="preserve">
          <source>Creates a new &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; containing a subset (slice) of the elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f86dc1f9780df941519cd1825f2191b9809ccb" translate="yes" xml:space="preserve">
          <source>Creates a new component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70706f2ce6e47532c5017273998404c708cf089b" translate="yes" xml:space="preserve">
          <source>Creates a new generic NgModule definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e059ae3355a021d82deb57042a27f7a22f2488" translate="yes" xml:space="preserve">
          <source>Creates a new generic class definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270f66a0fff8aec92d1637e16671375a0130bfc5" translate="yes" xml:space="preserve">
          <source>Creates a new generic component definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4fbaedc160c88240b887c836f9ce4389155aa8" translate="yes" xml:space="preserve">
          <source>Creates a new generic directive definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c090794369bff4b38077b04ac3105611a43813f9" translate="yes" xml:space="preserve">
          <source>Creates a new generic interface definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c261bc76e1d49e6a376b5b0e9970a8a6e07c39c7" translate="yes" xml:space="preserve">
          <source>Creates a new generic library project in the current workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1165df6f1761dae40a299c78803074c1c8ff81e" translate="yes" xml:space="preserve">
          <source>Creates a new generic pipe definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687a19289fa64892e6372f943a0a5962cc751bb9" translate="yes" xml:space="preserve">
          <source>Creates a new generic web worker definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0b3666b69dc3cde5cdbcd719fa9954c4463ffa" translate="yes" xml:space="preserve">
          <source>Creates a new instance to be used for an NgElement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1674518b44797b3525bd3df00fe3390305b3a762" translate="yes" xml:space="preserve">
          <source>Creates a new workspace and an initial Angular app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4493cf2530477a8d9f2b3b99bb6d434e7a752446" translate="yes" xml:space="preserve">
          <source>Creates a new, generic service definition in the given or default project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c88e36bcbb813904eea93e54bc229477870576" translate="yes" xml:space="preserve">
          <source>Creates a platform. Platforms have to be eagerly created via this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e110ec18dd00af8cd8c8b81aa579638616fd5bd" translate="yes" xml:space="preserve">
          <source>Creates a token that can be used in a DI Provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1cb9f9b7d7a285afa951e0d3b69ae30cb6d1d3" translate="yes" xml:space="preserve">
          <source>Creates a top-level &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance and binds it to a form to track aggregate form value and validation status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85546e51ba807f1eec5d5543507cfa7164240c3" translate="yes" xml:space="preserve">
          <source>Creates a top-level &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance and binds it to a form to track aggregate form value and validation status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1255a201b85cbe7e5e7a9b06511c881f3d5a6859" translate="yes" xml:space="preserve">
          <source>Creates a view that is rendered when no &lt;code&gt;&lt;a href=&quot;common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; expressions match the &lt;code&gt;&lt;a href=&quot;common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; expression. This statement should be the final case in an &lt;code&gt;&lt;a href=&quot;common/ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab35173cc85b7c0674c27b38510f7f958357ce4" translate="yes" xml:space="preserve">
          <source>Creates a view that is rendered when no &lt;code&gt;&lt;a href=&quot;ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; expressions match the &lt;code&gt;&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt; expression. This statement should be the final case in an &lt;code&gt;&lt;a href=&quot;ngswitch&quot;&gt;NgSwitch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18eee2a93e4477b6c57c10963771d662097ca69" translate="yes" xml:space="preserve">
          <source>Creates a view that will be added/removed from the parent &lt;a href=&quot;common/ngplural&quot;&gt;&lt;code&gt;NgPlural&lt;/code&gt;&lt;/a&gt; when the given expression matches the plural expression according to CLDR rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90e5aa9022d0dee8df0b0b02bc152f53c9816158" translate="yes" xml:space="preserve">
          <source>Creates a view that will be added/removed from the parent &lt;a href=&quot;ngplural&quot;&gt;&lt;code&gt;NgPlural&lt;/code&gt;&lt;/a&gt; when the given expression matches the plural expression according to CLDR rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e46c132859b91b6355f645651049663e1181ea1" translate="yes" xml:space="preserve">
          <source>Creates a wrapped value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6c9ac0cfe99a12b62a32c54a59aa29028d9d13" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; from a user-specified configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15338d7983963dcad284f0d0d3fa9bab224ad9a6" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;animationplayer&quot;&gt;AnimationPlayer&lt;/a&gt;&lt;/code&gt; instance for the reusable animation defined by the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method that created this factory. Attaches the new player a DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef233eee832b956acc0fde12db7e7f805a7b5025" translate="yes" xml:space="preserve">
          <source>Creates an &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; from a user-specified configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2acaa5a30d6eeaec1c7ee23cf865f129cdaea395" translate="yes" xml:space="preserve">
          <source>Creates an initializer that sets up &lt;code&gt;ngRoute&lt;/code&gt; integration along with setting up the Angular router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7518ebe8d61d9da60cef10cb3c8780f14a62ff35" translate="yes" xml:space="preserve">
          <source>Creates an injector from previously resolved providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ec21a51c9e34599ae4575b55ae5b4599a696af" translate="yes" xml:space="preserve">
          <source>Creates an instance of an &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; for a given platform using the given runtime compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090b8dbc9d029131a07b9444bab5148373f0f7ff" translate="yes" xml:space="preserve">
          <source>Creates an instance of an &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; for the given platform for offline compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b980f5409603a22ecf3676266dcc84080b7b4f00" translate="yes" xml:space="preserve">
          <source>Creates an instance of this class that can deliver events synchronously or asynchronously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6216dd2c4fe1c3c1a551822d229462456b73c31" translate="yes" xml:space="preserve">
          <source>Creates and binds a &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23397f8aca5a31a9be2eee05077daf1df88fe48" translate="yes" xml:space="preserve">
          <source>Creates and binds a &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; instance to a DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35f589fc2c6d459da93a0cf721088c19ee1ffd35" translate="yes" xml:space="preserve">
          <source>Creates and configures a module with all the router providers and directives. Optionally sets up an application listener to perform an initial navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c871bdae0434bd52b442db612e31edc75afc82" translate="yes" xml:space="preserve">
          <source>Creates and initializes a custom renderer for a host DOM element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e739492e303a6dc2b215156c6338f21bd2ea8d" translate="yes" xml:space="preserve">
          <source>Creates and initializes a custom renderer that implements the &lt;code&gt;&lt;a href=&quot;core/renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140841381add619cdb8d3e4d4e5da42607ff0b91" translate="yes" xml:space="preserve">
          <source>Creates and initializes a custom renderer that implements the &lt;code&gt;&lt;a href=&quot;renderer2&quot;&gt;Renderer2&lt;/a&gt;&lt;/code&gt; base class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="653f46ba9805561598374edfae9550c119bf3d02" translate="yes" xml:space="preserve">
          <source>Creates and initializes a new Angular app that is the default project for a new workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba561ab2c4f07e4c2409fcd26324dc01f653d3f5" translate="yes" xml:space="preserve">
          <source>Creates the router service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcfaea570f4e205f054a7227e74c586a508d9e3" translate="yes" xml:space="preserve">
          <source>Creates the service worker configuration file called &lt;a href=&quot;service-worker-config&quot;&gt;&lt;code&gt;ngsw-config.json&lt;/code&gt;&lt;/a&gt;, which specifies the caching behaviors and other settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f3c73d71b76e9015e6075bb21802e36920b4f3" translate="yes" xml:space="preserve">
          <source>Creating Libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4561116d51d14b2cb8eb4093169010893927207d" translate="yes" xml:space="preserve">
          <source>Creating a PWA with Angular CLI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932747dc8773a5a7c360d70edad53a1d6419196c" translate="yes" xml:space="preserve">
          <source>Creating a builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565548b72f2d4dbf2aa8bb9383516f26f568cb72" translate="yes" xml:space="preserve">
          <source>Creating a class for the data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91c40eee2e65613c2e4c3f65111f4ebde138624" translate="yes" xml:space="preserve">
          <source>Creating a directive is similar to creating a component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b6b7f18d181ef2637b7dc14ddeca81e37c5f6b" translate="yes" xml:space="preserve">
          <source>Creating a schematics collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677d95c3cbc2b8152f7dd55e45923a7267ba4303" translate="yes" xml:space="preserve">
          <source>Creating form control instances manually can become repetitive when dealing with multiple forms. The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service provides convenient methods for generating controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490dddbf7619317089d285620a37e7072b4340df" translate="yes" xml:space="preserve">
          <source>Creating libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db741cba2f274a4f1cbf4c6cb0ef3b78d1d8ac09" translate="yes" xml:space="preserve">
          <source>Creating multiple language versions of your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40fb5424318bad5377653fe3039ce09e1e86600f" translate="yes" xml:space="preserve">
          <source>Creating nested form groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841d9f0c9f2649a35f996b8772fef3210b7ca451" translate="yes" xml:space="preserve">
          <source>Creating observables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abbf7bb727236a3929eb0179330931778fbb36a5" translate="yes" xml:space="preserve">
          <source>Creating reusable animations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d007397faaabddd2cd03bea65e3c36bff70353" translate="yes" xml:space="preserve">
          <source>Creating shared modules allows you to organize and streamline your code. You can put commonly used directives, pipes, and components into one module and then import just that module wherever you need it in other parts of your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d44a291073418ab2cbe02afbe51c1a63c022cd0f" translate="yes" xml:space="preserve">
          <source>Creating the &lt;code&gt;AppModule&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d512d2cd082ede0e253017cddc5f329df65818c" translate="yes" xml:space="preserve">
          <source>Creating the &lt;code&gt;TestHostComponent&lt;/code&gt; has the side-effect of creating a &lt;code&gt;DashboardHeroComponent&lt;/code&gt; because the latter appears within the template of the former. The query for the hero element (&lt;code&gt;heroEl&lt;/code&gt;) still finds it in the test DOM, albeit at greater depth in the element tree than before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ecaa9e34716f3dd9747a34a65d8ee87cc2dbcd" translate="yes" xml:space="preserve">
          <source>Creating tree-shakable providers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e13e0554f557ba882751e261b5a60777b337bea6" translate="yes" xml:space="preserve">
          <source>Creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34348d8cce4ac0baa516ee80df859140d319afcc" translate="yes" xml:space="preserve">
          <source>Creation &amp;amp; cancellation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30c0fc771771dfd33b2021ddcd6bd3d87471b38" translate="yes" xml:space="preserve">
          <source>Creation and subscription</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67500d2a6e793e214a0cd4e1e0df35431ac81e4d" translate="yes" xml:space="preserve">
          <source>Creation of an Angular directive that wraps and exposes an AngularJS component so that it can be used in an Angular template. See &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7af9d9b0dcb49613daac413f4d5e07d0db47b5" translate="yes" xml:space="preserve">
          <source>Creation of an Angular root injector provider that wraps and exposes an AngularJS service so that it can be injected into an Angular context. See &lt;a href=&quot;upgrademodule#upgrading-an-angular-1-service&quot;&gt;Upgrading an AngularJS service&lt;/a&gt; below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30022562cf3aa58562e0f91c6669dd67bcbe50e0" translate="yes" xml:space="preserve">
          <source>Creation of an AngularJS directive that wraps and exposes an Angular component so that it can be used in an AngularJS template. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6caf540e7d0dece81d99619f671f99deba1c1dc" translate="yes" xml:space="preserve">
          <source>Creation of an AngularJS service that wraps and exposes an Angular injectable so that it can be injected into an AngularJS context. See &lt;code&gt;&lt;a href=&quot;downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965bd2d1ae3af9196cbb57387e0b08e1b5ae7b16" translate="yes" xml:space="preserve">
          <source>Critical runtime parts of the framework that are needed by every application. Includes all metadata decorators, &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, dependency injection, and the component lifecycle hooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad515d4bcaf8e4561615026166d203743fcb329" translate="yes" xml:space="preserve">
          <source>Cross field validation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f699a272acbf0ee5228697bde033ed84c6bc8ec" translate="yes" xml:space="preserve">
          <source>Cross-site request forgery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cd6a44bde0b5557b7ee1be6171e19c7b1cf41a" translate="yes" xml:space="preserve">
          <source>Cross-site script inclusion (XSSI)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9599a8d86f93531a87bed7500ddb51c3a1759842" translate="yes" xml:space="preserve">
          <source>Cross-site script inclusion, also known as JSON vulnerability, can allow an attacker's website to read data from a JSON API. The attack works on older browsers by overriding native JavaScript object constructors, and then including an API URL using a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c3233734c863797885ddae5b2434bc49094fce" translate="yes" xml:space="preserve">
          <source>CurrencyPipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cdbe8af0f2d035eeafa0a86020e3dfc42012d5" translate="yes" xml:space="preserve">
          <source>Current index of the item in &lt;code&gt;Iterable&lt;/code&gt; or null if removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040896c6a7b6a938ef18df5e030e5f6c531497ca" translate="yes" xml:space="preserve">
          <source>Current key in the Map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f623428491a00250f9cc3b6f826771ec45769cc" translate="yes" xml:space="preserve">
          <source>Current value for the key or &lt;code&gt;null&lt;/code&gt; if removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d111a7c81ec43cd07010bc5176f26f471a1fd12" translate="yes" xml:space="preserve">
          <source>Currently every route within the &lt;em&gt;Crisis Center&lt;/em&gt; is open to everyone. The new &lt;em&gt;admin&lt;/em&gt; feature should be accessible only to authenticated users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc2a59fbb94224120c7fedff472f15e58fd71b8" translate="yes" xml:space="preserve">
          <source>Currently the highlight color is hard-coded &lt;em&gt;within&lt;/em&gt; the directive. That's inflexible. In this section, you give the developer the power to set the highlight color while applying the directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980bc6bb8d334793aeecaded2d1ba80e27ea7147" translate="yes" xml:space="preserve">
          <source>Currently, &lt;code&gt;appHighlight&lt;/code&gt; simply sets an element color. The directive could be more dynamic. It could detect when the user mouses into or out of the element and respond by setting or clearing the highlight color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8dd226d2053a8d92cfdc2d0bb11b5673cc40983" translate="yes" xml:space="preserve">
          <source>Currently, the example app has three components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d2520a734e72a55fc240a11feb85a5158026de" translate="yes" xml:space="preserve">
          <source>Currently, the product list displays the name and description of each product. The product list component also defines a &lt;code&gt;products&lt;/code&gt; property that contains imported data for each product from the &lt;code&gt;products&lt;/code&gt; array in &lt;code&gt;products.ts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb33c66e798683bba0aa43e42df78485ac28c18" translate="yes" xml:space="preserve">
          <source>Currently, you have a list in the component template. To click on a hero on the list and reveal details about that hero, you need a section for the details to render in the template. Add the following to &lt;code&gt;heroes.component.html&lt;/code&gt; beneath the list section:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e58e551f42abbc9350cbd4eeb67b3b8e230a9e" translate="yes" xml:space="preserve">
          <source>Custom &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; like directives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ad3f3ccecb1834e96f03ea6336377a42fc2d0f" translate="yes" xml:space="preserve">
          <source>Custom CSS classes that provide visual feedback to users about invalid controls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27b89680d5547c404b628f384b487362b72e24f" translate="yes" xml:space="preserve">
          <source>Custom Element Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2d7934134bd64cca0c496d6f273c06c5f9cf2d" translate="yes" xml:space="preserve">
          <source>Custom Preloading Strategy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4925e78411919d28a64fbef614750df564eeeb31" translate="yes" xml:space="preserve">
          <source>Custom async validators are similar to sync validators, but they must instead return a Promise or Observable that later emits null or a validation error object. In the case of an Observable, the Observable must complete, at which point the form uses the last value emitted for validation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07d2ad69feb471ec3e608dbbb3bbdef03faf935" translate="yes" xml:space="preserve">
          <source>Custom elements bootstrap themselves - they start automatically when they are added to the DOM, and are automatically destroyed when removed from the DOM. Once a custom element is added to the DOM for any page, it looks and behaves like any other HTML element, and does not require any special knowledge of Angular terms or usage conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36127018e280d4e568b6b50f5066539d9a8cb054" translate="yes" xml:space="preserve">
          <source>Custom elements created with Angular extend &lt;code&gt;&lt;a href=&quot;../api/elements/ngelement&quot;&gt;NgElement&lt;/a&gt;&lt;/code&gt; (which in turn extends &lt;code&gt;HTMLElement&lt;/code&gt;). Additionally, these custom elements will have a property for each input of the corresponding component. For example, our &lt;code&gt;popup-element&lt;/code&gt; will have a &lt;code&gt;&lt;a href=&quot;../api/common/http/httperrorresponse#message&quot;&gt;message&lt;/a&gt;&lt;/code&gt; property of type &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e25196231f2ca6d3a38c2024a26e038af8d47e9" translate="yes" xml:space="preserve">
          <source>Custom events with &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ad348dcac39a32a6a5638a3873a439c5f5bb48" translate="yes" xml:space="preserve">
          <source>Custom format options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99e79089d5ca26db3d9e79c453e6fccb307304f" translate="yes" xml:space="preserve">
          <source>Custom label and tooltip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8841c28e5e05a4f2d9a63656ff35a449a9e517b3" translate="yes" xml:space="preserve">
          <source>Custom pipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9753d61a00b71a9de4d313849d6f03fec44dcfc6" translate="yes" xml:space="preserve">
          <source>Custom request expectations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e9a26c0379f888d5dd3bc76c8b05fdca69be77a" translate="yes" xml:space="preserve">
          <source>Custom validators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dbb45e0847c56bb6165a138a2a34e6ae7548974" translate="yes" xml:space="preserve">
          <source>Customized injector/content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7558cff59aa1d2fb0e734c8c70a3466ecc817b" translate="yes" xml:space="preserve">
          <source>Customized ngModuleFactory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52729454cd00750a4b461768779981a441da771" translate="yes" xml:space="preserve">
          <source>Customizing &lt;code&gt;BUILD.bazel&lt;/code&gt; files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d237b6d6ebfb9c121d73b028643a81c53f9434c" translate="yes" xml:space="preserve">
          <source>Customizing option selection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094978cd66bc5d8725b9fdce0785fb623f56940d" translate="yes" xml:space="preserve">
          <source>Cut the HTML for the hero detail from the bottom of the &lt;code&gt;HeroesComponent&lt;/code&gt; template and paste it over the generated boilerplate in the &lt;code&gt;HeroDetailComponent&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ceecbea9d37250860e1b3086c61f32787e7e837" translate="yes" xml:space="preserve">
          <source>DESCRIPTION</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10de7b822efc6f19f529f58479795f52f902679" translate="yes" xml:space="preserve">
          <source>DI is wired into the Angular framework and used everywhere to provide new components with the services or other things they need. Components consume services; that is, you can &lt;em&gt;inject&lt;/em&gt; a service into a component, giving the component access to that service class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74759e7095bb98c889444c3ae3740b1870451363" translate="yes" xml:space="preserve">
          <source>DI token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b2f0524fe19d0b4fd5fd7ef57f39d3449c9cf53" translate="yes" xml:space="preserve">
          <source>DI token for providing &lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt; support to Angular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a812d80dec5127459b8bbbfdf1e22f80bb56765" translate="yes" xml:space="preserve">
          <source>DOCUMENT</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c3feb8fa129e3517d7f4e33e0f321b871c65ad" translate="yes" xml:space="preserve">
          <source>DOM events carry a payload of information that may be useful to the component. This section shows how to bind to the &lt;code&gt;keyup&lt;/code&gt; event of an input box to get the user's input after each keystroke.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e429bcc9c2e4a41a3c7a4d96203be6cb273b11" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e16684c1ce279006d9578074b0720bf46a86d49" translate="yes" xml:space="preserve">
          <source>Data Services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c7495fb4f75bec8a9dc62511d677ae31c74cad" translate="yes" xml:space="preserve">
          <source>Data Value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1897722a3a069b2a0505b9bdd9dd28837d6d1b7b" translate="yes" xml:space="preserve">
          <source>Data binding plays an important role in communication between a template and its component, and is also important for communication between parent and child components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cba10ee7651acd77417bf01e46c8d27f5d70e7" translate="yes" xml:space="preserve">
          <source>Data bound properties must also be public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751873768a508a89953ce185eccc8e38d8483976" translate="yes" xml:space="preserve">
          <source>Data flow in forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc3d60f53202cd02a2955630e8818fd52876d30" translate="yes" xml:space="preserve">
          <source>Data flow in reactive forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39f2164fca1d60e85028e0ffd46bbe82f0bc11c" translate="yes" xml:space="preserve">
          <source>Data flow in template-driven forms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1b89e8881cafb6b085aada57b60616b9ac3406" translate="yes" xml:space="preserve">
          <source>Data for a transition from one animation state to another. See &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9393a235ba23b990b99ee169026ad57440db380f" translate="yes" xml:space="preserve">
          <source>Data gathered in this way can be viewed on the Google Analytics site, but is not automatically visible on your own organization's Analytics site. As an administrator for an Angular development group, you can configure your instance of Angular CLI to be able to see analytics data for your own team's usage of the Angular CLI. This configuration option is separate from and in addition to other usage analytics that your users may be sharing with Google.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ccce7c84ff910c0458db8a1eb20d2bf55321dc" translate="yes" xml:space="preserve">
          <source>Data groups follow this Typescript interface:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c825ea984ebfeb20bfb18c3c089c4b5d7fc910e" translate="yes" xml:space="preserve">
          <source>Data model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e55db42edf09b3bc94ad8e03463d13a646465d6a" translate="yes" xml:space="preserve">
          <source>Data returned from servers often takes the form of a stream. Streams are useful because they make it easy to transform the data that is returned, and to make modifications to the way data is requested. The Angular HTTP client (&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;) is a built-in way to fetch data from external APIs and provide them to your application as a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac351ed3feb203e6748574b5a4117ca069a6c697" translate="yes" xml:space="preserve">
          <source>Data services that make HTTP calls to remote servers typically inject and delegate to the Angular &lt;a href=&quot;http&quot;&gt;&lt;code&gt;HttpClient&lt;/code&gt;&lt;/a&gt; service for XHR calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09683543199a512ce5b35c096ebcad1cf9eede7" translate="yes" xml:space="preserve">
          <source>Data services, such as &lt;code&gt;PackageSearchService&lt;/code&gt;, are unaware that some of their &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; requests actually return cached responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b830720955a4965a704188d3b5459c245e7001e7" translate="yes" xml:space="preserve">
          <source>Data-binding and HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4beeca7e037b29ba76543e1366bfac09d0df5875" translate="yes" xml:space="preserve">
          <source>Data-binding is a mechanism for coordinating what users see, specifically with application data values. While you could push values to and pull values from HTML, the application is easier to write, read, and maintain if you turn these tasks over to a binding framework. You simply declare bindings between binding sources, target HTML elements, and let the framework do the rest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433a96bef0650364ce46802839a116fc7b8931f3" translate="yes" xml:space="preserve">
          <source>DatePipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5dbae0bbee5f646b166a48092a587cbe25ba8d8" translate="yes" xml:space="preserve">
          <source>Day of month</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a99c8bddb4b164e11b358bfc48c1fb30dc65858" translate="yes" xml:space="preserve">
          <source>Dead code elimination: removes unreferenced modules and much unused code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc8e10702fbb1809836dbd83c85b35804f3cf01" translate="yes" xml:space="preserve">
          <source>Debounce (so as not to send off API requests for every keystroke, but instead wait for a break in keystrokes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b920be9b7ebb5d211f0821d92f09df03b3b7c0" translate="yes" xml:space="preserve">
          <source>Debouncing requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2867cf87b59dd752e50e1c3c1104db84a9b3a42a" translate="yes" xml:space="preserve">
          <source>Debug log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae2cd74b027750bd99aa71b58bab54f52e8dea3" translate="yes" xml:space="preserve">
          <source>Debug specs in the browser in the same way that you debug an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e78f156c09dbbcd57c99c2364d5456c6ebebd2" translate="yes" xml:space="preserve">
          <source>DebugElement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7403074afccc06c065bd5e33470da88622229db8" translate="yes" xml:space="preserve">
          <source>DebugEventListener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e0558a3ae0736dbe4d5bbe74289a0f4ac5fbf1" translate="yes" xml:space="preserve">
          <source>DebugNode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae9636032d66cefae467fbfc1dcd56b64c42991" translate="yes" xml:space="preserve">
          <source>Debugging the Angular service worker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c443d52e0e5c0eb2f0949b6c00eaeca1e247a0" translate="yes" xml:space="preserve">
          <source>Debugging with the json pipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6226af647a580483e6f4753ea5100ed11e11ba5" translate="yes" xml:space="preserve">
          <source>Decimal representation options, specified by a string in the following format: &lt;code&gt;{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a388f7beea5533c9477db7c66a25bb88f3fef66" translate="yes" xml:space="preserve">
          <source>Decimal separator for currency values (fallback to &lt;code&gt;Decimal&lt;/code&gt;). Example: $2,345.67</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf046d343b16ae8e5b81bcc1a797af0de42c117" translate="yes" xml:space="preserve">
          <source>Decimal separator. For &lt;code&gt;en-US&lt;/code&gt;, the dot character. Example : 2,345&lt;code&gt;.&lt;/code&gt;67</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96b842fbc4d2f97ccd04c22c633dff737fb5c69" translate="yes" xml:space="preserve">
          <source>DecimalPipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48dd231e7a1f5127a27a08c66ee2e654ce7ff23e" translate="yes" xml:space="preserve">
          <source>Declarables are the class types&amp;mdash;components, directives, and pipes&amp;mdash;that you can add to a module's &lt;code&gt;declarations&lt;/code&gt; list. They're the only classes that you can add to &lt;code&gt;declarations&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30528912ac642bcf1a44cd8aeaff1cb07299ae4c" translate="yes" xml:space="preserve">
          <source>Declarables must belong to exactly one module. The compiler emits an error if you try to declare the same class in more than one module. Be careful not to declare a class that is imported from another module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b846963186dedc9a34aab11fab9a0a092e2d1b" translate="yes" xml:space="preserve">
          <source>Declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30797025f2d97627b1af8c3ba19e48a02a93ed9" translate="yes" xml:space="preserve">
          <source>Declarations are private by default. If this ModuleA does not export UserComponent, then only the components within this ModuleA can use UserComponent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de8e7132c9f5917203ec203eeb390d1650341ac" translate="yes" xml:space="preserve">
          <source>Declarations are private by default. If this module does &lt;em&gt;not&lt;/em&gt; export &lt;code&gt;UserComponent&lt;/code&gt;, then only the components within &lt;em&gt;this&lt;/em&gt; module can use &lt;code&gt;UserComponent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe55ec59a266c375da0d2bfd529cfee6e622c263" translate="yes" xml:space="preserve">
          <source>Declarations such as components and pipes should be designed as stateless, meaning they don&amp;rsquo;t rely on or alter external variables. If you do rely on state, you need to evaluate every case and decide whether it is application state or state that the library would manage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e5bd1339a5cba236acf14265d289ce17e13f23" translate="yes" xml:space="preserve">
          <source>Declare &lt;code&gt;HeroesComponent&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7eb4a7dc74680cebe692d0ed2c9e3f7cf0769a" translate="yes" xml:space="preserve">
          <source>Declare &lt;code&gt;root&lt;/code&gt; for the value of the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d6bcb1a03694a1ed4b9cc698d896ce00118be8" translate="yes" xml:space="preserve">
          <source>Declare as one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5c81d026ef2e0ad8115bf5f7d46127baa96d7fb" translate="yes" xml:space="preserve">
          <source>Declare it in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d7e2e25229337e3d1969d606f65c86088c3193" translate="yes" xml:space="preserve">
          <source>Declare these classes in &lt;em&gt;exactly one&lt;/em&gt; module of the application. Declare them in a module if they belong to that particular module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6ecca2653ab90510b34d3ba1a1d6dfe3d2a6ee" translate="yes" xml:space="preserve">
          <source>Declared in Constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc46a3015b9cb9363d1317014191d8bcb727bff2" translate="yes" xml:space="preserve">
          <source>Declares a constructor parameter and its type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fab86145971544f26ac5cda662e1c1aca216c73" translate="yes" xml:space="preserve">
          <source>Declares a key/value object containing CSS properties/styles that can then be used for an animation &lt;code&gt;&lt;a href=&quot;animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, within an animation &lt;code&gt;&lt;a href=&quot;animations/sequence&quot;&gt;sequence&lt;/a&gt;&lt;/code&gt;, or as styling data for calls to &lt;code&gt;&lt;a href=&quot;animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;animations/keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a07b09ad4e1128559c64bbf7737f414f58aa2c2" translate="yes" xml:space="preserve">
          <source>Declares a key/value object containing CSS properties/styles that can then be used for an animation &lt;code&gt;&lt;a href=&quot;state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, within an animation &lt;code&gt;&lt;a href=&quot;sequence&quot;&gt;sequence&lt;/a&gt;&lt;/code&gt;, or as styling data for calls to &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;keyframes&quot;&gt;keyframes&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc2cadbfe8ba889b264343b494f4074bf47bd77" translate="yes" xml:space="preserve">
          <source>Declares a public property of the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5516185e9663e1f80423a2f986cf3db80b7e8e6" translate="yes" xml:space="preserve">
          <source>Declares an animation state within a trigger attached to an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7184d12b506f1288482c49e1a4d72845528ce457" translate="yes" xml:space="preserve">
          <source>Declares an animation transition as a sequence of animation steps to run when a given condition is satisfied. The condition is a Boolean expression or function that compares the previous and current animation states, and returns true if this transition should occur. When the state criteria of a defined transition are met, the associated animation is triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3330a9e192dfa745e59494e0a69489aadac700" translate="yes" xml:space="preserve">
          <source>Declares an input property that you can update via property binding (example: &lt;code&gt;&amp;lt;my-cmp [myProperty]=&quot;someExpression&quot;&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e17bfc2e25cdc8965acfa692aced372c29604fd" translate="yes" xml:space="preserve">
          <source>Declares an output property that fires events that you can subscribe to with an event binding (example: &lt;code&gt;&amp;lt;my-cmp (myEvent)=&quot;doSomething()&quot;&amp;gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2b4e0567c46eae59ac8cb8e249a4a90843a03f" translate="yes" xml:space="preserve">
          <source>Declares that a class can be provided and injected by other classes. Without this decorator, the compiler won't generate enough metadata to allow the class to be created properly when it's injected somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58da8aac234219772bbd32f21aa968dfec3d10e8" translate="yes" xml:space="preserve">
          <source>Declares that a class is a component and provides metadata about the component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e996a4210d7d9c25820ba56979e37b06bc36c6b" translate="yes" xml:space="preserve">
          <source>Declares that a class is a directive and provides metadata about the directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f856a0e464d7245018d5f267844e98ded5035c2" translate="yes" xml:space="preserve">
          <source>Declares that a class is a pipe and provides metadata about the pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124350f26ea93c4bafefb256bde5e5aff1ca579d" translate="yes" xml:space="preserve">
          <source>Declares which components, directives, and pipes belong to the module.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
