<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="php">
    <body>
      <group id="php">
        <trans-unit id="2725df9b423bf2ed483e23a14f3c97859271e4cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrDisMaxQuery::addPhraseFields()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SolrDisMaxQuery::addPhraseFields()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25e09d26bf3474fffe1c7e7bb1766042afa10f06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrDisMaxQuery::useDisMaxQueryParser()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SolrDisMaxQuery::useDisMaxQueryParser()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5850e7d675dfaa27ae9d4154658fa7bcd8d54e28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrDisMaxQuery&lt;/strong&gt;extends&lt;a href=&quot;class.solrquery&quot;&gt;SolrQuery&lt;/a&gt;implements &lt;a href=&quot;class.serializable&quot;&gt;Serializable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88ec70785283d39f34c4704567d60ba032e592e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrException&lt;/strong&gt;extends&lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983375513c9beeb7342cfe2a9704e963e0fa1fd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrIllegalArgumentException&lt;/strong&gt;extends&lt;a href=&quot;class.solrexception&quot;&gt;SolrException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32869da05a0f4055b2d1c01ada857dbbe3a53c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrIllegalOperationException&lt;/strong&gt;extends&lt;a href=&quot;class.solrexception&quot;&gt;SolrException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b3f84a79a4e2db63b9785b73b277358fcaa06d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrMissingMandatoryParameterException&lt;/strong&gt;extends&lt;a href=&quot;class.solrexception&quot;&gt;SolrException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152b34c3d7723e34ed4f2b0308a361764c3da77a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrModifiableParams&lt;/strong&gt;extends&lt;a href=&quot;class.solrparams&quot;&gt;SolrParams&lt;/a&gt;implements &lt;a href=&quot;class.serializable&quot;&gt;Serializable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7abad50ca5578999e9f02468d142423b31cf3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrQuery::setGroupMain()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SolrQuery::setGroupMain()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8851dd4b7befba7aeff19bb38ff77727ea313fd3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrQuery&lt;/strong&gt;extends&lt;a href=&quot;class.solrmodifiableparams&quot;&gt;SolrModifiableParams&lt;/a&gt;implements &lt;a href=&quot;class.serializable&quot;&gt;Serializable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69303437319ef5eccc9b2c745dfbc85b111093d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SolrServerException&lt;/strong&gt;extends&lt;a href=&quot;class.solrexception&quot;&gt;SolrException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58461fd6feee845d9945d9e4a2b95efbece28d7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sorting modes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d84aa9fd513e4cc520dac9ce9b2178c71cc4be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SphinxClient&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fcd3b04ec2502d798c75eb711ac4b84068f444" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplBool&lt;/strong&gt;extends&lt;a href=&quot;class.splenum&quot;&gt;SplEnum&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6aa5e237e29baa89ae120ed2328b724b5541ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplDoublyLinkedList&lt;/strong&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d32444d6728c4d71841d8b9f00d028dd75900d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplEnum&lt;/strong&gt;extends&lt;a href=&quot;class.spltype&quot;&gt;SplType&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d188a65a793d7d2587fee6e2f0e3c70d96cce612" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplFileInfo::getBasename()&lt;/strong&gt; is locale aware, so for it to see the correct basename with multibyte character paths, the matching locale must be set using the &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049cd46ff49d74aee570e5cc2141bf7da4a9b94f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplFileInfo&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf0b11c8e431d83dfd07c4b8d06261c1a472994" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplFileObject&lt;/strong&gt;extends&lt;a href=&quot;class.splfileinfo&quot;&gt;SplFileInfo&lt;/a&gt;implements &lt;a href=&quot;class.recursiveiterator&quot;&gt;RecursiveIterator&lt;/a&gt;, &lt;a href=&quot;class.seekableiterator&quot;&gt;SeekableIterator&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462537b5d748a80dadb225fbd262c9b776292ea9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplFixedArray&lt;/strong&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14683ed175b35ae0c2b1eb3c152099c239bf5f15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplFloat&lt;/strong&gt;extends&lt;a href=&quot;class.spltype&quot;&gt;SplType&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64cf4b86ca2b88d6ad6d8f5b4f3b1c0a3662fce5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplInt&lt;/strong&gt;extends&lt;a href=&quot;class.spltype&quot;&gt;SplType&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada6cf68a91f8c59abf7cf180d0bca28a86ff9d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplMaxHeap&lt;/strong&gt;extends&lt;a href=&quot;class.splheap&quot;&gt;SplHeap&lt;/a&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80969bb603c143e7a547ee32492b4c0bc25b5f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplMinHeap&lt;/strong&gt;extends&lt;a href=&quot;class.splheap&quot;&gt;SplHeap&lt;/a&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebff34e7038fc3737fa99a707b577edb610cda9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplObjectStorage::offsetExists()&lt;/strong&gt; is an alias of &lt;a href=&quot;splobjectstorage.contains&quot;&gt;SplObjectStorage::contains()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a5a688a67bf8d634a5cad14c05fab3cc47b674" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplObjectStorage::offsetSet()&lt;/strong&gt; is an alias of &lt;a href=&quot;splobjectstorage.attach&quot;&gt;SplObjectStorage::attach()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d04d230f4a4b8bf7b63c89e29c7a9e9e41e1e7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplObjectStorage::offsetUnset()&lt;/strong&gt; is an alias of &lt;a href=&quot;splobjectstorage.detach&quot;&gt;SplObjectStorage::detach()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599f70a2b9314590fd92fc654b07696da747034f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplObjectStorage&lt;/strong&gt;implements &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt;, &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.serializable&quot;&gt;Serializable&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ec415f7db7a223949a84498a58b3530deeaf95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplObserver&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7488c5aaab757b7cdee40b1b89b95fd3e62336" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplPriorityQueue&lt;/strong&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d065e753e77e9ba8ca2a1574cdfcdac99797b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplQueue::__construct&lt;/strong&gt; ( void )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3206e2a1cc791a2912703287e536449886855be4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplQueue::dequeue()&lt;/strong&gt; is an alias of &lt;a href=&quot;spldoublylinkedlist.shift&quot;&gt;SplDoublyLinkedList::shift()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be0b165ebf9f340189209fcb485e6496ee59eed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplQueue::enqueue()&lt;/strong&gt; is an alias of &lt;a href=&quot;spldoublylinkedlist.push&quot;&gt;SplDoublyLinkedList::push()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcd500824532165ebff705124cf10289ad7b6fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplQueue&lt;/strong&gt;extends&lt;a href=&quot;class.spldoublylinkedlist&quot;&gt;SplDoublyLinkedList&lt;/a&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd50c0a8adf930d155d046bf3aaf031a86eefd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplStack::__construct&lt;/strong&gt; ( void )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49660a5c13103d9c10ad7907f3d1a3dffdd8c4b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplStack&lt;/strong&gt;extends&lt;a href=&quot;class.spldoublylinkedlist&quot;&gt;SplDoublyLinkedList&lt;/a&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d466474118d545d211e9879703cfa3ad26a26bec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplString&lt;/strong&gt;extends&lt;a href=&quot;class.spltype&quot;&gt;SplType&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f7b81deb0381e1b29c969561e92fa60b20e052" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplSubject&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc38da69ca88d538dbd5bb5924287e1488a9ad52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SplTempFileObject&lt;/strong&gt;extends&lt;a href=&quot;class.splfileobject&quot;&gt;SplFileObject&lt;/a&gt;implements &lt;a href=&quot;class.seekableiterator&quot;&gt;SeekableIterator&lt;/a&gt;, &lt;a href=&quot;class.recursiveiterator&quot;&gt;RecursiveIterator&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026c05768063c448b07ada645240e589d5b10b08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spoofchecker&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc1813133e97539282880cbae4dc26ff71eba9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supported charsets&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4613c476eaaa6588420626b2048f803d0a66e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supported flags&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979c050582ad806a8f1514b47b7a0d4d98c534c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supported property codes&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8330af26291f14af897daf93094817a93a140de6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supported runtime FTP options&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c0fb5224333f129b83c4f385b85f9904ec13611" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Supported scripts&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855bf89d6d8840c7a584d9e50969781c7e377916" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncEvent::reset()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SyncEvent::reset()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d859fc9b49ec3b6954be80f0150bbd4bbf14eca5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncEvent&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5ab87d36da046aef4f35b208723edd0e56dc62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncMutex&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f00247a937fefe6c7bedea65bafd6ebda45094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncReaderWriter&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d4af373bdb63f08dbecbcbb86797b8b36cce95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncSemaphore&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e5fa90794c7f4386635e4b640c4858dde7ade05" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncSharedMemory::read()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SyncSharedMemory::read()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a02243f967653648eb9da29d4ebb8269c055a70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncSharedMemory::write()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;SyncSharedMemory::write()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9b5b022979252873f7f2c22835d74da28e5be543" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;SyncSharedMemory&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e4cc005e2ffbced63d104fcdf0a1270a8e71431" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syslog variables&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6c9c5189100a843ab3cd1e0b72fa957247aa5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The following characters are recognized in the &lt;code&gt;format&lt;/code&gt; parameter string&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4cdb25c6b5b71248523a7e63a1f3fae17f3fcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The following parameters are returned in the array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f63ef675eaad84d94a18801588c33d4e70cc8e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The group information array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8b96e2500a457acf4588272e736cd8420526ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The user information array&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033adfafb9edfafc793a30cfe7b72a94f6672923" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Thread&lt;/strong&gt;extends&lt;a href=&quot;class.threaded&quot;&gt;Threaded&lt;/a&gt;implements &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt;, &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5597828fccac0ad783aa5eb76baa57a03338ad7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Threaded&lt;/strong&gt;implements &lt;a href=&quot;class.collectable&quot;&gt;Collectable&lt;/a&gt;, &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a838c2021a271fc0160d7bfb9609f9cffac04d75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Throwable&lt;/strong&gt; is the base interface for any object that can be thrown via a &lt;a href=&quot;language.exceptions&quot;&gt;&lt;em&gt;throw&lt;/em&gt;&lt;/a&gt; statement in PHP 7, including &lt;a href=&quot;class.error&quot;&gt;Error&lt;/a&gt; and &lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da40c34e5421b6716b1170c1e5230b6e70b10fe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Throwable&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a1716d01f74f303c41f6d2d41bf5755234db73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tip&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f865aa7b77786e5a978098c19998e76332a9e3f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transfer encodings (value may vary with used library, use of constants is recommended)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c07533ee329833cb68753d20f4f189b6993b2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transliterator::__construct&lt;/strong&gt; ( void )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ae23d71a9b123db9f0556ca865b2e5185eb18c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transliterator&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c4865441e409a555003fb064289ed03de2767d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Traversable&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc10ba86fa828383f9382b1cd906ba567f5a2c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type Handling&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08eb8a196e194318c587c5b86bb772866ce0e946" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type specification chars&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244b746f6c5fa1688c8f5b6e9e527891a047278b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TypeError&lt;/strong&gt;extends&lt;a href=&quot;class.error&quot;&gt;Error&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c675dc3a4ef30691169de5311ac62d2ab051be51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UConverter&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fe5bcbf6c617cef8d6f019e90d7971a1285b77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UnderflowException&lt;/strong&gt;extends&lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff790705d027a737fa210c1a5e49c89b45316d21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UnexpectedValueException&lt;/strong&gt;extends&lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761bf70334966ab0000e0fd61f4cec92dd16f8de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;V8Js&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc1e70e465f03248d49edf57312809f5fb1fc4ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;V8JsException&lt;/strong&gt;extends&lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d89d16de31ace7f18e3c670156dcbf69a278c96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Valid options&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b560499d039c8b78ffc85ecd8d589acabf1dbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VarnishAdmin&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fc0789554a346ae32aa50a03a8206117e9892b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VarnishLog&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b7aec93dc2c135cc6af4f88106b59bca34983c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;VarnishStat&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09387b16dc0d6e4fff508af7f778dd3f72b644a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Volatile&lt;/strong&gt;extends&lt;a href=&quot;class.threaded&quot;&gt;Threaded&lt;/a&gt;implements &lt;a href=&quot;class.collectable&quot;&gt;Collectable&lt;/a&gt;, &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2756abf1eaa19230be9bb95e04f5d2e16307d6dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Warning&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e2f6cf7177643fdf04f343503f630b2534ddf642" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WeakMap&lt;/strong&gt;implements &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f531dc1204bafe948b318294636ed1569759cff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WeakRef&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b8535bfc95ffb9895a94b2d75de933d97d5f0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Worker&lt;/strong&gt;extends&lt;a href=&quot;class.thread&quot;&gt;Thread&lt;/a&gt;implements &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20e108bee743ef4afffee073adc27b834432c01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XML parser options&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0739b81b49a84b4d6c940e053d619099461d95cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XMLReader::getAttributeNS()&lt;/strong&gt; now returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the attribute doesn't exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d743dfb3e582db13160db1c502257d319540df43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XMLReader::getAttributeNo()&lt;/strong&gt; now returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the attribute doesn't exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f6bc76b6b89e36ad251c0a7a6f0634ba20409c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XMLReader&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd4f9d1d3ba4dc8894e59ba04630141aff70798" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XSLTProcessor::__construct&lt;/strong&gt; ( void )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56aff22bdc679be1da0b9246f9fba0e86d175088" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;XSLTProcessor&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbb7872d25bb5ab797f23ea8da73bcfc3b81e19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Action_Abstract&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-controller-abstract&quot;&gt;Yaf_Controller_Abstract&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2ea3041b0a6d2e881a76dbf1708f45ecddff27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Config_Ini&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-config-abstract&quot;&gt;Yaf_Config_Abstract&lt;/a&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d9eac77573f9c603c12f34ff3fc731a787e4f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Config_Simple&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-config-abstract&quot;&gt;Yaf_Config_Abstract&lt;/a&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90451feb249993dc908635ce6732f6442260d23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Controller_Abstract::__construct()&lt;/strong&gt; is final, which means it can not be overridden. You may want to see &lt;a href=&quot;yaf-controller-abstract.init&quot;&gt;Yaf_Controller_Abstract::init()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d1b42f33be36350faa66994ecfe88607fa7b0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Controller_Abstract&lt;/strong&gt; is the heart of Yaf's system. MVC stands for Model-View-Controller and is a design pattern targeted at separating application logic from display logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05be36371c9bca688edaea3db3e17683e13be87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Dispatcher&lt;/strong&gt; also implements the Singleton pattern, meaning only a single instance of it may be available at any given time. This allows it to also act as a registry on which the other objects in the dispatch process may draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2804d28834b8651dbbb6f7f35782286544cd4583" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Dispatcher&lt;/strong&gt; purpose is to initialize the request environment, route the incoming request, and then dispatch any discovered actions; it aggregates any responses and returns them when the process is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3483dc1f2710680ba711ebbf6208cdb3cac3c933" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception&lt;/strong&gt;extends&lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e277908844bdc94fbbb2db6465547176435120" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_DispatchFailed&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception&quot;&gt;Yaf_Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17675c4beb3b6f31ffed519b5e4c9e9bf88b24d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_LoadFailed&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception&quot;&gt;Yaf_Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e44e8163ed0d7943fc7c3459fc2d0605cbd1b83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_LoadFailed_Action&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception-loadfailed&quot;&gt;Yaf_Exception_LoadFailed&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8176158ce94534fd374ec94e71f82f1dd0d5972" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_LoadFailed_Controller&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception-loadfailed&quot;&gt;Yaf_Exception_LoadFailed&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a836cd60b8caac50e6ed1c01b32de89dbe0404a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_LoadFailed_Module&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception-loadfailed&quot;&gt;Yaf_Exception_LoadFailed&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2af6ff7f271e47f909fc0d29c60b35273c6dae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_LoadFailed_View&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception-loadfailed&quot;&gt;Yaf_Exception_LoadFailed&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2d4cefbe611d0d38243b67df2badbba21cc156" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_RouterFailed&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception&quot;&gt;Yaf_Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8e08f90cfdf259a7d2bf985ed9a771b5062a55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_StartupError&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception&quot;&gt;Yaf_Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f9eef7901de595f3811c72db27e7b99f82ec07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Exception_TypeError&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-exception&quot;&gt;Yaf_Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b580af922895c06649f37ca8755206b720ae6a54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Loader&lt;/strong&gt; attempt to load a class only one shot, if failed, depend on &lt;a href=&quot;https://secure.php.net/manual/en/yaf.configuration.php#ini.yaf.use-spl-autoload&quot;&gt;yaf.use_spl_auload&lt;/a&gt;, if this config is On &lt;a href=&quot;yaf-loader.autoload&quot;&gt;Yaf_Loader::autoload()&lt;/a&gt; will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;, thus give the chance to other autoload function. if it is Off (by default), &lt;a href=&quot;yaf-loader.autoload&quot;&gt;Yaf_Loader::autoload()&lt;/a&gt; will return &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, and more important is that a very usefull warning will be triggerd (very usefull to find out why a class could not be loaded).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aaf8872cdc1f7ee1a795cdb52c1970ff9197c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Loader&lt;/strong&gt; introduces a comprehensive autoloading solution for Yaf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8675d0375f56b43b0647b1a005f6b19926768ff3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Loader&lt;/strong&gt; is also designed to load the MVC classes, and the rule is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea33ecee780b255343433447264ad1be02c58d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Loader&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a926ce162f7b128fd714abc951120b341dd272ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Plugin_Abstract&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8692428ecde28be61259ae19e34f84a9a602644c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Registry&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e46f45e8954188485101c5dbb9b33b5b84e1d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Request_Abstrace::getParam()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Yaf_Request_Abstrace::getParam()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93e2955739e93381aeea90b7b23a98c8b56e6b68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Request_Abstract::isCli()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Yaf_Request_Abstract::isCli()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40ffee94336e89a5c80b6041ab80b0e27d7e5491" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Request_Abstract&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7525c1cc43564dc6b50fba4a37b26825e92e1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Request_Http&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-request-abstract&quot;&gt;Yaf_Request_Abstract&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be64e92e7b69496ff52780b603d11cf52382f507" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Request_Simple&lt;/strong&gt; is particularlly used for test puporse. ie. simulate some espacial request under CLI mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebdbbd173af945442ee54769e581c34a57029aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Request_Simple&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-request-abstract&quot;&gt;Yaf_Request_Abstract&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5df2dbc7440a674af45afe508380bf2bac5279" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Response_Abstract::cleanHeaders()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Yaf_Response_Abstract::cleanHeaders()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df05dfd0598e2ac4af1d5ee940318959eb620926" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Response_Abstract&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b46b65b987d5a653907637fcd191482dba6228" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Interface::route()&lt;/strong&gt; is the only method that a custom route should implement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cf4e989ea7f7dab2ac54fd9cd0ec37ef282d77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Interface&lt;/strong&gt; used for developer defined their custom route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a0ab3e367b163d72eefa7d35223c44d277918b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Interface&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cccc73a47e1491649f54aa5c19f5e487ec1ddbe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Map&lt;/strong&gt; is a built-in route, it simply convert a URI endpoint (that part of the URI which comes after the base URI: see &lt;a href=&quot;yaf-request-abstract.setbaseuri&quot;&gt;Yaf_Request_Abstract::setBaseUri()&lt;/a&gt;) to a controller name or action name(depends on the paramter passed to &lt;a href=&quot;yaf-route-map.construct&quot;&gt;Yaf_Route_Map::__construct()&lt;/a&gt;) in following rule: A =&amp;gt; controller A. A/B/C =&amp;gt; controller A_B_C. A/B/C/D/E =&amp;gt; controller A_B_C_D_E.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82d1b2bad149c86797366ce85639c45d22612f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Map&lt;/strong&gt;implements &lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250cf32f058924ff7ae40e16ba598cabdfb5cdeb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Regex&lt;/strong&gt; is the most flexible route among the Yaf built-in routes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db83a6d213037d9df6966e68e5c9e298a9421fbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Regex&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt;implements &lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be93af1759a4f1c2df4d4dcab3dd476ca9d8ca5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Rewrite&lt;/strong&gt;extends&lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt;implements &lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00219be9aa9a3dccca3d88e330aa76ee0fbe73d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Simple&lt;/strong&gt; will match the query string, and find the route info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6daf64424e0232d76cc54fc0e18870170e9dbbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Simple&lt;/strong&gt;implements &lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b853dfd2fa03af02241352c793986c1c890b39de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Static&lt;/strong&gt;implements &lt;a href=&quot;class.yaf-router&quot;&gt;Yaf_Router&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64819d731771c80160c081ba2929c11cb2c9545" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Route_Supervar&lt;/strong&gt;implements &lt;a href=&quot;class.yaf-route-interface&quot;&gt;Yaf_Route_Interface&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8c652685515656ba338235642f9a07146f9f27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Router&lt;/strong&gt; comes preconfigured with a default route &lt;a href=&quot;class.yaf-route-static&quot;&gt;Yaf_Route_Static&lt;/a&gt;, which will match URIs in the shape of controller/action. Additionally, a module name may be specified as the first path element, allowing URIs of the form module/controller/action. Finally, it will also match any additional parameters appended to the URI by default - controller/action/var1/value1/var2/value2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f469b1b88ab260399cea9db1db76982f323867" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Router&lt;/strong&gt; is the standard framework router. Routing is the process of taking a URI endpoint (that part of the URI which comes after the base URI: see &lt;a href=&quot;yaf-request-abstract.setbaseuri&quot;&gt;Yaf_Request_Abstract::setBaseUri()&lt;/a&gt;) and decomposing it into parameters to determine which module, controller, and action of that controller should receive the request. This values of the module, controller, action and other parameters are packaged into a &lt;a href=&quot;class.yaf-request-abstract&quot;&gt;Yaf_Request_Abstract&lt;/a&gt; object which is then processed by &lt;a href=&quot;class.yaf-dispatcher&quot;&gt;Yaf_Dispatcher&lt;/a&gt;. Routing occurs only once: when the request is initially received and before the first controller is dispatched. &lt;strong&gt;Yaf_Router&lt;/strong&gt; is designed to allow for mod_rewrite-like functionality using pure PHP structures. It is very loosely based on Ruby on Rails routing and does not require any prior knowledge of webserver URL rewriting. It is designed to work with a single Apache mod_rewrite rule (one of):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e969071837dd730ee5f89389e023b599eae77f20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Router&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1efb6ef790f15997cd727a0e8673d4a5141677" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Server_Exception::getType()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Yaf_Server_Exception::getType()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f7e47d706ef34ce77d3b4d7165efd9ec4e06fe82" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_Session&lt;/strong&gt;implements &lt;a href=&quot;class.iterator&quot;&gt;Iterator&lt;/a&gt;, &lt;a href=&quot;class.arrayaccess&quot;&gt;ArrayAccess&lt;/a&gt;, &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc90c1060cbf8da97fe4a87038e841bdbb374527" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_View_Interface::clear()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Yaf_View_Interface::clear()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3d0aa327911e3a3edbf168b3a92d51724937be7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_View_Interface&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678cfb19ba02cc6c423b846f91cdaa1c0b2c486c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_View_Simple&lt;/strong&gt; is the built-in template engine in Yaf, it is a simple but fast template engine, and only support PHP script template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fba98c4cec7cb1895fe9784442a1c92ccbcf4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yaf_View_Simple&lt;/strong&gt;implements &lt;a href=&quot;class.yaf-view-interface&quot;&gt;Yaf_View_Interface&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7709032a7bf4b14a5354fa4e671ce3cb85bb4c7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yar_Client&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da0bdcf6a419cbb6fb2ea610f8a58b9b5bc6296" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yar_Client_Exception&lt;/strong&gt;extends&lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02432cae3d3aab973b3ea6f1f02abb5dea0e1238" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yar_Concurrent_Client&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a9e837cc6e0dfbd608277a5b5db3b9275bed10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yar_Server&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="965ba0001667127f111cbbbd0cf2ac3af6c9f251" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yar_Server_Exception&lt;/strong&gt;extends&lt;a href=&quot;class.exception&quot;&gt;Exception&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a479dbf28d5fb269d8e1b6ddc36cd8c9c3de9cc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ZipArchive&lt;/strong&gt;implements &lt;a href=&quot;class.countable&quot;&gt;Countable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac13d94ec2848ec2298c0f916926ec67ca58fab5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;__halt_compiler()&lt;/strong&gt; can only be used from the outermost scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1341d84ee0130b00ee39518484e59702105e3dc2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;add()&lt;/strong&gt;, &lt;strong&gt;remove()&lt;/strong&gt; and &lt;strong&gt;contains()&lt;/strong&gt; are all O(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdffedae0a53be9a07f8cd97117971a90b537ef4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apache_child_terminate()&lt;/strong&gt; will register the Apache process executing the current PHP request for termination once execution of PHP code is completed. It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130b637c34ccb7e292b728a43f255bfbd64a03fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apache_reset_timeout()&lt;/strong&gt; resets the Apache write timer, which defaults to 300 seconds. With &lt;em&gt;set_time_limit(0); ignore_user_abort(true)&lt;/em&gt; and periodic &lt;strong&gt;apache_reset_timeout()&lt;/strong&gt; calls, Apache can theoretically run forever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1eb7cb3be64692db6551d41d1ee0438b22ee84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apache_setenv()&lt;/strong&gt; can be paired up with &lt;a href=&quot;function.apache-getenv&quot;&gt;apache_getenv()&lt;/a&gt; across separate pages or for setting variables to pass to Server Side Includes (.shtml) that have been included in PHP scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595ac26395724ba40b57d463219cc8cd44f8d475" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apache_setenv()&lt;/strong&gt; sets the value of the Apache environment variable specified by &lt;code&gt;variable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69b8af5411130b83a27557a8f6d1358ed09bb96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apc_cas()&lt;/strong&gt; updates an already existing integer value if the &lt;code&gt;old&lt;/code&gt; parameter matches the currently stored value with the value of the &lt;code&gt;new&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b354836db60e26a801366f7dcdcd673da65368" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;apcu_cas()&lt;/strong&gt; updates an already existing integer value if the &lt;code&gt;old&lt;/code&gt; parameter matches the currently stored value with the value of the &lt;code&gt;new&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fcd49700f9ede240dde914b0f7e56b62112bc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array()&lt;/strong&gt; is a language construct used to represent literal arrays, and not a regular function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf1f084c894f9444356339fbeba750fbcc40b87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_column()&lt;/strong&gt; returns the values from a single column of the &lt;code&gt;input&lt;/code&gt;, identified by the &lt;code&gt;column_key&lt;/code&gt;. Optionally, an &lt;code&gt;index_key&lt;/code&gt; may be provided to index the values in the returned array by the values from the &lt;code&gt;index_key&lt;/code&gt; column of the input array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8154c430c365bcd653d7af15d3db38379e01dea4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_count_values()&lt;/strong&gt; returns an array using the values of &lt;code&gt;array&lt;/code&gt; as keys and their frequency in &lt;code&gt;array&lt;/code&gt; as values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88bb561b8fa5e03199a133016d803a9815f544b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_flip()&lt;/strong&gt; returns an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; in flip order, i.e. keys from &lt;code&gt;array&lt;/code&gt; become values and values from &lt;code&gt;array&lt;/code&gt; become keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5c59ed844b9a367aadba216974bade6d68cf0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_intersect()&lt;/strong&gt; returns an array containing all the values of &lt;code&gt;array1&lt;/code&gt; that are present in all the arguments. Note that keys are preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b1fcb18f999be4417157e3e3ba2d998bc3801e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_intersect_assoc()&lt;/strong&gt; returns an array containing all the values of &lt;code&gt;array1&lt;/code&gt; that are present in all the arguments. Note that the keys are also used in the comparison unlike in &lt;a href=&quot;function.array-intersect&quot;&gt;array_intersect()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746d01f45043b70ea8cfb3a83fa824b4e911e3cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_intersect_key()&lt;/strong&gt; returns an array containing all the entries of &lt;code&gt;array1&lt;/code&gt; which have keys that are present in all the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0556a9a4a91aad8b59342976f88009ea43d6fa8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_intersect_uassoc()&lt;/strong&gt; returns an array containing all the values of &lt;code&gt;array1&lt;/code&gt; that are present in all the arguments. Note that the keys are used in the comparison unlike in &lt;a href=&quot;function.array-intersect&quot;&gt;array_intersect()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4eb34ac2a672e549f3050bbf2a5e7630e94367d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_intersect_ukey()&lt;/strong&gt; returns an array containing all the values of &lt;code&gt;array1&lt;/code&gt; which have matching keys that are present in all the arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf60505d0a532119439dbf87579a4ca800ba1c46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_key_exists()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; if the given &lt;code&gt;key&lt;/code&gt; is set in the array. &lt;code&gt;key&lt;/code&gt; can be any value possible for an array index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e16a0b1913f813991176d21733ea46172ded2bd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_key_exists()&lt;/strong&gt; will search for the keys in the first dimension only. Nested keys in multidimensional arrays will not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6212d48ec3ec0c47f2fa4a835fe3ffe9e5d5dc5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_keys()&lt;/strong&gt; returns the keys, numeric and string, from the &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbcbb78e589d3316a1b99fd2c89d02b4c8a1e38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_map()&lt;/strong&gt; returns an array containing all the elements of &lt;code&gt;array1&lt;/code&gt; after applying the &lt;code&gt;callback&lt;/code&gt; function to each one. The number of parameters that the &lt;code&gt;callback&lt;/code&gt; function accepts should match the number of arrays passed to the &lt;strong&gt;array_map()&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ccc11b397ba15062f31d75775b861f43d404247" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_merge_recursive()&lt;/strong&gt; merges the elements of one or more arrays together so that the values of one are appended to the end of the previous one. It returns the resulting array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732272923c21343efa3fa0472a94378ba9b37b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_multisort()&lt;/strong&gt; can be used to sort several arrays at once, or a multi-dimensional array by one or more dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec7ce38f7e6940d76719aa2def58c854f06cffe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_pad()&lt;/strong&gt; returns a copy of the &lt;code&gt;array&lt;/code&gt; padded to size specified by &lt;code&gt;size&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;. If &lt;code&gt;size&lt;/code&gt; is positive then the array is padded on the right, if it's negative then on the left. If the absolute value of &lt;code&gt;size&lt;/code&gt; is less than or equal to the length of the &lt;code&gt;array&lt;/code&gt; then no padding takes place. It is possible to add at most 1048576 elements at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1873bbca93b92da8dae074febf650dad16a672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_pop()&lt;/strong&gt; pops and returns the value of the last element of &lt;code&gt;array&lt;/code&gt;, shortening the &lt;code&gt;array&lt;/code&gt; by one element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ffb18303e3d787efd0fca729dc90cb431182fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_product()&lt;/strong&gt; returns the product of values in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a422d29c2f0aca6a0ef494ce29f75c28d573316" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_push()&lt;/strong&gt; treats &lt;code&gt;array&lt;/code&gt; as a stack, and pushes the passed variables onto the end of &lt;code&gt;array&lt;/code&gt;. The length of &lt;code&gt;array&lt;/code&gt; increases by the number of variables pushed. Has the same effect as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4fe207e2a0672af2628ca185faa080bd925f73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_reduce()&lt;/strong&gt; applies iteratively the &lt;code&gt;callback&lt;/code&gt; function to the elements of the &lt;code&gt;array&lt;/code&gt;, so as to reduce the array to a single value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6987b77cf9d2477c5c5a6cde78a33e2f6d88f4f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_replace()&lt;/strong&gt; is not recursive : it will replace values in the first array by whatever type is in the second array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cbf7439bdebf46e87549954b9791f6d8dd6a77d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_replace()&lt;/strong&gt; replaces the values of &lt;code&gt;array1&lt;/code&gt; with values having the same keys in each of the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later arrays overwriting the previous values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1f4399b7a8eabe4452bd94b262df36296ed41c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_replace_recursive()&lt;/strong&gt; is recursive : it will recurse into arrays and apply the same process to the inner value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc667f59c47dee4891340ac63fdfb1a2d0cae1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_replace_recursive()&lt;/strong&gt; replaces the values of &lt;code&gt;array1&lt;/code&gt; with the same values from all the following arrays. If a key from the first array exists in the second array, its value will be replaced by the value from the second array. If the key exists in the second array, and not the first, it will be created in the first array. If a key only exists in the first array, it will be left as is. If several arrays are passed for replacement, they will be processed in order, the later array overwriting the previous values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f9f90536416ef198fcd67b2a6cc53778a3ff13" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_shift()&lt;/strong&gt; shifts the first value of the &lt;code&gt;array&lt;/code&gt; off and returns it, shortening the &lt;code&gt;array&lt;/code&gt; by one element and moving everything down. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b3bc5654e94940047818f2c1e9412bc13aff2d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_slice()&lt;/strong&gt; returns the sequence of elements from the array &lt;code&gt;array&lt;/code&gt; as specified by the &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e80a25dbec9dfbe083e6d589f76872b91a7927" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_sum()&lt;/strong&gt; returns the sum of values in an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c53b12266ef89b442353991d8b500709960d8da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_udiff_assoc()&lt;/strong&gt; returns an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; containing all the values from &lt;code&gt;array1&lt;/code&gt; that are not present in any of the other arguments. Note that the keys are used in the comparison unlike &lt;a href=&quot;function.array-diff&quot;&gt;array_diff()&lt;/a&gt; and &lt;a href=&quot;function.array-udiff&quot;&gt;array_udiff()&lt;/a&gt;. The comparison of arrays' data is performed by using an user-supplied callback. In this aspect the behaviour is opposite to the behaviour of &lt;a href=&quot;function.array-diff-assoc&quot;&gt;array_diff_assoc()&lt;/a&gt; which uses internal function for comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4246553de34a1c65ad8dcdc77d1003714499cb11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_unshift()&lt;/strong&gt; prepends passed elements to the front of the &lt;code&gt;array&lt;/code&gt;. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba820f83200150c1146190231c475ec97a0891f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_values()&lt;/strong&gt; returns all the values from the &lt;code&gt;array&lt;/code&gt; and indexes the array numerically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1813e42a245e28b1387377ddd9fc5c1ec4cff40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;array_walk()&lt;/strong&gt; is not affected by the internal array pointer of &lt;code&gt;array&lt;/code&gt;. &lt;strong&gt;array_walk()&lt;/strong&gt; will walk through the entire array regardless of pointer position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca1195fd75bc8c94a9a41dc6f9616e5684bab0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;assert()&lt;/strong&gt; callbacks are particularly useful for building automated test suites because they allow you to easily capture the code passed to the assertion, along with information on where the assertion was made. While this information can be captured via other methods, using assertions makes it much faster and easier!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc36db36a29ea2b3f5d41c9adbb05c8c98eb6211" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;assert()&lt;/strong&gt; is a language construct in PHP 7, allowing for the definition of expectations: assertions that take effect in development and testing environments, but are optimised away to have zero cost in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21d42aa53e898d579853e762f3875082e8d8d46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;assert()&lt;/strong&gt; is now a language construct and not a function. &lt;code&gt;assertion&lt;/code&gt; can now be an expression. The second parameter is now interpreted either as an &lt;code&gt;exception&lt;/code&gt; (if a &lt;a href=&quot;class.throwable&quot;&gt;Throwable&lt;/a&gt; object is given), or as the &lt;code&gt;description&lt;/code&gt; supported from PHP 5.4.8 onwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdadfce6742d461243e991fc4cbd2f98394c9be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;assert()&lt;/strong&gt; will check the given &lt;code&gt;assertion&lt;/code&gt; and take appropriate action if its result is &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af061cd00dc41102a062617013a47f14c625154e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;base_convert()&lt;/strong&gt; may lose precision on large numbers due to properties related to the internal &quot;double&quot; or &quot;float&quot; type used. Please see the &lt;a href=&quot;language.types.float&quot;&gt;Floating point numbers&lt;/a&gt; section in the manual for more specific information and limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4b77f3cf9eded4126c8a7aeba7ae6d5201b36a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;basename()&lt;/strong&gt; is locale aware, so for it to see the correct basename with multibyte character paths, the matching locale must be set using the &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332886255d90b553b5b2d4532f82498fe3056770" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;basename()&lt;/strong&gt; operates naively on the input string, and is not aware of the actual filesystem, or path components such as &quot;&lt;em&gt;..&lt;/em&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e624ce8214dd91958e9aa27e0b5be5049b6edbf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bcmul()&lt;/strong&gt; now returns numbers with the requested scale. Formerly, the returned numbers may have omitted trailing decimal zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ceb9c8be7227f6c166e5685e6ff749b5d3b84b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bcpow()&lt;/strong&gt; now returns numbers with the requested scale. Formerly, the returned numbers may have omitted trailing decimal zeroes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c3a17afc7e60582bfd1c99f4e1fd87dcd3da79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bcscale()&lt;/strong&gt; can now be used to get the current scale factor; when used as setter, it now returns the old scale value. Formerly, &lt;code&gt;scale&lt;/code&gt; was mandatory, and &lt;strong&gt;bcscale()&lt;/strong&gt; always returned &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce98becac7bf2e9b96816ffa2a3fa97479e96b42" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bindec()&lt;/strong&gt; converts a binary number to an &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; or, if needed for size reasons, &lt;a href=&quot;language.types.float&quot;&gt;float&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cc8c7332d7bf07837cfc33437da3356a76455d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bindec()&lt;/strong&gt; interprets all &lt;code&gt;binary_string&lt;/code&gt; values as unsigned integers. This is because &lt;strong&gt;bindec()&lt;/strong&gt; sees the most significant bit as another order of magnitude rather than as the sign bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09442aa65f996e271efc7cdc3f4de8df24213e58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bzcompress()&lt;/strong&gt; compresses the given string and returns it as bzip2 encoded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a5630046334f2e2ababbeea300b1f211d581557" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bzdecompress()&lt;/strong&gt; decompresses the given string containing bzip2 encoded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa99278f0263acfe2d77bc706e5cc27ffad2f402" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bzopen()&lt;/strong&gt; opens a bzip2 (.bz2) file for reading or writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c56e2ec4fedee50556748ce0c39d22e6be3d50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bzread()&lt;/strong&gt; reads from the given bzip2 file pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850b5be8b3b1ad3078a9b021625c5b745e5c1cac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;bzwrite()&lt;/strong&gt; writes a string into the given bzip2 file stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e1ef58e470a6ee0e082637ae685bf28f6cf40d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cal_from_jd()&lt;/strong&gt; converts the Julian day given in &lt;code&gt;jd&lt;/code&gt; into a date of the specified &lt;code&gt;calendar&lt;/code&gt;. Supported &lt;code&gt;calendar&lt;/code&gt; values are &lt;strong&gt;&lt;code&gt;CAL_GREGORIAN&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CAL_JULIAN&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CAL_JEWISH&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;CAL_FRENCH&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d145d01de2ccc9e7f2439b21afa2af8afc715f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cal_info()&lt;/strong&gt; returns information on the specified &lt;code&gt;calendar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1284b1c97e6ce230af167634171d24e0d69c97e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cal_to_jd()&lt;/strong&gt; calculates the Julian day count for a date in the specified &lt;code&gt;calendar&lt;/code&gt;. Supported &lt;code&gt;calendar&lt;/code&gt;s are &lt;strong&gt;&lt;code&gt;CAL_GREGORIAN&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CAL_JULIAN&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;CAL_JEWISH&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;CAL_FRENCH&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8772857922f8f210a22c335b2123c9ba3923c72f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chop()&lt;/strong&gt; is different than the Perl &lt;em&gt;chop()&lt;/em&gt; function, which removes the last character in the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1921d4945d564f3f7d17489c7521be88387bd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;closelog()&lt;/strong&gt; closes the descriptor being used to write to the system logger. The use of &lt;strong&gt;closelog()&lt;/strong&gt; is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b84f7820f8b4a97b55bfb354a23c2e5e9bb651" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;compact()&lt;/strong&gt; issues an E_NOTICE level error if a given string refers to an unset variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4430244f92ac1002cab725793b826c5dbf973fa8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;compact()&lt;/strong&gt; now issues an E_NOTICE level error if a given string refers to an unset variable. Formerly, such strings have been silently skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b69a7a843c92353c6fcf54d218f5407c449990" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;compact()&lt;/strong&gt; takes a variable number of parameters. Each parameter can be either a string containing the name of the variable, or an array of variable names. The array can contain other arrays of variable names inside it; &lt;strong&gt;compact()&lt;/strong&gt; handles it recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e64f52201ea369329f1fc0d16a8b85429ae457a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;constant()&lt;/strong&gt; is useful if you need to retrieve the value of a constant, but do not know its name. I.e. it is stored in a variable or returned by a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eecd8b41eb2ac384ec85fbc2a50a46b18ad15bab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;convert_uudecode()&lt;/strong&gt; decodes a uuencoded string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3113acb3ab0d08babf48c1de799012daf047cda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;convert_uuencode()&lt;/strong&gt; encodes a string using the uuencode algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9923b077f59ca304ec2c6563d230abdb1ce3df84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cos()&lt;/strong&gt; returns the cosine of the &lt;code&gt;arg&lt;/code&gt; parameter. The &lt;code&gt;arg&lt;/code&gt; parameter is in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98625ffd3fbe759f554e3c4467dcb0476999561a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cosh()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;cosh()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4fe8144ca327e856ff04fed136b9c62e26e554b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;count()&lt;/strong&gt; can detect recursion to avoid an infinite loop, but will emit an &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; every time it does (in case the array contains itself more than once) and return a count higher than may be expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1f6ea49174acbd82b6c7f70b9addfc560c5d33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;count()&lt;/strong&gt; will now yield a warning on invalid countable types passed to the &lt;code&gt;array_or_countable&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a6a38138399e69e02657d8cfce26b111db9325" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;crypt()&lt;/strong&gt; will return a hashed string using the standard Unix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecb0fcc4baaf3cbcaebe1d45acd6f599790c40b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;curl_reset()&lt;/strong&gt; also resets the URL given as the &lt;a href=&quot;function.curl-init&quot;&gt;curl_init()&lt;/a&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4621cecad83154dd17b05ec7242a02bedc8a1b87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;curl_unescape()&lt;/strong&gt; does not decode plus symbols (+) into spaces. &lt;a href=&quot;function.urldecode&quot;&gt;urldecode()&lt;/a&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e82f5299fff8cf0eb098af2f31f812d021c928" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;date_default_timezone_set()&lt;/strong&gt; sets the default timezone used by all date/time functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b96e8206945d55607e2e3326e7e1f06d6ca93d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;date_sunrise()&lt;/strong&gt; returns the sunrise time for a given day (specified as a &lt;code&gt;timestamp&lt;/code&gt;) and location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4e4abd29194776ed02dfd01621e9b5698abbb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;date_sunset()&lt;/strong&gt; returns the sunset time for a given day (specified as a &lt;code&gt;timestamp&lt;/code&gt;) and location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11576d7c29e0776c2cfd9989f7a3f89835ec265b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_close()&lt;/strong&gt; closes the established database and frees all resources of the specified database handle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f5d47a45cc0705257803c821e1b00ffc01ceac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_delete()&lt;/strong&gt; deletes the specified entry from the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cff80913815575c79607af9ef72827ae1cccd6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_exists()&lt;/strong&gt; checks whether the specified &lt;code&gt;key&lt;/code&gt; exists in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b7f03f595324665eb9ba79802b5a10453d74a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_fetch()&lt;/strong&gt; fetches the data specified by &lt;code&gt;key&lt;/code&gt; from the database specified with &lt;code&gt;handle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b0bccf4462ca7263d36593e4910161b0e384a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_firstkey()&lt;/strong&gt; returns the first key of the database and resets the internal key pointer. This permits a linear search through the whole database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73788b7a26c429ec000286eef0ccd1ff945a1284" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_handlers()&lt;/strong&gt; list all the handlers supported by this extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff10a3ee81a84cd690fa8d7abc1571dfcaa833b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_insert()&lt;/strong&gt; inserts the entry described with &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; into the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64853bbdb7717e45f9c6c210dd7287257bf22528" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_key_split()&lt;/strong&gt; splits a key (string representation) into an array representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b011fbf7426c82bcff4570404ed0e17b25c9093d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_list()&lt;/strong&gt; list all open database files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23118a169b363eac7aff099f45995ce7626f2a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_nextkey()&lt;/strong&gt; returns the next key of the database and advances the internal key pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e4cda5071daf77bd8fdcface8ff2ee9c55990d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_open()&lt;/strong&gt; establishes a database instance for &lt;code&gt;path&lt;/code&gt; with &lt;code&gt;mode&lt;/code&gt; using &lt;code&gt;handler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397c26e8690c9cb35fac082e1d3c696638875c57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_optimize()&lt;/strong&gt; optimizes the underlying database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7991ac5ff473cb38851a626e12ed5c261afe3603" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_popen()&lt;/strong&gt; establishes a persistent database instance for &lt;code&gt;path&lt;/code&gt; with &lt;code&gt;mode&lt;/code&gt; using &lt;code&gt;handler&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3e4e5c2dccba676d01255e21d17cb012bc3904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_replace()&lt;/strong&gt; replaces or inserts the entry described with &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; into the database specified by &lt;code&gt;handle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a90bdb631f9f141bde7e688541c9c07580f24bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dba_sync()&lt;/strong&gt; synchronizes the database. This will probably trigger a physical write to the disk, if supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576ffabe510ecb34db5f10cb8d0930c8494d7cae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;debug_backtrace()&lt;/strong&gt; generates a PHP backtrace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4fd20b012a3cec05eb03969b58b2bdae4cee90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;debug_print_backtrace()&lt;/strong&gt; prints a PHP backtrace. It prints the function calls, included/required files and &lt;a href=&quot;function.eval&quot;&gt;eval()&lt;/a&gt;ed stuff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eafdf3faeb65b42f4f059f8b8a4b4f964d6a1bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dirname()&lt;/strong&gt; is locale aware, so for it to see the correct directory name with multibyte character paths, the matching locale must be set using the &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32303f55a829d4e6fe083111710df16ecd2e9319" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dirname()&lt;/strong&gt; is now binary safe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09f6e1de8dc9112b29d91ac2a3c128c902544e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dirname()&lt;/strong&gt; operates naively on the input string, and is not aware of the actual filesystem, or path components such as &quot;&lt;em&gt;..&lt;/em&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5a45a0d15a1c8a1e2f6550a454fe4ffbee803e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dl()&lt;/strong&gt; is &lt;em&gt;not&lt;/em&gt; supported when PHP is built with ZTS support. Use the &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.extension&quot;&gt;Extension Loading Directives&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb10f47c5d6cc110cb651110377d960e0445aa0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dl()&lt;/strong&gt; is case sensitive on Unix platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f63b532e5dba3ba13806c766274f70d7c3de2d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dl()&lt;/strong&gt; is disabled in PHP-FPM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9592b20d5badb9c08bedcc32d611b39da5394bc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dl()&lt;/strong&gt; is enabled in PHP-FPM, albeit discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a236c6046fb72bef399085b956fe4561c33141c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dl()&lt;/strong&gt; is now disabled in some SAPIs due to stability issues. The only SAPIs that allow &lt;strong&gt;dl()&lt;/strong&gt; are CLI and Embed. Use the &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.extension&quot;&gt;Extension Loading Directives&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e1d5c990536596e6c9dbe9e879ff181f505a20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;dns_get_record()&lt;/strong&gt; only returns Internet class records and as such this parameter will always return &lt;em&gt;IN&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e843a54c21ec48d4cac26abf016e58f3e4226424" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;each()&lt;/strong&gt; is typically used in conjunction with &lt;a href=&quot;function.list&quot;&gt;list()&lt;/a&gt; to traverse an array, here's an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f99417d0a6481a0d02fd33542f3c7f525f5df59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;each()&lt;/strong&gt; will also accept objects, but may return unexpected results. It's therefore not recommended to iterate though object properties with &lt;strong&gt;each()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5741059b89e665577644eb2251a2f0e77985d1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;easter_date()&lt;/strong&gt; relies on your system's C library time functions, rather than using PHP's internal date and time functions. As a consequence, &lt;strong&gt;easter_date()&lt;/strong&gt; uses the &lt;em&gt;TZ&lt;/em&gt; environment variable to determine the time zone it should operate in, rather than using PHP's &lt;a href=&quot;https://secure.php.net/manual/en/datetime.configuration.php#ini.date.timezone&quot;&gt;default time zone&lt;/a&gt;, which may result in unexpected behaviour when using this function in conjunction with other date functions in PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0afc353eb647dfe2aed2aaeee8b871569714630" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_busy()&lt;/strong&gt; artificially increases load taking &lt;code&gt;delay&lt;/code&gt; seconds to execute. May be used for debugging, or benchmarking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13ddfb5884e1f069e2b2010811ba5245006715c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_busy()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f2df3b4824e1228c27346bad4b9d918abeaed7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_cancel()&lt;/strong&gt; cancels a request specified by &lt;code&gt;req&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781c8bc4d55a37db48a978feba2fc3fdbfa86e55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_chmod()&lt;/strong&gt; changes file, or direcrory permissions. The new permissions are specified by &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef81fb0b454f2222865444663adbb90e82f20a81" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_chmod()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a278b7a24aa14149dcf3f1c72086b4f984822d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_chown()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29375b4fc735d2f9a3c0c60545e956a693254d01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_close()&lt;/strong&gt; closes file specified by &lt;code&gt;fd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cd94451408e10a8306e60d5a8059daea23c05a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_close()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ea5ae4f9b294649aa8608b57e8481691f6779a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_custom()&lt;/strong&gt; executes custom function specified by &lt;code&gt;execute&lt;/code&gt; processing it just like any other &lt;em&gt;eio_*&lt;/em&gt; call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be302ad3119566f73f214ae9b2cbe6d68f62c451" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_custom()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd18fb464a1684027c8e11efca2c1df1bced47d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_dup2()&lt;/strong&gt; duplicates file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827b4c6cfb4af71e10fb5db79caf2639efd87de1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_dup2()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba02e60506e3893df77d6d3bf61655d39ceb360a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_event_loop()&lt;/strong&gt; polls libeio until all requests proceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd265106138ffb4ae65ef235423f3d647c30c3c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_event_loop()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffacc8fa64a16cee184b18c119b3d59c6140a366" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fallocate()&lt;/strong&gt; allows the caller to directly manipulate the allocated disk space for the file specified by &lt;code&gt;fd&lt;/code&gt; file descriptor for the byte range starting at &lt;code&gt;offset&lt;/code&gt; and continuing for &lt;code&gt;length&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc6c4d0c21f6ef1b51d6ad2f157097531f6a479" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fallocate()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4963d1cdd099b345b9b1764f67ad6c5983f0c1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fchmod()&lt;/strong&gt; changes permissions for the file specified by &lt;code&gt;fd&lt;/code&gt; file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb3cbf25807cff161ab446def5cad6d3c699de7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fchmod()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e42e0076de72cc5f87c60f1b6b42047b2a14a86" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fchown()&lt;/strong&gt; changes ownership of the file specified by &lt;code&gt;fd&lt;/code&gt; file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeb441ced8aa1158f14f1646ed6d1b96de73a03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fdatasync()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31ef8570b7926d4147febb3be46a024755bd0eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fdatasync()&lt;/strong&gt; synchronizes a file's in-core state with storage device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86b60b03b8da057a635a8fc239f8016f09ae84f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fstat()&lt;/strong&gt; returns file status information in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4a1e8c29476b03a65551eda6ae89f13e9c682a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fstatvfs()&lt;/strong&gt; returns file system statistics in &lt;code&gt;result&lt;/code&gt; of &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc91cafbb93c295a37c318ed520deca018e476d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fstatvfs()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d942e83600601763e13f0507b10604c2667016" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_fsync()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b5f5f6a23cf41a052249c1d785caf83cd89243" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_ftruncate()&lt;/strong&gt; causes a regular file referenced by &lt;code&gt;fd&lt;/code&gt; file descriptor to be truncated to precisely &lt;code&gt;length&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e1110d1e84dc9b1075f87df92f9ac027873ec1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_ftruncate()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0962416a6caae1de9e6f4e5a0e57259f41349630" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_futime()&lt;/strong&gt; changes file last access and modification times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee70d93547751ad398b8af4789ff2a95b947290" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_futime()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36c7941ca68b40a3c3b4fd20c36f9d52ea3a77f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_get_event_stream()&lt;/strong&gt; acquires stream representing a variable used in internal communications with libeio. Could be used to bind with some event loop provided by other PECL extension, for example libevent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3d270b9bf42c17664f9c36d7cb53489d1c391a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_get_event_stream()&lt;/strong&gt; returns stream on success; otherwise, &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2eea775abe47b3d4a07f6ba4566ca37ccf2d00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_get_last_error()&lt;/strong&gt; returns string describing the last error associated with &lt;code&gt;req&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823a67ee8f8f96cc711a482e0d15aeb5645ed529" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_get_last_error()&lt;/strong&gt; returns string describing the last error associated with the request resource specified by &lt;code&gt;req&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dfd426626bf7bcf547d12e80d5b2c0dc1a8c964" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_grp()&lt;/strong&gt; creates a request group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c2d53529a93de49b668ad6c99ab7ce633cf7e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_grp()&lt;/strong&gt; returns request group resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7562d38b8cea3689af44b758ec9f9eefb199dd22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_grp_add()&lt;/strong&gt; adds a request to the request group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e43e2d289ca3d6f95384f47b379b45ad8cce58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_grp_add()&lt;/strong&gt; doesn't return a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72765b93278faee3c581d3f9a745762b817a8d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_grp_cancel()&lt;/strong&gt; cancels a group request specified by &lt;code&gt;grp&lt;/code&gt; request group resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca23aaa9629de08a10a28c7d1c2e77fd4d83031" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_init()&lt;/strong&gt; (re-)initializes Eio. It allocates memory for internal structures of libeio and Eio itself. You may call &lt;strong&gt;eio_init()&lt;/strong&gt; before using Eio functions. Otherwise it will be called internally first time you invoke an Eio function in a process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a852bbe2cda27d7ec0cc7c7c87baa859296ba8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_link()&lt;/strong&gt; creates a hardlink &lt;code&gt;new_path&lt;/code&gt; for a file specified by &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f706cb58d39cf42c209dd8681ec407e4925b4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_lstat()&lt;/strong&gt; returns file status information in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e473728a710a69f21dca19af241302e162ab0489" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_lstat()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab0a760924aa7e6e171f071ddbc167605b92eb68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_mkdir()&lt;/strong&gt; creates directory with specified access &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56fec4af59d1fee7edffe52bc3bf5b212b47e3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_mkdir()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5d8211e2b737cd3c9f4fa964a2079fa9f919f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_mknod()&lt;/strong&gt; creates ordinary or special(often) file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44ef2973495827cac01089d0c229519cbd895af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_mknod()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3642b5790517ed8e1c1771556a48d73d37f2d3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_nop()&lt;/strong&gt; does nothing, except go through the whole request cycle. Could be useful in debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ddfbef239a1c081bac1c84f80b3aa8fc796827" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_nop()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bd1c03156e58af35d10663c0b236c4c65ee00a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_npending()&lt;/strong&gt; returns number of finished, but unhandled requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac76a6ca202983b465d4b87d1fe7b2ee5e09efa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_npending()&lt;/strong&gt; returns number of finished, but unhandled requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4eb9f23434447a67255e3f8927887885806585b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_nready()&lt;/strong&gt; returns number of not-yet handled requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a04a4ee2845c5a1063eea93e75dcda7d6b544d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_nreqs()&lt;/strong&gt; could be called in a custom loop calling &lt;a href=&quot;function.eio-poll&quot;&gt;eio_poll()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f69414d19d006dcec674121687cf7ae37475bef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_nreqs()&lt;/strong&gt; returns number of requests to be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20af5d265b64f5c5a7504081a406a24ddea40ed1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_nthreads()&lt;/strong&gt; returns number of threads currently in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5683e48f7fbc7357334cef2ebe97cb68ccb5a7ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_open()&lt;/strong&gt; opens file specified by &lt;code&gt;path&lt;/code&gt; in access mode &lt;code&gt;mode&lt;/code&gt; with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222a77825df6cb863b06a1bd1d5cf41e8667a608" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_open()&lt;/strong&gt; returns file descriptor in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt; on success; otherwise, &lt;code&gt;result&lt;/code&gt; is equal to &lt;strong&gt;&lt;code&gt;-1&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102b36e72f9c75e9f7d01db9a3324c1a2eab39c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_poll()&lt;/strong&gt; can be used to implement special event loop. For this &lt;a href=&quot;function.eio-nreqs&quot;&gt;eio_nreqs()&lt;/a&gt; could be used to test if there are unprocessed requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11cb03d6e73d819ec5751b082818571fbe1d5281" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_read()&lt;/strong&gt; reads up to &lt;code&gt;length&lt;/code&gt; bytes from &lt;code&gt;fd&lt;/code&gt; file descriptor at &lt;code&gt;offset&lt;/code&gt;. The read bytes are stored in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb38534c7a250d7507733c0bd05242c6fa1b8966" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_read()&lt;/strong&gt; stores read bytes in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c92a0968313f82dacea16e377bb7603698a26f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_readahead()&lt;/strong&gt; populates the page cache with data from a file so that subsequent reads from that file will not block on disk I/O. See &lt;em&gt;READAHEAD(2)&lt;/em&gt; man page for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941467522babf9ecf99f0af465239ecf89e7ea1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_readahead()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a36c035ce2d1c8c1a9ca0a5d5631de9e4ec958f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_readdir()&lt;/strong&gt; flag. If specified, the result argument of the callback becomes an array with the following keys: &lt;em&gt;'names'&lt;/em&gt; - array of directory names &lt;em&gt;'dents'&lt;/em&gt; - array of &lt;em&gt;struct eio_dirent&lt;/em&gt;-like arrays having the following keys each: &lt;em&gt;'name'&lt;/em&gt; - the directory name; &lt;em&gt;'type'&lt;/em&gt; - one of &lt;em&gt;EIO_DT_*&lt;/em&gt; constants; &lt;em&gt;'inode'&lt;/em&gt; - the inode number, if available, otherwise unspecified;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dd32c8c6fa43515b49aa57baff9880c71b9f99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_readdir()&lt;/strong&gt; returns request resource on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error. Sets &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt; function according to &lt;code&gt;flags&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25c73f7166ed9f4ebb2613b6cd3f84ee7fbf56c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_readlink()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a05766bac41a9671ecd1b71f929fc1f8231b6872" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_realpath()&lt;/strong&gt; returns the canonicalized absolute pathname in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087793059a49ad3533876d9ee773436a1dbaf705" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_rename()&lt;/strong&gt; renames or moves a file to new location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e83511438e0874052cd85aa985ed88ea309964d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_rename()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393197395692e25521bed8872cac45c723cc4f2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_rmdir()&lt;/strong&gt; removes a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c06fc4bce062ae4387ecf63ff709905cc58f48a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_rmdir()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296001efa17ffd7a10c91bef037832759d6ad735" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_seek()&lt;/strong&gt; repositions the offset of the open file associated with stream, Socket resource, or file descriptor specified by &lt;code&gt;fd&lt;/code&gt; to the argument &lt;code&gt;offset&lt;/code&gt; according to the directive &lt;code&gt;whence&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d3616456cbe83e2f4b30b90358fe23e9435ec6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_seek()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f74b0d61e9f1f42eb405b1eea484f5bc363a6f07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_sendfile()&lt;/strong&gt; copies data between one file descriptor and another. See &lt;em&gt;SENDFILE(2)&lt;/em&gt; man page for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780474acaf79cfd288b75d04b298a29615830195" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_sendfile()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5ee2375ff677033596c9156af3159541f70e02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_stat()&lt;/strong&gt; returns file status information in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac1a6de571745a6b8f06d16f093803b01d5bc23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_stat()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error. On success assigns &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt; to an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a884485ecfedd16b08773c7ff82bb6973c599cc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_statvfs()&lt;/strong&gt; returns file system statistics information in &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be193881677aebbd01bcc8de5c9958c0288fd99d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_statvfs()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error. On success assigns &lt;code&gt;result&lt;/code&gt; argument of &lt;code&gt;callback&lt;/code&gt; to an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c2e9a52bb52a3ad665f86ef224c1fd6eb8a538" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_symlink()&lt;/strong&gt; creates a symbolic link &lt;code&gt;new_path&lt;/code&gt; to &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9e5d0c2e2270c3f0af7c0a7b6ef6d3c1f189d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_symlink()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956d9ed54943bd2c815d94221c87dea5bbbfb0b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_sync()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90551e3e6c9d65cdff2365f8b1f4b15ed855d38c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_sync_file_range()&lt;/strong&gt; permits fine control when synchronizing the open file referred to by the file descriptor &lt;code&gt;fd&lt;/code&gt; with disk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c856c3ae70355d66e0af9a9db471c5d1a738763e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_sync_file_range()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1622d001bb9841055cd6306a528cd4c646f0f229" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_syncfs()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34332f71b5e840c4dd330a51e34c858601bfbfc1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_truncate()&lt;/strong&gt; causes the regular file named by &lt;code&gt;path&lt;/code&gt; to be truncated to a size of precisely &lt;code&gt;length&lt;/code&gt; bytes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3866b45982b7fe3c3951fb4cc504204a9e8eb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_unlink()&lt;/strong&gt; deletes a name from the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c0b2098c930f2b0db2f997d416b8dfec62c420" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_unlink()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dbb7421e9dff13fd6319e0520bca1bfe50705a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_utime()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ec7f6ed8597070e7753333e815d38c86e23314" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_write()&lt;/strong&gt; returns request resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d46acf27c3951344e60401c3f7d0d37e1015c22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eio_write()&lt;/strong&gt; writes up to &lt;code&gt;length&lt;/code&gt; bytes from &lt;code&gt;str&lt;/code&gt; at &lt;code&gt;offset&lt;/code&gt; offset from the beginning of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96df1c4911d2cb36cbb9c33150cda93e6b44fb51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;empty()&lt;/strong&gt; now supports expressions, rather than only variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5c958bd6ae64a72c9afa36558b45f67f6faa69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;end()&lt;/strong&gt; advances &lt;code&gt;array&lt;/code&gt;'s internal pointer to the last element, and returns its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d16316ecfb73636eced6e80fb6ccfa5ed6196d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;equals()&lt;/strong&gt; is used to determine if two objects are equal. It's guaranteed that the comparing object will be an instance of the same class as the subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca5de8abb74a039254675486ca20400862b7ff2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;error_log()&lt;/strong&gt; is not binary safe. &lt;code&gt;message&lt;/code&gt; will be truncated by null character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea031a8dc71a5fa8a38633ff27da76052afe8cc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;escapeshellarg()&lt;/strong&gt; adds single quotes around a string and quotes/escapes any existing single quotes allowing you to pass a string directly to a shell function and having it be treated as a single safe argument. This function should be used to escape individual arguments to shell functions coming from user input. The shell functions include &lt;a href=&quot;function.exec&quot;&gt;exec()&lt;/a&gt;, &lt;a href=&quot;function.system&quot;&gt;system()&lt;/a&gt; and the &lt;a href=&quot;language.operators.execution&quot;&gt;backtick operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb57c20f7bd15a623406468745a11c08b05ebe4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;escapeshellcmd()&lt;/strong&gt; escapes any characters in a string that might be used to trick a shell command into executing arbitrary commands. This function should be used to make sure that any data coming from user input is escaped before this data is passed to the &lt;a href=&quot;function.exec&quot;&gt;exec()&lt;/a&gt; or &lt;a href=&quot;function.system&quot;&gt;system()&lt;/a&gt; functions, or to the &lt;a href=&quot;language.operators.execution&quot;&gt;backtick operator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793d08dfab85d0c49aedd290bf8b2e9ea19b5992" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;escapeshellcmd()&lt;/strong&gt; should be used on the whole command string, and it still allows the attacker to pass arbitrary number of arguments. For escaping a single argument &lt;a href=&quot;function.escapeshellarg&quot;&gt;escapeshellarg()&lt;/a&gt; should be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566e430b98624f36cdc14fbe8fd56b4ebdb1a898" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ev_depth()&lt;/strong&gt; returns recursion depth of the default loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bc9afcc6f82144d2e416967f89be1daaaa0aaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;eval()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; unless &lt;em&gt;return&lt;/em&gt; is called in the evaluated code, in which case the value passed to &lt;em&gt;return&lt;/em&gt; is returned. As of PHP 7, if there is a parse error in the evaluated code, &lt;strong&gt;eval()&lt;/strong&gt; throws a ParseError exception. Before PHP 7, in this case &lt;strong&gt;eval()&lt;/strong&gt; returned &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; and execution of the following code continued normally. It is not possible to catch a parse error in &lt;strong&gt;eval()&lt;/strong&gt; using &lt;a href=&quot;function.set-error-handler&quot;&gt;set_error_handler()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784fb24bca2e67b2c567b78b711b7530ddd66c68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_base_loop()&lt;/strong&gt; returns 0 on success, -1 on error and 1 if no events were registered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aef4b8b10fbfae1afe829df00cd88dc1975dfe2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_base_loopbreak()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e45f93b39ee12e64031e12a0be4dde5c6242587" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_base_loopexit()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82979fdcd9de92113a38afc44995e40de9f5a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_base_new()&lt;/strong&gt; returns valid event base resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77332c2c2371dd0790c41c31ec5bc376afc7c117" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_base_priority_init()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66dd03af731c03fb240269a948b432277334475" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_base_set()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7acf0f9d97ec525fbf8fca763ec68bfd2ee937e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_buffer_base_set()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b868326161a2acbe61939001c13d7fc70bf2c271" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_buffer_disable()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4056fb5ac9d80abc6337f9fe4ca99695c8ad70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_buffer_enable()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7bd196d559a5da0009d9ed45a9b0264af279dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_buffer_new()&lt;/strong&gt; returns new buffered event resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f326349acc1c80e24dd3ca12b19ea441f49c0e90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_buffer_priority_set()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725c0530f72d4bf2628b823d462c82afa3bdfb34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_buffer_write()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776cb44c7b7c4ae7e524470fd0fc4f4eaf600128" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;event_new()&lt;/strong&gt; returns a new event resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4952de795652cb3d97b93a606743470604b63838" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exec()&lt;/strong&gt; executes the given &lt;code&gt;command&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30516e65d7bfb903501a5b778108ba3e707bd5fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exif_imagetype()&lt;/strong&gt; can be used to avoid calls to other &lt;a href=&quot;https://secure.php.net/manual/en/ref.exif.php&quot;&gt;exif&lt;/a&gt; functions with unsupported file types or in conjunction with &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.server&quot;&gt;$_SERVER['HTTP_ACCEPT']&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; to check whether or not the viewer is able to see a specific image in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6834de99439fbf1274738e6cf82ae15a121a1e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exif_imagetype()&lt;/strong&gt; reads the first bytes of an image and checks its signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcbba82d99c54fd9f518be6d3f44b2c39a7a1ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exif_imagetype()&lt;/strong&gt; will emit an &lt;strong&gt;&lt;code&gt;E_NOTICE&lt;/code&gt;&lt;/strong&gt; and return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if it is unable to read enough bytes from the file to determine the image type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb5d851bc59b9e7737393cf4efd8756c711fc6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exif_read_data()&lt;/strong&gt; also validates EXIF data tags according to the EXIF specification (&lt;a href=&quot;http://exif.org/Exif2-2.PDF&quot;&gt;&amp;raquo; http://exif.org/Exif2-2.PDF&lt;/a&gt;, page 20).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cedfc60a21da0b8d2e9204b6d3eabd9561b11f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exif_read_data()&lt;/strong&gt; reads the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84091d3e764e04fb8bb1b35ff78d5d87b2a6d415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exif_thumbnail()&lt;/strong&gt; reads the embedded thumbnail of an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf3782d16602bbd48835772db3a2899d8cdfe25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;expm1()&lt;/strong&gt; returns the equivalent to 'exp(&lt;code&gt;arg&lt;/code&gt;) - 1' computed in a way that is accurate even if the value of &lt;code&gt;arg&lt;/code&gt; is near zero, a case where 'exp (&lt;code&gt;arg&lt;/code&gt;) - 1' would be inaccurate due to subtraction of two numbers that are nearly equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53acf26da2fae24f3b207c31d03d1b4e0a0b68c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ezmlm_hash()&lt;/strong&gt; calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606c667b081effa67724b00015ec645c04c04216" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fgetcsv()&lt;/strong&gt; is now binary safe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da5af1e15a454146ec07e44fa59e5c50d650424" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fgetcsv()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if an invalid &lt;code&gt;handle&lt;/code&gt; is supplied or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on other errors, including end of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3face333ff320aa94f67accd94786dc0a34dd2e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fgets()&lt;/strong&gt; is now binary safe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0ce9b57ad8a1706b4af5986f7cab56b77fe230" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file()&lt;/strong&gt; became binary safe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763249c6973eafaa6c70e8567a881bc900c295ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;file_get_contents()&lt;/strong&gt; is the preferred way to read the contents of a file into a string. It will use memory mapping techniques if supported by your OS to enhance performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1db5f2736099f41a4a2c559f1d62e0313cdba6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;finfo&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61740e18e2f7c84fd2734d687761697bdfe5e0cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flock()&lt;/strong&gt; allows you to perform a simple reader/writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0064089b73237516e83160523685ac0cebee108d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flock()&lt;/strong&gt; is not supported on antiquated filesystems like &lt;em&gt;FAT&lt;/em&gt; and its derivates and will therefore always return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; under these environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f8dbe0b8afa4ed86dabb3f802e6b87c6baa510" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flock()&lt;/strong&gt; uses mandatory locking instead of advisory locking on Windows. Mandatory locking is also supported on Linux and System V based operating systems via the usual mechanism supported by the fcntl() system call: that is, if the file in question has the setgid permission bit set and the group execution bit cleared. On Linux, the file system will also need to be mounted with the mand option for this to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6ab5eebe5188c26b2ddba0e26f86e33b13104e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;flush()&lt;/strong&gt; may not be able to override the buffering scheme of your web server and it has no effect on any client-side buffering in the browser. It also doesn't affect PHP's userspace output buffering mechanism. This means you will have to call both &lt;a href=&quot;function.ob-flush&quot;&gt;ob_flush()&lt;/a&gt; and &lt;strong&gt;flush()&lt;/strong&gt; to flush the ob output buffers if you are using those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5de97460021c107615ad1dc5ae4d4d117ccb2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fnmatch()&lt;/strong&gt; checks if the passed &lt;code&gt;string&lt;/code&gt; would match the given shell wildcard &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16aac123f05c8511d66fd9304ddf3482b77c1435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fopen()&lt;/strong&gt; binds a named resource, specified by &lt;code&gt;filename&lt;/code&gt;, to a stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36364b15cc6ffaf136b0c58a527bb2f1d0a3538f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fputcsv()&lt;/strong&gt; formats a line (passed as a &lt;code&gt;fields&lt;/code&gt; array) as CSV and write it (terminated by a newline) to the specified file &lt;code&gt;handle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb6077ce99b35c95b233266a0e33484bc22bff5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fread()&lt;/strong&gt; reads up to &lt;code&gt;length&lt;/code&gt; bytes from the file pointer referenced by &lt;code&gt;handle&lt;/code&gt;. Reading stops as soon as one of the following conditions is met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2be08437ed3b54f836df36af6ec4af907f46dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fsockopen()&lt;/strong&gt; returns a file pointer which may be used together with the other file functions (such as &lt;a href=&quot;function.fgets&quot;&gt;fgets()&lt;/a&gt;, &lt;a href=&quot;function.fgetss&quot;&gt;fgetss()&lt;/a&gt;, &lt;a href=&quot;function.fwrite&quot;&gt;fwrite()&lt;/a&gt;, &lt;a href=&quot;function.fclose&quot;&gt;fclose()&lt;/a&gt;, and &lt;a href=&quot;function.feof&quot;&gt;feof()&lt;/a&gt;). If the call fails, it will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00390b377f4e87d7ef9ab5b3bfca22b6f76f07c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_close()&lt;/strong&gt; closes the given link identifier and releases the &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c2d19890aa7315c3fa23aedb3c9ffb3388ddf6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_connect()&lt;/strong&gt; opens an FTP connection to the specified &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626c7ccd3ed06fbbc46fc8049c2cb4bd92a47744" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_delete()&lt;/strong&gt; deletes the file specified by &lt;code&gt;path&lt;/code&gt; from the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac47c7a9b437b114ea019d6c6e1162cdeaa70b3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_fget()&lt;/strong&gt; retrieves &lt;code&gt;remote_file&lt;/code&gt; from the FTP server, and writes it to the given file pointer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8033e400593f485cdef2cec16affc9c49e239bb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_fput()&lt;/strong&gt; uploads the data from a file pointer to a remote file on the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c7cb40fee5f50a80caf6888afa522e691642f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_get()&lt;/strong&gt; retrieves a remote file from the FTP server, and saves it into a local file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab44b8cbaa9939e35f02565945b6d2a12d2e68fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_mdtm()&lt;/strong&gt; does not work with directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9d7145952014733ab481d067abeb65b8ce708e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_mdtm()&lt;/strong&gt; gets the last modified time for a remote file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d8604921e3fc7254bf510fcddaf6608aea540b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_nb_fget()&lt;/strong&gt; retrieves a remote file from the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bc6d5c193f4cfb9bfe8e8b3b67e3f56be68094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_nb_fput()&lt;/strong&gt; uploads the data from a file pointer to a remote file on the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a123de986676efb8c61b4f1c1efc3ff5043899" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_nb_get()&lt;/strong&gt; retrieves a remote file from the FTP server, and saves it into a local file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655457c2dc80f93387b20544352ace3fa410804f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_nb_put()&lt;/strong&gt; stores a local file on the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116ba908fdc9dadc53a74e82f7f09ca58f8e0d4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_pasv()&lt;/strong&gt; turns on or off passive mode. In passive mode, data connections are initiated by the client, rather than by the server. It may be needed if the client is behind firewall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15066cd3a940b7752a7d5c3623d10e275b6016c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_put()&lt;/strong&gt; stores a local file on the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d79fe096fac9591c9250994c420522369ea864e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_rawlist()&lt;/strong&gt; executes the FTP &lt;strong&gt;LIST&lt;/strong&gt; command, and returns the result as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2084015847f34bf6a479331076e36d62bc97b04" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_rename()&lt;/strong&gt; renames a file or a directory on the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7b4afab189b043682e3bdb3f124b456238a73b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_site()&lt;/strong&gt; sends the given &lt;em&gt;SITE&lt;/em&gt; command to the FTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dda36e4bdb689dcb2e3a4aa1e2c581e36eb7ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_size()&lt;/strong&gt; returns the size of the given file in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d20757593ac77a2255d78a411069fa5a9512be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_ssl_connect()&lt;/strong&gt; is not intended for use with sFTP. To use sFTP with PHP, please see &lt;a href=&quot;function.ssh2-sftp&quot;&gt;ssh2_sftp()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b023579d44a48adcfac6777a6823c0058590d00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_ssl_connect()&lt;/strong&gt; is only available if both the ftp module and the &lt;a href=&quot;https://secure.php.net/manual/en/ref.openssl.php&quot;&gt;OpenSSL&lt;/a&gt; support is built statically into php, this means that on Windows this function will be undefined in the official PHP builds. To make this function available on Windows you must compile your own PHP binaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a1e5f322b9359d3b05d90169b2825c1dd548da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ftp_ssl_connect()&lt;/strong&gt; opens an &lt;em&gt;explicit&lt;/em&gt; SSL-FTP connection to the specified &lt;code&gt;host&lt;/code&gt;. That implies that &lt;strong&gt;ftp_ssl_connect()&lt;/strong&gt; will succeed even if the server is not configured for SSL-FTP, or its certificate is invalid. Only when &lt;a href=&quot;function.ftp-login&quot;&gt;ftp_login()&lt;/a&gt; is called, the client will send the appropriate AUTH FTP command, so &lt;a href=&quot;function.ftp-login&quot;&gt;ftp_login()&lt;/a&gt; will fail in the mentioned cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae4f08fa117a5ffa2679df7103842b2e50c3732" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fwrite()&lt;/strong&gt; returns the number of bytes written, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb40082c5406dfecbc8079bb3f31dacbe9540055" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;fwrite()&lt;/strong&gt; writes the contents of &lt;code&gt;string&lt;/code&gt; to the file stream pointed to by &lt;code&gt;handle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4dfd6edf15601d8d9cb8d83f21b5fddf561134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get()&lt;/strong&gt; is O(n) if there are deleted values in the buffer before the accessed index, O(1) otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bdd837755799e84fdb7f3773c2b2c285b5fa0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get()&lt;/strong&gt;, &lt;strong&gt;set()&lt;/strong&gt;, &lt;strong&gt;push()&lt;/strong&gt;, &lt;strong&gt;pop()&lt;/strong&gt; are all O(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95381d5aad2dde723d25859dd56b42eeabbf24ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get()&lt;/strong&gt;, &lt;strong&gt;set()&lt;/strong&gt;, &lt;strong&gt;push()&lt;/strong&gt;, &lt;strong&gt;pop()&lt;/strong&gt;, &lt;strong&gt;shift()&lt;/strong&gt;, and &lt;strong&gt;unshift()&lt;/strong&gt; are all O(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96388ff1814ec36ac58074d797b615d198b20f16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_cfg_var()&lt;/strong&gt; was fixed to be able to return &quot;array&quot; ini options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfebda71d3fb463b72e7d467eeaf46f7c4db0215" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_class_vars()&lt;/strong&gt; will only return the properties that can be accessed from the current scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bfb752c8480802e223e1e54ca52d240937c95e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_headers()&lt;/strong&gt; returns an array with the headers sent by the server in response to a HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c642cb15579a0b73db0ee4512157ee0765eff405" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;get_html_translation_table()&lt;/strong&gt; will return the translation table that is used internally for &lt;a href=&quot;function.htmlspecialchars&quot;&gt;htmlspecialchars()&lt;/a&gt; and &lt;a href=&quot;function.htmlentities&quot;&gt;htmlentities()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857050a08a89b1cefcfaebc1fc3067b9630f0fac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gethostname()&lt;/strong&gt; gets the standard host name for the local machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d23e580c5b6e22963242304b2eb2d81628a537a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getimagesize()&lt;/strong&gt; can also return some more information in &lt;code&gt;imageinfo&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423d5642e943614754d6e21a94c26def7b183e69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getprotobyname()&lt;/strong&gt; returns the protocol number associated with the protocol &lt;code&gt;name&lt;/code&gt; as per &lt;var&gt;/etc/protocols&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c152994aefee8b3ef606a1ef537694bb3a225c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getprotobynumber()&lt;/strong&gt; returns the protocol name associated with protocol &lt;code&gt;number&lt;/code&gt; as per &lt;var&gt;/etc/protocols&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba98e8c1b5e7846ffe7a8c7608b39b1b7696ad95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getservbyname()&lt;/strong&gt; returns the Internet port which corresponds to &lt;code&gt;service&lt;/code&gt; for the specified &lt;code&gt;protocol&lt;/code&gt; as per &lt;var&gt;/etc/services&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d058f914e6b03bee97aba9db45d314777700e62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getservbyport()&lt;/strong&gt; returns the Internet service associated with &lt;code&gt;port&lt;/code&gt; for the specified &lt;code&gt;protocol&lt;/code&gt; as per &lt;var&gt;/etc/services&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf4061d8187090ba4073bdfcf48ce3b9f81cd6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gzopen()&lt;/strong&gt; can be used to read a file which is not in gzip format; in this case &lt;a href=&quot;function.gzread&quot;&gt;gzread()&lt;/a&gt; will directly read from the file without decompression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e42c6047b087b798ae17f151ed3b1bfa40560c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gzread()&lt;/strong&gt; reads up to &lt;code&gt;length&lt;/code&gt; bytes from the given gz-file pointer. Reading stops when &lt;code&gt;length&lt;/code&gt; (uncompressed) bytes have been read or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af8fb754da2d5793591a38968204d7863ade805a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gzwrite()&lt;/strong&gt; writes the contents of &lt;code&gt;string&lt;/code&gt; to the given gz-file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="661a6719f4e5b777b1c7638404970340144fe723" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header()&lt;/strong&gt; is used to send a raw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21c950afb5ec9b041779a600ec78d17dcefc917" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header_register_callback()&lt;/strong&gt; is executed just as the headers are about to be sent out, so any output from this function can break output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d21d062b4720e632107c9a248a35ad3d8209f96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers_list()&lt;/strong&gt; will return a list of headers to be sent to the browser / client. To determine whether or not these headers have been sent yet, use &lt;a href=&quot;function.headers-sent&quot;&gt;headers_sent()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09460a8c21ebb7d23fce53bb1c9585c2ae2f316" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;headers_sent()&lt;/strong&gt; will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if no HTTP headers have already been sent or &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5680e57823983df12a4a8bdeb65510552bf1bad8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hexdec()&lt;/strong&gt; will ignore any non-hexadecimal characters it encounters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d711eb0daeec999d6c6bde3bb6da6bfb340673e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;html_entity_decode()&lt;/strong&gt; is the opposite of &lt;a href=&quot;function.htmlentities&quot;&gt;htmlentities()&lt;/a&gt; in that it converts HTML entities in the &lt;code&gt;string&lt;/code&gt; to their corresponding characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f4c93cba4d1827fc1316f971b20a3b95c437af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hypot()&lt;/strong&gt; returns the length of the hypotenuse of a right-angle triangle with sides of length &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, or the distance of the point (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) from the origin. This is equivalent to &lt;em&gt;sqrt(x*x + y*y)&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4619d07730528a9ff3bc13ee91ce6c8abc4af97d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ibase_blob_add()&lt;/strong&gt; adds data into a blob created with &lt;a href=&quot;function.ibase-blob-create&quot;&gt;ibase_blob_create()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98af3500a3e76416b3fa9d4491c6da0d8c1f78c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ibase_blob_create()&lt;/strong&gt; creates a new BLOB for filling with data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee053d26b38721cb15ce7970b428e48714893b62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ibase_fetch_assoc()&lt;/strong&gt; fetches one row of data from the &lt;code&gt;result&lt;/code&gt;. If two or more columns of the result have the same field names, the last column will take precedence. To access the other column(s) of the same name, you either need to access the result with numeric indices by using &lt;a href=&quot;function.ibase-fetch-row&quot;&gt;ibase_fetch_row()&lt;/a&gt; or use alias names in your query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ec885a5249abae638f75993e0136a0b8280a33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ibase_fetch_row()&lt;/strong&gt; fetches one row of data from the given result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a21f7db05c6d8b20c61a33a9d88baa97892557" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ibase_pconnect()&lt;/strong&gt; acts very much like &lt;a href=&quot;function.ibase-connect&quot;&gt;ibase_connect()&lt;/a&gt; with two major differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01be4f9f514652b77da38ae40b74b78d75107e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;image2wbmp()&lt;/strong&gt; is deprecated as of PHP 7.3.0, and will be removed in the next major version. Use &lt;a href=&quot;function.imagewbmp&quot;&gt;imagewbmp()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e08a6c5bd729caabb55f84d4c1e5eadddeea87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;image2wbmp()&lt;/strong&gt; outputs or save a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e5b2877d15b786bd97f63a48b969bdb3738d69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagealphablending()&lt;/strong&gt; allows for two different modes of drawing on truecolor images. In blending mode, the alpha channel component of the color supplied to all drawing function, such as &lt;a href=&quot;function.imagesetpixel&quot;&gt;imagesetpixel()&lt;/a&gt; determines how much of the underlying color should be allowed to shine through. As a result, gd automatically blends the existing color at that point with the drawing color, and stores the result in the image. The resulting pixel is opaque. In non-blending mode, the drawing color is copied literally with its alpha channel information, replacing the destination pixel. Blending mode is not available when drawing on palette images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5f9fd03e829ee60e7636cde981aa6e66c16eee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageantialias()&lt;/strong&gt; is now generally available. Formerly it was only available if PHP was compiled with the bundled version of the GD library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e1e053fddea89f719ff18fc83095b8fc373850" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagearc()&lt;/strong&gt; draws an arc of circle centered at the given coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7b7e4fe7a6150d12fc9c7de9cb18975b26d76c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagechar()&lt;/strong&gt; draws the first character of &lt;code&gt;c&lt;/code&gt; in the image identified by &lt;code&gt;image&lt;/code&gt; with its upper-left at &lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; (top left is 0, 0) with the color &lt;code&gt;color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5a9e5ce936c3f0e05ba370437b5861b66c3dd6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecolorallocate()&lt;/strong&gt; must be called to create each color that is to be used in the image represented by &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537350bac1a7a433bbcd8eb69c6a782e18a3dbaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecolorallocatealpha()&lt;/strong&gt; behaves identically to &lt;a href=&quot;function.imagecolorallocate&quot;&gt;imagecolorallocate()&lt;/a&gt; with the addition of the transparency parameter &lt;code&gt;alpha&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3d1b8f6e484289b7cca206fd1ac5f1f5ed24f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecopymergegray()&lt;/strong&gt; copy a part of &lt;code&gt;src_im&lt;/code&gt; onto &lt;code&gt;dst_im&lt;/code&gt; starting at the x,y coordinates &lt;code&gt;src_x&lt;/code&gt;, &lt;code&gt;src_y &lt;/code&gt; with a width of &lt;code&gt;src_w&lt;/code&gt; and a height of &lt;code&gt;src_h&lt;/code&gt;. The portion defined will be copied onto the x,y coordinates, &lt;code&gt;dst_x&lt;/code&gt; and &lt;code&gt;dst_y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a022a602cababf7d4ffc1a7cebbc67cef136eca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecopyresampled()&lt;/strong&gt; copies a rectangular portion of one image to another image, smoothly interpolating pixel values so that, in particular, reducing the size of an image still retains a great deal of clarity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd4a308c74c6b804e2aaf8e264f70f97908d970" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecopyresized()&lt;/strong&gt; copies a rectangular portion of one image to another image. &lt;code&gt;dst_image&lt;/code&gt; is the destination image, &lt;code&gt;src_image&lt;/code&gt; is the source image identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48463c947d9a1638fa45270a9316f5818a18517e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreate()&lt;/strong&gt; returns an image identifier representing a blank image of specified size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2be7a8d71a8774d9434b3222e9655ef4e514bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefrombmp()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3f08c38a110e9cf26849637130e497f348f1b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromgif()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49429c95866ce11152c7cacca43137b58a9de98c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromjpeg()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242db181de309c361be7f51dbfed21b51f2dc3bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefrompng()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbb5b76bfbf839e9f53c7184ca019be5600e538" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromstring()&lt;/strong&gt; raises an E_WARNING level error, if the data is not in a recognized format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f14ec91d1c377b39c003e499f4f5a88e17c8aa7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromstring()&lt;/strong&gt; returns an image identifier representing the image obtained from the given &lt;code&gt;image&lt;/code&gt;. These types will be automatically detected if your build of PHP supports them: JPEG, PNG, GIF, BMP, WBMP, and GD2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2057d4d3efb22d70a89d0172d8c18e801bcd6d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromwbmp()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0c78cbd42d2e594a702bf216717c88cc270a24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromwebp()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761648d0b60d7b393d0054f30ac0e5c52b39eced" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromxbm()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d2a002c8cb6f15e65da483d7e389177c63da6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromxpm()&lt;/strong&gt; is available on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d5a7b50d081dfd40dd9c349ec70f27a17f7c28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatefromxpm()&lt;/strong&gt; returns an image identifier representing the image obtained from the given filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5578394d9edbdc49faae2ace53116d46e9f4a432" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagecreatetruecolor()&lt;/strong&gt; returns an image identifier representing a black image of the specified size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539160f8c99f78b8e3f6e0b2f34cceaf21a2449f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagedestroy()&lt;/strong&gt; frees any memory associated with image &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71cb37b2495f21fc5e5c81f4ddb4daee1b7a2af7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageellipse()&lt;/strong&gt; ignores &lt;a href=&quot;function.imagesetthickness&quot;&gt;imagesetthickness()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c91331cb482497a1405fd935e0d05bbe68fc8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagefilledellipse()&lt;/strong&gt; ignores &lt;a href=&quot;function.imagesetthickness&quot;&gt;imagesetthickness()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e77112933bd7a8d630911a53046addd8bdcdb20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagefilledpolygon()&lt;/strong&gt; creates a filled polygon in the given &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bd079b572292171714d0d3cbdacedf1362766f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagefilltoborder()&lt;/strong&gt; performs a flood fill whose border color is defined by &lt;code&gt;border&lt;/code&gt;. The starting point for the fill is &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; (top left is 0, 0) and the region is filled with color &lt;code&gt;color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b45a6add2fd2eab4d6c41e70eacbdf7cb808282" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagefilter()&lt;/strong&gt; applies the given filter &lt;code&gt;filtertype&lt;/code&gt; on the &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877f90c76ba4fb4d3a4c9d4b6b0881ff42528090" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageftbbox()&lt;/strong&gt; is an extended variant of &lt;a href=&quot;function.imagettfbbox&quot;&gt;imagettfbbox()&lt;/a&gt; which additionally supports the &lt;code&gt;extrainfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282d1e49b50a0df01281d06a5d2f4c30aa5d3dd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageftbbox()&lt;/strong&gt; returns an array with 8 elements representing four points making the bounding box of the text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112c57a71e95b3ed52b4ad04a2d1e0d7870f87c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagefttext()&lt;/strong&gt; is an extended variant of &lt;a href=&quot;function.imagettftext&quot;&gt;imagettftext()&lt;/a&gt; which additionally supports the &lt;code&gt;extrainfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf943dd151664ed9fccf47d5ea3bec64bc240b30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagegd()&lt;/strong&gt; now allows to output truecolor images. Formerly, these have been implicitly converted to palette.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e330087a0ce78bbd4d4baabcfe6a55270c5fc2b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagegetclip()&lt;/strong&gt; retrieves the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ae5424f98b0169cd4670547a843bf722ffafef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagegif()&lt;/strong&gt; creates the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5aff403dd5370edfcc9f7966cc649e8e3c41afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageinterlace()&lt;/strong&gt; turns the interlace bit on or off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0806ba956f442ec16fb0da63461c0492beed8ca5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageistruecolor()&lt;/strong&gt; finds whether the image &lt;code&gt;image&lt;/code&gt; is a truecolor image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825fd63f98e3d42b4565f08acb68757b1cbf5d3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagejpeg()&lt;/strong&gt; creates a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7d86735145f9f10d70e2ed5ab59866c7f368c87" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageloadfont()&lt;/strong&gt; loads a user-defined bitmap and returns its identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e72356dc1d0e192908a6ba9aed70a90609ae4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageopenpolygon()&lt;/strong&gt; draws an open polygon on the given &lt;code&gt;image&lt;/code&gt;. Contrary to &lt;a href=&quot;function.imagepolygon&quot;&gt;imagepolygon()&lt;/a&gt;, no line is drawn between the last and the first point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1fa3a1070fc9b6a4e090743c9956a2da7a7c72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagepalettecopy()&lt;/strong&gt; copies the palette from the &lt;code&gt;source&lt;/code&gt; image to the &lt;code&gt;destination&lt;/code&gt; image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac058ff5bee6f94840fc8f581714fc65a6de3d90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagepolygon()&lt;/strong&gt; creates a polygon in the given &lt;code&gt;image&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e535d382d5fb87f40eb36dd7ed074e4fd8d56d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagepsfreefont()&lt;/strong&gt; frees memory used by a PostScript Type 1 font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="270c7469606803d79e0a27c3b5ce839eda9b98df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagerectangle()&lt;/strong&gt; creates a rectangle starting at the specified coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ee68a7ad76c08fb104f5c02a7f39adcdda90dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imageresolution()&lt;/strong&gt; allows to set and get the resolution of an image in DPI (dots per inch). If none of the optional parameters is given, the current resolution is returned as indexed array. If only &lt;code&gt;res_x&lt;/code&gt; is given, the horizontal and vertical resolution are set to this value. If both optional parameters are given, the horizontal and vertical resolution are set to these values, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461627ce10841e2d247a1b576f82860ea5e87cb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesavealpha()&lt;/strong&gt; sets the flag to attempt to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e2d3b2569831ac3d4ca6308948b873d77ff094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagescale()&lt;/strong&gt; scales an image using the given interpolation algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d15aa5ec0fd7b14d372bf7c4c96fd41ed846aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesetbrush()&lt;/strong&gt; sets the brush image to be used by all line drawing functions (such as &lt;a href=&quot;function.imageline&quot;&gt;imageline()&lt;/a&gt; and &lt;a href=&quot;function.imagepolygon&quot;&gt;imagepolygon()&lt;/a&gt;) when drawing with the special colors &lt;strong&gt;&lt;code&gt;IMG_COLOR_BRUSHED&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;IMG_COLOR_STYLEDBRUSHED&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b18cdc3d1421829eff3caa301cae122ffe32c2a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesetclip()&lt;/strong&gt; sets the current clipping rectangle, i.e. the area beyond which no pixels will be drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a280e3fb74abf55c5bd5bd0a18e38770c1d2f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesetpixel()&lt;/strong&gt; draws a pixel at the specified coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2502eb2af3e460547f4ac86c1ce6ee3b002511" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesetstyle()&lt;/strong&gt; sets the style to be used by all line drawing functions (such as &lt;a href=&quot;function.imageline&quot;&gt;imageline()&lt;/a&gt; and &lt;a href=&quot;function.imagepolygon&quot;&gt;imagepolygon()&lt;/a&gt;) when drawing with the special color &lt;strong&gt;&lt;code&gt;IMG_COLOR_STYLED&lt;/code&gt;&lt;/strong&gt; or lines of images with color &lt;strong&gt;&lt;code&gt;IMG_COLOR_STYLEDBRUSHED&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f569f3f0a97da4d780fc59205ccc35ba9c1541c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesetthickness()&lt;/strong&gt; sets the thickness of the lines drawn when drawing rectangles, polygons, arcs etc. to &lt;code&gt;thickness&lt;/code&gt; pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e8ae850dc63c2686f01eb4db2fa1a2b4af70fca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagesettile()&lt;/strong&gt; sets the tile image to be used by all region filling functions (such as &lt;a href=&quot;function.imagefill&quot;&gt;imagefill()&lt;/a&gt; and &lt;a href=&quot;function.imagefilledpolygon&quot;&gt;imagefilledpolygon()&lt;/a&gt;) when filling with the special color &lt;strong&gt;&lt;code&gt;IMG_COLOR_TILED&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5d83269328db65973ea8c1666765c740e9b4fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagetruecolortopalette()&lt;/strong&gt; converts a truecolor image to a palette image. The code for this function was originally drawn from the Independent JPEG Group library code, which is excellent. The code has been modified to preserve as much alpha channel information as possible in the resulting palette, in addition to preserving colors as well as possible. This does not work as well as might be hoped. It is usually best to simply produce a truecolor output image instead, which guarantees the highest output quality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e60becf1ceb99beeb21056f8cf32442705ec1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagettfbbox()&lt;/strong&gt; returns an array with 8 elements representing four points making the bounding box of the text on success and &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecde548ee723101b049793ad76f1a8e88bc47224" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imagewbmp()&lt;/strong&gt; outputs or save a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80927bcef06d6d11e4e15c44621961b35256ac1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imap_body()&lt;/strong&gt; returns the body of the message, numbered &lt;code&gt;msg_number&lt;/code&gt; in the current mailbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0262b36347c879b76e51cc5362c1cf2d9faec01a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imap_body()&lt;/strong&gt; will only return a verbatim copy of the message body. To extract single parts of a multipart MIME-encoded message you have to use &lt;a href=&quot;function.imap-fetchstructure&quot;&gt;imap_fetchstructure()&lt;/a&gt; to analyze its structure and &lt;a href=&quot;function.imap-fetchbody&quot;&gt;imap_fetchbody()&lt;/a&gt; to extract a copy of a single body component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a00c27521963670d637282cf6e452622b62040a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imap_mail_move()&lt;/strong&gt; will flag the original mail with a delete flag, to successfully delete it a call to the &lt;a href=&quot;function.imap-expunge&quot;&gt;imap_expunge()&lt;/a&gt; function must be made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dae46be916071205fd38e113959be8cad70e90a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imap_ping()&lt;/strong&gt; pings the stream to see if it's still active. It may discover new mail; this is the preferred method for a periodic &quot;new mail check&quot; as well as a &quot;keep alive&quot; for servers which have inactivity timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d8757e52d5adb71f5f9a5e6504c46bcaa5bee1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;imap_thread()&lt;/strong&gt; returns an associative array containing a tree of messages threaded by &lt;em&gt;REFERENCES&lt;/em&gt;, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9106bc5cf5ba61693aec239270995a9f5185bbd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;implode()&lt;/strong&gt; can, for historical reasons, accept its parameters in either order. For consistency with &lt;a href=&quot;function.explode&quot;&gt;explode()&lt;/a&gt;, however, it may be less confusing to use the documented order of arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a21556cfda6cce269ea69a37ff1396b88181ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ini_get()&lt;/strong&gt; can't read &quot;array&quot; ini options such as pdo.dsn.*, and returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493a7d2bccdc0d8c2c54e13318a2eb6f89186b11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ini_get_all()&lt;/strong&gt; ignores &quot;array&quot; ini options such as pdo.dsn.*.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69a5b76ae5a215417a7d151881249bffec4c4ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;inotify_add_watch()&lt;/strong&gt; adds a new watch or modify an existing watch for the file or directory specified in &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b313816f66f609211385bbe08c77160265f6d7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;inotify_rm_watch()&lt;/strong&gt; removes the watch &lt;code&gt;watch_descriptor&lt;/code&gt; from the inotify instance &lt;code&gt;inotify_instance&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592e5fd3eaf7a1625fdd54b8782be1cf7dbd9a3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;insert()&lt;/strong&gt; and &lt;strong&gt;remove()&lt;/strong&gt; are O(n).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad01b298eac2d5f105f53d0a3f949748c5307837" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ip2long()&lt;/strong&gt; will also work with non-complete IP addresses. Read &lt;a href=&quot;http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm&quot;&gt;&amp;raquo; http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e211372d597f5b1c157fe664d344c496aad691d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ip2long()&lt;/strong&gt; will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; for the IP &lt;em&gt;255.255.255.255&lt;/em&gt; in PHP 5 &amp;lt;= 5.0.2, and &lt;em&gt;-1&lt;/em&gt; on 64-bits systems in PHP 5 &amp;lt;=5.2.4. It was fixed in PHP 5.2.5 where it returns &lt;em&gt;4294967295&lt;/em&gt;. 32-bit systems will return &lt;em&gt;-1&lt;/em&gt; due to the integer value overflowing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02ed65d10f41cacacbb52b6ae318c635f8e219d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_countable()&lt;/strong&gt; has been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d108c5e0f154ee84c649817c7bb7feb46a5eca8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_object()&lt;/strong&gt; now returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; for unserialized objects without a class definition (class of &lt;strong&gt;__PHP_Incomplete_Class&lt;/strong&gt;). Previously &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; was returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca84e2665cf1adda512588949023f9fc7bd2bc5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_resource()&lt;/strong&gt; is not a strict type-checking method: it will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if &lt;code&gt;var&lt;/code&gt; is a resource variable that has been closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cfe65189b86cae72b72a8d6947c7d5a74f89bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_scalar()&lt;/strong&gt; does not consider &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt; type values to be scalar as resources are abstract datatypes which are currently based on integers. This implementation detail should not be relied upon, as it may change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0edb6b020612aa7e0ffd8945701d547f494ec4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;is_scalar()&lt;/strong&gt; does not consider NULL to be scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f8b6eb06f2a33ca644be5777f15063506e3ebe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isset()&lt;/strong&gt; only works with variables as passing anything else will result in a parse error. For checking if &lt;a href=&quot;language.constants&quot;&gt;constants&lt;/a&gt; are set use the &lt;a href=&quot;function.defined&quot;&gt;defined()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f72c2374d889e0d62c19132a226e2009ca1d9d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;iterator_to_array()&lt;/strong&gt; gained support for key types other than &lt;a href=&quot;language.types.integer&quot;&gt;integer&lt;/a&gt; and &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; when the &lt;code&gt;use_keys&lt;/code&gt; parameter is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6945632abcd7a5565bedb40c7e3f82c3479275" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;jpeg2wbmp()&lt;/strong&gt; has been deprecated as of PHP 7.2.0, and will be removed as of PHP 8.0.0. Use &lt;a href=&quot;function.imagecreatefromjpeg&quot;&gt;imagecreatefromjpeg()&lt;/a&gt; and &lt;a href=&quot;function.imagewbmp&quot;&gt;imagewbmp()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="432037113f74b7c62a9654dafba6bb16e0da068e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;judy_type()&lt;/strong&gt; return an integer corresponding to the Judy &lt;a href=&quot;class.judy#judy.types&quot;&gt;type&lt;/a&gt; of the specified Judy &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0037e6e21251b2409b167d95effcf8a19bf47e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key()&lt;/strong&gt; returns the index element of the current array position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072b57dc4c178789ab5d4f89551453d3549fa5ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;lcg_value()&lt;/strong&gt; returns a pseudo random number in the range of (0, 1). The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249. The period of this function is equal to the product of both primes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23db4ab469357401dc6829bfdbb177dba7a4dad5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ldap_compare()&lt;/strong&gt; can NOT be used to compare BINARY values!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba06ff6c537acc2513c88cbbc95cb504ff9faccd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ldap_sasl_bind()&lt;/strong&gt; requires</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38efcb17f86dbcca3db499941c953a6faec90f5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;libXMLError&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6d7d145cc19dec642a44ebef23ff978bc5b171" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;libxml_clear_errors()&lt;/strong&gt; clears the libxml error buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c04e1e0e6339e4f124b2e3dacf3e55605e714d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;libxml_use_internal_errors()&lt;/strong&gt; allows you to disable standard libxml errors and enable user error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924d7f073d135bcb48694093c05f9aa1e8b26d18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;link()&lt;/strong&gt; creates a hard link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9649c45cb9138f2f747bbe5b5fdf88b2b16847b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;linkinfo()&lt;/strong&gt; returns the &lt;em&gt;st_dev&lt;/em&gt; field of the Unix C stat structure returned by the &lt;em&gt;lstat&lt;/em&gt; system call. Returns 0 or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; in case of error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cae78f343a604526f6b041b554c418dfac0e7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;list()&lt;/strong&gt; expressions can no longer be completely empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad30e22c7451282e1ce31614b9b1efb59aebcf2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;localeconv()&lt;/strong&gt; returns data based upon the current locale as set by &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt;. The associative array that is returned contains the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3964233a10ca60a465465fe95ec8b97e21cdf92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;log1p()&lt;/strong&gt; returns log(1 + &lt;code&gt;number&lt;/code&gt;) computed in a way that is accurate even when the value of &lt;code&gt;number&lt;/code&gt; is close to zero. &lt;a href=&quot;function.log&quot;&gt;log()&lt;/a&gt; might only return log(1) in this case due to lack of precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82f146d7667139791e86268517aea4649c618fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;max()&lt;/strong&gt; returns the parameter value considered &quot;highest&quot; according to standard comparisons. If multiple values of different types evaluate as equal (e.g. &lt;em&gt;0&lt;/em&gt; and &lt;em&gt;'abc'&lt;/em&gt;) the first provided to the function will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583dc2b78d3f53d1f469950ab5646809bde29a17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_convert_variables()&lt;/strong&gt; join strings in Array or Object to detect encoding, since encoding detection tends to fail for short strings. Therefore, it is impossible to mix encoding in single array or object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fee877aa58f5ebd310f0e67d80d10010879bf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_ereg()&lt;/strong&gt; will now set &lt;code&gt;regs&lt;/code&gt; to an empty &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;, if nothing matched. Formerly, &lt;code&gt;regs&lt;/code&gt; was not modified in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108fbcfeb79a2d176ba42089620570c180ba26c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_ereg_search()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; if the multibyte string matches with the regular expression, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; otherwise. The &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; for matching is set by &lt;a href=&quot;function.mb-ereg-search-init&quot;&gt;mb_ereg_search_init()&lt;/a&gt;. If &lt;code&gt;pattern&lt;/code&gt; is not specified, the previous one is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad98a1aa6260ad0d64a7e48afe788948bcc02161" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_ereg_search_getpos()&lt;/strong&gt; returns the point to start regular expression match for &lt;a href=&quot;function.mb-ereg-search&quot;&gt;mb_ereg_search()&lt;/a&gt;, &lt;a href=&quot;function.mb-ereg-search-pos&quot;&gt;mb_ereg_search_pos()&lt;/a&gt;, &lt;a href=&quot;function.mb-ereg-search-regs&quot;&gt;mb_ereg_search_regs()&lt;/a&gt;. The position is represented by bytes from the head of string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2cf5826cbb264e6174ec2f8d5cb25951628ebc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_ereg_search_init()&lt;/strong&gt; sets &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;pattern&lt;/code&gt; for a multibyte regular expression. These values are used for &lt;a href=&quot;function.mb-ereg-search&quot;&gt;mb_ereg_search()&lt;/a&gt;, &lt;a href=&quot;function.mb-ereg-search-pos&quot;&gt;mb_ereg_search_pos()&lt;/a&gt;, and &lt;a href=&quot;function.mb-ereg-search-regs&quot;&gt;mb_ereg_search_regs()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677498861cdad62cddc91c770bd3e27dc7d22f68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_ereg_search_regs()&lt;/strong&gt; executes the multibyte regular expression match, and if there are some matched part, it returns an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; including substring of matched part as first element, the first grouped part with brackets as second element, the second grouped part as third element, and so on. It returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e707e79ab4b2f1b9589770cd416651d60a01c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_ereg_search_setpos()&lt;/strong&gt; sets the starting point of a match for &lt;a href=&quot;function.mb-ereg-search&quot;&gt;mb_ereg_search()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5578b89f6bacfa2a24b6979d022b3ccac786763e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_eregi()&lt;/strong&gt; will now set &lt;code&gt;regs&lt;/code&gt; to an empty &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;, if nothing matched. Formerly, &lt;code&gt;regs&lt;/code&gt; was not modified in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70173738dd605ead7d8a59ba162f2ee437e890e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_get_info()&lt;/strong&gt; returns the internal setting parameters of mbstring.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33aae789e2728bb09c157b85beb8e321d0d717ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_output_handler()&lt;/strong&gt; is &lt;a href=&quot;function.ob-start&quot;&gt;ob_start()&lt;/a&gt; callback function. &lt;strong&gt;mb_output_handler()&lt;/strong&gt; converts characters in the output buffer from internal character encoding to HTTP output character encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfb79b8c50d33239dfb4f5361ec022cedd30f50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_strcut()&lt;/strong&gt; extracts a substring from a string similarly to &lt;a href=&quot;function.mb-substr&quot;&gt;mb_substr()&lt;/a&gt;, but operates on bytes instead of characters. If the cut position happens to be between two bytes of a multi-byte character, the cut is performed starting from the first byte of that character. This is also the difference to the &lt;a href=&quot;function.substr&quot;&gt;substr()&lt;/a&gt; function, which would simply cut the string between the bytes and thus result in a malformed byte sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491f40972f6f3988e8f48f5238b83e617fcba7cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_strcut()&lt;/strong&gt; returns the portion of &lt;code&gt;str&lt;/code&gt; specified by the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6428342bfb5cbf02b679264d17646a4782f5afae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_stripos()&lt;/strong&gt; returns the numeric position of the first occurrence of &lt;code&gt;needle&lt;/code&gt; in the &lt;code&gt;haystack&lt;/code&gt; string. Unlike &lt;a href=&quot;function.mb-strpos&quot;&gt;mb_strpos()&lt;/a&gt;, &lt;strong&gt;mb_stripos()&lt;/strong&gt; is case-insensitive. If &lt;code&gt;needle&lt;/code&gt; is not found, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b08a95610b6dac1456dd40f8ba9a6cd51fb5c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_stristr()&lt;/strong&gt; finds the first occurrence of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; and returns the portion of &lt;code&gt;haystack&lt;/code&gt;. Unlike &lt;a href=&quot;function.mb-strstr&quot;&gt;mb_strstr()&lt;/a&gt;, &lt;strong&gt;mb_stristr()&lt;/strong&gt; is case-insensitive. If &lt;code&gt;needle&lt;/code&gt; is not found, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dbdbb2a11241110ccd3c75d8e964c2bca4ed7bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_strrchr()&lt;/strong&gt; finds the last occurrence of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; and returns the portion of &lt;code&gt;haystack&lt;/code&gt;. If &lt;code&gt;needle&lt;/code&gt; is not found, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8761fdf439eb516fa5c12619ce31c527b6cf96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_strrichr()&lt;/strong&gt; finds the last occurrence of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; and returns the portion of &lt;code&gt;haystack&lt;/code&gt;. Unlike &lt;a href=&quot;function.mb-strrchr&quot;&gt;mb_strrchr()&lt;/a&gt;, &lt;strong&gt;mb_strrichr()&lt;/strong&gt; is case-insensitive. If &lt;code&gt;needle&lt;/code&gt; is not found, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b4dc627c58ad52bf801c58d035d158d77a2d4da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_strripos()&lt;/strong&gt; performs multi-byte safe &lt;a href=&quot;function.strripos&quot;&gt;strripos()&lt;/a&gt; operation based on number of characters. &lt;code&gt;needle&lt;/code&gt; position is counted from the beginning of &lt;code&gt;haystack&lt;/code&gt;. First character's position is 0. Second character position is 1. Unlike &lt;a href=&quot;function.mb-strrpos&quot;&gt;mb_strrpos()&lt;/a&gt;, &lt;strong&gt;mb_strripos()&lt;/strong&gt; is case-insensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32ded041d1724b8c0449821a443a48c47f0eee7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_strstr()&lt;/strong&gt; finds the first occurrence of &lt;code&gt;needle&lt;/code&gt; in &lt;code&gt;haystack&lt;/code&gt; and returns the portion of &lt;code&gt;haystack&lt;/code&gt;. If &lt;code&gt;needle&lt;/code&gt; is not found, it returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33f6b734915cd00e19d20e918b3bee07805c931" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mb_substr()&lt;/strong&gt; returns the portion of &lt;code&gt;str&lt;/code&gt; specified by the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba971f7e4b707d44b5e561c497dadafb660135ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mcrypt_get_block_size()&lt;/strong&gt; is used to get the size of a block of the specified &lt;code&gt;cipher&lt;/code&gt; (in combination with an encryption mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1219b0c689f0493db87f96c91b93030eeea7da39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mcrypt_get_cipher_name()&lt;/strong&gt; is used to get the name of the specified cipher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42cb10a446dca965d215c88714dcc24a04983014" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mcrypt_get_cipher_name()&lt;/strong&gt; takes the cipher number as an argument (libmcrypt 2.2.x) or takes the cipher name as an argument (libmcrypt 2.4.x or higher) and returns the name of the cipher or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;, if the cipher does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b145cd84490fd95f5b265c5de35b787224924b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mcrypt_get_key_size()&lt;/strong&gt; is used to get the size of a key of the specified &lt;code&gt;cipher&lt;/code&gt; (in combination with an encryption mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac3f85d513b8e2ffce6938486dea110e16d5018" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;microtime()&lt;/strong&gt; returns the current Unix timestamp with microseconds. This function is only available on operating systems that support the gettimeofday() system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfd41a0488ea2c024f53ec6a0b4735553fb1c99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;min()&lt;/strong&gt; returns the parameter value considered &quot;lowest&quot; according to standard comparisons. If multiple values of different types evaluate as equal (e.g. &lt;em&gt;0&lt;/em&gt; and &lt;em&gt;'abc'&lt;/em&gt;) the first provided to the function will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d777b378b2a86003dbebf188a9b0633184cf6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mktime()&lt;/strong&gt; is useful for doing date arithmetic and validation, as it will automatically calculate the correct value for out-of-range input. For example, each of the following lines produces the string &quot;Jan-01-1998&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892f71632791029a93ea6ac365aafdd175c96661" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mktime()&lt;/strong&gt; now throws &lt;strong&gt;&lt;code&gt;E_DEPRECATED&lt;/code&gt;&lt;/strong&gt; notice if the &lt;code&gt;is_dst&lt;/code&gt; parameter is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6baf7d327e8282ef97358bc044ded4f2a44134" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mktime()&lt;/strong&gt; returns the Unix timestamp of the arguments given. If the arguments are invalid, the function returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; (before PHP 5.1 it returned &lt;em&gt;-1&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546e64077fd8423c40bdb5b46be8dd35e9229520" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;money_format()&lt;/strong&gt; returns a formatted version of &lt;code&gt;number&lt;/code&gt;. This function wraps the C library function &lt;strong&gt;strfmon()&lt;/strong&gt;, with the difference that this implementation converts only one number at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74663620a893d2b090ae24ac60335f09dd896bcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;move_uploaded_file()&lt;/strong&gt; is both &lt;a href=&quot;https://secure.php.net/manual/en/ini.sect.safe-mode.php#ini.safe-mode&quot;&gt;safe mode&lt;/a&gt; and &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.open-basedir&quot;&gt;open_basedir&lt;/a&gt; aware. However, restrictions are placed only on the &lt;code&gt;destination&lt;/code&gt; path as to allow the moving of uploaded files in which &lt;code&gt;filename&lt;/code&gt; may conflict with such restrictions. &lt;strong&gt;move_uploaded_file()&lt;/strong&gt; ensures the safety of this operation by allowing only those files uploaded through PHP to be moved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7264b35dafeb0699c6a33d554be741b5f9c7bf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg_get_queue()&lt;/strong&gt; returns an id that can be used to access the System V message queue with the given &lt;code&gt;key&lt;/code&gt;. The first call creates the message queue with the optional &lt;code&gt;perms&lt;/code&gt;. A second call to &lt;strong&gt;msg_get_queue()&lt;/strong&gt; for the same &lt;code&gt;key&lt;/code&gt; will return a different message queue identifier, but both identifiers access the same underlying message queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a1fabf728148688df2a77ce5f2c02c6093d44d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg_receive()&lt;/strong&gt; will receive the first message from the specified &lt;code&gt;queue&lt;/code&gt; of the type specified by &lt;code&gt;desiredmsgtype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cc09ab47465491a93a910776582f166b0b0af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg_remove_queue()&lt;/strong&gt; destroys the message queue specified by the &lt;code&gt;queue&lt;/code&gt;. Only use this function when all processes have finished working with the message queue and you need to release the system resources held by it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065210ed14ec3021bdcdeeeb631d4e77df148c67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg_send()&lt;/strong&gt; sends a &lt;code&gt;message&lt;/code&gt; of type &lt;code&gt;msgtype&lt;/code&gt; (which MUST be greater than 0) to the message queue specified by &lt;code&gt;queue&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf44a6c7c21da6f2c5ce0617e7c309a018ae4ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg_set_queue()&lt;/strong&gt; allows you to change the values of the msg_perm.uid, msg_perm.gid, msg_perm.mode and msg_qbytes fields of the underlying message queue data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693413e5cf8ecfc6b9881d2d7e28dbe4eb6c082b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;msg_stat_queue()&lt;/strong&gt; returns the message queue meta data for the message queue specified by the &lt;code&gt;queue&lt;/code&gt;. This is useful, for example, to determine which process sent the message that was just received.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16809d7bae9312af214b315f3747fc4356c2727a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mt_rand()&lt;/strong&gt;&lt;a href=&quot;https://secure.php.net/manual/en/migration71.incompatible.php#migration71.incompatible.fixes-to-mt_rand-algorithm&quot;&gt;has been updated&lt;/a&gt; to use the fixed, correct, version of the Mersenne Twister algorithm. To fall back to the old behaviour, use &lt;a href=&quot;function.mt-srand&quot;&gt;mt_srand()&lt;/a&gt; with &lt;strong&gt;&lt;code&gt;MT_RAND_PHP&lt;/code&gt;&lt;/strong&gt; as the second paramter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baae049341bb9690a94d079540e1d696b7d60722" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mt_rand()&lt;/strong&gt;&lt;a href=&quot;https://secure.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.rand-mt_rand-output&quot;&gt;has received a bug fix&lt;/a&gt; for a modulo bias bug. This means that sequences generated with a specific seed may differ from PHP 7.1 on 64-bit machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caaed3e350f8d3c71ca4aee6822400d6ccb16a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli::__construct&lt;/strong&gt; ([ string&lt;code&gt;$host&lt;/code&gt; = ini_get(&quot;mysqli.default_host&quot;) [, string&lt;code&gt;$username&lt;/code&gt; = ini_get(&quot;mysqli.default_user&quot;) [, string&lt;code&gt;$passwd&lt;/code&gt; = ini_get(&quot;mysqli.default_pw&quot;) [, string&lt;code&gt;$dbname&lt;/code&gt; = &quot;&quot; [, int&lt;code&gt;$port&lt;/code&gt; = ini_get(&quot;mysqli.default_port&quot;) [, string&lt;code&gt;$socket&lt;/code&gt; = ini_get(&quot;mysqli.default_socket&quot;) ]]]]]] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aef380ee75b886b2a08ca2d3675b27a9c694d8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204f06031193ae2fe799e37088746a31ce9db946" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_close()&lt;/strong&gt; will not close persistent connections. For additional details, see the manual page on &lt;a href=&quot;https://secure.php.net/manual/en/features.persistent-connections.php&quot;&gt;persistent connections&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f8eca88d6009ac72378747a2745cbad676f479" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_driver&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b366fa875fe46984345f2600b9842c379c054939" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_execute()&lt;/strong&gt; is deprecated and will be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcd93afc69340c6eb6c36d50c4f329618e0a30f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_fetch_all()&lt;/strong&gt; fetches all result rows and returns the result set as an associative array, a numeric array, or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aebff6e28ff31fbd1b3c43a6c8a832b1a7cdae7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_fetch_array()&lt;/strong&gt; is an extended version of the &lt;a href=&quot;mysqli-result.fetch-row&quot;&gt;mysqli_fetch_row()&lt;/a&gt; function. In addition to storing the data in the numeric indices of the result array, the &lt;strong&gt;mysqli_fetch_array()&lt;/strong&gt; function can also store the data in associative indices, using the field names of the result set as keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da1f5af14ea2d490d12497b64deaf6131a2b244" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_fetch_lengths()&lt;/strong&gt; is valid only for the current row of the result set. It returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if you call it before calling mysqli_fetch_row/array/object or after retrieving all rows in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f136f202b256e1f8dd5eebc6a8fddcc774dfdde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_fetch_row()&lt;/strong&gt; returns an array of strings that corresponds to the fetched row or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if there are no more rows in result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716d93c78562652e9749db242d9e70d7ab1426c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_get_links_stats()&lt;/strong&gt; returns an associative array with three elements, keyed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07be281cc1a36f757cf9f4c6330e798c077a56c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_get_links_stats()&lt;/strong&gt; returns information about open and cached MySQL links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b74fdb0bbd75b28f7d9c44565a48523e905aa561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_options()&lt;/strong&gt; should be called after &lt;a href=&quot;mysqli.init&quot;&gt;mysqli_init()&lt;/a&gt; and before &lt;a href=&quot;mysqli.real-connect&quot;&gt;mysqli_real_connect()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b655ad9c31003c9b7fee815a321ec70c5e0d672" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_prepare()&lt;/strong&gt; returns a statement object or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ac0b78eadfab1dfd1b1849e986b26dbb915108" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_real_connect()&lt;/strong&gt; needs a valid object which has to be created by function &lt;a href=&quot;mysqli.init&quot;&gt;mysqli_init()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0fc28b99e12fccef247621429f60fcd16d0b2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_result&lt;/strong&gt;implements &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b8f0054227c03adda15e815bc21656d3aae1c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_sql_exception&lt;/strong&gt;extends&lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e62f23265f92038e7bb2af39959f9c6365b780" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_stat()&lt;/strong&gt; returns a string containing information similar to that provided by the 'mysqladmin status' command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696f6268566a8234ea4d62b82207497da2e917cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_stmt::__construct&lt;/strong&gt; ( &lt;a href=&quot;class.mysqli&quot;&gt;mysqli&lt;/a&gt;&lt;code&gt;$link&lt;/code&gt; [, string&lt;code&gt;$query&lt;/code&gt; ] )</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="528c3a2628286f8b62aae2540d5aff2d46fd51e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_stmt&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5961a7aa9968421cea6c4366e9741f8e3e4014ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_store_result()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; in case the query didn't return a result set (if the query was, for example an INSERT statement). This function also returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the reading of the result set failed. You can check if you have got an error by checking if &lt;a href=&quot;mysqli.error&quot;&gt;mysqli_error()&lt;/a&gt; doesn't return an empty string, if &lt;a href=&quot;mysqli.errno&quot;&gt;mysqli_errno()&lt;/a&gt; returns a non zero value, or if &lt;a href=&quot;mysqli.field-count&quot;&gt;mysqli_field_count()&lt;/a&gt; returns a non zero value. Also possible reason for this function returning &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; after successful call to &lt;a href=&quot;mysqli.query&quot;&gt;mysqli_query()&lt;/a&gt; can be too large result set (memory for it cannot be allocated). If &lt;a href=&quot;mysqli.field-count&quot;&gt;mysqli_field_count()&lt;/a&gt; returns a non-zero value, the statement should have produced a non-empty result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2589d39258b9b8235b83f79a89fc366ca5b46b9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mysqli_warning&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e67b7e813e8b0f87a5f36eacf0d6794d78955d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;natcasesort()&lt;/strong&gt; is a case insensitive version of &lt;a href=&quot;function.natsort&quot;&gt;natsort()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5543116cf1887dfc52a83cf16a6b3ccb8619d520" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;next()&lt;/strong&gt; behaves like &lt;a href=&quot;function.current&quot;&gt;current()&lt;/a&gt;, with one difference. It advances the internal array pointer one place forward before returning the element value. That means it returns the next array value and advances the internal array pointer by one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8000456548dd15c28744a59422dd5c94af1649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;nl_langinfo Constants&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c6b74d147ec8b6740291772212d5e729c37457" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;nl_langinfo()&lt;/strong&gt; is used to access individual elements of the locale categories. Unlike &lt;a href=&quot;function.localeconv&quot;&gt;localeconv()&lt;/a&gt;, which returns all of the elements, &lt;strong&gt;nl_langinfo()&lt;/strong&gt; allows you to select any specific element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd7ff5a20d92c6e02241b90ee7ea2cdbcc1ed48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;number_format()&lt;/strong&gt; was changed to not being able to return &lt;em&gt;-0&lt;/em&gt;, previously &lt;em&gt;-0&lt;/em&gt; could be returned for cases like where &lt;code&gt;number&lt;/code&gt; would be &lt;em&gt;-0.01&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e059e044614f11113373accfc3ddc730621022b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ob_get_clean()&lt;/strong&gt; essentially executes both &lt;a href=&quot;function.ob-get-contents&quot;&gt;ob_get_contents()&lt;/a&gt; and &lt;a href=&quot;function.ob-end-clean&quot;&gt;ob_end_clean()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba952a6c6696315ee236c5106116dba5fd4943b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ob_get_flush()&lt;/strong&gt; flushes the output buffer, return it as a string and turns off output buffering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2998ae015757d7f7b3e69a423aff1e94e066a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ob_get_status()&lt;/strong&gt; returns status information on either the top level output buffer or all active output buffer levels if &lt;code&gt;full_status&lt;/code&gt; is set to &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42339ccf9c8282277e90786ef8571bbbb8ae5447" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ob_gzhandler()&lt;/strong&gt; is intended to be used as a callback function for &lt;a href=&quot;function.ob-start&quot;&gt;ob_start()&lt;/a&gt; to help facilitate sending gz-encoded data to web browsers that support compressed web pages. Before &lt;strong&gt;ob_gzhandler()&lt;/strong&gt; actually sends compressed data, it determines what type of content encoding the browser will accept (&quot;gzip&quot;, &quot;deflate&quot; or none at all) and will return its output accordingly. All browsers are supported since it's up to the browser to send the correct header saying that it accepts compressed web pages. If a browser doesn't support compressed pages this function returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46a36e9118528057625f8123c570ff1c3779cee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ob_gzhandler()&lt;/strong&gt; requires the &lt;a href=&quot;https://secure.php.net/manual/en/ref.zlib.php&quot;&gt;zlib&lt;/a&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e34e1e744a7fc41f1c3389ae3a0c177e1f8d9d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ob_implicit_flush()&lt;/strong&gt; will turn implicit flushing on or off. Implicit flushing will result in a flush operation after every output call, so that explicit calls to &lt;a href=&quot;function.flush&quot;&gt;flush()&lt;/a&gt; will no longer be needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e7eddb2441bedc3dcd9d475e4171092e06c298" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;odbc_close_all()&lt;/strong&gt; will close down all connections to database server(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5a3e3e336b6c34017d0092ffa8765a830e6e5b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;odbc_free_result()&lt;/strong&gt; only needs to be called if you are worried about using too much memory while your script is running. All result memory will automatically be freed when the script is finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2da2f057fd120518aa1f704af22c32f19608f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openlog()&lt;/strong&gt; opens a connection to the system logger for a program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18837f53961581c0ec224e29427b5984663f06fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_csr_export()&lt;/strong&gt; takes the Certificate Signing Request represented by &lt;code&gt;csr&lt;/code&gt; and stores it in PEM format in &lt;code&gt;out&lt;/code&gt;, which is passed by reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8d0b994524510f331c859ad318668aec387049" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_csr_export_to_file()&lt;/strong&gt; takes the Certificate Signing Request represented by &lt;code&gt;csr&lt;/code&gt; and saves it in PEM format into the file named by &lt;code&gt;outfilename&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db424c4d3dfb49633883965fbf22b04763294b90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_csr_get_public_key()&lt;/strong&gt; extracts the public key from &lt;code&gt;csr&lt;/code&gt; and prepares it for use by other functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b31ca26a3341b6143e9ce09e417bc3e296861c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_csr_get_subject()&lt;/strong&gt; returns subject distinguished name information encoded in the &lt;code&gt;csr&lt;/code&gt; including fields commonName (CN), organizationName (O), countryName (C) etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eef2e983091807c9b900ae736d0ddb38609ba90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_csr_new()&lt;/strong&gt; generates a new CSR (Certificate Signing Request) based on the information provided by &lt;code&gt;dn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699b35d1de108c9c845c53e3f59fe2526a8bbf78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_csr_sign()&lt;/strong&gt; generates an x509 certificate resource from the given CSR.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2df907886b6c06e5e7fc432fe1929b4fffddc17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_error_string()&lt;/strong&gt; returns the last error from the openSSL library. Error messages are queued, so this function should be called multiple times to collect all of the information. The last error will be the most recent one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd88e9ee049ff489b4ab6b2f21e6228bbcef88ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_free_key()&lt;/strong&gt; frees the key associated with the specified &lt;code&gt;key_identifier&lt;/code&gt; from memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f90f90bfb213a8c9be092518d669b9e112a797f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_get_cert_locations()&lt;/strong&gt; returns an array with information about the available certificate locations that will be searched for SSL certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c210d3c17547bb7f2f3df9369c56d88610591256" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_md_method()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;openssl_md_method()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e9a68cf139946ed9653e2a005f97aabf931bc997" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_open()&lt;/strong&gt; opens (decrypts) &lt;code&gt;sealed_data&lt;/code&gt; using the private key associated with the key identifier &lt;code&gt;priv_key_id&lt;/code&gt; and the envelope key &lt;code&gt;env_key&lt;/code&gt;, and fills &lt;code&gt;open_data&lt;/code&gt; with the decrypted data. The envelope key is generated when the data are sealed and can only be used by one specific private key. See &lt;a href=&quot;function.openssl-seal&quot;&gt;openssl_seal()&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f353b7ddc919eabcfa3c065be19fad489b5bafc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pbkdf2()&lt;/strong&gt; computes PBKDF2 (Password-Based Key Derivation Function 2), a key derivation function defined in PKCS5 v2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd76a896370c5bf5a182d2f9d0810375bec32a32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkcs12_export()&lt;/strong&gt; stores &lt;code&gt;x509&lt;/code&gt; into a string named by &lt;code&gt;out&lt;/code&gt; in a PKCS#12 file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9a29fdfceb0d10b4e0f7c9ca1d55827e8b70e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkcs12_export_to_file()&lt;/strong&gt; stores &lt;code&gt;x509&lt;/code&gt; into a file named by &lt;code&gt;filename&lt;/code&gt; in a PKCS#12 file format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ca72583860c75b323ce7904ccc401e9aa98b7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkcs12_read()&lt;/strong&gt; parses the PKCS#12 certificate store supplied by &lt;code&gt;pkcs12&lt;/code&gt; into a array named &lt;code&gt;certs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3b5e3bb52d824f230892c5245ce0c3b51283745" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkcs7_encrypt()&lt;/strong&gt; takes the contents of the file named &lt;code&gt;infile&lt;/code&gt; and encrypts them using an RC2 40-bit cipher so that they can only be read by the intended recipients specified by &lt;code&gt;recipcerts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd4543efaf5e11664ea14dd3198c178f0d3c4ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkcs7_sign()&lt;/strong&gt; takes the contents of the file named &lt;code&gt;infilename&lt;/code&gt; and signs them using the certificate and its matching private key specified by &lt;code&gt;signcert&lt;/code&gt; and &lt;code&gt;privkey&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c8a66df4fb8c4546b331c8441ec4a7d98e80e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkcs7_verify()&lt;/strong&gt; reads the S/MIME message contained in the given file and examines the digital signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a004857d566b6a52bb202e0c8323095fe511bda5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkey_export()&lt;/strong&gt; exports &lt;code&gt;key&lt;/code&gt; as a PEM encoded string and stores it into &lt;code&gt;out&lt;/code&gt; (which is passed by reference).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9485701b118394352200662556dc1bfe9cbf8e92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkey_export_to_file()&lt;/strong&gt; saves an ascii-armoured (PEM encoded) rendition of &lt;code&gt;key&lt;/code&gt; into the file named by &lt;code&gt;outfilename&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98a16189d4b58b9f778518949aa9bd78c612f8c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_pkey_new()&lt;/strong&gt; generates a new private and public key pair. The public component of the key can be obtained using &lt;a href=&quot;function.openssl-pkey-get-public&quot;&gt;openssl_pkey_get_public()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daab1e41f983ce9375444c0283d9b977a7a9a44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_private_decrypt()&lt;/strong&gt; decrypts &lt;code&gt;data&lt;/code&gt; that was previously encrypted via &lt;a href=&quot;function.openssl-public-encrypt&quot;&gt;openssl_public_encrypt()&lt;/a&gt; and stores the result into &lt;code&gt;decrypted&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e268920c10620c11843d59f94901527c2d6858b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_private_encrypt()&lt;/strong&gt; encrypts &lt;code&gt;data&lt;/code&gt; with private &lt;code&gt;key&lt;/code&gt; and stores the result into &lt;code&gt;crypted&lt;/code&gt;. Encrypted data can be decrypted via &lt;a href=&quot;function.openssl-public-decrypt&quot;&gt;openssl_public_decrypt()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a790654f4c72f4600fb21b9ad17d75545bdbfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_public_decrypt()&lt;/strong&gt; decrypts &lt;code&gt;data&lt;/code&gt; that was previous encrypted via &lt;a href=&quot;function.openssl-private-encrypt&quot;&gt;openssl_private_encrypt()&lt;/a&gt; and stores the result into &lt;code&gt;decrypted&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7b076238d6d69ae88fa33cb959df60956e2b6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_public_encrypt()&lt;/strong&gt; encrypts &lt;code&gt;data&lt;/code&gt; with public &lt;code&gt;key&lt;/code&gt; and stores the result into &lt;code&gt;crypted&lt;/code&gt;. Encrypted data can be decrypted via &lt;a href=&quot;function.openssl-private-decrypt&quot;&gt;openssl_private_decrypt()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed741c3e2576ab95a99ba0d2a3a9a2f09c53d1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_seal()&lt;/strong&gt; seals (encrypts) &lt;code&gt;data&lt;/code&gt; by using the given &lt;code&gt;method&lt;/code&gt; with a randomly generated secret key. The key is encrypted with each of the public keys associated with the identifiers in &lt;code&gt;pub_key_ids&lt;/code&gt; and each encrypted key is returned in &lt;code&gt;env_keys&lt;/code&gt;. This means that one can send sealed data to multiple recipients (provided one has obtained their public keys). Each recipient must receive both the sealed data and the envelope key that was encrypted with the recipient's public key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7589ca983a9add4eeb6cc2a2c1443d0341a571" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_sign()&lt;/strong&gt; computes a signature for the specified &lt;code&gt;data&lt;/code&gt; by generating a cryptographic digital signature using the private key associated with &lt;code&gt;priv_key_id&lt;/code&gt;. Note that the data itself is not encrypted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af29840e7b2ece553463362cf8cc68a94b32ef8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_spki_new()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;openssl_spki_new()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da115eddfb76ff74da1a21cd627a4cd54c3e2cbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_verify()&lt;/strong&gt; verifies that the &lt;code&gt;signature&lt;/code&gt; is correct for the specified &lt;code&gt;data&lt;/code&gt; using the public key associated with &lt;code&gt;pub_key_id&lt;/code&gt;. This must be the public key corresponding to the private key used for signing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1152223bcc6654072ad253625db9bfc0af595cc7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_checkpurpose()&lt;/strong&gt; examines a certificate to see if it can be used for the specified &lt;code&gt;purpose&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d6b193ca35e438aae99b8b1868b03358bd227f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_export()&lt;/strong&gt; stores &lt;code&gt;x509&lt;/code&gt; into a string named by &lt;code&gt;output&lt;/code&gt; in a PEM encoded format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003d39e8f9ea4c7e5fabd28481754584111ff918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_export_to_file()&lt;/strong&gt; stores &lt;code&gt;x509&lt;/code&gt; into a file named by &lt;code&gt;outfilename&lt;/code&gt; in a PEM encoded format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8c2d53e7b2a2876e69eae56d95aa7d898229a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_fingerprint()&lt;/strong&gt; returns the digest of &lt;code&gt;x509&lt;/code&gt; as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cbb2b62db84e5e8feadc96590045b9cbe7b5d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_free()&lt;/strong&gt; frees the certificate associated with the specified &lt;code&gt;x509cert&lt;/code&gt; resource from memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bd2d290bca43b0e67234dd77540bf11cf2f0c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_parse()&lt;/strong&gt; returns information about the supplied &lt;code&gt;x509cert&lt;/code&gt;, including fields such as subject name, issuer name, purposes, valid from and valid to dates etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a614a1a533c9149c208cb56bf992ef366a8351b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;openssl_x509_read()&lt;/strong&gt; parses the certificate supplied by &lt;code&gt;x509certdata&lt;/code&gt; and returns a resource identifier for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6e24c0e21b3142fbe539432b874182ec9cb0d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;parse_ini_file()&lt;/strong&gt; loads in the ini file specified in &lt;code&gt;filename&lt;/code&gt;, and returns the settings in it in an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8be49841581641bdd95ed7d41d0116f4430f9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;parse_ini_string()&lt;/strong&gt; returns the settings in string &lt;code&gt;ini&lt;/code&gt; in an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c935ae133cfbcf1486999e9d61df222c636524f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;password_hash()&lt;/strong&gt; creates a new password hash using a strong one-way hashing algorithm. &lt;strong&gt;password_hash()&lt;/strong&gt; is compatible with &lt;a href=&quot;function.crypt&quot;&gt;crypt()&lt;/a&gt;. Therefore, password hashes created by &lt;a href=&quot;function.crypt&quot;&gt;crypt()&lt;/a&gt; can be used with &lt;strong&gt;password_hash()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4308d420249f68e0a32a2d269342c41f6669f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pathinfo()&lt;/strong&gt; is locale aware, so for it to parse a path containing multibyte characters correctly, the matching locale must be set using the &lt;a href=&quot;function.setlocale&quot;&gt;setlocale()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c8718299192671291a0b4a04eeeaf5a3073319f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pathinfo()&lt;/strong&gt; returns information about &lt;code&gt;path&lt;/code&gt;: either an associative array or a string, depending on &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79be38fc80a21bc1b19e13f0837af4d2a7bf447" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pclose()&lt;/strong&gt; is internally implemented using the &lt;em&gt;waitpid(3)&lt;/em&gt; system call. To obtain the real exit status code the &lt;a href=&quot;function.pcntl-wexitstatus&quot;&gt;pcntl_wexitstatus()&lt;/a&gt; function should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6396c52f81edb86166492f863c4f762f9a36a10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_getpriority()&lt;/strong&gt; gets the priority of &lt;code&gt;pid&lt;/code&gt;. Because priority levels can differ between system types and kernel versions, please see your system's getpriority(2) man page for specific details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55dd12fd3d5f157af10091487a9b9036041a2922" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_getpriority()&lt;/strong&gt; returns the priority of the process or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error. A lower numerical value causes more favorable scheduling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b07842a10aad1b6c361dc7e3ed864599e03c89e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_setpriority()&lt;/strong&gt; sets the priority of &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db0841fdab09c3daba258752adfb004b744661f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_signal()&lt;/strong&gt; doesn't stack the signal handlers, but replaces them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5f96fad58dffb36a7db42f83b2f242d4b0219e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_signal_get_handler()&lt;/strong&gt; has been added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf9d2ca82fa60383035439c380d31756bc63d11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_wait()&lt;/strong&gt; returns the process ID of the child which exited, -1 on error or zero if WNOHANG was provided as an option (on wait3-available systems) and no child was available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdd622e82aae27f17819955a7972970fd79e349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_wait()&lt;/strong&gt; will store status information in the &lt;code&gt;status&lt;/code&gt; parameter which can be evaluated using the following functions: &lt;a href=&quot;function.pcntl-wifexited&quot;&gt;pcntl_wifexited()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wifstopped&quot;&gt;pcntl_wifstopped()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wifsignaled&quot;&gt;pcntl_wifsignaled()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wexitstatus&quot;&gt;pcntl_wexitstatus()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wtermsig&quot;&gt;pcntl_wtermsig()&lt;/a&gt; and &lt;a href=&quot;function.pcntl-wstopsig&quot;&gt;pcntl_wstopsig()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec6c288c5e2582c0c944edfd6a7c80f93715ddd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_waitpid()&lt;/strong&gt; returns the process ID of the child which exited, -1 on error or zero if &lt;strong&gt;&lt;code&gt;WNOHANG&lt;/code&gt;&lt;/strong&gt; was used and no child was available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e72b36733359f41c2d2a2a9058dad3c36e4b18d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pcntl_waitpid()&lt;/strong&gt; will store status information in the &lt;code&gt;status&lt;/code&gt; parameter which can be evaluated using the following functions: &lt;a href=&quot;function.pcntl-wifexited&quot;&gt;pcntl_wifexited()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wifstopped&quot;&gt;pcntl_wifstopped()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wifsignaled&quot;&gt;pcntl_wifsignaled()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wexitstatus&quot;&gt;pcntl_wexitstatus()&lt;/a&gt;, &lt;a href=&quot;function.pcntl-wtermsig&quot;&gt;pcntl_wtermsig()&lt;/a&gt; and &lt;a href=&quot;function.pcntl-wstopsig&quot;&gt;pcntl_wstopsig()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8435f56898a267879149013ef22526911144f1f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_affected_rows()&lt;/strong&gt; returns the number of tuples (instances/records/rows) affected by &lt;em&gt;INSERT&lt;/em&gt;, &lt;em&gt;UPDATE&lt;/em&gt;, and &lt;em&gt;DELETE&lt;/em&gt; queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0c051b6c17db15677fce9239e7a97d1b1fefcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_cancel_query()&lt;/strong&gt; cancels an asynchronous query sent with &lt;a href=&quot;function.pg-send-query&quot;&gt;pg_send_query()&lt;/a&gt;, &lt;a href=&quot;function.pg-send-query-params&quot;&gt;pg_send_query_params()&lt;/a&gt; or &lt;a href=&quot;function.pg-send-execute&quot;&gt;pg_send_execute()&lt;/a&gt;. You cannot cancel a query executed using &lt;a href=&quot;function.pg-query&quot;&gt;pg_query()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdb80b919cd7036641bfda21772ec45eb8433e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_close()&lt;/strong&gt; closes the non-persistent connection to a PostgreSQL database associated with the given &lt;code&gt;connection&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb02cb9443951240defd22f265aaf3c9f47f2a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_connect()&lt;/strong&gt; opens a connection to a PostgreSQL database specified by the &lt;code&gt;connection_string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5837312e2cbc61a5be2ad10c47d345e0b6e622c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_connect_poll()&lt;/strong&gt; polls the status of a PostgreSQL connection created by calling &lt;a href=&quot;function.pg-connect&quot;&gt;pg_connect()&lt;/a&gt; with the &lt;strong&gt;&lt;code&gt;PGSQL_CONNECT_ASYNC&lt;/code&gt;&lt;/strong&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bef54745303a1e195fd1d5c1ca7072401281f34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_connection_busy()&lt;/strong&gt; determines whether or not a connection is busy. If it is busy, a previous query is still executing. If &lt;a href=&quot;function.pg-get-result&quot;&gt;pg_get_result()&lt;/a&gt; is used on the connection, it will be blocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244f4e511a478e48e7b344c49ffc6a13cdbb0936" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_connection_reset()&lt;/strong&gt; resets the connection. It is useful for error recovery.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530fbbd34cadea5c396b2a4539915282c4dc6ab7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_connection_status()&lt;/strong&gt; returns the status of the specified &lt;code&gt;connection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d729819f2a0a9c1568ba0224e73fe189f653fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_consume_input()&lt;/strong&gt; consumes any input waiting to be read from the database server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0625c4cc38f7041353eb6f4d9629c4d14ce910" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_convert()&lt;/strong&gt; checks and converts the values in &lt;code&gt;assoc_array&lt;/code&gt; into suitable values for use in an SQL statement. Precondition for &lt;strong&gt;pg_convert()&lt;/strong&gt; is the existence of a table &lt;code&gt;table_name&lt;/code&gt; which has at least as many columns as &lt;code&gt;assoc_array&lt;/code&gt; has elements. The fieldnames in &lt;code&gt;table_name&lt;/code&gt; must match the indices in &lt;code&gt;assoc_array&lt;/code&gt; and the corresponding datatypes must be compatible. Returns an array with the converted values on success, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625870bb470c43b21e1b06fe6d8e3a3d67f12909" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_copy_from()&lt;/strong&gt; inserts records into a table from &lt;code&gt;rows&lt;/code&gt;. It issues a &lt;em&gt;COPY FROM&lt;/em&gt; SQL command internally to insert records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="308fbc71d5ba4e55703189f86b19673336fe2ef9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_copy_to()&lt;/strong&gt; copies a table to an array. It issues &lt;em&gt;COPY TO&lt;/em&gt; SQL command internally to retrieve records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2a521cc5eb003ae83e79186d33ae4e46fd64f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_dbname()&lt;/strong&gt; returns the name of the database that the given PostgreSQL &lt;code&gt;connection&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45ee0baa13dd281a2c17fb82be256812e3b111e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_delete()&lt;/strong&gt; deletes records from a table specified by the keys and values in &lt;code&gt;assoc_array&lt;/code&gt;. If &lt;code&gt;options&lt;/code&gt; is specified, &lt;a href=&quot;function.pg-convert&quot;&gt;pg_convert()&lt;/a&gt; is applied to &lt;code&gt;assoc_array&lt;/code&gt; with the specified options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1248203b49b4d77215be77fe3ee51f73ccd0d04f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_end_copy()&lt;/strong&gt; syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by &lt;a href=&quot;function.pg-put-line&quot;&gt;pg_put_line()&lt;/a&gt;. &lt;strong&gt;pg_end_copy()&lt;/strong&gt; must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f70155d53ad925a5ceb651a58423b242af0cd00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_escape_bytea()&lt;/strong&gt; escapes string for bytea datatype. It returns escaped string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281c11bc65c565d58ae7960f1e90283697ce28b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_escape_identifier()&lt;/strong&gt; escapes a identifier (e.g. table, field names) for quering the database. It returns an escaped identifier string for PostgreSQL server. &lt;strong&gt;pg_escape_identifier()&lt;/strong&gt; adds double quotes before and after data. Users should not add double quotes. Use of this function is recommended for identifier parameters in query. For SQL literals (i.e. parameters except bytea), &lt;a href=&quot;function.pg-escape-literal&quot;&gt;pg_escape_literal()&lt;/a&gt; or &lt;a href=&quot;function.pg-escape-string&quot;&gt;pg_escape_string()&lt;/a&gt; must be used. For bytea type fields, &lt;a href=&quot;function.pg-escape-bytea&quot;&gt;pg_escape_bytea()&lt;/a&gt; must be used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652aa2138cae6bf10ca6f237db4880f683ab8a26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_escape_literal()&lt;/strong&gt; escapes a literal for querying the PostgreSQL database. It returns an escaped literal in the PostgreSQL format. &lt;strong&gt;pg_escape_literal()&lt;/strong&gt; adds quotes before and after data. Users should not add quotes. Use of this function is recommended instead of &lt;a href=&quot;function.pg-escape-string&quot;&gt;pg_escape_string()&lt;/a&gt;. If the type of the column is bytea, &lt;a href=&quot;function.pg-escape-bytea&quot;&gt;pg_escape_bytea()&lt;/a&gt; must be used instead. For escaping identifiers (e.g. table, field names), &lt;a href=&quot;function.pg-escape-identifier&quot;&gt;pg_escape_identifier()&lt;/a&gt; must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eed472d6680f5e954ba0a192ab3f8be4b7695cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_escape_string()&lt;/strong&gt; escapes a string for querying the database. It returns an escaped string in the PostgreSQL format without quotes. &lt;a href=&quot;function.pg-escape-literal&quot;&gt;pg_escape_literal()&lt;/a&gt; is more preferred way to escape SQL parameters for PostgreSQL. &lt;a href=&quot;function.addslashes&quot;&gt;addslashes()&lt;/a&gt; must not be used with PostgreSQL. If the type of the column is bytea, &lt;a href=&quot;function.pg-escape-bytea&quot;&gt;pg_escape_bytea()&lt;/a&gt; must be used instead. &lt;a href=&quot;function.pg-escape-identifier&quot;&gt;pg_escape_identifier()&lt;/a&gt; must be used to escape identifiers (e.g. table names, field names)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232e3c60bf117747c0d2f4ec079bf175515711f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_execute()&lt;/strong&gt; is like &lt;a href=&quot;function.pg-query-params&quot;&gt;pg_query_params()&lt;/a&gt;, but the command to be executed is specified by naming a previously-prepared statement, instead of giving a query string. This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. The statement must have been prepared previously in the current session. &lt;strong&gt;pg_execute()&lt;/strong&gt; is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ac29f1a65b2fb3fc94432b3de9972561f354813" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_all()&lt;/strong&gt; returns an array that contains all rows (records) in the result resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1f3415a5321f05a540449a1cec5ea31e33147c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_all_columns()&lt;/strong&gt; returns an array that contains all rows (records) in a particular column of the result resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69adc1bd35a354c6272a5eab3dda3b475be3f3df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_array()&lt;/strong&gt; is NOT significantly slower than using &lt;a href=&quot;function.pg-fetch-row&quot;&gt;pg_fetch_row()&lt;/a&gt;, and is significantly easier to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f004ec6d9047745736e7004365c15f8fb4a5b0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_array()&lt;/strong&gt; is an extended version of &lt;a href=&quot;function.pg-fetch-row&quot;&gt;pg_fetch_row()&lt;/a&gt;. In addition to storing the data in the numeric indices (field number) to the result array, it can also store the data using associative indices (field name). It stores both indicies by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b800c749c214ed4ab3ef6e48d8686d35a4f0af9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_array()&lt;/strong&gt; returns an array that corresponds to the fetched row (record).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198d8afc0c9381dea83ee1ce9f74df4774bfb3ef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_assoc()&lt;/strong&gt; is NOT significantly slower than using &lt;a href=&quot;function.pg-fetch-row&quot;&gt;pg_fetch_row()&lt;/a&gt;, and is significantly easier to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147a47f5c0e894017f8823fd62467be87155174d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_assoc()&lt;/strong&gt; is equivalent to calling &lt;a href=&quot;function.pg-fetch-array&quot;&gt;pg_fetch_array()&lt;/a&gt; with &lt;strong&gt;&lt;code&gt;PGSQL_ASSOC&lt;/code&gt;&lt;/strong&gt; as the optional third parameter. It only returns an associative array. If you need the numeric indices, use &lt;a href=&quot;function.pg-fetch-row&quot;&gt;pg_fetch_row()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655c206c6529ed3014b43058ccac7f1962d4c12b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_assoc()&lt;/strong&gt; returns an associative array that corresponds to the fetched row (records).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df26516d7cd3383ce5a33d2b09464e8aa3c12e77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_object()&lt;/strong&gt; returns an object with properties that correspond to the fetched row's field names. It can optionally instantiate an object of a specific class, and pass parameters to that class's constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fee79949cbaffaae332d01e1067af46057d6f62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_result()&lt;/strong&gt; returns the value of a particular row and field (column) in a PostgreSQL result resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9f393f196506bae2f043fbcc030829f00631aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_fetch_row()&lt;/strong&gt; fetches one row of data from the result associated with the specified &lt;code&gt;result&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c7012f8981f83f06742ba2ec1f82c62e8186fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_is_null()&lt;/strong&gt; tests if a field in a PostgreSQL result resource is SQL &lt;em&gt;NULL&lt;/em&gt; or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7e2e7468f2728c24c34605015fb80d3ab80a83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_name()&lt;/strong&gt; returns the name of the field occupying the given &lt;code&gt;field_number&lt;/code&gt; in the given PostgreSQL &lt;code&gt;result&lt;/code&gt; resource. Field numbering starts from 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccbf6b0b8838320df712c13df18247462406b2cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_num()&lt;/strong&gt; will return the number of the field number that corresponds to the &lt;code&gt;field_name&lt;/code&gt; in the given PostgreSQL &lt;code&gt;result&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73505e28b6d840de3e4a930994bb7d92cfe0cbae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_prtlen()&lt;/strong&gt; returns the actual printed length (number of characters) of a specific value in a PostgreSQL &lt;code&gt;result&lt;/code&gt;. Row numbering starts at 0. This function will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778c3fe30a5a1097c47670f10ec5c511007230c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_size()&lt;/strong&gt; returns the internal storage size (in bytes) of the field number in the given PostgreSQL &lt;code&gt;result&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b642bafd92437c91866e7fe36dd028f4f12d982f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_table()&lt;/strong&gt; returns the name of the table that field belongs to, or the table's oid if &lt;code&gt;oid_only&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddccc984dc245ade5436b04f70d775a246fc48a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_type()&lt;/strong&gt; returns a string containing the base type name of the given &lt;code&gt;field_number&lt;/code&gt; in the given PostgreSQL &lt;code&gt;result&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f7442b9f2c0cfcb292b12b0bf9f9c7c83b4aaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_field_type_oid()&lt;/strong&gt; returns an integer containing the OID of the base type of the given &lt;code&gt;field_number&lt;/code&gt; in the given PostgreSQL &lt;code&gt;result&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ab748f47f2cf0a8ba43d496df56bbe1dd40e5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_flush()&lt;/strong&gt; flushes any outbound query data waiting to be sent on the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d1501dd9a2a50cec3c68aa1dd51ae6aaca858e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_free_result()&lt;/strong&gt; frees the memory and data associated with the specified PostgreSQL query result &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43aee0d27ca4aadd34b428ab5193d5239588d2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_get_notify()&lt;/strong&gt; gets notifications generated by a &lt;em&gt;NOTIFY&lt;/em&gt; SQL command. To receive notifications, the &lt;em&gt;LISTEN&lt;/em&gt; SQL command must be issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12433dbeeb26d228f1eefb55f8b184c40984cbde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_get_pid()&lt;/strong&gt; gets the backend's (database server process) PID. The PID is useful to determine whether or not a &lt;em&gt;NOTIFY&lt;/em&gt; message received via &lt;a href=&quot;function.pg-get-notify&quot;&gt;pg_get_notify()&lt;/a&gt; is sent from another process or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d536701a5be3d9cd786eb193010ff76a3362562" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_get_result()&lt;/strong&gt; gets the result resource from an asynchronous query executed by &lt;a href=&quot;function.pg-send-query&quot;&gt;pg_send_query()&lt;/a&gt;, &lt;a href=&quot;function.pg-send-query-params&quot;&gt;pg_send_query_params()&lt;/a&gt; or &lt;a href=&quot;function.pg-send-execute&quot;&gt;pg_send_execute()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced4ec48bb01d9165100325fc5f0b3c79de75b2e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_host()&lt;/strong&gt; returns the host name of the given PostgreSQL &lt;code&gt;connection&lt;/code&gt; resource is connected to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3649984e34eddd4ab89e9579f83bf6478879e080" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_insert()&lt;/strong&gt; inserts the values of &lt;code&gt;assoc_array&lt;/code&gt; into the table specified by &lt;code&gt;table_name&lt;/code&gt;. If &lt;code&gt;options&lt;/code&gt; is specified, &lt;a href=&quot;function.pg-convert&quot;&gt;pg_convert()&lt;/a&gt; is applied to &lt;code&gt;assoc_array&lt;/code&gt; with the specified options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88acb1923dcc91a03accbbcc774d8e3432a3b255" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_last_error()&lt;/strong&gt; returns the last error message for a given &lt;code&gt;connection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc10dac57cbbf052b38060079a6bc66295b8e8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_last_notice()&lt;/strong&gt; returns the last notice message from the PostgreSQL server on the specified &lt;code&gt;connection&lt;/code&gt;. The PostgreSQL server sends notice messages in several cases, for instance when creating a &lt;em&gt;SERIAL&lt;/em&gt; column in a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832c694c9e83c223ab277d9dd815dd795cb2a0fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_last_oid()&lt;/strong&gt; is used to retrieve the &lt;var&gt;&lt;var&gt;OID&lt;/var&gt;&lt;/var&gt; assigned to an inserted row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2768a05721a3257d2919d0e17baf0a0a74bae5d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_close()&lt;/strong&gt; closes a large object. &lt;code&gt;large_object&lt;/code&gt; is a resource for the large object from &lt;a href=&quot;function.pg-lo-open&quot;&gt;pg_lo_open()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c6b3079ef986cb58e1fbd17c28906d89ce6e6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_create()&lt;/strong&gt; creates a large object and returns the &lt;var&gt;&lt;var&gt;OID&lt;/var&gt;&lt;/var&gt; of the large object. PostgreSQL access modes &lt;strong&gt;&lt;code&gt;INV_READ&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;INV_WRITE&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;INV_ARCHIVE&lt;/code&gt;&lt;/strong&gt; are not supported, the object is created always with both read and write access. &lt;strong&gt;&lt;code&gt;INV_ARCHIVE&lt;/code&gt;&lt;/strong&gt; has been removed from PostgreSQL itself (version 6.3 and above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4894ec3c00f92822136c4216bbff701497ce61c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_export()&lt;/strong&gt; takes a large object in a PostgreSQL database and saves its contents to a file on the local filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fb7d24f4f6acde0c128a2276b4d6d464eaef43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_import()&lt;/strong&gt; creates a new large object in the database using a file on the filesystem as its data source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53b0ccb3b43a7d4dd8a6fcea2e5454ae507fa70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_open()&lt;/strong&gt; opens a large object in the database and returns large object resource so that it can be manipulated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e5d945ac1c7b030e5d93750660460ebe417ccc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_read()&lt;/strong&gt; reads at most &lt;code&gt;len&lt;/code&gt; bytes from a large object and returns it as a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39725d0c5a3db3f2a35b09aa5e15bdb98a849933" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_read_all()&lt;/strong&gt; reads a large object and passes it straight through to the browser after sending all pending headers. Mainly intended for sending binary data like images or sound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c40aa850f06c62a1a1fd23b3b5037ee3293cfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_seek()&lt;/strong&gt; seeks a position within a large object resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98448ec7e3c601b0ee7446b458c443cd6d07cced" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_tell()&lt;/strong&gt; returns the current position (offset from the beginning) of a large object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b04e1685ebc72a6348148140f0c0c6bc293544" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_truncate()&lt;/strong&gt; truncates a large object resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5131569d41a01b1aeb2f068cbfd08d462c6f877" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_unlink()&lt;/strong&gt; deletes a large object with the &lt;code&gt;oid&lt;/code&gt;. Returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ecc03cfae2874612d8672cdcaba014be87a557" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_lo_write()&lt;/strong&gt; writes data into a large object at the current seek position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d843a724a3580fa104b148b08013283e1789b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_meta_data()&lt;/strong&gt; returns table definition for &lt;em&gt;table_name&lt;/em&gt; as an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960b154e88742d4bd42cc9cdbaafacc476a43c9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_num_fields()&lt;/strong&gt; returns the number of fields (columns) in a PostgreSQL result resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dab6e73b5650a1f37542326ec3e0c46d81e07cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_num_rows()&lt;/strong&gt; will return the number of rows in a PostgreSQL result resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2145ee7df6c5d46ecef04f531a9b29fead6f57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_options()&lt;/strong&gt; will return a string containing the options specified on the given PostgreSQL &lt;code&gt;connection&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7872e0e431e6b55d0d53d0b3df0e40c0daa7630e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_pconnect()&lt;/strong&gt; opens a connection to a PostgreSQL database. It returns a connection resource that is needed by other PostgreSQL functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9712eea755f32a7a007b5d5e9dd07e575f5ba3f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_ping()&lt;/strong&gt; pings a database connection and tries to reconnect it if it is broken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a6397b37297240e28771a0e59b65ceea3366a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_port()&lt;/strong&gt; returns the port number that the given PostgreSQL &lt;code&gt;connection&lt;/code&gt; resource is connected to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d92372e572cc0400fbac68cdb7ae14eb8384fe0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_prepare()&lt;/strong&gt; creates a prepared statement for later execution with &lt;a href=&quot;function.pg-execute&quot;&gt;pg_execute()&lt;/a&gt; or &lt;a href=&quot;function.pg-send-execute&quot;&gt;pg_send_execute()&lt;/a&gt;. This feature allows commands that will be used repeatedly to be parsed and planned just once, rather than each time they are executed. &lt;strong&gt;pg_prepare()&lt;/strong&gt; is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ab012eb5f047cebf4fe3ded2d005b703c5bb99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_put_line()&lt;/strong&gt; sends a NULL-terminated string to the PostgreSQL backend server. This is needed in conjunction with PostgreSQL's &lt;em&gt;COPY FROM&lt;/em&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e44139b0a9c53bd70cf68a2d429a05c077cce0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_query()&lt;/strong&gt; executes the &lt;code&gt;query&lt;/code&gt; on the specified database &lt;code&gt;connection&lt;/code&gt;. &lt;a href=&quot;function.pg-query-params&quot;&gt;pg_query_params()&lt;/a&gt; should be preferred in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d04e495a328780e29c01f3315ccffdef4b63710" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_query_params()&lt;/strong&gt; is like &lt;a href=&quot;function.pg-query&quot;&gt;pg_query()&lt;/a&gt;, but offers additional functionality: parameter values can be specified separately from the command string proper. &lt;strong&gt;pg_query_params()&lt;/strong&gt; is supported only against PostgreSQL 7.4 or higher connections; it will fail when using earlier versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23d9ecffefe8eec4057a1e196318fa6e17a4917" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_result_error()&lt;/strong&gt; returns any error message associated with the &lt;code&gt;result&lt;/code&gt; resource. Therefore, the user has a better chance of getting the correct error message than with &lt;a href=&quot;function.pg-last-error&quot;&gt;pg_last_error()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285cb192a1aea8c7abd5e54319e239cfabce5a16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_result_error_field()&lt;/strong&gt; returns one of the detailed error message fields associated with &lt;code&gt;result&lt;/code&gt; resource. It is only available against a PostgreSQL 7.4 or above server. The error field is specified by the &lt;code&gt;fieldcode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074f7f5a40dcef062b9f4d439669adf8d0d36f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_result_seek()&lt;/strong&gt; sets the internal row offset in a result resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36238a8ad91eb0a57467c06b15082f023b52112f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_result_status()&lt;/strong&gt; returns the status of a result resource, or the PostgreSQL command completion tag associated with the result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69bcfdc74b0aa8ab616512c502007c2716ebf15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_select()&lt;/strong&gt; selects records specified by &lt;em&gt;assoc_array&lt;/em&gt; which has &lt;em&gt;field=&amp;gt;value&lt;/em&gt;. For a successful query, it returns an array containing all records and fields that match the condition specified by &lt;em&gt;assoc_array&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314c61dc463e19adcedf69894ad523105ef4f07b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_send_query()&lt;/strong&gt; sends a query or queries asynchronously to the &lt;code&gt;connection&lt;/code&gt;. Unlike &lt;a href=&quot;function.pg-query&quot;&gt;pg_query()&lt;/a&gt;, it can send multiple queries at once to PostgreSQL and get the results one by one using &lt;a href=&quot;function.pg-get-result&quot;&gt;pg_get_result()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b9cee2290b2e8585fbec40c529867f92624556" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_set_client_encoding()&lt;/strong&gt; sets the client encoding and returns 0 if success or -1 if error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d759fa28fa6f21e721cf4ea17a98a68fd32460" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_set_error_verbosity()&lt;/strong&gt; sets the verbosity mode, returning the connection's previous setting. In &lt;strong&gt;&lt;code&gt;PGSQL_ERRORS_TERSE&lt;/code&gt;&lt;/strong&gt; mode, returned messages include severity, primary text, and position only; this will normally fit on a single line. The default mode (&lt;strong&gt;&lt;code&gt;PGSQL_ERRORS_DEFAULT&lt;/code&gt;&lt;/strong&gt;) produces messages that include the above plus any detail, hint, or context fields (these may span multiple lines). The &lt;strong&gt;&lt;code&gt;PGSQL_ERRORS_VERBOSE&lt;/code&gt;&lt;/strong&gt; mode includes all available fields. Changing the verbosity does not affect the messages available from already-existing result objects, only subsequently-created ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e1d81264ef2979fc12afb9d5c3b9782b59fbe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_socket()&lt;/strong&gt; returns a read only &lt;a href=&quot;language.types.resource&quot;&gt;resource&lt;/a&gt; corresponding to the socket underlying the given PostgreSQL connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9fbfab1eb48518bc9e40eb3e6f64173ea7df11" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_trace()&lt;/strong&gt; enables tracing of the PostgreSQL frontend/backend communication to a file. To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf79a7bfc062a36860e98df38fd7bcfc43bd0d1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_transaction_status()&lt;/strong&gt; will give incorrect results when using a PostgreSQL 7.3 server that has the parameter &lt;em&gt;autocommit&lt;/em&gt; set to off. The server-side autocommit feature has been deprecated and does not exist in later server versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e1ffad16ba035d8be1d751569faa7c551988bee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_tty()&lt;/strong&gt; is obsolete, since the server no longer pays attention to the TTY setting, but the function remains for backwards compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b0b30742717c7eaf40b2a4c296b7e9cadffa53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_tty()&lt;/strong&gt; returns the TTY name that server side debugging output is sent to on the given PostgreSQL &lt;code&gt;connection&lt;/code&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2214a941fa803df899554fd5c37b7c7620d3b0b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_unescape_bytea()&lt;/strong&gt; unescapes PostgreSQL bytea data values. It returns the unescaped string, possibly containing binary data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31aa173f64af2e6df53c8050fa52057401c75f56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_update()&lt;/strong&gt; updates records that matches &lt;em&gt;condition&lt;/em&gt; with &lt;em&gt;data&lt;/em&gt;. If &lt;em&gt;options&lt;/em&gt; is specified, &lt;a href=&quot;function.pg-convert&quot;&gt;pg_convert()&lt;/a&gt; is applied to &lt;em&gt;data&lt;/em&gt; with specified options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9b6b8a83a74d6bf4d8079f35b9660a9067fe2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pg_version()&lt;/strong&gt; returns an array with the client, protocol and server version. Protocol and server versions are only available if PHP was compiled with PostgreSQL 7.4 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e696cc3e35c84b2ef0d00dd1c5b6a35c13f60032" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;php_ini_scanned_files()&lt;/strong&gt; returns a comma-separated list of configuration files parsed after &lt;var&gt;php.ini&lt;/var&gt;. The directories searched are set by a compile time option and, optionally, by an environment variable at run time: more information can be found in the &lt;a href=&quot;https://secure.php.net/manual/en/configuration.file.php#configuration.file.scan&quot;&gt;installation guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01eaa10826cd0d65ae8068c8f73db5f5d814c284" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;php_logo_guid()&lt;/strong&gt; has been removed from PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2052f073a1439005fb155c36ed74321f83c63220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;php_uname()&lt;/strong&gt; returns a description of the operating system PHP is running on. This is the same string you see at the very top of the &lt;a href=&quot;function.phpinfo&quot;&gt;phpinfo()&lt;/a&gt; output. For the name of just the operating system, consider using the &lt;strong&gt;&lt;code&gt;PHP_OS&lt;/code&gt;&lt;/strong&gt; constant, but keep in mind this constant will contain the operating system PHP was &lt;em&gt;built&lt;/em&gt; on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1036965c55e431bbfe9b19eec5abc0fdb56a0a6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;php_user_filter&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc693775053d5b35ce2411dd45e319f869d16f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;phpcredits()&lt;/strong&gt; outputs plain text instead of HTML when using the CLI mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6610d721e80ecad387662fcbc4b74d984df40219" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;phpinfo()&lt;/strong&gt; is also a valuable debugging tool as it contains all EGPCS (Environment, GET, POST, Cookie, Server) data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ad3bb6560a4e73b755922768409701bbf94576" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;phpinfo()&lt;/strong&gt; outputs plain text instead of HTML when using the CLI mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b7addd3396459af39cc9765f910d73570075c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;png2wbmp()&lt;/strong&gt; has been deprecated as of PHP 7.2.0, and will be removed as of PHP 8.0.0. Use &lt;a href=&quot;function.imagecreatefrompng&quot;&gt;imagecreatefrompng()&lt;/a&gt; and &lt;a href=&quot;function.imagewbmp&quot;&gt;imagewbmp()&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c96cc18a82f2e14eea07a30a4501f7658cb5f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;posix_access()&lt;/strong&gt; checks the user's permission of a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5305c4646169c4e73dc0f19d812e483007d13173" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;posix_getegid()&lt;/strong&gt; is different than &lt;a href=&quot;function.posix-getgid&quot;&gt;posix_getgid()&lt;/a&gt; because effective group ID can be changed by a calling process using &lt;a href=&quot;function.posix-setegid&quot;&gt;posix_setegid()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e5383dfef7c9e7bbc2d7bf35df5adf559fd51c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;posix_getrlimit()&lt;/strong&gt; returns an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt; of information about the current resource's soft and hard limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6247e57ddc65b95e9a32f429df6bde02225f0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;posix_mkfifo()&lt;/strong&gt; creates a special &lt;em&gt;FIFO&lt;/em&gt; file which exists in the file system and acts as a bidirectional communication endpoint for processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9775f7d927cc601d2ce0f375faba6f9296d12cf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;posix_setrlimit()&lt;/strong&gt; sets the soft and hard limits for a given system resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87211daa4241a4a72d03a16ed6d969d0b32a7082" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;possible values for &lt;code&gt;flags&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63bbf1404e32aa2ed97c5a1973fd22e3e612d90c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;possible values for &lt;code&gt;how&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f1c2212b0c5ac0fea06364c1f62914d13b2bd4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;possible values for &lt;code&gt;options&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb1028678d2d4a78f1aeb1241580953f4622651" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;possible values for &lt;code&gt;pid&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4126ec2b04216f782ea6453688f59da171c4eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preg_filter()&lt;/strong&gt; is identical to &lt;a href=&quot;function.preg-replace&quot;&gt;preg_replace()&lt;/a&gt; except it only returns the (possibly transformed) subjects where there was a match. For details about how this function works, read the &lt;a href=&quot;function.preg-replace&quot;&gt;preg_replace()&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e83ca7c1c56f23576d45c792dc9935651cdf90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preg_match()&lt;/strong&gt; returns 1 if the &lt;code&gt;pattern&lt;/code&gt; matches given &lt;code&gt;subject&lt;/code&gt;, 0 if it does not, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c4e8ad157d7a53bcb9fb9fe965082a7c3b36aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preg_quote()&lt;/strong&gt; takes &lt;code&gt;str&lt;/code&gt; and puts a backslash in front of every character that is part of the regular expression syntax. This is useful if you have a run-time string that you need to match in some text and the string may contain special regex characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59203c01b0a2be143b7f349ab83ea935529b5e32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preg_replace()&lt;/strong&gt; returns an array if the &lt;code&gt;subject&lt;/code&gt; parameter is an array, or a string otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e188a8220879365f68fe765c020e19c77c93b8cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preg_replace_callback()&lt;/strong&gt; returns an array if the &lt;code&gt;subject&lt;/code&gt; parameter is an array, or a string otherwise. On errors the return value is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcebe34a5171be0e00bd7441afe4117ff686a968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;preg_replace_callback_array()&lt;/strong&gt; returns an array if the &lt;code&gt;subject&lt;/code&gt; parameter is an array, or a string otherwise. On errors the return value is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad2350e6bfc5c35ec1adc870f0d497aa452c84a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prev()&lt;/strong&gt; behaves just like &lt;a href=&quot;function.next&quot;&gt;next()&lt;/a&gt;, except it rewinds the internal array pointer one place instead of advancing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b13d2403f6db10a9f9f8d333e463026c3f65fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;print_r()&lt;/strong&gt; displays information about a variable in a way that's readable by humans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7cae257cf386f1bf5489ead72e5f7286c6efaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;print_r()&lt;/strong&gt;, &lt;a href=&quot;function.var-dump&quot;&gt;var_dump()&lt;/a&gt; and &lt;a href=&quot;function.var-export&quot;&gt;var_export()&lt;/a&gt; will also show protected and private properties of objects. Static class members will not be shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca979dd514994659f0e6856a5faad849cbb2def" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_close()&lt;/strong&gt; is similar to &lt;a href=&quot;function.pclose&quot;&gt;pclose()&lt;/a&gt; except that it only works on processes opened by &lt;a href=&quot;function.proc-open&quot;&gt;proc_open()&lt;/a&gt;. &lt;strong&gt;proc_close()&lt;/strong&gt; waits for the process to terminate, and returns its exit code. If you have open pipes to that process, you should &lt;a href=&quot;function.fclose&quot;&gt;fclose()&lt;/a&gt; them prior to calling this function in order to avoid a deadlock - the child process may not be able to exit while the pipes are open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6861da926391024562c29b5477a77fce511c6c5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_get_status()&lt;/strong&gt; fetches data about a process opened using &lt;a href=&quot;function.proc-open&quot;&gt;proc_open()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b58d2d56df04db7fac789a7578d7d4de8cbb3fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_nice()&lt;/strong&gt; changes the priority of the current process by the amount specified in &lt;code&gt;increment&lt;/code&gt;. A positive &lt;code&gt;increment&lt;/code&gt; will lower the priority of the current process, whereas a negative &lt;code&gt;increment&lt;/code&gt; will raise the priority.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ea62683289d999cc43e3cbb5f92b548cb785116" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_nice()&lt;/strong&gt; is not related to &lt;a href=&quot;function.proc-open&quot;&gt;proc_open()&lt;/a&gt; and its associated functions in any way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67010ae9db7e747373c9b2b9833deba68e973d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_nice()&lt;/strong&gt; will change the &lt;em&gt;current&lt;/em&gt; process priority, even if PHP was compiled using thread safety.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85d76d16d2f4fd861608a7327fa15d3a56a6b3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_nice()&lt;/strong&gt; will only exist if your system has 'nice' capabilities. 'nice' conforms to: SVr4, SVID EXT, AT&amp;amp;T, X/OPEN, BSD 4.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18207cac4c9c5be1ad6f73307a9ebc064fbef677" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_open()&lt;/strong&gt; is similar to &lt;a href=&quot;function.popen&quot;&gt;popen()&lt;/a&gt; but provides a much greater degree of control over the program execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7691bb3ffbec2c94d2833df2f974cc5ac495107" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;proc_terminate()&lt;/strong&gt; allows you terminate the process and continue with other tasks. You may poll the process (to see if it has stopped yet) by using the &lt;a href=&quot;function.proc-get-status&quot;&gt;proc_get_status()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805f1d605b9c738e6001bf5d46d017f66a5b8b39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rand()&lt;/strong&gt;&lt;a href=&quot;https://secure.php.net/manual/en/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases&quot;&gt;has been made&lt;/a&gt; an alias of &lt;a href=&quot;function.mt-rand&quot;&gt;mt_rand()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8de78088375bee9bc2bd4fac96f08995646d400" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rand()&lt;/strong&gt;&lt;a href=&quot;https://secure.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.rand-mt_rand-output&quot;&gt;has received a bug fix&lt;/a&gt; for a modulo bias bug. This means that sequences generated with a specific seed may differ from PHP 7.1 on 64-bit machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813162673ffb683c3c5b90bb310112dbe34eaebe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rawurldecode()&lt;/strong&gt; does not decode plus symbols ('+') into spaces. &lt;a href=&quot;function.urldecode&quot;&gt;urldecode()&lt;/a&gt; does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8f8b992d0758e847f3f0d95cd88999c039eea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;readfile()&lt;/strong&gt; will not present any memory issues, even when sending large files, on its own. If you encounter an out of memory error ensure that output buffering is off with &lt;a href=&quot;function.ob-get-level&quot;&gt;ob_get_level()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78131169c9a93b8dbbba803d9419a02e5fc97e3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;readgzfile()&lt;/strong&gt; can be used to read a file which is not in gzip format; in this case &lt;strong&gt;readgzfile()&lt;/strong&gt; will directly read from the file without decompression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19bbab6279be39649527241d90b57f4b4fed0ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;readlink()&lt;/strong&gt; does the same as the readlink C function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86abfdf2e312e4532ef153fdb52f485c21d08f38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;realpath()&lt;/strong&gt; expands all symbolic links and resolves references to &lt;em&gt;/./&lt;/em&gt;, &lt;em&gt;/../&lt;/em&gt; and extra &lt;em&gt;/&lt;/em&gt; characters in the input &lt;code&gt;path&lt;/code&gt; and returns the canonicalized absolute pathname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16f558dece7af2727a41a474b738dd6e0a5785b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;realpath()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure, e.g. if the file does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a87eefe32e338dc68950d6b1dbb8553cba86c4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;register_tick_function()&lt;/strong&gt; should not be used with threaded web server modules with PHP 5.2 or lower.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3080035c03d1c2485b73b6088a6a7ce0275d2e80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rename()&lt;/strong&gt; can now also be used with &lt;em&gt;some&lt;/em&gt; URL wrappers. Refer to &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.php&quot;&gt;Supported Protocols and Wrappers&lt;/a&gt; for a listing of which wrappers support &lt;strong&gt;rename()&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523b61a21cb9afa3307c7a9d6f3902be763c7d1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rename()&lt;/strong&gt; can now rename files across drives in Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b372f3b270a2931f445d913bf35db1811f663b4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rename()&lt;/strong&gt; may now be able to rename files across partitions on *nix based systems, provided the appropriate permissions are held. Warnings may be generated if the destination filesystem doesn't permit &lt;em&gt;chown()&lt;/em&gt; or &lt;em&gt;chmod()&lt;/em&gt; system calls to be made on files &amp;mdash; for example, if the destination filesystem is a FAT filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bad2e9e72c52d6ee834ba542f11fc9a454d24c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reset()&lt;/strong&gt; rewinds &lt;code&gt;array&lt;/code&gt;'s internal pointer to the first element and returns the value of the first array element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21cbdc0313f07761c600a636befc43da9996b17d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sem_acquire()&lt;/strong&gt; by default blocks (if necessary) until the semaphore can be acquired. A process attempting to acquire a semaphore which it has already acquired will block forever if acquiring the semaphore would cause its maximum number of semaphore to be exceeded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b233d906c1a10f8b8c60e04863faf2530c3f8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sem_get()&lt;/strong&gt; returns an id that can be used to access the System V semaphore with the given &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6770a872fad4312f778b88ba12804ae4122355" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sem_release()&lt;/strong&gt; releases the semaphore if it is currently acquired by the calling process, otherwise a warning is generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99926b840aa7f0de4dd7acd5b6ce667c04e027a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sem_remove()&lt;/strong&gt; removes the given semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cff151a722b35139fcd3b968960e237b681a92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_abort()&lt;/strong&gt; finishes session without saving data. Thus the original values in session data are kept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe58ba5464e671ae6f980db540b9bf1081d422f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_cache_expire()&lt;/strong&gt; returns the current setting of &lt;em&gt;session.cache_expire&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991704a32d6bd25369d0738a4b26279224cdcccb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_cache_limiter()&lt;/strong&gt; returns the name of the current cache limiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2e630a2f10eb10ef4aa986f7691bc3433c8827" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_create_id()&lt;/strong&gt; is used to create new session id for the current session. It returns collision free session id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a57207962dce2c16319301ebc97bc23448100d0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_create_id()&lt;/strong&gt; returns new collision free session id for the current session. If it is used without active session, it omits collision check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12e84a70f18026d40462272125fdaa699fb47933" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_decode()&lt;/strong&gt; decodes the serialized session data provided in &lt;code&gt;$data&lt;/code&gt;, and populates the $_SESSION superglobal with the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b25d981dbff3124a2eaeb2c65bad13f0a078353" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_destroy()&lt;/strong&gt; destroys all of the data associated with the current session. It does not unset any of the global variables associated with the session, or unset the session cookie. To use the session variables again, &lt;a href=&quot;function.session-start&quot;&gt;session_start()&lt;/a&gt; has to be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="989d724391de3080f7426185a999f062809c1561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_encode()&lt;/strong&gt; returns a serialized string of the contents of the current session data stored in the $_SESSION superglobal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd9710e179328b088d72ba6ed3a036da4bd6542" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_gc()&lt;/strong&gt; is used to perform session data GC(garbage collection). PHP does probability based session GC by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fe0fda38183dea3c48df86ab85120afd125936" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_gc()&lt;/strong&gt; returns number of deleted session data for success, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; for failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0183366c8ac573bed7cb5b53d200b5f3de32aeea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_id()&lt;/strong&gt; is used to get or set the session id for the current session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779fd524be2f8b820e610661f59992d45c6ffd5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_id()&lt;/strong&gt; returns the session id for the current session or the empty string (&lt;em&gt;&quot;&quot;&lt;/em&gt;) if there is no current session (no current session id exists).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607e4c908eee111cd3098ee6a807a024f1ee6f78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_is_registered()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt; if there is a global variable with the name &lt;code&gt;name&lt;/code&gt; registered in the current session, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf823c8aefba0cc73c8b5cc4324af702f157f8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_module_name()&lt;/strong&gt; gets the name of the current session module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e0ab123d42c2b640253336e8a1a633e13b2c88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_name()&lt;/strong&gt; checks session status, previously it only checked cookie status. Therefore, older &lt;strong&gt;session_name()&lt;/strong&gt; allows to call &lt;strong&gt;session_name()&lt;/strong&gt; after &lt;a href=&quot;function.session-start&quot;&gt;session_start()&lt;/a&gt; which may crash PHP and may result in misbehaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a156da211f50a7f476f3a2dcd0cf340193daa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_name()&lt;/strong&gt; returns the name of the current session. If &lt;code&gt;name&lt;/code&gt; is given, &lt;strong&gt;session_name()&lt;/strong&gt; will update the session name and return the &lt;em&gt;old&lt;/em&gt; session name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15599bb4ba4e929d685cbe49a6b902ca27f7d5e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_regenerate_id()&lt;/strong&gt; saves old session data before closing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30373cef2c16ac71f0fd226a55acff83720c0904" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_regenerate_id()&lt;/strong&gt; will replace the current session id with a new one, and keep the current session information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de103fd2e9ab8d20c31cc526d81c7cb5f34b6d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_register()&lt;/strong&gt; accepts a variable number of arguments, any of which can be either a string holding the name of a variable or an array consisting of variable names or other arrays. For each name, &lt;strong&gt;session_register()&lt;/strong&gt; registers the global variable with that name in the current session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1911ac8611d80c35a6ba7dd2702a96c3405da2d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_reset()&lt;/strong&gt; reinitializes a session with original values stored in session storage. This function requires an active session and discards changes in $_SESSION.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df90e79e6d8ddea7d447dd63892584dd700e1fcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_save_path()&lt;/strong&gt; returns the path of the current directory used to save session data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b19d7d26144bad12bba989829133c393d5361f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_set_save_handler()&lt;/strong&gt; sets the user-level session storage functions which are used for storing and retrieving data associated with a session. This is most useful when a storage method other than those supplied by PHP sessions is preferred, e.g. storing the session data in a local database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6045da59d6ab55dabe9f52dd22ca33641bbdf4f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_start()&lt;/strong&gt; creates a session or resumes the current one based on a session identifier passed via a GET or POST request, or passed via a cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546d43df68a36fc48eefe5b9007b6718fa7646aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_start()&lt;/strong&gt; now returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; and no longer initializes &lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.session&quot;&gt;$_SESSION&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; when it failed to start the session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093b8309a7175b629e2d8df71bf86c0269ba8fa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_status()&lt;/strong&gt; is used to return the current session status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b51e9805745f026a123da3231a01eda8e465e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;session_unregister()&lt;/strong&gt; unregisters the global variable named &lt;code&gt;name&lt;/code&gt; from the current session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c57e9a7612ea2d47e5bc2a29e5b61b148db382b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;setcookie()&lt;/strong&gt; defines a cookie to be sent along with the rest of the HTTP headers. Like other headers, cookies must be sent &lt;em&gt;before&lt;/em&gt; any output from your script (this is a protocol restriction). This requires that you place calls to this function prior to any output, including &lt;em&gt;&amp;lt;html&amp;gt;&lt;/em&gt; and &lt;em&gt;&amp;lt;head&amp;gt;&lt;/em&gt; tags as well as any whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe7bbd0a97e3e2fbe1c60557a7c57653292b426" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;setrawcookie()&lt;/strong&gt; is exactly the same as &lt;a href=&quot;function.setcookie&quot;&gt;setcookie()&lt;/a&gt; except that the cookie value will not be automatically urlencoded when sent to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d2b5a96b92b81c6a22310c3e9f2a4609079c55f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shift()&lt;/strong&gt;, &lt;strong&gt;unshift()&lt;/strong&gt;, &lt;strong&gt;insert()&lt;/strong&gt; and &lt;strong&gt;remove()&lt;/strong&gt; are all O(n).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6305edca713dca6af835f17d74bd6e4c3ff1d1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shm_attach()&lt;/strong&gt; returns an id that can be used to access the System V shared memory with the given &lt;code&gt;key&lt;/code&gt;, the first call creates the shared memory segment with &lt;code&gt;memsize&lt;/code&gt; and the optional perm-bits &lt;code&gt;perm&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d9a21d921f74b9397bba17f3724006b885597e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shm_detach()&lt;/strong&gt; always returns &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051238b15181fe91e7145aceb9c1ebd7abe6983c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shm_detach()&lt;/strong&gt; disconnects from the shared memory given by the &lt;code&gt;shm_identifier&lt;/code&gt; created by &lt;a href=&quot;function.shm-attach&quot;&gt;shm_attach()&lt;/a&gt;. Remember, that shared memory still exist in the Unix system and the data is still present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8cfbcadeab3811268f7d955ca6f2ad8cc9a0ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shm_get_var()&lt;/strong&gt; returns the variable with a given &lt;code&gt;variable_key&lt;/code&gt;, in the given shared memory segment. The variable is still present in the shared memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0bf28d671be88523ab311b7247cc6e55a9048e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shm_put_var()&lt;/strong&gt; inserts or updates the &lt;code&gt;variable&lt;/code&gt; with the given &lt;code&gt;variable_key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc035e129d9a6695719c3fe2d4581660477a154" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shm_remove()&lt;/strong&gt; removes the shared memory &lt;code&gt;shm_identifier&lt;/code&gt;. All data will be destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bcaa995c9a091d0ff5bdb58ec24ccc9646cdac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shmop_close()&lt;/strong&gt; is used to close a shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4fe2f8819eabae1540c07582280527d69c7bd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shmop_delete()&lt;/strong&gt; is used to delete a shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7b8f99e308844bdb44760e303a71aa06b5d127" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shmop_open()&lt;/strong&gt; can create or open a shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c816b70b0fc6b369ce51f8cab9a425fee1f13c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shmop_read()&lt;/strong&gt; will read a string from shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad11391800e0941ea9dabba7e3db2cbcba33971" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shmop_size()&lt;/strong&gt; is used to get the size, in bytes of the shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa7d318adf4b87234736d22e56d5d1bd090dd1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;shmop_write()&lt;/strong&gt; will write a string into shared memory block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba7d33b77948050850768e6370d9e6e431f7b6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sin()&lt;/strong&gt; returns the sine of the &lt;code&gt;arg&lt;/code&gt; parameter. The &lt;code&gt;arg&lt;/code&gt; parameter is in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0cb0213c52efa66a6a53b689de0a813fa444057" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_addrinfo_explain()()&lt;/strong&gt; exposed the underlying &lt;em&gt;addrinfo&lt;/em&gt; structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823f011dc5749a201735c0212991b19a9d78e817" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_close()&lt;/strong&gt; closes the socket resource given by &lt;code&gt;socket&lt;/code&gt;. This function is specific to sockets and cannot be used on any other type of resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f4c3ea899799a53dd97e7b8693451838ed4a4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_create()&lt;/strong&gt; returns a socket resource on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error. The actual error code can be retrieved by calling &lt;a href=&quot;function.socket-last-error&quot;&gt;socket_last_error()&lt;/a&gt;. This error code may be passed to &lt;a href=&quot;function.socket-strerror&quot;&gt;socket_strerror()&lt;/a&gt; to get a textual explanation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306adebde03f275502363b3e921393278e914a65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_create_listen()&lt;/strong&gt; creates a new socket resource of type &lt;strong&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/strong&gt; listening on &lt;em&gt;all&lt;/em&gt; local interfaces on the given port waiting for new connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd281ac57653cb3a29b404237edf0ba62671bcc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_create_listen()&lt;/strong&gt; returns a new socket resource on success or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error. The error code can be retrieved with &lt;a href=&quot;function.socket-last-error&quot;&gt;socket_last_error()&lt;/a&gt;. This code may be passed to &lt;a href=&quot;function.socket-strerror&quot;&gt;socket_strerror()&lt;/a&gt; to get a textual explanation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a92de98f988c68c4a63a6c6cc8e6f7ac60b9e6ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_create_pair()&lt;/strong&gt; creates two connected and indistinguishable sockets, and stores them in &lt;code&gt;fd&lt;/code&gt;. This function is commonly used in IPC (InterProcess Communication).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f38a710051dfed693c28a921e02160a8e816e75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_getpeername()&lt;/strong&gt; should not be used with &lt;strong&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/strong&gt; sockets created with &lt;a href=&quot;function.socket-accept&quot;&gt;socket_accept()&lt;/a&gt;. Only sockets created with &lt;a href=&quot;function.socket-connect&quot;&gt;socket_connect()&lt;/a&gt; or a primary server socket following a call to &lt;a href=&quot;function.socket-bind&quot;&gt;socket_bind()&lt;/a&gt; will return meaningful values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97db030ed73d3031ed9df0596ce3e9e26fd2617a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_last_error()&lt;/strong&gt; does not clear the error code, use &lt;a href=&quot;function.socket-clear-error&quot;&gt;socket_clear_error()&lt;/a&gt; for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da790b53f43a5c4ea93210a2ce265493ae0e5447" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_listen()&lt;/strong&gt; is applicable only to sockets of type &lt;strong&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;SOCK_SEQPACKET&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf2d3e78bdbafe4e3d01db6e3d9a95958f855e08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_read()&lt;/strong&gt; returns a zero length string (&quot;&quot;) when there is no more data to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d27c82164d1ef0d35c5c681d185cb814a18ad3da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_read()&lt;/strong&gt; returns the data as a string on success, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error (including if the remote host has closed the connection). The error code can be retrieved with &lt;a href=&quot;function.socket-last-error&quot;&gt;socket_last_error()&lt;/a&gt;. This code may be passed to &lt;a href=&quot;function.socket-strerror&quot;&gt;socket_strerror()&lt;/a&gt; to get a textual representation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5898131411d9accc82dfc177e83b03beb38c351" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_recv()&lt;/strong&gt; returns the number of bytes received, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if there was an error. The actual error code can be retrieved by calling &lt;a href=&quot;function.socket-last-error&quot;&gt;socket_last_error()&lt;/a&gt;. This error code may be passed to &lt;a href=&quot;function.socket-strerror&quot;&gt;socket_strerror()&lt;/a&gt; to get a textual explanation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c453a7eaf54cc08a7b517d5b55feb32aedef5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_recvfrom()&lt;/strong&gt; is now binary safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28e31e844c08f42f3d2813dc1562213484d13fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_recvfrom()&lt;/strong&gt; returns the number of bytes received, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if there was an error. The actual error code can be retrieved by calling &lt;a href=&quot;function.socket-last-error&quot;&gt;socket_last_error()&lt;/a&gt;. This error code may be passed to &lt;a href=&quot;function.socket-strerror&quot;&gt;socket_strerror()&lt;/a&gt; to get a textual explanation of the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8321ec1662cfd405560c8fdb21a5dddc2782e1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_select()&lt;/strong&gt; accepts arrays of sockets and waits for them to change status. Those coming with BSD sockets background will recognize that those socket resource arrays are in fact the so-called file descriptor sets. Three independent arrays of socket resources are watched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848b8b8b1702bba1683a4ae3d7a31d0102edbe9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_send()&lt;/strong&gt; returns the number of bytes sent, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcc8f8af42e255ad408c6cf774c760a077dea54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_sendto()&lt;/strong&gt; returns the number of bytes sent to the remote host, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce924019d09644307abe37d12399f020a89699c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_strerror()&lt;/strong&gt; takes as its &lt;code&gt;errno&lt;/code&gt; parameter a socket error code as returned by &lt;a href=&quot;function.socket-last-error&quot;&gt;socket_last_error()&lt;/a&gt; and returns the corresponding explanatory text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7d0baa16af6211beca33c4dbae428ba4e4dbea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;socket_write()&lt;/strong&gt; does not necessarily write all bytes from the given buffer. It's valid that, depending on the network buffers etc., only a certain amount of data, even one byte, is written though your buffer is greater. You have to watch out so you don't unintentionally forget to transmit the rest of your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b021201d45a4d237510af6335beccab1721221" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;split()&lt;/strong&gt; is deprecated as of PHP 5.3.0. &lt;a href=&quot;function.preg-split&quot;&gt;preg_split()&lt;/a&gt; is the suggested alternative to this function. If you don't require the power of regular expressions, it is faster to use &lt;a href=&quot;function.explode&quot;&gt;explode()&lt;/a&gt;, which doesn't incur the overhead of the regular expression engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be89b0fac71b209f0cb6499028268bcc2da2841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;srand()&lt;/strong&gt;&lt;a href=&quot;https://secure.php.net/manual/en/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases&quot;&gt;has been made&lt;/a&gt; an alias of &lt;a href=&quot;function.mt-srand&quot;&gt;mt_srand()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea8307f559d94be5859f1399e829c2b2bd464ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ssh2_auth_hostbased_file()&lt;/strong&gt; requires libssh2 &amp;gt;= 0.7 and PHP/SSH2 &amp;gt;= 0.7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec902d5ca5bca13c18f4be535cb0b0441ee6482" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;str_shuffle()&lt;/strong&gt; shuffles a string. One permutation of all possible is created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc8c38f995777b43f79653cfe9684ac4d62dafb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;str_split()&lt;/strong&gt; will split into bytes, rather than characters when dealing with a multi-byte encoded string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2a3a5ab70ec427331c97bd2213a7c3e4145d9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strcoll()&lt;/strong&gt; uses the current locale for doing the comparisons. If the current locale is C or POSIX, this function is equivalent to &lt;a href=&quot;function.strcmp&quot;&gt;strcmp()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c5e2f38edff6b23192ecd4b072892a7c15545e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;streamWrapper::stream_tell()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;streamWrapper::stream_tell()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d57b357afe3a98d1e3079a1b7d7858c90417b752" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_context_get_params()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;stream_context_get_params()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="316a414c6075b5e827d3f4bc185ff0ad1f3411ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_filter_register()&lt;/strong&gt; allows you to implement your own filter on any registered stream used with all the other filesystem functions (such as &lt;a href=&quot;function.fopen&quot;&gt;fopen()&lt;/a&gt;, &lt;a href=&quot;function.fread&quot;&gt;fread()&lt;/a&gt; etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ad9982f91ca4f3a5810250c462acd280b7751a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_filter_register()&lt;/strong&gt; will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the &lt;code&gt;filtername&lt;/code&gt; is already defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b424c912ca62ad4855c84ebc2a6380b02f10ebf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_socket_pair()&lt;/strong&gt; creates a pair of connected, indistinguishable socket streams. This function is commonly used in IPC (Inter-Process Communication).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4421aebdbe81d6112bf7f2ce7b4ace0e3d38237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_socket_recvfrom()&lt;/strong&gt; accepts data from a remote socket up to &lt;code&gt;length&lt;/code&gt; bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c36c846673b4b7bb53209cfc901b871163afee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stream_wrapper_register()&lt;/strong&gt; will return &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the &lt;code&gt;protocol&lt;/code&gt; already has a handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ee55a94dbcf742a94d943aad7e99012708fd56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strip_tags()&lt;/strong&gt; ignores self-closing XHTML tags in &lt;code&gt;allowable_tags&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5387a15d97d2d4b7df7985e0219a4bc0f9ba3ddf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strip_tags()&lt;/strong&gt; is now binary safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01448cd6bf36f2db2e5c547f6572746d4dd81b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stripslashes()&lt;/strong&gt; is not recursive. If you want to apply this function to a multi-dimensional array, you need to use a recursive function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7855e35e72ee456f8911683ad29235bfaaf861b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;stristr()&lt;/strong&gt; was made binary safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d575ecf157d047a0a5d71f38df170dfcfad70f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strlen()&lt;/strong&gt; returns &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; when executed on arrays, and an &lt;strong&gt;&lt;code&gt;E_WARNING&lt;/code&gt;&lt;/strong&gt; level error is emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab70d91fc2b137310cbf726cfa50b637b48c408" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strlen()&lt;/strong&gt; returns the number of bytes rather than the number of characters in a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f2fbe82aefe2f523e49e61b3d384fcb5021bab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strpbrk()&lt;/strong&gt; searches the &lt;code&gt;haystack&lt;/code&gt; string for a &lt;code&gt;char_list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf6920cc2acec36079197a40d33d42a0d8e1445" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strptime()&lt;/strong&gt; returns an array with the &lt;code&gt;date&lt;/code&gt; parsed, or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8056220ba852f643f9fb037415db0ba370d1320c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strstr()&lt;/strong&gt; was made binary safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460f0fb5e221b7aea3db0f25bcbd0ea50277b99b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;strtok()&lt;/strong&gt; splits a string (&lt;code&gt;str&lt;/code&gt;) into smaller strings (tokens), with each token being delimited by any character from &lt;code&gt;token&lt;/code&gt;. That is, if you have a string like &quot;This is an example string&quot; you could tokenize this string into its individual words by using the space character as the token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02793cdecf85b5b9028a618032b016ed9c24b5dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;substr_compare()&lt;/strong&gt; compares &lt;code&gt;main_str&lt;/code&gt; from position &lt;code&gt;offset&lt;/code&gt; with &lt;code&gt;str&lt;/code&gt; up to &lt;code&gt;length&lt;/code&gt; characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4c2f37a95fa18ec2cd8acd2d07f2847aba7cfa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;substr_count()&lt;/strong&gt; returns the number of times the &lt;code&gt;needle&lt;/code&gt; substring occurs in the &lt;code&gt;haystack&lt;/code&gt; string. Please note that &lt;code&gt;needle&lt;/code&gt; is case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4245a01ab5372eae36b16a6ba9d7c50109c6cbde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;substr_replace()&lt;/strong&gt; replaces a copy of &lt;code&gt;string&lt;/code&gt; delimited by the &lt;code&gt;start&lt;/code&gt; and (optionally) &lt;code&gt;length&lt;/code&gt; parameters with the string given in &lt;code&gt;replacement&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a98b98384e5ee042dca749943778d38643e590" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;symlink()&lt;/strong&gt; creates a symbolic link to the existing &lt;code&gt;target&lt;/code&gt; with the specified name &lt;code&gt;link&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a786b1a01868e7d9288b78601486c7cf5ae45a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;syslog()&lt;/strong&gt; generates a log message that will be distributed by the system logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8dcda02b5e01aa996a7b4a64d14ccff7cb775d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;system()&lt;/strong&gt; is just like the C version of the function in that it executes the given &lt;code&gt;command&lt;/code&gt; and outputs the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42954d741926bbc82af37063723845626699349" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tan()&lt;/strong&gt; returns the tangent of the &lt;code&gt;arg&lt;/code&gt; parameter. The &lt;code&gt;arg&lt;/code&gt; parameter is in radians.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebb0b5dd972d149b2b4e5b448af4e1c932fd612" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tidy::errorBuffer()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tidy::errorBuffer()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="639af722b495772a34af3886781e5eddecc9355d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tidy&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a850db10313ce43fc0a5cc9be3666bc718644604" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tidyNode&lt;/strong&gt; {</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5351dd248ad4a16697104e698be5f5c28540c6c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tidy_access_count()&lt;/strong&gt; returns the number of accessibility warnings found for the specified document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819c5b6d32e94d5bfe04c86d2bd2e7ea2f166420" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tidy_get_opt_doc()&lt;/strong&gt; returns the documentation for the given option name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ac50112b352172a155c7d93e580ef918dff7d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tidy_setopt()&lt;/strong&gt; updates the specified &lt;code&gt;option&lt;/code&gt; with a new &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71d470b81549844c42ead5987aa835e21e3d968" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;token_get_all()&lt;/strong&gt; parses the given &lt;code&gt;source&lt;/code&gt; string into PHP language tokens using the Zend engine's lexical scanner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e39ae7e3fed9304806b63425f32fdc0a41e7707" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;token_name()&lt;/strong&gt; gets the symbolic name for a PHP &lt;code&gt;token&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18947b3a2e13ad80f219fb78b1e2495219f795e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;uksort()&lt;/strong&gt; will sort the keys of an array using a user-supplied comparison function. If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f02988cca807d3c1aa9aee7614562dc328ea60c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;umask()&lt;/strong&gt; sets PHP's umask to &lt;code&gt;mask&lt;/code&gt; &amp;amp; 0777 and returns the old umask. When PHP is being used as a server module, the umask is restored when each request is finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e374afee6f50eb832e640f2883b785d171b62b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;umask()&lt;/strong&gt; without arguments simply returns the current umask otherwise the old umask is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2013290a7ea37b5742b29736f1809ff2ace9352b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unserialize()&lt;/strong&gt; takes a single serialized variable and converts it back into a PHP value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749eae324ca556a202944389e157de74320cd67f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;unset()&lt;/strong&gt; destroys the specified variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79bb5f914778f24109f39bb185bfb4c26d321e8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;var_export()&lt;/strong&gt; does not handle circular references as it would be close to impossible to generate parsable PHP code for that. If you want to do something with the full representation of an array or object, use &lt;a href=&quot;function.serialize&quot;&gt;serialize()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87618340cc5774fdf9be5331e15300667be81841" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;var_export()&lt;/strong&gt; gets structured information about the given variable. It is similar to &lt;a href=&quot;function.var-dump&quot;&gt;var_dump()&lt;/a&gt; with one exception: the returned representation is valid PHP code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2543b3140e2fdaca1918896dbf030d96079830c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;version_compare()&lt;/strong&gt; compares two &quot;PHP-standardized&quot; version number strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64884498ac3d760baf990870ba3c978baadbc7d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;virtual()&lt;/strong&gt; is an Apache-specific function which is similar to &lt;em&gt;&amp;lt;!--#include virtual...--&amp;gt;&lt;/em&gt; in &lt;em&gt;mod_include&lt;/em&gt;. It performs an Apache sub-request. It is useful for including CGI scripts or &lt;var&gt;.shtml&lt;/var&gt; files, or anything else that you would parse through Apache. Note that for a CGI script, the script must generate valid CGI headers. At the minimum that means it must generate a &lt;em&gt;Content-Type&lt;/em&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bc367245543a119fc1435473839710e37efefa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xml_parse()&lt;/strong&gt; parses an XML document. The handlers for the configured events are called as many times as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76b8c8056a3aa6aac2ea8d23b6dbf2a44df462a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xml_parse_into_struct()&lt;/strong&gt; returns 0 for failure and 1 for success. This is not the same as &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;TRUE&lt;/code&gt;&lt;/strong&gt;, be careful with operators such as ===.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ca023a4450dcfc4fa227539bac4cd4b4e52b58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xml_parser_create()&lt;/strong&gt; creates a new XML parser and returns a resource handle referencing it to be used by the other XML functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4662b97087539713132bb2a70dc88aa4f86e3e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xml_parser_create_ns()&lt;/strong&gt; creates a new XML parser with XML namespace support and returns a resource handle referencing it to be used by the other XML functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae4b283f53f5a9559fee6f24035feb40ef362b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;yield from&lt;/strong&gt; does not reset the keys. It preserves the keys returned by the &lt;a href=&quot;class.traversable&quot;&gt;Traversable&lt;/a&gt; object, or &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;. Thus some values may share a common key with another &lt;strong&gt;yield&lt;/strong&gt; or &lt;strong&gt;yield from&lt;/strong&gt;, which, upon insertion into an array, will overwrite former values with that key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f5acabdc791b6211f6ca0912caae0274a72e96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;yield&lt;/strong&gt; keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aaafdacc8ae907e74a94065ea85b2be6455a5fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;zend_logo_guid()&lt;/strong&gt; has been removed from PHP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef361d7654dcd8d611818969abccabda7203d8a2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_COOKIE_VARS&lt;/var&gt;&lt;/var&gt; contains the same initial information, but is not a &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal&lt;/a&gt;. (Note that &lt;var&gt;&lt;var&gt;$HTTP_COOKIE_VARS&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$_COOKIE&lt;/var&gt;&lt;/var&gt; are different variables and that PHP handles them as such)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21de89817caadbaf7d9ec0a8535f7b50b5a1b55" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_ENV_VARS&lt;/var&gt;&lt;/var&gt; contains the same initial information, but is not a &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal&lt;/a&gt;. (Note that &lt;var&gt;&lt;var&gt;$HTTP_ENV_VARS&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$_ENV&lt;/var&gt;&lt;/var&gt; are different variables and that PHP handles them as such)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1575bf1d015499463c7285d3c2b046c3bdcfdce" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_GET_VARS&lt;/var&gt;&lt;/var&gt; contains the same initial information, but is not a &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal&lt;/a&gt;. (Note that &lt;var&gt;&lt;var&gt;$HTTP_GET_VARS&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$_GET&lt;/var&gt;&lt;/var&gt; are different variables and that PHP handles them as such)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946f662d0454b88ef4b1c7e5c838603e23499cd8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_POST_FILES&lt;/var&gt;&lt;/var&gt; contains the same initial information, but is not a &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal&lt;/a&gt;. (Note that &lt;var&gt;&lt;var&gt;$HTTP_POST_FILES&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$_FILES&lt;/var&gt;&lt;/var&gt; are different variables and that PHP handles them as such)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ec5f8296c941a50995fb591046bd0549ca6ba1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_POST_VARS&lt;/var&gt;&lt;/var&gt; contains the same initial information, but is not a &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal&lt;/a&gt;. (Note that &lt;var&gt;&lt;var&gt;$HTTP_POST_VARS&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$_POST&lt;/var&gt;&lt;/var&gt; are different variables and that PHP handles them as such)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2351a7288bc949d67cd4a8c8621bb3cb2268f21e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_RAW_POST_DATA&lt;/var&gt;&lt;/var&gt; contains the raw POST data. See &lt;a href=&quot;https://secure.php.net/manual/en/ini.core.php#ini.always-populate-raw-post-data&quot;&gt;always_populate_raw_post_data&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9e3d1f3247714bc19ced7003316c7da8cbbd85" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_SERVER_VARS&lt;/var&gt;&lt;/var&gt; isn't available anymore due to the removal of long arrays registering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7baef8f1a61211c40b5afd55893b34d62378fe4e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$HTTP_SESSION_VARS&lt;/var&gt;&lt;/var&gt; contains the same initial information, but is not a &lt;a href=&quot;language.variables.superglobals&quot;&gt;superglobal&lt;/a&gt;. (Note that &lt;var&gt;&lt;var&gt;$HTTP_SESSION_VARS&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$_SESSION&lt;/var&gt;&lt;/var&gt; are different variables and that PHP handles them as such)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ef23eea2a9931c856d8f2e12cd1d19226e2df2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$_SERVER&lt;/var&gt;&lt;/var&gt; is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these variables are accounted for in the &lt;a href=&quot;http://www.faqs.org/rfcs/rfc3875&quot;&gt;&amp;raquo; CGI/1.1 specification&lt;/a&gt;, so you should be able to expect those.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d41623144f2254e1fd982c178f84da1c7ab1fc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; are completely equal here. &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; is not pointing to &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; or vice versa. &lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; are pointing to the same place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd00a27323a328a795dd7d053b1a6d7a39e0234" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$a&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;$b&lt;/var&gt;&lt;/var&gt; are equal to 5 digits of precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230682742bc0e156aef7cdade6b51e8c6ea152c8" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$bar&lt;/var&gt;&lt;/var&gt; now contains the following key/value pairs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b746ab463b3828e0420298c7dc9564d7533db7c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$php_errormsg&lt;/var&gt;&lt;/var&gt; is a variable containing the text of the last error message generated by PHP. This variable will only be available within the scope in which the error occurred, and only if the &lt;a href=&quot;https://secure.php.net/manual/en/errorfunc.configuration.php#ini.track-errors&quot;&gt;track_errors&lt;/a&gt; configuration option is turned on (it defaults to off).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a8cdcb6d47468f83b03724c6810ef3750423fc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$regs[1]&lt;/var&gt;&lt;/var&gt; will contain the substring which starts at the first left parenthesis; &lt;var&gt;&lt;var&gt;$regs[2]&lt;/var&gt;&lt;/var&gt; will contain the substring starting at the second, and so on. &lt;var&gt;&lt;var&gt;$regs[0]&lt;/var&gt;&lt;/var&gt; will contain a copy of the complete string matched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b472e8e01f3052f081e409bbcd90b4cb9c46cc" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;$thread[&quot;XX.num&quot;]&lt;/var&gt;&lt;/var&gt; - current message number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354215b5b7b060951d4f799a134f4b61697bd392" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;&lt;a href=&quot;reserved.variables.files&quot;&gt;$_FILES&lt;/a&gt;&lt;/var&gt;&lt;/var&gt; information was removed from &lt;var&gt;&lt;var&gt;$_REQUEST&lt;/var&gt;&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd81a7a045fb180bce1dddc9626d86548aaef5a2" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;fragment&lt;/var&gt;&lt;/var&gt; - after the hashmark &lt;em&gt;#&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49e88e64fde4a9f4503bdec39e16a094564cda3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;line&lt;/var&gt;&lt;/var&gt;, &lt;var&gt;&lt;var&gt;column&lt;/var&gt;&lt;/var&gt; and &lt;var&gt;&lt;var&gt;proprietary&lt;/var&gt;&lt;/var&gt; were added</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f8f5ad93c0ec78ef3a70873f11c2e50b7ceda1" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;query&lt;/var&gt;&lt;/var&gt; - after the question mark &lt;em&gt;?&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07bba100394a6c7ae88f35ccf256e08de59a93e" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;&lt;var&gt;scheme&lt;/var&gt;&lt;/var&gt; - e.g. http</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd84f9f1b497fb07b1b8f2d7b6f26245049b4550" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;browscap.ini&lt;/var&gt; is not bundled with PHP, but you may find an up-to-date &lt;a href=&quot;http://browscap.org/&quot;&gt;&amp;raquo; php_browscap.ini&lt;/a&gt; file here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c932e2763aea002320981f4848a890381f20c6" translate="yes" xml:space="preserve">
          <source>= x0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c81c602ab43fd1bb01013a2241be205ad9b3574" translate="yes" xml:space="preserve">
          <source>= x1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7655f0337bc5f42dff7beb5712ffe4d17e9552" translate="yes" xml:space="preserve">
          <source>= y0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31caf9669bea48b5fd4c598bb5abc5cb0cbaf77" translate="yes" xml:space="preserve">
          <source>= y1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="e423379705064097c5d96445226d46b55539f17b" translate="yes" xml:space="preserve">
          <source>A &quot;Locale&quot; is an identifier used to get language, culture, or regionally-specific behavior from an API. PHP locales are organized and identified the same way that the CLDR locales used by ICU (and many vendors of Unix-like operating systems, the Mac, Java, and so forth) use. Locales are identified using RFC 4646 language tags (which use hyphen, not underscore) in addition to the more traditional underscore-using identifiers. Unless otherwise noted the functions in this class are tolerant of both formats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80479acb61a67049e723aaa3bdbff9db778f9c72" translate="yes" xml:space="preserve">
          <source>A &quot;word&quot; character is any letter or digit or the underscore character, that is, any character which can be part of a Perl &quot;&lt;em&gt;word&lt;/em&gt;&quot;. The definition of letters and digits is controlled by PCRE's character tables, and may vary if locale-specific matching is taking place. For example, in the &quot;fr&quot; (French) locale, some character codes greater than 128 are used for accented letters, and these are matched by &lt;em&gt;\w&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665be480a57a4d3470b481b46d0899e72e22c17a" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;break iterator&amp;rdquo; is an ICU object that exposes methods for locating boundaries in text (e.g. word or sentence boundaries). The PHP &lt;strong&gt;IntlBreakIterator&lt;/strong&gt; serves as the base class for all types of ICU break iterators. Where extra functionality is available, the intl extension may expose the ICU break iterator with suitable subclasses, such as &lt;a href=&quot;class.intlrulebasedbreakiterator&quot;&gt;IntlRuleBasedBreakIterator&lt;/a&gt; or &lt;a href=&quot;class.intlcodepointbreakiterator&quot;&gt;IntlCodePointBreakIterator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e276a29695f63fcf267f68c945064487043d5ec0" translate="yes" xml:space="preserve">
          <source>A 32bit IPv4, or 128bit IPv6 address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4bf6b35899a3937cb9a659f5d6f072e76d8115" translate="yes" xml:space="preserve">
          <source>A 3x3 matrix: an array of three arrays of three floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5370debbfa526f6614b8358fdd01d6632e7df728" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.closure&quot;&gt;closure&lt;/a&gt; that defines the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be992bc0daa4f9227e341af1f903dd8e17cd7fd1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.closure&quot;&gt;closure&lt;/a&gt; that defines the method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2d4de0b31c46618650fd1a67b29d448402da1d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.dateinterval&quot;&gt;DateInterval&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb71f5c8430ad428bf96a223a054d966b33e3d78" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; object or a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt; that can be passed to &lt;a href=&quot;datetime.construct&quot;&gt;DateTime::__construct()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf901bd96c2526f51c1b4aaeca57518c79ef4d9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.datetime&quot;&gt;DateTime&lt;/a&gt; object with the same timezone as this object (though using PHPʼs database instead of ICUʼs) and the same time, except for the smaller precision (second precision instead of millisecond). Returns &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10344419bab19d4a79c704b20338a52a69290fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.datetimezone&quot;&gt;DateTimeZone&lt;/a&gt; object representing the desired time zone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc60610693a57953b90d5e9fca45a190771fb677" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.datetimezone&quot;&gt;DateTimeZone&lt;/a&gt; object representing the timezone of &lt;code&gt;$time&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="993e0ba4771a1944c444c5b23f90ed54127d6d41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.datetimezone&quot;&gt;DateTimeZone&lt;/a&gt;. Its identifier will be extracted and an ICU timezone object will be created; the timezone will be backed by ICUʼs database, not PHPʼs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c613f7599c001b5f9e891510cd4fa456637d87c7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.domnamednodemap&quot;&gt;DOMNamedNodeMap&lt;/a&gt; containing the attributes of this node (if it is a &lt;a href=&quot;class.domelement&quot;&gt;DOMElement&lt;/a&gt;) or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61dd6a758f6f1f1c577d7336475280ff3cc696d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.domnamednodemap&quot;&gt;DOMNamedNodeMap&lt;/a&gt; containing the general entities, both external and internal, declared in the DTD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df104b3c031fc85e2d53c137a2a4ea73e78d3b6d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.domnamednodemap&quot;&gt;DOMNamedNodeMap&lt;/a&gt; containing the notations declared in the DTD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ab564e848b521d128f22a7af9b4471a077b255" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.domnode&quot;&gt;DOMNode&lt;/a&gt; defining the target &lt;a href=&quot;class.domdocument&quot;&gt;DOMDocument&lt;/a&gt; for the created DOM object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b07e9d4921b3c91e440e2ee2fcf7baaca310b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.domnodelist&quot;&gt;DOMNodeList&lt;/a&gt; that contains all children of this node. If there are no children, this is an empty &lt;a href=&quot;class.domnodelist&quot;&gt;DOMNodeList&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2797ab8a5f729a71e43b70b37916f9d05e6278" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmanclient&quot;&gt;GearmanClient&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cff7ce55ddd4a0a67233c3b985aec203df2fea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmanclient&quot;&gt;GearmanClient&lt;/a&gt; on success, &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e763331412ed5e140a6659eba41b2207cad67b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmanjob&quot;&gt;GearmanJob&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82500d09e2704397a728325063dd928a658781e2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmantask&quot;&gt;GearmanTask&lt;/a&gt; object or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if the task could not be added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8b23522e5a671d3412d677a9eb123a24ef0148" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmantask&quot;&gt;GearmanTask&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b39c74557119e5919ee1ad0c400819e55e2741" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmantask&quot;&gt;GearmanTask&lt;/a&gt; oject or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; on failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f23626d839072dd85f24d90f8cf626de96b2e20" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.gearmanworker&quot;&gt;GearmanWorker&lt;/a&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7465a85e30e72b3c5634f1ce16dd99b417d2168" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.logicexception&quot;&gt;LogicException&lt;/a&gt; if mode &lt;strong&gt;&lt;code&gt;MIT_NEED_ALL&lt;/code&gt;&lt;/strong&gt; is set, and at least one attached iterator is not valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3a43b58c5f7e9a64b10f674f2e86be1645e9a17" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.phar&quot;&gt;Phar&lt;/a&gt; object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ac13b9738add0935395d958715201939b9a22d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.phardata&quot;&gt;PharData&lt;/a&gt; object is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62dfd3371d5ee0e3917f42c56f0affea492d9d66" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.pharfileinfo&quot;&gt;PharFileInfo&lt;/a&gt; object is returned that can be used to iterate over a file's contents or to retrieve information about the current file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc5e6314085d4362c8ad447c822832100afb8ce" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.recursiveiterator&quot;&gt;RecursiveIterator&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3dd2ba56297162240646c6783e065265f9d894" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionclass&quot;&gt;ReflectionClass&lt;/a&gt; object of the class that the reflected method is part of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ce9c6ca6544ff20e58b45ed93ff06bff52e014" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionclass&quot;&gt;ReflectionClass&lt;/a&gt; object or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if called on function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef91d4eb942844344b5c9d8f8c00cdc37d402cd7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionclass&quot;&gt;ReflectionClass&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a23b83cb5e8e8028da8fd5efce63a7107ae127" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionclass&quot;&gt;ReflectionClass&lt;/a&gt; or &lt;strong&gt;&lt;code&gt;FALSE&lt;/code&gt;&lt;/strong&gt; if there's no parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7a1d98e87c165b7ebe549debdbfe75fe41a002" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionclassconstant&quot;&gt;ReflectionClassConstant&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5140847a53078908edc674be1e026f1d7623bff9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; exception is thrown if the method does not have a prototype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a779b313263f098ef8ff7fa9a92d8a195b71e461" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the &lt;code&gt;name&lt;/code&gt; parameter does not contain a valid function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b6e03dec0ad1e626f7434c323c3381be204bcf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the &lt;code&gt;object&lt;/code&gt; parameter does not contain an instance of the class that this method was declared in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb3e7000329acee01511e02b7801f23ca4fda41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the class constructor is not public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac57849f1d4df8ed3885f2ecbdc661abce4e113" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the class does not have a constructor and the &lt;code&gt;args&lt;/code&gt; parameter contains one or more parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc280e7b1f75541ad65665f8292d3a56992da64" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the class is an internal class that cannot be instantiated without invoking the constructor. In PHP 5.6.0 onwards, this exception is limited only to internal classes that are &lt;a href=&quot;language.oop5.final&quot;&gt;final&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727c97924d596a2b6aec04a0b9a6cf523491804e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the method does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311f1c12bd53289994e4f9263cd2caae3e8aa049" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; if the method invocation failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26eac9311232b1a265e8c3ff61071549b7c4bc1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionexception&quot;&gt;ReflectionException&lt;/a&gt; is thrown if the given method does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8507ac8d9873d98120bc48fcc28759f70cb71cce" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionextension&quot;&gt;ReflectionExtension&lt;/a&gt; object representing the extension which defined the class, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; for user-defined classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feab7f429918f279b3fb8a5104bde1d4c0f3ce8d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionextension&quot;&gt;ReflectionExtension&lt;/a&gt;&lt;a href=&quot;language.types.object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366452ee9fe4b6b0e8e4b887350ee5f078ae229b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionfunction&quot;&gt;ReflectionFunction&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925a75734f5432cb61a8264b134269d8e44d3ddf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionmethod&quot;&gt;ReflectionMethod&lt;/a&gt; instance of the method prototype.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f28f3da19df0a681064e1a79a599d9f33319f06" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionmethod&quot;&gt;ReflectionMethod&lt;/a&gt; object reflecting the class' constructor, or &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; if the class has no constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cbf1633482275c507a9607d86f0f26732bd40b2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionmethod&quot;&gt;ReflectionMethod&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f180ad57e581812a5bd85cdb3c37397a42346917" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.reflectionproperty&quot;&gt;ReflectionProperty&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5907e3e2d165934546532947620023d7304aa6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; if mode &lt;strong&gt;&lt;code&gt;MIT_NEED_ALL&lt;/code&gt;&lt;/strong&gt; is set and at least one attached iterator is not valid. Or an &lt;strong&gt;IllegalValueException&lt;/strong&gt; if a key is &lt;strong&gt;&lt;code&gt;NULL&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;MIT_KEYS_ASSOC&lt;/code&gt;&lt;/strong&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7a72745169ff8b65c01038a5471bb221db0414" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; if the file cannot be opened (e.g. insufficient access rights).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22522ad56ec72fe4467767bcaa2ede0b4bb25506" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; is thrown when the returned value is not a &lt;a href=&quot;language.types.string&quot;&gt;string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2260077b67090b22a0c9e58a4c35727f7f2094c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.runtimeexception&quot;&gt;RuntimeException&lt;/a&gt; will be thrown if the file does not exist or an error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84d562737db7201a991757872712e36bb839b60a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.soapfault&quot;&gt;SoapFault&lt;/a&gt; exception will be thrown if the &lt;code&gt;wsdl&lt;/code&gt; URI cannot be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42fcd93f2885667180c0eddbc1bbca7693d2dfa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.solrinputdocument&quot;&gt;SolrInputDocument&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33cd5c1628212dd12451f557e3496b158a1c8fac" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.solrparams&quot;&gt;SolrParams&lt;/a&gt; object. It is recommended to use &lt;a href=&quot;class.solrquery&quot;&gt;SolrQuery&lt;/a&gt; for advanced queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf8398bcd0d5c36428a5794b992a2855c8fc4a8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.threaded&quot;&gt;Threaded&lt;/a&gt; object to be executed by the worker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e894726af2dfbaa599971ccf69995355fa8c37b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.traversable&quot;&gt;traversable&lt;/a&gt; object or an &lt;a href=&quot;language.types.array&quot;&gt;array&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1b25d2d20b312581afdbbfc112e7c3029a3d07" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.yaf-bootstrap-abstract&quot;&gt;Yaf_Bootstrap_Abstract&lt;/a&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb26676f9f33476b91adee77acd58f47219f9929" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.yaf-config-abstract&quot;&gt;Yaf_Config_Abstract&lt;/a&gt; instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aab01a762154a16356efa116ef2af0ca084e6997" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;class.yaf-request-abstract&quot;&gt;Yaf_Request_Abstract&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514670dc7fb9bc41ea4e12d0e3f12d7bcd757d6c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;function.glob&quot;&gt;glob()&lt;/a&gt; pattern against which files will be matched.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
