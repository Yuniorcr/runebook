<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="apache_http_server">
    <body>
      <group id="apache_http_server">
        <trans-unit id="9b484edcf07a759bd1b0787743b13b6c7bbe4f7c" translate="yes" xml:space="preserve">
          <source>The server access log records all requests processed by the server. The location and content of the access log are controlled by the &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive. The &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; directive can be used to simplify the selection of the contents of the logs. This section describes how to configure the server to record information in the access log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa2b9e4193b7a994fc13347b53386bb59aa2fbd" translate="yes" xml:space="preserve">
          <source>The server also reads a file containing mime document types; the filename is set by the &lt;code&gt;&lt;a href=&quot;mod/mod_mime#typesconfig&quot;&gt;TypesConfig&lt;/a&gt;&lt;/code&gt; directive, and is &lt;code&gt;mime.types&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77bbde8d5cfc91800879bf1c3d4b6ff97de9e1f9" translate="yes" xml:space="preserve">
          <source>The server always adds a &lt;code&gt;Date:&lt;/code&gt; and &lt;code&gt;Server:&lt;/code&gt; header to the data returned to the client, so these should not be included in the file. The server does &lt;em&gt;not&lt;/em&gt; add a &lt;code&gt;Last-Modified&lt;/code&gt; header; it probably should.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505b4e1e3ba168fdd78a1b93637168a99df3a008" translate="yes" xml:space="preserve">
          <source>The server banner, f.x. &lt;code&gt;Apache HTTP Server/2.4.3 openssl/0.9.8c&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be694d9a7c690cc01cd6eca9d32222dfcd3564cc" translate="yes" xml:space="preserve">
          <source>The server can be better customized for the needs of the particular site. For example, sites that need a great deal of scalability can choose to use a threaded MPM like &lt;code&gt;&lt;a href=&quot;mod/worker&quot;&gt;worker&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod/event&quot;&gt;event&lt;/a&gt;&lt;/code&gt;, while sites requiring stability or compatibility with older software can use a &lt;code&gt;&lt;a href=&quot;mod/prefork&quot;&gt;prefork&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20db583f71378ed84eabe48b04dd0ba4770b045d" translate="yes" xml:space="preserve">
          <source>The server can be made to respond to internal and external requests with the same content, with just one &lt;code&gt;&lt;a href=&quot;../mod/core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068a98fec046ea776d8dfac24938e7de805372d9" translate="yes" xml:space="preserve">
          <source>The server can now read the header lines of a CGI-script output in EBCDIC format, and then find out that the remainder of the script's output is in ASCII (like in the case of the output of a WWW Counter program: the document body contains a GIF image). All header processing is done in the native EBCDIC format; the server then determines, based on the type of document being served, whether the document body (except for the chunking information, of course) is in ASCII already or must be converted from EBCDIC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb2581d3f535e8c4b5320f8d16cf4425e5dad31" translate="yes" xml:space="preserve">
          <source>The server determines which vhost to use for a request as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a79dde647cb5c73796dcccaff426731dea2f00f0" translate="yes" xml:space="preserve">
          <source>The server does not limit the number of overlapping ranges it is willing to satisfy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8caa5e2889ec97b6152d535db5e9a238128a907" translate="yes" xml:space="preserve">
          <source>The server does not limit the number of range reversals it is willing to satisfy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9fae357d4c33e7a7a3f83d93c5163e494abc3a4" translate="yes" xml:space="preserve">
          <source>The server does not limit the number of ranges it is willing to satisfy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24e13abf5769dab849046ac5842a209f598e44c" translate="yes" xml:space="preserve">
          <source>The server error log, whose name and location is set by the &lt;code&gt;&lt;a href=&quot;mod/core#errorlog&quot;&gt;ErrorLog&lt;/a&gt;&lt;/code&gt; directive, is the most important log file. This is the place where Apache httpd will send diagnostic information and record any errors that it encounters in processing requests. It is the first place to look when a problem occurs with starting the server or with the operation of the server, since it will often contain details of what went wrong and how to fix it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f9257967c666d0b985732dc99b4385bd8f581e" translate="yes" xml:space="preserve">
          <source>The server has two IP addresses (&lt;code&gt;172.20.30.40&lt;/code&gt; and &lt;code&gt;172.20.30.50&lt;/code&gt;) which resolve to the names &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;www.example.org&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44584a3c66ab8e3535955567a09257e8784489a7" translate="yes" xml:space="preserve">
          <source>The server has two IP addresses. On one (&lt;code&gt;172.20.30.40&lt;/code&gt;), we will serve the &quot;main&quot; server, &lt;code&gt;server.example.com&lt;/code&gt; and on the other (&lt;code&gt;172.20.30.50&lt;/code&gt;), we will serve two or more virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5787a84dab6b28917e7f27cd87b3d53654cb120" translate="yes" xml:space="preserve">
          <source>The server is approximately 20% slower at startup time because of the symbol resolving overhead the Unix loader now has to do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1137c2146d27b61aabeaee179482177a7b801df6" translate="yes" xml:space="preserve">
          <source>The server is approximately 5% slower at execution time under some platforms, because position independent code (PIC) sometimes needs complicated assembler tricks for relative addressing, which are not necessarily as fast as absolute addressing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66d5cabcae451f5d4c6dd3ed1dc9bd53e3c2849" translate="yes" xml:space="preserve">
          <source>The server is configured by placing &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/mod/quickreference.html&quot;&gt;configuration directives&lt;/a&gt; in these configuration files. A directive is a keyword followed by one or more arguments that set its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347e627f5e2a3238350329acd8e966f50542ec48" translate="yes" xml:space="preserve">
          <source>The server machine has two IP addresses (&lt;code&gt;172.20.30.40&lt;/code&gt; and &lt;code&gt;172.20.30.50&lt;/code&gt;) which resolve to the names &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;www.example.org&lt;/code&gt; respectively. In each case, we want to run hosts on ports 80 and 8080.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5e037156768210f2e8fe3bbd313e3c77c5f360" translate="yes" xml:space="preserve">
          <source>The server machine has two IP addresses (&lt;code&gt;192.168.1.1&lt;/code&gt; and &lt;code&gt;172.20.30.40&lt;/code&gt;). The machine is sitting between an internal (intranet) network and an external (internet) network. Outside of the network, the name &lt;code&gt;server.example.com&lt;/code&gt; resolves to the external address (&lt;code&gt;172.20.30.40&lt;/code&gt;), but inside the network, that same name resolves to the internal address (&lt;code&gt;192.168.1.1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9864a732816e7fa9a5e447a3aed55241dc8729e8" translate="yes" xml:space="preserve">
          <source>The server name according to the &lt;code&gt;&lt;a href=&quot;core#usecanonicalname&quot;&gt;UseCanonicalName&lt;/a&gt;&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b07060c0f77ecf764cf6379042af18fe62f6013" translate="yes" xml:space="preserve">
          <source>The server name for this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8f0bf1ba4962c71446d79419c1350d765e7b96a" translate="yes" xml:space="preserve">
          <source>The server name of the server serving the request according to the &lt;code&gt;&lt;a href=&quot;#usecanonicalname&quot;&gt;UseCanonicalName&lt;/a&gt;&lt;/code&gt; setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0839bceae1455d44d56d9ad64f2ef3ccc9b1df14" translate="yes" xml:space="preserve">
          <source>The server package can be easily extended with third-party modules even after installation. This is a great benefit for vendor package maintainers, who can create an Apache httpd core package and additional packages containing extensions like PHP, mod_perl, mod_security, &lt;em&gt;etc.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6401b9d83d3ee5cb2f2ff3061d869fb294388ba" translate="yes" xml:space="preserve">
          <source>The server package is more flexible at run-time because the server process can be assembled at run-time via &lt;code&gt;&lt;a href=&quot;mod/mod_so#loadmodule&quot;&gt;LoadModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;httpd.conf&lt;/code&gt; configuration directives instead of &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; options at build-time. For instance, this way one is able to run different server instances (standard &amp;amp; SSL version, minimalistic &amp;amp; dynamic version [mod_perl, mod_php], &lt;em&gt;etc.&lt;/em&gt;) with only one Apache httpd installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2daebdc3dc728e99c2eab5a78974571893edac" translate="yes" xml:space="preserve">
          <source>The server port of the current vhost, see &lt;code&gt;&lt;a href=&quot;mod/core#servername&quot;&gt;ServerName&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13e4b68292850f15a29212617590b3857c2605b" translate="yes" xml:space="preserve">
          <source>The server port used by the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2dd9010457410fea8782dc883ce591adf71c3e3" translate="yes" xml:space="preserve">
          <source>The server root compiled into the server is usually &lt;code&gt;sys:/apache2&lt;/code&gt;. invoking apache with the &lt;code&gt;-V&lt;/code&gt; switch will display this value labeled as &lt;code&gt;HTTPD_ROOT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68c9f7e6718b5ee6864418a96ec4c02772413ab" translate="yes" xml:space="preserve">
          <source>The server root compiled into the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c26a619ad9cd16d814a49a4afbf2b8000647dd" translate="yes" xml:space="preserve">
          <source>The server root compiled into the server. This is &lt;code&gt;/apache&lt;/code&gt; by default, you can verify it by using &lt;code&gt;httpd.exe -V&lt;/code&gt; and looking for a value labelled as &lt;code&gt;HTTPD_ROOT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d18f05d5ee4e4b87aa2fbcef32df4ae9cdf9e46" translate="yes" xml:space="preserve">
          <source>The server version string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6934c334a86fede607131daf8a44333a7de5a407" translate="yes" xml:space="preserve">
          <source>The server will also attempt to match language-subsets when no other match can be found. For example, if a client requests documents with the language &lt;code&gt;en-GB&lt;/code&gt; for British English, the server is not normally allowed by the HTTP/1.1 standard to match that against a document that is marked as simply &lt;code&gt;en&lt;/code&gt;. (Note that it is almost surely a configuration error to include &lt;code&gt;en-GB&lt;/code&gt; and not &lt;code&gt;en&lt;/code&gt; in the &lt;code&gt;Accept-Language&lt;/code&gt; header, since it is very unlikely that a reader understands British English, but doesn't understand English in general. Unfortunately, many current clients have default configurations that resemble this.) However, if no other language match is possible and the server is about to return a &quot;No Acceptable Variants&quot; error or fallback to the &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation#languagepriority&quot;&gt;LanguagePriority&lt;/a&gt;&lt;/code&gt;, the server will ignore the subset specification and match &lt;code&gt;en-GB&lt;/code&gt; against &lt;code&gt;en&lt;/code&gt; documents. Implicitly, httpd will add the parent language to the client's acceptable language list with a very low quality value. But note that if the client requests &quot;en-GB; q=0.9, fr; q=0.8&quot;, and the server has documents designated &quot;en&quot; and &quot;fr&quot;, then the &quot;fr&quot; document will be returned. This is necessary to maintain compliance with the HTTP/1.1 specification and to work effectively with properly configured clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f9df57ba69c0e1707f8d8bcf8675aea735f140" translate="yes" xml:space="preserve">
          <source>The server will execute the given string using &lt;code&gt;/bin/sh&lt;/code&gt;. The &lt;a href=&quot;#includevars&quot;&gt;include variables&lt;/a&gt; are available to the command, in addition to the usual set of CGI variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd394026f40980f9584c112f766487d4cae04df" translate="yes" xml:space="preserve">
          <source>The server will follow symbolic links in this directory. This is the default setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b986983883944ac577d74ebd77bc9b0bfec234" translate="yes" xml:space="preserve">
          <source>The server will only follow symbolic links for which the target file or directory is owned by the same user id as the link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b5b4744899a8195166e6a6f15820114d3bd012" translate="yes" xml:space="preserve">
          <source>The server will retry failed LDAP requests up to &lt;code&gt;LDAPRetries&lt;/code&gt; times. Setting this directive to 0 disables retries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bca2c8d6a9312eb7fc39ae2d06157afcc39f69b" translate="yes" xml:space="preserve">
          <source>The server will send a &lt;strong&gt;response&lt;/strong&gt; consisting of a status code and, optionally, a response body. The status code indicates whether the request was successful, and, if not, what kind of error condition there was. This tells the client what it should do with the response. You can read about the possible response codes in &lt;a href=&quot;http://wiki.apache.org/httpd/CommonHTTPStatusCodes&quot;&gt;HTTP Server wiki&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4dde423d58078e63cbbee730cd9a2e411d3516" translate="yes" xml:space="preserve">
          <source>The server will set the CGI environment variables as described in the &lt;a href=&quot;http://www.ietf.org/rfc/rfc3875&quot;&gt;CGI specification&lt;/a&gt;, with the following provisions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7af8c7d6f5fd626fda725bea78acd429c4bee1" translate="yes" xml:space="preserve">
          <source>The server will set the TCP receive buffer size to the number of bytes specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb3c05134db6191e5d5313abe81e1f202f30da5" translate="yes" xml:space="preserve">
          <source>The servlet container can send the following types of messages to the webserver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7474c51302b8142d2362ba164cc64828d0d3a7" translate="yes" xml:space="preserve">
          <source>The session can optionally be encrypted and base64 encoded before being written to the storage mechanism, as defined by the administrator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d07fc06c73a285d6534352daf3ff9957e1b0428" translate="yes" xml:space="preserve">
          <source>The session interface is primarily developed for the use by other server modules, such as &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt;, however CGI based applications can optionally be granted access to the contents of the session via the HTTP_SESSION environment variable. Sessions have the option to be modified and/or updated by inserting an HTTP response header containing the new session parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17ef998d5d3a2c004b7afa20e0eeffa78f34359" translate="yes" xml:space="preserve">
          <source>The session is not useful unless it can be written to or read from. The following example shows how values can be injected into the session through the use of a predetermined HTTP response header called &lt;code&gt;X-Replace-Session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9095771cc7362941d9f430f1768138e43b52e50e" translate="yes" xml:space="preserve">
          <source>The session modules make use of HTTP cookies, and as such can fall victim to Cross Site Scripting attacks, or expose potentially private information to clients. Please ensure that the relevant risks have been taken into account before enabling the session functionality on your server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b5030bd9d5da1966ce2ea1c54143d82739d3ded" translate="yes" xml:space="preserve">
          <source>The session will be automatically decrypted on load, and encrypted on save by Apache, the underlying application using the session need have no knowledge that encryption is taking place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333e174e4957111830e82372b42d828bf2226a60" translate="yes" xml:space="preserve">
          <source>The session will be encrypted with the given key. Different servers can be configured to share sessions by ensuring the same encryption key is used on each server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c2afe0790a995b620f12a1c416a69714171812" translate="yes" xml:space="preserve">
          <source>The set Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64dff595f3d939a1ac35270966ec9bf7f6de96a" translate="yes" xml:space="preserve">
          <source>The set of available &lt;code&gt;SSLOpenSSLConfCmd&lt;/code&gt; commands depends on the OpenSSL version being used for &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; (at least version 1.0.2 is required). For a list of supported command names, see the section &lt;em&gt;Supported configuration file commands&lt;/em&gt; in the &lt;a href=&quot;http://www.openssl.org/docs/man1.0.2/ssl/SSL_CONF_cmd.html#SUPPORTED-CONFIGURATION-FILE-COMMANDS&quot;&gt;SSL_CONF_cmd(3)&lt;/a&gt; manual page for OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c6f858798234ff3a9e5f2e87305b0b007c249b" translate="yes" xml:space="preserve">
          <source>The set of options available for a direct worker depends on the protocol which is specified in the origin server URL. Available protocols include &lt;code&gt;ajp&lt;/code&gt;, &lt;code&gt;fcgi&lt;/code&gt;, &lt;code&gt;ftp&lt;/code&gt;, &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;scgi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683887e5cd6a4514a8bccd27960d7f6fd8cbf086" translate="yes" xml:space="preserve">
          <source>The setting in the global server defines the default for all vhosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97ddee4b68c16bbf0255e364b18591a7d33cce7" translate="yes" xml:space="preserve">
          <source>The setting is respected by any modules which use &lt;code&gt;ap_add_common_vars()&lt;/code&gt;, such as &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_cgid&quot;&gt;mod_cgid&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod_proxy_scgi&quot;&gt;mod_proxy_scgi&lt;/a&gt;&lt;/code&gt;, and so on. Notably, it affects modules which don't handle the request in the usual sense but still use this API; examples of this are &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_ext_filter&quot;&gt;mod_ext_filter&lt;/a&gt;&lt;/code&gt;. Third-party modules that don't use &lt;code&gt;ap_add_common_vars()&lt;/code&gt; may choose to respect the setting as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441d58a7b12f1414e6793bb166ff9f3794c367c8" translate="yes" xml:space="preserve">
          <source>The setting of &lt;code&gt;AuthMerging&lt;/code&gt; is not inherited outside of the configuration section in which it appears. In the following example, only users belonging to group &lt;code&gt;alpha&lt;/code&gt; may access &lt;code&gt;/www/docs&lt;/code&gt;. Users belonging to either groups &lt;code&gt;alpha&lt;/code&gt; or &lt;code&gt;beta&lt;/code&gt; may access &lt;code&gt;/www/docs/ab&lt;/code&gt;. However, the default &lt;code&gt;Off&lt;/code&gt; setting of &lt;code&gt;AuthMerging&lt;/code&gt; applies to the &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; configuration section for &lt;code&gt;/www/docs/ab/gamma&lt;/code&gt;, so that section's authorization directives override those of the preceding sections. Thus only users belong to the group &lt;code&gt;gamma&lt;/code&gt; may access &lt;code&gt;/www/docs/ab/gamma&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d976e0349b43eb344c7e33c81c90c59bc3b1de" translate="yes" xml:space="preserve">
          <source>The shared library approach is the typical one, because it is what the DSO mechanism was designed for, hence it is used for nearly all types of libraries the operating system provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e432434c625b4b9f39d9f4a8ebd0d55d7526b3" translate="yes" xml:space="preserve">
          <source>The shared object cache as such is an abstraction. Four different modules implement it. To use the cache, one or more of these modules must be present, and configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938c3469a39ccd69b46d0af1fa91f2083a5b6b99" translate="yes" xml:space="preserve">
          <source>The shared object cache implementation to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="846b35c0a34315e75aa1eb2b861956f61cacced3" translate="yes" xml:space="preserve">
          <source>The short answer is to use the &lt;code&gt;CA.sh&lt;/code&gt; or &lt;code&gt;CA.pl&lt;/code&gt; script provided by OpenSSL. Unless you have a good reason not to, you should use these for preference. If you cannot, you can create a self-signed certificate as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f6cfeda43fcc9d9016d83d3e40898f71c61de0" translate="yes" xml:space="preserve">
          <source>The simple example below, which can be clipped and saved in a header.html file, illustrates these query options. Note that the unknown &quot;X&quot; argument, for the submit button, is listed last to assure the arguments are all parsed before mod_autoindex encounters the X=Go input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e066586b2848b883c345a21ed0a386501cb5c688" translate="yes" xml:space="preserve">
          <source>The single biggest hardware issue affecting webserver performance is RAM. A webserver should never ever have to swap, as swapping increases the latency of each request beyond a point that users consider &quot;fast enough&quot;. This causes users to hit stop and reload, further increasing the load. You can, and should, control the &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; setting so that your server does not spawn so many children that it starts swapping. The procedure for doing this is simple: determine the size of your average Apache process, by looking at your process list via a tool such as &lt;code&gt;top&lt;/code&gt;, and divide this into your total available memory, leaving some room for other processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff9d57bee5957a23b2c9c7efb0f4839dfffdd1b" translate="yes" xml:space="preserve">
          <source>The size in bytes of the stack used by threads handling client connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4a7aeb59a718de4f687592835da27ffb9f62eb" translate="yes" xml:space="preserve">
          <source>The size limit of the request body for this request, or 0 if no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f386b4d70e18fb03e2dd3646646b29577c49d89a" translate="yes" xml:space="preserve">
          <source>The size of any PUT or POST entity body that is logged to the file is limited, to prevent the log file growing too big too quickly if large bodies are being received. By default, up to 1024 bytes are logged, but this can be changed with this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299802278051806ac9078607b299b6bbbf68185e" translate="yes" xml:space="preserve">
          <source>The size of the body in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90204d869680cd8b3e310571e0d5b8709591b23" translate="yes" xml:space="preserve">
          <source>The size of the header in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380bb850de9647c2e403d3c6fe4d9db3e3673110" translate="yes" xml:space="preserve">
          <source>The slash character has special meaning depending on where in a URL it appears. People may be used to its behavior in the filesystem where multiple adjacent slashes are frequently collapsed to a single slash (&lt;em&gt;i.e.&lt;/em&gt;, &lt;code&gt;/home///foo&lt;/code&gt; is the same as &lt;code&gt;/home/foo&lt;/code&gt;). In URL-space this is not necessarily true. The &lt;code&gt;&lt;a href=&quot;#locationmatch&quot;&gt;&amp;lt;LocationMatch&amp;gt;&lt;/a&gt;&lt;/code&gt; directive and the regex version of &lt;code&gt;&amp;lt;Location&amp;gt;&lt;/code&gt; require you to explicitly specify multiple slashes if that is your intention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059909e55e0fab1dfbd3a080218f320e33fa6a1c" translate="yes" xml:space="preserve">
          <source>The solution is easy, because we can simply add the new IP address (&lt;code&gt;172.20.30.50&lt;/code&gt;) to the &lt;code&gt;VirtualHost&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a17549c64a4b82cfaaa3333580ed324f21fcbc" translate="yes" xml:space="preserve">
          <source>The source code of your CGI program or a &quot;POST Method Not Allowed&quot; message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de57514a060cf0c7cd5b3951e5810fb9191b970" translate="yes" xml:space="preserve">
          <source>The specific Apache service to be uninstalled can be specified by using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327b16382fffba27f9c319dbe1410ca91f8738cb" translate="yes" xml:space="preserve">
          <source>The specified location matches exactly the path component of the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f50cf27c0b95b078efbf8c5c468f82a5ef7afeb" translate="yes" xml:space="preserve">
          <source>The specified location, which ends in a forward slash, is a prefix of the path component of the URL (treated as a context root).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b41194aa9f850d967c6a003ea2bfdcd28f6e87" translate="yes" xml:space="preserve">
          <source>The specified location, with the addition of a trailing slash, is a prefix of the path component of the URL (also treated as a context root).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9ff02b9f505fdf15c895776c0fb3a25411a731" translate="yes" xml:space="preserve">
          <source>The standard for robot exclusion defines a file, &lt;code&gt;/robots.txt&lt;/code&gt; that specifies those portions of your website where you wish to exclude robots. However, some robots do not honor these files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aedc09c2bfeb1395431d18c5e14c90f28e4c9e8" translate="yes" xml:space="preserve">
          <source>The starting point of the grammar is 'string' rather than 'expr'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21912951b279b6585cfc8ed0e396356a6b8427ac" translate="yes" xml:space="preserve">
          <source>The status code and message are the usual HTTP things (e.g. &lt;code&gt;200&lt;/code&gt; and &lt;code&gt;OK&lt;/code&gt;). The response header names are encoded the same way the request header names are. See header_encoding above for details about how the codes are distinguished from the strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f576b1112670301493e8408eab590520b3dff1ed" translate="yes" xml:space="preserve">
          <source>The status module will also use a &lt;code&gt;G&lt;/code&gt; to indicate those children which are still serving requests started before the graceful restart was given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25adf44bc95a3ea142d99f8738398c94650a5dc" translate="yes" xml:space="preserve">
          <source>The status of each worker, the number of requests that worker has performed and the total number of bytes served by the worker (*)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932e5dd03dc7d5c035ae69aee27a1a337e10f808" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;_default_&lt;/code&gt;, which is an alias for &lt;code&gt;*&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02a376dd720e64b7f877c5f3b1f12ed30fccb99" translate="yes" xml:space="preserve">
          <source>The string is written in the URL query format, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b781b312ffa633d447e6c79c1f66d41c4444f6fe" translate="yes" xml:space="preserve">
          <source>The string provided for the &lt;code&gt;AuthName&lt;/code&gt; is what will appear in the password dialog provided by most browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f76b3975796f156e7ecdeb6447b3e82206cbd8a" translate="yes" xml:space="preserve">
          <source>The strings &lt;code&gt;$0&lt;/code&gt; ... &lt;code&gt;$9&lt;/code&gt; allow to reference the capture groups from a previously executed, successfully matching regular expressions. They can normally only be used in the same expression as the matching regex, but some modules allow special uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e4cf3c9bd0339880dca826d121a318d378cb5b" translate="yes" xml:space="preserve">
          <source>The structure of &lt;code&gt;request_headers&lt;/code&gt; is the following: First, the number of headers &lt;code&gt;num_headers&lt;/code&gt; is encoded. Then, a series of header name &lt;code&gt;req_header_name&lt;/code&gt; / value &lt;code&gt;req_header_value&lt;/code&gt; pairs follows. Common header names are encoded as integers, to save space. If the header name is not in the list of basic headers, it is encoded normally (as a string, with prefixed length). The list of common headers &lt;code&gt;sc_req_header_name&lt;/code&gt;and their codes is as follows (all are case-sensitive):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc078522fc6ce6bad7df2eeed2a5aadefe4db0e" translate="yes" xml:space="preserve">
          <source>The structure of this conditional construct is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b269b6f14a33c584a59aed808aa3b11618199394" translate="yes" xml:space="preserve">
          <source>The suEXEC wrapper will write log information to the file defined with the &lt;code&gt;--with-suexec-logfile&lt;/code&gt; option as indicated above. If you feel you have configured and installed the wrapper properly, have a look at this log and the error_log for the server to see where you may have gone astray.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eea6dce4228ddcab9f9255348963b6c26b3563e" translate="yes" xml:space="preserve">
          <source>The substituted DN is recorded in the environment variable &lt;em&gt;LDAP_BINDASUSER&lt;/em&gt;. If the regular expression does not match the input, the verbatim username is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b48895ceb9baf1670a312815500e7e5c0171d6" translate="yes" xml:space="preserve">
          <source>The supplied web-username must match the system's name for the owner of the file being requested. That is, if the operating system says the requested file is owned by &lt;code&gt;jones&lt;/code&gt;, then the username used to access it through the web must be &lt;code&gt;jones&lt;/code&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c8cee9e084fb262e0c0ef9799e316fc0e560e1" translate="yes" xml:space="preserve">
          <source>The syntax is described in the &lt;a href=&quot;../expr&quot;&gt;ap_expr&lt;/a&gt; documentation. Before httpd 2.4.16, the surrounding double-quotes MUST be omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4edca10df00981b8fc3165b49337175db11fb2ad" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; directive is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f040576208c3cbc15df82ed0c078051b100da594" translate="yes" xml:space="preserve">
          <source>The syntax of the &lt;code&gt;ErrorDocument&lt;/code&gt; directive is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4de911173b489e50c094c3c4738fa950755fe52" translate="yes" xml:space="preserve">
          <source>The target (or substitution string) in a RewriteRule is assumed to be a file path, by default. The use of the [PT] flag causes it to be treated as a URI instead. That is to say, the use of the [PT] flag causes the result of the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; to be passed back through URL mapping, so that location-based mappings, such as &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt;, for example, might have a chance to take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca350ecc7c8ae3cbecb6540008d8818d9ce3c7d" translate="yes" xml:space="preserve">
          <source>The techniques described here are of interest if your &lt;code&gt;httpd.conf&lt;/code&gt; contains many &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections that are substantially the same, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4755b867eea2f52a7bce0fd84dddcbe38f11a642" translate="yes" xml:space="preserve">
          <source>The term</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699ec058bccb34440e5c2df4db48ee4607f3a79a" translate="yes" xml:space="preserve">
          <source>The test results will be cached in file &lt;var&gt;FILE&lt;/var&gt;. This option is disabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec5f6a7eabe0d59a4f6ab8ebb581d7805d8cfbc" translate="yes" xml:space="preserve">
          <source>The third argument is optional and controls whether or not to log a particular request. The condition can be the presence or absence (in the case of a '&lt;code&gt;env=!name&lt;/code&gt;' clause) of a particular variable in the server &lt;a href=&quot;../env&quot;&gt;environment&lt;/a&gt;. Alternatively, the condition can be expressed as arbitrary boolean &lt;a href=&quot;../expr&quot;&gt;expression&lt;/a&gt;. If the condition is not satisfied, the request will not be logged. References to HTTP headers in the expression will not cause the header names to be added to the Vary header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3753ac6d895e543c2c2f07f4f83fb12972e722" translate="yes" xml:space="preserve">
          <source>The third format of the arguments to the &lt;code&gt;Allow&lt;/code&gt; directive allows access to the server to be controlled based on the existence of an &lt;a href=&quot;../env&quot;&gt;environment variable&lt;/a&gt;. When &lt;code&gt;Allow from env=env-variable&lt;/code&gt; is specified, then the request is allowed access if the environment variable &lt;var&gt;env-variable&lt;/var&gt; exists. When &lt;code&gt;Allow from env=!env-variable&lt;/code&gt; is specified, then the request is allowed access if the environment variable &lt;var&gt;env-variable&lt;/var&gt; doesn't exist. The server provides the ability to set environment variables in a flexible way based on characteristics of the client request using the directives provided by &lt;code&gt;&lt;a href=&quot;mod_setenvif&quot;&gt;mod_setenvif&lt;/a&gt;&lt;/code&gt;. Therefore, this directive can be used to allow access based on such factors as the clients &lt;code&gt;User-Agent&lt;/code&gt; (browser type), &lt;code&gt;Referer&lt;/code&gt;, or other HTTP request header fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203fc9bcff3acebdb7b0022637ff4ed3ddaa28cc" translate="yes" xml:space="preserve">
          <source>The third mode 'always' is like 'auto', with the difference that &lt;code&gt;&lt;a href=&quot;mod_md&quot;&gt;mod_md&lt;/a&gt;&lt;/code&gt; will not check if the MD is actually used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df814b0e73701bd9f82a77c88dc5e4d320e1c1ea" translate="yes" xml:space="preserve">
          <source>The three possible arguments for the &lt;code&gt;AcceptPathInfo&lt;/code&gt; directive are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccea8daeeeb99d84c3bc5ea5385e8be59158cae" translate="yes" xml:space="preserve">
          <source>The ticket key file contains sensitive keying material and should be protected with file permissions similar to those used for &lt;code&gt;&lt;a href=&quot;#sslcertificatekeyfile&quot;&gt;SSLCertificateKeyFile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dc9496eb901f176a00ab8371aeb51480f04492" translate="yes" xml:space="preserve">
          <source>The ticket key file must contain 48 bytes of random data, preferrably created from a high-entropy source. On a Unix-based system, a ticket key file can be created as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7365d4f054e18d2aa2216ee4513ca3f81a5dcb1" translate="yes" xml:space="preserve">
          <source>The time between log file rotations in seconds. The rotation occurs at the beginning of this interval. For example, if the rotation time is 3600, the log file will be rotated at the beginning of every hour; if the rotation time is 86400, the log file will be rotated every night at midnight. (If no data is logged during an interval, no file will be created.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08375a5aa5c72c68962d01c97a26bfa3bc7c51c4" translate="yes" xml:space="preserve">
          <source>The time for which the cookie will persist, in minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2287d03ae42bca940a6c8d512f2f974b0af1ebc3" translate="yes" xml:space="preserve">
          <source>The time from when the request was received to the time the headers are sent on the wire. This is a measure of the duration of the request. The value is preceded by &lt;code&gt;D=&lt;/code&gt;. The value is measured in microseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ac9fb1dfb07cfb1ca6602c519c62b366240335" translate="yes" xml:space="preserve">
          <source>The time in seconds allowed for reading all of the request headers or body, respectively. A value of 0 means no limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f85884b03cdd615d62d2e53a1f28853cd8a265" translate="yes" xml:space="preserve">
          <source>The time taken to serve the request, in a time unit given by &lt;code&gt;UNIT&lt;/code&gt;. Valid units are &lt;code&gt;ms&lt;/code&gt; for milliseconds, &lt;code&gt;us&lt;/code&gt; for microseconds, and &lt;code&gt;s&lt;/code&gt; for seconds. Using &lt;code&gt;s&lt;/code&gt; gives the same result as &lt;code&gt;%T&lt;/code&gt; without any format; using &lt;code&gt;us&lt;/code&gt; gives the same result as &lt;code&gt;%D&lt;/code&gt;. Combining &lt;code&gt;%T&lt;/code&gt; with a unit is available in 2.4.13 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb64a9b212b367ce7974ef3c333aae115900ab7" translate="yes" xml:space="preserve">
          <source>The time taken to serve the request, in microseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca61994eedc5f4b797dfccd9e01c931539e3f24" translate="yes" xml:space="preserve">
          <source>The time taken to serve the request, in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba29bcae63eaafe8a7e33e3e9de9ca3aeac1a44" translate="yes" xml:space="preserve">
          <source>The time that the request was received. The format is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1335cf6b6cb4ecd6dd63510d9b0bef8f3bdcaf" translate="yes" xml:space="preserve">
          <source>The time the request was received in Universal Coordinated Time since the epoch (Jan. 1, 1970) measured in microseconds. The value is preceded by &lt;code&gt;t=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c093664a7df082e0ffce018fce2d8142fbd04e2" translate="yes" xml:space="preserve">
          <source>The time the server executable was built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969c71dd74c366044b008ac1668eb3081ae32da0" translate="yes" xml:space="preserve">
          <source>The time the server was (re)started, in seconds since the epoch (Jan 1st, 1970)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefd526493d541cb3ac115a91a2cf85c27ced94f" translate="yes" xml:space="preserve">
          <source>The time the server was started/restarted and the time it has been running for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9ef9c3700f5a4856beca6fa797c38ab381cac5" translate="yes" xml:space="preserve">
          <source>The time to wait for additional input, in milliseconds, before flushing the output brigade if 'flushpackets' is 'auto'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c4de3386708e8f684fdfd5353a0bc96ecb0bbc" translate="yes" xml:space="preserve">
          <source>The time, in the form given by format, which should be in an extended &lt;code&gt;strftime(3)&lt;/code&gt; format (potentially localized). If the format starts with &lt;code&gt;begin:&lt;/code&gt; (default) the time is taken at the beginning of the request processing. If it starts with &lt;code&gt;end:&lt;/code&gt; it is the time when the log entry gets written, close to the end of the request processing. In addition to the formats supported by &lt;code&gt;strftime(3)&lt;/code&gt;, the following format tokens are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99479f9ed25a3ba91e3d62c51f0c87f87b52a9aa" translate="yes" xml:space="preserve">
          <source>The total amount of connections that a single process/threads block can handle is regulated by the &lt;code&gt;AsyncRequestWorkerFactor&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3835fa2fc576b358641c03f63f17e131345989e" translate="yes" xml:space="preserve">
          <source>The total number of bytes received from the server. This number is essentially the number of bytes sent over the wire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf5c7024205bd47aabdc41c624f0ccd935dedb6" translate="yes" xml:space="preserve">
          <source>The total number of document bytes received from the server. This number excludes bytes received in HTTP headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2b8e10698414b160513f7559df3c621b0ad27f" translate="yes" xml:space="preserve">
          <source>The traditional filter model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a54530ddc7a4069732fb4814fbf857b446ee8a" translate="yes" xml:space="preserve">
          <source>The trailing path name information, see &lt;code&gt;&lt;a href=&quot;mod/core#acceptpathinfo&quot;&gt;AcceptPathInfo&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473761bc130b6829e91d4dcbaac6e336aeceb64b" translate="yes" xml:space="preserve">
          <source>The trailing pathname information. See directive &lt;code&gt;&lt;a href=&quot;core#acceptpathinfo&quot;&gt;AcceptPathInfo&lt;/a&gt;&lt;/code&gt; for more information about &lt;code&gt;PATH_INFO&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907d6cf7b3a12296853ba2bae49d0bf028953b24" translate="yes" xml:space="preserve">
          <source>The translation mechanism may return a bad return code, and the connection will be aborted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c9b91d4bd97dc363108096b637288537d61a1a" translate="yes" xml:space="preserve">
          <source>The translation mechanism may silently place special characters (e.g., question marks) in the output buffer when it cannot translate the input buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e374fd42d836ffff78064fa3e4496655f3e8052d" translate="yes" xml:space="preserve">
          <source>The treatment of requests with trailing pathname information is determined by the &lt;a href=&quot;../handler&quot;&gt;handler&lt;/a&gt; responsible for the request. The core handler for normal files defaults to rejecting &lt;code&gt;PATH_INFO&lt;/code&gt; requests. Handlers that serve scripts, such as &lt;a href=&quot;mod_cgi&quot;&gt;cgi-script&lt;/a&gt; and &lt;a href=&quot;mod_isapi&quot;&gt;isapi-handler&lt;/a&gt;, generally accept &lt;code&gt;PATH_INFO&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38751dcc74428b1a123f6ef38e4983702506f178" translate="yes" xml:space="preserve">
          <source>The two default workers have a fixed configuration and will be used if no other worker matches the request. They do not use HTTP Keep-Alive or connection reuse. The TCP connections to the origin server will instead be opened and closed for each request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dcb856cd4c0f573e9946a5aac608b7d54337df" translate="yes" xml:space="preserve">
          <source>The two functions are separated so that you can completely remove (or replace) automatic index generation should you want to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce7a8a15579cb635bd85cb029a31bb95368ceef" translate="yes" xml:space="preserve">
          <source>The type can be &lt;code&gt;sdbm&lt;/code&gt;, &lt;code&gt;gdbm&lt;/code&gt;, &lt;code&gt;ndbm&lt;/code&gt; or &lt;code&gt;db&lt;/code&gt;. However, it is recommended that you just use the &lt;a href=&quot;../programs/httxt2dbm&quot;&gt;httxt2dbm&lt;/a&gt; utility that is provided with Apache HTTP Server, as it will use the correct DBM library, matching the one that was used when httpd itself was built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0dd37ccc598b3fcbdf3031affd1d1e36ba0456b" translate="yes" xml:space="preserve">
          <source>The types of files that will be included when searching for a matching file with MultiViews</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c059739a7161bf9f640905eec3a9a81db998b8e7" translate="yes" xml:space="preserve">
          <source>The typical, default description field is 23 bytes wide. 6 more bytes are added by the &lt;code&gt;&lt;a href=&quot;#indexoptions.suppressicon&quot;&gt;IndexOptions SuppressIcon&lt;/a&gt;&lt;/code&gt; option, 7 bytes are added by the &lt;code&gt;&lt;a href=&quot;#indexoptions.suppresssize&quot;&gt;IndexOptions SuppressSize&lt;/a&gt;&lt;/code&gt; option, and 19 bytes are added by the &lt;code&gt;&lt;a href=&quot;#indexoptions.suppresslastmodified&quot;&gt;IndexOptions SuppressLastModified&lt;/a&gt;&lt;/code&gt; option. Therefore, the widest default the description column is ever assigned is 55 bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869f994c109a516950932844ee8f32de3efb40a9" translate="yes" xml:space="preserve">
          <source>The unparsed URI of the request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69e27a4b9e7f2bca72786daaa4f793d3d47a28b" translate="yes" xml:space="preserve">
          <source>The usage of these directives is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74129e4fb9240305aa10770e43c61cb145d773b" translate="yes" xml:space="preserve">
          <source>The usage of these providers is specified through the &lt;code&gt;&lt;a href=&quot;../mod/mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directive. This directive registers the authorization providers that will be called during the authorization stage of the request processing. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10ec42e438481cd42272a472faa8189f3db9d47" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; affect what addresses Apache httpd listens on. You may need to ensure that Apache httpd is listening on the correct addresses using &lt;code&gt;&lt;a href=&quot;mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a31eb24a074630d7b91e0c415dd34bc370286a" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;.htaccess&lt;/code&gt; files can be disabled completely by setting the &lt;code&gt;&lt;a href=&quot;../mod/core#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; directive to &lt;code&gt;none&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc37e9b55144f988dfb67709143b5b317196d85" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;&lt;a href=&quot;#includevirtual&quot;&gt;#include virtual&lt;/a&gt;&lt;/code&gt; is almost always prefered to using either &lt;code&gt;#exec cgi&lt;/code&gt; or &lt;code&gt;#exec cmd&lt;/code&gt;. The former (&lt;code&gt;#include virtual&lt;/code&gt;) uses the standard Apache sub-request mechanism to include files or scripts. It is much better tested and maintained.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16d91f0c3fe4b1c5b7945a00e47399efa83d771" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; to perform this mapping may be appropriate when you do not have access to the server configuration files. Alias may only be used in server or virtualhost context, and not in a &lt;code&gt;.htaccess&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19491c17b77a754802aacf1d1b992f11aae793e3" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;RewriteRule&lt;/code&gt; to perform this task may be appropriate if there are other &lt;code&gt;RewriteRule&lt;/code&gt; directives in the same scope. This is because, when there are &lt;code&gt;Redirect&lt;/code&gt; and &lt;code&gt;RewriteRule&lt;/code&gt; directives in the same scope, the &lt;code&gt;RewriteRule&lt;/code&gt; directives will run first, regardless of the order of appearance in the configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cea8e040baf65b61f40e8d0fab675f5feae4012b" translate="yes" xml:space="preserve">
          <source>The use of a threaded &lt;a href=&quot;../mpm&quot;&gt;mpm&lt;/a&gt; may allow you to handle more simultaneous connections, thereby mitigating DoS attacks. Further, the &lt;code&gt;&lt;a href=&quot;../mod/event&quot;&gt;event&lt;/a&gt;&lt;/code&gt; mpm uses asynchronous processing to avoid devoting a thread to each connection. Due to the nature of the OpenSSL library the &lt;code&gt;&lt;a href=&quot;../mod/event&quot;&gt;event&lt;/a&gt;&lt;/code&gt; mpm is currently incompatible with &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; and other input filters. In these cases it falls back to the behaviour of the &lt;code&gt;&lt;a href=&quot;../mod/worker&quot;&gt;worker&lt;/a&gt;&lt;/code&gt; mpm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6612a8eaa7ba09dd126faf3b72d9a25edbd5fda5" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;-b&lt;/code&gt; option is discouraged, since when it is used the unencrypted password appears on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e47f40a19ba19ab37e142b31d3b0a5574d8835" translate="yes" xml:space="preserve">
          <source>The user file is keyed on the username. The value for a user is the encrypted password, optionally followed by a colon and arbitrary data. The colon and the data following it will be ignored by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d94bf8e11d254a5f1a120e072a942da8614ee44" translate="yes" xml:space="preserve">
          <source>The user for which the operations are performed. The &lt;var&gt;username&lt;/var&gt; may not contain a colon (&lt;code&gt;:&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02f0297b909ff065ddbd9868137adefd84dd35f" translate="yes" xml:space="preserve">
          <source>The user is finally requesting the canonical URL of the resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be26daa4ad8673dee8c4b2324763a1269baf78bf" translate="yes" xml:space="preserve">
          <source>The user name of the owner of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8d1ceb5061b3ce4496287857072ea9349b4275" translate="yes" xml:space="preserve">
          <source>The user name of the owner of the script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068aff5d779496bbabb2d07a0abf71dbb37b1be6" translate="yes" xml:space="preserve">
          <source>The user name set by &lt;code&gt;&lt;a href=&quot;mod/mod_ident&quot;&gt;mod_ident&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aaa32a3250b4b7082c63268047650b43dd65a7" translate="yes" xml:space="preserve">
          <source>The user name to create or update in &lt;var&gt;passwdfile&lt;/var&gt;. If &lt;var&gt;username&lt;/var&gt; does not exist is this file, an entry is added. If it does exist, the password is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace6445b386c4d8d9b986ee83a1ca6a49b88e1e1" translate="yes" xml:space="preserve">
          <source>The user should have no privileges that result in it being able to access files that are not intended to be visible to the outside world, and similarly, the user should not be able to execute code that is not meant for HTTP requests. It is recommended that you set up a new user and group specifically for running the server. Some admins use user &lt;code&gt;nobody&lt;/code&gt;, but this is not always desirable, since the &lt;code&gt;nobody&lt;/code&gt; user can have other uses on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d616fb6adf6761e611741d14eb43bb7400456491" translate="yes" xml:space="preserve">
          <source>The userID must be one of &lt;code&gt;anonymous guest www test welcome&lt;/code&gt; and comparison is &lt;strong&gt;not&lt;/strong&gt; case sensitive. (&lt;code&gt;&lt;a href=&quot;#anonymous&quot;&gt;Anonymous&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc12cc6128f03cc9e7a83d4999e370d6bbab26af" translate="yes" xml:space="preserve">
          <source>The userid under which the server will answer requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8ef3dbf259e17f68e667195a6512924ded5944" translate="yes" xml:space="preserve">
          <source>The username and password specified are combined into an Authorization header, which is passed to the server or service behind the webserver. Both the username and password fields are interpreted using the &lt;a href=&quot;../expr&quot;&gt;expression parser&lt;/a&gt;, which allows both the username and password to be set based on request parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0445ee03f1371c80b8836d9a9203acd7fa6028" translate="yes" xml:space="preserve">
          <source>The username to create or update in &lt;var&gt;passwdfile&lt;/var&gt;. If &lt;var&gt;username&lt;/var&gt; does not exist in this file, an entry is added. If it does exist, the password is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62505893ad24b578ea88edc1198d1c60b166268d" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;On&lt;/code&gt; is actually an alias for the default provider &lt;code&gt;filesystem&lt;/code&gt; which is served by the &lt;code&gt;&lt;a href=&quot;mod_dav_fs&quot;&gt;mod_dav_fs&lt;/a&gt;&lt;/code&gt; module. Note, that once you have DAV enabled for some location, it &lt;em&gt;cannot&lt;/em&gt; be disabled for sublocations. For a complete configuration example have a look at the &lt;a href=&quot;#example&quot;&gt;section above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36bfcce330e907ddaffc47f694b42a6078176cd2" translate="yes" xml:space="preserve">
          <source>The value contained in the cookie with name &lt;code&gt;MYCOOKIE&lt;/code&gt;. The name should be the same given in the &lt;var&gt;stickysession&lt;/var&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f7a07b5015e7f6a442f45b5acff906cd4dd67f" translate="yes" xml:space="preserve">
          <source>The value given with the optional &lt;code&gt;-userinfo&lt;/code&gt; parameter is avalable in the &lt;code&gt;SSL_SRP_USERINFO&lt;/code&gt; request environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fc7a76b6814c1cc2fc50a7aaa102eb8ffe32fb" translate="yes" xml:space="preserve">
          <source>The value is a (%-encoded) URL-path which is shown should a previous attempt to include a file or virtual attribute failed. To be effective, this attribute must be specified after the file or virtual attributes being covered. If the attempt to include the onerror path fails, or if onerror is not specified, the default error message will be included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb3229b3a0eff6b8247f497374674496f20f7d4" translate="yes" xml:space="preserve">
          <source>The value is a (%-encoded) URL-path. If it does not begin with a slash (/) then it is taken to be relative to the current document. Note, that this does &lt;em&gt;not&lt;/em&gt; print the size of any CGI output, but the size of the CGI script itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8102a4d6ad941558908380ec6f8d836c786b6d" translate="yes" xml:space="preserve">
          <source>The value is a (%-encoded) URL-path. The URL cannot contain a scheme or hostname, only a path and an optional query string. If it does not begin with a slash (/) then it is taken to be relative to the current document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fe0f3b51cc1e03ebfb676d16a3c4e4d614193cb" translate="yes" xml:space="preserve">
          <source>The value is a message that is sent back to the client if an error occurs while parsing the document. This overrides any &lt;code&gt;&lt;a href=&quot;#ssierrormsg&quot;&gt;SSIErrorMsg&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e920c0667e84165e5ee450ad7e40326b40b4d8ee" translate="yes" xml:space="preserve">
          <source>The value is a message that is sent back to the client if the &lt;code&gt;&lt;a href=&quot;#element.echo&quot;&gt;echo&lt;/a&gt;&lt;/code&gt; element attempts to echo an undefined variable. This overrides any &lt;code&gt;&lt;a href=&quot;#ssiundefinedecho&quot;&gt;SSIUndefinedEcho&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bcefd5adb8abe14327c881a9bd69a607c64b4f4" translate="yes" xml:space="preserve">
          <source>The value is a path relative to the directory containing the current document being parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26ce90d5ee5bec280135311b5f84e580c4a7626" translate="yes" xml:space="preserve">
          <source>The value is a path relative to the directory containing the current document being parsed. It cannot contain &lt;code&gt;../&lt;/code&gt;, nor can it be an absolute path. Therefore, you cannot include files that are outside of the document root, or above the current document in the directory structure. The &lt;code&gt;virtual&lt;/code&gt; attribute should always be used in preference to this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c37edb43e10d78b3894ab9af14c11594481d8a4" translate="yes" xml:space="preserve">
          <source>The value is a string to be used by the &lt;code&gt;strftime(3)&lt;/code&gt; library routine when printing dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa4088dd9fda4bd5542a778d2b14e1716c9ef89" translate="yes" xml:space="preserve">
          <source>The value is taken from the original request line, and will not reflect internal redirects or subrequests which change the requested resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628bc0bc62f81560d4a116a14c2d0aa5fbe32741" translate="yes" xml:space="preserve">
          <source>The value is the name of the variable to print.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec2896102b02d924a7587423a6d13a9af7c9ce7" translate="yes" xml:space="preserve">
          <source>The value must between 1 (less compression) and 9 (more compression).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6f550e19e12d9119f31f5a41b4d6eaf22c9878" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;file&lt;/code&gt; cannot start with a slash (&lt;code&gt;/&lt;/code&gt;), nor can it contain &lt;code&gt;../&lt;/code&gt; so as to refer to a file above the current directory or outside of the document root. Attempting to so will result in the error message: &lt;code&gt;The given path was above the root path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d73b93c3c5f9949d91582a1612eb93f20f75ee" translate="yes" xml:space="preserve">
          <source>The value of the &lt;var&gt;charset&lt;/var&gt; argument must be accepted as a valid character set name by the character set support in &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt;. Generally, this means that it must be supported by iconv.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf6979eeed5c9ea2b7371ffe0c9b1d7c8b9c1f7" translate="yes" xml:space="preserve">
          <source>The value of the named response &lt;var&gt;header&lt;/var&gt; is copied into an internal note whose name is given by &lt;var&gt;value&lt;/var&gt;. This is useful if a header sent by a CGI or proxied resource is configured to be unset but should also be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e5c8ad855f071c67aa9bf8362c44157eadd080" translate="yes" xml:space="preserve">
          <source>The value of this key is the &lt;code&gt;&lt;a href=&quot;../mod/core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt; directory which contains the &lt;code&gt;conf&lt;/code&gt; subdirectory. When Apache starts it reads the &lt;code&gt;httpd.conf&lt;/code&gt; file from that directory. If this file contains a &lt;code&gt;&lt;a href=&quot;../mod/core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt; directive which contains a different directory from the one obtained from the registry key above, Apache will forget the registry key and use the directory from the configuration file. If you copy the Apache directory or configuration files to a new location it is vital that you update the &lt;code&gt;&lt;a href=&quot;../mod/core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt; directive in the &lt;code&gt;httpd.conf&lt;/code&gt; file to reflect the new location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795b38039d24df8074eaaae79524c4596d2e85fb" translate="yes" xml:space="preserve">
          <source>The value reflects the resource currently being processed, which may be different than the original request from the client due to internal redirects or subrequests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5069c27fd39506d9df6778ada2e94900e209f5" translate="yes" xml:space="preserve">
          <source>The value sets the format to be used when displaying the size of a file. Valid values are &lt;code&gt;bytes&lt;/code&gt; for a count in bytes, or &lt;code&gt;abbrev&lt;/code&gt; for a count in Kb or Mb as appropriate, for example a size of 1024 bytes will be printed as &quot;1K&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd30f15d92500c880f8d6f2138da094a1b3433d" translate="yes" xml:space="preserve">
          <source>The value specifies a (%-encoded) URL-path to the CGI script. If the path does not begin with a slash (/), then it is taken to be relative to the current document. The document referenced by this path is invoked as a CGI script, even if the server would not normally recognize it as such. However, the directory containing the script must be enabled for CGI scripts (with &lt;code&gt;&lt;a href=&quot;mod_alias#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt;&lt;code&gt;ExecCGI&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb48202dd20d92f73e0b54665c599e4d408c5c11" translate="yes" xml:space="preserve">
          <source>The value to give a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41000204117324c5e63c1d4452397239173a54a7" translate="yes" xml:space="preserve">
          <source>The value will often be enclosed in double quotes, but single quotes (&lt;code&gt;'&lt;/code&gt;) and backticks (&lt;code&gt;`&lt;/code&gt;) are also possible. Many commands only allow a single attribute-value pair. Note that the comment terminator (&lt;code&gt;--&amp;gt;&lt;/code&gt;) should be preceded by whitespace to ensure that it isn't considered part of an SSI token. Note that the leading &lt;code&gt;&amp;lt;!--#&lt;/code&gt; is &lt;em&gt;one&lt;/em&gt; token and may not contain any whitespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3e33849d960bf03e5dcf29a2f74e2e2adb460d8" translate="yes" xml:space="preserve">
          <source>The value, if any, returned in the &lt;var&gt;server&lt;/var&gt; HTTP header of the first successful response. This includes all characters in the header from beginning to the point a character with decimal value of 32 (most notably: a space or CR/LF) is detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472b561f69a8cf303cdf4f00d74b7cd4338eb80b" translate="yes" xml:space="preserve">
          <source>The values for each of the directives can be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6577ef3831e86e4cdd90c40ea9249963c73853" translate="yes" xml:space="preserve">
          <source>The values of variables defined with the &lt;code&gt;&lt;a href=&quot;mod/core#define&quot;&gt;Define&lt;/a&gt;&lt;/code&gt; of or shell environment variables can be used in configuration file lines using the syntax &lt;code&gt;${VAR}&lt;/code&gt;. If &quot;VAR&quot; is the name of a valid variable, the value of that variable is substituted into that spot in the configuration file line, and processing continues as if that text were found directly in the configuration file. Variables defined with &lt;code&gt;&lt;a href=&quot;mod/core#define&quot;&gt;Define&lt;/a&gt;&lt;/code&gt; take precedence over shell environment variables. If the &quot;VAR&quot; variable is not found, the characters &lt;code&gt;${VAR}&lt;/code&gt; are left unchanged, and a warning is logged. Variable names may not contain colon &quot;:&quot; characters, to avoid clashes with &lt;code&gt;&lt;a href=&quot;mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt;'s syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d24b6c7f3e5306d9dfc0dab771d5dc714f5cc7d" translate="yes" xml:space="preserve">
          <source>The values of various timeout-related directives provided by other modules should be checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4a793038754764bdbf142652f78944b9a050ef" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;$1&lt;/code&gt; will be replaced with whatever text was matched by the expression inside the parenthesis in the &lt;var&gt;Pattern&lt;/var&gt;. For example, a request for &lt;code&gt;http://example.com/product/r14df/view&lt;/code&gt; will be mapped to the path &lt;code&gt;/var/web/productdb/r14df&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd27dc27da98fea5b34cd4b9ac4a977e757b4ec" translate="yes" xml:space="preserve">
          <source>The variables SCRIPT_FILENAME and REQUEST_FILENAME contain the same value - the value of the &lt;code&gt;filename&lt;/code&gt; field of the internal &lt;code&gt;request_rec&lt;/code&gt; structure of the Apache HTTP Server. The first name is the commonly known CGI variable name while the second is the appropriate counterpart of REQUEST_URI (which contains the value of the &lt;code&gt;uri&lt;/code&gt; field of &lt;code&gt;request_rec&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069cdc2b230e0d844db0966b8d418d6e1010ec3f" translate="yes" xml:space="preserve">
          <source>The various ciphers supported by Apache for authentication data are explained in &lt;a href=&quot;../misc/password_encryptions&quot;&gt;Password Encryptions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cff2832399b478b2aad997a60fef018f731b5d" translate="yes" xml:space="preserve">
          <source>The verifier file can be created with the &lt;code&gt;openssl&lt;/code&gt; command line utility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049771f5c65723533dec221251dab2c23b7dd028" translate="yes" xml:space="preserve">
          <source>The version of the client certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec28099cbaad99c1c3b0a143d92e3007ba2b32d0" translate="yes" xml:space="preserve">
          <source>The version of the server certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cbdb4188a0676ce0513f611cfb7baecb2335c0" translate="yes" xml:space="preserve">
          <source>The very best way to solve this doesn't involve mod_rewrite at all, but rather uses the &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt; directive placed in a virtual host for the non-canonical hostname(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29fa8796ea0e90d925e86cc4e382225ee2e9252b" translate="yes" xml:space="preserve">
          <source>The vhost can now be accessed through the new address (as an IP-based vhost) and through the old address (as a name-based vhost).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4311caaad055c555641be4f960be3f9b1b181981" translate="yes" xml:space="preserve">
          <source>The way that authorization can be applied is now much more flexible than just a single check against a single data store. Ordering, logic and choosing how authorization will be done is now possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a6bf3550cb19652a35945abf7e88f3550f9c98" translate="yes" xml:space="preserve">
          <source>The web server asks the container to respond quickly with a CPong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a78f13bc488758b31c27bd99f36bb5780deef7" translate="yes" xml:space="preserve">
          <source>The web server asks the container to shut itself down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6921c63a45d2d309a9d64849dead4781dd966d" translate="yes" xml:space="preserve">
          <source>The web server asks the container to take control (secure login phase).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50714dccdac5629a47b1d6ebf362740163ba33c" translate="yes" xml:space="preserve">
          <source>The web server can send the following messages to the servlet container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bee3894c9d28c084df3680ba1905769ef6dec1d" translate="yes" xml:space="preserve">
          <source>The webserver manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff41748208a38d99150e4fff44ff920148d049e" translate="yes" xml:space="preserve">
          <source>The wise man doesn't give the right answers, he poses the right questions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbfc174c142b016c2f9ae2011e6627c2fcfcbf8" translate="yes" xml:space="preserve">
          <source>The worker thread does a lingering close of the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb132c407039afacfe07a3bf6278749f55cfeee" translate="yes" xml:space="preserve">
          <source>The worker thread reads the request from the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16e7e1023f630ad81926fc5b0303e4ad488bb8d" translate="yes" xml:space="preserve">
          <source>The wrapper then employs the following process to determine success or failure -- if any one of these conditions fail, the program logs the failure and exits with an error, otherwise it will continue:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4d3163aacd2780ec38e7c1ab9e3c849df6193c2" translate="yes" xml:space="preserve">
          <source>The wrapper will only execute if it is given the proper number of arguments. The proper argument format is known to the Apache HTTP Server. If the wrapper is not receiving the proper number of arguments, it is either being hacked, or there is something wrong with the suEXEC portion of your Apache httpd binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9e9a65110c50d3e0333d41bec21641efe45879" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;mod_example1&lt;/code&gt; is enabled by default, and you would use &lt;code&gt;--disable-example1&lt;/code&gt; to not compile it. &lt;code&gt;mod_example2&lt;/code&gt; is disabled by default, and you would use &lt;code&gt;--enable-example2&lt;/code&gt; to compile it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2435646523c81ac768e8914f7baf87c875d7af0" translate="yes" xml:space="preserve">
          <source>Then a request for &lt;code&gt;http://www.example.com/fish/&lt;/code&gt; will cause httpd to attempt to serve the file &lt;code&gt;/var/www/html/fish/index.html&lt;/code&gt;. In the event that that file does not exist, it will next attempt to serve the file &lt;code&gt;/var/www/html/fish/index.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac74e9bdc06a115527e0e61c1fffbddc11547b98" translate="yes" xml:space="preserve">
          <source>Then any request beginning with &lt;em&gt;URL-path&lt;/em&gt; will return a redirect request to the client at the location of the target &lt;em&gt;URL&lt;/em&gt;. Additional path information beyond the matched &lt;em&gt;URL-path&lt;/em&gt; will be appended to the target URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3477de8802bd1947c652b326e11cb2ae54c079f0" translate="yes" xml:space="preserve">
          <source>Then the CGI script is responsible for sending the originally requested document (pointed to by the &lt;code&gt;PATH_TRANSLATED&lt;/code&gt; environment variable) and making whatever modifications or additions are desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f36f26f637ea1efd3e261058402850f5f00fb3b" translate="yes" xml:space="preserve">
          <source>Then the document &lt;code&gt;xxxx.en.Z&lt;/code&gt; will be treated as being a compressed English document (as will the document &lt;code&gt;xxxx.Z.en&lt;/code&gt;). Although the content language is reported to the client, the browser is unlikely to use this information. The &lt;code&gt;AddLanguage&lt;/code&gt; directive is more useful for &lt;a href=&quot;../content-negotiation&quot;&gt;content negotiation&lt;/a&gt;, where the server returns one from several documents based on the client's language preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424ef3eaab32a0e1bdaf9249cb7bc0d3db358cb0" translate="yes" xml:space="preserve">
          <source>Then the document &lt;code&gt;xxxx.ja.jis&lt;/code&gt; will be treated as being a Japanese document whose charset is &lt;code&gt;ISO-2022-JP&lt;/code&gt; (as will the document &lt;code&gt;xxxx.jis.ja&lt;/code&gt;). The &lt;code&gt;AddCharset&lt;/code&gt; directive is useful for both to inform the client about the character encoding of the document so that the document can be interpreted and displayed appropriately, and for &lt;a href=&quot;../content-negotiation&quot;&gt;content negotiation&lt;/a&gt;, where the server returns one from several documents based on the client's charset preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee969ea08294037dc620d4725a62406f700cb61" translate="yes" xml:space="preserve">
          <source>Then wait for Apache to stop, or press Control-C. Then enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4892560178656b3855896832b856cb40571345f3" translate="yes" xml:space="preserve">
          <source>Then we mean that we want &lt;var&gt;b&lt;/var&gt; to process twice the amount of bytes than &lt;var&gt;a&lt;/var&gt; or &lt;var&gt;c&lt;/var&gt; should. It does not necessarily mean that &lt;var&gt;b&lt;/var&gt; would handle twice as many requests, but it would process twice the I/O. Thus, the size of the request and response are applied to the weighting and selection algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0223298bbfc06f5f2fe177e6d604bb54148a6e" translate="yes" xml:space="preserve">
          <source>Then you can immediately compile this sample module into a shared object and load it into the Apache server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4a36e6d0dd3d28b6f2713670167a6de39fec58" translate="yes" xml:space="preserve">
          <source>Then you have to update the Apache configuration by making sure a &lt;code&gt;&lt;a href=&quot;../mod/mod_so#loadmodule&quot;&gt;LoadModule&lt;/a&gt;&lt;/code&gt; directive is present to load this shared object. To simplify this step &lt;code&gt;apxs&lt;/code&gt; provides an automatic way to install the shared object in its &quot;modules&quot; directory and updating the &lt;code&gt;httpd.conf&lt;/code&gt; file accordingly. This can be achieved by running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e84932a0ed7890c60be5b204ba79309276f73e6" translate="yes" xml:space="preserve">
          <source>Then, presuming that &lt;code&gt;UserDir&lt;/code&gt; is set to &lt;code&gt;public_html&lt;/code&gt;, a cgi program &lt;code&gt;example.cgi&lt;/code&gt; could be loaded from that directory as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1e898fc07d61e53c63f3002ef704c95490010b" translate="yes" xml:space="preserve">
          <source>Theory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32880bf14f8673fac73bb8604ab3355d73d6c846" translate="yes" xml:space="preserve">
          <source>There are 2 additional settings that are necessary for a Managed Domain: &lt;code&gt;&lt;a href=&quot;core#serveradmin&quot;&gt;ServerAdmin&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#mdcertificateagreement&quot;&gt;MDCertificateAgreement&lt;/a&gt;&lt;/code&gt;. The mail address of &lt;code&gt;&lt;a href=&quot;core#serveradmin&quot;&gt;ServerAdmin&lt;/a&gt;&lt;/code&gt; is used to register at the CA (Let's Encrypt by default). The CA may use it to notify you about changes in its service or status of your certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f69e3a5d84daaa3305195c775e07ad476f164e" translate="yes" xml:space="preserve">
          <source>There are a few points of interest regarding the wrapper that can cause limitations on server setup. Please review these before submitting any &quot;bugs&quot; regarding suEXEC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3553fdd5b0315861cfb2f5f7ee5e9f11a2642c2c" translate="yes" xml:space="preserve">
          <source>There are a lot of variables named &lt;code&gt;TIME_xxx&lt;/code&gt; for rewrite conditions. In conjunction with the special lexicographic comparison patterns &lt;code&gt;&amp;lt;STRING&lt;/code&gt;, &lt;code&gt;&amp;gt;STRING&lt;/code&gt; and &lt;code&gt;=STRING&lt;/code&gt; we can do time-dependent redirects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31442c9db051159abe5362f40d876d1b67c0d983" translate="yes" xml:space="preserve">
          <source>There are a number of third-party modules available through &lt;a href=&quot;http://modules.apache.org/&quot;&gt;http://modules.apache.org/&lt;/a&gt; that can restrict certain client behaviors and thereby mitigate DoS problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0802c1cc55f2a368d31928f5970ee2a7d3806be9" translate="yes" xml:space="preserve">
          <source>There are a number of versions of the SSL protocol, as shown in &lt;a href=&quot;#table4&quot;&gt;Table 4&lt;/a&gt;. As noted there, one of the benefits in SSL 3.0 is that it adds support of certificate chain loading. This feature allows a server to pass a server certificate along with issuer certificates to the browser. Chain loading also permits the browser to validate the server certificate, even if Certificate Authority certificates are not installed for the intermediate issuers, since they are included in the certificate chain. SSL 3.0 is the basis for the Transport Layer Security [&lt;a href=&quot;#TLS1&quot;&gt;TLS&lt;/a&gt;] protocol standard, currently in development by the Internet Engineering Task Force (IETF).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85612f94e76c66a13129a076eb7cd3213e45482e" translate="yes" xml:space="preserve">
          <source>There are already two modules, &lt;code&gt;mod_whatkilledus&lt;/code&gt; and &lt;code&gt;mod_backtrace&lt;/code&gt; that make use of this hook. Please have a look at Jeff Trawick's &lt;a href=&quot;https://emptyhammock.com/projects/httpd/diag/&quot;&gt;EnableExceptionHook site&lt;/a&gt; for more information about these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21aa29e7fda6de2d1f3c579dd75dbae6508d998b" translate="yes" xml:space="preserve">
          <source>There are also certain Apache HTTP Server configuration settings that can help mitigate problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c9fb45ea5352014032740a7852d6d59cb649f1" translate="yes" xml:space="preserve">
          <source>There are also default weights: for 'After' it is 16, 'interleaved' is 256.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce146cf7f81eaa50a6134ea2b187c6525a5beef0" translate="yes" xml:space="preserve">
          <source>There are also several other forms of the &lt;code&gt;Userdir&lt;/code&gt; directive which you can use on systems where &lt;code&gt;/etc/passwd&lt;/code&gt; does not contain the location of the home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad982884f19ea1e57d650d32653d92a65655745d" translate="yes" xml:space="preserve">
          <source>There are examples of more complicated &lt;code&gt;VirtualDocumentRoot&lt;/code&gt; settings in the &lt;code&gt;&lt;a href=&quot;../mod/mod_vhost_alias&quot;&gt;mod_vhost_alias&lt;/a&gt;&lt;/code&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81bf72c2a13f93c33c8d50782b6bc42f06fdc66d" translate="yes" xml:space="preserve">
          <source>There are five formats that Apache recognizes for basic-authentication passwords. Note that not all formats work on every platform:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee288119b654d97a33ce0d39e97d3eec4ff385e3" translate="yes" xml:space="preserve">
          <source>There are four basic things that you may see in your browser when you try to access your CGI program from the web:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3183763aae049ea6949db802dc0dc9ce2f814eba" translate="yes" xml:space="preserve">
          <source>There are four data types in the protocol: bytes, booleans, integers and strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91f3e746cd45b7f99d4b1625fb3d9bbd3ef1174" translate="yes" xml:space="preserve">
          <source>There are four queries required to keep a session maintained, to select an existing session, to update an existing session, to insert a new session, and to delete an expired or empty session. These queries are configured as per the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab9906669beacb302a45af84801ece39cd6a402" translate="yes" xml:space="preserve">
          <source>There are frequently circumstances where it is necessary to allow web access to parts of the filesystem that are not strictly underneath the &lt;code&gt;&lt;a href=&quot;mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt;. httpd offers several different ways to accomplish this. On Unix systems, symbolic links can bring other parts of the filesystem under the &lt;code&gt;&lt;a href=&quot;mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt;. For security reasons, httpd will follow symbolic links only if the &lt;code&gt;&lt;a href=&quot;mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; setting for the relevant directory includes &lt;code&gt;FollowSymLinks&lt;/code&gt; or &lt;code&gt;SymLinksIfOwnerMatch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c23a12fd4b0a473399439e41ff19f2f946da85" translate="yes" xml:space="preserve">
          <source>There are many important points before you begin compiling Apache. This document explain them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff4e2f59411bf4aec61144796c34c09c7330b6a" translate="yes" xml:space="preserve">
          <source>There are many important points to consider before you begin compiling Apache HTTP Server (httpd). See &lt;a href=&quot;windows&quot;&gt;Using Apache HTTP Server on Microsoft Windows&lt;/a&gt; before you begin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4506ab80252a46b8fe54260e2243cd42d08100f0" translate="yes" xml:space="preserve">
          <source>There are no built-in list-valued functions. &lt;code&gt;&lt;a href=&quot;mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; provides &lt;code&gt;PeerExtList&lt;/code&gt;. See the description of &lt;code&gt;&lt;a href=&quot;mod/mod_ssl#sslrequire&quot;&gt;SSLRequire&lt;/a&gt;&lt;/code&gt; for details (but &lt;code&gt;PeerExtList&lt;/code&gt; is also usable outside of &lt;code&gt;&lt;a href=&quot;mod/mod_ssl#sslrequire&quot;&gt;SSLRequire&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239824a709a8b8dafc5081e1421031280b1f6af2" translate="yes" xml:space="preserve">
          <source>There are numerous reasons for such an implementation, but generally the typical rationales are due to security, high-availability, load-balancing and centralized authentication/authorization. It is critical in these implementations that the layout, design and architecture of the backend infrastructure (those servers which actually handle the requests) are insulated and protected from the outside; as far as the client is concerned, the reverse proxy server &lt;em&gt;is&lt;/em&gt; the sole source of all content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73633a914bf9b444d92856a4297e34b14db3f68" translate="yes" xml:space="preserve">
          <source>There are people thinking about how a client can tell a server what it already has, so PUSHes for those things can be avoided, but this is all highly experimental right now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7837ec58a2e52f92e1e163a6fbce681bc21d3e3e" translate="yes" xml:space="preserve">
          <source>There are security partitioning issues, such as company1 does not want anyone at company2 to be able to read their data except via the web. In this case you would need two daemons, each running with different &lt;code&gt;&lt;a href=&quot;../mod/mod_unixd#user&quot;&gt;User&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mod_unixd#group&quot;&gt;Group&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../mod/core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e2fa6aaa908dabf9ef60f3d362c0e7961adcdd8" translate="yes" xml:space="preserve">
          <source>There are several ways that you can handle this situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="749d5bb7b2baf3defc70233f7f06681b92391fd9" translate="yes" xml:space="preserve">
          <source>There are six directives allowed in the imagemap file. The directives can come in any order, but are processed in the order they are found in the imagemap file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d223a11e4624ad8a29fdf2b252acdedf15e1379" translate="yes" xml:space="preserve">
          <source>There are some useful environment variables to override the choices made by &lt;code&gt;configure&lt;/code&gt; or to help it to find libraries and programs with nonstandard names or locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af2acf608adb003cbb4530dc78de26c034a3f30" translate="yes" xml:space="preserve">
          <source>There are three stages to configuring a filter chain with &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt;. For details of the directives, see below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3e56cd2f6f9860a579778f050ebbdc9859ea38" translate="yes" xml:space="preserve">
          <source>There are three types of modules involved in the authentication and authorization process. You will usually need to choose at least one module from each group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d777f2d620d92c49cbfaafb193db45242f6f101" translate="yes" xml:space="preserve">
          <source>There are times when it is convenient to exclude certain entries from the access logs based on characteristics of the client request. This is easily accomplished with the help of &lt;a href=&quot;env&quot;&gt;environment variables&lt;/a&gt;. First, an environment variable must be set to indicate that the request meets certain conditions. This is usually accomplished with &lt;code&gt;&lt;a href=&quot;mod/mod_setenvif#setenvif&quot;&gt;SetEnvIf&lt;/a&gt;&lt;/code&gt;. Then the &lt;code&gt;env=&lt;/code&gt; clause of the &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive is used to include or exclude requests where the environment variable is set. Some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218e5b6e0d31837f6f804e55b708384110fabea1" translate="yes" xml:space="preserve">
          <source>There are two basic types of containers. Most containers are evaluated for each request. The enclosed directives are applied only for those requests that match the containers. The &lt;code&gt;&lt;a href=&quot;mod/core#ifdefine&quot;&gt;&amp;lt;IfDefine&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/core#ifmodule&quot;&gt;&amp;lt;IfModule&amp;gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;mod/mod_version#ifversion&quot;&gt;&amp;lt;IfVersion&amp;gt;&lt;/a&gt;&lt;/code&gt; containers, on the other hand, are evaluated only at server startup and restart. If their conditions are true at startup, then the enclosed directives will apply to all requests. If the conditions are not true, the enclosed directives will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c583cb8ee5f7e567426dc48abcc7558bd4bc170" translate="yes" xml:space="preserve">
          <source>There are two categories of cryptographic algorithms: conventional and public key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69d5605677bcdfce37b05b2bbbbe4642b51d78a" translate="yes" xml:space="preserve">
          <source>There are two forms of this MapType. Using a MapType of &lt;code&gt;dbd&lt;/code&gt; causes the query to be executed with each map request, while using &lt;code&gt;fastdbd&lt;/code&gt; caches the database lookups internally. So, while &lt;code&gt;fastdbd&lt;/code&gt; is more efficient, and therefore faster, it won't pick up on changes to the database until the server is restarted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc52bf4a64a5975a460e1dc39fe3838637d264b0" translate="yes" xml:space="preserve">
          <source>There are two forms of this directive. With three arguments, it applies specifically to a &lt;var&gt;filter-name&lt;/var&gt; and a &lt;var&gt;provider-name&lt;/var&gt; for that filter. With two arguments it applies to a &lt;var&gt;filter-name&lt;/var&gt; whenever the filter runs &lt;em&gt;any&lt;/em&gt; provider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70dad6ae61119fe7fcb68181399b7cee9550675" translate="yes" xml:space="preserve">
          <source>There are two kinds of environment variables that affect the Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ed955200fb38fde9cc5add5966ede3928859d7" translate="yes" xml:space="preserve">
          <source>There are two main differences between ``regular'' programming, and CGI programming.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db761841c760f74a9fd004b657d5d8e3b56e2440" translate="yes" xml:space="preserve">
          <source>There are two main reasons to avoid the use of &lt;code&gt;.htaccess&lt;/code&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50606e5a31cecfe3878bf4e23fbc7cb8b405833e" translate="yes" xml:space="preserve">
          <source>There are two negotiation methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cefbf49201e6a654eff25d8baa1208708934d3f" translate="yes" xml:space="preserve">
          <source>There are two phases in granting access to a user. The first phase is authentication, in which the &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; authentication provider verifies that the user's credentials are valid. This is also called the &lt;em&gt;search/bind&lt;/em&gt; phase. The second phase is authorization, in which &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; determines if the authenticated user is allowed access to the resource in question. This is also known as the &lt;em&gt;compare&lt;/em&gt; phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed71495f2d2d5a9394ff4316841979492e34995" translate="yes" xml:space="preserve">
          <source>There are two special names that you may use in this directive: 'manual' and 'auto'. This determines if a Managed Domain shall have exactly the name list as is configured ('manual') or offer more convenience. With 'auto' all names of a virtual host are added to a MD. Conventiently, 'auto' is also the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798da0702f95245da27d3355d6ffbd6fb20377d0" translate="yes" xml:space="preserve">
          <source>There are two steps to allowing CGI execution in an arbitrary directory. First, the &lt;code&gt;cgi-script&lt;/code&gt; handler must be activated using the &lt;code&gt;&lt;a href=&quot;../mod/mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../mod/core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt; directive. Second, &lt;code&gt;ExecCGI&lt;/code&gt; must be specified in the &lt;code&gt;&lt;a href=&quot;../mod/core#options&quot;&gt;Options&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3db0807a8c8938d5b08d0e9a36846c44982738" translate="yes" xml:space="preserve">
          <source>There are two usage scenarios: with modules programmed to work with mod_xml2enc, and with those that are not aware of it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2f40fc6df47e729c43c96dd6fee272afea5df7" translate="yes" xml:space="preserve">
          <source>There are two ways of configuring apache to support multiple hosts. Either by running a separate &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; daemon for each hostname, or by running a single daemon which supports all the virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe2d66609ad2265c939284044e2d8174fa4a65e" translate="yes" xml:space="preserve">
          <source>There are two ways to accomplish this. One is the socket option &lt;code&gt;SO_LINGER&lt;/code&gt;. But as fate would have it, this has never been implemented properly in most TCP/IP stacks. Even on those stacks with a proper implementation (&lt;em&gt;i.e.&lt;/em&gt;, Linux 2.0.31), this method proves to be more expensive (cputime) than the next solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9285901718c355c2d05e8c26444b6cf4cb82b2" translate="yes" xml:space="preserve">
          <source>There are two ways to use filtering: Simple and Dynamic. In general, you should use one or the other; mixing them can have unexpected consequences (although simple Input filtering can be mixed freely with either simple or dynamic Output filtering).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79069363819c63423e789edd69df5e0d9c5a4675" translate="yes" xml:space="preserve">
          <source>There are various statically declared buffers of fixed length. Combined with the lazy parsing of the command line arguments, the response headers from the server and other external inputs, this might bite you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a86cc2e678afe31f917037fe654958a1fdffae" translate="yes" xml:space="preserve">
          <source>There are virtual servers, called &lt;em&gt;vhosts&lt;/em&gt;, which are defined by &lt;code&gt;&lt;a href=&quot;../mod/core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c14f266e00094b0e1d21c569a91582d2c243a41" translate="yes" xml:space="preserve">
          <source>There are ways to enhance the security of SSI files while still taking advantage of the benefits they provide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc677c5baffe80cfc8d923310ff50b463f131c2" translate="yes" xml:space="preserve">
          <source>There can be a number of reasons for this, but the main one is problems with the SSL session Cache specified by the &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl#sslsessioncache&quot;&gt;SSLSessionCache&lt;/a&gt;&lt;/code&gt; directive. The DBM session cache is the most likely source of the problem, so using the SHM session cache (or no cache at all) may help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f617658d4a59bb520ae4d2a6f4e9a40114938556" translate="yes" xml:space="preserve">
          <source>There has been a lot written about HTTP/2 and how it works. The most normative is, of course, its &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540&lt;/a&gt; (&lt;a href=&quot;http://httpwg.org/specs/rfc7540.html&quot;&gt;also available in more readable formatting, YMMV&lt;/a&gt;). So, there you'll find the nuts and bolts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6e78876eb7f7e1b96ea834b84ac81960f3eb7a" translate="yes" xml:space="preserve">
          <source>There is a &lt;em&gt;main server&lt;/em&gt; which consists of all the definitions appearing outside of &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4d1d23a0d26b0a5d8dfb11a372872b74f507f7" translate="yes" xml:space="preserve">
          <source>There is a bit of an XDR heritage to this protocol, but it differs in lots of ways (no 4 byte alignment, for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9cefbdc50c350ffc4d4affec8aa3750d1bd177" translate="yes" xml:space="preserve">
          <source>There is a flaw in the .vcproj conversion of .dsp files. devenv.exe will mis-parse the /D flag for RC flags containing long quoted /D'efines which contain spaces. The command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a86a3922a3f5511120e65455c68fb49291edb9" translate="yes" xml:space="preserve">
          <source>There is a hard limit of &lt;code&gt;ServerLimit 20000&lt;/code&gt; compiled into the server (for the &lt;code&gt;&lt;a href=&quot;prefork&quot;&gt;prefork&lt;/a&gt;&lt;/code&gt; MPM 200000). This is intended to avoid nasty effects caused by typos. To increase it even further past this limit, you will need to modify the value of MAX_SERVER_LIMIT in the mpm source file and rebuild the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5bdd0d3babce19a30b3855212953054d36cc127" translate="yes" xml:space="preserve">
          <source>There is a hard limit of &lt;code&gt;ThreadLimit 20000&lt;/code&gt; (or &lt;code&gt;ThreadLimit 100000&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;event&quot;&gt;event&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;ThreadLimit 15000&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;mpm_winnt&quot;&gt;mpm_winnt&lt;/a&gt;&lt;/code&gt;) compiled into the server. This is intended to avoid nasty effects caused by typos. To increase it even further past this limit, you will need to modify the value of MAX_THREAD_LIMIT in the mpm source file and rebuild the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff7415a722997b56484f6c85fef1bafd4be14f" translate="yes" xml:space="preserve">
          <source>There is a third option, &lt;code&gt;UseCanonicalName DNS&lt;/code&gt;, which is intended for use with mass IP-based virtual hosting to support ancient clients that do not provide a &lt;code&gt;Host:&lt;/code&gt; header. With this option, Apache httpd does a reverse DNS lookup on the server IP address that the client connected to in order to work out self-referential URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef25f321b5003c336ec21593bde9f0874847aa6" translate="yes" xml:space="preserve">
          <source>There is actually a &lt;code&gt;&amp;lt;Location&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;LocationMatch&amp;gt;&lt;/code&gt; sequence performed just before the name translation phase (where &lt;code&gt;Aliases&lt;/code&gt; and &lt;code&gt;DocumentRoots&lt;/code&gt; are used to map URLs to filenames). The results of this sequence are completely thrown away after the translation has completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac9299719b77b3779da37b00211a67a75df1746" translate="yes" xml:space="preserve">
          <source>There is an environment variable &lt;code&gt;force-gzip&lt;/code&gt;, set via &lt;code&gt;&lt;a href=&quot;mod_env#setenv&quot;&gt;SetEnv&lt;/a&gt;&lt;/code&gt;, which will ignore the accept-encoding setting of your browser and will send compressed output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b13a918fa17603cc754b7a0747294fa85e02855" translate="yes" xml:space="preserve">
          <source>There is an environment variable &lt;code&gt;no-brotli&lt;/code&gt;, set via &lt;code&gt;&lt;a href=&quot;mod_env#setenv&quot;&gt;SetEnv&lt;/a&gt;&lt;/code&gt;, which will disable brotli compression for a particular request, even if it is supported by the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b634191959d4aebe4cd72866135c564ada64c6c" translate="yes" xml:space="preserve">
          <source>There is no Apache install program for NetWare currently. If you are building Apache 2.0 for NetWare from source, you will need to copy the files over to the server manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19bc740e67ca8d7af5d3a2edd838f4d93906c1f8" translate="yes" xml:space="preserve">
          <source>There is no capability within the Apache server to leave a requested module loaded. However, you may preload and keep a specific module loaded by using the following syntax in your httpd.conf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f7265ff3a8cad54f8d3ad3a98b85fddd9b822a" translate="yes" xml:space="preserve">
          <source>There is no need to manually enable connection pooling in the Apache configuration. Any module using this module for access to LDAP services will share the connection pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ea26633947ec08452226a10d077cdfb42179ff" translate="yes" xml:space="preserve">
          <source>There is one more thing to ordering: the client has its own preferences, too. If you want, you can configure your server to select the protocol most preferred by the client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24856b8409dbdcd7ff7b3e3cd2a07396a9ab696" translate="yes" xml:space="preserve">
          <source>There may be times when authentication puts an unacceptable load on a provider or on your network. This is most likely to affect users of &lt;code&gt;&lt;a href=&quot;../mod/mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt; (or third-party/custom providers). To deal with this, HTTPD 2.3/2.4 introduces a new caching provider &lt;code&gt;&lt;a href=&quot;../mod/mod_authn_socache&quot;&gt;mod_authn_socache&lt;/a&gt;&lt;/code&gt; to cache credentials and reduce the load on the origin provider(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd69ee1feef91d81125cad93eed1da4555aa24d" translate="yes" xml:space="preserve">
          <source>There must be at least twice the number of CPU cores than the configured &lt;var&gt;ratio&lt;/var&gt; for this to be active. The recommended &lt;var&gt;ratio&lt;/var&gt; is &lt;code&gt;8&lt;/code&gt;, hence at least &lt;code&gt;16&lt;/code&gt; cores should be available at runtime when this value is used. The right &lt;var&gt;ratio&lt;/var&gt; to obtain maximum performance needs to be calculated for each target system, testing multiple values and observing the variations in your key performance metrics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808e45a8550f4607b9133e69dd1d913fd5347859" translate="yes" xml:space="preserve">
          <source>There's another way to let multiple users in that is less specific. Rather than creating a group file, you can just use the following directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7362ae2013ddc4f13b60b19c8cc9b858d40417" translate="yes" xml:space="preserve">
          <source>Therefore the &quot;process&quot;-management directives are different:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7629d8933d627e8bc5262807e9aef8e682ed78a8" translate="yes" xml:space="preserve">
          <source>These HTTP headers are an instruction to the client about the document's validity and persistence. If cached, the document may be fetched from the cache rather than from the source until this time has passed. After that, the cache copy is considered &quot;expired&quot; and invalid, and a new copy must be obtained from the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b7a66f2a325f1ad5c370f7423a7be1b31be1a8" translate="yes" xml:space="preserve">
          <source>These are all fairly self-explanatory. Each of these is required, and will be sent for every request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7c25e0d33a94397b171e945687dd2567089924" translate="yes" xml:space="preserve">
          <source>These are the &lt;code&gt;force-proxy-request-1.0&lt;/code&gt; and &lt;code&gt;proxy-nokeepalive&lt;/code&gt; notes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7065e68bb08374e261a482ee59e8c1f7881c0a5e" translate="yes" xml:space="preserve">
          <source>These authorization providers affect which hosts can access an area of the server. Access can be controlled by hostname, IP Address, or IP Address range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c930abe7872882f3bfeaaec41edae8d73b49deb" translate="yes" xml:space="preserve">
          <source>These can be used as follows in your &lt;code&gt;httpd.conf&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf47a63c159ad471821d721a702ad186188a7b4d" translate="yes" xml:space="preserve">
          <source>These directives alter the protocol behavior of &lt;code&gt;&lt;a href=&quot;mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. See the &lt;code&gt;&lt;a href=&quot;mod/mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod/mod_proxy_http&quot;&gt;mod_proxy_http&lt;/a&gt;&lt;/code&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eaa28cde983ee559d7c4c0c71d4590e31797f57" translate="yes" xml:space="preserve">
          <source>These directives are placed at global scope (i.e., not within a virtual host definition) wherever other global SSL configuration directives are placed, such as in &lt;code&gt;conf/extra/httpd-ssl.conf&lt;/code&gt; for normal open source builds of httpd, &lt;code&gt;/etc/apache2/mods-enabled/ssl.conf&lt;/code&gt; for the Ubuntu or Debian-bundled httpd, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7601fe4fbb49939b64db9cef148d68c2c9b20613" translate="yes" xml:space="preserve">
          <source>These directives control the locations of the various files that httpd needs for proper operation. When the pathname used does not begin with a slash (/), the files are located relative to the &lt;code&gt;&lt;a href=&quot;mod/core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt;. Be careful about locating files in paths which are writable by non-root users. See the &lt;a href=&quot;misc/security_tips#serverroot&quot;&gt;security tips&lt;/a&gt; documentation for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587bb6b8336e35f809702264bf62a896a06d157b" translate="yes" xml:space="preserve">
          <source>These documents can be customized to whatever degree you wish to provide more useful information to users about your site, and what they can expect to find there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9573e7f925dd30429c359f8545c6cd0e540f788c" translate="yes" xml:space="preserve">
          <source>These domains are equivalent to top level domains such as &lt;code&gt;.com&lt;/code&gt;, and allowing such cookies may be a security risk. Thus, if you are under a two-part top level domain, you should still use your actual domain, as you would with any other top level domain (for example &lt;code&gt;.example.co.uk&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77736747dbbfa427c48f04446febeb87f408fc01" translate="yes" xml:space="preserve">
          <source>These examples presume that clients on the Intranet have IPs in the range 192.168.1.0/24, and that the part of the Intranet website you want to allow internet access to is &lt;code&gt;/usr/local/apache2/htdocs/subarea&lt;/code&gt;. This configuration should remain outside of your HTTPS virtual host, so that it applies to both HTTPS and HTTP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224bcc6b3c24cd6cd3a721b1b635dffeed81025f" translate="yes" xml:space="preserve">
          <source>These formats even work without setting the &lt;code&gt;StdEnvVars&lt;/code&gt; option of the &lt;code&gt;&lt;a href=&quot;#ssloptions&quot;&gt;SSLOptions&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4352e3f432528116092b2ac8da3ac2d7527d269" translate="yes" xml:space="preserve">
          <source>These improvements are valid for both HTTP/HTTPS connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24518ae0d14e3326c2bd4b628b856d1569adc39" translate="yes" xml:space="preserve">
          <source>These options are used to cross-compile the Apache HTTP Server to run on another system. In normal cases, when building and running the server on the same system, these options are not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40191b72380cd45e31b80a59e883d39b0a1e0c25" translate="yes" xml:space="preserve">
          <source>These options are used to define optional packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7667863cce75ba814f62b1858f50aa13263c80af" translate="yes" xml:space="preserve">
          <source>These options are used to fine tune the features your HTTP server will have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629b8b1cdce361f8239ab088cf16d570223af203" translate="yes" xml:space="preserve">
          <source>These options define the installation directory. The installation tree depends on the selected layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629497be75229c95cbd33f4c85bb10c8b0bf09fc" translate="yes" xml:space="preserve">
          <source>These pages document the country names (official short names in English) in alphabetical order as given in ISO 3166-1 and the corresponding ISO 3166-1-alpha-2 code elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9e04b474db6f6f7540c478397bbb7c7b5329a4" translate="yes" xml:space="preserve">
          <source>These protocols, as well as application protocol data, are encapsulated in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41301fd0c6504fdf648591e667fcbaa508d2c940" translate="yes" xml:space="preserve">
          <source>These rules are applied prior to request processing, so must be configured at the global or default (first) matching virtual host section, by IP/port interface (and not by name) to be honored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885fa5c1a5caa5ad7ad3a2ff5d2dc7eefb6b6196" translate="yes" xml:space="preserve">
          <source>These rulesets will work either in your main server configuration file, or in a &lt;code&gt;.htaccess&lt;/code&gt; file placed in the &lt;code&gt;&lt;a href=&quot;../mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e789cadfe49dfce8d5105fe6959003568ba419fd" translate="yes" xml:space="preserve">
          <source>These situations are better handled by the &lt;code&gt;Redirect&lt;/code&gt; directive. Remember that &lt;code&gt;Redirect&lt;/code&gt; preserves path information. That is to say, a redirect for a URL &lt;code&gt;/one&lt;/code&gt; will also redirect all URLs under that, such as &lt;code&gt;/one/two.html&lt;/code&gt; and &lt;code&gt;/one/three/four.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac76f57f3a47853675d946c014118ef191498c70" translate="yes" xml:space="preserve">
          <source>These three elements are described in the sections that follow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1fb952e8d6bf8454eb9269956664f61d9305c6b" translate="yes" xml:space="preserve">
          <source>These tokens can not be combined with each other or &lt;code&gt;strftime(3)&lt;/code&gt; formatting in the same format string. You can use multiple &lt;code&gt;%{format}t&lt;/code&gt; tokens instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32da238ee766f08efb695c81b1b369c282f07cf4" translate="yes" xml:space="preserve">
          <source>These variables all correspond to the similarly named HTTP MIME-headers, C variables of the Apache HTTP Server or &lt;code&gt;struct tm&lt;/code&gt; fields of the Unix system. Most are documented &lt;a href=&quot;../expr#vars&quot;&gt;here&lt;/a&gt; or elsewhere in the Manual or in the CGI specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea08ba26a297b114cc247d5e4db8f365510324bf" translate="yes" xml:space="preserve">
          <source>These variables are available to the CGI programmer, and are half of the story of the client-server communication. The complete list of required variables is at &lt;a href=&quot;http://www.ietf.org/rfc/rfc3875&quot;&gt;Common Gateway Interface RFC&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5d237009348909c88d61feac3717c37132269f" translate="yes" xml:space="preserve">
          <source>Third Party Modules' Status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b6dee65adb71b6fb7c5c47ae5dd49fc9c3c1f12" translate="yes" xml:space="preserve">
          <source>Third, it is assumed that you are using an &lt;strong&gt;unmodified&lt;/strong&gt; version of suEXEC code. All code for suEXEC has been carefully scrutinized and tested by the developers as well as numerous beta testers. Every precaution has been taken to ensure a simple yet solidly safe base of code. Altering this code can cause unexpected problems and new security risks. It is &lt;strong&gt;highly&lt;/strong&gt; recommended you not alter the suEXEC code unless you are well versed in the particulars of security programming and are willing to share your work with the Apache HTTP Server development team for consideration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec75e0745d6368c1cbc9a4ca76a169427f7dcb2e" translate="yes" xml:space="preserve">
          <source>Third-party modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80ec3a63e676aa601222a4c8fe252168db33dee" translate="yes" xml:space="preserve">
          <source>Third-party modules like mod_php may be used to write code that does a variety of things. Many third-party applications, written using a variety of languages and tools, are available for download and installation on your Apache HTTP Server. Support of these third-party things is beyond the scope of this documentation, and you should find their documentation or other support forums to answer your questions about them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0c9966576fbc6d61f65d9d4d1381c12b439db7" translate="yes" xml:space="preserve">
          <source>Third-party packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157327ad385544f625e2c923b20d8f5819760b52" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;mmap()&lt;/code&gt;ing is done once at server start or restart, only. So whenever one of the mapped files changes on the filesystem you &lt;em&gt;have&lt;/em&gt; to restart the server (see the &lt;a href=&quot;../stopping&quot;&gt;Stopping and Restarting&lt;/a&gt; documentation). To reiterate that point: if the files are modified &lt;em&gt;in place&lt;/em&gt; without restarting the server you may end up serving requests that are completely bogus. You should update files by unlinking the old copy and putting a new copy in place. Most tools such as &lt;code&gt;rdist&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; do this. The reason why this modules doesn't take care of changes to the files is that this check would need an extra &lt;code&gt;stat()&lt;/code&gt; every time which is a waste and against the intent of I/O reduction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b965c956f28755b454e34d204851be6d315ba6" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;write(2)&lt;/code&gt; call records the request in the access log. Note that one thing missing from this trace is a &lt;code&gt;time(2)&lt;/code&gt; call. Unlike Apache 1.3, Apache 2.x uses &lt;code&gt;gettimeofday(3)&lt;/code&gt; to look up the time. On some operating systems, like Linux or Solaris, &lt;code&gt;gettimeofday&lt;/code&gt; has an optimized implementation that doesn't require as much overhead as a typical system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ab80def4e5ad5961e1f1412e564ddcad20019a" translate="yes" xml:space="preserve">
          <source>This &lt;em&gt;forces&lt;/em&gt; forbidden access when &lt;code&gt;SSLRequireSSL&lt;/code&gt; or &lt;code&gt;SSLRequire&lt;/code&gt; successfully decided that access should be forbidden. Usually the default is that in the case where a ``&lt;code&gt;Satisfy any&lt;/code&gt;'' directive is used, and other access restrictions are passed, denial of access due to &lt;code&gt;SSLRequireSSL&lt;/code&gt; or &lt;code&gt;SSLRequire&lt;/code&gt; is overridden (because that's how the Apache &lt;code&gt;Satisfy&lt;/code&gt; mechanism should work.) But for strict access restriction you can use &lt;code&gt;SSLRequireSSL&lt;/code&gt; and/or &lt;code&gt;SSLRequire&lt;/code&gt; in combination with an ``&lt;code&gt;SSLOptions +StrictRequire&lt;/code&gt;''. Then an additional ``&lt;code&gt;Satisfy Any&lt;/code&gt;'' has no chance once mod_ssl has decided to deny access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd65bbff8cda967b2c150b431cbb3d7bb03ad403" translate="yes" xml:space="preserve">
          <source>This Example will uncompress gzip'ed output from example.com, so other filters can do further processing with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd587a0c97d457496bc64c6e7759c1f7f556bd2" translate="yes" xml:space="preserve">
          <source>This MPM depends on &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt;'s atomic compare-and-swap operations for thread synchronization. If you are compiling for an x86 target and you don't need to support 386s, or you are compiling for a SPARC and you don't need to run on pre-UltraSPARC chips, add &lt;code&gt;--enable-nonportable-atomics=yes&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script's arguments. This will cause APR to implement atomic operations using efficient opcodes not available in older CPUs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e781abb83dc40615a6c07623314a0994cdabf72a" translate="yes" xml:space="preserve">
          <source>This MPM does not perform well on older platforms which lack good threading, but the requirement for EPoll or KQueue makes this moot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410f0f4f8b4e41ea5b7a8c5075cea0414352f57c" translate="yes" xml:space="preserve">
          <source>This MPM is very self-regulating, so it is rarely necessary to adjust its configuration directives. Most important is that &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; be big enough to handle as many simultaneous requests as you expect to receive, but small enough to assure that there is enough physical RAM for all processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57769a1f7186d96160f7c3e39ab046ffde374a1a" translate="yes" xml:space="preserve">
          <source>This MPM tries to fix the 'keep alive problem' in HTTP. After a client completes the first request, it can keep the connection open, sending further requests using the same socket and saving significant overhead in creating TCP connections. However, Apache HTTP Server traditionally keeps an entire child process/thread waiting for data from the client, which brings its own disadvantages. To solve this problem, this MPM uses a dedicated listener thread for each process to handle both the Listening sockets, all sockets that are in a Keep Alive state, sockets where the handler and protocol filters have done their work and the ones where the only remaining thing to do is send the data to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c18798dd5109be6e6cc6510abb2e94103b563a" translate="yes" xml:space="preserve">
          <source>This MPM uses the &lt;code&gt;mpm-accept&lt;/code&gt; mutex to serialize access to incoming connections when subject to the thundering herd problem (generally, when there are multiple listening sockets). The implementation aspects of this mutex can be configured with the &lt;code&gt;&lt;a href=&quot;core#mutex&quot;&gt;Mutex&lt;/a&gt;&lt;/code&gt; directive. The &lt;a href=&quot;../misc/perf-tuning&quot;&gt;performance hints&lt;/a&gt; documentation has additional information about this mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19082231353436727fa5d2a06e5b8e2957c056f6" translate="yes" xml:space="preserve">
          <source>This Multi-Processing Module (MPM) implements a hybrid multi-process multi-threaded server. By using threads to serve requests, it is able to serve a large number of requests with fewer system resources than a process-based server. However, it retains much of the stability of a process-based server by keeping multiple processes available, each with many threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f985e8c4087ea45b8c273bccf3690def40b7577b" translate="yes" xml:space="preserve">
          <source>This Multi-Processing Module (MPM) implements a non-threaded, pre-forking web server. Each server process may answer incoming requests, and a parent process manages the size of the server pool. It is appropriate for sites that need to avoid threading for compatibility with non-thread-safe libraries. It is also the best MPM for isolating each request, so that a problem with a single request will not affect any other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20d9ecb322914eb18216cce494dea476d4d236f" translate="yes" xml:space="preserve">
          <source>This Multi-Processing Module (MPM) implements an exclusively threaded web server that has been optimized for Novell NetWare.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6a4a1571ee18b40a0949c8508dba10c31e477b" translate="yes" xml:space="preserve">
          <source>This Multi-Processing Module (MPM) is the default for the Windows NT operating systems. It uses a single control process which launches a single child process which in turn creates threads to handle requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64b7e26ace2780b73877a19bb09d4ba7f23d2c5d" translate="yes" xml:space="preserve">
          <source>This Recommendation defines a new XHTML document type that is based upon the module framework and modules defined in Modularization of XHTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e345faee959371b193bee1bfda30b9fb61406f7a" translate="yes" xml:space="preserve">
          <source>This activates the module by automatically adding a corresponding &lt;code&gt;&lt;a href=&quot;../mod/mod_so#loadmodule&quot;&gt;LoadModule&lt;/a&gt;&lt;/code&gt; line to Apache's &lt;code&gt;httpd.conf&lt;/code&gt; configuration file, or by enabling it if it already exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cf56469c5b50c525f94a6600145a4f23e56c41" translate="yes" xml:space="preserve">
          <source>This allows a convenient way to match connections that originate from the local host:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bd9c4f2d1a17fd02a914dd6c521ab05cfaa2cf" translate="yes" xml:space="preserve">
          <source>This allows h2, the secure variant, to be the preferred protocol on your server connections. When you want to enable all HTTP/2 variants, you simply write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8edc7fbd158e935a7b36aa37fb91f77ec67ef83" translate="yes" xml:space="preserve">
          <source>This allows only HTTP/1 on connections, except SSL connections to &lt;code&gt;test.example.org&lt;/code&gt; which offer HTTP/2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18c60e3069be3d7095d07943c54df8e691704ad" translate="yes" xml:space="preserve">
          <source>This allows or prevents Apache httpd from functioning as a forward proxy server. (Setting ProxyRequests to &lt;code&gt;Off&lt;/code&gt; does not disable use of the &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directive.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f89faa4a167e6cc5fa099d0ebef3bad2cb4d81" translate="yes" xml:space="preserve">
          <source>This allows the content of &lt;var&gt;string&lt;/var&gt; to be shown as HTML interpreted, &lt;strong&gt;Additional Information&lt;/strong&gt; for the module &lt;var&gt;module-name&lt;/var&gt;. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7e0f36af0ec9094581ac1e91c9a1c0d3babcae" translate="yes" xml:space="preserve">
          <source>This allows users present in both LDAP and &lt;code&gt;&lt;a href=&quot;mod_authn_file#authuserfile&quot;&gt;AuthUserFile&lt;/a&gt;&lt;/code&gt; to authenticate when the LDAP server is available but the user's account is locked or password is otherwise unusable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc27e5c3d00ea4166d594efc48706133ddfcb17" translate="yes" xml:space="preserve">
          <source>This also means that multiple instances of Apache httpd configured on a same &lt;code&gt;IP:port&lt;/code&gt; and with a positive &lt;code&gt;ListenCoresBucketsRatio&lt;/code&gt; would start without an error too, and then run with incoming connections evenly distributed accross both instances (this is NOT a recommendation or a sensible usage in any case, but just a notice that it would prevent such possible issues to be detected).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b605e29c744ad172b03954784a77cb3521baf3b2" translate="yes" xml:space="preserve">
          <source>This appears to be responsive enough that it's almost unnecessary to twiddle the &lt;code&gt;&lt;a href=&quot;../mod/prefork#minspareservers&quot;&gt;MinSpareServers&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../mod/prefork#maxspareservers&quot;&gt;MaxSpareServers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#startservers&quot;&gt;StartServers&lt;/a&gt;&lt;/code&gt; knobs. When more than 4 children are spawned per second, a message will be emitted to the &lt;code&gt;&lt;a href=&quot;../mod/core#errorlog&quot;&gt;ErrorLog&lt;/a&gt;&lt;/code&gt;. If you see a lot of these errors, then consider tuning these settings. Use the &lt;code&gt;&lt;a href=&quot;../mod/mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; output as a guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae8916a7833d97a9672314d8c05ed3a367362ca" translate="yes" xml:space="preserve">
          <source>This applies to processes forked from Apache httpd children servicing requests, not the Apache httpd children themselves. This includes CGI scripts and SSI exec commands, but not any processes forked from the Apache httpd parent, such as piped logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f3ca6b971a08b73633b546a11f9502b5d135a9" translate="yes" xml:space="preserve">
          <source>This argument is followed by a &lt;var&gt;header&lt;/var&gt; name, which can include the final colon, but it is not required. Case is ignored for &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;edit&lt;/code&gt;. The &lt;var&gt;header&lt;/var&gt; name for &lt;code&gt;echo&lt;/code&gt; is case sensitive and may be a &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expression&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4fd28a65c17df74977d1bbbb029ca3f6d53b43" translate="yes" xml:space="preserve">
          <source>This argument is followed by a header name, which can include the final colon, but it is not required. Case is ignored. For &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; a &lt;var&gt;value&lt;/var&gt; is given as the third argument. If a &lt;var&gt;value&lt;/var&gt; contains spaces, it should be surrounded by double quotes. For &lt;code&gt;unset&lt;/code&gt;, no &lt;var&gt;value&lt;/var&gt; should be given. &lt;var&gt;value&lt;/var&gt; may be a character string, a string containing format specifiers or a combination of both. The supported format specifiers are the same as for the &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;Header&lt;/a&gt;&lt;/code&gt;, please have a look there for details. For &lt;code&gt;edit&lt;/code&gt; both a &lt;var&gt;value&lt;/var&gt; and a &lt;var&gt;replacement&lt;/var&gt; are required, and are a &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expression&lt;/a&gt; and a replacement string respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd7eeab07cd4a5aceccb5564f21ba1a983f75ea" translate="yes" xml:space="preserve">
          <source>This arrangement uses more advanced &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; features to work out the translation from virtual host to document root, from a separate configuration file. This provides more flexibility, but requires more complicated configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b11d9ca8be2c3c99637aab6faf7570753309c25" translate="yes" xml:space="preserve">
          <source>This article covers the &quot;standard&quot; way of protecting parts of your web site that most of you are going to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6662f5aebf8a5d6ed1f98a167219aebfefd108" translate="yes" xml:space="preserve">
          <source>This article deals with Server Side Includes, usually called simply SSI. In this article, I'll talk about configuring your server to permit SSI, and introduce some basic SSI techniques for adding dynamic content to your existing HTML pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903fb209b3fcd0dff632fb71e5568b914df6c85c" translate="yes" xml:space="preserve">
          <source>This at least avoids the extra checks for the &lt;code&gt;&lt;a href=&quot;../mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; path. Note that you'll need to add similar sections if you have any &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; paths outside of your document root. For highest performance, and no symlink protection, set &lt;code&gt;FollowSymLinks&lt;/code&gt; everywhere, and never set &lt;code&gt;SymLinksIfOwnerMatch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a328d777cdcbceec07d16c4579496701858b1e" translate="yes" xml:space="preserve">
          <source>This can be a dangerous thing to change. Make certain every path you include in this define is a &lt;strong&gt;trusted&lt;/strong&gt; directory. You don't want to open people up to having someone from across the world running a trojan horse on them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30f2f668cd5953bf26f7caf02e2909fc29a74ed" translate="yes" xml:space="preserve">
          <source>This can be also used to force the handler based on some conditions. For example, the following snippet used in per-server context allows &lt;code&gt;.php&lt;/code&gt; files to be &lt;em&gt;displayed&lt;/em&gt; by &lt;code&gt;mod_php&lt;/code&gt; if they are requested with the &lt;code&gt;.phps&lt;/code&gt; extension:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59da7dc7e8e10f7a5cf64a50f5696068ddcf46bb" translate="yes" xml:space="preserve">
          <source>This can be used to send any kind of data from the server, including redirects and other special HTTP responses, without requiring a cgi-script or an nph script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15ce07b3cc64ea9ed0a20cdb077ca18156c3dea4" translate="yes" xml:space="preserve">
          <source>This can happen when you try to connect to a HTTPS server (or virtual server) via HTTP (eg, using &lt;code&gt;http://example.com/&lt;/code&gt; instead of &lt;code&gt;https://example.com&lt;/code&gt;). It can also happen when trying to connect via HTTPS to a HTTP server (eg, using &lt;code&gt;https://example.com/&lt;/code&gt; on a server which doesn't support HTTPS, or which supports it on a non-standard port). Make sure that you're connecting to a (virtual) server that supports SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917f99b0a4e14ef3c9814066cbd3bd1b23c3b9c8" translate="yes" xml:space="preserve">
          <source>This can help provide privacy to user sessions where the contents of the session should be kept private from the user, or where protection is needed against the effects of cross site scripting attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4a7908ad96966e0ee9c4878d2028ee59a7c4bb" translate="yes" xml:space="preserve">
          <source>This cannot be a fully qualified URL, you are not allowed to pass the protocol or a server name (&lt;em&gt;e.g.&lt;/em&gt; simply &lt;code&gt;/location&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d746c40c9e4a9a47bfa11594f9f244cc9a5ae398" translate="yes" xml:space="preserve">
          <source>This causes &lt;code&gt;logresolve&lt;/code&gt; to apply some DNS checks: after finding the hostname from the IP address, it looks up the IP addresses for the hostname and checks that one of these matches the original address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd10625c23053e6d6d86f5639fa36443db17cb1b" translate="yes" xml:space="preserve">
          <source>This causes any &lt;code&gt;Vary&lt;/code&gt; fields to be removed from the response header before it is sent back to the client. Some clients don't interpret this field correctly; setting this variable can work around this problem. Setting this variable also implies &lt;strong&gt;force-response-1.0&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14831a40eda26bb6ecb54630f03c6b8448361a53" translate="yes" xml:space="preserve">
          <source>This causes cacheable resources to be stored separately for each session, which is often not desired. &lt;code&gt;CacheIgnoreURLSessionIdentifiers&lt;/code&gt; lets define a list of identifiers that are removed from the key that is used to identify an entity in the cache, such that cacheable resources are not stored separately for each session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b60965de38a27ca0c9fe04e98daf7991c52b0f" translate="yes" xml:space="preserve">
          <source>This code is designed to always respect the process control directive of the MPMs, so the number of processes and threads available to serve clients will be maintained at the appropriate values throughout the restart process. Furthermore, it respects &lt;code&gt;&lt;a href=&quot;mod/mpm_common#startservers&quot;&gt;StartServers&lt;/a&gt;&lt;/code&gt; in the following manner: if after one second at least &lt;code&gt;&lt;a href=&quot;mod/mpm_common#startservers&quot;&gt;StartServers&lt;/a&gt;&lt;/code&gt; new children have not been created, then create enough to pick up the slack. Hence the code tries to maintain both the number of children appropriate for the current load on the server, and respect your wishes with the &lt;code&gt;&lt;a href=&quot;mod/mpm_common#startservers&quot;&gt;StartServers&lt;/a&gt;&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9a1b9f7b3b604491eb79a0ea13310ae1a7e26f" translate="yes" xml:space="preserve">
          <source>This command controls various aspects of the parsing. The valid attributes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5510036d136f9a91015a96222048b2bd4f0284" translate="yes" xml:space="preserve">
          <source>This command doesn't output anything. Its only use is to add comments within a file. These comments are not printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edabd70bb88980faa5ddefad84d1ecca3f6c0061" translate="yes" xml:space="preserve">
          <source>This command inserts the text of another document or file into the parsed file. Any included file is subject to the usual access control. If the directory containing the parsed file has &lt;a href=&quot;core#options&quot;&gt;Options&lt;/a&gt;&lt;code&gt;IncludesNOEXEC&lt;/code&gt; set, then only documents with a text &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME-type&lt;/a&gt; (&lt;code&gt;text/plain&lt;/code&gt;, &lt;code&gt;text/html&lt;/code&gt; etc.) will be included. Otherwise CGI scripts are invoked as normal using the complete URL given in the command, including any query string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b66dc1c7f7f5365f4138f0ea699a6801d820b4" translate="yes" xml:space="preserve">
          <source>This command prints one of the &lt;a href=&quot;#includevars&quot;&gt;include variables&lt;/a&gt; defined below. If the variable is unset, the result is determined by the &lt;code&gt;&lt;a href=&quot;#ssiundefinedecho&quot;&gt;SSIUndefinedEcho&lt;/a&gt;&lt;/code&gt; directive. Any dates printed are subject to the currently configured &lt;code&gt;timefmt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572effa938cdf1e5b1968f1264363c53afb331fb" translate="yes" xml:space="preserve">
          <source>This command prints the last modification date of the specified file, subject to the &lt;code&gt;timefmt&lt;/code&gt; format specification. The attributes are the same as for the &lt;code&gt;&lt;a href=&quot;#element.fsize&quot;&gt;fsize&lt;/a&gt;&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e8d54dc7a85f30451e9fd80b485f9e18da0ab9" translate="yes" xml:space="preserve">
          <source>This command prints the size of the specified file, subject to the &lt;code&gt;sizefmt&lt;/code&gt; format specification. Attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd3876e04ca8261923fd23e49b8ced36d78a064" translate="yes" xml:space="preserve">
          <source>This command will dump out a description of how Apache parsed the configuration file. Careful examination of the IP addresses and server names may help uncover configuration mistakes. (See the docs for the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; program for other command line options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175edbe93ca2917a865368c4a39fe82d4b722e8b" translate="yes" xml:space="preserve">
          <source>This complex directive uses a colon-separated &lt;em&gt;cipher-spec&lt;/em&gt; string consisting of OpenSSL cipher specifications to configure the Cipher Suite the client is permitted to negotiate in the SSL handshake phase. The optional protocol specifier can configure the Cipher Suite for a specific SSL version. Possible values include &quot;SSL&quot; for all SSL Protocols up to and including TLSv1.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a7fbebef2eefa902a9133c29e31537bb3d46f1" translate="yes" xml:space="preserve">
          <source>This configuration can be changed into an IP-based virtual hosting solution by just turning &lt;code&gt;UseCanonicalName Off&lt;/code&gt; into &lt;code&gt;UseCanonicalName DNS&lt;/code&gt;. The server name that is inserted into the filename is then derived from the IP address of the virtual host. The variable &lt;code&gt;%0&lt;/code&gt; references the requested servername, as indicated in the &lt;code&gt;Host:&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe8057a60e73e2ea6fafeae179984fa76bbd4e3" translate="yes" xml:space="preserve">
          <source>This configuration will rotate the error logfile whenever it reaches a size of 5 megabytes, and the suffix to the logfile name will be created of the form &lt;code&gt;errorlog.YYYY-mm-dd-HH_MM_SS&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4963e759bfb006850e2fd9571401658f707a651b" translate="yes" xml:space="preserve">
          <source>This configuration will rotate the logfile whenever it reaches a size of 5 megabytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c5d02164dc60a7f7d9da2a75445b99b071325b" translate="yes" xml:space="preserve">
          <source>This configures an actual filter chain, from declared filters. &lt;code&gt;FilterChain&lt;/code&gt; takes any number of arguments, each optionally preceded with a single-character control that determines what to do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5bdf883c2016049a9e3b81c5117ce646a07206" translate="yes" xml:space="preserve">
          <source>This configures one or more sources for seeding the Pseudo Random Number Generator (PRNG) in OpenSSL at startup time (&lt;em&gt;context&lt;/em&gt; is &lt;code&gt;startup&lt;/code&gt;) and/or just before a new SSL connection is established (&lt;em&gt;context&lt;/em&gt; is &lt;code&gt;connect&lt;/code&gt;). This directive can only be used in the global server context because the PRNG is a global facility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e58df07b286a13664712ccf7a83b2f2dc133b0" translate="yes" xml:space="preserve">
          <source>This configures the storage type of the global/inter-process SSL Session Cache. This cache is an optional facility which speeds up parallel request processing. For requests to the same server process (via HTTP keep-alive), OpenSSL already caches the SSL session information locally. But because modern clients request inlined images and other data via parallel requests (usually up to four parallel requests are common) those requests are served by &lt;em&gt;different&lt;/em&gt; pre-forked server processes. Here an inter-process cache helps to avoid unnecessary session handshakes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a32acb6bdba9fc5df9db8057ae20ebf1edf2da" translate="yes" xml:space="preserve">
          <source>This controls the directory to which Apache httpd attempts to switch before dumping core. If your operating system is configured to create core files in the working directory of the crashing process, &lt;code&gt;CoreDumpDirectory&lt;/code&gt; is necessary to change working directory from the default &lt;code&gt;&lt;a href=&quot;core#serverroot&quot;&gt;ServerRoot&lt;/a&gt;&lt;/code&gt; directory, which should not be writable by the user the server runs as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb87682fe5c872d8902e21ecff2855cb66e3521" translate="yes" xml:space="preserve">
          <source>This controls whether or not Basic auth is required before passing the request to the authorizer. If required, the authorizer won't be invoked without a user id and password; 401 will be returned for a request without that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d422749205de8b20ca4dc50753ef98f6c0700988" translate="yes" xml:space="preserve">
          <source>This controls whether or not other modules are allowed to run when this module has a FastCGI authorizer configured and it fails the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29778610bb9d42fbfc89eec285753aa794566465" translate="yes" xml:space="preserve">
          <source>This creates the file /var/log/logfile, truncating the file at startup and then truncating the file once per day. It is expected in this scenario that a separate process (such as tail) would process the file in real time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc439a4005dc935e8df95397e8f52a6d89aca28" translate="yes" xml:space="preserve">
          <source>This creates the files /var/log/logfile.nnnn where nnnn is the system time at which the log nominally starts (this time will always be a multiple of the rotation time, so you can synchronize cron scripts with it). At the end of each rotation time (here after 24 hours) a new log is started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583e980f1208abbfb7a57ad447250997b5e306be" translate="yes" xml:space="preserve">
          <source>This creates the files /var/log/logfile.yyyy.mm.dd where yyyy is the year, mm is the month, and dd is the day of the month. Logging will switch to a new file every day at midnight, local time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a267ce88a0d945751c84d1a6679196f11454b225" translate="yes" xml:space="preserve">
          <source>This defines remote proxies to this proxy. &lt;var&gt;match&lt;/var&gt; is either the name of a URL-scheme that the remote server supports, or a partial URL for which the remote server should be used, or &lt;code&gt;*&lt;/code&gt; to indicate the server should be contacted for all requests. &lt;var&gt;remote-server&lt;/var&gt; is a partial URL for the remote server. Syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958753ca9d639caafdf17124e53ca720c1c3ab9f" translate="yes" xml:space="preserve">
          <source>This defines the &lt;em&gt;nickname&lt;/em&gt;&lt;code&gt;common&lt;/code&gt; and associates it with a particular log format string. The format string consists of percent directives, each of which tell the server to log a particular piece of information. Literal characters may also be placed in the format string and will be copied directly into the log output. The quote character (&lt;code&gt;&quot;&lt;/code&gt;) must be escaped by placing a backslash before it to prevent it from being interpreted as the end of the format string. The format string may also contain the special control characters &quot;&lt;code&gt;\n&lt;/code&gt;&quot; for new-line and &quot;&lt;code&gt;\t&lt;/code&gt;&quot; for tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e258c7a48beab060bd41d7393f783e4d0c1c82fa" translate="yes" xml:space="preserve">
          <source>This defines the directory tree under which &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; access is allowed for executables. Default value is &lt;code&gt;--datadir/htdocs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bae6e3335f9891f928128ed71a74fb62bdbbe0a" translate="yes" xml:space="preserve">
          <source>This defines the filename of the &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; logfile. By default the logfile is named &lt;code&gt;suexec_log&lt;/code&gt; and located in &lt;code&gt;--logfiledir&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e88ab84b797c723773712a501e9a51b601cd96f" translate="yes" xml:space="preserve">
          <source>This defines the filename to which all suEXEC transactions and errors are logged (useful for auditing and debugging purposes). By default the logfile is named &quot;&lt;code&gt;suexec_log&lt;/code&gt;&quot; and located in your standard logfile directory (&lt;code&gt;--logfiledir&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059939fc739b1ae0bab831aa37aa9d06c04cfc04" translate="yes" xml:space="preserve">
          <source>This defines the path to &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; binary. Default is &lt;code&gt;--sbindir&lt;/code&gt; (see &lt;a href=&quot;#directoryfinetuning&quot;&gt;Fine tuning of installation directories&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c91979790d99c2989b3adec2505628b4f8f0f43" translate="yes" xml:space="preserve">
          <source>This defines the port on which &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; will listen. This port number is used when generating the configuration file &lt;code&gt;httpd.conf&lt;/code&gt;. The default is 80.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d53a13ca1e8fcfb68d32aab245b186793d4957d5" translate="yes" xml:space="preserve">
          <source>This defines the subdirectory under the user's directory that contains all executables for which &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; access is allowed. This setting is necessary when you want to use &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; together with user-specific directories (as provided by &lt;code&gt;&lt;a href=&quot;../mod/mod_userdir&quot;&gt;mod_userdir&lt;/a&gt;&lt;/code&gt;). The default is &lt;code&gt;public_html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958b53041338b90ede6f7d603174ef6c81e1f5a3" translate="yes" xml:space="preserve">
          <source>This defines the user allowed to call &lt;code&gt;&lt;a href=&quot;suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt;. It should be the same as the user under which &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; normally runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352c32a414ee1c62ccdf6368d68d9413e58c36b3" translate="yes" xml:space="preserve">
          <source>This difference between &lt;code&gt;onsuccess&lt;/code&gt; and &lt;code&gt;always&lt;/code&gt; is a feature that resulted as a consequence of how httpd internally stores headers for a HTTP response, since it does not offer any &quot;normalized&quot; single list of headers. The main problem that can arise if the following concept is not kept in mind while writing the configuration is that some HTTP responses might end up with the same header duplicated (confusing users or sometimes even HTTP clients). For example, suppose that you have a simple PHP proxy setup with &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; and your backend PHP scripts adds the &lt;code&gt;X-Foo: bar&lt;/code&gt; header to each HTTP response. As described above, &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;always&lt;/code&gt; table to store headers, so a configuration like the following ends up in the wrong result, namely having the header duplicated with both values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d2e36185d85af4cb3c648b062cf7eae23de9d3" translate="yes" xml:space="preserve">
          <source>This directive &lt;em&gt;should&lt;/em&gt; always be specified and contain at least the (set of) root URI(s) for this space. Omitting to do so will cause the client to send the Authorization header for &lt;em&gt;every request&lt;/em&gt; sent to this server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a839ecea6ce3b675ce8bd7c2bf40dead6ab28" translate="yes" xml:space="preserve">
          <source>This directive activates a particular output &lt;a href=&quot;../filter&quot;&gt;filter&lt;/a&gt; for a request depending on the response &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#media-type&quot;&gt;media-type&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3471662b40a0df59dbca6a0785ffba578a76be97" translate="yes" xml:space="preserve">
          <source>This directive adds a member to a load balancing group. It can be used within a &lt;code&gt;&amp;lt;Proxy balancer://...&amp;gt;&lt;/code&gt; container directive and can take any of the key value pair parameters available to &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f70ebe99d8010dfac061ed4a778e4ad0093d6de" translate="yes" xml:space="preserve">
          <source>This directive adds an action, which will activate &lt;var&gt;cgi-script&lt;/var&gt; when &lt;var&gt;action-type&lt;/var&gt; is triggered by the request. The &lt;var&gt;cgi-script&lt;/var&gt; is the URL-path to a resource that has been designated as a CGI script using &lt;code&gt;&lt;a href=&quot;mod_alias#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt;. The &lt;var&gt;action-type&lt;/var&gt; can be either a &lt;a href=&quot;../handler&quot;&gt;handler&lt;/a&gt; or a &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME content type&lt;/a&gt;. It sends the URL and file path of the requested document using the standard CGI &lt;code&gt;PATH_INFO&lt;/code&gt; and &lt;code&gt;PATH_TRANSLATED&lt;/code&gt; environment variables. The handler used for the particular request is passed using the &lt;code&gt;REDIRECT_HANDLER&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff8ffeb12ecc05b86037b5b869fa7028942a2563" translate="yes" xml:space="preserve">
          <source>This directive adds an action, which will activate &lt;var&gt;cgi-script&lt;/var&gt; when a file is requested using the method of &lt;var&gt;method&lt;/var&gt;. The &lt;var&gt;cgi-script&lt;/var&gt; is the URL-path to a resource that has been designated as a CGI script using &lt;code&gt;&lt;a href=&quot;mod_alias#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt;. The URL and file path of the requested document is sent using the standard CGI &lt;code&gt;PATH_INFO&lt;/code&gt; and &lt;code&gt;PATH_TRANSLATED&lt;/code&gt; environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa69cfa2d9dbb0c1eca859dd7dc7ca2bf8f47c6b" translate="yes" xml:space="preserve">
          <source>This directive adds some default behavior to ANY regular expression used afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6d423cb0c6f4c7a1d0d144686b00577d81fb8e5" translate="yes" xml:space="preserve">
          <source>This directive allows a user to specifiy a timeout on proxy requests. This is useful when you have a slow/buggy appserver which hangs, and you would rather just return a timeout and fail gracefully instead of waiting however long it takes the server to return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254cfde73df9b58ed5d95ace4779c3de31ed698e" translate="yes" xml:space="preserve">
          <source>This directive allows access to the server to be restricted based on hostname, IP address, or environment variables. The arguments for the &lt;code&gt;Deny&lt;/code&gt; directive are identical to the arguments for the &lt;code&gt;&lt;a href=&quot;#allow&quot;&gt;Allow&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62a9fa8860256d9a3b8f94e5e13cad5d1359aa4" translate="yes" xml:space="preserve">
          <source>This directive allows for growth potential in the number of Balancers available for a virtualhost in addition to the number pre-configured. It only takes effect if there is at least one pre-configured Balancer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef11e613c2a219f6bd8c863e4fa2ad59f40ccd14" translate="yes" xml:space="preserve">
          <source>This directive allows inclusion of other configuration files from within the server configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8315a5605d67cccfd3fa5dd45e8f20854555c589" translate="yes" xml:space="preserve">
          <source>This directive allows inclusion of other configuration files from within the server configuration files. It works identically to the &lt;code&gt;&lt;a href=&quot;#include&quot;&gt;Include&lt;/a&gt;&lt;/code&gt; directive, but it will be silently ignored (instead of causing an error) if wildcards are used and they do not match any file or directory or if a file path does not exist on the file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0623a2e04bf7eed73004fd632d72f2861281002" translate="yes" xml:space="preserve">
          <source>This directive allows remote servers to be mapped into the space of the local server. The local server does not act as a proxy in the conventional sense but appears to be a mirror of the remote server. The local server is often called a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049d701419b561121d07570509891b8657c0d7dc" translate="yes" xml:space="preserve">
          <source>This directive allows the environment variables above, or any others of interest, to be overridden. This directive is evaluated after the initial values for these variables are set, so they can be used as input into both the condition expressions and value expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47d593f04d2487a0a6af731a7d8d6c03807102b" translate="yes" xml:space="preserve">
          <source>This directive allows the type of backend FastCGI application to be specified. Some FastCGI servers, such as PHP-FPM, use historical quirks of environment variables to identify the type of proxy server being used. Set this directive to &quot;GENERIC&quot; if your non PHP-FPM application has trouble interpreting environment variables such as SCRIPT_FILENAME or PATH_TRANSLATED as set by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39ffe29b8a1196af4386876bf4d007f218d55d8" translate="yes" xml:space="preserve">
          <source>This directive allows to enable compression on the SSL level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66739d33a61b691045cb28a1da4fe37d8338bab5" translate="yes" xml:space="preserve">
          <source>This directive allows to enable or disable the use of TLS session tickets (RFC 5077).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f69e3397540d29724c46086f98b71b38d9ef30" translate="yes" xml:space="preserve">
          <source>This directive allows to set a specific local address to bind to when connecting to a backend server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8895b96c0b41138adaae5ebfcbd59cd9f7ec9de7" translate="yes" xml:space="preserve">
          <source>This directive allows you to change the name of the cookie this module uses for its tracking purposes. By default the cookie is named &quot;&lt;code&gt;Apache&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8d81157146142ccd82fde6fc763495c284fedbb" translate="yes" xml:space="preserve">
          <source>This directive allows you to define a Managed Domain (MD) with specific settings, different from the global MD* ones. For example, you can have such an MD use another CA then Let's Encrypt, have its unique renewal duration etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2e60fceb88f0d9ad62e464ba9c19404249a807" translate="yes" xml:space="preserve">
          <source>This directive allows you to override the prefix used for environment variables set during LDAP authorization. If &lt;em&gt;AUTHENTICATE_&lt;/em&gt; is specified, consumers of these environment variables see the same information whether LDAP has performed authentication, authorization, or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca58c71ad654da0cf5df25ea531913315cfb760" translate="yes" xml:space="preserve">
          <source>This directive applies to requests for directories that may or may not end in a trailing slash, so expressions that are anchored to the end of line ($) must be written with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96743c486d20dce3d8518e3c1555f6f6335b799" translate="yes" xml:space="preserve">
          <source>This directive can be used instead of the compile-time setting &lt;code&gt;SECURITY_HOLE_PASS_AUTHORIZATION&lt;/code&gt; which has been available in previous versions of Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ad445e0dcdf3a2c50eeb7f651a2d9574d3c344" translate="yes" xml:space="preserve">
          <source>This directive can be used to control the SSL protocol flavors mod_ssl should use when establishing its server environment for proxy . It will only connect to servers using one of the provided protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f70176c4e946faeb772ca33d04b1a8dd910cf4" translate="yes" xml:space="preserve">
          <source>This directive can be used to control various run-time options on a per-directory basis. Normally, if multiple &lt;code&gt;SSLOptions&lt;/code&gt; could apply to a directory, then the most specific one is taken completely; the options are not merged. However if &lt;em&gt;all&lt;/em&gt; the options on the &lt;code&gt;SSLOptions&lt;/code&gt; directive are preceded by a plus (&lt;code&gt;+&lt;/code&gt;) or minus (&lt;code&gt;-&lt;/code&gt;) symbol, the options are merged. Any options preceded by a &lt;code&gt;+&lt;/code&gt; are added to the options currently in force, and any options preceded by a &lt;code&gt;-&lt;/code&gt; are removed from the options currently in force.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a48696af3d1bbff7e23fc19d820a1f60f03fc25" translate="yes" xml:space="preserve">
          <source>This directive can be used to control which versions of the SSL/TLS protocol will be accepted in new connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4830f201ce416d4acd5b19fc70c007b380ad23" translate="yes" xml:space="preserve">
          <source>This directive can be used to fine-tune the per-process connection limit. A &lt;strong&gt;process&lt;/strong&gt; will only accept new connections if the current number of connections (not counting connections in the &quot;closing&quot; state) is lower than:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e68ec10252d2f75c676bbb0eb270ea8869cf0e" translate="yes" xml:space="preserve">
          <source>This directive can be used to toggle the use of &lt;code&gt;&lt;a href=&quot;#ifdefine&quot;&gt;&amp;lt;IfDefine&amp;gt;&lt;/a&gt;&lt;/code&gt; sections without needing to alter &lt;code&gt;-D&lt;/code&gt; arguments in any startup scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd33c0a4c7d7466f0b615012a7868a347e522fb" translate="yes" xml:space="preserve">
          <source>This directive can only be used if this module authenticates the user, and has no effect when this module is used exclusively for authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fc525398f5e623090ab45d11c042ff12c9829d" translate="yes" xml:space="preserve">
          <source>This directive can open huge security holes in apache subprocesses, up to and including running them with root-level powers. Do not use it unless you fully understand what you are doing!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5b8353ff67a098cc7b9cd3c22c3d305b731fd5" translate="yes" xml:space="preserve">
          <source>This directive can open huge security holes in apache, up to and including running requests with root-level powers. Do not use it unless you fully understand what you are doing!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddacc80562ea4d092157f950fd937205345538b" translate="yes" xml:space="preserve">
          <source>This directive can replace, merge or remove HTTP response headers. The header is modified just after the content handler and output filters are run, allowing outgoing headers to be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca251367e9c8916db85770d55d093c6ffaf5b26" translate="yes" xml:space="preserve">
          <source>This directive can replace, merge, change or remove HTTP request headers. The header is modified just before the content handler is run, allowing incoming headers to be modified. The action it performs is determined by the first argument. This can be one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9fddfa9459f14d882dd4dc8cf79c9a9a5d2054" translate="yes" xml:space="preserve">
          <source>This directive can set various timeouts for receiving the request headers and the request body from the client. If the client fails to send headers or body within the configured time, a &lt;code&gt;408 REQUEST TIME OUT&lt;/code&gt; error is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22f3042d1368061247b763cb185827f3be73933" translate="yes" xml:space="preserve">
          <source>This directive cannot be used to run apache as root! Nevertheless, it opens potential security issues similar to those discussed in the &lt;a href=&quot;../suexec&quot;&gt;suexec&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b116158bf07109dd80ddf11accce97fe04c5a1f" translate="yes" xml:space="preserve">
          <source>This directive causes a user defined message to be logged to the error log. The message can use variables and functions from the &lt;a href=&quot;../expr&quot;&gt;ap_expr syntax&lt;/a&gt;. References to HTTP headers will not cause header names to be added to the Vary header. The messages are logged at loglevel info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98de195903e829209c550213f465fd16c5b6310" translate="yes" xml:space="preserve">
          <source>This directive changes the format in which date strings are displayed when echoing &lt;code&gt;DATE&lt;/code&gt; environment variables. The &lt;var&gt;formatstring&lt;/var&gt; is as in &lt;code&gt;strftime(3)&lt;/code&gt; from the C standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fdd3cee5ac8d6afd1447df0e2ef37a41ea5a379" translate="yes" xml:space="preserve">
          <source>This directive changes the rules applied to the HTTP Request Line (&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.1.1&quot;&gt;RFC 7230 &amp;sect;3.1.1&lt;/a&gt;) and the HTTP Request Header Fields (&lt;a href=&quot;https://tools.ietf.org/html/rfc7230#section-3.2&quot;&gt;RFC 7230 &amp;sect;3.2&lt;/a&gt;), which are now applied by default or using the &lt;code&gt;Strict&lt;/code&gt; option. Due to legacy modules, applications or custom user-agents which must be deprecated the &lt;code&gt;Unsafe&lt;/code&gt; option has been added to revert to the legacy behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f896d21b372a33df39e2ace8ff32e290f7f74e7c" translate="yes" xml:space="preserve">
          <source>This directive changes the string that &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; displays when a variable is not set and &quot;echoed&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bea5b5b537387783649eeb4ca9f7d4fdc906ef0" translate="yes" xml:space="preserve">
          <source>This directive changes the string that &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; looks for to mark an include element to process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58c7111a9dc76733ef9e966c4593710e69e9cd3" translate="yes" xml:space="preserve">
          <source>This directive changes the string that &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; looks for to mark the end of an include element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcd907ef6948eda077094238c14b21e6233e0d2" translate="yes" xml:space="preserve">
          <source>This directive configures host name checking for server certificates when mod_ssl is acting as an SSL client. The check will succeed if the host name from the request URI matches one of the CN attribute(s) of the certificate's subject, or matches the subjectAltName extension. If the check fails, the SSL request is aborted and a 502 status code (Bad Gateway) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8217dd1874827420eea427ece7d30625bdf540" translate="yes" xml:space="preserve">
          <source>This directive configures the LDAP_OPT_NETWORK_TIMEOUT (or LDAP_OPT_CONNECT_TIMEOUT) option in the underlying LDAP client library, when available. This value typically controls how long the LDAP client library will wait for the TCP connection to the LDAP server to complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9821f03314cfdac95405960728ea23af5c35540a" translate="yes" xml:space="preserve">
          <source>This directive configures the timeout for bind and search operations, as well as the LDAP_OPT_TIMEOUT option in the underlying LDAP client library, when available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c6ab3b741d37edfb8d248abfeebf308e4aa7de" translate="yes" xml:space="preserve">
          <source>This directive configures whether this module tracks the delay between the request being read and the first byte of the response headers being written. The resulting value may be logged with the &lt;code&gt;%^FB&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b228b21256a7d279ed630b4b8d6614d74d66316" translate="yes" xml:space="preserve">
          <source>This directive controls how some CGI variables are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e32d2e95b8fd5f64ed8fa55ebefeb15f745b6d" translate="yes" xml:space="preserve">
          <source>This directive controls the format of the cookie header field. The three formats allowed are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b753557535489e758790a8c1b3385dbfd146a1ba" translate="yes" xml:space="preserve">
          <source>This directive controls the reflection of request headers to the response. The first argument is the name of the request header to copy. If the optional second argument is specified, it will be used as the name of the response header, otherwise the original request header name will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49380b2536787a20607b0f59ea6e0baed83ab9f" translate="yes" xml:space="preserve">
          <source>This directive controls the setting of the domain to which the tracking cookie applies. If not present, no domain is included in the cookie header field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230eaf2c471716c0f41732a3118eb7ae535a0bfa" translate="yes" xml:space="preserve">
          <source>This directive controls the use of the &lt;code&gt;Via:&lt;/code&gt; HTTP header by the proxy. Its intended use is to control the flow of proxy requests along a chain of proxy servers. See &lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt; (HTTP/1.1), section 14.45 for an explanation of &lt;code&gt;Via:&lt;/code&gt; header lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505e667a6e03d07a556a3759ac93893f8ff87865" translate="yes" xml:space="preserve">
          <source>This directive controls whether &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; may use the sendfile support from the kernel to transmit file contents to the client. By default, when the handling of a request requires no access to the data within a file -- for example, when delivering a static file -- Apache httpd uses sendfile to deliver the file contents without ever reading the file if the OS supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd31f7b6ecb66463f82d6f044ffd6155dbdc11ec" translate="yes" xml:space="preserve">
          <source>This directive controls whether &lt;code&gt;Server&lt;/code&gt; response header field which is sent back to clients includes a description of the generic OS-type of the server as well as information about compiled-in modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3901793b393a7a8aa5d280c2be639cc251b2c00" translate="yes" xml:space="preserve">
          <source>This directive controls whether HTTP trailers are copied into the internal representation of HTTP headers. This merging occurs when the request body has been completely consumed, long after most header processing would have a chance to examine or modify request headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad9332674535a5aa949334a4b12841ef37bd6ec" translate="yes" xml:space="preserve">
          <source>This directive controls whether requests that contain trailing pathname information that follows an actual filename (or non-existent file in an existing directory) will be accepted or rejected. The trailing pathname information can be made available to scripts in the &lt;code&gt;PATH_INFO&lt;/code&gt; environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75a29d15377f5f28d33f2af2b23fa60bbfedf9ff" translate="yes" xml:space="preserve">
          <source>This directive controls whether the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; may use memory-mapping if it needs to read the contents of a file during delivery. By default, when the handling of a request requires access to the data within a file -- for example, when delivering a server-parsed file using &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; -- Apache httpd memory-maps the file if the OS supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a2a62c5f4735f3cf9e96deb7ebc4ae2eaf6edc" translate="yes" xml:space="preserve">
          <source>This directive controls whether the server will ensure that the REDIRECT_URL environment variable is fully qualified. By default, the variable contains the verbatim URL requested by the client, such as &quot;/index.html&quot;. With &lt;code&gt;&lt;a href=&quot;#qualifyredirecturl%20on&quot;&gt;QualifyRedirectURL ON&lt;/a&gt;&lt;/code&gt;, the same request would result in a value such as &quot;http://www.example.com/index.html&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75328dd051dd8fda5ae2695ab43bfbe53b77a71f" translate="yes" xml:space="preserve">
          <source>This directive currently has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9114ec559e0a53a7dc90a66b879332cf5f801d" translate="yes" xml:space="preserve">
          <source>This directive currently only works with the &lt;code&gt;&lt;a href=&quot;prefork&quot;&gt;prefork&lt;/a&gt;&lt;/code&gt; MPM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480ac741c945d3d75332b180d43b759cc2cf10fb" translate="yes" xml:space="preserve">
          <source>This directive declares an output filter together with a header or environment variable that will determine runtime configuration. The first argument is a &lt;var&gt;filter-name&lt;/var&gt; for use in &lt;code&gt;&lt;a href=&quot;#filterprovider&quot;&gt;FilterProvider&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#filterchain&quot;&gt;FilterChain&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#filterprotocol&quot;&gt;FilterProtocol&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe326ce84965a3c93a17f8622674d6852c056211" translate="yes" xml:space="preserve">
          <source>This directive defines the priority handling of pushed responses based on the content-type of the response. This is usually defined per server config, but may also appear in a virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65596a0174b7b69b14f5ca46d9754248c7e204c6" translate="yes" xml:space="preserve">
          <source>This directive defines the value of the &lt;code&gt;Expires&lt;/code&gt; header and the &lt;code&gt;max-age&lt;/code&gt; directive of the &lt;code&gt;Cache-Control&lt;/code&gt; header generated for documents of the specified type (&lt;em&gt;e.g.&lt;/em&gt;, &lt;code&gt;text/html&lt;/code&gt;). The second argument sets the number of seconds that will be added to a base time to construct the expiration date. The &lt;code&gt;Cache-Control: max-age&lt;/code&gt; is calculated by subtracting the request time from the expiration date and expressing the result in seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff83c6e730734ae9826f3481c5e5378c7f13caa" translate="yes" xml:space="preserve">
          <source>This directive determines whether or not proxy loadbalancer status data is displayed via the &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; server-status page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740ac8b261f54566d8dd8c773096748a58832d9c" translate="yes" xml:space="preserve">
          <source>This directive determines whether or not proxy related information should be passed to the backend server through X-Forwarded-For, X-Forwarded-Host and X-Forwarded-Server HTTP headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff04c3895eb5ef74c6dca58fc2261321f1c524e" translate="yes" xml:space="preserve">
          <source>This directive differs slightly between a &lt;code&gt;&amp;lt;Directory&amp;gt;&lt;/code&gt; context (including equivalents such as Location/Files/If) and a top-level or &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe956841aeb3b56070d4a8dba76b77741d313669" translate="yes" xml:space="preserve">
          <source>This directive does not affect the processing of informational (1xx), normal success (2xx), or redirect (3xx) responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798539402464ff2ecafa9841b54399225232335d" translate="yes" xml:space="preserve">
          <source>This directive does not currently work in configuration sections that have regular expression arguments, such as &lt;code&gt;&lt;a href=&quot;core#directorymatch&quot;&gt;&amp;lt;DirectoryMatch&amp;gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf51425d758a4c214e050ef01684702fb9ccd4a" translate="yes" xml:space="preserve">
          <source>This directive enables &lt;a href=&quot;http://www.ietf.org/rfc/rfc1413.txt&quot;&gt;RFC 1413&lt;/a&gt;-compliant logging of the remote user name for each connection, where the client machine runs identd or something similar. This information is logged in the access log using the &lt;code&gt;%...l&lt;/code&gt;&lt;a href=&quot;mod_log_config#formats&quot;&gt;format string&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26236c3fb7e2d1c4f9db80c0df91059cde4fa4c" translate="yes" xml:space="preserve">
          <source>This directive enables DNS lookups so that host names can be logged (and passed to CGIs/SSIs in &lt;code&gt;REMOTE_HOST&lt;/code&gt;). The value &lt;code&gt;Double&lt;/code&gt; refers to doing double-reverse DNS lookup. That is, after a reverse lookup is performed, a forward lookup is then performed on that result. At least one of the IP addresses in the forward lookup must match the original address. (In &quot;tcpwrappers&quot; terminology this is called &lt;code&gt;PARANOID&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973a97009fbc1ed095e860743e63b4672238fa8c" translate="yes" xml:space="preserve">
          <source>This directive enables TLS-SRP and sets the path to the OpenSSL SRP (Secure Remote Password) verifier file containing TLS-SRP usernames, verifiers, salts, and group parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7effdffe1b39b0031039f3ecf5e641ce8b2a635" translate="yes" xml:space="preserve">
          <source>This directive enables operating system specific optimizations for a listening socket by the &lt;code&gt;Protocol&lt;/code&gt; type. The basic premise is for the kernel to not send a socket to the server process until either data is received or an entire HTTP Request is buffered. Only &lt;a href=&quot;http://www.freebsd.org/cgi/man.cgi?query=accept_filter&amp;amp;sektion=9&quot;&gt; FreeBSD's Accept Filters&lt;/a&gt;, Linux's more primitive &lt;code&gt;TCP_DEFER_ACCEPT&lt;/code&gt;, and Windows' optimized AcceptEx() are currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2788b5047792f206e2053fca8a0cd3e0025ecf" translate="yes" xml:space="preserve">
          <source>This directive enables or disables the generation of the &lt;code&gt;Expires&lt;/code&gt; and &lt;code&gt;Cache-Control&lt;/code&gt; headers for the document realm in question. (That is, if found in an &lt;code&gt;.htaccess&lt;/code&gt; file, for instance, it applies only to documents generated from that directory.) If set to &lt;code&gt;Off&lt;/code&gt;, the headers will not be generated for any document in the realm (unless overridden at a lower level, such as an &lt;code&gt;.htaccess&lt;/code&gt; file overriding a server config file). If set to &lt;code&gt;On&lt;/code&gt;, the headers will be added to served documents according to the criteria defined by the &lt;code&gt;&lt;a href=&quot;#expiresbytype&quot;&gt;ExpiresByType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#expiresdefault&quot;&gt;ExpiresDefault&lt;/a&gt;&lt;/code&gt; directives (&lt;em&gt;q.v.&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96786f21e38d1dc90c579572109f621da771a8bf" translate="yes" xml:space="preserve">
          <source>This directive enables or disables the spelling module. When enabled, keep in mind that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252b73df81d6223ea0d78bbfbd26755a7de82191" translate="yes" xml:space="preserve">
          <source>This directive enables the generation of &lt;code&gt;Content-MD5&lt;/code&gt; headers as defined in RFC1864 respectively RFC2616.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1421d2ebbd82fa164ab76791166f22e33743f3b4" translate="yes" xml:space="preserve">
          <source>This directive enables use of a cryptographic hardware accelerator board to offload some of the SSL processing overhead. This directive can only be used if the SSL toolkit is built with &quot;engine&quot; support; OpenSSL 0.9.7 and later releases have &quot;engine&quot; support by default, the separate &quot;-engine&quot; releases of OpenSSL 0.9.6 must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34056f152f515922fe98be1e75936f3acd2be7f2" translate="yes" xml:space="preserve">
          <source>This directive exposes OpenSSL's &lt;em&gt;SSL_CONF&lt;/em&gt; API to mod_ssl, allowing a flexible configuration of OpenSSL parameters without the need of implementing additional &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; directives when new features are added to OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7c35628d44c819680f8f534112b388241126da" translate="yes" xml:space="preserve">
          <source>This directive forbids access unless HTTP over SSL (i.e. HTTPS) is enabled for the current connection. This is very handy inside the SSL-enabled virtual host or directories for defending against configuration errors that expose stuff that should be protected. When this directive is present all requests are denied which are not using SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0436ca8b4a79a34fa47f6c5ced317dd594eb8278" translate="yes" xml:space="preserve">
          <source>This directive generates debug information from &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt;. It is designed to help test and debug providers (filter modules), although it may also help with &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a608278f658d5aeae37a36caa6352304a46d0bed" translate="yes" xml:space="preserve">
          <source>This directive gives the server administrator greater control over abnormal client request behavior, which may be useful for avoiding some forms of denial-of-service attacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3606632439f138331052d26fa4eb9db773c0009d" translate="yes" xml:space="preserve">
          <source>This directive gives the server administrator greater control over abnormal client request behavior, which may be useful for avoiding some forms of denial-of-service attacks. The value should be increased if normal clients see an error response from the server that indicates too many fields were sent in the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d06e12e80406edeee488bf1ad537f319ea1d8d6" translate="yes" xml:space="preserve">
          <source>This directive has a similar purpose to the &lt;var&gt;path&lt;/var&gt; attribute in HTTP cookies, but should not be confused with this attribute. This directive does not set the &lt;var&gt;path&lt;/var&gt; attribute, which must be configured separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c171471692784ee8050c8be9766287faf90eee2" translate="yes" xml:space="preserve">
          <source>This directive has been disabled. For backwards compatibility of configuration files, it may be specified with the value &lt;code&gt;none&lt;/code&gt;, meaning no default media type. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2382b254d3cbd949644b072febb4bba88dac3e" translate="yes" xml:space="preserve">
          <source>This directive has exactly the same arguments and effect as the &lt;code&gt;&lt;a href=&quot;#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive, with the exception that it does not allow the log format to be specified explicitly or for conditional logging of requests. Instead, the log format is determined by the most recently specified &lt;code&gt;&lt;a href=&quot;#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; directive which does not define a nickname. Common Log Format is used if no other format has been specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a4fd6eeb61627e2464a25b1daf564a5dc6f456" translate="yes" xml:space="preserve">
          <source>This directive has no affect on authorization, even for modules that provide both authentication and authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698a9dae35b69d753397b02033a009b0d9bb2415" translate="yes" xml:space="preserve">
          <source>This directive has no effect other than to emit warnings if the value is not &lt;code&gt;none&lt;/code&gt;. In prior versions, DefaultType would specify a default media type to assign to response content for which no other media type configuration could be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255a8ca460ab6eecf098bcaa8a32f81f49092850" translate="yes" xml:space="preserve">
          <source>This directive has the same effect as the &lt;code&gt;&amp;lt;!--#config errmsg=message --&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e90d875d01ea3d277b8d6fa5b5a95415395e7888" translate="yes" xml:space="preserve">
          <source>This directive has the same effect as the &lt;code&gt;&amp;lt;!--#config timefmt=formatstring --&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55049aec6361ab14f95fe1083d7f13fe0296c140" translate="yes" xml:space="preserve">
          <source>This directive influences how file content is handled in responses. When &lt;code&gt;off&lt;/code&gt;, which is the default, file handles are passed from the requestion processing down to the main connection, using the usual Apache setaside handling for managing the lifetime of the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8e307491a14d4b8d527de717e335193653e3ea" translate="yes" xml:space="preserve">
          <source>This directive influences the calculation of the &lt;code&gt;&lt;a href=&quot;#minsparethreads&quot;&gt;MinSpareThreads&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#maxsparethreads&quot;&gt;MaxSpareThreads&lt;/a&gt;&lt;/code&gt; lower bound values. The number of children processes needs to be a multiple of the number of buckets to optimally accept connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4510545d5cdcbbc802674d4dee165ec00ae4f588" translate="yes" xml:space="preserve">
          <source>This directive is &lt;em&gt;required&lt;/em&gt; when you use a relative path in a substitution in per-directory (htaccess) context unless any of the following conditions are true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c058ce7e59d28babe6a97943575cbe1e1ab62a3f" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, but makes use of &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expressions&lt;/a&gt;, instead of simple prefix matching. The supplied regular expression is matched against the URL-path, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a filename. For example, to activate the &lt;code&gt;/icons&lt;/code&gt; directory, one might use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d63af299c164edf42e799d428cb55a99bebd5f" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; but makes use of regular expressions instead of simple prefix matching. The supplied regular expression is matched against the &lt;var&gt;url&lt;/var&gt;, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a new &lt;var&gt;url&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a045c4c7e76910c4cacaa4ec867dd6b98732bc4b" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#redirect&quot;&gt;Redirect&lt;/a&gt;&lt;/code&gt;, but makes use of &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expressions&lt;/a&gt;, instead of simple prefix matching. The supplied regular expression is matched against the URL-path, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a filename. For example, to redirect all GIF files to like-named JPEG files on another server, one might use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e98dc3af49f8537652289412267fd6daeaecf17" translate="yes" xml:space="preserve">
          <source>This directive is equivalent to &lt;code&gt;&lt;a href=&quot;#scriptalias&quot;&gt;ScriptAlias&lt;/a&gt;&lt;/code&gt;, but makes use of &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#regex&quot;&gt;regular expressions&lt;/a&gt;, instead of simple prefix matching. The supplied regular expression is matched against the URL-path, and if it matches, the server will substitute any parenthesized matches into the given string and use it as a filename. For example, to activate the standard &lt;code&gt;/cgi-bin&lt;/code&gt;, one might use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4fa8888963db181a15a1d7581ead376eff57d26" translate="yes" xml:space="preserve">
          <source>This directive is not normally necessary: it is implied if authentication cacheing is enabled anywhere in &lt;var&gt;httpd.conf&lt;/var&gt;. However, if it is not enabled anywhere in &lt;var&gt;httpd.conf&lt;/var&gt; it will by default not be initialised, and is therefore not available in a &lt;var&gt;.htaccess&lt;/var&gt; context. This directive ensures it is initialised so it can be used in &lt;var&gt;.htaccess&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f430c5ae994e40125ec1d76d1d6e7a4671f737c3" translate="yes" xml:space="preserve">
          <source>This directive is not supported in &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a99f79215d58194ede62a4e3683f9667e20d72" translate="yes" xml:space="preserve">
          <source>This directive is not supported within &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#if&quot;&gt;&amp;lt;If&amp;gt;&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt; containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2626f2241b0e2f5ad41ffa73d7b01341689c8c2f" translate="yes" xml:space="preserve">
          <source>This directive is not valid in &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;core#files&quot;&gt;&amp;lt;Files&amp;gt;&lt;/a&gt;&lt;/code&gt;, or htaccess context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27292029920212bbe74f3ac6640ea4a3cdc2e69c" translate="yes" xml:space="preserve">
          <source>This directive is only useful for Apache httpd proxy servers within intranets. The &lt;code&gt;NoProxy&lt;/code&gt; directive specifies a list of subnets, IP addresses, hosts and/or domains, separated by spaces. A request to a host which matches one or more of these is always served directly, without forwarding to the configured &lt;code&gt;&lt;a href=&quot;#proxyremote&quot;&gt;ProxyRemote&lt;/a&gt;&lt;/code&gt; proxy server(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc6bfe3691aac7b5339134f86f4bdfc6124aa34" translate="yes" xml:space="preserve">
          <source>This directive is only useful for Apache httpd proxy servers within intranets. The &lt;code&gt;ProxyDomain&lt;/code&gt; directive specifies the default domain which the apache proxy server will belong to. If a request to a host without a domain name is encountered, a redirection response to the same host with the configured &lt;var&gt;Domain&lt;/var&gt; appended will be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59739c42722ef0585c2e2258fd114b0ffa4c4024" translate="yes" xml:space="preserve">
          <source>This directive is recommended when you have a virtual filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9878218f74774728b42ed0670e1a4c33d4b066" translate="yes" xml:space="preserve">
          <source>This directive is used as an alternate method of setting any of the parameters available to Proxy balancers and workers normally done via the &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directive. If used within a &lt;code&gt;&amp;lt;Proxy balancer url|worker url&amp;gt;&lt;/code&gt; container directive, the &lt;var&gt;url&lt;/var&gt; argument is not required. As a side effect the respective balancer or worker gets created. This can be useful when doing reverse proxying via a &lt;code&gt;&lt;a href=&quot;mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; instead of a &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45465123d74731666d3884b10540b0f08be8efa5" translate="yes" xml:space="preserve">
          <source>This directive is used to control how Apache httpd finds the interpreter used to run CGI scripts. For example, setting &lt;code&gt;CGIMapExtension sys:\foo.nlm .foo&lt;/code&gt; will cause all CGI script files with a &lt;code&gt;.foo&lt;/code&gt; extension to be passed to the FOO interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887c4150084ed3f1bf6a3ea11da666679383cc13" translate="yes" xml:space="preserve">
          <source>This directive is used to control how Apache httpd finds the interpreter used to run CGI scripts. The default setting is &lt;code&gt;Script&lt;/code&gt;. This causes Apache httpd to use the interpreter pointed to by the shebang line (first line, starting with &lt;code&gt;#!&lt;/code&gt;) in the script. On Win32 systems this line usually looks like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9a77ba2f3ad1979cdef27c3bcfd97341c20210" translate="yes" xml:space="preserve">
          <source>This directive is used to define a FastCGI application as a provider for a particular phase of authentication or authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fbd07620651b1e59ca71fa5f5da61f6df3c850" translate="yes" xml:space="preserve">
          <source>This directive is used to enable a FastCGI authorizer to handle a specific processing phase of authentication or authorization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca144a2c2838fd4aa886e7057a5cad48add4968" translate="yes" xml:space="preserve">
          <source>This directive is useful for reverse-proxy setups where you want to have a common look and feel on the error pages seen by the end user. This also allows for included files (via &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt;'s SSI) to get the error code and act accordingly. (Default behavior would display the error page of the proxied server. Turning this on shows the SSI Error message.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="100357679d125cd1ee8fa55dabfff7e986e9c420" translate="yes" xml:space="preserve">
          <source>This directive lets Apache httpd adjust the URL in the &lt;code&gt;Location&lt;/code&gt;, &lt;code&gt;Content-Location&lt;/code&gt; and &lt;code&gt;URI&lt;/code&gt; headers on HTTP redirect responses. This is essential when Apache httpd is used as a reverse proxy (or gateway) to avoid bypassing the reverse proxy because of HTTP redirects on the backend servers which stay behind the reverse proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6071ebdad5ed3aebd916f6d7090456ff3cf5cb25" translate="yes" xml:space="preserve">
          <source>This directive limits the length of time to wait for more output from the CGI program. If the time is exceeded, the request and CGI are terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d24cff335e82d5c5b474bc4a87fa90b520e4cf" translate="yes" xml:space="preserve">
          <source>This directive makes the client know that the Redirect is only temporary (status 302). Exactly equivalent to &lt;code&gt;Redirect temp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f3332d6f037257a4b335a163e1b013e068e4d6" translate="yes" xml:space="preserve">
          <source>This directive makes the client know that the Redirect is permanent (status 301). Exactly equivalent to &lt;code&gt;Redirect permanent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b64f70b7984700055791adeb7d622bf9890fd56" translate="yes" xml:space="preserve">
          <source>This directive matches a uri pattern to invoke a specific handler function in a specific file. It uses PCRE regular expressions to match the uri, and supports interpolating match groups into both the file path and the function name. Be careful writing your regular expressions to avoid security issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9612480c091e4b48b3e1c034c3696696877e41c9" translate="yes" xml:space="preserve">
          <source>This directive may be used to register additional HTTP methods. This is necessary if non-standard methods need to be used with directives that accept method names as parameters, or to allow particular non-standard methods to be used via proxy or CGI script when the server has been configured to only pass recognized methods to modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6135459444740161767e926b160bea04bf38beba" translate="yes" xml:space="preserve">
          <source>This directive only applies to requests which come from HTTP/1.0 browsers. HTTP/1.1 provides much better control over the caching of negotiated documents, and this directive has no effect in responses to HTTP/1.1 requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b257136bd4ffb553bab025481807bfac96483f8" translate="yes" xml:space="preserve">
          <source>This directive only configures mutexes which have been registered with the core server using the &lt;code&gt;ap_mutex_register()&lt;/code&gt; API. All modules bundled with httpd support the &lt;code&gt;Mutex&lt;/code&gt; directive, but third-party modules may not. Consult the documentation of the third-party module, which must indicate the mutex name(s) which can be configured if this directive is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b30e9f07def5c2b0636fa1c38d6d8bbb1272636" translate="yes" xml:space="preserve">
          <source>This directive only has effect on the comparisons performed during nested group processing when &lt;code&gt;&lt;a href=&quot;#authldapcompareasuser&quot;&gt; AuthLDAPCompareAsUser&lt;/a&gt;&lt;/code&gt; is also enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cfabe4448ace5628c1a78012fad27a7d290a8e" translate="yes" xml:space="preserve">
          <source>This directive only has effect on the comparisons performed during nested group processing when &lt;code&gt;&lt;a href=&quot;#authldapsearchasuser&quot;&gt; AuthLDAPSearchAsUser&lt;/a&gt;&lt;/code&gt; is also enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83aae553e0c1720f1a831910bd99820d2afd379" translate="yes" xml:space="preserve">
          <source>This directive only takes effect when the data is being saved to the cache, as opposed to data being served from the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e595f1fe58f2ff226a533d8415b5cfe9fba9f806" translate="yes" xml:space="preserve">
          <source>This directive only takes effect when the data is being saved to the cache, as opposed to data being served from the cache. It is recommended that this option be used alongside the &lt;code&gt;&lt;a href=&quot;#cachereadsize&quot;&gt;CacheReadSize&lt;/a&gt;&lt;/code&gt; directive to ensure that the server does not buffer excessively should data arrive faster than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de441b68d69728adc724264ff80ebe29fa3b8a8b" translate="yes" xml:space="preserve">
          <source>This directive only takes effect when the data is being saved to the cache, as opposed to data being served from the cache. It is recommended that this option be used alongside the &lt;code&gt;&lt;a href=&quot;#cachesocachereadsize&quot;&gt;CacheSocacheReadSize&lt;/a&gt;&lt;/code&gt; directive to ensure that the server does not buffer excessively should data arrive faster than expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cbeaf70d774579a1e512272ee59bb319601f37" translate="yes" xml:space="preserve">
          <source>This directive overrides the URI of an OCSP responder as obtained from the authorityInfoAccess (AIA) extension of the certificate. One potential use is when a proxy is used for retrieving OCSP queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1673f82365815c5a2e256e8d852f74c294af58" translate="yes" xml:space="preserve">
          <source>This directive overrides the behavior of &lt;code&gt;TRACE&lt;/code&gt; for both the core server and &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. The default &lt;code&gt;TraceEnable on&lt;/code&gt; permits &lt;code&gt;TRACE&lt;/code&gt; requests per RFC 2616, which disallows any request body to accompany the request. &lt;code&gt;TraceEnable off&lt;/code&gt; causes the core server and &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; to return a &lt;code&gt;405&lt;/code&gt; (Method not allowed) error to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdae33abaaa793e40a06a1a3172fffe8f3d722c5" translate="yes" xml:space="preserve">
          <source>This directive points to a file with certificate data in PEM format. At a minimum, the file must include an end-entity (leaf) certificate. The directive can be used multiple times (referencing different filenames) to support multiple algorithms for server authentication - typically RSA, DSA, and ECC. The number of supported algorithms depends on the OpenSSL version being used for mod_ssl: with version 1.0.0 or later, &lt;code&gt;openssl list-public-key-algorithms&lt;/code&gt; will output a list of supported algorithms, see also the note below about limitations of OpenSSL versions prior to 1.0.2 and the ways to work around them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d635c44c75d405f44f66b71ec3b0cb98b6d7cf31" translate="yes" xml:space="preserve">
          <source>This directive points to the PEM-encoded private key file for the server. If the contained private key is encrypted, the pass phrase dialog is forced at startup time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18b61ff94e8864d206a172649c5c2daf74b945c" translate="yes" xml:space="preserve">
          <source>This directive primarily configures the content types generated for static files served out of the filesystem. For resources other than static files, where the generator of the response typically specifies a Content-Type, this directive has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bbfb63bf8e1b9b5941c4058f2d0e157e6c7d889" translate="yes" xml:space="preserve">
          <source>This directive primarily overrides the content types generated for static files served out of the filesystem. For resources other than static files, where the generator of the response typically specifies a Content-Type, this directive has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="511fcba594e05dce72d3a1413a2a73fa479f2b49" translate="yes" xml:space="preserve">
          <source>This directive provides a hook for the type_checker phase of the request processing. This phase is where requests are assigned a content type and a handler, and thus can be used to modify the type and handler based on input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6456e8dcaccfbdabbdab741be9a8b405992173" translate="yes" xml:space="preserve">
          <source>This directive pushes resources much earlier than adding &lt;code&gt;Link&lt;/code&gt; headers via &lt;code&gt;&lt;a href=&quot;mod_headers&quot;&gt;mod_headers&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; announces these resources in a &lt;code&gt;103 Early Hints&lt;/code&gt; interim response to the client. That means that clients not supporting PUSH will still get early preload hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea1440a54d5254cd91a6b8bb0a4eeb5b2a3e8cb" translate="yes" xml:space="preserve">
          <source>This directive registers a &lt;em&gt;provider&lt;/em&gt; for the smart filter. The provider will be called if and only if the &lt;var&gt;expression&lt;/var&gt; declared evaluates to true when the harness is first called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27d1501c4d5e419bd2651be2b9988fa65ff890fa" translate="yes" xml:space="preserve">
          <source>This directive selects the type of user authentication for a directory. The authentication types available are &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;Basic&lt;/code&gt; (implemented by &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt;), &lt;code&gt;Digest&lt;/code&gt; (implemented by &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;), and &lt;code&gt;Form&lt;/code&gt; (implemented by &lt;code&gt;&lt;a href=&quot;mod_auth_form&quot;&gt;mod_auth_form&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cfafa6f6724a47134dd7134d1824f107929854" translate="yes" xml:space="preserve">
          <source>This directive sets how deeply mod_ssl should verify before deciding that the clients don't have a valid certificate. Notice that this directive can be used both in per-server and per-directory context. In per-server context it applies to the client authentication process used in the standard SSL handshake when a connection is established. In per-directory context it forces a SSL renegotiation with the reconfigured client verification depth after the HTTP request was read but before the HTTP response is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb7c949eb98eb143640d2e48e2ad2dfc5d6c2d1" translate="yes" xml:space="preserve">
          <source>This directive sets how deeply mod_ssl should verify before deciding that the remote server does not have a valid certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7573b368a558e5dd86060d20856ef21fd59979ea" translate="yes" xml:space="preserve">
          <source>This directive sets the &quot;user&quot; field in the Apache request object. This is used by lower modules to identify the user with a character string. In particular, this may cause the environment variable &lt;code&gt;REMOTE_USER&lt;/code&gt; to be set. The &lt;em&gt;varname&lt;/em&gt; can be any of the &lt;a href=&quot;#envvars&quot;&gt;SSL environment variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1544718dc347544d9bac31570682e359ffc6e1cc" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;em&gt;all-in-one&lt;/em&gt; file where you can assemble the Certificate Revocation Lists (CRL) of Certification Authorities (CA) whose &lt;em&gt;clients&lt;/em&gt; you deal with. These are used for Client Authentication. Such a file is simply the concatenation of the various PEM-encoded CRL files, in order of preference. This can be used alternatively and/or additionally to &lt;code&gt;&lt;a href=&quot;#sslcarevocationpath&quot;&gt;SSLCARevocationPath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c2e9ae5bd4d12c16e87fc7d2d2cbec7bc0c8a4" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;em&gt;all-in-one&lt;/em&gt; file where you can assemble the Certificate Revocation Lists (CRL) of Certification Authorities (CA) whose &lt;em&gt;remote servers&lt;/em&gt; you deal with. These are used for Remote Server Authentication. Such a file is simply the concatenation of the various PEM-encoded CRL files, in order of preference. This can be used alternatively and/or additionally to &lt;code&gt;&lt;a href=&quot;#sslproxycarevocationpath&quot;&gt;SSLProxyCARevocationPath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fd4d8f84d8d9f000b096964e096294a8544859" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;em&gt;all-in-one&lt;/em&gt; file where you can assemble the Certificates of Certification Authorities (CA) whose &lt;em&gt;clients&lt;/em&gt; you deal with. These are used for Client Authentication. Such a file is simply the concatenation of the various PEM-encoded Certificate files, in order of preference. This can be used alternatively and/or additionally to &lt;code&gt;&lt;a href=&quot;#sslcacertificatepath&quot;&gt;SSLCACertificatePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03c552e11b69209e1e2c04e80a01ffa838ef103" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;em&gt;all-in-one&lt;/em&gt; file where you can assemble the Certificates of Certification Authorities (CA) whose &lt;em&gt;remote servers&lt;/em&gt; you deal with. These are used for Remote Server Authentication. Such a file is simply the concatenation of the various PEM-encoded Certificate files, in order of preference. This can be used alternatively and/or additionally to &lt;code&gt;&lt;a href=&quot;#sslproxycacertificatepath&quot;&gt;SSLProxyCACertificatePath&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b716add5a272cb3907d0974e68c710ffacefce2" translate="yes" xml:space="preserve">
          <source>This directive sets the Certificate verification level for the Client Authentication. Notice that this directive can be used both in per-server and per-directory context. In per-server context it applies to the client authentication process used in the standard SSL handshake when a connection is established. In per-directory context it forces a SSL renegotiation with the reconfigured client verification level after the HTTP request was read but before the HTTP response is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611c354dd96f693857373378a8d12b63a171ed07" translate="yes" xml:space="preserve">
          <source>This directive sets the all-in-one file where you keep the certificate chain for all of the client certs in use. This directive will be needed if the remote server presents a list of CA certificates that are not direct signers of one of the configured client certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b3510db63682afeed970dd3c75e0bb933dade9" translate="yes" xml:space="preserve">
          <source>This directive sets the all-in-one file where you keep the certificates and keys used for authentication of the proxy server to remote servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a497e90839895bc2ea4a0a0742f2a1df94f3bcd" translate="yes" xml:space="preserve">
          <source>This directive sets the default algorithm for calculating the expiration time for all documents in the affected realm. It can be overridden on a type-by-type basis by the &lt;code&gt;&lt;a href=&quot;#expiresbytype&quot;&gt;ExpiresByType&lt;/a&gt;&lt;/code&gt; directive. See the description of that directive for details about the syntax of the argument, and the &lt;a href=&quot;#AltSyn&quot;&gt;alternate syntax&lt;/a&gt; description as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2687c85b8bce4865b53ebf2708b2eea5e0043443" translate="yes" xml:space="preserve">
          <source>This directive sets the directory from which &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; will serve files. Unless matched by a directive like &lt;code&gt;&lt;a href=&quot;mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt;, the server appends the path from the requested URL to the document root to make the path to the document. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeffeed85f6ea66371e058e517b2652c85a44def" translate="yes" xml:space="preserve">
          <source>This directive sets the directory where you keep the Certificate Revocation Lists (CRL) of Certification Authorities (CAs) whose clients you deal with. These are used to revoke the client certificate on Client Authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330b688699224c9a3682f2852209f3be395d83be" translate="yes" xml:space="preserve">
          <source>This directive sets the directory where you keep the Certificate Revocation Lists (CRL) of Certification Authorities (CAs) whose remote servers you deal with. These are used to revoke the remote server certificate on Remote Server Authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88540f97d9ddba93bc85d0af0a77fe34981c64b" translate="yes" xml:space="preserve">
          <source>This directive sets the directory where you keep the Certificates of Certification Authorities (CAs) whose clients you deal with. These are used to verify the client certificate on Client Authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0d50d3f95ac14efc0774546f749c8810927136" translate="yes" xml:space="preserve">
          <source>This directive sets the directory where you keep the Certificates of Certification Authorities (CAs) whose remote servers you deal with. These are used to verify the remote server certificate on Remote Server Authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def0b6b6f4fa2a764493e89c1bc979d3c114f148" translate="yes" xml:space="preserve">
          <source>This directive sets the directory where you keep the certificates and keys used for authentication of the proxy server to remote servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0909b64fe6eb653cd7f58add501e86453533afe7" translate="yes" xml:space="preserve">
          <source>This directive sets the filename prefix of the socket to use for communication with the CGI daemon, an extension corresponding to the process ID of the server will be appended. The socket will be opened using the permissions of the user who starts Apache (usually root). To maintain the security of communications with CGI scripts, it is important that no other user has permission to write in the directory where the socket is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3216c0b0e7a2b93a89dddebdd0dacd0965b56d5d" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum configured value for &lt;code&gt;&lt;a href=&quot;#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt; for the lifetime of the Apache httpd process. Any attempts to change this directive during a restart will be ignored, but &lt;code&gt;&lt;a href=&quot;#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt; can be modified during a restart up to the value of this directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122185f83c74b9184564ad86cbe3a8337bf93dca" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of active streams per HTTP/2 session (e.g. connection) that the server allows. A stream is active if it is not &lt;code&gt;idle&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; according to RFC 7540.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0086edd5fb675771bf6390eaea6c8d14fc281589" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of outgoing data bytes buffered in memory for an active streams. This memory is not allocated per stream as such. Allocations are counted against this limit when they are about to be done. Stream processing freezes when the limit has been reached and will only continue when buffered data has been sent out to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3edc54702e9ab7e54e0b28989a93d54de92ae1a4" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of seconds a h2 worker may idle until it shuts itself down. This only happens while the number of h2 workers exceeds &lt;code&gt;&lt;a href=&quot;#h2minworkers&quot;&gt;H2MinWorkers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04d9c39be23114492dac34985f5084dd6849952" translate="yes" xml:space="preserve">
          <source>This directive sets the maximum number of worker threads to spawn per child process for HTTP/2 processing. If this directive is not used, &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; will chose a value suitable for the &lt;code&gt;mpm&lt;/code&gt; module loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef014399ebb37a9c2ebce51726938203f587a4a6" translate="yes" xml:space="preserve">
          <source>This directive sets the minimum number of worker threads to spawn per child process for HTTP/2 processing. If this directive is not used, &lt;code&gt;&lt;a href=&quot;mod_http2&quot;&gt;mod_http2&lt;/a&gt;&lt;/code&gt; will chose a value suitable for the &lt;code&gt;mpm&lt;/code&gt; module loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361e3312d799d2c81a7b55c1695ceb75360053ef" translate="yes" xml:space="preserve">
          <source>This directive sets the name of the authorization realm for a directory. This realm is given to the client so that the user knows which username and password to send. &lt;code&gt;AuthName&lt;/code&gt; takes a single argument; if the realm name contains spaces, it must be enclosed in quotation marks. It must be accompanied by &lt;code&gt;&lt;a href=&quot;#authtype&quot;&gt;AuthType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directives, and directives such as &lt;code&gt;&lt;a href=&quot;mod_authn_file#authuserfile&quot;&gt;AuthUserFile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile#authgroupfile&quot;&gt;AuthGroupFile&lt;/a&gt;&lt;/code&gt; to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5753e1bc94c6acf3aa97a81933f8c7f682c8e2" translate="yes" xml:space="preserve">
          <source>This directive sets the number of &lt;var&gt;bytes&lt;/var&gt; that will be allowed on the HTTP request-line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d4bcb2c93a3107a35b5468ab27bd26802bfc4c" translate="yes" xml:space="preserve">
          <source>This directive sets the number of bytes to be sent in small TLS records (~1300 bytes) until doing maximum sized writes (16k) on https: HTTP/2 connections. This can be used server wide or for specific &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53d791fdcd3bfe234aad0d6a7500f1b818a1062" translate="yes" xml:space="preserve">
          <source>This directive sets the number of seconds of idle time on a TLS connection before the TLS write size falls back to small (~1300 bytes) length. This can be used server wide or for specific &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ecd66b06d24d83186af55ad9e7375ad4f4409de" translate="yes" xml:space="preserve">
          <source>This directive sets the number of threads created by each child process. The child creates these threads at startup and never creates more. If using an MPM like &lt;code&gt;&lt;a href=&quot;mpm_winnt&quot;&gt;mpm_winnt&lt;/a&gt;&lt;/code&gt;, where there is only one child process, this number should be high enough to handle the entire load of the server. If using an MPM like &lt;code&gt;&lt;a href=&quot;worker&quot;&gt;worker&lt;/a&gt;&lt;/code&gt;, where there are multiple child processes, the &lt;em&gt;total&lt;/em&gt; number of threads should be high enough to handle the common load on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e27f4f776f4688551e4f5b0e6b2ff0f6485b72" translate="yes" xml:space="preserve">
          <source>This directive sets the optional &lt;em&gt;all-in-one&lt;/em&gt; file where you can assemble the certificates of Certification Authorities (CA) which form the certificate chain of the server certificate. This starts with the issuing CA certificate of the server certificate and can range up to the root CA certificate. Such a file is simply the concatenation of the various PEM-encoded CA Certificate files, usually in certificate chain order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84387e2be7fd791fba43a0b8df24bd0bba50426" translate="yes" xml:space="preserve">
          <source>This directive sets the seed used to fake SRP user parameters for unknown users, to avoid leaking whether a given user exists. Specify a secret string. If this directive is not used, then Apache will return the UNKNOWN_PSK_IDENTITY alert to clients who specify an unknown username.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6657592ad0815ec304bf9d08fcc264e3dd4fe947" translate="yes" xml:space="preserve">
          <source>This directive sets the size of the window that is used for flow control from client to server and limits the amount of data the server has to buffer. The client will stop sending on a stream once the limit has been reached until the server announces more available space (as it has processed some of the data).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930e00dd1f334b1199140c12fc4400396604ba77" translate="yes" xml:space="preserve">
          <source>This directive sets the timeout in seconds for the information stored in the global/inter-process SSL Session Cache, the OpenSSL internal memory cache and for sessions resumed by TLS session resumption (RFC 5077). It can be set as low as 15 for testing, but should be set to higher values like 300 in real life.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbda3d44bbc1eff5638128a7532567c7e74503f4" translate="yes" xml:space="preserve">
          <source>This directive sets whether a non-SNI client is allowed to access a name-based virtual host. If set to &lt;code&gt;on&lt;/code&gt; in the default name-based virtual host, clients that are SNI unaware will not be allowed to access &lt;em&gt;any&lt;/em&gt; virtual host, belonging to this particular IP / port combination. If set to &lt;code&gt;on&lt;/code&gt; in any other virtual host, SNI unaware clients are not allowed to access this particular virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b29014d3e66ea0069d497cc59d248f03bb94310" translate="yes" xml:space="preserve">
          <source>This directive sets whether it is checked if the remote server certificate is expired or not. If the check fails a 502 status code (Bad Gateway) is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d525ee6b3ea13503b348294b236d95709c5b534" translate="yes" xml:space="preserve">
          <source>This directive sets whether the remote server certificate's CN field is compared against the hostname of the request URL. If both are not equal a 502 status code (Bad Gateway) is sent. &lt;code&gt;SSLProxyCheckPeerCN&lt;/code&gt; is superseded by &lt;code&gt;&lt;a href=&quot;#sslproxycheckpeername&quot;&gt;SSLProxyCheckPeerName&lt;/a&gt;&lt;/code&gt; in release 2.4.5 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b11fcb0d777094d97c3ee4e08ab87f748bab4d" translate="yes" xml:space="preserve">
          <source>This directive should be used with caution as a crash might cause loss of logging data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77366d08361cc7d76af18d230b99d29227c8ebca" translate="yes" xml:space="preserve">
          <source>This directive should only be used when your LDAP server doesn't accept anonymous comparisons and you cannot use a dedicated &lt;code&gt;&lt;a href=&quot;#authldapbinddn&quot;&gt;AuthLDAPBindDN&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c98b60d04c9d6672ac29b7e5d400e266cfc268b" translate="yes" xml:space="preserve">
          <source>This directive should only be used when your LDAP server doesn't accept anonymous searches and you cannot use a dedicated &lt;code&gt;&lt;a href=&quot;#authldapbinddn&quot;&gt;AuthLDAPBindDN&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d66b2d145b18982571559e1892268f4bf627075" translate="yes" xml:space="preserve">
          <source>This directive specifies a default value for the media type charset parameter (the name of a character encoding) to be added to a response if and only if the response's content-type is either &lt;code&gt;text/plain&lt;/code&gt; or &lt;code&gt;text/html&lt;/code&gt;. This should override any charset specified in the body of the response via a &lt;code&gt;META&lt;/code&gt; element, though the exact behavior is often dependent on the user's client configuration. A setting of &lt;code&gt;AddDefaultCharset Off&lt;/code&gt; disables this functionality. &lt;code&gt;AddDefaultCharset On&lt;/code&gt; enables a default charset of &lt;code&gt;iso-8859-1&lt;/code&gt;. Any other value is assumed to be the &lt;var&gt;charset&lt;/var&gt; to be used, which should be one of the &lt;a href=&quot;http://www.iana.org/assignments/character-sets&quot;&gt;IANA registered charset values&lt;/a&gt; for use in Internet media types (MIME types). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b2495aa959a538c56b2cb4ed2a64b583b9d1b8" translate="yes" xml:space="preserve">
          <source>This directive specifies a general access requirement which has to be fulfilled in order to allow access. It is a very powerful directive because the requirement specification is an arbitrarily complex boolean expression containing any number of access checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13621e08ffb1a433153c0b9a7f8f2bc78667705" translate="yes" xml:space="preserve">
          <source>This directive specifies a list of users that are allowed to gain access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5a952619b4044f298d7277a81e44da3d748fb1" translate="yes" xml:space="preserve">
          <source>This directive specifies a query to be run indicating the user has logged in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75511c033fb559c42f0f2e8afda9393535fd9f5c" translate="yes" xml:space="preserve">
          <source>This directive specifies a query to be run indicating the user has logged out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29707862c60cfa600d2ade0a96738236f62bacd4" translate="yes" xml:space="preserve">
          <source>This directive specifies a string to be used along with the supplied username (and realm in the case of Digest Authentication) in constructing a cache key. This serves to disambiguate identical usernames serving different authentication areas on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb7cb6e4f1e0064a00ba16afeede4170a487e95" translate="yes" xml:space="preserve">
          <source>This directive specifies an LDAP group whose members are allowed access. It takes the distinguished name of the LDAP group. Note: Do not surround the group name with quotes. For example, assume that the following entry existed in the LDAP directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2dfc1e46327f0768117fe96fe0bfc78c93b76f" translate="yes" xml:space="preserve">
          <source>This directive specifies an authentication provider or providers to cache for. Credentials found by a provider not listed in an AuthnCacheProvideFor directive will not be cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d8bf56429619117a859e57197d2a0d07daaac6" translate="yes" xml:space="preserve">
          <source>This directive specifies group membership that is required for the user to gain access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72a7d60680ea675127c67406041fbc4e3806287" translate="yes" xml:space="preserve">
          <source>This directive specifies if the server should honor the order in which the &lt;code&gt;Protocols&lt;/code&gt; directive lists protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd3cf4327d50ebf07dd4048407e91bdd1f65be14" translate="yes" xml:space="preserve">
          <source>This directive specifies the format of the access log file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cbc6b183fbdad9819b8fee7607a64c19857e07" translate="yes" xml:space="preserve">
          <source>This directive specifies the list of protocols supported for a server/virtual host. The list determines the allowed protocols a client may negotiate for this server/host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83a770e4bcd8fadb1f5f73f9e05102e31e1d8d2" translate="yes" xml:space="preserve">
          <source>This directive specifies the number of &lt;var&gt;bytes&lt;/var&gt; from 0 (meaning unlimited) to 2147483647 (2GB) that are allowed in a request body. See the note below for the limited applicability to proxy requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb190609ebdf4dfb1dbf7311a574e3c6cf8544" translate="yes" xml:space="preserve">
          <source>This directive specifies the number of &lt;var&gt;bytes&lt;/var&gt; that will be allowed in an HTTP request header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a47cb91ddff2bf41f569ce270794b2a1b7454ec" translate="yes" xml:space="preserve">
          <source>This directive specifies the protocol used for a specific listening socket. The protocol is used to determine which module should handle a request and to apply protocol specific optimizations with the &lt;code&gt;AcceptFilter&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e40901cee6d1c922e0c79094363b178f92fc4b5" translate="yes" xml:space="preserve">
          <source>This directive specifies the timeout duration of an ident request. The default value of 30 seconds is recommended by &lt;a href=&quot;http://www.ietf.org/rfc/rfc1413.txt&quot;&gt;RFC 1413&lt;/a&gt;, mainly because of possible network latency. However, you may want to adjust the timeout value according to your local network speed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896edef6307df2764b0ff756fd1e4ccc94a4616d" translate="yes" xml:space="preserve">
          <source>This directive specifies when &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; will de-reference aliases during LDAP operations. The default is &lt;code&gt;always&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29e65afa5b417169403a4bade6ef882e2047483" translate="yes" xml:space="preserve">
          <source>This directive specifies which LDAP attributes are used to check for user members within groups. Multiple attributes can be used by specifying this directive multiple times. If not specified, then &lt;code&gt;&lt;a href=&quot;mod_authnz_ldap&quot;&gt;mod_authnz_ldap&lt;/a&gt;&lt;/code&gt; uses the &lt;code&gt;member&lt;/code&gt; and &lt;code&gt;uniquemember&lt;/code&gt; attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4c6846e20a1f5197adc9aa6ee29a5ebad178c8" translate="yes" xml:space="preserve">
          <source>This directive takes one to three arguments as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816b0d11fd56fc1c682fdd46c36806a4c7d419ba" translate="yes" xml:space="preserve">
          <source>This directive tells the server to &lt;var&gt;chroot(8)&lt;/var&gt; to the specified directory after startup, but before accepting requests over the 'net.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e08c137af1c22c1bb7a5f37af49f54379c42dd" translate="yes" xml:space="preserve">
          <source>This directive tests whether an authenticated user is authorized according to a particular authorization provider and the specified restrictions. &lt;code&gt;&lt;a href=&quot;mod_authz_core&quot;&gt;mod_authz_core&lt;/a&gt;&lt;/code&gt; provides the following generic authorization providers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecef991fbae79e3147d535005d9cf8900a983ba" translate="yes" xml:space="preserve">
          <source>This directive toggles if HTTP/2 requests shall be serialized in HTTP/1.1 format for processing by &lt;code&gt;httpd&lt;/code&gt; core or if received binary data shall be passed into the &lt;code&gt;request_rec&lt;/code&gt;s directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7056c7eb48183e1ab8e1ed7e795e2a385258ab2" translate="yes" xml:space="preserve">
          <source>This directive toggles the maximum number of HTTP/2 server pushes that are remembered per HTTP/2 connection. This can be used inside the &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to influence the number for all connections to that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1895457acf0b4efe5448e6dcf773ace3b9f3bcd" translate="yes" xml:space="preserve">
          <source>This directive toggles the security checks on HTTP/2 connections in TLS mode (https:). This can be used server wide or for specific &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2077c916619177ddb66e69d7908835b1ebb20cfb" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the HTTP/1.1 Upgrade method for switching to HTTP/2. This should be used inside a &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to enable Upgrades to HTTP/2 for that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd352ea04c8fb18a38ce7c65bd32a37627b4caa" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the HTTP/2 Direct Mode. This should be used inside a &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to enable direct HTTP/2 communication for that virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9ffedb101a6d0187a3ce4f8ac4b82b0a70dfaf" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the HTTP/2 server push protocol feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315ba7db78cc7ea818f389dabb370dcf9b58c151" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the SSL library FIPS_mode flag. It must be set in the global server context and cannot be configured with conflicting settings (SSLFIPS on followed by SSLFIPS off or similar). The mode applies to all SSL library operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a858c8d1748e40abf92d6c119697c723b3c12d61" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the SSL/TLS Protocol Engine for proxy. This is usually used inside a &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to enable SSL/TLS for proxy usage in a particular virtual host. By default the SSL/TLS Protocol Engine is disabled for proxy both for the main server and all configured virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8adba3ad92949f08f6e3ff943ba09d3166fd5c6" translate="yes" xml:space="preserve">
          <source>This directive toggles the usage of the SSL/TLS Protocol Engine. This is should be used inside a &lt;code&gt;&lt;a href=&quot;core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; section to enable SSL/TLS for a that virtual host. By default the SSL/TLS Protocol Engine is disabled for both the main server and all configured virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a47e3961aa27c85b5befcc5450e43d289460b5" translate="yes" xml:space="preserve">
          <source>This directive trades off performance vs security against malicious, privileges-aware code. In &lt;var&gt;SECURE&lt;/var&gt; mode, each request runs in a secure subprocess, incurring a substantial performance penalty. In &lt;var&gt;FAST&lt;/var&gt; mode, the server is not protected against escalation of privileges as discussed above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3342a12c16c563a4db0bf74a2a763b4fe0f54b3a" translate="yes" xml:space="preserve">
          <source>This directive will allow caching even if the upstream server has requested that the resource not be cached. This directive is only ideal for a 'private' cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1600b0ba5bb4ece86ee8f2aa9977b0d63556b513" translate="yes" xml:space="preserve">
          <source>This directive will allow serving from the cache even if the client has requested that the document not be served from the cache. This might result in stale content being served.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa1b382edb4dc5db34f91c7790f6c5bf4e5bab4" translate="yes" xml:space="preserve">
          <source>This directive will cause mod_proxy_html to strip HTML comments. Note that this will also kill off any scripts or styles embedded in comments (a bogosity introduced in 1995/6 with Netscape 2 for the benefit of then-older browsers, but still in use today). It may also interfere with comment-based processors such as SSI or ESI: be sure to run any of those &lt;em&gt;before&lt;/em&gt; mod_proxy_html in the filter chain if stripping comments!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a846b730a239f02a0271dccee82c18f624a7b0b5" translate="yes" xml:space="preserve">
          <source>This directive will cause the current server/vhost to &quot;inherit&quot; &lt;code&gt;&lt;a href=&quot;#proxypass&quot;&gt;ProxyPass&lt;/a&gt;&lt;/code&gt; directives defined in the main server. This can cause issues and inconsistent behavior if using the Balancer Manager for dynamic changes and so should be disabled if using that feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3c4fd94d2dc3b8b3cbcd8e66c9220f018b22a9f" translate="yes" xml:space="preserve">
          <source>This directive will cause the current server/vhost to &quot;inherit&quot; ProxyPass Balancers and Workers defined in the main server. This can cause issues and inconsistent behavior if using the Balancer Manager and so should be disabled if using that feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc5ae4a8b8bfb6887f247a74b1312f8ac775829" translate="yes" xml:space="preserve">
          <source>This directive will cause the shared memory storage associated with the balancers and balancer members to be persisted across restarts. This allows these local changes to not be lost during the normal restart/graceful state transitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe4760a4661dc9a0e79f06dd07ff6467b716f8b" translate="yes" xml:space="preserve">
          <source>This directive, if enabled by the &lt;code&gt;LDAPReferrals&lt;/code&gt; directive, limits the number of referral hops that are followed before terminating an LDAP query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb7fd7ebc08277ba6fce390213f0ae80bdd490f" translate="yes" xml:space="preserve">
          <source>This directive, together with the &lt;var&gt;interpolate&lt;/var&gt; argument to &lt;code&gt;ProxyPass&lt;/code&gt;, &lt;code&gt;ProxyPassReverse&lt;/code&gt;, &lt;code&gt;ProxyPassReverseCookieDomain&lt;/code&gt;, and &lt;code&gt;ProxyPassReverseCookiePath&lt;/code&gt;, enables reverse proxies to be dynamically configured using environment variables which may be set by another module such as &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;. It affects the &lt;code&gt;ProxyPass&lt;/code&gt;, &lt;code&gt;ProxyPassReverse&lt;/code&gt;, &lt;code&gt;ProxyPassReverseCookieDomain&lt;/code&gt;, and &lt;code&gt;ProxyPassReverseCookiePath&lt;/code&gt; directives and causes them to substitute the value of an environment variable &lt;code&gt;varname&lt;/code&gt; for the string &lt;code&gt;${varname}&lt;/code&gt; in configuration directives if the &lt;var&gt;interpolate&lt;/var&gt; option is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970139af6b05af26d1d3c92c6dd6d709790cccba" translate="yes" xml:space="preserve">
          <source>This directs &lt;code&gt;&lt;a href=&quot;mod_filter&quot;&gt;mod_filter&lt;/a&gt;&lt;/code&gt; to deal with ensuring the filter doesn't run when it shouldn't, and that the HTTP response headers are correctly set taking into account the effects of the filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a83f2406f07133dd1abd5402e16a3c57f6e8b2" translate="yes" xml:space="preserve">
          <source>This disables &lt;code&gt;&lt;a href=&quot;mod/core#keepalive&quot;&gt;KeepAlive&lt;/a&gt;&lt;/code&gt; when set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5408aeeec5de7308fb0aa5c0d63e34acf5c92ec7" translate="yes" xml:space="preserve">
          <source>This disables &lt;code&gt;&lt;a href=&quot;mod_reqtimeout&quot;&gt;mod_reqtimeout&lt;/a&gt;&lt;/code&gt; completely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ee7f5bf2b7b3a57cc4eef309fcaa9a822115d9" translate="yes" xml:space="preserve">
          <source>This disables any global/inter-process Session Cache. However it does force OpenSSL to send a non-null session ID to accommodate buggy clients that require one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="310f2b8bf027711b153d6fdf016a436811717b08" translate="yes" xml:space="preserve">
          <source>This disables the global/inter-process Session Cache. This will incur a noticeable speed penalty and may cause problems if using certain browsers, particularly if client certificates are enabled. This setting is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c3137e049e6e5a82b3607d1c40d7c4d7820215" translate="yes" xml:space="preserve">
          <source>This discusses a shortcoming in the Unix socket API. Suppose your web server uses multiple &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; statements to listen on either multiple ports or multiple addresses. In order to test each socket to see if a connection is ready, Apache uses &lt;code&gt;select(2)&lt;/code&gt;. &lt;code&gt;select(2)&lt;/code&gt; indicates that a socket has &lt;em&gt;zero&lt;/em&gt; or &lt;em&gt;at least one&lt;/em&gt; connection waiting on it. Apache's model includes multiple children, and all the idle ones test for new connections at the same time. A naive implementation looks something like this (these examples do not match the code, they're contrived for pedagogical purposes):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b00e366ac09b6248b998fcc90276355d577dd94" translate="yes" xml:space="preserve">
          <source>This document acts as a reference page for most of the relevant standards that Apache follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a351502c7f1fb5d3a8c15df26e812b8f5b21fd9a" translate="yes" xml:space="preserve">
          <source>This document assumes that you are installing a binary distribution of Apache. If you want to compile Apache yourself (possibly to help with development or tracking down bugs), see &lt;a href=&quot;win_compiling&quot;&gt;Compiling Apache for Microsoft Windows&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc92f00ef8f056fa363a3301f19bd0bccdb7e10e" translate="yes" xml:space="preserve">
          <source>This document attempts to answer the commonly-asked questions about setting up &lt;a href=&quot;index&quot;&gt;virtual hosts&lt;/a&gt;. These scenarios are those involving multiple web sites running on a single server, via &lt;a href=&quot;name-based&quot;&gt;name-based&lt;/a&gt; or &lt;a href=&quot;ip-based&quot;&gt;IP-based&lt;/a&gt; virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e9ab967267463901d38fbf5e3f4df0e96fe916" translate="yes" xml:space="preserve">
          <source>This document attempts to explain exactly what Apache HTTP Server does when deciding what virtual host to serve a request from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5c19c4cbe1742028d52e8d042e7480ffd07e42" translate="yes" xml:space="preserve">
          <source>This document attempts to give sufficient background so that what follows is understood, rather than just copied blindly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fed1f9b2b733b39f8e4c03dbe980d09fcdc5da" translate="yes" xml:space="preserve">
          <source>This document covers compilation and installation of the Apache HTTP Server on Unix and Unix-like systems only. For compiling and installation on Windows, see &lt;a href=&quot;platform/windows&quot;&gt;Using Apache HTTP Server with Microsoft Windows&lt;/a&gt; and &lt;a href=&quot;platform/win_compiling&quot;&gt;Compiling Apache for Microsoft Windows&lt;/a&gt;. For other platforms, see the &lt;a href=&quot;platform/index&quot;&gt;platform&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4f27cc0e6576066fbb6551d4b64f45675a3e50" translate="yes" xml:space="preserve">
          <source>This document covers only the bare basics. We hope that this gets you started, but there are many other things that you might need to know.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee4f99e22b61ded83683e4f6244aabdcbd23af6" translate="yes" xml:space="preserve">
          <source>This document covers stopping and restarting Apache HTTP Server on Unix-like systems. Windows NT, 2000 and XP users should see &lt;a href=&quot;platform/windows#winsvc&quot;&gt;Running httpd as a Service&lt;/a&gt; and Windows 9x and ME users should see &lt;a href=&quot;platform/windows#wincons&quot;&gt;Running httpd as a Console Application&lt;/a&gt; for information on how to control httpd on those platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e186096950882bf629e8f9b25aa754739931dc0" translate="yes" xml:space="preserve">
          <source>This document defines a &quot;Content-language:&quot; header, for use in cases where one desires to indicate the language of something that has RFC 822-like headers, like MIME body parts or Web documents, and an &quot;Accept-Language:&quot; header for use in cases where one wishes to indicate one's preferences with regard to language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f294d494c2e112d3de94b002db0f62839af15a" translate="yes" xml:space="preserve">
          <source>This document describes a language tag for use in cases where it is desired to indicate the language used in an information object, how to register values for use in this language tag, and a construct for matching such language tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255d91d424f2a8a4c75703f7111430d7c37414e9" translate="yes" xml:space="preserve">
          <source>This document describes how to efficiently serve an arbitrary number of virtual hosts with the Apache HTTP Server. A &lt;a href=&quot;../rewrite/vhosts&quot;&gt;separate document&lt;/a&gt; discusses using &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; to create dynamic mass virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d717d6d6c5de2adf028095e6cfffc9f6ca4966" translate="yes" xml:space="preserve">
          <source>This document describes how to use DSO modules as well as the theory behind their use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b37d23f5598e6063e173953c8472f24cebec202" translate="yes" xml:space="preserve">
          <source>This document describes the files used to configure Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648e1d9c4d3863d9e5fda31ce5ab91a6a77fe6a5" translate="yes" xml:space="preserve">
          <source>This document describes the use of Apache's Handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b7d9f0568abdfccb822f4469e9de3886f8e5f4" translate="yes" xml:space="preserve">
          <source>This document describes the use of filters in Apache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb47fb8fa91567abc93ff4698fe5d695b2134a8e" translate="yes" xml:space="preserve">
          <source>This document describes what a Multi-Processing Module is and how they are used by the Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed9c17855555eae649b3698debdb965afd9794d" translate="yes" xml:space="preserve">
          <source>This document describes when and how to use name-based virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b3c806d3d69d61584dd2e4c5d1627f21a5811d" translate="yes" xml:space="preserve">
          <source>This document discusses some of the technical details of mod_rewrite and URL matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d8b6d3e208adb27b4818958cab8b9c32e96625" translate="yes" xml:space="preserve">
          <source>This document discusses the flags which are available to the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; directive, providing detailed explanations and examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069dc43ec32df22cac933a7e8081a99e3be2bb81" translate="yes" xml:space="preserve">
          <source>This document explains how the Apache HTTP Server uses the URL of a request to determine the filesystem location from which to serve a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b6c0ed39607d7f309dc8ac8272072874b0a4d2" translate="yes" xml:space="preserve">
          <source>This document explains how to build, install, and run Apache 2.4 on systems supporting the RPM packaging format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9b2ab38687b237c45389e06667b46192747d4c" translate="yes" xml:space="preserve">
          <source>This document explains how to build, install, configure and run Apache httpd 2.4 under Unix systems supporting the RPM packaging format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf940925efcc2714e977813704a533cdaeb2969a" translate="yes" xml:space="preserve">
          <source>This document explains how to install, configure and run Apache 2.0 under Novell NetWare 6.0 and above. If you find any bugs, or wish to contribute in other ways, please use our &lt;a href=&quot;http://httpd.apache.org/bug_report.html&quot;&gt;bug reporting page.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d626afba5c6245bd0c98b4049b402d9399838754" translate="yes" xml:space="preserve">
          <source>This document explains how to install, configure and run Apache 2.4 under Microsoft Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a306b3fdb92fe6dcc6f799605a6bffb78f9a1e07" translate="yes" xml:space="preserve">
          <source>This document explains how to install, configure and run Apache 2.4 under Microsoft Windows. If you have questions after reviewing the documentation (and any event and error logs), you should consult the peer-supported &lt;a href=&quot;http://httpd.apache.org/userslist.html&quot;&gt;users' mailing list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="913c8e3acf69a78cf476d46b5c1c964663e268ab" translate="yes" xml:space="preserve">
          <source>This document explains how to install, configure and run Apache 2.4 under Novell NetWare 5.1 and above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecc4c6470b546178c359fbeef0867f0ece84025" translate="yes" xml:space="preserve">
          <source>This document explains some of the directives provided by the &lt;code&gt;&lt;a href=&quot;mod/core&quot;&gt;core&lt;/a&gt;&lt;/code&gt; server which are used to configure the basic operations of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbedd3e62c93dcb849bd93d49b02581fac71ec8" translate="yes" xml:space="preserve">
          <source>This document is intended to get you started, and get a few things working. You are strongly encouraged to read the rest of the SSL documentation, and arrive at a deeper understanding of the material, before progressing to the advanced techniques.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a639af7855db410b89aa5800e134610060640a0a" translate="yes" xml:space="preserve">
          <source>This document is not the correct place for an in-depth discussion of HTTP request smuggling (instead, try your favourite search engine) however it is important to be aware that it is possible to make a series of requests, and to exploit a vulnerability on an origin webserver such that the attacker can entirely control the content retrieved by the proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c65dd00a6180e49c763d5a2019b95aa27a94dd6" translate="yes" xml:space="preserve">
          <source>This document is not yet complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a554b90e54ff756117b223d03b98a79029f6576" translate="yes" xml:space="preserve">
          <source>This document serves as a rationale to describe some of the design decisions of the port to this machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a3ea829f9463270c14e4e1dff0a1ce8c4da901" translate="yes" xml:space="preserve">
          <source>This document summarizes the history of HTML development, and defines the &quot;text/html&quot; MIME type by pointing to the relevant W3C recommendations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f1bda33768583c3aed7f516d6768574d28e4a7" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes how to use the RewriteRule's [P] flag to proxy content to another server. A number of recipes are provided that describe common scenarios.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe79f5a5591a30f59cc21e28f3764d658e7a433" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes how you can use &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; to control access to various resources, and other related techniques. This includes many examples of common uses of mod_rewrite, including detailed descriptions of how each works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871e01eac05b51e063f5dc49a76d2bfd850d16e6" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes how you can use &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; to create dynamically configured virtual hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0d3b2f50ab7cc2684a649a626bcf9379e3cf8a" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes how you can use &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; to redirect and remap request. This includes many examples of common uses of mod_rewrite, including detailed descriptions of how each works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6435a94fd44b11ac0fafaef0835385f65e7982" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes perhaps one of the most important concepts about &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; - namely, when to avoid using it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fbb97a5d5b2a9f97e5f99e8d15ed63bed19d70" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes the basic concepts necessary for use of &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;. Other documents go into greater detail, but this doc should help the beginner get their feet wet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9835a066d8d607fecc9e2a863797dcc26e2b47" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It describes the use of the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; directive, and provides examples of each of the various &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritemap&quot;&gt;RewriteMap&lt;/a&gt;&lt;/code&gt; types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0281ffaa6a959a9b764529fc221c14d2b8b94822" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;../mod/mod_rewrite&quot;&gt;reference documentation&lt;/a&gt;. It provides a few advanced techniques using mod_rewrite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f87ba8d3cb734828ee0b15aa5c331480feeb34" translate="yes" xml:space="preserve">
          <source>This document supplements the &lt;code&gt;&lt;a href=&quot;mod/mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/mod_cache_disk&quot;&gt;mod_cache_disk&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;mod/mod_file_cache&quot;&gt;mod_file_cache&lt;/a&gt;&lt;/code&gt; and &lt;a href=&quot;programs/htcacheclean&quot;&gt;htcacheclean&lt;/a&gt; reference documentation. It describes how to use the Apache HTTP Server's caching features to accelerate web and proxy serving, while avoiding common problems and misconfigurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1ea4a709f5029b743e16ebc19870adc3ca4774" translate="yes" xml:space="preserve">
          <source>This does not apply to new requests resulting from external redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d363c9da84f47238866b94ca7dfd78ea39c6ad" translate="yes" xml:space="preserve">
          <source>This does two things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc583d836b5abf7f0efd671718265741f08bc6ce" translate="yes" xml:space="preserve">
          <source>This effectively disables the mutex, and is only allowed for a mutex if the module indicates that it is a valid choice. Consult the module documentation for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703ea468192be67b03c31e7144771121963ee568" translate="yes" xml:space="preserve">
          <source>This enables optimized SSL connection renegotiation handling when SSL directives are used in per-directory context. By default a strict scheme is enabled where &lt;em&gt;every&lt;/em&gt; per-directory reconfiguration of SSL parameters causes a &lt;em&gt;full&lt;/em&gt; SSL renegotiation handshake. When this option is used mod_ssl tries to avoid unnecessary handshakes by doing more granular (but still safe) parameter checks. Nevertheless these granular checks sometimes may not be what the user expects, so enable this on a per-directory basis only, please.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf7744a81cec755ac74026d0a92e8359255f4a5f" translate="yes" xml:space="preserve">
          <source>This enables per-request interpolation in &lt;code&gt;&lt;a href=&quot;#proxyhtmlurlmap&quot;&gt;ProxyHTMLURLMap&lt;/a&gt;&lt;/code&gt; to- and from- patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0f2aebfc951699bc1637e98aace82e161b95ee" translate="yes" xml:space="preserve">
          <source>This enables the DAV file system provider, which is implemented by the &lt;code&gt;&lt;a href=&quot;mod_dav_fs&quot;&gt;mod_dav_fs&lt;/a&gt;&lt;/code&gt; module. Therefore, that module must be compiled into the server or loaded at runtime using the &lt;code&gt;&lt;a href=&quot;mod_so#loadmodule&quot;&gt;LoadModule&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26c63b4c9dce26265a7b6b1b293796390e85dab" translate="yes" xml:space="preserve">
          <source>This enables the extraction of the title from HTML documents for fancy indexing. If the file does not have a description given by &lt;code&gt;&lt;a href=&quot;#adddescription&quot;&gt;AddDescription&lt;/a&gt;&lt;/code&gt; then httpd will read the document for the value of the &lt;code&gt;title&lt;/code&gt; element. This is CPU and disk intensive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dfcc98e7b1e3d326004aabd713576d0d0af01eb" translate="yes" xml:space="preserve">
          <source>This error can be caused by an incorrect configuration. Please make sure that your &lt;code&gt;&lt;a href=&quot;../mod/mpm_common#listen&quot;&gt;Listen&lt;/a&gt;&lt;/code&gt; directives match your &lt;code&gt;&lt;a href=&quot;../mod/core#virtualhost&quot;&gt;&amp;lt;VirtualHost&amp;gt;&lt;/a&gt;&lt;/code&gt; directives. If all else fails, please start afresh, using the default configuration provided by &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50171a7af031c2c6afcd7501dd5fb90a1393a021" translate="yes" xml:space="preserve">
          <source>This escaping is particularly necessary in a proxy situation, when the backend may break if presented with an unescaped URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3caf7a74fcfdc1ed0341013535dddfa50b1e87" translate="yes" xml:space="preserve">
          <source>This example also shows that it is not necessary to define a nickname with the &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt; directive. Instead, the log format can be specified directly in the &lt;code&gt;&lt;a href=&quot;mod/mod_log_config#customlog&quot;&gt;CustomLog&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0c37a5cbed8ca50aca66c511541b62387c9b719" translate="yes" xml:space="preserve">
          <source>This example assumes that your &lt;code&gt;&lt;a href=&quot;../mod/core#documentroot&quot;&gt;DocumentRoot&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;/www/htdocs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097735a5849e0b07c160b370865457ac3fc2ed7d" translate="yes" xml:space="preserve">
          <source>This example checks for passwords in two different text files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9519b23a8505ae1b409981bbefb9ad978bab715" translate="yes" xml:space="preserve">
          <source>This example defines two different workers, each using a separate connection pool and configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b06e2819cb7264de8a226ab61f3647deea2f35" translate="yes" xml:space="preserve">
          <source>This example keeps requests for images from appearing in the access log. It can be easily modified to prevent logging of particular directories, or to prevent logging of requests coming from particular hosts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b2a75ac4ea3471e2edd1715725bfcd314fe4f0" translate="yes" xml:space="preserve">
          <source>This example says that the server is not reachable on port 80 from the outside, but local port 5002 is the one responding to https: requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb577a81caa04692bae4cee05f33b23f5e2c7a2b" translate="yes" xml:space="preserve">
          <source>This example shows how to keep people not on your server from using images on your server as inline-images on their pages. This is not a recommended configuration, but it can work in limited circumstances. We assume that all your images are in a directory called &lt;code&gt;/web/images&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb51243e3111ea58f36673374e3537fa986a75a4" translate="yes" xml:space="preserve">
          <source>This example uses an often-overlooked feature of mod_rewrite, by taking advantage of the order of execution of the ruleset. In particular, mod_rewrite evaluates the left-hand-side of the RewriteRule before it evaluates the RewriteCond directives. Consequently, $1 is already defined by the time the RewriteCond directives are evaluated. This allows us to test for the existence of the original (&lt;code&gt;document.html&lt;/code&gt;) and target (&lt;code&gt;document.php&lt;/code&gt;) files using the same base filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c98c953520f2712da799f9cd54fc48b3de7a078" translate="yes" xml:space="preserve">
          <source>This example uses the &quot;-&quot; syntax for the rewrite target, which means that the requested URI is not modified. There's no reason to rewrite to another URI, if you're going to forbid the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36312ba4ec935859f33d10a06e1763c12cdc368" translate="yes" xml:space="preserve">
          <source>This expansion does not occur when the &lt;em&gt;PT&lt;/em&gt; flag is used on the &lt;code&gt;&lt;a href=&quot;#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af34f910298e721eede52ab90eedcdb3651cea8" translate="yes" xml:space="preserve">
          <source>This explicitly sets the module name for the &lt;code&gt;-i&lt;/code&gt; (install) and &lt;code&gt;-g&lt;/code&gt; (template generation) option. Use this to explicitly specify the module name. For option &lt;code&gt;-g&lt;/code&gt; this is required, for option &lt;code&gt;-i&lt;/code&gt; the &lt;code&gt;apxs&lt;/code&gt; tool tries to determine the name from the source or (as a fallback) at least by guessing it from the filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f1c1e83170551a190b379080b4a161e293bc1f" translate="yes" xml:space="preserve">
          <source>This extract from &lt;code&gt;httpd.conf&lt;/code&gt; does the same thing as &lt;a href=&quot;#per-hostname&quot;&gt;the first example&lt;/a&gt;. The first half is very similar to the corresponding part above, except for some changes, required for backward compatibility and to make the &lt;code&gt;mod_rewrite&lt;/code&gt; part work properly; the second half configures &lt;code&gt;mod_rewrite&lt;/code&gt; to do the actual work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c078d5402999b422eb90baba3fbb8c983c55b8" translate="yes" xml:space="preserve">
          <source>This extract from &lt;code&gt;httpd.conf&lt;/code&gt; implements the virtual host arrangement outlined in the &lt;a href=&quot;#motivation&quot;&gt;Motivation&lt;/a&gt; section above using &lt;code&gt;&lt;a href=&quot;../mod/mod_vhost_alias&quot;&gt;mod_vhost_alias&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a534ac40c1b5904246c94d13a40a6d9559ed6585" translate="yes" xml:space="preserve">
          <source>This feature even works without setting the &lt;code&gt;StdEnvVars&lt;/code&gt; option of the &lt;code&gt;&lt;a href=&quot;#ssloptions&quot;&gt;SSLOptions&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0017e5e40f28cd463ec86d7689d3b418893757da" translate="yes" xml:space="preserve">
          <source>This feature is available in Apache HTTP Server 2.4.10 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d518259ebfa77e5f662784c75f56e52389e8009a" translate="yes" xml:space="preserve">
          <source>This feature is enabled using the &lt;code&gt;--enable-mpms-shared&lt;/code&gt; option of the &lt;code&gt;&lt;a href=&quot;programs/configure&quot;&gt;configure&lt;/a&gt;&lt;/code&gt; script. With argument &lt;code&gt;&lt;em&gt;all&lt;/em&gt;&lt;/code&gt;, all possible MPMs for the platform will be installed. Alternately, a list of MPMs can be specified as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eec5c61a9f55342b2f59a938786a24517b780bc" translate="yes" xml:space="preserve">
          <source>This feature makes it possible to break up complex web pages and web applications into small individual components, and combine the components and the surrounding web page structure together using &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt;. The components can take the form of CGI programs, scripted languages, or URLs reverse proxied into the URL space from another server using &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c29d3bf362c108280cad32df1eb91f1aee4f301" translate="yes" xml:space="preserve">
          <source>This feature utilizes the &lt;code&gt;rewrite-map&lt;/code&gt; mutex, which is required for reliable communication with the program. The mutex mechanism and lock file can be configured with the &lt;code&gt;&lt;a href=&quot;../mod/core#mutex&quot;&gt;Mutex&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed74a06c3c8a02f37001c8eff7b74e514237794" translate="yes" xml:space="preserve">
          <source>This feature was introduced in 2.4.5 and superseded the behavior of the &lt;code&gt;&lt;a href=&quot;#sslproxycheckpeercn&quot;&gt;SSLProxyCheckPeerCN&lt;/a&gt;&lt;/code&gt; directive, which only tested the exact value in the first CN attribute against the host name. However, many users were confused by the behavior of using these directives individually, so the mutual behavior of &lt;code&gt;SSLProxyCheckPeerName&lt;/code&gt; and &lt;code&gt;SSLProxyCheckPeerCN&lt;/code&gt; directives were improved in release 2.4.21. See the &lt;code&gt;&lt;a href=&quot;#sslproxycheckpeercn&quot;&gt;SSLProxyCheckPeerCN&lt;/a&gt;&lt;/code&gt; directive description for the original behavior and details of these improvements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f6176550e7a1876101eb25ea5a338aa977ac2b" translate="yes" xml:space="preserve">
          <source>This file handle caching is done once at server start or restart, only. So whenever one of the cached files changes on the filesystem you &lt;em&gt;have&lt;/em&gt; to restart the server (see the &lt;a href=&quot;../stopping&quot;&gt;Stopping and Restarting&lt;/a&gt; documentation). To reiterate that point: if the files are modified &lt;em&gt;in place&lt;/em&gt; without restarting the server you may end up serving requests that are completely bogus. You should update files by unlinking the old copy and putting a new copy in place. Most tools such as &lt;code&gt;rdist&lt;/code&gt; and &lt;code&gt;mv&lt;/code&gt; do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857df3489417a7a3f631e911207359e90686e98e" translate="yes" xml:space="preserve">
          <source>This file should be placed somewhere not accessible from the web. This is so that folks cannot download the password file. For example, if your documents are served out of &lt;code&gt;/usr/local/apache/htdocs&lt;/code&gt;, you might want to put the password file(s) in &lt;code&gt;/usr/local/apache/passwd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ede5e968aed6d40c8dd40e0d431bcd11188998" translate="yes" xml:space="preserve">
          <source>This file should have an entry for each available variant; these entries consist of contiguous HTTP-format header lines. Entries for different variants are separated by blank lines. Blank lines are illegal within an entry. It is conventional to begin a map file with an entry for the combined entity as a whole (although this is not required, and if present will be ignored). An example map file is shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4831b8eef2d95d98b1e4aa35f3db2645634b82" translate="yes" xml:space="preserve">
          <source>This flag &lt;em&gt;only&lt;/em&gt; returns information about things like access control, authentication, and authorization. This flag &lt;em&gt;does not&lt;/em&gt; return information about the status code the configured handler (static file, CGI, proxy, etc.) would have returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a1386c2f076da6461e4b9e4bef00120cf9a9f8" translate="yes" xml:space="preserve">
          <source>This flag is available in version 2.2.12 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7a24c0b2ec32a1e5415c17d59f9736816045415" translate="yes" xml:space="preserve">
          <source>This flag is available in version 2.4.0 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b810b79f38bd759197de69f0fb74a851afd42e58" translate="yes" xml:space="preserve">
          <source>This flag is available in version 2.4.19 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a084ecd0bfd48157997bbe6bb878656a95e725" translate="yes" xml:space="preserve">
          <source>This flag is available in version 2.4.26 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8833698c0155695d17ca9b5ec0f0f780b606ce" translate="yes" xml:space="preserve">
          <source>This flag is only allowed in combination with &lt;code&gt;-B&lt;/code&gt; (bcrypt encryption). It sets the computing time used for the bcrypt algorithm (higher is more secure but slower, default: 5, valid: 4 to 31).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b290f484baa1746a7155de002cf9613416e25d6" translate="yes" xml:space="preserve">
          <source>This forces an HTTP/1.0 response to clients making an HTTP/1.0 request. It was originally implemented as a result of a problem with AOL's proxies. Some HTTP/1.0 clients may not behave correctly when given an HTTP/1.1 response, and this can be used to interoperate with them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5ab166a1a731540552bf4eaeb800a879e28d760" translate="yes" xml:space="preserve">
          <source>This forces the current configuration to inherit the configuration of the parent. In per-virtual-server context, this means that the maps, conditions and rules of the main server are inherited. In per-directory context this means that conditions and rules of the parent directory's &lt;code&gt;.htaccess&lt;/code&gt; configuration or &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; sections are inherited. The inherited rules are virtually copied to the section where this directive is being used. If used in combination with local rules, the inherited rules are copied behind the local rules. The position of this directive - below or above of local rules - has no influence on this behavior. If local rules forced the rewriting to stop, the inherited rules won't be processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b018dec3656cd96af66b7587298d00744dacdff1" translate="yes" xml:space="preserve">
          <source>This forces the request to be treated as a HTTP/1.0 request even if it was in a later dialect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6dbada16f918460437e3b024ef29ae527e401c9" translate="yes" xml:space="preserve">
          <source>This forces the server to be more careful when sending a redirect to the client. This is typically used when a client has a known problem handling redirects. This was originally implemented as a result of a problem with Microsoft's WebFolders software which has a problem handling redirects on directory resources via DAV methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4793f34fea2668d9df88d80ad72720b2f0f7d198" translate="yes" xml:space="preserve">
          <source>This form allows the devops admin to adjust various parameters, take workers offline, change load balancing methods and add new works. For example, clicking on the balancer itself, you will get the following page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a15d5f74920b03290bc24fb81de0a2889097b4" translate="yes" xml:space="preserve">
          <source>This format is also used with the other various &lt;code&gt;&lt;a href=&quot;mod/mod_cache_socache&quot;&gt;mod_cache_socache&lt;/a&gt;&lt;/code&gt; providers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b19059e8eca004b157ac69e14684d90b0d7dd4f2" translate="yes" xml:space="preserve">
          <source>This format is exactly the same as the Common Log Format, with the addition of two more fields. Each of the additional fields uses the percent-directive &lt;code&gt;%{&lt;em&gt;header&lt;/em&gt;}i&lt;/code&gt;, where &lt;em&gt;header&lt;/em&gt; can be any HTTP request header. The access log under this format will look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096d80095c6e70ca2d59f52989b1cc575fa5f553" translate="yes" xml:space="preserve">
          <source>This function is also subject to &lt;code&gt;timefmt&lt;/code&gt; format configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0354ca44a53ef5e14d210db60443eb7c35c3439" translate="yes" xml:space="preserve">
          <source>This generates a subdirectory &lt;var&gt;name&lt;/var&gt; (see option &lt;code&gt;-n&lt;/code&gt;) and there two files: A sample module source file named &lt;code&gt;mod_name.c&lt;/code&gt; which can be used as a template for creating your own modules or as a quick start for playing with the apxs mechanism. And a corresponding &lt;code&gt;Makefile&lt;/code&gt; for even easier build and installing of this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20476b0ad037d103e365dfa8c122e11463e00f7f" translate="yes" xml:space="preserve">
          <source>This handler function just prints out the uri or form encoded arguments to a plaintext page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93293ab5b8cf36fddc30d6ab449647fbcf6bca1" translate="yes" xml:space="preserve">
          <source>This happens while the server is already running. All other hosts will continue to work as before. While a certificate is not available, requests for the managed domain will be answered with a '503 Service Unavailable'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7506fe52285be8efcdfdc0afe357dd521502f3" translate="yes" xml:space="preserve">
          <source>This has the advantage that minimal resources are required on the server to keep track of sessions, and multiple servers within a server farm have no need to share session information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b98391fb2488e90f5c28cdbdb3ea93824e9a5216" translate="yes" xml:space="preserve">
          <source>This has the effect of returning &lt;code&gt;.html&lt;/code&gt; files in the &lt;code&gt;/foo/bar&lt;/code&gt; directory to being treated as normal files, rather than as candidates for parsing (see the &lt;code&gt;&lt;a href=&quot;mod_include&quot;&gt;mod_include&lt;/a&gt;&lt;/code&gt; module).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a26efbb6556e73cb8635136200869e3a58b403a" translate="yes" xml:space="preserve">
          <source>This has the potential to dramatically simplify the coding and configuration required in some web applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8091b090d1c4a33bbe3d0dfc551c4c36b6e50a05" translate="yes" xml:space="preserve">
          <source>This httpd has been configured with &lt;code&gt;Options FollowSymLinks&lt;/code&gt; and &lt;code&gt;AllowOverride None&lt;/code&gt;. Thus it doesn't need to &lt;code&gt;lstat(2)&lt;/code&gt; each directory in the path leading up to the requested file, nor check for &lt;code&gt;.htaccess&lt;/code&gt; files. It simply calls &lt;code&gt;stat(2)&lt;/code&gt; to verify that the file: 1) exists, and 2) is a regular file, not a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b041d239d7165dce2f66418221084c67598c9cf2" translate="yes" xml:space="preserve">
          <source>This indicates the compilation operation. It first compiles the C source files (.c) of &lt;var&gt;files&lt;/var&gt; into corresponding object files (.o) and then builds a dynamically shared object in &lt;var&gt;dsofile&lt;/var&gt; by linking these object files plus the remaining object files (.o and .a) of &lt;var&gt;files&lt;/var&gt;. If no &lt;code&gt;-o&lt;/code&gt; option is specified the output file is guessed from the first filename in &lt;var&gt;files&lt;/var&gt; and thus usually defaults to &lt;code&gt;mod_name.so&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22e74ded8de25683adccc9974e3448dc9f160e8d" translate="yes" xml:space="preserve">
          <source>This indicates the editing operation, which can be used with the &lt;code&gt;-a&lt;/code&gt; and &lt;code&gt;-A&lt;/code&gt; options similarly to the &lt;code&gt;-i&lt;/code&gt; operation to edit Apache's &lt;code&gt;httpd.conf&lt;/code&gt; configuration file without attempting to install the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a949cdb9bfa27d199434b09c8167575874163207" translate="yes" xml:space="preserve">
          <source>This indicates the installation operation and installs one or more dynamically shared objects into the server's &lt;var&gt;modules&lt;/var&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500be7dad5231b4b2ff567d7c63f0aa8b5cf50c9" translate="yes" xml:space="preserve">
          <source>This influences &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt;'s behaviour. If it contains a language tag (such as &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;ja&lt;/code&gt; or &lt;code&gt;x-klingon&lt;/code&gt;), &lt;code&gt;&lt;a href=&quot;mod/mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; tries to deliver a variant with that language. If there's no such variant, the normal &lt;a href=&quot;content-negotiation&quot;&gt;negotiation&lt;/a&gt; process applies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a5e3a115e02bf1f5295a6ac52dbfce8fe90bc71" translate="yes" xml:space="preserve">
          <source>This is NOT equivalent - don't do this! This will send all requests that have /image/ anywhere in them to /ftp/pub/image/:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f922dbf7cbf0fa8420374ee6b84aca49834c6ff" translate="yes" xml:space="preserve">
          <source>This is a Base module (always included) on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babfa2059b3102cb36483d5cd8a8df20ba7b437f" translate="yes" xml:space="preserve">
          <source>This is a convenience directive to ease http: to https: migration of your Managed Domains. With:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f739ef935ba9f086be01175e37d46619e252d08f" translate="yes" xml:space="preserve">
          <source>This is a historical behavior that may be used by some third-party modules (such as mod_php) for taking responsibility for the matching request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc26703e4960b680738e5f5047c25d2243362841" translate="yes" xml:space="preserve">
          <source>This is a mutex variant based on a Posix semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0892e2e0f7f97cf11bd9549674937cfc2b67cbf" translate="yes" xml:space="preserve">
          <source>This is a mutex variant based on a SystemV IPC semaphore.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a7db0821c0052cd9d9feb1c777bad892729b10" translate="yes" xml:space="preserve">
          <source>This is a mutex variant based on cross-process Posix thread mutexes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03157a65015ea4d0a1a37f0814c2b079b7c4b848" translate="yes" xml:space="preserve">
          <source>This is a mutex variant where a physical (lock-)file and the &lt;code&gt;fcntl()&lt;/code&gt; function are used as the mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c600e00c890445453ad2984406f78cb509350971" translate="yes" xml:space="preserve">
          <source>This is a server-wide setting to select a provider for the &lt;a href=&quot;../socache&quot;&gt;shared object cache&lt;/a&gt;, followed by optional arguments for that provider. Some possible values for &lt;var&gt;provider-name&lt;/var&gt; are &quot;dbm&quot;, &quot;dc&quot;, &quot;memcache&quot;, or &quot;shmcb&quot;, each subject to the appropriate module being loaded. If not set, your platform's default will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f78cf9fb7be98add9b88ce4b8a588e72b1c5125" translate="yes" xml:space="preserve">
          <source>This is a shortcut for ``&lt;code&gt;+SSLv3 +TLSv1&lt;/code&gt;'' or - when using OpenSSL 1.0.1 and later - ``&lt;code&gt;+SSLv3 +TLSv1 +TLSv1.1 +TLSv1.2&lt;/code&gt;'', respectively (except for OpenSSL versions compiled with the ``no-ssl3'' configuration option, where &lt;code&gt;all&lt;/code&gt; does not include &lt;code&gt;+SSLv3&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d1da23e2f5e97671199fec0d4085ee1c664b19" translate="yes" xml:space="preserve">
          <source>This is a simple configuration that compresses common text-based content types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a67e4e5f4fcc43aedc350c447ebfb3d289c4b61" translate="yes" xml:space="preserve">
          <source>This is a specialized version of &lt;code&gt;&lt;a href=&quot;#mdomain&quot;&gt;MDomain&lt;/a&gt;&lt;/code&gt;, it should be used only when a fine grained configuration is required. &lt;code&gt;&lt;a href=&quot;#mdomain&quot;&gt;MDomain&lt;/a&gt;&lt;/code&gt; is the suggested choice for the general use case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca491745f54eb2b4a50feea1e7e3696c0e21dafb" translate="yes" xml:space="preserve">
          <source>This is an adjustment of the above system, tailored for an ISP's web hosting server. Using &lt;code&gt;%2&lt;/code&gt;, we can select substrings of the server name to use in the filename so that, for example, the documents for &lt;code&gt;www.user.example.com&lt;/code&gt; are found in &lt;code&gt;/home/user/www&lt;/code&gt;. It uses a single &lt;code&gt;cgi-bin&lt;/code&gt; directory instead of one per virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="619123be02b796ac6e4a380dab96fe76804e7805" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;--cache-file=config.cache&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396078655c3f0355951330e005a44feb5e98c759" translate="yes" xml:space="preserve">
          <source>This is an index of the directives that are allowed in .htaccess files for various &lt;code&gt;&lt;a href=&quot;core#allowoverride&quot;&gt;AllowOverride&lt;/a&gt;&lt;/code&gt; settings, organized by class. Its intended purpose is to help server administrators verify the privileges they're granting to .htaccess users. For an overview of how .htaccess works, see the &lt;a href=&quot;../howto/htaccess&quot;&gt;.htaccess tutorial&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026d52c362f60af7e0c1a15632cb3201991b16ce" translate="yes" xml:space="preserve">
          <source>This is assigned the &lt;var&gt;route&lt;/var&gt; of the worker that will be used for the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="305d4fbc148ae871ffb9b8b6409aed6a76f5f0b0" translate="yes" xml:space="preserve">
          <source>This is assigned the &lt;var&gt;route&lt;/var&gt; parsed from the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3de6e3f6e75afa1b2a2334676fbdc18b38600ac" translate="yes" xml:space="preserve">
          <source>This is assigned the &lt;var&gt;stickysession&lt;/var&gt; value used for the current request. It is the name of the cookie or request parameter used for sticky sessions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7c27f0828602eb630703782f14b9bc303852a7" translate="yes" xml:space="preserve">
          <source>This is assigned the name of the balancer used for the current request. The value is something like &lt;code&gt;balancer://foo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="951e58c5bfa06adea0fdc10376c32ddb710f3c0b" translate="yes" xml:space="preserve">
          <source>This is assigned the name of the worker used for the current request. The value is something like &lt;code&gt;http://hostA:1234&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8539438f2d9fd904733b828b25b740abaf07e6" translate="yes" xml:space="preserve">
          <source>This is because all values of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02e69a5ea6397211490e47ef3e127d7a232d646" translate="yes" xml:space="preserve">
          <source>This is because this flag triggers the use of the default worker, which does not handle connection pooling/reuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f765231950bf4ed049a069b6531787ecfa597880" translate="yes" xml:space="preserve">
          <source>This is done by the origin server adding a &lt;code&gt;Vary&lt;/code&gt; header to indicate which headers must be taken into account by a cache when determining whether two variants are different from one another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c00c2089a9d9821fa025a1446b2c4f902ef8c43" translate="yes" xml:space="preserve">
          <source>This is done via the following ruleset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267ec506e48a80280e2d91fced25e7f45683f650" translate="yes" xml:space="preserve">
          <source>This is due to a limitation in older versions of OpenSSL which don't let the Apache HTTP Server determine the currently selected certificate at handshake time (when the DH parameters must be sent to the peer) but instead always provide the last configured certificate. Consequently, the server may select default DH parameters based on the length of the wrong certificate's key (ECC keys are much smaller than RSA/DSA ones and their length is not relevant for selecting DH primes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ae0c6007b5dae27eb870d99f39ad87d33d285e" translate="yes" xml:space="preserve">
          <source>This is expected to be a permanent limitation as there is no authorizer flow for retrieving a hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461f0db2b2c71e98cd52b7198d9969827e796d7d" translate="yes" xml:space="preserve">
          <source>This is expected to be permanently out of scope for this module. Application processes must be controlled by other means. For example, &lt;code&gt;&lt;a href=&quot;../programs/fcgistarter&quot;&gt;fcgistarter&lt;/a&gt;&lt;/code&gt; can be used to start them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869a43b38709e993825da9b6bda045ab0ecc01ed" translate="yes" xml:space="preserve">
          <source>This is necessary since multiple &lt;var&gt;URL-paths&lt;/var&gt; can map to the same filesystem location, potentially bypassing the &lt;code&gt;ScriptAlias&lt;/code&gt; and revealing the source code of the CGI scripts if they are not restricted by a &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;Directory&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59385dd69ab965d41058d5d82cef2148eec1ef84" translate="yes" xml:space="preserve">
          <source>This is one of the more common uses of SSI - to output the results of a CGI program, such as everybody's favorite, a ``hit counter.''</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b26a65f25593db805efaab921801778e92b270" translate="yes" xml:space="preserve">
          <source>This is roughly equivalent to the &lt;code&gt;?config&lt;/code&gt; query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0775b2cf1fc79269c85edc0f1c8d6af30a41da2d" translate="yes" xml:space="preserve">
          <source>This is set to 1 if the session route does not match the worker route (BALANCER_SESSION_ROUTE != BALANCER_WORKER_ROUTE) or the session does not yet have an established route. This can be used to determine when/if the client needs to be sent an updated route when sticky sessions are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c7616d7530117f7e5ac8e772edeb6d62ece750" translate="yes" xml:space="preserve">
          <source>This is similar to the &lt;code&gt;fcntl:/path/to/mutex&lt;/code&gt; method with the exception that the &lt;code&gt;flock()&lt;/code&gt; function is used to provide file locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b554610808b90882ecb2b94766d37b5018b7d90" translate="yes" xml:space="preserve">
          <source>This is the IP address of the client (remote host) which made the request to the server. If &lt;code&gt;&lt;a href=&quot;mod/core#hostnamelookups&quot;&gt;HostnameLookups&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;On&lt;/code&gt;, then the server will try to determine the hostname and log it in place of the IP address. However, this configuration is not recommended since it can significantly slow the server. Instead, it is best to use a log post-processor such as &lt;code&gt;&lt;a href=&quot;programs/logresolve&quot;&gt;logresolve&lt;/a&gt;&lt;/code&gt; to determine the hostnames. The IP address reported here is not necessarily the address of the machine at which the user is sitting. If a proxy server exists between the user and the server, this address will be the address of the proxy, rather than the originating machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccce8f691154f89dc302c56d97891077bc69dc37" translate="yes" xml:space="preserve">
          <source>This is the Secure Sockets Layer (SSL) protocol, version 3.0, from the Netscape Corporation. It is the successor to SSLv2 and the predecessor to TLSv1, but is deprecated in &lt;a href=&quot;http://www.ietf.org/rfc/rfc7568.txt&quot;&gt;RFC 7568&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae708bb801ea5118c0397e73ebd5899ae94a03c" translate="yes" xml:space="preserve">
          <source>This is the Transport Layer Security (TLS) protocol, version 1.0. It is the successor to SSLv3 and is defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2246.txt&quot;&gt;RFC 2246&lt;/a&gt;. It is supported by nearly every client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9b34cbcfbf1af6dbc3258f7e7f91e7ce866d9c" translate="yes" xml:space="preserve">
          <source>This is the already encrypted password to use for the &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; commands. You may use a hyphen (&lt;code&gt;-&lt;/code&gt;) if you want to get prompted for the password, but fill in the fields afterwards. Additionally when using the &lt;code&gt;update&lt;/code&gt; command, a period (&lt;code&gt;.&lt;/code&gt;) keeps the original password untouched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4825269fe31b074fd7652e525f17ba4b100ed32" translate="yes" xml:space="preserve">
          <source>This is the always available builtin seeding source. Its usage consumes minimum CPU cycles under runtime and hence can be always used without drawbacks. The source used for seeding the PRNG contains of the current time, the current process id and a randomly chosen 128 bytes extract of the stack. The drawback is that this is not really a strong source and at startup time (where the scoreboard is still not available) this source just produces a few bytes of entropy. So you should always, at least for the startup, use an additional seeding source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e02794a573250ed80d145eb756128f5023fcc3" translate="yes" xml:space="preserve">
          <source>This is the default where an interactive terminal dialog occurs at startup time just before Apache detaches from the terminal. Here the administrator has to manually enter the Pass Phrase for each encrypted Private Key file. Because a lot of SSL-enabled virtual hosts can be configured, the following reuse-scheme is used to minimize the dialog: When a Private Key file is encrypted, all known Pass Phrases (at the beginning there are none, of course) are tried. If one of those known Pass Phrases succeeds no dialog pops up for this particular Private Key file. If none succeeded, another Pass Phrase is queried on the terminal and remembered for the next round (where it perhaps can be reused).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2daf3692a4a4b3d0d877a438777224f56c112a3" translate="yes" xml:space="preserve">
          <source>This is the final &quot;fix anything&quot; phase before the content handlers are run. Any last-minute changes to the request should be made here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65d2c8ab261dffd2e372b1bc167005acda35d64" translate="yes" xml:space="preserve">
          <source>This is the first hook that will be called after a request has been mapped to a host or virtual host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a2a8b4e0abfc1710f580432e6e19ef44dd7ea5" translate="yes" xml:space="preserve">
          <source>This is the howto guide for the HTTP/2 implementation in Apache httpd. This feature is &lt;em&gt;production-ready&lt;/em&gt; and you may expect interfaces and directives to remain consistent releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071ae537a013f63adbea5139354c748a046087bf" translate="yes" xml:space="preserve">
          <source>This is the inverse of 'disablereuse' above, provided as a convenience for scheme handlers that require opt-in for connection reuse (such as &lt;code&gt;&lt;a href=&quot;mod_proxy_fcgi&quot;&gt;mod_proxy_fcgi&lt;/a&gt;&lt;/code&gt;). 2.4.11 and later only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddbdd511d846ce4b22e23c85afcf98b04aebd18" translate="yes" xml:space="preserve">
          <source>This is the key directive for rewriting HTML links. When parsing a document, whenever a link target matches &lt;var&gt;from-pattern&lt;/var&gt;, the matching portion will be rewritten to &lt;var&gt;to-pattern&lt;/var&gt;, as modified by any flags supplied and by the &lt;code&gt;&lt;a href=&quot;#proxyhtmlextended&quot;&gt;ProxyHTMLExtended&lt;/a&gt;&lt;/code&gt; directive. Only the elements specified using the &lt;code&gt;&lt;a href=&quot;#proxyhtmllinks&quot;&gt;ProxyHTMLLinks&lt;/a&gt;&lt;/code&gt; directive will be considered as HTML links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36cbe94e7d7a09f531e20a60875b99558e78a74d" translate="yes" xml:space="preserve">
          <source>This is the last way of submitting your problem report. You should only do this if you've already posted to the mailing lists, and had no success. Please follow the instructions on the above page &lt;em&gt;carefully&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5029caca4cd8091500a4d0a6c774e0b50bb2d061" translate="yes" xml:space="preserve">
          <source>This is the name of a provider defined with &lt;code&gt;AuthnzFcgiDefineProvider&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cbbdf556975d9c6071dd5cc9bfe568a7f6f5ac" translate="yes" xml:space="preserve">
          <source>This is the number of requests per second. This value is the result of dividing the number of requests by the total time taken</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82182e105f0477e70ca3575f19e5f4b294b4fa6f" translate="yes" xml:space="preserve">
          <source>This is the opposite of &lt;var&gt;proxy-sendcl&lt;/var&gt;. It allows request bodies to be sent to the backend using chunked transfer encoding. This allows the request to be efficiently streamed, but requires that the backend server supports HTTP/1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ee8c1497b67ef82d24c818bf9638fff7c53ad7" translate="yes" xml:space="preserve">
          <source>This is the place for your opaque comments about the user, like realname, mailaddress or such things. The server will ignore this field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517425f0068d56933523f1a90616f964330c37a7" translate="yes" xml:space="preserve">
          <source>This is the second way of submitting your problem report. Again, you must subscribe to the list first, but you can then easily discuss your problem with the whole Apache httpd user community.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9541ca9a2d3a1c709c33f184c69064efceafa5d0" translate="yes" xml:space="preserve">
          <source>This is the size in bytes of the first successfully returned document. If the document length changes during testing, the response is considered an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="263f99eb45e397224ae5a18ac611c30e1bb32553" translate="yes" xml:space="preserve">
          <source>This is the standard operation of the suEXEC wrapper's security model. It is somewhat stringent and can impose new limitations and guidelines for CGI/SSI design, but it was developed carefully step-by-step with security in mind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5efdc0278ed66216c1951405fd07b46430e826" translate="yes" xml:space="preserve">
          <source>This is the status code that the server sends back to the client. This information is very valuable, because it reveals whether the request resulted in a successful response (codes beginning in 2), a redirection (codes beginning in 3), an error caused by the client (codes beginning in 4), or an error in the server (codes beginning in 5). The full list of possible status codes can be found in the &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.txt&quot;&gt;HTTP specification&lt;/a&gt; (RFC2616 section 10).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435a0ea45288b55378b0c3c4f67701242df575bb" translate="yes" xml:space="preserve">
          <source>This is the time taken from the moment the first socket connection is created to the moment the last response is received</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0400800bb63f10bee97745da29901217f17cdb13" translate="yes" xml:space="preserve">
          <source>This is the userid of the person requesting the document as determined by HTTP authentication. The same value is typically provided to CGI scripts in the &lt;code&gt;REMOTE_USER&lt;/code&gt; environment variable. If the status code for the request (see below) is 401, then this value should not be trusted because the user is not yet authenticated. If the document is not password protected, this part will be &quot;&lt;code&gt;-&lt;/code&gt;&quot; just like the previous one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27005f76a7f04691d67da9d0311e33db27a8e96b" translate="yes" xml:space="preserve">
          <source>This is the version of the Apache httpd module API (the internal interface between server and module) in the current httpd build, as defined in include/ap_mmn.h. The module API version corresponds to the version of Apache httpd in use (in the release version of Apache httpd 1.3.14, for instance, it is 19990320:10), but is mainly of interest to module authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8d60c6ed5034c93f164d2ece4209b6d144ff21" translate="yes" xml:space="preserve">
          <source>This is to ensure that the user executing the wrapper is truly a user of the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2a11aeb887bb9bacd20211344c704969383286" translate="yes" xml:space="preserve">
          <source>This is true for .htaccess too since they have the same priority as &lt;code&gt;Directory&lt;/code&gt; in the merge order. The important concept to understand is that configuration sections like &lt;code&gt;Directory&lt;/code&gt; and &lt;code&gt;FilesMatch&lt;/code&gt; are not comparable to module specific directives like &lt;code&gt;&lt;a href=&quot;mod/mod_headers#header&quot;&gt;Header&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod/mod_rewrite#rewriterule&quot;&gt;RewriteRule&lt;/a&gt;&lt;/code&gt; because they operate on different levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdced36fe52cc483e076b36a6caea4196e2eeb0" translate="yes" xml:space="preserve">
          <source>This is used to assign a name to the provider which is used in other directives such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic#authbasicprovider&quot;&gt;AuthBasicProvider&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0901da5fc593056d2ef0402efc905742989be4c0" translate="yes" xml:space="preserve">
          <source>This is useful in situations, &lt;em&gt;e.g.&lt;/em&gt; when a client requesting &lt;code&gt;Accept: */*&lt;/code&gt; can not actually processes the content returned by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042105dd544a0f99939468e09ce00750c05b143b" translate="yes" xml:space="preserve">
          <source>This is useful when mapping to files that have literal question marks in their filename. If no query string is used in the substitution, a question mark can be appended to it in combination with this flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae477af6d786b6ba1d6b189043b21dbfba81eb2" translate="yes" xml:space="preserve">
          <source>This is usually caused by a &lt;code&gt;/dev/random&lt;/code&gt; device for &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl#sslrandomseed&quot;&gt;SSLRandomSeed&lt;/a&gt;&lt;/code&gt; which blocks the read(2) call until enough entropy is available to service the request. More information is available in the reference manual for the &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl#sslrandomseed&quot;&gt;SSLRandomSeed&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="734142c925f467b3f6b0a8e320a5c7d5f9024e9d" translate="yes" xml:space="preserve">
          <source>This is what you need to get the same effect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82bf5fcbe64baa2a1bb37f67ce2e92d184d8692" translate="yes" xml:space="preserve">
          <source>This is where the content is handled. Files are read, parsed, some are run, and the result is sent to the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f34800f843e0657130e696932d61d0c01ed3dff" translate="yes" xml:space="preserve">
          <source>This last may look confusing at first, so it helps to evaluate what the search filter will look like based on who connects, as shown below. If Fred User connects as &lt;code&gt;fuser&lt;/code&gt;, the filter would look like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e59be76bf2ba13e44dc610aad62f014bcad6c0" translate="yes" xml:space="preserve">
          <source>This leaves you with two rather shorter numbers to compare. It is, in theory, possible that these numbers may be the same, without the modulus numbers being the same, but the chances of this are overwhelmingly remote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349b79b2793fd45b76a446673a3b46159704cb82" translate="yes" xml:space="preserve">
          <source>This library is required but not longer bundled with httpd. Download the source code from &lt;a href=&quot;http://www.pcre.org/&quot;&gt;http://www.pcre.org&lt;/a&gt;, or install a Port or Package. If your build system can't find the pcre-config script installed by the PCRE build, point to it using the &lt;code&gt;--with-pcre&lt;/code&gt; parameter. On some platforms, you may have to install the corresponding &lt;code&gt;-dev&lt;/code&gt; package to allow httpd to build against your installed copy of PCRE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1869984c560930feaf2500ba79b66b9149b0cb31" translate="yes" xml:space="preserve">
          <source>This limit affects only request bodies, not its meta data such as headers. Also, it has no effect on response bodies as the window size for those are managed by the clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2a64e654aafe56f3d41bcee2d0831207eabc64" translate="yes" xml:space="preserve">
          <source>This loading can usually be done in two ways: automatically by a system program called &lt;code&gt;ld.so&lt;/code&gt; when an executable program is started or manually from within the executing program via a programmatic system interface to the Unix loader through the system calls &lt;code&gt;dlopen()/dlsym()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1595c5e832cb04c05c92fa8a4dde860d1860c048" translate="yes" xml:space="preserve">
          <source>This log will be opened as the user the child processes run as, &lt;em&gt;i.e.&lt;/em&gt; the user specified in the main &lt;code&gt;&lt;a href=&quot;mod_unixd#user&quot;&gt;User&lt;/a&gt;&lt;/code&gt; directive. This means that either the directory the script log is in needs to be writable by that user or the file needs to be manually created and set to be writable by that user. If you place the script log in your main logs directory, do &lt;strong&gt;NOT&lt;/strong&gt; change the directory permissions to make it writable by the user the child processes run as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb401652c5d3f6ee95590409cc78b5876629d414" translate="yes" xml:space="preserve">
          <source>This logged message may be captured in any of the following logs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb56cf9cfde83ddcde91815146c8d5e6d82b3473" translate="yes" xml:space="preserve">
          <source>This logs any cookie set by the back-end. You can track, whether the back-end sets the session cookie you expect, and to which value it is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6059076f96342a6aa9734381e6f99eb7d2820462" translate="yes" xml:space="preserve">
          <source>This makes direct h2c attractive for server to server communication as well, when the connection can be trusted or is secured by other means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5816147c91e69018f97068bd84a2e50c61c784a0" translate="yes" xml:space="preserve">
          <source>This makes it possible to support conditional logging of cached requests as per the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4bdf3bbd5fa65114cadcaef8bd0a601974e32c" translate="yes" xml:space="preserve">
          <source>This makes the icons part of the anchor for the filename, for fancy indexing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24920a03c1744dca7ab916790e1124dcba2af8b4" translate="yes" xml:space="preserve">
          <source>This makes the test case-insensitive - differences between 'A-Z' and 'a-z' are ignored, both in the expanded &lt;em&gt;TestString&lt;/em&gt; and the &lt;em&gt;CondPattern&lt;/em&gt;. This flag is effective only for comparisons between &lt;em&gt;TestString&lt;/em&gt; and &lt;em&gt;CondPattern&lt;/em&gt;. It has no effect on filesystem and subrequest checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903d4e32094a8ceb39a889ed42a3f0d85238bcc8" translate="yes" xml:space="preserve">
          <source>This makes use of a DBM hash file. The choice of underlying DBM used may be configurable if the installed APR version supports multiple DBM implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30861f551865523cf00f8c89d9c5c7f695d0fcfc" translate="yes" xml:space="preserve">
          <source>This makes use of a DBM hashfile on the local disk to synchronize the local OpenSSL memory caches of the server processes. This session cache may suffer reliability issues under high load. To use this, ensure that &lt;code&gt;&lt;a href=&quot;mod_socache_dbm&quot;&gt;mod_socache_dbm&lt;/a&gt;&lt;/code&gt; is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d471a9e6b3c835b777355cac542a73295f8f8c" translate="yes" xml:space="preserve">
          <source>This makes use of a high-performance cyclic buffer (approx. &lt;em&gt;size&lt;/em&gt; bytes in size) inside a shared memory segment in RAM (established via &lt;code&gt;/path/to/datafile&lt;/code&gt;) to synchronize the local OpenSSL memory caches of the server processes. This is the recommended session cache. To use this, ensure that &lt;code&gt;&lt;a href=&quot;mod_socache_shmcb&quot;&gt;mod_socache_shmcb&lt;/a&gt;&lt;/code&gt; is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="630698b5c51715de2805874d2cdc85376e089afe" translate="yes" xml:space="preserve">
          <source>This makes use of a high-performance cyclic buffer inside a shared memory segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0ee82e8f55b8b9b2ff1cbb1e6a24dc0ad678ce" translate="yes" xml:space="preserve">
          <source>This makes use of the &lt;a href=&quot;http://distcache.sourceforge.net/&quot;&gt;distcache&lt;/a&gt; distributed session caching libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2946c794be920d07bcc7f173fa21b9c564640582" translate="yes" xml:space="preserve">
          <source>This makes use of the &lt;a href=&quot;http://distcache.sourceforge.net/&quot;&gt;distcache&lt;/a&gt; distributed session caching libraries. The argument should specify the location of the server or proxy to be used using the distcache address syntax; for example, &lt;code&gt;UNIX:/path/to/socket&lt;/code&gt; specifies a UNIX domain socket (typically a local dc_client proxy); &lt;code&gt;IP:server.example.com:9001&lt;/code&gt; specifies an IP address. To use this, ensure that &lt;code&gt;&lt;a href=&quot;mod_socache_dc&quot;&gt;mod_socache_dc&lt;/a&gt;&lt;/code&gt; is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a50f6ba423c74b0e2036507340419d7ae933bc0" translate="yes" xml:space="preserve">
          <source>This makes use of the &lt;a href=&quot;http://memcached.org/&quot;&gt;memcached&lt;/a&gt; high-performance, distributed memory object caching system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4eff4b2d661660b6f4b8adb2bebb0ab79c6db7" translate="yes" xml:space="preserve">
          <source>This manual page only lists the command line arguments. For details of the directives necessary to configure digest authentication in &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; see the Apache manual, which is part of the Apache distribution or can be found at &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;http://httpd.apache.org/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01a73ea705ff0c6c949104fd06711582dbf268d" translate="yes" xml:space="preserve">
          <source>This manual page only lists the command line arguments. For details of the directives necessary to configure user authentication in &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; see the Apache manual, which is part of the Apache distribution or can be found at &lt;a href=&quot;http://httpd.apache.org&quot;&gt;http://httpd.apache.org/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c467a4305e252c8ec391c0fb14fa3da07e14bfc7" translate="yes" xml:space="preserve">
          <source>This manual page only lists the command line arguments. For details of the directives necessary to configure user authentication in &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; see the httpd manual, which is part of the Apache distribution or can be found at &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;http://httpd.apache.org/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a07af12930b0dc651c1574873a51f5cc2018930" translate="yes" xml:space="preserve">
          <source>This maps a request to an arbitrary location on your filesystem, much like the &lt;code&gt;&lt;a href=&quot;../mod/mod_alias#alias&quot;&gt;Alias&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acaeef753b1f99d06c90fe64ecc0bbe40d0063d" translate="yes" xml:space="preserve">
          <source>This may offer a substantial performance boost to some users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8441cef69537b9b013ddb6028b63c27d5364f80d" translate="yes" xml:space="preserve">
          <source>This means (and in fact encourages) that you can have multiple handlers (or hooks, or filters) in the same script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb929e0ee3cee78d700b2021b453cc9fd14add47" translate="yes" xml:space="preserve">
          <source>This memory-mapping sometimes yields a performance improvement. But in some environments, it is better to disable the memory-mapping to prevent operational problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d1f45e7e4b1659395e5508e4942077a92aeeea" translate="yes" xml:space="preserve">
          <source>This method of protocol switching is enabled by default on cleartext (potential h2c) connections and disabled on TLS (potential h2), as mandated by RFC 7540.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f92ca66ed5f5efe53b20966ffb8196cb57d0f83" translate="yes" xml:space="preserve">
          <source>This method of switching protocols is defined in HTTP/1.1 and uses the &quot;Upgrade&quot; header (thus the name) to announce willingness to use another protocol. This may happen on any request of a HTTP/1.1 connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49aef503f7cbf00e9dab1b5766511adbd4e5c208" translate="yes" xml:space="preserve">
          <source>This mode allows an external program to be used which acts as a pipe to a particular input device; the program is sent the standard prompt text used for the &lt;code&gt;builtin&lt;/code&gt; mode on &lt;code&gt;stdin&lt;/code&gt;, and is expected to write password strings on &lt;code&gt;stdout&lt;/code&gt;. If several passwords are needed (or an incorrect password is entered), additional prompt text will be written subsequent to the first password being returned, and more passwords must then be written back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b82175e7020c64b81cdc15f8a100097c9c47927" translate="yes" xml:space="preserve">
          <source>This mode offers the best performance, as the majority of server processing is bypassed. This mode however also bypasses the authentication and authorization phases of server processing, so this mode should be chosen with care when this is important.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41bbaee40a6a883f1fe7304931b757cb3f28f57" translate="yes" xml:space="preserve">
          <source>This mode offers the most flexibility, as the potential exists for caching to occur at a precisely controlled point in the filter chain, and cached content can be filtered or personalized before being sent to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1cffba95e7d3b1159feb068a37aed2c395e439c" translate="yes" xml:space="preserve">
          <source>This mode only has an effect when h2 or h2c is enabled via the &lt;code&gt;&lt;a href=&quot;core#protocols&quot;&gt;Protocols&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1b4881cf24d7638dc592b2aaa6d15cf79a4861" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;. It acts as a support module for &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt; and provides access to resources located in the server's file system. The formal name of this provider is &lt;code&gt;filesystem&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt; backend providers will be invoked by using the &lt;code&gt;&lt;a href=&quot;mod_dav#dav&quot;&gt;Dav&lt;/a&gt;&lt;/code&gt; directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b6ec26e092ce1d09cfbf15a4d3d0e4e66cb263" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and it provides load balancing for all the supported protocols. The most important ones are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26dd028f19c2d9f10706d842d1905bb6a55d3f88" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;, so in order to get the ability of handling HTTP/2 proxy requests, &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_proxy_http2&quot;&gt;mod_proxy_http2&lt;/a&gt;&lt;/code&gt; need to be both loaded by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a575e842ca6ce1218c1f0449dc23b5f369e1ec32" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ebb8fc8c2ea6112db47ff88d66f5312626b9f3" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the &lt;a href=&quot;http://python.ca/scgi/protocol.txt&quot;&gt;SCGI protocol, version 1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8640fac166d47de7aaaf54f8c85d63c67b19bcc" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the &lt;a href=&quot;http://uwsgi-docs.readthedocs.io/en/latest/index.html&quot;&gt;UWSGI protocol&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f209b341988bcdb8e9d3e65302bc43c3a08cd7" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the &lt;a href=&quot;http://www.fastcgi.com/&quot;&gt;FastCGI&lt;/a&gt; protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4636a08dc1f6c2c1b8acb97858858e3562887d9" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the &lt;code&gt;Apache JServ Protocol version 1.3&lt;/code&gt; (hereafter &lt;em&gt;AJP13&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b28a3fa3ed33ad9f2b5aa367a390fc86417f983" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the &lt;code&gt;CONNECT&lt;/code&gt; HTTP method. This method is mainly used to tunnel SSL requests through proxy servers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2f61110e397c9b91b9ff97271c5787b9af32836" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the passing the socket of the client to another process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fdf3aefdd4341d420eb373e100903c580d32e2" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the proxying FTP sites. Note that FTP support is currently limited to the GET method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed8aa62e96b776dc8004ece9097012a01ff5a24" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides support for the tunnelling of web socket connections to a backend websockets server. The connection is automatically upgraded to a websocket connection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38ebe49a178771d62ab23c09e9c41ec018fe6db" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_proxy&quot;&gt;mod_proxy&lt;/a&gt;&lt;/code&gt;. It provides the features used for proxying HTTP and HTTPS requests. &lt;code&gt;&lt;a href=&quot;mod_proxy_http&quot;&gt;mod_proxy_http&lt;/a&gt;&lt;/code&gt; supports HTTP/0.9, HTTP/1.0 and HTTP/1.1. It does &lt;em&gt;not&lt;/em&gt; provide any caching abilities. If you want to set up a caching proxy, you might want to use the additional service of the &lt;code&gt;&lt;a href=&quot;mod_cache&quot;&gt;mod_cache&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00af727f00edd13cb770e02d736d3ee09e817df7" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt;. Balancer manager enables dynamic update of balancer members. You can use balancer manager to change the balance factor of a particular member, or put it in the off line mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ecc5e3e873b221047787029d0d8c4ff504ed0e" translate="yes" xml:space="preserve">
          <source>This module &lt;em&gt;requires&lt;/em&gt; the service of &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a0ac7037cae1aaef338c56dc025cda56c0df93" translate="yes" xml:space="preserve">
          <source>This module adds three new logging directives. The characteristics of the request itself are logged by placing &quot;&lt;code&gt;%&lt;/code&gt;&quot; directives in the format string, which are replaced in the log file by the values as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b1c9e4215d8d498fafc9ccde59a47687cf94c8" translate="yes" xml:space="preserve">
          <source>This module allows FastCGI authorizer applications to authenticate users and authorize access to resources. It supports generic FastCGI authorizers which participate in a single phase for authentication and authorization as well as Apache httpd-specific authenticators and authorizors which participate in one or both phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad49d93e12c6a83e6c8056ca31dbf648c4c25e37" translate="yes" xml:space="preserve">
          <source>This module allows authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users through an ldap directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396b92582f8816393cc75119a059ccf433f61eb5" translate="yes" xml:space="preserve">
          <source>This module allows for control of internal environment variables that are used by various Apache HTTP Server modules. These variables are also provided to CGI scripts as native system environment variables, and available for use in SSI pages. Environment variables may be passed from the shell which invoked the &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; process. Alternatively, environment variables may be set or unset within the configuration process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbae989229020999e9823a9cab277eb0e6bdc8f" translate="yes" xml:space="preserve">
          <source>This module allows request bodies to be reflected back to the client, in the process passing the request through the output filter stack. A suitably configured chain of filters can be used to transform the request into a response. This module can be used to turn an output filter into an HTTP service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38c1e5d9eaf61f75bd5e505766f1a15284a1f21" translate="yes" xml:space="preserve">
          <source>This module allows the server to be extended with scripts written in the Lua programming language. The extension points (hooks) available with &lt;code&gt;&lt;a href=&quot;mod_lua&quot;&gt;mod_lua&lt;/a&gt;&lt;/code&gt; include many of the hooks available to natively compiled Apache HTTP Server modules, such as mapping requests to files, generating dynamic responses, access control, authentication, and authorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a0f7c6a2396e932882e974cefa3997f77c4b6bb" translate="yes" xml:space="preserve">
          <source>This module allows the use of HTTP Basic Authentication to restrict access by looking up users in the given providers. HTTP Digest Authentication is provided by &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;. This module should usually be combined with at least one authentication module such as &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; and one authorization module such as &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9037a21a0ea30f6131f2d92326c5301999123ddf" translate="yes" xml:space="preserve">
          <source>This module allows the use of an HTML login form to restrict access by looking up users in the given providers. HTML forms require significantly more configuration than the alternatives, however an HTML login form can provide a much friendlier experience for end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17813463bfde0643f9b9cee8fb339babfc72226" translate="yes" xml:space="preserve">
          <source>This module allows user-specific directories to be accessed using the &lt;code&gt;http://example.com/~user/&lt;/code&gt; syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35a12203eed4ea26747c6367c8ef7eaa07a829b" translate="yes" xml:space="preserve">
          <source>This module also leverages the core functions &lt;a href=&quot;https://ci.apache.org/projects/httpd/trunk/doxygen/group__APACHE__CORE__SCRIPT.html#ga0e81f9571a8a73f5da0e89e1f46d34b1&quot;&gt;ap_add_common_vars&lt;/a&gt; and &lt;a href=&quot;https://ci.apache.org/projects/httpd/trunk/doxygen/group__APACHE__CORE__SCRIPT.html#ga6b975cd7ff27a338cb8752381a4cc14f&quot;&gt;ap_add_cgi_vars&lt;/a&gt; to add environment variables like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a70ab21fc883d96c7497f3a74a52265491efce" translate="yes" xml:space="preserve">
          <source>This module authorizes access to files by comparing the userid used for HTTP authentication (the web userid) with the file-system owner or group of the requested file. The supplied username and password must be already properly verified by an authentication module, such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;mod_authz_owner&quot;&gt;mod_authz_owner&lt;/a&gt;&lt;/code&gt; recognizes two arguments for the &lt;code&gt;&lt;a href=&quot;mod_authz_core#require&quot;&gt;Require&lt;/a&gt;&lt;/code&gt; directive, &lt;code&gt;file-owner&lt;/code&gt; and &lt;code&gt;file-group&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974a96b335004f294ae8f6a75b7777597629b1e2" translate="yes" xml:space="preserve">
          <source>This module caches authentication and authorization results based on the configuration of &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt;. Changes made to the backing LDAP server will not be immediately reflected on the HTTP Server, including but not limited to user lockouts/revocations, password changes, or changes to group memberships. Consult the directives in &lt;code&gt;&lt;a href=&quot;mod_ldap&quot;&gt;mod_ldap&lt;/a&gt;&lt;/code&gt; for details of the cache tunables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc76b34a2d4d733b13dd0045f1cbf4d2180dcbce" translate="yes" xml:space="preserve">
          <source>This module can also provide database-backed user login/logout capabilities. These are likely to be of most value when used in conjunction with &lt;code&gt;&lt;a href=&quot;mod_authn_dbd&quot;&gt;mod_authn_dbd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480359169b46f2bed58ea03fc22485e26f713fa1" translate="yes" xml:space="preserve">
          <source>This module can be configured to provide HTTP/2 related information as additional environment variables to the SSI and CGI namespace, as well as in custom log configurations (see &lt;code&gt;%{VAR_NAME}e&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ac78f354f5e1a29ced89a11d4f3abb83708585" translate="yes" xml:space="preserve">
          <source>This module can be configured to provide several items of SSL information as additional environment variables to the SSI and CGI namespace. This information is not provided by default for performance reasons. (See &lt;code&gt;SSLOptions&lt;/code&gt; StdEnvVars, below.) The generated variables are listed in the table below. For backward compatibility the information can be made available under different names, too. Look in the &lt;a href=&quot;../ssl/ssl_compat&quot;&gt;Compatibility&lt;/a&gt; chapter for details on the compatibility variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1a4977c41f35d77e5f13f9e105c8863cfe522a" translate="yes" xml:space="preserve">
          <source>This module controls the setting of the &lt;code&gt;Expires&lt;/code&gt; HTTP header and the &lt;code&gt;max-age&lt;/code&gt; directive of the &lt;code&gt;Cache-Control&lt;/code&gt; HTTP header in server responses. The expiration date can set to be relative to either the time the source file was last modified, or to the time of the client access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57adf0b7ba8f3251f8b742347dc54fedca72fa59" translate="yes" xml:space="preserve">
          <source>This module creates dynamically configured mass reverse proxies, by mapping the Host: header of the HTTP request to a server name and backend URL stored in a DBM file. This allows for easy use of a huge number of reverse proxies with no configuration changes. It is much less feature-full than &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, which also provides dynamic growth, but is intended to handle much, much larger numbers of backends. It is ideally suited as a front-end HTTP switch and for micro-services architectures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116b1c30a09ce7957e6806359fc10725d1e58549" translate="yes" xml:space="preserve">
          <source>This module creates dynamically configured virtual hosts, by allowing the IP address and/or the &lt;code&gt;Host:&lt;/code&gt; header of the HTTP request to be used as part of the pathname to determine what files to serve. This allows for easy use of a huge number of virtual hosts with similar configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849c1a0e6fb762ba001a3f6473f65e6f8ac87ffc" translate="yes" xml:space="preserve">
          <source>This module determines the &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME type&lt;/a&gt; of files in the same way the Unix &lt;code&gt;file(1)&lt;/code&gt; command works: it looks at the first few bytes of the file. It is intended as a &quot;second line of defense&quot; for cases that &lt;code&gt;&lt;a href=&quot;mod_mime&quot;&gt;mod_mime&lt;/a&gt;&lt;/code&gt; can't resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2943e3895f64af5e5a8d14cc4cd5749667eedd26" translate="yes" xml:space="preserve">
          <source>This module does not provide any configuration directives of its own. It requires the services of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, and provides the &lt;code&gt;bybusyness&lt;/code&gt; load balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f914785e858748f5782c0967737783f1c8bedf" translate="yes" xml:space="preserve">
          <source>This module does not provide any configuration directives of its own. It requires the services of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, and provides the &lt;code&gt;byrequests&lt;/code&gt; load balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ab8dbca1d19e18efd75c3b83802a4c6cd8b685" translate="yes" xml:space="preserve">
          <source>This module does not provide any configuration directives of its own. It requires the services of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;, and provides the &lt;code&gt;bytraffic&lt;/code&gt; load balancing method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d76ca2771a2124d2a44b319d4baf958f441cc2" translate="yes" xml:space="preserve">
          <source>This module enables SSL encryption for a specified port. It takes advantage of the SSL encryption functionality that is built into the NetWare operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ae091b1bbed4d9ea9141707b3faddbc657588d8" translate="yes" xml:space="preserve">
          <source>This module enables different Virtual Hosts to run with different Unix &lt;var&gt;User&lt;/var&gt; and &lt;var&gt;Group&lt;/var&gt; IDs, and with different &lt;a href=&quot;http://sosc-dr.sun.com/bigadmin/features/articles/least_privilege.jsp&quot;&gt;Solaris Privileges&lt;/a&gt;. In particular, it offers a solution to the problem of privilege separation between different Virtual Hosts, first promised by the abandoned perchild MPM. It also offers other security enhancements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e8e7c275327a09375adb0c50b6c4a42fe0ac9c6" translate="yes" xml:space="preserve">
          <source>This module enables smart, context-sensitive configuration of output content filters. For example, apache can be configured to process different content-types through different filters, even when the content-type is not known in advance (e.g. in a proxy).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf3a27ae29b274334d4389585cf51f72509816af" translate="yes" xml:space="preserve">
          <source>This module has two directives. The &lt;code&gt;&lt;a href=&quot;#action&quot;&gt;Action&lt;/a&gt;&lt;/code&gt; directive lets you run CGI scripts whenever a file of a certain &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#mime-type&quot;&gt;MIME content type&lt;/a&gt; is requested. The &lt;code&gt;&lt;a href=&quot;#script&quot;&gt;Script&lt;/a&gt;&lt;/code&gt; directive lets you run CGI scripts whenever a particular method is used in a request. This makes it much easier to execute scripts that process files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0dd1e1e6e318e8ee5fd722205f8f399e35ca15" translate="yes" xml:space="preserve">
          <source>This module holds a great deal of power over httpd, which is both a strength and a potential security risk. It is &lt;strong&gt;not&lt;/strong&gt; recommended that you use this module on a server that is shared with users you do not trust, as it can be abused to change the internal workings of httpd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c83829ca7915437b638fe374143b25d406ca22d" translate="yes" xml:space="preserve">
          <source>This module implements HTTP Digest Authentication (&lt;a href=&quot;http://www.faqs.org/rfcs/rfc2617.html&quot;&gt;RFC2617&lt;/a&gt;), and provides an alternative to &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; where the password is not transmitted as cleartext. However, this does &lt;strong&gt;not&lt;/strong&gt; lead to a significant security advantage over basic authentication. On the other hand, the password storage on the server is much less secure with digest authentication than with basic authentication. Therefore, using basic auth and encrypting the whole connection using &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt; is a much better alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a7694644cd995ee3409e67991d8d72f4a3b51c" translate="yes" xml:space="preserve">
          <source>This module implements a generic locking API which can be used by any backend provider of &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;. It &lt;em&gt;requires&lt;/em&gt; at least the service of &lt;code&gt;&lt;a href=&quot;mod_dav&quot;&gt;mod_dav&lt;/a&gt;&lt;/code&gt;. But without a backend provider which makes use of it, it's useless and should not be loaded into the server. A sample backend module which actually utilizes &lt;code&gt;&lt;a href=&quot;mod_dav_lock&quot;&gt;mod_dav_lock&lt;/a&gt;&lt;/code&gt; is &lt;a href=&quot;http://subversion.apache.org/&quot;&gt;mod_dav_svn&lt;/a&gt;, the subversion provider module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6357b4b6633b8d614698477a9a4cc13bbf2ac9a1" translate="yes" xml:space="preserve">
          <source>This module implements the Internet Server extension API. It allows Internet Server extensions (&lt;em&gt;e.g.&lt;/em&gt; ISAPI .dll modules) to be served by Apache for Windows, subject to the noted restrictions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bfa26768faa88ebfb005de5e4e90c6b0fd1ac8e" translate="yes" xml:space="preserve">
          <source>This module is an extension of and borrows heavily from the &lt;code&gt;mod_mmap_static&lt;/code&gt; module in Apache 1.3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932bade00fc751f37d940bc8239137637bceece8" translate="yes" xml:space="preserve">
          <source>This module is derived from a free version of the &lt;code&gt;file(1)&lt;/code&gt; command for Unix, which uses &quot;magic numbers&quot; and other hints from a file's contents to figure out what the contents are. This module is active only if the magic file is specified by the &lt;code&gt;&lt;a href=&quot;#mimemagicfile&quot;&gt;MimeMagicFile&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505909416cd415994aeb0c9a3726338f6fdb4e45" translate="yes" xml:space="preserve">
          <source>This module is designed for the use in test suites and large networks which have to deal with different httpd versions and different configurations. It provides a new container -- &lt;code&gt;&lt;a href=&quot;#ifversion&quot;&gt;&amp;lt;IfVersion&amp;gt;&lt;/a&gt;&lt;/code&gt;, which allows a flexible version checking including numeric comparisons and regular expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea5b570b6458d3863969dfb3eb6dfde6db63ec0" translate="yes" xml:space="preserve">
          <source>This module is experimental. Its behaviors, directives, and defaults are subject to more change from release to release relative to other standard modules. Users are encouraged to consult the &quot;CHANGES&quot; file for potential updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df1a656b5fb13a1e316071ac690d8fb5235ec0eb" translate="yes" xml:space="preserve">
          <source>This module is inactive until this directive is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8474d82794a35197ac628611c576dd7900b192ff" translate="yes" xml:space="preserve">
          <source>This module is not for every system. If your system is barely keeping up with its load or if you're performing a web server benchmark, you may not want to enable this because the processing is not free.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2b9407234f2a2d91e04d20daab3faa50abaf05" translate="yes" xml:space="preserve">
          <source>This module is not intended to replace the dynamic capability of &lt;code&gt;&lt;a href=&quot;mod_proxy_balancer&quot;&gt;mod_proxy_balancer&lt;/a&gt;&lt;/code&gt;. Instead, it is intended to be mostly a lightweight and fast alternative to using &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;RewriteMap&lt;/code&gt; and the &lt;code&gt;[P]&lt;/code&gt; flag for mapped reverse proxying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2a6d9624a98c113d77a229fff31d246b8c6af1" translate="yes" xml:space="preserve">
          <source>This module is used by default instead of &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt; whenever a multi-threaded MPM is selected during the compilation process. At the user level, this module is identical in configuration and operation to &lt;code&gt;&lt;a href=&quot;mod_cgi&quot;&gt;mod_cgi&lt;/a&gt;&lt;/code&gt;. The only exception is the additional directive &lt;code&gt;ScriptSock&lt;/code&gt; which gives the name of the socket to use for communication with the cgi daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a611457e8ce7ac285e98b7a346cf52f2a96db3fb" translate="yes" xml:space="preserve">
          <source>This module is used to assign content metadata to the content selected for an HTTP response by mapping patterns in the URI or filenames to the metadata values. For example, the filename extensions of content files often define the content's Internet media type, language, character set, and content-encoding. This information is sent in HTTP messages containing that content and used in content negotiation when selecting alternatives, such that the user's preferences are respected when choosing one of several possible contents to serve. See &lt;code&gt;&lt;a href=&quot;mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; for more information about &lt;a href=&quot;../content-negotiation&quot;&gt;content negotiation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262c38416d73e24b45f081d4c89b477122d54c9f" translate="yes" xml:space="preserve">
          <source>This module is used to reverse proxy to a backend application server (e.g. Apache Tomcat) using the AJP13 protocol. The usage is similar to an HTTP reverse proxy, but uses the &lt;code&gt;ajp://&lt;/code&gt; prefix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14758b883e4af73249442be23c7240eeb81f780" translate="yes" xml:space="preserve">
          <source>This module is used to treat the useragent which initiated the request as the originating useragent as identified by httpd for the purposes of authorization and logging, even where that useragent is behind a load balancer, front end server, or proxy server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b022f61ca8d59cf9ae11ff7282892d8b04504f22" translate="yes" xml:space="preserve">
          <source>This module makes it easy to restrict what HTTP methods can be used on a server. The most common configuration would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a771079f8ff41a680e085425ea1c2f0e921ce00e" translate="yes" xml:space="preserve">
          <source>This module manages common properties of domains for one or more virtual hosts. Specifically it can use the ACME protocol (&lt;a href=&quot;https://datatracker.ietf.org/doc/draft-ietf-acme-acme/&quot;&gt;RFC Draft&lt;/a&gt;) to automate certificate provisioning. These will be configured for managed domains and their virtual hosts automatically. This includes renewal of certificates before they expire. The most famous Certificate Authority currently implementing the ACME protocol is &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eb765374bd629cc5b115489f57d07f895760e6" translate="yes" xml:space="preserve">
          <source>This module manages database connections, in a manner optimised for the platform. On non-threaded platforms, it provides a persistent connection in the manner of classic LAMP (Linux, Apache, Mysql, Perl/PHP/Python). On threaded platform, it provides an altogether more scalable and efficient &lt;em&gt;connection pool&lt;/em&gt;, as described in &lt;a href=&quot;http://www.apachetutor.org/dev/reslist&quot;&gt;this article at ApacheTutor&lt;/a&gt;. Note that &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt; supersedes the modules presented in that article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718ec8f59bdb79da96bafb20c8af4ae556673e74" translate="yes" xml:space="preserve">
          <source>This module processes &lt;code&gt;.map&lt;/code&gt; files, thereby replacing the functionality of the &lt;code&gt;imagemap&lt;/code&gt; CGI program. Any directory or document type configured to use the handler &lt;code&gt;imap-file&lt;/code&gt; (using either &lt;code&gt;&lt;a href=&quot;mod_mime#addhandler&quot;&gt;AddHandler&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#sethandler&quot;&gt;SetHandler&lt;/a&gt;&lt;/code&gt;) will be processed by this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95f4d742d9700f1175e0d35e4578b6251f254af" translate="yes" xml:space="preserve">
          <source>This module provides HTTP/2 (&lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;RFC 7540&lt;/a&gt;) support for the Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96915f51bc952c2e0926113290357d6b9065d0cb" translate="yes" xml:space="preserve">
          <source>This module provides SSL v3 and TLS v1.x support for the Apache HTTP Server. SSL v2 is no longer supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a98e7113dcb4b46b03417e18fcb5bb4a6f4d9025" translate="yes" xml:space="preserve">
          <source>This module provides a filter which will process files before they are sent to the client. The processing is controlled by specially formatted SGML comments, referred to as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73aeaf5e7d1faaec2fc5768a95b6ac1d2b3d6b2" translate="yes" xml:space="preserve">
          <source>This module provides a magic token for each request which is guaranteed to be unique across &quot;all&quot; requests under very specific conditions. The unique identifier is even unique across multiple machines in a properly configured cluster of machines. The environment variable &lt;code&gt;UNIQUE_ID&lt;/code&gt; is set to the identifier for each request. Unique identifiers are useful for various reasons which are beyond the scope of this document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7452ef0c0789107dc31f046470a0b155c5365a76" translate="yes" xml:space="preserve">
          <source>This module provides a small subset of configuration mechanisms implemented by Russian Apache and its associated &lt;code&gt;mod_charset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dadb6c697edaca3bc31bca2f1ebd310670112e" translate="yes" xml:space="preserve">
          <source>This module provides an example protocol module to illustrate the concept. It provides a simple echo server. Telnet to it and type stuff, and it will echo it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08debe4b46ca60088aefd5e2927777bcd087bec7" translate="yes" xml:space="preserve">
          <source>This module provides an output filter to rewrite HTML links in a proxy situation, to ensure that links work for users outside the proxy. It serves the same purpose as Apache's &lt;code&gt;&lt;a href=&quot;mod_proxy#proxypassreverse&quot;&gt;ProxyPassReverse&lt;/a&gt;&lt;/code&gt; directive does for HTTP headers, and is an essential component of a reverse proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd11f3d0e5bc9b88e1b3515c399a56466d535a0c" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users similar to anonymous-ftp sites, &lt;em&gt;i.e.&lt;/em&gt; have a 'magic' user id 'anonymous' and the email address as a password. These email addresses can be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fec523ee3d51c0c508792260dbdddb01312eb05" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users by looking up users in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b6603cdeaae6a28393c8215b9a8154814015be" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users by looking up users in SQL tables. Similar functionality is provided by, for example, &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2db2bd7eba6e6cc0d380e74c76d3063901ba6848" translate="yes" xml:space="preserve">
          <source>This module provides authentication front-ends such as &lt;code&gt;&lt;a href=&quot;mod_auth_digest&quot;&gt;mod_auth_digest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_auth_basic&quot;&gt;mod_auth_basic&lt;/a&gt;&lt;/code&gt; to authenticate users by looking up users in plain text password files. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authn_dbm&quot;&gt;mod_authn_dbm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7c277c2badad69e93f8892336474afe5704f9e" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authz_dbm&quot;&gt;mod_authz_dbm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb61824cac3cf0992ba3aef54771167d12516b5" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile&quot;&gt;mod_authz_groupfile&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_authz_dbm&quot;&gt;mod_authz_dbm&lt;/a&gt;&lt;/code&gt;, with the exception that this module queries a SQL database to determine whether a user is a member of a group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81568f49615855ce7aec49eebb408e37bae8f7a6" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site by group membership. Similar functionality is provided by &lt;code&gt;&lt;a href=&quot;mod_authz_groupfile&quot;&gt;mod_authz_groupfile&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b288e1de7b5bd314f401055616fafe378ce36d" translate="yes" xml:space="preserve">
          <source>This module provides authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site. &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt; grants access if the authenticated user is listed in a &lt;code&gt;Require user&lt;/code&gt; directive. Alternatively &lt;code&gt;Require valid-user&lt;/code&gt; can be used to grant access to all successfully authenticated users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7122f9472822d923a35d39b8f143bde8b5d94719" translate="yes" xml:space="preserve">
          <source>This module provides class 1 and class 2 &lt;a href=&quot;http://www.webdav.org&quot;&gt;WebDAV&lt;/a&gt; ('Web-based Distributed Authoring and Versioning') functionality for Apache. This extension to the HTTP protocol allows creating, moving, copying, and deleting resources and collections on a remote web server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aad6533fa1c78b152e4df9f54500f03fcda868c" translate="yes" xml:space="preserve">
          <source>This module provides core authentication capabilities to allow or deny access to portions of the web site. &lt;code&gt;&lt;a href=&quot;mod_authn_core&quot;&gt;mod_authn_core&lt;/a&gt;&lt;/code&gt; provides directives that are common to all authentication providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ece937e5e58bfb9c69ac432b1e7b9e5f5881a3c" translate="yes" xml:space="preserve">
          <source>This module provides core authorization capabilities so that authenticated users can be allowed or denied access to portions of the web site. &lt;code&gt;&lt;a href=&quot;mod_authz_core&quot;&gt;mod_authz_core&lt;/a&gt;&lt;/code&gt; provides the functionality to register various authorization providers. It is usually used in conjunction with an authentication provider module such as &lt;code&gt;&lt;a href=&quot;mod_authn_file&quot;&gt;mod_authn_file&lt;/a&gt;&lt;/code&gt; and an authorization module such as &lt;code&gt;&lt;a href=&quot;mod_authz_user&quot;&gt;mod_authz_user&lt;/a&gt;&lt;/code&gt;. It also allows for advanced logic to be applied to the authorization processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10af84134fd1ae0953d82d32aa3f7bacad44eaf" translate="yes" xml:space="preserve">
          <source>This module provides directives to control and modify HTTP request and response headers. Headers can be merged, replaced or removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073162830a062a30190dac40df2e51cd042f39ef" translate="yes" xml:space="preserve">
          <source>This module provides enhanced internationalisation support for markup-aware filter modules such as &lt;code&gt;&lt;a href=&quot;mod_proxy_html&quot;&gt;mod_proxy_html&lt;/a&gt;&lt;/code&gt;. It can automatically detect the encoding of input data and ensure they are correctly processed by the &lt;a href=&quot;http://xmlsoft.org/&quot;&gt;libxml2&lt;/a&gt; parser, including converting to Unicode (UTF-8) where necessary. It can also convert data to an encoding of choice after markup processing, and will ensure the correct &lt;var&gt;charset&lt;/var&gt; value is set in the HTTP &lt;var&gt;Content-Type&lt;/var&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ad46d70888962c7d3fe77e42fa09d07a771e65" translate="yes" xml:space="preserve">
          <source>This module provides for dynamic health checking of balancer members (workers). This can be enabled on a worker-by-worker basis. The health check is done independently of the actual reverse proxy requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba38b47d1bc6195ff70e5bc7cae7c242fbd1a5d0" translate="yes" xml:space="preserve">
          <source>This module provides for flexible logging of client requests. Logs are written in a customizable format, and may be written directly to a file, or to an external program. Conditional logging is provided so that individual requests may be included or excluded from the logs based on characteristics of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf96c66dde9d429933493c83aeaf2c4113c9568d" translate="yes" xml:space="preserve">
          <source>This module provides for forensic logging of client requests. Logging is done before and after processing a request, so the forensic log contains two log lines for each request. The forensic logger is very strict, which means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b24c13a95a30aadab063edd005f98ba406867f" translate="yes" xml:space="preserve">
          <source>This module provides support for a server wide per user session interface. Sessions can be used for keeping track of whether a user has been logged in, or for other per user information that should be kept available across requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d085b15e494fcee004e49414a20da446b2276093" translate="yes" xml:space="preserve">
          <source>This module provides the ability to buffer the input and output filter stacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da79fe00d58921e467ca7a845f71fb6c416237a1" translate="yes" xml:space="preserve">
          <source>This module provides the ability to convert a response into an &lt;a href=&quot;http://tools.ietf.org/html/rfc2397&quot;&gt;RFC2397 data URL&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b955282988c7acef27b703d9ca66ef7de1c4da" translate="yes" xml:space="preserve">
          <source>This module provides the handler &lt;code&gt;send-as-is&lt;/code&gt; which causes Apache HTTP Server to send the document without adding most of the usual HTTP headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5006f42ea5911c347b19a994ffd86fabaf2b10a3" translate="yes" xml:space="preserve">
          <source>This module provides the logging of input and output number of bytes received/sent per request. The numbers reflect the actual bytes as received on the network, which then takes into account the headers and bodies of requests and responses. The counting is done before SSL/TLS on input and after SSL/TLS on output, so the numbers will correctly reflect any changes made by encryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb6c3101002756904091ee8381281820c234274" translate="yes" xml:space="preserve">
          <source>This module queries an &lt;a href=&quot;http://www.ietf.org/rfc/rfc1413.txt&quot;&gt;RFC 1413&lt;/a&gt; compatible daemon on a remote host to look up the owner of a connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf226d1291ef2887d713fa1c88dd80ff15ed934" translate="yes" xml:space="preserve">
          <source>This module relies on &lt;a href=&quot;http://nghttp2.org/&quot;&gt;libnghttp2&lt;/a&gt; to provide the core http/2 engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acdd6a3b10919e13fac92adde06712b02ebc33ec" translate="yes" xml:space="preserve">
          <source>This module relies on &lt;a href=&quot;http://www.openssl.org/&quot;&gt;OpenSSL&lt;/a&gt; to provide the cryptography engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5c8beb5aa8269be8336de1d5429c1b85cc9fac" translate="yes" xml:space="preserve">
          <source>This module relies on &lt;code&gt;&lt;a href=&quot;mod_dbd&quot;&gt;mod_dbd&lt;/a&gt;&lt;/code&gt; to specify the backend database driver and connection parameters, and manage the database connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0e00dc2ec0e9521d1e5c333b444a60e8747ea5" translate="yes" xml:space="preserve">
          <source>This module requires &lt;code&gt;&lt;a href=&quot;mod_log_config&quot;&gt;mod_log_config&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cb176951ec47d10b727f42574dafc1dfc0c000" translate="yes" xml:space="preserve">
          <source>This module requires &lt;code&gt;&lt;a href=&quot;mod_watchdog&quot;&gt;mod_watchdog&lt;/a&gt;&lt;/code&gt; to be loaded as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d661449bb931d4a23384faf31af4f7b8899d291b" translate="yes" xml:space="preserve">
          <source>This module should be used with care, as when the &lt;code&gt;&lt;a href=&quot;#cachequickhandler&quot;&gt;CacheQuickHandler&lt;/a&gt;&lt;/code&gt; directive is in its default value of &lt;strong&gt;on&lt;/strong&gt;, the &lt;code&gt;&lt;a href=&quot;mod_access_compat#allow&quot;&gt;Allow&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_access_compat#deny&quot;&gt;Deny&lt;/a&gt;&lt;/code&gt; directives will be circumvented. You should not enable quick handler caching for any content to which you wish to limit access by client host name, address or environment variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e69cd9be22dec28a6bf45e3bd74c7973694c05c" translate="yes" xml:space="preserve">
          <source>This module should be used with care. You can easily create a broken site using &lt;code&gt;&lt;a href=&quot;mod_file_cache&quot;&gt;mod_file_cache&lt;/a&gt;&lt;/code&gt;, so read this document carefully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531ff69e5d869497819ae70cffaa5580efeb04ff" translate="yes" xml:space="preserve">
          <source>This module uses the services of &lt;code&gt;&lt;a href=&quot;mod_slotmem_shm&quot;&gt;mod_slotmem_shm&lt;/a&gt;&lt;/code&gt; when available instead of flat-file storage. No configuration is required to use &lt;code&gt;&lt;a href=&quot;mod_slotmem_shm&quot;&gt;mod_slotmem_shm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d182dd1322bdaffa01ff606205997d2f4b74a60" translate="yes" xml:space="preserve">
          <source>This module was created to improve the performance of websites relying on backend connections to LDAP servers. In addition to the functions provided by the standard LDAP libraries, this module adds an LDAP connection pool and an LDAP shared memory cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0226bcc72aa56030277aa69439ebdcf84c75f7" translate="yes" xml:space="preserve">
          <source>This module, in combination with the &lt;code&gt;&lt;a href=&quot;../programs/suexec&quot;&gt;suexec&lt;/a&gt;&lt;/code&gt; support program allows CGI scripts to run as a specified user and Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5a4c6b97b965f880e6a9ee6568af6712670cd8" translate="yes" xml:space="preserve">
          <source>This modules load balancing algorithm favors servers with more ready (idle) capacity over time, but does not select the server with the most ready capacity every time. Servers that have 0 active clients are penalized, with the assumption that they are not fully initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9b957798e73b91e0165f319ddd3b8dc177aa70" translate="yes" xml:space="preserve">
          <source>This mpm showed some scalability bottlenecks in the past leading to the following error: &quot;&lt;strong&gt;scoreboard is full, not at MaxRequestWorkers&lt;/strong&gt;&quot;. &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; limits the number of simultaneous requests that will be served at any given time and also the number of allowed processes (&lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;mpm_common#threadsperchild&quot;&gt;ThreadsPerChild&lt;/a&gt;&lt;/code&gt;), meanwhile the Scoreboard is a representation of all the running processes and the status of their worker threads. If the scoreboard is full (so all the threads have a state that is not idle) but the number of active requests served is not &lt;code&gt;&lt;a href=&quot;mpm_common#maxrequestworkers&quot;&gt;MaxRequestWorkers&lt;/a&gt;&lt;/code&gt;, it means that some of them are blocking new requests that could be served but that are queued instead (up to the limit imposed by &lt;code&gt;&lt;a href=&quot;mpm_common#listenbacklog&quot;&gt;ListenBacklog&lt;/a&gt;&lt;/code&gt;). Most of the times the threads are stuck in the Graceful state, namely they are waiting to finish their work with a TCP connection to safely terminate and free up a scoreboard slot (for example handling long running requests, slow clients or connections with keep-alive enabled). Two scenarios are very common:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6e2a065e9cf38b8abe87798daf2821019a030d" translate="yes" xml:space="preserve">
          <source>This must be a fully qualified URL (&lt;em&gt;e.g.&lt;/em&gt;&lt;code&gt;http://server/location&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8179f0a2f09a0466d814a4c7204b324e430045" translate="yes" xml:space="preserve">
          <source>This must be set to &lt;em&gt;authn&lt;/em&gt; for authentication, &lt;em&gt;authz&lt;/em&gt; for authorization, or &lt;em&gt;authnz&lt;/em&gt; for a generic FastCGI authorizer which performs both checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48da63918e48b8f94a962d697f4c9957308d84f" translate="yes" xml:space="preserve">
          <source>This naturally adds some expense at the end of a connection, but it is required for a reliable implementation. As HTTP/1.1 becomes more prevalent, and all connections are persistent, this expense will be amortized over more requests. If you want to play with fire and disable this feature, you can define &lt;code&gt;NO_LINGCLOSE&lt;/code&gt;, but this is not recommended at all. In particular, as HTTP/1.1 pipelined persistent connections come into use, &lt;code&gt;lingering_close&lt;/code&gt; is an absolute necessity (and &lt;a href=&quot;http://www.w3.org/Protocols/HTTP/Performance/Pipeline.html&quot;&gt; pipelined connections are faster&lt;/a&gt;, so you want to support them).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08755ce721a5a441e2481a8ddaf72bf5fbf9c79c" translate="yes" xml:space="preserve">
          <source>This new architecture, leveraging non-blocking sockets and modern kernel features exposed by &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt; (like Linux's epoll), no longer requires the &lt;code&gt;mpm-accept&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;core#mutex&quot;&gt;Mutex&lt;/a&gt;&lt;/code&gt; configured to avoid the thundering herd problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9cec60f9fc445e963bd1716a7d808911b7c713" translate="yes" xml:space="preserve">
          <source>This note is set to the value &lt;code&gt;1&lt;/code&gt; if access was denied due to an &lt;code&gt;SSLRequire&lt;/code&gt; or &lt;code&gt;SSLRequireSSL&lt;/code&gt; directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523b65e3ffe3f3fe5e4bf1f83664d08b410b4917" translate="yes" xml:space="preserve">
          <source>This notice may not be removed or altered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e5f4b7035ebee20a0f6028e8fe4640c31b82dde" translate="yes" xml:space="preserve">
          <source>This one is different than others because the server scope is quite long lived, and multiple threads will have the same server_rec. To accommodate this, server scoped Lua states are stored in an apr resource list. The &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; arguments specify the minimum and maximum number of Lua states to keep in the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662d8e6a7a7ca9d74f8cb91a0f2bc04b7999c700" translate="yes" xml:space="preserve">
          <source>This option allows the old behavior to be used where the document root is not prefixed to a local path that was reduced from a URL. Available in 2.4.26 and later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee0ea264eef4b1d446087932fd7a0e6f062e23b" translate="yes" xml:space="preserve">
          <source>This option allows to set the URL of a HTTP proxy that should be used for all queries to OCSP responders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a581c4f1ef1249f7b71b5fc61c5da8df619611" translate="yes" xml:space="preserve">
          <source>This option also supports reverse proxy configuration; a backend webserver can be embedded within a virtualhost URL space even if that server is hidden by another forward proxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639320cd76896f40e3c1b2bd6c6f55cf00c92034" translate="yes" xml:space="preserve">
          <source>This option behaves like to &lt;code&gt;--enable-mods-shared&lt;/code&gt;, and will also link the given modules dynamically. The special keyword &lt;code&gt;none&lt;/code&gt; disables the build of all modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6b03257ff57c37545e7341519e80631ba1b01c" translate="yes" xml:space="preserve">
          <source>This option behaves similar to &lt;code&gt;--enable-mods-shared&lt;/code&gt;, but will link the given modules statically. This mean, these modules will always be present while running &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;. They need not be loaded with &lt;code&gt;&lt;a href=&quot;../mod/mod_so#loadmodule&quot;&gt;LoadModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b88b38d55ccbbdd6e6c6f736916beb63ac5174" translate="yes" xml:space="preserve">
          <source>This option causes &lt;code&gt;&lt;a href=&quot;mod_autoindex&quot;&gt;mod_autoindex&lt;/a&gt;&lt;/code&gt; to ignore all query variables from the client, including sort order (implies &lt;code&gt;&lt;a href=&quot;#indexoptions.suppresscolumnsorting&quot;&gt;SuppressColumnSorting&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c403c5a30af62eecd6c567318d0410e8e9289c" translate="yes" xml:space="preserve">
          <source>This option causes apxs to link against the apr/apr-util libraries. This is useful when compiling helper programs that use the apr/apr-util libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907c6c8605fbfd5bc4e87d78daa535233001b89b" translate="yes" xml:space="preserve">
          <source>This option changes the apxs settings described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0da524a327f51bffff537d5d8ef98bea216ceac" translate="yes" xml:space="preserve">
          <source>This option determines whether queries to OCSP responders should contain a nonce or not. By default, a query nonce is always used and checked against the response's one. When the responder does not use nonces (e.g. Microsoft OCSP Responder), this option should be turned &lt;code&gt;off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc060f3aaee0d84d46e182e32077a200c8aea18" translate="yes" xml:space="preserve">
          <source>This option enables OCSP stapling, as defined by the &quot;Certificate Status Request&quot; TLS extension specified in RFC 6066. If enabled (and requested by the client), mod_ssl will include an OCSP response for its own certificate in the TLS handshake. Configuring an &lt;code&gt;&lt;a href=&quot;#sslstaplingcache&quot;&gt;SSLStaplingCache&lt;/a&gt;&lt;/code&gt; is a prerequisite for enabling OCSP stapling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73229df70d7fd83ee5530e1f0f24d12104e4130" translate="yes" xml:space="preserve">
          <source>This option enables OCSP validation of the client certificate chain. If this option is enabled, certificates in the client's certificate chain will be validated against an OCSP responder after normal verification (including CRL checks) have taken place. In mode 'leaf', only the client certificate itself will be validated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa38d36794d26fa81be18eab84681eed6cf9b381" translate="yes" xml:space="preserve">
          <source>This option enables the suEXEC feature which is never installed or activated by default. At least one &lt;code&gt;--with-suexec-xxxxx&lt;/code&gt; option has to be provided together with the &lt;code&gt;--enable-suexec&lt;/code&gt; option to let APACI accept your request for using the suEXEC feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a2d5cc8eba43032895097a77a8f5865c358d72" translate="yes" xml:space="preserve">
          <source>This option forces the configured default OCSP responder to be used during OCSP certificate validation, regardless of whether the certificate being validated references an OCSP responder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51356eee074dce5d4355a751cb3f2078553a2bb" translate="yes" xml:space="preserve">
          <source>This option forces the current and child configurations to ignore all rules that would be inherited from a parent specifying &lt;code&gt;InheritDown&lt;/code&gt; or &lt;code&gt;InheritDownBefore&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864eb42e3b727e40fd353d4d899079a198ffd445" translate="yes" xml:space="preserve">
          <source>This option gets ignored if set anywhere other than &lt;code&gt;&lt;a href=&quot;#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt;, as &lt;code&gt;&lt;a href=&quot;mod_negotiation&quot;&gt;mod_negotiation&lt;/a&gt;&lt;/code&gt; needs real resources to compare against and evaluate from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1442f925252aac76c450990b2c691e07fd654003" translate="yes" xml:space="preserve">
          <source>This option influences how values of the &lt;code&gt;SSL_{CLIENT,SERVER}_{I,S}_DN&lt;/code&gt; variables are formatted. Since version 2.3.11, Apache HTTPD uses a RFC 2253 compatible format by default. This uses commas as delimiters between the attributes, allows the use of non-ASCII characters (which are converted to UTF8), escapes various special characters with backslashes, and sorts the attributes with the &quot;C&quot; attribute last.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eedd6faf2b8a5f08d055d09916fd666cac899f0a" translate="yes" xml:space="preserve">
          <source>This option is directly passed through to the compilation command(s). Use this to add your own defines to the build process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c578ea0fe86219e13fda477ae9d746ec04ffe800" translate="yes" xml:space="preserve">
          <source>This option is directly passed through to the compilation command(s). Use this to add your own include directories to search to the build process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c98358200244465a1be14f6f30626ea3478c95" translate="yes" xml:space="preserve">
          <source>This option is directly passed through to the linker command. Use this to add your own libraries to search to the build process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd640bda7f901bc9c662ffdd4a583379882e6fc" translate="yes" xml:space="preserve">
          <source>This option is directly passed through to the linker command. Use this to add your own library directories to search to the build process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="911a7097cb06665a772a36a6e21939f0d632f7bb" translate="yes" xml:space="preserve">
          <source>This option is of use only for HTTP proxying, as handled by &lt;code&gt;&lt;a href=&quot;mod_proxy_http&quot;&gt;mod_proxy_http&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de5db55c6663a6b0b31f1f8021a5fc0313b20d18" translate="yes" xml:space="preserve">
          <source>This option is only available if httpd was compiled against an SNI capable version of OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbecd99de51d2fbd226aa0168e8e1f2fe38218a" translate="yes" xml:space="preserve">
          <source>This option is only configurable when Apache HTTP Server is linked with an LDAP SDK that implements &lt;code&gt;LDAP_OPT_DEBUG&lt;/code&gt; or &lt;code&gt;LDAP_OPT_DEBUG_LEVEL&lt;/code&gt;, such as OpenLDAP (a value of 7 is verbose) or Tivoli Directory Server (a value of 65535 is verbose).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffe751dbf4f4eea02f49522f138bc769b5ee413" translate="yes" xml:space="preserve">
          <source>This option is provided for compatibility with releases prior to 2.4.11, where trailers were always merged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d8332533ea3770f96c6f215c1185bd5fceb022" translate="yes" xml:space="preserve">
          <source>This option is useful to add small external modules consisting of one source file. For more complex modules you should read the vendor's documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e8b555a74a719e902e858e5ad39b9b7775bdd3" translate="yes" xml:space="preserve">
          <source>This option passes &lt;var&gt;compiler-flags&lt;/var&gt; as additional flags to the &lt;code&gt;libtool --mode=compile&lt;/code&gt; command. Use this to add local compiler-specific options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d2c867b2ce3d781db65e34f36f45460e89cd6ba" translate="yes" xml:space="preserve">
          <source>This option passes &lt;var&gt;linker-flags&lt;/var&gt; as additional flags to the &lt;code&gt;libtool --mode=link&lt;/code&gt; command. Use this to add local linker-specific options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c1411966497e7af0dc5eecc9998ee17a7f0014" translate="yes" xml:space="preserve">
          <source>This option sets the default OCSP responder to use. If &lt;code&gt;&lt;a href=&quot;#sslocspoverrideresponder&quot;&gt;SSLOCSPOverrideResponder&lt;/a&gt;&lt;/code&gt; is not enabled, the URI given will be used only if no responder URI is specified in the certificate being verified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18abe1531f9efc939cc4e185b00ce06c69db1c91" translate="yes" xml:space="preserve">
          <source>This option sets the maximum allowable age (&quot;freshness&quot;) for OCSP responses. The default value (&lt;code&gt;-1&lt;/code&gt;) does not enforce a maximum age, which means that OCSP responses are considered valid as long as their &lt;code&gt;nextUpdate&lt;/code&gt; field is in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5205388552aa4a00b9e544be4e72e59505afe6" translate="yes" xml:space="preserve">
          <source>This option sets the maximum allowable age (&quot;freshness&quot;) when considering OCSP responses for stapling purposes, i.e. when &lt;code&gt;&lt;a href=&quot;#sslusestapling&quot;&gt;SSLUseStapling&lt;/a&gt;&lt;/code&gt; is turned on. The default value (&lt;code&gt;-1&lt;/code&gt;) does not enforce a maximum age, which means that OCSP responses are considered valid as long as their &lt;code&gt;nextUpdate&lt;/code&gt; field is in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8904ac35db8338f054731b586c53157bc4a83f2e" translate="yes" xml:space="preserve">
          <source>This option sets the maximum allowable time skew for OCSP responses (when checking their &lt;code&gt;thisUpdate&lt;/code&gt; and &lt;code&gt;nextUpdate&lt;/code&gt; fields).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd7780f5bc30bc73fbec9cce6cbfca86069eebe" translate="yes" xml:space="preserve">
          <source>This option sets the maximum allowable time skew when mod_ssl checks the &lt;code&gt;thisUpdate&lt;/code&gt; and &lt;code&gt;nextUpdate&lt;/code&gt; fields of OCSP responses which get included in the TLS handshake (OCSP stapling). Only applicable if &lt;code&gt;&lt;a href=&quot;#sslusestapling&quot;&gt;SSLUseStapling&lt;/a&gt;&lt;/code&gt; is turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cabf8864774b49447803f98ab319228e792718" translate="yes" xml:space="preserve">
          <source>This option sets the timeout for queries to OCSP responders when &lt;code&gt;&lt;a href=&quot;#sslusestapling&quot;&gt;SSLUseStapling&lt;/a&gt;&lt;/code&gt; is enabled and mod_ssl is querying a responder for OCSP stapling purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dafea1b0fbc7fe454793e9fb91d0a5439144c36" translate="yes" xml:space="preserve">
          <source>This option sets the timeout for queries to OCSP responders, when &lt;code&gt;&lt;a href=&quot;#sslocspenable&quot;&gt;SSLOCSPEnable&lt;/a&gt;&lt;/code&gt; is turned on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006569a153d2abbe62e144712bf189d02ffc1efc" translate="yes" xml:space="preserve">
          <source>This option should normally be turned &lt;code&gt;Off&lt;/code&gt;. It is mostly useful in special configurations like proxied mass name-based virtual hosting, where the original Host header needs to be evaluated by the backend server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a188982d89c08509676fb5c28aefeab861eafd" translate="yes" xml:space="preserve">
          <source>This option should not be considered a security restriction, since symlink testing is subject to race conditions that make it circumventable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af73d362475a6013eb5e471cc574c101561674e" translate="yes" xml:space="preserve">
          <source>This option tracks additional data per worker about the currently executing request and creates a utilization summary. You can see these variables during runtime by configuring &lt;code&gt;&lt;a href=&quot;mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt;. Note that other modules may rely on this scoreboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e5863f2022d980dad9faceecb27e922f1cdfa9" translate="yes" xml:space="preserve">
          <source>This option with &lt;code&gt;FancyIndexing&lt;/code&gt; constructs a simple table for the fancy directory listing. It is necessary for utf-8 enabled platforms or if file names or description text will alternate between left-to-right and right-to-left reading order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec09ea3f607cb56d353fd3c68a7aa4a595a51af" translate="yes" xml:space="preserve">
          <source>This optional directive can be used to specify the set of &lt;em&gt;acceptable CA names&lt;/em&gt; which will be sent to the client when a client certificate is requested. See the &lt;code&gt;&lt;a href=&quot;#sslcadnrequestfile&quot;&gt;SSLCADNRequestFile&lt;/a&gt;&lt;/code&gt; directive for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec049236f1dd61788c44cbb139365fb559ee746" translate="yes" xml:space="preserve">
          <source>This order has the same effect as &lt;code&gt;Order Allow,Deny&lt;/code&gt; and is deprecated in its favor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a8b966dbabab8aed90ff9d9c3204d792c7b503" translate="yes" xml:space="preserve">
          <source>This page could be summarized with the statement: don't configure Apache HTTP Server in such a way that it relies on DNS resolution for parsing of the configuration files. If httpd requires DNS resolution to parse the configuration files then your server may be subject to reliability problems (ie. it might not start up), or denial and theft of service attacks (including virtual hosts able to steal hits from other virtual hosts).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6522f84b4908e89f5035ad3fdf2bedbcaf94ba" translate="yes" xml:space="preserve">
          <source>This page covers backwards compatibility between mod_ssl and other SSL solutions. mod_ssl is not the only SSL solution for Apache; four additional products are (or were) also available: Ben Laurie's freely available &lt;a href=&quot;http://www.apache-ssl.org/&quot;&gt;Apache-SSL&lt;/a&gt; (from where mod_ssl were originally derived in 1998), Red Hat's commercial Secure Web Server (which was based on mod_ssl), Covalent's commercial Raven SSL Module (also based on mod_ssl) and finally C2Net's (now Red Hat's) commercial product &lt;a href=&quot;http://www.redhat.com/explore/stronghold/&quot;&gt;Stronghold&lt;/a&gt; (based on a different evolution branch, named Sioux up to Stronghold 2.x, and based on mod_ssl since Stronghold 3.x).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae574509ef3386d13fbe41fdd8837d6f043c8a1a" translate="yes" xml:space="preserve">
          <source>This page documents all the executable programs included with the Apache HTTP Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cd179129fff67d851042ee7567e36fc40f6ace" translate="yes" xml:space="preserve">
          <source>This page documents all the relevant standards that the Apache HTTP Server follows, along with brief descriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b55559a648271bddb917b87faa2ac6bfe80c27" translate="yes" xml:space="preserve">
          <source>This parameter should be used when you have a firewall between your Apache httpd and the backend server, which tends to drop inactive connections. This flag will tell the Operating System to send &lt;code&gt;KEEP_ALIVE&lt;/code&gt; messages on inactive connections and thus prevent the firewall from dropping the connection. To enable keepalive, set this property value to &lt;code&gt;On&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa9c860ba0bc72fcaf7bd2d318ad5f6f4392656" translate="yes" xml:space="preserve">
          <source>This parameter should be used when you want to force mod_proxy to immediately close a connection to the backend after being used, and thus, disable its persistent connection and pool for that backend. This helps in various situations where a firewall between Apache httpd and the backend server (regardless of protocol) tends to silently drop connections or when backends themselves may be under round- robin DNS. When connection reuse is enabled each backend domain is resolved (with a DNS query) only once per child process and cached for all further connections until the child is recycled. To disable connection reuse, set this property value to &lt;code&gt;On&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31466bc729c72a3d7d363fad811b1434869bcd53" translate="yes" xml:space="preserve">
          <source>This parameter specifies the internet media type (&lt;em&gt;i.e.&lt;/em&gt;, MIME type) of documents which should be filtered. By default, all documents are filtered. If &lt;code&gt;intype=&lt;/code&gt; is specified, the filter will be disabled for documents of other types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109131c12baec54f629aecc1d915c3d61f544b9d" translate="yes" xml:space="preserve">
          <source>This parameter specifies the internet media type (&lt;em&gt;i.e.&lt;/em&gt;, MIME type) of filtered documents. It is useful when the filter changes the internet media type as part of the filtering operation. By default, the internet media type is unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c21c33e26ed87544fe0354eeaa5ee211364048" translate="yes" xml:space="preserve">
          <source>This parameter specifies the name of an environment variable which must be set, or the filter will be disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd8cfded5a363eb133bbe8734499b6315c11c116" translate="yes" xml:space="preserve">
          <source>This parameter specifies the name of an environment variable which, if set, will disable the filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d17e3fbd24eef11a9cf84a5a73f899aa0f9fdde" translate="yes" xml:space="preserve">
          <source>This parameter specifies the numeric value for filter type that the filter should be registered as. The default value, AP_FTYPE_RESOURCE, is sufficient in most cases. If the filter needs to operate at a different point in the filter chain than resource filters, then this parameter will be necessary. See the AP_FTYPE_foo definitions in util_filter.h for appropriate values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360cbcfef2821bd925bb866896880bb8ff5424fe" translate="yes" xml:space="preserve">
          <source>This particular &lt;code&gt;SSLStaplingCache&lt;/code&gt; directive requires &lt;code&gt;&lt;a href=&quot;../mod/mod_socache_shmcb&quot;&gt;mod_socache_shmcb&lt;/a&gt;&lt;/code&gt; (from the &lt;code&gt;shmcb&lt;/code&gt; prefix on the directive's argument). This module is usually enabled already for &lt;code&gt;SSLSessionCache&lt;/code&gt; or on behalf of some module other than &lt;code&gt;&lt;a href=&quot;../mod/mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;. If you enabled an SSL session cache using a mechanism other than &lt;code&gt;&lt;a href=&quot;../mod/mod_socache_shmcb&quot;&gt;mod_socache_shmcb&lt;/a&gt;&lt;/code&gt;, use that alternative mechanism for &lt;code&gt;SSLStaplingCache&lt;/code&gt; as well. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30aa1b85858dab4a48bc0a930125f328532d4a93" translate="yes" xml:space="preserve">
          <source>This perl script is designed to be run at a frequent interval by something like cron. It connects to the server and downloads the status information. It reformats the information to a single line and logs it to a file. Adjust the variables at the top of the script to specify the location of the resulting logfile. &lt;code&gt;&lt;a href=&quot;../mod/mod_status&quot;&gt;mod_status&lt;/a&gt;&lt;/code&gt; will need to be loaded and configured in order for this script to do its job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2b79877c3e1e63b0dd38921a84b90bad8db614" translate="yes" xml:space="preserve">
          <source>This perl script will take a combined Web server access log file and break its contents into separate files. It assumes that the first field of each line is the virtual host identity, put there using the &quot;&lt;code&gt;%v&lt;/code&gt;&quot; variable in &lt;code&gt;&lt;a href=&quot;../mod/mod_log_config#logformat&quot;&gt;LogFormat&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca05d25abb6c74e90fca7732624bfe2d05ab7b60" translate="yes" xml:space="preserve">
          <source>This phase authorizes a user based on the negotiated credentials, such as user ID, client certificate etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a4bad4965dbe93c7bf55c7a73960dc9a29e966" translate="yes" xml:space="preserve">
          <source>This phase checks the requested file and assigns a content type and a handler to it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ad48aae38cdcadc787543e1f5d92c0a472cfcb" translate="yes" xml:space="preserve">
          <source>This phase checks whether a client has access to a resource. This phase is run before the user is authenticated, so beware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e88e6bc95cd513590874cab3fd7f405649cb0a" translate="yes" xml:space="preserve">
          <source>This phase happens late in the request processing, after all the request phases have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0417e65a2d4134007be067cf55bda0967722831e" translate="yes" xml:space="preserve">
          <source>This phase happens very early on during the request processing, just after the request has been parsed. If the content is found within the cache, it is served immediately and almost all request processing is bypassed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07f86af7329fc6a963a4724ded7e3df1a955ffa" translate="yes" xml:space="preserve">
          <source>This phase is run immediately after the request has been mapped to a virtal host, and can be used to either do some request processing before the other phases kick in, or to serve a request without the need to translate, map to storage et cetera. As this phase is run before anything else, directives such as &lt;code&gt;&lt;a href=&quot;core#location&quot;&gt;&amp;lt;Location&amp;gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;core#directory&quot;&gt;&amp;lt;Directory&amp;gt;&lt;/a&gt;&lt;/code&gt; are void in this phase, just as URIs have not been properly parsed yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056f30f044d1a7a1a5a2edce09c8ca86f364e078" translate="yes" xml:space="preserve">
          <source>This phase it used to check the negotiated user ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4185f16e3ba663fe53c7470dcd8c7658c3d5629f" translate="yes" xml:space="preserve">
          <source>This phase maps files to their physical, cached or external/proxied storage. It can be used by proxy or caching modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d30b21d47e39c7e63b2abc2a6243bf3011741d6" translate="yes" xml:space="preserve">
          <source>This phase translates the requested URI into a filename on the system. Modules such as &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt; operate in this phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28abbe7d400df4d209d67f6142a0920ff1d22acf" translate="yes" xml:space="preserve">
          <source>This port therefore features a built-in protocol level conversion for the server-internal strings (which the compiler translated to EBCDIC strings) and thus for all server-generated documents. The hard coded ASCII escapes &lt;code&gt;\012&lt;/code&gt; and &lt;code&gt;\015&lt;/code&gt; which are ubiquitous in the server code are an exception: they are already the binary encoding of the ASCII &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\r&lt;/code&gt; and must not be converted to ASCII a second time. This exception is only relevant for server-generated strings; and &lt;em&gt;external&lt;/em&gt; EBCDIC documents are not expected to contain ASCII newline characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ef65aa898cd1f4626d7db85baf6f30f649aedc" translate="yes" xml:space="preserve">
          <source>This presents a somewhat elevated risk in comparison to the other types of attack it is possible to make as the Apache user. If you are using &lt;code&gt;&lt;a href=&quot;mod/mod_cache_disk&quot;&gt;mod_cache_disk&lt;/a&gt;&lt;/code&gt; you should bear this in mind - ensure you upgrade httpd when security upgrades are announced and run CGI processes as a non-Apache user using &lt;a href=&quot;suexec&quot;&gt;suEXEC&lt;/a&gt; if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1bafef16b6d9ff75ea4a7efa7bd229edf6db5b" translate="yes" xml:space="preserve">
          <source>This prevents the use of &lt;code&gt;.htaccess&lt;/code&gt; files in all directories apart from those specifically enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9948aef509bb323bf1de4db0cca81e761e123af3" translate="yes" xml:space="preserve">
          <source>This prints out a plain text listing of all existing variables and their values. Special characters are entity encoded (see the &lt;code&gt;&lt;a href=&quot;#element.echo&quot;&gt;echo&lt;/a&gt;&lt;/code&gt; element for details) before being output. There are no attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc614f82251af591c836ca2bc9a74a57e2453958" translate="yes" xml:space="preserve">
          <source>This process &lt;em&gt;should&lt;/em&gt; give you some idea what client, or what type of requests, are primarily responsible for your load problems. Often you will identify a particular web application that is misbehaving, or a particular client that is attacking your site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fba48411404606ab29a5e4d28ed756cd97582aa" translate="yes" xml:space="preserve">
          <source>This program is not safe as a setuid executable. Do &lt;em&gt;not&lt;/em&gt; make it setuid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b176d8ca5bd27c2f2927bc143ca1399296938da" translate="yes" xml:space="preserve">
          <source>This program is started once, when the Apache HTTP Server is started, and then communicates with the rewriting engine via &lt;code&gt;STDIN&lt;/code&gt; and &lt;code&gt;STDOUT&lt;/code&gt;. That is, for each map function lookup, it expects one argument via &lt;code&gt;STDIN&lt;/code&gt;, and should return one new-line terminated response string on &lt;code&gt;STDOUT&lt;/code&gt;. If there is no corresponding lookup value, the map program should return the four-character string &quot;&lt;code&gt;NULL&lt;/code&gt;&quot; to indicate this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5fbef90c07f2523d16ff9c450f4ef4d136e875" translate="yes" xml:space="preserve">
          <source>This program, when run with the name of your vhost log file, will generate one file for each virtual host that appears in your log file. Each file will be called &lt;code&gt;hostname.log&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e921a1043ed6f9b93fcf96aebfa1844e432d41" translate="yes" xml:space="preserve">
          <source>This provides the content of &lt;code&gt;foo.day.html&lt;/code&gt; under the URL &lt;code&gt;foo.html&lt;/code&gt; from &lt;code&gt;07:01-18:59&lt;/code&gt; and at the remaining time the contents of &lt;code&gt;foo.night.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac41596f7ee593b65542282d34a783855f04c5a" translate="yes" xml:space="preserve">
          <source>This redirection is handled by the server, not the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd46dba046b58c919f2edde689343db88488fde" translate="yes" xml:space="preserve">
          <source>This referenced file is simply the concatenation of the various PEM-encoded certificate files, in order of preference. Use this directive alternatively or additionally to &lt;code&gt;SSLProxyMachineCertificatePath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5418d23c4e23df4d87a0c6ed01af292c9f8bff07" translate="yes" xml:space="preserve">
          <source>This referenced file is simply the concatenation of the various PEM-encoded certificate files. Upon startup, each client certificate configured will be examined and a chain of trust will be constructed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b32c898875f1188130901b62c08ab47da0cc1a" translate="yes" xml:space="preserve">
          <source>This replaces the per-module logging directives, such as &lt;code&gt;RewriteLog&lt;/code&gt;, that were present in earlier versions of the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03fe41e1328b8572529ec412dfdc72ff1c73a13" translate="yes" xml:space="preserve">
          <source>This returns the &lt;code&gt;Last-Modified&lt;/code&gt; and &lt;code&gt;ETag&lt;/code&gt; values for the listed directory in the HTTP header. It is only valid if the operating system and file system return appropriate stat() results. Some Unix systems do so, as do OS2's JFS and Win32's NTFS volumes. OS2 and Win32 FAT volumes, for example, do not. Once this feature is enabled, the client or proxy can track changes to the list of files when they perform a &lt;code&gt;HEAD&lt;/code&gt; request. Note some operating systems correctly track new and removed files, but do not track changes for sizes or dates of the files within the directory. &lt;strong&gt;Changes to the size or date stamp of an existing file will not update the &lt;code&gt;Last-Modified&lt;/code&gt; header on all Unix platforms.&lt;/strong&gt; If this is a concern, leave this option disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a83a3198fe49c513e49767f729d7a25c9a1774e" translate="yes" xml:space="preserve">
          <source>This rewrite ruleset lets you use hyperlinks of the form &lt;code&gt;&amp;lt;a href=&quot;document.html_SSL&quot;&amp;gt;&lt;/code&gt;, to switch to HTTPS in a relative link. (Replace SSL with NOSSL to switch to HTTP.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c37b9b2e501eaa36ae13036b2da71f2657eb323" translate="yes" xml:space="preserve">
          <source>This ruleset is designed to use in a per-directory context (In a &amp;lt;Directory&amp;gt; block or in a .htaccess file), so that the &lt;code&gt;-f&lt;/code&gt; checks are looking at the correct directory path. You may need to set a &lt;code&gt;&lt;a href=&quot;../mod/mod_rewrite#rewritebase&quot;&gt;RewriteBase&lt;/a&gt;&lt;/code&gt; directive to specify the directory base that you're working in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed7f7fa992aba25bebb99f5a80997acb25e8c90" translate="yes" xml:space="preserve">
          <source>This ruleset relies on &lt;code&gt;&lt;a href=&quot;../mod/core#hostnamelookups&quot;&gt;HostNameLookups&lt;/a&gt;&lt;/code&gt; being set &lt;code&gt;on&lt;/code&gt;, which can be a significant performance hit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658414e63178a7093eb957bdc84fb5e1074512b9" translate="yes" xml:space="preserve">
          <source>This says that any pushed stream of content type 'application/json' should be send out &lt;em&gt;before&lt;/em&gt; X. This makes P1 dependent on Y and X dependent on P1. So, X will be stalled as long as P1 has data to send. The effective weight is inherited from the client stream. Specifying a weight is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df9cf3b4792af8582fef8ca536e287c3c23be7b" translate="yes" xml:space="preserve">
          <source>This scheme allows mod_ssl to be maximally flexible (because for N encrypted Private Key files you &lt;em&gt;can&lt;/em&gt; use N different Pass Phrases - but then you have to enter all of them, of course) while minimizing the terminal dialog (i.e. when you use a single Pass Phrase for all N Private Key files this Pass Phrase is queried only once).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94de4a3a2291854223533e856f67abffb78213be" translate="yes" xml:space="preserve">
          <source>This script, included in the root directory of the source distribution, is for compilation on Unix and Unix-like systems only. For other platforms, see the &lt;a href=&quot;../platform/index&quot;&gt;platform&lt;/a&gt; documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b55557e24fb8bcc755c7a4d6bcb0d3715769efa" translate="yes" xml:space="preserve">
          <source>This section describes the syntax of the &lt;code&gt;#if expr&lt;/code&gt; element if &lt;code&gt;&lt;a href=&quot;#ssilegacyexprparser&quot;&gt;SSILegacyExprParser&lt;/a&gt;&lt;/code&gt; is set to &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1c98d92669cbc6e44001bdf8a1844f94c7ad3c" translate="yes" xml:space="preserve">
          <source>This section has not been fully updated to take into account changes made in the 2.x version of the Apache HTTP Server. Some of the information may still be relevant, but please use it with care.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a395ff2b639ce0b7e488c122aac2e053ce67abc7" translate="yes" xml:space="preserve">
          <source>This section should only be used if you need to have one configuration file that works across multiple versions of &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;, regardless of whether a particular directive is available. In normal operation, directives need not be placed in &lt;code&gt;&amp;lt;IfDirective&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="891b7bcfbb9ef6fb3b20c6adce5caa901d576b16" translate="yes" xml:space="preserve">
          <source>This section should only be used if you need to have one configuration file that works across multiple versions of &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt;, regardless of whether a particular section directive is available. In normal operation, directives need not be placed in &lt;code&gt;&amp;lt;IfSection&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c52890efcd175819938cadd5ce45702d5f52a0" translate="yes" xml:space="preserve">
          <source>This section should only be used if you need to have one configuration file that works whether or not a specific module is available. In normal operation, directives need not be placed in &lt;code&gt;&amp;lt;IfModule&amp;gt;&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ad8686eb04849cbd863c5c4adf12fad55afa43" translate="yes" xml:space="preserve">
          <source>This selects an encoding for mod_proxy_html output. It should not normally be used, as any change from the default &lt;code&gt;UTF-8&lt;/code&gt; (Unicode - as used internally by libxml2) will impose an additional processing overhead. The special token &lt;code&gt;ProxyHTMLCharsetOut *&lt;/code&gt; will generate output using the same encoding as the input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56aa1614fe396fec33a4bda6d650e12ed1ad309" translate="yes" xml:space="preserve">
          <source>This selects the &quot;best&quot; available file locking implementation, choosing between &lt;code&gt;fcntl&lt;/code&gt; and &lt;code&gt;flock&lt;/code&gt;, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e84ddfdc1453452523e6196b87b5b64356a3c8" translate="yes" xml:space="preserve">
          <source>This selects the &quot;best&quot; available semaphore implementation, choosing between Posix and SystemV IPC semaphores, in that order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2f97cb53e2ca38ddb10ec207232cf95aacf8d3" translate="yes" xml:space="preserve">
          <source>This selects the default locking implementation, as determined by &lt;a href=&quot;https://httpd.apache.org/docs/2.4/en/glossary.html#apr&quot;&gt;APR&lt;/a&gt;. The default locking implementation can be displayed by running &lt;code&gt;&lt;a href=&quot;../programs/httpd&quot;&gt;httpd&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;-V&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b7ba17e4759c7984276cee71f224729519270b9" translate="yes" xml:space="preserve">
          <source>This sendfile mechanism avoids separate read and send operations, and buffer allocations. But on some platforms or within some filesystems, it is better to disable this feature to avoid operational problems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7d4c8af8fb9170ae702fc6f8b0163f9c4a0b2f" translate="yes" xml:space="preserve">
          <source>This server-wide directive aliases one or more encoding to another encoding. This enables encodings not recognised by libxml2 to be handled internally by libxml2's encoding support using the translation table for a recognised encoding. This serves two purposes: to support character sets (or names) not recognised either by libxml2 or iconv, and to skip conversion for an encoding where it is known to be unnecessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1045f712c4e9a21983904fcdbc23009c6ad76a" translate="yes" xml:space="preserve">
          <source>This server-wide directive determines whether Apache will run with the &lt;a href=&quot;http://sosc-dr.sun.com/bigadmin/features/articles/least_privilege.jsp&quot;&gt;privileges&lt;/a&gt; required to run &lt;a href=&quot;http://sosc-dr.sun.com/bigadmin/content/dtrace/&quot;&gt;dtrace&lt;/a&gt;. Note that &lt;var&gt;DTracePrivileges On&lt;/var&gt; will not in itself activate DTrace, but &lt;var&gt;DTracePrivileges Off&lt;/var&gt; will prevent it working.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572c3c38d352d12ff4d91ad4235f14ec657d8845" translate="yes" xml:space="preserve">
          <source>This sets the description to display for a file, for &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;File&lt;/var&gt; is a file extension, partial filename, wild-card expression or full filename for files to describe. &lt;var&gt;String&lt;/var&gt; is enclosed in double quotes (&lt;code&gt;&quot;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17d325564be1ba506f1454bac2cd06c957ccd82e" translate="yes" xml:space="preserve">
          <source>This sets the icon to display next to a file ending in &lt;var&gt;name&lt;/var&gt; for &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;Icon&lt;/var&gt; is either a (%-escaped) relative URL to the icon, a fully qualified remote URL, or of the format &lt;code&gt;(alttext,url)&lt;/code&gt; where &lt;var&gt;alttext&lt;/var&gt; is the text tag given for an icon for non-graphical browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c1bfec57ba456566035986c6fa3ba9380d91438" translate="yes" xml:space="preserve">
          <source>This sets the icon to display next to files of type &lt;var&gt;MIME-type&lt;/var&gt; for &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;Icon&lt;/var&gt; is either a (%-escaped) relative URL to the icon, a fully qualified remote URL, or of the format &lt;code&gt;(alttext,url)&lt;/code&gt; where &lt;var&gt;alttext&lt;/var&gt; is the text tag given for an icon for non-graphical browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="664436d96aa78fa9d5cf0cdec86a0a9ae9e9b3aa" translate="yes" xml:space="preserve">
          <source>This sets the icon to display next to files with &lt;code&gt;&lt;a href=&quot;#indexoptions.fancyindexing&quot;&gt;FancyIndexing&lt;/a&gt;&lt;/code&gt;. &lt;var&gt;Icon&lt;/var&gt; is either a (%-escaped) relative URL to the icon, a fully qualified remote URL, or of the format &lt;code&gt;(alttext,url)&lt;/code&gt; where &lt;var&gt;alttext&lt;/var&gt; is the text tag given for an icon for non-graphical browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93fdaafcf21e4a89fbe3ea480b83725f4564541" translate="yes" xml:space="preserve">
          <source>This sets the main &lt;code&gt;LogLevel&lt;/code&gt; to info, but turns it up to &lt;code&gt;trace5&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;mod/mod_rewrite&quot;&gt;mod_rewrite&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0314221916c0420e420562c732b9829f195a52f" translate="yes" xml:space="preserve">
          <source>This sets the value of a variable. Attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22679f831bc9149d2105abd94c05583798c89935" translate="yes" xml:space="preserve">
          <source>This setting applies to the entire server and cannot be enabled or disabled on a virtualhost-by-virtualhost basis. The collection of extended status information can slow down the server. Also note that this setting cannot be changed during a graceful restart.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e361bfebf99aa7600e5b9b5ae961220e0a59b8a9" translate="yes" xml:space="preserve">
          <source>This setting applies to the entire server, and cannot be enabled or disabled on a virtualhost-by-virtualhost basis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64618a87f81dc557b4d1ae08fbf2d38c70c4853d" translate="yes" xml:space="preserve">
          <source>This setting controls if HTTP status 103 interim responses are forwarded to the client or not. By default, this is currently not the case since a range of clients still have trouble with unexpected interim responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc3207d82fc60f5d826d07d6d6d7ae9fdeedfb1" translate="yes" xml:space="preserve">
          <source>This setup will, on server start, contact &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt; to request a certificate for the domain. If Let's Encrypt can verify the ownership of the domain, the module will retrieve the certificate and its chain, store it in the local file system (see &lt;code&gt;&lt;a href=&quot;#mdstoredir&quot;&gt;MDStoreDir&lt;/a&gt;&lt;/code&gt;) and provide it, on next restart, to &lt;code&gt;&lt;a href=&quot;mod_ssl&quot;&gt;mod_ssl&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34deff37b0e2ea4abdb7e52b24a0491557015698" translate="yes" xml:space="preserve">
          <source>This shared object cache provider's &quot;create&quot; method requires a comma separated list of memcached host/port specifications. If using this provider via another modules configuration (such as &lt;code&gt;&lt;a href=&quot;mod_ssl#sslsessioncache&quot;&gt;SSLSessionCache&lt;/a&gt;&lt;/code&gt;), provide the list of servers as the optional &quot;arg&quot; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2c4ff03d167db3568d31ed8058e9bcfbb96942" translate="yes" xml:space="preserve">
          <source>This should be used alternatively and/or additionally to &lt;code&gt;&lt;a href=&quot;#sslcacertificatepath&quot;&gt;SSLCACertificatePath&lt;/a&gt;&lt;/code&gt; for explicitly constructing the server certificate chain which is sent to the browser in addition to the server certificate. It is especially useful to avoid conflicts with CA certificates when using client authentication. Because although placing a CA certificate of the server certificate chain into &lt;code&gt;&lt;a href=&quot;#sslcacertificatepath&quot;&gt;SSLCACertificatePath&lt;/a&gt;&lt;/code&gt; has the same effect for the certificate chain construction, it has the side-effect that client certificates issued by this same CA certificate are also accepted on client authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc746626879f8490e01be53ac8c163333f36723c" translate="yes" xml:space="preserve">
          <source>This should create a DLL version of your module. Now simply place it in the &lt;code&gt;modules&lt;/code&gt; directory of your server root, and use the &lt;code&gt;LoadModule&lt;/code&gt; directive to load it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6a499aa56810d4e0fdfc3cfdf272eca42cb212" translate="yes" xml:space="preserve">
          <source>This should not be confused with session timeout, which is an entirely separate issue. However, you may wish to check your session-management software for whether cached credentials can &quot;accidentally&quot; extend a session, and bear it in mind when setting your timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5cbe38174ceca0a83436bbaa23c263f4367114" translate="yes" xml:space="preserve">
          <source>This should really be accomplished with Redirect or RedirectMatch directives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fedc07e797287041d1b3983738b5999bab497f" translate="yes" xml:space="preserve">
          <source>This signs the server CSR and results in a &lt;code&gt;server.crt&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97242d73465c8df90d050d09bdfce4c82915c9bf" translate="yes" xml:space="preserve">
          <source>This simple Perl CGI program will display all of the environment variables that are being passed around. Two similar programs are included in the &lt;code&gt;cgi-bin&lt;/code&gt; directory of the Apache distribution. Note that some variables are required, while others are optional, so you may see some variables listed that were not in the official list. In addition, Apache provides many different ways for you to &lt;a href=&quot;../env&quot;&gt;add your own environment variables&lt;/a&gt; to the basic ones provided by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63bd761cc8f75e787aaac4c037162331e81c0ae" translate="yes" xml:space="preserve">
          <source>This simple example shows use of this module in the context of the Authentication and DBD frameworks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926e5f91dca6ff6e71b776cdcb5c18beb85b1a0b" translate="yes" xml:space="preserve">
          <source>This simple logging hook allows you to run a function when httpd enters the logging phase of a request. With it, you can append data to your own logs, manipulate data before the regular log is written, or prevent a log entry from being created. To prevent the usual logging from happening, simply return &lt;code&gt;apache2.DONE&lt;/code&gt; in your logging handler, otherwise return &lt;code&gt;apache2.OK&lt;/code&gt; to tell httpd to log as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631364ecb6dc2ed34c4c323cf427e52d16dbda50" translate="yes" xml:space="preserve">
          <source>This software is not subject to any license of the American Telephone and Telegraph Company or of the Regents of the University of California.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bc10b3ee71607905db0ec3248e0c7aefa8c54b" translate="yes" xml:space="preserve">
          <source>This software was submitted by Cisco Systems to the Apache Group in July 1997. Future revisions and derivatives of this source code must acknowledge Cisco Systems as the original contributor of this module. All other licensing and usage conditions are those of the Apache Group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f655b6bdc778f72f038a4fb72e464c0bf6bf09cc" translate="yes" xml:space="preserve">
          <source>This solution checks the captured value in a subsequent condition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4f545083189b3de3129d41301bec2da5a25e2a" translate="yes" xml:space="preserve">
          <source>This solution removes the matching key and value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012a40f209e09f5040b17f067d423a122b0b56b9" translate="yes" xml:space="preserve">
          <source>This solution shows the reverse of the previous ones, copying path components (perhaps PATH_INFO) from the URL into the query string.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
