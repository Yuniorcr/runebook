<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="meteor">
    <body>
      <group id="meteor">
        <trans-unit id="413e991212ab4f5b5a723391d1126b6621314b66" translate="yes" xml:space="preserve">
          <source>These functions initiate the login process with an external service (eg: Facebook, Google, etc), using OAuth. When called they open a new pop-up window that loads the provider&amp;rsquo;s login page. Once the user has logged in with the provider, the pop-up window is closed and the Meteor client logs in to the Meteor server with the information provided by the external service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f173cac486c90f6e2b82eb2f5a948c07b6f5903d" translate="yes" xml:space="preserve">
          <source>These functions manage and inspect the network connection between the Meteor client and server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ecb52a72d05d652813dad8d51a58ce85f791f1" translate="yes" xml:space="preserve">
          <source>These functions return an object with a single method, &lt;code&gt;stop&lt;/code&gt;. Calling &lt;code&gt;stop()&lt;/code&gt; unregisters the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0a2b593413ab6cf5bbff134c8ade7f0cfd0d20" translate="yes" xml:space="preserve">
          <source>These functions work just like their native JavaScript equivalents. If you call the native function, you&amp;rsquo;ll get an error stating that Meteor code must always run within a Fiber, and advising to use &lt;code&gt;Meteor.bindEnvironment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687e7b274a6eae98d2e66cec678c87ccb2d9bf12" translate="yes" xml:space="preserve">
          <source>These include some notable differences like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66dafb931800467947ce0ab24f061cc337d9ed82" translate="yes" xml:space="preserve">
          <source>These methods are defined on &lt;code&gt;AccountsClient.prototype&lt;/code&gt;, and are thus available only on the client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76aec7f369ba86f9b87f342cec6d5acb90f5cf8a" translate="yes" xml:space="preserve">
          <source>These methods are defined on &lt;code&gt;AccountsServer.prototype&lt;/code&gt;, and are thus available only on the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52712d93b5313cf282a026010bf4fe32ddf1e70a" translate="yes" xml:space="preserve">
          <source>These packages don&amp;rsquo;t do anything in development or production mode. They declare themselves &lt;code&gt;testOnly&lt;/code&gt; so they are not even loaded outside of testing. But when our app is run in &lt;a href=&quot;#test-modes&quot;&gt;test mode&lt;/a&gt;, the test driver package takes over, executing test code on both the client and server, and rendering results to the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df35b5cd39963e0ef7b946e9d1dad130ae27137" translate="yes" xml:space="preserve">
          <source>These rate limiting rules can be removed by calling &lt;code&gt;Accounts.removeDefaultRateLimit()&lt;/code&gt;. Please see the &lt;a href=&quot;#ddpratelimiter&quot;&gt;&lt;code&gt;DDPRateLimiter&lt;/code&gt;&lt;/a&gt; docs for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091be4fe8840d9c388f77334a0339ebc333e19dd" translate="yes" xml:space="preserve">
          <source>These should never be stored as part of your app&amp;rsquo;s source code in version control, because developers might copy code around to unexpected places and forget that it contains secret keys. You can keep your keys separately in &lt;a href=&quot;https://www.dropbox.com/&quot;&gt;Dropbox&lt;/a&gt;, &lt;a href=&quot;https://lastpass.com&quot;&gt;LastPass&lt;/a&gt;, or another service, and then reference them when you need to deploy the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a445af3d040c25b8330c9363849d6ce9a55beda7" translate="yes" xml:space="preserve">
          <source>These two Sass files will be lazily evaluated and only included in the CSS of the app if imported from some other file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a401db56f47d9c403aef3a45748c136d372f7f2" translate="yes" xml:space="preserve">
          <source>They all have their pros and cons, and different people have different preferences, just like with JavaScript transpiled languages. The most popular one at the time of writing seems to be Sass with the SCSS syntax. Popular CSS frameworks like Bootstrap 4 and more are switching to Sass, and the C++ LibSass implementation appears to be faster than some of the other compilers available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404ff9c7ee74b794fd80c600e63432c861667cb4" translate="yes" xml:space="preserve">
          <source>They are easy to add to component style guides&amp;mdash;as we&amp;rsquo;ll see in the section about &lt;a href=&quot;#styleguides&quot;&gt;component style guides&lt;/a&gt;, when creating a style guide, a clean environment makes things much easier to work with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0204351e627ad69ea6062bf41e41cc9a672796b0" translate="yes" xml:space="preserve">
          <source>They are easy to reason about&amp;mdash;you don&amp;rsquo;t need to understand how the data in the global store changes, simply how the arguments to the component change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff28052343adf56ab51445577eee9880f6365bad" translate="yes" xml:space="preserve">
          <source>They are easy to test&amp;mdash;you don&amp;rsquo;t need to be careful about the environment you render them in, all you need to do is provide the right arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c439fbad9298eea7eb6b9df98a9f29741aa80e6" translate="yes" xml:space="preserve">
          <source>Things are more complicated if the argument to the &lt;code&gt;#each&lt;/code&gt; reactively changes between different cursor objects, or between arrays of plain JavaScript objects that may not be identified clearly. The implementation of &lt;code&gt;#each&lt;/code&gt; tries to be intelligent without doing too much expensive work. Specifically, it tries to identify items between the old and new array or cursor with the following strategy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7786d1c21c37e7d0448b609968b761e8a555c3be" translate="yes" xml:space="preserve">
          <source>Things can get more complicated; for instance you may want to deal with documents being removed, or share the work of polling between multiple users (in a case where the data being polled isn&amp;rsquo;t private to that user), rather than doing the exact same poll for each interested user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0576eeb506460b5dccf03d1672ed987f9bdfe8f4" translate="yes" xml:space="preserve">
          <source>This Method doesn&amp;rsquo;t modify the other user, but uses it as a target; for example, it could be a Method for sending a private message, or adding a user as a friend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea561a8f044f7b9be6d1c2784007839ecff81d6" translate="yes" xml:space="preserve">
          <source>This Method is callable from the client and server using &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_call&quot;&gt;&lt;code&gt;Meteor.call&lt;/code&gt;&lt;/a&gt;. Note that you should only use a Method in the case where some code needs to be callable from the client; if you just want to modularize code that is only going to be called from the server, use a regular JavaScript function, not a Method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e27bf202267e291c40855efdc53a65423f72cf0" translate="yes" xml:space="preserve">
          <source>This Sass file will be eagerly evaluated and its compiled form will be added to the CSS of the app immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb333b750d679d2f9e108958e92d320df6a97d3" translate="yes" xml:space="preserve">
          <source>This built-in feature means that you always get &lt;code&gt;this.userId&lt;/code&gt; inside Methods and Publications, and can access the user ID on the client. This is a great starting point for building your own custom accounts system, but most developers won&amp;rsquo;t need to worry about the mechanics, since you&amp;rsquo;ll mostly be interacting with the &lt;code&gt;accounts-base&lt;/code&gt; package instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1494ff5c828d1c003edc7baff04b7cdc0cd7dcd4" translate="yes" xml:space="preserve">
          <source>This call to &lt;code&gt;Accounts.config&lt;/code&gt; should be made at load time (place at the top level of your source file), not called from inside of a &lt;code&gt;Meteor.startup&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00dda21f71615faabea32336583a89e5ba8843f6" translate="yes" xml:space="preserve">
          <source>This can be a good place to apply any DOM manipulations you want, after the template is rendered for the first time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b610f7e6d70f00ad635cc0e9f0a628d173b1cc" translate="yes" xml:space="preserve">
          <source>This can be called multiple times. If any of the functions return &lt;code&gt;false&lt;/code&gt; or throw an error, the new user creation is aborted. To set a specific error message (which will be displayed by &lt;a href=&quot;#accountsui&quot;&gt;&lt;code&gt;accounts-ui&lt;/code&gt;&lt;/a&gt;), throw a new &lt;a href=&quot;#meteor_error&quot;&gt;&lt;code&gt;Meteor.Error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9c26adcd09a8462852af3edd373ed19e4f6ea3" translate="yes" xml:space="preserve">
          <source>This can be used to save battery on mobile devices when real time updates are not required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cd2c64f57ec94ff31140e50d2d1b56d6fb9068" translate="yes" xml:space="preserve">
          <source>This can be useful if you have a function that accepts several different kinds of objects, and you want to determine which was passed in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd1d4c62c7a1bea960b0474218c6c81157bcc3a" translate="yes" xml:space="preserve">
          <source>This class represents a symbolic error thrown by a method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64724a799ae7bd0e491ad9115cd1f1b4cb55d6c0" translate="yes" xml:space="preserve">
          <source>This class should be defined inside a file called &lt;code&gt;ClickCounter.js&lt;/code&gt;. When you import it, it&amp;rsquo;ll look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089e6d34c258f08d8e6ca86a1401d84507dfa237" translate="yes" xml:space="preserve">
          <source>This collection contains one document per registered user. Here&amp;rsquo;s an example user document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ab89ad8bc8b00f4ed6f86ade9f3d7e6855af73" translate="yes" xml:space="preserve">
          <source>This content has moved to the &lt;a href=&quot;http://blazejs.org/guide/introduction.html&quot;&gt;Blaze Community Site&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6303c4721a1e16fb0eb3ba65404169967013c6d" translate="yes" xml:space="preserve">
          <source>This continues until the client &lt;a href=&quot;#stopping-subscriptions&quot;&gt;stops&lt;/a&gt; the subscription, triggering the following behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f3e1b2e189c27c21d8fa1593eb85dba46a4976" translate="yes" xml:space="preserve">
          <source>This creates a &lt;em&gt;local collection&lt;/em&gt;. This is a Minimongo collection that has no database connection (ordinarily a collection would either be directly connected to the database on the server, or via a subscription on the client).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa530bf2a13ea8bbfe14b7270456e8e605460bd" translate="yes" xml:space="preserve">
          <source>This default export may then be imported without curly braces, using any name the importing module chooses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76024cf2694aebadfd1b2ceeea8dacb89817643" translate="yes" xml:space="preserve">
          <source>This deletes your data! Make sure you do not have any information you care about in your local mongo database by running &lt;code&gt;meteor mongo&lt;/code&gt;. From the mongo shell, use &lt;code&gt;show collections&lt;/code&gt; and &lt;code&gt;db.&lt;i&gt;collection&lt;/i&gt;.find()&lt;/code&gt; to inspect your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c158f9fcf362fbb1d28056dfb42a24467b8e8f7c" translate="yes" xml:space="preserve">
          <source>This documentation has moved to the &lt;a href=&quot;http://blazejs.org/guide/spacebars.html&quot;&gt;Blaze Community Site&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0f72edbce4c9f80b70de0ce3e5dc63933cd70c" translate="yes" xml:space="preserve">
          <source>This example for Twitter shows how existing unencrypted user tokens can be encrypted. The query finds user documents which have a Twitter access token but not the &lt;code&gt;algorithm&lt;/code&gt; field which is created when the token is encrypted. The relevant fields in the service data are then encrypted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58eff224482073fbf7b7b1b1a53aac5ad0180eeb" translate="yes" xml:space="preserve">
          <source>This example from the Todos app defines a schema with a few simple rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578956aae973a0288f7a3df64f0683166bf8f2a2" translate="yes" xml:space="preserve">
          <source>This example implements a weather data source with a simple getter and setter. The getter records that the current computation depends on the &lt;code&gt;weatherDep&lt;/code&gt; dependency using &lt;code&gt;depend()&lt;/code&gt;, while the setter signals the dependency to invalidate all dependent computations by calling &lt;code&gt;changed()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e770aff09288ae10b2ea6d8f309b9a30fbadee" translate="yes" xml:space="preserve">
          <source>This example uses the &lt;code&gt;aldeed:simple-schema&lt;/code&gt; package, which is recommended in several other articles, to validate the Method arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7023a89c76ca1242e1a1925d2d3c73c2c65be3a4" translate="yes" xml:space="preserve">
          <source>This folder is for compatibility with JavaScript libraries that rely on variables declared with var at the top level being exported as globals. Files in this directory are executed without being wrapped in a new variable scope. These files are executed before other client-side JavaScript files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888c6b7852db28389681b488182ba14942abf16c" translate="yes" xml:space="preserve">
          <source>This function accepts tokens passed into the callback registered with &lt;a href=&quot;#Accounts-onEmailVerificationLink&quot;&gt;&lt;code&gt;Accounts.onEmailVerificationLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e951d6d992488255fc7760222db409da92418b0" translate="yes" xml:space="preserve">
          <source>This function accepts tokens passed into the callbacks registered with &lt;a href=&quot;#Accounts-onResetPasswordLink&quot;&gt;&lt;code&gt;AccountsClient#onResetPasswordLink&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Accounts-onEnrollmentLink&quot;&gt;&lt;code&gt;Accounts.onEnrollmentLink&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853415bfe43c8e5627902fb641ef2fd4dc19a5ed" translate="yes" xml:space="preserve">
          <source>This function initiates an HTTP request to a remote server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d20fd1aee97efaed83300758d99e2ca92322cb" translate="yes" xml:space="preserve">
          <source>This function is only used for creating users with passwords. The external service login flows do not use this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3710dbe607b3779e72356fb84c019967225df98" translate="yes" xml:space="preserve">
          <source>This function is provided by the &lt;code&gt;accounts-password&lt;/code&gt; package. See the &lt;a href=&quot;#accounts_passwords&quot;&gt;Passwords&lt;/a&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf79919d22e37fb2acdadd71186801ba1a3f125" translate="yes" xml:space="preserve">
          <source>This group of callbacks is most useful for cleaning up or undoing any external effects of &lt;code&gt;created&lt;/code&gt; or &lt;code&gt;rendered&lt;/code&gt; groups. This group fires once and is the last callback to fire.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a6eae8b7ed206fa06d0407ddfd4141f3e7f3d3" translate="yes" xml:space="preserve">
          <source>This guide is quite short and we think you&amp;rsquo;ll find the upgrade from 1.4 to 1.5 quite painless. We encourage reading &lt;a href=&quot;http://docs.meteor.com/changelog.html&quot;&gt;full history&lt;/a&gt; and comparing the full differences between the versions you are upgrading from and to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8cd2d0b20d19fb3c2c877e3eefe0d87ac148ab" translate="yes" xml:space="preserve">
          <source>This hook is the basis for the &lt;a href=&quot;templates#Template-onCreated&quot;&gt;&lt;code&gt;created&lt;/code&gt;&lt;/a&gt; template callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ae260e2f1fc810773fa91da7c3e22097801f4e" translate="yes" xml:space="preserve">
          <source>This hook is the basis for the &lt;a href=&quot;templates#Template-onDestroyed&quot;&gt;&lt;code&gt;destroyed&lt;/code&gt;&lt;/a&gt; template callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24be87346489f672bc2a3578d4ed560c5fcca9ed" translate="yes" xml:space="preserve">
          <source>This hook is the basis for the &lt;a href=&quot;templates#Template-onRendered&quot;&gt;&lt;code&gt;rendered&lt;/code&gt;&lt;/a&gt; template callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8670b644668ab6da0b45974fa33e6ff9aaa365cc" translate="yes" xml:space="preserve">
          <source>This imports the default export from the package into the symbol &lt;code&gt;moment&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a34389d271656974b9c9fa9e1b4f0b498b91a3" translate="yes" xml:space="preserve">
          <source>This integration test can be run the exact same way as we ran &lt;a href=&quot;#running-unit-tests&quot;&gt;unit tests above&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="001effefd1558355a79e62f14860078c0c8dc165" translate="yes" xml:space="preserve">
          <source>This interface is compatible with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;Array.forEach&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbd3c9de88c077284e7b05a3de4407073b52a84" translate="yes" xml:space="preserve">
          <source>This interface is compatible with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map&quot;&gt;Array.map&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c34f87e3793dad1c4b6604e9819cbbbd50b1cf9" translate="yes" xml:space="preserve">
          <source>This is a Method only accessible by admin users, who are allowed to edit other users. See the section about user roles to learn how to check that a user is in a certain role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6385fecfa1299ef18c9fcd3297aa13710b6a3016" translate="yes" xml:space="preserve">
          <source>This is a collection of points to check about your app that might catch common errors. However, it&amp;rsquo;s not an exhaustive list yet&amp;mdash;if we missed something, please let us know or file a pull request!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48b590dbdc754a6789c10b5ac34b4b30fe1405a" translate="yes" xml:space="preserve">
          <source>This is a set of articles outlining opinions on best-practice application development using the &lt;a href=&quot;https://meteor.com&quot;&gt;Meteor&lt;/a&gt; platform. Our aim is to cover patterns that are common to the development of all modern web and mobile applications, so many concepts documented here are not necessarily Meteor specific and could be applied to any application built with a focus on modern, interactive user interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9c80f628d09c9720572fe82d2d5a73f6f13b6f" translate="yes" xml:space="preserve">
          <source>This is a very short section, but it deserves its own place in the table of contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54c9c9d64c69b591b97f3c25e31c84c45419def8" translate="yes" xml:space="preserve">
          <source>This is an &lt;code&gt;Object&lt;/code&gt; with several fields that are used to generate text/html for the emails sent by &lt;code&gt;sendResetPasswordEmail&lt;/code&gt;, &lt;code&gt;sendEnrollmentEmail&lt;/code&gt;, and &lt;code&gt;sendVerificationEmail&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1771b35db1ef9be590fa6643f323285f06ff6da3" translate="yes" xml:space="preserve">
          <source>This is constant. However, if the logged-in user changes, the publish function is rerun with the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">Это эквивалентно:</target>
        </trans-unit>
        <trans-unit id="cc80719fd9be55eafa15350b547d0ffb5d420f24" translate="yes" xml:space="preserve">
          <source>This is how to invoke a method. It will run the method on the server. If a stub is available, it will also run the stub on the client. (See also &lt;a href=&quot;#meteor_apply&quot;&gt;&lt;code&gt;Meteor.apply&lt;/code&gt;&lt;/a&gt;, which is identical to &lt;code&gt;Meteor.call&lt;/code&gt; except that you specify the parameters as an array instead of as separate arguments and you can specify a few options controlling how the method is executed.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f914f21d3910c489d4970a419dcdf59be4c203" translate="yes" xml:space="preserve">
          <source>This is more or less the way that the &lt;a href=&quot;https://atmospherejs.com/kadira/blaze-layout&quot;&gt;&lt;code&gt;kadira:blaze-layout&lt;/code&gt;&lt;/a&gt; package works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df02605eec21c0b790a57b252cdaa7d18f53aff" translate="yes" xml:space="preserve">
          <source>This is not to be confused with &lt;a href=&quot;#meteorshell&quot;&gt;&lt;code&gt;meteor shell&lt;/code&gt;&lt;/a&gt;, which provides an almost identical experience but also gives you access to the &amp;ldquo;server&amp;rdquo; context of a Meteor application. Typically, &lt;code&gt;meteor shell&lt;/code&gt; will be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a99e1a018e2efa992d69a031eb168f30c77355" translate="yes" xml:space="preserve">
          <source>This is one reason why being able to achieve any state at will in the &lt;a href=&quot;#styleguides&quot;&gt;component style guide&lt;/a&gt; is so useful. As our reusable component &lt;code&gt;Lists_show&lt;/code&gt; simply chooses to render based on its &lt;code&gt;todosReady&lt;/code&gt; argument and does not concern itself with a subscription, it is trivial to render its loading state in a style guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a69742ccb1bab8bfe4255d153c5ec4ba5fe86d" translate="yes" xml:space="preserve">
          <source>This is similar to test mode, with key differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87f42c164c9dae4abe6d1483b1376306796103e" translate="yes" xml:space="preserve">
          <source>This is the default command. Simply running &lt;code&gt;meteor&lt;/code&gt; is the same as &lt;code&gt;meteor run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b359abc10a8fa3c78cc55353582ce42ddb2f4c69" translate="yes" xml:space="preserve">
          <source>This is the guide for using Meteor, a full-stack JavaScript platform for developing modern web and mobile applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d744ec4abf94bb00d26a28350cfe22a79493e68f" translate="yes" xml:space="preserve">
          <source>This is the known Isobuild feature &amp;ldquo;packages&amp;rdquo; sorted by the first release of Meteor which supports them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd96287a19052abb4a3d7fe8fe7567c888216ed" translate="yes" xml:space="preserve">
          <source>This is useful in initialization code, to avoid re-initializing a session variable every time a new version of your app is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a1929983cd56ef820285a3278e0929c97728ab" translate="yes" xml:space="preserve">
          <source>This loads your application in a special &amp;ldquo;test mode&amp;rdquo;. What this does is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56971b15e750e9340198a79af0020869551f26ab" translate="yes" xml:space="preserve">
          <source>This looks like it should just work, but there&amp;rsquo;s one problem: Sometimes the rendering system will prefer to simply change an existing component rather than switching it out and triggering the animation system. For example in the Todos example app, when you navigate between lists, by default Blaze will try to simply re-render the &lt;code&gt;Lists_show&lt;/code&gt; component with a new &lt;code&gt;listId&lt;/code&gt; (a changed argument) rather than pull the old list out and put in a new one. This is an optimization that is nice in principle, but that we want to avoid here for animation purposes. More specifically, we want to make sure the animation &lt;em&gt;only&lt;/em&gt; happens when the &lt;code&gt;listId&lt;/code&gt; changes and not on other reactive changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e998a2640d4e37a48b95f25447a86ef5b31b66d8" translate="yes" xml:space="preserve">
          <source>This makes it easy to then import all the client startup code with a single import as a module from our main eagerly loaded client entry point &lt;code&gt;client/main.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd7d395468a24d103f30652c24b648d07b68765" translate="yes" xml:space="preserve">
          <source>This means a React component also can&amp;rsquo;t be the only thing in a Blaze template, because it&amp;rsquo;s impossible to tell where the template will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d99f1c619bdf42d30011f5632556efc7d7c1312" translate="yes" xml:space="preserve">
          <source>This means adding the Meteor package to your project would also install the specified Cordova plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250fec3a571cd1dcf5cc1f0d54023aaf9b6dd8a2" translate="yes" xml:space="preserve">
          <source>This means that the entirety of your application (including for instance the web server and client side router) is loaded and will run as normal. This enables you to write much more &lt;a href=&quot;#full-app-integration-test&quot;&gt;complex integration tests&lt;/a&gt; and also load additional files for &lt;a href=&quot;#acceptance-testing&quot;&gt;acceptance tests&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835d2dd6df725b5975ecf6adebc2fb10440698ab" translate="yes" xml:space="preserve">
          <source>This means the &lt;code&gt;client.js&lt;/code&gt; module will not be evaluated during app startup unless/until another module imports it, and will not even be included in the client bundle if no importing code is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae147d3fdb3daffac7849df948b923c4d04af3c4" translate="yes" xml:space="preserve">
          <source>This means when you render a Blaze template, you are simply running a function on the client that corresponds to the Spacebars content you defined in the &lt;code&gt;.html&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfc7fb6043f0ffb01ccd22d1a053df62fa7164e" translate="yes" xml:space="preserve">
          <source>This method can fail throwing one of the following errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcd07d51c59652f99a5b12a8030b3c50838d5e3" translate="yes" xml:space="preserve">
          <source>This method does nothing if the client is already connected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b9c17757f7f26bc57a20c37bc79d6d49da3861" translate="yes" xml:space="preserve">
          <source>This method returns the status of the connection between the client and the server. The return value is an object with the following fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83d5ba415f5b6d71caf10ce74bdd3390d233ae8" translate="yes" xml:space="preserve">
          <source>This migration, which is sequenced to be the first migration to run over the database, will, when called, bring each list up to date with the current todo count.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a9cda279a9be008b8893e91e2b611934eb188c0" translate="yes" xml:space="preserve">
          <source>This package also allows you to add handlers for HTTP requests. This lets other services access your app&amp;rsquo;s data through an HTTP API, allowing it to easily interoperate with tools and frameworks that don&amp;rsquo;t yet support DDP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c4f2192b968c8539e39c850904cfb5d88a576c" translate="yes" xml:space="preserve">
          <source>This package causes Meteor to require that all arguments passed to methods and publish functions are &lt;a href=&quot;#check&quot;&gt;checked&lt;/a&gt;. Any method that does not pass each one of its arguments to &lt;code&gt;check&lt;/code&gt; will throw an error, which will be logged on the server and which will appear to the client as a &lt;code&gt;500 Internal server error&lt;/code&gt;. This is a simple way to help ensure that your app has complete check coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e7a2a2ce9dbe7b4d56a019bdf8af6c776e97b35" translate="yes" xml:space="preserve">
          <source>This package depends on &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages/non-core/npm-node-aes-gcm&quot;&gt;npm-node-aes-gcm&lt;/a&gt;, which requires you to have OpenSSL installed on your system to run. To install OpenSSL on Windows, use one of the binaries on &lt;a href=&quot;http://slproweb.com/products/Win32OpenSSL.html&quot;&gt;this page&lt;/a&gt;. Don&amp;rsquo;t forget to install the Visual Studio 2008 redistributables if you don&amp;rsquo;t have them yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8ed5a9b6b0c2d0403c7ea5b473b18617755da9" translate="yes" xml:space="preserve">
          <source>This package exports a function named &lt;code&gt;onPageLoad&lt;/code&gt; which takes a callback function that will be called at page load (on the client) or whenever a new request happens (on the server).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801611c7f69b14d0acd01859ac3266f4e2976b62" translate="yes" xml:space="preserve">
          <source>This package implements generic support for server-side rendering in Meteor apps, by providing a mechanism for injecting fragments of HTML into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the application&amp;rsquo;s initial HTML response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e97b74b5413d63b2e976de4ef86343e97411c5" translate="yes" xml:space="preserve">
          <source>This package is the core of Meteor&amp;rsquo;s developer-facing user accounts functionality. This includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fa61d7865956796febe9210ec66eda836f241d" translate="yes" xml:space="preserve">
          <source>This package lets you use Markdown in your templates. It&amp;rsquo;s easy: just put your markdown inside &lt;code&gt;{{#markdown}} ... {{/markdown}}&lt;/code&gt; tags. You can still use all of the usual Meteor template features inside a Markdown block, such as &lt;code&gt;{{#each}}&lt;/code&gt;, and you still get reactivity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4e961bf0fc729e479ae4a4d0a644d2e705a5f8" translate="yes" xml:space="preserve">
          <source>This package lets you use new JavaScript language features that are part of the &lt;a href=&quot;http://www.ecma-international.org/ecma-262/6.0/&quot;&gt;ECMAScript 2015 specification&lt;/a&gt; but are not yet supported by all engines or browsers. Unsupported syntax is automatically translated into standard JavaScript that behaves the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b909aee537737131c5908ff7f5d3bee31b5c58" translate="yes" xml:space="preserve">
          <source>This package requires data provided by the project&amp;rsquo;s minifier. For this reason, it is necessary to use the official &lt;code&gt;standard-minifier-js&lt;/code&gt; package or a minifier which includes file-size details obtained during minification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8112cf60cd8f8bde1fa31e9f72d1cf81609fbdc" translate="yes" xml:space="preserve">
          <source>This package utilizes the &lt;code&gt;&amp;lt;hash&amp;gt;.stats.json&lt;/code&gt; files which are written alongside file bundles when the application is ran with the &lt;code&gt;--production&lt;/code&gt; flag. The specific details for the minified file sizes is added by the minifier package and therefore it&amp;rsquo;s important to review the minifier requirements below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d86cd0f3de421a09763190d39a42110bf482dbe8" translate="yes" xml:space="preserve">
          <source>This predefined &lt;code&gt;Accounts&lt;/code&gt; object (along with similar convenience methods of &lt;code&gt;Meteor&lt;/code&gt;, such as &lt;a href=&quot;#meteor_logout&quot;&gt;&lt;code&gt;Meteor.logout&lt;/code&gt;&lt;/a&gt;) is sufficient to implement most accounts-related logic in Meteor apps. Nevertheless, these two constructors can be instantiated more than once, to create multiple independent connections between different accounts servers and their clients, in more complicated authentication situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11c4a6fc2f5f5924859380777c5c56621212bd0a" translate="yes" xml:space="preserve">
          <source>This property is a convenience to support the common pattern where a computation has logic specific to the first run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae5bddb8bb73be03a77d52e596196e40e29091a" translate="yes" xml:space="preserve">
          <source>This property is initially false. It is set to true by &lt;code&gt;stop()&lt;/code&gt; and &lt;code&gt;invalidate()&lt;/code&gt;. It is reset to false when the computation is recomputed at flush time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb00818fbd4c3f0ee41c33e0ab820318dc22e1a2" translate="yes" xml:space="preserve">
          <source>This property provides access to the data context at the top level of the template. It is updated each time the template is re-rendered. Access is read-only and non-reactive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587ae170156cabbbb1873110223a0a24e094712c" translate="yes" xml:space="preserve">
          <source>This publication will let the client pass an array of user IDs it&amp;rsquo;s interested in, and get the initials for all of those users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="047a4a73f6287c3aae77e94110795e810f780ecc" translate="yes" xml:space="preserve">
          <source>This removes the package entirely. To continue using the package, but remove its version constraint, use &lt;a href=&quot;#meteoradd&quot;&gt;&lt;code&gt;meteor add&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1220c5c6562fab58e9ce30b67ea6ba7f2f5999" translate="yes" xml:space="preserve">
          <source>This route handler will run in two situations: if the page loads initially at a URL that matches the URL pattern, or if the URL changes to one that matches the pattern while the page is open. Note that, unlike in a server-side-rendered app, the URL can change without any additional requests to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1143251d242c452f6bc2432fe1288e1cc774476f" translate="yes" xml:space="preserve">
          <source>This snippet illustrates a few things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1be5265ed6b663c3c7f231529f42fd1bd6242a" translate="yes" xml:space="preserve">
          <source>This subscribes you to the chat messages in the current room and to your private messages. When you change rooms by calling &lt;code&gt;Session.set('currentRoom',
'newRoom')&lt;/code&gt;, Meteor will subscribe to the new room&amp;rsquo;s chat messages, unsubscribe from the original room&amp;rsquo;s chat messages, and continue to stay subscribed to your private messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7753196602f0f2606a0a72f558e9df929883512" translate="yes" xml:space="preserve">
          <source>This technique has a few disadvantages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46b4e27a3d324e56832175b5b5a854a0e6d1b16" translate="yes" xml:space="preserve">
          <source>This technique will only work on the server. If you need to reset the database from a client test, you can use a method to do so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61916130428c7c39febc6a5b00a7fc3490f64309" translate="yes" xml:space="preserve">
          <source>This template expects to be rendered with an object with key &lt;code&gt;todo&lt;/code&gt; as data context (we&amp;rsquo;ll see &lt;a href=&quot;reusable-components#Validate-data-context&quot;&gt;below&lt;/a&gt; how to enforce that). We access the properties of the &lt;code&gt;todo&lt;/code&gt; using the mustache tag, such as &lt;code&gt;{{todo.text}}&lt;/code&gt;. The default behavior is to render that property as a string; however for some attributes (such as &lt;code&gt;checked={{todo.checked}}&lt;/code&gt;) it can be resolved as a boolean value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99aa26bcf6e8036b27297eaf0ee901e829f04cb5" translate="yes" xml:space="preserve">
          <source>This template tag cannot be used in attributes or in an HTML start tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd60aaa94235fd5c2bccfebc902b5e5f028e4f7" translate="yes" xml:space="preserve">
          <source>This threatens to leave many older Android devices behind however, because they would be stuck on the web view included with the OS and are often unable to update to newer OS versions. Fortunately, the &lt;a href=&quot;https://crosswalk-project.org/documentation/cordova.html&quot;&gt;Crosswalk plugin&lt;/a&gt; allows you to embed Chromium in your app and use it instead of the web view that comes with the OS on any of the Android versions supported by Cordova (currently Android 4.0 or higher). Embedding Chromium means the size of your APK will grow by about 20MB, but the benefit is that you can rely on a consistent web view with considerably better performance and enhanced standards support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b290580d14297d70b42dba5af21fd3331e72d861" translate="yes" xml:space="preserve">
          <source>This triggers a call to &lt;a href=&quot;#accounts_sendresetpasswordemail&quot;&gt;&lt;code&gt;Accounts.sendResetPasswordEmail&lt;/code&gt;&lt;/a&gt; on the server. When the user visits the link in this email, the callback registered with &lt;a href=&quot;#Accounts-onResetPasswordLink&quot;&gt;&lt;code&gt;Accounts.onResetPasswordLink&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e78af78626e2d274d2efffe0137fb644bc10d58" translate="yes" xml:space="preserve">
          <source>This value indicates, whether a flush is in progress or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a3b01978773414a6791844da14b071c10debc4" translate="yes" xml:space="preserve">
          <source>This value is useful for data source implementations to determine whether they are being accessed reactively or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e25c0f0c2b9b088c9d6549c9a282416f6cdd2b" translate="yes" xml:space="preserve">
          <source>This visualization can uncover details about which files or packages are occupying space within the initial client bundle. This can be useful in determining which imports might be candidates for being converted to dynamic &lt;code&gt;import()&lt;/code&gt; statements (which are excluded from the initial client bundle), or for identifying packages which have been inadvertently included in a project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2484bce687a38d7267ef24756c09c0bf48a19416" translate="yes" xml:space="preserve">
          <source>This way you get the full reactive power of the store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ccc372c2aae5302b11a64624bdca5e27ef9ece9" translate="yes" xml:space="preserve">
          <source>This will add the newest version of the desired package that is compatible with the other packages in your app. If you want to specify a particular version, you can specify it by adding a suffix to the package name like: &lt;code&gt;meteor add kadira:flow-router@2.10.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af6528337b018bf0e73207d060ed653d2043fb9" translate="yes" xml:space="preserve">
          <source>This will both update your &lt;code&gt;package.json&lt;/code&gt; with information about the dependency and download the package into your app&amp;rsquo;s local &lt;code&gt;node_modules/&lt;/code&gt; directory. Typically, you don&amp;rsquo;t check the &lt;code&gt;node_modules/&lt;/code&gt; directory into source control and your teammates run &lt;code&gt;meteor npm install&lt;/code&gt; to get up to date when dependencies change:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0f429ae05b1d3a65fdc3c547b24d79b7ececf2" translate="yes" xml:space="preserve">
          <source>This will create an &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; file containing the exact versions of each dependency, and you should check this file into source control. For even more precision (the contents of a given version of a package &lt;em&gt;can&lt;/em&gt; change), and to avoid a reliance on the npm server during deployment, you should consider using &lt;a href=&quot;#npm-shrinkpack&quot;&gt;&lt;code&gt;npm shrinkpack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674cc981f9cbe7f05f2e547d4d0f5c3c73d94911" translate="yes" xml:space="preserve">
          <source>This will generate a directory at &lt;code&gt;&amp;lt;build-output-directory&amp;gt;&lt;/code&gt;, which includes a server bundle tarball and the project source for each targeted mobile platform in the &lt;code&gt;/ios&lt;/code&gt; and &lt;code&gt;/android&lt;/code&gt; directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4f7b787374b855dcd48af800c0b12543a38390" translate="yes" xml:space="preserve">
          <source>This will install &lt;code&gt;react&lt;/code&gt; into your project and allow you to access it within your files with &lt;code&gt;import React from 'react'&lt;/code&gt;. Most React code is written in &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;, which you can use by &lt;a href=&quot;http://guide.meteor.com/build-tool.html#react-jsx&quot;&gt;default in Meteor&lt;/a&gt; if you include the &lt;code&gt;ecmascript&lt;/code&gt; package (which is installed in all Meteor apps by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bc7dbeba23dc5ab03e040f2caabd3e92a29378" translate="yes" xml:space="preserve">
          <source>This will make every Method only callable 5 times per second per connection. This is a rate limit that shouldn&amp;rsquo;t be noticeable by the user at all, but will prevent a malicious script from totally flooding the server with requests. You will need to tune the limit parameters to match your app&amp;rsquo;s needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00463c67f24a756272b7c19d96a983f98dce029" translate="yes" xml:space="preserve">
          <source>This will provide you with a bundled application &lt;code&gt;.tar.gz&lt;/code&gt; which you can extract and run without the &lt;code&gt;meteor&lt;/code&gt; tool. The environment you choose will need the correct version of Node.js and connectivity to a MongoDB server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3e01dd8888acaa316a8d408f465642baa4cd94" translate="yes" xml:space="preserve">
          <source>This will run a special app containing only a &amp;ldquo;test&amp;rdquo; version of your package and start a Mocha &lt;a href=&quot;testing#driver-packages&quot;&gt;test driver package&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631977ba51c5ef6322cb4a01ef1125dcdc3b59c4" translate="yes" xml:space="preserve">
          <source>This will run your app on a default simulated iOS device. You can open Xcode to install and select another simulated device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faaee2d55a8237b2d82a8ce38647f9502d00edf7" translate="yes" xml:space="preserve">
          <source>This works just like &lt;a href=&quot;#allow&quot;&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt;, except it lets you make sure that certain writes are definitely denied, even if there is an &lt;code&gt;allow&lt;/code&gt; rule that says that they should be permitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c906b8ece5764400141a1240ce8dd7ae9a3eb69" translate="yes" xml:space="preserve">
          <source>Though Meteor 1.2 introduced support for &lt;a href=&quot;https://github.com/meteor/meteor/blob/devel/packages/ecmascript/README.md#supported-es2015-features&quot;&gt;many new ECMAScript 2015 features&lt;/a&gt;, one of the most notable omissions was &lt;a href=&quot;http://exploringjs.com/es6/ch_modules.html&quot;&gt;ES2015 &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax&lt;/a&gt;. Meteor 1.3 fills that gap with a fully standards-compliant module system that works on both the client and the server, solves multiple long-standing problems for Meteor applications (such as controlling file load order), and yet maintains full backwards compatibility with existing Meteor code. This document explains the usage and key features of the new module system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418c3d8b355720dc7fb8cd91171708c487964921" translate="yes" xml:space="preserve">
          <source>Throttling method calls on user action</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19237b8bc8352c4f24f44ebb12277437918eb9e8" translate="yes" xml:space="preserve">
          <source>Throwing errors from a Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c50361a14d76093904430e81fc260348a28b36b" translate="yes" xml:space="preserve">
          <source>Thus it&amp;rsquo;s a good way to develop the test&amp;mdash;this is why chimp has a feature where we mark tests with a &lt;code&gt;@watch&lt;/code&gt; in the name to call out the tests we want to work on (running our entire acceptance test suite can be time consuming in a large application).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f7bfc991a68ad35271fc4c44c57c7313dda264" translate="yes" xml:space="preserve">
          <source>Thus it&amp;rsquo;s best to keep the size of the cache below 5MB. The &lt;code&gt;appcache&lt;/code&gt; package will print a warning on the Meteor server console if the total size of the resources being cached is over 5MB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="af43d192a2db078a74e425ebd0d1c79c0db4abe8" translate="yes" xml:space="preserve">
          <source>To achieve a similar abstraction for subscriptions/publications, you may want to write a simple wrapper for &lt;code&gt;Meteor.subscribe()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307b88b07be557df43048b1b3f979a69bd726011" translate="yes" xml:space="preserve">
          <source>To add &lt;code&gt;Session&lt;/code&gt; to your application, run this command in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66430b590f84a3a149870f6747c2e3c611fccb2" translate="yes" xml:space="preserve">
          <source>To add &lt;code&gt;check&lt;/code&gt; (or &lt;code&gt;Match&lt;/code&gt;) to your application, run this command in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8471b2c71056ace887facad475281c4bcc82e584" translate="yes" xml:space="preserve">
          <source>To add Accounts and a set of login controls to an application, add the &lt;code&gt;accounts-ui&lt;/code&gt; package and at least one login provider package: &lt;code&gt;accounts-password&lt;/code&gt;, &lt;code&gt;accounts-facebook&lt;/code&gt;, &lt;code&gt;accounts-github&lt;/code&gt;, &lt;code&gt;accounts-google&lt;/code&gt;, &lt;code&gt;accounts-twitter&lt;/code&gt;, or &lt;code&gt;accounts-weibo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56392a39ad658fa9a39f5f4104aa485de77753ad" translate="yes" xml:space="preserve">
          <source>To add Flow Router Extra to your app, install the &lt;code&gt;ostrio:flow-router-extra&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6e1f6d46dabcbab0f79270020e6a693e92a930" translate="yes" xml:space="preserve">
          <source>To add Flow Router to your app, install the &lt;code&gt;kadira:flow-router&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df4465ea1c500c52f31b3a0dfa24a407bcb0200" translate="yes" xml:space="preserve">
          <source>To add Iron Router to your app, install the &lt;code&gt;iron:router&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f51538e10e4501f3e413cdc9568e5dd6845dc9" translate="yes" xml:space="preserve">
          <source>To add JavaScript files to a package, specify an entrypoint with &lt;a href=&quot;http://docs.meteor.com/#/full/pack_mainModule&quot;&gt;&lt;code&gt;api.mainModule()&lt;/code&gt;&lt;/a&gt; in the package&amp;rsquo;s &lt;code&gt;onUse&lt;/code&gt; block (this will already have been done by &lt;code&gt;meteor create --package&lt;/code&gt; above):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd33aa5cca26139c81c7aa17d474afe02cd166c9" translate="yes" xml:space="preserve">
          <source>To add password support to your application, run this command in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91b992f039d7294ffa8597df760e09fd36c5904" translate="yes" xml:space="preserve">
          <source>To add reactive i18n inline in your React components, simply use the &lt;code&gt;i18n.createComponent()&lt;/code&gt; function and pass it keys from your translation file. Here&amp;rsquo;s an example of a simple component wrapping i18n&amp;rsquo;s translation component:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3553eeaac76c328a7b706dc9771d0e9fb911e6" translate="yes" xml:space="preserve">
          <source>To add routing to your app, install the &lt;a href=&quot;https://atmospherejs.com/kadira/flow-router&quot;&gt;&lt;code&gt;kadira:flow-router&lt;/code&gt;&lt;/a&gt; package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42eff87f5eef6265383b75626ff84bf3616f0a23" translate="yes" xml:space="preserve">
          <source>To add the &lt;code&gt;ecmascript&lt;/code&gt; package to an existing package, include the statement &lt;code&gt;api.use('ecmascript');&lt;/code&gt; in the &lt;code&gt;Package.onUse&lt;/code&gt; callback in your &lt;code&gt;package.js&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20880d00bcbd5eb38c559d663c3ec8def55d73f" translate="yes" xml:space="preserve">
          <source>To add this package to an existing app, run the following command from your app directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e320cb01c4441352f907ce775a3e219f34ae6a" translate="yes" xml:space="preserve">
          <source>To alleviate some of the boilerplate that&amp;rsquo;s involved in correct Method definitions, we&amp;rsquo;ve published a wrapper package called &lt;code&gt;mdg:validated-method&lt;/code&gt; that does most of this for you. Here&amp;rsquo;s the same Method as above, but defined with the package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92028f9907da1367d1d7658cebf0085075aa1418" translate="yes" xml:space="preserve">
          <source>To ask the user for permission to act on their behalf when offline, map the relevant external service to &lt;code&gt;true&lt;/code&gt;. Currently only supported with Google. See &lt;a href=&quot;#meteor_loginwithexternalservice&quot;&gt;Meteor.loginWithExternalService&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e82f474960847ab4e3dd5d96da479d395c87223" translate="yes" xml:space="preserve">
          <source>To avoid storing the secret key in your application&amp;rsquo;s source code, you can use &lt;a href=&quot;http://docs.meteor.com/#meteor_settings&quot;&gt;&lt;code&gt;Meteor.settings&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf138440e10ab58d920cbae068c264e3b9e8f6da" translate="yes" xml:space="preserve">
          <source>To avoid this problem as a package author, you can request that users of your package have installed the npm package you want to use at the application level. This is similar to a &lt;a href=&quot;https://nodejs.org/en/blog/npm/peer-dependencies/&quot;&gt;peer dependency&lt;/a&gt; of an npm package (although with less support in the tool). You can use the &lt;a href=&quot;https://atmospherejs.com/tmeasday/check-npm-versions&quot;&gt;&lt;code&gt;tmeasday:check-npm-versions&lt;/code&gt;&lt;/a&gt; package to ensure that they&amp;rsquo;ve done this, and to warn them if not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd4b2d79f3651510148354743c21d68fffcd7de" translate="yes" xml:space="preserve">
          <source>To avoid this, we try to detect faulty versions and revert to the last known good version when this happens. The way detection works is that we expect all &lt;code&gt;Meteor.startup()&lt;/code&gt; callbacks to complete within a set period of time. If this doesn&amp;rsquo;t happen we consider the version faulty and will rollback the update. Unless the version on the server has been updated in the meantime, the server will try to hot code push the faulty version again. Therefore, we blacklist faulty versions on the device so we know not to retry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="889da3514abbff3bdc30c516c15c84268a01e7c0" translate="yes" xml:space="preserve">
          <source>To be a unit test, we must stub out the dependencies of the module. In this case, thanks to the way we&amp;rsquo;ve isolated our code into a reusable component, there&amp;rsquo;s not much to do; principally we need to stub out the &lt;code&gt;{{_}}&lt;/code&gt; helper that&amp;rsquo;s created by the &lt;a href=&quot;ui-ux#i18n&quot;&gt;&lt;code&gt;tap:i18n&lt;/code&gt;&lt;/a&gt; system. Note that we stub it out in a &lt;code&gt;beforeEach&lt;/code&gt; and restore it the &lt;code&gt;afterEach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ac96ab417fc38f4a32046c551631b848155388" translate="yes" xml:space="preserve">
          <source>To begin with, let&amp;rsquo;s consider two categories of UI components that are useful to think about, &amp;ldquo;reusable&amp;rdquo; and &amp;ldquo;smart&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4d5d454132455710ac21f80b063535219155fb" translate="yes" xml:space="preserve">
          <source>To call methods on another Meteor application or subscribe to its data sets, call &lt;code&gt;DDP.connect&lt;/code&gt; with the URL of the application. &lt;code&gt;DDP.connect&lt;/code&gt; returns an object which provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad15d4e2108b5e4f4e18e56d209df75232e22ec6" translate="yes" xml:space="preserve">
          <source>To change the user&amp;rsquo;s language, use &lt;code&gt;i18n.setLocale('en-US')&lt;/code&gt;. &lt;code&gt;universe:i18n&lt;/code&gt; allows retrieval of additional translations by method as well as including JSON files with a client bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e88f12ad857f0a8069f69573d9439bf531b56b" translate="yes" xml:space="preserve">
          <source>To check if your device has been connected and set up correctly, you can run &lt;code&gt;adb devices&lt;/code&gt; to get a list of devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bbb21b3f577bf0c5b96e583f3621b41becacc3" translate="yes" xml:space="preserve">
          <source>To configure the behavior of &lt;code&gt;{{&amp;gt; loginButtons}}&lt;/code&gt;, use &lt;a href=&quot;#accounts_ui_config&quot;&gt;&lt;code&gt;Accounts.ui.config&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326d3654ef346299bdd5fe0a3e3a039237f16e67" translate="yes" xml:space="preserve">
          <source>To create a cursor, use &lt;a href=&quot;#find&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;. To access the documents in a cursor, use &lt;a href=&quot;#foreach&quot;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#fetch&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6661ac0f20ea90e07c90a94040185aa2b319f076" translate="yes" xml:space="preserve">
          <source>To create a helper that can be used in any template, use &lt;a href=&quot;templates#Template-registerHelper&quot;&gt;&lt;code&gt;Template.registerHelper&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f904fa4649a456eb4c00ff9039079ddb96d9c5" translate="yes" xml:space="preserve">
          <source>To create a new npm package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78800447b009fa5409b4c7472f32c62903c7f745" translate="yes" xml:space="preserve">
          <source>To create test data in full-app test mode, it usually makes sense to create some special test methods which we can call from the client side. Usually when testing a full app, we want to make sure the publications are sending through the correct data (as we do in this test), and so it&amp;rsquo;s not sufficient to stub out the collections and place synthetic data in them. Instead we&amp;rsquo;ll want to actually create data on the server and let it be published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c7b931814d0b4edc0a2feb9ebcefd06c998e9d" translate="yes" xml:space="preserve">
          <source>To customize the contents of the email, see &lt;a href=&quot;#accounts_emailtemplates&quot;&gt;&lt;code&gt;Accounts.emailTemplates&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5140047bd555ef9841e9e569c9b6435496eefd9e" translate="yes" xml:space="preserve">
          <source>To define your own block helper, simply declare a template, and then invoke it using &lt;code&gt;{{#someTemplate}}&lt;/code&gt; (block) instead of &lt;code&gt;{{&amp;gt; someTemplate}}&lt;/code&gt; (inclusion) syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a4f9f5681102b3aa8983bb43c9d543e7c7e152" translate="yes" xml:space="preserve">
          <source>To delete an application you&amp;rsquo;ve deployed, specify the &lt;code&gt;--delete&lt;/code&gt; option along with the site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca105909ad53a383a4c4c0552475452b9b6d3334" translate="yes" xml:space="preserve">
          <source>To depend on another Atmosphere package, use &lt;a href=&quot;http://docs.meteor.com/#/full/pack_use&quot;&gt;&lt;code&gt;api.use&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2b46db90ab1ebb570301353caa7e894f37ad63" translate="yes" xml:space="preserve">
          <source>To deploy to the EU region, set DEPLOY_HOSTNAME to eu-west-1.galaxy.meteor.com.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc138fd935e58931f06c928850c3e3e82fc4cb09" translate="yes" xml:space="preserve">
          <source>To do so in this case, we can use a little trick (that is specific to Blaze, although similar techniques apply to other view layers) of using the fact that the &lt;code&gt;{{#each}}&lt;/code&gt; helper diffs arrays of strings, and completely re-renders elements when they change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e626fdece591b67182c18d3bfaaa9773e897c2a" translate="yes" xml:space="preserve">
          <source>To do so, we can subclass &lt;code&gt;Mongo.Collection&lt;/code&gt; and write our own &lt;code&gt;insert()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd840205f9265be376583a8de5ffc63864b7423" translate="yes" xml:space="preserve">
          <source>To do so, we can use the &lt;a href=&quot;https://prerender.io&quot;&gt;Prerender.io&lt;/a&gt; service, thanks to the &lt;a href=&quot;https://atmospherejs.com/dferber/prerender/&quot;&gt;&lt;code&gt;dferber:prerender&lt;/code&gt;&lt;/a&gt; package. It&amp;rsquo;s a simple as &lt;code&gt;meteor add&lt;/code&gt;-ing it, and optionally setting your prerender token if you have a premium prerender account and would like to enable more frequent cache changes. You can also just use the &lt;a href=&quot;https://www.npmjs.com/package/prerender-node&quot;&gt;&lt;code&gt;prerender-node&lt;/code&gt; NPM package&lt;/a&gt; directly, mimicing the small amount of &lt;a href=&quot;https://github.com/dferber90/meteor-prerender/blob/master/client/prerender.html&quot;&gt;client&lt;/a&gt; and &lt;a href=&quot;https://github.com/dferber90/meteor-prerender/blob/master/server/prerender.js&quot;&gt;server&lt;/a&gt; code in the Atmosphere package; do this if you need to use a newer version of the NPM package than the one in &lt;code&gt;dferber:prerender&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a768a43a236b5ea82c041d7df8e76472a7dbbaba" translate="yes" xml:space="preserve">
          <source>To do so, we use &lt;code&gt;attachSchema()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3064ba3c3bc9bf6c5751a509112cdc7514f7e0b" translate="yes" xml:space="preserve">
          <source>To do so, we&amp;rsquo;ll use a very simple test helper that renders a Blaze component off-screen with a given data context. As we place it in &lt;code&gt;imports&lt;/code&gt;, it won&amp;rsquo;t load in our app by in normal mode (as it&amp;rsquo;s not required anywhere).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff636b12d986e98f989c21e7b6f8e715ec5fc87" translate="yes" xml:space="preserve">
          <source>To ensure the database is clean, the &lt;a href=&quot;https://atmospherejs.com/xolvio/cleaner&quot;&gt;&lt;code&gt;xolvio:cleaner&lt;/code&gt;&lt;/a&gt; package is useful. You can use it to reset the database in a &lt;code&gt;beforeEach&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83ebaaf9a03f3c9ec0a00878488dab2fc3c08f7" translate="yes" xml:space="preserve">
          <source>To exclude specific fields from the result objects, the field specifier is a dictionary whose keys are field names and whose values are &lt;code&gt;0&lt;/code&gt;. All unspecified fields are included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7dc59dc94ce9370f9fb28ded16d88dbe69a4ba0" translate="yes" xml:space="preserve">
          <source>To find out more about the API of the Migrations package, refer to &lt;a href=&quot;https://atmospherejs.com/percolate/migrations&quot;&gt;its documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518e1370fc3bf075f37072465daa36cb36517a04" translate="yes" xml:space="preserve">
          <source>To find that out, &lt;code&gt;Meteor.subscribe()&lt;/code&gt; and (&lt;code&gt;this.subscribe()&lt;/code&gt; in Blaze components) returns a &amp;ldquo;subscription handle&amp;rdquo;, which contains a reactive data source called &lt;code&gt;.ready()&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a565a3c59161196c5cb0a07442ef3d8376da2d8" translate="yes" xml:space="preserve">
          <source>To fully use the module system and ensure that our code only runs when we ask it to, we recommend that all of your application code should be placed inside the &lt;code&gt;imports/&lt;/code&gt; directory. This means that the Meteor build system will only bundle and include that file if it is referenced from another file using an &lt;code&gt;import&lt;/code&gt; (also called &amp;ldquo;lazy evaluation or loading&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a643a0227f5125cec9c22cfe467f934fdaa4fee" translate="yes" xml:space="preserve">
          <source>To generate a key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9c7c5069cc46c43a0fe4fbb79127bdc1495a68" translate="yes" xml:space="preserve">
          <source>To get Meteor to use the CDN for your Javascript and CSS bundles, call &lt;code&gt;WebAppInternals.setBundledJsCssPrefix(&quot;http://mycdn.com&quot;)&lt;/code&gt; on the server. This will also take care of relative image URLs inside your CSS files. If you need to use a dynamic prefix, you can return the prefix from a function passed to &lt;code&gt;WebAppInternals.setBundledJsCssUrlRewriteHook()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083509a11ebc0343923c9ed2101dfbbdcc1b3374" translate="yes" xml:space="preserve">
          <source>To get a callback after a computation has been recomputed, you can call &lt;a href=&quot;#tracker_afterflush&quot;&gt;&lt;code&gt;Tracker.afterFlush&lt;/code&gt;&lt;/a&gt; from &lt;code&gt;onInvalidate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6ff0c69389a389eb4e79d3cfb2711f4cec23b17" translate="yes" xml:space="preserve">
          <source>To get around these restrictions, you&amp;rsquo;ll have to use what is known as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;. In contrast to the whitelisting mechanism configured on the client, CORS relies on headers set by the server. In other words, in order to allow access to a remote resource, you may have to make configuration changes on the server, such as setting a &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a17d297a0ed288565efddad8aa5613aa4753b7" translate="yes" xml:space="preserve">
          <source>To get proper syntax highlighting, go to a .js file, then select the following through the &lt;em&gt;View&lt;/em&gt; dropdown menu: &lt;em&gt;Syntax&lt;/em&gt; -&amp;gt; &lt;em&gt;Open all with current extension as&amp;hellip;&lt;/em&gt; -&amp;gt; &lt;em&gt;Babel&lt;/em&gt; -&amp;gt; &lt;em&gt;JavaScript (Babel)&lt;/em&gt;. If you are using React .jsx files, do the same from a .jsx file. If it&amp;rsquo;s working, you will see &amp;ldquo;JavaScript (Babel)&amp;rdquo; in the lower right hand corner of the window when you are on one of these files. Refer to the &lt;a href=&quot;https://github.com/babel/babel-sublime&quot;&gt;package readme&lt;/a&gt; for information on compatible color schemes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893855d63dbfcafd6b5027960d5d6bad6fc49291" translate="yes" xml:space="preserve">
          <source>To get started with React in Meteor, you can follow along the &lt;a href=&quot;https://www.meteor.com/tutorials/react/creating-an-app&quot;&gt;React tutorial&lt;/a&gt;. To see an example of a more complete Meteor application built with React, check out the &lt;a href=&quot;https://github.com/meteor/todos/tree/react&quot;&gt;&lt;code&gt;react&lt;/code&gt; branch&lt;/a&gt; of the Todos example application. Where applicable, code examples in this article will reference that app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1237ef25890ecb7c83c8507238bda2a4768be54f" translate="yes" xml:space="preserve">
          <source>To get started writing a package, use the Meteor command line tool:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcff710be19faa388283f090c0bbfef73c584354" translate="yes" xml:space="preserve">
          <source>To get started, run &lt;code&gt;meteor add universe:i18n&lt;/code&gt; to add it to your app. Add an English (&lt;code&gt;en-US&lt;/code&gt;) translation file in &lt;code&gt;JSON&lt;/code&gt; format to your app with the name &lt;code&gt;en-us.i18n.json&lt;/code&gt;. Translation files can be identified by file name or with the &lt;code&gt;{&quot;_locale&quot;: &quot;en-US&quot;}&lt;/code&gt; JSON property. The &lt;code&gt;YAML&lt;/code&gt; file format is also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151ec154149098f7e43708e70ab3d1aeb7854ef8" translate="yes" xml:space="preserve">
          <source>To get the full experience, you should also use the &lt;code&gt;es5-shim&lt;/code&gt; package which is included in all new apps by default. This means you can rely on runtime features like &lt;code&gt;Array#forEach&lt;/code&gt; without worrying about which browsers support them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3126a82b51c023edcd49d2e4f2d37d44f8ed4368" translate="yes" xml:space="preserve">
          <source>To handle more than one event / selector with the same function, use a comma-separated list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb51b8da00a2350bda11d13a4dbddef6793d1057" translate="yes" xml:space="preserve">
          <source>To help you write good Methods that exhaustively validate their arguments, we&amp;rsquo;ve written a simple wrapper package for Methods that enforces argument validation. Read more about how to use it in the &lt;a href=&quot;methods#validated-method&quot;&gt;Methods article&lt;/a&gt;. The rest of the code samples in this article will assume that you are using this package. If you aren&amp;rsquo;t, you can still apply the same principles but the code will look a little different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b15a95a8081b30a704b341479c98fb80fe07d12" translate="yes" xml:space="preserve">
          <source>To import a method named &lt;code&gt;exportedPackageMethod&lt;/code&gt;, simply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4e955cbe7e715ad66ced8ce2a933691be63e92" translate="yes" xml:space="preserve">
          <source>To include CSS files with your package you can use &lt;a href=&quot;http://docs.meteor.com/#/full/pack_addFiles&quot;&gt;&lt;code&gt;api.addFiles()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e05e948984ca7920b990616137fbf5b4325ad75" translate="yes" xml:space="preserve">
          <source>To include only specific fields in the result documents, use &lt;code&gt;1&lt;/code&gt; as the value. The &lt;code&gt;_id&lt;/code&gt; field is still included in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a768afacff969a47bc3ef71c575e618ff454162" translate="yes" xml:space="preserve">
          <source>To insert a literal &lt;code&gt;{{&lt;/code&gt;, &lt;code&gt;{{{&lt;/code&gt;, or any number of curly braces, put a vertical bar after it. So &lt;code&gt;{{|&lt;/code&gt; will show up as &lt;code&gt;{{&lt;/code&gt;, &lt;code&gt;{{{|&lt;/code&gt; will show up as &lt;code&gt;{{{&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159c4fc12d09660b9440e023e6407ec37258b099" translate="yes" xml:space="preserve">
          <source>To insert literal curly braces: &lt;code&gt;{{ }}&lt;/code&gt; and the like, add a pipe character, &lt;code&gt;|&lt;/code&gt;, to the opening braces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac0c6aa8b888b26e1c1478b1fa3d46df59f41dc" translate="yes" xml:space="preserve">
          <source>To install React in Meteor 1.3 you should simply add it as an npm dependency:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4de29a47510c144543e45f3da5c47947b9193d" translate="yes" xml:space="preserve">
          <source>To install a package into your app you run the &lt;code&gt;npm install&lt;/code&gt; command with the &lt;code&gt;--save&lt;/code&gt; flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfb33e0812488c4502e9d019222e2ca9ba89e94" translate="yes" xml:space="preserve">
          <source>To install an Atmosphere package, you simply run &lt;code&gt;meteor add&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c7b0c2baa95fc697ec0b486a6699e6b2d07d01" translate="yes" xml:space="preserve">
          <source>To install an older version of SDK tools:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6724f8aced3b9c11dcafc95c2cd737a185b83efa" translate="yes" xml:space="preserve">
          <source>To integrate the two systems, we&amp;rsquo;ve developed a &lt;a href=&quot;https://atmospherejs.com/meteor/react-meteor-data&quot;&gt;&lt;code&gt;react-meteor-data&lt;/code&gt;&lt;/a&gt; package which allows React components to respond to data changes via Meteor&amp;rsquo;s &lt;a href=&quot;https://www.meteor.com/tracker&quot;&gt;Tracker&lt;/a&gt; reactivity system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d3564187390ed1e003c9f98758ef5c8a2f6b15" translate="yes" xml:space="preserve">
          <source>To learn more about using React in general and coming up to speed with the library, you should check out the &lt;a href=&quot;https://facebook.github.io/react/docs/getting-started.html&quot;&gt;React documentation&lt;/a&gt;, especially the &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot;&gt;thinking in React&lt;/a&gt; post, which explains the React philosophy well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be6e9a877bd53d1d673ad21f25bbe30867186b9" translate="yes" xml:space="preserve">
          <source>To maintain type safety, you can take advantage of TypeScript&amp;rsquo;s import elision and reference the types using the &lt;code&gt;typeof&lt;/code&gt; keyword. See the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/modules.html#optional-module-loading-and-other-advanced-loading-scenarios&quot;&gt;TypeScript handbook article&lt;/a&gt; for details or &lt;a href=&quot;http://ideasintosoftware.com/typescript-conditional-imports/&quot;&gt;this blog post&lt;/a&gt; for a concrete Meteor example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d96712ff0cf5452414572df486c9a663c0830af" translate="yes" xml:space="preserve">
          <source>To make this easier, we can attach functions to the prototype of the documents that belong to a given collection, to give us &amp;ldquo;methods&amp;rdquo; on the documents (in the object oriented sense). We can then use these methods to create new queries to find related documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91224ae6dcebefbaa340524c9967570d3a9b865c" translate="yes" xml:space="preserve">
          <source>To orchestrate your own container-based deployment there are existing base images to consider before rolling your own:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9154b71efe563daa58944cd919fae47c3e1fd255" translate="yes" xml:space="preserve">
          <source>To pass a callback to a React component that you are including with this helper, simply make a &lt;a href=&quot;http://blazejs.org/guide/reusable-components.html#Pass-callbacks&quot;&gt;template helper that returns a function&lt;/a&gt;, and pass it in as a prop, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb59cd487bde7d1322d518f6f6b4daf80a607e47" translate="yes" xml:space="preserve">
          <source>To pass additional options to Node.js use the &lt;code&gt;NODE_OPTIONS&lt;/code&gt; environment variable. For example: &lt;code&gt;NODE_OPTIONS='--debug'&lt;/code&gt; or &lt;code&gt;NODE_OPTIONS='--debug-brk'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e5eba1a0f3808376de81e4e3858f9e902eb214" translate="yes" xml:space="preserve">
          <source>To publish a package for the first time, use &lt;code&gt;meteor publish --create&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527330003be5c43207d078408f899a784b3f44c5" translate="yes" xml:space="preserve">
          <source>To publish publicly, &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;follow these instructions&lt;/a&gt;. When you&amp;rsquo;re done, anyone can add your package to their app with &lt;code&gt;npm install --save your-package&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2fe6b82a49f279121fa4ad86b0495385edb893d" translate="yes" xml:space="preserve">
          <source>To publish records to clients, call &lt;code&gt;Meteor.publish&lt;/code&gt; on the server with two parameters: the name of the record set, and a &lt;em&gt;publish function&lt;/em&gt; that Meteor will call each time a client subscribes to the name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d704cb2ecb8eaf3a9c4b3aeafeb43d83a7b0ab" translate="yes" xml:space="preserve">
          <source>To publish to a release track for the first time, use the &lt;code&gt;--create-track&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943f27f05db80da724049b8e2848fc0eac66d12d" translate="yes" xml:space="preserve">
          <source>To publish your package to Atmosphere, run &lt;a href=&quot;http://docs.meteor.com/#/full/meteorpublish&quot;&gt;&lt;code&gt;meteor publish&lt;/code&gt;&lt;/a&gt; from the package directory. To publish a package the package name must follow the format of &lt;code&gt;username:my-package&lt;/code&gt; and the package must contain a &lt;a href=&quot;#version-constraints&quot;&gt;SemVer version number&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c6e1b3bad2cef83474e361de7129172837aa3d8" translate="yes" xml:space="preserve">
          <source>To register a compiler plugin in your package, you need to do the following in your &lt;code&gt;package.js&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f222ca7270bbb1d2257dae311e65ec53867601" translate="yes" xml:space="preserve">
          <source>To register a linter build plugin in your package, you need to do a couple of things in your &lt;code&gt;package.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb98c78462560bd4ad9f58fe0504a52496105dc" translate="yes" xml:space="preserve">
          <source>To register a minifier plugin in your package, add the following in your &lt;code&gt;package.js&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c8a804a7bd997f4f26015c9fd7cf3f1ad8f86b9" translate="yes" xml:space="preserve">
          <source>To remove a version constraint for a specific package, run &lt;code&gt;meteor add&lt;/code&gt; again without specifying a version. For example above, to stop using version &lt;code&gt;1.1.0&lt;/code&gt; exactly, run &lt;code&gt;meteor add package&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54fbd95e6effd52fd8ea6b988d5fdd111837c94" translate="yes" xml:space="preserve">
          <source>To remove an unwanted Atmosphere package run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0588ce4da8859f547b94b040e16f58fbac7712" translate="yes" xml:space="preserve">
          <source>To request them at runtime, consider using the &lt;a href=&quot;https://github.com/dpa99c/cordova-diagnostic-plugin&quot;&gt;&lt;code&gt;cordova.plugins.diagnostic&lt;/code&gt;&lt;/a&gt; plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b785c9ffe98a48372bd2c6c56ed1db2c560368a6" translate="yes" xml:space="preserve">
          <source>To run a migration against your development database, it&amp;rsquo;s easiest to use the Meteor shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32df57f617c869a6e38979dc630b32322e8ab519" translate="yes" xml:space="preserve">
          <source>To run a migration against your production database, run your app locally in production mode (with production settings and environment variables, including database settings), and use the Meteor shell in the same way. What this does is run the &lt;code&gt;up()&lt;/code&gt; function of all outstanding migrations, against your production database. In our case, it should ensure all lists have a &lt;code&gt;todoCount&lt;/code&gt; field set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6363e284732c1e8431252139699e7c7aa9114c2" translate="yes" xml:space="preserve">
          <source>To run acceptance tests, we simply need to start our Meteor app as usual, and point Chimp at it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7482995f6f41dbf7835d0f1e35691487c3b162b5" translate="yes" xml:space="preserve">
          <source>To run the &lt;a href=&quot;#test-modes&quot;&gt;full-app tests&lt;/a&gt; in our application, we run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af85ca590bedf942279e432e4051efd8797f79c" translate="yes" xml:space="preserve">
          <source>To run the linter, you can now simply type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ecd61c591d15456fbd8a7abc557338c58ffe3d" translate="yes" xml:space="preserve">
          <source>To run the tests that our app defines, we run our app in &lt;a href=&quot;#test-modes&quot;&gt;test mode&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d29f9a1f0846c19394927f4ddf634ba42100a88" translate="yes" xml:space="preserve">
          <source>To run the tests, visit &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; in your browser. This kicks off &lt;code&gt;practicalmeteor:mocha&lt;/code&gt;, which runs your tests both in the browser and on the server. It displays the test results in the browser in a Mocha test reporter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b89b7e8c53deccf92bd51333b162e5480106210" translate="yes" xml:space="preserve">
          <source>To see all the Atmosphere packages installed run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be19c3df28624e7a1bf22f819db8f3e9d9376549" translate="yes" xml:space="preserve">
          <source>To see what options are available to you, read the complete description of the &lt;a href=&quot;http://docs.meteor.com/#/full/accounts_passwords&quot;&gt;&lt;code&gt;accounts-password&lt;/code&gt; API in the Meteor docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d5b3a3e30176d40e53bf24dc31b8037a8af8ae" translate="yes" xml:space="preserve">
          <source>To set and change the language that a user is seeing, you should call &lt;code&gt;TAPi18n.setLanguage(fn)&lt;/code&gt;, where &lt;code&gt;fn&lt;/code&gt; is a (possibly reactive) function that returns the current language. For instance you could write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e492a3c53e0896a354d18ab5ae0568e88766b4eb" translate="yes" xml:space="preserve">
          <source>To setup ESLint in your application, you can install the following &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm&lt;/a&gt; packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49464f868af9c94f409e998de694382cdd49d31d" translate="yes" xml:space="preserve">
          <source>To sign your app, you&amp;rsquo;ll need a private key. This key lets you publish and update your app. If you haven&amp;rsquo;t made a key for this app yet, run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95fc7df2acd06264c3dbd5b714c5f36f66449a3" translate="yes" xml:space="preserve">
          <source>To specify a port to listen on (instead of the default 3000), use &lt;code&gt;--port [PORT]&lt;/code&gt;. (The development server also uses port &lt;code&gt;N+1&lt;/code&gt; for the default MongoDB instance)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1a4f3e6eefd2251bedc17a2e534e23716c0d94" translate="yes" xml:space="preserve">
          <source>To start, let&amp;rsquo;s look at our &lt;a href=&quot;https://github.com/meteor/todos&quot;&gt;Todos example application&lt;/a&gt;, which is a great example to follow when structuring your app. Below is an overview of its directory structure. You can generate a new app with this structure using the command &lt;code&gt;meteor create appName --full&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e28adc0562a325e3e096fedb43aec2bcfc26cc2" translate="yes" xml:space="preserve">
          <source>To summarize:</source>
          <target state="translated">Подводя итог:</target>
        </trans-unit>
        <trans-unit id="c83c61683d4dad1ee11657a12ed5e9639f104d2f" translate="yes" xml:space="preserve">
          <source>To throttle writes, a typical approach is to use underscore&amp;rsquo;s &lt;a href=&quot;http://underscorejs.org/#throttle&quot;&gt;&lt;code&gt;.throttle()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;http://underscorejs.org/#debounce&quot;&gt;&lt;code&gt;.debounce()&lt;/code&gt;&lt;/a&gt; functions. For instance, in the Todos example app, we throttle writes on user input to 300ms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6533f8b171f29c5816af4a97430c2edb37bb3744" translate="yes" xml:space="preserve">
          <source>To turn AppCache off for specific browsers use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f44b3c20156dfcb966dfaf567376efa26a8b538" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;DDPRateLimiter&lt;/code&gt; for modifying the default rate-limiting rules, add the &lt;code&gt;ddp-rate-limiter&lt;/code&gt; package to your project in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee61dad927f167f72684f93f35d91882bbb60fe" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;ReactiveVar&lt;/code&gt;, add the &lt;code&gt;reactive-var&lt;/code&gt; package to your project by running in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd100aba1fbcb5a43429e4f5cb263049645886c3" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;tap:i18n&lt;/code&gt;, first &lt;code&gt;meteor add tap:i18n&lt;/code&gt; to add it to your app. Then we need to add a translation JSON file for our default language (&lt;code&gt;en&lt;/code&gt; for English) &amp;ndash; we can put it at &lt;code&gt;i18n/en.i18n.json&lt;/code&gt;. Once we&amp;rsquo;ve done that we can import and use the &lt;code&gt;TAPi18n.__()&lt;/code&gt; function to get translations for strings or keys within our JavaScript code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec5c3505a5272c0d1faceb3a43e931c7bcb12cd" translate="yes" xml:space="preserve">
          <source>To use an Atmosphere Package in your app you can import it with the &lt;code&gt;meteor/&lt;/code&gt; prefix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b02f75570d9ff673fb25a140cc15f35c4b13233" translate="yes" xml:space="preserve">
          <source>To use an npm package from a file in your application you simply &lt;code&gt;import&lt;/code&gt; the name of the package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eddd004a514ac2215f120d35caf57c44cf72dd3b" translate="yes" xml:space="preserve">
          <source>To use data from a Meteor collection inside a React component, install &lt;a href=&quot;https://atmospherejs.com/meteor/react-meteor-data&quot;&gt;&lt;code&gt;react-meteor-data&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8710d2dc353d315fe5dabead351df0239da0663c" translate="yes" xml:space="preserve">
          <source>To use it in Blaze:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2529ac4d2806e5f597d4647eb98ac036671d711b" translate="yes" xml:space="preserve">
          <source>To use publications, you need to create a subscription to it on the client. To do so, you call &lt;code&gt;Meteor.subscribe()&lt;/code&gt; with the name of the publication. When you do this, it opens up a subscription to that publication, and the server starts sending data down the wire to ensure that your client collections contain up to date copies of the data specified by the publication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c9d5b7ae4011b1e04433e238d56705d9484724" translate="yes" xml:space="preserve">
          <source>To use remote debugging in Safari, you&amp;rsquo;ll first need to enable the Developer menu. Go to &lt;em&gt;Safari &amp;gt; Preferences&lt;/em&gt; and make sure &amp;lsquo;Show Develop menu in menu bar&amp;rsquo; is checked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5bc8e300a3279a22bfa4d7d8a85474e2a3797b" translate="yes" xml:space="preserve">
          <source>To use shrinkpack, first globally install it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b20c6cf1de2fcb393f33d879382a297bf883b54" translate="yes" xml:space="preserve">
          <source>To use the factory in a test, we simply call &lt;code&gt;Factory.create&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07d9c508c0bb90680810845aec84361b9777cf0" translate="yes" xml:space="preserve">
          <source>To use this package, we need to define a &amp;ldquo;layout&amp;rdquo; component. In the Todos example app, that component is called &lt;code&gt;App_body&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7437bf72ebd1cf2ed63cd1afd16388e616aadb7f" translate="yes" xml:space="preserve">
          <source>To write data back to the server, you use a &lt;em&gt;Method&lt;/em&gt;, the subject of the &lt;a href=&quot;methods&quot;&gt;methods article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5db3239e498cad5ccfc3768fc1f7de9179b6a09" translate="yes" xml:space="preserve">
          <source>Tools like &lt;a href=&quot;http://browserify.org&quot;&gt;browserify&lt;/a&gt; and &lt;a href=&quot;https://webpack.github.io&quot;&gt;webpack&lt;/a&gt; are designed to provide a Node-like environment on the client so that many npm packages, even ones originally intended for the server, can run unmodified. Meteor&amp;rsquo;s ES2015 module system does this for you out of the box with no additional configuration necessary. In most cases, you can simply import npm dependencies from a client file, just as you would on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb90eb6ed224e27aae8dcf93409a2c0dae78f0a1" translate="yes" xml:space="preserve">
          <source>Top-level Elements in a &lt;code&gt;.html&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15771fc77a45dae33911c04bb171e6f49fa33cb" translate="yes" xml:space="preserve">
          <source>Tracker</source>
          <target state="translated">Tracker</target>
        </trans-unit>
        <trans-unit id="0fc9210e465ad693259057d1e18ab00a6a0a27d9" translate="yes" xml:space="preserve">
          <source>Tracker.Computation</source>
          <target state="translated">Tracker.Computation</target>
        </trans-unit>
        <trans-unit id="40abde14676099fc15058b971f3b7e5f33425e90" translate="yes" xml:space="preserve">
          <source>Tracker.Dependency</source>
          <target state="translated">Tracker.Dependency</target>
        </trans-unit>
        <trans-unit id="d6faef47982e15f8398607dca0cbf140a673f0b4" translate="yes" xml:space="preserve">
          <source>Triple-braced Tags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90524605603fa0385a548e1dac399c130060cfa" translate="yes" xml:space="preserve">
          <source>Triple-braced tags are used to insert raw HTML into a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297b38b7eb29ec5686435955320303c43ef3fa0e" translate="yes" xml:space="preserve">
          <source>True during the initial run of the computation at the time &lt;code&gt;Tracker.autorun&lt;/code&gt; is called, and false on subsequent reruns and at other times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337f1addcc2851e038a87f915a64650caf8dc133" translate="yes" xml:space="preserve">
          <source>True if a login method (such as &lt;code&gt;Meteor.loginWithPassword&lt;/code&gt;, &lt;code&gt;Meteor.loginWithFacebook&lt;/code&gt;, or &lt;code&gt;Accounts.createUser&lt;/code&gt;) is currently in progress. A reactive data source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de2e1c51dcf99eb34511846e503d98e6f5854b3" translate="yes" xml:space="preserve">
          <source>True if currently connected to the server. If false, changes and method invocations will be queued up until the connection is reestablished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1695b6982cf5b92a0fb48465ecc0f0225645a6a1" translate="yes" xml:space="preserve">
          <source>True if the server has &lt;a href=&quot;#publish_ready&quot;&gt;marked the subscription as ready&lt;/a&gt;. A reactive data source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15d35bf2da46d0314bc5729dd44b0593fe8ade7" translate="yes" xml:space="preserve">
          <source>True if there is a current computation, meaning that dependencies on reactive data sources will be tracked and potentially cause the current computation to be rerun.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b429efdd186ff62d97dfc41b3fbe37cdcacaaf" translate="yes" xml:space="preserve">
          <source>True if this Dependency has one or more dependent Computations, which would be invalidated if this Dependency were to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35e5942afb506d095c8d820d2471850bc542ba1" translate="yes" xml:space="preserve">
          <source>True if this View has been called on to be rendered by &lt;code&gt;Blaze.render&lt;/code&gt; or &lt;code&gt;Blaze.toHTML&lt;/code&gt; or another View. Once it becomes true, never becomes false again. A &amp;ldquo;created&amp;rdquo; View&amp;rsquo;s &lt;code&gt;.parentView&lt;/code&gt; has been set to its final value. &lt;code&gt;isCreated&lt;/code&gt; is set to true before &lt;code&gt;onViewCreated&lt;/code&gt; hooks are called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db38e16aea3816ea9b45530a31ecf9d3d462eb67" translate="yes" xml:space="preserve">
          <source>True if this View has been destroyed, such as by &lt;code&gt;Blaze.remove()&lt;/code&gt; or by a reactive update that removes it. A destroyed View&amp;rsquo;s autoruns have been stopped, and its DOM nodes have generally been cleaned of all Meteor reactivity and possibly dismantled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388166969413925a5bdd13cc81355743d4d4aa57" translate="yes" xml:space="preserve">
          <source>True if this View has been rendered to DOM by &lt;code&gt;Blaze.render&lt;/code&gt; or by the rendering of an enclosing View. Conversion to HTML by &lt;code&gt;Blaze.toHTML&lt;/code&gt; doesn&amp;rsquo;t count. Once true, never becomes false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afcc0ebdfcd53b9a8c0c90e3fcfdfb7ae7e9143" translate="yes" xml:space="preserve">
          <source>True if this computation has been invalidated (and not yet rerun), or if it has been stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b568cc105a32609145d75e97b1f22fc5eca124" translate="yes" xml:space="preserve">
          <source>True if this computation has been stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a5cb83cf1372831bb8c0ccce4a4760f6b37ce1" translate="yes" xml:space="preserve">
          <source>True if we are computing a computation now, either first time or recompute. This matches Tracker.active unless we are inside Tracker.nonreactive, which nullfies currentComputation even though an enclosing computation may still be running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4094ad479b147ce7ecddb6050f4f8d861caff62e" translate="yes" xml:space="preserve">
          <source>True to insert a document if no matching documents are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fac8d83f412385a2ac1c4f5d68a58b134b3eb3" translate="yes" xml:space="preserve">
          <source>True to modify all matching documents; false to only modify one of the matching documents (the default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd071ec4e8c2771db727bd75e53a147ad95bb75" translate="yes" xml:space="preserve">
          <source>Trusted code can modify multiple documents at once by setting &lt;code&gt;multi&lt;/code&gt; to true, and can use an arbitrary &lt;a href=&quot;#selectors&quot;&gt;Mongo selector&lt;/a&gt; to find the documents to modify. It bypasses any access control rules set up by &lt;a href=&quot;#allow&quot;&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#deny&quot;&gt;&lt;code&gt;deny&lt;/code&gt;&lt;/a&gt;. The number of affected documents will be returned from the &lt;code&gt;update&lt;/code&gt; call if you don&amp;rsquo;t pass a callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ff66283afe305b1c3f9c20f9c03605cd4e3bc7" translate="yes" xml:space="preserve">
          <source>Trusted code can use an arbitrary &lt;a href=&quot;#selectors&quot;&gt;Mongo selector&lt;/a&gt; to find the documents to remove, and can remove more than one document at once by passing a selector that matches multiple documents. It bypasses any access control rules set up by &lt;a href=&quot;#allow&quot;&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#deny&quot;&gt;&lt;code&gt;deny&lt;/code&gt;&lt;/a&gt;. The number of removed documents will be returned from &lt;code&gt;remove&lt;/code&gt; if you don&amp;rsquo;t pass a callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5392c950bdde4be7e5f5b8fdc6a1ca5f21e905cf" translate="yes" xml:space="preserve">
          <source>Twitter</source>
          <target state="translated">Twitter</target>
        </trans-unit>
        <trans-unit id="e2a4b8e0efe9303205f3474381c0be495b8b5efd" translate="yes" xml:space="preserve">
          <source>Twitter with &lt;code&gt;accounts-twitter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65eca67ab5791ed11c8bb708753e02f7a5995d04" translate="yes" xml:space="preserve">
          <source>Twitter, Weibo, Meteor developer accounts: &lt;code&gt;requestPermissions&lt;/code&gt; currently not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="f3a65a19c82a566d2129fd24cf51620203153f21" translate="yes" xml:space="preserve">
          <source>TypeScript can be installed with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7b9f3cfba78c5f5f835da717556e7cfd7cf685" translate="yes" xml:space="preserve">
          <source>TypeScript does not support nested &lt;code&gt;import&lt;/code&gt; statements, therefore conditionally importing modules requires you to use the &lt;code&gt;require&lt;/code&gt; statement (see &lt;a href=&quot;structure#using-require&quot;&gt;Using &lt;code&gt;require&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bb752bbc5d1e1894badba0103272490abfd2b7" translate="yes" xml:space="preserve">
          <source>Types of build plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f092c6d9cd99b0b7c54fc00ac8efb74941c361c9" translate="yes" xml:space="preserve">
          <source>Types of stores</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b776c43a97f3a815a98825e62b260c4d762f804" translate="yes" xml:space="preserve">
          <source>Types of tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a89dbeb0804c1230ae2a9bb6fe31ec4e65b71d" translate="yes" xml:space="preserve">
          <source>Typically a package will export one or more symbols, which you&amp;rsquo;ll need to reference with the destructuring syntax. You can find these exported symbols by either looking in that package&amp;rsquo;s &lt;code&gt;package.js&lt;/code&gt; file for &lt;a href=&quot;http://docs.meteor.com/#/full/pack_export&quot;&gt;&lt;code&gt;api.export&lt;/code&gt;&lt;/a&gt; calls or by looking in that package&amp;rsquo;s main JavaScript file for ES2015 &lt;code&gt;export&lt;/code&gt; calls like &lt;code&gt;export const packageName = 'package-name';&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243fffe4bd539132fde4dc4dfc5d8153e98f8fed" translate="yes" xml:space="preserve">
          <source>Typically the package will warn you if you have not done so. For example, if you install the &lt;a href=&quot;https://atmospherejs.com/meteor/react-meteor-data&quot;&gt;&lt;code&gt;react-meteor-data&lt;/code&gt;&lt;/a&gt; package into your app, you&amp;rsquo;ll also need to &lt;a href=&quot;#installing-npm&quot;&gt;install&lt;/a&gt; the &lt;a href=&quot;https://www.npmjs.com/package/react&quot;&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://www.npmjs.com/package/react-addons-pure-render-mixin&quot;&gt;&lt;code&gt;react-addons-pure-render-mixin&lt;/code&gt;&lt;/a&gt; packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5aa8ac5c97cd73cd04a039a07f2269bda5a038" translate="yes" xml:space="preserve">
          <source>Typically, you use &lt;code&gt;.throttle()&lt;/code&gt; if you are OK with the event happening during the user series of actions (i.e. you don&amp;rsquo;t mind the multiple, throttled events happening over time, as in this case), whereas you use &lt;code&gt;.debounce()&lt;/code&gt; if you want the events to happen whenever (in this example) the user stops typing for 300ms or longer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82392d4c0fb079cd9e3dec6d6c2ab9c47a8f6f5" translate="yes" xml:space="preserve">
          <source>UI components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="2c4f2ea08e55fbeec99963e458291ac33dd45138" translate="yes" xml:space="preserve">
          <source>URL pattern matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59addef772ceb127ba057b3e8227731ed35b79a1" translate="yes" xml:space="preserve">
          <source>URLs and Routing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13796f99f92349a87d26e6c9db3e70f9a6d02868" translate="yes" xml:space="preserve">
          <source>UX patterns for displaying new data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea3df7599c377417c35fd5fbd655e8eafc83e3f" translate="yes" xml:space="preserve">
          <source>Under &amp;ldquo;Whitelist Headers&amp;rdquo;, scroll down to select &amp;ldquo;Origin&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d58cc609adee7ef58bf0130c39755a9c3590cc" translate="yes" xml:space="preserve">
          <source>Under the hood, each helper starts a new &lt;a href=&quot;http://docs.meteor.com/api/tracker.html#Tracker-autorun&quot;&gt;&lt;code&gt;Tracker.autorun&lt;/code&gt;&lt;/a&gt;. When its reactive dependencies change, the helper is rerun. Helpers depend on their data context, passed arguments and other reactive data sources accessed during execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b878bbf9598bb5ee06e42a0dfd282f49503fc5" translate="yes" xml:space="preserve">
          <source>Understanding Blaze</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72bc8c7ccecc57a4e0f125bd444e3ca066bd991d" translate="yes" xml:space="preserve">
          <source>Understanding Meteor performance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5d96eae6460a3f1dcfd8fcf63848f4239348d0" translate="yes" xml:space="preserve">
          <source>Unexpected failures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7faa434689ebce51e5c367e561bf98ff54b8bd21" translate="yes" xml:space="preserve">
          <source>Unfortunately, not all publications are as simple to secure as the example above. For more tips on how to use &lt;code&gt;reywood:publish-composite&lt;/code&gt; to handle reactive changes in publications, see the &lt;a href=&quot;data-loading#complex-auth&quot;&gt;data loading article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6fdd293670da229ce904119e1e6a9179af0a72" translate="yes" xml:space="preserve">
          <source>Unfortunately, the e-mail ecosystem is &lt;a href=&quot;http://busylog.net/smtp-tls-ssl-25-465-587/&quot;&gt;confusing&lt;/a&gt;. More information can be found in the &lt;a href=&quot;https://nodemailer.com/smtp/&quot;&gt;Nodemailer docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a4be7e010cb6daabd6b2dab1722b9ed0372269" translate="yes" xml:space="preserve">
          <source>Unit testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb4f9edca2d5dda9f1d2bc06aea35521a5759ed" translate="yes" xml:space="preserve">
          <source>Unit testing is the process of isolating a section of code and then testing that the internals of that section work as you expect. As &lt;a href=&quot;structure&quot;&gt;we&amp;rsquo;ve split our code base up into ES2015 modules&lt;/a&gt; it&amp;rsquo;s natural to test those modules one at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6060d8f0b7a3c71d52884b176c4857139e83a3" translate="yes" xml:space="preserve">
          <source>Universal JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86251b1e296d5f02e9e014d5fe362ea8a73881ec" translate="yes" xml:space="preserve">
          <source>Unless you have a specific need to roll your own hosting environment, the other options here are definitely easier, and probably make for a better setup than doing everything from scratch. Operating a Meteor app in a way that it works correctly for everyone can be complex, and &lt;a href=&quot;#galaxy&quot;&gt;Galaxy&lt;/a&gt; handles a lot of the specifics like routing clients to the right containers and handling coordinated version updates for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e475b4db8186c54e82b380c6960d256c3d5fc6" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;observe&lt;/code&gt;, &lt;code&gt;observeChanges&lt;/code&gt; does not provide absolute position information (that is, &lt;code&gt;atIndex&lt;/code&gt; positions rather than &lt;code&gt;before&lt;/code&gt; positions.) This is for efficiency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="370730d29f8dba23681448b11394384e773e2def" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;{{#with}}&lt;/code&gt; (as used in templates), &lt;code&gt;Blaze.With&lt;/code&gt; has no &amp;ldquo;else&amp;rdquo; case, and a falsy value for the data context will not prevent the content from rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986225a2e3b5f21807473c42bae16262f3ad7f30" translate="yes" xml:space="preserve">
          <source>Unlike CommonJS &lt;code&gt;module.exports&lt;/code&gt;, the use of default exports does not prevent the simultaneous use of named exports. Here is how you can combine them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2018a4a7be9f98c1432fb054291dcc164d74f217" translate="yes" xml:space="preserve">
          <source>Unlike most other systems, you don&amp;rsquo;t have to manually declare these dependencies &amp;mdash; it &amp;ldquo;just works&amp;rdquo;. The mechanism is simple and efficient. When you call a function that supports reactive updates (such as a database query), it automatically saves the current Computation object, if any (representing, for example, the current template being rendered). Later, when the data changes, the function can &amp;ldquo;invalidate&amp;rdquo; the Computation, causing it to rerun (rerendering the template).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b609966fbe1d2e03907584cd43e0ec6aa829a110" translate="yes" xml:space="preserve">
          <source>Unlike purely string-based template systems, Spacebars is HTML-aware and designed to update the DOM automatically. As a result, you can&amp;rsquo;t use a template tag to insert strings of HTML that don&amp;rsquo;t stand on their own, such as a lone HTML start tag or end tag, or that can&amp;rsquo;t be easily modified, such as the name of an HTML element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="187deee1552d77fbc316c605cbcd2f14f4607f34" translate="yes" xml:space="preserve">
          <source>Unlike the other functions, &lt;code&gt;count&lt;/code&gt; registers a dependency only on the number of matching documents. (Updates that just change or reorder the documents in the result set will not trigger a recomputation.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e3392204b6952d6f61b85cf29209fca5d0f1bf" translate="yes" xml:space="preserve">
          <source>Untrusted code can only modify a single document at once, specified by its &lt;code&gt;_id&lt;/code&gt;. The modification is allowed only after checking any applicable &lt;a href=&quot;#allow&quot;&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#deny&quot;&gt;&lt;code&gt;deny&lt;/code&gt;&lt;/a&gt; rules. The number of affected documents will be returned to the callback. Untrusted code cannot perform upserts, except in insecure mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="342c03ffe7a1d69748a3d7ec1d39f9e9b6bfcb9f" translate="yes" xml:space="preserve">
          <source>Untrusted code can only remove a single document at a time, specified by its &lt;code&gt;_id&lt;/code&gt;. The document is removed only after checking any applicable &lt;a href=&quot;#allow&quot;&gt;&lt;code&gt;allow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#deny&quot;&gt;&lt;code&gt;deny&lt;/code&gt;&lt;/a&gt; rules. The number of removed documents will be returned to the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f2b5ca46c834095f797cd1368dfc747c462e2d" translate="yes" xml:space="preserve">
          <source>Updated assets are downloaded from the server using native downloading mechanisms, and stored on the device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2b7048f3db131f1da42a30a677df5a041679373" translate="yes" xml:space="preserve">
          <source>Updating stores</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="69f3545316c91218f1b07d896f6704b7536cb22e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--owner&lt;/code&gt; to decide which organization or user account you&amp;rsquo;d like to deploy a new app to if you are a member of more than one Galaxy-enabled account.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a734e5b84dc4f8a9c7aca4934d30b17967acd91c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;.js-&lt;/code&gt; selectors for event maps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b4ef28f8108468d01cf394c4aa764c81b49d15" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Blaze.remove&lt;/code&gt; to remove a template or View previously inserted with &lt;code&gt;Blaze.render&lt;/code&gt;, in such a way that any behaviors attached to the DOM by Meteor are cleaned up. The rendered template or View is now considered &lt;a href=&quot;templates#Template-onDestroyed&quot;&gt;&amp;ldquo;destroyed&amp;rdquo;&lt;/a&gt;, along with all nested templates and Views. In addition, any data assigned via jQuery to the DOM nodes is removed, as if the nodes were passed to jQuery&amp;rsquo;s &lt;code&gt;$(...).remove()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bacce3a2a13672b7823bf8ed643281e07f3704" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt;, and &lt;code&gt;removed&lt;/code&gt; when you don&amp;rsquo;t care about the order of the documents in the result set. They are more efficient than &lt;code&gt;addedAt&lt;/code&gt;, &lt;code&gt;changedAt&lt;/code&gt;, and &lt;code&gt;removedAt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f295d7c2395881484c4e1c78ecac8322edab4f02" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;meteor build &amp;lt;build-output-directory&amp;gt; --server=&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt; to build your app for production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab113ea3c01b21ec5c4d1f81b0886db22f95c92" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;meteor search&lt;/code&gt; from the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8317dece1d60274612b01fbc235ed24dfc7cd9c7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;onRendered()&lt;/code&gt; for 3rd party libraries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="961c4e8ba2af61e0a0e40a1c1a9d321b8bfd7613" translate="yes" xml:space="preserve">
          <source>Use Methods instead of client-side insert/update/remove and allow/deny.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d2be6d2a1e4ec9fc9f5e1bacecfada21f38c2d" translate="yes" xml:space="preserve">
          <source>Use a community package search website like &lt;a href=&quot;http://fastosphere.meteor.com/&quot;&gt;Fastosphere&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cc0752cbd2ae038a130eb625a262df2d469c19" translate="yes" xml:space="preserve">
          <source>Use a package from Atmosphere or npm that wraps the API into a nice JavaScript interface. For example, if you&amp;rsquo;re trying to load data from Facebook you could use the &lt;a href=&quot;https://www.npmjs.com/package/fbgraph&quot;&gt;fbgraph&lt;/a&gt; npm package. Read more about how to use npm with your app in the &lt;a href=&quot;build-tool#npm&quot;&gt;Build System article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d566695283d1a57974142bff4b7d1b5185dbe9" translate="yes" xml:space="preserve">
          <source>Use a reactive dict for state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a055520524f88e57197c0e698a97c17b390f1930" translate="yes" xml:space="preserve">
          <source>Use any router or UI framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6169a625b5c39cda78e91874ca2c90ff91eefb4" translate="yes" xml:space="preserve">
          <source>Use rate limiting to stop people from spamming you with subscriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a10eba6c6c8c4bdcba1683603289ff692d799fea" translate="yes" xml:space="preserve">
          <source>Use specific selectors and &lt;a href=&quot;http://guide.meteor.com/security.html#fields&quot;&gt;filter fields&lt;/a&gt; in publications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879291cc427788a9f0214648a5f462f8e276b0d0" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;http://docs.meteor.com/#/full/http&quot;&gt;&lt;code&gt;http&lt;/code&gt; package&lt;/a&gt; to access the service&amp;rsquo;s API directly. You&amp;rsquo;ll probably need to pass the access token from above in a header. For details you&amp;rsquo;ll need to search the API documentation for the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d74fa0f4c5803f2a3e03cbab654e8caafe723a8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ecmascript&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c09f7e3a2ce8af78ab146861944ef0ac08400f3" translate="yes" xml:space="preserve">
          <source>Use the below functions to initiate password changes or resets from the server or the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c688072a788bd50324e66e2dd4aa16fdf12bd9b8" translate="yes" xml:space="preserve">
          <source>Use the package &lt;a href=&quot;https://atmospherejs.com/juliancwirko/postcss&quot;&gt;juliancwirko:postcss&lt;/a&gt; to your app to enable PostCSS for your Meteor app. To do so, we remove the standard CSS minifier and replace it with the postcss package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72205db10ef5ee809240d7e0ab33037b7274d444" translate="yes" xml:space="preserve">
          <source>Use the template instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bdb377e4fe443080ee254526a761941f90dc8f" translate="yes" xml:space="preserve">
          <source>Use this variable to set the SMTP server for sending e-mails. &lt;a href=&quot;https://www.postmarkapp.com&quot;&gt;Postmark&lt;/a&gt;, &lt;a href=&quot;https://www.mandrillapp.com&quot;&gt;Mandrill&lt;/a&gt;, &lt;a href=&quot;https://www.mailgun.com&quot;&gt;MailGun&lt;/a&gt; and &lt;a href=&quot;https://www.sendgrid.com&quot;&gt;SendGrid&lt;/a&gt; (among others) are companies who can provide this service. The &lt;code&gt;MAIL_URL&lt;/code&gt; contains all of the information for connecting to the SMTP server and, like a URL, should look like &lt;code&gt;smtp://user:pass@yourservice.com:587&lt;/code&gt; or &lt;code&gt;smtps://user:pass@yourservice.com:465&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e31c10b6d910bca69a8dc84d50e0ef2543b0f9" translate="yes" xml:space="preserve">
          <source>Use this when you need to do more than simply accept or reject new user creation. With this function you can programatically control the contents of new user documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d617681615d8a768b31aa7d9fe8446ab56e69fa7" translate="yes" xml:space="preserve">
          <source>Use versions of core packages from a release. Unless provided, all packages will default to the versions released along with &lt;code&gt;meteorRelease&lt;/code&gt;. This will save you from having to figure out the exact versions of the core packages you want to use. For example, if the newest release of meteor is &lt;code&gt;METEOR@0.9.0&lt;/code&gt; and it includes &lt;code&gt;jquery@1.0.0&lt;/code&gt;, you can write &lt;code&gt;api.versionsFrom('METEOR@0.9.0')&lt;/code&gt; in your package, and when you later write &lt;code&gt;api.use('jquery')&lt;/code&gt;, it will be equivalent to &lt;code&gt;api.use('jquery@1.0.0')&lt;/code&gt;. You may specify an array of multiple releases, in which case the default value for constraints will be the &quot;or&quot; of the versions from each release: &lt;code&gt;api.versionsFrom(['METEOR@0.9.0',
'METEOR@0.9.5'])&lt;/code&gt; may cause &lt;code&gt;api.use('jquery')&lt;/code&gt; to be interpreted as &lt;code&gt;api.use('jquery@1.0.0 || 2.0.0')&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6848db95e8201decfb4d288c34ba8d67043b97" translate="yes" xml:space="preserve">
          <source>Used to generate URLs to your application by, among others, the accounts package. Provide a full URL to your application like this: &lt;code&gt;ROOT_URL=&quot;https://www.myapp.com&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daccde9557869f82dccbade0cba1286c36c7a8ec" translate="yes" xml:space="preserve">
          <source>Useful patterns for managing subscriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4325c61b581bf8fe6a3e2400d58928e7b9a55496" translate="yes" xml:space="preserve">
          <source>User Interfaces</source>
          <target state="translated">пользовательские интерфейсы</target>
        </trans-unit>
        <trans-unit id="ad4c8252553c4a4b05dbcaa42dcf601cea21365e" translate="yes" xml:space="preserve">
          <source>User documents in the database have secret data like access keys and hashed passwords. When &lt;a href=&quot;#publish-custom-data&quot;&gt;publishing user data to the client&lt;/a&gt;, be extra careful not to include anything that client shouldn&amp;rsquo;t be able to see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92ae70f9aa6d4032e366eb4340fc1e52d2bf92d" translate="yes" xml:space="preserve">
          <source>User experience patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d01c9af4a2007fdb6c1f64874508da43fe66cb" translate="yes" xml:space="preserve">
          <source>User experience, or UX, describes the experience of a user as they interact with your application. There are several UX patterns that are typical to most Meteor apps which are worth exploring here. Many of these patterns are tied to the way data is loaded as the user interacts with your app, so there are similar sections in the &lt;a href=&quot;data-loading#patterns&quot;&gt;data loading article&lt;/a&gt; talking about how to implement these patterns using Meteor&amp;rsquo;s publications and subscriptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3ba2af7f943c5da92635dc4cdd862ab5415d7a" translate="yes" xml:space="preserve">
          <source>User interface patterns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46eb6026b6ad46a4d08f316a52fffc281577db72" translate="yes" xml:space="preserve">
          <source>Users and Accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633c224a715eb2226cdf3095674a790de9909b96" translate="yes" xml:space="preserve">
          <source>Users are by default allowed to specify their own &lt;code&gt;profile&lt;/code&gt; field with &lt;a href=&quot;#accounts_createuser&quot;&gt;&lt;code&gt;Accounts.createUser&lt;/code&gt;&lt;/a&gt; and modify it with &lt;code&gt;Meteor.users.update&lt;/code&gt;. To allow users to edit additional fields, use &lt;a href=&quot;#allow&quot;&gt;&lt;code&gt;Meteor.users.allow&lt;/code&gt;&lt;/a&gt;. To forbid users from making any modifications to their user document:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c716801b2d3bf8d16f7c2eb9c7eb5a26e35dddba" translate="yes" xml:space="preserve">
          <source>Using 3rd party packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53bf5eee67f58057293029c899e24eead5ee207b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;require&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b08b28ba8d34643cfc722ee74c955be5f52685" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;tap:i18n&lt;/code&gt; in Blaze</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f58e648939108214570b0c5866de129d4492bad" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;tap:i18n&lt;/code&gt; in JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c01f30a7b96749ed7813c2c4b2657077db3732" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;universe:i18n&lt;/code&gt; in JS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e51e68f230a8c2b63a310eb062178595feb3ccc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;universe:i18n&lt;/code&gt; in React</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5e4bbb41c286113d572be757efa96cd456055d" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;universe:i18n&lt;/code&gt; in React components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7a9d1a0615cfdfc10e353409b5c44dcd2b94b2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;withTracker&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1becafd3ff808f31d09078cd73dec993eb57d465" translate="yes" xml:space="preserve">
          <source>Using Atmosphere Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbb18c55323003c2090d120062d5bcea8baa8df" translate="yes" xml:space="preserve">
          <source>Using Chromatic enables rapid development of complex components. Typically in a large application, it can be quite difficult to achieve certain states of components purely by &amp;ldquo;using&amp;rdquo; the application. For example, a component in Galaxy can enter a complex state if two deploys of the same app happen simultaneously. With Chromatic we&amp;rsquo;re able to define this state at the component level and test it independently of the application logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9829782339534f68303ee625019442673b3ec5" translate="yes" xml:space="preserve">
          <source>Using CoffeeScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4adad8e38f5d01139eefff6e8ab4cb08f160d418" translate="yes" xml:space="preserve">
          <source>Using ESLint in VS Code requires installation of the 3rd party &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot;&gt;ESLint&lt;/a&gt; extension. In order to install the extension, follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79f5cdb6ee03272f55707b7689f81aee7587066" translate="yes" xml:space="preserve">
          <source>Using ESLint with Atom is simple. Just install these three packages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c6bb31f3077116b580521466ca91f208a028d1" translate="yes" xml:space="preserve">
          <source>Using Flow Router</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d260bc0c0f70d136c4fb9d14420935843358c52" translate="yes" xml:space="preserve">
          <source>Using Flow Router with React is very similar to using it with Blaze. The only difference is that in your route actions, you should use the &lt;a href=&quot;https://www.npmjs.com/package/react-mounter&quot;&gt;&lt;code&gt;react-mounter&lt;/code&gt;&lt;/a&gt; package to mount components with a layout. Once you &lt;code&gt;meteor npm install --save react-mounter&lt;/code&gt;, you can do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1845bf9ab58b1949566b1478b9830d7643eac47e" translate="yes" xml:space="preserve">
          <source>Using Meteor&amp;rsquo;s data system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b414ab72c99070ca8b8fafcef4de7d95eeb309c" translate="yes" xml:space="preserve">
          <source>Using React Router is also straightforward. Once you &lt;code&gt;meteor npm install --save react-router history&lt;/code&gt;, you can simply export a list of nested routes as you would in any other React Router driven React application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0dca4a6a1231a9f0b22d19f1526d27457ca851" translate="yes" xml:space="preserve">
          <source>Using React in Atmosphere Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ecdd2e45eb7214b2defd0d440c303ea897be28" translate="yes" xml:space="preserve">
          <source>Using Session.equals here means that when the user clicks on an item and changes the selection, only the newly selected and the newly unselected items are re-rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e63d2694fcde1eafdb5a2385c1ae2fc7da9f76a" translate="yes" xml:space="preserve">
          <source>Using Ubuntu Make</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a45711d8609a4d5a7f5e373c787e641c382e5e12" translate="yes" xml:space="preserve">
          <source>Using a local collection to store and display data fetched from a Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac426f4d17ac37edf8da6bfd273cc4964850681a" translate="yes" xml:space="preserve">
          <source>Using any of Meteor&amp;rsquo;s &lt;a href=&quot;build-tool#css&quot;&gt;supported CSS pre-processors&lt;/a&gt; you can import other style files provided by an NPM into your application using both relative and absolute paths. However, this will only work for the top-level app and will not work inside an Atmosphere package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c3cfb8bbd7432bd063ad887566596bb7be1f09" translate="yes" xml:space="preserve">
          <source>Using any of Meteor&amp;rsquo;s supported CSS pre-processors you can import other style files using the &lt;code&gt;{package-name}&lt;/code&gt; syntax as long as those files are designated to be lazily evaluated as &amp;ldquo;import&amp;rdquo; files. To get more details on how to determine this see &lt;a href=&quot;build-tool#css-source-vs-import&quot;&gt;CSS source versus import&lt;/a&gt; files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea3cba804284a77f2e8a2c498c7830c69db10b3" translate="yes" xml:space="preserve">
          <source>Using npm Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d014bbccb76d2fb30ab515cc552cf71f5db19b0f" translate="yes" xml:space="preserve">
          <source>Using oauth-encryption on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5c16000f486145e2add9cb3f0d3da20e90fbc6" translate="yes" xml:space="preserve">
          <source>Using oauth-encryption with accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec171f85b43e47ed7a519aded9254709b68e16b2" translate="yes" xml:space="preserve">
          <source>Using oauth-encryption without accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd99de4018ad13733eafdbf3510c5663df6e7836" translate="yes" xml:space="preserve">
          <source>Using plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5017817c024119d2f5bd08a3f92452d595bb4ff5" translate="yes" xml:space="preserve">
          <source>Using schemas on write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55a9fca65358172a95d4d2999bd0306206dafee" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://atmospherejs.com/johanbrook/publication-collector&quot;&gt;&lt;code&gt;johanbrook:publication-collector&lt;/code&gt;&lt;/a&gt; package, you&amp;rsquo;re able to test individual publication&amp;rsquo;s output without needing to create a traditional subscription:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad9185ceb62e3d26112c00bede6f61a36486ad7" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;meteor npm ...&lt;/code&gt; commands in place of traditional &lt;code&gt;npm ...&lt;/code&gt; commands is particularly important when using Node.js modules that have binary dependencies that make native C calls (like &lt;a href=&quot;https://www.npmjs.com/package/bcrypt&quot;&gt;&lt;code&gt;bcrypt&lt;/code&gt;&lt;/a&gt;) because doing so ensures that they are built using the same libaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f933359ba9f9f8c3a3b9d72930fa9d798376fb73" translate="yes" xml:space="preserve">
          <source>Using the style guide to prototype loading state</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53683da0e52c2eee9035300710d9ff0c180f58d2" translate="yes" xml:space="preserve">
          <source>Usually build plugins implement a class that is given a list of files to process. Commonly, such files have the following methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d603c9c01b0a98ae82dd143867da9b4fbebd2f08" translate="yes" xml:space="preserve">
          <source>Usually it is better to not rely on your application code in migrations (because the application will change over time, and the migrations should not). For instance, having your migrations pass through your Collection2 collections (and thus check schemas, set autovalues etc) is likely to break them over time as your schemas change over time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7df64632cf5e443809b8f851703ad5b54ec8b29" translate="yes" xml:space="preserve">
          <source>Usually it makes for a better UX to show as much of the screen as possible as quickly as possible and to only show loading state for the parts of the screen that are still waiting on data. So a nice pattern to follow is &amp;ldquo;per-component loading&amp;rdquo;. We do this in the Todos app when you visit the list page&amp;mdash;we instantly render the list metadata, such as its title and privacy settings, and render a loading state for the list of todos while we wait for them to appear.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="080418566278cf80d070092e08481e3b90f576c9" translate="yes" xml:space="preserve">
          <source>Usually such state is stored in a &lt;em&gt;global singleton&lt;/em&gt; object which we can call a store. A singleton is a data structure of which only a single copy logically exists. The current user and the router from above are typical examples of such global singletons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd49f6dedfd5f286c952f4f335ead4222474ceb" translate="yes" xml:space="preserve">
          <source>Usually, the popup-based flow is preferable because the user will not have to reload your whole app at the end of the login flow. However, the popup-based flow requires browser features such as &lt;code&gt;window.close&lt;/code&gt; and &lt;code&gt;window.opener&lt;/code&gt; that are not available in all mobile environments. In particular, we recommend using &lt;code&gt;Meteor.loginWith&amp;lt;ExternalService&amp;gt;({ loginStyle: 'redirect' })&lt;/code&gt; in the following environments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448557a493c70fe0dcbe5cc202ed2a74070bab70" translate="yes" xml:space="preserve">
          <source>Usually, we can redirect in response to a user&amp;rsquo;s action by calling &lt;code&gt;FlowRouter.go()&lt;/code&gt; and friends, like in our list creation example above, but if a user browses directly to a URL that doesn&amp;rsquo;t exist, it&amp;rsquo;s useful to know how to redirect immediately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d79eabf3b21a3edcb3cca6cccdaf3a8fbeea61e" translate="yes" xml:space="preserve">
          <source>Usually, while developing an application, it makes sense to run &lt;code&gt;meteor test&lt;/code&gt; on a second port (say &lt;code&gt;3100&lt;/code&gt;), while also running your main application in a separate process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e80e11d33452a9a41da25c7cbb3152b516fe169" translate="yes" xml:space="preserve">
          <source>Usually, you don&amp;rsquo;t need to include &lt;code&gt;accounts-base&lt;/code&gt; yourself since it&amp;rsquo;s added for you if you use &lt;code&gt;accounts-password&lt;/code&gt; or similar, but it&amp;rsquo;s good to be aware of what is what.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafcc18c6001832250fcc1b24de9d49644426902" translate="yes" xml:space="preserve">
          <source>Valid key values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4809279eaffccbaae44cdeedc2f2acf685589ca" translate="yes" xml:space="preserve">
          <source>Validate all Method and publication arguments, and include the &lt;code&gt;audit-argument-checks&lt;/code&gt; to check this automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03557f20b760d4f31c2307f132591da6e45886a6" translate="yes" xml:space="preserve">
          <source>Validate all arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888b7ee83a472f1d312ef6cdfc9d78c961d9a324" translate="yes" xml:space="preserve">
          <source>Validate all arguments using &lt;code&gt;check&lt;/code&gt; or &lt;code&gt;aldeed:simple-schema&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1a9c130d0822b346ebc944d18c77af8995f90f" translate="yes" xml:space="preserve">
          <source>Validate and check all inputs that come from the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15f0bb7c9a7bdb62845bdb709898269a288d135a" translate="yes" xml:space="preserve">
          <source>Validate data context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a59d7c91ab12693f3c24c5b83bfd3385bd2c0e" translate="yes" xml:space="preserve">
          <source>Validate login attempts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ce9b6cba405f47ec78abd4743634d121c5bdee" translate="yes" xml:space="preserve">
          <source>Validate login callbacks that aren&amp;rsquo;t explicitly trying to override a previous error generally have no need to run if the attempt has already been determined to fail, and should start with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7890fdb5f8ccd072b05f6c52a66ef7fc2a051cb9" translate="yes" xml:space="preserve">
          <source>Validating against a schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb936e80a470ebeaaad104b273f6fb1e1b350a2b" translate="yes" xml:space="preserve">
          <source>ValidationError for argument validation errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f429b7cf8a4db1908837249a6ac2a54a6e11bf9b" translate="yes" xml:space="preserve">
          <source>Values returned from helpers must be pure text, not HTML. (That is, strings should have &lt;code&gt;&amp;lt;&lt;/code&gt;, not &lt;code&gt;&amp;amp;lt;&lt;/code&gt;.) Spacebars will perform any necessary escaping if a template is rendered to HTML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045c90945319688ae9d74869140c5d56b7e85fb9" translate="yes" xml:space="preserve">
          <source>Variables introduced this way take precedence over names of templates, global helpers, fields of the current data context and previously introduced variables with the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd63e59c29dd06130dff6566b7da5d024348166" translate="yes" xml:space="preserve">
          <source>Version numbers in string form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4db5c9295ba20317d97afec7f45171a7d75f8f0" translate="yes" xml:space="preserve">
          <source>View layers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80862a89e60d27db6c651d4339c6e41365075e1c" translate="yes" xml:space="preserve">
          <source>Viewing</source>
          <target state="translated">Viewing</target>
        </trans-unit>
        <trans-unit id="e5f044a125b61640854a6b6d36ce37e1659ea156" translate="yes" xml:space="preserve">
          <source>Visit the &lt;a href=&quot;https://forums.meteor.com&quot;&gt;Meteor discussion forums&lt;/a&gt; to announce projects, get help, talk about the community, or discuss changes to core.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423f1f3d80c4d824ca917e13649a5c584a13ec87" translate="yes" xml:space="preserve">
          <source>Visual Studio Code</source>
          <target state="translated">Visual Studio Code</target>
        </trans-unit>
        <trans-unit id="80dba7512d8171ffe0c68de505c83939c8e4f7b6" translate="yes" xml:space="preserve">
          <source>Visually testing reusable components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f77218a678f83cf7b0f6386bfaa4b68ac89b8ee" translate="yes" xml:space="preserve">
          <source>Watch a query. Receive callbacks as the result set changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023860dab61f66b01b653c243028682ec7205894" translate="yes" xml:space="preserve">
          <source>Watch a query. Receive callbacks as the result set changes. Only the differences between the old and new documents are passed to the callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70677505fbf49c176a22cca7a1b636171a3e136" translate="yes" xml:space="preserve">
          <source>We achieve this by passing the readiness of the todos list down from the smart component which is subscribing (the &lt;code&gt;listShowPage&lt;/code&gt;) into the reusable component which renders the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b484b3d7f114e81448853cb7597adc9e8c0f6e" translate="yes" xml:space="preserve">
          <source>We are then able to wire in the denormalizer into the mutations of the &lt;code&gt;Todos&lt;/code&gt; collection like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33f8b817ee66745ac583a46ea670f6a8c6a78db" translate="yes" xml:space="preserve">
          <source>We attach the schema to the namespace of &lt;code&gt;Lists&lt;/code&gt; directly, which allows us to check objects against this schema directly whenever we want, such as in a form or &lt;a href=&quot;methods&quot;&gt;Method&lt;/a&gt;. In the &lt;a href=&quot;#schemas-on-write&quot;&gt;next section&lt;/a&gt; we&amp;rsquo;ll see how to use this schema automatically when writing to the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ff4d01015b98dd760aa2436a1958993a17aa88" translate="yes" xml:space="preserve">
          <source>We believe Methods provide a much better primitive for building modern applications than REST endpoints built on HTTP. Let&amp;rsquo;s go over some of the things you get for free with Methods that you would have to worry about if using HTTP. The purpose of this section is not to convince you that REST is bad - it&amp;rsquo;s just to remind you that you don&amp;rsquo;t need to handle these things yourself in a Meteor app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f0dc5c09269563f1248497ac835d4da26a207a" translate="yes" xml:space="preserve">
          <source>We can also add that command to our &lt;code&gt;package.json&lt;/code&gt; as a &lt;code&gt;test&lt;/code&gt; script:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9107c4505267d3b570f2f760a133029f39b3d4" translate="yes" xml:space="preserve">
          <source>We can also apply the same structure to testing React components and recommend the &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;Enzyme&lt;/a&gt; package, which simulates a React component&amp;rsquo;s environment and allows you to query it using CSS selectors. A larger suite of tests is available in the &lt;a href=&quot;https://github.com/meteor/todos/tree/react&quot;&gt;react branch of the Todos app&lt;/a&gt;, but let&amp;rsquo;s look at a simple example for now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d2f77dfd1bf7e88a8d062c6fdb2f47955b940c" translate="yes" xml:space="preserve">
          <source>We can also easily use translations in Blaze templates. To do so, we can use the &lt;code&gt;{{_ }}&lt;/code&gt; helper. In the Todos app we use the actual string that we want to output in English as the i18n key, which means we don&amp;rsquo;t need to provide an English translation, although perhaps in a real app you might want to provide keys from the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f22f384764aee1fe14c7dafc10fb665e2fa8d68" translate="yes" xml:space="preserve">
          <source>We can also use &lt;code&gt;publish-composite&lt;/code&gt; to perform complex authorization in publications. For instance, consider if we had a &lt;code&gt;Todos.admin.inList&lt;/code&gt; publication that allowed an admin to bypass default publication&amp;rsquo;s security for users with an &lt;code&gt;admin&lt;/code&gt; flag set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404edd3a8b9cec4841d4934e807761f1104d352e" translate="yes" xml:space="preserve">
          <source>We can also use a command-line driver for Mocha &lt;a href=&quot;https://atmospherejs.com/meteortesting/mocha&quot;&gt;&lt;code&gt;meteortesting:mocha&lt;/code&gt;&lt;/a&gt; to run our standard tests on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8319bf829fd8fb9f0ee17a63e83f77c056cbca35" translate="yes" xml:space="preserve">
          <source>We can determine if the user is currently viewing the list with the &lt;code&gt;activeListClass&lt;/code&gt; helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180102553a75ea5c131b70101ebffe037336b39e" translate="yes" xml:space="preserve">
          <source>We can now distinguish between the 5 states above based on these conditions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db255d04f2d2e46dd8598a7e77a72a778370ff8" translate="yes" xml:space="preserve">
          <source>We can now use the data from the local collection &lt;code&gt;ScoreAverages&lt;/code&gt; inside a UI component exactly the same way we would use a regular MongoDB collection. Instead of it updating automatically, we&amp;rsquo;ll need to call &lt;code&gt;updateAverages&lt;/code&gt; every time we need new results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111a91f091af503fa1f23d871fb7238da463c6a1" translate="yes" xml:space="preserve">
          <source>We can take advantage of the object specification form of a block tag to define an object with properties we name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e81303b7fca31ea4339d443f8ad45d76e557a92" translate="yes" xml:space="preserve">
          <source>We can use a subclass for this case as well, overriding the &lt;code&gt;remove()&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc12cc8dc89146524fb0f80a1ccdca1c2811d0de" translate="yes" xml:space="preserve">
          <source>We can use the &lt;a href=&quot;#test-data&quot;&gt;Factory package&amp;rsquo;s&lt;/a&gt;&lt;code&gt;.build()&lt;/code&gt; API to create a test document without inserting it into any collection. As we&amp;rsquo;ve been careful not to call out to any collections directly in the reusable component, we can pass the built &lt;code&gt;todo&lt;/code&gt; document directly into the template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3849a93ff5248576e0a3e5125111f84d10c745f" translate="yes" xml:space="preserve">
          <source>We can use the &lt;a href=&quot;https://atmospherejs.com/dburles/collection-helpers&quot;&gt;&lt;code&gt;dburles:collection-helpers&lt;/code&gt;&lt;/a&gt; package to easily attach such methods (or &amp;ldquo;helpers&amp;rdquo;) to documents. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9491149f883c97c881b591b443d5b7c9fb89ec3" translate="yes" xml:space="preserve">
          <source>We can use this information to be more subtle about when we try and show data to users, and when we show a loading screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74db3094b83b131983d2fc11f77e3f2242d446c" translate="yes" xml:space="preserve">
          <source>We could write our above migration like so (note that you must be on MongoDB 2.6 or later for the bulk update operations to exist). We can access the native MongoDB API via &lt;a href=&quot;http://docs.meteor.com/api/collections.html#Mongo-Collection-rawCollection&quot;&gt;&lt;code&gt;Collection#rawCollection()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eee7c51d10456d3ad169288246f8e84033bc7c4" translate="yes" xml:space="preserve">
          <source>We do that in the &lt;code&gt;action&lt;/code&gt; function of our &lt;code&gt;Lists.show&lt;/code&gt; route definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9855e9b007cc49cf29b6e64ad7e7bc2c6e5580ac" translate="yes" xml:space="preserve">
          <source>We do this for the same reason we subscribe in the component in the first place&amp;mdash;to avoid action at a distance and to make it easier to understand where data comes from. A common pattern is to fetch the data in a parent template, and then pass it into a &amp;ldquo;pure&amp;rdquo; child component, as we&amp;rsquo;ll see it in the &lt;a href=&quot;ui-ux#components&quot;&gt;UI Article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1651ae38461b176e14355178d2e8cdee134ca5be" translate="yes" xml:space="preserve">
          <source>We do this with Blaze&amp;rsquo;s &lt;code&gt;Template.subscriptionsReady&lt;/code&gt; which is perfect for this purpose, as it waits for all the subscriptions that the current component has asked for to become ready.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f04ce9e68f5ba71117f050c42d38f05296bc5d" translate="yes" xml:space="preserve">
          <source>We have slightly modified the way Underscore differentiates between objects and arrays in &lt;a href=&quot;http://underscorejs.org/#each&quot;&gt;collection functions&lt;/a&gt;. The original Underscore logic is to treat any object with a numeric &lt;code&gt;length&lt;/code&gt; property as an array (which helps it work properly on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/NodeList&quot;&gt;&lt;code&gt;NodeList&lt;/code&gt;s&lt;/a&gt;). In Meteor&amp;rsquo;s version of Underscore, objects with a numeric &lt;code&gt;length&lt;/code&gt; property are treated as objects if they have no prototype (specifically, if &lt;code&gt;x.constructor === Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55ad990e0ddae5dc67ee2451fdf32e798033ca5" translate="yes" xml:space="preserve">
          <source>We might want to write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d92e893f2eb16248ff3c876dece5c8af700c08be" translate="yes" xml:space="preserve">
          <source>We place the &lt;code&gt;FlowRouter.go('Lists.show')&lt;/code&gt; outside of the callback of the Method call, so that it runs right away. First we &lt;em&gt;simulate&lt;/em&gt; the method (which creates a list locally in Minimongo), then route to it. Eventually the server returns, usually creating the exact same list (which the user will not even notice). In the unlikely event that the server call fails, we show an error and redirect back to the homepage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7531fbd03b44e92eb25ae25659d6ecd13b12937" translate="yes" xml:space="preserve">
          <source>We recommend choosing and sticking to a JavaScript style guide and enforcing it with tools. A popular option that we recommend is the &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb style guide&lt;/a&gt; with the ES6 extensions (and optionally React extensions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b25b116ae91d3081999d0fc63470aeadac903ca" translate="yes" xml:space="preserve">
          <source>We recommend using the &lt;a href=&quot;https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb&quot;&gt;Airbnb eslint configuration&lt;/a&gt; which verifies the Airbnb styleguide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="825bccad1882a72368fdd0d2dbb69ddc1f9a5239" translate="yes" xml:space="preserve">
          <source>We recommend using these approaches only if absolutely required and if your customizations can not be handled by standard configuration options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66eae3b48f33946df3e77d5d20aaa2c7257b1d2" translate="yes" xml:space="preserve">
          <source>We saw above that using a helper (or data context lookup) in the form &lt;code&gt;checked={{todo.checked}}&lt;/code&gt; will add the checked property to the HTML tag if &lt;code&gt;todo.checked&lt;/code&gt; evaluates to true. Also, you can directly include an object in the attribute list of an HTML element to set multiple attributes at once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="212c94829bfa33adf98a72f023b4376341891278" translate="yes" xml:space="preserve">
          <source>We simply define the &lt;code&gt;ListPage&lt;/code&gt; component as a presentational component that expects its data to be passed in using React &lt;code&gt;props&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e900738915d1e4581c9270c11ba6798344ecd067" translate="yes" xml:space="preserve">
          <source>We specify that the &lt;code&gt;name&lt;/code&gt; field of a list is required and must be a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d948a30fbdb6a91c67d14d6ea8e2059f0606020" translate="yes" xml:space="preserve">
          <source>We specify that the &lt;code&gt;userId&lt;/code&gt;, which is optional, must be a string that looks like the ID of a user document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7009320b4b09a7b757eb5e9991434d7ab9353a" translate="yes" xml:space="preserve">
          <source>We specify the &lt;code&gt;incompleteCount&lt;/code&gt; is a number, which on insertion is set to &lt;code&gt;0&lt;/code&gt; if not otherwise specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b0a9a9ca4488500814241d40e6704df4afbb214" translate="yes" xml:space="preserve">
          <source>We suggest a convention of naming it &lt;code&gt;instance&lt;/code&gt; in these contexts and assigning it at the top of every relevant helper. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b5bece7791c8df87066cd2677025526a69426c" translate="yes" xml:space="preserve">
          <source>We suggest using the &lt;code&gt;this.userId&lt;/code&gt; property on the context of Methods and publications instead, and passing that around through function arguments to wherever you need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2134562a7ab740161619af149b6d6f5e9287480e" translate="yes" xml:space="preserve">
          <source>We then import both of these files in &lt;code&gt;imports/startup/client/index.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713e02ddecbd33150bd5374b9b6500732e8e90ac" translate="yes" xml:space="preserve">
          <source>We think you&amp;rsquo;re going to love the new module system, and that&amp;rsquo;s why it will be installed by default for all new apps and packages. Nevertheless, the &lt;code&gt;modules&lt;/code&gt; package is totally optional, and it will be up to you to add it to existing apps and/or packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5c0c4ca46f3b35eb14ccc928b3173e72e033c7" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;this.subscribe()&lt;/code&gt; as opposed to &lt;code&gt;Meteor.subscribe()&lt;/code&gt; so that the component automatically keeps track of when the subscriptions are ready. We can use this information in our HTML template with the built-in &lt;code&gt;{{Template.subscriptionsReady}}&lt;/code&gt; helper or within helpers using &lt;code&gt;instance.subscriptionsReady()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95d2deaaa1a25dfab3069f2e104db52c56127d7" translate="yes" xml:space="preserve">
          <source>We use an &lt;code&gt;autorun()&lt;/code&gt; here to ensure that the data context is re-validated whenever it changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a138c75af5bcc2abd919d1721259883355592db2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;d increment that &lt;code&gt;requestedTodos&lt;/code&gt; variable when the user clicks &amp;ldquo;load more&amp;rdquo; (or perhaps just when they scroll to the bottom of the page).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d04dac8ac69741203406a4991907b155caf924" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll be referring to Meteor Methods with a capital M to differentiate them from class methods in JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e8fa969226cc6b287da3fa1545b1c42f850b79" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll talk about how to handle the &lt;code&gt;ValidationError&lt;/code&gt; in the section on forms below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9cf8923f77b7e959c683403bee0429e2620088" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve already seen an example of using an &lt;code&gt;autorun&lt;/code&gt; to re-subscribe when the (reactive) arguments to a subscription change. It&amp;rsquo;s worth digging in a little more detail to understand what happens in this scenario.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16c8fdb82d60c63756a3eca4d4896792eaca52e2" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve seen examples above of failures which you don&amp;rsquo;t really anticipate will happen. It&amp;rsquo;s difficult and inefficient to defend against every possible error, however unlikely. However, there are some catch-all patterns that you can use for unexpected failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a92ee0dd1acece00ece044f08379b324d51bfcb" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve seen one example of running tests on the command line, using our &lt;code&gt;meteor npm run chimp-test&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898763cf37250e72b399888e07b50bfa8f05c41d" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve seen that &lt;code&gt;{{todo.title}}&lt;/code&gt; accesses the &lt;code&gt;title&lt;/code&gt; property of the &lt;code&gt;todo&lt;/code&gt; item on the current data context. Additionally, &lt;code&gt;..&lt;/code&gt; accesses the parent data context (rarely a good idea), &lt;code&gt;list.todos.[0]&lt;/code&gt; accesses the first element of the &lt;code&gt;todos&lt;/code&gt; array on &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b6d6d89517eff4ce180cea4ab387ae48e094cb" translate="yes" xml:space="preserve">
          <source>WebStorm</source>
          <target state="translated">WebStorm</target>
        </trans-unit>
        <trans-unit id="3987502f114b2d73c65ea1910a97319cbcd2d663" translate="yes" xml:space="preserve">
          <source>WebStorm provides &lt;a href=&quot;https://www.jetbrains.com/webstorm/help/eslint.html&quot;&gt;these instructions for using ESLint&lt;/a&gt;. After you install the ESLint Node packages and set up your &lt;code&gt;package.json&lt;/code&gt;, just enable ESLint and click &amp;ldquo;Apply&amp;rdquo;. You can configure how WebStorm should find your &lt;code&gt;.eslintrc&lt;/code&gt; file, but on my machine it worked without any changes. It also automatically suggested switching to &amp;ldquo;JSX Harmony&amp;rdquo; syntax highlighting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f52bca7c0abe7f1f7a60dc34b7755de6d6f44c7" translate="yes" xml:space="preserve">
          <source>What Cordova is, and how Meteor integrates with it to build mobile apps from a single codebase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715ab59402756713b9ed0fe2d54d30ea472c0019" translate="yes" xml:space="preserve">
          <source>What Methods are in Meteor and how they work in detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a09cbaa3e5001ee250ebcf3fbc1b17367963e57" translate="yes" xml:space="preserve">
          <source>What React is, and why you would consider using it with Meteor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e67532c2b2157c0135287af2681e37e1f7e285" translate="yes" xml:space="preserve">
          <source>What URL will users use to access your site? You&amp;rsquo;ll probably need to register a domain name with a domain registrar, and setup DNS entries to point to the site (this will depend on how you deploy, see below). If you deploy to Galaxy, you can use a &lt;code&gt;x.meteorapp.com&lt;/code&gt; or &lt;code&gt;x.eu.meteorapp.com&lt;/code&gt; domain while you are testing the app. &lt;a href=&quot;http://galaxy-guide.meteor.com/custom-domains.html#meteorapp-subdomain&quot;&gt;Learn more about Galaxy domains &amp;raquo;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544add104824be68ef99321d0e73b9989fa0ae13" translate="yes" xml:space="preserve">
          <source>What about PhoneGap?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b2c135c0cd5ad382fc2e7bf514ca2bf8828d46" translate="yes" xml:space="preserve">
          <source>What does it do?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f95f4783f2f2b3eff2616770feda65452eb7647b" translate="yes" xml:space="preserve">
          <source>What does this mean for my app?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55de40f75713a616f3cba615561b4859feadc075" translate="yes" xml:space="preserve">
          <source>What features in core Meteor enable user accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5a4a470f538810dd11bc651364103fba56fdd4" translate="yes" xml:space="preserve">
          <source>What happens when you subscribe to a publication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edfc6c13c446747ffa72398d80b34ea405b37951" translate="yes" xml:space="preserve">
          <source>What is Meteor?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de11c908015e5632f5ff9ac616134a4c477aa358" translate="yes" xml:space="preserve">
          <source>What is a &lt;a href=&quot;https://github.com/meteor/validation-error/&quot;&gt;&lt;code&gt;ValidationError&lt;/code&gt;&lt;/a&gt;? It&amp;rsquo;s a special error that is used in Meteor to indicate a user-input based error in modifying a collection. Typically, the details on a &lt;code&gt;ValidationError&lt;/code&gt; are used to mark up a form with information about what inputs don&amp;rsquo;t match the schema. In the &lt;a href=&quot;methods#validation-error&quot;&gt;methods article&lt;/a&gt;, we&amp;rsquo;ll see more about how this works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ba3f66b14221964be28f5e6c73ddedb926e0b6" translate="yes" xml:space="preserve">
          <source>What is a Method?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e027b7a31d82e4e8522767297430b9af264920" translate="yes" xml:space="preserve">
          <source>What is a view?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8f340ba3180856db78ed055154bc9a7c919310" translate="yes" xml:space="preserve">
          <source>What is often confusing to people is that setting &lt;code&gt;App.accessRule&lt;/code&gt; is not enough to allow access to remote resources. While domain whitelisting allows the client to control which domains it can connect to, additional restrictions based on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt; also apply. By default, web views will not allow cross-origin HTTP requests initiated from JavaScript for instance, so you will likely run into this when using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88608282acddee0150ea84bcd103b1021fe7d3b7" translate="yes" xml:space="preserve">
          <source>What is the Meteor Guide?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2240a5c4149dd89ccaa9b23d0c17cc195a959a5" translate="yes" xml:space="preserve">
          <source>What port will your app be served from?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50770b62e3fd36707eaf858b692bb5a3872e5843" translate="yes" xml:space="preserve">
          <source>What publications and subscriptions are in the Meteor platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5f4edfa3dd8e1d191a8ad001b5cea180637582" translate="yes" xml:space="preserve">
          <source>What that means is that the publication will simply ensure the set of data matching that query is available to any client that subscribes to it. In this case, all lists that do not have a &lt;code&gt;userId&lt;/code&gt; setting. So the collection named &lt;code&gt;Lists&lt;/code&gt; on the client will have all of the public lists that are available in the server collection named &lt;code&gt;Lists&lt;/code&gt; while that subscription is open. In this particular example in the Todos application, the subscription is initialized when the app starts and never stopped, but a later section will talk about &lt;a href=&quot;data-loading#patterns&quot;&gt;subscription life cycle&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178359646449ea378ff0c1d727db3433d713dd22" translate="yes" xml:space="preserve">
          <source>What this means in practice is that you should place your subscription calls in &lt;em&gt;components&lt;/em&gt;. In Blaze, it&amp;rsquo;s best to do this in the &lt;code&gt;onCreated()&lt;/code&gt; callback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667fca675b8ab923a3ef4072ae1f669cd0892f21" translate="yes" xml:space="preserve">
          <source>What this means is if users are accessing the site whilst the update is being prepared, it will likely go out of date! Also, a bulk update will lock the entire collection while it is being applied, which can cause a significant blip in your user experience if it takes a while. For these reason, you often need to stop your server and let your users know you are performing maintenance while the update is happening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6f95008e4d708b2c30094d082910c3ad04f398" translate="yes" xml:space="preserve">
          <source>What this means is in general, when changing subscriptions, there&amp;rsquo;ll be a period where you are &lt;em&gt;over-subscribed&lt;/em&gt; and there is more data on the client than you strictly asked for. This is one very important reason why you should always fetch the same data that you have subscribed to (don&amp;rsquo;t &amp;ldquo;over-fetch&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1be9fc5a65038c6e36b8bb490dced9b113cd634" translate="yes" xml:space="preserve">
          <source>What this means is that now every time we call &lt;code&gt;Lists.insert()&lt;/code&gt;, &lt;code&gt;Lists.update()&lt;/code&gt;, &lt;code&gt;Lists.upsert()&lt;/code&gt;, first our document or modifier will be automatically checked against the schema (in subtly different ways depending on the exact mutator).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74d3a339f6c99b15c158895f93ba6675398a76b" translate="yes" xml:space="preserve">
          <source>What this means is that whenever a user visits a URL of the form &lt;code&gt;/lists/X&lt;/code&gt;, the &lt;code&gt;Lists.show&lt;/code&gt; route will kick in, triggering the &lt;code&gt;BlazeLayout&lt;/code&gt; call to set the &lt;code&gt;main&lt;/code&gt; property of the &lt;code&gt;App_body&lt;/code&gt; component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c7ac556ec60f6a1cc0e2bcef204f3d2f1d3c95" translate="yes" xml:space="preserve">
          <source>What this means is that you can write tests in files with a certain filename pattern and know they&amp;rsquo;ll not be included in normal builds of your app. When your app runs in test mode, those files will be loaded (and nothing else will), and they can import the modules you want to test. As we&amp;rsquo;ll see this is ideal for &lt;a href=&quot;#unit-testing&quot;&gt;unit tests&lt;/a&gt; and &lt;a href=&quot;#simple-integration-test&quot;&gt;simple integration tests&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40a8e983b9457978d17d73e419798dfcd21447b" translate="yes" xml:space="preserve">
          <source>What to consider before you deploy a Meteor application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463789f77c1d0ba0ebb09ae7f72244ff76885ddc" translate="yes" xml:space="preserve">
          <source>What to consider when defining your collection&amp;rsquo;s schema.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ee5edbedf8b9faf73b594f9f41959e17494e04" translate="yes" xml:space="preserve">
          <source>What you can do to create a good mobile user experience for your app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ae24728db36499c26d2f6ef6407bc10f9e6817" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s special about &lt;code&gt;Session&lt;/code&gt; is that it&amp;rsquo;s reactive. If you call &lt;a href=&quot;#session_get&quot;&gt;&lt;code&gt;Session.get&lt;/code&gt;&lt;/a&gt;&lt;code&gt;('currentList')&lt;/code&gt; from inside a template, the template will automatically be rerendered whenever &lt;a href=&quot;#session_set&quot;&gt;&lt;code&gt;Session.set&lt;/code&gt;&lt;/a&gt;&lt;code&gt;('currentList', x)&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f287be46c03e5394c7dd4a50098d9da1a48027da" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;allowed&lt;/code&gt; is false, the exception describing why the login failed. It will be a &lt;code&gt;Meteor.Error&lt;/code&gt; for failures reported to the user (such as invalid password), and can be a another kind of exception for internal errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94185962f76bf2ba5a4988c8db706a34d1ffefd5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;meteor shell&lt;/code&gt; is executed in an application directory where a server is already running, it connects to the server and starts an interactive shell for evaluating server-side code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8016f520d55dbc8815070e60f070a3ca3d6f04c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, stringifies keys in an object in sorted order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26ec741bd2757df67895e056248e865029ae19f" translate="yes" xml:space="preserve">
          <source>When Method simulations and server-side executions run, Meteor tracks any resulting changes to the database. This is what lets the Meteor data system roll back the changes from the Method simulation and replace them with the actual writes from the server. Without this automatic database tracking, it would be very difficult to implement a correct Optimistic UI system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab492bf401f85f1af3b44c3f0028684c11fe831" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;Blaze.View&lt;/code&gt; is constructed by calling the constructor, no hooks are fired and no rendering is performed. In particular, the View is not yet considered to be &amp;ldquo;created.&amp;rdquo; Only when the View is actually used, by a call to &lt;code&gt;Blaze.render&lt;/code&gt; or &lt;code&gt;Blaze.toHTML&lt;/code&gt; or by inclusion in another View, is it &amp;ldquo;created,&amp;rdquo; right before it is rendered for the first time. When a View is created, its &lt;code&gt;.parentView&lt;/code&gt; is set if appropriate, and then the &lt;code&gt;onViewCreated&lt;/code&gt; hook is fired. The term &amp;ldquo;unrendered View&amp;rdquo; means a newly constructed View that has not been &amp;ldquo;created&amp;rdquo; or rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b643bcdc133f357c91b741fb04c842fa7c6cc282" translate="yes" xml:space="preserve">
          <source>When a Method call fails because the arguments are of the wrong type, it&amp;rsquo;s good to throw a &lt;code&gt;ValidationError&lt;/code&gt;. This works just like &lt;code&gt;Meteor.Error&lt;/code&gt;, but is a custom constructor that enforces a standard error format that can be read by different form and validation libraries. In particular, if you are calling this Method from a form, throwing a &lt;code&gt;ValidationError&lt;/code&gt; will make it easy to display nice error messages next to particular fields in the form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eac4758d2ad56c0b3a35a372dd96a644024d919" translate="yes" xml:space="preserve">
          <source>When a Method is called, it usually runs twice&amp;mdash;once on the client to simulate the result for Optimistic UI, and again on the server to make the actual change to the database. This means that if your Method throws an error, it will likely fail on the client &lt;em&gt;and&lt;/em&gt; the server. For this reason, &lt;code&gt;ValidatedMethod&lt;/code&gt; turns on undocumented option in Meteor to avoid calling the server-side implementation if the simulation throws an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27358ca301a70e8e1ccb5fa9b7d2a60aa469862" translate="yes" xml:space="preserve">
          <source>When a client calls &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, or &lt;code&gt;remove&lt;/code&gt; on a collection, the collection&amp;rsquo;s &lt;code&gt;allow&lt;/code&gt; and &lt;a href=&quot;#deny&quot;&gt;&lt;code&gt;deny&lt;/code&gt;&lt;/a&gt; callbacks are called on the server to determine if the write should be allowed. If at least one &lt;code&gt;allow&lt;/code&gt; callback allows the write, and no &lt;code&gt;deny&lt;/code&gt; callbacks deny the write, then the write is allowed to proceed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56be403b018a89e0c484b891df47aaacd74309ca" translate="yes" xml:space="preserve">
          <source>When a client tries to write to a collection, the Meteor server first checks the collection&amp;rsquo;s &lt;code&gt;deny&lt;/code&gt; rules. If none of them return true then it checks the collection&amp;rsquo;s &lt;code&gt;allow&lt;/code&gt; rules. Meteor allows the write only if no &lt;code&gt;deny&lt;/code&gt; rules return &lt;code&gt;true&lt;/code&gt; and at least one &lt;code&gt;allow&lt;/code&gt; rule returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8b1f29683741b82952b614a02a61f2a2762e94" translate="yes" xml:space="preserve">
          <source>When a file represents a single class or UI component, the file should be named the same as the thing it defines, with the same capitalization. So if you have a file that exports a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc0dcffafb0edcd249b4653aefad9c49f2c13b3" translate="yes" xml:space="preserve">
          <source>When a login attempt is made, the registered validate login callbacks are called with a single argument, the attempt info object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7528a272a181b1ee878bbb86f45267fce4bfde" translate="yes" xml:space="preserve">
          <source>When a template is invoked as a block helper, it can use &lt;code&gt;{{&amp;gt;
Template.contentBlock}}&lt;/code&gt; and &lt;code&gt;{{&amp;gt; Template.elseBlock}}&lt;/code&gt; to include the block content it was passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e11c12f80a228b870e13b0f35420176ab42d353" translate="yes" xml:space="preserve">
          <source>When accessing a REST API, you will sometimes run into a situation where you make two requests one after the other, but the results arrive out of order. Meteor&amp;rsquo;s underlying machinery makes sure this never happens with Methods. When multiple Method calls are received &lt;em&gt;from the same client&lt;/em&gt;, Meteor runs each Method to completion before starting the next one. If you need to disable this functionality for one particularly long-running Method, you can use &lt;a href=&quot;http://docs.meteor.com/#/full/method_unblock&quot;&gt;&lt;code&gt;this.unblock()&lt;/code&gt;&lt;/a&gt; to allow the next Method to run while the current one is still in progress. Also, since Meteor is based on Websockets instead of HTTP, all Method calls and results are guaranteed to arrive in the order they are sent. You can also pass a special option &lt;code&gt;wait: true&lt;/code&gt; to &lt;code&gt;Meteor.apply&lt;/code&gt; to wait to send a particular Method until all others have returned, and not send any other Methods until this one returns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1d86a3e890d7c741d73f68543dae5d85aa9eb3" translate="yes" xml:space="preserve">
          <source>When called from a reactive computation, &lt;code&gt;fetch&lt;/code&gt; registers dependencies on the matching documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e295144f4aaf2770409551c2ad80911987a55e" translate="yes" xml:space="preserve">
          <source>When called from a reactive computation, &lt;code&gt;forEach&lt;/code&gt; registers dependencies on the matching documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f02041312095e886de16679f31542a335300e54" translate="yes" xml:space="preserve">
          <source>When called from a reactive computation, &lt;code&gt;map&lt;/code&gt; registers dependencies on the matching documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f539f9880266d2ecf565aad972822b36ddb602" translate="yes" xml:space="preserve">
          <source>When calling &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;remove&lt;/code&gt; Meteor will by default fetch the entire document &lt;code&gt;doc&lt;/code&gt; from the database. If you have large documents you may wish to fetch only the fields that are actually used by your functions. Accomplish this by setting &lt;code&gt;fetch&lt;/code&gt; to an array of field names to retrieve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b65295021601c6ad42cc39a2d2314775d836ef" translate="yes" xml:space="preserve">
          <source>When choosing a name for your npm package, be sure to follow the &lt;a href=&quot;https://docs.npmjs.com/files/package.json#name&quot;&gt;npm guidelines&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa4e0f52e9f6b80996a3cf16bb74d5bb74947c4" translate="yes" xml:space="preserve">
          <source>When configuring OAuth login with a provider (such as Facebook or Google), Meteor lets you choose a popup- or redirect-based flow. In a popup-based flow, when a user logs in, they will be prompted to login at the provider in a popup window. In a redirect-based flow, the user&amp;rsquo;s whole browser window will be redirected to the login provider, and the window will redirect back to your app when the login is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f834418b0a161bdb589ea60fb5bd499786edd6" translate="yes" xml:space="preserve">
          <source>When creating a new application Meteor installs the &lt;code&gt;meteor-node-stubs&lt;/code&gt; npm package to help provide this client browser compatibility. If you are upgrading an application to Meteor 1.3 you may have to run &lt;code&gt;meteor npm install --save meteor-node-stubs&lt;/code&gt; manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27641ba55976c03afe9ea728f7ce0b78ae1f8d99" translate="yes" xml:space="preserve">
          <source>When developing your application, Meteor starts a local MongoDB instance and automatically connects to it. In production, you must specify a &lt;code&gt;MONGO_URL&lt;/code&gt; environment variable pointing at your database in &lt;a href=&quot;https://docs.mongodb.com/manual/reference/connection-string&quot;&gt;the standard mongo connection string format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30bfad33e2b2ae9c262f7db9b189a3554c310b1" translate="yes" xml:space="preserve">
          <source>When evaluating a path, identifiers after the first are used to index into the object so far, like JavaScript&amp;rsquo;s &lt;code&gt;.&lt;/code&gt;. However, an error is never thrown when trying to index into a non-object or an undefined value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="882ba392931740c858b2407f305d6e93fc1e7ea0" translate="yes" xml:space="preserve">
          <source>When finding users by email or username, make sure to use the case-insensitive functions provided by &lt;code&gt;accounts-password&lt;/code&gt;. See the &lt;a href=&quot;#case-sensitivity&quot;&gt;section about case-sensitivity&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10ddd866bca5fc9cd97d0055b5eaf3bcb365a1e" translate="yes" xml:space="preserve">
          <source>When importing CSS from a JavaScript file, that CSS is not bundled with the rest of the CSS processed with the Meteor Build tool, but instead is put in your app&amp;rsquo;s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;&amp;lt;style&amp;gt;...&amp;lt;/style&amp;gt;&lt;/code&gt; after the main concatenated CSS file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba272358ce62b3d533a6e65c536acbb17af37cc" translate="yes" xml:space="preserve">
          <source>When it is known which user was attempting to login, the Meteor user object. This will always be present for successful logins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebd83497c9cd8d312f13faa3d8a564f068765a4" translate="yes" xml:space="preserve">
          <source>When run in asynchronous mode, the callback receives two arguments, &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;result&lt;/code&gt;. The &lt;code&gt;error&lt;/code&gt; argument will contain an Error if the request fails in any way, including a network error, time-out, or an HTTP status code in the 400 or 500 range. In case of a 4xx/5xx HTTP status code, the &lt;code&gt;response&lt;/code&gt; property on &lt;code&gt;error&lt;/code&gt; matches the contents of the result object. When run in synchronous mode, either &lt;code&gt;result&lt;/code&gt; is returned from the function, or &lt;code&gt;error&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4069c983e45cd40b231784c74934aa163775aa69" translate="yes" xml:space="preserve">
          <source>When running your bundled application in production mode, pass a string of JSON containing your settings with &lt;code&gt;METEOR_SETTINGS='{ &quot;server_only_setting&quot;: &quot;foo&quot;, &quot;public&quot;: { &quot;client_and_server_setting&quot;: &quot;bar&quot; } }'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e027ab875d838258980cd654c7ec4b4e385b577" translate="yes" xml:space="preserve">
          <source>When selecting a hosted MongoDB service for production it is important to assess the features that the service provides. Below is a nonexhaustive list of features to consider when selecting a service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492c2a03c639981f9d1af15676912f4ad0f5d4aa" translate="yes" xml:space="preserve">
          <source>When the argument to &lt;code&gt;#each&lt;/code&gt; changes, the DOM is always updated to reflect the new sequence, but it&amp;rsquo;s sometimes significant exactly how that is achieved. When the argument is a Meteor live cursor, the &lt;code&gt;#each&lt;/code&gt; has access to fine-grained updates to the sequence &amp;ndash; add, remove, move, and change callbacks &amp;ndash; and the items are all documents identified by unique ids. As long as the cursor itself remains constant (i.e. the query doesn&amp;rsquo;t change), it is very easy to reason about how the DOM will be updated as the contents of the cursor change. The rendered content for each document persists as long as the document is in the cursor, and when documents are re-ordered, the DOM is re-ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbb7af2f0221aafa1416badc1879abd3bc344ed" translate="yes" xml:space="preserve">
          <source>When the connection came in over an HTTP transport (such as with Meteor&amp;rsquo;s default SockJS implementation), this field contains whitelisted HTTP headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acdb696c1c490744ce20c0c102152308898e4a9" translate="yes" xml:space="preserve">
          <source>When the route is matched, the &lt;code&gt;action&lt;/code&gt; method executes, and you can perform any actions you need to. The &lt;code&gt;name&lt;/code&gt; property of the route is optional, but will let us refer to this route more conveniently later on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8210de7978053be9a270f9aa7fe5907b39613d78" translate="yes" xml:space="preserve">
          <source>When the server receives the message, it executes the Method code again on the server. The client side version was a simulation that will be rolled back later, but this time it&amp;rsquo;s the real version that is writing to the actual database. Running the actual Method logic on the server is crucial because the server is a trusted environment where we know that security-critical code will run the way we expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7db065fe4a71159b3171ab13a66fdd9ec3d26f9" translate="yes" xml:space="preserve">
          <source>When the server was not able to complete the user&amp;rsquo;s desired action because of a known condition, you should throw a descriptive &lt;code&gt;Meteor.Error&lt;/code&gt; object to the client. In the Todos example app, we use these to report situations where the current user is not authorized to complete a certain action, or where the action is not allowed within the app - for example, deleting the last public list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48850747410c5cd72c5141a583d2b76dd92d83a" translate="yes" xml:space="preserve">
          <source>When the user receives the email and clicks the link inside, their web browser will take them to your app. Now, you need to be able to identify these special links and act appropriately. If you haven&amp;rsquo;t customized the link URL, then you can use some built-in callbacks to identify when the app is in the middle of an email flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bebc959d84e2f00c57251e00b09a3f3446960da1" translate="yes" xml:space="preserve">
          <source>When the user submits the form, you need to call the appropriate function to commit their change to the database. Each of these functions takes the new value and the token you got from the event in the previous step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0550e6771d8dd1264af2e577d690cdd386714d" translate="yes" xml:space="preserve">
          <source>When the user visits the link in this email, the callback registered with &lt;a href=&quot;#Accounts-onEmailVerificationLink&quot;&gt;&lt;code&gt;Accounts.onEmailVerificationLink&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe6b169f202a235d83bf081bf38e17e80961870" translate="yes" xml:space="preserve">
          <source>When the user visits the link in this email, the callback registered with &lt;a href=&quot;#Accounts-onEnrollmentLink&quot;&gt;&lt;code&gt;Accounts.onEnrollmentLink&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f9800212499cd4c2d741d3128152fb4fb34086" translate="yes" xml:space="preserve">
          <source>When the user visits the link in this email, the callback registered with &lt;a href=&quot;#Accounts-onResetPasswordLink&quot;&gt;&lt;code&gt;AccountsClient#onResetPasswordLink&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb509c883e02823449ddb0acf8ee526e4860d02e" translate="yes" xml:space="preserve">
          <source>When to use Atmosphere packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cf50d586f68e33e97072be418db1f683520cb8" translate="yes" xml:space="preserve">
          <source>When to use npm packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db85db92954475a7fc399432a4837ce50c526540" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;meteor run&lt;/code&gt;, server-side logs will be printed in the terminal as usual. In addition, running on an Android device or emulator will print a subset of the logs to that same terminal (these logs also include &lt;code&gt;console&lt;/code&gt; logging calls made from client-side code).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447ad09c0d1fdc3a32797ee25868519024416f2c" translate="yes" xml:space="preserve">
          <source>When using Flow Router, the simplest way to display different views on the page for different URLs is to use the complementary Blaze Layout package. First, make sure you have the Blaze Layout package installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caa7f06023c191d78ffd7293a3abe576369f2d1" translate="yes" xml:space="preserve">
          <source>When using React Router in Meteor, you can follow roughly the &lt;a href=&quot;routing&quot;&gt;same principles&lt;/a&gt; as when using Flow Router, but you should also consider the idioms outlined in React Router&amp;rsquo;s own &lt;a href=&quot;https://github.com/ReactTraining/react-router&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf776e4e40a3817b024a4aac7bc6c6a3c060b26" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;oauth-encryption&lt;/code&gt; package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64. This option may only be specifed on the server. See packages/oauth-encryption/README.md for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9920294db4ac77a19f6718fbfede0bcf365fd961" translate="yes" xml:space="preserve">
          <source>When using the data in the sub-component, it&amp;rsquo;s a lot clearer what you are accessing; &lt;code&gt;{{todo.title}}&lt;/code&gt; is clearer than &lt;code&gt;{{title}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6422a7af30f2af34e460106ecd1faa6548b81ec" translate="yes" xml:space="preserve">
          <source>When we connect to the test instance in a browser, we want to render a testing UI rather than our app UI, so the &lt;code&gt;mocha-web-reporter&lt;/code&gt; package will hide any UI of our application and overlay it with its own. However the app continues to behave as normal, so we are able to route around and check the correct data is loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd82d12b6baa0c0a350e98ccef3e1e981c815c2" translate="yes" xml:space="preserve">
          <source>When we run our app in test mode, only our test files will be eagerly loaded. In particular, this means that in order to use our templates, we need to import them! In this test, we import &lt;code&gt;todos-item.js&lt;/code&gt;, which itself imports &lt;code&gt;todos.html&lt;/code&gt; (yes, you do need to import the HTML files of your Blaze templates!)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3f56c6bf039b669f547e48fd37ff5bf90e1987" translate="yes" xml:space="preserve">
          <source>When we subscribe to this publication on the client, we can provide this argument via the &lt;code&gt;Meteor.subscribe()&lt;/code&gt; call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95cd1d03e58d68d9f86955dfe1815fe2185dc62" translate="yes" xml:space="preserve">
          <source>When writing a package, CoffeeScript-defined variables can be exported like any other variable (see &lt;a href=&quot;../api/packagejs&quot;&gt;Package.js&lt;/a&gt;). Exporting a variable pulls it up to package scope, meaning that it will be visible to all of the code in your app or package (both &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.coffee&lt;/code&gt; files).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca05652e4e1ecf05f4402596047105617cd4ca3" translate="yes" xml:space="preserve">
          <source>When you add a type to EJSON, Meteor will be able to use that type in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4c334a6d801637b4f898196fc3e2b6976be319" translate="yes" xml:space="preserve">
          <source>When you are developing a new npm package for your app, there are a couple methods for including the package in your app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a935a965367d36d877014522bf6f55e86477f3" translate="yes" xml:space="preserve">
          <source>When you are running an app in production, it&amp;rsquo;s vitally important that you keep tabs on the performance of your application and ensure it is running smoothly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42b81db271dfd032a9fab7a5ff47683174f70ac" translate="yes" xml:space="preserve">
          <source>When you are running your app on multiple servers or containers, it&amp;rsquo;s not a good idea to shut down all of the servers at once and then start them all back up again. This will result in more downtime than necessary, and will cause a huge spike in CPU usage when all of your clients reconnect again at the same time. To alleviate this, Galaxy stops and re-starts containers one by one during deployment. There will be a time period during which some containers are running the old version and some the new version, as users are migrated incrementally to the new version of your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4baba2cbc9c468159936fd9a8223205cd4c9fe" translate="yes" xml:space="preserve">
          <source>When you are setting up event maps in your JS files, you need to &amp;lsquo;select&amp;rsquo; the element in the template that the event attaches to. Rather than using the same CSS class names that are used to style the elements, it&amp;rsquo;s better practice to use classnames that are specifically added for those event maps. A reasonable convention is a class starting with &lt;code&gt;js-&lt;/code&gt; to indicate it is used by the JavaScript. For instance &lt;code&gt;.js-todo-add&lt;/code&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effe82c59d4faf6b5ea70030b1fa9c7eedadc2bf" translate="yes" xml:space="preserve">
          <source>When you call a Method, any errors thrown by it will be returned in the callback. At this point, you should identify which error type it is and display the appropriate message to the user. In this case, it is unlikely that the Method will throw a &lt;code&gt;ValidationError&lt;/code&gt; or an internal server error, so we will only handle the unauthorized error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="075d7307f843533a02cf438e14f642882d9eef4b" translate="yes" xml:space="preserve">
          <source>When you create a collection on the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2f52564d5b5f97fb1595e7f01037f0a1268735" translate="yes" xml:space="preserve">
          <source>When you deploy your Meteor server, you need a &lt;code&gt;MONGO_URL&lt;/code&gt; that points to your MongoDB database. You can either use a hosted MongoDB service or set up and run your own MongoDB server. We recommend using a hosted service, as the time saved and peace of mind are usually worth the higher monthly cost. In either case, the database should be hosted in the same region as the Meteor server (for lower latency). For example if your app is hosted on Galaxy in &lt;code&gt;us-east-1&lt;/code&gt; (on AWS), then you could create a database on &lt;a href=&quot;https://www.compose.io&quot;&gt;Compose&lt;/a&gt; in &lt;code&gt;AWS us-east-1&lt;/code&gt; or on &lt;a href=&quot;https://amazonlightsail.com/&quot;&gt;Amazon Lightsail&lt;/a&gt; in &lt;code&gt;us-east-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e378e0f29233b9950fe4bbf47b108a785efccb3a" translate="yes" xml:space="preserve">
          <source>When you have a login system for your app based on user emails, that opens up the possibility for email-based account flows. The common thing between all of these workflows is that they involve sending a unique link to the user&amp;rsquo;s email address, which does something special when it is clicked. Let&amp;rsquo;s look at some common examples that Meteor&amp;rsquo;s &lt;code&gt;accounts-password&lt;/code&gt; package supports out of the box:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5429c6e3d582f717eeddd636edc9fea3e29e508a" translate="yes" xml:space="preserve">
          <source>When you have an error that doesn&amp;rsquo;t need to be reported to the client, but is internal to the server, throw a regular JavaScript error object. This will be reported to the client as a totally opaque internal server error with no details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca3e447bb0be51e49d4dd5990564409fa5ec9ad4" translate="yes" xml:space="preserve">
          <source>When you insert documents into Minimongo from the client-side simulation of a Method, the &lt;code&gt;_id&lt;/code&gt; field of each document is a random string. When the Method call is executed on the server, the IDs are generated again before being inserted into the database. If it were implemented naively, it could mean that the IDs generated on the server are different, which would cause undesirable flickering and re-renders in the UI when the Method simulation was rolled back and replaced with the server data. But this is not the case in Meteor!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9263ed2bf4140536268b6c3e7022a85b39f5b7" translate="yes" xml:space="preserve">
          <source>When you render a template, the callbacks added with &lt;a href=&quot;templates#Template-onCreated&quot;&gt;&lt;code&gt;onCreated&lt;/code&gt;&lt;/a&gt; are invoked immediately, before evaluating the content of the template. The callbacks added with &lt;a href=&quot;templates#Template-onRendered&quot;&gt;&lt;code&gt;onRendered&lt;/code&gt;&lt;/a&gt; are invoked after the View is rendered and inserted into the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d91b96e4d54f69991586c52d485193e6bbc8b1" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;meteor&lt;/code&gt;, the tool starts up, and you should leave it running continuously while developing your app. The tool automatically detects any relevant file changes and recompiles the necessary changes, restarting your client or server environment if needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bf9292535e3b8451e0fb5305e909f4e97ef965" translate="yes" xml:space="preserve">
          <source>When you run a &lt;code&gt;meteor test&lt;/code&gt; command, you must provide a &lt;code&gt;--driver-package&lt;/code&gt; argument. A test driver is a mini-application that runs in place of your app and runs each of your defined tests, whilst reporting the results in some kind of user interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e15c9215e768e8b1599afa9a242a231d9b85781" translate="yes" xml:space="preserve">
          <source>When you run this app, the &lt;code&gt;moment&lt;/code&gt; library will be imported on both the client and the server, and both consoles will log output similar to: &lt;code&gt;Today at 7:51 PM&lt;/code&gt;. Our hope is that the possibility of installing Node modules directly within an app will reduce the need for npm wrapper packages such as &lt;a href=&quot;https://atmospherejs.com/momentjs/moment&quot;&gt;https://atmospherejs.com/momentjs/moment&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b750063f9a82be04c802b6c666fed345436303e4" translate="yes" xml:space="preserve">
          <source>When you subscribe to a record set, it tells the server to send records to the client. The client stores these records in local &lt;a href=&quot;#mongo_collection&quot;&gt;Minimongo collections&lt;/a&gt;, with the same name as the &lt;code&gt;collection&lt;/code&gt; argument used in the publish handler&amp;rsquo;s &lt;a href=&quot;#publish_added&quot;&gt;&lt;code&gt;added&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#publish_changed&quot;&gt;&lt;code&gt;changed&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#publish_removed&quot;&gt;&lt;code&gt;removed&lt;/code&gt;&lt;/a&gt; callbacks. Meteor will queue incoming records until you declare the &lt;a href=&quot;#mongo_collection&quot;&gt;&lt;code&gt;Mongo.Collection&lt;/code&gt;&lt;/a&gt; on the client with the matching collection name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9425b3b84e765f4cf9bc568175f5b6505bc2a81" translate="yes" xml:space="preserve">
          <source>When you subscribe to data in Meteor, it does not become instantly available on the client. Typically the user will need to wait for a few hundred milliseconds, or as long as a few seconds (depending on the connection speed), for the data to arrive. This is especially noticeable when the app is first starting up or you move between screens that are displaying completely new data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b6aadd05c8758e946dfc4c5a1ac49b4c8d09851" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;api.mainModule&lt;/code&gt;, the exports of the main module are exposed globally as &lt;code&gt;Package['my-modular-package']&lt;/code&gt;, along with any symbols exported by &lt;code&gt;api.export&lt;/code&gt;, and thus become available to any code that imports the package. In other words, the main module gets to decide what value of &lt;code&gt;Foo&lt;/code&gt; will be exported by &lt;code&gt;api.export&lt;/code&gt;, as well as providing other properties that can be explicitly imported from the package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d3ff73d329befa7ea0114cfee7069682286880" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;mdg:validated-method&lt;/code&gt; with &lt;code&gt;aldeed:simple-schema&lt;/code&gt; as demonstrated above, this type of error is thrown for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb36f2c4e343f6bc6a8eb9498b2bd7152beb9fec" translate="yes" xml:space="preserve">
          <source>When you write a template as &lt;code&gt;&amp;lt;template name=&quot;foo&quot;&amp;gt; ... &amp;lt;/template&amp;gt;&lt;/code&gt; in an HTML file in your app, Meteor generates a &amp;ldquo;template object&amp;rdquo; named &lt;code&gt;Template.foo&lt;/code&gt;. Note that template name cannot contain hyphens and other special characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844477ae54747e0c57dd9f37bba03e8419088085" translate="yes" xml:space="preserve">
          <source>When you write to the database on the client (&lt;a href=&quot;#insert&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt;), the command is executed locally immediately, and, simultaneously, it&amp;rsquo;s sent to the server and executed there too. This happens via &lt;a href=&quot;#meteor_methods&quot;&gt;stubs&lt;/a&gt;, because writes are implemented as methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30d39386b8b030b289f7e5ecc23282b8048246d" translate="yes" xml:space="preserve">
          <source>When your app is run in test mode, it is initialized with a clean test database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649b28c9fbe77cf6f86e691b286ea66818c0038d" translate="yes" xml:space="preserve">
          <source>When your package starts in test mode, rather than loading the &lt;code&gt;onUse&lt;/code&gt; block, Meteor loads the &lt;code&gt;onTest&lt;/code&gt; block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda390f79e08ffb82360ffcae7aeb2a7d890946c" translate="yes" xml:space="preserve">
          <source>When, on the server, you write to a collection which has a specified &lt;code&gt;connection&lt;/code&gt; to another server, it sends the corresponding method to the other server and receives the changed values back from it over DDP. Unlike on the client, it does not execute the write locally first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3844a1398efe433ab3efe9372cc7cace53bae03" translate="yes" xml:space="preserve">
          <source>Where to store secret keys in development and production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c542b6c203cb13a4b0b0025a01d43cd78467d609" translate="yes" xml:space="preserve">
          <source>Where to subscribe on the client and in which templates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685ec8ab1ce73fc82fd8fe77efd7972951288ad9" translate="yes" xml:space="preserve">
          <source>Whether this login is allowed and will be successful (if not aborted by any of the validateLoginAttempt callbacks). False if the login will not succeed (for example, an invalid password or the login was aborted by a previous validateLoginAttempt callback).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0faaf49cc3d3da7633316ffa5af7fe5d0ac1847" translate="yes" xml:space="preserve">
          <source>Which &lt;a href=&quot;#requestpermissions&quot;&gt;permissions&lt;/a&gt; to request from the user for each external service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec679ad7c4b83ccb85da84e8c8d841be2487999" translate="yes" xml:space="preserve">
          <source>Which fields to display in the user creation form. One of '&lt;code&gt;USERNAME_AND_EMAIL&lt;/code&gt;', '&lt;code&gt;USERNAME_AND_OPTIONAL_EMAIL&lt;/code&gt;', '&lt;code&gt;USERNAME_ONLY&lt;/code&gt;', or '&lt;code&gt;EMAIL_ONLY&lt;/code&gt;' (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73eb73aec594862bbf285f820336ad2d1337c61" translate="yes" xml:space="preserve">
          <source>Which port the app should listen on, for example: &lt;code&gt;PORT=3030&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9380602b0bab772adf758776ce0f5c894e6be36a" translate="yes" xml:space="preserve">
          <source>Which style guide we recommend for JavaScript code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9accc8f889604a6fe19e76e94779c30b642fbe4d" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;deny&lt;/code&gt; make it easy to get started building an app, it&amp;rsquo;s harder than it seems to write secure &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;deny&lt;/code&gt; rules. We recommend that developers avoid &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;deny&lt;/code&gt;, and switch directly to custom methods once they are ready to remove &lt;code&gt;insecure&lt;/code&gt; mode from their app. See &lt;a href=&quot;https://guide.meteor.com/security.html#allow-deny&quot;&gt;the Meteor Guide on security&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274222bfd655a21cfd2ad10d479dd1d05213224a" translate="yes" xml:space="preserve">
          <source>While Meteor uses a built-in request interception mechanism on Android, supporting &lt;code&gt;WKWebView&lt;/code&gt; on iOS requires running a real embedded web server instead. That means the local web server needs a port to bind to, and we can&amp;rsquo;t simply use a fixed port because that might lead to conflicts when running multiple Meteor Cordova apps on the same device. The easiest solution may seem to use a randomized port, but this has a serious drawback: if the port changes each time you run the app, web features that depend on the origin (like caching, localStorage, IndexedDB) won&amp;rsquo;t persist between runs, and you also wouldn&amp;rsquo;t be able to specify a stable OAuth redirect URL. So instead we now pick a port from a predetermined range (12000-13000), calculated based on the &lt;code&gt;appId&lt;/code&gt;, a unique identifier that is part of every Meteor project. That ensures the same app will always use the same port, but it hopefully avoids collisions betweens apps as much as possible. (There is still a theoretical possibility of the selected port being in use. Currently, starting the local server will fail in that case.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de9826cb3a2523ab3b06a3a97256e623a505a34" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s not necessarily important whether your code base uses single or double quotes for string literals, there are huge benefits to making that decision once and having it be consistent across your organization. These benefits also apply to the Meteor and JavaScript development communities as a whole.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db46f60fa00aae0697520cc8b373796cd842008" translate="yes" xml:space="preserve">
          <source>While it&amp;rsquo;s optional and the basic functionality will work without it, it&amp;rsquo;s also a good idea to pick a router integration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1902b93c0a261071f41cb938ff4fddd869ca91f5" translate="yes" xml:space="preserve">
          <source>While most of the components in your app should be reusable, they need to get their data passed in from somewhere. This is where &amp;ldquo;smart&amp;rdquo; components come in. Such components typically do the following things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d2526064b0becc82a0c00fbb4c9d47a012531a" translate="yes" xml:space="preserve">
          <source>While some packages exist just to provide side effects to the app, most packages provide a reusable bit of code that can be used by the consumer with &lt;code&gt;import&lt;/code&gt;. To export a symbol from your package, simply use the ES2015 &lt;code&gt;export&lt;/code&gt; syntax in your &lt;code&gt;mainModule&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084ba33c3d72a5c2e2c60387768e42e9c8ec756b" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;modules&lt;/code&gt; package is useful by itself, we very much encourage using the &lt;code&gt;ecmascript&lt;/code&gt; package (and thus &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;) instead of using &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; directly. If you need convincing, here&amp;rsquo;s a presentation that explains the differences: &lt;a href=&quot;http://benjamn.github.io/empirenode-2015&quot;&gt;http://benjamn.github.io/empirenode-2015&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445d2277a61f8494c7b0d3e62400fa762c10ac8a" translate="yes" xml:space="preserve">
          <source>While the client-side code of your application is necessarily accessible by the browser, every application will have some secret code on the server that you don&amp;rsquo;t want to share with the world.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fe9a4d0bc6b4111044e28548b07ff96c1a36a0" translate="yes" xml:space="preserve">
          <source>While this behavior is good for saving server resources in cases where a Method will certainly fail, it&amp;rsquo;s important to make sure that the simulation doesn&amp;rsquo;t throw an error in cases where the server Method would have succeeded (for example, if you didn&amp;rsquo;t load some data on the client that the Method needs to do the simulation properly). In this case, you can wrap server-side-only logic in a block that checks for a method simulation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce6cc661b4ee7409838276e1cbb016385eb765f" translate="yes" xml:space="preserve">
          <source>While we recommend using ES2015 with the &lt;code&gt;ecmascript&lt;/code&gt; package as the best development experience for Meteor, everything in the platform is 100% compatible with &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; and many people in the Meteor community prefer it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050af3a43f6c489ff4eceec775c37584c349289d" translate="yes" xml:space="preserve">
          <source>While you can easily use Methods in a simple app by following the Meteor introductory tutorial, it&amp;rsquo;s important to understand exactly how they work to use them effectively in a production app. One of the downsides of using a framework like Meteor that does a lot for you under the hood is that you don&amp;rsquo;t always understand what is going on, so it&amp;rsquo;s good to learn some of the core concepts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4761c389a8dbeebd189831d04f1cbd6568091a24" translate="yes" xml:space="preserve">
          <source>Why it&amp;rsquo;s a good idea to have consistent code style</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564f8c6e76fbd512be2e38dabdfdd61550d0c3cc" translate="yes" xml:space="preserve">
          <source>With</source>
          <target state="translated">With</target>
        </trans-unit>
        <trans-unit id="48861b74369b2a39d8e8a84cecc4c61da61fd288" translate="yes" xml:space="preserve">
          <source>With Meteor, there is no need to install Cordova yourself, or use the &lt;code&gt;cordova&lt;/code&gt; command directly. Cordova project creation happens as part of the Meteor run and build commands, and the project itself is considered a build artifact (stored in &lt;code&gt;.meteor/local/cordova-build&lt;/code&gt; in your app directory) that can be deleted and recreated at any time. Instead of having you modify Cordova&amp;rsquo;s &lt;code&gt;config.xml&lt;/code&gt; file, Meteor reads a &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html&quot;&gt;&lt;code&gt;mobile-config.js&lt;/code&gt;&lt;/a&gt; file in the root of your app directory and uses the settings specified there to configure the generated project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279d87e0ddbf5918498e3a648de58010464aea6c" translate="yes" xml:space="preserve">
          <source>With React Router, you&amp;rsquo;ll also need to explicity render the exported routes in a startup function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ad02171a0a0b0e09d465faed8a9ed86b70efac" translate="yes" xml:space="preserve">
          <source>With one exception, it is not possible to mix inclusion and exclusion styles: the keys must either be all 1 or all 0. The exception is that you may specify &lt;code&gt;_id: 0&lt;/code&gt; in an inclusion specifier, which will leave &lt;code&gt;_id&lt;/code&gt; out of the result object as well. However, such field specifiers can not be used with &lt;a href=&quot;#observe_changes&quot;&gt;&lt;code&gt;observeChanges&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#observe&quot;&gt;&lt;code&gt;observe&lt;/code&gt;&lt;/a&gt;, cursors returned from a &lt;a href=&quot;#meteor_publish&quot;&gt;publish function&lt;/a&gt;, or cursors used in &lt;code&gt;{{#each}}&lt;/code&gt; in a template. They may be used with &lt;a href=&quot;#fetch&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#findone&quot;&gt;&lt;code&gt;findOne&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#foreach&quot;&gt;&lt;code&gt;forEach&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02148a75389c5623f51749325849a59f81199b42" translate="yes" xml:space="preserve">
          <source>With that said, in some situations you may need to call out to &lt;code&gt;require&lt;/code&gt; directly. One notable example is when requiring client or server-only code from a common file. As &lt;code&gt;import&lt;/code&gt;s must be at the top-level scope, you may not place them within an &lt;code&gt;if&lt;/code&gt; statement, so you&amp;rsquo;ll need to write code like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="888670c17dd555fac3d6da2eba246828fe64c7bc" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;less&lt;/code&gt; package installed, &lt;code&gt;.less&lt;/code&gt; files in your application are automatically compiled to CSS and the results are included in the client CSS bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0235c8e9ddd6a614d1c7ada5608743610aa8aa76" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;imports/api&lt;/code&gt; directory, it&amp;rsquo;s sensible to split the code into directories based on the domain that the code is providing an API for &amp;mdash; typically this corresponds to the collections you&amp;rsquo;ve defined in your app. For instance in the Todos example app, we have the &lt;code&gt;imports/api/lists&lt;/code&gt; and &lt;code&gt;imports/api/todos&lt;/code&gt; domains. Inside each directory we define the collections, publications and methods used to manipulate the relevant domain data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ca916316fecdfdcd09e7a02ea04536b16cb7a7" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;imports/ui&lt;/code&gt; directory it typically makes sense to group files into directories based on the type of UI side code they define, i.e. top level &lt;code&gt;pages&lt;/code&gt;, wrapping &lt;code&gt;layouts&lt;/code&gt;, or reusable &lt;code&gt;components&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a55595583f082ec27a6cd967c6cc4c9ea851fef" translate="yes" xml:space="preserve">
          <source>Working with REST APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="463cb6e65401ee33feefb1ca2a58091e4140b4aa" translate="yes" xml:space="preserve">
          <source>Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be &lt;code&gt;function(error, result){}&lt;/code&gt;. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbadab8600072e37a4780b4a78f0ec308c818630" translate="yes" xml:space="preserve">
          <source>Writing Atmosphere Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682e327d7d036c873125604e373874ab72bb17c8" translate="yes" xml:space="preserve">
          <source>Writing a build plugin is a very advanced task that only the most advanced Meteor users should get into. The best place to start is to copy a different plugin that is the most similar to what you are trying to do. For example, if you wanted to make a new CSS compiler plugin, you could fork the &lt;code&gt;less&lt;/code&gt; package; if you wanted to make your own JS transpiler, you could fork &lt;code&gt;ecmascript&lt;/code&gt;. A good example of a linter is the &lt;code&gt;jshint&lt;/code&gt; package, and for a minifier you can look at &lt;code&gt;standard-minifiers-js&lt;/code&gt; and &lt;code&gt;standard-minifiers-css&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a210f4b0062ab70f663ab7b33754f4f1e9cc07" translate="yes" xml:space="preserve">
          <source>Writing migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d8eb5b83423e4c01ef5397e89bf9279b547e64" translate="yes" xml:space="preserve">
          <source>Writing npm Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c5db175e86f27dd0d1bd5d4fe69519e4f6064af" translate="yes" xml:space="preserve">
          <source>Writing smart components with Blaze</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd28e043c6cb6a21402fa517b7192cb5a4a63908" translate="yes" xml:space="preserve">
          <source>Writing your own build plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c032adc1ff629c9b66f22749ad667e6beadf144b" translate="yes" xml:space="preserve">
          <source>X</source>
          <target state="translated">X</target>
        </trans-unit>
        <trans-unit id="f0b30ebb13a341d741a1ad7680ddade64cb2fa6b" translate="yes" xml:space="preserve">
          <source>Xcode builds the app, installs it on the device, and launches it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12898521ccd045820f9f088b5338da1a95ec276" translate="yes" xml:space="preserve">
          <source>Yes, Meteor does hash your password or login token on the client before sending it over the wire, but that only prevents an attacker from figuring out your password - it doesn&amp;rsquo;t prevent them from logging in as you, since they could just send the hashed password to the server to log in! No matter how you slice it, logging in requires the client to send sensitive data to the server, and the only way to secure that transfer is by using SSL. Note that the same issue is present when using cookies for authentication in a normal HTTP web application, so any app that needs to reliably identify users should be running on SSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f076b03a152a910a713055344401278fd44f1192" translate="yes" xml:space="preserve">
          <source>You &amp;ldquo;include&amp;rdquo; a sub-component with the &lt;code&gt;{{&amp;gt; }}&lt;/code&gt; syntax. By default, the sub-component will gain the data context of the caller, although it&amp;rsquo;s usually a good idea to be explicit. You can provide a single object which will become the entire data context (as we did with the object returned by the &lt;code&gt;todoArgs&lt;/code&gt; helper above), or provide a list of keyword arguments which will be put together into one object, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90deaca0ef701768f16f25209af315869bc5d5a" translate="yes" xml:space="preserve">
          <source>You are creating a collection within MongoDB, and an interface to that collection to be used on the server. It&amp;rsquo;s a fairly straightforward layer on top of the underlying Node MongoDB driver, but with a synchronous API:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be27b62d3961acc7a6cd24129ef110f528fef299" translate="yes" xml:space="preserve">
          <source>You call it the same way you call the advanced Method above, but the Method definition is significantly simpler. We believe this style of Method lets you clearly see the important parts - the name of the Method sent over the wire, the format of the expected arguments, and the JavaScript namespace by which the Method can be referenced. Validated methods only accept a single argument and a callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a35763ae89deeee3538169e6f8edd2fab5a390f1" translate="yes" xml:space="preserve">
          <source>You can add Cordova plugins to your project either directly, or as a dependency of a Meteor package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb166ada98fada3a6ab9f0cf1a163f7b421ea333" translate="yes" xml:space="preserve">
          <source>You can add information specific to a particular deployment of your application by using the &lt;code&gt;--settings&lt;/code&gt; option. The argument to &lt;code&gt;--settings&lt;/code&gt; is a file containing any JSON string. The object in your settings file will appear on the server side of your application in &lt;a href=&quot;#meteor_settings&quot;&gt;&lt;code&gt;Meteor.settings&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2782964809756050678023f65eea3fd7ace175" translate="yes" xml:space="preserve">
          <source>You can add the Crosswalk plugin to your app with &lt;code&gt;meteor add crosswalk&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85c023f8b0658958d03f07ac969ba3039532cee" translate="yes" xml:space="preserve">
          <source>You can allow different teams at your organization to work on the different applications independently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247cffea5b43b8414001541dffd25090106f85a3" translate="yes" xml:space="preserve">
          <source>You can also access authenticated publications (such as &lt;code&gt;lists.private&lt;/code&gt;). Suppose we&amp;rsquo;ve signed up (via the web UI) as &lt;code&gt;user@example.com&lt;/code&gt;, with the password &lt;code&gt;password&lt;/code&gt;, and created a private list. Then we can access it as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d44a4238826b91db16ad530c52f74b0cd87286" translate="yes" xml:space="preserve">
          <source>You can also add a &lt;code&gt;eslintConfig&lt;/code&gt; section to your &lt;code&gt;package.json&lt;/code&gt; to specify that you&amp;rsquo;d like to use the Airbnb config, and to enable &lt;a href=&quot;https://github.com/dferber90/eslint-plugin-meteor&quot;&gt;ESLint-plugin-Meteor&lt;/a&gt;. You can also setup any extra rules you want to change, as well as adding a lint npm command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938eb70c71a7246257e05ba047445913de769e60" translate="yes" xml:space="preserve">
          <source>You can also add any source file that would be compiled to a JS file (such as a CoffeeScript file) in a similar way, assuming you &lt;a href=&quot;#dependencies&quot;&gt;depend&lt;/a&gt; on an appropriate build plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207367ccef744450937729110472f3b5a5c4bbd6" translate="yes" xml:space="preserve">
          <source>You can also change only part of the URL if you want to, using the &lt;code&gt;FlowRouter.setParams()&lt;/code&gt; and &lt;code&gt;FlowRouter.setQueryParams()&lt;/code&gt;. For instance, if we were viewing one list and wanted to go to another, we could write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a6add1c3ff370e5a611f819b812a945a44b50f" translate="yes" xml:space="preserve">
          <source>You can also import CSS directly from a JavaScript file to control load order if you have the &lt;code&gt;ecmascript&lt;/code&gt; package installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5167c9831c495628d994dede0a720b9c76fd97" translate="yes" xml:space="preserve">
          <source>You can also import CSS from a JavaScript file if you have the &lt;code&gt;ecmascript&lt;/code&gt; package installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9fca25291bcef9d8bce2cfc18822749de67e9f" translate="yes" xml:space="preserve">
          <source>You can also import other files or JS entry points from a package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aff4aafc57685ef38f27de719f338d5b0b10183" translate="yes" xml:space="preserve">
          <source>You can also import specific functions from a package using the destructuring syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3e246284b66255d672bd1fff87fab5ee4aa809" translate="yes" xml:space="preserve">
          <source>You can also log into the Galaxy UI at &lt;a href=&quot;https://galaxy.meteor.com&quot;&gt;https://galaxy.meteor.com&lt;/a&gt;. Once there you can manage your applications, monitor the number of connections and resource usage, view logs, and change settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02fc3314e275aaaf86c0c8bb0f6b41848338f151" translate="yes" xml:space="preserve">
          <source>You can also pass the output of a helper to a template inclusion or other helper. To do so, use parentheses to show precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d26a2823a09071aec3e17d038a8f356b7f2c1b1" translate="yes" xml:space="preserve">
          <source>You can also pick which type of login to do by passing an option to &lt;a href=&quot;#meteor_loginwithexternalservice&quot;&gt;&lt;code&gt;Meteor.loginWith&amp;lt;ExternalService&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a82cd9a2c751894e11f1b6c264863c21e3d7f5b" translate="yes" xml:space="preserve">
          <source>You can also set &lt;code&gt;MONGO_URL&lt;/code&gt; in development if you want to connect to a different MongoDB instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231463b81c735f806c6f07dd41a9a53507c490db" translate="yes" xml:space="preserve">
          <source>You can also simply write &lt;code&gt;exports&lt;/code&gt; instead of &lt;code&gt;module.exports&lt;/code&gt; if you prefer. If you need to &lt;code&gt;require&lt;/code&gt; from an ES2015 module with a &lt;code&gt;default&lt;/code&gt; export, you can access the export with &lt;code&gt;require('package').default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645188ed51b5c49ada822d64bf978d39a6b8333f" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;http://docs.meteor.com/#/full/meteor_startup&quot;&gt;Meteor.startup&lt;/a&gt; to control when run code is run on both the server and the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8524fc012f4cf38b4aa5d7d9bc8492ed402c3c2" translate="yes" xml:space="preserve">
          <source>You can also use traditional CommonJS syntax with CoffeeScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd2e6bef96133f1d047a1f15f2d0e9bd5d2f02f1" translate="yes" xml:space="preserve">
          <source>You can call &lt;code&gt;allow&lt;/code&gt; as many times as you like, and each call can include any combination of &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt; functions. The functions should return &lt;code&gt;true&lt;/code&gt; if they think the operation should be allowed. Otherwise they should return &lt;code&gt;false&lt;/code&gt;, or nothing at all (&lt;code&gt;undefined&lt;/code&gt;). In that case Meteor will continue searching through any other &lt;code&gt;allow&lt;/code&gt; rules on the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4c0a240b04c218b0779d19d12aa57965fb7dbf" translate="yes" xml:space="preserve">
          <source>You can chain block helpers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae789f218267cb434db4ec292f653b98d787972" translate="yes" xml:space="preserve">
          <source>You can chain block tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0898dbcdbfd719b78eadecb6b100c5ec73dbe583" translate="yes" xml:space="preserve">
          <source>You can combine multiple dynamic attributes tags with other attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655ed346f81784d0581261653e9a7e79ed6e13ef" translate="yes" xml:space="preserve">
          <source>You can connect any native iOS or Android app to a Meteor server via &lt;a href=&quot;https://www.meteor.com/ddp&quot;&gt;DDP&lt;/a&gt;. For iOS, use the &lt;a href=&quot;https://github.com/martijnwalraven/meteor-ios&quot;&gt;&lt;code&gt;meteor-ios&lt;/code&gt;&lt;/a&gt; framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e7ff79681a417b72ff452347965d4639b403fc" translate="yes" xml:space="preserve">
          <source>You can construct your own user interface using the functions below, or use the &lt;a href=&quot;#accountsui&quot;&gt;&lt;code&gt;accounts-ui&lt;/code&gt; package&lt;/a&gt; to include a turn-key user interface for password-based sign-in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdec73e8983ba2f0768d7d2b3675a40f95d715b6" translate="yes" xml:space="preserve">
          <source>You can control the load order of files by encoding dependencies through imports, since the load order of CSS matters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8ffab423d6590f5ab5449fc0acfba427671200" translate="yes" xml:space="preserve">
          <source>You can create reusable CSS &amp;ldquo;modules&amp;rdquo; that just have variables and mixins and don&amp;rsquo;t actually generate any CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b876b900f8ebf93e1a5d810796db77a2b1fc0092" translate="yes" xml:space="preserve">
          <source>You can create wrapper components by using the &amp;ldquo;template as block helper&amp;rdquo; ability of Blaze (see the &lt;a href=&quot;http://blazejs.org/guide/spacebars.html#Block-Helpers&quot;&gt;Blaze Article&lt;/a&gt;). Here&amp;rsquo;s how we could write an authorization template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d5d17b9a75b2c6635708869dea8a0fad77e70e" translate="yes" xml:space="preserve">
          <source>You can decrypt them using &lt;code&gt;OAuth.openSecrets&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6febc32541eb91e25edcf07cae361f84d66b94d4" translate="yes" xml:space="preserve">
          <source>You can define helpers and event maps on &lt;code&gt;Template.body&lt;/code&gt; just like on any &lt;code&gt;Template.myTemplate&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f08cabf85c560b4a952c6f1009803e3fcd5ddc" translate="yes" xml:space="preserve">
          <source>You can deploy in debug mode by passing &lt;code&gt;--debug&lt;/code&gt;. This will leave your source code readable by your favorite in-browser debugger, just like it is in local development mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7087bebd85af6832dc0e73cc2d2c852b1a6c7a59" translate="yes" xml:space="preserve">
          <source>You can deploy the different applications with different scaling setups and secure them differently (for instance you might restrict access to your admin application to users behind a firewall).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdf88d2aeda1f8f8f2af4bdaf00f46c4ce2dbde" translate="yes" xml:space="preserve">
          <source>You can do this by adding these lines to your &lt;code&gt;~/.bash_profile&lt;/code&gt; file (or the equivalent file for your shell environment, like &lt;code&gt;~/.zshrc&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a997f0bdfa31505b73b36af52ca54e4e80fbb12" translate="yes" xml:space="preserve">
          <source>You can do this in a Blaze component&amp;rsquo;s &lt;code&gt;onCreated()&lt;/code&gt; callback, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36db4ab7b9147091e249710cef30c56c5932bab" translate="yes" xml:space="preserve">
          <source>You can find a complete list of different available routes in the &lt;a href=&quot;https://github.com/meteor-useraccounts/flow-routing#routes&quot;&gt;documentation the &lt;code&gt;useraccounts:flow-routing&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a55fbf2d641e4c9a755a2b5e40269f365086d17" translate="yes" xml:space="preserve">
          <source>You can find more information about remote debugging in the &lt;a href=&quot;https://developer.apple.com/library/safari/documentation/AppleApplications/Conceptual/Safari_Developer_Guide/&quot;&gt;Safari Developer Guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad878ee63ef308bf3e69d3d1482b8bb5cb81181f" translate="yes" xml:space="preserve">
          <source>You can get more details on all the package commands in the &lt;a href=&quot;http://docs.meteor.com/#/full/meteorhelp&quot;&gt;Meteor Command line documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0363ebd129bb08306b7f37eaa1513563789a23e9" translate="yes" xml:space="preserve">
          <source>You can import the dependency from within you package code in the same way that you would inside an &lt;a href=&quot;using-npm-packages#using-npm&quot;&gt;application&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f2b672405dfa4b775a2f8ae94d2a939150eb3c4" translate="yes" xml:space="preserve">
          <source>You can include other assets, such as fonts, icons or images, to your package using &lt;a href=&quot;http://docs.meteor.com/#/full/PackageAPI-addAssets&quot;&gt;&lt;code&gt;api.addAssets&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f85cf2b5c56691bb7ac107c35e0b042bf6d157" translate="yes" xml:space="preserve">
          <source>You can install MongoDB on your own server&amp;mdash;one you own, rent, or a VPS (recommended) like &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt; or &lt;a href=&quot;https://amazonlightsail.com/&quot;&gt;Lightsail&lt;/a&gt;. As you can see from the above section, there are many aspects of database setup and maintenance that you have to take care of. For example, to get the best performance, you should choose a server with an &lt;a href=&quot;https://docs.mongodb.com/manual/administration/production-notes/#use-solid-state-disks-ssds&quot;&gt;SSD&lt;/a&gt; large enough to fit your data and with enough RAM to fit the working set (indexes + active documents) in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4348bb45d713a8d15ac0c352fb3b5b097b01b822" translate="yes" xml:space="preserve">
          <source>You can install the Sublime Text packages that integrate them into the text editor. It&amp;rsquo;s generally recommended to use Package Control to add these packages. If you already have that setup, you can just add the these packages by name; if not, click the instructions links:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992cbf137974fe8c5e9ec2abc1303415564d38c5" translate="yes" xml:space="preserve">
          <source>You can install version 4 from &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;nodejs.org&lt;/a&gt; or version 5 with &lt;code&gt;brew install node&lt;/code&gt;. Then we can install the Chimp tool globally using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b72fb128df42fc961796e6e6d09f01ca8aa297" translate="yes" xml:space="preserve">
          <source>You can learn more about arguments to helpers in &lt;a href=&quot;spacebars&quot;&gt;Spacebars&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9270f9a713e8f91d4e81ecf6e55a1eb6aa5eb27c" translate="yes" xml:space="preserve">
          <source>You can obtain a View object by calling &lt;a href=&quot;#Blaze-render&quot;&gt;&lt;code&gt;Blaze.render&lt;/code&gt;&lt;/a&gt; on a template, or by accessing &lt;a href=&quot;templates#Blaze-TemplateInstance-view&quot;&gt;&lt;code&gt;template.view&lt;/code&gt;&lt;/a&gt; on a template instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a8e9d55ad24a87920c2c18a1bb927d48212ab4" translate="yes" xml:space="preserve">
          <source>You can obtain a server running Ubuntu or Debian from many generic hosting providers and Meteor Up can SSH into your server with the keys you provide in the config. You can also &lt;a href=&quot;https://www.youtube.com/watch?v=WLGdXtZMmiI&quot;&gt;watch this video&lt;/a&gt; for a more complete walkthrough on how to do it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2995106fad3a164c44aca51698ab73d2b15e7538" translate="yes" xml:space="preserve">
          <source>You can often work out &lt;em&gt;why&lt;/em&gt; a helper has re-run by tracing the source of the reactive invalidation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb41f49a9b4285630e5a878037ee396237fbbaae" translate="yes" xml:space="preserve">
          <source>You can only access &lt;code&gt;findAll&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;firstNode&lt;/code&gt;, and &lt;code&gt;lastNode&lt;/code&gt; from the &lt;code&gt;onRendered&lt;/code&gt; callback and event handlers, not from &lt;code&gt;onCreated&lt;/code&gt; and &lt;code&gt;onDestroyed&lt;/code&gt;, because they require the template instance to be in the DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef732022f03cd81ea0fb4da7fb108bbe19b4465" translate="yes" xml:space="preserve">
          <source>You can pass &lt;code&gt;--server-only&lt;/code&gt; to only build the server bundle. This allows you to build your app without installing the mobile SDKs on the build machine. This is useful if you use an automated deployment setup for instance. (If you remove the mobile platforms before building instead, hot code push will be disabled because the assets for Cordova included in the server bundle will not be generated.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f89febf1cc0cf2286f84dd4a884cdffa35a0bae" translate="yes" xml:space="preserve">
          <source>You can pass &lt;code&gt;METEOR_SESSION_FILE=token.json&lt;/code&gt; before &lt;code&gt;meteor login&lt;/code&gt; to generate a login session token so you don&amp;rsquo;t have to share your login credentials with third-party service providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7830a21ba1d3347cb7951399fc28fac7f35d173c" translate="yes" xml:space="preserve">
          <source>You can pass an argument to &lt;code&gt;{{&amp;gt; Template.contentBlock}}&lt;/code&gt; or &lt;code&gt;{{&amp;gt;
Template.elseBlock}}&lt;/code&gt; to invoke it with a data context of your choice. You can also use &lt;code&gt;{{#if Template.contentBlock}}&lt;/code&gt; to see if the current template was invoked as a block helper rather than an inclusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39cad7f669d627f6f48626c10d710892e6935c4" translate="yes" xml:space="preserve">
          <source>You can pass in the flag &lt;code&gt;--packages-only&lt;/code&gt; to update only the packages, and not the release itself. Similarly, you can pass in names of packages (&lt;code&gt;meteor update foo:kittens baz:cats&lt;/code&gt;) to only update specific packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2670efad128c2847df08821969530c5982124949" translate="yes" xml:space="preserve">
          <source>You can pass settings to your app through a &lt;em&gt;settings file&lt;/em&gt; or an &lt;em&gt;environment variable&lt;/em&gt;. Most of your app settings should be in JSON files that you pass in when starting your app. You can start your app with a settings file by passing the &lt;code&gt;--settings&lt;/code&gt; flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb1a747720b365b65f3ef3ee4fd8e5cf9afb54d" translate="yes" xml:space="preserve">
          <source>You can provide arguments to a helper like &lt;code&gt;checkedClass&lt;/code&gt; by simply placing the argument after the helper call, as in: &lt;code&gt;{{checkedClass todo true 'checked'}}&lt;/code&gt;. You can also provide a list of named keyword arguments to a helper with &lt;code&gt;{{checkedClass todo noClass=true classname='checked'}}&lt;/code&gt;. When you pass keyword arguments, you need to read them off of the &lt;code&gt;hash&lt;/code&gt; property of the final argument. Here&amp;rsquo;s how it would look for the example we just saw:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d344814d6de6796e279884e12eed7f40b8c8feb2" translate="yes" xml:space="preserve">
          <source>You can read about the full syntax &lt;a href=&quot;../api/spacebars&quot;&gt;in the Spacebars&lt;/a&gt;. In this section we&amp;rsquo;ll attempt to cover some of the important details beyond just the syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f1fe3fe0f293991aba353817d2fa496b238d62" translate="yes" xml:space="preserve">
          <source>You can read about the module system in detail in the &lt;a href=&quot;https://docs.meteor.com/#/full/modules&quot;&gt;&lt;code&gt;modules&lt;/code&gt; package README&lt;/a&gt;. This package is automatically included in every new Meteor app as part of the &lt;a href=&quot;https://docs.meteor.com/#/full/ecmascript&quot;&gt;&lt;code&gt;ecmascript&lt;/code&gt; meta-package&lt;/a&gt;, so most apps won&amp;rsquo;t need to do anything to start using modules right away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677ed86f4653021adb6464050b4696cd107ee3c9" translate="yes" xml:space="preserve">
          <source>You can read more about testing in Meteor in the &lt;a href=&quot;testing&quot;&gt;Testing article&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cac7c58eebbebcfee2eda69b304193fbfc66655e" translate="yes" xml:space="preserve">
          <source>You can read more about views in the &lt;a href=&quot;../api/blaze#Blaze-View&quot;&gt;Blaze View&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21588630855ee60edffdf41d2ca535f1e8042ae6" translate="yes" xml:space="preserve">
          <source>You can read this &lt;a href=&quot;https://www.okgrow.com/posts/mongodb-atlas-setup&quot;&gt;detailed guide&lt;/a&gt; by OK GROW! for step-by-step instructions to deploying a production ready MongoDB database on MongoDB Atlas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec22f3709b6dd7897c4dc5c586588309576d5758" translate="yes" xml:space="preserve">
          <source>You can remove a previously added plugin using &lt;code&gt;meteor remove&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6df52778bbe12b2b5233490bb56338c1012b18d" translate="yes" xml:space="preserve">
          <source>You can render a component hierarchy to the DOM using the &lt;code&gt;react-dom&lt;/code&gt; package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8d291d4800eeca1965120be1b6b109c90338d3" translate="yes" xml:space="preserve">
          <source>You can see a proof of concept of this architecture in an &lt;a href=&quot;https://github.com/tmeasday/multi-app-accounts&quot;&gt;example repository&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d46847fb3216d60b044b6960139d813e62a86cdb" translate="yes" xml:space="preserve">
          <source>You can see that although the situation is a little complex, it&amp;rsquo;s also completely determined by the arguments and thus very much testable. A component style guide helps immeasurably in seeing all these states easily! In Galaxy we have each state in our style guide for each of the lists of our app and we can ensure all work as expected and appear correctly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a344188b17a4c7783bc4cfc054ff302f93a67981" translate="yes" xml:space="preserve">
          <source>You can see that this Method does a &lt;em&gt;very specific thing&lt;/em&gt; - it just makes a single list private. An alternative would have been to have a Method called &lt;code&gt;setPrivacy&lt;/code&gt;, which could set the list to private or public, but it turns out that in this particular app the security considerations for the two related operations - &lt;code&gt;makePrivate&lt;/code&gt; and &lt;code&gt;makePublic&lt;/code&gt; - are very different. By splitting our operations into different Methods, we make each one much clearer. It&amp;rsquo;s obvious from the above Method definition which arguments we accept, what security checks we perform, and what operations we do on the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67994359c59c850118111c14804dfe397f0d8e8f" translate="yes" xml:space="preserve">
          <source>You can see that with relatively little code we&amp;rsquo;ve managed to restrict the format of a list significantly. You can read more about more complex things that can be done with schemas in the &lt;a href=&quot;http://atmospherejs.com/aldeed/simple-schema&quot;&gt;Simple Schema docs&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24de5f82ac264207f621dbd3478c799651b6cd5" translate="yes" xml:space="preserve">
          <source>You can share your package with others by publishing it to the npm registry. While most packages are public, you can control who may view and use your package with &lt;a href=&quot;https://docs.npmjs.com/private-modules/intro&quot;&gt;private modules&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87be8aa1162e791406bf47cce0fe0a2ae8a5b729" translate="yes" xml:space="preserve">
          <source>You can specify multiple targets, so &lt;code&gt;meteor run ios android-device&lt;/code&gt; will run the app on both the iOS Simulator and an Android device for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d08bf500dca58dc82a365871bba78de6c21404a" translate="yes" xml:space="preserve">
          <source>You can take the above UI a step further by showing placeholders whilst you wait for the data to load. This is a UX pattern that has been pioneered by Facebook which gives the user a more solid impression of what data is coming down the wire. It also prevents parts of the UI from moving around when data loads, if you can make the placeholder have the same dimensions as the final element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7f98eb30614a882d79daa6d32c8320a50158703" translate="yes" xml:space="preserve">
          <source>You can then access these files from the client from a URL &lt;code&gt;/packages/username_my-package/font/OpenSans-Regular-webfont.eot&lt;/code&gt; or from the server using the &lt;a href=&quot;http://docs.meteor.com/#/full/assets_getText&quot;&gt;Assets API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5acc6e398770bfc30afc03d44106e7b8e78f17e" translate="yes" xml:space="preserve">
          <source>You can then get the data back out of Flow Router using &lt;a href=&quot;http://docs.meteor.com/#/full/ejson_parse&quot;&gt;&lt;code&gt;EJSON.parse()&lt;/code&gt;&lt;/a&gt;. Note that Flow Router does the URL decoding for you automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01dd8fbee8fa942fc00d0b0c2bc37f5b7f748b58" translate="yes" xml:space="preserve">
          <source>You can then run the application by invoking &lt;code&gt;node&lt;/code&gt; with a &lt;code&gt;ROOT_URL&lt;/code&gt;, and &lt;code&gt;MONGO_URL&lt;/code&gt;. These instructions are also available in the &lt;code&gt;README&lt;/code&gt; file found in the root of the bundle you built above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f1b08b6ac58a8312bbfcc767daabb4523afb12" translate="yes" xml:space="preserve">
          <source>You can use (1) or (2) to override the version from Atmosphere. You can even do this to load patched versions of Meteor core packages - just copy the code of the package from &lt;a href=&quot;https://github.com/meteor/meteor/tree/devel/packages&quot;&gt;Meteor&amp;rsquo;s GitHub repository&lt;/a&gt;, and edit away.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe82bb58f5585431c4fb1a02e95ab64101879b1" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#writingpackages&quot;&gt;local packages&lt;/a&gt; to define custom build plugins for your app, with one caveat. In published packages, build plugins are already bundled with their transitive dependencies. So if you want a dependency of a build plugin to be satisfied by a local package, you must use a local copy of the package that defines the plugin (even if you make no changes to that package) so that Meteor will pick up the local dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719484cd6caa5518b91e86f8f54edebcfe7b939d" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;https://github.com/meteor/chromatic&quot;&gt;Chromatic component explorer&lt;/a&gt; in your Meteor + React app with &lt;code&gt;meteor add mdg:chromatic&lt;/code&gt;. Similar projects built in React are &lt;a href=&quot;http://www.uiharness.com/&quot;&gt;UI Harness&lt;/a&gt; by Phil Cockfield and &lt;a href=&quot;https://github.com/kadirahq/react-storybook&quot;&gt;React Storybook&lt;/a&gt; by Arunoda Susiripala.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b55ec6860cbf09c67efb1cbe8e061e27768ad2" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;this.autorun&lt;/code&gt; from an &lt;a href=&quot;templates#Template-onCreated&quot;&gt;&lt;code&gt;onCreated&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;templates#Template-onRendered&quot;&gt;&lt;code&gt;onRendered&lt;/code&gt;&lt;/a&gt; callback to reactively update the DOM or the template instance. You can use &lt;code&gt;Template.currentData()&lt;/code&gt; inside of this callback to access reactive data context of the template instance. The Computation is automatically stopped when the template is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def8b86be88e1a4fba9288b0f7a13fb4141a9c59" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;this.subscribe&lt;/code&gt; from an &lt;a href=&quot;templates#Template-onCreated&quot;&gt;&lt;code&gt;onCreated&lt;/code&gt;&lt;/a&gt; callback to specify which data publications this template depends on. The subscription is automatically stopped when the template is destroyed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625bdbdf3540913a4eaf0e9ae255ce21f5a4b00b" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;update&lt;/code&gt; to perform a Mongo upsert by setting the &lt;code&gt;upsert&lt;/code&gt; option to true. You can also use the &lt;a href=&quot;#upsert&quot;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/a&gt; method to perform an upsert that returns the &lt;code&gt;_id&lt;/code&gt; of the document that was inserted (if there was one) in addition to the number of affected documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="367cb316ce142085cf3595052ca4c41bb3735b2b" translate="yes" xml:space="preserve">
          <source>You can use a special variable &lt;code&gt;@index&lt;/code&gt; in the body of &lt;code&gt;#each&lt;/code&gt; to get the 0-based index of the currently rendered value in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c3186f6fceef6b76bf646f03fdbf62e5da70d6" translate="yes" xml:space="preserve">
          <source>You can use any field name other than those &lt;a href=&quot;http://docs.meteor.com/api/accounts.html#Meteor-users&quot;&gt;used by the Accounts system&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d614007a524a4d41a28ee9d3ec31704c6b72fe" translate="yes" xml:space="preserve">
          <source>You can use the application by pointing your web browser at &lt;a href=&quot;http://localhost:3000&quot;&gt;localhost:3000&lt;/a&gt;. No Internet connection is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6f0840a85fe3661c42350e24c5642aadd13d23" translate="yes" xml:space="preserve">
          <source>You can use the application server bundle to host a Meteor application on your own server, instead of deploying to Galaxy. You will have to deal with logging, monitoring, backups, load-balancing, etc, all of which we handle for you if you use Galaxy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="693e68c4cc153f63f032100b0ef2420caddc6788" translate="yes" xml:space="preserve">
          <source>You can use the official search at &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npmjs.com&lt;/a&gt; or see results sorted by package quality (code quality, maintenance status, development velocity, popularity etc.) at &lt;a href=&quot;https://npms.io/&quot;&gt;npms.io&lt;/a&gt;. There are also sites that search certain types of packages, like &lt;a href=&quot;https://js.coach/&quot;&gt;js.coach&lt;/a&gt;&amp;lsquo;s &lt;a href=&quot;https://js.coach/react&quot;&gt;React&lt;/a&gt; and &lt;a href=&quot;https://js.coach/react-native&quot;&gt;React Native&lt;/a&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e397dc59d62c9ff4b2d7ce9e37575739e480e5" translate="yes" xml:space="preserve">
          <source>You can write apps with native UI elements in JavaScript using &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt;. For the most recent information on how to use React Native with Meteor, see &lt;a href=&quot;https://github.com/spencercarli/react-native-meteor-index&quot;&gt;this reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca897cb3ea8d43f3dac013232817716ef78944b4" translate="yes" xml:space="preserve">
          <source>You can&amp;rsquo;t do security at the rendering layer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d161470ddf8dd7abd3373375e088cf4830cbd38a" translate="yes" xml:space="preserve">
          <source>You configure these images with &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html#App-icons&quot;&gt;&lt;code&gt;App.icons&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://docs.meteor.com/api/mobile-config.html#App-launchScreens&quot;&gt;&lt;code&gt;App.launchScreens&lt;/code&gt;&lt;/a&gt;, which both use names to refer to the various supported image sizes (see API documentation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96fd67b2ef2cc7b602721cd756aad2ccde351f8" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t have to put all your method definitions into a single &lt;code&gt;Meteor.methods&lt;/code&gt; call; you may call it multiple times, as long as each method has a unique name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16d7b01173b10b72630fe0e9d73f4211139f847" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to use the &lt;code&gt;ecmascript&lt;/code&gt; package or ES2015 syntax in order to use modules. Just like Node.js in the pre-ES2015 days, you can use &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt;&amp;mdash;that&amp;rsquo;s what the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements are compiling into, anyway.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35340523a28f631b7ad9ff725dba3eac18ec03b4" translate="yes" xml:space="preserve">
          <source>You install plugins from the local file system by specifying a &lt;code&gt;file://&lt;/code&gt; URL, which gets interpreted relative to the project directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9de81df1636001e3313767d2c4f81a6f21e25d" translate="yes" xml:space="preserve">
          <source>You know exactly what dependencies you need to provide for them to work in different environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7230ad8e312e005df99bc928963df2b191b25e59" translate="yes" xml:space="preserve">
          <source>You may also need to click &amp;lsquo;Allow&amp;rsquo; on the &lt;code&gt;Allow USB debugging?&lt;/code&gt; prompt on the device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7dcf010c68b008bb21d0fa44d110cd195c477ae" translate="yes" xml:space="preserve">
          <source>You may also pass the &lt;code&gt;--release&lt;/code&gt; flag to act as an override to update to a specific release. This is an override: if it cannot find compatible versions of packages, it will log a warning, but perform the update anyway. This will only change your package versions if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d633e2969e79a6a5d2823a964f03c203967aa6f" translate="yes" xml:space="preserve">
          <source>You may be aware that WKWebView on iOS 8 doesn&amp;rsquo;t allow files to be loaded from the local filesystem. This is problematic for standard Cordova apps, because these use &lt;code&gt;file://&lt;/code&gt; URLs to load the app. But because the Meteor integration serves assets from &lt;code&gt;localhost&lt;/code&gt;, WKWebView works fine on both iOS 8 and iOS 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a010eb4ddfc7f27147ebb347fbb6b90ecb2990" translate="yes" xml:space="preserve">
          <source>You may have heard of PhoneGap, and wonder how it relates to Cordova. PhoneGap is a product name used by Adobe since 2011, when they acquired a company called Nitobi, the original creators of what is now the Cordova project. When Adobe donated the code to Apache in 2012 to ensure a more open governance model, the open source project was rebranded as Cordova. PhoneGap is now one of the distributions of Cordova, on a par with other distributions like Ionic, Telerik, Monaca, or Intel XDK. These distributions mainly differ in tooling and integration with cloud services, but they share the underlying platform and plugins. Meteor could also be considered a Cordova distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c952d45a07adebdf65651853743470414f4a2cd" translate="yes" xml:space="preserve">
          <source>You may notice in the example Method above, we didn&amp;rsquo;t need to write any callbacks when interacting with MongoDB, but the Method still has the non-blocking properties that people associate with Node.js and callback-style code. Meteor uses a coroutine library called &lt;a href=&quot;https://github.com/laverdet/node-fibers&quot;&gt;Fibers&lt;/a&gt; to enable you to write code that uses return values and throws errors, and avoid dealing with lots of nested callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439bddc16ca01d35482ca36832a9f9a0a7bbb438" translate="yes" xml:space="preserve">
          <source>You may notice that, with the exception of Meteor platform packages, all packages on Atmosphere have a name of the form &lt;code&gt;prefix:package-name&lt;/code&gt;. The prefix is the Meteor Developer username of the organization or user that published the package. Meteor uses such a convention for package naming to make sure that it&amp;rsquo;s clear who has published a certain package, and to avoid an ad-hoc namespacing convention. Meteor platform packages do not have any &lt;code&gt;prefix:&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480387cb61cb7ba5a817f84602da8f194071d532" translate="yes" xml:space="preserve">
          <source>You may want to override the compatibility version if you want hot code push to reach older apps that don&amp;rsquo;t have the latest version of your native code from the app store. Let&amp;rsquo;s say you&amp;rsquo;re developing an iOS app, you have the plugin &lt;code&gt;cordova-plugin-camera@2.4.0&lt;/code&gt;, and your app has the compatibility version pictured above, &lt;code&gt;3ed5b9318b2916b595f7721759ead4d708dfbd46&lt;/code&gt;. If you were to update to version &lt;code&gt;2.4.1&lt;/code&gt; of &lt;code&gt;cordova-plugin-camera&lt;/code&gt;, your server would generate a new compatibility version and your users&amp;rsquo; apps would stop receiving hot code pushes. However, you can tell your server to use the old compatilibity version:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5517118161752100ae95c4743085b7c6793f3e0" translate="yes" xml:space="preserve">
          <source>You may want to track non-page change related events (for instance publication subscription, or method calls) also. To do so you can use the custom event tracking functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad14068ffe4882e6762492f9fc7f94c1f18c977d" translate="yes" xml:space="preserve">
          <source>You might run into a situation where many Methods in your app have the same security checks. This can be simplified by factoring out the security into a separate module, wrapping the Method body, or extending the &lt;code&gt;Mongo.Collection&lt;/code&gt; class to do security inside the &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt; implementations on the server. However, implementing your client-server communication via specific Methods is still a good idea rather than sending arbitrary &lt;code&gt;update&lt;/code&gt; operators from the client, since a malicious client can&amp;rsquo;t send an &lt;code&gt;update&lt;/code&gt; operator that you didn&amp;rsquo;t test for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7797a5602e77f30aa23f9f397d14291df3056a7e" translate="yes" xml:space="preserve">
          <source>You must close all HTML tags except the ones specified to have no end tag, like BR, HR, IMG and INPUT. You can write these tags as &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; or equivalently &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a7cd629849d965704b4691a76f5d0c59ef0c85" translate="yes" xml:space="preserve">
          <source>You must provide the &lt;code&gt;from&lt;/code&gt; option and at least one of &lt;code&gt;to&lt;/code&gt;, &lt;code&gt;cc&lt;/code&gt;, and &lt;code&gt;bcc&lt;/code&gt;; all other options are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613bb83304959ed4153e2a7554d7321223107489" translate="yes" xml:space="preserve">
          <source>You need to include a &lt;code&gt;&amp;lt;div id=&quot;app&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; in your body&amp;rsquo;s HTML somewhere of course.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be047212ec41d65f51b475be6fd8fe404292cb3" translate="yes" xml:space="preserve">
          <source>You should access stores in the same way you&amp;rsquo;d access other reactive data in your templates&amp;mdash;that means centralizing your store access, much like you centralize your subscribing and data fetch. For a Blaze template, that&amp;rsquo;s either in a helper, or from within a &lt;code&gt;this.autorun()&lt;/code&gt; inside an &lt;code&gt;onCreated()&lt;/code&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8879023240bd4396cad16507c8521fc47765904f" translate="yes" xml:space="preserve">
          <source>You should be extremely careful about doing this, and always ensure you aren&amp;rsquo;t returning user-generated content (or escape it if you do!) from such a helper.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08549087f148f7c277d241dcc1dcdc6d0ff81a79" translate="yes" xml:space="preserve">
          <source>You should subscribe to publications from the server from an &lt;code&gt;onCreated&lt;/code&gt; callback (within an &lt;code&gt;autorun&lt;/code&gt; block if you have reactively changing arguments). In the Todos example app, in the &lt;code&gt;Lists_show_page&lt;/code&gt; template we subscribe to the &lt;code&gt;todos.inList&lt;/code&gt; publication based on the current &lt;code&gt;_id&lt;/code&gt; FlowRouter param:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2775eb509ea9a26144cc4eb7f44b5dd7ae36ff" translate="yes" xml:space="preserve">
          <source>You should then check the generated &lt;code&gt;node_shrinkwrap/&lt;/code&gt; directory into source control, but ensure it is ignored by your text editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c226daf843ca8e6cba7357af776299e8c0338d" translate="yes" xml:space="preserve">
          <source>You should use the ES2015 &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; features to manage your code. This will let you better understand the dependencies between different parts of your code, and it will be easy to know where to look if you need to read the source code of a dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d51b211fc87565ae85755593dea4bd46e042154" translate="yes" xml:space="preserve">
          <source>You should wrap any functionality which relies on a Cordova plugin in a &lt;code&gt;Meteor.startup()&lt;/code&gt; block to make sure the plugin has been fully initialized (by listening to the &lt;code&gt;deviceready&lt;/code&gt; event). For example, when using the Cordova geolocation plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ba28d94f3ec5d74bff845de110966d89125010" translate="yes" xml:space="preserve">
          <source>You use methods all the time, because the database mutators (&lt;a href=&quot;#insert&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt;) are implemented as methods. When you call any of these functions on the client, you&amp;rsquo;re invoking their stub version that update the local cache, and sending the same write request to the server. When the server responds, the client updates the local cache with the writes that actually occurred on the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fcd201a20fd9b38fb187354839c9d5feb92cec" translate="yes" xml:space="preserve">
          <source>You will also want to show some kind of indication that the method is working in between their click of the button and the redirect completing. Don&amp;rsquo;t forget to provide feedback if the method is returning an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2ff7526e0fd0ef6dc980122bb340e5d83684469" translate="yes" xml:space="preserve">
          <source>You will encounter three types of logs in a Meteor Cordova app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6c8827c0f45795f7d486d0ed929b3901badd41" translate="yes" xml:space="preserve">
          <source>You will have to sign and &lt;code&gt;zipalign&lt;/code&gt; both APKs. You will also have to submit both to the Play Store, see &lt;a href=&quot;http://developer.android.com/google/play/publishing/multiple-apks.html&quot;&gt;submitting multiple APKs&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3bf410faf44328e0141c6e0ed75c7d1940fcf1" translate="yes" xml:space="preserve">
          <source>You will need to pass in the component class with a helper:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff6535487cf313117c5f2e69e51c24b2e94e078" translate="yes" xml:space="preserve">
          <source>You will probably want to customize the emails &lt;code&gt;accounts-password&lt;/code&gt; will send on your behalf. This can be easily done through the &lt;a href=&quot;http://docs.meteor.com/#/full/accounts_emailtemplates&quot;&gt;&lt;code&gt;Accounts.emailTemplates&lt;/code&gt; API&lt;/a&gt;. Below is some example code from the Todos app:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e60497380a0d0e7fd7c98d7871a8d07fabaef3" translate="yes" xml:space="preserve">
          <source>You will then have to reload &lt;code&gt;.bash_profile&lt;/code&gt; (by executing &lt;code&gt;source ~/.bash_profile&lt;/code&gt;) or open a new terminal session to apply the new environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2d9dc3cf81454dfa3e09ad55298729c27793ad" translate="yes" xml:space="preserve">
          <source>You would invoke it as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69667edabb5f55dd20a8a936ca05ca8c4a8c8d3" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll also need to enable the Web Inspector on your iOS device. Go to &lt;em&gt;Settings &amp;gt; Safari &amp;gt; Advanced&lt;/em&gt; and enable &amp;lsquo;Web Inspector&amp;rsquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f653248bfacd541b98d5458c3c0e8c97a22531ba" translate="yes" xml:space="preserve">
          <source>Your app sees only the exports of the packages that you use directly. If you use package A, and package A uses package B, then you only see package A&amp;rsquo;s exports. Package B&amp;rsquo;s exports don&amp;rsquo;t &amp;ldquo;leak&amp;rdquo; into your namespace just because you used package A. Each app or package only sees their own globals plus the APIs of the packages that they specifically use and depend upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a60bf01c71769ba32875a616bbd1e6e581da5f" translate="yes" xml:space="preserve">
          <source>Your client JavaScript bundle can be significantly smaller if you separate out code that a specific type of user will never use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b85346c9b63e7d112518073509d10c23fc11779" translate="yes" xml:space="preserve">
          <source>Your collections, as well as the &lt;code&gt;Meteor.users&lt;/code&gt; collection,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e989771eb31f770ff05ee04531369bcade571e" translate="yes" xml:space="preserve">
          <source>Your database password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8185f9a4851a44eb3797131162788d510f9ba4" translate="yes" xml:space="preserve">
          <source>a directory with an Xcode project source if iOS is targetted as a mobile platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f06478f58a2c8f9a50a939555db380008e3c183" translate="yes" xml:space="preserve">
          <source>a function: for the event to satisfy the matcher, the function must evaluate to true when passed the value of the same property in the event object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77d0176448fc334ffe13823e7169116511c84b4" translate="yes" xml:space="preserve">
          <source>a straightforward approach is simply to include the common code as a &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Tools-Submodules&quot;&gt;git submodule&lt;/a&gt; of both applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e3e605f1bcbc94ed03f9011b11f6b2fa51ac31" translate="yes" xml:space="preserve">
          <source>a string: for the event to satisfy the matcher, this value must be equal to the value of the same property in the event object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f308829cc49a9491fd8b714d523aaa30e68c8ec7" translate="yes" xml:space="preserve">
          <source>a tarball (.tar.gz) that includes everything necessary to run the application server (see the &lt;code&gt;README&lt;/code&gt; in the tarball for details). Using the &lt;code&gt;--directory&lt;/code&gt; option will produce a &lt;code&gt;bundle&lt;/code&gt; directory instead of the tarball.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6d69c202b8f9fe872a7e8d5e9bcb55454000e7" translate="yes" xml:space="preserve">
          <source>accounts-ui</source>
          <target state="translated">accounts-ui</target>
        </trans-unit>
        <trans-unit id="87d2a05490bf43487c105a23530f5c58114fe3ee" translate="yes" xml:space="preserve">
          <source>added(document)or</source>
          <target state="translated">added(document)or</target>
        </trans-unit>
        <trans-unit id="32baf52ba59fafec16a0a1a005603d878aa9fcef" translate="yes" xml:space="preserve">
          <source>added(id, fields)or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681e13dbe41dc73aa4b6b1108b2f7012580f98a6" translate="yes" xml:space="preserve">
          <source>addedAt(document, atIndex, before)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3f32650155ee5e7eaa76b5aa83446bc88e41e0" translate="yes" xml:space="preserve">
          <source>addedBefore(id, fields, before)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad845dc5c233de90812e0d92642d8da6f8340c33" translate="yes" xml:space="preserve">
          <source>alanning:roles</source>
          <target state="translated">alanning:roles</target>
        </trans-unit>
        <trans-unit id="a1a857dd38fda4b8de5eed6bce429f7eedefd708" translate="yes" xml:space="preserve">
          <source>allowedBoolean</source>
          <target state="translated">allowedBoolean</target>
        </trans-unit>
        <trans-unit id="a413809824517467fe6e874e5e0a65a327c543d1" translate="yes" xml:space="preserve">
          <source>allowing your type in &lt;a href=&quot;#session&quot;&gt;&lt;code&gt;Session&lt;/code&gt;&lt;/a&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056c888a3211f88a8b0527c1e6528e47103eac66" translate="yes" xml:space="preserve">
          <source>allowing your type in the return values or arguments to &lt;a href=&quot;#methods_header&quot;&gt;methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f44985d5b80e9a1b5b78395a21677990e50da68" translate="yes" xml:space="preserve">
          <source>alternatively, if you include both applications in a single repository, you can use symbolic links to include the common module inside both apps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4373ea5720d4d20c2b3214d55fb9e0af933d45ca" translate="yes" xml:space="preserve">
          <source>an unsigned &lt;code&gt;apk&lt;/code&gt; bundle and a project source if Android is targetted as a mobile platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afd00e8c50bfbbea664455202bddf35d54b8a9c" translate="yes" xml:space="preserve">
          <source>and instead call &lt;a href=&quot;#meteor_publish&quot;&gt;&lt;code&gt;Meteor.publish&lt;/code&gt;&lt;/a&gt; to specify which parts of your collection should be published to which users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48aee7a36f2b83100df312b9edbff502a89b7b77" translate="yes" xml:space="preserve">
          <source>and use the &lt;code&gt;Meteor.loginWithGithub&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16f370cee25b21f0992cb7c946594f04cf38bf4" translate="yes" xml:space="preserve">
          <source>and you can access &lt;code&gt;AccountsTemplates&lt;/code&gt; via &lt;code&gt;UserAccountsCore.AccountsTemplates&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337553caea598d0d286cbb38bfb16f0dda424eed" translate="yes" xml:space="preserve">
          <source>api.addAssets()</source>
          <target state="translated">api.addAssets()</target>
        </trans-unit>
        <trans-unit id="263ddf06871ccf581a6906beb7782d3bfd2b651a" translate="yes" xml:space="preserve">
          <source>api.addFiles()</source>
          <target state="translated">api.addFiles()</target>
        </trans-unit>
        <trans-unit id="f0e400cce3088a342f2618e9f458aa5203ca354f" translate="yes" xml:space="preserve">
          <source>api.export()</source>
          <target state="translated">api.export()</target>
        </trans-unit>
        <trans-unit id="52a1eb7fdeb6ff5a761c21f8f37c57982f7a9e86" translate="yes" xml:space="preserve">
          <source>api.imply()</source>
          <target state="translated">api.imply()</target>
        </trans-unit>
        <trans-unit id="5b149e74ec94b8db90695d3b5dda3d0c5749a417" translate="yes" xml:space="preserve">
          <source>api.use()</source>
          <target state="translated">api.use()</target>
        </trans-unit>
        <trans-unit id="82a7a0ef25c64de45ca1118dd5524ab3212fcb50" translate="yes" xml:space="preserve">
          <source>api.versionsFrom()</source>
          <target state="translated">api.versionsFrom()</target>
        </trans-unit>
        <trans-unit id="799467800736cc259595fda194df8afa84f3d069" translate="yes" xml:space="preserve">
          <source>apollo</source>
          <target state="translated">apollo</target>
        </trans-unit>
        <trans-unit id="6d003f368abe9913162366183acee34bd1c4af93" translate="yes" xml:space="preserve">
          <source>appcache</source>
          <target state="translated">appcache</target>
        </trans-unit>
        <trans-unit id="322634c19b595675d1343c2e97fa0918a2cbe28f" translate="yes" xml:space="preserve">
          <source>audit-argument-checks</source>
          <target state="translated">audit-argument-checks</target>
        </trans-unit>
        <trans-unit id="cb78c7866bd354810b3988098b2ec83d7efd97dc" translate="yes" xml:space="preserve">
          <source>autopublish</source>
          <target state="translated">autopublish</target>
        </trans-unit>
        <trans-unit id="f4bc6a03d26f76170cdc720bac320958112e8111" translate="yes" xml:space="preserve">
          <source>blaze-html-templates</source>
          <target state="translated">blaze-html-templates</target>
        </trans-unit>
        <trans-unit id="eec8758ec9848c46de47939a142ef18e0cb3ec61" translate="yes" xml:space="preserve">
          <source>bundle-visualizer</source>
          <target state="translated">bundle-visualizer</target>
        </trans-unit>
        <trans-unit id="df7cf341160ad91ea752ecca5a26d4d5d1ab7cbd" translate="yes" xml:space="preserve">
          <source>calls:</source>
          <target state="translated">calls:</target>
        </trans-unit>
        <trans-unit id="85004e4aec3d0bb5ff39ddf66472b9d20484e16c" translate="yes" xml:space="preserve">
          <source>can be rewritten to use CommonJS &lt;code&gt;module.exports&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9ea3c0d7ce1b63b7bc6c804421576c74bcfa35" translate="yes" xml:space="preserve">
          <source>can be written with CommonJS like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393e268fa535e418ab452aad69e8b29af4fcabe7" translate="yes" xml:space="preserve">
          <source>causes files in your &lt;code&gt;public/online&lt;/code&gt; directory to not be cached, and so they will only be available online. You can then move your large files into that directory and refer to them at the new URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22feb8a4e84029cbe6237d80b48b21771fcef697" translate="yes" xml:space="preserve">
          <source>changed(id, fields)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ef343416195b0aa93d754f66cfb2a698ee1704" translate="yes" xml:space="preserve">
          <source>changed(newDocument, oldDocument) or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b5bcb8160d83003f4ac6a91f265023d6f6d8b3" translate="yes" xml:space="preserve">
          <source>changedAt(newDocument, oldDocument, atIndex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56d985300d4b52eb6e189be006f44f8d23c5ec9" translate="yes" xml:space="preserve">
          <source>check</source>
          <target state="translated">check</target>
        </trans-unit>
        <trans-unit id="1f6d22f056609770956ad56fd0a4605ac4c32186" translate="yes" xml:space="preserve">
          <source>chriswessels/meteor-tupperware</source>
          <target state="translated">chriswessels/meteor-tupperware</target>
        </trans-unit>
        <trans-unit id="0bfe991f64a92e574abf91696ef883387dc58d98" translate="yes" xml:space="preserve">
          <source>clientAddressString</source>
          <target state="translated">clientAddressString</target>
        </trans-unit>
        <trans-unit id="b9dc902e551bc0ff53e48b2ec7096990efb51cdb" translate="yes" xml:space="preserve">
          <source>closeFunction</source>
          <target state="translated">closeFunction</target>
        </trans-unit>
        <trans-unit id="f5fbc02e24988b5ca567bcf3a45121224fa91a32" translate="yes" xml:space="preserve">
          <source>coffeescript</source>
          <target state="translated">coffeescript</target>
        </trans-unit>
        <trans-unit id="a3d96f494937846929339ab6fa25cc1872a5a284" translate="yes" xml:space="preserve">
          <source>connectedBoolean</source>
          <target state="translated">connectedBoolean</target>
        </trans-unit>
        <trans-unit id="c487fcb2799f8d2d61d01bf00bacb808b48e7929" translate="yes" xml:space="preserve">
          <source>connectionObject</source>
          <target state="translated">connectionObject</target>
        </trans-unit>
        <trans-unit id="26188050a295ca85745caf9bcf1be2b1b009d853" translate="yes" xml:space="preserve">
          <source>contentString</source>
          <target state="translated">contentString</target>
        </trans-unit>
        <trans-unit id="dea9a7c5509fa8416711d8e51eeee8c363546832" translate="yes" xml:space="preserve">
          <source>currentTargetDOM Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4eb3b4c695dc29a4a3bb40c5dde8b7a87ad2bb" translate="yes" xml:space="preserve">
          <source>dataObject or &lt;code&gt;null&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b23868e4456acbebf96fd9f9636f5ac81135c3" translate="yes" xml:space="preserve">
          <source>depend on &lt;code&gt;isobuild:minifier-plugin@1.0.0&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe2fd87bb819cba67dc48ddae6833aed2f9395fb" translate="yes" xml:space="preserve">
          <source>depend on the &lt;code&gt;isobuild:compiler-plugin@1.0.0&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210638acae66da57ddf80e15b2aa2ed5a2f6e4a0" translate="yes" xml:space="preserve">
          <source>depend on the &lt;code&gt;isobuild:linter-plugin@1.0.0&lt;/code&gt; package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84fc50220ede69f2f7d823fd283052aef56d4ad2" translate="yes" xml:space="preserve">
          <source>dynamic-import</source>
          <target state="translated">dynamic-import</target>
        </trans-unit>
        <trans-unit id="ffdd886259c31d8aa8f5e64f7987626a20ee013a" translate="yes" xml:space="preserve">
          <source>ecmascript</source>
          <target state="translated">ecmascript</target>
        </trans-unit>
        <trans-unit id="b47a43585289c6f31ef3e4081f4af2b50781a391" translate="yes" xml:space="preserve">
          <source>errorException</source>
          <target state="translated">errorException</target>
        </trans-unit>
        <trans-unit id="8a049923432d3522e804c213f2697a5cd3849ee8" translate="yes" xml:space="preserve">
          <source>es5-shim</source>
          <target state="translated">es5-shim</target>
        </trans-unit>
        <trans-unit id="0db613a2ac6478cf73360eeacae4bc69b9f8dbde" translate="yes" xml:space="preserve">
          <source>function to be called after a rule is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed357dc0ea4edcec2bbf0109e3be571b2141b9e6" translate="yes" xml:space="preserve">
          <source>headersObject</source>
          <target state="translated">headersObject</target>
        </trans-unit>
        <trans-unit id="1c3f7bc2a7736cca7c328899ec167bdea781aae6" translate="yes" xml:space="preserve">
          <source>httpHeadersObject</source>
          <target state="translated">httpHeadersObject</target>
        </trans-unit>
        <trans-unit id="1f24c14a2571bc0a5f8dd92d9d8524a52a9312ea" translate="yes" xml:space="preserve">
          <source>iCalendar event attachment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6413e837d316aafcf260786cd21a849f88ae3069" translate="yes" xml:space="preserve">
          <source>iOS</source>
          <target state="translated">iOS</target>
        </trans-unit>
        <trans-unit id="b22e494620da9c73804fad039c471367072572c3" translate="yes" xml:space="preserve">
          <source>iOS App Store</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24748607671f9e76bea4879f63bd8d68a0f3025" translate="yes" xml:space="preserve">
          <source>idString</source>
          <target state="translated">idString</target>
        </trans-unit>
        <trans-unit id="a2337e8ec6c42d96d125e45bd2a8fdf8c3233d4b" translate="yes" xml:space="preserve">
          <source>insecure</source>
          <target state="translated">insecure</target>
        </trans-unit>
        <trans-unit id="cd680c9a868f19e429854f411d600f738684db22" translate="yes" xml:space="preserve">
          <source>insert(userId, doc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ab6ac7001b131bc4dc74bd619c612205dff372" translate="yes" xml:space="preserve">
          <source>is equivalent to:</source>
          <target state="translated">эквивалентно:</target>
        </trans-unit>
        <trans-unit id="0b016c46ec354cbc4bea797d892262b87c3bd58a" translate="yes" xml:space="preserve">
          <source>isDefaultPrevented()</source>
          <target state="translated">isDefaultPrevented()</target>
        </trans-unit>
        <trans-unit id="55d512020baa96f81e58a174450e28a1a88c39e2" translate="yes" xml:space="preserve">
          <source>isImmediatePropagationStopped()</source>
          <target state="translated">isImmediatePropagationStopped()</target>
        </trans-unit>
        <trans-unit id="776c48ff6073e31bb1c594594e4d39f44c2d54d3" translate="yes" xml:space="preserve">
          <source>isPropagationStopped()</source>
          <target state="translated">isPropagationStopped()</target>
        </trans-unit>
        <trans-unit id="71b71b51e74f77e588b8f6d4fbf399c995cb4b63" translate="yes" xml:space="preserve">
          <source>johanbrook:publication-collector</source>
          <target state="translated">johanbrook:publication-collector</target>
        </trans-unit>
        <trans-unit id="6f2ab963b5a51d155d69ac091e52e506d1055057" translate="yes" xml:space="preserve">
          <source>jquery</source>
          <target state="translated">jquery</target>
        </trans-unit>
        <trans-unit id="ff4a70604b3c4420201a59080331d35228c9f28b" translate="yes" xml:space="preserve">
          <source>jshimko/meteor-launchpad</source>
          <target state="translated">jshimko/meteor-launchpad</target>
        </trans-unit>
        <trans-unit id="c05f6475fd52854d25d68aea3340ac1e5b28e7b5" translate="yes" xml:space="preserve">
          <source>juliancwirko:postcss</source>
          <target state="translated">juliancwirko:postcss</target>
        </trans-unit>
        <trans-unit id="52a1d17ad00685f00f37b61a98744d74988466d3" translate="yes" xml:space="preserve">
          <source>kadira:blaze-layout</source>
          <target state="translated">kadira:blaze-layout</target>
        </trans-unit>
        <trans-unit id="11722dc77961f3026ccf64947faea40c3661d1d7" translate="yes" xml:space="preserve">
          <source>kadira:flow-router</source>
          <target state="translated">kadira:flow-router</target>
        </trans-unit>
        <trans-unit id="0b439cf4e10f87567e60f4b7818ecd57383dc7f0" translate="yes" xml:space="preserve">
          <source>less</source>
          <target state="translated">less</target>
        </trans-unit>
        <trans-unit id="446e52e51c36d579c8101ac4fae2f00bc14a938b" translate="yes" xml:space="preserve">
          <source>mLab</source>
          <target state="translated">mLab</target>
        </trans-unit>
        <trans-unit id="90320b91e55bc2ec44b699d76f6fd9743cac0c81" translate="yes" xml:space="preserve">
          <source>markdown</source>
          <target state="translated">markdown</target>
        </trans-unit>
        <trans-unit id="3baddc005f502139dff2bb2841892b709ef377ee" translate="yes" xml:space="preserve">
          <source>matches pattern?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18eded645860e9ac14032e82d301d596df6fe772" translate="yes" xml:space="preserve">
          <source>mdg:validated-method</source>
          <target state="translated">mdg:validated-method</target>
        </trans-unit>
        <trans-unit id="cf2a39f47fea662b4bbe164ebde8a7a9d18f00bf" translate="yes" xml:space="preserve">
          <source>meteor add</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4162ceb16092221530080a8796a9597abd67317e" translate="yes" xml:space="preserve">
          <source>meteor add package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667b1f95551a4556971c55866bd196b724db80e2" translate="yes" xml:space="preserve">
          <source>meteor add-platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db20c6879752cae48129691f8bb5d754d9af4d0b" translate="yes" xml:space="preserve">
          <source>meteor add-platform platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cc825b03053bf2e2541259d881b7535d680a6a" translate="yes" xml:space="preserve">
          <source>meteor admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bdc95ebc8ec710c34572e64de8e48c7115e110" translate="yes" xml:space="preserve">
          <source>meteor build</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88afe7bf54e1cc1e3392d0b524293af479845320" translate="yes" xml:space="preserve">
          <source>meteor create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39380593196060e2d56e0583d23b8ddc499a2a33" translate="yes" xml:space="preserve">
          <source>meteor create name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="074fdda244acb9ff36c78cd433278d12fefe4ca6" translate="yes" xml:space="preserve">
          <source>meteor debug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3d4ed87c6c372f32a2a153dbdf9bae0c41a15c" translate="yes" xml:space="preserve">
          <source>meteor deploy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805f0f097834d349c322be7c837fbffafb694ffe" translate="yes" xml:space="preserve">
          <source>meteor deploy site</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c90d1fb7d0aa2d9a05db75bc173caad257bb10" translate="yes" xml:space="preserve">
          <source>meteor help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e685d60635580bd33b59660777292819324bea43" translate="yes" xml:space="preserve">
          <source>meteor lint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297172c0a5460f8eb736a829eafaa0a1891ab198" translate="yes" xml:space="preserve">
          <source>meteor list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1774672a644529f54d533a11c69195350b91480b" translate="yes" xml:space="preserve">
          <source>meteor list-platforms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d526fc3bad5ff16795f44d8812bbe8ba7408d861" translate="yes" xml:space="preserve">
          <source>meteor login / logout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed6ee46e63af9fa9330a57bb043376c8ec6b821" translate="yes" xml:space="preserve">
          <source>meteor mongo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6f267339c41262a61d7487e19a4273597f0e36" translate="yes" xml:space="preserve">
          <source>meteor node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c40393775ede0deeb4a54f86b908acb5cd5bee" translate="yes" xml:space="preserve">
          <source>meteor npm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1772d10b7c1d6ec0a0ae106c46e9ebd19b9d0b" translate="yes" xml:space="preserve">
          <source>meteor publish</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be0194d8f1f6619658812507529c3048aa83871b" translate="yes" xml:space="preserve">
          <source>meteor publish-for-arch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea91d3da1f213360f4bcf4a3abb1455e0966756" translate="yes" xml:space="preserve">
          <source>meteor publish-release</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa10d4cbfad6842250a5d0ca24190dc7a87f4436" translate="yes" xml:space="preserve">
          <source>meteor remove</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed6b15a8130c87b930be7f1cbe21492eea47458" translate="yes" xml:space="preserve">
          <source>meteor remove package</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a86b771d74e63ef189705cadf84b9c4f6d87b01" translate="yes" xml:space="preserve">
          <source>meteor remove-platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c4f349e355df0bf112878834961365329babf4" translate="yes" xml:space="preserve">
          <source>meteor remove-platform platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199b661e006783c7029b28b68420cf1871ece594" translate="yes" xml:space="preserve">
          <source>meteor reset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702a411f029221565cd8584482209027057fad6c" translate="yes" xml:space="preserve">
          <source>meteor run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455a8a0ef13ae2d720a99991dad08a7810a1e000" translate="yes" xml:space="preserve">
          <source>meteor search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506b01654468ce52df65961d51ff2f24f6ba9659" translate="yes" xml:space="preserve">
          <source>meteor shell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e55ac06f7765a190d6c40f5d4cde28cd606c375" translate="yes" xml:space="preserve">
          <source>meteor show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1863c8dd851a8c8877f06fc26a571db8bee3edcf" translate="yes" xml:space="preserve">
          <source>meteor test-packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a78db04edd85aa1bcc0469eef35cd2b8609ae91" translate="yes" xml:space="preserve">
          <source>meteor update</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1990eaae0d3c3a2d5c4549c35edb6c2909d95b3b" translate="yes" xml:space="preserve">
          <source>meteor-base</source>
          <target state="translated">meteor-base</target>
        </trans-unit>
        <trans-unit id="062f313045cb95708db4ed0985a62b0b823c8a4d" translate="yes" xml:space="preserve">
          <source>meteorhacks/meteord</source>
          <target state="translated">meteorhacks/meteord</target>
        </trans-unit>
        <trans-unit id="941e89275636ba30ac463825cb61078cfa9ae272" translate="yes" xml:space="preserve">
          <source>methodArgumentsArray</source>
          <target state="translated">methodArgumentsArray</target>
        </trans-unit>
        <trans-unit id="709ac1a21e00f882c6be74b80fc087c5a61d3908" translate="yes" xml:space="preserve">
          <source>methodNameString</source>
          <target state="translated">methodNameString</target>
        </trans-unit>
        <trans-unit id="73314acfcf0e407857b86ab83676a26ead9fa7f2" translate="yes" xml:space="preserve">
          <source>mobile-experience</source>
          <target state="translated">mobile-experience</target>
        </trans-unit>
        <trans-unit id="e83284a649504ba68fd077c3fd6ad4e7410a34eb" translate="yes" xml:space="preserve">
          <source>module is fetched from the server at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b5df3a35529734623a1486e386f71fa806e1dd" translate="yes" xml:space="preserve">
          <source>module would be bundled into the initial JavaScript bundle, a dynamically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4580485d482a9037af94f68af98adf23819cbdf4" translate="yes" xml:space="preserve">
          <source>modules</source>
          <target state="translated">modules</target>
        </trans-unit>
        <trans-unit id="d8101c974cfd4cab63dd00ac0a5b89f6376ebb83" translate="yes" xml:space="preserve">
          <source>mongo</source>
          <target state="translated">mongo</target>
        </trans-unit>
        <trans-unit id="bef95319d159a10c9b709d5c1aed04e31dd0a96f" translate="yes" xml:space="preserve">
          <source>movedBefore(id, before)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca206eae60ca726013e31fbfc6ca73a0738572a3" translate="yes" xml:space="preserve">
          <source>movedTo(document, fromIndex, toIndex, before)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="translated">name</target>
        </trans-unit>
        <trans-unit id="fd1286353570c5703799ba76999323b7c7447b06" translate="yes" xml:space="preserve">
          <source>no</source>
          <target state="translated">no</target>
        </trans-unit>
        <trans-unit id="910f462fe19fdf93943d8fd34bcbfc0954de811f" translate="yes" xml:space="preserve">
          <source>npm Shrinkwrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5035753810f86ca8932b0ce5bcd5a271b58add68" translate="yes" xml:space="preserve">
          <source>npm dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9ac73b42b059e722990755c3574ae5935d3739" translate="yes" xml:space="preserve">
          <source>npm is a repository of general JavaScript packages. These packages were originally intended solely for the Node.js server-side environment, but as the JavaScript ecosystem matured, solutions arose to enable the use of npm packages in other environments such as the browser. Today, npm is used for all types of JavaScript packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5bd46cde7c08be44eff431ccef262f3ffc18be" translate="yes" xml:space="preserve">
          <source>npm on the client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1226cc9ee2ebf50412e803250c7d8dca0de70049" translate="yes" xml:space="preserve">
          <source>npm packages are configured in a &lt;code&gt;package.json&lt;/code&gt; file at the root of your project. If you create a new Meteor project, you will have such a file created for you. If not you can run &lt;code&gt;meteor npm init&lt;/code&gt; to create one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4129bf75818a50bb7965907d71d47d194b5244a9" translate="yes" xml:space="preserve">
          <source>number of requests allowed per time interval. Default = 10.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cad9087d59df1fcb6d8b1e44f00fe9edfe17d3" translate="yes" xml:space="preserve">
          <source>oauth-encryption</source>
          <target state="translated">oauth-encryption</target>
        </trans-unit>
        <trans-unit id="bdd377f97f5899b549b58be4c82ee7779d909f2b" translate="yes" xml:space="preserve">
          <source>onCloseFunction</source>
          <target state="translated">onCloseFunction</target>
        </trans-unit>
        <trans-unit id="e71003c6b7dd4093ce139ac0c51a6ba38d54a439" translate="yes" xml:space="preserve">
          <source>outputs</source>
          <target state="translated">outputs</target>
        </trans-unit>
        <trans-unit id="582681c2eae02b3f3d399c0c26d321560f6c567a" translate="yes" xml:space="preserve">
          <source>package</source>
          <target state="translated">package</target>
        </trans-unit>
        <trans-unit id="5a9f1ec8210ba10422a7ced2e302a9a8202bc69e" translate="yes" xml:space="preserve">
          <source>package.js</source>
          <target state="translated">package.js</target>
        </trans-unit>
        <trans-unit id="fd7b034e09b752c24942cd9b0b20c29db2dc3e90" translate="yes" xml:space="preserve">
          <source>params</source>
          <target state="translated">params</target>
        </trans-unit>
        <trans-unit id="3c72abbe626f27d174d80fc434b851cce7bde6d3" translate="yes" xml:space="preserve">
          <source>platform</source>
          <target state="translated">platform</target>
        </trans-unit>
        <trans-unit id="c5902f602739a721c03b66d736b59e404808626e" translate="yes" xml:space="preserve">
          <source>practicalmeteor:mocha</source>
          <target state="translated">practicalmeteor:mocha</target>
        </trans-unit>
        <trans-unit id="b8caa37d2c3b307b03dcd597548444681aed22fc" translate="yes" xml:space="preserve">
          <source>preventDefault()</source>
          <target state="translated">preventDefault()</target>
        </trans-unit>
        <trans-unit id="bfd29548d005c543f55b2f33e265bff1d80542a3" translate="yes" xml:space="preserve">
          <source>publishing objects of your type if you pass them to publish handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3f674d191956615d3649b2c58b5fb5450d7e3a" translate="yes" xml:space="preserve">
          <source>queryParams</source>
          <target state="translated">queryParams</target>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="d593f709a8526aea211bdac9207b7d32c45271c1" translate="yes" xml:space="preserve">
          <source>reactive-var</source>
          <target state="translated">reactive-var</target>
        </trans-unit>
        <trans-unit id="b295ba3a088a2749141ef4d930011cb33bc650ec" translate="yes" xml:space="preserve">
          <source>ready()</source>
          <target state="translated">ready()</target>
        </trans-unit>
        <trans-unit id="adaa8e57042fde322ad9e847878e803a7d8fd347" translate="yes" xml:space="preserve">
          <source>reasonString or undefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d73773099fa8639ebc85ab6ccb6ec6a80d2ba56" translate="yes" xml:space="preserve">
          <source>register a build plugin: &lt;code&gt;Package.registerBuildPlugin({ name, sources, ... });&lt;/code&gt; (see docs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5686cab9d0ba10a4e636be747aba6318c4bf56b8" translate="yes" xml:space="preserve">
          <source>remove(userId, doc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b5c64f6710ca64b88178a5264378b28929d282" translate="yes" xml:space="preserve">
          <source>removed(id)</source>
          <target state="translated">removed(id)</target>
        </trans-unit>
        <trans-unit id="01cb54c380b4b86fccbd3d6fc5be0c440d5d8b29" translate="yes" xml:space="preserve">
          <source>removed(oldDocument)or</source>
          <target state="translated">removed(oldDocument)or</target>
        </trans-unit>
        <trans-unit id="6fde0d4145af6f130233103a906937dcc27f2aae" translate="yes" xml:space="preserve">
          <source>removedAt(oldDocument, atIndex)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb884f579685f726927154a469130919b8d4a214" translate="yes" xml:space="preserve">
          <source>retryCountNumber</source>
          <target state="translated">retryCountNumber</target>
        </trans-unit>
        <trans-unit id="88d4fec792cb8f94a51f38bdf413822b04ed974c" translate="yes" xml:space="preserve">
          <source>retryTimeNumber or undefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0253b19e390f88e6eb6c01226ad518dac0e119ec" translate="yes" xml:space="preserve">
          <source>server-render</source>
          <target state="translated">server-render</target>
        </trans-unit>
        <trans-unit id="246f313d0f99102356e00ed9e499faddf0437e50" translate="yes" xml:space="preserve">
          <source>shell-server</source>
          <target state="translated">shell-server</target>
        </trans-unit>
        <trans-unit id="c099a42a5555825cdb50df0c04932bcd29613457" translate="yes" xml:space="preserve">
          <source>site</source>
          <target state="translated">site</target>
        </trans-unit>
        <trans-unit id="3295ce705f7d58f6c875c2e5d9287d22d24c2f3d" translate="yes" xml:space="preserve">
          <source>spacebars</source>
          <target state="translated">spacebars</target>
        </trans-unit>
        <trans-unit id="f7b760b065b23efe842f84774f27e1606c186508" translate="yes" xml:space="preserve">
          <source>standard-minifier-css</source>
          <target state="translated">standard-minifier-css</target>
        </trans-unit>
        <trans-unit id="c5c935e3078e4856147e3536a1174a89366fd0fe" translate="yes" xml:space="preserve">
          <source>standard-minifier-js</source>
          <target state="translated">standard-minifier-js</target>
        </trans-unit>
        <trans-unit id="b22a2840a91bacb1f6e01d3fc8208988072fe3eb" translate="yes" xml:space="preserve">
          <source>static-html</source>
          <target state="translated">static-html</target>
        </trans-unit>
        <trans-unit id="aa83989c850adcae8ef925148d978bb2e7739501" translate="yes" xml:space="preserve">
          <source>statusCodeNumber</source>
          <target state="translated">statusCodeNumber</target>
        </trans-unit>
        <trans-unit id="e425b3085024e944b20e4f80f32d2184fc3f6376" translate="yes" xml:space="preserve">
          <source>statusString</source>
          <target state="translated">statusString</target>
        </trans-unit>
        <trans-unit id="2391ebebb2e141a6296591ac99a4157e9c94c126" translate="yes" xml:space="preserve">
          <source>stop()</source>
          <target state="translated">stop()</target>
        </trans-unit>
        <trans-unit id="7ef27ab18c03510d2f32b8160dbcd4476dd32b5c" translate="yes" xml:space="preserve">
          <source>stopImmediatePropagation()</source>
          <target state="translated">stopImmediatePropagation()</target>
        </trans-unit>
        <trans-unit id="b15f8f63d4cd5bd1058824e14f73bf9b9ea4affc" translate="yes" xml:space="preserve">
          <source>stopPropagation()</source>
          <target state="translated">stopPropagation()</target>
        </trans-unit>
        <trans-unit id="ad1d082e45e9c9cfeebb7a19362108f51012fdf3" translate="yes" xml:space="preserve">
          <source>storing your type client-side in Minimongo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754c12b525469a4a0de566c4dcc3572f6937c1d3" translate="yes" xml:space="preserve">
          <source>subscriptionId</source>
          <target state="translated">subscriptionId</target>
        </trans-unit>
        <trans-unit id="63dc4e9af93d170de794a4d1381cd0176730542d" translate="yes" xml:space="preserve">
          <source>targetDOM Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ccfc6979340891e7fa546f8fe76cbb8070f453" translate="yes" xml:space="preserve">
          <source>then you&amp;rsquo;ll need to import &lt;code&gt;Todos&lt;/code&gt; both in that file and in the test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998ce3c46a62e42e8da88bfa0578dd35e0261470" translate="yes" xml:space="preserve">
          <source>this.added()</source>
          <target state="translated">this.added()</target>
        </trans-unit>
        <trans-unit id="dedb150fbcd5341d63bb5c5fe4c8af9e44bddb6b" translate="yes" xml:space="preserve">
          <source>this.changed()</source>
          <target state="translated">this.changed()</target>
        </trans-unit>
        <trans-unit id="dcaee1dbdb8dee3d73923fa3979be501265a1633" translate="yes" xml:space="preserve">
          <source>this.connection</source>
          <target state="translated">this.connection</target>
        </trans-unit>
        <trans-unit id="648515391fe232cdbe01bfaa097913307421f900" translate="yes" xml:space="preserve">
          <source>this.error()</source>
          <target state="translated">this.error()</target>
        </trans-unit>
        <trans-unit id="56b4a9013193acb055264f70bdc3216bb7025e94" translate="yes" xml:space="preserve">
          <source>this.isSimulation</source>
          <target state="translated">this.isSimulation</target>
        </trans-unit>
        <trans-unit id="454626c560d7c9c3f8a51b43bfff6d84a5acc256" translate="yes" xml:space="preserve">
          <source>this.onStop()</source>
          <target state="translated">this.onStop()</target>
        </trans-unit>
        <trans-unit id="6737c79d410b920b0054902750ef22374dbdf7c7" translate="yes" xml:space="preserve">
          <source>this.ready()</source>
          <target state="translated">this.ready()</target>
        </trans-unit>
        <trans-unit id="89afe52b86c3889f25fa2278cb337d0a1658f2ee" translate="yes" xml:space="preserve">
          <source>this.removed()</source>
          <target state="translated">this.removed()</target>
        </trans-unit>
        <trans-unit id="820a06fcb7f5b40a96f42159f3a900998789f728" translate="yes" xml:space="preserve">
          <source>this.setUserId()</source>
          <target state="translated">this.setUserId()</target>
        </trans-unit>
        <trans-unit id="10e5d9c1da767dac16046d9bb5e88cb510f2a344" translate="yes" xml:space="preserve">
          <source>this.stop()</source>
          <target state="translated">this.stop()</target>
        </trans-unit>
        <trans-unit id="b386dda33725f71caed877eab0952302e2808769" translate="yes" xml:space="preserve">
          <source>this.unblock()</source>
          <target state="translated">this.unblock()</target>
        </trans-unit>
        <trans-unit id="22391baea91712e653f15c774a97b60545067b3a" translate="yes" xml:space="preserve">
          <source>this.userId</source>
          <target state="translated">this.userId</target>
        </trans-unit>
        <trans-unit id="26baf33fc32935132ec7550c1383167674b1712a" translate="yes" xml:space="preserve">
          <source>though keep in mind that since the exclusion is by prefix (this is a limitation of the application cache manifest), excluding &lt;code&gt;/largedata.json&lt;/code&gt; will also exclude such URLs as &lt;code&gt;/largedata.json.orig&lt;/code&gt; and &lt;code&gt;/largedata.json/file1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec93f2e9b718802cb48e29d13c62409a296b2b6b" translate="yes" xml:space="preserve">
          <source>time interval in milliseconds after which rule's counters are reset. Default = 1000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6ae142dcaf7a80bda8e0fe217f1156a4842ca8" translate="yes" xml:space="preserve">
          <source>tracker</source>
          <target state="translated">tracker</target>
        </trans-unit>
        <trans-unit id="7724755d91bdf156391d60c8e541cc016069f025" translate="yes" xml:space="preserve">
          <source>typeString</source>
          <target state="translated">typeString</target>
        </trans-unit>
        <trans-unit id="64bc6893bc3cd89e154861739424a03acc7fa393" translate="yes" xml:space="preserve">
          <source>underscore</source>
          <target state="translated">underscore</target>
        </trans-unit>
        <trans-unit id="6941455180eddfa012acff6599db3cc19414485f" translate="yes" xml:space="preserve">
          <source>update(userId, doc, fieldNames, modifier)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c57162a6cef7912ab8ec25c6f868e465f2ac932" translate="yes" xml:space="preserve">
          <source>userId in DDP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa043bb813fcc7f432930643740540dbb33faf" translate="yes" xml:space="preserve">
          <source>userObject</source>
          <target state="translated">userObject</target>
        </trans-unit>
        <trans-unit id="a5d1b3feae16382df6e19f5a62b83130a10db8b4" translate="yes" xml:space="preserve">
          <source>v.25.&lt;strong&gt;3.0&lt;/strong&gt;&lt;strong&gt;will not work&lt;/strong&gt; due to &lt;a href=&quot;https://developer.android.com/studio/releases/sdk-tools.html&quot;&gt;extensive changes&lt;/a&gt;. See &lt;a href=&quot;https://github.com/meteor/meteor/issues/8464&quot;&gt;issue #8464&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2278cd7906e178c08854dde22a1222c0870d337" translate="yes" xml:space="preserve">
          <source>webapp</source>
          <target state="translated">webapp</target>
        </trans-unit>
        <trans-unit id="b4d485bdd0e2fc3d3eb72c008213efa5bfb9b905" translate="yes" xml:space="preserve">
          <source>whichNumber</source>
          <target state="translated">whichNumber</target>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="translated">yes</target>
        </trans-unit>
        <trans-unit id="1abfabe581e56f5a89f11de2b5983b661f57771e" translate="yes" xml:space="preserve">
          <source>your compatibility version would not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f879ca3ed1a06d3391c60c86cbd53b0b71323d" translate="yes" xml:space="preserve">
          <source>{ _id: &amp;ldquo;1&amp;rdquo;}</source>
          <target state="translated">{ _id: &amp;ldquo;1&amp;rdquo;}</target>
        </trans-unit>
        <trans-unit id="23755fe1288af72e293d0ea9430da108a7bd4a9a" translate="yes" xml:space="preserve">
          <source>{ _id: &amp;ldquo;eMtGij5AFESbTKfkT&amp;rdquo;}</source>
          <target state="translated">{ _id: &amp;ldquo;eMtGij5AFESbTKfkT&amp;rdquo;}</target>
        </trans-unit>
        <trans-unit id="deecf398b57231a458c154b9c72c8cd28568a836" translate="yes" xml:space="preserve">
          <source>{ todoSort: &amp;ldquo;top&amp;rdquo; }</source>
          <target state="translated">{ todoSort: &amp;ldquo;top&amp;rdquo; }</target>
        </trans-unit>
        <trans-unit id="4448e1dbcb7f6e8f55f2f5b257a1169d8c4db209" translate="yes" xml:space="preserve">
          <source>{ }</source>
          <target state="translated">{ }</target>
        </trans-unit>
        <trans-unit id="ade57cfa4384f99c7aa2665116aa623962e92578" translate="yes" xml:space="preserve">
          <source>{{ currentUser }}</source>
          <target state="translated">{{ currentUser }}</target>
        </trans-unit>
        <trans-unit id="8fdf813e9b8965614d6ba010b7f33c56eea39d31" translate="yes" xml:space="preserve">
          <source>{{ loggingIn }}</source>
          <target state="translated">{{ loggingIn }}</target>
        </trans-unit>
        <trans-unit id="091a9c159802ba71c70f9fc01b633d56d0f8951a" translate="yes" xml:space="preserve">
          <source>{{&amp;gt; Template.dynamic }}</source>
          <target state="translated">{{&amp;gt; Template.dynamic }}</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
