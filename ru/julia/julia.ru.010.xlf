<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ru" datatype="htmlbody" original="julia">
    <body>
      <group id="julia">
        <trans-unit id="0ed7ce655e9371b4966ba436a29504dd5c5ed31d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973081af76c77428f7d9f1f143c09723fd87485b" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdc362570f2fa1774e3efdb6462e95e4f17952c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Kappa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145ecddacc43d3a199daca3e5028e9c4703816a6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b3b0173c741c97fa67f4551b2ac78465eca05a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Lamda</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1cb9293bcdd5a13b3555adbd4299f93cd67b0fa" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59b520abd7c4b9e91a38dd89a78bafe6b40c3b5" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Mu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a2af4297db5ead3bff4f4d327909d8d8264d27" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c637623a42142043bbe09e02c834e741f7c155ef" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Nu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402c70c3980c545e20237d88b0072d66aba4da62" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9deed1eec292b1f25447ecca5aa4584b9427f0e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Omega</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a501d62d5c34dcbd0ec61a2038feaf9a3e7773" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Omicron</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972ff30c1f5d665810d770054445bf6e53dcda23" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548a6a44d8fd40fdebe65cd6b60e84f196b46413" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Phi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84c3c05060f8f87b3f459a824429925bc9f71ce" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Pi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242969c40781fa4cdc3076fb451ded56af3618a1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Psi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7ef0357efbde9cca6b9c7683db0f6c0defde9a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3aaf5b1b443de6a228fc7db89bd11cc9027187" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0adb87507aff7bfa870357b58bd10bb7d7925ad8" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Rho</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695d3877d3f3d5b60ec53a70bb167db01892f2f0" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887eef81e7d7eaa8bfc888997b57b6a31d571462" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Sigma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3f65745f529aee175013dce11500428fa0c9c8" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4d3e8f9f91343d74ad3ed9db24230e5c0ae712" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Tau</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1d6912fd48e37d711b407fec6c88137a7582d4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Theta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3bc303ae0be8ff9ef999d389fa23c90b52d9b0" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Theta Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ee2f6e2d3678203ed9ac706c6cb632b225a057" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547f74356373d6d787ea79dede67c4f16e2e38d3" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Upsilon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07e294f06a4311d1f680ed5b3b3ba98c075d480" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488c245fb1a54ddd243bf8c50319e90845e2e473" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae0ed89f6f8b3d4667863bfeca92842e1677697" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a045303ae282ac1aafeee8459b2e337da2f63d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Xi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f909c2c06d48a9594965493e32267186fbc62f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7737a0bbd7df8de9811042715a92d7ca7d2bbfc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085785cc92a6cbe15147f08a9ed80fe277d1b147" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Capital Zeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee08507f91dd4c2c08c8ea7cb1e92d92f9fcfc80" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Epsilon Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2f1641b55c8878772afaaf49b5f99c055f8a74" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Kappa Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48923511f746d4fd68f55f64a1cd1d74626cc7a5" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Nabla</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d236de00d466e10b1b68b318e57ba7fd6d45570c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Partial Differential</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0550ae508ffd16cda10aa110b34bd387a49b33" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Phi Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7759dfd2d984187c5212189a9288e384ad40ba9a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Pi Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c560caf9f11978302e211a7daa3fdb363836dd9e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Rho Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7cdef003f416256c331563ecb670876f51814c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8618cfc6ed3ce2c677c99d8fd46bf05b79aedc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Alpha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d444c0b7384bfe4d2dd67790c84c6ce21b976d4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389023881c97c1c917d0f1860a2a846bb4955b9c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Beta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a460acc23ec02648d3fcb9c762d1b32909898224" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78d45424bf1172f41c4dd8882675fb62d066669" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Chi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d931178a072e668b5bb33f53c9349f28ff25bb12" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44d55bdcdde559c89104d811fda5179b2dee430" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Delta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e9a50154b1ca71c89127e23f535a7fa784cb59" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc419c81101f90e52b760fad0106738d988ece1f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Epsilon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3e1fa5f23b530fe77f0363f2e002b0e5336658" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Eta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5a59db1282d78b625e0a7d15dee2cc04a48998" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5210720ea512138f2e10154507943fa5b9050cd0" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Final Sigma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa271966335298ead16f60195a58001ceeddea44" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006b84d2b21dfef9b8a687d0a56273e94877d290" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Gamma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd3cd8f5b44320f6294f185c692a45ca490be02" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862285fe1affd78eaf374257728afeafbc17030d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80124b12c91222e2027df02c2d14854005aa0999" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Iota</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7e59efaac38c64aee19b83a261b944b1b6aa32" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f705908b0e3a1f29011e9ce95c6a2f3de7fe7043" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d12024ebb25075198074d159e7e59ebd26a5e1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Kappa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccb8340a6f44bb496da13ecf729795e3252f3d4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b51d988804d2148324d526e2c99e78768be218" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Lamda</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03bac3c6363ac488e5b3d07114f4aee4b6a5c4c0" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68917c6978aec634429c7a0d45fe10a546e3f64f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Mu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6305e56edff3818f5b455807e02fc3e51d3fea21" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a657f81ed0be9e9ee1cbc363477ca8867f43f65" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Nu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda2bbc524be7dd4acabf4565ccfd6591942c40e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6878b86b6c55a98089f1b7b4f7d9387abd8861c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Omega</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e433f50ac41639b6e916e4676a9f52b12e1ef6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Omicron</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54bebf6c746329d04e82420104b560ef8c082b5a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07960305aa2c03fce919b16f9b12c29cdc46c136" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Phi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32eb394e99c94a5e178482536c6e3efbbab94a6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Pi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505f1923f0091443020c2e67aafb2795d1e9e79a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Psi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550961586d9b9dc0767c4a3347c8fd8f837bbf93" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146c20814659140c3ea4faf1ceb8b9c174cf8c82" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7c8826381fb82c7892c8b1805bcda14bfaf614" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Rho</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ebbd629739489a1886c234ac12b1c42ecc0649" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f791f79e419f7e99780fc5cf5ac4d91e91722d4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Sigma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c85f9665abb61f2f615a53365fe02059c0574c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8c2533b1575e1e699ae6f3b0a12aa95aeab799" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Tau</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320e7c92ca599cb0236e7b4efc21ae5ca1b78297" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Theta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8e86810f84d4a7439a16605fa3b4986806ca4c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b464af0c6f742436321d6018c20b369470d574fb" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Upsilon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3db8c806bd4749f4dd23e809bdd40ee4ad60cfb" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c502be32673ed579ef1894b4e7a59f4e783feb3b" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584b2a9e95ab035d9b8d3f7e58685b1a15282901" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87dc79c717e29eeedb174467bab130a1fee538e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Xi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02d525cf8844e2ca12d6e090fe98ab252c9f8ac" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ef631480219f535bd9965945921a5820735827" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df2561f08becd88b19488482da87fe7b028d23d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Small Zeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e3f4a560d23826e087722b7b599069af74a887" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Italic Theta Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a77f2d6f60eb0728aa2912f1873cb2f15618d7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Kappa Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="526f6d9a15e6df1c62a51d6ba1173f4b6e23a26f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Nabla</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea8c3c0fcaf6af73477f9888107a24f7362e3b8" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Partial Differential</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55499193a79affaaf04417bda2af9735004615f1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Phi Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64446189a8d4e94b13c08dbc7683f2d1cc905cf7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Pi Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a755d37295c4395cf6d66514f5f1867202a68a72" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Rho Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd1e018fbaa9235267b37e67bcca7b2d35a391d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850662e8e03b8e1df606fad9f213f5ebb8513ea7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Alpha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475675b12fcd42c504a2b34744b0972a4c39875d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6132bd893de0390313b14e4277dde11dae37b614" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Beta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3cc81ef910adc272b6298b056ce425579e9c2f1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e512e27ba8712e7a8817806f3f0625174f32c7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Chi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7253cb0b169a0cba7325bda57ef41d7d873bba" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127d7ff6628d3c7d81157393710a1031518eee2d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Delta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b3e3f3c9a880065f77a203e26821e231dd961c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e617079c8d38f6729ca3b5d53e31f2960a9734" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Epsilon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58f0edf28f7fdb81dc3aa7ea82f0355a2792d93" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Eta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c72f340b1fbd85f731afefa528cc304eb62d1de" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="826b2cd7b44f9b021717f9190583fa3b4ec6bff8" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Final Sigma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570ff7601a4e0e0740c9c035178bab1425152368" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd6564ed306250eb1f1a7525cca44fc2a6e4d960" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Gamma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fea3bfffe7b1c1eac6d9e74cba9239739ab5247" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19ffbab4eb090ad9ca0fe0cb7e14714f802807d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65037aba160b01d7d43bc5770592479781173145" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Iota</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77aefa1624ef17475790bf03c54cfd9b107dba7a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd198f89be2974b3bf218484c4a7dd067627e2e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be28efd3d8d5605df27275d6ec8076baa1c67ebc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Kappa</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab42ffd73a7533f0d13b469e186fbd0d4d35604" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3751933c8fe7e86450359ebed79b23ab096bc3" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Lamda</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ead810fef91d76a68659aec7f427d51efe6ff72" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc3a594a74882e4b756f2a4189c0dae9ac997d2" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Mu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827cefa91e66a8b80a9a68388bc75d7a293aad0f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22cb97027cd3a78f2c9a9a0dfb2490c48f70e52" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Nu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4162c7cdec5f6073ae755bb5ff737ea7f0c012" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3350f54962be032349bf9697c14660ad6939d8" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Omega</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2544f9918888cd495962d0347b3a513fe4168a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Omicron</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50499ac027b39d3549af65911c582e66263d804f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc34f4f4f88200594984bd511a2687f5dccdea96" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Phi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ded19fff0789c102d5edf27f191723c927f1e66" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Pi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d63967353ff2ba836d57c4a0e33b995e06d9b6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Psi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c09015308d5f9004ad4b11a554bbeb9902113f1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0108094cda5e71639b8f713b34eca45d5babc2fc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614d48a4d78e3ee75384a06f7678637cbe86a519" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Rho</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d83a435a0823914519ad4f6762750f8b47ee080" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea940a46bc1bc9407d3ce744abcdeaedee74de30" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Sigma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3080b56f95740d92054c2bd05da5ad6d134d2a8e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257167608f83583e579e7fe182329c527af0e6d9" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Tau</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8baccbf2f3236ba9d8e8d4783f652a77b077fb7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Theta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedb9fcba24230f9588f81e8677d978f03aa0387" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33688e4c6d40019577a9702931b3e5718d5ea866" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Upsilon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fa832c624049111a5d652add4178f95c06aa3c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73730e3c34342fae13fd383671acf39b9515d55" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a8c7186fe040bdd2bfcf6022cffbc424cf4b50" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63480b25c958bd7498148798064c4163afda68bb" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Xi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23af429750fbf609676b7469f67506827c03c8b" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f03c00620717058a805b67cacdb7a876c1fd834d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205707a83f45ed0339c62c175d946b134fb2051d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Small Zeta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba983f913de865b36786f6dc599772bac2fd2a2" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Bold Theta Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b905f7b27ca3832b21b79b6782c0905427cccd" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e9c6b02db9462b83f053ae94a4f23b20a70408" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a6c76894a9c546dcc4a2c20f077455e4656b79" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f387613e2b02e7373b13b50ce0c0851a83d8c14" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea6be4890d69e95754493a9b898b96ddbe96363" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c812297c997850988c0fc78e4d40e50b91878e8e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ee52aeee74dcabd596e0bfec685e3374c211a7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc2769f2735048a867dbcd1cefd937167098186" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c60aa83779ce77c727eb8580d2f884d88061a0" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09837883c84e29207a35a6c57c125912f54c4a49" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc8380e78f239129a100ec902af8157a81b1992" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c62645dfab02e171772526616783560a7cd2401" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a04b153dbb2fd96b0ce622a1dd236846e28b47" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f154a65722c196eb358fddb422fd0d64c39f3712" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb83541a9b03e93adab80f8a52d074a1be12bcb" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735de8f8fe68c649804116d6060235191999625d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29453f78bed0ac0167aec213fc953b4c62d1e2a6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c995d2ad78de57f7575a3af3d18747803e4c1687" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c063621a67ac4a769671757cce4a5d84df2027" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224ffdcfcf894add89408ae517c7ef3d12b95041" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c7b56ae20e1bd42a48cf6aa81701fccda860c69" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d343e7cdd6e8bf0911fa13d73dacf4f22dea79" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91306c6e45ac8e9e2acaa1fab80a425a1b33da1b" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebce32b2d0821c45a9a7308830c29b7d37dcdb54" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81dbe4e26a3ebaed62fd22eaa493ab748ec4680" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869c27fb10e3d3dcf153b7c7b1638af395cc7125" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Capital Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ccfc2848d139933a3055d1d8f58fb8e1472fec" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Eight</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d2508a4068c3fdbdafe2af5b2aafcac618bf0d2" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Five</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3822e65c8f0db884820d647392f6dfa130edf9b1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Four</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badc61e0b60a16ada07cdac85324f16cbc727b53" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Nine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d87a7149332b0809b1214d8bcdcf6e29a19663" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit One</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89064d8fb47e8828be124e56792789b305d76a0" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Seven</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e28f68677ad323e0b98219df50f9510d3a871a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Six</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744fd833f6eb766ce62a65a6c97df45a8887d1ed" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Three</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a26ca79a1a69581e8cc61a81a8a3a79c07474f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Two</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fae34a9a325d979b30cecaa17316be1866b376e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Digit Zero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d660d000eb9c072b6e0094a3c9dace62de92506" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb1d80b74c20328966d83f84493c44227aa52fa" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dd38c3c7119eec64e3d83f2618980e9128de2c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc2cb67c45511abe043b944d5d729ba54cb5bcd" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917b9c41912eac3d5303b4766db2887ce628c8a5" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778bce7602ff2ccdc6ec50761e791acb740e0730" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b8893e17388cda1a0a7a39c7a88b3ae6182fda" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bde5679f463c8a8b1b043235f38de648ecfe07" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f8befcaaaac58ae41d69c88ed6752253254e17" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6ad2f00fb3a45176516043a1b8c0fc652e1a7f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="553a6c8da6f75e3bb2ec4122a0ae3eaf2771cfee" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4431f70b6eb81b439344cc8a0d63a4bd03785114" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953c187d78d9c7c73c321255d0f71e989635456e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9521bb0f6d0426eeaa8913eb1ecdaf4654a2add" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fe7eca3981704dfeab71fd77906d954cd3293a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc81f59b7619e6d5ed1c1ef3d4d27fc46d07ef1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb4837364a43a559e6a9ae01e2cbc8579635ff9" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4170f808f4a58e651e1f30ec1b38142b5368ac3" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed1e2f57c2908845f6dae446da116d706104106" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b834dee864f51c89a23bab556bf05fc17b8728" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e7b06b361978376850cc80049273df0d0c888a6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7105c21ff496b2a879408b719fd0ce05c60ae4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d648302dff736caeade12457fe111ebc3ba2254" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738e60d25b20be185ad0950799ab230e188ffdb7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05beb3bd17be0f678f5a1719d237847eee058b4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7955357da8dfd8893b4f5f39485063ede1be84fc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Capital Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a669f3f7096e1ffdb56e99437ebdbf11f88ef6a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b109cd714b1c3c2dc450aa06407161da6a7f77f6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed75177f5c5301440bae8a62bb75961ccb78625d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94f02a8df0dd43a88623ac9f670b7fb9fbca152" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c313981bfe90ef3251ffc3cc688155b7a81a4eb4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e78fbfed5c894b98e25c125e313bc5cf447f2d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffbb30da62564f9f06a970c553cc75516f84d64" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d4569ec69a641f56e15c592b5420acb6756658" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="527de882367bf730b743029d0e5fc34aef66d93a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6413e31c10e5d328d5d85c5e9ca95a49c9e21ecf" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5db0df4c93acba75eed44c7743aac650ae6c34b" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3585a33c469a7e9760e4b538bb3569524349f02f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcffc00a78081012de345221981ed18a237268d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6871fdb2d163e57d612fcabde4992bc15dd003c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c937e27b7635715ec5cdbf76e0efa6b56929bc86" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358d27db8cbac6e138375174968cc6bda89cb8e6" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d649933b039af4cc6ccb198f879e87c5399cc89b" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c401dff1e67d9840b91932bda1ef0136fefd859" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0d0e511fd42f8efa03aa03701e48d27d07ee1c" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665077d5b70b09d0da320a8ffa53c41d3f8524b7" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6be34ab09505856e660411e974fd3a42221242a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ee4fac986e65b9f9b38987e86c7d3086e71c29" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c99e3e0c38259d313acad69a434702e64037ac" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b2f3f86234974194e4e947f671cbd926553fcf" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72addcb8fd9b49dbcb3722d324fca9afd248498" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fde99af41406a4cf856fc8adba34e31522e74a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Italic Small Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c328f6771fa8ddbab73684a774a7092a4b97e4" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01bd01b4a0fcfea0ba202d6062b1e54eeb2dd91" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a865bf2832e62512c96769afb09d8f387d805dc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5e473505a5d5c7b0468b20d83e0fb0a984c9ccc" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd2f6e391e11eb4e9d603594ea1956ef225f063" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6044db6f6f77fb35e8dd548bf74f758c8396e600" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47402646c107a31f8ed4d8387b0b3d5cfaf96b5" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f4b1a5e51ed52919fc443504c4948fbfa6a300" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f43312416d72451957125c8b8a223b8bdab17e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ad9b39197a0315952dbc6af33952d11c63742f" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13035b445ebd649d777f895052d0296d22cb3b25" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07f8f7e568456c7898c9a51fabf220c7644359d" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb94d1d8a58d7274d3dd8781047baff099aa5d9" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd8ec5dc12f206ba4aeda9b993990981407358d8" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b27a0c278909de47f1ee1d25ba4a08ab3413fd" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe9ac3ff58ec88dbffcb57e6865734fff20ab14" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d4448fc451d2375a3f1cff51cf083164a229d55" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f782d20e8c19ef7ea890ed9f09494590f2f271e" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d75e3864e82bd62798c29ddf494890eeb20f8150" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5375a5057566851c55c7b5106b2ea5c8174c20bd" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9191d78c85cd7c4e251a452f6e73569bf5f5777" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed40757c941d8a43afad6867391b120d2ecc00e9" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0555c5968b11f230f8ecd85cf950dafa82a98a" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c18f38cbbd42a240797d31dcafbd56e9e889bfb1" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0262cfe3582fc841b07ceabd801d3ad5563ecb3" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df2eb71500e01948b6ae94956e34c3050a6c2da" translate="yes" xml:space="preserve">
          <source>Mathematical Sans-Serif Small Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e781204cb8aa75c591f4f8c4e417898fc65c5578" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a5b78d3cc66c44dc0f7e55dbe220c0492cd843" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df68ec98e92ee5f88a61b2936d6f1393a59622fa" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eaa653854dec24875818d1274419d0d1579b5ff" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b129c86714dfa5b69f78e54ec29708531e991cc" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cceece1a02a7b18a7b2a25f72e451f18b78a0e9d" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e190fcd0e74e49d79bf183058e429a33e67a14a" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a20c7fdd0045e55dd18385e4723cc7c9e9316662" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9330e7fcb0ae4cc996d6da34414a0459a8ee82aa" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af18cf1b8f17cee876055abf18963e4d7b6f4f6d" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb9f4b44eca35819890344af676b337253a7b02" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d047bb0bdcfa36a10f27a4ba225cb84d7ce8a6" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6827599cd6e355eb8752adafbb8b32fb87dc337a" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c263a0559788ac9d3e77592e2829c6d114cc7d58" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba8e4151a26e2953a89d684d69818b9b3c0db84" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409719dea8db475534ad2211a316bc8456ff4274" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3202429f1ca867375f3227d68c9bf684da8ac22c" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="161d99918ad5b9b0229b3042834c7285d0ecfe64" translate="yes" xml:space="preserve">
          <source>Mathematical Script Capital Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e5c65d846248c4c565a65cfc2e474605647be5" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bfa40bbb4e6f1d8738ec741d9c445536b61501a" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acff05dfba64829fd4b17f980e8d9bf5a7267376" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48850c032f6a3a7d79a5286336903c473c781b4b" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa82d93fd22632aa5f4c510b6aaf7f7ad8f24fe9" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c173a156db5908e1c9cf16d53184b85ad4179d" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d97b76d63cd562f090a430ab9522d2f1d4df9c6" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b7e29c76188f307d6c423da68fa2dc8f11d0e7" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5c1f55e99d3d61b3af1f8de891055be6401a72" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccd7d2676d7ec8f9a260e02c77004b279c349b5" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9529218e212048395f0a5af50f6e560c0b20b6ed" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6947301d6e7abb24efbdb6da1f711dce96aef10" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd12fce07554f3f68f4fa72dc3c9b8a2288e06b" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c682085a9ff93fd9e8c5ac33f6cb7f2ce12cca" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75801a5ec6e75edd468ad75e6f4ef52a8e5c801e" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e70e85a32518e50cff199a739e67c5d033b3df" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11168475256d528b51adff5486ce3944c51fbf7" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502226569b5eb35c99fd0b79be6ecc923e71df8e" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac7a9a62e95370706905a88d8fc04443a48b2ba" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3e2481ffa93292df3a1e3d9be65e95415fb4df" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3179527cd0bf80d9e87fa6adb0b4f18e0ffb60ae" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591a1c0d4440ce0ae720ca4545a1dc72fbe0fa31" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff010d413406b76a23e9dcc5046e4f6aa0d567d8" translate="yes" xml:space="preserve">
          <source>Mathematical Script Small Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e774bacbdb4d919d66d929940fc5bdbe59d534" translate="yes" xml:space="preserve">
          <source>Mathematics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58947ebc8ff43456c10a258659e8fb435561a3ff" translate="yes" xml:space="preserve">
          <source>Matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4970506ff97e891dcbb638ac6c10d9beeb948e" translate="yes" xml:space="preserve">
          <source>Matrix determinant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763455038835785197036c60ba888ed8cd2abc12" translate="yes" xml:space="preserve">
          <source>Matrix division using a polyalgorithm. For input matrices &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, the result &lt;code&gt;X&lt;/code&gt; is such that &lt;code&gt;A*X == B&lt;/code&gt; when &lt;code&gt;A&lt;/code&gt; is square. The solver that is used depends upon the structure of &lt;code&gt;A&lt;/code&gt;. If &lt;code&gt;A&lt;/code&gt; is upper or lower triangular (or diagonal), no factorization of &lt;code&gt;A&lt;/code&gt; is required and the system is solved with either forward or backward substitution. For non-triangular square matrices, an LU factorization is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5da95a5ae0b4da596632b3b7cc1f9110f46b42" translate="yes" xml:space="preserve">
          <source>Matrix exponential, equivalent to $\exp(\log(b)A)$.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363bb2b595e809cc54ad9681e48b4f445597455e" translate="yes" xml:space="preserve">
          <source>Matrix factorizations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57db3d21b0671f1b99640ca19fb50219ae5719b1" translate="yes" xml:space="preserve">
          <source>Matrix inverse. Computes matrix &lt;code&gt;N&lt;/code&gt; such that &lt;code&gt;M * N = I&lt;/code&gt;, where &lt;code&gt;I&lt;/code&gt; is the identity matrix. Computed by solving the left-division &lt;code&gt;N = M \ I&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1606fb6bae143ac56fdb561605c843975256bf" translate="yes" xml:space="preserve">
          <source>Matrix multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6ad85bd5e8146c0b359115e69f993f07f46178" translate="yes" xml:space="preserve">
          <source>Matrix power, equivalent to $\exp(p\log(A))$</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a15627babff19100b77ee14c6a2d191c015168f" translate="yes" xml:space="preserve">
          <source>Matrix trace. Sums the diagonal elements of &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47adefc07b1eaf2521a7bfa42bbff29f75e20cbc" translate="yes" xml:space="preserve">
          <source>Matrix type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab92b63667beffc21eb02656bf328d9fd6e9f0f" translate="yes" xml:space="preserve">
          <source>Matrix type for storing sparse matrices in the &lt;a href=&quot;#man-csc-1&quot;&gt;Compressed Sparse Column&lt;/a&gt; format. The standard way of constructing SparseMatrixCSC is through the &lt;a href=&quot;#SparseArrays.sparse&quot;&gt;&lt;code&gt;sparse&lt;/code&gt;&lt;/a&gt; function. See also &lt;a href=&quot;#SparseArrays.spzeros&quot;&gt;&lt;code&gt;spzeros&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#SparseArrays.spdiagm&quot;&gt;&lt;code&gt;spdiagm&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#SparseArrays.sprand&quot;&gt;&lt;code&gt;sprand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf1d39035482544215e965ec3f4bcf6e4f116f2" translate="yes" xml:space="preserve">
          <source>Matrix()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c2803d69788d4452b8dc4ad969409843d18579" translate="yes" xml:space="preserve">
          <source>Measure performance with &lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt; and pay attention to memory allocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ad84abe6b3edf4c9e138a700204927dc427eeb" translate="yes" xml:space="preserve">
          <source>Measured Angle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548d26034f0ec59e4ba571d389aad1e24d2ff182" translate="yes" xml:space="preserve">
          <source>Measured Angle Opening Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="232225153f97b40ee5518de7eb39dc75d098d4dd" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Down And Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5a47ecf9d4ab9edb2b0388141f56d7f091db42" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Down And Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f55bcc346fe9ea1e99c22cb917cc6c7d8c99c1" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Left And Down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3db8a6b8e85a7c9e47e75c288f9e77c4d508a37" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Left And Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d59cc58d5c45d17b6ec4add32eecf32d2a5aca3e" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Right And Down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb4558ac9229b540c5f26e65f51b285dc62320a" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Right And Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90883044148da3d38ab4434d41e940637ea65bf1" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Up And Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f35072267047ae73e8ae3d369f5f9330d4fa3f74" translate="yes" xml:space="preserve">
          <source>Measured Angle With Open Arm Ending In Arrow Pointing Up And Right</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358d0fed23b749eaac11fb543b5a985d089a2cb3" translate="yes" xml:space="preserve">
          <source>Measured By</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8cc86a5dd97c91227baa73199d6011f203981fb" translate="yes" xml:space="preserve">
          <source>Measured Right Angle With Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed7f954e418ed1a12f72567b0854cca2382488e" translate="yes" xml:space="preserve">
          <source>Meat On Bone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d4ec4657cd52d15d0b2fa075de0da3c8fa5fb3" translate="yes" xml:space="preserve">
          <source>Medium Black Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bc5f0c57c8c58b783aebf3f28eca1630bb79dc" translate="yes" xml:space="preserve">
          <source>Medium Shade</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea37963b21d3852b8e65871e86083062b3635c36" translate="yes" xml:space="preserve">
          <source>Medium Small White Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669a889ac35ac91706ca35863f49a2df1fe69828" translate="yes" xml:space="preserve">
          <source>Medium White Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e65e893ae5535d32cd0105721177c58a22b962" translate="yes" xml:space="preserve">
          <source>Melon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fd79b9555ddf59862d60aa0aa3bb74fb74aae78" translate="yes" xml:space="preserve">
          <source>Memo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c8a2851d1755cf87365b4a7c55e5551cf878c6" translate="yes" xml:space="preserve">
          <source>Memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a13013c630f5f1ec3aaad3aff8839307d7bf31" translate="yes" xml:space="preserve">
          <source>Memory Ownership</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f595228ed09ac531780d97b13ac4686afb7555d" translate="yes" xml:space="preserve">
          <source>Memory allocation analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3702db8927eec53d800914849f97d95c5310a2c2" translate="yes" xml:space="preserve">
          <source>Memory allocation and deallocation of such objects must be handled by calls to the appropriate cleanup routines in the libraries being used, just like in any C program. Do not try to free an object received from a C library with &lt;a href=&quot;../../base/libc/index#Base.Libc.free&quot;&gt;&lt;code&gt;Libc.free&lt;/code&gt;&lt;/a&gt; in Julia, as this may result in the &lt;code&gt;free&lt;/code&gt; function being called via the wrong &lt;code&gt;libc&lt;/code&gt; library and cause Julia to crash. The reverse (passing an object allocated in Julia to be freed by an external library) is equally invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1e92f6ba02c20d5f0755cdf90826342a6825b7" translate="yes" xml:space="preserve">
          <source>Memory allocation minimum alignment for instances of this type. Can be called on any &lt;code&gt;isconcretetype&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475bc2651561a3c3ff5fe7691308be8b459d93e5" translate="yes" xml:space="preserve">
          <source>Memory layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6350b7336b67c776ed6dad88b8f36942529d682b" translate="yes" xml:space="preserve">
          <source>Memory-mapped I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2794ee86f4e0460023fe30433be8584164633273" translate="yes" xml:space="preserve">
          <source>Mens Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606cb109e24d78205b205b9b6b7b2ac8d0838a63" translate="yes" xml:space="preserve">
          <source>Mercury</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5719d7c4f2064eda838f77bfedad9f94b74089" translate="yes" xml:space="preserve">
          <source>Merge changes from the annotated commits (captured as &lt;a href=&quot;#LibGit2.GitAnnotated&quot;&gt;&lt;code&gt;GitAnnotated&lt;/code&gt;&lt;/a&gt; objects) &lt;code&gt;anns&lt;/code&gt; into the HEAD of the repository &lt;code&gt;repo&lt;/code&gt;. If &lt;code&gt;fastforward&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, &lt;em&gt;only&lt;/em&gt; a fastforward merge is allowed. In this case, if conflicts occur, the merge will fail. Otherwise, if &lt;code&gt;fastforward&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the merge may produce a conflict file which the user will need to resolve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3cc5d3f4205143d0a97611bdaec4f401c0400d" translate="yes" xml:space="preserve">
          <source>Merge changes from the annotated commits (captured as &lt;a href=&quot;#LibGit2.GitAnnotated&quot;&gt;&lt;code&gt;GitAnnotated&lt;/code&gt;&lt;/a&gt; objects) &lt;code&gt;anns&lt;/code&gt; into the HEAD of the repository &lt;code&gt;repo&lt;/code&gt;. The keyword arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ce51350f28e713c65619a1185c2251e4fffb1b" translate="yes" xml:space="preserve">
          <source>Merging 3 or more &lt;code&gt;NamedTuple&lt;/code&gt; requires at least Julia 1.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23dc8e2c77e3a6452c8291f99396015eeb089f0" translate="yes" xml:space="preserve">
          <source>Message filtering can be influenced through the &lt;code&gt;JULIA_DEBUG&lt;/code&gt; environment variable, and serves as an easy way to enable debug logging for a file or module. For example, loading julia with &lt;code&gt;JULIA_DEBUG=loading&lt;/code&gt; will activate &lt;code&gt;@debug&lt;/code&gt; log messages in &lt;code&gt;loading.jl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22044cc3e10ac89fed15c158bcf4c9dd9df53872" translate="yes" xml:space="preserve">
          <source>Message formatting can be controlled by setting keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d546a6dea9ff90d517b51c25b35319931ae4e04" translate="yes" xml:space="preserve">
          <source>Meta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222fdf66495fc331b8da7129d7c651c611e92684" translate="yes" xml:space="preserve">
          <source>Meta.@dump</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a319e78e27958b8ef35a197ddde64ea5769730" translate="yes" xml:space="preserve">
          <source>Meta.@lower</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f37afbc9d42ff2c695ddd44a635578eac293a4" translate="yes" xml:space="preserve">
          <source>Meta.ParseError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad24faf50729a9f9fa55e867adf30c04801050e3" translate="yes" xml:space="preserve">
          <source>Meta.lower()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be14fac5e46b300563c5bdc2b385a68630aa88ae" translate="yes" xml:space="preserve">
          <source>Meta.parse()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cab2863ff5f2561f57d8cf91121b0008285f3e" translate="yes" xml:space="preserve">
          <source>Metaprogramming</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce061c8f0bff6c0d69b4ff339bf3343d178939e9" translate="yes" xml:space="preserve">
          <source>Method 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6137e84cd28d78515d93851515bfcb8ef41c78" translate="yes" xml:space="preserve">
          <source>Method 2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221fbe033b132ab714e88f3065acadd17c36ca4b" translate="yes" xml:space="preserve">
          <source>Method Ambiguities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="333406c36ea643634128264fa62782e940988274" translate="yes" xml:space="preserve">
          <source>Method definitions can optionally have type parameters qualifying the signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ed8dfed2943ba3403b40ab7d40b3018af8b965" translate="yes" xml:space="preserve">
          <source>Method design and the avoidance of ambiguities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aed8ffa5a33f9bebcbfeed77cda3dcb44489be3" translate="yes" xml:space="preserve">
          <source>Methods &lt;code&gt;put!&lt;/code&gt;, &lt;code&gt;take!&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;isready&lt;/code&gt; and &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on a &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt; are proxied onto the backing store on the remote process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af99471f8043edf03013b29ba93261c8a6471c77" translate="yes" xml:space="preserve">
          <source>Methods are associated with types, so it is possible to make any arbitrary Julia object &quot;callable&quot; by adding methods to its type. (Such &quot;callable&quot; objects are sometimes called &quot;functors.&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcd7c3f933331c9493185e98f0d0d125e32c93f" translate="yes" xml:space="preserve">
          <source>Methods for complex arrays only. Rank-1 update of the Hermitian matrix &lt;code&gt;A&lt;/code&gt; with vector &lt;code&gt;x&lt;/code&gt; as &lt;code&gt;alpha*x*x' + A&lt;/code&gt;. &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;uplo&lt;/code&gt;&lt;/a&gt; controls which triangle of &lt;code&gt;A&lt;/code&gt; is updated. Returns &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4465dbd291638c2e6d39be89b1495ed836d260fd" translate="yes" xml:space="preserve">
          <source>Methods for complex arrays only. Rank-k update of the Hermitian matrix &lt;code&gt;C&lt;/code&gt; as &lt;code&gt;alpha*A*A' + beta*C&lt;/code&gt; or &lt;code&gt;alpha*A'*A + beta*C&lt;/code&gt; according to &lt;a href=&quot;#stdlib-blas-trans-1&quot;&gt;&lt;code&gt;trans&lt;/code&gt;&lt;/a&gt;. Only the &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;uplo&lt;/code&gt;&lt;/a&gt; triangle of &lt;code&gt;C&lt;/code&gt; is updated. Returns &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0acde9ce1bc4e0bce92e875e5b980c000ea8f3e" translate="yes" xml:space="preserve">
          <source>Methods for complex arrays only. Returns the &lt;a href=&quot;#stdlib-blas-uplo-1&quot;&gt;&lt;code&gt;uplo&lt;/code&gt;&lt;/a&gt; triangle of &lt;code&gt;alpha*A*A'&lt;/code&gt; or &lt;code&gt;alpha*A'*A&lt;/code&gt;, according to &lt;a href=&quot;#stdlib-blas-trans-1&quot;&gt;&lt;code&gt;trans&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31087378a8bbc77cc90dde57d0b24e402b04e866" translate="yes" xml:space="preserve">
          <source>Methods for working with Iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b652fd8af9cd4414355894137d21ed352cdf7a08" translate="yes" xml:space="preserve">
          <source>Methods to implement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c083bff944879d9f528cf185eba0f496bc10a47d" translate="yes" xml:space="preserve">
          <source>Metro</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242805378404a310345cf70839197bf474f74005" translate="yes" xml:space="preserve">
          <source>Microphone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e7f4f223c04978a94419263b9e43e5ed355d3a" translate="yes" xml:space="preserve">
          <source>Microscope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1285dbfa3f301ee305a18122073774afa9fefa" translate="yes" xml:space="preserve">
          <source>Middle Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e408a463c8c8b04535936ec0388890fdb4eb6af4" translate="yes" xml:space="preserve">
          <source>Midline Horizontal Ellipsis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa3eb94a0a2b066b71bf209bbf87e72a3a0d9345" translate="yes" xml:space="preserve">
          <source>Milky Way</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5493525f70ed44ae88e23154562cfe8abb0989f" translate="yes" xml:space="preserve">
          <source>Minibus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec22368362321945374f59262ecb815c9ca058d" translate="yes" xml:space="preserve">
          <source>Minidisc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63cdf5a9fb88ddc55332d0332e0e9c814eca99c" translate="yes" xml:space="preserve">
          <source>Minus Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa58dd6ee65165aaa980990698cabc9c7f6af021" translate="yes" xml:space="preserve">
          <source>Minus Sign In Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecfc39673921fa625e7c61530c0920fdc1d6211" translate="yes" xml:space="preserve">
          <source>Minus Sign With Comma Above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ece43cec61f8aa8f09c373d63b6fda09eae8f1" translate="yes" xml:space="preserve">
          <source>Minus Sign With Dot Below</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa51c42418d3ae6a07aefef69aa4b77d1056b220" translate="yes" xml:space="preserve">
          <source>Minus Sign With Falling Dots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6783f03ccd844333eac42ccf91056e1122919617" translate="yes" xml:space="preserve">
          <source>Minus Sign With Rising Dots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86dc3e39a6aea834eb89a27cfa3557bba083ea09" translate="yes" xml:space="preserve">
          <source>Minus Tilde</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3cded1fdd470c6cff7ce15251a9d83764ce60c5" translate="yes" xml:space="preserve">
          <source>Minus Tilde + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64857cbc7d90e5ee4db91259927e9d694cb935aa" translate="yes" xml:space="preserve">
          <source>Minus-Or-Plus Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3a82cd6d42814797e7ed3d7e9faa0082c5d899" translate="yes" xml:space="preserve">
          <source>Mirror callback function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92185dc52f71ef75dafedf866a3c86e592962f6d" translate="yes" xml:space="preserve">
          <source>Missing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3453e940833c50faba05ca307352e54c2797a6f" translate="yes" xml:space="preserve">
          <source>Missing Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba901a61186cfbbb3bf7ee2deff1c264b66c04d" translate="yes" xml:space="preserve">
          <source>MissingException</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb7563cf925b3171d8413443294517880e52bf4" translate="yes" xml:space="preserve">
          <source>Mixed-type comparisons between signed integers, unsigned integers, and floats can be tricky. A great deal of care has been taken to ensure that Julia does them correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2447ff507fee803f855bee558dbfc6d355b84f8" translate="yes" xml:space="preserve">
          <source>Mmap.Anonymous</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640194f4398e106565f53f62e3b4b08e399b4acd" translate="yes" xml:space="preserve">
          <source>Mmap.mmap()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de550013f14e18d13217b11b5824a98b7e97a03" translate="yes" xml:space="preserve">
          <source>Mmap.sync!()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d079c814c5c6e9525538ebe30bfd478a09629f6" translate="yes" xml:space="preserve">
          <source>Mobile Phone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64a4a32c023fbcae9315c83d229c56e147f1205" translate="yes" xml:space="preserve">
          <source>Mobile Phone Off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d833926ab4deb21fef2ca63517a86d8d13288f" translate="yes" xml:space="preserve">
          <source>Mobile Phone With Rightwards Arrow At Left</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b93d2128e820f861fc8dfccd9f5521e89ad21f" translate="yes" xml:space="preserve">
          <source>Mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3798f81c7b6fecad2cbfec741314f8a66c0eca3" translate="yes" xml:space="preserve">
          <source>Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378c6a346dad4490cef343a9bacc66eea52f2d4f" translate="yes" xml:space="preserve">
          <source>Modifier Letter Apostrophe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3a9bf639cb1a05417daaf9f821e730d1f2702f" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f175b2d4ea0317119c9624b31973682c7c727deb" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54dd7f09fef3cabc35ab4a6d249ebc1a38792897" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f393f158eede615c8f37ab6d03675f9222c0871" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63eb7bc8a5531edaeecb5a5fcbca568ca4e4a2c7" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7c9981939a9073e10475c6d0b8f61192d6c799" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4413731a9bd52ab5447235f32b2b0de333c8ef4c" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital I</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c4ba7affffc374ec628373cf18e2899f5a87362" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd16cf51093e88927626338771cd09c92fdc329a" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f79c14762e8c7851d80fadde368877df85d6b23" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="016c375485a48852c92c9754957d713deeefdf8d" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b6de66c6f3547ae2b2d7b053ff032b096b93de" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital N</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19807e73c0ff4a0127747353ad7be9d70d95a697" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9fa96695c83b6b5b6c060ec7b05141390f4803" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4378d0c864dc7449a10443763855ea4a59baa102" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14533e9d3db66725bdefb9187de7134df849aa8" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ea6bcbac7185ab278072e6b19b25634e428e15" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67aa6839a8f6f282dad5b4931bd1883b098fbdcf" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ecfbd95ed7aef4b0c5960f7276af7528f3e1013" translate="yes" xml:space="preserve">
          <source>Modifier Letter Capital W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b949c25ddb1024b6b34775063c8ed4ff05dc6741" translate="yes" xml:space="preserve">
          <source>Modifier Letter Centred Left Half Ring / Modifier Letter Centered Left Half Ring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291ae0195a86f866993f9ce88979909a79117fd7" translate="yes" xml:space="preserve">
          <source>Modifier Letter Centred Right Half Ring / Modifier Letter Centered Right Half Ring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e59ea12945ed8b3bae8d350d3c977ff6c9c661" translate="yes" xml:space="preserve">
          <source>Modifier Letter Down Tack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a5b4d80c8920b6836b60ae0b5dafe0f60ff41e" translate="yes" xml:space="preserve">
          <source>Modifier Letter Half Triangular Colon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fce62d6e4239964c4599dd5d2dced43471e2efa" translate="yes" xml:space="preserve">
          <source>Modifier Letter Low Vertical Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b004982c20df1b8fbc334c55f8f0b60cd06099cf" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb88425b7f46b631fd02a62bce97481cd4f4f0f" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Alpha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2330a25644460fc348b0869a4f3ad148752432b" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8722138c1c68f848bb508699377ff45207b606f9" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Beta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11743c39b0189ca08862d802023884f6ff509de" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac514cd599f9a3a6730adac579cb5403479d24e7" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Chi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b12af6e54cc3a3e907f64218555b40070c42c1" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646926770eecb21814bebc00456d822dd902b2aa" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Delta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ba7d679d1ff0f323efb3db18337cffb058215e" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d05b8e8e47a8cc1fe82c0c873feb6eb937c1a0" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small F</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a3e647a87341c929cd000bd0eedbc0b417f747" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small G</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3685b9034b19a696b05b0209aff45ac1353acabb" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Greek Gamma</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c1c2e647f0e8f126ec82339b9456bd1ebf7261" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Greek Phi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c30e3a448db04ac018a8bd5442daf3475c7ba8" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small H</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e57ce9744f101dbce99ecdf29c1d13b26269999" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Iota</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9baf4c56dd431ef3ad26edec02f15427fb4f8e94" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbede69a2944bdb4d911b826974c6a32312043f" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d854f258e61e6965bf6816999063efd5ac79b59" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb37d7c92d1fb26c6ec47e0939092255ffd1ff93" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4940f12ed72f76097abffee48c6caf8597c15238" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044a808dd64acb0276529fec8c8eed4151b9e1b3" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Open E</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e8864168c9f7bcc5eaee6e04534f6b0ec03fe6" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f86982de25f53705d5112c5e339fc1c06461494" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Phi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b385de66745576cfea4c510f4a9264de0c110c" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d45af948e161b5baf4097ac61d4ca9bde5eaf9" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small S</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a00cedabf28dd494f16962a61b3b84c2db750c59" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934e5e0569eba2ae29b6fd7b7f3048216d6ab5b1" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Theta</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be80d92c9166f9508dafa1c3c4a04d968778caf" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small U</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d29e93c6cc783288013cdd5e61222df9f49c57" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small V</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6c33276e50f036dcb88fa62fc9ac217fb18388" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small W</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30a372f7b079c66d667c70ed8f79a8629876ff27" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69f6736779681fb0ed1056f1cad5cf275dd9d94" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Y</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5f570214eea93dfb2923426c61433c7d0985f7" translate="yes" xml:space="preserve">
          <source>Modifier Letter Small Z</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a1e94c23d8acf4f254ffb7effdc13dfa9335d0c" translate="yes" xml:space="preserve">
          <source>Modifier Letter Triangular Colon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2ae7750f3b68bfed15753e6ba40b4fd1614bc0" translate="yes" xml:space="preserve">
          <source>Modifier Letter Up Tack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c923edc7b9df3dd77fec300568421baabc1855" translate="yes" xml:space="preserve">
          <source>Modifier Letter Vertical Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b340178957b37d595f2386a2a7c9f3c1ea3e040d" translate="yes" xml:space="preserve">
          <source>Modifies &lt;code&gt;dict&lt;/code&gt; by transforming each value from &lt;code&gt;val&lt;/code&gt; to &lt;code&gt;f(val)&lt;/code&gt;. Note that the type of &lt;code&gt;dict&lt;/code&gt; cannot be changed: if &lt;code&gt;f(val)&lt;/code&gt; is not an instance of the key type of &lt;code&gt;dict&lt;/code&gt; then it will be converted to the key type if possible and otherwise raise an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c1db2af6a8e5de02c80ce0e770061ab316f1ee9" translate="yes" xml:space="preserve">
          <source>Modifies &lt;code&gt;dl&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, and &lt;code&gt;du&lt;/code&gt; in-place and returns them and the second superdiagonal &lt;code&gt;du2&lt;/code&gt; and the pivoting vector &lt;code&gt;ipiv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572d43cf06548da1345ec6a3306e5d70ce13a433" translate="yes" xml:space="preserve">
          <source>Modifying OpenBLAS settings or compiling Julia with a different BLAS library, eg &lt;a href=&quot;https://software.intel.com/en-us/mkl&quot;&gt;Intel MKL&lt;/a&gt;, may provide performance improvements. You can use &lt;a href=&quot;https://github.com/JuliaComputing/MKL.jl&quot;&gt;MKL.jl&lt;/a&gt;, a package that makes Julia's linear algebra use Intel MKL BLAS and LAPACK instead of OpenBLAS, or search the discussion forum for suggestions on how to set this up manually. Note that Intel MKL cannot be bundled with Julia, as it is not open source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d8cef0c43f0dd2eaf87acf03dd76365ee4a701" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;Distributed&lt;/code&gt; must be explicitly loaded on the master process before invoking &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt;. It is automatically made available on the worker processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0d4c77db7f69422d17f4d02a74c2e9ca631637" translate="yes" xml:space="preserve">
          <source>Module containing the broadcasting implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1e48420a4797de0ece18f47167f8bea686ef26" translate="yes" xml:space="preserve">
          <source>Module initialization and precompilation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec692ee34bf5f1de5b608ef24c4276cc3d0944e7" translate="yes" xml:space="preserve">
          <source>Module with garbage collection utilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f82982b865c3a95659f59755e8fee500abc86f4" translate="yes" xml:space="preserve">
          <source>Modules and files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8510a1d0d38afc78884abe8c896ed3ff2af14d40" translate="yes" xml:space="preserve">
          <source>Modules in Julia are separate variable workspaces, i.e. they introduce a new global scope. They are delimited syntactically, inside &lt;code&gt;module Name ... end&lt;/code&gt;. Modules allow you to create top-level definitions (aka global variables) without worrying about name conflicts when your code is used together with somebody else's. Within a module, you can control which names from other modules are visible (via importing), and specify which of your names are intended to be public (via exporting).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c78ad25e39e2af6d232135bc4257fd35ca7940" translate="yes" xml:space="preserve">
          <source>Modulo Two Sum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78082980964141d47941be353a64330f6b51990" translate="yes" xml:space="preserve">
          <source>Modulus after division by &lt;code&gt;2&amp;pi;&lt;/code&gt;, returning in the range $[0,2&amp;pi;)$.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a351691306b2e5e66b41d3f5c7ffba6810525320" translate="yes" xml:space="preserve">
          <source>Modulus after flooring division, returning a value &lt;code&gt;r&lt;/code&gt; such that &lt;code&gt;mod(r, y) == mod(x, y)&lt;/code&gt; in the range $(0, y]$ for positive &lt;code&gt;y&lt;/code&gt; and in the range $[y,0)$ for negative &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffae4168bc777c55ee4ffa00690c2cbb28b1c0b" translate="yes" xml:space="preserve">
          <source>Mon, Tues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="932eeb1076c85e522f02e15441fa371e3fd000ac" translate="yes" xml:space="preserve">
          <source>Monday</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1ff5c46aff9b279cd8a11d7962636c6c595bab" translate="yes" xml:space="preserve">
          <source>Money Bag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6639cb4b312c7ff05ac7325f845c67f865def44" translate="yes" xml:space="preserve">
          <source>Money With Wings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeb0a4ab97f5db3410d52f9c451f8da976896310" translate="yes" xml:space="preserve">
          <source>Monitor a file descriptor &lt;code&gt;fd&lt;/code&gt; for changes in the read or write availability, and with a timeout given by &lt;code&gt;timeout_s&lt;/code&gt; seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd1562faa95bb9a9e863b102b09464e5cd6ea08" translate="yes" xml:space="preserve">
          <source>Monitor a file for changes by polling every &lt;code&gt;interval_s&lt;/code&gt; seconds until a change occurs or &lt;code&gt;timeout_s&lt;/code&gt; seconds have elapsed. The &lt;code&gt;interval_s&lt;/code&gt; should be a long period; the default is 5.007 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd0ec65b8f729d265faeba6fa933846d7c2d687" translate="yes" xml:space="preserve">
          <source>Monkey</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb09be0ab256a995fb854ed1c681d6db409b5a63" translate="yes" xml:space="preserve">
          <source>Monkey Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ee2da532776f830243f6b7e320f6344c60f050" translate="yes" xml:space="preserve">
          <source>Monorail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bb646e34f3a1f66f555601f3aa3e959c4f36ae" translate="yes" xml:space="preserve">
          <source>Month of the year:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ffe0388e63ec156589f9f7dbfc37ce884b10df" translate="yes" xml:space="preserve">
          <source>Months of the Year:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a997188c7b1041363b78bd9fdcb758e1ac901a64" translate="yes" xml:space="preserve">
          <source>Moon Viewing Ceremony</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5372b5bf846ad903de34d1fdbb6bac57298e63ef" translate="yes" xml:space="preserve">
          <source>More About Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb61252c650b20a424bb584244f7ba0af0a2bba7" translate="yes" xml:space="preserve">
          <source>More complicated index types may require more context about the dimension into which they index. To support those cases, &lt;code&gt;to_indices(A, I)&lt;/code&gt; calls &lt;code&gt;to_indices(A, axes(A), I)&lt;/code&gt;, which then recursively walks through both the given tuple of indices and the dimensional indices of &lt;code&gt;A&lt;/code&gt; in tandem. As such, not all index types are guaranteed to propagate to &lt;code&gt;Base.to_index&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28b8a7a0afdfc3986f92c88b6d9bd8d72ae68b9" translate="yes" xml:space="preserve">
          <source>More dots: Fuse vectorized operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9114e0a5d18633194f649ad46bb864a2d100cdcf" translate="yes" xml:space="preserve">
          <source>More examples will be discussed later in &lt;a href=&quot;../methods/index#Methods-1&quot;&gt;Methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2bb379bdba4c79a60942076ea4b662e49f8d9bb" translate="yes" xml:space="preserve">
          <source>More fine-grained control over display of &lt;code&gt;Polar&lt;/code&gt; objects is possible. In particular, sometimes one wants both a verbose multi-line printing format, used for displaying a single object in the REPL and other interactive environments, and also a more compact single-line format used for &lt;a href=&quot;../../base/io-network/index#Base.print&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; or for displaying the object as part of another object (e.g. in an array). Although by default the &lt;code&gt;show(io, z)&lt;/code&gt; function is called in both cases, you can define a &lt;em&gt;different&lt;/em&gt; multi-line format for displaying an object by overloading a three-argument form of &lt;code&gt;show&lt;/code&gt; that takes the &lt;code&gt;text/plain&lt;/code&gt; MIME type as its second argument (see &lt;a href=&quot;../../base/io-network/index#Multimedia-I/O-1&quot;&gt;Multimedia I/O&lt;/a&gt;), for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f05c71e7a12085a3ebe14c1c0fed8c7488bc0dc" translate="yes" xml:space="preserve">
          <source>More generally, &lt;code&gt;f.(args...)&lt;/code&gt; is actually equivalent to &lt;code&gt;broadcast(f, args...)&lt;/code&gt;, which allows you to operate on multiple arrays (even of different shapes), or a mix of arrays and scalars (see &lt;a href=&quot;../arrays/index#Broadcasting-1&quot;&gt;Broadcasting&lt;/a&gt;). For example, if you have &lt;code&gt;f(x,y) = 3x + 4y&lt;/code&gt;, then &lt;code&gt;f.(pi,A)&lt;/code&gt; will return a new array consisting of &lt;code&gt;f(pi,a)&lt;/code&gt; for each &lt;code&gt;a&lt;/code&gt; in &lt;code&gt;A&lt;/code&gt;, and &lt;code&gt;f.(vector1,vector2)&lt;/code&gt; will return a new vector consisting of &lt;code&gt;f(vector1[i],vector2[i])&lt;/code&gt; for each index &lt;code&gt;i&lt;/code&gt; (throwing an exception if the vectors have different length).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6b913d4fac598019e1594bf477f6f76ced64763" translate="yes" xml:space="preserve">
          <source>More generally, you can use &lt;a href=&quot;../../base/io-network/index#Base.open&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; to read from or write to an external command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbed1d73be3b8c50f079db28b743039aeaaaf4c8" translate="yes" xml:space="preserve">
          <source>More precisely, the set of all finite-length strings &lt;em&gt;S&lt;/em&gt; together with the string concatenation operator &lt;code&gt;*&lt;/code&gt; forms a &lt;a href=&quot;https://en.wikipedia.org/wiki/Free_monoid&quot;&gt;free monoid&lt;/a&gt; (&lt;em&gt;S&lt;/em&gt;, &lt;code&gt;*&lt;/code&gt;). The identity element of this set is the empty string, &lt;code&gt;&quot;&quot;&lt;/code&gt;. Whenever a free monoid is not commutative, the operation is typically represented as &lt;code&gt;\cdot&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or a similar symbol, rather than &lt;code&gt;+&lt;/code&gt;, which as stated usually implies commutativity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad8280d892c33adf910a8bff64139b7ac3434c8e" translate="yes" xml:space="preserve">
          <source>More specifically, &lt;code&gt;a .^ b&lt;/code&gt; is parsed as the &lt;a href=&quot;../functions/index#man-vectorized-1&quot;&gt;&quot;dot&quot; call&lt;/a&gt;&lt;code&gt;(^).(a,b)&lt;/code&gt;, which performs a &lt;a href=&quot;../arrays/index#Broadcasting-1&quot;&gt;broadcast&lt;/a&gt; operation: it can combine arrays and scalars, arrays of the same size (performing the operation elementwise), and even arrays of different shapes (e.g. combining row and column vectors to produce a matrix). Moreover, like all vectorized &quot;dot calls,&quot; these &quot;dot operators&quot; are &lt;em&gt;fusing&lt;/em&gt;. For example, if you compute &lt;code&gt;2 .* A.^2 .+ sin.(A)&lt;/code&gt; (or equivalently &lt;code&gt;@. 2A^2 + sin(A)&lt;/code&gt;, using the &lt;a href=&quot;../../base/arrays/index#Base.Broadcast.@__dot__&quot;&gt;&lt;code&gt;@.&lt;/code&gt;&lt;/a&gt; macro) for an array &lt;code&gt;A&lt;/code&gt;, it performs a &lt;em&gt;single&lt;/em&gt; loop over &lt;code&gt;A&lt;/code&gt;, computing &lt;code&gt;2a^2 + sin(a)&lt;/code&gt; for each element of &lt;code&gt;A&lt;/code&gt;. In particular, nested dot calls like &lt;code&gt;f.(g.(x))&lt;/code&gt; are fused, and &quot;adjacent&quot; binary operators like &lt;code&gt;x .+ 3 .* x.^2&lt;/code&gt; are equivalent to nested dot calls &lt;code&gt;(+).(x, (*).(3, (^).(x, 2)))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17af8621830fc8ff7e82aa48fbe7045fe41ab880" translate="yes" xml:space="preserve">
          <source>More usefully, it is possible to constrain varargs methods by a parameter. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779070101f9832b852f60dfb362c3b0c4dd35160" translate="yes" xml:space="preserve">
          <source>Moreover, &lt;em&gt;nested&lt;/em&gt;&lt;code&gt;f.(args...)&lt;/code&gt; calls are &lt;em&gt;fused&lt;/em&gt; into a single &lt;code&gt;broadcast&lt;/code&gt; loop. For example, &lt;code&gt;sin.(cos.(X))&lt;/code&gt; is equivalent to &lt;code&gt;broadcast(x -&amp;gt; sin(cos(x)), X)&lt;/code&gt;, similar to &lt;code&gt;[sin(cos(x)) for x in X]&lt;/code&gt;: there is only a single loop over &lt;code&gt;X&lt;/code&gt;, and a single array is allocated for the result. [In contrast, &lt;code&gt;sin(cos(X))&lt;/code&gt; in a typical &quot;vectorized&quot; language would first allocate one temporary array for &lt;code&gt;tmp=cos(X)&lt;/code&gt;, and then compute &lt;code&gt;sin(tmp)&lt;/code&gt; in a separate loop, allocating a second array.] This loop fusion is not a compiler optimization that may or may not occur, it is a &lt;em&gt;syntactic guarantee&lt;/em&gt; whenever nested &lt;code&gt;f.(args...)&lt;/code&gt; calls are encountered. Technically, the fusion stops as soon as a &quot;non-dot&quot; function call is encountered; for example, in &lt;code&gt;sin.(sort(cos.(X)))&lt;/code&gt; the &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;cos&lt;/code&gt; loops cannot be merged because of the intervening &lt;code&gt;sort&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5329457d4ed40fab6163857a9591ce932a18cd" translate="yes" xml:space="preserve">
          <source>Moreover, if the compiler could not determine that the regex object was constant over all loops, certain optimizations might not be possible, making this version still less efficient than the more convenient literal form above. Of course, there are still situations where the non-literal form is more convenient: if one needs to interpolate a variable into the regular expression, one must take this more verbose approach; in cases where the regular expression pattern itself is dynamic, potentially changing upon each loop iteration, a new regular expression object must be constructed on each iteration. In the vast majority of use cases, however, regular expressions are not constructed based on run-time data. In this majority of cases, the ability to write regular expressions as compile-time values is invaluable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94796bcc387a6e8182d2873b6955e8376c00e9ec" translate="yes" xml:space="preserve">
          <source>Moreover, if you interpolate multiple arrays into the same word, the shell's Cartesian product generation behavior is emulated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e032b71807c69c0bc1be8067fda2123f4bb83a6" translate="yes" xml:space="preserve">
          <source>Moreover, these functions (like any Julia function) can be applied in &quot;vectorized&quot; fashion to arrays and other collections with the &lt;a href=&quot;../functions/index#man-vectorized-1&quot;&gt;dot syntax&lt;/a&gt;&lt;code&gt;f.(A)&lt;/code&gt;, e.g. &lt;code&gt;sin.(A)&lt;/code&gt; will compute the sine of each element of an array &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3695177f400d78b837a3ec533b6ee9eedcb9aba9" translate="yes" xml:space="preserve">
          <source>Moreover, you can also define &lt;code&gt;show&lt;/code&gt; methods for other MIME types in order to enable richer display (HTML, images, etcetera) of objects in environments that support this (e.g. IJulia). For example, we can define formatted HTML display of &lt;code&gt;Polar&lt;/code&gt; objects, with superscripts and italics, via:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cedbde91aadbe841dc76e371af3e62bec121526" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;Period&lt;/code&gt; values can also be rounded to a specified resolution:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e19dc6bd3a4b02ba9e0283a25c37e3a958338a7" translate="yes" xml:space="preserve">
          <source>Most commonly you'll be loading code from files or packages, and you have a considerable amount of flexibility in controlling which processes load code. Consider a file, &lt;code&gt;DummyModule.jl&lt;/code&gt;, containing the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c650c7bdb609a6165acfd0169fae2081b78f3b86" translate="yes" xml:space="preserve">
          <source>Most functions related to random generation accept an optional &lt;code&gt;AbstractRNG&lt;/code&gt; object as first argument, which defaults to the global one if not provided. Moreover, some of them accept optionally dimension specifications &lt;code&gt;dims...&lt;/code&gt; (which can be given as a tuple) to generate arrays of random values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1239d101be28fb7a51d055c4beba3cba9e6e698" translate="yes" xml:space="preserve">
          <source>Most modern computers possess more than one CPU, and several computers can be combined together in a cluster. Harnessing the power of these multiple CPUs allows many computations to be completed more quickly. There are two major factors that influence performance: the speed of the CPUs themselves, and the speed of their access to memory. In a cluster, it's fairly obvious that a given CPU will have fastest access to the RAM within the same computer (node). Perhaps more surprisingly, similar issues are relevant on a typical multicore laptop, due to differences in the speed of main memory and the &lt;a href=&quot;https://www.akkadia.org/drepper/cpumemory.pdf&quot;&gt;cache&lt;/a&gt;. Consequently, a good multiprocessing environment should allow control over the &quot;ownership&quot; of a chunk of memory by a particular CPU. Julia provides a multiprocessing environment based on message passing to allow programs to run on multiple processes in separate memory domains at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb4a0eddebf9dead1a35f328ee8b33ef53f3e18" translate="yes" xml:space="preserve">
          <source>Most non-&lt;code&gt;AbstractString&lt;/code&gt; objects are converted to strings closely corresponding to how they are entered as literal expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009849b63af7fd56e46b025e9e1988be97d008f3" translate="yes" xml:space="preserve">
          <source>Most of the fields in &lt;code&gt;WorkerConfig&lt;/code&gt; are used by the inbuilt managers. Custom cluster managers would typically specify only &lt;code&gt;io&lt;/code&gt; or &lt;code&gt;host&lt;/code&gt; / &lt;code&gt;port&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbedbae85135376e0955ea53a24367ed77becc5" translate="yes" xml:space="preserve">
          <source>Most of the time, a package is uniquely identifiable simply from its name. However, sometimes a project might encounter a situation where it needs to use two different packages that share the same name. While you might be able fix this by renaming one of the packages, being forced to do so can be highly disruptive in a large, shared code base. Instead, Julia's code loading mechanism allows the same package name to refer to different packages in different components of an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a13ed301c1f3da1a566cff3cd69df8fc346456" translate="yes" xml:space="preserve">
          <source>Most real numbers cannot be represented exactly with floating-point numbers, and so for many purposes it is important to know the distance between two adjacent representable floating-point numbers, which is often known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Machine_epsilon&quot;&gt;machine epsilon&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451bfdf40e0411d54f7de109d79b121ca62be5c5" translate="yes" xml:space="preserve">
          <source>Most task switches occur as a result of waiting for events such as I/O requests, and are performed by a scheduler included in Julia Base. The scheduler maintains a queue of runnable tasks, and executes an event loop that restarts tasks based on external events such as message arrival.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979b60e882abda8a9c12cf29fe335277ebba6068" translate="yes" xml:space="preserve">
          <source>Mount Fuji</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea810cae67bdffd7ad390ce003d4876748a6fba6" translate="yes" xml:space="preserve">
          <source>Mountain Bicyclist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf2a0344224497ad15378a05503ae78e04f4bf8" translate="yes" xml:space="preserve">
          <source>Mountain Cableway</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84c680c2896ded96f7a10d71dad68ce2418ed82" translate="yes" xml:space="preserve">
          <source>Mountain Railway</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573dd2c2ed953b97e3c31f3090925fe92109b779" translate="yes" xml:space="preserve">
          <source>Mouse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5768b6f096a5a2264e0ec9dec9808a17ff5b43e8" translate="yes" xml:space="preserve">
          <source>Mouse Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b89346ec19490ee79f4cd52a3a3717eb0a29f3b" translate="yes" xml:space="preserve">
          <source>Mouth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b1f202851b68387e0cf962baee4d8839bb1316" translate="yes" xml:space="preserve">
          <source>Move cursor according to the direction of the Arrow key, while activating the region (&quot;shift selection&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fbb10cea5a283fe0ac0a7b27485eb8a05156e90" translate="yes" xml:space="preserve">
          <source>Move down one line (or change to the next history entry that matches the text before the cursor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39ec10b803e2fe3f34325c3c3abd699531c775a" translate="yes" xml:space="preserve">
          <source>Move left one character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0791a4c858c6d391e0ae088e06592877ac2b3393" translate="yes" xml:space="preserve">
          <source>Move left one word</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4897d4c5d557d2a36d7979e57b09fe3bcda6c0ef" translate="yes" xml:space="preserve">
          <source>Move right one character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46615955d39b79da629fb77760f9faf2397e33ae" translate="yes" xml:space="preserve">
          <source>Move right one word</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c735f545a7e59af556c32f882f26a847507a45e" translate="yes" xml:space="preserve">
          <source>Move the file, link, or directory from &lt;code&gt;src&lt;/code&gt; to &lt;code&gt;dst&lt;/code&gt;. &lt;code&gt;force=true&lt;/code&gt; will first remove an existing &lt;code&gt;dst&lt;/code&gt;. Return &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9cb71d0e79bee3c1501add0807182e5ae66211" translate="yes" xml:space="preserve">
          <source>Move to beginning of line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac320ded099850be4cfbe5245eb54c34673ceac" translate="yes" xml:space="preserve">
          <source>Move to end of line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dd98d3dcbabaacbdfa5f6b95879b0b4a046a03" translate="yes" xml:space="preserve">
          <source>Move up one line (or change to the previous history entry that matches the text before the cursor)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76725352326853201f27fde4c6c1ce275b820153" translate="yes" xml:space="preserve">
          <source>Movie Camera</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ca43aa7d11d81bf2d46a043f16aaedd09ef0f6" translate="yes" xml:space="preserve">
          <source>Moyai</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b88c19cc18879e009ec23091705fee60af05e90" translate="yes" xml:space="preserve">
          <source>Much Greater-Than / Much Greater Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a0fbbca8f5245c8133de8c73b23f300c244dc4" translate="yes" xml:space="preserve">
          <source>Much Greater-Than / Much Greater Than + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2c0deb0505dd20e806f5765890099e4b5a867f" translate="yes" xml:space="preserve">
          <source>Much Less-Than / Much Less Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be826cd51359393418fcb2adbb0047839a7b6e1" translate="yes" xml:space="preserve">
          <source>Much Less-Than / Much Less Than + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47a2a6c416b663239d44555df35e9ac1ebf369f" translate="yes" xml:space="preserve">
          <source>Much as plain old abstract types serve to create a useful hierarchy of types over concrete types, parametric abstract types serve the same purpose with respect to parametric composite types. We could, for example, have declared &lt;code&gt;Point{T}&lt;/code&gt; to be a subtype of &lt;code&gt;Pointy{T}&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f35bd862c1f6f3023c5d86b53aa67708df9fe9c" translate="yes" xml:space="preserve">
          <source>Multi-Core or Distributed Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8f806bc2cb3dd821e467dcedf520889e897194" translate="yes" xml:space="preserve">
          <source>Multi-Threading</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1769e396774be66a81c06a4bc46092468f38e81" translate="yes" xml:space="preserve">
          <source>Multi-Threading (Experimental)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b066f6dcf0a56bf1362975edd9dba4ac4004b6" translate="yes" xml:space="preserve">
          <source>Multi-dimensional Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e421129a56610bee84054ce99746152a4e075eb0" translate="yes" xml:space="preserve">
          <source>MultiSelectMenu</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d638ce5bf60587999d44aed72b74552ba37415" translate="yes" xml:space="preserve">
          <source>Multidimensional Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2688e5975cc55bfb07b0932fafd5c212fc5ace21" translate="yes" xml:space="preserve">
          <source>Multidimensional and nonscalar indexed assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e734bd25327fbeb74d44958ad03c60a53b4c7ad6" translate="yes" xml:space="preserve">
          <source>Multidimensional and nonscalar indexing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc8b546795a10466bd74bf69b081a62bbb6c4d8" translate="yes" xml:space="preserve">
          <source>Multidimensional arrays in Julia are stored in column-major order. This means that arrays are stacked one column at a time. This can be verified using the &lt;code&gt;vec&lt;/code&gt; function or the syntax &lt;code&gt;[:]&lt;/code&gt; as shown below (notice that the array is ordered &lt;code&gt;[1 3 2 4]&lt;/code&gt;, not &lt;code&gt;[1 2 3 4]&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc001479bc2220a1c498e4c1d38b3ef0687b311" translate="yes" xml:space="preserve">
          <source>Multimap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a550b8fa4d35649c20c485e20ba65c48140443" translate="yes" xml:space="preserve">
          <source>Multimedia I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20daf23b87d49b545626edacfe0595bc78ffe6bb" translate="yes" xml:space="preserve">
          <source>Multimedia-capable display backends may be registered by subclassing a generic &lt;a href=&quot;#Base.Multimedia.AbstractDisplay&quot;&gt;&lt;code&gt;AbstractDisplay&lt;/code&gt;&lt;/a&gt; type and pushing them onto a stack of display backends via &lt;a href=&quot;#Base.Multimedia.pushdisplay&quot;&gt;&lt;code&gt;pushdisplay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f901aab2cf166bf580d3c3b10747eb77b4d28786" translate="yes" xml:space="preserve">
          <source>Multimedia.@MIME_str</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fad381232cafa3a6519f49a82f0ad5d43ee03f8" translate="yes" xml:space="preserve">
          <source>Multimedia.AbstractDisplay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf6b34f9dc6831162a9ed70613e7214b009773a" translate="yes" xml:space="preserve">
          <source>Multimedia.MIME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3b6cfeea4ec290d631b42e28b7fd3dd7997acf" translate="yes" xml:space="preserve">
          <source>Multimedia.TextDisplay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8e050779516bbc10cc3b22a2ff20011e576c53" translate="yes" xml:space="preserve">
          <source>Multimedia.display()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44362a84f2293978fd977ef2de61866c3a99b218" translate="yes" xml:space="preserve">
          <source>Multimedia.displayable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="591d47ad80c3149fb86dc4d9393ecc120230caeb" translate="yes" xml:space="preserve">
          <source>Multimedia.istextmime()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02a6dd8bd8f25cd25c6ab6ab392ec5dde9ef69a" translate="yes" xml:space="preserve">
          <source>Multimedia.popdisplay()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6027621de0719ce755c723b278c3459d48b0d9" translate="yes" xml:space="preserve">
          <source>Multimedia.pushdisplay()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a173fa25b54e08e60b3fab0e43245db6b1bb5c4f" translate="yes" xml:space="preserve">
          <source>Multimedia.redisplay()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f6e961e36391308b259ffe96e74cfb78a59cf9" translate="yes" xml:space="preserve">
          <source>Multimedia.showable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b65075f1dc2c06140e3f24524c3b8e27d9efca2" translate="yes" xml:space="preserve">
          <source>Multiple Musical Notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eae37825f972d7374db88d51813ed8e004ec47c" translate="yes" xml:space="preserve">
          <source>Multiple Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a025ceee7b8b1c711d382e33043a2b3de0e6408b" translate="yes" xml:space="preserve">
          <source>Multiple Return Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e15b8cb269e38ed2edf77db20f03d8707f3e964" translate="yes" xml:space="preserve">
          <source>Multiple dispatch together with the flexible parametric type system give Julia its ability to abstractly express high-level algorithms decoupled from implementation details, yet generate efficient, specialized code to handle each case at run time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bab076d4c7874947ae3e9648b2fc792a2f1d6f" translate="yes" xml:space="preserve">
          <source>Multiple nested &lt;code&gt;for&lt;/code&gt; loops can be combined into a single outer loop, forming the cartesian product of its iterables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495dbcc88072f8c65c5a84ca68f0504e42ed0ed7" translate="yes" xml:space="preserve">
          <source>Multiple readers in different tasks can read data concurrently via &lt;code&gt;take!&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e71ad5291dbedb2322b217da37e04afff92dc9d" translate="yes" xml:space="preserve">
          <source>Multiple variables can be declared in a single &lt;code&gt;const&lt;/code&gt; statement:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d73c9901bb6c946790a83a8a87b82ef0cec1f2c" translate="yes" xml:space="preserve">
          <source>Multiple variables can be declared within a single &lt;code&gt;const&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6191bf2ae4cde6b84e3731ebe3216e641b1f925" translate="yes" xml:space="preserve">
          <source>Multiple writers in different tasks can write to the same channel concurrently via &lt;code&gt;put!&lt;/code&gt; calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9ee6e2b5fcdbd970e8f069acf17877e49e0441" translate="yes" xml:space="preserve">
          <source>Multiplication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08798729863d0bb7b20e1d37c363bae614f6586a" translate="yes" xml:space="preserve">
          <source>Multiplication Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c76df64c4a57883fa1d5a89f8c1a59b60fe613a" translate="yes" xml:space="preserve">
          <source>Multiplication Sign In Double Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb8782430ba3b81d227b0367b8483a3aec5c585" translate="yes" xml:space="preserve">
          <source>Multiplication Sign In Left Half Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45899b842b1e5f0e8bbcebf1613882194369635c" translate="yes" xml:space="preserve">
          <source>Multiplication Sign In Right Half Circle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a355acf983afd120ac915695e7bbc1cfdb422169" translate="yes" xml:space="preserve">
          <source>Multiplication Sign In Triangle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1dcaf767393e94d9fb3951d203efabe4bb0dae" translate="yes" xml:space="preserve">
          <source>Multiplication Sign With Dot Above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdc4c450ca5244758ddd4c66eba1288b620d400" translate="yes" xml:space="preserve">
          <source>Multiplication Sign With Underbar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3483bdb2415560ac9652dfcab542fdcef6d607" translate="yes" xml:space="preserve">
          <source>Multiplication operator. &lt;code&gt;x*y*z*...&lt;/code&gt; calls this function with all arguments, i.e. &lt;code&gt;*(x, y, z, ...)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbab753a795402e618da8df891a564ce24521592" translate="yes" xml:space="preserve">
          <source>Multiplication with respect to either full/square or non-full/square &lt;code&gt;Q&lt;/code&gt; is allowed, i.e. both &lt;code&gt;F.Q*F.R&lt;/code&gt; and &lt;code&gt;F.Q*A&lt;/code&gt; are supported. A &lt;code&gt;Q&lt;/code&gt; matrix can be converted into a regular matrix with &lt;a href=&quot;../../base/arrays/index#Base.Matrix&quot;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt;. This operation returns the &quot;thin&quot; Q factor, i.e., if &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; with &lt;code&gt;m&amp;gt;=n&lt;/code&gt;, then &lt;code&gt;Matrix(F.Q)&lt;/code&gt; yields an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix with orthonormal columns. To retrieve the &quot;full&quot; Q factor, an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;m&lt;/code&gt; orthogonal matrix, use &lt;code&gt;F.Q*Matrix(I,m,m)&lt;/code&gt;. If &lt;code&gt;m&amp;lt;=n&lt;/code&gt;, then &lt;code&gt;Matrix(F.Q)&lt;/code&gt; yields an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;m&lt;/code&gt; orthogonal matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3237fef2698864d2d4dff1442ef27b98ff896474" translate="yes" xml:space="preserve">
          <source>Multiplies the matrix &lt;code&gt;C&lt;/code&gt; by &lt;code&gt;Q&lt;/code&gt; from the transformation supplied by &lt;code&gt;tzrzf!&lt;/code&gt;. Depending on &lt;code&gt;side&lt;/code&gt; or &lt;code&gt;trans&lt;/code&gt; the multiplication can be left-sided (&lt;code&gt;side = L, Q*C&lt;/code&gt;) or right-sided (&lt;code&gt;side = R, C*Q&lt;/code&gt;) and &lt;code&gt;Q&lt;/code&gt; can be unmodified (&lt;code&gt;trans = N&lt;/code&gt;), transposed (&lt;code&gt;trans = T&lt;/code&gt;), or conjugate transposed (&lt;code&gt;trans = C&lt;/code&gt;). Returns matrix &lt;code&gt;C&lt;/code&gt; which is modified in-place with the result of the multiplication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51373d5164159f5426002b0598a3884a7c93923c" translate="yes" xml:space="preserve">
          <source>Multiply &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, giving the result as a larger type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c2b66d02b47a40957a9bf040f2f9789a10c4a5f" translate="yes" xml:space="preserve">
          <source>Multiply elements of &lt;code&gt;A&lt;/code&gt; over the singleton dimensions of &lt;code&gt;r&lt;/code&gt;, and write results to &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb50f95d1ea0332243fc7cfb57f8206ade911927" translate="yes" xml:space="preserve">
          <source>Multiply elements of an array over the given dimensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e702a06c59098f213dc183738514d30defe88d1d" translate="yes" xml:space="preserve">
          <source>Multiset Multiplication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e9543c61867442bcf25b304349df9f5d65ca32" translate="yes" xml:space="preserve">
          <source>Multiset Union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0159a2df7e34a6cc82e0f98d19901fe45423221a" translate="yes" xml:space="preserve">
          <source>Multivariate apply in R, e.g. &lt;code&gt;mapply(choose, 11:13, 1:3)&lt;/code&gt;, can be written as &lt;code&gt;broadcast(binomial, 11:13, 1:3)&lt;/code&gt; in Julia. Equivalently Julia offers a shorter dot syntax for vectorizing functions &lt;code&gt;binomial.(11:13, 1:3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1eadf2c10a086c1960a9b501d59933c8974dd2b" translate="yes" xml:space="preserve">
          <source>Multplication Order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa146572cac44a8146d28c8ac452ea7d13c9ab21" translate="yes" xml:space="preserve">
          <source>Mushroom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46b6d28712c4b7b4707908d1e571236cf12721a" translate="yes" xml:space="preserve">
          <source>Music Flat Sign / Flat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a04232f01f8df8edaadcea411ff36f7f6487ee84" translate="yes" xml:space="preserve">
          <source>Music Natural Sign / Natural</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d750dc923f792f858ed732c6ec0b1da0e99959" translate="yes" xml:space="preserve">
          <source>Music Sharp Sign / Sharp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683e80dc8a4c6e7c8bc826f53b6dfcf0a6bda4f2" translate="yes" xml:space="preserve">
          <source>Musical Keyboard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65f0abd74cb5797c41071b0a9e2cddd68e16857" translate="yes" xml:space="preserve">
          <source>Musical Note</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfa13073285efc9898a345a8260636406d435b4" translate="yes" xml:space="preserve">
          <source>Musical Score</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b526f688cce16763794e58f91f1fb89b4e382f22" translate="yes" xml:space="preserve">
          <source>Mutable Composite Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9af487b0eb75065e220e4b4f64315251059f6d" translate="yes" xml:space="preserve">
          <source>Mutable collections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b1ed439ba2f9dd0159774d9902013a44e5bafb" translate="yes" xml:space="preserve">
          <source>Mutable values, on the other hand are heap-allocated and passed to functions as pointers to heap-allocated values except in cases where the compiler is sure that there's no way to tell that this is not what is happening.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d562bdafddbc28a1463062065c657c4bc9672cc9" translate="yes" xml:space="preserve">
          <source>Mutation of the bounds of the underlying array will invalidate this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c601014fa28760ad8ec66e89966537368e4cbb2" translate="yes" xml:space="preserve">
          <source>N-Ary Circled Dot Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b908a94b34698b4d9b7b0207be4158da2feb778" translate="yes" xml:space="preserve">
          <source>N-Ary Circled Plus Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd5ce147977305f56f82ccf66ec27699a2f05e0" translate="yes" xml:space="preserve">
          <source>N-Ary Circled Times Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a70409166d87ecdf40d895d65a2de86858c7d72" translate="yes" xml:space="preserve">
          <source>N-Ary Coproduct</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39e136f6e4c1d1091281d6e70793affbdc62596" translate="yes" xml:space="preserve">
          <source>N-Ary Intersection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75cd531fa98b88aa4c1ea0f5aad0923bb35686de" translate="yes" xml:space="preserve">
          <source>N-Ary Logical And</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd0377615b0c0c9e50ec272b87620b1882f58ce" translate="yes" xml:space="preserve">
          <source>N-Ary Logical Or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a25a06e9c573bc3729989159399e1d0bee4414" translate="yes" xml:space="preserve">
          <source>N-Ary Product</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bceaf94be234c09815c4e2f3473560766a97e3a" translate="yes" xml:space="preserve">
          <source>N-Ary Square Intersection Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acad29f71e0c492d455e428791c8757b2902981" translate="yes" xml:space="preserve">
          <source>N-Ary Square Union Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc7d374c42e4f2df4bcb04f0f33dc4c12531c00" translate="yes" xml:space="preserve">
          <source>N-Ary Summation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22be9150d2380639b3cc7120e2b0ad3eb38c0c10" translate="yes" xml:space="preserve">
          <source>N-Ary Times Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f1103959c04f566d198e3617a3b0a0b4932170" translate="yes" xml:space="preserve">
          <source>N-Ary Union</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b227350c7615a207de1206fdd8cd99b07f317f" translate="yes" xml:space="preserve">
          <source>N-Ary Union Operator With Dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc811ee4937db532790cf25d7cb94a1efeaa332a" translate="yes" xml:space="preserve">
          <source>N-Ary Union Operator With Plus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d2e98e6754af941484848930ccbaddfefe13d6" translate="yes" xml:space="preserve">
          <source>N/A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fd9c68f804acda665d2ab082217bb1583318f2" translate="yes" xml:space="preserve">
          <source>NaN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84eca33f462fff1d82716a00bb1a9da6eef01b51" translate="yes" xml:space="preserve">
          <source>NaN16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1186f579effcba17fc840178088ad9180ffa477" translate="yes" xml:space="preserve">
          <source>NaN32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04255172c46885eea43e832178b016bfeeae55b" translate="yes" xml:space="preserve">
          <source>Nabla</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef8040bc58bb62eac4b1f05cdee5404fd80b514" translate="yes" xml:space="preserve">
          <source>Nail Polish</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0625d2052ba9bb5afda3d21d6721388e5f4c4b1" translate="yes" xml:space="preserve">
          <source>Name Badge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da36348ca4a6d538eb48f90ec86de8739a592351" translate="yes" xml:space="preserve">
          <source>Named Tuple Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f19d99a1a121465f53068cd3e37c47ef1fad72" translate="yes" xml:space="preserve">
          <source>Named Tuples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6d9efdb67defed4600406bfad7cbe046812758" translate="yes" xml:space="preserve">
          <source>Named and numbered footnote references can be written using the following syntax. A footnote name must be a single alphanumeric word containing no punctuation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72be3008659f32677ce2d2404bd56f83680d29f1" translate="yes" xml:space="preserve">
          <source>Named tuples are instances of the &lt;a href=&quot;../../base/base/index#Core.NamedTuple&quot;&gt;&lt;code&gt;NamedTuple&lt;/code&gt;&lt;/a&gt; type, which has two parameters: a tuple of symbols giving the field names, and a tuple type giving the field types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6a4d10273503fa27f8c46a18767ab4521c07a3" translate="yes" xml:space="preserve">
          <source>Named tuples are very similar to tuples, except that fields can additionally be accessed by name using dot syntax (&lt;code&gt;x.a&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45cc1e50f55d768c6a39cd232336976b7732dfc" translate="yes" xml:space="preserve">
          <source>Names of &lt;code&gt;Type&lt;/code&gt;s and &lt;code&gt;Module&lt;/code&gt;s begin with a capital letter and word separation is shown with upper camel case instead of underscores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="669b5c2a0af852115b81963203fce679df22a31e" translate="yes" xml:space="preserve">
          <source>Names of &lt;code&gt;function&lt;/code&gt;s and &lt;code&gt;macro&lt;/code&gt;s are in lower case, without underscores.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315abfa13d69446ee3cab0a04d182cc545dfb2c3" translate="yes" xml:space="preserve">
          <source>Names of variables are in lower case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6caeb19c64bfdb2c7f9f0778d9792f83f81ab4c7" translate="yes" xml:space="preserve">
          <source>Namespace miscellanea</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81767a14b5865561a4a0f909d1a970b4158b5af2" translate="yes" xml:space="preserve">
          <source>Nand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67491a6c4d2a113101836cc6410bc0b315f4cb77" translate="yes" xml:space="preserve">
          <source>Naturally, it is possible for quote expressions to contain other quote expressions. Understanding how interpolation works in these cases can be a bit tricky. Consider this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1b33b1d17b9acbddf9cac2115963e31d8b21a5" translate="yes" xml:space="preserve">
          <source>Navigate to your temporary directory and launch Julia, then do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8841f81b26ad9918dae04823591307ed2dd7da48" translate="yes" xml:space="preserve">
          <source>Necktie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ecd749b905c6977df0e77186fb9812acf0f28a8" translate="yes" xml:space="preserve">
          <source>Negated Double Vertical Bar Double Right Turnstile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe87c942f9f7bfee31e0905a674a7acab19a578" translate="yes" xml:space="preserve">
          <source>Negation of &lt;code&gt;&amp;isin;&lt;/code&gt; and &lt;code&gt;&amp;ni;&lt;/code&gt;, i.e. checks that &lt;code&gt;item&lt;/code&gt; is not in &lt;code&gt;collection&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1931659c9e1b4ce9d7ec399d6f5e740532d35d3" translate="yes" xml:space="preserve">
          <source>Negation of &lt;code&gt;&amp;sube;&lt;/code&gt; and &lt;code&gt;&amp;supe;&lt;/code&gt;, i.e. checks that &lt;code&gt;a&lt;/code&gt; is not a subset of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97b9bfba068fbd7a3a1fa54e3ccb57a97d94eb2" translate="yes" xml:space="preserve">
          <source>Negative Squared Ab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3bdc3efad3dd419c1cb492507357bf8831cc24" translate="yes" xml:space="preserve">
          <source>Negative Squared Cross Mark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7b2e1e90ccc0cf1ee98411e4a3d9f188ae7074" translate="yes" xml:space="preserve">
          <source>Negative Squared Latin Capital Letter A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304d28b12dcf81b90eb5e22beadebcff60a1f7d6" translate="yes" xml:space="preserve">
          <source>Negative Squared Latin Capital Letter B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c862d7b34ecee68029345c3bf7b39b898342164" translate="yes" xml:space="preserve">
          <source>Negative Squared Latin Capital Letter O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6308babfec9e69cdff52893e394748de4b3b29" translate="yes" xml:space="preserve">
          <source>Negative Squared Latin Capital Letter P</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbd11351af129f60826174098cbdf05e74f050f" translate="yes" xml:space="preserve">
          <source>Neither &lt;code&gt;convert&lt;/code&gt; nor &lt;code&gt;cconvert&lt;/code&gt; should take a Julia object and turn it into a &lt;code&gt;Ptr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233c2a39e94063ce181611891dcdd95a1291b1a5" translate="yes" xml:space="preserve">
          <source>Neither A Subset Of Nor Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c927af76b71cf28775cab6c0bc644144b321e55f" translate="yes" xml:space="preserve">
          <source>Neither A Superset Of Nor Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6ef024104f196dec9cbcb30309372186d114d7" translate="yes" xml:space="preserve">
          <source>Neither Approximately Nor Actually Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f956227c83f5924a3ea073b24bb6bd1a835fcb86" translate="yes" xml:space="preserve">
          <source>Neither Greater-Than Nor Equal To / Neither Greater Than Nor Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a8706df6fc90ce626526d16857164211520a7a" translate="yes" xml:space="preserve">
          <source>Neither Greater-Than Nor Equivalent To / Neither Greater Than Nor Equivalent To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e188aa5a652ee8d5842cae5b3d3116acba271aa" translate="yes" xml:space="preserve">
          <source>Neither Greater-Than Nor Less-Than / Neither Greater Than Nor Less Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5879307721237ad3ad1ce3bf914eafeb074a68e7" translate="yes" xml:space="preserve">
          <source>Neither Less-Than Nor Equal To / Neither Less Than Nor Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba60a77dfac9693c527e4257a55200358bb7ed68" translate="yes" xml:space="preserve">
          <source>Neither Less-Than Nor Equivalent To / Neither Less Than Nor Equivalent To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b8c2fde6692011493ae29c78dc0887e72418f7" translate="yes" xml:space="preserve">
          <source>Neither Less-Than Nor Greater-Than / Neither Less Than Nor Greater Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eaf74d125ce35ab9a8504c91cbc3fd36b5155df" translate="yes" xml:space="preserve">
          <source>Neither juxtaposition of two parenthesized expressions, nor placing a variable before a parenthesized expression, however, can be used to imply multiplication:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125186d5ff63f69c3e2321b1e81aa13d69cff28e" translate="yes" xml:space="preserve">
          <source>Neptune</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4fbd05fd436fc9d45e06e93c5beb9d6849ca86" translate="yes" xml:space="preserve">
          <source>Nested quote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552146d37d66cb78074b5849a522f96a5d21589c" translate="yes" xml:space="preserve">
          <source>Network I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a64e9ee73a50340ce5cfbcba50917cd8be1ac8" translate="yes" xml:space="preserve">
          <source>Network Requirements for LocalManager and SSHManager</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a55c8cb72838904c479c39b6e41b29c517f702a" translate="yes" xml:space="preserve">
          <source>Networking and Streams</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54631a938fc351480252a8fbf952417324a21a2" translate="yes" xml:space="preserve">
          <source>Neuter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b0bf8b5a4f962ac54b72ec0f3e2249c35062e8" translate="yes" xml:space="preserve">
          <source>Neutral Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4dda3e4d7496caa2e8efb358bf65c52a3c57038" translate="yes" xml:space="preserve">
          <source>New Moon Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5162116d9d9cdaee88a84b1fdffa1911b0cf303d" translate="yes" xml:space="preserve">
          <source>New Moon With Face</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0a4bfd07ff7fd179ef28a5c32dcfb6bc100f78" translate="yes" xml:space="preserve">
          <source>New atomic objects can be created from a non-atomic values; if none is specified, the atomic object is initialized with zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42da565d7b3c34bde47eabec6e6f2994bbe6f925" translate="yes" xml:space="preserve">
          <source>New global bindings are created on destination workers if they are referenced as part of a remote call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcf5911a9a18167d53b9c21f18e27ba0cdf0f2d" translate="yes" xml:space="preserve">
          <source>New line, executing if it is complete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf7ffd18bc132813bddeb711b1027143b9438b3" translate="yes" xml:space="preserve">
          <source>New numeric types should implement this function for two arguments of the new type, and handle comparison to other types via promotion rules where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab8bf1f9729e23910958279e9c76398ca6d35f4" translate="yes" xml:space="preserve">
          <source>New numeric types with a canonical partial order should implement this function for two arguments of the new type. Types with a canonical total order should implement &lt;a href=&quot;../base/index#Base.isless&quot;&gt;&lt;code&gt;isless&lt;/code&gt;&lt;/a&gt; instead. (x &amp;lt; y) | (x == y)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4375e0864ac979046f6e07a8e572643b3f85eecd" translate="yes" xml:space="preserve">
          <source>New objects of type &lt;code&gt;Foo&lt;/code&gt; are created by applying the &lt;code&gt;Foo&lt;/code&gt; type object like a function to values for its fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14debc183a7a71d36ba349a00f8d8faf55873b6" translate="yes" xml:space="preserve">
          <source>New types should generally not implement this, and rely on the fallback definition &lt;code&gt;!=(x,y) = !(x==y)&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5288a6ff5118bf7315848b31718dedea3e423463" translate="yes" xml:space="preserve">
          <source>New types should implement the 2-argument form, typically by calling the 2-argument &lt;code&gt;hash&lt;/code&gt; method recursively in order to mix hashes of the contents with each other (and with &lt;code&gt;h&lt;/code&gt;). Typically, any type that implements &lt;code&gt;hash&lt;/code&gt; should also implement its own &lt;code&gt;==&lt;/code&gt; (hence &lt;code&gt;isequal&lt;/code&gt;) to guarantee the property mentioned above. Types supporting subtraction (operator &lt;code&gt;-&lt;/code&gt;) should also implement &lt;a href=&quot;#Base.widen&quot;&gt;&lt;code&gt;widen&lt;/code&gt;&lt;/a&gt;, which is required to hash values inside heterogeneous arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ebfdd35568644f8081c35fc3f12a59a472803b6" translate="yes" xml:space="preserve">
          <source>Newly launched workers are connected to each other and the master process in an all-to-all manner. Specifying the command line argument &lt;code&gt;--worker[=&amp;lt;cookie&amp;gt;]&lt;/code&gt; results in the launched processes initializing themselves as workers and connections being set up via TCP/IP sockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebe6500747dd5dbad08cc1b33d55fac89ccbe97" translate="yes" xml:space="preserve">
          <source>Newspaper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd14d065cae3dc87a51a7f9bf093bcd68b07382" translate="yes" xml:space="preserve">
          <source>Next integer greater than or equal to &lt;code&gt;n&lt;/code&gt; that can be written as $\prod k_i^{p_i}$ for integers $p_1$, $p_2$, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba200342ccf03d1bafb26bcbb6342a3a0b1643f" translate="yes" xml:space="preserve">
          <source>Next, define the kernel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9875a180491e1b45f1d0759452d83c8b960ad6" translate="yes" xml:space="preserve">
          <source>Next, if the opening &lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; is followed by a newline, the newline is stripped from the resulting string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98ca6cb45da2e13d7f7832cf79ad9c6c39a9b49" translate="yes" xml:space="preserve">
          <source>Nicholas J. Higham, &quot;The squaring and scaling method for the matrix exponential revisited&quot;, SIAM Journal on Matrix Analysis and Applications, 26(4), 2005, 1179-1193. &lt;a href=&quot;https://doi.org/10.1137/090768539&quot;&gt;doi:10.1137/090768539&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9839fb83bfc341f1b5011bf886013fa6dc9c85" translate="yes" xml:space="preserve">
          <source>Night With Stars</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4b68ee82d1457f561bcf2ebd93545d2930b673" translate="yes" xml:space="preserve">
          <source>No Bicycles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300395a40ea5ba24b06bf5bebc77f5acb519cd26" translate="yes" xml:space="preserve">
          <source>No Entry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc67672d1e78df9c7a3ae0058c325f42dbcd6e3" translate="yes" xml:space="preserve">
          <source>No Entry Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c763368e2dec5b9f5a836da233b2fdd7abcf76a" translate="yes" xml:space="preserve">
          <source>No Mobile Phones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73a75f5a045c4f409b30178f7e28e222115eaf07" translate="yes" xml:space="preserve">
          <source>No One Under Eighteen Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30174bd862c1b850d5daf2da97d7d2e0ea07764" translate="yes" xml:space="preserve">
          <source>No Pedestrians</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ef380838898f831b1fb3b2b043fc3b8530cc7f" translate="yes" xml:space="preserve">
          <source>No Smoking Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57eab258ddc4b2c598877a443b028f20a035c6a3" translate="yes" xml:space="preserve">
          <source>No checks are done during parsing to make sure that all footnote references have matching footnotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13a6288d973ec4996b49f9948606ae303dc2af4c" translate="yes" xml:space="preserve">
          <source>No code reload / cache invalidation is performed after changes are made to the source files themselves, (including by &lt;code&gt;Pkg.update&lt;/code&gt;), and no cleanup is done after &lt;code&gt;Pkg.rm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecbe7bcfebb243ae01bf8cd3e5a27e1861e41f26" translate="yes" xml:space="preserve">
          <source>No iteration ever waits on a previous iteration to make forward progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e52b264d00ad4e4f1bda0e1a691bb9244f886ba" translate="yes" xml:space="preserve">
          <source>No more data was available to read from a file or stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fef04914268ffcfc814a2c459f624e4fffeea1f" translate="yes" xml:space="preserve">
          <source>No need to vectorize code for performance; devectorized code is fast</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4cf4302bd72eb2ed70f2329341a5c0f835663c" translate="yes" xml:space="preserve">
          <source>No, you are not allowed to have a &lt;code&gt;using&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt; statement inside a function. If you want to import a module but only use its symbols inside a specific function or set of functions, you have two options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8031546b21c9103c8369b938a711ee94aa6cb0c" translate="yes" xml:space="preserve">
          <source>Nomenclature: while the term &quot;constructor&quot; generally refers to the entire function which constructs objects of a type, it is common to abuse terminology slightly and refer to specific constructor methods as &quot;constructors&quot;. In such situations, it is generally clear from the context that the term is used to mean &quot;constructor method&quot; rather than &quot;constructor function&quot;, especially as it is often used in the sense of singling out a particular method of the constructor from all of the others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5393bce9c456b5dccf1b10b47f64ec8dceba68b0" translate="yes" xml:space="preserve">
          <source>Non recursive version of &lt;a href=&quot;#Base.@macroexpand&quot;&gt;&lt;code&gt;@macroexpand&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd4f1970b7db3e3254ed0b122568de524763f9c" translate="yes" xml:space="preserve">
          <source>Non-Potable Water Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924dd85922c4b4ff6e591e92e7dda2c98a76eb77" translate="yes" xml:space="preserve">
          <source>Non-Standard String Literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b186b7c2f679f7744cb664b1882bcc1ac565fe3" translate="yes" xml:space="preserve">
          <source>Non-associative</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48fc3ac98a8542a16b7dcf01a843d3f0fabfb8c5" translate="yes" xml:space="preserve">
          <source>Non-boolean integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b33187713b64697a972670418561cf355a2a01e" translate="yes" xml:space="preserve">
          <source>Non-constant Function Specifications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f79c9047efe79f312570b471a63dcc86aa67b7" translate="yes" xml:space="preserve">
          <source>Non-numeric types with a total order should implement this function. Numeric types only need to implement it if they have special values such as &lt;code&gt;NaN&lt;/code&gt;. Types with a partial order should implement &lt;code&gt;&amp;lt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba674a48316fb1433436a60a425791cc32b78b0" translate="yes" xml:space="preserve">
          <source>Nonforking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f53a3ef5c6423e5a459f652ffb969748da2787" translate="yes" xml:space="preserve">
          <source>Nor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353d229b6f3ca31bd45bd9bebe8e58269912e930" translate="yes" xml:space="preserve">
          <source>Normal Subgroup Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f48eaa19bcc609000a719de46fc1f3c28fd022" translate="yes" xml:space="preserve">
          <source>Normal Subgroup Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea65c52c4dc34140ff47fd23bf1ce89abf2497b1" translate="yes" xml:space="preserve">
          <source>Normalize a path, removing &quot;.&quot; and &quot;..&quot; entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dff1142e88fe8e90deecc8b52307005080af42f" translate="yes" xml:space="preserve">
          <source>Normalize the string &lt;code&gt;s&lt;/code&gt; according to one of the four &quot;normal forms&quot; of the Unicode standard: &lt;code&gt;normalform&lt;/code&gt; can be &lt;code&gt;:NFC&lt;/code&gt;, &lt;code&gt;:NFD&lt;/code&gt;, &lt;code&gt;:NFKC&lt;/code&gt;, or &lt;code&gt;:NFKD&lt;/code&gt;. Normal forms C (canonical composition) and D (canonical decomposition) convert different visually identical representations of the same abstract string into a single canonical form, with form C being more compact. Normal forms KC and KD additionally canonicalize &quot;compatibility equivalents&quot;: they convert characters that are abstractly similar but visually distinct into a single canonical choice (e.g. they expand ligatures into the individual characters), with form KC being more compact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1256c1ca544db3bbe8bc3cbce15ea1460cf4f911" translate="yes" xml:space="preserve">
          <source>Normalize the vector &lt;code&gt;v&lt;/code&gt; in-place so that its &lt;code&gt;p&lt;/code&gt;-norm equals unity, i.e. &lt;code&gt;norm(v, p) == 1&lt;/code&gt;. See also &lt;a href=&quot;#LinearAlgebra.normalize&quot;&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#LinearAlgebra.norm&quot;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ca0cad26499570c164bc9b04bdb5e73ad3b767" translate="yes" xml:space="preserve">
          <source>Normalize the vector &lt;code&gt;v&lt;/code&gt; so that its &lt;code&gt;p&lt;/code&gt;-norm equals unity, i.e. &lt;code&gt;norm(v, p) == 1&lt;/code&gt;. See also &lt;a href=&quot;#LinearAlgebra.normalize!&quot;&gt;&lt;code&gt;normalize!&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#LinearAlgebra.norm&quot;&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478b31a56bd438b5767a545ce1ed00f11487d0db" translate="yes" xml:space="preserve">
          <source>North East Arrow / Upper Right Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9632ee4c4b3913bab8a246eac9a7aaa6e34c3e" translate="yes" xml:space="preserve">
          <source>North East Arrow And South East Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30cf74356d2a464d3ca7374ff4dc9e2894799efd" translate="yes" xml:space="preserve">
          <source>North East Arrow Crossing North West Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916f9b242f547ef05ec66f2fa83e1592cdbcfdbd" translate="yes" xml:space="preserve">
          <source>North East Arrow Crossing South East Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0e4cc646e9668d5edd815430e5705b8eb0282d0" translate="yes" xml:space="preserve">
          <source>North East Double Arrow / Upper Right Double Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2851194a781dba08882cd8b5dcac7c7bff4bc98b" translate="yes" xml:space="preserve">
          <source>North West Arrow / Upper Left Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233c55eeb0aa49ef4b20ef3585841b43d859f2df" translate="yes" xml:space="preserve">
          <source>North West Arrow And North East Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8af1f130f612aaea28cebf3c5f06dbc620210fa" translate="yes" xml:space="preserve">
          <source>North West Arrow Crossing North East Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21049a5d207abc1091420d168abe05b73221d81" translate="yes" xml:space="preserve">
          <source>North West Arrow To Long Bar / Upper Left Arrow To Long Bar</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef9c199f598a375deeea550d911861c89af3632" translate="yes" xml:space="preserve">
          <source>North West Double Arrow / Upper Left Double Arrow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9f9930aed653b8a960f004b0d33be134abd920" translate="yes" xml:space="preserve">
          <source>Nose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4924b680ce01b04d3901d5887ba0094a80386e09" translate="yes" xml:space="preserve">
          <source>Not &lt;em&gt;all&lt;/em&gt; primitive types can be wrapped in an &lt;code&gt;Atomic&lt;/code&gt; tag. Supported types are &lt;code&gt;Int8&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Int128&lt;/code&gt;, &lt;code&gt;UInt8&lt;/code&gt;, &lt;code&gt;UInt16&lt;/code&gt;, &lt;code&gt;UInt32&lt;/code&gt;, &lt;code&gt;UInt64&lt;/code&gt;, &lt;code&gt;UInt128&lt;/code&gt;, &lt;code&gt;Float16&lt;/code&gt;, &lt;code&gt;Float32&lt;/code&gt;, and &lt;code&gt;Float64&lt;/code&gt;. Additionally, &lt;code&gt;Int128&lt;/code&gt; and &lt;code&gt;UInt128&lt;/code&gt; are not supported on AAarch32 and ppc64le.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c45a3975806f5aa3563e402ab48284ba7dd19a" translate="yes" xml:space="preserve">
          <source>Not A Subset Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17eca69bf167ebef605d6f511649ff7e242d247" translate="yes" xml:space="preserve">
          <source>Not A Superset Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9d785d0ab5238febfc3ab6b86ae20357096f11" translate="yes" xml:space="preserve">
          <source>Not Almost Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67d6c66a36751875c25ecc62a3d848e35280e41" translate="yes" xml:space="preserve">
          <source>Not An Element Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71b2d4992fb3377f88d850b0bb44606967664d0" translate="yes" xml:space="preserve">
          <source>Not Asymptotically Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e19001a3da6b3e710f2e1e08a6e032b4620604c" translate="yes" xml:space="preserve">
          <source>Not Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45023c8868a909904028b86e6e07605ae94f2c2" translate="yes" xml:space="preserve">
          <source>Not Equivalent To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910c9a23745ec45bdbd8919929b0387676a27c9b" translate="yes" xml:space="preserve">
          <source>Not Greater-Than / Not Greater Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e65900a18143b1e895a94ccc959abe15bb1ab2e" translate="yes" xml:space="preserve">
          <source>Not Identical To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a2159809150c92b1584b86470e09ba5081e939" translate="yes" xml:space="preserve">
          <source>Not Less-Than / Not Less Than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fed8df1648d0557424154c2315a039c686f4c4d" translate="yes" xml:space="preserve">
          <source>Not Normal Subgroup Of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="645b3d2b60dd6a7e0784186eff65f0733da3c390" translate="yes" xml:space="preserve">
          <source>Not Normal Subgroup Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70cb8e0c40ae6f2469c6439d1eaf86fb7dd00f0f" translate="yes" xml:space="preserve">
          <source>Not Parallel To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ab2276b84dac0a395ff693634647ac47704aca7" translate="yes" xml:space="preserve">
          <source>Not Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eca01d40cd859c6c6d1c5a246f8d23349bd1b255" translate="yes" xml:space="preserve">
          <source>Not Square Image Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c087d8ffd300334402de9a832da5d7584b88f65" translate="yes" xml:space="preserve">
          <source>Not Square Original Of Or Equal To</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f0c2899fae2d3fccc6eaa170295b507e0f676c" translate="yes" xml:space="preserve">
          <source>Not Tilde</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e43a0344ab0a9a991f8d1b272b6b2064a08d9f" translate="yes" xml:space="preserve">
          <source>Not True</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7776746fa92a51dd2e030d64afc4c033677251e7" translate="yes" xml:space="preserve">
          <source>Not all integer values are valid Unicode code points, but for performance, the &lt;code&gt;Char&lt;/code&gt; conversion does not check that every character value is valid. If you want to check that each converted value is a valid code point, use the &lt;code&gt;isvalid&lt;/code&gt; function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255c75003762a3b928c02073fccb1659790b5337" translate="yes" xml:space="preserve">
          <source>Not all iterator types &lt;code&gt;T&lt;/code&gt; support reverse-order iteration. If &lt;code&gt;T&lt;/code&gt; doesn't, then iterating over &lt;code&gt;Iterators.reverse(itr::T)&lt;/code&gt; will throw a &lt;a href=&quot;../base/index#Core.MethodError&quot;&gt;&lt;code&gt;MethodError&lt;/code&gt;&lt;/a&gt; because of the missing &lt;a href=&quot;../collections/index#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt; methods for &lt;code&gt;Iterators.Reverse{T}&lt;/code&gt;. (To implement these methods, the original iterator &lt;code&gt;itr::T&lt;/code&gt; can be obtained from &lt;code&gt;r = Iterators.reverse(itr)&lt;/code&gt; by &lt;code&gt;r.itr&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b9146c66e430511ba5e31c64bc766e0b09ba88" translate="yes" xml:space="preserve">
          <source>Not all types support &lt;code&gt;axes&lt;/code&gt; and indexing, but many are convenient to allow in broadcast. The &lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcastable&quot;&gt;&lt;code&gt;Base.broadcastable&lt;/code&gt;&lt;/a&gt; function is called on each argument to broadcast, allowing it to return something different that supports &lt;code&gt;axes&lt;/code&gt; and indexing. By default, this is the identity function for all &lt;code&gt;AbstractArray&lt;/code&gt;s and &lt;code&gt;Number&lt;/code&gt;s &amp;mdash; they already support &lt;code&gt;axes&lt;/code&gt; and indexing. For a handful of other types (including but not limited to types themselves, functions, special singletons like &lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt;, and dates), &lt;code&gt;Base.broadcastable&lt;/code&gt; returns the argument wrapped in a &lt;code&gt;Ref&lt;/code&gt; to act as a 0-dimensional &quot;scalar&quot; for the purposes of broadcasting. Custom types can similarly specialize &lt;code&gt;Base.broadcastable&lt;/code&gt; to define their shape, but they should follow the convention that &lt;code&gt;collect(Base.broadcastable(x)) == collect(x)&lt;/code&gt;. A notable exception is &lt;code&gt;AbstractString&lt;/code&gt;; strings are special-cased to behave as scalars for the purposes of broadcast even though they are iterable collections of their characters (see &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/ast/#Strings-1&quot;&gt;Strings&lt;/a&gt; for more).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376b17f23ac9bcdac899ff816a9bc77c9e5acbff" translate="yes" xml:space="preserve">
          <source>Not only is lack of associativity unfortunate for programmers who cannot rely it for techniques like this, but it also defeats almost anything compilers might want to do to optimize integer arithmetic. For example, since Julia integers use normal machine integer arithmetic, LLVM is free to aggressively optimize simple little functions like &lt;code&gt;f(k) = 5k-1&lt;/code&gt;. The machine code for this function is just this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e53323374f02c10d280447ec7713899b4aba54" translate="yes" xml:space="preserve">
          <source>Not only is the string literal form shorter and far more convenient, but it is also more efficient: since the regular expression is compiled and the &lt;code&gt;Regex&lt;/code&gt; object is actually created &lt;em&gt;when the code is compiled&lt;/em&gt;, the compilation occurs only once, rather than every time the code is executed. Consider if the regular expression occurs in a loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e635455c1c04acc72cc3cb8b3930fa2002922c7" translate="yes" xml:space="preserve">
          <source>Not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578b6ae41c55ac5817217df1b33fc68cc954cc58" translate="yes" xml:space="preserve">
          <source>Not to be confused with &lt;code&gt;Sys.isbsd()&lt;/code&gt;, which is &lt;code&gt;true&lt;/code&gt; on DragonFly but also on other BSD-based systems. &lt;code&gt;Sys.isdragonfly()&lt;/code&gt; refers only to DragonFly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42de750af9292296d2996dbdfe296c15be6dc0d" translate="yes" xml:space="preserve">
          <source>Not to be confused with &lt;code&gt;Sys.isbsd()&lt;/code&gt;, which is &lt;code&gt;true&lt;/code&gt; on FreeBSD but also on other BSD-based systems. &lt;code&gt;Sys.isfreebsd()&lt;/code&gt; refers only to FreeBSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7b8351c728f277ea375c49956a749253ca4ccd" translate="yes" xml:space="preserve">
          <source>Not to be confused with &lt;code&gt;Sys.isbsd()&lt;/code&gt;, which is &lt;code&gt;true&lt;/code&gt; on NetBSD but also on other BSD-based systems. &lt;code&gt;Sys.isnetbsd()&lt;/code&gt; refers only to NetBSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e040fc63d08da8130023e8bf1da51746be0eb3" translate="yes" xml:space="preserve">
          <source>Not to be confused with &lt;code&gt;Sys.isbsd()&lt;/code&gt;, which is &lt;code&gt;true&lt;/code&gt; on OpenBSD but also on other BSD-based systems. &lt;code&gt;Sys.isopenbsd()&lt;/code&gt; refers only to OpenBSD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054fdc1887c4bd534bac1d0a3aea062860f9859e" translate="yes" xml:space="preserve">
          <source>Not-equals comparison operator. Always gives the opposite answer as &lt;a href=&quot;#Base.:==&quot;&gt;&lt;code&gt;==&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a97115f7efbdab23d7b34d2c40462b51cbb049d" translate="yes" xml:space="preserve">
          <source>Notably missing from this table are &lt;a href=&quot;../control-flow/index#man-compound-expressions-1&quot;&gt;begin blocks&lt;/a&gt; and &lt;a href=&quot;../control-flow/index#man-conditional-evaluation-1&quot;&gt;if blocks&lt;/a&gt; which do &lt;em&gt;not&lt;/em&gt; introduce new scopes. Both types of scopes follow somewhat different rules which will be explained below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849d9173bfaa5bb4ab294b9df21a5967dcab8225" translate="yes" xml:space="preserve">
          <source>Note also that container types, specifically may need type parameters in function calls. See the FAQ &lt;a href=&quot;../performance-tips/index#Avoid-fields-with-abstract-containers-1&quot;&gt;Avoid fields with abstract containers&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a53f93a486d8d7a57250d379f8edb9cd25043f3" translate="yes" xml:space="preserve">
          <source>Note how each even iteration is significantly faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b5f982274ede3eb024b1d3b08e8e7c8741dfd9" translate="yes" xml:space="preserve">
          <source>Note how the size of the resulting array is different in the last two cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d976f8413bff8e1f0c6cdf63fd9bf71518cc2d9f" translate="yes" xml:space="preserve">
          <source>Note on Optional and keyword Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28ded9fb86e90fa4e9b6fc5221352277f1f430d" translate="yes" xml:space="preserve">
          <source>Note that &quot;constant-ness&quot; does not extend into mutable containers; only the association between a variable and its value is constant. If &lt;code&gt;x&lt;/code&gt; is an array or dictionary (for example) you can still modify, add, or remove elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696a1593f42fbf6fdb11b6e9d243436195a50762" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../base/base/index#Core.DomainError&quot;&gt;&lt;code&gt;DomainError&lt;/code&gt;&lt;/a&gt; without parentheses is not an exception, but a type of exception. It needs to be called to obtain an &lt;code&gt;Exception&lt;/code&gt; object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8007f62d26730fb9d23ad56c13276aa54218371" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../base/io-network/index#Base.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; returns 11, the number of bytes (in &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt;) written to &lt;a href=&quot;../../base/io-network/index#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, but this return value is suppressed with the &lt;code&gt;;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37adaed47b6bd184e2c19006696ca9a54db365b6" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../../base/multi-threading/index#Base.Threads.@threads&quot;&gt;&lt;code&gt;Threads.@threads&lt;/code&gt;&lt;/a&gt; does not have an optional reduction parameter like &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@distributed&quot;&gt;&lt;code&gt;@distributed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeada1a815471b81eb3fba82f7ffa1d182b6efc4" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;3/4im == 3/(4*im) == -(3/4*im)&lt;/code&gt;, since a literal coefficient binds more tightly than division.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28e4307aa56a3047fa10fe081f2a2b0189f815e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;@fastmath&lt;/code&gt; also assumes that &lt;code&gt;NaN&lt;/code&gt;s will not occur during the computation, which can lead to surprising behavior:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f37755c76cb167a60db94665d8037a8b6d4b88" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Hupper&lt;/code&gt; will not be equal to &lt;code&gt;Hlower&lt;/code&gt; unless &lt;code&gt;A&lt;/code&gt; is itself Hermitian (e.g. if &lt;code&gt;A == adjoint(A)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e856098b5c682029aff8a00fd63966146351870" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;Supper&lt;/code&gt; will not be equal to &lt;code&gt;Slower&lt;/code&gt; unless &lt;code&gt;A&lt;/code&gt; is itself symmetric (e.g. if &lt;code&gt;A == transpose(A)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5d20eb7b7b4658ec16f617a8d465aa8cefd27a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;a&lt;/code&gt; is written to &lt;a href=&quot;../../base/io-network/index#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; by the &lt;a href=&quot;../../base/io-network/index#Base.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; function and that the returned value is &lt;code&gt;1&lt;/code&gt; (since &lt;code&gt;0x61&lt;/code&gt; is one byte).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ba0090143db57a2046b4bea0136a386cb43ff2" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;const&lt;/code&gt; only affects the variable binding; the variable may be bound to a mutable object (such as an array), and that object may still be modified. Additionally when one tries to assign a value to a variable that is declared constant the following scenarios are possible:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71dd5c1dc13bb0d3426a39b5d80f1ab214d1505" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;const&lt;/code&gt; only applies to one &lt;code&gt;=&lt;/code&gt; operation, therefore &lt;code&gt;const x = y = 1&lt;/code&gt; declares &lt;code&gt;x&lt;/code&gt; to be constant but not &lt;code&gt;y&lt;/code&gt;. On the other hand, &lt;code&gt;const x = const y = 1&lt;/code&gt; declares both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da2dbc9c6e30c7173aed1390cec1b44955d9a0a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;f&lt;/code&gt; must be made available to all worker processes; see &lt;a href=&quot;../../manual/parallel-computing/index#code-availability-1&quot;&gt;Code Availability and Loading Packages&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d4b4f20914a2f80297acf7d51d2f544ab0b677" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;islinux&lt;/code&gt;, &lt;code&gt;isapple&lt;/code&gt;, and &lt;code&gt;isfreebsd&lt;/code&gt; are mutually exclusive subsets of &lt;code&gt;isunix&lt;/code&gt;. Additionally, there is a macro &lt;code&gt;@static&lt;/code&gt; which makes it possible to use these functions to conditionally hide invalid code, as demonstrated in the following examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecce05e977eeb562c214d3763cad6d310a27574a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;objectid&lt;/code&gt; (which works by hashing the memory pointer) has similar issues (see notes on &lt;code&gt;Dict&lt;/code&gt; usage below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec4ef0812f3a86c7546a41bb6d9a828672c6b6b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;repr(x)&lt;/code&gt; is usually similar to how the value of &lt;code&gt;x&lt;/code&gt; would be entered in Julia. See also &lt;a href=&quot;#Base.repr-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;repr(MIME(&quot;text/plain&quot;), x)&lt;/code&gt;&lt;/a&gt; to instead return a &quot;pretty-printed&quot; version of &lt;code&gt;x&lt;/code&gt; designed more for human consumption, equivalent to the REPL display of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c63c24c562ebbeffd401b993abf9ea07344548e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;size&lt;/code&gt; may not be defined for arrays with non-standard indices, in which case &lt;a href=&quot;#Base.axes-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;axes&lt;/code&gt;&lt;/a&gt; may be useful. See the manual chapter on &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/offset-arrays/#man-custom-indices-1&quot;&gt;arrays with custom indices&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb1ecefd80819ec38c7d5d7a2809bfae7568534" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;x &amp;asymp; 0&lt;/code&gt; (i.e., comparing to zero with the default tolerances) is equivalent to &lt;code&gt;x == 0&lt;/code&gt; since the default &lt;code&gt;atol&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;. In such cases, you should either supply an appropriate &lt;code&gt;atol&lt;/code&gt; (or use &lt;code&gt;norm(x) &amp;le; atol&lt;/code&gt;) or rearrange your code (e.g. use &lt;code&gt;x &amp;asymp; y&lt;/code&gt; rather than &lt;code&gt;x - y &amp;asymp; 0&lt;/code&gt;). It is not possible to pick a nonzero &lt;code&gt;atol&lt;/code&gt; automatically because it depends on the overall scaling (the &quot;units&quot;) of your problem: for example, in &lt;code&gt;x - y &amp;asymp; 0&lt;/code&gt;, &lt;code&gt;atol=1e-9&lt;/code&gt; is an absurdly small tolerance if &lt;code&gt;x&lt;/code&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Earth_radius&quot;&gt;radius of the Earth&lt;/a&gt; in meters, but an absurdly large tolerance if &lt;code&gt;x&lt;/code&gt; is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bohr_radius&quot;&gt;radius of a Hydrogen atom&lt;/a&gt; in meters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24da7a9bc07548c8c342e439381af79ca72b7da1" translate="yes" xml:space="preserve">
          <source>Note that &lt;em&gt;nested functions&lt;/em&gt; can modify their parent scope's &lt;em&gt;local&lt;/em&gt; variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff66b89cf231ebebae6ac564e03e80821f0734a" translate="yes" xml:space="preserve">
          <source>Note that a single space must appear after the &lt;code&gt;&amp;gt;&lt;/code&gt; character on each line. Quoted blocks may themselves contain other toplevel or inline elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df038700fc9ed1f2d0e5d9e1529bee38f9f6f0ec" translate="yes" xml:space="preserve">
          <source>Note that although parallel for loops look like serial for loops, their behavior is dramatically different. In particular, the iterations do not happen in a specified order, and writes to variables or arrays will not be globally visible since iterations run on different processes. Any variables used inside the parallel loop will be copied and broadcast to each process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94aa43e85ddde561947d2c3630080b0641c93455" translate="yes" xml:space="preserve">
          <source>Note that although sometimes possible, changing the value of a &lt;code&gt;const&lt;/code&gt; variable is strongly discouraged, and is intended only for convenience during interactive use. Changing constants can cause various problems or unexpected behaviors. For instance, if a method references a constant and is already compiled before the constant is changed then it might keep using the old value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3d59a18530117c201d12384305dcff7641d465" translate="yes" xml:space="preserve">
          <source>Note that an error will be thrown if &lt;code&gt;types&lt;/code&gt; are not leaf types when &lt;code&gt;generated&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and any of the corresponding methods are an &lt;code&gt;@generated&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de63020091c1737ae855533fa49f1548ba9bc637" translate="yes" xml:space="preserve">
          <source>Note that comparisons such as &lt;code&gt;==&lt;/code&gt; operate on whole arrays, giving a single boolean answer. Use dot operators like &lt;code&gt;.==&lt;/code&gt; for elementwise comparisons. (For comparison operations like &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;em&gt;only&lt;/em&gt; the elementwise &lt;code&gt;.&amp;lt;&lt;/code&gt; version is applicable to arrays.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7284837c88b7791c6b3428c825f7f45c66f72e65" translate="yes" xml:space="preserve">
          <source>Note that currently Julia tasks are not scheduled to run on separate CPU cores. True kernel threads are discussed under the topic of &lt;a href=&quot;../parallel-computing/index#Parallel-Computing-1&quot;&gt;Parallel Computing&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3beb748b948689adb5a3e8b4c3e812101bb26004" translate="yes" xml:space="preserve">
          <source>Note that depending on your terminal settings, your TTY may be line buffered and might thus require an additional enter before the data is sent to Julia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349e4d1b361394f80e838bc17f47bce14935730e" translate="yes" xml:space="preserve">
          <source>Note that environments requiring higher levels of security can implement this via a custom &lt;code&gt;ClusterManager&lt;/code&gt;. For example, cookies can be pre-shared and hence not specified as a startup argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb9bdb3f2e4e941bd30620b1ce6b0954c3e0db3" translate="yes" xml:space="preserve">
          <source>Note that equivalent expressions may be constructed using &lt;code&gt;Meta.parse&lt;/code&gt; or the direct &lt;code&gt;Expr&lt;/code&gt; form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d754196211a26fe919af9c527a7cbca9ed7d86d3" translate="yes" xml:space="preserve">
          <source>Note that events may be coalesced, so multiple calls to &lt;code&gt;uv_async_send&lt;/code&gt; may result in a single wakeup notification to the condition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4849ca2aa20715f560db64abeae419c21262c08" translate="yes" xml:space="preserve">
          <source>Note that for this code to work correctly, &lt;code&gt;result_array&lt;/code&gt; must be declared to be of type &lt;code&gt;Ref{Cdouble}&lt;/code&gt; and not &lt;code&gt;Ptr{Cdouble}&lt;/code&gt;. The memory is managed by Julia and the &lt;code&gt;Ref&lt;/code&gt; signature alerts Julia's garbage collector to keep managing the memory for &lt;code&gt;result_array&lt;/code&gt; while the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; executes. If &lt;code&gt;Ptr{Cdouble}&lt;/code&gt; were used instead, the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; may still work, but Julia's garbage collector would not be aware that the memory declared for &lt;code&gt;result_array&lt;/code&gt; is being used by the external C function. As a result, the code may produce a memory leak if &lt;code&gt;result_array&lt;/code&gt; never gets freed by the garbage collector, or if the garbage collector prematurely frees &lt;code&gt;result_array&lt;/code&gt;, the C function may end up throwing an invalid memory access exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33dfe8b7bf03d2d566e94e83790270ed34bc079e" translate="yes" xml:space="preserve">
          <source>Note that if both &lt;code&gt;on_error&lt;/code&gt; and &lt;code&gt;retry_delays&lt;/code&gt; are specified, the &lt;code&gt;on_error&lt;/code&gt; hook is called before retrying. If &lt;code&gt;on_error&lt;/code&gt; does not throw (or rethrow) an exception, the element will not be retried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8626fd0453edd656ad43ae0bf974587f0b161aee" translate="yes" xml:space="preserve">
          <source>Note that if two or more &lt;code&gt;AbstractArrayStyle&lt;/code&gt; subtypes conflict, broadcasting machinery will fall back to producing &lt;code&gt;Array&lt;/code&gt;s. If this is undesirable, you may need to define binary &lt;a href=&quot;#Base.Broadcast.BroadcastStyle&quot;&gt;&lt;code&gt;BroadcastStyle&lt;/code&gt;&lt;/a&gt; rules to control the output type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4a4bbb303899c3b42bdc6b997f22ea80f22b9e" translate="yes" xml:space="preserve">
          <source>Note that in the above example the non-standard version number &lt;code&gt;v&quot;0.3-&quot;&lt;/code&gt; is used, with a trailing &lt;code&gt;-&lt;/code&gt;: this notation is a Julia extension of the standard, and it's used to indicate a version which is lower than any &lt;code&gt;0.3&lt;/code&gt; release, including all of its pre-releases. So in the above example the code would only run with stable &lt;code&gt;0.2&lt;/code&gt; versions, and exclude such versions as &lt;code&gt;v&quot;0.3.0-rc1&quot;&lt;/code&gt;. In order to also allow for unstable (i.e. pre-release) &lt;code&gt;0.2&lt;/code&gt; versions, the lower bound check should be modified like this: &lt;code&gt;v&quot;0.2-&quot; &amp;lt;= VERSION&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be55fa4cd393d6af048c6d169ea98f1e7964ae3" translate="yes" xml:space="preserve">
          <source>Note that in this form, the variables are listed outermost-first. This matches the order in which variables are substituted when a type is &quot;applied&quot; to parameter values using the syntax &lt;code&gt;T{p1, p2, ...}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="498b2a62007ef2fa8b25a9e52137f4198851e2fb" translate="yes" xml:space="preserve">
          <source>Note that it's very important to specify the two parameters of the &lt;code&gt;AbstractArray&lt;/code&gt;; the first defines the &lt;a href=&quot;../../base/collections/index#Base.eltype&quot;&gt;&lt;code&gt;eltype&lt;/code&gt;&lt;/a&gt;, and the second defines the &lt;a href=&quot;../../base/arrays/index#Base.ndims&quot;&gt;&lt;code&gt;ndims&lt;/code&gt;&lt;/a&gt;. That supertype and those three methods are all it takes for &lt;code&gt;SquaresVector&lt;/code&gt; to be an iterable, indexable, and completely functional array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431d8af921ae8dd91eb1906a8ae4ef18ccab5ae1" translate="yes" xml:space="preserve">
          <source>Note that line breaks in literal strings, whether single- or triple-quoted, result in a newline (LF) character &lt;code&gt;\n&lt;/code&gt; in the string, even if your editor uses a carriage return &lt;code&gt;\r&lt;/code&gt; (CR) or CRLF combination to end lines. To include a CR in a string, use an explicit escape &lt;code&gt;\r&lt;/code&gt;; for example, you can enter the literal string &lt;code&gt;&quot;a CRLF line ending\r\n&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606154b87124703b920a4f5ad5aaefe035ca6c54" translate="yes" xml:space="preserve">
          <source>Note that mathematical functions typically return real values when applied to real numbers and complex values when applied to complex numbers. For example, &lt;code&gt;sqrt&lt;/code&gt; behaves differently when applied to &lt;code&gt;-1&lt;/code&gt; versus &lt;code&gt;-1 + 0im&lt;/code&gt; even though &lt;code&gt;-1 == -1 + 0im&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eda807989afc4e218057d81b9286e37073a79b3" translate="yes" xml:space="preserve">
          <source>Note that no C header files are used anywhere in the process of calling C functions: you are responsible for making sure that your Julia types and call signatures accurately reflect those in the C header file. (The &lt;a href=&quot;https://github.com/ihnorton/Clang.jl&quot;&gt;Clang package&lt;/a&gt; can be used to auto-generate Julia code from a C header file.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183a9f50d7f1857c8647ee5fe93d5bbd7477e31c" translate="yes" xml:space="preserve">
          <source>Note that no call to &lt;code&gt;free&lt;/code&gt; is required as the data is allocated by Julia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb133414980d856fc96bbdc597dbac34e0ca4ba" translate="yes" xml:space="preserve">
          <source>Note that relative-import qualifiers are only valid in &lt;code&gt;using&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7b363c54f5b2b7264272e13433592e29120ac0" translate="yes" xml:space="preserve">
          <source>Note that symbols such as &lt;code&gt;:sin&lt;/code&gt; return precedence &lt;code&gt;0&lt;/code&gt;. This value represents invalid operators and not operators of lowest precedence. Similarly, such operators are assigned associativity &lt;code&gt;:none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80443d11b9c17836808e9bbc89413ca09c77f642" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;../../base/io-network/index#Base.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method mentioned above operates on binary streams. In particular, values do not get converted to any canonical text representation but are written out as is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0204290a5fdf9ea4887ee000c8c1756c0892f9d8" translate="yes" xml:space="preserve">
          <source>Note that the LAPACK API provided by Julia can and will change in the future. Since this API is not user-facing, there is no commitment to support/deprecate this specific set of functions in future releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0eb4027dfd56b0c3ba1c07c0fa8ab9ef0924d1" translate="yes" xml:space="preserve">
          <source>Note that the above nesting rules do not pertain to type and macro definitions as they can only appear at the global scope. There are special scoping rules concerning the evaluation of default and keyword function arguments which are described in the &lt;a href=&quot;../functions/index#man-functions-1&quot;&gt;Function section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773b4fdf9694adf7f3707027d9426f0fc3ce50f4" translate="yes" xml:space="preserve">
          <source>Note that the argument type tuple must be a literal tuple, and not a tuple-valued variable or expression (although it can include a splat expression). And that these arguments will be evaluated in global scope during compile-time (not deferred until runtime). Adding a '$' in front of the function argument changes this to instead create a runtime closure over the local variable &lt;code&gt;callable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242e7f9d29400b013c5ba3cc47959df71abf9a55" translate="yes" xml:space="preserve">
          <source>Note that the argument type tuple must be a literal tuple, and not a tuple-valued variable or expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c38c436778b1dcecb24bcf6a6967cf9d78faefe3" translate="yes" xml:space="preserve">
          <source>Note that the argument type tuple must be written as &lt;code&gt;(Cstring,)&lt;/code&gt;, rather than &lt;code&gt;(Cstring)&lt;/code&gt;. This is because &lt;code&gt;(Cstring)&lt;/code&gt; is just the expression &lt;code&gt;Cstring&lt;/code&gt; surrounded by parentheses, rather than a 1-tuple containing &lt;code&gt;Cstring&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b481f8f4087ae7ce46e79bd983600ff5e0124bb" translate="yes" xml:space="preserve">
          <source>Note that the behavior of &lt;code&gt;convert(T, x)&lt;/code&gt; appears to be nearly identical to &lt;code&gt;T(x)&lt;/code&gt;. Indeed, it usually is. However, there is a key semantic difference: since &lt;code&gt;convert&lt;/code&gt; can be called implicitly, its methods are restricted to cases that are considered &quot;safe&quot; or &quot;unsurprising&quot;. &lt;code&gt;convert&lt;/code&gt; will only convert between types that represent the same basic kind of thing (e.g. different representations of numbers, or different string encodings). It is also usually lossless; converting a value to a different type and back again should result in the exact same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de8cab5819ee3b0454c8698908ed4fca8fb69a34" translate="yes" xml:space="preserve">
          <source>Note that the body returns a quoted expression, namely &lt;code&gt;:(x * x)&lt;/code&gt;, rather than just the value of &lt;code&gt;x * x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da223622416ae78baf74a5fc7606f5c2031025b7" translate="yes" xml:space="preserve">
          <source>Note that the called function should never call back into Julia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4fe61bffc97cc873094be9b6ff384b4a7f4cb2" translate="yes" xml:space="preserve">
          <source>Note that the interactive prompt (aka REPL) is in the global scope of the module &lt;code&gt;Main&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a7dbc6956af25ac60c32e9cb274b0c6fab138a" translate="yes" xml:space="preserve">
          <source>Note that the return type of the last invocation is different. This is because this server does not listen on TCP, but rather on a named pipe (Windows) or UNIX domain socket. Also note that Windows named pipe format has to be a specific pattern such that the name prefix (&lt;code&gt;\\.\pipe\&lt;/code&gt;) uniquely identifies the &lt;a href=&quot;https://docs.microsoft.com/windows/desktop/ipc/pipe-names&quot;&gt;file type&lt;/a&gt;. The difference between TCP and named pipes or UNIX domain sockets is subtle and has to do with the &lt;a href=&quot;../../stdlib/sockets/index#Sockets.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;connect&lt;/code&gt; methods. The &lt;a href=&quot;../../stdlib/sockets/index#Sockets.accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; method retrieves a connection to the client that is connecting on the server we just created, while the &lt;code&gt;connect&lt;/code&gt; function connects to a server using the specified method. The &lt;code&gt;connect&lt;/code&gt; function takes the same arguments as &lt;code&gt;listen&lt;/code&gt;, so, assuming the environment (i.e. host, cwd, etc.) is the same you should be able to pass the same arguments to &lt;code&gt;connect&lt;/code&gt; as you did to listen to establish the connection. So let's try that out (after having created the server above):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd40c0b58dda0e7d5d9e1d231741d7f693239a0" translate="yes" xml:space="preserve">
          <source>Note that the set of operations that should not be attempted in a generated function is unbounded, and the runtime system can currently only detect a subset of the invalid operations. There are many other operations that will simply corrupt the runtime system without notification, usually in subtle ways not obviously connected to the bad definition. Because the function generator is run during inference, it must respect all of the limitations of that code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098c77a244efd4dcb7a85ef8231c87ef6a79d308" translate="yes" xml:space="preserve">
          <source>Note that the style is not to indent the body of the module, since that would typically lead to whole files being indented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65dec74aa9406a63b1a11d6bdf0569c8ebb5a00" translate="yes" xml:space="preserve">
          <source>Note that the symbol following &lt;code&gt;catch&lt;/code&gt; will always be interpreted as a name for the exception, so care is needed when writing &lt;code&gt;try/catch&lt;/code&gt; expressions on a single line. The following code will &lt;em&gt;not&lt;/em&gt; work to return the value of &lt;code&gt;x&lt;/code&gt; in case of an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe90e4507c70efe5bc46591274db5ae42533566c" translate="yes" xml:space="preserve">
          <source>Note that there is no printout of &lt;a href=&quot;../../base/numbers/index#Core.Int64&quot;&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/a&gt;. We can see that the body of the generated function was only executed once here, for the specific set of argument types, and the result was cached. After that, for this example, the expression returned from the generated function on the first invocation was re-used as the method body. However, the actual caching behavior is an implementation-defined performance optimization, so it is invalid to depend too closely on this behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea0d770c1aabeba8e6465e5630623becb93c780" translate="yes" xml:space="preserve">
          <source>Note that this broad category includes characters such as &amp;frac34; and ௰. Use &lt;a href=&quot;#Base.Unicode.isdigit&quot;&gt;&lt;code&gt;isdigit&lt;/code&gt;&lt;/a&gt; to check whether a character a decimal digit between 0 and 9.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bce16da8eb5fd4ccc3e853fc20098d7bbd0e2e" translate="yes" xml:space="preserve">
          <source>Note that this does not apply to globals created under module &lt;code&gt;Main&lt;/code&gt;. Globals under module &lt;code&gt;Main&lt;/code&gt; are serialized and new bindings created under &lt;code&gt;Main&lt;/code&gt; on the remote node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="decefaec1642643605dc8ee1c5de68e2852a981d" translate="yes" xml:space="preserve">
          <source>Note that this function is equivalent to, but more efficient than, calling &lt;code&gt;sortperm(...)[k]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07027027168426f4f2b4f5df57b78ff2fab63d3" translate="yes" xml:space="preserve">
          <source>Note that this is currently only supported for &lt;code&gt;T == BigFloat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0687d76141aed2877a1dff058cc77fb55f506a" translate="yes" xml:space="preserve">
          <source>Note that very short conditional statements (one-liners) are frequently expressed using Short-Circuit Evaluation in Julia, as outlined in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c15c95912e4eeb3f6bc8a0cd88bc94054fd059" translate="yes" xml:space="preserve">
          <source>Note that we did not have to explicitly close the channel in the producer. This is because the act of binding a &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; associates the open lifetime of a channel with that of the bound task. The channel object is closed automatically when the task terminates. Multiple channels can be bound to a task, and vice-versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a041f4940ddd89a348e7d26f6b6538be977f726f" translate="yes" xml:space="preserve">
          <source>Note that we used &lt;code&gt;1 .+ fetch(r)&lt;/code&gt; instead of &lt;code&gt;1 .+ r&lt;/code&gt;. This is because we do not know where the code will run, so in general a &lt;code&gt;fetch&lt;/code&gt; might be required to move &lt;code&gt;r&lt;/code&gt; to the process doing the addition. In this case, &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawn&quot;&gt;&lt;code&gt;@spawn&lt;/code&gt;&lt;/a&gt; is smart enough to perform the computation on the process that owns &lt;code&gt;r&lt;/code&gt;, so the &lt;code&gt;fetch&lt;/code&gt; will be a no-op (no work is done).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfb57351589495d2dd8de2006388f09857c0744" translate="yes" xml:space="preserve">
          <source>Note that when calling &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace()&lt;/code&gt;&lt;/a&gt; you'll typically see a frame with &lt;code&gt;eval at boot.jl&lt;/code&gt;. When calling &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace()&lt;/code&gt;&lt;/a&gt; from the REPL you'll also have a few extra frames in the stack from &lt;code&gt;REPL.jl&lt;/code&gt;, usually looking something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0336c6d353bdf069375cc4ebc53bc56d524d283" translate="yes" xml:space="preserve">
          <source>Note that when using &lt;code&gt;ccall&lt;/code&gt; with the tuple input (e.g., &lt;code&gt;ccall((:my_fcn, &quot;./my_lib.so&quot;), ...)&lt;/code&gt;), the library is opened implicitly and it may not be explicitly closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7755931bfc7e42557f4980dc1550eb2a0697dbe" translate="yes" xml:space="preserve">
          <source>Note that while Julia code runs on a single thread (by default), libraries used by Julia may launch their own internal threads. For example, the BLAS library may start as many threads as there are cores on a machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d81223c9c8d2eeed50e8859a101793fd1716551" translate="yes" xml:space="preserve">
          <source>Note that whitespace in your doctest is significant! The doctest will fail if you misalign the output of pretty-printing an array, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5a7cad245d42f3ac5b5566f1d477628cb424e9" translate="yes" xml:space="preserve">
          <source>Note that without a reducer function, &lt;code&gt;@distributed&lt;/code&gt; executes asynchronously, i.e. it spawns independent tasks on all available workers and returns immediately without waiting for completion. To wait for completion, prefix the call with &lt;a href=&quot;../../base/parallel/index#Base.@sync&quot;&gt;&lt;code&gt;@sync&lt;/code&gt;&lt;/a&gt;, like :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b82f9fcca40e4c57bacd44e7da3e166bdb809a5" translate="yes" xml:space="preserve">
          <source>Note that workers do not run a &lt;code&gt;.julia/config/startup.jl&lt;/code&gt; startup script, nor do they synchronize their global state (such as global variables, new method definitions, and loaded modules) with any of the other running processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c96de6543363babe91fa2bd5f4b7d12201ebc82e" translate="yes" xml:space="preserve">
          <source>Note that workers do not run a &lt;code&gt;~/.julia/config/startup.jl&lt;/code&gt; startup script, nor do they synchronize their global state (such as global variables, new method definitions, and loaded modules) with any of the other running processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d8a230b804b324888f6d3a86be63b3abee81ae" translate="yes" xml:space="preserve">
          <source>Note that you can also use &lt;code&gt;string(...)&lt;/code&gt; to concatenate strings (and other values converted to strings); similarly, &lt;code&gt;repeat&lt;/code&gt; can be used instead of &lt;code&gt;^&lt;/code&gt; to repeat strings. The &lt;a href=&quot;../strings/index#string-interpolation-1&quot;&gt;interpolation syntax&lt;/a&gt; is also useful for constructing strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc21cdea00752ec368b11bbb1559eb6ea1d10cf4" translate="yes" xml:space="preserve">
          <source>Note that, at the time of this writing, the SHA3 code is not optimized, and as such is roughly an order of magnitude slower than SHA2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f69f72ec1b9af255308c07545be2fc8d856f28" translate="yes" xml:space="preserve">
          <source>Note the distinguishing &lt;code&gt;@&lt;/code&gt; before the macro name and the lack of commas between the argument expressions in the first form, and the lack of whitespace after &lt;code&gt;@name&lt;/code&gt; in the second form. The two styles should not be mixed. For example, the following syntax is different from the examples above; it passes the tuple &lt;code&gt;(expr1, expr2, ...)&lt;/code&gt; as one argument to the macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72a4ca407bc566d00161d17253a5df7ce9feb29" translate="yes" xml:space="preserve">
          <source>Note the dot syntax is also applicable to user-defined operators. For example, if you define &lt;code&gt;&amp;otimes;(A,B) = kron(A,B)&lt;/code&gt; to give a convenient infix syntax &lt;code&gt;A &amp;otimes; B&lt;/code&gt; for Kronecker products (&lt;a href=&quot;../../stdlib/linearalgebra/index#Base.kron&quot;&gt;&lt;code&gt;kron&lt;/code&gt;&lt;/a&gt;), then &lt;code&gt;[A,B] .&amp;otimes; [C,D]&lt;/code&gt; will compute &lt;code&gt;[A&amp;otimes;C, B&amp;otimes;D]&lt;/code&gt; with no additional coding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21adfeb51b92fa6389f9a0f8426e92487dbabd63" translate="yes" xml:space="preserve">
          <source>Note the evaluation behavior of chained comparisons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5ad5e5567c252cacda0e45872c352990ca190e" translate="yes" xml:space="preserve">
          <source>Note the implications of covariance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e365768e844c62cc4abb32f1de51046a7ca82a" translate="yes" xml:space="preserve">
          <source>Note the important difference between &lt;code&gt;sum(A)&lt;/code&gt; and &lt;code&gt;reduce(+, A)&lt;/code&gt; for arrays with small integer eltype:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6be73201d2bdb5b60bd4ac16f617f03563234a7" translate="yes" xml:space="preserve">
          <source>Note the lack of a newline at the end of &lt;code&gt;/tmp/text.txt&lt;/code&gt;. Julia automatically inserts a newline before the &lt;code&gt;julia&amp;gt;&lt;/code&gt; prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b34f97175a230919ab690f3d87c164c80cc78fa" translate="yes" xml:space="preserve">
          <source>Note the two spaces before each &lt;code&gt;*&lt;/code&gt; and the single space after each one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a8e68f48fc3d2175af90fbf8e18f9e672cd18b" translate="yes" xml:space="preserve">
          <source>Note, though, that the above &lt;em&gt;only&lt;/em&gt; defines &lt;a href=&quot;../../base/collections/index#Base.getindex&quot;&gt;&lt;code&gt;getindex&lt;/code&gt;&lt;/a&gt; with one integer index. Indexing with anything other than an &lt;code&gt;Int&lt;/code&gt; will throw a &lt;a href=&quot;../../base/base/index#Core.MethodError&quot;&gt;&lt;code&gt;MethodError&lt;/code&gt;&lt;/a&gt; saying that there was no matching method. In order to support indexing with ranges or vectors of &lt;code&gt;Int&lt;/code&gt;s, separate methods must be written:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8482997969bd6e2f8506bbaee3f00bf7673cbff9" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;Sampler(rng, x)&lt;/code&gt; is simply a shorthand for &lt;code&gt;Sampler(rng, x, Val(Inf))&lt;/code&gt;, and &lt;code&gt;Random.Repetition&lt;/code&gt; is an alias for &lt;code&gt;Union{Val{1}, Val{Inf}}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1a9fbb062505ef6ee2056aac065b143189a068" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;nextfloat()&lt;/code&gt;, &lt;code&gt;prevfloat()&lt;/code&gt; do not use the precision mentioned by &lt;code&gt;setprecision&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d257ed043f41d212dfcd94a6cc7dccb052911321" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;zip&lt;/code&gt; orders the calls to its subiterators in such a way that stateful iterators will not advance when another iterator finishes in the current iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ce3aec96b4e4fe9ae814dda08f7cfcb11c5b12" translate="yes" xml:space="preserve">
          <source>Note: This feature is currently implemented on 64-bit x86 and AArch64 platforms only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe152fdfb8ac8116096c5833a5da72fe28dcdf6" translate="yes" xml:space="preserve">
          <source>Notebook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3745a01d14712bbd397dca189f292ef9d4f82931" translate="yes" xml:space="preserve">
          <source>Notebook With Decorative Cover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f845802acfac532c071d4aaa950ebd7924f7445d" translate="yes" xml:space="preserve">
          <source>Noteworthy Differences from other Languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ce7a541bd48804d295c01fa8bd545df0afeca2" translate="yes" xml:space="preserve">
          <source>Noteworthy differences from C/C++</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7010f263a0a8c01d527c668d3aa731a8f234b4a1" translate="yes" xml:space="preserve">
          <source>Noteworthy differences from MATLAB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dde472d5176039598d0e8a87239f04a077f873a" translate="yes" xml:space="preserve">
          <source>Noteworthy differences from Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7e2b96cfe1dbe019d8e0fb2a6d3e5e7789c4a19" translate="yes" xml:space="preserve">
          <source>Noteworthy differences from R</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eaeecbc1c997d4fd71223a0cf24b0b3a194db6a" translate="yes" xml:space="preserve">
          <source>Noteworthy external packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfa8112f928b66aa11f861fcbbd7f424b123fed" translate="yes" xml:space="preserve">
          <source>Nothingness and missing values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b285dba5e2d226b2bb71434ab5cf1c3897f514df" translate="yes" xml:space="preserve">
          <source>Notice both the 3&amp;times; speedup and the decreased memory allocation of the &lt;code&gt;fview&lt;/code&gt; version of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a584fefd44f3b390733917fbd3332df61560b9" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;:(1 + 2)&lt;/code&gt; now appears in the result instead of the symbol &lt;code&gt;:x&lt;/code&gt;. Evaluating this expression yields an interpolated &lt;code&gt;3&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da8a8a782d504cc3899237534fddcfde617523d9" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;Vararg{T}&lt;/code&gt; corresponds to zero or more elements of type &lt;code&gt;T&lt;/code&gt;. Vararg tuple types are used to represent the arguments accepted by varargs methods (see &lt;a href=&quot;../functions/index#Varargs-Functions-1&quot;&gt;Varargs Functions&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bb07567655e1f8b926942e92a94d2603e316d5" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;copy_cols&lt;/code&gt; is much faster than &lt;code&gt;copy_rows&lt;/code&gt;. This is expected because &lt;code&gt;copy_cols&lt;/code&gt; respects the column-based memory layout of the &lt;code&gt;Matrix&lt;/code&gt; and fills it one column at a time. Additionally, &lt;code&gt;copy_col_row&lt;/code&gt; is much faster than &lt;code&gt;copy_row_col&lt;/code&gt; because it follows our rule of thumb that the first element to appear in a slice expression should be coupled with the inner-most loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fec7442f6e6a427e8a8d522c95544bfa904449" translate="yes" xml:space="preserve">
          <source>Notice that a length-1 tuple must be written with a comma, &lt;code&gt;(1,)&lt;/code&gt;, since &lt;code&gt;(1)&lt;/code&gt; would just be a parenthesized value. &lt;code&gt;()&lt;/code&gt; represents the empty (length-0) tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f287cb5fedcc8f5e7808755801d877f4587681d7" translate="yes" xml:space="preserve">
          <source>Notice that each definition looks like the form of constructor call that it handles. The call &lt;code&gt;Point{Int64}(1,2)&lt;/code&gt; will invoke the definition &lt;code&gt;Point{T}(x,y)&lt;/code&gt; inside the &lt;code&gt;struct&lt;/code&gt; block. The outer constructor declaration, on the other hand, defines a method for the general &lt;code&gt;Point&lt;/code&gt; constructor which only applies to pairs of values of the same real type. This declaration makes constructor calls without explicit type parameters, like &lt;code&gt;Point(1,2)&lt;/code&gt; and &lt;code&gt;Point(1.0,2.5)&lt;/code&gt;, work. Since the method declaration restricts the arguments to being of the same type, calls like &lt;code&gt;Point(1,2.5)&lt;/code&gt;, with arguments of different types, result in &quot;no method&quot; errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e2247285a711b8f77ce042019fc6f3ec7e1067" translate="yes" xml:space="preserve">
          <source>Notice that it is perfectly possible to define a global inside a function like &lt;code&gt;__init__&lt;/code&gt;; this is one of the advantages of using a dynamic language. But by making it a constant at global scope, we can ensure that the type is known to the compiler and allow it to generate better optimized code. Obviously, any other globals in your module that depends on &lt;code&gt;foo_data_ptr&lt;/code&gt; would also have to be initialized in &lt;code&gt;__init__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26af993d1f21f6e38ead5214b5da67c55ed9c51" translate="yes" xml:space="preserve">
          <source>Notice that our use of this pattern with &lt;code&gt;count_heads&lt;/code&gt; can be generalized. We used two explicit &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawn&quot;&gt;&lt;code&gt;@spawn&lt;/code&gt;&lt;/a&gt; statements, which limits the parallelism to two processes. To run on any number of processes, we can use a &lt;em&gt;parallel for loop&lt;/em&gt;, running in distributed memory, which can be written in Julia using &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@distributed&quot;&gt;&lt;code&gt;@distributed&lt;/code&gt;&lt;/a&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72438d3388f10dff00ade8e549f029a3aeac6ed1" translate="yes" xml:space="preserve">
          <source>Notice that some useful information such as the event time is not included by default. This is because such information can be expensive to extract and is also &lt;em&gt;dynamically&lt;/em&gt; available to the current logger. It's simple to define a &lt;a href=&quot;#AbstractLogger-interface-1&quot;&gt;custom logger&lt;/a&gt; to augment event data with the time, backtrace, values of global variables and other useful information as required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e77dd3d046d81afb4b62f7ad7414d418b5c22e3" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;$&lt;/code&gt; interpolation syntax allows inserting only a single expression into an enclosing expression. Occasionally, you have an array of expressions and need them all to become arguments of the surrounding expression. This can be done with the syntax &lt;code&gt;$(xs...)&lt;/code&gt;. For example, the following code generates a function call where the number of arguments is determined programmatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30b72621d9228b399ae55ac5b16e08861f68644" translate="yes" xml:space="preserve">
          <source>Notice that the expressions &lt;code&gt;str[k]&lt;/code&gt; and &lt;code&gt;str[k:k]&lt;/code&gt; do not give the same result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50882ef5eb622d73f029f8ec3b3fd05b58b270d6" translate="yes" xml:space="preserve">
          <source>Notice that the first two backslashes appear verbatim in the output, since they do not precede a quote character. However, the next backslash character escapes the backslash that follows it, and the last backslash escapes a quote, since these backslashes appear before a quote.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa54f3f580d525d2a76ffa60a5689c1c5463f9e" translate="yes" xml:space="preserve">
          <source>Notice that the function is specified by type instead of by name. As with normal functions there is a terse syntax form. In the function body, &lt;code&gt;p&lt;/code&gt; will refer to the object that was called. A &lt;code&gt;Polynomial&lt;/code&gt; can be used as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ff399952b84bc498d1458b6e85213e0bfa3829" translate="yes" xml:space="preserve">
          <source>Notice that the result contains &lt;code&gt;Expr(:$, :x)&lt;/code&gt;, which means that &lt;code&gt;x&lt;/code&gt; has not been evaluated yet. In other words, the &lt;code&gt;$&lt;/code&gt; expression &quot;belongs to&quot; the inner quote expression, and so its argument is only evaluated when the inner quote expression is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f09e2f65ad8085647006de1626ffad88dc6727" translate="yes" xml:space="preserve">
          <source>Notice that the stack trace now indicates the appropriate line number and the missing frame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebc78ff444f4c01a4825c1a20cbd6cc86150c76" translate="yes" xml:space="preserve">
          <source>Notice that the vector returned by &lt;a href=&quot;../../base/base/index#Base.backtrace&quot;&gt;&lt;code&gt;backtrace&lt;/code&gt;&lt;/a&gt; had 18 elements, while the vector returned by &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; only has 6. This is because, by default, &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; removes any lower-level C functions from the stack. If you want to include stack frames from C calls, you can do it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5ca2b2885fa1bdef7f82616fa1f043f50e8db7" translate="yes" xml:space="preserve">
          <source>Notice that this is an &lt;code&gt;IndexCartesian&lt;/code&gt; array, so we must manually define &lt;a href=&quot;../../base/collections/index#Base.getindex&quot;&gt;&lt;code&gt;getindex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/collections/index#Base.setindex!&quot;&gt;&lt;code&gt;setindex!&lt;/code&gt;&lt;/a&gt; at the dimensionality of the array. Unlike the &lt;code&gt;SquaresVector&lt;/code&gt;, we are able to define &lt;a href=&quot;../../base/collections/index#Base.setindex!&quot;&gt;&lt;code&gt;setindex!&lt;/code&gt;&lt;/a&gt;, and so we can mutate the array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af83b123f16ac259b3fe0cc2827d1e1b4b21fb95" translate="yes" xml:space="preserve">
          <source>Notice that we added an error check to the top of the function. This code will be common to both versions, and is run-time code in both versions (it will be quoted and returned as an expression from the generated version). That means that the values and types of local variables are not available at code generation time &amp;ndash;- the code-generation code can only see the types of arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c1a66b9e620afc51ecba417f9133040596ec1a" translate="yes" xml:space="preserve">
          <source>Notice that we have to be careful about the return type: &lt;code&gt;qsort&lt;/code&gt; expects a function returning a C &lt;code&gt;int&lt;/code&gt;, so we annotate the return type of the function to be sure it returns a &lt;code&gt;Cint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97bfa30273f29d9ac1e683ece19a0a5356f6f5be" translate="yes" xml:space="preserve">
          <source>Notice that while Julia arrays use 1-based indexing, the C API uses 0-based indexing (for example in calling &lt;code&gt;jl_array_dim&lt;/code&gt;) in order to read as idiomatic C code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec2b0ac6f443d8a0c98a2d2f9939dd9325a7d1bb" translate="yes" xml:space="preserve">
          <source>Notice the extra set of parentheses in the definition of &lt;code&gt;range&lt;/code&gt;. Without those, &lt;code&gt;range&lt;/code&gt; would be a two-argument function, and this example would not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8d9d4ee1e20bc7f450236baf5646b01a058df8" translate="yes" xml:space="preserve">
          <source>Notice the feedback has changed. &lt;code&gt;dev/Example&lt;/code&gt; refers to the location of the newly created clone. If we look inside the &lt;code&gt;/tmp/tutorial&lt;/code&gt; directory, we will notice the following files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a051068a64fb1c3e3e967fac93fc0840d028c92" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;@assert&lt;/code&gt; has two modes of operation, depending upon the number of arguments it receives! If there's only one argument, the tuple of expressions captured by &lt;code&gt;msgs&lt;/code&gt; will be empty and it will behave the same as the simpler definition above. But now if the user specifies a second argument, it is printed in the message body instead of the failing expression. You can inspect the result of a macro expansion with the aptly named &lt;a href=&quot;../../base/base/index#Base.@macroexpand&quot;&gt;&lt;code&gt;@macroexpand&lt;/code&gt;&lt;/a&gt; macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2231a9957a4ccae243c25509bec2784a2d3a3f" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;OrderedPair&lt;/code&gt; objects can only be constructed such that &lt;code&gt;x &amp;lt;= y&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad75dff988cb9333f0487b17ce167ce88105dcde" translate="yes" xml:space="preserve">
          <source>Now both &lt;code&gt;Point{Float64}&lt;/code&gt; and &lt;code&gt;DiagPoint{Float64}&lt;/code&gt; are implementations of the &lt;code&gt;Pointy{Float64}&lt;/code&gt; abstraction, and similarly for every other possible choice of type &lt;code&gt;T&lt;/code&gt;. This allows programming to a common interface shared by all &lt;code&gt;Pointy&lt;/code&gt; objects, implemented for both &lt;code&gt;Point&lt;/code&gt; and &lt;code&gt;DiagPoint&lt;/code&gt;. This cannot be fully demonstrated, however, until we have introduced methods and dispatch in the next section, &lt;a href=&quot;../methods/index#Methods-1&quot;&gt;Methods&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75f16af32eb0cb857152589e2956bb0503dad48" translate="yes" xml:space="preserve">
          <source>Now just imagine that instead of 7-7-7, the slots are Year-Month-Day, or in our example, 2014-01-31. When you ask to add 1 month to this date, the month slot is incremented, so now we have 2014-02-31. Then the day number is checked if it is greater than the last valid day of the new month; if it is (as in the case above), the day number is adjusted down to the last valid day (28). What are the ramifications with this approach? Go ahead and add another month to our date, &lt;code&gt;2014-02-28 + Month(1) == 2014-03-28&lt;/code&gt;. What? Were you expecting the last day of March? Nope, sorry, remember the 7-7-7 slots. As few slots as possible are going to change, so we first increment the month slot by 1, 2014-03-28, and boom, we're done because that's a valid date. On the other hand, if we were to add 2 months to our original date, 2014-01-31, then we end up with 2014-03-31, as expected. The other ramification of this approach is a loss in associativity when a specific ordering is forced (i.e. adding things in different orders results in different outcomes). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ea30dca65a438cc99f25502ce5c85d174da718" translate="yes" xml:space="preserve">
          <source>Now let us call a Julia function that performs an in-place operation on &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1490ef0eb4ce2e4e1ae0d6c5f4d04bddc62f73" translate="yes" xml:space="preserve">
          <source>Now let's compare three different versions, one that runs in a single process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e900fad91950a54e7a71c41febff0c0a6fca83" translate="yes" xml:space="preserve">
          <source>Now the build command is simply &lt;code&gt;make&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8889e683ee7699980eb83ade02cdbbcf851154" translate="yes" xml:space="preserve">
          <source>Now the content of &lt;code&gt;y&lt;/code&gt; can be accessed as before using &lt;code&gt;jl_array_data&lt;/code&gt;. As always, be sure to keep a reference to the array while it is in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57cfaa73ec119cde1094487639ea3b5c37a52882" translate="yes" xml:space="preserve">
          <source>Now things get interesting. &lt;code&gt;OurRational&lt;/code&gt; has a single inner constructor method which checks that both of &lt;code&gt;num&lt;/code&gt; and &lt;code&gt;den&lt;/code&gt; aren't zero and ensures that every rational is constructed in &quot;lowest terms&quot; with a non-negative denominator. This is accomplished by dividing the given numerator and denominator values by their greatest common divisor, computed using the &lt;code&gt;gcd&lt;/code&gt; function. Since &lt;code&gt;gcd&lt;/code&gt; returns the greatest common divisor of its arguments with sign matching the first argument (&lt;code&gt;den&lt;/code&gt; here), after this division the new value of &lt;code&gt;den&lt;/code&gt; is guaranteed to be non-negative. Because this is the only inner constructor for &lt;code&gt;OurRational&lt;/code&gt;, we can be certain that &lt;code&gt;OurRational&lt;/code&gt; objects are always constructed in this normalized form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1ac0d5470c2a73e8cced73d80392647d1e7c34" translate="yes" xml:space="preserve">
          <source>Now we add some new methods to &lt;code&gt;f(x)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2194482dd2eece4f043c167b6dbcda9beed128b2" translate="yes" xml:space="preserve">
          <source>Now we can fill the array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dedd2e54cefbc13f3e2721f321d1470bf85ad17e" translate="yes" xml:space="preserve">
          <source>Now we can go back to the Julia REPL and load the package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5d4cd8d7eaa41a61a84bdaaaa49e76aabe6887" translate="yes" xml:space="preserve">
          <source>Now we will time each of these functions using the same random &lt;code&gt;10000&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; input vector:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a2c37f0e6c8ad902d4b308d7bdc8bae7e4b278" translate="yes" xml:space="preserve">
          <source>Now we're ready to profile this function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e180693c6ce8b7b630dbe4c747b6eac35d812d82" translate="yes" xml:space="preserve">
          <source>Now you have a multitude of ways to employ those tools! For example with &lt;code&gt;OProfile&lt;/code&gt; you can try a simple recording :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ad9c62852c43e82e47fc64421d617168397764" translate="yes" xml:space="preserve">
          <source>Now, consider a slightly more complex macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4732b371dc166e4779a2688d805a6aba6fbd8acb" translate="yes" xml:space="preserve">
          <source>Now, one very good way to solve such problems is by using the &lt;a href=&quot;#kernel-functions-1&quot;&gt;function-barrier technique&lt;/a&gt;. However, in some cases you might want to eliminate the type-instability altogether. In such cases, one approach is to pass the dimensionality as a parameter, for example through &lt;code&gt;Val{T}()&lt;/code&gt; (see &quot;Value types&quot;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f06871f5b7030283f5fa9adc372a9eca6b71e0" translate="yes" xml:space="preserve">
          <source>Now, when we ask Julia to &lt;code&gt;collect&lt;/code&gt; all the elements into an array it can preallocate a &lt;code&gt;Vector{Int}&lt;/code&gt; of the right size instead of blindly &lt;a href=&quot;../../base/collections/index#Base.push!&quot;&gt;&lt;code&gt;push!&lt;/code&gt;&lt;/a&gt;ing each element into a &lt;code&gt;Vector{Any}&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d636f6dac8ab2c27d31703e43f4beef4b1d56310" translate="yes" xml:space="preserve">
          <source>Number of bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91909ed1368e10bc84773d139187c5b722b5f11" translate="yes" xml:space="preserve">
          <source>Number of elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9fc237be2cc9c335682ad011ee2e6adc0acaa38" translate="yes" xml:space="preserve">
          <source>Number of indices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85da1dd5129fe724d5c6d8cf4b7906fe8b9ce5c" translate="yes" xml:space="preserve">
          <source>Number of ones in the binary representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30f19e99bb31f0cd0b6205f5f10b8b22424243a" translate="yes" xml:space="preserve">
          <source>Number of ones leading the binary representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035d70cdae066ea3296b8fbd1a9d8c92fa39c6e4" translate="yes" xml:space="preserve">
          <source>Number of ones trailing the binary representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f8c6eb690602177ade028609fa24bb9574fa5a" translate="yes" xml:space="preserve">
          <source>Number of zeros in the binary representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8579d9f6447af083975c0dab9070490c43548e77" translate="yes" xml:space="preserve">
          <source>Number of zeros leading the binary representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8260cb1716ffd3b4779fd5a8ebf394508c0f77f9" translate="yes" xml:space="preserve">
          <source>Number of zeros trailing the binary representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e471b5b867e86ef185edcc27daa9110d23a890" translate="yes" xml:space="preserve">
          <source>Number type representing an exact irrational value denoted by the symbol &lt;code&gt;sym&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fe47bf2edbb12c61a5e953edc8a563d56b03f2" translate="yes" xml:space="preserve">
          <source>Number type representing an exact irrational value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd59bcc0babee970cc108b465cace01d488a590" translate="yes" xml:space="preserve">
          <source>Numbered capture groups can also be referenced as &lt;code&gt;\g&amp;lt;n&amp;gt;&lt;/code&gt; for disambiguation, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf34012797cab9d1c84ad002d9b7fc6caeff4db" translate="yes" xml:space="preserve">
          <source>Numerator of the rational representation of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f269beab01cd6fcbe0ca0957b8e26bbc71c51503" translate="yes" xml:space="preserve">
          <source>Numeric Comparisons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daff25d81f34cfefe8596ae71656e7ff1f338f4" translate="yes" xml:space="preserve">
          <source>Numeric Literal Coefficients</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39da4e1b4b9cefed18b0fa29568809b13a0d2a02" translate="yes" xml:space="preserve">
          <source>Numeric literals also work as coefficients to parenthesized expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d5eae4bb697e0cf7a429c34af1a89533647ce7" translate="yes" xml:space="preserve">
          <source>Numerical Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67318deb09e2a0233296c2abeb6ce49da2c728ec" translate="yes" xml:space="preserve">
          <source>Numero Sign / Numero</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8005cd0fe11a7ac4eb3676a4ba6c81565fe4a74a" translate="yes" xml:space="preserve">
          <source>Nut And Bolt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f579c523960af1aec824c6fdc57af6d4abd76a1f" translate="yes" xml:space="preserve">
          <source>OR</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556a4054d8bd5ec84efc369a4b546d910bc81a6b" translate="yes" xml:space="preserve">
          <source>Objects created by calling &lt;code&gt;skipmissing&lt;/code&gt; on an array can be indexed using indices from the parent array. Indices corresponding to missing values are not valid for these objects and an error is thrown when trying to use them (they are also skipped by &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;eachindex&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd56de9465fbf7f137d6e37169c5645c43a0700" translate="yes" xml:space="preserve">
          <source>Objects referred to by remote references can be freed only when &lt;em&gt;all&lt;/em&gt; held references in the cluster are deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed0dbb8b43412ba667073b4f0e06db426a942a6" translate="yes" xml:space="preserve">
          <source>Oblique Angle Opening Down</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="860d5d210e89bd48c50cf3489fe9ae16e754805a" translate="yes" xml:space="preserve">
          <source>Oblique Angle Opening Up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48da80ca4c53858a37fe7a1f6c71c784aca6c04" translate="yes" xml:space="preserve">
          <source>Observe the following specific instances of these rules in our example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a73a94f9cbd7863f359e15c75973f71824c00fb" translate="yes" xml:space="preserve">
          <source>Observe, that this definition calls another method of &lt;code&gt;Date&lt;/code&gt; function that takes one argument of &lt;code&gt;UTInstant{Day}&lt;/code&gt; type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395a4e1c3075ee49f92be819610b463cda6e30f5" translate="yes" xml:space="preserve">
          <source>Observing any mutable state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fefcd102a7e155e0fdf1ae0996358a339e34548" translate="yes" xml:space="preserve">
          <source>Obtain a pointer to a global variable in a C-exported shared library, specified exactly as in &lt;a href=&quot;#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;. Returns a &lt;code&gt;Ptr{Type}&lt;/code&gt;, defaulting to &lt;code&gt;Ptr{Cvoid}&lt;/code&gt; if no &lt;code&gt;Type&lt;/code&gt; argument is supplied. The values can be read or written by &lt;a href=&quot;#Base.unsafe_load&quot;&gt;&lt;code&gt;unsafe_load&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#Base.unsafe_store!&quot;&gt;&lt;code&gt;unsafe_store!&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af546b114320fe8198ff3e12bb225650fba5d32f" translate="yes" xml:space="preserve">
          <source>Obtain a vector-like object containing the code units of a string. Returns a &lt;code&gt;CodeUnits&lt;/code&gt; wrapper by default, but &lt;code&gt;codeunits&lt;/code&gt; may optionally be defined for new string types if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4841adee9120f8d2d8a65cdf75b380276d57ffea" translate="yes" xml:space="preserve">
          <source>Obtain the contents of an &lt;code&gt;IOBuffer&lt;/code&gt; as an array, without copying. Afterwards, the &lt;code&gt;IOBuffer&lt;/code&gt; is reset to its initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499a51c422bbaa71f462d60ecac6f2d85b8b0346" translate="yes" xml:space="preserve">
          <source>Obtain the path of a temporary directory (possibly shared with other processes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4489831ce34c02ca381337736e9c9e00ae27d366" translate="yes" xml:space="preserve">
          <source>Obtain the raw bytes of the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; as a vector of length 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6c798b8d29e94d3a8c1ad40f4212ec50bc5a9a" translate="yes" xml:space="preserve">
          <source>Occasionally it is useful to introduce a generic function without yet adding methods. This can be used to separate interface definitions from implementations. It might also be done for the purpose of documentation or code readability. The syntax for this is an empty &lt;code&gt;function&lt;/code&gt; block without a tuple of arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d43ad70625a66b6b94ccb7dc102bc0d4e9d113" translate="yes" xml:space="preserve">
          <source>Occasionally you might want a remotely-computed value immediately. This typically happens when you read from a remote object to obtain data needed by the next local operation. The function &lt;code&gt;remotecall_fetch&lt;/code&gt; exists for this purpose. It is equivalent to &lt;code&gt;fetch(remotecall(...))&lt;/code&gt; but is more efficient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc514d9dce6f845463dfbbd8fec27b149487fc06" translate="yes" xml:space="preserve">
          <source>Octal bytes (&lt;code&gt;\&lt;/code&gt; with 1-3 trailing octal digits)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10a60e4dac35159da0056b94059aa3faefeaefe" translate="yes" xml:space="preserve">
          <source>Octopus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9359b5c701400516289c8d3362bab9584e8cb81" translate="yes" xml:space="preserve">
          <source>Oden</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee7b7b8b904fd04e80da6c64df0a8e87c0a1ba8" translate="yes" xml:space="preserve">
          <source>Of course, &lt;code&gt;rand&lt;/code&gt; must also be defined on those types (i.e. &lt;code&gt;rand(::AbstractRNG, ::SamplerDie1)&lt;/code&gt; and &lt;code&gt;rand(::AbstractRNG, ::SamplerDieMany)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5457388ab13abcc6abec066af3e04c777b0d8df3" translate="yes" xml:space="preserve">
          <source>Of course, a large amount of complexity is hidden in the functions used in this macro definition, but they are just functions, written entirely in Julia. You can read their source and see precisely what they do &amp;ndash; and all they do is construct expression objects to be inserted into your program's syntax tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d7295c70e56e8466ad32c5214d78627a9bd51e" translate="yes" xml:space="preserve">
          <source>Of course, all of this is true only if we construct &lt;code&gt;m&lt;/code&gt; with a concrete type. We can break this by explicitly constructing it with an abstract type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abca40c2892b53eaf0d0eec2e63897278688a5d5" translate="yes" xml:space="preserve">
          <source>Of course, in a purely linear function body like &lt;code&gt;g&lt;/code&gt;, the usage of &lt;code&gt;return&lt;/code&gt; is pointless since the expression &lt;code&gt;x + y&lt;/code&gt; is never evaluated and we could simply make &lt;code&gt;x * y&lt;/code&gt; the last expression in the function and omit the &lt;code&gt;return&lt;/code&gt;. In conjunction with other control flow, however, &lt;code&gt;return&lt;/code&gt; is of real use. Here, for example, is a function that computes the hypotenuse length of a right triangle with sides of length &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, avoiding overflow:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c060c4ee5f5d3d9b28299a96d5d24b90afefae70" translate="yes" xml:space="preserve">
          <source>Of course, this depends on what &lt;code&gt;Int&lt;/code&gt; is aliased to &amp;ndash; but that is predefined to be the correct type &amp;ndash; either &lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../base/numbers/index#Core.Int64&quot;&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae308f41e4c98e31757bbb87283a37f1c3cd968" translate="yes" xml:space="preserve">
          <source>Of course, you can omit the dot if you write a specialized &quot;vector&quot; method of &lt;code&gt;f&lt;/code&gt;, e.g. via &lt;code&gt;f(A::AbstractArray) = map(f, A)&lt;/code&gt;, and this is just as efficient as &lt;code&gt;f.(A)&lt;/code&gt;. But that approach requires you to decide in advance which functions you want to vectorize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac1685b0fe25dd08856d4b861606712fb6d3693" translate="yes" xml:space="preserve">
          <source>Office Building</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce667716547fa82bc8795ad7ef205e9410193ed0" translate="yes" xml:space="preserve">
          <source>Offset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2257e26e0c9b9059b11804e45de12c297441ab86" translate="yes" xml:space="preserve">
          <source>Often &lt;code&gt;wait&lt;/code&gt; is called within a &lt;code&gt;while&lt;/code&gt; loop to ensure a waited-for condition is met before proceeding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d60820a16fa72bfa32371eae9edc7f3327dc98" translate="yes" xml:space="preserve">
          <source>Often referred to as logical indexing or indexing with a logical mask, indexing by a boolean array selects elements at the indices where its values are &lt;code&gt;true&lt;/code&gt;. Indexing by a boolean vector &lt;code&gt;B&lt;/code&gt; is effectively the same as indexing by the vector of integers that is returned by &lt;code&gt;findall(B)&lt;/code&gt;. Similarly, indexing by a &lt;code&gt;N&lt;/code&gt;-dimensional boolean array is effectively the same as indexing by the vector of &lt;code&gt;CartesianIndex{N}&lt;/code&gt;s where its values are &lt;code&gt;true&lt;/code&gt;. A logical index must be a vector of the same length as the dimension it indexes into, or it must be the only index provided and match the size and dimensionality of the array it indexes into. It is generally more efficient to use boolean arrays as indices directly instead of first calling &lt;code&gt;findall&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf1240e8d792d67e6dc46a33f81148bf56e1cc1" translate="yes" xml:space="preserve">
          <source>Often used as &lt;code&gt;setprecision(T, precision) do ... end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9fb34384bd74e18ded64446715a976c38fad361" translate="yes" xml:space="preserve">
          <source>Often, one wants to customize how instances of a type are displayed. This is accomplished by overloading the &lt;code&gt;show&lt;/code&gt; function. For example, suppose we define a type to represent complex numbers in polar form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2524666908366fb5b9cb1050fa0d98429c1b75dd" translate="yes" xml:space="preserve">
          <source>Ohm Sign / Ohm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43861169e81020d9c0306dfe1f07fadd4b506cc8" translate="yes" xml:space="preserve">
          <source>Ok Hand Sign</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aeac8f5501f52ca5880e908db13ff62ecc66505" translate="yes" xml:space="preserve">
          <source>Older Man</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493e473600aee0c7bcce465fd5f66ce4c04f4e72" translate="yes" xml:space="preserve">
          <source>Older Woman</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45cbb491b86714bd98c42e22c982d41684cdfce" translate="yes" xml:space="preserve">
          <source>Omitted and extra indices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd9f9feaf5acde15de18ad7f8bd40de4f1b782e" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures, &lt;a href=&quot;../../base/base/index#Core.typeof&quot;&gt;&lt;code&gt;typeof(ans)&lt;/code&gt;&lt;/a&gt; will be &lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/a&gt;. You can convert an integer value back to a &lt;code&gt;Char&lt;/code&gt; just as easily:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6339065c09aa2c526a5dbaab652f506bc74797" translate="yes" xml:space="preserve">
          <source>On Unix systems, replace a tilde character at the start of a path with the current user's home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb1d6d9c207542f37a0eb9a4d30104dcffd38435" translate="yes" xml:space="preserve">
          <source>On Windows, split a path into the drive letter part and the path part. On Unix systems, the first component is always the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c68460a13d1df8955c1f8bb29c597d386917eef" translate="yes" xml:space="preserve">
          <source>On Windows, this environment variable is ignored, and external commands are executed directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155eaef05899463a6426667bf84d001c6851f4ef" translate="yes" xml:space="preserve">
          <source>On Windows, this is a critical section object, on pthreads, this is a &lt;code&gt;pthread_mutex_t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dc73d26d92352d669b6b314c01d0e67b4f12bc" translate="yes" xml:space="preserve">
          <source>On With Exclamation Mark With Left Right Arrow Above</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47df2e0f9b94e375b78ff1379a3f11415ea9470" translate="yes" xml:space="preserve">
          <source>On a computer with a 2.4GHz Intel Core i5 processor, this produces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6cc2cc0bff4a83bfe594a8a58bb2b33f6acda16" translate="yes" xml:space="preserve">
          <source>On a computer with a 2.7 GHz Intel Core i7 processor, this produces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d05c50e4f9adbf55a00b2b6337dd680a4e8ea56" translate="yes" xml:space="preserve">
          <source>On all systems we currently support, basic C/C++ value types may be translated to Julia types as follows. Every C type also has a corresponding Julia type with the same name, prefixed by C. This can help for writing portable code (and remembering that an &lt;code&gt;int&lt;/code&gt; in C is not the same as an &lt;code&gt;Int&lt;/code&gt; in Julia).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0381f586cce60e3ccff1893131fb730207dab27f" translate="yes" xml:space="preserve">
          <source>On the command line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587c20a5e51a65e62924cbe225a3fdc1498c623a" translate="yes" xml:space="preserve">
          <source>On the contrary, if one of the operands is &lt;code&gt;false&lt;/code&gt;, the result could be either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending on the value of the other operand. Therefore, if that operand is &lt;code&gt;missing&lt;/code&gt;, the result has to be &lt;code&gt;missing&lt;/code&gt; too</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518a0d6b9d25183b82c9bf4eb99d6d93bfd19e36" translate="yes" xml:space="preserve">
          <source>On the first call (&lt;code&gt;@time sum_global()&lt;/code&gt;) the function gets compiled. (If you've not yet used &lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt; in this session, it will also compile functions needed for timing.) You should not take the results of this run seriously. For the second run, note that in addition to reporting the time, it also indicated that a significant amount of memory was allocated. We are here just computing a sum over all elements in a vector of 64-bit floats so there should be no need to allocate memory (at least not on the heap which is what &lt;code&gt;@time&lt;/code&gt; reports).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad03a446adb0683f0ee72ebe5c5d4de73ec2ee9" translate="yes" xml:space="preserve">
          <source>On the flip side, it is often handy to &quot;splat&quot; the values contained in an iterable collection into a function call as individual arguments. To do this, one also uses &lt;code&gt;...&lt;/code&gt; but in the function call instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b403ef50412b37149d7de8d64205fbc78be0d0" translate="yes" xml:space="preserve">
          <source>On the other hand, &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt; s are rewritable. For example, multiple processes can co-ordinate their processing by referencing the same remote &lt;code&gt;Channel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d9d088c9fae4ec91c2c4846a8d7718abfee493" translate="yes" xml:space="preserve">
          <source>On the other hand, any type of expression can be used at the end of a conditional chain. It will be evaluated and returned depending on the preceding conditionals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02c05a8f3f1c4acb393f741faa4805c77971fea" translate="yes" xml:space="preserve">
          <source>On the other hand, missingness propagates when one of the operands is &lt;code&gt;true&lt;/code&gt;, for example the first one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66752d66287e12266caf0e8fe423b26d0766c1cd" translate="yes" xml:space="preserve">
          <source>On the other hand, no error is thrown when the result can be determined without the &lt;code&gt;missing&lt;/code&gt; values. This is the case when the code short-circuits before evaluating the &lt;code&gt;missing&lt;/code&gt; operand, and when the &lt;code&gt;missing&lt;/code&gt; operand is the last one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d783b202bcb5502d49204a4c1a17474d2de0ce" translate="yes" xml:space="preserve">
          <source>On the other hand, serializing a &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt; only involves the serialization of an identifier that identifies the location and instance of &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; referred to by the handle. A deserialized &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt; object (on any worker), therefore also points to the same backing store as the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771a6039f4f4d3ec219eb1b8ab2a7b46116413f0" translate="yes" xml:space="preserve">
          <source>On the other hand, the &lt;em&gt;symbol&lt;/em&gt;&lt;code&gt;:b&lt;/code&gt; is used in the expression construction, so the value of the variable &lt;code&gt;b&lt;/code&gt; at that time is irrelevant &amp;ndash; &lt;code&gt;:b&lt;/code&gt; is just a symbol and the variable &lt;code&gt;b&lt;/code&gt; need not even be defined. At expression evaluation time, however, the value of the symbol &lt;code&gt;:b&lt;/code&gt; is resolved by looking up the value of the variable &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd495e4741a90baf6003c40c92c4aa3f0b4cd557" translate="yes" xml:space="preserve">
          <source>Once a variable is made visible via &lt;code&gt;using&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;, a module may not create its own variable with the same name. Imported variables are read-only; assigning to a global variable always affects a variable owned by the current module, or else raises an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb4245dbb4242070beff681d151067e39a6f407" translate="yes" xml:space="preserve">
          <source>Once finalized, a reference becomes invalid and cannot be used in any further calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="153460770bc51983406d5b79bfce57e7867c875a" translate="yes" xml:space="preserve">
          <source>Once one learns to appreciate multiple dispatch, there's an understandable tendency to go overboard and try to use it for everything. For example, you might imagine using it to store information, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c203638f9ad5d408088a4eef6ad04b4df41e5027" translate="yes" xml:space="preserve">
          <source>Oncoming Automobile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c05078278f8201b444547fd75a173fff4a3ad0" translate="yes" xml:space="preserve">
          <source>Oncoming Bus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddeaee107e2c4e76bf01661779970545629d3afd" translate="yes" xml:space="preserve">
          <source>Oncoming Police Car</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6e328b8fe4d57c863b1503f93724d6b14d7bf5" translate="yes" xml:space="preserve">
          <source>Oncoming Taxi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a5bbfdc49a80bbe793aee50ef76a76a7bc98ae" translate="yes" xml:space="preserve">
          <source>One alternative is to use a macro to capture &lt;a href=&quot;../../base/base/index#Base.@__MODULE__&quot;&gt;&lt;code&gt;@__MODULE__&lt;/code&gt;&lt;/a&gt; and store it alone with the current &lt;code&gt;counter&lt;/code&gt; value, however, it may be better to redesign the code to not depend on this global state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319cbfa2cb6199265b8d88a5116ab6583eb207c7" translate="yes" xml:space="preserve">
          <source>One alternative to consider would be to check each integer operation for overflow and promote results to bigger integer types such as &lt;a href=&quot;../../base/numbers/index#Core.Int128&quot;&gt;&lt;code&gt;Int128&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../base/numbers/index#Base.GMP.BigInt&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; in the case of overflow. Unfortunately, this introduces major overhead on every integer operation (think incrementing a loop counter) &amp;ndash; it requires emitting code to perform run-time overflow checks after arithmetic instructions and branches to handle potential overflows. Worse still, this would cause every computation involving integers to be type-unstable. As we mentioned above, &lt;a href=&quot;#man-type-stability-1&quot;&gt;type-stability is crucial&lt;/a&gt; for effective generation of efficient code. If you can't count on the results of integer operations being integers, it's impossible to generate fast, simple code the way C and Fortran compilers do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87126a794e4c39ba4df13f6963f3107de93a4e22" translate="yes" xml:space="preserve">
          <source>One can also pass &lt;code&gt;key =&amp;gt; value&lt;/code&gt; expressions after a semicolon. For example, &lt;code&gt;plot(x, y; :width =&amp;gt; 2)&lt;/code&gt; is equivalent to &lt;code&gt;plot(x, y, width=2)&lt;/code&gt;. This is useful in situations where the keyword name is computed at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02624e42b707c1de7f41e5350b4675b4c9d0f30a" translate="yes" xml:space="preserve">
          <source>One common mistake is to try and get the element-type by using introspection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b006eab8378514a51041aafae3b9c6e3c4afb77" translate="yes" xml:space="preserve">
          <source>One consequence of federation is that there cannot be a central authority for package naming. Different entities may use the same name to refer to unrelated packages. This possibility is unavoidable since these entities do not coordinate and may not even know about each other. Because of the lack of a central naming authority, a single project may end up depending on different packages that have the same name. Julia's package loading mechanism does not require package names to be globally unique, even within the dependency graph of a single project. Instead, packages are identified by &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;universally unique identifiers&lt;/a&gt; (UUIDs), which get assigned when each package is created. Usually you won't have to work directly with these somewhat cumbersome 128-bit identifiers since &lt;code&gt;Pkg&lt;/code&gt; will take care of generating and tracking them for you. However, these UUIDs provide the definitive answer to the question of &lt;em&gt;&quot;what package does &lt;code&gt;X&lt;/code&gt; refer to?&quot;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c776cd11f414b03738dd0416b0d39d2e16e1ed10" translate="yes" xml:space="preserve">
          <source>One dimensional &lt;a href=&quot;#Base.StridedArray&quot;&gt;&lt;code&gt;StridedArray&lt;/code&gt;&lt;/a&gt; with elements of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4815d6606da01b20ef10c5c0e075447bfd75d6b1" translate="yes" xml:space="preserve">
          <source>One issue here is that if a function inherently requires integers, it might be better to force the caller to decide how non-integers should be converted (e.g. floor or ceiling). Another issue is that declaring more specific types leaves more &quot;space&quot; for future method definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba07493d204a55c7202f5d3dbcd2c52e223ef48f" translate="yes" xml:space="preserve">
          <source>One may also access the underlying &lt;code&gt;UTInstant&lt;/code&gt; or integer value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0e415c6a547b8bbcaa1063befe52b13a2aa324" translate="yes" xml:space="preserve">
          <source>One note on parsing performance: using the &lt;code&gt;Date(date_string,format_string)&lt;/code&gt; function is fine if only called a few times. If there are many similarly formatted date strings to parse however, it is much more efficient to first create a &lt;a href=&quot;#Dates.DateFormat&quot;&gt;&lt;code&gt;Dates.DateFormat&lt;/code&gt;&lt;/a&gt;, and pass it instead of a raw format string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9137ec2822fcee2353c1587235561d45cf358a22" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;HasLength()&lt;/code&gt;, &lt;code&gt;HasShape{N}()&lt;/code&gt;, &lt;code&gt;IsInfinite()&lt;/code&gt;, or &lt;code&gt;SizeUnknown()&lt;/code&gt; as appropriate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436148adcb7ac2d18abd79ff00a2d087851952a3" translate="yes" xml:space="preserve">
          <source>One of Julia's goals is to provide an effective language for data analysis and statistical programming. For users coming to Julia from R, these are some noteworthy differences:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55096f5245208c5eb0440ec6a345fddb43363fbe" translate="yes" xml:space="preserve">
          <source>One of the &lt;code&gt;connect&lt;/code&gt; methods that does not follow the &lt;code&gt;listen&lt;/code&gt; methods is &lt;code&gt;connect(host::String,port)&lt;/code&gt;, which will attempt to connect to the host given by the &lt;code&gt;host&lt;/code&gt; parameter on the port given by the &lt;code&gt;port&lt;/code&gt; parameter. It allows you to do things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10010155e6ee1cb87ecad6ce87a3f916af001f45" translate="yes" xml:space="preserve">
          <source>One of the most common and useful string operations is concatenation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a2348e6f04e9e17b6e21a7a69732c3c29d40af" translate="yes" xml:space="preserve">
          <source>One of the most common techniques to improve performance is to reduce memory allocation. The total amount of allocation can be measured with &lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/base/index#Base.@allocated&quot;&gt;&lt;code&gt;@allocated&lt;/code&gt;&lt;/a&gt;, and specific lines triggering allocation can often be inferred from profiling via the cost of garbage collection that these lines incur. However, sometimes it is more efficient to directly measure the amount of memory allocated by each line of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45374d28bce37032091a9fea4342bae27c8b8de4" translate="yes" xml:space="preserve">
          <source>One problem remains however. Consider the following use of this macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3501153e12d4b87f4638178e60c29c5d300b9f87" translate="yes" xml:space="preserve">
          <source>One risk with this design is the possibility that if there is no suitable promotion method converting &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to the same type, the second method will recurse on itself infinitely and trigger a stack overflow. The non-exported function &lt;code&gt;Base.promote_noncircular&lt;/code&gt; can be used as an alternative; when promotion fails it will still throw an error, but one that fails faster with a more specific error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f2f7c3f7aee7dfa793b808c1f3af767054aa1f" translate="yes" xml:space="preserve">
          <source>One then writes method(s) (at least &lt;a href=&quot;#Base.similar&quot;&gt;&lt;code&gt;similar&lt;/code&gt;&lt;/a&gt;) operating on &lt;code&gt;Broadcasted{MyContainerStyle}&lt;/code&gt;. There are also several pre-defined subtypes of &lt;code&gt;BroadcastStyle&lt;/code&gt; that you may be able to leverage; see the &lt;a href=&quot;../../manual/interfaces/index#man-interfaces-broadcasting-1&quot;&gt;Interfaces chapter&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d200e37937b9200fe9bf660a0dc70e4426e0648a" translate="yes" xml:space="preserve">
          <source>One way to significantly cut down on compile-times and testing complexity is to isolate the logic for converting to the desired type and the computation. This lets the compiler specialize and inline the conversion logic independent from the rest of the body of the larger kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1645f1271d39f73f0d6321f16068bb1fe04a5c9" translate="yes" xml:space="preserve">
          <source>One way to think of this behavior is that &lt;code&gt;producer&lt;/code&gt; was able to return multiple times. Between calls to &lt;code&gt;put!&lt;/code&gt;, the producer's execution is suspended and the consumer has control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fd832dc6ac0ce055682a44df74b0f43374b3e5" translate="yes" xml:space="preserve">
          <source>One-dimensional &lt;a href=&quot;#Core.DenseArray&quot;&gt;&lt;code&gt;DenseArray&lt;/code&gt;&lt;/a&gt; with elements of type &lt;code&gt;T&lt;/code&gt;. Alias for &lt;code&gt;DenseArray{T,1}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df27b5108b582dd0321cfd13d78f7cf11d42868" translate="yes" xml:space="preserve">
          <source>One-dimensional dense array with elements of type &lt;code&gt;T&lt;/code&gt;, often used to represent a mathematical vector. Alias for &lt;a href=&quot;#Core.Array&quot;&gt;&lt;code&gt;Array{T,1}&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761532be36fbf4ec3ee7163dc62c1a3c16eed1d0" translate="yes" xml:space="preserve">
          <source>OneTo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f9c4d4b9ceb74b37011c17fefd6d754166722d" translate="yes" xml:space="preserve">
          <source>Only annotated tags can be peeled to &lt;code&gt;GitTag&lt;/code&gt; objects. Lightweight tags (the default) are references under &lt;code&gt;refs/tags/&lt;/code&gt; which point directly to &lt;code&gt;GitCommit&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0826c50b1728d0d708f6df24eabe81219d4fd72a" translate="yes" xml:space="preserve">
          <source>Only certain &quot;simple&quot; types can be used atomically, namely the primitive boolean, integer, and float-point types. These are &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Int8&lt;/code&gt;...&lt;code&gt;Int128&lt;/code&gt;, &lt;code&gt;UInt8&lt;/code&gt;...&lt;code&gt;UInt128&lt;/code&gt;, and &lt;code&gt;Float16&lt;/code&gt;...&lt;code&gt;Float64&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3b00a80434bbed5cd383bf9ee04282bf5a25c4" translate="yes" xml:space="preserve">
          <source>Only conversion to/from UTF-8 is currently supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eeeb7bde4b30671f25e4d852799d258e6eb1b0e" translate="yes" xml:space="preserve">
          <source>Only one default constructor is generated for parametric types, since overriding it is not possible. This constructor accepts any arguments and converts them to the field types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bed7725a4393ba41e127b736de1d452935e48f0" translate="yes" xml:space="preserve">
          <source>Only provide an argument list when really necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e29b5de56072ba7e7c5e4e8ea182586070ff91e4" translate="yes" xml:space="preserve">
          <source>Only the &lt;code&gt;master&lt;/code&gt; process can add or remove worker processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ea4110acec6b93703ee74f301aaf09b4d9cd7ab" translate="yes" xml:space="preserve">
          <source>Only the &lt;em&gt;lower&lt;/em&gt; triangle of the matrix will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99042162ee5c91958ac1be23590ce2805ab4e78a" translate="yes" xml:space="preserve">
          <source>Only the &lt;em&gt;upper&lt;/em&gt; triangle of the matrix will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b41da8066e8d8f89de45d239c8dc1ffa14f3b2b" translate="yes" xml:space="preserve">
          <source>Only valid in the context of an &lt;a href=&quot;#Core.Expr&quot;&gt;&lt;code&gt;Expr&lt;/code&gt;&lt;/a&gt; returned from a macro. Prevents the macro hygiene pass from turning embedded variables into gensym variables. See the &lt;a href=&quot;../../manual/metaprogramming/index#man-macros-1&quot;&gt;Macros&lt;/a&gt; section of the Metaprogramming chapter of the manual for more details and examples.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
