<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="scala">
    <body>
      <group id="scala">
        <trans-unit id="d6c5d55347e83e24208c443d22fa609ee61d6933" translate="yes" xml:space="preserve">
          <source>Value &lt;code&gt;arrReversed&lt;/code&gt; will be of type &lt;code&gt;Array[Int]&lt;/code&gt;, with an implicit conversion to &lt;code&gt;ArrayOps&lt;/code&gt; occurring to perform the &lt;code&gt;reverse&lt;/code&gt; operation. The value of &lt;code&gt;seqReversed&lt;/code&gt;, on the other hand, will be computed by converting to &lt;code&gt;ArraySeq&lt;/code&gt; first and invoking the variant of &lt;code&gt;reverse&lt;/code&gt; that returns another &lt;code&gt;ArraySeq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28765bc574abdfc4fd2575a0aac206a3e5767ae0" translate="yes" xml:space="preserve">
          <source>Value Members</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7575268e42770829de5a92aed94908f89f7df3c8" translate="yes" xml:space="preserve">
          <source>ValueOf</source>
          <target state="translated">ValueOf</target>
        </trans-unit>
        <trans-unit id="ee4b499b4240e253a0fc1af036d20decf444dc29" translate="yes" xml:space="preserve">
          <source>ValueOf.ValueOf()</source>
          <target state="translated">ValueOf.ValueOf()</target>
        </trans-unit>
        <trans-unit id="4f8c12916f94e5938508093b3dcb216d7343c5e8" translate="yes" xml:space="preserve">
          <source>ValueOf.scala</source>
          <target state="translated">ValueOf.scala</target>
        </trans-unit>
        <trans-unit id="12e96d1af5d06a3b448f7db712f67995e801a623" translate="yes" xml:space="preserve">
          <source>ValueOf.value()</source>
          <target state="translated">ValueOf.value()</target>
        </trans-unit>
        <trans-unit id="703a98fc3acc74aa8a6c5b6eaef8bc6d6c539b3f" translate="yes" xml:space="preserve">
          <source>Values SHOULD NOT be added to an enumeration after its construction; doing so makes the enumeration thread-unsafe. If values are added to an enumeration from multiple threads (in a non-synchronized fashion) after construction, the behavior of the enumeration is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4336331806b3cc094d8e9f81db05a354b505e334" translate="yes" xml:space="preserve">
          <source>VarianceNote</source>
          <target state="translated">VarianceNote</target>
        </trans-unit>
        <trans-unit id="a3a42888ce7d35962885274643ec47f551170256" translate="yes" xml:space="preserve">
          <source>Variants of &lt;code&gt;assert&lt;/code&gt; intended for use with static analysis tools are also provided: &lt;code&gt;assume&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;ensuring&lt;/code&gt;. &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;ensuring&lt;/code&gt; are intended for use as a means of design-by-contract style specification of pre- and post-conditions on functions, with the intention that these specifications could be consumed by a static analysis tool. For instance,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57e06f45491067f031284fb03d3a20a0abf04fd" translate="yes" xml:space="preserve">
          <source>Vector</source>
          <target state="translated">Vector</target>
        </trans-unit>
        <trans-unit id="1467516be3e5fabbf5c7597cc4f8784eb3b2ca99" translate="yes" xml:space="preserve">
          <source>Vector is a general-purpose, immutable data structure. It provides random access and updates in effectively constant time, as well as very fast append and prepend. Because vectors strike a good balance between fast random selections and fast random functional updates, they are currently the default implementation of immutable indexed sequences. It is backed by a little endian bit-mapped vector trie with a branching factor of 32. Locality is very good, but not contiguous, which is good for very large sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fff539cee09f9b975724af2bdaa49c3218c89f8" translate="yes" xml:space="preserve">
          <source>Vector$</source>
          <target state="translated">Vector$</target>
        </trans-unit>
        <trans-unit id="ce2f18dde070b3a5262580431c5d650ea3153462" translate="yes" xml:space="preserve">
          <source>Vector$.empty()</source>
          <target state="translated">Vector$.empty()</target>
        </trans-unit>
        <trans-unit id="f635b2cca6c8060dc2682a7d9dece9286ea165a9" translate="yes" xml:space="preserve">
          <source>Vector$.from()</source>
          <target state="translated">Vector$.from()</target>
        </trans-unit>
        <trans-unit id="514ca8ac7393c442de2e000ad83c5397e5e1a4ba" translate="yes" xml:space="preserve">
          <source>Vector$.newBuilder()</source>
          <target state="translated">Vector$.newBuilder()</target>
        </trans-unit>
        <trans-unit id="1ab030a22d6958000816986229c1f3ff6c2109e7" translate="yes" xml:space="preserve">
          <source>Vector.appended()</source>
          <target state="translated">Vector.appended()</target>
        </trans-unit>
        <trans-unit id="ce8bd6ecdcf90381f7a631b7991783a2ccc92273" translate="yes" xml:space="preserve">
          <source>Vector.appendedAll()</source>
          <target state="translated">Vector.appendedAll()</target>
        </trans-unit>
        <trans-unit id="93c38080fee7c433e2549c6e34d653ce1232a554" translate="yes" xml:space="preserve">
          <source>Vector.apply()</source>
          <target state="translated">Vector.apply()</target>
        </trans-unit>
        <trans-unit id="2c390a3e0a5df0be784f89a8a7bbde75c8a580da" translate="yes" xml:space="preserve">
          <source>Vector.applyPreferredMaxLength()</source>
          <target state="translated">Vector.applyPreferredMaxLength()</target>
        </trans-unit>
        <trans-unit id="994e33862807ae0390bede308ed3a4da748ee26b" translate="yes" xml:space="preserve">
          <source>Vector.className()</source>
          <target state="translated">Vector.className()</target>
        </trans-unit>
        <trans-unit id="744df1963521edff5597b023b05673a357c5605d" translate="yes" xml:space="preserve">
          <source>Vector.copyToArray()</source>
          <target state="translated">Vector.copyToArray()</target>
        </trans-unit>
        <trans-unit id="2875bffa5a33a8934f0a84aa49057d23c92ec288" translate="yes" xml:space="preserve">
          <source>Vector.drop()</source>
          <target state="translated">Vector.drop()</target>
        </trans-unit>
        <trans-unit id="cb384d79a3d4312100cb8dd7775e1174585a3fcb" translate="yes" xml:space="preserve">
          <source>Vector.dropRight()</source>
          <target state="translated">Vector.dropRight()</target>
        </trans-unit>
        <trans-unit id="7f735ae3b7fd23fd439bb9b91339ce6d21e167eb" translate="yes" xml:space="preserve">
          <source>Vector.equals()</source>
          <target state="translated">Vector.equals()</target>
        </trans-unit>
        <trans-unit id="7c06e8a277f7b3a5e54688a171c34d42b662ac14" translate="yes" xml:space="preserve">
          <source>Vector.head()</source>
          <target state="translated">Vector.head()</target>
        </trans-unit>
        <trans-unit id="364615934e76c0bf657b92171c6e0695e6ab5448" translate="yes" xml:space="preserve">
          <source>Vector.init()</source>
          <target state="translated">Vector.init()</target>
        </trans-unit>
        <trans-unit id="cd5ab1d5da32baa644d9cc10a9044b222621438f" translate="yes" xml:space="preserve">
          <source>Vector.iterableFactory()</source>
          <target state="translated">Vector.iterableFactory()</target>
        </trans-unit>
        <trans-unit id="bf33cf7f788d664c19782bc048acb12f612c6496" translate="yes" xml:space="preserve">
          <source>Vector.iterator()</source>
          <target state="translated">Vector.iterator()</target>
        </trans-unit>
        <trans-unit id="9c40c2c4e99e0e10198291eeeaad64fe0329b06e" translate="yes" xml:space="preserve">
          <source>Vector.last()</source>
          <target state="translated">Vector.last()</target>
        </trans-unit>
        <trans-unit id="cca8bd7b27e3ef4eb210e3a287eb9e77fd053b99" translate="yes" xml:space="preserve">
          <source>Vector.length()</source>
          <target state="translated">Vector.length()</target>
        </trans-unit>
        <trans-unit id="132ce8acc6894c5a1c7312dac80fb3237b69d62e" translate="yes" xml:space="preserve">
          <source>Vector.preClean()</source>
          <target state="translated">Vector.preClean()</target>
        </trans-unit>
        <trans-unit id="2d228701d9e41657e8feae465ece8a8c9aab44ab" translate="yes" xml:space="preserve">
          <source>Vector.prepended()</source>
          <target state="translated">Vector.prepended()</target>
        </trans-unit>
        <trans-unit id="e4412d9c669381a97b079bcbd0a135777a313255" translate="yes" xml:space="preserve">
          <source>Vector.prependedAll()</source>
          <target state="translated">Vector.prependedAll()</target>
        </trans-unit>
        <trans-unit id="772fa94dbca276df173065cffa631967ce9c0d9c" translate="yes" xml:space="preserve">
          <source>Vector.scala</source>
          <target state="translated">Vector.scala</target>
        </trans-unit>
        <trans-unit id="6721086550b22c2ba3572341e251044ba8d316cd" translate="yes" xml:space="preserve">
          <source>Vector.stepper()</source>
          <target state="translated">Vector.stepper()</target>
        </trans-unit>
        <trans-unit id="2611031b0aee580c293937944d79d06e1100d5fd" translate="yes" xml:space="preserve">
          <source>Vector.tail()</source>
          <target state="translated">Vector.tail()</target>
        </trans-unit>
        <trans-unit id="676209c843c3d1797cdacc68566ee063aa537799" translate="yes" xml:space="preserve">
          <source>Vector.take()</source>
          <target state="translated">Vector.take()</target>
        </trans-unit>
        <trans-unit id="b3cc85f8b2b377d91c98bce1eedc03e8ea3be4a1" translate="yes" xml:space="preserve">
          <source>Vector.takeRight()</source>
          <target state="translated">Vector.takeRight()</target>
        </trans-unit>
        <trans-unit id="e63e6be67660d60ba0f4441f5846d97e67a35e4f" translate="yes" xml:space="preserve">
          <source>Vector.toVector()</source>
          <target state="translated">Vector.toVector()</target>
        </trans-unit>
        <trans-unit id="d650e786e319d383fdbad4d0c0d66477375f1b9c" translate="yes" xml:space="preserve">
          <source>Vector.updated()</source>
          <target state="translated">Vector.updated()</target>
        </trans-unit>
        <trans-unit id="1fc05c8814cf191269e39063bf45b4b8ee1914c6" translate="yes" xml:space="preserve">
          <source>VectorBuilder</source>
          <target state="translated">VectorBuilder</target>
        </trans-unit>
        <trans-unit id="5164a047414f5a39aff82d58729304d0696c37b5" translate="yes" xml:space="preserve">
          <source>VectorBuilder.VectorBuilder()</source>
          <target state="translated">VectorBuilder.VectorBuilder()</target>
        </trans-unit>
        <trans-unit id="531a3b4bffd3923e2594806f956f03e98649802e" translate="yes" xml:space="preserve">
          <source>VectorBuilder.addAll()</source>
          <target state="translated">VectorBuilder.addAll()</target>
        </trans-unit>
        <trans-unit id="0bf1e8cefacb796747af42ccce027fe6a3cc7e56" translate="yes" xml:space="preserve">
          <source>VectorBuilder.addOne()</source>
          <target state="translated">VectorBuilder.addOne()</target>
        </trans-unit>
        <trans-unit id="a9ae39ea586314eb35f1f5ea4555132f302a3312" translate="yes" xml:space="preserve">
          <source>VectorBuilder.clear()</source>
          <target state="translated">VectorBuilder.clear()</target>
        </trans-unit>
        <trans-unit id="e0ba40134b90ccd538c82a91efb671636438cd28" translate="yes" xml:space="preserve">
          <source>VectorBuilder.isEmpty()</source>
          <target state="translated">VectorBuilder.isEmpty()</target>
        </trans-unit>
        <trans-unit id="7f0ec24f8fc213c061323dea5590e6b1aafe0ed6" translate="yes" xml:space="preserve">
          <source>VectorBuilder.knownSize()</source>
          <target state="translated">VectorBuilder.knownSize()</target>
        </trans-unit>
        <trans-unit id="0a7aee27c3ae5e4a333f6179eec9cb6dc2952c33" translate="yes" xml:space="preserve">
          <source>VectorBuilder.nonEmpty()</source>
          <target state="translated">VectorBuilder.nonEmpty()</target>
        </trans-unit>
        <trans-unit id="7a006c5e6b3d5c01429d9f1b3dcaca3106d2792e" translate="yes" xml:space="preserve">
          <source>VectorBuilder.result()</source>
          <target state="translated">VectorBuilder.result()</target>
        </trans-unit>
        <trans-unit id="99ec2a5500f18676866aba6891c904a7459ca377" translate="yes" xml:space="preserve">
          <source>VectorBuilder.size()</source>
          <target state="translated">VectorBuilder.size()</target>
        </trans-unit>
        <trans-unit id="b9d7fdc002184b11986313e958f2045a54335af0" translate="yes" xml:space="preserve">
          <source>VectorIterator</source>
          <target state="translated">VectorIterator</target>
        </trans-unit>
        <trans-unit id="1eeae10f28a30b12133b844e1c605170497fac6f" translate="yes" xml:space="preserve">
          <source>VectorIterator.VectorIterator()</source>
          <target state="translated">VectorIterator.VectorIterator()</target>
        </trans-unit>
        <trans-unit id="8b64c16bb4b92dfca00bbc489badf6b339dfc585" translate="yes" xml:space="preserve">
          <source>VectorIterator.copyToArray()</source>
          <target state="translated">VectorIterator.copyToArray()</target>
        </trans-unit>
        <trans-unit id="ff15e8d63890b4ddef6cbb8a2e4f2bbb609b5a96" translate="yes" xml:space="preserve">
          <source>VectorIterator.drop()</source>
          <target state="translated">VectorIterator.drop()</target>
        </trans-unit>
        <trans-unit id="ae0b3cefd396aa65e41e5a4e51bf5548ab803215" translate="yes" xml:space="preserve">
          <source>VectorIterator.hasNext()</source>
          <target state="translated">VectorIterator.hasNext()</target>
        </trans-unit>
        <trans-unit id="ca8f43e35f8f53c82587dc099b277f94be3eda7a" translate="yes" xml:space="preserve">
          <source>VectorIterator.knownSize()</source>
          <target state="translated">VectorIterator.knownSize()</target>
        </trans-unit>
        <trans-unit id="082ef238921643b752a6cac652b3aca3e77c1d86" translate="yes" xml:space="preserve">
          <source>VectorIterator.next()</source>
          <target state="translated">VectorIterator.next()</target>
        </trans-unit>
        <trans-unit id="be471a5fdecd889b7b73218d5027a4fd5d1fd0e3" translate="yes" xml:space="preserve">
          <source>VectorIterator.slice()</source>
          <target state="translated">VectorIterator.slice()</target>
        </trans-unit>
        <trans-unit id="1d4efbce0e77b411e4dc888eff0ce983a9b7fd94" translate="yes" xml:space="preserve">
          <source>VectorIterator.take()</source>
          <target state="translated">VectorIterator.take()</target>
        </trans-unit>
        <trans-unit id="461ebb8e25755a3fa781fe067fdb6e532c27b5f1" translate="yes" xml:space="preserve">
          <source>VectorMap</source>
          <target state="translated">VectorMap</target>
        </trans-unit>
        <trans-unit id="2c245b958739be64782f5b9024715447ad98156d" translate="yes" xml:space="preserve">
          <source>VectorMap$</source>
          <target state="translated">VectorMap$</target>
        </trans-unit>
        <trans-unit id="dd80ccb1f51ee5530f86dea0b3734565f3fa8081" translate="yes" xml:space="preserve">
          <source>VectorMap$.empty()</source>
          <target state="translated">VectorMap$.empty()</target>
        </trans-unit>
        <trans-unit id="431ff3d232d3388df1f245a96ffd00092a407021" translate="yes" xml:space="preserve">
          <source>VectorMap$.from()</source>
          <target state="translated">VectorMap$.from()</target>
        </trans-unit>
        <trans-unit id="630dc173ced8523baeda4017e8112903cf9e8730" translate="yes" xml:space="preserve">
          <source>VectorMap$.newBuilder()</source>
          <target state="translated">VectorMap$.newBuilder()</target>
        </trans-unit>
        <trans-unit id="f9c6501e6f60184d880b7d9aaaad2f49335a4d46" translate="yes" xml:space="preserve">
          <source>VectorMap.className()</source>
          <target state="translated">VectorMap.className()</target>
        </trans-unit>
        <trans-unit id="41981f65991fb2f2e8d5aa426cdc68ba29313e0e" translate="yes" xml:space="preserve">
          <source>VectorMap.contains()</source>
          <target state="translated">VectorMap.contains()</target>
        </trans-unit>
        <trans-unit id="f2fb0994d746d319b80ca5ffcb910723c0b4412c" translate="yes" xml:space="preserve">
          <source>VectorMap.get()</source>
          <target state="translated">VectorMap.get()</target>
        </trans-unit>
        <trans-unit id="5da00e4a059ff93d257a010a1ad7ea81496a8ee8" translate="yes" xml:space="preserve">
          <source>VectorMap.head()</source>
          <target state="translated">VectorMap.head()</target>
        </trans-unit>
        <trans-unit id="488e4440c691ce8728718e5ea63bbe631ee17974" translate="yes" xml:space="preserve">
          <source>VectorMap.init()</source>
          <target state="translated">VectorMap.init()</target>
        </trans-unit>
        <trans-unit id="962a0c5bf3d6c55c0d4a282fdeb71d543c33b842" translate="yes" xml:space="preserve">
          <source>VectorMap.isEmpty()</source>
          <target state="translated">VectorMap.isEmpty()</target>
        </trans-unit>
        <trans-unit id="8e7088c8f01adec6966f239c510195e81261bfaa" translate="yes" xml:space="preserve">
          <source>VectorMap.iterator()</source>
          <target state="translated">VectorMap.iterator()</target>
        </trans-unit>
        <trans-unit id="d8b4dc71bafe4962286ced727f1e0ef95d438a1c" translate="yes" xml:space="preserve">
          <source>VectorMap.keyStepper()</source>
          <target state="translated">VectorMap.keyStepper()</target>
        </trans-unit>
        <trans-unit id="e88184dd7f8bab470b20595d081dceca071254ab" translate="yes" xml:space="preserve">
          <source>VectorMap.keys()</source>
          <target state="translated">VectorMap.keys()</target>
        </trans-unit>
        <trans-unit id="15dc7dcfc9436c4883273b193841b5e531ebd0fd" translate="yes" xml:space="preserve">
          <source>VectorMap.knownSize()</source>
          <target state="translated">VectorMap.knownSize()</target>
        </trans-unit>
        <trans-unit id="dafe28dfa9168f14fe42397a604d44f3418197c8" translate="yes" xml:space="preserve">
          <source>VectorMap.last()</source>
          <target state="translated">VectorMap.last()</target>
        </trans-unit>
        <trans-unit id="aa228a84a505c81e1d590f69a772c2b71c3ddfd5" translate="yes" xml:space="preserve">
          <source>VectorMap.lastOption()</source>
          <target state="translated">VectorMap.lastOption()</target>
        </trans-unit>
        <trans-unit id="bd369fb6493ba2b90e5262ad08f01c28b8dc138d" translate="yes" xml:space="preserve">
          <source>VectorMap.mapFactory()</source>
          <target state="translated">VectorMap.mapFactory()</target>
        </trans-unit>
        <trans-unit id="274f0be1c0750891a8c0b0cafc7845a34ef2ef5f" translate="yes" xml:space="preserve">
          <source>VectorMap.removed()</source>
          <target state="translated">VectorMap.removed()</target>
        </trans-unit>
        <trans-unit id="b73cd6500871dad202de2329d9e6c9248c488b02" translate="yes" xml:space="preserve">
          <source>VectorMap.scala</source>
          <target state="translated">VectorMap.scala</target>
        </trans-unit>
        <trans-unit id="0e2ee2655d9b5180bfd1b4d0d0b7140ef6c05a64" translate="yes" xml:space="preserve">
          <source>VectorMap.size()</source>
          <target state="translated">VectorMap.size()</target>
        </trans-unit>
        <trans-unit id="c892750786c0c0d65d9a58f28fb22d12569cb04b" translate="yes" xml:space="preserve">
          <source>VectorMap.stepper()</source>
          <target state="translated">VectorMap.stepper()</target>
        </trans-unit>
        <trans-unit id="88a434c674bebca7557581cbc309be8aaedd8bb8" translate="yes" xml:space="preserve">
          <source>VectorMap.tail()</source>
          <target state="translated">VectorMap.tail()</target>
        </trans-unit>
        <trans-unit id="2468402314c2933318a7e130e8e1763dc93c97c6" translate="yes" xml:space="preserve">
          <source>VectorMap.updated()</source>
          <target state="translated">VectorMap.updated()</target>
        </trans-unit>
        <trans-unit id="fcda5c1125b90987e87fd8475d810a56b1a82819" translate="yes" xml:space="preserve">
          <source>VectorMap.valueStepper()</source>
          <target state="translated">VectorMap.valueStepper()</target>
        </trans-unit>
        <trans-unit id="5125dabcc07f1dbcf91b1c0c1353ef5a53b7bd98" translate="yes" xml:space="preserve">
          <source>VectorMap.values()</source>
          <target state="translated">VectorMap.values()</target>
        </trans-unit>
        <trans-unit id="45e4b03f111267bc6f57a87e4461971c67a82b0b" translate="yes" xml:space="preserve">
          <source>VectorMap.withDefault()</source>
          <target state="translated">VectorMap.withDefault()</target>
        </trans-unit>
        <trans-unit id="5455efddbf91de5ab6ba7717ee518de491d93cd1" translate="yes" xml:space="preserve">
          <source>VectorMap.withDefaultValue()</source>
          <target state="translated">VectorMap.withDefaultValue()</target>
        </trans-unit>
        <trans-unit id="ad789c9e73679967690b37f059965e41f7a369dd" translate="yes" xml:space="preserve">
          <source>VectorPointer</source>
          <target state="translated">VectorPointer</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="69bd4ef9fbd0894a22759c3766b859defbdedbc8" translate="yes" xml:space="preserve">
          <source>View</source>
          <target state="translated">View</target>
        </trans-unit>
        <trans-unit id="9e200d7eeeff0986947ed842502612da3c54deb8" translate="yes" xml:space="preserve">
          <source>View defined in terms of indexing a range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2eae43a1526a5ddc3e20dc146f04840ca69528" translate="yes" xml:space="preserve">
          <source>View element type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa58765c367222db4afb1d5e2a4f958296a4e0e" translate="yes" xml:space="preserve">
          <source>View$</source>
          <target state="translated">View$</target>
        </trans-unit>
        <trans-unit id="17d54f9d84dbcfdb9d2cac0aa813b308a13ace64" translate="yes" xml:space="preserve">
          <source>View$.Appended</source>
          <target state="translated">View$.Appended</target>
        </trans-unit>
        <trans-unit id="e849fa9810359f778a277919d8bb5a0e7792fb3f" translate="yes" xml:space="preserve">
          <source>View$.Appended()</source>
          <target state="translated">View$.Appended()</target>
        </trans-unit>
        <trans-unit id="fab24850e99de2e183033cbe709d10564872b89a" translate="yes" xml:space="preserve">
          <source>View$.Appended.Appended()</source>
          <target state="translated">View$.Appended.Appended()</target>
        </trans-unit>
        <trans-unit id="825bf2a074abb531127a194726bcf8b1f3d0f370" translate="yes" xml:space="preserve">
          <source>View$.Appended.isEmpty()</source>
          <target state="translated">View$.Appended.isEmpty()</target>
        </trans-unit>
        <trans-unit id="d5e2dd8417c922508dba2a56095c397e3f666ac2" translate="yes" xml:space="preserve">
          <source>View$.Appended.iterator()</source>
          <target state="translated">View$.Appended.iterator()</target>
        </trans-unit>
        <trans-unit id="acdfa2e3703d860996904625159f6a3a78bb6f81" translate="yes" xml:space="preserve">
          <source>View$.Appended.knownSize()</source>
          <target state="translated">View$.Appended.knownSize()</target>
        </trans-unit>
        <trans-unit id="a79e97c393bd8133bc079b6f92350ff88286a6e0" translate="yes" xml:space="preserve">
          <source>View$.Collect</source>
          <target state="translated">View$.Collect</target>
        </trans-unit>
        <trans-unit id="611f81e357de0257cc67ab5c9a75150dc324fc0f" translate="yes" xml:space="preserve">
          <source>View$.Collect()</source>
          <target state="translated">View$.Collect()</target>
        </trans-unit>
        <trans-unit id="5d6d7d99814af016b25eaea24cbc8716107e3532" translate="yes" xml:space="preserve">
          <source>View$.Collect.Collect()</source>
          <target state="translated">View$.Collect.Collect()</target>
        </trans-unit>
        <trans-unit id="0c4a62e87d7431575420370eff2030f4d2c7c000" translate="yes" xml:space="preserve">
          <source>View$.Collect.iterator()</source>
          <target state="translated">View$.Collect.iterator()</target>
        </trans-unit>
        <trans-unit id="36e9514f02d887e7b8bbc86e6901bfa35dc58fbd" translate="yes" xml:space="preserve">
          <source>View$.Concat</source>
          <target state="translated">View$.Concat</target>
        </trans-unit>
        <trans-unit id="060d33214d106fd21d898440657e937b3bd9edf6" translate="yes" xml:space="preserve">
          <source>View$.Concat()</source>
          <target state="translated">View$.Concat()</target>
        </trans-unit>
        <trans-unit id="3356b578aed8ff8bcad5c79b69dde88ed26d5636" translate="yes" xml:space="preserve">
          <source>View$.Concat.Concat()</source>
          <target state="translated">View$.Concat.Concat()</target>
        </trans-unit>
        <trans-unit id="4e6054a98ebf39c9e5e2d030b6b768476cb7c88a" translate="yes" xml:space="preserve">
          <source>View$.Concat.isEmpty()</source>
          <target state="translated">View$.Concat.isEmpty()</target>
        </trans-unit>
        <trans-unit id="e0582c04e1d854a4502be70e668d4d2818a9e7be" translate="yes" xml:space="preserve">
          <source>View$.Concat.iterator()</source>
          <target state="translated">View$.Concat.iterator()</target>
        </trans-unit>
        <trans-unit id="6b1acf7915f8a3a73098f5c737c6b9394966df6a" translate="yes" xml:space="preserve">
          <source>View$.Concat.knownSize()</source>
          <target state="translated">View$.Concat.knownSize()</target>
        </trans-unit>
        <trans-unit id="d2e3f465de5efa7ca9cc113ffab48337efb519a1" translate="yes" xml:space="preserve">
          <source>View$.DistinctBy</source>
          <target state="translated">View$.DistinctBy</target>
        </trans-unit>
        <trans-unit id="d28725d872da26ee6db162400427803a130b0771" translate="yes" xml:space="preserve">
          <source>View$.DistinctBy()</source>
          <target state="translated">View$.DistinctBy()</target>
        </trans-unit>
        <trans-unit id="fddadc056fb0c939636da42fcfd8b9177141364e" translate="yes" xml:space="preserve">
          <source>View$.DistinctBy.DistinctBy()</source>
          <target state="translated">View$.DistinctBy.DistinctBy()</target>
        </trans-unit>
        <trans-unit id="2fe7742eb50183f4f9a0250c5ad7224735c84c14" translate="yes" xml:space="preserve">
          <source>View$.DistinctBy.isEmpty()</source>
          <target state="translated">View$.DistinctBy.isEmpty()</target>
        </trans-unit>
        <trans-unit id="0d6e6941198bd1aea0ed31bbb92fbcd08deb8dbf" translate="yes" xml:space="preserve">
          <source>View$.DistinctBy.iterator()</source>
          <target state="translated">View$.DistinctBy.iterator()</target>
        </trans-unit>
        <trans-unit id="a400719b29f17e2d6ceb0ceb8f8303312c3c8ddf" translate="yes" xml:space="preserve">
          <source>View$.DistinctBy.knownSize()</source>
          <target state="translated">View$.DistinctBy.knownSize()</target>
        </trans-unit>
        <trans-unit id="e16858bcd7c1fbbcb546dca89e360c2bc30f27d4" translate="yes" xml:space="preserve">
          <source>View$.Drop</source>
          <target state="translated">View$.Drop</target>
        </trans-unit>
        <trans-unit id="3a8a94975ea3263c5dfbaeb7f51c78d6f500f3c6" translate="yes" xml:space="preserve">
          <source>View$.Drop()</source>
          <target state="translated">View$.Drop()</target>
        </trans-unit>
        <trans-unit id="726b38732a01d9873bf6e4269c385d7612dc1a00" translate="yes" xml:space="preserve">
          <source>View$.Drop.Drop()</source>
          <target state="translated">View$.Drop.Drop()</target>
        </trans-unit>
        <trans-unit id="e06ed4894d6672eefe62ab353d15217074acd8fd" translate="yes" xml:space="preserve">
          <source>View$.Drop.isEmpty()</source>
          <target state="translated">View$.Drop.isEmpty()</target>
        </trans-unit>
        <trans-unit id="086a9a96399de1b079ef9117f0dab6aa2117fd8f" translate="yes" xml:space="preserve">
          <source>View$.Drop.iterator()</source>
          <target state="translated">View$.Drop.iterator()</target>
        </trans-unit>
        <trans-unit id="4b3c309923b1bdb79f826810804ebb80e95d74d4" translate="yes" xml:space="preserve">
          <source>View$.Drop.knownSize()</source>
          <target state="translated">View$.Drop.knownSize()</target>
        </trans-unit>
        <trans-unit id="9654139ce8255e4002c6f06d0aa3bbab5c4531fa" translate="yes" xml:space="preserve">
          <source>View$.Drop.normN()</source>
          <target state="translated">View$.Drop.normN()</target>
        </trans-unit>
        <trans-unit id="58ccd15c85880cf07a4762d76975bf24232ea5c8" translate="yes" xml:space="preserve">
          <source>View$.DropRight</source>
          <target state="translated">View$.DropRight</target>
        </trans-unit>
        <trans-unit id="7a00b263384e136b31054a58d3c8bf479fdddf6a" translate="yes" xml:space="preserve">
          <source>View$.DropRight()</source>
          <target state="translated">View$.DropRight()</target>
        </trans-unit>
        <trans-unit id="d937042e8eafc53df3dfd66063b54b45ce902ad8" translate="yes" xml:space="preserve">
          <source>View$.DropRight.DropRight()</source>
          <target state="translated">View$.DropRight.DropRight()</target>
        </trans-unit>
        <trans-unit id="0f363bcc556875c56e1bbd4907dc78463e0ae6de" translate="yes" xml:space="preserve">
          <source>View$.DropRight.isEmpty()</source>
          <target state="translated">View$.DropRight.isEmpty()</target>
        </trans-unit>
        <trans-unit id="7285830d4f94754610ddbca5516d0805b81dca11" translate="yes" xml:space="preserve">
          <source>View$.DropRight.iterator()</source>
          <target state="translated">View$.DropRight.iterator()</target>
        </trans-unit>
        <trans-unit id="3a6e19dba576bc87be5c831a8c5a4c226618c8c2" translate="yes" xml:space="preserve">
          <source>View$.DropRight.knownSize()</source>
          <target state="translated">View$.DropRight.knownSize()</target>
        </trans-unit>
        <trans-unit id="2ce3d157c20972312ec53fb5c3f748e13b8d9dad" translate="yes" xml:space="preserve">
          <source>View$.DropRight.normN()</source>
          <target state="translated">View$.DropRight.normN()</target>
        </trans-unit>
        <trans-unit id="2ee12aaffc5fced9a81c092e8e02ba0391c0a5a8" translate="yes" xml:space="preserve">
          <source>View$.DropWhile</source>
          <target state="translated">View$.DropWhile</target>
        </trans-unit>
        <trans-unit id="5d42dde32bf62193dc498d06fa09dcd0e80ce73c" translate="yes" xml:space="preserve">
          <source>View$.DropWhile()</source>
          <target state="translated">View$.DropWhile()</target>
        </trans-unit>
        <trans-unit id="b2bf39c2464724a9d17ee05eda31cb51d32a254c" translate="yes" xml:space="preserve">
          <source>View$.DropWhile.DropWhile()</source>
          <target state="translated">View$.DropWhile.DropWhile()</target>
        </trans-unit>
        <trans-unit id="3262ac43c0f32e8e69e48f7c7d63e815c64eacff" translate="yes" xml:space="preserve">
          <source>View$.DropWhile.isEmpty()</source>
          <target state="translated">View$.DropWhile.isEmpty()</target>
        </trans-unit>
        <trans-unit id="1817f37ddcfb8ce36827073864e7d84942c617ab" translate="yes" xml:space="preserve">
          <source>View$.DropWhile.iterator()</source>
          <target state="translated">View$.DropWhile.iterator()</target>
        </trans-unit>
        <trans-unit id="eb164e9d9463f1122d96bea2d7052e0c866768bd" translate="yes" xml:space="preserve">
          <source>View$.DropWhile.knownSize()</source>
          <target state="translated">View$.DropWhile.knownSize()</target>
        </trans-unit>
        <trans-unit id="9e2682266faaa15dac7e743ea0fd99817947a734" translate="yes" xml:space="preserve">
          <source>View$.Elems</source>
          <target state="translated">View$.Elems</target>
        </trans-unit>
        <trans-unit id="7efd4facecd6d778b1b128c54a858dec341febe5" translate="yes" xml:space="preserve">
          <source>View$.Elems()</source>
          <target state="translated">View$.Elems()</target>
        </trans-unit>
        <trans-unit id="7e335f910b61ee4c3062875e0f9b7bfa33d23d3a" translate="yes" xml:space="preserve">
          <source>View$.Elems.Elems()</source>
          <target state="translated">View$.Elems.Elems()</target>
        </trans-unit>
        <trans-unit id="6aeed3af772ec38e079ddd3048b204095779b3ca" translate="yes" xml:space="preserve">
          <source>View$.Elems.isEmpty()</source>
          <target state="translated">View$.Elems.isEmpty()</target>
        </trans-unit>
        <trans-unit id="057bba0e2b29bf76f398bd369b23eef4e7e97e83" translate="yes" xml:space="preserve">
          <source>View$.Elems.iterator()</source>
          <target state="translated">View$.Elems.iterator()</target>
        </trans-unit>
        <trans-unit id="3d729af12c56eaefc4bd8f55f1b22b73b4700d94" translate="yes" xml:space="preserve">
          <source>View$.Elems.knownSize()</source>
          <target state="translated">View$.Elems.knownSize()</target>
        </trans-unit>
        <trans-unit id="82548e71825c1cdf7505161bad92af1c95cb1e5d" translate="yes" xml:space="preserve">
          <source>View$.Empty$</source>
          <target state="translated">View$.Empty$</target>
        </trans-unit>
        <trans-unit id="62e183a3972558f406a55c66f3b4bc84212d34fb" translate="yes" xml:space="preserve">
          <source>View$.Empty$.isEmpty()</source>
          <target state="translated">View$.Empty$.isEmpty()</target>
        </trans-unit>
        <trans-unit id="f2fbdf69707091ba1206b128a6f657f1ca0caf4c" translate="yes" xml:space="preserve">
          <source>View$.Empty$.iterator()</source>
          <target state="translated">View$.Empty$.iterator()</target>
        </trans-unit>
        <trans-unit id="9b77855a04d52705b7a457585ad62739fa4c5abe" translate="yes" xml:space="preserve">
          <source>View$.Empty$.knownSize()</source>
          <target state="translated">View$.Empty$.knownSize()</target>
        </trans-unit>
        <trans-unit id="db88462187f87348e251e3b7ea94abbd06ef2b4e" translate="yes" xml:space="preserve">
          <source>View$.Empty()</source>
          <target state="translated">View$.Empty()</target>
        </trans-unit>
        <trans-unit id="16a3993227e6359ca8d9c526158db74d7b741ae9" translate="yes" xml:space="preserve">
          <source>View$.Fill</source>
          <target state="translated">View$.Fill</target>
        </trans-unit>
        <trans-unit id="c5152372127a234a087b744093c922ffafb7e290" translate="yes" xml:space="preserve">
          <source>View$.Fill()</source>
          <target state="translated">View$.Fill()</target>
        </trans-unit>
        <trans-unit id="fb0b374da44dc0b9462eb12f683bf78cb7f09fa1" translate="yes" xml:space="preserve">
          <source>View$.Fill.Fill()</source>
          <target state="translated">View$.Fill.Fill()</target>
        </trans-unit>
        <trans-unit id="17484582de2a6327c013ef44a86a7387d083041c" translate="yes" xml:space="preserve">
          <source>View$.Fill.isEmpty()</source>
          <target state="translated">View$.Fill.isEmpty()</target>
        </trans-unit>
        <trans-unit id="12c5d4c54d68d1985f0a11549932806c86cf86dc" translate="yes" xml:space="preserve">
          <source>View$.Fill.iterator()</source>
          <target state="translated">View$.Fill.iterator()</target>
        </trans-unit>
        <trans-unit id="d6f2a1b633a8bf66750c4dedc45c8ae72d8c88bc" translate="yes" xml:space="preserve">
          <source>View$.Fill.knownSize()</source>
          <target state="translated">View$.Fill.knownSize()</target>
        </trans-unit>
        <trans-unit id="edfe60c2eee85ca5db8b09c93d39c551b6f76090" translate="yes" xml:space="preserve">
          <source>View$.Filter</source>
          <target state="translated">View$.Filter</target>
        </trans-unit>
        <trans-unit id="938cedda1b2ecc695ff1eaa3eb9cd8f0ffa15851" translate="yes" xml:space="preserve">
          <source>View$.Filter$</source>
          <target state="translated">View$.Filter$</target>
        </trans-unit>
        <trans-unit id="d031dda294f495cdd545520389dd89c6ca640b72" translate="yes" xml:space="preserve">
          <source>View$.Filter$.apply()</source>
          <target state="translated">View$.Filter$.apply()</target>
        </trans-unit>
        <trans-unit id="24bba63a9684e97f307c22bc26771c5b6dc6272e" translate="yes" xml:space="preserve">
          <source>View$.Filter()</source>
          <target state="translated">View$.Filter()</target>
        </trans-unit>
        <trans-unit id="a1ca67793a5da69bd73c268d98349af8b4d719b9" translate="yes" xml:space="preserve">
          <source>View$.Filter.Filter()</source>
          <target state="translated">View$.Filter.Filter()</target>
        </trans-unit>
        <trans-unit id="060147401fa483237887e52eb443689ea1878632" translate="yes" xml:space="preserve">
          <source>View$.Filter.isEmpty()</source>
          <target state="translated">View$.Filter.isEmpty()</target>
        </trans-unit>
        <trans-unit id="ad678fe68253edd5ceba5df306bced30d71564dd" translate="yes" xml:space="preserve">
          <source>View$.Filter.isFlipped()</source>
          <target state="translated">View$.Filter.isFlipped()</target>
        </trans-unit>
        <trans-unit id="48b4048410f0cb5f035d6dd254d4a57305884405" translate="yes" xml:space="preserve">
          <source>View$.Filter.iterator()</source>
          <target state="translated">View$.Filter.iterator()</target>
        </trans-unit>
        <trans-unit id="a9645785cf150ed324586c7073d1c59322dd6344" translate="yes" xml:space="preserve">
          <source>View$.Filter.knownSize()</source>
          <target state="translated">View$.Filter.knownSize()</target>
        </trans-unit>
        <trans-unit id="6f9aeaa915cdc8db8af1e49156a5bdf329b9b87b" translate="yes" xml:space="preserve">
          <source>View$.Filter.p()</source>
          <target state="translated">View$.Filter.p()</target>
        </trans-unit>
        <trans-unit id="4529fab644342aff9a3117bce721968abc8c5c0d" translate="yes" xml:space="preserve">
          <source>View$.Filter.underlying()</source>
          <target state="translated">View$.Filter.underlying()</target>
        </trans-unit>
        <trans-unit id="011c977c8af09692e8d20cddaef8aefc3063315d" translate="yes" xml:space="preserve">
          <source>View$.FlatMap</source>
          <target state="translated">View$.FlatMap</target>
        </trans-unit>
        <trans-unit id="505e14326b3e01e808696c80bfb556ec1f321e7f" translate="yes" xml:space="preserve">
          <source>View$.FlatMap()</source>
          <target state="translated">View$.FlatMap()</target>
        </trans-unit>
        <trans-unit id="62923402132e2a71dddb7772e2f954e3ba559ce0" translate="yes" xml:space="preserve">
          <source>View$.FlatMap.FlatMap()</source>
          <target state="translated">View$.FlatMap.FlatMap()</target>
        </trans-unit>
        <trans-unit id="69eb46a6bb471716739003a8c5c4abe1c9d9f82f" translate="yes" xml:space="preserve">
          <source>View$.FlatMap.isEmpty()</source>
          <target state="translated">View$.FlatMap.isEmpty()</target>
        </trans-unit>
        <trans-unit id="ddabca84a1db93a3fa862e600593657c488fddd5" translate="yes" xml:space="preserve">
          <source>View$.FlatMap.iterator()</source>
          <target state="translated">View$.FlatMap.iterator()</target>
        </trans-unit>
        <trans-unit id="33cc43173f515e3da748b050ee287381769b3527" translate="yes" xml:space="preserve">
          <source>View$.FlatMap.knownSize()</source>
          <target state="translated">View$.FlatMap.knownSize()</target>
        </trans-unit>
        <trans-unit id="cf67d4dc9d50431ddfb17cb9cdd2225ee5406569" translate="yes" xml:space="preserve">
          <source>View$.Iterate</source>
          <target state="translated">View$.Iterate</target>
        </trans-unit>
        <trans-unit id="712833052b630e2c8e4341f0d8b04753470ef347" translate="yes" xml:space="preserve">
          <source>View$.Iterate()</source>
          <target state="translated">View$.Iterate()</target>
        </trans-unit>
        <trans-unit id="9ff74c9cc2bad56ba691a6358094b576d978148e" translate="yes" xml:space="preserve">
          <source>View$.Iterate.Iterate()</source>
          <target state="translated">View$.Iterate.Iterate()</target>
        </trans-unit>
        <trans-unit id="81f4600be79ec5d9a0eea0d0a0466511bfb41264" translate="yes" xml:space="preserve">
          <source>View$.Iterate.isEmpty()</source>
          <target state="translated">View$.Iterate.isEmpty()</target>
        </trans-unit>
        <trans-unit id="d07b1213545dcc93ec1d1e75010db2b40a20ea8f" translate="yes" xml:space="preserve">
          <source>View$.Iterate.iterator()</source>
          <target state="translated">View$.Iterate.iterator()</target>
        </trans-unit>
        <trans-unit id="c44a2c1798ded40203fd71657ce8c76b93d229f8" translate="yes" xml:space="preserve">
          <source>View$.Iterate.knownSize()</source>
          <target state="translated">View$.Iterate.knownSize()</target>
        </trans-unit>
        <trans-unit id="19f93b066bfdbc51ce8519f21958ef15f8277af2" translate="yes" xml:space="preserve">
          <source>View$.LeftPartitionMapped</source>
          <target state="translated">View$.LeftPartitionMapped</target>
        </trans-unit>
        <trans-unit id="8cd12b7fd459365121ca6ec9be0b2e90c0cba16e" translate="yes" xml:space="preserve">
          <source>View$.LeftPartitionMapped()</source>
          <target state="translated">View$.LeftPartitionMapped()</target>
        </trans-unit>
        <trans-unit id="edff54fe75e9b0fa081796986caf42bdf6f7deaa" translate="yes" xml:space="preserve">
          <source>View$.LeftPartitionMapped.LeftPartitionMapped()</source>
          <target state="translated">View$.LeftPartitionMapped.LeftPartitionMapped()</target>
        </trans-unit>
        <trans-unit id="2082b6003dd7262658cbce7ac413af03002505e5" translate="yes" xml:space="preserve">
          <source>View$.LeftPartitionMapped.iterator()</source>
          <target state="translated">View$.LeftPartitionMapped.iterator()</target>
        </trans-unit>
        <trans-unit id="ac5038701bcaadb8e56d30e498810f7355e6c771" translate="yes" xml:space="preserve">
          <source>View$.Map</source>
          <target state="translated">View$.Map</target>
        </trans-unit>
        <trans-unit id="b39b78420637a13f15a10d1bd0717afc1dc032a6" translate="yes" xml:space="preserve">
          <source>View$.Map()</source>
          <target state="translated">View$.Map()</target>
        </trans-unit>
        <trans-unit id="cf22bbadd6828c2f3dc85548dcac6772c26dac21" translate="yes" xml:space="preserve">
          <source>View$.Map.Map()</source>
          <target state="translated">View$.Map.Map()</target>
        </trans-unit>
        <trans-unit id="9ff4d58a2b76fc357aacf0574c9709a73a3911aa" translate="yes" xml:space="preserve">
          <source>View$.Map.isEmpty()</source>
          <target state="translated">View$.Map.isEmpty()</target>
        </trans-unit>
        <trans-unit id="fe6b75127faa8c59377bcc38415d2e6b51c8793a" translate="yes" xml:space="preserve">
          <source>View$.Map.iterator()</source>
          <target state="translated">View$.Map.iterator()</target>
        </trans-unit>
        <trans-unit id="720ed2d3927218b56be8fb8dff4a4c0acff67b7a" translate="yes" xml:space="preserve">
          <source>View$.Map.knownSize()</source>
          <target state="translated">View$.Map.knownSize()</target>
        </trans-unit>
        <trans-unit id="f861f63a080945528a1c738d88988523d818299a" translate="yes" xml:space="preserve">
          <source>View$.PadTo</source>
          <target state="translated">View$.PadTo</target>
        </trans-unit>
        <trans-unit id="849b6de50180087f0d601b9f47402a9c2aa1bffb" translate="yes" xml:space="preserve">
          <source>View$.PadTo()</source>
          <target state="translated">View$.PadTo()</target>
        </trans-unit>
        <trans-unit id="b675d68c883816411bea8be02903231f10daf3b1" translate="yes" xml:space="preserve">
          <source>View$.PadTo.PadTo()</source>
          <target state="translated">View$.PadTo.PadTo()</target>
        </trans-unit>
        <trans-unit id="99a9f134f66731267a23fe24cc2f7bbc757257d6" translate="yes" xml:space="preserve">
          <source>View$.PadTo.isEmpty()</source>
          <target state="translated">View$.PadTo.isEmpty()</target>
        </trans-unit>
        <trans-unit id="39b9b18e25a0e45ba6827be1afb32bf969c8967c" translate="yes" xml:space="preserve">
          <source>View$.PadTo.iterator()</source>
          <target state="translated">View$.PadTo.iterator()</target>
        </trans-unit>
        <trans-unit id="b0018533160d82d4b1f87c28d03dcefa5534a7f6" translate="yes" xml:space="preserve">
          <source>View$.PadTo.knownSize()</source>
          <target state="translated">View$.PadTo.knownSize()</target>
        </trans-unit>
        <trans-unit id="3424dc8fdfffa606e08b06324d2aee22fe88072d" translate="yes" xml:space="preserve">
          <source>View$.Prepended</source>
          <target state="translated">View$.Prepended</target>
        </trans-unit>
        <trans-unit id="7312a8ed3c0e4300bb2c00fcbc4662804dffab08" translate="yes" xml:space="preserve">
          <source>View$.Prepended()</source>
          <target state="translated">View$.Prepended()</target>
        </trans-unit>
        <trans-unit id="d04eee32541be50833f75e780258bf95d16e38d9" translate="yes" xml:space="preserve">
          <source>View$.Prepended.Prepended()</source>
          <target state="translated">View$.Prepended.Prepended()</target>
        </trans-unit>
        <trans-unit id="2440bbf08788ef826b8500e9ff613c5ec396b15d" translate="yes" xml:space="preserve">
          <source>View$.Prepended.isEmpty()</source>
          <target state="translated">View$.Prepended.isEmpty()</target>
        </trans-unit>
        <trans-unit id="ffc0a79c7514d9a59baa83e50258596553269560" translate="yes" xml:space="preserve">
          <source>View$.Prepended.iterator()</source>
          <target state="translated">View$.Prepended.iterator()</target>
        </trans-unit>
        <trans-unit id="89c9d587add89c2192d5fb8b8af06af97d3302ce" translate="yes" xml:space="preserve">
          <source>View$.Prepended.knownSize()</source>
          <target state="translated">View$.Prepended.knownSize()</target>
        </trans-unit>
        <trans-unit id="0ec0bd7811fc795bd9300b4a9915ee7024f70189" translate="yes" xml:space="preserve">
          <source>View$.RightPartitionMapped</source>
          <target state="translated">View$.RightPartitionMapped</target>
        </trans-unit>
        <trans-unit id="26b9aed6ebeee70a89475c7a054870b301345a06" translate="yes" xml:space="preserve">
          <source>View$.RightPartitionMapped()</source>
          <target state="translated">View$.RightPartitionMapped()</target>
        </trans-unit>
        <trans-unit id="a8bf0e389e94c9ab1f381f6b71aee98fb6535109" translate="yes" xml:space="preserve">
          <source>View$.RightPartitionMapped.RightPartitionMapped()</source>
          <target state="translated">View$.RightPartitionMapped.RightPartitionMapped()</target>
        </trans-unit>
        <trans-unit id="db14a248ef06653f3a662f5602c4f2abfa7c2444" translate="yes" xml:space="preserve">
          <source>View$.RightPartitionMapped.iterator()</source>
          <target state="translated">View$.RightPartitionMapped.iterator()</target>
        </trans-unit>
        <trans-unit id="bd3b5125d10a5786e196ad087efa8849655ea95d" translate="yes" xml:space="preserve">
          <source>View$.ScanLeft</source>
          <target state="translated">View$.ScanLeft</target>
        </trans-unit>
        <trans-unit id="b3660e8238762c8e2dbb2628fa654df5583520bf" translate="yes" xml:space="preserve">
          <source>View$.ScanLeft()</source>
          <target state="translated">View$.ScanLeft()</target>
        </trans-unit>
        <trans-unit id="9a6614a7857b1736d3216a46b410538b8de3a70c" translate="yes" xml:space="preserve">
          <source>View$.ScanLeft.ScanLeft()</source>
          <target state="translated">View$.ScanLeft.ScanLeft()</target>
        </trans-unit>
        <trans-unit id="bff2f1fd5b22f14a2020b69d0146194c1ba65341" translate="yes" xml:space="preserve">
          <source>View$.ScanLeft.isEmpty()</source>
          <target state="translated">View$.ScanLeft.isEmpty()</target>
        </trans-unit>
        <trans-unit id="9a2846f76128e861b4f9ffb198786b489c9f317f" translate="yes" xml:space="preserve">
          <source>View$.ScanLeft.iterator()</source>
          <target state="translated">View$.ScanLeft.iterator()</target>
        </trans-unit>
        <trans-unit id="13ffb4ec550f4b35d1060c5b100a4a18035226c8" translate="yes" xml:space="preserve">
          <source>View$.ScanLeft.knownSize()</source>
          <target state="translated">View$.ScanLeft.knownSize()</target>
        </trans-unit>
        <trans-unit id="74ad26bb32e9c018c0f1e795ffa9038d764b6cb1" translate="yes" xml:space="preserve">
          <source>View$.Single</source>
          <target state="translated">View$.Single</target>
        </trans-unit>
        <trans-unit id="94db4240abbeb840ac9c0b9b47d5492ff84b7184" translate="yes" xml:space="preserve">
          <source>View$.Single()</source>
          <target state="translated">View$.Single()</target>
        </trans-unit>
        <trans-unit id="6e7f3b0de4863b2fd02a961725f838ffc1135a30" translate="yes" xml:space="preserve">
          <source>View$.Single.Single()</source>
          <target state="translated">View$.Single.Single()</target>
        </trans-unit>
        <trans-unit id="900470104c32b4fb7a00381739dc76916cd402e7" translate="yes" xml:space="preserve">
          <source>View$.Single.isEmpty()</source>
          <target state="translated">View$.Single.isEmpty()</target>
        </trans-unit>
        <trans-unit id="99fdeff5a55602fa1c1545fa41f19a9b7dd89ddb" translate="yes" xml:space="preserve">
          <source>View$.Single.iterator()</source>
          <target state="translated">View$.Single.iterator()</target>
        </trans-unit>
        <trans-unit id="36ba0eeb90a9e4fe21e6417a592fa413c1374810" translate="yes" xml:space="preserve">
          <source>View$.Single.knownSize()</source>
          <target state="translated">View$.Single.knownSize()</target>
        </trans-unit>
        <trans-unit id="41257f62f13b6e12231bdf421b5cf93030621e7b" translate="yes" xml:space="preserve">
          <source>View$.SomeIterableOps()</source>
          <target state="translated">View$.SomeIterableOps()</target>
        </trans-unit>
        <trans-unit id="58719870aeab627eda33967978261e861959fb54" translate="yes" xml:space="preserve">
          <source>View$.Tabulate</source>
          <target state="translated">View$.Tabulate</target>
        </trans-unit>
        <trans-unit id="ed52f5dc8fe23a196badf4e00c4aa1501c449e96" translate="yes" xml:space="preserve">
          <source>View$.Tabulate()</source>
          <target state="translated">View$.Tabulate()</target>
        </trans-unit>
        <trans-unit id="f2c567aabe621f11c34b9a9f764b87beab972958" translate="yes" xml:space="preserve">
          <source>View$.Tabulate.Tabulate()</source>
          <target state="translated">View$.Tabulate.Tabulate()</target>
        </trans-unit>
        <trans-unit id="281f7bd112c02a3fc63d057fd742e3242acda326" translate="yes" xml:space="preserve">
          <source>View$.Tabulate.isEmpty()</source>
          <target state="translated">View$.Tabulate.isEmpty()</target>
        </trans-unit>
        <trans-unit id="52cf4ecea738ea521fed6150f156ce1967139298" translate="yes" xml:space="preserve">
          <source>View$.Tabulate.iterator()</source>
          <target state="translated">View$.Tabulate.iterator()</target>
        </trans-unit>
        <trans-unit id="cee3d45bba1a747f0605fc0d3f236c20b08da7af" translate="yes" xml:space="preserve">
          <source>View$.Tabulate.knownSize()</source>
          <target state="translated">View$.Tabulate.knownSize()</target>
        </trans-unit>
        <trans-unit id="cb3acbeb6f0a9d17430b02ba622e4ad23448d92a" translate="yes" xml:space="preserve">
          <source>View$.Take</source>
          <target state="translated">View$.Take</target>
        </trans-unit>
        <trans-unit id="272b3fcdf3a11b7fb6a01fa11fe0176d6b1cd0f1" translate="yes" xml:space="preserve">
          <source>View$.Take()</source>
          <target state="translated">View$.Take()</target>
        </trans-unit>
        <trans-unit id="507da50d43153cfa49500673537dde4835b93f7a" translate="yes" xml:space="preserve">
          <source>View$.Take.Take()</source>
          <target state="translated">View$.Take.Take()</target>
        </trans-unit>
        <trans-unit id="8343a9fcacd6cf960885362a1aa4adf805a29d3b" translate="yes" xml:space="preserve">
          <source>View$.Take.isEmpty()</source>
          <target state="translated">View$.Take.isEmpty()</target>
        </trans-unit>
        <trans-unit id="ecce81fce7b23425bc966051ab105bd810944ad2" translate="yes" xml:space="preserve">
          <source>View$.Take.iterator()</source>
          <target state="translated">View$.Take.iterator()</target>
        </trans-unit>
        <trans-unit id="6993acd6ac46e228ff0bbf8b634e76e67df7e05e" translate="yes" xml:space="preserve">
          <source>View$.Take.knownSize()</source>
          <target state="translated">View$.Take.knownSize()</target>
        </trans-unit>
        <trans-unit id="7accb2bee0df7410ca50712e4374d88ff643d65f" translate="yes" xml:space="preserve">
          <source>View$.Take.normN()</source>
          <target state="translated">View$.Take.normN()</target>
        </trans-unit>
        <trans-unit id="af3008e7d55d9837edd85d2817cdaaf709b41d75" translate="yes" xml:space="preserve">
          <source>View$.TakeRight</source>
          <target state="translated">View$.TakeRight</target>
        </trans-unit>
        <trans-unit id="d1a1505e8f450e335cca8bcd578634a53069af54" translate="yes" xml:space="preserve">
          <source>View$.TakeRight()</source>
          <target state="translated">View$.TakeRight()</target>
        </trans-unit>
        <trans-unit id="85ed66471035f6c78e4a9ed0944355ff5fa40ec2" translate="yes" xml:space="preserve">
          <source>View$.TakeRight.TakeRight()</source>
          <target state="translated">View$.TakeRight.TakeRight()</target>
        </trans-unit>
        <trans-unit id="8f692d7a738f00a7daf652f4515a75f9b23a9b16" translate="yes" xml:space="preserve">
          <source>View$.TakeRight.isEmpty()</source>
          <target state="translated">View$.TakeRight.isEmpty()</target>
        </trans-unit>
        <trans-unit id="36588049b95cf2cc4f4620ffce7262ac24540a33" translate="yes" xml:space="preserve">
          <source>View$.TakeRight.iterator()</source>
          <target state="translated">View$.TakeRight.iterator()</target>
        </trans-unit>
        <trans-unit id="c0782ccc84457c1c87775837239bb400d39253bc" translate="yes" xml:space="preserve">
          <source>View$.TakeRight.knownSize()</source>
          <target state="translated">View$.TakeRight.knownSize()</target>
        </trans-unit>
        <trans-unit id="060cf025a85fe12b2a763b51994b2e3ced32014f" translate="yes" xml:space="preserve">
          <source>View$.TakeRight.normN()</source>
          <target state="translated">View$.TakeRight.normN()</target>
        </trans-unit>
        <trans-unit id="600d7114e9f11fab5b63b1dcffb9a502fc625e86" translate="yes" xml:space="preserve">
          <source>View$.TakeWhile</source>
          <target state="translated">View$.TakeWhile</target>
        </trans-unit>
        <trans-unit id="f741403b87dbcef893f9df7579f42874f95097c9" translate="yes" xml:space="preserve">
          <source>View$.TakeWhile()</source>
          <target state="translated">View$.TakeWhile()</target>
        </trans-unit>
        <trans-unit id="cdc7f87477a0252095042de47172b94f864d1e12" translate="yes" xml:space="preserve">
          <source>View$.TakeWhile.TakeWhile()</source>
          <target state="translated">View$.TakeWhile.TakeWhile()</target>
        </trans-unit>
        <trans-unit id="d5c6c889e5ae58b137ea4a451d47d6dac08410d3" translate="yes" xml:space="preserve">
          <source>View$.TakeWhile.isEmpty()</source>
          <target state="translated">View$.TakeWhile.isEmpty()</target>
        </trans-unit>
        <trans-unit id="a1f0128134651a8c794b4d2840ff8aef5a9b2429" translate="yes" xml:space="preserve">
          <source>View$.TakeWhile.iterator()</source>
          <target state="translated">View$.TakeWhile.iterator()</target>
        </trans-unit>
        <trans-unit id="f19a9e5959fdc5f149ebc87e852d995bdca366ea" translate="yes" xml:space="preserve">
          <source>View$.TakeWhile.knownSize()</source>
          <target state="translated">View$.TakeWhile.knownSize()</target>
        </trans-unit>
        <trans-unit id="49eab4995b1d35ddc81754bf2e413d9fd950613e" translate="yes" xml:space="preserve">
          <source>View$.Unfold</source>
          <target state="translated">View$.Unfold</target>
        </trans-unit>
        <trans-unit id="7de34f1e295ed843c3c69991f29adb9a168bfdb1" translate="yes" xml:space="preserve">
          <source>View$.Unfold()</source>
          <target state="translated">View$.Unfold()</target>
        </trans-unit>
        <trans-unit id="259620fbc740b4918fca10017e854479b5932290" translate="yes" xml:space="preserve">
          <source>View$.Unfold.Unfold()</source>
          <target state="translated">View$.Unfold.Unfold()</target>
        </trans-unit>
        <trans-unit id="be3eea15ccb6404346dfe559ae34cdbb2d975a2c" translate="yes" xml:space="preserve">
          <source>View$.Unfold.iterator()</source>
          <target state="translated">View$.Unfold.iterator()</target>
        </trans-unit>
        <trans-unit id="1337412fa909bdc816d5b472163b532d583d35b3" translate="yes" xml:space="preserve">
          <source>View$.Updated</source>
          <target state="translated">View$.Updated</target>
        </trans-unit>
        <trans-unit id="726401aa94db223db1cad95b53178f6577eaf55e" translate="yes" xml:space="preserve">
          <source>View$.Updated()</source>
          <target state="translated">View$.Updated()</target>
        </trans-unit>
        <trans-unit id="3c80ba9f4bda037b86a5d5ace2112db240ee0b95" translate="yes" xml:space="preserve">
          <source>View$.Updated.Updated()</source>
          <target state="translated">View$.Updated.Updated()</target>
        </trans-unit>
        <trans-unit id="4ade27fcace642b4d3b8cff66279a1bd3583ef2e" translate="yes" xml:space="preserve">
          <source>View$.Updated.isEmpty()</source>
          <target state="translated">View$.Updated.isEmpty()</target>
        </trans-unit>
        <trans-unit id="91d8d0573242790fa717f02caacb40bd5e86e675" translate="yes" xml:space="preserve">
          <source>View$.Updated.iterator()</source>
          <target state="translated">View$.Updated.iterator()</target>
        </trans-unit>
        <trans-unit id="5ce8827aa63efdf27e5795e0c5d9ccdbaf604f58" translate="yes" xml:space="preserve">
          <source>View$.Updated.knownSize()</source>
          <target state="translated">View$.Updated.knownSize()</target>
        </trans-unit>
        <trans-unit id="d3c59aea6668f54a36e2dd64a30fc3ead743cd2e" translate="yes" xml:space="preserve">
          <source>View$.Zip</source>
          <target state="translated">View$.Zip</target>
        </trans-unit>
        <trans-unit id="8a0782aa1e4ee6e302fc5cfa0064cf048a51ddb4" translate="yes" xml:space="preserve">
          <source>View$.Zip()</source>
          <target state="translated">View$.Zip()</target>
        </trans-unit>
        <trans-unit id="5debe1bf86200cdefebc9e1214eeb11ccc92f0eb" translate="yes" xml:space="preserve">
          <source>View$.Zip.Zip()</source>
          <target state="translated">View$.Zip.Zip()</target>
        </trans-unit>
        <trans-unit id="cbab588f3f94668469b21c5ddcceee44b1575220" translate="yes" xml:space="preserve">
          <source>View$.Zip.isEmpty()</source>
          <target state="translated">View$.Zip.isEmpty()</target>
        </trans-unit>
        <trans-unit id="85bf23827c5a887b998113cb8fd5fb286d82fd4a" translate="yes" xml:space="preserve">
          <source>View$.Zip.iterator()</source>
          <target state="translated">View$.Zip.iterator()</target>
        </trans-unit>
        <trans-unit id="71aa71d8a8de3d870fe97bb934e5bb768b45fca6" translate="yes" xml:space="preserve">
          <source>View$.Zip.knownSize()</source>
          <target state="translated">View$.Zip.knownSize()</target>
        </trans-unit>
        <trans-unit id="9d6a9b944970c24d84b7ccf0b9b3cce32bd32b87" translate="yes" xml:space="preserve">
          <source>View$.ZipAll</source>
          <target state="translated">View$.ZipAll</target>
        </trans-unit>
        <trans-unit id="893447c0ce06e97dd412be82797e4c7dc6726270" translate="yes" xml:space="preserve">
          <source>View$.ZipAll()</source>
          <target state="translated">View$.ZipAll()</target>
        </trans-unit>
        <trans-unit id="6896ecec2bc574a4bc155ebc65aa1a8996b7016d" translate="yes" xml:space="preserve">
          <source>View$.ZipAll.ZipAll()</source>
          <target state="translated">View$.ZipAll.ZipAll()</target>
        </trans-unit>
        <trans-unit id="2c97d997055689c674ae2222a6a92fcf9180dcac" translate="yes" xml:space="preserve">
          <source>View$.ZipAll.isEmpty()</source>
          <target state="translated">View$.ZipAll.isEmpty()</target>
        </trans-unit>
        <trans-unit id="c152a30f2c20ee2a09d0c21cc9c3d904282db29e" translate="yes" xml:space="preserve">
          <source>View$.ZipAll.iterator()</source>
          <target state="translated">View$.ZipAll.iterator()</target>
        </trans-unit>
        <trans-unit id="75db3faa470cd6df0f4d36c11c353ac2426d8313" translate="yes" xml:space="preserve">
          <source>View$.ZipAll.knownSize()</source>
          <target state="translated">View$.ZipAll.knownSize()</target>
        </trans-unit>
        <trans-unit id="3a4977cca00c2d6889da0975b5d811045e1feb1f" translate="yes" xml:space="preserve">
          <source>View$.ZipWithIndex</source>
          <target state="translated">View$.ZipWithIndex</target>
        </trans-unit>
        <trans-unit id="2164a050222f32d76135a63842913d8461a9c98e" translate="yes" xml:space="preserve">
          <source>View$.ZipWithIndex()</source>
          <target state="translated">View$.ZipWithIndex()</target>
        </trans-unit>
        <trans-unit id="7b0fa801e04c30e35d483c8549a5dbbf31832300" translate="yes" xml:space="preserve">
          <source>View$.ZipWithIndex.ZipWithIndex()</source>
          <target state="translated">View$.ZipWithIndex.ZipWithIndex()</target>
        </trans-unit>
        <trans-unit id="9762adbe11c67928b149f9a25a0aa8a998227112" translate="yes" xml:space="preserve">
          <source>View$.ZipWithIndex.isEmpty()</source>
          <target state="translated">View$.ZipWithIndex.isEmpty()</target>
        </trans-unit>
        <trans-unit id="bb21a3e51318c1c004f45ad77e548802f6b09dcd" translate="yes" xml:space="preserve">
          <source>View$.ZipWithIndex.iterator()</source>
          <target state="translated">View$.ZipWithIndex.iterator()</target>
        </trans-unit>
        <trans-unit id="0aa0be145aac28dda837fe031c006a3a3c4f248e" translate="yes" xml:space="preserve">
          <source>View$.ZipWithIndex.knownSize()</source>
          <target state="translated">View$.ZipWithIndex.knownSize()</target>
        </trans-unit>
        <trans-unit id="e81562ab925becf519e3a59ca1847219a9453067" translate="yes" xml:space="preserve">
          <source>View$.apply()</source>
          <target state="translated">View$.apply()</target>
        </trans-unit>
        <trans-unit id="87a7d0ca2b5dcd7d171d78e8f7f7b8058702c694" translate="yes" xml:space="preserve">
          <source>View$.empty()</source>
          <target state="translated">View$.empty()</target>
        </trans-unit>
        <trans-unit id="58aa07530f6ea6d557956d7ba6af3e20998838c6" translate="yes" xml:space="preserve">
          <source>View$.from()</source>
          <target state="translated">View$.from()</target>
        </trans-unit>
        <trans-unit id="6be2a8438c8402ffae6edfe78f33496e373af29e" translate="yes" xml:space="preserve">
          <source>View$.fromIteratorProvider()</source>
          <target state="translated">View$.fromIteratorProvider()</target>
        </trans-unit>
        <trans-unit id="cc8188e8da0206eabdfa6a2207f88088c81cb2f3" translate="yes" xml:space="preserve">
          <source>View$.newBuilder()</source>
          <target state="translated">View$.newBuilder()</target>
        </trans-unit>
        <trans-unit id="7a0aa5797cd7f97adf00c732bc2cbc8cb6710aff" translate="yes" xml:space="preserve">
          <source>View.empty()</source>
          <target state="translated">View.empty()</target>
        </trans-unit>
        <trans-unit id="0e8fe4259bc97d1148c115a31a75fea36e5a19cb" translate="yes" xml:space="preserve">
          <source>View.iterableFactory()</source>
          <target state="translated">View.iterableFactory()</target>
        </trans-unit>
        <trans-unit id="22d6ff9fee9eb0c95cb53d85c19b7eda7d341bf8" translate="yes" xml:space="preserve">
          <source>View.scala</source>
          <target state="translated">View.scala</target>
        </trans-unit>
        <trans-unit id="794cead1155d7baed23f78fdb3da5fe0b422c4d4" translate="yes" xml:space="preserve">
          <source>View.stringPrefix()</source>
          <target state="translated">View.stringPrefix()</target>
        </trans-unit>
        <trans-unit id="69add2ce7c087724c4927adfe6fd18854668e4a1" translate="yes" xml:space="preserve">
          <source>View.toString()</source>
          <target state="translated">View.toString()</target>
        </trans-unit>
        <trans-unit id="df8edba0c8330c63d60dedd0ec800cedf68fed67" translate="yes" xml:space="preserve">
          <source>View.view()</source>
          <target state="translated">View.view()</target>
        </trans-unit>
        <trans-unit id="4b59deece30fd73a95f410ab3b79e2dc53f2edf6" translate="yes" xml:space="preserve">
          <source>Views are collections whose transformation operations are non strict: the resulting elements are evaluated only when the view is effectively traversed (e.g. using &lt;code&gt;foreach&lt;/code&gt; or &lt;code&gt;foldLeft&lt;/code&gt;), or when the view is converted to a strict collection type (using the &lt;code&gt;to&lt;/code&gt; operation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6888551257cf6864bf73fd20695aa78164bec79e" translate="yes" xml:space="preserve">
          <source>WARNING: It is strongly discouraged to supply lengthy timeouts since the progress of the calling thread will be suspended&amp;mdash;blocked&amp;mdash;until either the &lt;code&gt;Awaitable&lt;/code&gt; becomes ready or the timeout expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d479633959079438249cdd7b551a8ec523499bef" translate="yes" xml:space="preserve">
          <source>WARNING: It is strongly discouraged to supply lengthy timeouts since the progress of the calling thread will be suspended&amp;mdash;blocked&amp;mdash;until either the &lt;code&gt;Awaitable&lt;/code&gt; has a result or the timeout expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b182b4c9116c936e3a8af7285616d02f55ba0c5" translate="yes" xml:space="preserve">
          <source>WARNING: Never use both &lt;code&gt;submitAsyncBatched&lt;/code&gt; and &lt;code&gt;submitSyncBatched&lt;/code&gt; in the same implementation of &lt;code&gt;BatchingExecutor&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec619b32ac6bb1cf340bf7d1463dac091b98d90b" translate="yes" xml:space="preserve">
          <source>WARNING: Only ever execute logic which will quickly return control to the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c6a1110d97a77ba301d6833dff38851fdb2898" translate="yes" xml:space="preserve">
          <source>WARNING: Will not be called if this future is never completed or if it is completed with a failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d23f3b3af90554dade75ca1449213a1776239f" translate="yes" xml:space="preserve">
          <source>WHITE</source>
          <target state="translated">WHITE</target>
        </trans-unit>
        <trans-unit id="2421bb573d725d0e3f222a91ddeb5a919f27ae49" translate="yes" xml:space="preserve">
          <source>WHITE_B</source>
          <target state="translated">WHITE_B</target>
        </trans-unit>
        <trans-unit id="bf3771399ec9ade68a057ae9df768f6defc142cc" translate="yes" xml:space="preserve">
          <source>Wait at least &lt;code&gt;timeout&lt;/code&gt; milliseconds (possibly more) for this &lt;code&gt;SyncVar&lt;/code&gt; to become defined and then get its value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b16442ef020eb8b0673514c3e17bb05340c9fb" translate="yes" xml:space="preserve">
          <source>Wait at least &lt;code&gt;timeout&lt;/code&gt; milliseconds (possibly more) for this &lt;code&gt;SyncVar&lt;/code&gt; to become defined and then get the stored value, unsetting it as a side effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f676a8e9a94109059378291e3a358ee5a91bae34" translate="yes" xml:space="preserve">
          <source>Wait for this SyncVar to become defined and then get the stored value without modifying it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f676386ab8c81a8a567b36c59d03f9a0b54e8fb8" translate="yes" xml:space="preserve">
          <source>Wait for this SyncVar to become defined and then get the stored value, unsetting it as a side effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9a9c26504120313004bef6389ed2139b778a17" translate="yes" xml:space="preserve">
          <source>Wakes up a single thread that is waiting on the receiver object's monitor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169385eee866fc2070439df9d3f2ce078ce42f89" translate="yes" xml:space="preserve">
          <source>Wakes up all threads that are waiting on the receiver object's monitor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce669a87f69b83b10e65e28380ed41131a4ad8b" translate="yes" xml:space="preserve">
          <source>We describe below the general concepts and architecture of the package, and then take a closer look at each of the categories mentioned above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fde7d60bfd4fdac971d84609f1b13f003b16f3" translate="yes" xml:space="preserve">
          <source>We need a whole WithFilter class to honor the &quot;doesn't create a new collection&quot; contract even though it seems unlikely to matter much in a collection with max size 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8879f4373571de7be99eac139999bd9bc0063d92" translate="yes" xml:space="preserve">
          <source>We prefer the java.lang.* boxed types to these wrappers in any potential conflicts. Conflicts do exist because the wrappers need to implement ScalaNumber in order to have a symmetric equals method, but that implies implementing java.lang.Number as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7a9b0638d28f33dffa1361868fe598716ffacd" translate="yes" xml:space="preserve">
          <source>We require that for all child classes of Iterable the variance of the child class and the variance of the &lt;code&gt;C&lt;/code&gt; parameter passed to &lt;code&gt;IterableOps&lt;/code&gt; are the same. We cannot express this since we lack variance polymorphism. That's why we have to resort at some places to write &lt;code&gt;C[A @uncheckedVariance]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee2c087612b9f2527a0a376f6491ea5a96164be" translate="yes" xml:space="preserve">
          <source>We'll see more details about controlling I/O of the process in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03229c3ce0e1d4a5dea21e64ed5a7a21dd50346b" translate="yes" xml:space="preserve">
          <source>WeakHashMap</source>
          <target state="translated">WeakHashMap</target>
        </trans-unit>
        <trans-unit id="e008ce26b69e7942bfc8e6ddc33c0cb77262e88f" translate="yes" xml:space="preserve">
          <source>WeakHashMap$</source>
          <target state="translated">WeakHashMap$</target>
        </trans-unit>
        <trans-unit id="4dadda27ff868cc8a2e6b647d8f58c7c113fe27d" translate="yes" xml:space="preserve">
          <source>WeakHashMap$.empty()</source>
          <target state="translated">WeakHashMap$.empty()</target>
        </trans-unit>
        <trans-unit id="bf31e4710bbd190e3cc2bf20ce5ad47823539885" translate="yes" xml:space="preserve">
          <source>WeakHashMap$.from()</source>
          <target state="translated">WeakHashMap$.from()</target>
        </trans-unit>
        <trans-unit id="69c4d11569221a03e019288fce0d1d9500081658" translate="yes" xml:space="preserve">
          <source>WeakHashMap$.newBuilder()</source>
          <target state="translated">WeakHashMap$.newBuilder()</target>
        </trans-unit>
        <trans-unit id="348401f011123d8da59de7bd8c7611df655b1e17" translate="yes" xml:space="preserve">
          <source>WeakHashMap.WeakHashMap()</source>
          <target state="translated">WeakHashMap.WeakHashMap()</target>
        </trans-unit>
        <trans-unit id="ec92e3fafb89ffd64d7ae359ffcc91317e9bcca8" translate="yes" xml:space="preserve">
          <source>WeakHashMap.empty()</source>
          <target state="translated">WeakHashMap.empty()</target>
        </trans-unit>
        <trans-unit id="973d28f67f32adc7b88113f0fa1d0e40f9afe097" translate="yes" xml:space="preserve">
          <source>WeakHashMap.mapFactory()</source>
          <target state="translated">WeakHashMap.mapFactory()</target>
        </trans-unit>
        <trans-unit id="b372796eec571a643f96e9d0420dd4c94e90451c" translate="yes" xml:space="preserve">
          <source>WeakHashMap.scala</source>
          <target state="translated">WeakHashMap.scala</target>
        </trans-unit>
        <trans-unit id="b78bb90db19045a5124dc09ed463137bd614b9a7" translate="yes" xml:space="preserve">
          <source>WeakHashMap.stringPrefix()</source>
          <target state="translated">WeakHashMap.stringPrefix()</target>
        </trans-unit>
        <trans-unit id="5ea903ebda4f9f28f642d78e916dc09051395c95" translate="yes" xml:space="preserve">
          <source>WeakReference</source>
          <target state="translated">WeakReference</target>
        </trans-unit>
        <trans-unit id="cd97f7724cad24528a173d26ab6b759be0b6ec1b" translate="yes" xml:space="preserve">
          <source>WeakReference$</source>
          <target state="translated">WeakReference$</target>
        </trans-unit>
        <trans-unit id="377ee4a2425092cda560fe6cd5f9a53f0d94c544" translate="yes" xml:space="preserve">
          <source>WeakReference$.apply()</source>
          <target state="translated">WeakReference$.apply()</target>
        </trans-unit>
        <trans-unit id="32bef5b3d8e14507389d783dceb92c0e0b1c3aa7" translate="yes" xml:space="preserve">
          <source>WeakReference$.unapply()</source>
          <target state="translated">WeakReference$.unapply()</target>
        </trans-unit>
        <trans-unit id="e50b85e5b631ad9249ff293cbf5e3237e981c6e1" translate="yes" xml:space="preserve">
          <source>WeakReference.WeakReference()</source>
          <target state="translated">WeakReference.WeakReference()</target>
        </trans-unit>
        <trans-unit id="cbe3546d75b70ab3790310b4402e335daac9b69a" translate="yes" xml:space="preserve">
          <source>WeakReference.scala</source>
          <target state="translated">WeakReference.scala</target>
        </trans-unit>
        <trans-unit id="3932eac93d7a40280ef3f8859f93ea3fcf53fcb9" translate="yes" xml:space="preserve">
          <source>WeakReference.underlying()</source>
          <target state="translated">WeakReference.underlying()</target>
        </trans-unit>
        <trans-unit id="4ecd94e4371039f64170447966494444f5f733cb" translate="yes" xml:space="preserve">
          <source>What to Run and How</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2188b24fd035958803113fe6955d5ae45c48ce8c" translate="yes" xml:space="preserve">
          <source>When a given condition is true, evaluates the &lt;code&gt;a&lt;/code&gt; argument and returns Some(a). When the condition is false, &lt;code&gt;a&lt;/code&gt; is not evaluated and None is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9646ebe1c6c9266a31fc8a17ea50344a44641a4" translate="yes" xml:space="preserve">
          <source>When attached to a field, this annotation adds a setter and a getter method following the Java Bean convention. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df22c067f0b2b6dcc357ed7df23600e034df317d" translate="yes" xml:space="preserve">
          <source>When converting a parallel stream to a different Scala collection, the stream is first converted into an &lt;span name=&quot;Accumulator&quot;&gt;Accumulator&lt;/span&gt;, which supports parallel building. The accumulator is then converted to the target collection. Note that the stream is processed eagerly while building the accumulator, even if the target collection is lazy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c668e5dbed450ca77180bd483dbb832813825e5b" translate="yes" xml:space="preserve">
          <source>When converting to a collection other than &lt;code&gt;Accumulator&lt;/code&gt;, the generic &lt;code&gt;noAccumulatorFactoryInfo&lt;/code&gt; is passed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a602dbb918f9a468f079716fbc2436f2314eb56c" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;BigDecimal&lt;/code&gt; from a &lt;code&gt;Double&lt;/code&gt; or &lt;code&gt;Float&lt;/code&gt;, care must be taken as the binary fraction representation of &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt; does not easily convert into a decimal representation. Three explicit schemes are available for conversion. &lt;code&gt;BigDecimal.decimal&lt;/code&gt; will convert the floating-point number to a decimal text representation, and build a &lt;code&gt;BigDecimal&lt;/code&gt; based on that. &lt;code&gt;BigDecimal.binary&lt;/code&gt; will expand the binary fraction to the requested or default precision. &lt;code&gt;BigDecimal.exact&lt;/code&gt; will expand the binary fraction to the full number of digits, thus producing the exact decimal value corresponding to the binary fraction of that floating-point number. &lt;code&gt;BigDecimal&lt;/code&gt; equality matches the decimal expansion of &lt;code&gt;Double&lt;/code&gt;: &lt;code&gt;BigDecimal.decimal(0.1) == 0.1&lt;/code&gt;. Note that since &lt;code&gt;0.1f != 0.1&lt;/code&gt;, the same is not true for &lt;code&gt;Float&lt;/code&gt;. Instead, &lt;code&gt;0.1f == BigDecimal.decimal((0.1f).toDouble)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af4f30e2acf692590d77aca917e4c7b0a5f6bd52" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;ProcessIO&lt;/code&gt;, it is important to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaf74db3c90367895eaed75135dc0e8f8e83c9c" translate="yes" xml:space="preserve">
          <source>When defining a field, the Scala compiler creates up to four accessors for it: a getter, a setter, and if the field is annotated with &lt;code&gt;@BeanProperty&lt;/code&gt;, a bean getter and a bean setter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917b9730e74811a15814b591b3a840ee513134ed" translate="yes" xml:space="preserve">
          <source>When defining an implicit class, the Scala compiler creates an implicit conversion method for it. Annotations &lt;code&gt;@companionClass&lt;/code&gt; and &lt;code&gt;@companionMethod&lt;/code&gt; control where an annotation on the implicit class will go. By default, annotations on an implicit class end up only on the class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4a13f92346faa3e2b347ba330c60a037328755" translate="yes" xml:space="preserve">
          <source>When executing an external process, one can provide a command's name, arguments to it, the directory in which it will be executed and what environment variables will be set. For each executing process, one can feed its standard input through a &lt;code&gt;java.io.OutputStream&lt;/code&gt;, and read from its standard output and standard error through a pair of &lt;code&gt;java.io.InputStream&lt;/code&gt;. One can wait until a process finishes execution and then retrieve its return value, or one can kill an executing process. Everything else must be built on those features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d1c2a2547a349217ad92553a82158e4f5bb02c" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../collection/iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../collection/iterablefactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c75f6595fbe7f805876792ca3404571a60d10ed" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../collection/iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../collection/mapfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afaf0b41fecabad330d0884657f46c89d18fa037" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Iterable%5D&quot; id=&quot;scala.collection.immutable.IntMap#iterableFactory&quot; name=&quot;scala.collection.immutable.IntMap#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254a4c1756a3099186266b996e2e5adc3d8f70e9" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Iterable%5D&quot; id=&quot;scala.collection.immutable.LongMap#iterableFactory&quot; name=&quot;scala.collection.immutable.LongMap#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a91659844df6e6829de64ea1d7f79c86f33a97" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Iterable%5D&quot; id=&quot;scala.collection.immutable.Map.WithDefault#iterableFactory&quot; name=&quot;scala.collection.immutable.Map.WithDefault#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddab3e5edcdc301186fe71e5b055012cfecd1f3" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Iterable%5D&quot; id=&quot;scala.collection.immutable.SortedMap.WithDefault#iterableFactory&quot; name=&quot;scala.collection.immutable.SortedMap.WithDefault#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41cf64c0b6aae475623a098b52e7379163d54d1" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Set%5D&quot; id=&quot;scala.collection.immutable.BitSet#iterableFactory&quot; name=&quot;scala.collection.immutable.BitSet#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d5a8bf32afbed9d101d16968c6183db7fe9cc5" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Iterable%5D&quot; id=&quot;scala.collection.mutable.AnyRefMap#iterableFactory&quot; name=&quot;scala.collection.mutable.AnyRefMap#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111019ca2a26b22b929e74dcb1f9ec39014068b2" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Iterable%5D&quot; id=&quot;scala.collection.mutable.CollisionProofHashMap#iterableFactory&quot; name=&quot;scala.collection.mutable.CollisionProofHashMap#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3160a733b9db969537e113b2fbdd8bd573d58ef6" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Iterable%5D&quot; id=&quot;scala.collection.mutable.LongMap#iterableFactory&quot; name=&quot;scala.collection.mutable.LongMap#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097989c88df2338d217c49b374b9f18fd359f26f" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Iterable%5D&quot; id=&quot;scala.collection.mutable.Map.WithDefault#iterableFactory&quot; name=&quot;scala.collection.mutable.Map.WithDefault#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5344dc52188f7d0aa604b5bfb2a636582d990e" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Iterable%5D&quot; id=&quot;scala.collection.mutable.PriorityQueue#iterableFactory&quot; name=&quot;scala.collection.mutable.PriorityQueue#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bada6babf2680ec972d5027940f11514c946c90" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Iterable%5D&quot; id=&quot;scala.collection.mutable.SortedMap.WithDefault#iterableFactory&quot; name=&quot;scala.collection.mutable.SortedMap.WithDefault#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d60036368df6f6daafcd56982b8bd0ce952b161" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.mutable.Set%5D&quot; id=&quot;scala.collection.mutable.BitSet#iterableFactory&quot; name=&quot;scala.collection.mutable.BitSet#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24a0a268ecfa1e26d68c018959d22aaa86c29a9" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.SeqFactory%5BIndexedSeq%5D&quot; id=&quot;scala.collection.immutable.WrappedString#iterableFactory&quot; name=&quot;scala.collection.immutable.WrappedString#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55f3351f877256768d4ed752502f7089a081db4a" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.SeqFactory%5Bscala.collection.mutable.ArraySeq%5D&quot; id=&quot;scala.collection.mutable.ArraySeq#iterableFactory&quot; name=&quot;scala.collection.mutable.ArraySeq#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38a3f1c6699419f86eaad4747034caf6d4b4f3a" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.SeqFactory%5Bscala.collection.mutable.IndexedSeq%5D&quot; id=&quot;scala.collection.mutable.StringBuilder#iterableFactory&quot; name=&quot;scala.collection.mutable.StringBuilder#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40dfa68b84254696ae91235e986e147ba0284283" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../evidenceiterablefactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.EvidenceIterableFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.EvidenceIterableFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6aefa8e0168b804d56673cab7832042d0a25c8" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../iterablefactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0addcd1113d73e1ad3f04c7eb5660fffd7b9e7" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../iterableops#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableOps#iterableFactory&quot; name=&quot;scala.collection.IterableOps#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfdf5a65c40d1b79fe9c07afe3157c599eef35a" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../mapfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e66ee6f76f5944553aa0c3b86b65488e95f5f9" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../sortedmapfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.SortedMapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.SortedMapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21621ab88101f00990bf4e5f9a5ed869d4ab920" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;../sortedsetfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.SortedSetFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.SortedSetFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adfba79349f02ce96f17a27dd9269aba0816b827" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;arrayseq#iterableFactory:scala.collection.SeqFactory%5Bscala.collection.mutable.ArraySeq%5D&quot; id=&quot;scala.collection.mutable.ArraySeq#iterableFactory&quot; name=&quot;scala.collection.mutable.ArraySeq#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e14fb1ca07ba209ab117dd72e9f8bd2938ee80" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;../iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;bitset#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Set%5D&quot; id=&quot;scala.collection.immutable.BitSet#iterableFactory&quot; name=&quot;scala.collection.immutable.BitSet#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b69ac3ddc0689bc8a24fd27d3d989b8880d53bda" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.EvidenceIterableFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.EvidenceIterableFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b253a5d488b67dad9addbd052c88cb8df73a79f" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417c4fac073b6b3250e35f9b2610a5cb9252aa84" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableOps#iterableFactory&quot; name=&quot;scala.collection.IterableOps#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a800a987addb508e78d12787034cddfb3e6d9f" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af7e52ec98ab17aac1984d60eda22d137c7d42c" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.SortedMapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.SortedMapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c76e36a98c393434f17fb49ce11b06560c4fdc5a" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.SortedSetFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.SortedSetFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca53fdc750c1079db93b029b4312059f3c34497" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.Set%5D&quot; id=&quot;scala.collection.BitSet#iterableFactory&quot; name=&quot;scala.collection.BitSet#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960e719696a88f2432908b86ca2d5004489748d4" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;iterablefactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.IterableFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde50f4e293ed43f9e167de10f15351610641b37" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;iterableops#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.IterableOps#iterableFactory&quot; name=&quot;scala.collection.IterableOps#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47e68640ea88f6a55abc447c2b36c63841533f5" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;mapfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.MapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81eb09673b2f8aecf8bbaa39248130ef69912bcc" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;sortedmapfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.SortedMapFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.SortedMapFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3719fee40ca969a86cf3ed24b4be824333418323" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;a href=&quot;iterablefactorydefaults&quot; id=&quot;scala.collection.IterableFactoryDefaults&quot; name=&quot;scala.collection.IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/a&gt; trait, which implements the method using &lt;a href=&quot;sortedsetfactorydefaults#iterableFactory:scala.collection.IterableFactory%5BCC%5D&quot; id=&quot;scala.collection.SortedSetFactoryDefaults#iterableFactory&quot; name=&quot;scala.collection.SortedSetFactoryDefaults#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6751f6a0520436d2edbaebed69879cc65fdc7ca7" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;span name=&quot;IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/span&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.IterableFactory%5Bscala.collection.immutable.Set%5D&quot; id=&quot;scala.Enumeration.ValueSet#iterableFactory&quot; name=&quot;scala.Enumeration.ValueSet#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eaf3c61c2a962b9d7dc8d0dcb261b13225161eb" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;span name=&quot;IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/span&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.SeqFactory%5Bscala.jdk.AnyAccumulator%5D&quot; id=&quot;scala.jdk.DoubleAccumulator#iterableFactory&quot; name=&quot;scala.jdk.DoubleAccumulator#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5446426a57f299352db48d795a133b5cf4524bb" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;span name=&quot;IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/span&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.SeqFactory%5Bscala.jdk.AnyAccumulator%5D&quot; id=&quot;scala.jdk.IntAccumulator#iterableFactory&quot; name=&quot;scala.jdk.IntAccumulator#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6049fb4a77ed5cbe9ccfe94154d8cf4817803d8d" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;C&lt;/code&gt; to the new type, this method needs to be overridden (the compiler will issue an error otherwise). In the common case where &lt;code&gt;C =:= CC[A]&lt;/code&gt;, this can be done by mixing in the &lt;span name=&quot;IterableFactoryDefaults&quot;&gt;IterableFactoryDefaults&lt;/span&gt; trait, which implements the method using &lt;a href=&quot;#iterableFactory:scala.collection.SeqFactory%5Bscala.jdk.AnyAccumulator%5D&quot; id=&quot;scala.jdk.LongAccumulator#iterableFactory&quot; name=&quot;scala.jdk.LongAccumulator#iterableFactory&quot;&gt;iterableFactory&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca6a67759c5cbe246b6a7f9b652cabc0a4ae547" translate="yes" xml:space="preserve">
          <source>When implementing a custom collection type and refining &lt;code&gt;CC&lt;/code&gt; to the new type, this method needs to be overridden to return a factory for the new type (the compiler will issue an error otherwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764dc36a00852993e59266feea867d385c31ade2" translate="yes" xml:space="preserve">
          <source>When inlining is enabled, the inliner will always try to inline methods or callsites annotated &lt;code&gt;@inline&lt;/code&gt; (under the condition that inlining from the defining class is allowed, see &lt;code&gt;-opt-inline-from:help&lt;/code&gt;). If inlining is not possible, for example because the method is not final, an optimizer warning will be issued. See &lt;code&gt;-opt-warnings:help&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95db047dc5008979d011d8f5926412f0f3f1fc76" translate="yes" xml:space="preserve">
          <source>When inlining is enabled, the inliner will never inline methods or callsites annotated &lt;code&gt;@noinline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8c20efeab8d726e3e366ab696ef55579403e46" translate="yes" xml:space="preserve">
          <source>When matches are exhausted, queries about match data will throw &lt;span name=&quot;java.lang.IllegalStateException&quot;&gt;java.lang.IllegalStateException&lt;/span&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc893f7732a4e77ff7c7f917da3d087acb7dda3c" translate="yes" xml:space="preserve">
          <source>When more than two exceptions are thrown, the first two are combined and re-thrown as described above, and each successive exception thrown is combined as it is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ad695cefe388f46e34db640df77681a4dc9c8a" translate="yes" xml:space="preserve">
          <source>When overriding the &lt;code&gt;equals&lt;/code&gt; or &lt;code&gt;hashCode&lt;/code&gt; methods, it is important to ensure that their behavior is consistent with reference equality. Therefore, if two objects are references to each other (&lt;code&gt;o1 eq o2&lt;/code&gt;), they should be equal to each other (&lt;code&gt;o1 == o2&lt;/code&gt;) and they should hash to the same value (&lt;code&gt;o1.hashCode == o2.hashCode&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76dc9fcc21c264a63fb4e30bc0782cb00b4a933" translate="yes" xml:space="preserve">
          <source>When processes are composed, a new &lt;code&gt;ProcessBuilder&lt;/code&gt; is created which, when run, will execute the &lt;code&gt;ProcessBuilder&lt;/code&gt; instances it is composed of according to the manner of the composition. If piping one process to another, they'll be executed simultaneously, and each will be passed a &lt;code&gt;ProcessIO&lt;/code&gt; that will copy the output of one to the input of the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589c3abbcade87c510e0a227f833d6bad4573284" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;mapReduce&lt;/code&gt; method is called on some type of which it is not a member, implicit search is triggered. Because implicit conversion &lt;code&gt;withExtensions&lt;/code&gt; is generic, it will be applied as long as an implicit value of type &lt;code&gt;IsIterable[Repr]&lt;/code&gt; can be found. Given that the &lt;code&gt;IsIterable&lt;/code&gt; companion object contains implicit members that return values of type &lt;code&gt;IsIterable&lt;/code&gt;, this requirement is typically satisfied, and the chain of interactions described in the previous paragraph is set into action. (See the &lt;code&gt;IsIterable&lt;/code&gt; companion object, which contains a precise specification of the available implicits.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e958f33c96af0d44ffb3af68f5e754b250b3cac" translate="yes" xml:space="preserve">
          <source>When this future is completed, either through an exception, or a value, apply the provided function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a2f4ce0aa7d1e1ed73bcd24dcdea838c392dae" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;parasitic&lt;/code&gt; with abstractions such as &lt;code&gt;Future&lt;/code&gt; it will in many cases be non-deterministic as to which &lt;code&gt;Thread&lt;/code&gt; will be executing the logic, as it depends on when/if that &lt;code&gt;Future&lt;/code&gt; is completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daefdb95a32a943b4f63cd58f8153a9d98ec90da" translate="yes" xml:space="preserve">
          <source>When using things like &lt;code&gt;Future&lt;/code&gt;s, it is often required to have an implicit &lt;code&gt;ExecutionContext&lt;/code&gt; in scope. The general advice for these implicits are as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ba56da521d0d38d8366d581fa93e36906f65b3" translate="yes" xml:space="preserve">
          <source>When working with Futures, you will often find that importing the whole concurrent package is convenient:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82f5fc90f29969bad7867bf5610099e58ff3b51" translate="yes" xml:space="preserve">
          <source>When writing Java code, use the explicit conversion methods defined in &lt;a href=&quot;javaapi/collectionconverters%24&quot; id=&quot;scala.jdk.javaapi.CollectionConverters&quot; name=&quot;scala.jdk.javaapi.CollectionConverters&quot;&gt;javaapi.CollectionConverters&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de77fd68ba7274d16368b921d7fa673e02597483" translate="yes" xml:space="preserve">
          <source>When writing Java code, use the explicit conversion methods defined in &lt;a href=&quot;javaapi/durationconverters%24&quot; id=&quot;scala.jdk.javaapi.DurationConverters&quot; name=&quot;scala.jdk.javaapi.DurationConverters&quot;&gt;javaapi.DurationConverters&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e658c13de3511516d87647af14f620b82befc82" translate="yes" xml:space="preserve">
          <source>When writing Java code, use the explicit conversion methods defined in &lt;a href=&quot;javaapi/functionconverters%24&quot; id=&quot;scala.jdk.javaapi.FunctionConverters&quot; name=&quot;scala.jdk.javaapi.FunctionConverters&quot;&gt;javaapi.FunctionConverters&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91fce69bc7a1f81150ca48ca5476c45fbd22ddf" translate="yes" xml:space="preserve">
          <source>When writing Java code, use the explicit conversion methods defined in &lt;a href=&quot;javaapi/futureconverters%24&quot; id=&quot;scala.jdk.javaapi.FutureConverters&quot; name=&quot;scala.jdk.javaapi.FutureConverters&quot;&gt;javaapi.FutureConverters&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a4d3befb1e466bb2c8d1faf18cd28ec5b04ab4" translate="yes" xml:space="preserve">
          <source>When writing Java code, use the explicit conversion methods defined in &lt;a href=&quot;javaapi/optionconverters%24&quot; id=&quot;scala.jdk.javaapi.OptionConverters&quot; name=&quot;scala.jdk.javaapi.OptionConverters&quot;&gt;javaapi.OptionConverters&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dcaa57269cdf70d846f7dd7f83b6138e27dd62e" translate="yes" xml:space="preserve">
          <source>When writing Java code, use the explicit conversion methods defined in &lt;a href=&quot;javaapi/streamconverters%24&quot; id=&quot;scala.jdk.javaapi.StreamConverters&quot; name=&quot;scala.jdk.javaapi.StreamConverters&quot;&gt;javaapi.StreamConverters&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e91b81afb61ccea3a445fa882a59a9e92e0dd7e" translate="yes" xml:space="preserve">
          <source>Where potential matches overlap, the first possible match is returned, followed by the next match that follows the input consumed by the first match:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfe465ff843da42838559d19603443cbfc0f610" translate="yes" xml:space="preserve">
          <source>Where this feature is enabled, accesses to members of structural types that need reflection are supported. If &lt;code&gt;reflectiveCalls&lt;/code&gt; is not enabled, an expression requiring reflection will trigger a warning from the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503de512e9898671e899c5aa7b26e29bd8340251" translate="yes" xml:space="preserve">
          <source>Where this feature is enabled, definitions of implicit conversions are allowed. If &lt;code&gt;implicitConversions&lt;/code&gt; is not enabled, the definition of an implicit conversion will trigger a warning from the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff97ee297b472cf998b111f3963b91eb6ec53b3" translate="yes" xml:space="preserve">
          <source>Where this feature is enabled, existential types that cannot be expressed as wildcard types can be written and are allowed in inferred types of values or return types of methods. If &lt;code&gt;existentials&lt;/code&gt; is not enabled, those cases will trigger a warning from the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a602075e153138d8e70bcf16065f7671de1e1eb0" translate="yes" xml:space="preserve">
          <source>Where this feature is enabled, higher-kinded types can be written. If &lt;code&gt;higherKinds&lt;/code&gt; is not enabled, a higher-kinded type such as &lt;code&gt;F[A]&lt;/code&gt; will trigger a warning from the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeeae5f99f89895be75780aba8d8fa37f10d84fa" translate="yes" xml:space="preserve">
          <source>Whether the computation is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0637214360fb79786430bc040348fa2e29ba3331" translate="yes" xml:space="preserve">
          <source>While it is possible to simply import &lt;code&gt;scala.concurrent.ExecutionContext.Implicits.global&lt;/code&gt; to obtain an implicit &lt;code&gt;ExecutionContext&lt;/code&gt;, application developers should carefully consider where they want to set execution policy; ideally, one place per application&amp;mdash;or per logically related section of code&amp;mdash; will make a decision about which &lt;code&gt;ExecutionContext&lt;/code&gt; to use. That is, you will mostly want to avoid hardcoding, especially via an import, &lt;code&gt;scala.concurrent.ExecutionContext.Implicits.global&lt;/code&gt;. The recommended approach is to add &lt;code&gt;(implicit ec: ExecutionContext)&lt;/code&gt; to methods, or class constructor parameters, which need an &lt;code&gt;ExecutionContext&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6daf06ba6f05de4e7e966585080eebe14e8270" translate="yes" xml:space="preserve">
          <source>While occasionally useful, e.g. for testing, it is recommended that you avoid Await whenever possible&amp;mdash; instead favoring combinators and/or callbacks. Await's &lt;code&gt;result&lt;/code&gt; and &lt;code&gt;ready&lt;/code&gt; methods will block the calling thread's execution until they return, which will cause performance degradation, and possibly, deadlock issues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3706133f16c672cdbbfe9210cf7fbc7bb0c7d30b" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;LazyList&lt;/code&gt; is actually being modified during access, this does not change the notion of its immutability. Once the values are memoized they do not change and values that have yet to be memoized still &quot;exist&quot;, they simply haven't been realized yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c667eb1e7739b31a1dae0a1790314fa831e05474" translate="yes" xml:space="preserve">
          <source>Will be called with each line read from the process error stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da2ecd6ec68fae70fd09e79188ced726e50bae48" translate="yes" xml:space="preserve">
          <source>Will be called with each line read from the process output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc9fd598bf108f1395c0c1e3c06416392f1933e" translate="yes" xml:space="preserve">
          <source>Will be removed in Scala 2.14.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e410f876b151fefa6346a67c5a0977b203833a" translate="yes" xml:space="preserve">
          <source>With no simple remedy at hand, the issue is now at least documented, and aliases &lt;code&gt;MAXIMUM&lt;/code&gt; and &lt;code&gt;MINIMUM&lt;/code&gt; are offered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db7711a55fc320c2e495655071b8580d7490e45" translate="yes" xml:space="preserve">
          <source>WithDefault</source>
          <target state="translated">WithDefault</target>
        </trans-unit>
        <trans-unit id="88c83df62545d651efd2ddd8b9d81b90f8492e74" translate="yes" xml:space="preserve">
          <source>WithFilter</source>
          <target state="translated">WithFilter</target>
        </trans-unit>
        <trans-unit id="fe97f20617e0c1c2fbe3dcc1a0e2b3d81cc3c821" translate="yes" xml:space="preserve">
          <source>WithFilter.WithFilter()</source>
          <target state="translated">WithFilter.WithFilter()</target>
        </trans-unit>
        <trans-unit id="c799b339c83f5cdb6f404cc55c9a2577ab16b457" translate="yes" xml:space="preserve">
          <source>WithFilter.flatMap()</source>
          <target state="translated">WithFilter.flatMap()</target>
        </trans-unit>
        <trans-unit id="db39d1acb5ee8f2d30da4c9e1c7342d62280dac5" translate="yes" xml:space="preserve">
          <source>WithFilter.foreach()</source>
          <target state="translated">WithFilter.foreach()</target>
        </trans-unit>
        <trans-unit id="781713acc9d5a3dbec8b20e765861ceb14f29ddf" translate="yes" xml:space="preserve">
          <source>WithFilter.map()</source>
          <target state="translated">WithFilter.map()</target>
        </trans-unit>
        <trans-unit id="acba6757b96f7aabeb70f83006201b39b0b61a83" translate="yes" xml:space="preserve">
          <source>WithFilter.scala</source>
          <target state="translated">WithFilter.scala</target>
        </trans-unit>
        <trans-unit id="70b1c7fb1f49b1734dfcc0d390601c712b841000" translate="yes" xml:space="preserve">
          <source>WithFilter.withFilter()</source>
          <target state="translated">WithFilter.withFilter()</target>
        </trans-unit>
        <trans-unit id="5bf967d612005f1b22abf8db31066264db9b7080" translate="yes" xml:space="preserve">
          <source>Wrap an existing &lt;code&gt;Array&lt;/code&gt; into a &lt;code&gt;ArraySeq&lt;/code&gt; of the proper primitive specialization type without copying.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad4edee4a8dc2734fc2dd242ceab82b385fb7e7" translate="yes" xml:space="preserve">
          <source>Wrap an existing &lt;code&gt;Array&lt;/code&gt; into an &lt;code&gt;ArraySeq&lt;/code&gt; of the proper primitive specialization type without copying. Any changes to wrapped array will break the expected immutability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b92bdfcaf8fa72c9041270070ff850d6cdec5e" translate="yes" xml:space="preserve">
          <source>WrappedString</source>
          <target state="translated">WrappedString</target>
        </trans-unit>
        <trans-unit id="dc113300c0e3bb8e72325013af72d444a5d4a56b" translate="yes" xml:space="preserve">
          <source>WrappedString$</source>
          <target state="translated">WrappedString$</target>
        </trans-unit>
        <trans-unit id="962e840821cbf2ffc4121ba9e693f4fd4021ebc6" translate="yes" xml:space="preserve">
          <source>WrappedString$.UnwrapOp</source>
          <target state="translated">WrappedString$.UnwrapOp</target>
        </trans-unit>
        <trans-unit id="c60ce684cc250cfdce6f0de329ecc1a2ffd51872" translate="yes" xml:space="preserve">
          <source>WrappedString$.UnwrapOp()</source>
          <target state="translated">WrappedString$.UnwrapOp()</target>
        </trans-unit>
        <trans-unit id="b2917c62d1f56e85426abc5f4cfc17039c7e0b97" translate="yes" xml:space="preserve">
          <source>WrappedString$.UnwrapOp.UnwrapOp()</source>
          <target state="translated">WrappedString$.UnwrapOp.UnwrapOp()</target>
        </trans-unit>
        <trans-unit id="b6fa3529a713bd03779d7e8a998d9703a090eaaa" translate="yes" xml:space="preserve">
          <source>WrappedString$.UnwrapOp.unwrap()</source>
          <target state="translated">WrappedString$.UnwrapOp.unwrap()</target>
        </trans-unit>
        <trans-unit id="b2abba66cb7053fc7aade48326eb489afe0ba335" translate="yes" xml:space="preserve">
          <source>WrappedString$.empty()</source>
          <target state="translated">WrappedString$.empty()</target>
        </trans-unit>
        <trans-unit id="900532ba7a63ed91642dedb24f99c7a4a5a5212d" translate="yes" xml:space="preserve">
          <source>WrappedString$.fromSpecific()</source>
          <target state="translated">WrappedString$.fromSpecific()</target>
        </trans-unit>
        <trans-unit id="63ffc6e84b4d5b08a34322ae2bd380c61f6772c0" translate="yes" xml:space="preserve">
          <source>WrappedString$.newBuilder()</source>
          <target state="translated">WrappedString$.newBuilder()</target>
        </trans-unit>
        <trans-unit id="45f55b33423a5f2d4df8898fbd07086cf70fd7d5" translate="yes" xml:space="preserve">
          <source>WrappedString.WrappedString()</source>
          <target state="translated">WrappedString.WrappedString()</target>
        </trans-unit>
        <trans-unit id="57d4525fcf0d8ba750c146b2e6c8ed469eb070aa" translate="yes" xml:space="preserve">
          <source>WrappedString.appendedAll()</source>
          <target state="translated">WrappedString.appendedAll()</target>
        </trans-unit>
        <trans-unit id="9e2742fbaddab39adad1d2d19d3781dfabc9fb34" translate="yes" xml:space="preserve">
          <source>WrappedString.apply()</source>
          <target state="translated">WrappedString.apply()</target>
        </trans-unit>
        <trans-unit id="c43c9f5197b9392a9b97becaa4924778ff86ce94" translate="yes" xml:space="preserve">
          <source>WrappedString.applyPreferredMaxLength()</source>
          <target state="translated">WrappedString.applyPreferredMaxLength()</target>
        </trans-unit>
        <trans-unit id="abb1647b5fe2f6e062e418d2ec7380325d7313b2" translate="yes" xml:space="preserve">
          <source>WrappedString.className()</source>
          <target state="translated">WrappedString.className()</target>
        </trans-unit>
        <trans-unit id="823500a7f9f7aac15433f6d8800d511278726a30" translate="yes" xml:space="preserve">
          <source>WrappedString.copyToArray()</source>
          <target state="translated">WrappedString.copyToArray()</target>
        </trans-unit>
        <trans-unit id="e525b560a4b446a857e755e889f2b64165ebac9b" translate="yes" xml:space="preserve">
          <source>WrappedString.empty()</source>
          <target state="translated">WrappedString.empty()</target>
        </trans-unit>
        <trans-unit id="a0c529a38adb65a169c0f6b5eb3dbe417ce0d231" translate="yes" xml:space="preserve">
          <source>WrappedString.endsWith()</source>
          <target state="translated">WrappedString.endsWith()</target>
        </trans-unit>
        <trans-unit id="f8fa3d293efb1256b4b25a40f754aafe0d0f8381" translate="yes" xml:space="preserve">
          <source>WrappedString.equals()</source>
          <target state="translated">WrappedString.equals()</target>
        </trans-unit>
        <trans-unit id="4cfdf3dcebf2a6b095e996a14b1fce8081d23725" translate="yes" xml:space="preserve">
          <source>WrappedString.fromSpecific()</source>
          <target state="translated">WrappedString.fromSpecific()</target>
        </trans-unit>
        <trans-unit id="e0420869501b6b235f6b066f8bacee7f733d37e2" translate="yes" xml:space="preserve">
          <source>WrappedString.indexOf()</source>
          <target state="translated">WrappedString.indexOf()</target>
        </trans-unit>
        <trans-unit id="69fb83e500a6669cebacbe326bedae0878bcd6a9" translate="yes" xml:space="preserve">
          <source>WrappedString.lastIndexOf()</source>
          <target state="translated">WrappedString.lastIndexOf()</target>
        </trans-unit>
        <trans-unit id="78d395a1053d6a6f23c9ccac90d1516f21a78525" translate="yes" xml:space="preserve">
          <source>WrappedString.length()</source>
          <target state="translated">WrappedString.length()</target>
        </trans-unit>
        <trans-unit id="aad529238d8663f512ad9784f69052629cd65e2b" translate="yes" xml:space="preserve">
          <source>WrappedString.newSpecificBuilder()</source>
          <target state="translated">WrappedString.newSpecificBuilder()</target>
        </trans-unit>
        <trans-unit id="d3b5f56c445eaf3e8e68f3978f7d714fd671b744" translate="yes" xml:space="preserve">
          <source>WrappedString.sameElements()</source>
          <target state="translated">WrappedString.sameElements()</target>
        </trans-unit>
        <trans-unit id="a4cfdb352dedc9fc6da584858d07c2b945706a1e" translate="yes" xml:space="preserve">
          <source>WrappedString.scala</source>
          <target state="translated">WrappedString.scala</target>
        </trans-unit>
        <trans-unit id="7dc83382b86f0089477a0f60fa465b3a9be19c68" translate="yes" xml:space="preserve">
          <source>WrappedString.slice()</source>
          <target state="translated">WrappedString.slice()</target>
        </trans-unit>
        <trans-unit id="2ad9d3e871abe07bc8d360d75bf083faa3616e63" translate="yes" xml:space="preserve">
          <source>WrappedString.startsWith()</source>
          <target state="translated">WrappedString.startsWith()</target>
        </trans-unit>
        <trans-unit id="2af9863a60c39b03d75576ce8a227ffa2f407a7b" translate="yes" xml:space="preserve">
          <source>WrappedString.stepper()</source>
          <target state="translated">WrappedString.stepper()</target>
        </trans-unit>
        <trans-unit id="42a92abd8c71ca55fd7237cab77b7eeb83891b5c" translate="yes" xml:space="preserve">
          <source>WrappedString.toString()</source>
          <target state="translated">WrappedString.toString()</target>
        </trans-unit>
        <trans-unit id="18383e887e5798a2da3fda3882df104f074e433a" translate="yes" xml:space="preserve">
          <source>WrappedString.view()</source>
          <target state="translated">WrappedString.view()</target>
        </trans-unit>
        <trans-unit id="50311f41156578e458b831bde36aebe3d418a6be" translate="yes" xml:space="preserve">
          <source>Wraps the value of &lt;code&gt;next()&lt;/code&gt; in an option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ead4d0763fba1c44511b6318444f3dfad9faaf0" translate="yes" xml:space="preserve">
          <source>Writes the output stream of this process to a &lt;a href=&quot;processbuilder&quot; id=&quot;scala.sys.process.ProcessBuilder&quot; name=&quot;scala.sys.process.ProcessBuilder&quot;&gt;scala.sys.process.ProcessBuilder&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4984df4fb0e03f4263e8c5a3f9ff021341b099b" translate="yes" xml:space="preserve">
          <source>Writes the output stream of this process to the given OutputStream. The argument is call-by-name, so the stream is recreated, written, and closed each time this process is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30ce82f0fd5c2f4e2d01772d1ab28e8cc0b84d9" translate="yes" xml:space="preserve">
          <source>Writes the output stream of this process to the given file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83a0e54478505513704d0569e61871e8b8b37a7" translate="yes" xml:space="preserve">
          <source>YELLOW</source>
          <target state="translated">YELLOW</target>
        </trans-unit>
        <trans-unit id="05c9b56363e4feefe54ef9ebe6eee972ccf3a2d1" translate="yes" xml:space="preserve">
          <source>YELLOW_B</source>
          <target state="translated">YELLOW_B</target>
        </trans-unit>
        <trans-unit id="59bc1b3f311b377e947917d5d47283140f24247f" translate="yes" xml:space="preserve">
          <source>You can follow a string with &lt;code&gt;.r(g1, ... , gn)&lt;/code&gt;, turning it into a &lt;code&gt;Regex&lt;/code&gt;, with group names g1 through gn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81888ab841adcd9a9a47bf8a258f32e6989d6105" translate="yes" xml:space="preserve">
          <source>You can follow a string with &lt;code&gt;.r&lt;/code&gt;, turning it into a &lt;code&gt;Regex&lt;/code&gt;. E.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49fcce1a96dbad2f7b311ba0568b2cc77c3a0cd7" translate="yes" xml:space="preserve">
          <source>You can import scala.math.Ordering.Implicits to gain access to other implicit orderings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15ec46929dc8b9f4b6934578242d99e3e471060" translate="yes" xml:space="preserve">
          <source>Zips &lt;code&gt;that&lt;/code&gt; iterable collection with an existing &lt;code&gt;LazyZip2&lt;/code&gt;. The elements in each collection are not consumed until a strict operation is invoked on the returned &lt;code&gt;LazyZip3&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de60c5052d7846ccf5aff6090ceca51e8897588" translate="yes" xml:space="preserve">
          <source>Zips &lt;code&gt;that&lt;/code&gt; iterable collection with an existing &lt;code&gt;LazyZip3&lt;/code&gt;. The elements in each collection are not consumed until a strict operation is invoked on the returned &lt;code&gt;LazyZip4&lt;/code&gt; decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a97cf6bc6efdbb11238d0455bfbd1d04b56cf1" translate="yes" xml:space="preserve">
          <source>Zips the values of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt; future using a function &lt;code&gt;f&lt;/code&gt;, and creates a new future holding the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4356c4dd9bf555c868dfb4b6788f9db5bef1c7" translate="yes" xml:space="preserve">
          <source>Zips the values of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt; future, and creates a new future holding the tuple of their results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de961d7927b749c76c0a91f65ecc196c90d769d" translate="yes" xml:space="preserve">
          <source>Zips this array with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75294e26d856e037eec12db01be1ea620c2184e1" translate="yes" xml:space="preserve">
          <source>Zips this collection with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8f29af2099b6f16dca3243955acdd9faf5b787" translate="yes" xml:space="preserve">
          <source>Zips this immutable sequence with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b180d6e695ab498b58c687d4e1c2f658d375f7d3" translate="yes" xml:space="preserve">
          <source>Zips this iterable collection with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57fcb21a62eeef313b36552ac7d0475d0f5c3561" translate="yes" xml:space="preserve">
          <source>Zips this iterator with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f160d1d35b0863e83ac88edb5460a9d044d292bd" translate="yes" xml:space="preserve">
          <source>Zips this lazy list with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd773aac5050763ff42a917694a5f4e7471429c3" translate="yes" xml:space="preserve">
          <source>Zips this view with its indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a16d519471e07dc172db3315bc34df97ab9321" translate="yes" xml:space="preserve">
          <source>[start;end)</source>
          <target state="translated">[start;end)</target>
        </trans-unit>
        <trans-unit id="f627bf91eafb0d1af092b74996e645086d405d7e" translate="yes" xml:space="preserve">
          <source>_root_</source>
          <target state="translated">_root_</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="7c2713b4b024a16a2f87facab87fdcd3cc71837d" translate="yes" xml:space="preserve">
          <source>a () =&amp;gt; Source which resets the stream (if unset, reset() will throw an Exception)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e4875ebeb990b826b25cba219ba461ab8936a8" translate="yes" xml:space="preserve">
          <source>a () =&amp;gt; Unit method which closes the stream (if unset, close() will do nothing)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa390fa0e93f0463e5993ff3949744f92976e032" translate="yes" xml:space="preserve">
          <source>a &lt;a href=&quot;try&quot; id=&quot;scala.util.Try&quot; name=&quot;scala.util.Try&quot;&gt;Try&lt;/a&gt; containing an exception if one or more were thrown, or the result of the operation if no exceptions were thrown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0fa24483cdef9cdeddd57f248b338bffbad80c" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Double&lt;/code&gt; value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d6caf67e925ca73738428db8e0bda36d404c9c" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Found&lt;/code&gt; value containing the index corresponding to the element in the sequence, or the &lt;code&gt;InsertionPoint&lt;/code&gt; where the element would be inserted if the element is not in the sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893a87906c6225140504035b1dab04cbdef77018" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; holding the casted result of this &lt;code&gt;Future&lt;/code&gt; or a &lt;code&gt;ClassCastException&lt;/code&gt; otherwise</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7e235b47da2de31b67abb0665ff09f0a14085e" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; holding the result of application of the &lt;code&gt;PartialFunction&lt;/code&gt; or a &lt;code&gt;NoSuchElementException&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47008a60b46061dd104c4c41c214f2a1f33b1b27" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; that will be completed with the transformed value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53a5aa5a1cc38c50f44246b728c1a1483af1aa7d" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; which will be completed with the exact same outcome as this &lt;code&gt;Future&lt;/code&gt; but after the &lt;code&gt;PartialFunction&lt;/code&gt; has been executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ecc1643c4356d96513050b838d59cffe705571" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; which will be completed with the result of the application of the function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8333fcc51f1fdfd8c4d192a15bbb59cf6f7e3764" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; which will hold the successful result of this &lt;code&gt;Future&lt;/code&gt; if it matches the predicate or a &lt;code&gt;NoSuchElementException&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a6c6fca30cd9c59b701dde51c353efa9720e8c" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; with the result of the application of &lt;code&gt;f&lt;/code&gt; to the results of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;that&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac440a822a40f06f81a504244e4591194846e630" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; with the results of both futures or the failure of the first of them that failed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7edf76781ed1b2c7db05d862eb9301d3776ddf7" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; with the successful result of this or that &lt;code&gt;Future&lt;/code&gt; or the failure of this &lt;code&gt;Future&lt;/code&gt; if both fail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955e091e683fec3c0f0970f1320f54d11c472f4a" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; with the successful value of this &lt;code&gt;Future&lt;/code&gt; or the outcome of the &lt;code&gt;Future&lt;/code&gt; returned by the &lt;code&gt;PartialFunction&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fc483ff7d93b3137d17b1101e1d601c3dfea96" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Future&lt;/code&gt; with the successful value of this &lt;code&gt;Future&lt;/code&gt; or the result of the &lt;code&gt;PartialFunction&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0581febdbd58322dba592b90e247b677604c2345" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;PartialFunction&lt;/code&gt; which will be conditionally applied to the outcome of this &lt;code&gt;Future&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff2c36edf3ab7ee5ef795728653f1149bb2fc04" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Range&lt;/code&gt; value from &lt;code&gt;0&lt;/code&gt; to one less than the length of this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088d110894de3397b0a560058d530f349b1d8850" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Range&lt;/code&gt; value from &lt;code&gt;0&lt;/code&gt; to one less than the length of this immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="058dff8903b6c24c8252f76c34b3abd0c55a6009" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Range&lt;/code&gt; value from &lt;code&gt;0&lt;/code&gt; to one less than the length of this sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a486084487e170f0b26229eaf20f99f51ab472e7" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;Range&lt;/code&gt; value from &lt;code&gt;0&lt;/code&gt; to one less than the length of this string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec13c8ca8a5fdf088ad3cdf5463fe1d18ffddc42" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;TailRec&lt;/code&gt; object representing a computation which immediately returns &lt;code&gt;result&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c45e7cf6164f990a0e25cd7d9221f038d2889f8" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;TailRec&lt;/code&gt; object representing the expression &lt;code&gt;rest&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278465e4e7d0c0aa3a45634cc4fdb8a29c5d3301" translate="yes" xml:space="preserve">
          <source>a CharSequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="330f95bfb3642c8f55bfac01cc6483006a7f0aab" translate="yes" xml:space="preserve">
          <source>a CompletionStage that runs all callbacks asynchronously and does not support the CompletableFuture interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064b305273787f26f3130ce6884b7e448e01ad17" translate="yes" xml:space="preserve">
          <source>a Map containing the system environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2567bb373172a922dd8b31818a40f803a3d23d76" translate="yes" xml:space="preserve">
          <source>a Scala Future that represents the CompletionStage's completion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e63a916543ed18f33e54f846be7a395bd653c46" translate="yes" xml:space="preserve">
          <source>a String representation of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65f9a9e55a7a5e836d425b895718cbbb8626d391" translate="yes" xml:space="preserve">
          <source>a String to include in the failure message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b230ef5c3f61180fcdf7e9b68c00be690989f2da" translate="yes" xml:space="preserve">
          <source>a String.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0701cbe06e9844df232ab28cadb83fbdcc09b28" translate="yes" xml:space="preserve">
          <source>a SystemProperties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1148ae34877b5cfc881903b884294b959e1d51b" translate="yes" xml:space="preserve">
          <source>a binary operator that must be associative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29ca3b6b38d60cfaa93856a51c007dc1e07c0ca8" translate="yes" xml:space="preserve">
          <source>a bitmask containing which bits to keep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63061c94fb1babad2e9bfe3035644b9e02081fc" translate="yes" xml:space="preserve">
          <source>a bitset containing those bits of this bitset or the other bitset that are not contained in both bitsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f41f2924954eef70674ed4ade3dcf4d09bcdd54" translate="yes" xml:space="preserve">
          <source>a buffered iterator producing the same values as this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1a4b7c44d14008334c3bf9e1ffdfb0e4c818f18" translate="yes" xml:space="preserve">
          <source>a class object corresponding to the runtime type of the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc3abaf4be84055939e95da6b6d7aa263f79263" translate="yes" xml:space="preserve">
          <source>a class tag for &lt;code&gt;A1&lt;/code&gt; type parameter that is required to create an instance of &lt;code&gt;Array[A1]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573b5e9d94d1fa3468730acf5273290493aa167c" translate="yes" xml:space="preserve">
          <source>a class tag for &lt;code&gt;A2&lt;/code&gt; type parameter that is required to create an instance of &lt;code&gt;Array[A2]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9faf477701f0bd637387e7f54783ab7526ced12f" translate="yes" xml:space="preserve">
          <source>a class tag for T1 type parameter that is required to create an instance of Array[T1]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a81cb2ba5e84a01b6e4f087928ef8a69ec059c" translate="yes" xml:space="preserve">
          <source>a class tag for T2 type parameter that is required to create an instance of Array[T2]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37073ef3e574f80b53aaf7bba1b62cf2b2cfa285" translate="yes" xml:space="preserve">
          <source>a class tag for T3 type parameter that is required to create an instance of Array[T3]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bd59281b4e25788e17dcb4ad23337e9c037daa" translate="yes" xml:space="preserve">
          <source>a collection consisting of all elements of this collection except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty collection, if this collection has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d11489a969ae74efdf641dc51520291f97372b20" translate="yes" xml:space="preserve">
          <source>a collection consisting of this string followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting collection has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="916273642c88b4dcdb117254542f4f2445c7b107" translate="yes" xml:space="preserve">
          <source>a collection consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this collection, or else the whole collection, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd119f78b54fed454ebfe154f48c91b438bb412" translate="yes" xml:space="preserve">
          <source>a collection containing the elements added to this builder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab8797d6356e8d815457876ab06948fcf189ef4" translate="yes" xml:space="preserve">
          <source>a collection containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c35e021fab55f0aca538c9207cd45af82c79e95" translate="yes" xml:space="preserve">
          <source>a collection that produces elements using &lt;code&gt;f&lt;/code&gt; until &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e595fe8016f3b00df61f8272493da1b0160591" translate="yes" xml:space="preserve">
          <source>a collection with &lt;code&gt;len&lt;/code&gt; values in the sequence &lt;code&gt;start, f(start), f(f(start)), ...&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd49ca24378c6668b1aa7c0a6ee7f0c5ad112702" translate="yes" xml:space="preserve">
          <source>a collection with values &lt;code&gt;start, start + 1, ..., end - 1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990e44e5bdf6812fd0abc99f8747534f78b78ccf" translate="yes" xml:space="preserve">
          <source>a collection with values &lt;code&gt;start, start + step, ...&lt;/code&gt; up to, but excluding &lt;code&gt;end&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defc09dfa73f0067756635fd33e1a9fe03ebd0b3" translate="yes" xml:space="preserve">
          <source>a computation that yields a default value in case no binding for &lt;code&gt;key&lt;/code&gt; is found in the map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e27725c8a82475bae1b22e69076130a8dd964f" translate="yes" xml:space="preserve">
          <source>a copy of the receiver object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0d72e3089a114f6593b2d4aca17b794fb22f2c" translate="yes" xml:space="preserve">
          <source>a correction to add to the &lt;code&gt;coll.size&lt;/code&gt; to produce the size hint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c2d580310f43ec0ba4200b059dbf6f6194e3cf" translate="yes" xml:space="preserve">
          <source>a decorator &lt;code&gt;LazyZip2&lt;/code&gt; that allows strict operations to be performed on the lazily evaluated pairs or chained calls to &lt;code&gt;lazyZip&lt;/code&gt;. Implicit conversion to &lt;code&gt;Iterable[(A, B)]&lt;/code&gt; is also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcacd5935006fe70035813e6511803244f0ba282" translate="yes" xml:space="preserve">
          <source>a decorator &lt;code&gt;LazyZip3&lt;/code&gt; that allows strict operations to be performed on the lazily evaluated tuples or chained calls to &lt;code&gt;lazyZip&lt;/code&gt;. Implicit conversion to &lt;code&gt;Iterable[(El1, El2, B)]&lt;/code&gt; is also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4defbd1270cd0e2179b130292b8b5adcb4094147" translate="yes" xml:space="preserve">
          <source>a decorator &lt;code&gt;LazyZip4&lt;/code&gt; that allows strict operations to be performed on the lazily evaluated tuples. Implicit conversion to &lt;code&gt;Iterable[(El1, El2, El3, B)]&lt;/code&gt; is also supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d87f976cd7af5377f0c089688613526509326be" translate="yes" xml:space="preserve">
          <source>a failed projection of this &lt;code&gt;Future&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1debb7e8d2d012cfb202c432389c1b69e4f04c" translate="yes" xml:space="preserve">
          <source>a flag indicating whether element should be included or excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fc21c1233bccf90f6cad91734fb7e8bc30f615" translate="yes" xml:space="preserve">
          <source>a floating-point value to be rounded to a &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5888b6fc6a60f7719b9737ea70be56bca2e05a8" translate="yes" xml:space="preserve">
          <source>a floating-point value to be rounded to a &lt;code&gt;Long&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eae18b58aeba3658a2c224ed06cda483a931f9e" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;T =&amp;gt; Option[R]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347552052561a94cae104806c2cff682f82e3822" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2)) == f(Tuple2(x1, x2)) == apply(x1, x2)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360083999687d95b1cea3403656ec59a1746f5c0" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3)) == f(Tuple3(x1, x2, x3)) == apply(x1, x2, x3)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d039e38ee74dcc0afbfaa69a93fd5fd02c330a35" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4)) == f(Tuple4(x1, x2, x3, x4)) == apply(x1, x2, x3, x4)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93647c3d430c99cc7a6400d8b3451d00bdc517a" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5)) == f(Tuple5(x1, x2, x3, x4, x5)) == apply(x1, x2, x3, x4, x5)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e2007a33d1171d049c95ab5598a0bdd0f61975b" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6)) == f(Tuple6(x1, x2, x3, x4, x5, x6)) == apply(x1, x2, x3, x4, x5, x6)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9333a9d591a172a5da4ef4118c309771233a6e31" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7)) == f(Tuple7(x1, x2, x3, x4, x5, x6, x7)) == apply(x1, x2, x3, x4, x5, x6, x7)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d3e9919e3da9946436ab092acf89e66072cf7fb" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8)) == f(Tuple8(x1, x2, x3, x4, x5, x6, x7, x8)) == apply(x1, x2, x3, x4, x5, x6, x7, x8)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57f79c1e795e9cee7bd1674fbb923085fc4179b" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9)) == f(Tuple9(x1, x2, x3, x4, x5, x6, x7, x8, x9)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688d3364199357f4ce54d45cb1c368ae80a374f3" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)) == f(Tuple10(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a081bb7002d04cd68f02de4e56082c060716af9" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11)) == f(Tuple11(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577d1465c06382807805dad1f241719e4ef9d911" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)) == f(Tuple12(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d22ce6710ede472f72e58bcbab9352d189f3ef0" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)) == f(Tuple13(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21b81e7250bed13663eeb37da4451e1ecbcbecd" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14)) == f(Tuple14(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaac66ef6a69c8288c4a6b22ce986d4a03b948e" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15)) == f(Tuple15(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7905ea637868c0def7adc0e36fa531e5442d99" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16)) == f(Tuple16(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd795c80fa99f0ad6bff2882ce154317ab29316" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)) == f(Tuple17(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b04178a7b0e822143f2ebb7715b2c0be1159f94" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18)) == f(Tuple18(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9738e8fa0762e00ff79db091573a971450e1ea7b" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19)) == f(Tuple19(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015d46ccf7d53f31de6ee46083beec4e749e9581" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20)) == f(Tuple20(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cda0f12083b066b1232b040abb25cdda44ba782" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21)) == f(Tuple21(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088c1b1f61e222e3184de53ed64f8ae26f79ef2b" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f((x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)) == f(Tuple22(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12281d94162283720ba23afb6fe4c78b53a09865" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2) == apply(x1, x2)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a963b83ff873f21bc094e26cd5288862b9980ef2" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3) == apply(x1, x2, x3)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad7e325f7349a0c1df5c7ac09792c557a27a88b" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4) == apply(x1, x2, x3, x4)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="475c7104e79876966e6c7efd88dcbf61c8ad84e5" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5) == apply(x1, x2, x3, x4, x5)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e60a19bc9b617cd37268ff083f839f351f6d4a" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6) == apply(x1, x2, x3, x4, x5, x6)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc960daeb32ab585adde54cfe4ac7a04b3977ddd" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7) == apply(x1, x2, x3, x4, x5, x6, x7)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4641297e2177d174617533371afc40f9b2a9dcd7" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8) == apply(x1, x2, x3, x4, x5, x6, x7, x8)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e97c8ed3cb88abf3228dce91e9ed30972d238c6" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc7e066dbe77758ae4e2b79e62f1fdbcdceda9c" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a887171816cd44ac15de8123f715d5246d05b6" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6637bd26e62e0ae975f5966d857a27cde7c3faa1" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8322f47ea564a9f0110aee0fa68f83253c0c075" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3293c71a068c9f1d34d2d3b42d6323c623fa4276" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac5d119f656762cebbd4bc9b98c6b7c36a0b479" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d760148f65c9816724e23cd281eb19c954180c24" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2998b4f4835379b5188cee1cdb939517042b09e4" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16)(x17) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42116f2d29d741944bb2ab418fc1ac2e43709b0b" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16)(x17)(x18) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78ddda9b0fd398357da23a3214b52c0fe0c80a0" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16)(x17)(x18)(x19) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="042175ed5f86b2c1f5f0827333a7e9b605422fb1" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16)(x17)(x18)(x19)(x20) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97480b4f48c88d4dec1a842bb80f9bd4e7d1747f" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16)(x17)(x18)(x19)(x20)(x21) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9f6d5e7c225e9a5c9323e16f2d64a6c0f886f0" translate="yes" xml:space="preserve">
          <source>a function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x1)(x2)(x3)(x4)(x5)(x6)(x7)(x8)(x9)(x10)(x11)(x12)(x13)(x14)(x15)(x16)(x17)(x18)(x19)(x20)(x21)(x22) == apply(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c591ff59691053cb84631f5f9f29a6ccdd71df" translate="yes" xml:space="preserve">
          <source>a function A =&amp;gt; T1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5687551e513e48bd01c30c44d6d58a44d1b792e" translate="yes" xml:space="preserve">
          <source>a function R =&amp;gt; A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8d085eed45d1b70c7372b3341930a6c91614382" translate="yes" xml:space="preserve">
          <source>a function for error reporting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9622b984172218e831bfdc1626b1bbbfc93f20a7" translate="yes" xml:space="preserve">
          <source>a function that takes an argument &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;Some(this(x))&lt;/code&gt; if &lt;code&gt;this&lt;/code&gt; is defined for &lt;code&gt;x&lt;/code&gt;, and to &lt;code&gt;None&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638b029ef7cc7d774d1b66cb52e737ab93a126a9" translate="yes" xml:space="preserve">
          <source>a function to apply to each element in this collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20688e813c95635c9ddf8ca7ae144cc2c86670db" translate="yes" xml:space="preserve">
          <source>a function to apply to each element in this immutable sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f895830e1670352dd7eac4f4936d480b4744bc" translate="yes" xml:space="preserve">
          <source>a function to apply to each element in this iterable collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb6986949d21f64906e4211ef242d010cb5122b" translate="yes" xml:space="preserve">
          <source>a function to apply to each element in this iterator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f734ee10f81416ef7d1ea5ee83efaa64d57e8cb" translate="yes" xml:space="preserve">
          <source>a function to apply to each element in this lazy list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e4fa2c3967e8a8b2c7caaf367b941b93c120d6" translate="yes" xml:space="preserve">
          <source>a function to apply to each element in this view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfc1b7bbba7261688182f887e4a26e22467a143f" translate="yes" xml:space="preserve">
          <source>a function which maps arguments &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;isDefinedAt(x)&lt;/code&gt;. The resulting function runs &lt;code&gt;action(this(x))&lt;/code&gt; where &lt;code&gt;this&lt;/code&gt; is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa7ba6d790aed8ddd3b4f4eb164f217cfe6d995" translate="yes" xml:space="preserve">
          <source>a hash value consistent with ==</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70099a54b40c2978fd34a27d3e07d96cecbdcedc" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;#apply(i:Int):A&quot; id=&quot;scala.collection.immutable.ArraySeq#apply&quot; name=&quot;scala.collection.immutable.ArraySeq#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.ArraySeq#iterator&quot; name=&quot;scala.collection.immutable.ArraySeq#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28e073af8a957061a7240b1570efebb4af0f27c" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;#apply(i:Int):A&quot; id=&quot;scala.collection.immutable.IndexedSeq#apply&quot; name=&quot;scala.collection.immutable.IndexedSeq#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.IndexedSeq#iterator&quot; name=&quot;scala.collection.immutable.IndexedSeq#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db19726e5ebe455fdeeb9e7bbed52c7c2f4e490" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;#apply(i:Int):Char&quot; id=&quot;scala.collection.immutable.WrappedString#apply&quot; name=&quot;scala.collection.immutable.WrappedString#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.WrappedString#iterator&quot; name=&quot;scala.collection.immutable.WrappedString#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4ab0a1c4eada24b875dc246320ad284cfb05d0" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;#apply(idx:Int):Int&quot; id=&quot;scala.collection.immutable.Range#apply&quot; name=&quot;scala.collection.immutable.Range#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;#iterator:Iterator%5BInt%5D&quot; id=&quot;scala.collection.immutable.Range#iterator&quot; name=&quot;scala.collection.immutable.Range#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b6e6153ae33759444e17e8a3c054a6a2aab7a9" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;#apply(idx:Int):T&quot; id=&quot;scala.collection.immutable.NumericRange#apply&quot; name=&quot;scala.collection.immutable.NumericRange#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;#iterator:Iterator%5BT%5D&quot; id=&quot;scala.collection.immutable.NumericRange#iterator&quot; name=&quot;scala.collection.immutable.NumericRange#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3caf115488b41c78f4472a6743c0a1f7a492eff" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;#apply(index:Int):A&quot; id=&quot;scala.collection.immutable.Vector#apply&quot; name=&quot;scala.collection.immutable.Vector#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.Vector#iterator&quot; name=&quot;scala.collection.immutable.Vector#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edbc44df9d45f4866f15c8fad5d89a12622ba9a" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;arrayseq#apply(i:Int):A&quot; id=&quot;scala.collection.immutable.ArraySeq#apply&quot; name=&quot;scala.collection.immutable.ArraySeq#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;arrayseq#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.ArraySeq#iterator&quot; name=&quot;scala.collection.immutable.ArraySeq#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ba4495b63820332e937f3166f003bb4da1144c" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;numericrange#apply(idx:Int):T&quot; id=&quot;scala.collection.immutable.NumericRange#apply&quot; name=&quot;scala.collection.immutable.NumericRange#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;numericrange#iterator:Iterator%5BT%5D&quot; id=&quot;scala.collection.immutable.NumericRange#iterator&quot; name=&quot;scala.collection.immutable.NumericRange#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752f1de43cb5a9acf2556f885dee3b8bb5129d64" translate="yes" xml:space="preserve">
          <source>a hint about when to use &lt;a href=&quot;range#apply(idx:Int):Int&quot; id=&quot;scala.collection.immutable.Range#apply&quot; name=&quot;scala.collection.immutable.Range#apply&quot;&gt;apply&lt;/a&gt; or &lt;a href=&quot;range#iterator:Iterator%5BInt%5D&quot; id=&quot;scala.collection.immutable.Range#iterator&quot; name=&quot;scala.collection.immutable.Range#iterator&quot;&gt;iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4046f424e7746248758d25517857e3ce643e68c" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;#apply(i:Int):A&quot; id=&quot;scala.collection.immutable.ArraySeq#apply&quot; name=&quot;scala.collection.immutable.ArraySeq#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.ArraySeq#iterator&quot; name=&quot;scala.collection.immutable.ArraySeq#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee36c6740ab35eae1b1d82d5ba1b970b0387a2d" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;#apply(i:Int):A&quot; id=&quot;scala.collection.immutable.IndexedSeq#apply&quot; name=&quot;scala.collection.immutable.IndexedSeq#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.IndexedSeq#iterator&quot; name=&quot;scala.collection.immutable.IndexedSeq#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e57da07d790db43c5854adbdb38c42e3060c61e" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;#apply(i:Int):Char&quot; id=&quot;scala.collection.immutable.WrappedString#apply&quot; name=&quot;scala.collection.immutable.WrappedString#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.WrappedString#iterator&quot; name=&quot;scala.collection.immutable.WrappedString#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2797914303d48543d6997d9ec88ce5909778aac0" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;#apply(idx:Int):Int&quot; id=&quot;scala.collection.immutable.Range#apply&quot; name=&quot;scala.collection.immutable.Range#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;#iterator:Iterator%5BInt%5D&quot; id=&quot;scala.collection.immutable.Range#iterator&quot; name=&quot;scala.collection.immutable.Range#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7083f51fb5bdc3b084504d1ac2b0cf3dcc1ecc3" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;#apply(idx:Int):T&quot; id=&quot;scala.collection.immutable.NumericRange#apply&quot; name=&quot;scala.collection.immutable.NumericRange#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;#iterator:Iterator%5BT%5D&quot; id=&quot;scala.collection.immutable.NumericRange#iterator&quot; name=&quot;scala.collection.immutable.NumericRange#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d189fbe8beea93ebef3c78da8d5d808590d79e" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;#apply(index:Int):A&quot; id=&quot;scala.collection.immutable.Vector#apply&quot; name=&quot;scala.collection.immutable.Vector#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.Vector#iterator&quot; name=&quot;scala.collection.immutable.Vector#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2982b80df83e5d3e80be7adfbda3d53de5043425" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;arrayseq#apply(i:Int):A&quot; id=&quot;scala.collection.immutable.ArraySeq#apply&quot; name=&quot;scala.collection.immutable.ArraySeq#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;arrayseq#iterator:Iterator%5BA%5D&quot; id=&quot;scala.collection.immutable.ArraySeq#iterator&quot; name=&quot;scala.collection.immutable.ArraySeq#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23403d046c8865b89d2cc2196a28d45faf54913a" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;numericrange#apply(idx:Int):T&quot; id=&quot;scala.collection.immutable.NumericRange#apply&quot; name=&quot;scala.collection.immutable.NumericRange#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;numericrange#iterator:Iterator%5BT%5D&quot; id=&quot;scala.collection.immutable.NumericRange#iterator&quot; name=&quot;scala.collection.immutable.NumericRange#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e610c5587dff261605e1860b35308404b943446e" translate="yes" xml:space="preserve">
          <source>a hint to the runtime when scanning values &lt;a href=&quot;range#apply(idx:Int):Int&quot; id=&quot;scala.collection.immutable.Range#apply&quot; name=&quot;scala.collection.immutable.Range#apply&quot;&gt;apply&lt;/a&gt; is perferred for scan with a max index less than this value &lt;a href=&quot;range#iterator:Iterator%5BInt%5D&quot; id=&quot;scala.collection.immutable.Range#iterator&quot; name=&quot;scala.collection.immutable.Range#iterator&quot;&gt;iterator&lt;/a&gt; is preferred for scans above this range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e32f430213677d336183ef8d899227c35815cc37" translate="yes" xml:space="preserve">
          <source>a immutable array consisting of all elements of this immutable array except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable array, if this immutable array has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193c50316e28886c644ca4bc79bf0ceb5148c911" translate="yes" xml:space="preserve">
          <source>a immutable array consisting of all elements of this immutable array except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable array, if this immutable array has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76de53ecaac2cad7e0cbaa0008b9803a2374147a" translate="yes" xml:space="preserve">
          <source>a immutable array consisting of the elements of this immutable array sorted according to the ordering &lt;code&gt;ord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1c5716f164daf2e9d9fed7250172d32cecd23da" translate="yes" xml:space="preserve">
          <source>a immutable array consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable array, or else the whole immutable array, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784cac8dc1e970e9c2ad32aa5f3e576c1b6b43fb" translate="yes" xml:space="preserve">
          <source>a immutable array consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this immutable array, or else the whole immutable array, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec47842c8eeb6a9f2616322c35f866e71fe87a9a" translate="yes" xml:space="preserve">
          <source>a immutable array containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this immutable array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0aed4c35884b6f2292cca86d942fead3c2f0317" translate="yes" xml:space="preserve">
          <source>a immutable champ hash map consisting of all elements of this immutable champ hash map except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable champ hash map, if this immutable champ hash map has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a018817dcd88304a7ec899701265a39463b05f4d" translate="yes" xml:space="preserve">
          <source>a immutable champ hash map consisting of all elements of this immutable champ hash map except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable champ hash map, if this immutable champ hash map has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f84957c46b2d57cfd4c20c9f384e078bea7e5d" translate="yes" xml:space="preserve">
          <source>a immutable champ hash map consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable champ hash map, or else the whole immutable champ hash map, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable champ hash map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="381ab4eda366aebd07361890ded09cd13ad118b4" translate="yes" xml:space="preserve">
          <source>a immutable champ hash map consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this immutable champ hash map, or else the whole immutable champ hash map, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable champ hash map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7195eaedcbc52ec3346c1a3d2c5ff3b35a52223a" translate="yes" xml:space="preserve">
          <source>a immutable champ hash set consisting of all elements of this immutable champ hash set except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable champ hash set, if this immutable champ hash set has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c39012ebf2590b7a0201e335d6f8ef0c99e2120" translate="yes" xml:space="preserve">
          <source>a immutable champ hash set consisting of all elements of this immutable champ hash set except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable champ hash set, if this immutable champ hash set has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdd915abe1705e3abbdaaca99d86b9f7b2513c0" translate="yes" xml:space="preserve">
          <source>a immutable champ hash set consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable champ hash set, or else the whole immutable champ hash set, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable champ hash set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0f0a6ac63772f75df5f8d91a8e6cdd340e8957" translate="yes" xml:space="preserve">
          <source>a immutable champ hash set consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this immutable champ hash set, or else the whole immutable champ hash set, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable champ hash set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966accfb6231d311b3da1218400c342e81cecdb1" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting of all elements of this immutable sequence except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable sequence, if this immutable sequence has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39df73702a28cfc38e256931b0d8739d4a75f247" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting of all elements of this immutable sequence except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable sequence, if this immutable sequence has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40d42def7330b03c8fe9163b5d53a44f3c3782b" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting of the elements of this immutable sequence sorted according to the comparison function &lt;code&gt;lt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d297f776dc734505229953c22865df9e22dbf35" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting of the elements of this immutable sequence sorted according to the ordering &lt;code&gt;ord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d90682a9ba7109a8d6ce73cdef95966f53c389f" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting of the elements of this immutable sequence sorted according to the ordering where &lt;code&gt;x &amp;lt; y&lt;/code&gt; if &lt;code&gt;ord.lt(f(x), f(y))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce909529c29f7ed853634b5d37645fc26272eaf" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable sequence, or else the whole immutable sequence, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4fe36a6b2795f3a55551465d9f4cb68ed5940c" translate="yes" xml:space="preserve">
          <source>a immutable sequence consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this immutable sequence, or else the whole immutable sequence, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22fe468f8821c2d3d09293eb0e1b5987ae8f1eb2" translate="yes" xml:space="preserve">
          <source>a immutable sequence containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d1d540aa2a497fe2b07b81ecbe71db0b65c495" translate="yes" xml:space="preserve">
          <source>a immutable tree map consisting of all elements of this immutable tree map except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable tree map, if this immutable tree map has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b749ac4d151464c955d5b32a40dbd8677e300ced" translate="yes" xml:space="preserve">
          <source>a immutable tree map consisting of all elements of this immutable tree map except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable tree map, if this immutable tree map has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b072f595510b424240f1a5249e685983d67c85f2" translate="yes" xml:space="preserve">
          <source>a immutable tree map consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable tree map, or else the whole immutable tree map, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable tree map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c56e5239fd1536ae5a998b38e1264583438c818" translate="yes" xml:space="preserve">
          <source>a immutable tree map consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this immutable tree map, or else the whole immutable tree map, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable tree map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386cb59dc944466cf9efe7926b2140bcb7dfc5f8" translate="yes" xml:space="preserve">
          <source>a immutable tree map containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this immutable tree map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7107c9082672714d56ab81ba3d94b76d7949509" translate="yes" xml:space="preserve">
          <source>a immutable tree seq map containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this immutable tree seq map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f2e911c64a5b829a66b6756a1b0875a46347413" translate="yes" xml:space="preserve">
          <source>a immutable tree set consisting of all elements of this immutable tree set except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable tree set, if this immutable tree set has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89516cb99a1c7222f7d9c0f1fb7b5fb752d314d4" translate="yes" xml:space="preserve">
          <source>a immutable tree set consisting of all elements of this immutable tree set except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty immutable tree set, if this immutable tree set has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091776b432631128db69a5081ead780bfceab2fc" translate="yes" xml:space="preserve">
          <source>a immutable tree set consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable tree set, or else the whole immutable tree set, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable tree set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73d40640f1a6c0e4af9107fc5da3a0070041afc6" translate="yes" xml:space="preserve">
          <source>a immutable tree set consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this immutable tree set, or else the whole immutable tree set, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty immutable tree set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1b1ede69856f32f572d7dabcf84b4533ac2c46" translate="yes" xml:space="preserve">
          <source>a immutable tree set containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this immutable tree set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="122a74507ca2b8ced89b67b7ca4c25bd6ddb21e3" translate="yes" xml:space="preserve">
          <source>a iterable collection consisting of all elements of this iterable collection except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty iterable collection, if this iterable collection has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11523883cba4f2299f5c9568358c034ea07fdd99" translate="yes" xml:space="preserve">
          <source>a iterable collection consisting of all elements of this iterable collection except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty iterable collection, if this iterable collection has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ab87bb3ba2fc2ba44693caf90fb6dd3726f04a" translate="yes" xml:space="preserve">
          <source>a iterable collection consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this iterable collection, or else the whole iterable collection, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty iterable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255949cc8ba4b9e711e8cda7d7c4c305639aacb9" translate="yes" xml:space="preserve">
          <source>a iterable collection consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this iterable collection, or else the whole iterable collection, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty iterable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918583113707bf6791b5bb1f00699e32a759b132" translate="yes" xml:space="preserve">
          <source>a iterable collection containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this iterable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7dbd217c563a42a82cb1d1734274267bf5bd12" translate="yes" xml:space="preserve">
          <source>a iterable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29d02bfa28e977fee5af0512e2f7bd4cddfac39a" translate="yes" xml:space="preserve">
          <source>a iterator consisting of all elements of this iterator except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty iterator, if this iterator has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dff241ced6921e4c90189eb0d2343e32f664216" translate="yes" xml:space="preserve">
          <source>a iterator consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this iterator, or else the whole iterator, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bf5ea3c0a27347b4ffa6f5759f4c35f12d7d75" translate="yes" xml:space="preserve">
          <source>a iterator containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bf51d588c5d92b28be5438fb655b6ac76b2025" translate="yes" xml:space="preserve">
          <source>a java.lang.Boolean offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31d847f24186d811de57a8365e0453e2dd8475d" translate="yes" xml:space="preserve">
          <source>a java.lang.Byte offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c36b784419d91bcae720da067029f9184797c2f" translate="yes" xml:space="preserve">
          <source>a java.lang.Character offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea4754925e58505bf849f02a19e0bdf69bf9fca" translate="yes" xml:space="preserve">
          <source>a java.lang.Double offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1877388277e14132dee14a59c2ea0346033c4523" translate="yes" xml:space="preserve">
          <source>a java.lang.Float offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6539304da96c1194e53846eb00db0d96967e2a6e" translate="yes" xml:space="preserve">
          <source>a java.lang.Integer offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="374a42950016fa27d227d67badcd0a5da02a666f" translate="yes" xml:space="preserve">
          <source>a java.lang.Long offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7b8949f35f68ec384057d3788dbf6988552288" translate="yes" xml:space="preserve">
          <source>a java.lang.Short offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b7b276e92298211565744ada01db5b40a9589f" translate="yes" xml:space="preserve">
          <source>a lazy list consisting of all elements of this lazy list except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty lazy list, if this lazy list has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0fcab5f59a71d5cc44f9f9419b8b05129caa72" translate="yes" xml:space="preserve">
          <source>a lazy list consisting of all elements of this lazy list except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty lazy list, if this lazy list has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3731e440be23f9096f081859890795a068b1eb" translate="yes" xml:space="preserve">
          <source>a lazy list consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this lazy list, or else the whole lazy list, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty lazy list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fc6d037fe2532248cd029a7789cc775f42ebde" translate="yes" xml:space="preserve">
          <source>a lazy list consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this lazy list, or else the whole lazy list, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty lazy list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e07acfa8bedcfca3f54c557a4b342b5fa4c1ad3e" translate="yes" xml:space="preserve">
          <source>a lazy list containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this lazy list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b55d0262ac79cc0429494ba69e9581396151fd" translate="yes" xml:space="preserve">
          <source>a lazy list that produces elements using &lt;code&gt;f&lt;/code&gt; until &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9273b1ba673f813ec25eaa5d8a3e12cad813b7" translate="yes" xml:space="preserve">
          <source>a list consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this list, or else the whole list, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c9c095ffa707ae867a3a476b57793d09409bfe" translate="yes" xml:space="preserve">
          <source>a list consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this list, or else the whole list, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47472681f4417e2ed3fb5557dc050f96ef72933e" translate="yes" xml:space="preserve">
          <source>a list containing all elements of this priority queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3eff4b3ad7d3979ef8acc108d0cc118b4983833" translate="yes" xml:space="preserve">
          <source>a list containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc5f04cd83af54132ccb4520946ef71d7544c26" translate="yes" xml:space="preserve">
          <source>a list of all extracted values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0900bc6678a6a769880dfb14070ae8c40b79fe2f" translate="yes" xml:space="preserve">
          <source>a list resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this list and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2a92885a2b9da68d50af42ffcb30e371b2709e" translate="yes" xml:space="preserve">
          <source>a list resulting from the concatenation of the given list &lt;code&gt;prefix&lt;/code&gt; and this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad78e2eea3ab69957bc2bd2adc13763ab68b698b" translate="yes" xml:space="preserve">
          <source>a list which contains &lt;code&gt;x&lt;/code&gt; as first element and which continues with this list. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ea2fea27772bcdb52c98cdf6c50c6a661c3534" translate="yes" xml:space="preserve">
          <source>a map view which maps every key of this map to &lt;code&gt;f(this(key))&lt;/code&gt;. The resulting map wraps the original map without copying any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17bc9a1adf438efd67b349b8b58d721cd92d6b2" translate="yes" xml:space="preserve">
          <source>a measure of the uncertainty that the caller is willing to tolerate: if the call returns true the probability that this BigInt is prime exceeds (1 - 1/2 ^ certainty). The execution time of this method is proportional to the value of this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65217eb066f303d688103dceaaf5116ea40c962" translate="yes" xml:space="preserve">
          <source>a neutral element for the fold operation; may be added to the result an arbitrary number of times, and must not change the result (e.g., &lt;code&gt;Nil&lt;/code&gt; for list concatenation, 0 for addition, or 1 for multiplication).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f10105545bc0cb2d20e78606daf77fdfe4e72b49" translate="yes" xml:space="preserve">
          <source>a new &lt;code&gt;AnyRefMap&lt;/code&gt; with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5285d2eff82400f626fc9bae4bbef8c7cc2fb998" translate="yes" xml:space="preserve">
          <source>a new &lt;code&gt;LongMap&lt;/code&gt; with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b6be2789b0ab4fed4415b254ff20de99c21fac" translate="yes" xml:space="preserve">
          <source>a new Accumulator with elements &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48c9688a800ee485b9aa8a7a6fb710dd37bba79" translate="yes" xml:space="preserve">
          <source>a new Accumulator with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50b9ac31ff10d933b5994e2def6f80f9abacef1" translate="yes" xml:space="preserve">
          <source>a new String resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each char on which it is defined and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d279ec1956d8b017dd35ae19f859c5bbf58449" translate="yes" xml:space="preserve">
          <source>a new Tuple where the first element is the second element of this Tuple and the second element is the first element of this Tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83aad1d325d05fa92e57fe09c2f593fd12a8e1b" translate="yes" xml:space="preserve">
          <source>a new aray resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this array and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f7e04219670225c89549e044bd644e4d9e7d5d" translate="yes" xml:space="preserve">
          <source>a new array buffer with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f124949c8aea097d8736b314d79f1060b2b2874b" translate="yes" xml:space="preserve">
          <source>a new array consisting of all elements of this array followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting collection has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7e5456421ea8fa2a6273725a4af248033d33a5" translate="yes" xml:space="preserve">
          <source>a new array consisting of all elements of this array that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563ba96f12974b3bbb2c24b519962ac329474fd7" translate="yes" xml:space="preserve">
          <source>a new array consisting of all elements of this array that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d732e2874721567612c854d07c828c10312fbbc" translate="yes" xml:space="preserve">
          <source>a new array consisting of all the elements of this array without duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbd79fa1c284b2c6c5154b979c2dcb8d844d579" translate="yes" xml:space="preserve">
          <source>a new array containing pairs consisting of corresponding elements of this array and &lt;code&gt;that&lt;/code&gt;. The length of the returned array is the maximum of the lengths of this array and &lt;code&gt;that&lt;/code&gt;. If this array is shorter than &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;thisElem&lt;/code&gt; values are used to pad the result. If &lt;code&gt;that&lt;/code&gt; is shorter than this array, &lt;code&gt;thatElem&lt;/code&gt; values are used to pad the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34763522df3ef0bc81c99a5fcefdb27f44115e09" translate="yes" xml:space="preserve">
          <source>a new array containing pairs consisting of corresponding elements of this array and &lt;code&gt;that&lt;/code&gt;. The length of the returned array is the minimum of the lengths of this array and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8477a8dcc6a5027d4f1da7ea02d6fab352689a36" translate="yes" xml:space="preserve">
          <source>a new array containing the prefix scan of the elements in this array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eddaf11a8729801e8adec4a9004d61cb97a60d2" translate="yes" xml:space="preserve">
          <source>a new array deque with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a97c3a8845468e775161372d73fce6f3e8301d" translate="yes" xml:space="preserve">
          <source>a new array resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this array and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e790cd7575d55e0d107c67bd583ce58faed3463" translate="yes" xml:space="preserve">
          <source>a new array resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5adbff854cf44a80c3e51a4e6305e06c6b8207de" translate="yes" xml:space="preserve">
          <source>a new array which contains all elements of this array except some of occurrences of elements that also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68949967d98312f1f9b3ae9cc20a4454bfc29c2b" translate="yes" xml:space="preserve">
          <source>a new array which contains all elements of this array which also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d7deddf70057cbecf2165a6a66eb069a1c0ac1" translate="yes" xml:space="preserve">
          <source>a new array which is a copy of this array with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275cfcbb66f944e54c1366b502ad0acdb1700e70" translate="yes" xml:space="preserve">
          <source>a new bitset containing pairs consisting of corresponding elements of this bitset and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this bitset and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5224522b7e2d4bc9a84ce88798845d0620e61ee7" translate="yes" xml:space="preserve">
          <source>a new bitset resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this bitset and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bd120860125e95b8e5fb47e93f79ccc659a91a" translate="yes" xml:space="preserve">
          <source>a new bitset resulting from applying the given function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8aadc8e4351ffb36e6b5c8c3af89e2038ad24e3" translate="yes" xml:space="preserve">
          <source>a new bitset resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this bitset and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e143ed4831e12b3f492d24ea517573df613e1100" translate="yes" xml:space="preserve">
          <source>a new bitset resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d28a0bda1f7a3a013139d0b8205c998b7ff3f01" translate="yes" xml:space="preserve">
          <source>a new collection consisting of all chars of this string except that &lt;code&gt;replaced&lt;/code&gt; chars starting from &lt;code&gt;from&lt;/code&gt; are replaced by &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30514a19e94589e8294b4da124591c89eaa17ec" translate="yes" xml:space="preserve">
          <source>a new collection consisting of all elements of this collection that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b84d38d0752406173376e83222658bf2c2ba9a0" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this immutable array followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5862132955624af672c916141016c4daaaf801" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this immutable queue followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bfca2360f4028d8e79ae437d822559ea011ce2" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this immutable sequence followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8674bb8f20dbac5e13bf55a2158516ba8d599a1b" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this lazy list followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e7ff8eee1e8c927ec4affcbbc687573c2646c2" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this list followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8503bb5cbe9f04f5633720d97b48e3047375a0ea" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this sequence followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1c0001a22242beb0c861b76a6c5f967ee0ea54" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this vector followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50f632a2dab20a2055b536f42013b33b171c1ff1" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;CC[B]&lt;/code&gt; which contains all elements of this wrapped string followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5008ca927966f0bc5ecb4b3e1f036999d7652a7c" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;That&lt;/code&gt; containing pairs consisting of corresponding elements of this immutable sequence and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the maximum of the lengths of this immutable sequence and &lt;code&gt;that&lt;/code&gt;. If this immutable sequence is shorter than &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;thisElem&lt;/code&gt; values are used to pad the result. If &lt;code&gt;that&lt;/code&gt; is shorter than this immutable sequence, &lt;code&gt;thatElem&lt;/code&gt; values are used to pad the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998290a341902f8ae43f08c20829358e895e874f" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;That&lt;/code&gt; containing pairs consisting of corresponding elements of this iterable collection and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the maximum of the lengths of this iterable collection and &lt;code&gt;that&lt;/code&gt;. If this iterable collection is shorter than &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;thisElem&lt;/code&gt; values are used to pad the result. If &lt;code&gt;that&lt;/code&gt; is shorter than this iterable collection, &lt;code&gt;thatElem&lt;/code&gt; values are used to pad the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3393ba0c9ad9701c69a29f2f756ae5f7ebc21f6a" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;That&lt;/code&gt; containing pairs consisting of corresponding elements of this lazy list and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the maximum of the lengths of this lazy list and &lt;code&gt;that&lt;/code&gt;. If this lazy list is shorter than &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;thisElem&lt;/code&gt; values are used to pad the result. If &lt;code&gt;that&lt;/code&gt; is shorter than this lazy list, &lt;code&gt;thatElem&lt;/code&gt; values are used to pad the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd7b402ef50e84d80c9ea4c3d825c0abd565e4fa" translate="yes" xml:space="preserve">
          <source>a new collection of type &lt;code&gt;That&lt;/code&gt; containing pairs consisting of corresponding elements of this view and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the maximum of the lengths of this view and &lt;code&gt;that&lt;/code&gt;. If this view is shorter than &lt;code&gt;that&lt;/code&gt;, &lt;code&gt;thisElem&lt;/code&gt; values are used to pad the result. If &lt;code&gt;that&lt;/code&gt; is shorter than this view, &lt;code&gt;thatElem&lt;/code&gt; values are used to pad the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d7202c977c5434819a92a04f2182cb93b019e7" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each char of this string and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5874ecde6fa02fa932c590113c4a5891dba3e7" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of the filtered outer collection and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f245281cd0aab0e89e13d3b686dada8a20880f05" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this collection and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7745632d7c5db9d379aafae4917b5c9a5a72504" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each char of this string and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9de267a162cc4c791dfb590fe7058140ddea11c2" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of the filtered outer collection and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdf0895ece7e8d3bdad4811146b9c29af4876147" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this collection and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c174a4ee0a86af583f6592a2853e7f5c15f65b" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each char on which it is defined and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4416742d06c1cf934ae92f19bdb6f8e92cef8bf5" translate="yes" xml:space="preserve">
          <source>a new collection resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7faece07ac44a2db107a6c5e48a2f1a1498fed1" translate="yes" xml:space="preserve">
          <source>a new collection resulting from concatenating all element collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d257884e3338e0ff672463b03bbb89c0234531a" translate="yes" xml:space="preserve">
          <source>a new collection that contains all elements of the current collection except one less occurrence of &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c713b31daa60fee43df848b68ca854c484c823f7" translate="yes" xml:space="preserve">
          <source>a new collection that contains all elements of the current collection except one less occurrence of each of the elements of &lt;code&gt;elems&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17385a90682a04553858ff0024a069b5618c55c2" translate="yes" xml:space="preserve">
          <source>a new collection that contains all elements of the current collection except one less occurrence of each of the given elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffb7e5c90b07a86c230ac1a94de785857e34701" translate="yes" xml:space="preserve">
          <source>a new collection which contains all chars of this string followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b29b38855594f004fc7e98cc3abeafff7ea033c" translate="yes" xml:space="preserve">
          <source>a new collection with elements &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d21dbd3680c41249b27723f0e6eb6f01720cb61" translate="yes" xml:space="preserve">
          <source>a new collection with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7359775fd8847f786280285eaafa60935ecba12" translate="yes" xml:space="preserve">
          <source>a new element to add.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa52f8f476ecf508f7525f9f32b6eb2ae1ea651" translate="yes" xml:space="preserve">
          <source>a new empty array builder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f93325c7ec5c988bb969344f40bc68e54bb6f5" translate="yes" xml:space="preserve">
          <source>a new function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x) == apply(g(x))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe501dab042b70be0d425afcc073cffc301949" translate="yes" xml:space="preserve">
          <source>a new function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f(x) == g(apply(x))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e3f8ea92152cb2a5104608f6ff4de055fdea95" translate="yes" xml:space="preserve">
          <source>a new growable collection consisting of all elements of this growable collection that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904103304fa693876ccca9e7b645ffd61028a45b" translate="yes" xml:space="preserve">
          <source>a new immutable array consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this immutable array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ef154ab518d24f3b7fbe4bc6ce876a6fcb70b4" translate="yes" xml:space="preserve">
          <source>a new immutable array consisting of all elements of this immutable array followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca38e1da6c0c9f58468929747f107bb4ef975a3" translate="yes" xml:space="preserve">
          <source>a new immutable array containing pairs consisting of corresponding elements of this immutable array and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this immutable array and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6bb726d594f59bef7bca6d1e590e86889b5761e" translate="yes" xml:space="preserve">
          <source>a new immutable array resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this immutable array and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a33570d33923ed32d07f1b856125d757b7956e8" translate="yes" xml:space="preserve">
          <source>a new immutable array which contains all elements of &lt;code&gt;prefix&lt;/code&gt; followed by all the elements of this immutable array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb150c2e82534c4d8ab8118eb623424805b7ceef" translate="yes" xml:space="preserve">
          <source>a new immutable array which is a copy of this immutable array with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55aa5572c7ee3e4db7c7668f0216ff7cf7be9382" translate="yes" xml:space="preserve">
          <source>a new immutable bitset containing pairs consisting of corresponding elements of this immutable bitset and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this immutable bitset and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d3049dc43f86943bf7a188e2dec0c0fc3f9e37" translate="yes" xml:space="preserve">
          <source>a new immutable bitset resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this immutable bitset and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf45e418cd02febc121ea9b4d923ae80907d8f8" translate="yes" xml:space="preserve">
          <source>a new immutable bitset resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this immutable bitset and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a3ad4c7d465f6b98ed7274714201eaa1e03de0" translate="yes" xml:space="preserve">
          <source>a new immutable bitset resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d25889735e93ac8ec72a3f9ef6274848622a0f0" translate="yes" xml:space="preserve">
          <source>a new immutable champ hash map that contains all elements of the current immutable champ hash map except one less occurrence of each of the elements of &lt;code&gt;elems&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f190368f4b875854a561e5d70541c559c4213b" translate="yes" xml:space="preserve">
          <source>a new immutable champ hash map which contains all elements of this immutable champ hash map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e734b390eaa92c1e491c0148d3a26da62164e0" translate="yes" xml:space="preserve">
          <source>a new immutable champ hash set with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f677349043a83bc3bafa3d1258264f59b4e80dc9" translate="yes" xml:space="preserve">
          <source>a new immutable champ hash set with the given elements added, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b582a1e7fb8b750ab1e4a9c950a45dcd8f5808" translate="yes" xml:space="preserve">
          <source>a new immutable champ hash set with the given elements removed, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1280dc904b1949bd45df04fc8be91602d392c8b8" translate="yes" xml:space="preserve">
          <source>a new immutable integer map which contains all elements of this immutable integer map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e41c811332b4d305e2ed21cf16b69a18eee22e" translate="yes" xml:space="preserve">
          <source>a new immutable long integer map which contains all elements of this immutable long integer map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe9e30224e1a2061a008b42186ce48c09639372" translate="yes" xml:space="preserve">
          <source>a new immutable map that contains all elements of the current immutable map except one less occurrence of each of the elements of &lt;code&gt;elems&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da630a2ee73f7b74fad105edf1bd56b3a8c277e4" translate="yes" xml:space="preserve">
          <source>a new immutable map which contains all elements of this immutable map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0149b298a25f33563bf21d27d2cfe39953f4803" translate="yes" xml:space="preserve">
          <source>a new immutable queue consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this immutable queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282dc943ba4a7bc48cfbd8ec3f377c19c519429e" translate="yes" xml:space="preserve">
          <source>a new immutable queue consisting of all elements of this immutable queue followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c96109ae492953b99102eb09b747fee6991a394" translate="yes" xml:space="preserve">
          <source>a new immutable queue with elements &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393eea16dbb0f0cc93471d11b573a424db70e1f1" translate="yes" xml:space="preserve">
          <source>a new immutable queue with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e04ac361fc345d5c420f633eb086b107f21d6d2" translate="yes" xml:space="preserve">
          <source>a new immutable sequence consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92db5d3eadff8e07673a2d7f17c4ee48401525b9" translate="yes" xml:space="preserve">
          <source>a new immutable sequence consisting of all elements of this immutable sequence except that &lt;code&gt;replaced&lt;/code&gt; elements starting from &lt;code&gt;from&lt;/code&gt; are replaced by all the elements of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97be8f6f85d79bbd0ce7d203ef7ea14c01ce026" translate="yes" xml:space="preserve">
          <source>a new immutable sequence consisting of all elements of this immutable sequence followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d7b3d2aa0f370a408ce21155adec65d8130a2c" translate="yes" xml:space="preserve">
          <source>a new immutable sequence consisting of all elements of this immutable sequence followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting collection has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3b019cb1bbaf9bd5256b12be0c15c864d0392c" translate="yes" xml:space="preserve">
          <source>a new immutable sequence consisting of all elements of this immutable sequence that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a602905c55dad81ef30885847aab166c98e18b98" translate="yes" xml:space="preserve">
          <source>a new immutable sequence consisting of all the elements of this immutable sequence without duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b658e7600b8a01482f5fd6fde26b64291bf0ac" translate="yes" xml:space="preserve">
          <source>a new immutable sequence containing pairs consisting of corresponding elements of this immutable sequence and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this immutable sequence and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3f9182dd61d92bc75755939c31879f57fbf67d" translate="yes" xml:space="preserve">
          <source>a new immutable sequence containing the prefix scan of the elements in this immutable sequence</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fa8a68c1ac2923567910f2ea63b0e945b4cbd8" translate="yes" xml:space="preserve">
          <source>a new immutable sequence resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this immutable sequence and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f55e3fa3f92db34f66e3ee4a6a3b7cc7115226e" translate="yes" xml:space="preserve">
          <source>a new immutable sequence resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this immutable sequence and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2162289642edd9befa80f7fb43ffbef8c3b332" translate="yes" xml:space="preserve">
          <source>a new immutable sequence resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e9b6cc0b35d4d0dd39628b20c5d1ed72788f5c" translate="yes" xml:space="preserve">
          <source>a new immutable sequence resulting from concatenating all element immutable sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1fdcae36f9391d28772f3a9d9f8cdda69412ae8" translate="yes" xml:space="preserve">
          <source>a new immutable sequence which contains all elements of &lt;code&gt;prefix&lt;/code&gt; followed by all the elements of this immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793f406efacaf8893d1696d2c3e9165629f3c7ab" translate="yes" xml:space="preserve">
          <source>a new immutable sequence which contains all elements of this immutable sequence except some of occurrences of elements that also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bf86cf931980638bda52782283773c53c105bc" translate="yes" xml:space="preserve">
          <source>a new immutable sequence which contains all elements of this immutable sequence followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43fc134629f306a48e0775f9e54311825814167" translate="yes" xml:space="preserve">
          <source>a new immutable sequence which contains all elements of this immutable sequence which also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5316047c59a4de9102d567d3ab51d4c1c4593d" translate="yes" xml:space="preserve">
          <source>a new immutable sequence which is a copy of this immutable sequence with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc15155021063b1cd16fabfbe33a1ec84de28b45" translate="yes" xml:space="preserve">
          <source>a new immutable sequence with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa1801324d1c972d84175489b957a2e3d9a62da" translate="yes" xml:space="preserve">
          <source>a new immutable set with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df693192ede6edd6bf140a4c15691b1146d102a5" translate="yes" xml:space="preserve">
          <source>a new immutable set with the given elements added, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899ae08b4e736b82418ed748addb4f612a78dbc9" translate="yes" xml:space="preserve">
          <source>a new immutable set with the given elements removed, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ed059e9a77138bc4815b88100163664353b55c" translate="yes" xml:space="preserve">
          <source>a new immutable sorted set containing pairs consisting of corresponding elements of this immutable sorted set and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this immutable sorted set and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1663472d616e5b48b6cec1db3c80630f9efbe7" translate="yes" xml:space="preserve">
          <source>a new immutable sorted set resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this immutable sorted set and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ef372107fb141b56015977d34b913a268f782e" translate="yes" xml:space="preserve">
          <source>a new immutable sorted set resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this immutable sorted set and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a99e28d92498a095d2ce8e61c3f7a10a52213772" translate="yes" xml:space="preserve">
          <source>a new immutable sorted set resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108e7a34f37e08fa51d94b81b8b04af6cbc2acae" translate="yes" xml:space="preserve">
          <source>a new immutable tree map that contains all elements of the current immutable tree map except one less occurrence of each of the elements of &lt;code&gt;elems&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db517e0e91d7728987842009975bf32a1a8dcbc" translate="yes" xml:space="preserve">
          <source>a new immutable tree map which contains all elements of this immutable tree map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620c278feb5391f737a80c6c5358e9809004256a" translate="yes" xml:space="preserve">
          <source>a new immutable tree seq map resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this immutable tree seq map and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086a4d37fe23a793db2d75a812b74f99a3e8c4c0" translate="yes" xml:space="preserve">
          <source>a new immutable tree seq map resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this immutable tree seq map and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af92cd8e5fce26bde06e9ebb77e1f4923ba658b" translate="yes" xml:space="preserve">
          <source>a new immutable tree seq map resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87fcae2222e68f77356da64e1ab2462d65ea14d2" translate="yes" xml:space="preserve">
          <source>a new immutable tree seq map which contains all elements of this immutable tree seq map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdac63b4f67cf75f36b6e0ae194caa399adf09fd" translate="yes" xml:space="preserve">
          <source>a new immutable tree set containing &lt;code&gt;elem&lt;/code&gt; and all the elements of this immutable tree set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90acf833aec2acdf51a22f17be56146be8952591" translate="yes" xml:space="preserve">
          <source>a new immutable tree set containing all the elements of this immutable tree set except &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b79b3ee84e8b694540189f7be3c6924002ce8f" translate="yes" xml:space="preserve">
          <source>a new immutable tree set with the given elements added, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ae0a549850b59a6c863f4bf9eaa0f6b048bbd4" translate="yes" xml:space="preserve">
          <source>a new immutable tree set with the given elements removed, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffaa6ee0d4649b3007bf4b6f45d72d21b181cedd" translate="yes" xml:space="preserve">
          <source>a new iterable collection consisting of all elements of this iterable collection that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a2e1ed9daffd9447e404967009c0902db5b708" translate="yes" xml:space="preserve">
          <source>a new iterable collection containing pairs consisting of corresponding elements of this iterable collection and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this iterable collection and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1333e9e17daf8ecbaf7eacb2af23eb3e404d373d" translate="yes" xml:space="preserve">
          <source>a new iterable collection containing the prefix scan of the elements in this iterable collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e8bfeefaeafe7fc256ab279c7da2254508a586f" translate="yes" xml:space="preserve">
          <source>a new iterable collection resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this iterable collection and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9176076b03507b20b47060123f815bab5ce841" translate="yes" xml:space="preserve">
          <source>a new iterable collection resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this iterable collection and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25375bd07fb62b25c1e8fc18e2d9c24200da4b4" translate="yes" xml:space="preserve">
          <source>a new iterable collection resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0ae6378e0809ba10b91d83e30c26adc2a24573" translate="yes" xml:space="preserve">
          <source>a new iterable collection resulting from concatenating all element iterable collections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ded47a9aa247062edcf04cccbcd2f964cd2c72" translate="yes" xml:space="preserve">
          <source>a new iterable collection which contains all elements of this iterable collection followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4651650b6277f6d3bbd196bb18c90bb5d676df95" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this collection that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4c0b64258e435949ece9ca17a2e860195dedd3" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this growable collection that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f609e1ea2cdc5778e239bebe4593bc872d7c001f" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this immutable integer map that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61fec32e7b2b3c1fb85cda78314ddb8ef1db627f" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this immutable long integer map that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d119c52909fc00291e094812dbcbbba5c4545c24" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this immutable sequence that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2f86f149fdb21250a0c470addb7c2d94596163" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this immutable tree map that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dae68b9378bd0a49f6489324bb0c9a1c1fdb55" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this immutable tree set that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc71235df00c492f4f697282cc0b8f1731909729" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this iterable collection that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80fc324e493ca9d4e0a770473da02e57e797073" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this iterator followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting collection has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c275e93a0b9c12109c2f4beb1568ad2a48e3d8ea" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this iterator that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01aa0326a21fda58441efd7afa3ce32f451ff478" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this iterator that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="503c4f71ae510704331826d6ab9bad486c85e6d2" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this lazy list that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70f71bb9534342f2009ed0e79ab693f6add0eedc" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this list that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b66fc3dd913466b4b0c6ed30778816e0119bf0e" translate="yes" xml:space="preserve">
          <source>a new iterator consisting of all elements of this view that satisfy the given predicate &lt;code&gt;p&lt;/code&gt;. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30deff582379dd069f8107a4d478af7333fd7a3" translate="yes" xml:space="preserve">
          <source>a new iterator resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this iterator and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349b710e1d28eb4d796f6233607561393d2e35b0" translate="yes" xml:space="preserve">
          <source>a new iterator resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this iterator and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bd5d377a40635b4bfc9a8dfaa6dd1b2c5633a7" translate="yes" xml:space="preserve">
          <source>a new iterator resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0724531fba3cb67f235674a65a59deb86b128198" translate="yes" xml:space="preserve">
          <source>a new iterator resulting from concatenating all element iterators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7348da6a1125e63fb9c246870c0dda9737939a" translate="yes" xml:space="preserve">
          <source>a new iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71b9b4b75387d4d771f19408e27e9b0911a02df2" translate="yes" xml:space="preserve">
          <source>a new lazy list consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this lazy list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5838d17e3896f6ed698aba22807d3c46ce4f6b5" translate="yes" xml:space="preserve">
          <source>a new lazy list consisting of all elements of this lazy list except that &lt;code&gt;replaced&lt;/code&gt; elements starting from &lt;code&gt;from&lt;/code&gt; are replaced by all the elements of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0703b94360edae41fd6a30f987a7130af1f412eb" translate="yes" xml:space="preserve">
          <source>a new lazy list consisting of all elements of this lazy list followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02769a9f12265e0a0005bb0117a39af877cf657c" translate="yes" xml:space="preserve">
          <source>a new lazy list consisting of all elements of this lazy list followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting collection has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f974b8e3b7889d3967b1728828c18868a8187c08" translate="yes" xml:space="preserve">
          <source>a new lazy list consisting of all elements of this lazy list that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7964112f5507b6d77ff95b4aa11d46947debd0" translate="yes" xml:space="preserve">
          <source>a new lazy list containing pairs consisting of corresponding elements of this lazy list and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this lazy list and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5acc6f85ced1453535e0d6187e6c5f91e87a61a" translate="yes" xml:space="preserve">
          <source>a new lazy list resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this lazy list and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e37babcb07e53cc57788934899d123b76f5e3bb" translate="yes" xml:space="preserve">
          <source>a new lazy list resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this lazy list and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc573eacca5ae45851d203676ca42fbaaaf0ac4a" translate="yes" xml:space="preserve">
          <source>a new lazy list resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c1f10ae992bd153f10403e245d6eb4bc1e5554" translate="yes" xml:space="preserve">
          <source>a new lazy list resulting from concatenating all element lazy lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1c17e396e2469192fe3c5c0601971ec8e8eb9d" translate="yes" xml:space="preserve">
          <source>a new lazy list which contains all elements of &lt;code&gt;prefix&lt;/code&gt; followed by all the elements of this lazy list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2d71363ea116648cba1f949097d9f716142187" translate="yes" xml:space="preserve">
          <source>a new lazy list which contains all elements of this lazy list except some of occurrences of elements that also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbadb9554248150c75a0be55f12dd7cce4f22afa" translate="yes" xml:space="preserve">
          <source>a new lazy list which contains all elements of this lazy list which also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead98ba730fab72a46b0e74f83b55a03822b067e" translate="yes" xml:space="preserve">
          <source>a new lazy list which is a copy of this lazy list with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859a8e1e6b3295263a0cc5ac224213af04f56854" translate="yes" xml:space="preserve">
          <source>a new lazy list with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd9c4c24fa8659896a040581bff91332d6d8662" translate="yes" xml:space="preserve">
          <source>a new linked hash set with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82dd9e41522ec1032037faea64fcc0f76c1ccb8b" translate="yes" xml:space="preserve">
          <source>a new list consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df0fccc020c8bd679a564ef6e91f3e6988c64865" translate="yes" xml:space="preserve">
          <source>a new list consisting of all elements of this list that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6f8229bbf9bbee3ed71f5ffe91f3620f67549a" translate="yes" xml:space="preserve">
          <source>a new list resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this list and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a25fa62af36b3e307768df626afca93c15c092" translate="yes" xml:space="preserve">
          <source>a new list resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this list and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28290b59cbbbed34fff9f635c7d03ac9be7f8a2" translate="yes" xml:space="preserve">
          <source>a new list resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670bcbf836a8c8381f16fb605c9777876115e7c7" translate="yes" xml:space="preserve">
          <source>a new list set with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc3a161c7d55c68ffbae57fdf20d6e3b6e95e196" translate="yes" xml:space="preserve">
          <source>a new list which contains all elements of &lt;code&gt;prefix&lt;/code&gt; followed by all the elements of this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acc550ed8f7d77a381cf73288ed89202dc66ef4c" translate="yes" xml:space="preserve">
          <source>a new list which is a copy of this list with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6064846ec83afd0cdaae67bb374631d13ac4960a" translate="yes" xml:space="preserve">
          <source>a new list with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46058ad985b4489b6a3743cff2945b32e1c4d991" translate="yes" xml:space="preserve">
          <source>a new map resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this map and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85850d0f9e27e6298c70717edb1405fadb0eef7e" translate="yes" xml:space="preserve">
          <source>a new map resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this map and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e001b66962cd84b6b96feffe92cc6fe372645eb7" translate="yes" xml:space="preserve">
          <source>a new map resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c100fb6188461b2a1725eca1b4a74e0ab0bf710" translate="yes" xml:space="preserve">
          <source>a new map which contains all elements of this map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8af4adb4ce0320838487aeb41ed6b41e2415303" translate="yes" xml:space="preserve">
          <source>a new map without a binding for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15fccc7667ab7562b1cf338ce058846d3ae4a3ed" translate="yes" xml:space="preserve">
          <source>a new mutable collision-proof hash map resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this mutable collision-proof hash map and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f10f7dbfeb696e52ace39e17b4f2677f1e8e667" translate="yes" xml:space="preserve">
          <source>a new mutable collision-proof hash map resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this mutable collision-proof hash map and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a80cdb32815339a8fe28ebe30610b1fa68d373" translate="yes" xml:space="preserve">
          <source>a new mutable collision-proof hash map resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f69a0e73ae8dfd896f9a4ca67a489d3240e296" translate="yes" xml:space="preserve">
          <source>a new mutable collision-proof hash map which contains all elements of this mutable collision-proof hash map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d453e58ecfe9ec4a183903d67e933d17a53c31c7" translate="yes" xml:space="preserve">
          <source>a new mutable hash set with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035bc9035ec778d5c721cd558259ff2fc43033d0" translate="yes" xml:space="preserve">
          <source>a new mutable map which contains all elements of this mutable map followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28bdfb84975de16f1287324ec6e7a91c44a4bb9" translate="yes" xml:space="preserve">
          <source>a new priority queue containing elements of both &lt;code&gt;xs&lt;/code&gt; and &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510612f3a49cde3c7831804fc4240fef3b007484" translate="yes" xml:space="preserve">
          <source>a new queue with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25017b047c87567c495e44c0db2e17795ef29b57" translate="yes" xml:space="preserve">
          <source>a new range consisting of &lt;code&gt;n&lt;/code&gt; first elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a930db5616de8f035ef578098c6d72e3046d4333" translate="yes" xml:space="preserve">
          <source>a new range consisting of a contiguous interval of values in the old range</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b176eca71e623eb5e7d9b9662f23ee9b063842" translate="yes" xml:space="preserve">
          <source>a new range consisting of all the elements of this range except &lt;code&gt;n&lt;/code&gt; first elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546a2e7c26ee87bca9e30a96a2f4536e09ccb71b" translate="yes" xml:space="preserve">
          <source>a new range consisting of all the elements of this range except the first one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e1727a0f74aa7d10594e7ab89b6ca86fb0f15e" translate="yes" xml:space="preserve">
          <source>a new range consisting of all the elements of this range except the last one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460372fb78cf04e92911f3f15db5e4f9822ed94c" translate="yes" xml:space="preserve">
          <source>a new range consisting of all the elements of this range without duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d589c471a713ec08a13ff5c1f50482b0227acf" translate="yes" xml:space="preserve">
          <source>a new range resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this range and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e4d40323e8e0e4c6599acc673fd76b63b1cc4a" translate="yes" xml:space="preserve">
          <source>a new range with a different step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fa090572a22fb1a145993c3904caf51d725468" translate="yes" xml:space="preserve">
          <source>a new sequence consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceff33a55f1c4227d823fa31b7c49b5c2a490f92" translate="yes" xml:space="preserve">
          <source>a new sequence consisting of all elements of this sequence except that &lt;code&gt;replaced&lt;/code&gt; elements starting from &lt;code&gt;from&lt;/code&gt; are replaced by all the elements of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21d5300d1a2c54d7838a28a9d70b361da6d5fef" translate="yes" xml:space="preserve">
          <source>a new sequence consisting of all elements of this sequence followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="351cce582c871abc1b965d2d8e23c6a48ea98f1d" translate="yes" xml:space="preserve">
          <source>a new sequence consisting of all elements of this sequence followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting collection has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37b8b54f70667c86a7e6e1e3abcbf237d6cf6b8" translate="yes" xml:space="preserve">
          <source>a new sequence consisting of all the elements of this sequence without duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7688f6fc3a6130d813596f454c3705716e77f1da" translate="yes" xml:space="preserve">
          <source>a new sequence resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this sequence and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1481f6a23755a18ccbb67bc719842db336b8295b" translate="yes" xml:space="preserve">
          <source>a new sequence which contains all elements of &lt;code&gt;prefix&lt;/code&gt; followed by all the elements of this sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d4c1e5f00bbb32fa4f34c45e39d430dcab0a3d" translate="yes" xml:space="preserve">
          <source>a new sequence which contains all elements of this sequence except some of occurrences of elements that also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e0f869811693f5593d2a9be12032ddfe1508fb" translate="yes" xml:space="preserve">
          <source>a new sequence which contains all elements of this sequence followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f814d54f28291e9a4e2b8f8e4f5af42ae183399" translate="yes" xml:space="preserve">
          <source>a new sequence which contains all elements of this sequence which also appear in &lt;code&gt;that&lt;/code&gt;. If an element value &lt;code&gt;x&lt;/code&gt; appears</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d437852deb4eadb9238dc743573dc639d6586ec" translate="yes" xml:space="preserve">
          <source>a new sequence which is a copy of this sequence with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee60283bf03be73c5dfd78bf543473f28bdb20c" translate="yes" xml:space="preserve">
          <source>a new set consisting of all elements that are both in this set and in the given set &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a9721377552a9d0de5166e395786fd42f5de1e" translate="yes" xml:space="preserve">
          <source>a new set consisting of all elements that are in this set or in the given set &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c0be55110928f9ce6e441b1fdfc6fc4fd173a6" translate="yes" xml:space="preserve">
          <source>a new set containing pairs consisting of corresponding elements of this set and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this set and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00308f7575669a4ebd9b6ea517cc581b0a5dc64e" translate="yes" xml:space="preserve">
          <source>a new set resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this set and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49626c714286664e4c8a7c0b4780ab5f9c0218c2" translate="yes" xml:space="preserve">
          <source>a new set resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this set and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cc0151b51d2b43d32e4baadf5c93286916a814" translate="yes" xml:space="preserve">
          <source>a new set resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe251a8f3859618a052a02d609bf96a0d71a4c1c" translate="yes" xml:space="preserve">
          <source>a new set that contains all elements of this set and that also contains &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1373bdf193530b9be57a42068b1a41993c34e85c" translate="yes" xml:space="preserve">
          <source>a new set that contains all elements of this set but that does not contain &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56fb4263a5838f441a437d8370172d48c4e2c419" translate="yes" xml:space="preserve">
          <source>a new set with the given elements added, omitting duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac80a94da05eb6800f51e7f727b8fc27000941ae" translate="yes" xml:space="preserve">
          <source>a new stack with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba251946072b437d32b3da169d1dc4c95b69ef5f" translate="yes" xml:space="preserve">
          <source>a new string consisting of all chars of this string except that &lt;code&gt;replaced&lt;/code&gt; chars starting from &lt;code&gt;from&lt;/code&gt; are replaced by &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdb26d0a3c3b9d469edddff2e56305e1c3d5994" translate="yes" xml:space="preserve">
          <source>a new string resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each char of this string and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588bdb9a054a5fdcb6ca39b44f1535f422ce3545" translate="yes" xml:space="preserve">
          <source>a new string resulting from applying the given string-valued function &lt;code&gt;f&lt;/code&gt; to each char of this string and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8230673193110cae1634d17e86f77d6dea404a" translate="yes" xml:space="preserve">
          <source>a new string which contains all chars of this string followed by all chars of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdc79bb0e5737ce8fb12ce430a9fe038f1c1999" translate="yes" xml:space="preserve">
          <source>a new string which is a copy of this string with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d0eb95f9f5465816f77f757e8d51a729149404" translate="yes" xml:space="preserve">
          <source>a new value resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5e7a7bfbf6969a54c4ca0f9e8d38fb128825f4" translate="yes" xml:space="preserve">
          <source>a new vector consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a8b14563a5554943f60b4914f65f680d2aec27" translate="yes" xml:space="preserve">
          <source>a new vector consisting of all elements of this vector followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2a0d94b17d381dcda27ac729cec32328e4bdc0" translate="yes" xml:space="preserve">
          <source>a new vector which contains all elements of &lt;code&gt;prefix&lt;/code&gt; followed by all the elements of this vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="824efa38935f9df38d187c82a2be6d88124421df" translate="yes" xml:space="preserve">
          <source>a new vector which is a copy of this vector with the element at position &lt;code&gt;index&lt;/code&gt; replaced by &lt;code&gt;elem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d9c24853a02887771460c46b7ce4c862221131b" translate="yes" xml:space="preserve">
          <source>a new vector with the elements of &lt;code&gt;source&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff411ebbb3d98cebddabbd50df5e092b6c871eae" translate="yes" xml:space="preserve">
          <source>a new view consisting of &lt;code&gt;value&lt;/code&gt; followed by all elements of this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1c43aca8ece8c459ff0a38ebf8e8dcbf16655c" translate="yes" xml:space="preserve">
          <source>a new view consisting of all elements of this view followed by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1933b1c9a8c4355c7baff943547484d43019cf40" translate="yes" xml:space="preserve">
          <source>a new view consisting of all elements of this view that do not satisfy the given predicate &lt;code&gt;pred&lt;/code&gt;. Their order may not be preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5c6cdcf915798c095a3e0603067faa29f60c17" translate="yes" xml:space="preserve">
          <source>a new view containing pairs consisting of corresponding elements of this view and &lt;code&gt;that&lt;/code&gt;. The length of the returned collection is the minimum of the lengths of this view and &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b4d4ec4c9ab0b26e8d49efa5103522af21a088" translate="yes" xml:space="preserve">
          <source>a new view containing the prefix scan of the elements in this view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea2d623d4f723e5074e8078d66e8f4a78283642" translate="yes" xml:space="preserve">
          <source>a new view resulting from applying the given collection-valued function &lt;code&gt;f&lt;/code&gt; to each element of this view and concatenating the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b1c9ca009b54a73719df676af5c4ba2fca3ad8" translate="yes" xml:space="preserve">
          <source>a new view resulting from applying the given function &lt;code&gt;f&lt;/code&gt; to each element of this view and collecting the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c68f43ec9d379b8700d94d9c2da7ea6555db68e9" translate="yes" xml:space="preserve">
          <source>a new view resulting from applying the given partial function &lt;code&gt;pf&lt;/code&gt; to each element on which it is defined and collecting the results. The order of the elements is preserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b35a5af7f0ca6ec5d384221de596797398e08a" translate="yes" xml:space="preserve">
          <source>a new view resulting from concatenating all element views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e0e6cddf216c9dd09ae81db4e089c515580141" translate="yes" xml:space="preserve">
          <source>a new view which contains all elements of this view followed by all elements of &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06889f62082e22149abf5d461ab86d2667625d88" translate="yes" xml:space="preserve">
          <source>a new view with elements &lt;code&gt;elems&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c4e766967a3bcc6b1c85b9c0796e1f6b1bc075" translate="yes" xml:space="preserve">
          <source>a numeric range consisting of all elements of this numeric range except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty numeric range, if this numeric range has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81db2422e3084b43f83855f392d7ff9001767b03" translate="yes" xml:space="preserve">
          <source>a numeric range consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this numeric range, or else the whole numeric range, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty numeric range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746c11b7a159cf8cee2e0d5e89325c7b2280343a" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this array whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3003d7f475e6c614deb56e1d75c18cdbf18987d7" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this collection whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fb0a8a4619b76dc0fec887337b7dc1985b8d13" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this immutable champ hash map whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this immutable champ hash map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78aaff1e704bfd4b3d0a63d21b061e77c4c7a82f" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this immutable champ hash set whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this immutable champ hash set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3670efb60350c75b6854373965c48a9e0c9dfb4c" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this immutable sequence whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24a8045a1af2688d11021dcb4a0b55ece9d952b" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this immutable tree map whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this immutable tree map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b0c0373650dc0b1241b17a3f202db8a68e37b5c" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this immutable tree set whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this immutable tree set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc60d3b65ef07d991fb56f427eb7d04dc7700c0" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this iterable collection whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this iterable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48dfdb8fd296666d0f7113ff861825b9d736284" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this iterator whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa8d1da928a1bd1a6b3168f3fc03349cba0dbe2" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this list whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41435ed492cb9f2f6d8535a192513039c02ffac" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this range whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a17eea63d1bcfe497cec58ce32cd37881e07b4" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this string whose chars all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6e0f7e89063049284e9718d70bfcfd091d2476" translate="yes" xml:space="preserve">
          <source>a pair consisting of the longest prefix of this view whose elements all satisfy &lt;code&gt;p&lt;/code&gt;, and the rest of this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7f11485c18ee76355dfe781c6c7f171192736d" translate="yes" xml:space="preserve">
          <source>a pair of Arrays, containing, respectively, the first and second half of each element pair of this Array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="904ee8ecbfbe7b810ddc9de5151f187ff49090b1" translate="yes" xml:space="preserve">
          <source>a pair of Options, containing, respectively, the first and second half of the element pair of this Option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baaac85a98effd068b0eeaeb61ad1a3c7a95eff1" translate="yes" xml:space="preserve">
          <source>a pair of arrays consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this array, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fbafa63f4279b7ecf9c0f91c3f868d3081e1e2" translate="yes" xml:space="preserve">
          <source>a pair of arrays: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;../util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;../util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d000ab23ebc31f8dfb7679c392f04fb495687db7" translate="yes" xml:space="preserve">
          <source>a pair of arrays: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="666de07b6e28b6b4098ad717f99d8b4277b31eb9" translate="yes" xml:space="preserve">
          <source>a pair of collections consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this collection, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="633c6d74f9f8cbb148bceb19e4e978a52707123f" translate="yes" xml:space="preserve">
          <source>a pair of immutable sequences consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this immutable sequence, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cab65fe31ac874566e6a048b7ed730b161601ac" translate="yes" xml:space="preserve">
          <source>a pair of immutable sequences, containing the first, respectively second half of each element pair of this immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d278d8788f40e97ab35f19fe2beb31dfe9037f5" translate="yes" xml:space="preserve">
          <source>a pair of immutable sequences: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3da5f7a34f6907e47f398aee756df8c7b3f9be9" translate="yes" xml:space="preserve">
          <source>a pair of iterable collections consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this iterable collection, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291dd9dc25173b3b16a76638cbda740280f24e2e" translate="yes" xml:space="preserve">
          <source>a pair of iterable collections, containing the first, respectively second half of each element pair of this iterable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e70c63846be6438bb29a800593a0c858ef24a10" translate="yes" xml:space="preserve">
          <source>a pair of iterable collections: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;../../util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;../../util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d77cba42c731929481d22fb6ce87e1712c0170" translate="yes" xml:space="preserve">
          <source>a pair of iterable collections: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;../util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;../util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0505a13a9945467793ab082755fcf9e349fc19ed" translate="yes" xml:space="preserve">
          <source>a pair of iterable collections: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc300e434e1995650f8c693c63e9c09089e45a4" translate="yes" xml:space="preserve">
          <source>a pair of iterators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df98f3b0b6e6f10fe50f17d09142840b3e3d4f0f" translate="yes" xml:space="preserve">
          <source>a pair of iterators: the iterator that satisfies the predicate &lt;code&gt;p&lt;/code&gt; and the iterator that does not. The relative order of the elements in the resulting iterators is the same as in the original iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb6a3e5d64ebcb3f0b8d5cf54b103a57a75d493" translate="yes" xml:space="preserve">
          <source>a pair of lazy lists, containing the first, respectively second half of each element pair of this lazy list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613513a88791f415bb0bcbf047d95be5112514e2" translate="yes" xml:space="preserve">
          <source>a pair of lazy lists: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;../../util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;../../util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79ab1652f0563b8ea64a737b24d225a61040b76" translate="yes" xml:space="preserve">
          <source>a pair of lists consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this list, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926b3bc3d76289ed04b30e4cf90fdb5ced1ed4a6" translate="yes" xml:space="preserve">
          <source>a pair of lists, containing the first, respectively second half of each element pair of this list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a907c3a65c92eda94063d04854b3e4aa625fd5" translate="yes" xml:space="preserve">
          <source>a pair of numeric ranges consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this numeric range, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e5e7898a6ce53aa9e0102fc05f8b920858796a" translate="yes" xml:space="preserve">
          <source>a pair of ranges consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this range, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59511c293facf8f0dcfccee2af3fc2744b871c4" translate="yes" xml:space="preserve">
          <source>a pair of strings consisting of the first &lt;code&gt;n&lt;/code&gt; chars of this string, and the other chars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0477cbaa5448db1db26368ff73cfab62b3ac5a" translate="yes" xml:space="preserve">
          <source>a pair of strings: the first one made of those characters returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;../util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;../util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7618414cf9ed0487bce9129fad0db531abf6965b" translate="yes" xml:space="preserve">
          <source>a pair of views consisting of the first &lt;code&gt;n&lt;/code&gt; elements of this view, and the other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f017c90ab37b73dab92cbd7a248c1141e60652" translate="yes" xml:space="preserve">
          <source>a pair of views, containing the first, respectively second half of each element pair of this view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9facec3e959951785697a54a34d12d5cf3cbaee1" translate="yes" xml:space="preserve">
          <source>a pair of views: the first one made of those values returned by &lt;code&gt;f&lt;/code&gt; that were wrapped in &lt;a href=&quot;../util/left&quot; id=&quot;scala.util.Left&quot; name=&quot;scala.util.Left&quot;&gt;scala.util.Left&lt;/a&gt;, and the second one made of those wrapped in &lt;a href=&quot;../util/right&quot; id=&quot;scala.util.Right&quot; name=&quot;scala.util.Right&quot;&gt;scala.util.Right&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3aad2c52895a650b8c835ab5bb0ed2697dcc52b" translate="yes" xml:space="preserve">
          <source>a partial function defined for those inputs where f returns &lt;code&gt;Some(_)&lt;/code&gt; and undefined where &lt;code&gt;f&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd3efba2b0a315dcc9b2882678c5b2f1303cfd9" translate="yes" xml:space="preserve">
          <source>a partial function that receives current optionally-mapped value and return a new mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46530a56b5fa4799e5df63d7270abdb3cb23b09d" translate="yes" xml:space="preserve">
          <source>a partial function which delegates to the ordinary function &lt;code&gt;f&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f4119c52f7dd219367a1b2e153cd69865dbaf8" translate="yes" xml:space="preserve">
          <source>a partial function which has as domain the union of the domains of this partial function and &lt;code&gt;that&lt;/code&gt;. The resulting partial function takes &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;this(x)&lt;/code&gt; where &lt;code&gt;this&lt;/code&gt; is defined, and to &lt;code&gt;that(x)&lt;/code&gt; where it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e6bd488569c809698f3592f75f82f06f7153b0" translate="yes" xml:space="preserve">
          <source>a partial function with the domain of other partial function narrowed by this partial function, which maps arguments &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;this(k(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb0476cfb7504418341f875904510bc79f439a2e" translate="yes" xml:space="preserve">
          <source>a partial function with the domain of this partial function narrowed by other partial function, which maps arguments &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;k(this(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50abe5f41eefee41a2c753fc1ce09e9f5a5eb9ce" translate="yes" xml:space="preserve">
          <source>a partial function with the domain of this partial function, possibly narrowed by the specified function, which maps arguments &lt;code&gt;x&lt;/code&gt; to &lt;code&gt;k(this(x))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5ebab23df40b0b99aa86e7044903eb39895b83" translate="yes" xml:space="preserve">
          <source>a primitive value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9757c92a04b1c9d18e5fefdcf945b0e6c570f53" translate="yes" xml:space="preserve">
          <source>a primitive value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220391b89eeb7b437e5b40709ff5f1ab99d76333" translate="yes" xml:space="preserve">
          <source>a priority queue with the same elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd045f0a720481c046364ee9db6a8f58f77d70e" translate="yes" xml:space="preserve">
          <source>a range consisting of all elements of this range except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty range, if this range has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1317216e256b8a01f5d1f13667578652d91aa410" translate="yes" xml:space="preserve">
          <source>a range consisting of the elements of this range sorted according to the ordering &lt;code&gt;ord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b39a4f008b680055862a38feb214a0806a74153" translate="yes" xml:space="preserve">
          <source>a range consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this range, or else the whole range, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbcd6ef08093342aedcf6f5a40a9518c4bc34d86" translate="yes" xml:space="preserve">
          <source>a reference to this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a61a05039f8537e01b699240f775409e3c7e86e3" translate="yes" xml:space="preserve">
          <source>a scala.runtime.BoxedUnit offering &lt;code&gt;x&lt;/code&gt; as its underlying value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4eddb598024fde0d493d68752f8b077222e7fa" translate="yes" xml:space="preserve">
          <source>a sequence consisting of all elements of this sequence except the first &lt;code&gt;n&lt;/code&gt; ones, or else the empty sequence, if this sequence has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38611975504cdc53acf4348cb811cd881208337" translate="yes" xml:space="preserve">
          <source>a sequence consisting of all elements of this sequence except the last &lt;code&gt;n&lt;/code&gt; ones, or else the empty sequence, if this sequence has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, don't drop any elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0875ae6138bcc46dc7563e2fe2c6ab2ca3c55cb" translate="yes" xml:space="preserve">
          <source>a sequence consisting of the elements of this sequence sorted according to the comparison function &lt;code&gt;lt&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9949e9d7f9d9d20255f57a8dd55df7c3e93a3e" translate="yes" xml:space="preserve">
          <source>a sequence consisting of the elements of this sequence sorted according to the ordering &lt;code&gt;ord&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11695d11c097487fd7351ed26006684790f77137" translate="yes" xml:space="preserve">
          <source>a sequence consisting of the elements of this sequence sorted according to the ordering where &lt;code&gt;x &amp;lt; y&lt;/code&gt; if &lt;code&gt;ord.lt(f(x), f(y))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93b08c5c0661592337dc68197a8bfb8781cc9bc" translate="yes" xml:space="preserve">
          <source>a sequence consisting only of the first &lt;code&gt;n&lt;/code&gt; elements of this sequence, or else the whole sequence, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff376e8867cc5c416f5bf2348afe6684b78a1a5" translate="yes" xml:space="preserve">
          <source>a sequence consisting only of the last &lt;code&gt;n&lt;/code&gt; elements of this sequence, or else the whole sequence, if it has less than &lt;code&gt;n&lt;/code&gt; elements. If &lt;code&gt;n&lt;/code&gt; is negative, returns an empty sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848cb01b0c9b8c92b0c4ed27929d0d1f8e47bd30" translate="yes" xml:space="preserve">
          <source>a sequence containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42d1605a8c267fd268706557cea35974debd57b" translate="yes" xml:space="preserve">
          <source>a sequence of all elements in the queue for which p yields true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975f40356d77a62bd87fce3b808474185e785511" translate="yes" xml:space="preserve">
          <source>a set containing all keys of this map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6a18eb744a650f83207556bc28d84107326c624" translate="yes" xml:space="preserve">
          <source>a set containing those elements of this set that are not also contained in the given set &lt;code&gt;that&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39da877757ace19546318c23b80a3b1a2763eb85" translate="yes" xml:space="preserve">
          <source>a specification major version number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba60fc49d50161cead70afb132657d0c73ee5a2" translate="yes" xml:space="preserve">
          <source>a specification version number (legacy forms acceptable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39f63e0bdf929db7c1eee93f539d008de9f282a" translate="yes" xml:space="preserve">
          <source>a strict builder for the same collection type. Note that in the case of lazy collections (e.g. &lt;a href=&quot;../collection/view&quot; id=&quot;scala.collection.View&quot; name=&quot;scala.collection.View&quot;&gt;View&lt;/a&gt; or &lt;a href=&quot;../collection/immutable/lazylist&quot; id=&quot;scala.collection.immutable.LazyList&quot; name=&quot;scala.collection.immutable.LazyList&quot;&gt;immutable.LazyList&lt;/a&gt;), it is possible to implement this method but the resulting &lt;code&gt;Builder&lt;/code&gt; will break laziness. As a consequence, operations should preferably be implemented with &lt;code&gt;fromSpecific&lt;/code&gt; instead of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da7f36e9283ca5ab5e36a92280be68345bcb381" translate="yes" xml:space="preserve">
          <source>a strict builder for the same collection type. Note that in the case of lazy collections (e.g. &lt;a href=&quot;../view&quot; id=&quot;scala.collection.View&quot; name=&quot;scala.collection.View&quot;&gt;View&lt;/a&gt; or &lt;a href=&quot;../immutable/lazylist&quot; id=&quot;scala.collection.immutable.LazyList&quot; name=&quot;scala.collection.immutable.LazyList&quot;&gt;immutable.LazyList&lt;/a&gt;), it is possible to implement this method but the resulting &lt;code&gt;Builder&lt;/code&gt; will break laziness. As a consequence, operations should preferably be implemented with &lt;code&gt;fromSpecific&lt;/code&gt; instead of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd83039f92d34b745acfdc68452859418b54cfa1" translate="yes" xml:space="preserve">
          <source>a strict builder for the same collection type. Note that in the case of lazy collections (e.g. &lt;a href=&quot;../view&quot; id=&quot;scala.collection.View&quot; name=&quot;scala.collection.View&quot;&gt;View&lt;/a&gt; or &lt;a href=&quot;lazylist&quot; id=&quot;scala.collection.immutable.LazyList&quot; name=&quot;scala.collection.immutable.LazyList&quot;&gt;immutable.LazyList&lt;/a&gt;), it is possible to implement this method but the resulting &lt;code&gt;Builder&lt;/code&gt; will break laziness. As a consequence, operations should preferably be implemented with &lt;code&gt;fromSpecific&lt;/code&gt; instead of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb60895d869700298bc9941932b1732ca95cafa4" translate="yes" xml:space="preserve">
          <source>a strict builder for the same collection type. Note that in the case of lazy collections (e.g. &lt;a href=&quot;view&quot; id=&quot;scala.collection.View&quot; name=&quot;scala.collection.View&quot;&gt;View&lt;/a&gt; or &lt;a href=&quot;immutable/lazylist&quot; id=&quot;scala.collection.immutable.LazyList&quot; name=&quot;scala.collection.immutable.LazyList&quot;&gt;immutable.LazyList&lt;/a&gt;), it is possible to implement this method but the resulting &lt;code&gt;Builder&lt;/code&gt; will break laziness. As a consequence, operations should preferably be implemented with &lt;code&gt;fromSpecific&lt;/code&gt; instead of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee0a9bf4782bbd8a4dbab0190b36fc081a445e1" translate="yes" xml:space="preserve">
          <source>a strict builder for the same collection type. Note that in the case of lazy collections (e.g. &lt;span name=&quot;View&quot;&gt;View&lt;/span&gt; or &lt;span name=&quot;immutable.LazyList&quot;&gt;immutable.LazyList&lt;/span&gt;), it is possible to implement this method but the resulting &lt;code&gt;Builder&lt;/code&gt; will break laziness. As a consequence, operations should preferably be implemented with &lt;code&gt;fromSpecific&lt;/code&gt; instead of this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a4707ced41c1d58bd5a8ca20560c4612012d50" translate="yes" xml:space="preserve">
          <source>a string consisting of this string followed by the minimal number of occurrences of &lt;code&gt;elem&lt;/code&gt; so that the resulting string has a length of at least &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfd074edeffbf48f70087747d3ebf88d6995ff5" translate="yes" xml:space="preserve">
          <source>a string contained within this wrapped string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9976ccc4924bdae34fcbf8218ce295e8bf251618" translate="yes" xml:space="preserve">
          <source>a string containing the elements greater than or equal to index &lt;code&gt;from&lt;/code&gt; extending up to (but not including) index &lt;code&gt;until&lt;/code&gt; of this string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703e40199fff16b5640f91a900f5d238fc598ebf" translate="yes" xml:space="preserve">
          <source>a string representation of the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715893b9796dd35b16c4a6299586833092cb5a16" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. An undefined state is represented with &lt;code&gt;&quot;&amp;lt;not computed&amp;gt;&quot;&lt;/code&gt; and cycles are represented with &lt;code&gt;&quot;&amp;lt;cycle&amp;gt;&quot;&lt;/code&gt; Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94e2accf29846909f028ba2b8137cb9e75960ca" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. By default this string consists of the &lt;code&gt;className&lt;/code&gt; of this iterable collection, followed by all elements separated by commas and enclosed in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c74e1e92a64e8368ab9aa146faa58f05ca9f7c" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. By default this string consists of the &lt;code&gt;className&lt;/code&gt; of this sequence, followed by all elements separated by commas and enclosed in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a60292845ee398570c34534eda84e0b16e9362" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. By default this string consists of the &lt;code&gt;className&lt;/code&gt; of this view, followed by all elements separated by commas and enclosed in parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43499959a9e576276a40e80fa49f70e6f9f93860" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this collection are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8788240377b5c120e5094956baa925f1046f5f8e" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this collection follow each other without any separator string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7b43fc155dc4ab0154499e20d678c9556e1ecf9" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. The resulting string begins with the string &lt;code&gt;start&lt;/code&gt; and ends with the string &lt;code&gt;end&lt;/code&gt;. Inside, the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this collection are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac52200225394b8f4337d54a95009ac02e3005c" translate="yes" xml:space="preserve">
          <source>a string representation of this collection. Undefined elements are represented with &lt;code&gt;&quot;_&quot;&lt;/code&gt;, an undefined tail is represented with &lt;code&gt;&quot;&amp;lt;not computed&amp;gt;&quot;&lt;/code&gt;, and cycles are represented with &lt;code&gt;&quot;&amp;lt;cycle&amp;gt;&quot;&lt;/code&gt; Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ca876a702e7f4cc9b15b1654f799d53ed83389" translate="yes" xml:space="preserve">
          <source>a string representation of this immutable sequence. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this immutable sequence are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbaee0dde115600c1c4811837b5a40d8db1df4f3" translate="yes" xml:space="preserve">
          <source>a string representation of this immutable sequence. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this immutable sequence follow each other without any separator string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118fc23a4fb304cf610774c49956b1a2ad4dedbc" translate="yes" xml:space="preserve">
          <source>a string representation of this immutable sequence. The resulting string begins with the string &lt;code&gt;start&lt;/code&gt; and ends with the string &lt;code&gt;end&lt;/code&gt;. Inside, the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this immutable sequence are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b059397d68e11375d6f0c221d9b3017e12604e" translate="yes" xml:space="preserve">
          <source>a string representation of this iterable collection. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this iterable collection are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff89be72aa3870ee594a42fa15da97b3f33c93b1" translate="yes" xml:space="preserve">
          <source>a string representation of this iterable collection. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this iterable collection follow each other without any separator string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c872fc9e35219ec3295e7b750c9a811b3438e957" translate="yes" xml:space="preserve">
          <source>a string representation of this iterable collection. The resulting string begins with the string &lt;code&gt;start&lt;/code&gt; and ends with the string &lt;code&gt;end&lt;/code&gt;. Inside, the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this iterable collection are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19229a2e9c5495eb7348791c3447cb3917b11b9" translate="yes" xml:space="preserve">
          <source>a string representation of this view. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this view are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4f96f224628c9e78af60d98d435cb1a94007ef" translate="yes" xml:space="preserve">
          <source>a string representation of this view. In the resulting string the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this view follow each other without any separator string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e78e20c59bbeef4d84d16168bb2cbb94b908df" translate="yes" xml:space="preserve">
          <source>a string representation of this view. The resulting string begins with the string &lt;code&gt;start&lt;/code&gt; and ends with the string &lt;code&gt;end&lt;/code&gt;. Inside, the string representations (w.r.t. the method &lt;code&gt;toString&lt;/code&gt;) of all elements of this view are separated by the string &lt;code&gt;sep&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df964ff19ab1eb83de07d7fcd181689c9dc720c1" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this concurrent map. By default the string prefix is the simple name of the collection class concurrent map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952726047ff78a73a2e9f94c6169dd9e59a5e50d" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this growable collection. By default the string prefix is the simple name of the collection class growable collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f505f0da42cdb59c30046ef5890c12ad4b033f" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable array. By default the string prefix is the simple name of the collection class immutable array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38216b0023515191cc757f27c44f3ad9262b75bd" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable champ hash map. By default the string prefix is the simple name of the collection class immutable champ hash map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ce8a79d8bcccf8ac32d9340a2854dd45c3ae31" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable champ hash set. By default the string prefix is the simple name of the collection class immutable champ hash set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c404da53bf381ba4e9bc163f67272c9e0110a64" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable integer map. By default the string prefix is the simple name of the collection class immutable integer map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a873f190dd056e3e47c0a35f087817df4a7c9a0d" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable long integer map. By default the string prefix is the simple name of the collection class immutable long integer map.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e2efb826e5f23f17408a63a1362ba31cf2c966" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable queue. By default the string prefix is the simple name of the collection class immutable queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f3f211ba28cd24363f7648741834d2f617332b" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable sequence. By default the string prefix is the simple name of the collection class immutable sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428e44851bcf9f6e80d747b72fa782540792ffc8" translate="yes" xml:space="preserve">
          <source>a string representation which starts the result of &lt;code&gt;toString&lt;/code&gt; applied to this immutable sorted set. By default the string prefix is the simple name of the collection class immutable sorted set.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
