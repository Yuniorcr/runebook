<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="a56e60b23176db0cb2d2d95c2eafaaa18c7c1f5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Term&lt;/code&gt; and &lt;code&gt;Pattern&lt;/code&gt; are compared and any unbound variables in &lt;code&gt;Pattern&lt;/code&gt; are bound to corresponding values in &lt;code&gt;Term&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; 과 &lt;code&gt;Pattern&lt;/code&gt; 이 비교되고 &lt;code&gt;Pattern&lt;/code&gt; 의 바인딩 되지 않은 변수 는 &lt;code&gt;Term&lt;/code&gt; 의 해당 값에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="bf476955e74f9154602025a23e3e5cae87c2ace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Term&lt;/code&gt; is an Erlang term that we wish to match against &lt;code&gt;Pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; 는 &lt;code&gt;Pattern&lt;/code&gt; 과 일치시키려는 Erlang 용어입니다 .</target>
        </trans-unit>
        <trans-unit id="0f3c1fd31c4e11f6e32cba2acc95aa631ef1a055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TestRunnerPid&lt;/code&gt; is returned if &lt;code&gt;release_shell == true&lt;/code&gt;. For details, see &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TestRunnerPid&lt;/code&gt; &lt;code&gt;release_shell == true&lt;/code&gt; 경우 TestRunnerPid 가 리턴됩니다 . 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac7c5d090304206771de9956f277e657e4d709f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TestSpecs&lt;/code&gt; is either the name of a test specification file (string) or a list of test specifications. If it is a list, the specifications are handled (and the corresponding tests executed) in sequence. An element in a &lt;code&gt;TestSpecs&lt;/code&gt; list can also be list of test specifications. The specifications in such a list are merged into one combined specification before test execution.</source>
          <target state="translated">&lt;code&gt;TestSpecs&lt;/code&gt; 는 테스트 사양 파일 이름 (문자열) 또는 테스트 사양 목록입니다. 목록 인 경우 사양이 순서대로 처리되고 해당 테스트가 실행됩니다. &lt;code&gt;TestSpecs&lt;/code&gt; 목록 의 요소 는 테스트 사양 목록 일 수도 있습니다. 이러한 목록의 사양은 테스트 실행 전에 하나의 결합 된 사양으로 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="d81834531a603d737b666471ac079013bd166a16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tests = integer()&lt;/code&gt;, number of tests.</source>
          <target state="translated">&lt;code&gt;Tests = integer()&lt;/code&gt; , 테스트 수.</target>
        </trans-unit>
        <trans-unit id="d2ab37503e0f5d591f2ef9a8d69441935dc0621d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout = integer()&lt;/code&gt; specifies how many milliseconds to wait before restarting the application at another node. It defaults to 0.</source>
          <target state="translated">&lt;code&gt;Timeout = integer()&lt;/code&gt; 는 다른 노드에서 응용 프로그램을 다시 시작하기 전에 대기 할 시간 (밀리 초 )을 지정합니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="1f12197e5f73601f07d80574f4fe8292d8a488f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; can also be a tuple &lt;code&gt;{clean_timeout,T}&lt;/code&gt; or &lt;code&gt;{dirty_timeout,T}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the time-out time. &lt;code&gt;{clean_timeout,T}&lt;/code&gt; works like just &lt;code&gt;T&lt;/code&gt; described in the note above and uses a proxy process while &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; bypasses the proxy process which is more lightweight.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 튜플 &lt;code&gt;{clean_timeout,T}&lt;/code&gt; 또는 &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; 일 수도 있습니다. 여기서 &lt;code&gt;T&lt;/code&gt; 는 제한 시간입니다. &lt;code&gt;{clean_timeout,T}&lt;/code&gt; 는 위의 참고에서 설명한 &lt;code&gt;T&lt;/code&gt; 와 동일하게 작동 하며 프록시 프로세스를 사용하지만 &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; 는 더 가벼운 프록시 프로세스를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="215dd1441c7a7f4cf2328f29cce8b0be80081cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer &amp;gt; 0, which specifies how many milliseconds to wait for a reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely, which is the default. If no reply is received within the specified time, the function call fails.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 는 0보다 큰 정수입니다.이 값은 응답을 기다리는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기하는 시간 (기본값)을 지정합니다. 지정된 시간 내에 응답이 수신되지 않으면 함수 호출이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="011d9f71bfc5974e239f39bd3079f6a8ecf96f60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer &amp;gt; 0, which specifies how many milliseconds to wait for the server to terminate, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If the server does not terminate within the specified time, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 서버가 종료 될 때까지 대기하는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기하는 시간을 지정하는 0보다 큰 정수 입니다. 기본값은 &lt;code&gt;infinity&lt;/code&gt; 입니다. 서버가 지정된 시간 내에 종료되지 않으면 &lt;code&gt;timeout&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cce26af6f0b969072f77bb631d40ef61dff02358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for a reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to 5000. If no reply is received within the specified time, the function call fails.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 응답을 기다리는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기 하는 시간을 지정하는 0보다 큰 정수 입니다. 지정된 시간 내에 응답이 수신되지 않으면 함수 호출이 실패합니다.</target>
        </trans-unit>
        <trans-unit id="19ea6b4ba0c408aac46d4d54817adbdb89d5b3c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for a reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to 5000. If no reply is received within the specified time, the function call fails. If the caller catches the failure and continues running, and the server is just late with the reply, it can arrive at any time later into the message queue of the caller. The caller must in this case be prepared for this and discard any such garbage messages that are two element tuples with a reference as the first element.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 응답을 기다리는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기 하는 시간을 지정하는 0보다 큰 정수 입니다. 지정된 시간 내에 응답이 수신되지 않으면 함수 호출이 실패합니다. 호출자가 실패를 발견하고 계속 실행하고 서버가 응답이 늦어지면 언제든지 호출자의 메시지 큐에 도착할 수 있습니다. 이 경우 호출자는이를 준비하고 첫 번째 요소로 참조되는 두 요소 튜플 인 가비지 메시지를 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="2a545390927615be3be95ee2e3e869ac058d8bc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for each reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If no reply is received from a node within the specified time, the node is added to &lt;code&gt;BadNodes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 0보다 큰 정수로 각 응답을 기다리는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기합니다. 기본값은 &lt;code&gt;infinity&lt;/code&gt; 입니다. 지정된 시간 내에 노드로부터 응답이 수신되지 않으면 노드가 &lt;code&gt;BadNodes&lt;/code&gt; 에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="d491898fa68143f83f4eb3b922d722a2efee0e58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for the event manager to terminate, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If the event manager has not terminated within the specified time, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 0보다 큰 정수로, 이벤트 관리자가 종료 될 때까지 대기하는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기하는 시간을 지정합니다. 기본값은 &lt;code&gt;infinity&lt;/code&gt; 입니다. 이벤트 관리자가 지정된 시간 내에 종료되지 않은 경우 &lt;code&gt;timeout&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3aff9a13c5adb8de3081f2e611e5f7eef5cbf9d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for the server to terminate, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If the server has not terminated within the specified time, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 서버가 종료 될 때까지 대기하는 시간 (밀리 초) 또는 원자 &lt;code&gt;infinity&lt;/code&gt; 가 무기한 대기하는 시간을 지정하는 0보다 큰 정수 입니다. 기본값은 &lt;code&gt;infinity&lt;/code&gt; 입니다. 서버가 지정된 시간 내에 종료되지 않은 경우 시간 &lt;code&gt;timeout&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b00c0031f23e811b5959b8ca6b50758268da0686" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 은 정수입니다.</target>
        </trans-unit>
        <trans-unit id="09ab16be1768304f7b3ae52beebf6843b75263fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is re-transmission timeout (&lt;code&gt;infinity&lt;/code&gt; | integer).</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 는 재전송 시간 초과입니다 ( &lt;code&gt;infinity&lt;/code&gt; | 정수).</target>
        </trans-unit>
        <trans-unit id="36032d5c1155f9053b9b358a83bd315f89ea768e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is a list of &lt;code&gt;{Address, SecData}&lt;/code&gt; tuples i.e the destination addresses and their corresponding security parameters. This value is normally sent to &lt;code&gt;snmpa_mpd:generate_message/4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; 는 &lt;code&gt;{Address, SecData}&lt;/code&gt; 튜플, 즉 대상 주소와 해당 보안 매개 변수의 목록입니다. 이 값은 일반적으로 &lt;code&gt;snmpa_mpd:generate_message/4&lt;/code&gt; 로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="e3d75fff4d3df97c5e4a676379dc6d3b23205c1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is a list of destination addresses and their corresponding security parameters. This value is received in the same message from the agent and then transformed trough &lt;code&gt;&lt;a href=&quot;#process_taddrs&quot;&gt;process_taddrs&lt;/a&gt;&lt;/code&gt; before passed to this function.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; 주소 및 해당 보안 매개 변수 목록입니다. 이 값은 에이전트로부터 동일한 메시지로 수신 된 &lt;code&gt;&lt;a href=&quot;#process_taddrs&quot;&gt;process_taddrs&lt;/a&gt;&lt;/code&gt; 함수에 전달되기 전에 process_taddrs 를 통해 변환 됩니다.</target>
        </trans-unit>
        <trans-unit id="a81d51ec2c3ae7ef365362e3fa993d2c65d6fbc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is the destination &lt;code&gt;Address&lt;/code&gt; that comes from the &lt;code&gt;From&lt;/code&gt; field in the corresponding &lt;code&gt;snmp_pdu&lt;/code&gt; message previously sent to the MasterAgent.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; 는 이전에 &lt;code&gt;snmp_pdu&lt;/code&gt; 로 전송 된 해당 snmp_pdu 메시지 의 &lt;code&gt;From&lt;/code&gt; 필드에서 오는 대상 &lt;code&gt;Address&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="cc19d9af430281397afd69b96199ad787711bbc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tokens&lt;/code&gt; are the Erlang tokens from &lt;code&gt;String&lt;/code&gt;. &lt;code&gt;EndLocation&lt;/code&gt; is the first location after the last token.</source>
          <target state="translated">&lt;code&gt;Tokens&lt;/code&gt; 은 &lt;code&gt;String&lt;/code&gt; 의 Erlang 토큰입니다 . &lt;code&gt;EndLocation&lt;/code&gt; 은 마지막 토큰 다음의 첫 번째 위치입니다.</target>
        </trans-unit>
        <trans-unit id="e71b6178fb3f5623b522a62907f6a2520e1b70cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Toks1&lt;/code&gt; is a tail of &lt;code&gt;Tree&lt;/code&gt; that contains symbols encountered after the structure that was correctly parsed.</source>
          <target state="translated">&lt;code&gt;Toks1&lt;/code&gt; 은 올바르게 구문 분석 된 구조 뒤에 발생한 기호가 포함 된 &lt;code&gt;Tree&lt;/code&gt; 의 꼬리입니다 .</target>
        </trans-unit>
        <trans-unit id="6cd6d06f77d587468003982f885e5ec5c02e9a2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Toks&lt;/code&gt; is the list of tokens to be parsed. A successful parse returns &lt;code&gt;{ok, Tree, Toks1}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Toks&lt;/code&gt; 는 구문 분석 할 토큰 목록입니다. 구문 분석에 성공하면 &lt;code&gt;{ok, Tree, Toks1}&lt;/code&gt; 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="6751800615a1cb23fcc3c1f7501055d38d9b53af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir.Suite.Case&lt;/code&gt; (only &lt;code&gt;Case&lt;/code&gt; executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir.Suite.Case&lt;/code&gt; ( &lt;code&gt;Case&lt;/code&gt; 만 실행)</target>
        </trans-unit>
        <trans-unit id="4c056acdec22d7bfe5f76c418b61c2b6a38aaa75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir.Suite:cases&lt;/code&gt; (specific test cases executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir.Suite:cases&lt;/code&gt; (특정 테스트 사례 실행)</target>
        </trans-unit>
        <trans-unit id="53a4e7815a1b5ed03c8521155ca5d53f619655f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir.Suite&lt;/code&gt; (all cases in &lt;code&gt;Suite&lt;/code&gt; executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir.Suite&lt;/code&gt; ( &lt;code&gt;Suite&lt;/code&gt; 의 모든 사례가 실행 됨)</target>
        </trans-unit>
        <trans-unit id="b0c25c2ac8ada173e3ada323fedd5e473bc8fc57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir:suites&lt;/code&gt; (specific suites executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir:suites&lt;/code&gt; (특정 스위트 실행)</target>
        </trans-unit>
        <trans-unit id="3c900707be7126a57aeae34e26cf071a34d5bc6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir&lt;/code&gt; (all suites in &lt;code&gt;TestDir&lt;/code&gt; executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir&lt;/code&gt; ( &lt;code&gt;TestDir&lt;/code&gt; 의 모든 스위트가 실행 됨)</target>
        </trans-unit>
        <trans-unit id="b3c728124c4ee20bb4ed11c28dc23eb6ec9d1bf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TotalSize&lt;/code&gt; is the total size of the carrier, including its header.</source>
          <target state="translated">&lt;code&gt;TotalSize&lt;/code&gt; 는 헤더를 포함하여 캐리어의 총 크기입니다.</target>
        </trans-unit>
        <trans-unit id="0459fa483f3ecb25277426566103557b3c846abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TransportTag&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;TransportTag&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c21d9eef6e37bcd0c4a7b122aab8b0580e5c7a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Trap&lt;/code&gt; is either an SNMP pdu record or an trappdu record, as defined in &lt;code&gt;snmp_types.hrl&lt;/code&gt;, with the SNMP request.</source>
          <target state="translated">&lt;code&gt;Trap&lt;/code&gt; 은 SNMP 요청이 있는 &lt;code&gt;snmp_types.hrl&lt;/code&gt; 에 정의 된 SNMP pdu 레코드 또는 trappdu 레코드 입니다.</target>
        </trans-unit>
        <trans-unit id="65dd984c5baa99a7d4646077d3ee4d1d44ac88e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tree&lt;/code&gt; is a parse tree.</source>
          <target state="translated">&lt;code&gt;Tree&lt;/code&gt; 는 구문 분석 트리입니다.</target>
        </trans-unit>
        <trans-unit id="2aba2002f72fe530f98fd7101e061e4b3297f1a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tree&lt;/code&gt; is composed of nodes of the form &lt;code&gt;{Key, Value, Smaller, Bigger}&lt;/code&gt; and the &quot;empty tree&quot; node &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tree&lt;/code&gt; &lt;code&gt;{Key, Value, Smaller, Bigger}&lt;/code&gt; 형식의 노드 와 &quot;빈 트리&quot;노드 &lt;code&gt;nil&lt;/code&gt; 로 구성 됩니다.</target>
        </trans-unit>
        <trans-unit id="c0e09fc0cdcfd3b13f03705a9747a48dbd8225ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; - As defined in the child specification.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; -하위 스펙에 정의 된대로.</target>
        </trans-unit>
        <trans-unit id="cf4c43f92c2af697a01e28db83e4dd71f728f48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; can be one of the following atoms: &lt;code&gt;process&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; or &lt;code&gt;time_offset&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 &lt;code&gt;process&lt;/code&gt; , &lt;code&gt;port&lt;/code&gt; 또는 &lt;code&gt;time_offset&lt;/code&gt; 원자 중 하나 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="61183d8e316d16b3aa5c4554b988cdbba5dc340e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; can be one of the following:</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4385c3e5e9c975a726b306526b500f71a36eb85b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; defaults to &lt;code&gt;permanent&lt;/code&gt; and specifies the start type of the application. If &lt;code&gt;Type = permanent | transient | temporary&lt;/code&gt;, the application is loaded and started in the corresponding way, see &lt;code&gt;application(3)&lt;/code&gt;. If &lt;code&gt;Type = load&lt;/code&gt;, the application is only loaded. If &lt;code&gt;Type = none&lt;/code&gt;, the application is not loaded and not started, although the code for its modules is loaded.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 기본적으로 &lt;code&gt;permanent&lt;/code&gt; 이며 응용 프로그램의 시작 유형을 지정합니다. &lt;code&gt;Type = permanent | transient | temporary&lt;/code&gt; 경우 | 과도 | 임시 응용 프로그램이로드되고 시작 대응하는 방식으로 참조되는 &lt;code&gt;application(3)&lt;/code&gt; . 경우 &lt;code&gt;Type = load&lt;/code&gt; 응용 프로그램은로드됩니다. &lt;code&gt;Type = none&lt;/code&gt; 인 경우 해당 모듈의 코드가로드되었지만 응용 프로그램이로드되지 않고 시작되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1a821d99536316865b2c699500c68f9bdc5a4a7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; indicates whether the transport process in question is being started for a connecting (&lt;code&gt;Type=connect&lt;/code&gt;) or listening (&lt;code&gt;Type=accept&lt;/code&gt;) transport. In the latter case, transport processes are started as required to accept connections from multiple peers.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 연결 ( &lt;code&gt;Type=connect&lt;/code&gt; ) 또는 청취 ( &lt;code&gt;Type=accept&lt;/code&gt; ) 전송 에 대해 해당 전송 프로세스가 시작되는지 여부를 나타냅니다 . 후자의 경우, 여러 피어로부터의 연결을 승인하는 데 필요한 전송 프로세스가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="caa2a7b6c0d3d07c66b2ba1852eb95b6ad894452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;external&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 &lt;code&gt;local&lt;/code&gt; 또는 &lt;code&gt;external&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="21a3d803e336bd6545c9bb32aaf535f91c6cd58b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;trap&lt;/code&gt; or &lt;code&gt;inform&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 &lt;code&gt;trap&lt;/code&gt; 또는 &lt;code&gt;inform&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="78a42ed7b9af09a90a6a1a7f72087dce6cf5aaa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;#pdu.type&lt;/code&gt; of the original request.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 원래 요청 의 &lt;code&gt;#pdu.type&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="474c526b3a9922a8544184a9fea2d5525d45e1a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is the allocation category that the blocks belong to, e.g. &lt;code&gt;db_term&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; or &lt;code&gt;binary&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 블록이 속하는 할당 범주입니다 (예 : &lt;code&gt;db_term&lt;/code&gt; , &lt;code&gt;message&lt;/code&gt; 또는 &lt;code&gt;binary&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="7f588287c1752d7a84c22fc8bac47e0998fd6580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is the log type as specified by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; 은 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;type&lt;/code&gt; 에 지정된 로그 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="86f3e21045c0b286b88a7bf8195dcc67e9c22f4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="d742e2818a5942c0c8ad73169e0d207bcb488c4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeSpecifierList&lt;/code&gt; is a list of type specifiers, in any order, separated by hyphens (-). Default values are used for any omitted type specifiers.</source>
          <target state="translated">&lt;code&gt;TypeSpecifierList&lt;/code&gt; 는 형식 지정자 목록이며 하이픈 (-)으로 구분 된 순서입니다. 생략 된 유형 지정자에는 기본값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a6f854978f4d26e8bf1b337746390f7a670e3302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt; is a subset of &lt;code&gt;XU&lt;/code&gt; (the unknown functions are a subset of the externally used functions since the compiler ensures that locally used functions are defined);</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; 는 &lt;code&gt;XU&lt;/code&gt; 의 서브 세트입니다 (컴파일러는 로컬로 사용되는 함수가 정의되어 있으므로 알 수없는 함수는 외부에서 사용되는 함수의 서브 세트입니다).</target>
        </trans-unit>
        <trans-unit id="898c75cebff3b4805c07d2121c4d51fc7f18c417" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt; is a subset of &lt;code&gt;XU&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; 는 &lt;code&gt;XU&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="692cf8ef50be5b3d2f0e042185cef7f3bd34073c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URLPath = string()&lt;/code&gt; and &lt;code&gt;AllowedModule = atom()&lt;/code&gt;. &lt;code&gt;erl_script_alias&lt;/code&gt; marks all URLs matching url-path as erl scheme scripts. A matching URL is mapped into a specific module and function, for example:</source>
          <target state="translated">&lt;code&gt;URLPath = string()&lt;/code&gt; 및 &lt;code&gt;AllowedModule = atom()&lt;/code&gt; 입니다. &lt;code&gt;erl_script_alias&lt;/code&gt; 는 url-path와 일치하는 모든 URL을 erl 체계 스크립트로 표시합니다. 일치하는 URL은 특정 모듈 및 기능에 매핑됩니다 (예 :</target>
        </trans-unit>
        <trans-unit id="e3fcbaddb590a3c617dece38aa9d0f190c6b03c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URLPath = string()&lt;/code&gt; and &lt;code&gt;AllowedModule = atom()&lt;/code&gt;. Same as &lt;code&gt;erl_script_alias&lt;/code&gt; but for scripts using the eval scheme. This is only supported for backwards compatibility. The eval scheme is deprecated.</source>
          <target state="translated">&lt;code&gt;URLPath = string()&lt;/code&gt; 및 &lt;code&gt;AllowedModule = atom()&lt;/code&gt; 입니다. &lt;code&gt;erl_script_alias&lt;/code&gt; 와 동일 하지만 eval 스킴을 사용하는 스크립트의 경우. 이전 버전과의 호환성을 위해서만 지원됩니다. 평가 체계는 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="56aaf7274c51ed95f7dca6ce7cf373f53f104484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt; (the unused functions are defined in analyzed modules).</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; 는 &lt;code&gt;F&lt;/code&gt; 의 하위 집합입니다 (사용되지 않은 기능은 분석 된 모듈에서 정의 됨).</target>
        </trans-unit>
        <trans-unit id="923f18e488650bde9c66947168e35c3510bff3c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; 는 &lt;code&gt;F&lt;/code&gt; 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="985635c99efb3d556bc5a1bd15f0d0809ae440a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is equal to &lt;code&gt;F&amp;nbsp;-&amp;nbsp;(XU&amp;nbsp;+&amp;nbsp;LU)&lt;/code&gt; (the unused functions are defined functions that are neither used externally nor locally);</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; 는 &lt;code&gt;F&amp;nbsp;-&amp;nbsp;(XU&amp;nbsp;+&amp;nbsp;LU)&lt;/code&gt; (사용되지 않은 함수는 외부 또는 로컬에서 사용되지 않는 함수로 정의 됨).</target>
        </trans-unit>
        <trans-unit id="a6ad183e880144b686df72a44944a8942cb3f72a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is equal to &lt;code&gt;V - (XU + LU)&lt;/code&gt;, where &lt;code&gt;LU&lt;/code&gt; and &lt;code&gt;XU&lt;/code&gt; may have elements in common. Put in another way:</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; 는 &lt;code&gt;V - (XU + LU)&lt;/code&gt; 와 같습니다. 여기서 &lt;code&gt;LU&lt;/code&gt; 와 &lt;code&gt;XU&lt;/code&gt; 는 공통 요소를 가질 수 있습니다. 다른 방법으로 넣으십시오.</target>
        </trans-unit>
        <trans-unit id="6a37ede7bba99908c3022cc088f335a2bc827250" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uniq&lt;/code&gt; (a binary) is a unique value for this fun. It is calculated from the compiled code for the entire module.</source>
          <target state="translated">&lt;code&gt;Uniq&lt;/code&gt; (2 진)는이 재미를위한 고유 한 값입니다. 전체 모듈에 대해 컴파일 된 코드에서 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="978d04a9f4220b7460a6bb0a4cd9469028d7122d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uniq&lt;/code&gt; (an integer) is a unique value for this fun. As from Erlang/OTP R15, this integer is calculated from the compiled code for the entire module. Before Erlang/OTP R15, this integer was based on only the body of the fun.</source>
          <target state="translated">&lt;code&gt;Uniq&lt;/code&gt; (정수)는이 재미를위한 고유 한 값입니다. Erlang / OTP R15에서와 같이이 정수는 전체 모듈에 대한 컴파일 된 코드에서 계산됩니다. Erlang / OTP R15 이전에는이 ​​정수는 단지 재미의 몸만을 기준으로했습니다.</target>
        </trans-unit>
        <trans-unit id="b831d0ef7e2c0b7e197c7d455d68c63a0d8fb048" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unused&lt;/code&gt; is kept for backward compatibility.</source>
          <target state="translated">&lt;code&gt;Unused&lt;/code&gt; 이전 버전과의 호환성을 위해 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="77b2f412b2fb0912036dac462a9a4e4850f5bdf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Up&lt;/code&gt; - Scrolls a few &lt;code&gt;Events&lt;/code&gt; backwards.</source>
          <target state="translated">&lt;code&gt;Up&lt;/code&gt; -일부 &lt;code&gt;Events&lt;/code&gt; 뒤로 스크롤 합니다.</target>
        </trans-unit>
        <trans-unit id="850108996895fb2380a6485c752faf8c898a91ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserData&lt;/code&gt; is any term (passed on to the user when calling the &lt;code&gt;UserMod&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UserData&lt;/code&gt; 는 임의의 용어입니다 ( &lt;code&gt;UserMod&lt;/code&gt; 를 호출 할 때 사용자에게 전달됨) .</target>
        </trans-unit>
        <trans-unit id="f09467cf53584d767e4c5e69e967429a82ad2714" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserId&lt;/code&gt; is any term (used to uniquely identify the user).</source>
          <target state="translated">&lt;code&gt;UserId&lt;/code&gt; 는 사용자를 고유하게 식별하는 데 사용되는 모든 용어입니다.</target>
        </trans-unit>
        <trans-unit id="22808b8a3c6d7b84d5745416d67571f11e1a0442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserId&lt;/code&gt; is the identity of the &lt;strong&gt;manager user&lt;/strong&gt; responsible for this agent (term).</source>
          <target state="translated">&lt;code&gt;UserId&lt;/code&gt; 는 이 에이전트 (용어)를 담당 하는 &lt;strong&gt;관리자 사용자&lt;/strong&gt; 의 ID입니다 .</target>
        </trans-unit>
        <trans-unit id="b9d22184964dda04a4d08ccfc2be8b52eaedeee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserMod&lt;/code&gt; is the user callback module (atom).</source>
          <target state="translated">&lt;code&gt;UserMod&lt;/code&gt; 는 사용자 콜백 모듈 (아톰)입니다.</target>
        </trans-unit>
        <trans-unit id="2521b3d0d73fad2c771ef3561fd8380204b50113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;UserName&lt;/code&gt; 은 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="1ca9127303df3ff21e5a17edd24b25a7dc70cb28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSkipped = integer()&lt;/code&gt;, current number of user-skipped test cases.</source>
          <target state="translated">&lt;code&gt;UserSkipped = integer()&lt;/code&gt; , 현재 사용자가 건너 뛴 테스트 사례 수입니다.</target>
        </trans-unit>
        <trans-unit id="e51e2e7486a7b928ab3d073c838ff2142d45244b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserTerm = term()&lt;/code&gt;, any data specified by user, or &lt;code&gt;exit/1&lt;/code&gt; information.</source>
          <target state="translated">&lt;code&gt;UserTerm = term()&lt;/code&gt; , 사용자가 지정한 모든 데이터 또는 &lt;code&gt;exit/1&lt;/code&gt; 정보.</target>
        </trans-unit>
        <trans-unit id="b2c3b6cd47ef5163f721ec91a2f369ed108802f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Users&lt;/code&gt; is the number of anonymous users of the log, see the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;&lt;a href=&quot;#linkto&quot;&gt;linkto&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Users&lt;/code&gt; 참조 로그의 익명 사용자의 수를 &lt;code&gt;open/1&lt;/code&gt; 옵션 &lt;code&gt;&lt;a href=&quot;#linkto&quot;&gt;linkto&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ed4cd6a7c66d0b27c2526a87a5235887da7fa0c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;V&lt;/code&gt; is equal to &lt;code&gt;UU + XU + LU&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;UU + XU + LU&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13864afd22295498915949c8328005e8401306ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;V&lt;/code&gt; is equal to &lt;code&gt;X + L + B + U&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are pairwise disjoint (that is, have no elements in common).</source>
          <target state="translated">&lt;code&gt;V&lt;/code&gt; 는 &lt;code&gt;X + L + B + U&lt;/code&gt; 와 같습니다. 여기서 &lt;code&gt;X&lt;/code&gt; , &lt;code&gt;L&lt;/code&gt; , &lt;code&gt;B&lt;/code&gt; 및 &lt;code&gt;U&lt;/code&gt; 는 쌍으로 분리되어 있습니다 (즉, 공통 요소가 없음).</target>
        </trans-unit>
        <trans-unit id="d3b45dda6645d1ad036aa3e2e0d7b212c1824905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Val =&lt;/code&gt;&lt;code&gt;os:env_var_value()&lt;/code&gt;&lt;code&gt;| false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Val =&lt;/code&gt; &lt;code&gt;os:env_var_value()&lt;/code&gt; &lt;code&gt;| false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9962cc66b1d0ac5b6d7fe0959e6ad5260006baa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value = Calls&lt;/code&gt; which is the number of times the module, function, or clause has been called. In the case of line level analysis, &lt;code&gt;Calls&lt;/code&gt; is the number of times the line has been executed.</source>
          <target state="translated">&lt;code&gt;Value = Calls&lt;/code&gt; 모듈, 함수 또는 절이 호출 된 횟수입니다. 회선 레벨 분석의 경우 &lt;code&gt;Calls&lt;/code&gt; 는 회선이 실행 된 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="d6f5604e0a71deea504de90e82a4af07fa943256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value = {Cov,NotCov}&lt;/code&gt; where &lt;code&gt;Cov&lt;/code&gt; is the number of executable lines in the module, function, clause or line that have been executed at least once and &lt;code&gt;NotCov&lt;/code&gt; is the number of executable lines that have not been executed.</source>
          <target state="translated">&lt;code&gt;Value = {Cov,NotCov}&lt;/code&gt; 여기서 &lt;code&gt;Cov&lt;/code&gt; 는 모듈, 함수, 절 또는 한 번 이상 실행 된 행의 실행 가능한 행 수 이고 &lt;code&gt;NotCov&lt;/code&gt; 는 실행되지 않은 실행 가능한 행 수입니다.</target>
        </trans-unit>
        <trans-unit id="baee74f8aa36dfbcf94704bdd32a05e6ae0af5ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is a list of &lt;code&gt;{Domain, Addr}&lt;/code&gt; tuples or &lt;code&gt;Domain&lt;/code&gt; atoms.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; 는 &lt;code&gt;{Domain, Addr}&lt;/code&gt; 튜플 또는 &lt;code&gt;Domain&lt;/code&gt; 원자 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="b7b4a7e9e0cc8b0f9454280487bec8d861f8ef24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is a list of nodes that Mnesia is to try to connect to. &lt;code&gt;ReturnValue&lt;/code&gt; is those nodes in &lt;code&gt;Value&lt;/code&gt; that Mnesia is connected to.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; 은 Mnesia가 연결을 시도하는 노드 목록입니다. &lt;code&gt;ReturnValue&lt;/code&gt; 는 Mnesia가 연결된 &lt;code&gt;Value&lt;/code&gt; 의 노드입니다 .</target>
        </trans-unit>
        <trans-unit id="72846c6b4da6ad54d3d04e819f5408ac00adfc90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is a number. See the description in &lt;code&gt;&lt;a href=&quot;#configuration_parameters&quot;&gt;Section Configuration Parameters&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ReturnValue&lt;/code&gt; is the new value. Notice that this configuration parameter is not persistent. It is lost when Mnesia has stopped.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; 은 숫자입니다. &lt;code&gt;&lt;a href=&quot;#configuration_parameters&quot;&gt;Section Configuration Parameters&lt;/a&gt;&lt;/code&gt; 의 설명을 참조하십시오 . &lt;code&gt;ReturnValue&lt;/code&gt; 는 새로운 값입니다. 이 구성 매개 변수는 영구적이지 않습니다. Mnesia가 중지되면 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="1f22d08710d3e6e26eba94834579e768d366c20b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is the value for the variable.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; 은 변수의 값입니다.</target>
        </trans-unit>
        <trans-unit id="f62230dbd1849de5dc78c615fa8ef9a53f0ff6ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is the value of the local function and &lt;code&gt;NewBindings&lt;/code&gt; are the updated variable bindings. In this case, the function handler must itself evaluate all the function arguments and manage the bindings. To signal an error, the function handler calls &lt;code&gt;exit/1&lt;/code&gt; with a suitable exit value.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; 은 로컬 함수의 값이고 &lt;code&gt;NewBindings&lt;/code&gt; 는 업데이트 된 변수 바인딩입니다. 이 경우 함수 핸들러 자체가 모든 함수 인수를 평가하고 바인딩을 관리해야합니다. 오류를 알리기 위해 함수 핸들러 는 적절한 종료 값으로 &lt;code&gt;exit/1&lt;/code&gt; 을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="3f0a3eea786c80eae5b545d3520742c7013b454e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VarName&lt;/code&gt; is not allowed to contain an &lt;code&gt;$=&lt;/code&gt; character. Previous implementations used to just let the &lt;code&gt;$=&lt;/code&gt; character through which silently caused erroneous results. Current implementation will instead throw a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;VarName&lt;/code&gt; 은 &lt;code&gt;$=&lt;/code&gt; 문자 를 포함 할 수 없습니다 . 이전 구현은 &lt;code&gt;$=&lt;/code&gt; 문자를 통해 잘못된 결과를 자동으로 발생시키는 데 사용되었습니다 . 현재 구현은 대신 &lt;code&gt;badarg&lt;/code&gt; 예외 를 throw합니다 .</target>
        </trans-unit>
        <trans-unit id="0fc30d9332cb5cfec95e997882c52b8354b7ce68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Varbinds&lt;/code&gt; is a list of &lt;code&gt;Varbind&lt;/code&gt;, where each &lt;code&gt;Varbind&lt;/code&gt; is one of:</source>
          <target state="translated">&lt;code&gt;Varbinds&lt;/code&gt; 는 목록입니다 &lt;code&gt;Varbind&lt;/code&gt; 각각 &lt;code&gt;Varbind&lt;/code&gt; 중 하나입니다 :</target>
        </trans-unit>
        <trans-unit id="3e677cce83d72c68f0f465cb2703534bb5e400c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Variable&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Variable&lt;/code&gt; 는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="721a9626bd422fd41c8d0315e98d9fdd147f0bb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Variable&lt;/code&gt; is the name of an snmp counter that represents the error, e.g. &lt;code&gt;snmpInBadCommunityUses&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Variable&lt;/code&gt; 는 오류를 나타내는 snmp 카운터의 이름입니다 (예 : &lt;code&gt;snmpInBadCommunityUses&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="0d2e705985127250e1520f53cd10886301c014c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Verbosity&lt;/code&gt; selects the number of warnings:</source>
          <target state="translated">&lt;code&gt;Verbosity&lt;/code&gt; 는 경고 수를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="fa81f8262be8a5db9d978a99dd1429afc1b0f466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Version&lt;/code&gt; is a list of integers (but not a string) representing the version of the &lt;code&gt;malloc()&lt;/code&gt; implementation used.</source>
          <target state="translated">&lt;code&gt;Version&lt;/code&gt; 은 사용 된 &lt;code&gt;malloc()&lt;/code&gt; 구현 의 버전을 나타내는 정수 (문자열 아님) 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="5ede0ab7783eb1db9dd131beaf71db55e5b5ec5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Version&lt;/code&gt; is the version (v1 | v2 | v3).</source>
          <target state="translated">&lt;code&gt;Version&lt;/code&gt; 은 버전입니다 (v1 | v2 | v3).</target>
        </trans-unit>
        <trans-unit id="d8fdc13f8c9dec6bd7182368d2888e4d44f478cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vertical scroll&lt;/code&gt; - Use mouse wheel and up/down arrows to scroll little. Use page up/down and home/end buttons to scroll more.</source>
          <target state="translated">&lt;code&gt;Vertical scroll&lt;/code&gt; -마우스 휠과 위 / 아래 화살표를 사용하여 조금 스크롤합니다. 페이지 위로 / 아래로 및 홈 / 종료 버튼을 사용하여 더 많이 스크롤하십시오.</target>
        </trans-unit>
        <trans-unit id="043fc434cfc73c5942afd1a187be1469249995f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewIndex&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;ViewIndex&lt;/code&gt; 는 정수입니다.</target>
        </trans-unit>
        <trans-unit id="003ad343d524731748fa7e406e57075b3e7e6e88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewMask&lt;/code&gt; is either &lt;code&gt;null&lt;/code&gt; or a list of ones and zeros. Ones nominate that an exact match is used for this sub-identifier. Zeros are wild-cards which match any sub-identifier. If the mask is shorter than the sub-tree, the tail is regarded as all ones. &lt;code&gt;null&lt;/code&gt; is shorthand for a mask with all ones.</source>
          <target state="translated">&lt;code&gt;ViewMask&lt;/code&gt; 는 &lt;code&gt;null&lt;/code&gt; 이거나 1과 0의 목록입니다. 이 하위 식별자에 대해 정확히 일치하는 항목이 사용되도록 지정합니다. 0은 모든 하위 식별자와 일치하는 와일드 카드입니다. 마스크가 하위 트리보다 짧은 경우 꼬리는 모든 것으로 간주됩니다. 모든 마스크가있는 마스크는 &lt;code&gt;null&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a48f36a84da2ba75598f614390ad3b91426f84b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewStatus&lt;/code&gt; is either &lt;code&gt;included&lt;/code&gt; or &lt;code&gt;excluded&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ViewStatus&lt;/code&gt; 가 &lt;code&gt;included&lt;/code&gt; 되거나 &lt;code&gt;excluded&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3975efbe626e831a2efa0b407d3965e89ef55890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewSubtree&lt;/code&gt; is a list of integer.</source>
          <target state="translated">&lt;code&gt;ViewSubtree&lt;/code&gt; 는 정수 목록입니다.</target>
        </trans-unit>
        <trans-unit id="18aed3b4e846ed1f46169b8da859862cf66f91f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt; is either &lt;code&gt;'version-1'&lt;/code&gt;, &lt;code&gt;'version-2'&lt;/code&gt;, or &lt;code&gt;'version-3'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; 은 &lt;code&gt;'version-1'&lt;/code&gt; , &lt;code&gt;'version-2'&lt;/code&gt; 또는 &lt;code&gt;'version-3'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="21d2c2d7d6fb04eb51d34b2892169d49616585df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt; is the version of the unpacked release, as defined in its &lt;code&gt;.rel&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; 은 &lt;code&gt;.rel&lt;/code&gt; 파일에 정의 된 압축 해제 버전의 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="cf1e2347ff1a47b8054894bc5ee840c48e283af8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt; translates into &lt;code&gt;MPModel&lt;/code&gt; and &lt;code&gt;SecModel&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; 은 다음과 같이 &lt;code&gt;MPModel&lt;/code&gt; 과 &lt;code&gt;SecModel&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="539a0b79730e7fe2753fa19b8c1f70811d5cdce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt;, a string, is the current version of the application, as defined in the &lt;code&gt;.app&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; 문자열 인 Vsn 은 &lt;code&gt;.app&lt;/code&gt; 파일에 정의 된 응용 프로그램의 현재 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="1d74b48eb4dafe5b1a84d39c7571b47db235583a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Warnings&lt;/code&gt; is the list of error descriptors of all &lt;code&gt;warning_marker&lt;/code&gt; nodes that occur in &lt;code&gt;Forms&lt;/code&gt;. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Warnings&lt;/code&gt; 는 &lt;code&gt;Forms&lt;/code&gt; 에서 발생하는 모든 &lt;code&gt;warning_marker&lt;/code&gt; 노드 의 오류 설명자 목록입니다 . 리스팅 순서는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2b12237380545e4bf33fbb504a64fcae9ffd1e9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WindowBits&lt;/code&gt; is the base two logarithm of the maximum window size (the size of the history buffer). It is to be in the range 8 through 15. Default to 15 if &lt;code&gt;&lt;a href=&quot;#inflateInit-1&quot;&gt;inflateInit/1&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;WindowBits&lt;/code&gt; 는 최대 창 크기 (히스토리 버퍼 크기)의 기본 2 로그입니다. &lt;code&gt;&lt;a href=&quot;#inflateInit-1&quot;&gt;inflateInit/1&lt;/a&gt;&lt;/code&gt; 을 사용하는 경우 기본값은 15 입니다.</target>
        </trans-unit>
        <trans-unit id="67643a3996b12f24a2be5b13581df35894f74afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Worst&lt;/code&gt; is the pid and number of allocated bytes of the largest Erlang process on the node. If &lt;code&gt;memsup&lt;/code&gt; should not collect process data, that is if the configuration parameter &lt;code&gt;memsup_system_only&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Worst&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Worst&lt;/code&gt; 노드에서 가장 큰 Erlang 프로세스의 pid 및 할당 된 바이트 수는 최악 입니다. 경우 &lt;code&gt;memsup&lt;/code&gt; 는 구성 매개 변수를 경우하지 수집 프로세스 데이터,해야 &lt;code&gt;memsup_system_only&lt;/code&gt; 로 설정 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;Worst&lt;/code&gt; 되어 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6b531ca937cb5f2bc8d867b283a607daa9fa7067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WriteView&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;WriteView&lt;/code&gt; 는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="71485d56546b0beefd97ba59c6341b838a69db4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;XU&lt;/code&gt; is equal to &lt;code&gt;range XC&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XU&lt;/code&gt; 는 &lt;code&gt;range XC&lt;/code&gt; 같습니다 .</target>
        </trans-unit>
        <trans-unit id="b55b14897dffa6289441d6eec18178caacd827ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[Address = string()]&lt;/code&gt; The contents of &lt;code&gt;Address&lt;/code&gt; is server dependent.</source>
          <target state="translated">&lt;code&gt;[Address = string()]&lt;/code&gt; The contents of &lt;code&gt;Address&lt;/code&gt; is server dependent.</target>
        </trans-unit>
        <trans-unit id="58843a980ea15f66b4f7ac4eb722358bcaea97c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[X || X &amp;lt;- T, X &amp;gt;= Pivot]&lt;/code&gt; is the list of all elements in &lt;code&gt;T&lt;/code&gt; that are greater than or equal to &lt;code&gt;Pivot&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[X || X &amp;lt;- T, X &amp;gt;= Pivot]&lt;/code&gt; is the list of all elements in &lt;code&gt;T&lt;/code&gt; that are greater than or equal to &lt;code&gt;Pivot&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="dea3522b3a4df1d03b0280b5a307ea6a99e0fa56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; - An empty list indicates that the erlang scanner should be used.</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; - An empty list indicates that the erlang scanner should be used.</target>
        </trans-unit>
        <trans-unit id="f1a5dbac4542b98d3918ab1701aa9b17885cf7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; - Encodes the messages to the standard distribution format. It is rather verbose but encoding and decoding is blinding fast.</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; - Encodes the messages to the standard distribution format. It is rather verbose but encoding and decoding is blinding fast.</target>
        </trans-unit>
        <trans-unit id="6c891c0bdf07c0c81085ac2c512cee221239be01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; - Translated into a list of the own node: &lt;code&gt;[node()]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; - Translated into a list of the own node: &lt;code&gt;[node()]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7aa73ff63e63b1712133831888e0ae7bf769ff2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; is a list, thus</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; is a list, thus</target>
        </trans-unit>
        <trans-unit id="aa2de75acee60f52e83af54911ecab2fefde928b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[a|[b|[c|[]]]]&lt;/code&gt; is a list, or in short &lt;code&gt;[a,b,c]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[a|[b|[c|[]]]]&lt;/code&gt; is a list, or in short &lt;code&gt;[a,b,c]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="750d5e9c1dd1fee3cefa4cddb1d680d4b85ef850" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[b|[c|[]]]&lt;/code&gt; is a list, thus</source>
          <target state="translated">&lt;code&gt;[b|[c|[]]]&lt;/code&gt; is a list, thus</target>
        </trans-unit>
        <trans-unit id="0202ab521e4c16fbff04b0cfab46068d12850e94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[compressed]&lt;/code&gt; - Encodes the messages to a compressed form of the standard distribution format. It is less verbose, but the encoding and decoding will on the other hand be slower.</source>
          <target state="translated">&lt;code&gt;[compressed]&lt;/code&gt; - Encodes the messages to a compressed form of the standard distribution format. It is less verbose, but the encoding and decoding will on the other hand be slower.</target>
        </trans-unit>
        <trans-unit id="63387f3e32b6c484f5f5e51cb1368ac62f111ef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[c|[]]&lt;/code&gt; is a list, thus</source>
          <target state="translated">&lt;code&gt;[c|[]]&lt;/code&gt; is a list, thus</target>
        </trans-unit>
        <trans-unit id="d1ac90eb55ddae0ac46e10c6c8ccb4a49a75c07b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[erlang, mnesia, otp]&lt;/code&gt; is a list of three direct references to three different &lt;code&gt;projects&lt;/code&gt; records.</source>
          <target state="translated">&lt;code&gt;[erlang, mnesia, otp]&lt;/code&gt; is a list of three direct references to three different &lt;code&gt;projects&lt;/code&gt; records.</target>
        </trans-unit>
        <trans-unit id="70194f0f6e78d3b9d059251ec3e1ee77938ce1d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[integer()]&lt;/code&gt; - A list containing the size (the number of bits) of each level. Example: &lt;code&gt;[3,8,5,8]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[integer()]&lt;/code&gt; - A list containing the size (the number of bits) of each level. Example: &lt;code&gt;[3,8,5,8]&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="0c182d51ea654aead7a970e38ac9d8f31da1f5c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[megaco_compressed]&lt;/code&gt; - Encodes the messages to the standard distribution format after an internal transformation. It is less verbose, but the total time of the encoding and decoding will on the other hand be somewhat slower (see the &lt;code&gt;&lt;a href=&quot;megaco_performance&quot;&gt;performance&lt;/a&gt;&lt;/code&gt; chapter for more info).</source>
          <target state="translated">&lt;code&gt;[megaco_compressed]&lt;/code&gt; - Encodes the messages to the standard distribution format after an internal transformation. It is less verbose, but the total time of the encoding and decoding will on the other hand be somewhat slower (see the &lt;code&gt;&lt;a href=&quot;megaco_performance&quot;&gt;performance&lt;/a&gt;&lt;/code&gt; chapter for more info).</target>
        </trans-unit>
        <trans-unit id="43866a70271e9e7412e1575a585b4c57bb5da68c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[native]&lt;/code&gt; - skips the transformation phase, i.e. the decoded message(s) will not be transformed into our internal form.</source>
          <target state="translated">&lt;code&gt;[native]&lt;/code&gt; - skips the transformation phase, i.e. the decoded message(s) will not be transformed into our internal form.</target>
        </trans-unit>
        <trans-unit id="1b77d9eaa24a5dc309ea50d131abb91effdda6a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[{flex, port()}]&lt;/code&gt; - Use the flex scanner when decoding (not optimized for SMP). See &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;[{flex, port()}]&lt;/code&gt; - Use the flex scanner when decoding (not optimized for SMP). See &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; for more info.</target>
        </trans-unit>
        <trans-unit id="3499321580179f3fe8caf62b26b14282cb7f2190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[{flex, ports()}]&lt;/code&gt; - Use the flex scanner when decoding (optimized for SMP). See &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;[{flex, ports()}]&lt;/code&gt; - Use the flex scanner when decoding (optimized for SMP). See &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; for more info.</target>
        </trans-unit>
        <trans-unit id="09facbac0459a65b1017b50c767631ac01b79cad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[{megaco_compressed, Module}]&lt;/code&gt; - Works in the same way as the megaco_compressed config parameter, only here the user provide their own compress module. This module must implement the &lt;code&gt;&lt;a href=&quot;megaco_edist_compress&quot;&gt;megaco_edist_compress&lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">&lt;code&gt;[{megaco_compressed, Module}]&lt;/code&gt; - Works in the same way as the megaco_compressed config parameter, only here the user provide their own compress module. This module must implement the &lt;code&gt;&lt;a href=&quot;megaco_edist_compress&quot;&gt;megaco_edist_compress&lt;/a&gt;&lt;/code&gt; behaviour.</target>
        </trans-unit>
        <trans-unit id="d3e70c82e02eafb1e915c5f2e6c5ec86bf5015a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_@@bar&lt;/code&gt; is a glob variable, and &lt;code&gt;_@_@bar&lt;/code&gt; is a lifted glob variable</source>
          <target state="translated">&lt;code&gt;_@@bar&lt;/code&gt; is a glob variable, and &lt;code&gt;_@_@bar&lt;/code&gt; is a lifted glob variable</target>
        </trans-unit>
        <trans-unit id="41a3c6bccdc4eba63910c97a11f5b7cecefb8721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accept/1&lt;/code&gt; should spawn a process that accepts connections. This process should preferably execute on &lt;code&gt;max&lt;/code&gt; priority. The process identifier of this process should be returned.</source>
          <target state="translated">&lt;code&gt;accept/1&lt;/code&gt; 은 연결을 수락하는 프로세스를 생성해야합니다. 이 프로세스는 &lt;code&gt;max&lt;/code&gt; 우선 순위로 실행하는 것이 좋습니다 . 이 프로세스의 프로세스 식별자가 반환되어야합니다.</target>
        </trans-unit>
        <trans-unit id="b6840e0824da7ebe7963f46402afd300355102b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accept_connection/5&lt;/code&gt; should spawn a process that will perform the Erlang distribution handshake for the connection. If the handshake successfully completes it should continue to function as a connection supervisor. This process should preferably execute on &lt;code&gt;max&lt;/code&gt; priority.</source>
          <target state="translated">&lt;code&gt;accept_connection/5&lt;/code&gt; 는 연결에 대한 Erlang 배포 핸드 셰이크를 수행하는 프로세스를 생성해야합니다. 핸드 셰이크가 성공적으로 완료되면 연결 관리자로 계속 작동해야합니다. 이 프로세스는 &lt;code&gt;max&lt;/code&gt; 우선 순위로 실행하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="29bcee8a7eb3171caee510874100c571edbbea57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;access_mode&lt;/code&gt;. Returns the access mode of the table. The access mode can be &lt;code&gt;read_only&lt;/code&gt; or &lt;code&gt;read_write&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;access_mode&lt;/code&gt; . 테이블의 액세스 모드를 반환합니다. 액세스 모드는 &lt;code&gt;read_only&lt;/code&gt; 또는 &lt;code&gt;read_write&lt;/code&gt; 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c020fa4d0f91915fcdac48754da555e007b99d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;access_module&lt;/code&gt;. Returns the name of module that is configured to be the activity access callback module.</source>
          <target state="translated">&lt;code&gt;access_module&lt;/code&gt; . 활동 액세스 콜백 모듈로 구성된 모듈의 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="aa5ffb64ce2d689521884392fc8b8b73bc8d6d79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;action&lt;/code&gt; - Specifies the behaviour when a non-empty file is found: Keep its content or clear it out.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; - 비어 있지 않은 파일이 발견 될 때의 동작을 지정합니다. 내용을 유지하거나 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="64cadd3e914fb604781d58492bacaec15601919e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;action&lt;/code&gt; - Specifies the behaviour when a non-empty, already existing, table: Keep its content or clear it out.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; - 비어 있지 않은 기존 테이블이있을 때의 동작을 지정합니다. 내용을 유지하거나 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="30e97d5d522210ddfce2ee69bd50abe4408333e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; - The count of all actively running child processes managed by this supervisor. For a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisors, no check is done to ensure that each child process is still alive, although the result provided here is likely to be very accurate unless the supervisor is heavily overloaded.</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; - 이 관리자가 관리하는 모든 활성 실행 하위 프로세스의 수입니다. A에 대한 &lt;code&gt;simple_one_for_one&lt;/code&gt; 의 결과는 관리자가 크게 오버로드하지 않는 매우 정확 될 가능성이 여기에 제공된 있지만, 감독자, 어떤 검사가 각 자식 프로세스가 아직 살아 있는지 확인하기 위해 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41c87e7c264e7abea50c1af32323b798c2bcd229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt;. Some delete operations require that all active records are removed.</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; . 일부 삭제 작업에서는 모든 활성 레코드를 제거해야합니다.</target>
        </trans-unit>
        <trans-unit id="3dcbcbbb783a768c2123748bed02001e19267544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2)&lt;/code&gt; is equivalent to &lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2)&lt;/code&gt; 는 &lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;[])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6735b21a34f8a3b318add28bc939db34c74e7c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt; is equivalent to &lt;code&gt;add_edge(G,&amp;nbsp;E,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is a created edge. The created edge is represented by term &lt;code&gt;['$e'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer &amp;gt;= 0.</source>
          <target state="translated">&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt; 은 &lt;code&gt;add_edge(G,&amp;nbsp;E,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt; 와 동일합니다. 여기서 &lt;code&gt;E&lt;/code&gt; 는 생성 된 모서리입니다. 생성 된 모서리는 용어 &lt;code&gt;['$e'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt; (여기서 &lt;code&gt;N&lt;/code&gt; 은 0보다 큰 정수임)</target>
        </trans-unit>
        <trans-unit id="eded226af24e6ef08af042767a734cf0549eb6d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_edge/5&lt;/code&gt; creates (or modifies) edge &lt;code&gt;E&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;, using &lt;code&gt;Label&lt;/code&gt; as the (new) &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; of the edge. The edge is &lt;code&gt;&lt;a href=&quot;#emanate&quot;&gt;emanating&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#incident&quot;&gt;incident&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;V2&lt;/code&gt;. Returns &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_edge/5&lt;/code&gt; 는 &lt;code&gt;Label&lt;/code&gt; 을 가장자리 의 (신규) &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; 로 사용하여 digraph &lt;code&gt;G&lt;/code&gt; 의 가장자리 &lt;code&gt;E&lt;/code&gt; 를 생성 (또는 수정)합니다 . 가장자리입니다 &lt;code&gt;&lt;a href=&quot;#emanate&quot;&gt;emanating&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;V1&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;#incident&quot;&gt;incident&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;V2&lt;/code&gt; . &lt;code&gt;E&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9f8f0e4ece533d195d622a71e998720d95b7462c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_group_member/3, add_group_member/4&lt;/code&gt;, and &lt;code&gt;add_group_member/5&lt;/code&gt; each adds a user to a group. If the group does not exist, it is created and the user is added to the group. Upon successful operation, this function returns &lt;code&gt;true&lt;/code&gt;. When &lt;code&gt;add_group_members/3&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;add_group_member/3, add_group_member/4&lt;/code&gt; 및 &lt;code&gt;add_group_member/5&lt;/code&gt; 는 각각 사용자를 그룹에 추가합니다. 그룹이 존재하지 않으면 그룹이 작성되고 사용자가 그룹에 추가됩니다. 성공적으로 작동하면이 함수는 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 때 &lt;code&gt;add_group_members/3&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="308570fc650deac37e209d4ae7a7f26b09b0e8ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_release/3&lt;/code&gt; assumes that all subdirectories of the library directory returned by &lt;code&gt;code:lib_dir()&lt;/code&gt; contain applications; the effect is that of reading all applications' BEAM files.</source>
          <target state="translated">&lt;code&gt;add_release/3&lt;/code&gt; 는 &lt;code&gt;code:lib_dir()&lt;/code&gt; 의해 리턴 된 라이브러리 디렉토리의 모든 서브 디렉토리에 응용 프로그램이 있다고 가정합니다 . 그 결과 모든 응용 프로그램의 BEAM 파일을 읽는 효과가 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdd6583035bdd4a5eac07667a90ffcfda05e87c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_user/2, add_user/5&lt;/code&gt;, and &lt;code&gt;add_user/6&lt;/code&gt; each adds a user to the user database. If the operation is successful, this function returns &lt;code&gt;true&lt;/code&gt;. If an error occurs, &lt;code&gt;{error,Reason}&lt;/code&gt; is returned. When &lt;code&gt;add_user/2&lt;/code&gt; is called, options &lt;code&gt;Password&lt;/code&gt;, &lt;code&gt;UserData&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt;, and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;add_user/2, add_user/5&lt;/code&gt; 및 &lt;code&gt;add_user/6&lt;/code&gt; 은 각각 사용자를 사용자 데이터베이스에 추가합니다. 작업이 성공하면이 함수는 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 오류가 발생하면 &lt;code&gt;{error,Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;add_user/2&lt;/code&gt; 라고, 옵션 &lt;code&gt;Password&lt;/code&gt; , &lt;code&gt;UserData&lt;/code&gt; 를 , &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="d2ec99872166f08f95ed1e017a3afbe33be8d472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_vertex(G,&amp;nbsp;V)&lt;/code&gt; is equivalent to &lt;code&gt;add_vertex(G,&amp;nbsp;V,&amp;nbsp;[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_vertex(G,&amp;nbsp;V)&lt;/code&gt; 는 &lt;code&gt;add_vertex(G,&amp;nbsp;V,&amp;nbsp;[])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dfe09666e83bbac0e7cc8dda7e715e28c12cf23f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_vertex/1&lt;/code&gt; creates a vertex using the empty list as label, and returns the created vertex. The created vertex is represented by term &lt;code&gt;['$v'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer &amp;gt;= 0.</source>
          <target state="translated">&lt;code&gt;add_vertex/1&lt;/code&gt; 은 빈 목록을 레이블로 사용하여 정점을 작성하고 작성된 정점을 리턴합니다. 생성 된 정점은 용어 &lt;code&gt;['$v'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt; (여기서 &lt;code&gt;N&lt;/code&gt; 은 0보다 큰 정수임)</target>
        </trans-unit>
        <trans-unit id="c3656692fbaf0860268c5e0ce6f05c82ca2871b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_vertex/3&lt;/code&gt; creates (or modifies) vertex &lt;code&gt;V&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;, using &lt;code&gt;Label&lt;/code&gt; as the (new) &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; of the vertex. Returns &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_vertex/3&lt;/code&gt; 는 &lt;code&gt;Label&lt;/code&gt; 을 정점 의 (새로운) &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; 로 사용하여 digraph &lt;code&gt;G&lt;/code&gt; 의 정점 &lt;code&gt;V&lt;/code&gt; 를 생성 (또는 수정)합니다 . &lt;code&gt;V&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="80632824b7883f4a1c74ee9b61dead483f3d0ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; is the 32-bit IP address of &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; 은 &lt;code&gt;host&lt;/code&gt; 의 32 비트 IP 주소입니다 .</target>
        </trans-unit>
        <trans-unit id="9b87e1985b177cc9187727ee7c46851207be8ebc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; is the 32-bit IP address of the local host.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; 은 로컬 호스트의 32 비트 IP 주소입니다.</target>
        </trans-unit>
        <trans-unit id="0c836ff71ba1f47fd39e9623dfc614ddc05108b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; is the 32-bit IP address of the remote host.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; 은 원격 호스트의 32 비트 IP 주소입니다.</target>
        </trans-unit>
        <trans-unit id="699d2abaabfbb891035645ffeaa860104a2bae0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;adjust&lt;/code&gt; is the adjustment.</source>
          <target state="translated">&lt;code&gt;adjust&lt;/code&gt; 는 조정입니다.</target>
        </trans-unit>
        <trans-unit id="34a1320a67660e060d22139d7d8a87305e9f7a33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;advise/4&lt;/code&gt; can be used to announce an intention to access file data in a specific pattern in the future, thus allowing the operating system to perform appropriate optimizations.</source>
          <target state="translated">&lt;code&gt;advise/4&lt;/code&gt; 는 향후 특정 패턴으로 파일 데이터에 액세스하려는 의도를 알리는 데 사용될 수 있으므로 운영 체제가 적절한 최적화를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7afecc1566f50ee3ca0ab54ffb403b65ddf62d6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;af&lt;/code&gt; (a fit)</source>
          <target state="translated">&lt;code&gt;af&lt;/code&gt; (적합)</target>
        </trans-unit>
        <trans-unit id="c3e122732fccd7058e1f787f0962d549d6b90ea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ageffcaobf&lt;/code&gt; (age order first fit carrier address order best fit)</source>
          <target state="translated">&lt;code&gt;ageffcaobf&lt;/code&gt; (연령 순서 첫 번째 적합 운송 업체 주소 순서 최적)</target>
        </trans-unit>
        <trans-unit id="cd0cb8c2759f83ac86614295146be45f26220600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ageffcaoff&lt;/code&gt; (age order first fit carrier address order first fit)</source>
          <target state="translated">&lt;code&gt;ageffcaoff&lt;/code&gt; (연령 주문 우선 맞춤 운송 업체 주소 주문 우선 맞춤)</target>
        </trans-unit>
        <trans-unit id="b6ab35af9ae11e26a3b715cd4c3eee87ea061bb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ageffcbf&lt;/code&gt; (age order first fit carrier best fit)</source>
          <target state="translated">&lt;code&gt;ageffcbf&lt;/code&gt; (나이 오더 퍼스트 핏 캐리어에 가장 적합)</target>
        </trans-unit>
        <trans-unit id="23de4c452f541d98707bd07e4cfbb7d5d4d16c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;agent.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#agent_information&quot;&gt;Agent Information&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;agent.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#agent_information&quot;&gt;Agent Information&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="8ff47ce1780c480f2faaa98dfc2c6486b2589cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alarm_handler(3)&lt;/code&gt;, &lt;code&gt;os_mon(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;alarm_handler(3)&lt;/code&gt; , &lt;code&gt;os_mon(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a84641b8fd6385c030bd6d3537dbcab356b1105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alive&lt;/code&gt; is the alivename of the node.</source>
          <target state="translated">&lt;code&gt;alive&lt;/code&gt; 는 노드의 활성 이름입니다.</target>
        </trans-unit>
        <trans-unit id="f79edcb1662e15c5611ff0fbb2208fbc936b2d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alive&lt;/code&gt; is the alivename of the remote node.</source>
          <target state="translated">&lt;code&gt;alive&lt;/code&gt; 는 원격 노드의 활성 이름입니다.</target>
        </trans-unit>
        <trans-unit id="093965dc89e02aa9accca4f967a1fef9354be4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alive&lt;/code&gt; is the name of the node to unregister, that is, the first component of the node name, without &lt;code&gt;@hostname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;alive&lt;/code&gt; 는 등록을 취소 할 노드의 이름, 즉 &lt;code&gt;@hostname&lt;/code&gt; 없이 노드 이름의 첫 번째 구성 요소입니다 .</target>
        </trans-unit>
        <trans-unit id="b8a0984d3f52dfd8e9a64abbcc05a017870ce387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all (0)&lt;/code&gt; - Starts a new &lt;code&gt;Viewer&lt;/code&gt; with the &lt;code&gt;Collector Filter&lt;/code&gt; as active filter. It will cause all events in the collector to be viewed.</source>
          <target state="translated">&lt;code&gt;all (0)&lt;/code&gt; - &lt;code&gt;Collector Filter&lt;/code&gt; 를 활성 필터로 사용하여 새 &lt;code&gt;Viewer&lt;/code&gt; 를 시작합니다 . 수집기의 모든 이벤트가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9d2afce67f341c097c5a287163fbb70f92d80119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt; - &lt;code&gt;erlang:nodes()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; - &lt;code&gt;erlang:nodes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88d72784a763c7cf3461bef60775be585c6a51d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt; has the same arguments as &lt;code&gt;any&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; 같은 인수가 &lt;code&gt;any&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="0d3b15afd2f020d868a11605a2aace698272fc93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt;. Returns a list of all local system information. Each element is a &lt;code&gt;{InfoKey, InfoVal}&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; . 모든 로컬 시스템 정보 목록을 리턴합니다. 각 요소는 &lt;code&gt;{InfoKey, InfoVal}&lt;/code&gt; 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="e5120726b82e227b3d64104d915e704131f8333b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt;. Returns a list of all local table information. Each element is a &lt;code&gt;{InfoKey, ItemVal}&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; . 모든 로컬 테이블 정보 목록을 리턴합니다. 각 요소는 &lt;code&gt;{InfoKey, ItemVal}&lt;/code&gt; 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="97512066008b8088626fc161f01045faad633407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allocate/3&lt;/code&gt; can be used to preallocate space for a file.</source>
          <target state="translated">&lt;code&gt;allocate/3&lt;/code&gt; 을 사용하여 파일 공간을 미리 할당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41666bf49b92f45df37f91724cb8f4bdd3d83fd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allocated&lt;/code&gt; and &lt;code&gt;freed&lt;/code&gt; are initialized to contain information about the fix-allocator used to allocate &lt;code&gt;ETERM&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;allocated&lt;/code&gt; &lt;code&gt;ETERM&lt;/code&gt; 구성 요소 를 할당하는 데 사용 된 수정 할당 자에 대한 정보를 포함하도록 할당 및 &lt;code&gt;freed&lt;/code&gt; 가 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="81e1b5bb6f005718b97cdcef18327ce1a6e6497b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allocated&lt;/code&gt; is the number of blocks currently allocated to &lt;code&gt;ETERM&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;allocated&lt;/code&gt; 은 현재 &lt;code&gt;ETERM&lt;/code&gt; 객체에 할당 된 블록 수입니다 .</target>
        </trans-unit>
        <trans-unit id="12a3f3a12999ecd68f3a41d6438ae747b45cc2a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;already_exists&lt;/code&gt;. Schema option to be activated is already on.</source>
          <target state="translated">&lt;code&gt;already_exists&lt;/code&gt; . 활성화 할 스키마 옵션이 이미 켜져 있습니다.</target>
        </trans-unit>
        <trans-unit id="e09c32739412caf3bb45902d7c7c54f88a8121e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;any&lt;/code&gt; takes a predicate &lt;code&gt;P&lt;/code&gt; of one argument and a list of terms:</source>
          <target state="translated">&lt;code&gt;any&lt;/code&gt; 는 하나의 인수에 대한 술어 &lt;code&gt;P&lt;/code&gt; 와 용어 목록을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c04a1d0a8b42c3f884cc4061d4be2169366adfa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aobf&lt;/code&gt; (address order best fit)</source>
          <target state="translated">&lt;code&gt;aobf&lt;/code&gt; (주소 순서에 가장 적합)</target>
        </trans-unit>
        <trans-unit id="8e3886f8937bc796389366681b1568f292057745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aoff&lt;/code&gt; (address order first fit)</source>
          <target state="translated">&lt;code&gt;aoff&lt;/code&gt; (주소 순서가 첫 번째로 맞음)</target>
        </trans-unit>
        <trans-unit id="1c1a2a991912818f34517a6d59e8ac8bf23861a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aoffcaobf&lt;/code&gt; (address order first fit carrier address order best fit)</source>
          <target state="translated">&lt;code&gt;aoffcaobf&lt;/code&gt; (주소 순서 첫 번째 적합 운송 업체 주소 순서 최적)</target>
        </trans-unit>
        <trans-unit id="d36eb867ec84d005b2b36939491b867b1a074b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aoffcbf&lt;/code&gt; (address order first fit carrier best fit)</source>
          <target state="translated">&lt;code&gt;aoffcbf&lt;/code&gt; (주소 순서 첫 번째 맞춤 캐리어 최적 맞춤)</target>
        </trans-unit>
        <trans-unit id="2346e55f01b0a576c1d4c1c0db448da3cc8b60e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app(4)&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;app(4)&lt;/code&gt; 커널의 app (4) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="33877b32d205ddb1b7629894b405b3964320c267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app(4)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;app(4)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff621ce736ff1d127c1f08d97a3f6143ea2fd097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app(4)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;erl(1)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;app(4)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;erl(1)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff8e1c38283104e4739a04e604ae9ffe2a9d5475" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append(QH1,&amp;nbsp;QH2)&lt;/code&gt; is equivalent to &lt;code&gt;append([QH1,&amp;nbsp;QH2])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;append(QH1,&amp;nbsp;QH2)&lt;/code&gt; 는 &lt;code&gt;append([QH1,&amp;nbsp;QH2])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99af6c4c16c5603f3b5358b847dfe0ee6145c1bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;application(3)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee035bbbbb046cffe841b862f3e718ba886d5d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application(3)&lt;/code&gt;, &lt;code&gt;dets(3)&lt;/code&gt;, &lt;code&gt;disk_log(3)&lt;/code&gt;, &lt;code&gt;ets(3)&lt;/code&gt;, &lt;code&gt;mnesia_registry(3)&lt;/code&gt;, &lt;code&gt;qlc(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;application(3)&lt;/code&gt; , &lt;code&gt;dets(3)&lt;/code&gt; , &lt;code&gt;disk_log(3)&lt;/code&gt; , &lt;code&gt;ets(3)&lt;/code&gt; , &lt;code&gt;mnesia_registry(3)&lt;/code&gt; , &lt;code&gt;qlc(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5e0a257fc769705d9cc09d4843a08142ab8f99d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application:start(Application)&lt;/code&gt; is the same as calling &lt;code&gt;application:start(Application, temporary)&lt;/code&gt;. The type can also be &lt;code&gt;permanent&lt;/code&gt; or &lt;code&gt;transient&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;application:start(Application)&lt;/code&gt; 은 &lt;code&gt;application:start(Application, temporary)&lt;/code&gt; 를 호출하는 것과 같습니다 . 유형은 &lt;code&gt;permanent&lt;/code&gt; 이거나 &lt;code&gt;transient&lt;/code&gt; 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b67edaacaf648cc6cc9a6d897e31e09389b2df1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application:start(mnesia)&lt;/code&gt; can also be used.</source>
          <target state="translated">&lt;code&gt;application:start(mnesia)&lt;/code&gt; 도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29d1b7a8c27256b457dce1b3bad8e849c11d21cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application:stop(mnesia)&lt;/code&gt; can also be used.</source>
          <target state="translated">&lt;code&gt;application:stop(mnesia)&lt;/code&gt; 도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10da2c0c84c016a1b85a0996d30c8e11ab967b5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application&lt;/code&gt;, an empty list if the module does not belong to any application, otherwise a list of the application name;</source>
          <target state="translated">&lt;code&gt;application&lt;/code&gt; , 모듈이 응용 프로그램에 속하지 않으면 비어있는 목록, 그렇지 않으면 응용 프로그램 이름 목록.</target>
        </trans-unit>
        <trans-unit id="fe02e9a6876c897082028610a15994bce0a292ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applications&lt;/code&gt; - All applications that must be started before this application is started. &lt;code&gt;systools&lt;/code&gt; uses this list to generate correct boot scripts. Defaults to &lt;code&gt;[]&lt;/code&gt;. Notice that all applications have dependencies to at least Kernel and STDLIB.</source>
          <target state="translated">&lt;code&gt;applications&lt;/code&gt; -이 응용 프로그램을 시작하기 전에 시작해야하는 모든 응용 프로그램. &lt;code&gt;systools&lt;/code&gt; 는이 목록을 사용하여 올바른 부팅 스크립트를 생성합니다. 기본값은 &lt;code&gt;[]&lt;/code&gt; 입니다. 모든 응용 프로그램에는 최소한 커널과 STDLIB에 대한 종속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="76b082504e28452bfce3331d887c3a70c2f2f89c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply(M, F, A)&lt;/code&gt; must return a list of nodes.</source>
          <target state="translated">&lt;code&gt;apply(M, F, A)&lt;/code&gt; 는 노드 목록을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="8cd751c794ca79775ae24d2dfc9d496c92f7760b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply/3&lt;/code&gt; must look up the code for the function to execute in a hash table. It is therefore always slower than a direct call or a fun call.</source>
          <target state="translated">&lt;code&gt;apply/3&lt;/code&gt; 는 함수가 해시 테이블에서 실행할 코드를 찾아야합니다. 따라서 직통 전화 나 재미있는 전화보다 항상 느립니다.</target>
        </trans-unit>
        <trans-unit id="ae6d24752d6fc9146e5c784eb3fee2f7efa454a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL</source>
          <target state="translated">&lt;code&gt;appup(4)&lt;/code&gt; SASL의 appup (4) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="452b708022856c63df251c357fb144407fbbbcf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argbuf&lt;/code&gt; is a pointer to a buffer with an encoded Erlang list, without a version magic number, containing the arguments to be passed to the function.</source>
          <target state="translated">&lt;code&gt;argbuf&lt;/code&gt; 는 버전 매직 번호가없는 인코딩 된 Erlang 목록이있는 버퍼에 대한 포인터이며 함수에 전달할 인수를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="69e4b05d2799b12c1213f74c3f1fee1d1dadd624" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argbuflen&lt;/code&gt; is the length of the buffer containing the encoded Erlang list.</source>
          <target state="translated">&lt;code&gt;argbuflen&lt;/code&gt; 은 인코딩 된 Erlang 목록을 포함하는 버퍼의 길이입니다.</target>
        </trans-unit>
        <trans-unit id="c88058fb856fee3f23186a49ad08ec45b32134a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; is a list of the arguments used by the control sequence, or an empty list if the control sequence does not take any arguments.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; 는 제어 순서에 사용되는 인수 목록이거나 제어 순서에 인수가없는 경우 비어있는 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ae238075082754126f87767b4a55847888febf8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; is an Erlang list, containing the arguments to be passed to the function.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; 는 함수에 전달할 인수를 포함하는 Erlang 목록입니다.</target>
        </trans-unit>
        <trans-unit id="c84b082d7993b958953e81c49576799ca90e5562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arity&lt;/code&gt;. Returns the arity of records in the table as specified in the schema.</source>
          <target state="translated">&lt;code&gt;arity&lt;/code&gt; . 스키마에 지정된대로 테이블에서 레코드의 arity를 ​​리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ad562cc01c455bf87c89d7be370aa5f77e08a499" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; is an array of ETERM* objects.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 는 ETERM * 객체의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="ef69e9b959914df8490c32f8a040f98d0e9915b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; is an array of Erlang terms.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 는 Erlang 용어의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="801e399b2373cb64af1a6eb34f634da9351c826b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrsize&lt;/code&gt; is the number of elements in &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arrsize&lt;/code&gt; 는 &lt;code&gt;array&lt;/code&gt; 의 요소 수입니다 .</target>
        </trans-unit>
        <trans-unit id="7dfaa3306dd3215bd527ea3b5c3ae28a064d66a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;asn1&lt;/code&gt; - ASN.1 BER</source>
          <target state="translated">&lt;code&gt;asn1&lt;/code&gt; -ASN.1 BER</target>
        </trans-unit>
        <trans-unit id="19ce5393e1baf8f5daf548c839d26e7fcbf42a55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertEqual&lt;/code&gt; is more suitable than &lt;code&gt;assertMatch&lt;/code&gt; when the left-hand side is a computed value rather than a simple pattern, and gives more details than &lt;code&gt;?assert(Expect =:= Expr)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assertEqual&lt;/code&gt; 왼쪽이 단순한 패턴이 아닌 계산 된 값인 경우 assertEqual 이 &lt;code&gt;assertMatch&lt;/code&gt; 보다 적합하며 &lt;code&gt;?assert(Expect =:= Expr)&lt;/code&gt; 보다 자세한 정보를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="86ebca600c491611d59fb81bbc64178a4240b3f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_id = 0&lt;/code&gt; (default) indicates the whole endpoint.</source>
          <target state="translated">&lt;code&gt;assoc_id = 0&lt;/code&gt; (기본값)은 전체 엔드 포인트를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="47d49bdd1ccd72b394fa212477403df138818b65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_id = 0&lt;/code&gt; (default) indicates the whole endpoint. See &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; for the discussion of their semantics. Rarely used.</source>
          <target state="translated">&lt;code&gt;assoc_id = 0&lt;/code&gt; (기본값)은 전체 엔드 포인트를 나타냅니다. 의미에 대한 설명은 &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 용 소켓 API 확장을 참조하십시오 . 드물게 사용되는.</target>
        </trans-unit>
        <trans-unit id="77a37a0c7eea6ce81d051e4508dbb3d63745df6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_id = 0&lt;/code&gt; (default) indicates the whole endpoint. See &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; for the exact semantics of the field values.</source>
          <target state="translated">&lt;code&gt;assoc_id = 0&lt;/code&gt; (기본값)은 전체 엔드 포인트를 나타냅니다. 필드 값의 정확한 의미는 &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 용 소켓 API 확장을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="548784c9ecca55c0e2f953786b10d16508a546dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;at_dep&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;at_dep&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="e2b407a1b20fb27935afd6e6402d358e469774cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atom()&lt;/code&gt; - Name of the Erlang module implementing the subsystem using the &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; (replaces ssh_daemon_channel) behaviour.</source>
          <target state="translated">&lt;code&gt;atom()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; (ssh_daemon_channel 대체) 동작을 사용하여 서브 시스템을 구현하는 Erlang 모듈의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="9f0910ef212626435d10caf31c55cc021319b923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atom&lt;/code&gt;&lt;code&gt;char&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;atom&lt;/code&gt;&lt;code&gt;char&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb28b98225e6725d1affc9694f0217b20bf6bea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attribute&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e130d8e013ac7037c4959d9a5f7ffcfc196ab056" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attributes&lt;/code&gt;. Returns the table attribute names that are specified in the schema.</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; . 스키마에 지정된 테이블 속성 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3b3596ead5d9a3e64e7012a2a7b63056949098c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attributes&lt;/code&gt;. The names of the attributes for the records that are inserted in the table.</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; . 테이블에 삽입 된 레코드의 속성 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1c86778ee7c43bedb81a6ab931654f75426d16ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt; - The manager will autonomously send response (acknowledgment&amp;gt; to inform-request messages.</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; - 관리자가 정보 요청 메시지에 대한 응답 (승인&amp;gt;)을 자동으로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="70f7fd21bd95427295d93939701fb17fb5970164" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_repair&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate if Mnesia is configured to start the auto-repair facility on corrupted disc files.</source>
          <target state="translated">&lt;code&gt;auto_repair&lt;/code&gt; . Mnesia가 손상된 디스크 파일에서 자동 복구 기능을 시작하도록 구성되어 있는지 표시하려면 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="12902d8c010c7b4a0b48c006e43d19093456b157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_save&lt;/code&gt; - Defines the dets auto-save frequency.</source>
          <target state="translated">&lt;code&gt;auto_save&lt;/code&gt; - 자동 저장 빈도를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a0a50c3b5330a8697925d8971b617a7169d59dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backup_module&lt;/code&gt;. Returns the name of the module that is configured to be the backup callback module.</source>
          <target state="translated">&lt;code&gt;backup_module&lt;/code&gt; . 백업 콜백 모듈로 구성된 모듈의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fb90c9513934f1b3ccb086efcb411f60d1384f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badValue | noSuchName | genErr&lt;/code&gt;(SNMPv1)</source>
          <target state="translated">&lt;code&gt;badValue | noSuchName | genErr&lt;/code&gt; (SNMPv1)</target>
        </trans-unit>
        <trans-unit id="4af55acb7f44704d193041128ca3204b65f3131d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_index&lt;/code&gt;. Index already exists, or was out of bounds.</source>
          <target state="translated">&lt;code&gt;bad_index&lt;/code&gt; . 인덱스가 이미 존재하거나 범위를 벗어났습니다.</target>
        </trans-unit>
        <trans-unit id="9bd7847208820cb3e5fdf7d4e616b5b19e7ae8cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_object&lt;/code&gt;, &lt;code&gt;{bad_object, FileName}&lt;/code&gt; - Applying the format function failed for some binary, or the key(s) could not be extracted from some term.</source>
          <target state="translated">&lt;code&gt;bad_object&lt;/code&gt; , &lt;code&gt;{bad_object, FileName}&lt;/code&gt; -일부 바이너리에 대해 형식 함수 적용에 실패했거나 일부 용어에서 키를 추출 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5674a81ffc13a9d93f73c262d178d85abcf93d77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_type&lt;/code&gt;. Bad type specified in argument.</source>
          <target state="translated">&lt;code&gt;bad_type&lt;/code&gt; . 인수에 잘못된 유형이 지정되었습니다.</target>
        </trans-unit>
        <trans-unit id="9e242d45e0b73cd73950c8c730a1c126ad7d4759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badarg&lt;/code&gt;. Bad or invalid argument, possibly bad type.</source>
          <target state="translated">&lt;code&gt;badarg&lt;/code&gt; . 잘못된 인수 또는 잘못된 인수, 잘못된 유형</target>
        </trans-unit>
        <trans-unit id="d96b34618ac7c8372a4d6e8854d04be5a47813b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badarg&lt;/code&gt;: an argument is of wrong type or has an illegal value,</source>
          <target state="translated">&lt;code&gt;badarg&lt;/code&gt; : 인수의 유형이 잘못되었거나 잘못된 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b57f829716070bd0c69b1a4bc15f6e129e32659a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bag&lt;/code&gt;. A table of this type has zero or more different objects with a given key.</source>
          <target state="translated">&lt;code&gt;bag&lt;/code&gt; . 이 유형의 테이블에는 주어진 키를 가진 0 개 이상의 다른 객체가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5bc9fef180d5478185c5f11107e1a7205f908fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bchunk/2&lt;/code&gt; returns &lt;code&gt;'$end_of_table'&lt;/code&gt; when all objects are returned, or &lt;code&gt;{error, Reason}&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;bchunk/2&lt;/code&gt; 는 모든 객체가 반환 될 때 &lt;code&gt;'$end_of_table'&lt;/code&gt; 을 반환하거나 오류가 발생하면 &lt;code&gt;{error, Reason}&lt;/code&gt; 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f0b881e6b811651503573d24bdc82b31cac8ea6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bchunk/2&lt;/code&gt; returns a tuple &lt;code&gt;{Continuation2, Data}&lt;/code&gt;, where &lt;code&gt;Data&lt;/code&gt; is a list of objects. &lt;code&gt;Continuation2&lt;/code&gt; is another continuation that is to be passed on to a subsequent call to &lt;code&gt;bchunk/2&lt;/code&gt;. With a series of calls to &lt;code&gt;bchunk/2&lt;/code&gt;, all table objects can be extracted.</source>
          <target state="translated">&lt;code&gt;bchunk/2&lt;/code&gt; 는 튜플 &lt;code&gt;{Continuation2, Data}&lt;/code&gt; 리턴 합니다. 여기서 &lt;code&gt;Data&lt;/code&gt; 는 오브젝트 목록입니다. &lt;code&gt;Continuation2&lt;/code&gt; &lt;code&gt;bchunk/2&lt;/code&gt; 는 bchunk / 2 에 대한 후속 호출로 전달되는 또 다른 연속입니다 . &lt;code&gt;bchunk/2&lt;/code&gt; 에 대한 일련의 호출로 모든 테이블 오브젝트를 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17286180de0e85fd3a121d782dd8fb920eb0a2ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_lib(3)&lt;/code&gt;, &lt;code&gt;digraph(3)&lt;/code&gt;, &lt;code&gt;digraph_utils(3)&lt;/code&gt;, &lt;code&gt;re(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;xref_chapter&quot;&gt;TOOLS User's Guide&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;beam_lib(3)&lt;/code&gt; , &lt;code&gt;digraph(3)&lt;/code&gt; , &lt;code&gt;digraph_utils(3)&lt;/code&gt; , &lt;code&gt;re(3)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;xref_chapter&quot;&gt;TOOLS User's Guide&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48806351aad0a7742944c693a884af8352b2a223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_lib&lt;/code&gt; searches for &lt;code&gt;.erlang.crypt&lt;/code&gt; in the current directory and then the home directory for the current user. If the file is found and contains a key, &lt;code&gt;beam_lib&lt;/code&gt; implicitly creates a crypto key fun and registers it.</source>
          <target state="translated">&lt;code&gt;beam_lib&lt;/code&gt; 에 대한 검색 &lt;code&gt;.erlang.crypt&lt;/code&gt; 현재 사용자의 현재 디렉토리에 다음 홈 디렉토리. 파일이 발견되고 키가 포함 된 경우 &lt;code&gt;beam_lib&lt;/code&gt; 는 암시 적으로 암호화 키 재미를 생성하고 등록합니다.</target>
        </trans-unit>
        <trans-unit id="7359f360c9f4db5152553296e4b58927d5d35196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bf&lt;/code&gt; (best fit)</source>
          <target state="translated">&lt;code&gt;bf&lt;/code&gt; ( 최 적합)</target>
        </trans-unit>
        <trans-unit id="8f9b4da975d568447e2e26dc29abe90a4b68b3cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin/erl&lt;/code&gt; (obtained from &lt;code&gt;erts-5.10.4/bin/erl.src&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;bin/erl&lt;/code&gt; ( &lt;code&gt;erts-5.10.4/bin/erl.src&lt;/code&gt; 에서 획득 )</target>
        </trans-unit>
        <trans-unit id="cb8b254fb956ab3a3b6c9b8239ceaa2c312d5831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin/start.boot&lt;/code&gt; (a copy of &lt;code&gt;plain.boot&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;bin/start.boot&lt;/code&gt; (사본 &lt;code&gt;plain.boot&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="91bc86af405ae4d15ef21b7029302ff95b1bed86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin&lt;/code&gt; - Optional. Any executable that is a product of the application, such as escripts or shell-scripts, should be placed here.</source>
          <target state="translated">&lt;code&gt;bin&lt;/code&gt; - 선택 사항. escripts 또는 shell-scripts와 같이 응용 프로그램 제품인 실행 파일은 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="25aa1b40cfc688459920a27ed9809c66c8adfe1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin&lt;/code&gt; - Top-level Erlang runtime system executables</source>
          <target state="translated">&lt;code&gt;bin&lt;/code&gt; - 최고 수준의 얼랑 런타임 시스템 실행</target>
        </trans-unit>
        <trans-unit id="f9adab0d87be8165335a800dfe74c3b1e4b411a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binary_to_list(Bin11)&lt;/code&gt; evaluates to &lt;code&gt;[1, 17, 42]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_to_list(Bin11)&lt;/code&gt; 은 &lt;code&gt;[1, 17, 42]&lt;/code&gt; 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="7f94a75319672458a8993a5a6018445eb933bcfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binary_to_list(Bin12)&lt;/code&gt; evaluates to &lt;code&gt;[97, 98, 99]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_to_list(Bin12)&lt;/code&gt; 는 &lt;code&gt;[97, 98, 99]&lt;/code&gt; 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ec897cc6cac414b8d4a65707211e9d38f731a5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binary_to_list(Bin2)&lt;/code&gt; evaluates to &lt;code&gt;[1, 17, 00, 42]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_to_list(Bin2)&lt;/code&gt; 는 &lt;code&gt;[1, 17, 00, 42]&lt;/code&gt; 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="c8d746c582c845b2e8bdd3c53e79719945a24fd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block&lt;/code&gt; - Block the transport. &lt;strong&gt;Optional&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;block&lt;/code&gt; - 블록 전송. &lt;strong&gt;선택 과목&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e968dd092a4817ba1e07fce1cdafbd392928772" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block_user/4&lt;/code&gt; and &lt;code&gt;block_user/5&lt;/code&gt; each blocks the user &lt;code&gt;User&lt;/code&gt; from directory &lt;code&gt;Dir&lt;/code&gt; for a specified amount of time.</source>
          <target state="translated">&lt;code&gt;block_user/4&lt;/code&gt; 및 &lt;code&gt;block_user/5&lt;/code&gt; 는 각각 지정된 시간 동안 디렉토리 &lt;code&gt;Dir&lt;/code&gt; 에서 사용자 &lt;code&gt;User&lt;/code&gt; 를 차단합니다 .</target>
        </trans-unit>
        <trans-unit id="c1b720c8577ec8fd5220d4a8ab719326268b9fa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bptr&lt;/code&gt; is a pointer to a buffer containing data to be converted.</source>
          <target state="translated">&lt;code&gt;bptr&lt;/code&gt; 은 변환 될 데이터를 포함하는 버퍼에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="36f44964a85f04c8b6fd92e92eb38af4ff7f6f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; - Attach whenever a process reaches a breakpoint.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; - 프로세스가 중단 점에 도달 할 때마다 연결합니다.</target>
        </trans-unit>
        <trans-unit id="e70a93a8806770419d539bbdd5ae7c24fdc883a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; - Process execution is stopped, normally at a breakpoint. &lt;code&gt;Info={Module,Line}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; - 일반적으로 중단 점에서 프로세스 실행이 중지됩니다. &lt;code&gt;Info={Module,Line}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="974f7fe09a42b6e842cb2ad460448861f2988cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;brutal_kill&lt;/code&gt; means that the child process is unconditionally terminated using &lt;code&gt;exit(Child, kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;brutal_kill&lt;/code&gt; 은 &lt;code&gt;exit(Child, kill)&lt;/code&gt; 사용하여 하위 프로세스가 무조건 종료 됨을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="84a05fdf241e6eb39d9d64cdb875bec6a8355d2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; provide the arguments to the call (the third argument to &lt;code&gt;erlang:port_call/3&lt;/code&gt;). They can be decoded using &lt;code&gt;ei&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; 및 &lt;code&gt;len&lt;/code&gt; 은 호출에 인수를 제공합니다 ( &lt;code&gt;erlang:port_call/3&lt;/code&gt; 의 세 번째 인수 ). &lt;code&gt;ei&lt;/code&gt; 기능을 사용하여 디코딩 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9592d5baeb6834995af947204ffd16d322a0d8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is a pointer to the buffer where the binary data is or will be.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; 는 이진 데이터가 있거나있을 버퍼에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="020f366ef6e7fa93ca2d78487b1d29ac830fae17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is the buffer containing the term in binary format.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; 는 용어를 이진 형식으로 포함하는 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="9358fda02a3a522860f468e50b529164546407cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is the buffer.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; 는 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="91989446ab3fcfb17a358cc47a306a6845e22013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp1&lt;/code&gt; is a buffer containing an encoded Erlang term term1.</source>
          <target state="translated">&lt;code&gt;bufp1&lt;/code&gt; 은 인코딩 된 Erlang 용어 term1을 포함하는 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="9c2a34acb00a733fae7ddd41aef79e0f36fd2fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp2&lt;/code&gt; is a buffer containing an encoded Erlang term term2.</source>
          <target state="translated">&lt;code&gt;bufp2&lt;/code&gt; 는 인코딩 된 Erlang 용어 term2를 포함하는 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="b514f398a673f0c3431c37ce1fb7770505f66066" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp&lt;/code&gt; is a buffer large enough to hold the expected message.</source>
          <target state="translated">&lt;code&gt;bufp&lt;/code&gt; 는 예상 메시지를 보관할 수있을만큼 큰 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="7a7a9c6db496d05d90264fc19c723591c92e6bca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp&lt;/code&gt; is a pointer to a buffer containing one or more encoded Erlang terms.</source>
          <target state="translated">&lt;code&gt;bufp&lt;/code&gt; 는 하나 이상의 인코딩 된 Erlang 용어를 포함하는 버퍼에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="8aa554368e3bfa313e84792c87a0f8a742e01733" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufpp&lt;/code&gt; is a pointer to a pointer to a buffer containing one or more consecutively encoded Erlang terms. Following a successful call to &lt;code&gt;erl_encode_buf()&lt;/code&gt;, &lt;code&gt;bufpp&lt;/code&gt; is updated so that it points to the position for the next encoded term.</source>
          <target state="translated">&lt;code&gt;bufpp&lt;/code&gt; 는 하나 이상의 연속적으로 인코딩 된 Erlang 용어를 포함하는 버퍼에 대한 포인터를 가리키는 포인터입니다. 에 성공적으로 호출 후 &lt;code&gt;erl_encode_buf()&lt;/code&gt; , &lt;code&gt;bufpp&lt;/code&gt; 는 그 다음 인코딩 된 용어에 대한 위치를 가리 키도록 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="4f44057b5d737547a2be6a24c89bb7f43bfb7987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufpp&lt;/code&gt; is the address of a buffer pointer. The buffer contains one or more consecutively encoded Erlang terms. Following a successful call to &lt;code&gt;erl_decode_buf()&lt;/code&gt;, &lt;code&gt;bufpp&lt;/code&gt; is updated so that it points to the next encoded term.</source>
          <target state="translated">&lt;code&gt;bufpp&lt;/code&gt; 는 버퍼 포인터의 주소입니다. 버퍼는 하나 이상의 연속적으로 인코딩 된 Erlang 용어를 포함합니다. 에 성공적으로 호출 후 &lt;code&gt;erl_decode_buf()&lt;/code&gt; , &lt;code&gt;bufpp&lt;/code&gt; 는 그 다음 인코딩 된 용어를 가리 키도록 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="bb000a625bd54e5bdff350e8317e6d7e6df9d728" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufsize&lt;/code&gt; indicates the size of &lt;code&gt;bufp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bufsize&lt;/code&gt; 는 &lt;code&gt;bufp&lt;/code&gt; 크기를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="b755c56effd11bcf791291be14253f76dff8c89e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;builtins&lt;/code&gt;, whether calls to BIFs are included in the module's data;</source>
          <target state="translated">&lt;code&gt;builtins&lt;/code&gt; BIF 호출이 모듈의 데이터에 포함되는지 여부에 따라 builtins .</target>
        </trans-unit>
        <trans-unit id="c0301210a3f69e9e7dbee51658c14c1044ce91d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;builtins&lt;/code&gt;, with initial default value &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;builtins&lt;/code&gt; 초기 기본값이 &lt;code&gt;false&lt;/code&gt; 인내장 ;</target>
        </trans-unit>
        <trans-unit id="3919372d103739aa529efd10f11352ffde571ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes : integer&lt;/code&gt; :: Size of data returned. Ex. &lt;code&gt;82&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bytes : integer&lt;/code&gt; :: 반환 된 데이터 크기. 전의. &lt;code&gt;82&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc288deb34eff3dd05d8920de133e55c4a5b9bc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c:c/1&lt;/code&gt; is called to compile the specified module on the remote node. &lt;code&gt;erl_match()&lt;/code&gt; checks that the compilation was successful by testing for the expected &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c:c/1&lt;/code&gt; 은 원격 노드에서 지정된 모듈을 컴파일하기 위해 호출됩니다. &lt;code&gt;erl_match()&lt;/code&gt; 는 예상 &lt;code&gt;ok&lt;/code&gt; 테스트를 통해 컴파일이 성공 했는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="94dfd35ae9c24c3703a59348eb4cbd1a8470272c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;calendar(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;io(3)&lt;/code&gt;, &lt;code&gt;io_lib(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;maps(3)&lt;/code&gt;, &lt;code&gt;sasl(6)&lt;/code&gt;, &lt;code&gt;unicode(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;calendar(3)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;io(3)&lt;/code&gt; , &lt;code&gt;io_lib(3)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;maps(3)&lt;/code&gt; , &lt;code&gt;sasl(6)&lt;/code&gt; , &lt;code&gt;unicode(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0d9fe36a3e680b5ea19a76fae4b2fa4139cc89e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;caller&lt;/code&gt; - for &lt;code&gt;[{'_',[],[{message,{caller}}]}]&lt;/code&gt; (report the calling function)</source>
          <target state="translated">&lt;code&gt;caller&lt;/code&gt; - &lt;code&gt;[{'_',[],[{message,{caller}}]}]&lt;/code&gt; (호출 기능보고)</target>
        </trans-unit>
        <trans-unit id="9cf793eea4bf1fd73379c6d4492be1f7ee4cfe4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case&lt;/code&gt; is another construct in Erlang. Recall that the &lt;code&gt;convert_length&lt;/code&gt; function was written as:</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 는 Erlang의 또 다른 구조입니다. 것을 기억 &lt;code&gt;convert_length&lt;/code&gt; 의 기능은 다음과 같이 작성되었습니다 :</target>
        </trans-unit>
        <trans-unit id="cbddc7998ac2e4b689116df33702d9e847ccfa7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cdr&lt;/code&gt; - CORBA (GIOP 1.1)</source>
          <target state="translated">&lt;code&gt;cdr&lt;/code&gt; -CORBA (GIOP 1.1)</target>
        </trans-unit>
        <trans-unit id="4245c60051fa28f6c993f4eb8e040393fb293656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch3&lt;/code&gt; does not need to do any cleaning up before termination. Thus, no shutdown time is needed, but &lt;code&gt;brutal_kill&lt;/code&gt; is sufficient. &lt;code&gt;error_man&lt;/code&gt; can need some time for the event handlers to clean up, thus the shutdown time is set to 5000 ms (which is the default value).</source>
          <target state="translated">&lt;code&gt;ch3&lt;/code&gt; 은 종료하기 전에 정리할 필요가 없습니다. 따라서 종료 시간은 필요하지 않지만 &lt;code&gt;brutal_kill&lt;/code&gt; 이면 충분합니다. &lt;code&gt;error_man&lt;/code&gt; 은 이벤트 핸들러를 정리하는 데 약간의 시간이 필요할 수 있으므로 종료 시간은 5000ms (기본값)로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="da4e6492a6a940b0b8ec65b4d2008b4e92ab6526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch3&lt;/code&gt; is the name of the &lt;code&gt;gen_server&lt;/code&gt; and must agree with the name used to start it. &lt;code&gt;alloc&lt;/code&gt; is the actual request.</source>
          <target state="translated">&lt;code&gt;ch3&lt;/code&gt; 은 &lt;code&gt;gen_server&lt;/code&gt; 의 이름이며 이를 시작하는 데 사용 된 이름과 일치해야합니다. &lt;code&gt;alloc&lt;/code&gt; 은 실제 요청입니다.</target>
        </trans-unit>
        <trans-unit id="c4d3e6a239f3f0a72fbae0ffce0d02ba9c239e4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch3&lt;/code&gt; is the name of the &lt;code&gt;gen_server&lt;/code&gt;. &lt;code&gt;{free, Ch}&lt;/code&gt; is the actual request.</source>
          <target state="translated">&lt;code&gt;ch3&lt;/code&gt; 은 &lt;code&gt;gen_server&lt;/code&gt; 의 이름입니다 . &lt;code&gt;{free, Ch}&lt;/code&gt; 는 실제 요청입니다.</target>
        </trans-unit>
        <trans-unit id="637a97c0869f0dca51007ec5f8dd019cbe62121d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch4:start_link&lt;/code&gt; calls the function &lt;code&gt;proc_lib:start_link&lt;/code&gt;. This function takes a module name, a function name, and an argument list as arguments, spawns, and links to a new process. The new process starts by executing the given function, here &lt;code&gt;ch4:init(Pid)&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid (&lt;code&gt;self()&lt;/code&gt;) of the first process, which is the parent process.</source>
          <target state="translated">&lt;code&gt;ch4:start_link&lt;/code&gt; &lt;code&gt;proc_lib:start_link&lt;/code&gt; 함수를 호출합니다 . 이 함수는 모듈 이름, 함수 이름 및 인수 목록을 인수, 생성 및 새 프로세스에 대한 링크로 사용합니다. 새로운 프로세스는 주어진 함수, 여기서 &lt;code&gt;ch4:init(Pid)&lt;/code&gt; 를 실행하여 시작합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 첫 번째 프로세스 의 pid ( &lt;code&gt;self()&lt;/code&gt; )이며 이는 상위 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="450040c43153c267bc9a946c817b748e058c6967" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch_sup:start_link&lt;/code&gt; calls function &lt;code&gt;supervisor:start_link/2&lt;/code&gt;, which spawns and links to a new process, a supervisor.</source>
          <target state="translated">&lt;code&gt;ch_sup:start_link&lt;/code&gt; 함수 &lt;code&gt;supervisor:start_link/2&lt;/code&gt; 를 호출 하여 새 프로세스 인 수퍼바이저를 생성하고 연결합니다.</target>
        </trans-unit>
        <trans-unit id="e07f79a4537803dd33d38991ec86dbac443c7e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change_table_copy_type(Tab, Node, ToType)&lt;/code&gt; changes the storage type of a table. For example, a RAM table is changed to a &lt;code&gt;disc_table&lt;/code&gt; at the node specified as &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;change_table_copy_type(Tab, Node, ToType)&lt;/code&gt; 은 테이블의 스토리지 유형을 변경합니다. 예를 들어 RAM 테이블은 &lt;code&gt;Node&lt;/code&gt; 로 지정된 노드에서 &lt;code&gt;disc_table&lt;/code&gt; 로 변경됩니다 .</target>
        </trans-unit>
        <trans-unit id="166ed2a7f68758ef24b82ee6382f345020f96be9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check(FileName)&lt;/code&gt; is equivalent to &lt;code&gt;check([FileName], [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;check(FileName)&lt;/code&gt; 은 &lt;code&gt;check([FileName], [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="87fdff375b367943a5a921c311557301ab0babbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check&lt;/code&gt; is always called by the same process, so &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; are possible.</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; 는 항상 같은 프로세스에 의해 호출되므로 &lt;code&gt;put&lt;/code&gt; 과 &lt;code&gt;get&lt;/code&gt; 이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="41d0640805bfcc8da28c3b66b06e58325aec4149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkpoints&lt;/code&gt;. Returns a list of the names of the checkpoints currently active on this node.</source>
          <target state="translated">&lt;code&gt;checkpoints&lt;/code&gt; . 이 노드에서 현재 활성화 된 검사 점 이름 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b95bc3b85036835357a490f2507a02039107f20c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkpoints&lt;/code&gt;. Returns the names of the currently active checkpoints, which involve this table on this node.</source>
          <target state="translated">&lt;code&gt;checkpoints&lt;/code&gt; . 이 노드의이 테이블과 관련된 현재 활성화 된 검사 점의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="62376e5d841ce4eadcf7894ca3146f0f84dd99a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checksum&lt;/code&gt; - Defines if the file is checksummed or not.</source>
          <target state="translated">&lt;code&gt;checksum&lt;/code&gt; -파일의 체크섬 여부를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="8af5ef256449de22112f9e1149d05baa4c4e4b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk()&lt;/code&gt; returns &lt;code&gt;eof&lt;/code&gt; when the end of the log is reached, or &lt;code&gt;{error, Reason}&lt;/code&gt; if an error occurs. If a wrap log file is missing, a message is output on the error log.</source>
          <target state="translated">&lt;code&gt;chunk()&lt;/code&gt; 는 로그 끝에 도달하면 &lt;code&gt;eof&lt;/code&gt; 를 리턴 하고 오류가 발생하면 &lt;code&gt;{error, Reason}&lt;/code&gt; 리턴 합니다. 랩 로그 파일이 없으면 오류 로그에 메시지가 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="9f7b3958ce6e0d433e93aee48cfd7872c6879d58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk()&lt;/code&gt; returns a tuple &lt;code&gt;{Continuation2, Terms, Badbytes}&lt;/code&gt; if the log is opened in read-only mode and the read chunk is corrupt. &lt;code&gt;Badbytes&lt;/code&gt; is the number of bytes in the file found not to be Erlang terms in the chunk. Notice that the log is not repaired. When trying to read chunks from a log opened in read-write mode, tuple &lt;code&gt;{corrupt_log_file, FileName}&lt;/code&gt; is returned if the read chunk is corrupt.</source>
          <target state="translated">&lt;code&gt;chunk()&lt;/code&gt; 는 로그가 읽기 전용 모드로 열려 있고 읽기 청크가 손상된 경우 튜플 &lt;code&gt;{Continuation2, Terms, Badbytes}&lt;/code&gt; 반환합니다. &lt;code&gt;Badbytes&lt;/code&gt; 는 청크에서 Erlang 용어가 아닌 파일의 바이트 수입니다. 로그가 복구되지 않습니다. 읽기 / 쓰기 모드로 열린 로그에서 청크를 읽으려고 하면 읽기 청크가 손상된 경우 튜플 &lt;code&gt;{corrupt_log_file, FileName}&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="4e8f124c0786dad7795dc48255d2a5526f66a2d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk()&lt;/code&gt; returns a tuple &lt;code&gt;{Continuation2, Terms}&lt;/code&gt;, where &lt;code&gt;Terms&lt;/code&gt; is a list of terms found in the log. &lt;code&gt;Continuation2&lt;/code&gt; is yet another continuation, which must be passed on to any subsequent calls to &lt;code&gt;chunk()&lt;/code&gt;. With a series of calls to &lt;code&gt;chunk()&lt;/code&gt;, all terms from a log can be extracted.</source>
          <target state="translated">&lt;code&gt;chunk()&lt;/code&gt; 는 튜플 &lt;code&gt;{Continuation2, Terms}&lt;/code&gt; 반환합니다 . 여기서 &lt;code&gt;Terms&lt;/code&gt; 는 로그에있는 용어 목록입니다. &lt;code&gt;Continuation2&lt;/code&gt; 는 또 다른 연속으로 &lt;code&gt;chunk()&lt;/code&gt; 에 대한 후속 호출로 전달되어야합니다 . &lt;code&gt;chunk()&lt;/code&gt; 대한 일련의 호출로 로그에서 모든 용어를 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ded3fda3b82e0ccd56e08c222c189eac20f2fc84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ciphers&lt;/code&gt; (use old string format)</source>
          <target state="translated">&lt;code&gt;ciphers&lt;/code&gt; (이전 문자열 형식 사용)</target>
        </trans-unit>
        <trans-unit id="b770f867791c517d00ec5b11366aa1a2498c5247" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class : string&lt;/code&gt; :: Error reason. Ex. &lt;code&gt;&quot;error&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;class : string&lt;/code&gt; :: 오류 이유. 전의. &lt;code&gt;&quot;error&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bb984aad855371b26b1a2f3af1bb51acc7b751d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;client_&lt;/code&gt;-prefixed options are used when the distribution initiates a connection to another node. &lt;code&gt;server_&lt;/code&gt;-prefixed options are used when accepting a connection from a remote node.</source>
          <target state="translated">&lt;code&gt;client_&lt;/code&gt; 접두어 옵션은 분배가 다른 노드에 대한 연결을 시작할 때 사용됩니다. &lt;code&gt;server_&lt;/code&gt; 접두어 옵션은 원격 노드에서 연결을 승인 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="753db8f1aebf437e5a6b184af761bd6afff70793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closure&lt;/code&gt;, &lt;code&gt;components&lt;/code&gt;, &lt;code&gt;condensation&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;strict&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;closure&lt;/code&gt; , &lt;code&gt;components&lt;/code&gt; , &lt;code&gt;condensation&lt;/code&gt; , &lt;code&gt;domain&lt;/code&gt; , &lt;code&gt;range&lt;/code&gt; , &lt;code&gt;strict&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b877d0edd90635ff602145be40854a914d08981" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to broadcast on.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; 는 브로드 캐스트 할 조건 변수에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="e184f22bd87babddbbb471c5a0861f5744761602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to destroy.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; 는 파괴 할 조건 변수에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="b732e57aaef8e8081a9cf4e1a000c041ccd968fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to signal on.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; 는 신호를 보낼 조건 변수에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="2201e749d7512aceb643478b0c70a66fff6c7656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to wait on. &lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to unlock while waiting.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; 는 대기 할 조건 변수에 대한 포인터입니다. &lt;code&gt;mtx&lt;/code&gt; 는 기다리는 동안 잠금 해제 할 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="5f33e80633efeed0de41cd20b145beba0880de34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to an initialized condition.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; 는 초기화 된 조건에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="00473b126d0a7652ea3254f682ffc5bf58d1f9a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;collisions&lt;/code&gt; indicates how many elements are sharing positions in the registry.</source>
          <target state="translated">&lt;code&gt;collisions&lt;/code&gt; 은 레지스트리에서 위치를 공유하는 요소 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="add781ee986781b3ce385d7886b10f9ee188263a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combine_error&lt;/code&gt;. Table options illegally combined.</source>
          <target state="translated">&lt;code&gt;combine_error&lt;/code&gt; . 테이블 옵션이 잘못 결합되었습니다.</target>
        </trans-unit>
        <trans-unit id="7c4e1a52bbe022a8fb6a2c2758fc57367d5661e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command : integer&lt;/code&gt; :: Command integer. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;command : integer&lt;/code&gt; :: 명령 정수. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9152f8b34bf476261276d6aa9b6c95677788059d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command [parameters]&lt;/code&gt; is executed.</source>
          <target state="translated">&lt;code&gt;command [parameters]&lt;/code&gt; 이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2803cf83c29548794241441d3248a8c8eab2eb02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command&lt;/code&gt; is an integer, obtained from the call from Erlang (the second argument to &lt;code&gt;erlang:port_call/3&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; 는 Erlang ( &lt;code&gt;erlang:port_call/3&lt;/code&gt; 의 두 번째 인수)에서 호출 한 정수 입니다.</target>
        </trans-unit>
        <trans-unit id="43dafc94528a941655db75f3381463d76dbe825d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commitFailed | undoFailed | genErr&lt;/code&gt;(SNMPv2)</source>
          <target state="translated">&lt;code&gt;commitFailed | undoFailed | genErr&lt;/code&gt; (SNMPv2)</target>
        </trans-unit>
        <trans-unit id="629a12e24a17f3ddef11586998dd4ec5c3c51f43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;common_reason()&lt;/code&gt; = &lt;code&gt;econn | eclosed | term()&lt;/code&gt; - some explanation of what went wrong</source>
          <target state="translated">&lt;code&gt;common_reason()&lt;/code&gt; = &lt;code&gt;econn | eclosed | term()&lt;/code&gt; -무엇이 잘못되었는지에 대한 설명</target>
        </trans-unit>
        <trans-unit id="b63b48b8aaf391f30a8116cb628cde3ab4e343e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;community.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#community&quot;&gt;Communities&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;community.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#community&quot;&gt;Communities&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="45a5fc99e43f5b724b30d2b4e7e4f8273e1b7ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;community_entry(&quot;all-rights&quot;)&lt;/code&gt; translates to the following call: &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, CommunityIndex, &quot;&quot;, &quot;&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;community_entry(&quot;all-rights&quot;)&lt;/code&gt; 는 &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, CommunityIndex, &quot;&quot;, &quot;&quot;)&lt;/code&gt; 호출로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="af49f290ae8123993fe5f818dccec559995abe76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;community_entry(&quot;public&quot;)&lt;/code&gt; translates to the following call: &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, &quot;initial&quot;, &quot;&quot;, &quot;&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;community_entry(&quot;public&quot;)&lt;/code&gt; 은 &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, &quot;initial&quot;, &quot;&quot;, &quot;&quot;)&lt;/code&gt; 호출로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb25bc344c91ef01ac5c00d3d9049a4cf28d55ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compact&lt;/code&gt; has a format corresponding to:</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; 는 다음에 해당하는 형식입니다.</target>
        </trans-unit>
        <trans-unit id="fe08b2d80ea20fe5a1d5d0f983bdce680e583294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;computation_failed&lt;/code&gt;: the computation fails of another reason than &lt;code&gt;low_entropy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;computation_failed&lt;/code&gt; : 계산이 아닌 다른 이유로 인해 실패 &lt;code&gt;low_entropy&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eee140ce407e22cfe49926dc2ef9bf00fd7505e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config(4)&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;config(4)&lt;/code&gt; 커널의 config (4) 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="26e21c618a893d7c89837a650fffcc4cd8145f7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conn_log_mod()&lt;/code&gt; is the name of the &lt;code&gt;Common Test&lt;/code&gt; module implementing the connection protocol, for example, &lt;code&gt;ct_netconfc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;conn_log_mod()&lt;/code&gt; 는 연결 프로토콜을 구현하는 &lt;code&gt;Common Test&lt;/code&gt; 모듈 의 이름입니다 ( 예 : &lt;code&gt;ct_netconfc&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="1fb163139309bd997116d5508149a3a80552684d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conn_mod()&lt;/code&gt; is the name of the &lt;code&gt;Common Test&lt;/code&gt; module implementing the connection protocol, that is, &lt;code&gt;ct_telnet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;conn_mod()&lt;/code&gt; 는 연결 프로토콜을 구현하는 &lt;code&gt;Common Test&lt;/code&gt; 모듈 의 이름 , 즉 &lt;code&gt;ct_telnet&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="310dcb78a58000d40b19999fd64d7d840f17e923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect/1&lt;/code&gt; loads the driver, opens it, and logs on to the database, returning the Erlang port if successful.</source>
          <target state="translated">&lt;code&gt;connect/1&lt;/code&gt; 은 드라이버를로드하고 연 다음 데이터베이스에 로그온하여 성공하면 Erlang 포트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="caa42197c0e7896b05b8108667bc65c22464af97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connected&lt;/code&gt; - &lt;code&gt;erlang:nodes(connected)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;connected&lt;/code&gt; - &lt;code&gt;erlang:nodes(connected)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92cd3d4350ce9efed99d6d467dd677d61cb05c12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conp&lt;/code&gt; is a pointer to an &lt;code&gt;ErlConnect&lt;/code&gt; struct, described as follows:</source>
          <target state="translated">&lt;code&gt;conp&lt;/code&gt; 는 다음과 같이 &lt;code&gt;ErlConnect&lt;/code&gt; 구조체에 대한 포인터입니다 .</target>
        </trans-unit>
        <trans-unit id="407ba3561e1cb3e4c0b4b87da7dc3dc9b0ac5071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const char *ei_thisnodename(ei_cnode *ec)&lt;/code&gt;&lt;code&gt;const char *ei_thishostname(ei_cnode *ec)&lt;/code&gt;&lt;code&gt;const char *ei_thisalivename(ei_cnode *ec)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;const char *ei_thisnodename(ei_cnode *ec)&lt;/code&gt; &lt;code&gt;const char *ei_thishostname(ei_cnode *ec)&lt;/code&gt; &lt;code&gt;const char *ei_thisalivename(ei_cnode *ec)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1da83c6b37e4b57bb63855bce371b9fcb0518fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const char *erl_thisalivename()&lt;/code&gt;&lt;code&gt;const char *erl_thiscookie()&lt;/code&gt;&lt;code&gt;short erl_thiscreation()&lt;/code&gt;&lt;code&gt;const char *erl_thishostname()&lt;/code&gt;&lt;code&gt;const char *erl_thisnodename()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;const char *erl_thisalivename()&lt;/code&gt; &lt;code&gt;const char *erl_thiscookie()&lt;/code&gt; &lt;code&gt;short erl_thiscreation()&lt;/code&gt; &lt;code&gt;const char *erl_thishostname()&lt;/code&gt; &lt;code&gt;const char *erl_thisnodename()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77a34029e14cc38271c72a531e899e83f34ccd47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#context&quot;&gt;Contexts&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;context.conf&lt;/code&gt; : &lt;code&gt;&lt;a href=&quot;#context&quot;&gt;Contexts&lt;/a&gt;&lt;/code&gt; 참조하십시오</target>
        </trans-unit>
        <trans-unit id="786a0affbb3ef2981961c506021e8f22cf48941d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;control_char&lt;/code&gt; is the type of control sequence: &lt;code&gt;$P&lt;/code&gt;, &lt;code&gt;$w&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;control_char&lt;/code&gt; 은 제어 순서의 유형입니다 ( &lt;code&gt;$P&lt;/code&gt; , &lt;code&gt;$w&lt;/code&gt; 등).</target>
        </trans-unit>
        <trans-unit id="0c7c364bf87067f9368199dfab8f0e9200d5c802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;convert_request_date/1&lt;/code&gt; converts &lt;code&gt;DateString&lt;/code&gt; to the Erlang date format. &lt;code&gt;DateString&lt;/code&gt; must be in one of the three date formats defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;convert_request_date/1&lt;/code&gt; 은 &lt;code&gt;DateString&lt;/code&gt; 을 Erlang 날짜 형식으로 변환 합니다. &lt;code&gt;DateString&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 에 정의 된 세 가지 날짜 형식 중 하나 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="ba2866f0d5129f4ab2b29e9d8b58c81aad9e098f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie&lt;/code&gt; is the authorization string required for access to the remote node. If &lt;code&gt;NULL&lt;/code&gt;, the user &lt;code&gt;HOME&lt;/code&gt; directory is searched for a cookie file &lt;code&gt;.erlang.cookie&lt;/code&gt;. The path to the home directory is retrieved from environment variable &lt;code&gt;HOME&lt;/code&gt; on Unix and from the &lt;code&gt;HOMEDRIVE&lt;/code&gt; and &lt;code&gt;HOMEPATH&lt;/code&gt; variables on Windows. For more details, see the &lt;code&gt;auth&lt;/code&gt; module in Kernel.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; 는 원격 노드에 액세스하는 데 필요한 인증 문자열입니다. 경우 &lt;code&gt;NULL&lt;/code&gt; , 사용자 &lt;code&gt;HOME&lt;/code&gt; 디렉토리는 쿠키 파일을 검색한다 &lt;code&gt;.erlang.cookie&lt;/code&gt; . 홈 디렉토리에 대한 경로는 Unix의 환경 변수 &lt;code&gt;HOME&lt;/code&gt; 및 Windows 의 &lt;code&gt;HOMEDRIVE&lt;/code&gt; 및 &lt;code&gt;HOMEPATH&lt;/code&gt; 변수에서 검색됩니다. 자세한 내용 은 커널 의 &lt;code&gt;auth&lt;/code&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="42bca715a9185b21349e1aec4da49804e0dd0c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie&lt;/code&gt; is the cookie for the node.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; 는 노드의 쿠키입니다.</target>
        </trans-unit>
        <trans-unit id="817b59120c7e12c5e02241436194d11a4a5ba478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie&lt;/code&gt;. Returns a table cookie, which is a unique system-generated identifier for the table. The cookie is used internally to ensure that two different table definitions using the same table name cannot accidentally be intermixed. The cookie is generated when the table is created initially.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; . 테이블에 대한 고유 한 시스템 생성 식별자 인 테이블 쿠키를 반환합니다. 쿠키는 내부적으로 사용되어 동일한 테이블 이름을 사용하는 두 개의 서로 다른 테이블 정의를 실수로 혼합 할 수 없도록합니다. 쿠키는 테이블이 처음 생성 될 때 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="c8a1d24e0052f8872cb46a15e10a289509b724e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; is the address of an integer, or &lt;code&gt;NULL&lt;/code&gt;. If &lt;code&gt;count&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, it is set by the function to the number of names found.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 는 정수의 주소이거나 &lt;code&gt;NULL&lt;/code&gt; 입니다. &lt;code&gt;count&lt;/code&gt; 가 &lt;code&gt;NULL&lt;/code&gt; 이 아닌 경우 , 함수는 발견 된 이름 수로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="49e81525989f91eca7e0066fbeaa05638d14a178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; is a profiling tool that can be used to get a picture of how often different functions in the system are called.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; 는 시스템에서 서로 다른 기능이 얼마나 자주 호출되는지에 대한 그림을 얻는 데 사용할 수있는 프로파일 링 도구입니다.</target>
        </trans-unit>
        <trans-unit id="d0e94809d26e0e40fc7bfc527ddb50f2314ed029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; is something in between &lt;code&gt;fprof&lt;/code&gt; and &lt;code&gt;cover&lt;/code&gt; regarding features. It counts how many times each function is called when the program is run, on a per module basis. &lt;code&gt;cprof&lt;/code&gt; has a low performance degradation effect (compared with &lt;code&gt;fprof&lt;/code&gt;) and does not need to recompile any modules to profile (compared with &lt;code&gt;cover&lt;/code&gt;). For more information, see the &lt;code&gt;cprof&lt;/code&gt; manual page in Tools.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; 는 기능 과 관련하여 &lt;code&gt;fprof&lt;/code&gt; 와 &lt;code&gt;cover&lt;/code&gt; 사이 에 있습니다. 모듈별로 프로그램이 실행될 때 각 함수가 호출 된 횟수를 계산합니다. &lt;code&gt;cprof&lt;/code&gt; 는 성능 저하 효과가 낮으며 ( &lt;code&gt;fprof&lt;/code&gt; 와 비교 ) 모듈을 프로파일로 다시 컴파일 할 필요가 없습니다 ( &lt;code&gt;cover&lt;/code&gt; 와 비교 ). 자세한 내용 은 도구 의 &lt;code&gt;cprof&lt;/code&gt; 매뉴얼 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="44744f0de84bc9d55c4eadbd5ce38738d9c24e19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; is the most lightweight tool, but it only provides execution counts on a function basis (for all processes, not per process).</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; 는 가장 가벼운 도구이지만 기능별 (프로세스 당이 아닌 모든 프로세스에 대한) 실행 횟수 만 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4048a0d6fa4c493f01ecbc1d21704dcaaed1ce8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; presents all profiled modules in decreasing total call count order, and for each module presents all profiled functions also in decreasing call count order. A call count limit can be specified to filter out all functions below the limit.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; 는 모든 프로파일 된 모듈을 총 호출 수 순서로 감소시키고 각 모듈에 대해 모든 프로파일 링 된 기능을 호출 횟수를 감소시킵니다. 호출 수 제한을 지정하여 제한 아래의 모든 기능을 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ab6878d3ec5d2819f77ff8acce68315369d55fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; uses breakpoints similar to local call trace, but containing counters, to collect profiling data. Therfore there is no need for special compilation of any module to be profiled.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; 는 로컬 콜 추적과 유사하지만 카운터를 포함하는 중단 점을 사용하여 프로파일 링 데이터를 수집합니다. 따라서 프로파일 링 할 모듈의 특수 컴파일이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f6c7f300bac5b6c58891e7324251fa70ca1a183c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cpu_sup&lt;/code&gt; is a process which supervises the CPU load and CPU utilization. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix, although CPU utilization values (&lt;code&gt;util/0,1&lt;/code&gt;) are only available for Solaris, Linux and FreeBSD.</source>
          <target state="translated">&lt;code&gt;cpu_sup&lt;/code&gt; 은 CPU로드 및 CPU 사용률을 감독하는 프로세스입니다. OS_Mon 응용 프로그램의 일부입니다 &lt;code&gt;os_mon(6)&lt;/code&gt; 참조 ) . CPU 사용률 값 ( &lt;code&gt;util/0,1&lt;/code&gt; )은 Solaris, Linux 및 FreeBSD에만 사용할 수 있지만 Unix에 사용 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="8f733e1e243b4e78c37aa3bf12d9888559fd4e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create/2&lt;/code&gt; and &lt;code&gt;create/3&lt;/code&gt; are provided as synonyms to resemble module &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;create/2&lt;/code&gt; 및 &lt;code&gt;create/3&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; 모듈과 유사한 동의어로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="86837ff50eb1f72f6c14616c4e5ab70595b6c916" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_etag/1&lt;/code&gt; calculates the Etag for a file from its size and time for last modification. &lt;code&gt;FileInfo&lt;/code&gt; is a record defined in &lt;code&gt;kernel/include/file.hrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;create_etag/1&lt;/code&gt; 은 마지막 수정을 위해 파일의 크기와 시간에서 파일의 Etag를 계산합니다. &lt;code&gt;FileInfo&lt;/code&gt; 는 &lt;code&gt;kernel/include/file.hrl&lt;/code&gt; 에 정의 된 레코드 입니다.</target>
        </trans-unit>
        <trans-unit id="147786f0517ecc77a8c88e11d308b3b944b51008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;creation&lt;/code&gt; helps identifying a particular instance of a C-node. In particular, it can help prevent us from receiving messages sent to an earlier process with the same registered name.</source>
          <target state="translated">&lt;code&gt;creation&lt;/code&gt; 은 C- 노드의 특정 인스턴스를 식별하는 데 도움이됩니다. 특히, 등록 된 이름이 같은 이전 프로세스로 전송 된 메시지를받지 못하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecba77368ea7d93ebe0e99703e7acc590f0dcbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;creation&lt;/code&gt; identifies a specific instance of a C-node. It can help prevent the node from receiving messages sent to an earlier process with the same registered name.</source>
          <target state="translated">&lt;code&gt;creation&lt;/code&gt; 은 C- 노드의 특정 인스턴스를 식별합니다. 등록 된 이름이 동일한 이전 프로세스로 전송 된 메시지를 노드가 수신하지 못하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e2f0434ccaddbdbdb4597f9f04a694d0d591ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;creation&lt;/code&gt; is an arbitrary number.</source>
          <target state="translated">&lt;code&gt;creation&lt;/code&gt; 는 임의의 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="25c1f766dcf6145f2806239ba1561f608c475382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crl_cache&lt;/code&gt; (write as Erlang term)</source>
          <target state="translated">&lt;code&gt;crl_cache&lt;/code&gt; (Erlang 용어로 작성)</target>
        </trans-unit>
        <trans-unit id="8089a68b245ea2612a5252f221bffda58f3203e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto&lt;/code&gt; app,</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; 앱,</target>
        </trans-unit>
        <trans-unit id="7321043699f44cee2da66b5796e5d39f980b3ac0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cserver&lt;/code&gt; takes a port number as argument and must be started before trying to call the Erlang functions.</source>
          <target state="translated">&lt;code&gt;cserver&lt;/code&gt; 는 포트 번호를 인수로 사용하며 Erlang 함수를 호출하기 전에 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="10356f1cc74fd351a9c0427a2d1e1cde1bc2e480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct:pal/4&lt;/code&gt; and &lt;code&gt;ct:log/5&lt;/code&gt; add headers to strings being printed to the log file. The strings are also wrapped in div tags with a CSS class attribute, so that stylesheet formatting can be applied. To disable this feature for a printout (i.e. to get a result similar to using &lt;code&gt;io:format/2&lt;/code&gt;), call &lt;code&gt;ct:log/5&lt;/code&gt; with the &lt;code&gt;no_css&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;ct:pal/4&lt;/code&gt; 및 &lt;code&gt;ct:log/5&lt;/code&gt; 는 로그 파일에 인쇄되는 문자열에 헤더를 추가합니다. 문자열은 CSS 클래스 속성으로 div 태그로 래핑되므로 스타일 시트 형식을 적용 할 수 있습니다. 인쇄물에 대해이 기능을 비활성화하려면 (즉, &lt;code&gt;io:format/2&lt;/code&gt; 사용과 유사한 결과를 얻으려면 ) &lt;code&gt;no_css&lt;/code&gt; 옵션 을 사용하여 &lt;code&gt;ct:log/5&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="54304822e601b32f1e90725086f938a28fcf450c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_config_plain&lt;/code&gt; - for reading configuration files with key-value tuples (standard format). This handler is used to parse configuration files if no user callback is specified.</source>
          <target state="translated">&lt;code&gt;ct_config_plain&lt;/code&gt; - 키-값 튜플이있는 구성 파일을 읽는 데 사용됩니다 (표준 형식). 이 핸들러는 사용자 콜백이 지정되지 않은 경우 구성 파일을 구문 분석하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="091701f10b9171bbae6e609be4ad908a55b0470e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_config_xml&lt;/code&gt; - for reading configuration data from XML files.</source>
          <target state="translated">&lt;code&gt;ct_config_xml&lt;/code&gt; -XML 파일에서 구성 데이터를 읽는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="37e7b4ba19bc3cee61acb03a5fc00aa6977d70d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_run -vts&lt;/code&gt; tries to open the &lt;code&gt;Common Test&lt;/code&gt; start page in an existing web browser window, or start the browser if it is not running. Which browser to start can be specified with the browser start command option:</source>
          <target state="translated">&lt;code&gt;ct_run -vts&lt;/code&gt; 는 기존 웹 브라우저 창에서 &lt;code&gt;Common Test&lt;/code&gt; 시작 페이지 를 열거 나 브라우저가 실행 중이 아닌 경우 브라우저를 시작하려고합니다. browser start 명령 옵션을 사용하여 시작할 브라우저를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa208b1437d15d60958b21cccaad22bef6c56934" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_run&lt;/code&gt; also accepts Erlang emulator flags. These are used when &lt;code&gt;ct_run&lt;/code&gt; calls &lt;code&gt;erl&lt;/code&gt; to start the Erlang node (this makes it possible to add directories to the code server path, change the cookie on the node, start more applications, and so on).</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; 은 Erlang 에뮬레이터 플래그도 허용합니다. 이들은 &lt;code&gt;ct_run&lt;/code&gt; 이 &lt;code&gt;erl&lt;/code&gt; 을 호출 하여 Erlang 노드를 시작할 때 사용됩니다 (이로 인해 코드 서버 경로에 디렉토리를 추가하고 노드의 쿠키를 변경하며 더 많은 응용 프로그램을 시작할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="33d2727d6cc062836a6b35673aead9f43b2d4bf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_telnet&lt;/code&gt; does not search for a prompt at all. This is useful if, for example, &lt;code&gt;Pattern&lt;/code&gt; itself matches the prompt.</source>
          <target state="translated">&lt;code&gt;ct_telnet&lt;/code&gt; 은 프롬프트를 전혀 검색하지 않습니다. 예를 들어 &lt;code&gt;Pattern&lt;/code&gt; 자체가 프롬프트와 일치하는 경우에 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="601ce49083458a71b06687598df31090de331f21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_telnet&lt;/code&gt; ignores any prompt found. This option is useful if data sent by the server can include a pattern matching prompt &lt;code&gt;regexp&lt;/code&gt; (as returned by &lt;code&gt;TargedMod:get_prompt_regexp/0&lt;/code&gt;), but is not to not cause the function to return.</source>
          <target state="translated">&lt;code&gt;ct_telnet&lt;/code&gt; 은 발견 된 프롬프트를 무시합니다. 이 옵션은 서버에서 전송 한 데이터에 패턴 일치 프롬프트 &lt;code&gt;regexp&lt;/code&gt; ( &lt;code&gt;TargedMod:get_prompt_regexp/0&lt;/code&gt; 에 의해 리턴 됨 )를 포함 할 수 있지만 함수가 리턴되지 않도록하는 경우에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="e90e605d39bb0cb048192d764d517674520c0dcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;curr_cnt&lt;/code&gt; of a process is incremented each time the process is involved in a sequential trace. The counter can reach its limit (27 bits) if a process is very long-lived and is involved in much sequential tracing. If the counter overflows, the serial for ordering of the trace events cannot be used. To prevent the counter from overflowing in the middle of a sequential trace, function &lt;code&gt;seq_trace:reset_trace/0&lt;/code&gt; can be called to reset &lt;code&gt;prev_cnt&lt;/code&gt; and &lt;code&gt;curr_cnt&lt;/code&gt; of all processes in the Erlang node. This function also sets all trace tokens in processes and their message queues to empty, and thus stops all ongoing sequential tracing.</source>
          <target state="translated">&lt;code&gt;curr_cnt&lt;/code&gt; 프로세스의 순차 추적에 프로세스가 포함될 때마다 프로세스의 curr_cnt 가 증가합니다. 프로세스가 매우 오래 지속되고 순차적 추적이 많은 경우 카운터는 한계 (27 비트)에 도달 할 수 있습니다. 카운터가 오버 플로우되면 추적 이벤트 순서 지정을위한 직렬을 사용할 수 없습니다. 순차 추적 중간에 카운터가 넘치지 않도록하기 위해 함수 &lt;code&gt;seq_trace:reset_trace/0&lt;/code&gt; 을 호출 하여 Erlang 노드에있는 모든 프로세스의 &lt;code&gt;prev_cnt&lt;/code&gt; 및 &lt;code&gt;curr_cnt&lt;/code&gt; 를 재설정 할 수 있습니다 . 이 기능은 또한 프로세스 및 해당 메시지 큐의 모든 추적 토큰을 비우도록 설정하여 진행중인 모든 순차 추적을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="fd1fe4536e2fae04ef35ef44090a99cd91b682a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cursor(QH)&lt;/code&gt; is equivalent to &lt;code&gt;cursor(QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cursor(QH)&lt;/code&gt; 는 &lt;code&gt;cursor(QH, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba3f5edef89533291e58134f4f1cd47d203131b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d(0)&lt;/code&gt; ... &lt;code&gt;d(n-1)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;d(0)&lt;/code&gt; ... &lt;code&gt;d(n-1)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6694b45c0235e642c971889424fd4c54eb60c6ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; is a pointer to data to associate with &lt;code&gt;key&lt;/code&gt; in the calling thread.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 는 호출 스레드에서 &lt;code&gt;key&lt;/code&gt; 와 연관시킬 데이터에 대한 포인터 입니다.</target>
        </trans-unit>
        <trans-unit id="6783d1593c9182ec656f533a2360e5b136b6243c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data_dir&lt;/code&gt; - Data file directory</source>
          <target state="translated">&lt;code&gt;data_dir&lt;/code&gt; - 데이터 파일 디렉토리</target>
        </trans-unit>
        <trans-unit id="029a6b0ab70f3edd3986db227e2072871162f8ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date-time-string&lt;/code&gt; is the date and time the message is written, default in local time (can be changed to UTC if needed). It is formatted with the ANSI-C function &lt;code&gt;strftime&lt;/code&gt; using the format string &lt;code&gt;%a %b %e %T %Z %Y&lt;/code&gt;, which produces messages like &lt;code&gt;===== ALIVE Thu May 15 10:13:36 MEST 2003&lt;/code&gt;; this can be changed, see the next section.</source>
          <target state="translated">&lt;code&gt;date-time-string&lt;/code&gt; 은 메시지가 작성된 날짜 및 시간이며 기본값은 현지 시간입니다 (필요한 경우 UTC로 변경할 수 있음). 이것은 ANSI-C 함수로 포맷 &lt;code&gt;strftime&lt;/code&gt; 포맷 스트링 사용 &lt;code&gt;%a %b %e %T %Z %Y&lt;/code&gt; 와 같은 메시지를 생성 &lt;code&gt;===== ALIVE Thu May 15 10:13:36 MEST 2003&lt;/code&gt; ; 이것은 변경할 수 있습니다. 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9033cd3570d0562271c3a2e4d7db4ffa6b191f45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;day/1&lt;/code&gt; converts the day of the week (&lt;code&gt;NthDayOfWeek&lt;/code&gt;) from an integer (1-7) to an abbreviated string, that is:</source>
          <target state="translated">&lt;code&gt;day/1&lt;/code&gt; 은 요일 ( &lt;code&gt;NthDayOfWeek&lt;/code&gt; )을 정수 (1-7)에서 약어 문자열로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="1cb11a621938f8a8d62fba1b13fd3331878eb3f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db&lt;/code&gt; (ETS tables)</source>
          <target state="translated">&lt;code&gt;db&lt;/code&gt; (ETS 테이블)</target>
        </trans-unit>
        <trans-unit id="358f4b1996cf482f96fc6cfa013716990e4ee122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db_dir&lt;/code&gt; is mandatory.</source>
          <target state="translated">&lt;code&gt;db_dir&lt;/code&gt; 은 필수입니다.</target>
        </trans-unit>
        <trans-unit id="2f664d4edb004cdde8a06354bf8d85f3788b0c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db_nodes&lt;/code&gt; - &lt;code&gt;mnesia:system_info(db_nodes)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;db_nodes&lt;/code&gt; - &lt;code&gt;mnesia:system_info(db_nodes)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70a6744faefa1713ffbd9721315da438a25ed6e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db_nodes&lt;/code&gt;. Returns the nodes that make up the persistent database. Disc-less nodes are only included in the list of nodes if they explicitly have been added to the schema, for example, with &lt;code&gt;mnesia:add_table_copy/3&lt;/code&gt;. The function can be started even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;db_nodes&lt;/code&gt; . 지속적 데이터베이스를 구성하는 노드를 리턴합니다. 디스크없는 노드는 노드에 명시 적으로 추가 된 경우 (예 &lt;code&gt;mnesia:add_table_copy/3&lt;/code&gt; 노드 목록에만 포함됩니다 . Mnesia가 아직 실행되고 있지 않더라도이 기능을 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c673477036951a729c93b1f7508951bcd97906c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; is a generic Erlang trace tool. By using the &lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;cpu_timestamp&lt;/code&gt; options it can be used as a precision instrument to profile how long time a function call takes for a specific process. This can be very useful when trying to understand where time is spent in a heavily loaded system as it is possible to limit the scope of what is profiled to be very small. For more information, see the &lt;code&gt;dbg&lt;/code&gt; manual page in Runtime Tools.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; 는 일반적인 Erlang 추적 도구입니다. 사용하여 &lt;code&gt;timestamp&lt;/code&gt; 또는 &lt;code&gt;cpu_timestamp&lt;/code&gt; 옵션을 함수 호출은 특정 공정에 걸리는 시간 프로파일 정밀 기기로 사용할 수 있습니다. 이는로드가 많은 시스템에서 시간이 소비되는 위치를 이해하려고 할 때 매우 유용 할 수 있습니다. 프로파일 링되는 대상의 범위를 매우 작게 제한 할 수 있기 때문입니다. 자세한 정보 는 런타임 도구 의 &lt;code&gt;dbg&lt;/code&gt; 매뉴얼 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="999dad6d17987fb1d2c6e7351c9927faffa26e0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; is equivalent to &lt;code&gt;tracer(node(),[{shell, only}])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; 는 &lt;code&gt;tracer(node(),[{shell, only}])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="17caedf6cb86230e39ee34c9c7862972a59e53b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; is the generic erlang tracing frontend. By using the &lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;cpu_timestamp&lt;/code&gt; options it can be used to time how long function calls in a live system take.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; 는 일반적인 얼랭 추적 프론트 엔드입니다. 사용하여 &lt;code&gt;timestamp&lt;/code&gt; 또는 &lt;code&gt;cpu_timestamp&lt;/code&gt; 옵션을 그것은 긴 기능은 라이브 시스템 걸릴에서 호출하는 방법을 시간을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="383891b92b7728a806802597bdf39747dcb86b32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; mode</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; 모드</target>
        </trans-unit>
        <trans-unit id="108caa6a9c7c9fe0b3f193cf88ae1a060d7ab2de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt;. Returns the current debug level of Mnesia.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; . Mnesia의 현재 디버그 수준을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="65c5fbce6c513cedd45826710958863898a9a595" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; for normal data</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 일반 데이터의 기본값</target>
        </trans-unit>
        <trans-unit id="3bfd8f4c4d96227dcf3984ef94def308ee7c9e83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default_bind&lt;/code&gt; - Binds schedulers the default way. Defaults to &lt;code&gt;thread_no_node_processor_spread&lt;/code&gt; (which can change in the future).</source>
          <target state="translated">&lt;code&gt;default_bind&lt;/code&gt; - 스케줄러를 기본 방식으로 바인딩합니다. 기본값은 &lt;code&gt;thread_no_node_processor_spread&lt;/code&gt; (향후 변경 될 수 있음)입니다.</target>
        </trans-unit>
        <trans-unit id="100310a5ba2c1c425121b816b4152b6d3217a9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_group/2, delete_group/3&lt;/code&gt;, and &lt;code&gt;delete_group/4&lt;/code&gt; each deletes the group specified and returns &lt;code&gt;true&lt;/code&gt;. If there is an error, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;delete_group/2&lt;/code&gt; is called, option &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;delete_group/2, delete_group/3&lt;/code&gt; 및 &lt;code&gt;delete_group/4&lt;/code&gt; 는 각각 지정된 그룹을 삭제하고 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 오류가 있으면 &lt;code&gt;{error, Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;delete_group/2&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="5d4db6f5286e6d6750d8c05c56534f0a1605b2dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_group_member/3, delete_group_member/4&lt;/code&gt;, and &lt;code&gt;delete_group_member/5&lt;/code&gt; each deletes a user from a group. If the group or the user does not exist, this function returns an error, otherwise &lt;code&gt;true&lt;/code&gt;. When &lt;code&gt;delete_group_member/3&lt;/code&gt; is called, the options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;delete_group_member/3, delete_group_member/4&lt;/code&gt; 및 &lt;code&gt;delete_group_member/5&lt;/code&gt; 는 각각 그룹에서 사용자를 삭제합니다. 그룹이나 사용자가 존재하지 않으면이 함수는 오류를 반환하고 그렇지 않으면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 때 &lt;code&gt;delete_group_member/3&lt;/code&gt; 이라고, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="7a9b6df1fd63a50104f12248edc73eeabaafd916" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_user/2, delete_user/3&lt;/code&gt;, and &lt;code&gt;delete_user/4&lt;/code&gt; each deletes a user from the user database. If the operation is successful, this function returns &lt;code&gt;true&lt;/code&gt;. If an error occurs, &lt;code&gt;{error,Reason}&lt;/code&gt; is returned. When &lt;code&gt;delete_user/2&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;delete_user/2, delete_user/3&lt;/code&gt; 및 &lt;code&gt;delete_user/4&lt;/code&gt; 는 각각 사용자 데이터베이스에서 사용자를 삭제합니다. 작업이 성공하면이 함수는 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 오류가 발생하면 &lt;code&gt;{error,Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;delete_user/2&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="a7b518efd8daf88742e92d33d880b350e2bac1f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deliver/3&lt;/code&gt; sends &lt;code&gt;Data&lt;/code&gt; over &lt;code&gt;Socket&lt;/code&gt; using the specified &lt;code&gt;SocketType&lt;/code&gt;. &lt;code&gt;Socket&lt;/code&gt; and &lt;code&gt;SocketType&lt;/code&gt; is to be the socket and the &lt;code&gt;socket_type&lt;/code&gt; form the &lt;code&gt;mod&lt;/code&gt; record as defined in &lt;code&gt;httpd.hrl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;deliver/3&lt;/code&gt; 은 지정된 &lt;code&gt;SocketType&lt;/code&gt; 을 사용하여 &lt;code&gt;Socket&lt;/code&gt; 을 통해 &lt;code&gt;Data&lt;/code&gt; 를 보냅니다 . &lt;code&gt;Socket&lt;/code&gt; 및 &lt;code&gt;SocketType&lt;/code&gt; 은 소켓이고 &lt;code&gt;socket_type&lt;/code&gt; 은 &lt;code&gt;httpd.hrl&lt;/code&gt; 에 정의 된대로 &lt;code&gt;mod&lt;/code&gt; 레코드를 형성합니다.</target>
        </trans-unit>
        <trans-unit id="31ef7900d5c5757691bc7bbeceb5751161d490e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;demonitor(MonitorRef, [])&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor(MonitorRef)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;demonitor(MonitorRef, [])&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor(MonitorRef)&lt;/a&gt;&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="cd2fdb40dfa166ca494c05463a92fced74b0557b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecated&lt;/code&gt;, the second element is a sorted list of calls to deprecated functions;</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 경우, 두 번째 요소는 더 이상 사용되지 않는 함수에 대한 호출의 정렬 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ee868e13126c26dc9a787ae1e2cc0dbb0a70c58b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecated&lt;/code&gt;, the second element is a sorted list of externally used deprecated functions;</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; . 두 번째 요소는 외부에서 사용되는 더 이상 사용되지 않는 함수의 정렬 된 목록입니다.</target>
        </trans-unit>
        <trans-unit id="319a0fb5eab817dda6c01d5820ff0037dd8bd878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dept&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dept&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="cc29ccdb337f80df256280bd273a5e77f44127bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth : integer&lt;/code&gt; :: Stack depth. Ex. &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;depth : integer&lt;/code&gt; :: 스택 깊이. 전의. &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd05717828c4848f5d3564e59af45c2ef0f343af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt; - A short description, a string. Defaults to &quot;&quot;.</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt; - 간단한 설명, 문자열. 기본값은 &quot;&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="85b6308eff6598024e34eb55b4a1298c9e62a106" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;diameter_app(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;diameter_dict(4)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;diameter_app(3)&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;diameter_dict(4)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d55ee1f62fef4cf459b94cd5df403faf0b90ddee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt; - If present, points to a directory where a file to which all data in the ets table is &quot;synced&quot;.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; - 존재하는 경우 ets 테이블의 모든 데이터가 &quot;동기화 된&quot;파일이있는 디렉토리를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="0cb1144fcd4bf4d5089b297e90a677a15ff4c23b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt; - This &lt;strong&gt;mandatory&lt;/strong&gt; option points to a directory where to place the file of a dets table.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; -이 &lt;strong&gt;필수&lt;/strong&gt; dets 테이블의 파일을 저장하는 디렉토리 옵션을 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="b605d7fbb8a0d7d4f4a4bbe6c4e2e64588b8aa6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt; in config is mandatory.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; 설정의 dir 은 필수입니다.</target>
        </trans-unit>
        <trans-unit id="1458b26f6035d8be2020b2d8b4ef95611795c664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the directory where the &lt;code&gt;&lt;a href=&quot;#library_module&quot;&gt;library module's&lt;/a&gt;&lt;/code&gt; BEAM file is located.</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#library_module&quot;&gt;library module's&lt;/a&gt;&lt;/code&gt; BEAM 파일이 있는 디렉토리 .</target>
        </trans-unit>
        <trans-unit id="f2e9238fb07723dc0c2f90525328a7856c465077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the directory where the module's BEAM file is located;</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; - 모듈의 BEAM 파일이있는 디렉토리;</target>
        </trans-unit>
        <trans-unit id="44f4e0e98d0c51c1545f8ddde56354f21e9a0c98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the directory where the modules' BEAM files are located;</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; - 모듈의 BEAM 파일이있는 디렉토리;</target>
        </trans-unit>
        <trans-unit id="7cb229102fa7099945b4b0429f46df0906ccb986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the release directory;</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; , 릴리스 디렉토리;</target>
        </trans-unit>
        <trans-unit id="cade714c9bb756cacf4a7301a0c998f14afc09d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;. Returns the name of the Mnesia directory. It can be called even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; . Mnesia 디렉토리의 이름을 반환합니다. Mnesia가 아직 실행 중이 아니더라도 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48d0811320e12d34ce2b617aeb062bab8990a26c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory_index&lt;/code&gt; specifies a list of resources to look for if a client requests a directory using a &lt;code&gt;/&lt;/code&gt; at the end of the directory name. &lt;code&gt;file&lt;/code&gt; depicts the name of a file in the directory. Several files can be given, in which case the server returns the first it finds, for example:</source>
          <target state="translated">&lt;code&gt;directory_index&lt;/code&gt; 는 클라이언트가 디렉토리 이름의 끝에 &lt;code&gt;/&lt;/code&gt; 를 사용하여 디렉토리를 요청하는 경우 찾을 자원 목록을 지정합니다 . &lt;code&gt;file&lt;/code&gt; 은 디렉토리에있는 파일 이름을 나타냅니다. 여러 파일을 제공 할 수 있으며,이 경우 서버는 가장 먼저 찾은 파일을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="043ee13ece50666ab9350e2d84d985c18e0bfb0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disabled&lt;/code&gt; - Disable BEAST mitigation.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; -BEAST 완화를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="91c6fec592eea4d837be060abf6f9d6a2694d8bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_copies&lt;/code&gt;. Returns the nodes where a &lt;code&gt;disc_copy&lt;/code&gt; of the table resides according to the schema.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; . 스키마에 따라 테이블 의 &lt;code&gt;disc_copy&lt;/code&gt; 가 상주 하는 노드를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="528b7a8d42d9b5d4952e0db2f2ad3f096a0108ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_copies&lt;/code&gt;. The value of the attribute is a list of Erlang nodes, and a replica of the table resides both in RAM and on disc on each node in the list. Write operations addressed to the table address both the RAM and the disc copy of the table.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; . 속성의 값은 Erlang 노드의 목록이며 테이블의 복제본은 목록의 각 노드에서 RAM과 디스크에 상주합니다. 테이블에 대한 쓰기 작업은 RAM과 테이블의 디스크 복사본을 모두 처리합니다.</target>
        </trans-unit>
        <trans-unit id="f7e2c5cdc73ebc52fd236fc4cf50f7ba471876d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_copies&lt;/code&gt;. This property specifies a list of Erlang nodes where the table is kept in RAM and on disc. All updates of the table are performed in the actual table and are also logged to disc. If a table is of type &lt;code&gt;disc_copies&lt;/code&gt; at a certain node, the entire table is resident in RAM memory and on disc. Each transaction performed on the table is appended to a &lt;code&gt;LOG&lt;/code&gt; file and written into the RAM table.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; . 이 특성은 테이블이 RAM 및 디스크에 보관되는 Erlang 노드 목록을 지정합니다. 테이블의 모든 업데이트는 실제 테이블에서 수행되며 디스크에도 기록됩니다. 테이블이 특정 노드에서 &lt;code&gt;disc_copies&lt;/code&gt; 유형 인 경우 전체 테이블은 RAM 메모리와 디스크에 상주합니다. 테이블에서 수행 된 각 트랜잭션은 &lt;code&gt;LOG&lt;/code&gt; 파일에 추가되고 RAM 테이블에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="726573780291c89bb3847af9c71db60a2833ec14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_only_copies&lt;/code&gt;. Returns the nodes where a &lt;code&gt;disc_only_copy&lt;/code&gt; of the table resides according to the schema.</source>
          <target state="translated">&lt;code&gt;disc_only_copies&lt;/code&gt; . 스키마에 따라 테이블 의 &lt;code&gt;disc_only_copy&lt;/code&gt; 가 상주 하는 노드를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="54cb9adf6cce29c6773c5ad5c9dc1dfcea2dfc60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_only_copies&lt;/code&gt;. Some, or all, table replicas can be kept on disc only. These replicas are considerably slower than the RAM-based replicas.</source>
          <target state="translated">&lt;code&gt;disc_only_copies&lt;/code&gt; . 일부 또는 모든 테이블 복제본은 디스크에만 보관할 수 있습니다. 이러한 복제본은 RAM 기반 복제본보다 상당히 느립니다.</target>
        </trans-unit>
        <trans-unit id="c18b242d445ffca079379b754a73022a336f4a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_only_copies&lt;/code&gt;. The value of the attribute is a list of Erlang nodes, and a replica of the table resides only as a disc copy on each node in the list. The major disadvantage of this type of table replica is the access speed. The major advantage is that the table does not occupy space in memory.</source>
          <target state="translated">&lt;code&gt;disc_only_copies&lt;/code&gt; . 속성 값은 Erlang 노드의 목록이며 테이블의 복제본은 목록의 각 노드에 디스크 사본으로 만 존재합니다. 이 유형의 테이블 복제본의 주요 단점은 액세스 속도입니다. 가장 큰 장점은 테이블이 메모리의 공간을 차지하지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7f03df437c65ff33591d435acb1cef33342009d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnect/1&lt;/code&gt; closes the database connection and the driver. (However, it does not unload it.)</source>
          <target state="translated">&lt;code&gt;disconnect/1&lt;/code&gt; 은 데이터베이스 연결 및 드라이버를 닫습니다. (그러나 언로드하지는 않습니다.)</target>
        </trans-unit>
        <trans-unit id="40239310c66be0c67b6c6e72002aa2ac11ea8c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnect&lt;/code&gt; if a SSH_MSG_DISCONNECT message should be sent immediately. It will be followed by a close of the underlying tcp connection.</source>
          <target state="translated">&lt;code&gt;disconnect&lt;/code&gt; SSH_MSG_DISCONNECT 메시지를 즉시 보내야하는 경우 연결을 끊 습니다. 그런 다음 기본 tcp 연결을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="337d23a9ffc8ed74295386f439f4029d6e7bccc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disk_log&lt;/code&gt; is a disk-based term logger that enables efficient logging of items on files.</source>
          <target state="translated">&lt;code&gt;disk_log&lt;/code&gt; 는 파일에 항목을 효율적으로 기록 할 수있는 디스크 기반 용어 로거입니다.</target>
        </trans-unit>
        <trans-unit id="557289d732508771fba2de6df7f71aa4fd478af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disksup&lt;/code&gt; is a process which supervises the available disk space in the system. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix and Windows.</source>
          <target state="translated">&lt;code&gt;disksup&lt;/code&gt; 은 시스템에서 사용 가능한 디스크 공간을 감독하는 프로세스입니다. OS_Mon 응용 프로그램의 일부입니다 &lt;code&gt;os_mon(6)&lt;/code&gt; 참조 ) . Unix 및 Windows에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="aed630569409785073ef89b28862b9ae641e65a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; will perform the handshake and if the handshake successfully completes this process will then continue in a connection supervisor loop as long as the connection is up.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; 는 핸드 셰이크를 수행하고 핸드 셰이크가 성공적으로 완료되면이 프로세스가 연결이 작동하는 한 연결 관리자 루프에서 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="27751a38cd4a9b2acc5282619252530fe6ce8226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; will perform the handshake and the handshake successfully completes this process will then continue in a connection supervisor loop as long as the connection is up.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; 는 핸드 셰이크를 수행하고 핸드 셰이크가 성공적으로 완료되면이 프로세스는 연결이 작동하는 한 연결 관리자 루프에서 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="4429d38e80eee115e892f24ce877c4a14468e02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;distrvsn&lt;/code&gt; 2 was never used.</source>
          <target state="translated">&lt;code&gt;distrvsn&lt;/code&gt; 2는 사용되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="cc8e261e926a667c2b9c7d3069b083201c1d8312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dns&lt;/code&gt; (use the Erlang DNS client &lt;code&gt;inet_res(3)&lt;/code&gt; for nameserver queries)</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; ( 이름 서버 쿼리에 Erlang DNS 클라이언트 &lt;code&gt;inet_res(3)&lt;/code&gt; 사용)</target>
        </trans-unit>
        <trans-unit id="6c08cc6086a582b21e793f0239a11699599eac87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do/1&lt;/code&gt; (mandatory) - the function called when a request is to be handled</source>
          <target state="translated">&lt;code&gt;do/1&lt;/code&gt; (필수)-요청을 처리 할 때 호출되는 함수</target>
        </trans-unit>
        <trans-unit id="758e77371d75d6c6e7aebbc8c64b91f227479100" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do_connect&lt;/code&gt; is where we log in to the database. If the connection was successful, we store the connection handle in the driver data, and return &lt;code&gt;'ok'&lt;/code&gt;. Otherwise, we return the error message from postgres and store &lt;code&gt;NULL&lt;/code&gt; in the driver data.</source>
          <target state="translated">&lt;code&gt;do_connect&lt;/code&gt; 는 데이터베이스에 로그인하는 곳입니다. 연결에 성공하면 연결 핸들을 드라이버 데이터에 저장하고 &lt;code&gt;'ok'&lt;/code&gt; 를 반환 합니다. 그렇지 않으면 postgres에서 오류 메시지를 반환 하고 드라이버 데이터에 &lt;code&gt;NULL&lt;/code&gt; 을 저장 합니다 .</target>
        </trans-unit>
        <trans-unit id="0ca9c6c5b4c69e3276930037f7b9016cb2b8633f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/examples&lt;/code&gt; - Recommended. Source code for examples on how to use this application should be placed here. It is encouraged that examples are sourced to the public documentation from this directory.</source>
          <target state="translated">&lt;code&gt;doc/examples&lt;/code&gt; -권장 이 응용 프로그램을 사용하는 방법에 대한 예제 소스 코드를 여기에 배치해야합니다. 예제는이 디렉토리에서 공개 문서로 제공되는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="cd6258308058537c9e5e0c91ffb5f785a17fe90d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/html&lt;/code&gt; - Optional. HTML pages for the entire Application.</source>
          <target state="translated">&lt;code&gt;doc/html&lt;/code&gt; - 선택 사항. 전체 응용 프로그램의 HTML 페이지</target>
        </trans-unit>
        <trans-unit id="d19b63341025752926dd220b3c4dcdb81e31d112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/internal&lt;/code&gt; - Recommended. Any documentation that describes implementation details about this application, not intended for publication, should be placed here.</source>
          <target state="translated">&lt;code&gt;doc/internal&lt;/code&gt; -권장 출판 용이 아닌이 애플리케이션에 대한 구현 세부 사항을 설명하는 문서를 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="2758f6c8961028bd2d92836df413d8c156acb8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/man1&lt;/code&gt; - Recommended. Man pages for Application executables.</source>
          <target state="translated">&lt;code&gt;doc/man1&lt;/code&gt; - 권장. 응용 프로그램 실행 파일에 대한 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="b6861858042b0017b401d18b45b93129267b5273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/man3&lt;/code&gt; - Recommended. Man pages for module APIs.</source>
          <target state="translated">&lt;code&gt;doc/man3&lt;/code&gt; - 권장 모듈 API에 대한 매뉴얼 페이지.</target>
        </trans-unit>
        <trans-unit id="b02f30cc869ef03af4b822d7cbda0d15b2fdf155" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/man6&lt;/code&gt; - Recommended. Man pages for Application overview.</source>
          <target state="translated">&lt;code&gt;doc/man6&lt;/code&gt; - 권장. 응용 프로그램 개요에 대한 매뉴얼 페이지.</target>
        </trans-unit>
        <trans-unit id="f0cd45a88d7bad374736ea37b733712282132583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/pdf&lt;/code&gt; - Optional. PDF documentation for the entire Application.</source>
          <target state="translated">&lt;code&gt;doc/pdf&lt;/code&gt; - 옵션. 전체 응용 프로그램에 대한 PDF 설명서.</target>
        </trans-unit>
        <trans-unit id="e22d1099778d41d3465cbe9215d1d489edc223b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/src&lt;/code&gt; - Recommended. All source files for documentation, such as Markdown, AsciiDoc or XML-files, should be placed here.</source>
          <target state="translated">&lt;code&gt;doc/src&lt;/code&gt; - 권장 Markdown, AsciiDoc 또는 XML 파일과 같은 문서화를위한 모든 소스 파일을 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="a5e549dfbc183aa20b7e60adc165e6f9ab1412b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&lt;/code&gt; - Optional. Any released documentation should be placed in sub-directories here.</source>
          <target state="translated">&lt;code&gt;doc&lt;/code&gt; - 선택 사항. 릴리스 된 모든 문서는 여기에 하위 디렉토리에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="7f056e1e74df915b2c2fa2305e33ff60673a4ab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&lt;/code&gt; - Recommended. Any source documentation should be placed in sub-directories here.</source>
          <target state="translated">&lt;code&gt;doc&lt;/code&gt; - 추천. 모든 소스 문서는 여기에 하위 디렉토리에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6f833f13a1c81da53aed690dbf7008110c793525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drestriction(F,&amp;nbsp;S1,&amp;nbsp;S2)&lt;/code&gt; is equivalent to &lt;code&gt;difference(S1,&amp;nbsp;restriction(F,&amp;nbsp;S1,&amp;nbsp;S2))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;drestriction(F,&amp;nbsp;S1,&amp;nbsp;S2)&lt;/code&gt; 은 &lt;code&gt;difference(S1,&amp;nbsp;restriction(F,&amp;nbsp;S1,&amp;nbsp;S2))&lt;/code&gt; constraint (F, S1, S2) )와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="10d9ee6303d3aae6c02ed6122ee8a1ba1cce072a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drestriction(R,&amp;nbsp;S)&lt;/code&gt; is equivalent to &lt;code&gt;difference(R,&amp;nbsp;restriction(R,&amp;nbsp;S))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;drestriction(R,&amp;nbsp;S)&lt;/code&gt; 동등 &lt;code&gt;difference(R,&amp;nbsp;restriction(R,&amp;nbsp;S))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="293430c5917d960f03ddc8507df43a37a619109e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driver : string&lt;/code&gt; :: Driver name. Ex. &lt;code&gt;&quot;tcp_inet&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;driver : string&lt;/code&gt; :: 드라이버 이름. 전의. &lt;code&gt;&quot;tcp_inet&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8aff5f2fa6f9e60bdccdad2300f684488c04eea2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driver_binary_dec_refc&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; free the binary if the reference count reaches zero. &lt;strong&gt;Only&lt;/strong&gt; use &lt;code&gt;driver_binary_dec_refc&lt;/code&gt; when you are sure &lt;strong&gt;not&lt;/strong&gt; to reach a reference count of zero.</source>
          <target state="translated">&lt;code&gt;driver_binary_dec_refc&lt;/code&gt; 참조 카운트가 0에 도달하면 driver_binary_dec_refc 는 바이너리를 해제 하지 &lt;strong&gt;않습니다&lt;/strong&gt; . 참조 카운트가 0에 도달 &lt;strong&gt;하지 않은&lt;/strong&gt; 경우 &lt;strong&gt;에만 &lt;/strong&gt; &lt;code&gt;driver_binary_dec_refc&lt;/code&gt; 를 사용 하십시오 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15e677a3b16d73ec64d29f8ceacede85bc67cf35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driver_level&lt;/code&gt; (driver-specific locking)</source>
          <target state="translated">&lt;code&gt;driver_level&lt;/code&gt; (드라이버 별 잠금)</target>
        </trans-unit>
        <trans-unit id="0125d3a924b41ddc0030d5e7607910de2b7b720f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dropwhile&lt;/code&gt; is the complement of &lt;code&gt;takewhile&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dropwhile&lt;/code&gt; 은 의 보완 &lt;code&gt;takewhile&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="9f7909fee906d343c0aa5bd36ea79f988740fc50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_load_regulation&lt;/code&gt;. Returns a boolean that tells if Mnesia is configured to regulate the dumper process load.</source>
          <target state="translated">&lt;code&gt;dump_log_load_regulation&lt;/code&gt; . Mnesia가 덤퍼 프로세스로드를 조정하도록 구성되어 있는지 여부를 알려주는 부울을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8104ad964b40039298afcda9708b67844d8e557a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_time_threshold&lt;/code&gt;. Returns the time threshold for transaction log dumps in milliseconds.</source>
          <target state="translated">&lt;code&gt;dump_log_time_threshold&lt;/code&gt; . 트랜잭션 로그 덤프의 시간 임계 값을 밀리 초 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="68fa023d228fd1006cc26e2b3d488a47193b8260" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_update_in_place&lt;/code&gt;. Returns a boolean that tells if Mnesia is configured to perform the updates in the Dets files directly, or if the updates are to be performed in a copy of the Dets files.</source>
          <target state="translated">&lt;code&gt;dump_log_update_in_place&lt;/code&gt; . Mnesia가 Dets 파일에서 직접 업데이트를 수행하도록 구성되어 있는지 또는 Dets 파일의 복사본에서 업데이트가 수행되는지를 알려주는 부울을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="164ccf30a88e90adbcef980a0252f2b5604f51da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_write_threshold&lt;/code&gt;. Returns the write threshold for transaction log dumps as the number of writes to the transaction log.</source>
          <target state="translated">&lt;code&gt;dump_log_write_threshold&lt;/code&gt; . 트랜잭션 로그에 대한 쓰기 수로 트랜잭션 로그 덤프에 대한 쓰기 임계 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8efd7acd752040ce0610dba0bc21d842b2acc5b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duplicate_bag&lt;/code&gt;. A table of this type has zero or more possibly matching objects with a given key.</source>
          <target state="translated">&lt;code&gt;duplicate_bag&lt;/code&gt; . 이 유형의 테이블에는 주어진 키와 0 개 이상의 일치하는 오브젝트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="509e99235626804ee03942d4e4dd128dc2a449a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e2big&lt;/code&gt; - Too long argument list</source>
          <target state="translated">&lt;code&gt;e2big&lt;/code&gt; - 너무 긴 인수 목록</target>
        </trans-unit>
        <trans-unit id="f4aa1de11e8b801606f716b414193a95f9a37f1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; means that the API function returns an error whenever a wrongly encoded filename (or directory name) is encountered.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; 는 잘못 인코딩 된 파일 이름 (또는 디렉토리 이름)이 발생할 때마다 API 함수가 오류를 반환 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="55039e91caf7b40fa7a456c35f26b3365687917a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eacces&lt;/code&gt; - Permission denied</source>
          <target state="translated">&lt;code&gt;eacces&lt;/code&gt; - 권한 거부</target>
        </trans-unit>
        <trans-unit id="3e6bd5eb4b99ab85b151e2a5a7e15c6634cd9406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eaddrinuse&lt;/code&gt; - Address already in use</source>
          <target state="translated">&lt;code&gt;eaddrinuse&lt;/code&gt; - 이미 사용중인 주소</target>
        </trans-unit>
        <trans-unit id="6892434fcb77e07ac4e5efceb1883f60123c5823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eaddrnotavail&lt;/code&gt; - Cannot assign requested address</source>
          <target state="translated">&lt;code&gt;eaddrnotavail&lt;/code&gt; - 요청 된 주소를 할당 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="e6a773b56de31ecc678e62af9fd28a27b8596efd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eadv&lt;/code&gt; - Advertise error</source>
          <target state="translated">&lt;code&gt;eadv&lt;/code&gt; -보급 오류</target>
        </trans-unit>
        <trans-unit id="2a4fb7993ee899f4b8be63772b158c656628ee70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eafnosupport&lt;/code&gt; - Address family not supported by protocol family</source>
          <target state="translated">&lt;code&gt;eafnosupport&lt;/code&gt; - 프로토콜 제품군에서 지원하지 않는 주소 제품군</target>
        </trans-unit>
        <trans-unit id="d3dbabbe2c23aeadb69a13791d0d4b64efcc1a95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eagain&lt;/code&gt; - Resource temporarily unavailable</source>
          <target state="translated">&lt;code&gt;eagain&lt;/code&gt; - 자원을 일시적으로 사용할 수 없음</target>
        </trans-unit>
        <trans-unit id="2b77a28f808897941f7957faf3870802a8b1b4d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ealign&lt;/code&gt; - EALIGN</source>
          <target state="translated">&lt;code&gt;ealign&lt;/code&gt; -EALIGN</target>
        </trans-unit>
        <trans-unit id="73fe5ba1c39c10b02ecef45d731f5cc948ad1ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ealready&lt;/code&gt; - Operation already in progress</source>
          <target state="translated">&lt;code&gt;ealready&lt;/code&gt; - 이미 진행중인 작업</target>
        </trans-unit>
        <trans-unit id="fa9f8ee2675777b13c8dd3149c36f018ef9d52b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebade&lt;/code&gt; - Bad exchange descriptor</source>
          <target state="translated">&lt;code&gt;ebade&lt;/code&gt; - 잘못된 교환 설명자</target>
        </trans-unit>
        <trans-unit id="345608161dc45c2d891a9f54a66016b63ff612e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadf&lt;/code&gt; - Bad file number</source>
          <target state="translated">&lt;code&gt;ebadf&lt;/code&gt; - 잘못된 파일 번호</target>
        </trans-unit>
        <trans-unit id="521c40efbf72458304815b505d5ba642ba7e891b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadfd&lt;/code&gt; - File descriptor in bad state</source>
          <target state="translated">&lt;code&gt;ebadfd&lt;/code&gt; - 잘못된 상태의 파일 디스크립터</target>
        </trans-unit>
        <trans-unit id="5068b7a48dbca1388c29202a255de4ca6a39c5f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadmsg&lt;/code&gt; - Not a data message</source>
          <target state="translated">&lt;code&gt;ebadmsg&lt;/code&gt; - 데이터 메시지가 아님</target>
        </trans-unit>
        <trans-unit id="5e392c0f388fdfe7a467c0c9dd6424d6c866be27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadr&lt;/code&gt; - Bad request descriptor</source>
          <target state="translated">&lt;code&gt;ebadr&lt;/code&gt; - 잘못된 요청 디스크립터</target>
        </trans-unit>
        <trans-unit id="d2d55204466ecfc02bb0f07f33c4374f20ddd7f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadrpc&lt;/code&gt; - Bad RPC structure</source>
          <target state="translated">&lt;code&gt;ebadrpc&lt;/code&gt; - 잘못된 RPC 구조</target>
        </trans-unit>
        <trans-unit id="bd4bbeab4c0e94ea1d9093a6f486e8a4d099de5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadrqc&lt;/code&gt; - Bad request code</source>
          <target state="translated">&lt;code&gt;ebadrqc&lt;/code&gt; - 잘못된 요청 코드</target>
        </trans-unit>
        <trans-unit id="e909c26b6f3cab35940f74e951dbb315e35ad206" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadslt&lt;/code&gt; - Invalid slot</source>
          <target state="translated">&lt;code&gt;ebadslt&lt;/code&gt; - 유효하지 않은 슬롯</target>
        </trans-unit>
        <trans-unit id="3adf2baab88df72fcbac594781c1731bb7d238fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebfont&lt;/code&gt; - Bad font file format</source>
          <target state="translated">&lt;code&gt;ebfont&lt;/code&gt; - 잘못된 글꼴 파일 형식</target>
        </trans-unit>
        <trans-unit id="b2fa84d5408c4cb2ac9e31aa0044d4ee1ff1e9d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebin&lt;/code&gt; - Required. Contains the Erlang object code, the &lt;code&gt;beam&lt;/code&gt; files. The &lt;code&gt;.app&lt;/code&gt; file must also be placed here.</source>
          <target state="translated">&lt;code&gt;ebin&lt;/code&gt; - 필수입니다. Erlang 객체 코드, &lt;code&gt;beam&lt;/code&gt; 파일을 포함합니다. &lt;code&gt;.app&lt;/code&gt; 파일도 여기에 배치해야합니다.</target>
        </trans-unit>
        <trans-unit id="4fa121fdbbaf2c38de45f0099796666e958a373c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebusy&lt;/code&gt; - File busy</source>
          <target state="translated">&lt;code&gt;ebusy&lt;/code&gt; - 파일 사용 중</target>
        </trans-unit>
        <trans-unit id="8d187bbf6c20594ac206cda3e5be0ba56355a74e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is a structure containing information about the C-node. It is used in other &lt;code&gt;ei&lt;/code&gt; functions for connecting and receiving data.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; 는 C- 노드에 대한 정보를 포함하는 구조입니다. 데이터를 연결하고 수신하기위한 다른 &lt;code&gt;ei&lt;/code&gt; 기능에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="6340a11a3bc8bd9ce89fd41568927cda040c6ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the C-node structure previously initiated by a call to &lt;code&gt;ei_connect_init()&lt;/code&gt; or &lt;code&gt;ei_connect_xinit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; 은 &lt;code&gt;ei_connect_init()&lt;/code&gt; 또는 &lt;code&gt;ei_connect_xinit()&lt;/code&gt; 호출로 이전에 시작된 C 노드 구조 입니다.</target>
        </trans-unit>
        <trans-unit id="afdad500375ddaef47fb87c7209e14cdecbf5534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the C-node structure.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; 는 C- 노드 구조입니다.</target>
        </trans-unit>
        <trans-unit id="e3416d6f2e71e8704055690440931e55bd73f834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the node structure of the node to unregister.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; 는 등록을 취소 할 노드의 노드 구조입니다.</target>
        </trans-unit>
        <trans-unit id="9198cdf1d84cf072370c01ff67cd3c441fafd696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echild&lt;/code&gt; - No children</source>
          <target state="translated">&lt;code&gt;echild&lt;/code&gt; - 자녀 없음</target>
        </trans-unit>
        <trans-unit id="d8c274cda0e7265a697f0208a5d2f6b2ea43125c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echrng&lt;/code&gt; - Channel number out of range</source>
          <target state="translated">&lt;code&gt;echrng&lt;/code&gt; - 채널 번호가 범위를 벗어남</target>
        </trans-unit>
        <trans-unit id="f86009a519d34374f034ee01de66ece004213c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ecomm&lt;/code&gt; - Communication error on send</source>
          <target state="translated">&lt;code&gt;ecomm&lt;/code&gt; - 전송시 통신 오류</target>
        </trans-unit>
        <trans-unit id="ad02f03d6a203fffc5404da7433b3dce465e04ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;econnaborted&lt;/code&gt; - Software caused connection abort</source>
          <target state="translated">&lt;code&gt;econnaborted&lt;/code&gt; - 소프트웨어로 인해 연결이 중단되었습니다</target>
        </trans-unit>
        <trans-unit id="cd5292bfcde1c23a92c0b953fb2f9864055919e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;econnrefused&lt;/code&gt; - Connection refused</source>
          <target state="translated">&lt;code&gt;econnrefused&lt;/code&gt; - 연결 거부</target>
        </trans-unit>
        <trans-unit id="9e02a71ef8223a81da0683e22f774c0548e5e3f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;econnreset&lt;/code&gt; - Connection reset by peer</source>
          <target state="translated">&lt;code&gt;econnreset&lt;/code&gt; - 피어에 의한 연결 재설정</target>
        </trans-unit>
        <trans-unit id="64225ea069eca2fe11239f4dd101bbf3a344b646" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edeadlk&lt;/code&gt; - Resource deadlock avoided</source>
          <target state="translated">&lt;code&gt;edeadlk&lt;/code&gt; - 자원 교착 상태 방지</target>
        </trans-unit>
        <trans-unit id="095df8379d52a8da678df15db5e4fcfb4ed3f32e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edeadlock&lt;/code&gt; - Resource deadlock avoided</source>
          <target state="translated">&lt;code&gt;edeadlock&lt;/code&gt; - 자원 교착 상태 방지</target>
        </trans-unit>
        <trans-unit id="ab55eeadd852f02dc987140e5e80954ca723033a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edestaddrreq&lt;/code&gt; - Destination address required</source>
          <target state="translated">&lt;code&gt;edestaddrreq&lt;/code&gt; - 목적지 주소 필요</target>
        </trans-unit>
        <trans-unit id="32714baed792ef1ae2ba1ddeba140d9e1d5c75ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edirty&lt;/code&gt; - Mounting a dirty fs without force</source>
          <target state="translated">&lt;code&gt;edirty&lt;/code&gt; - 힘없이 더러운 fs 마운트</target>
        </trans-unit>
        <trans-unit id="c96fb6b356634fa47ecc45e13e4767f1a487be6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edom&lt;/code&gt; - Math argument out of range</source>
          <target state="translated">&lt;code&gt;edom&lt;/code&gt; - 수학 인수가 범위를 벗어남</target>
        </trans-unit>
        <trans-unit id="c2b16bb6289f694cad74cd8a713645eaee77ff9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edotdot&lt;/code&gt; - Cross mount point</source>
          <target state="translated">&lt;code&gt;edotdot&lt;/code&gt; - 교차 장착 지점</target>
        </trans-unit>
        <trans-unit id="bf780eaa3cf1f92292584c219151a16c7c97f893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edquot&lt;/code&gt; - Disk quota exceeded</source>
          <target state="translated">&lt;code&gt;edquot&lt;/code&gt; - 디스크 할당량을 초과했습니다</target>
        </trans-unit>
        <trans-unit id="8101e6d13cf9ad1420ddb02686af8efbc7ee96ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eduppkg&lt;/code&gt; - Duplicate package name</source>
          <target state="translated">&lt;code&gt;eduppkg&lt;/code&gt; - 중복 패키지 이름</target>
        </trans-unit>
        <trans-unit id="253045380edccb1e96e308e563f065d78d92da16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eexist&lt;/code&gt; - File already exists</source>
          <target state="translated">&lt;code&gt;eexist&lt;/code&gt; - 파일이 이미 존재합니다</target>
        </trans-unit>
        <trans-unit id="7861bdf01f2da8926a782fa7b91b00ece5ce08d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;efault&lt;/code&gt; - Bad address in system call argument</source>
          <target state="translated">&lt;code&gt;efault&lt;/code&gt; - 시스템 호출 인수의 잘못된 주소</target>
        </trans-unit>
        <trans-unit id="16c138959d338b1ce08e97d4d9602167e5b1e243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;efbig&lt;/code&gt; - File too large</source>
          <target state="translated">&lt;code&gt;efbig&lt;/code&gt; - 파일이 너무 큼</target>
        </trans-unit>
        <trans-unit id="31cc1351f1ed0ac67d43d86b384cf0bb5de1249f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;efile&lt;/code&gt;, which means use the local file system, this is the default.</source>
          <target state="translated">&lt;code&gt;efile&lt;/code&gt; 은 로컬 파일 시스템 사용을 의미하며 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="ae15036943ab0422753787cf1a0571db4d5b858c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ehostdown&lt;/code&gt; - Host is down</source>
          <target state="translated">&lt;code&gt;ehostdown&lt;/code&gt; - 호스트가 다운되었습니다</target>
        </trans-unit>
        <trans-unit id="41a1e20311ed6f9be07007469e8c77d42a57d62e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ehostunreach&lt;/code&gt; - Host is unreachable</source>
          <target state="translated">&lt;code&gt;ehostunreach&lt;/code&gt; - 호스트에 도달 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="4057bd8b1f1bcdec284da63d635ca2a15dc8dc16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei&lt;/code&gt; allows you to convert atoms, lists, numbers, and binaries to and from the binary format. This is useful when writing port programs and drivers. &lt;code&gt;ei&lt;/code&gt; uses a given buffer, no dynamic memory (except &lt;code&gt;ei_decode_fun()&lt;/code&gt;) and is often quite fast.</source>
          <target state="translated">&lt;code&gt;ei&lt;/code&gt; 를 사용하면 원자, 목록, 숫자 및 이진을 이진 형식으로 변환 할 수 있습니다. 포트 프로그램 및 드라이버를 작성할 때 유용합니다. &lt;code&gt;ei&lt;/code&gt; 는 주어진 버퍼를 사용하고 동적 메모리를 사용하지 않으며 ( &lt;code&gt;ei_decode_fun()&lt;/code&gt; 제외 ) 종종 매우 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="4f1822707a34fb31d15140ca9063ce11388efb7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei&lt;/code&gt; also handles C-nodes, C-programs that talks Erlang distribution with Erlang nodes (or other C-nodes) using the Erlang distribution format. The difference between &lt;code&gt;ei&lt;/code&gt; and &lt;code&gt;erl_interface&lt;/code&gt; is that &lt;code&gt;ei&lt;/code&gt; uses the binary format directly when sending and receiving terms. It is also thread safe, and using threads, one process can handle multiple C-nodes. The &lt;code&gt;erl_interface&lt;/code&gt; library is built on top of &lt;code&gt;ei&lt;/code&gt;, but of legacy reasons, it does not allow for multiple C-nodes. In general, &lt;code&gt;ei&lt;/code&gt; is the preferred way of doing C-nodes.</source>
          <target state="translated">&lt;code&gt;ei&lt;/code&gt; 는 또한 Erlang 분포 형식을 사용하여 Erlang 노드와 Erlang 노드 (또는 다른 C- 노드)와 대화하는 C 프로그램 인 C 노드를 처리합니다. 차이 &lt;code&gt;ei&lt;/code&gt; 및 &lt;code&gt;erl_interface&lt;/code&gt; 는 점이다 &lt;code&gt;ei&lt;/code&gt; 송신 및 용어를 수신 할 때 바로 바이너리 포맷을 사용한다. 또한 스레드 안전하며 스레드를 사용하면 한 프로세스에서 여러 C 노드를 처리 할 수 ​​있습니다. &lt;code&gt;erl_interface&lt;/code&gt; 의 라이브러리의 상단에 내장되어 &lt;code&gt;ei&lt;/code&gt; ,하지만 기존의 이유, 그것은 다수의 C-노드 수 없습니다. 일반적으로, &lt;code&gt;ei&lt;/code&gt; 는 C- 노드를 수행하는 선호되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="f1c93b6c19f85a0fc04f92de1e46e22e3da2959e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_rpc()&lt;/code&gt; returns the number of bytes in the result on success and &lt;code&gt;-1&lt;/code&gt; on failure. &lt;code&gt;ei_rpc_from()&lt;/code&gt; returns the number of bytes, otherwise one of &lt;code&gt;ERL_TICK&lt;/code&gt;, &lt;code&gt;ERL_TIMEOUT&lt;/code&gt;, and &lt;code&gt;ERL_ERROR&lt;/code&gt;. When failing, all three functions set &lt;code&gt;erl_errno&lt;/code&gt; to one of the following:</source>
          <target state="translated">&lt;code&gt;ei_rpc()&lt;/code&gt; 는 성공하면 결과의 바이트 수를, 실패 &lt;code&gt;-1&lt;/code&gt; 을 반환합니다 . &lt;code&gt;ei_rpc_from()&lt;/code&gt; 은 바이트 수를 반환하고, 그렇지 않으면 &lt;code&gt;ERL_TICK&lt;/code&gt; , &lt;code&gt;ERL_TIMEOUT&lt;/code&gt; 및 &lt;code&gt;ERL_ERROR&lt;/code&gt; 중 하나를 반환합니다 . 실패하면 세 함수가 모두 &lt;code&gt;erl_errno&lt;/code&gt; 를 다음 중 하나로 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="d9e4fb15102075457afaf44985139aa7327294ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_x_format_wo_ver()&lt;/code&gt; formats into a buffer, without the initial version byte.</source>
          <target state="translated">&lt;code&gt;ei_x_format_wo_ver()&lt;/code&gt; 는 초기 버전 바이트없이 버퍼로 포맷합니다.</target>
        </trans-unit>
        <trans-unit id="e61e585ef7827c4765a03c5e289877218bfe74d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_xconnect()&lt;/code&gt; requires the IP address of the remote host and the alive name of the remote node to be specified. &lt;code&gt;ei_connect()&lt;/code&gt; provides an alternative interface and determines the information from the node name provided.</source>
          <target state="translated">&lt;code&gt;ei_xconnect()&lt;/code&gt; 에는 원격 호스트의 IP 주소와 원격 노드의 활성 이름을 지정해야합니다. &lt;code&gt;ei_connect()&lt;/code&gt; 는 대체 인터페이스를 제공하고 제공된 노드 이름에서 정보를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="5fc4aad0082154201868dc5e78b89ad56b713f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eidrm&lt;/code&gt; - Identifier removed</source>
          <target state="translated">&lt;code&gt;eidrm&lt;/code&gt; - 식별자 제거</target>
        </trans-unit>
        <trans-unit id="4c51e97e2d1b60cae1995ba4c14365cf239a4da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;einit&lt;/code&gt; - Initialization error</source>
          <target state="translated">&lt;code&gt;einit&lt;/code&gt; - 초기화 오류</target>
        </trans-unit>
        <trans-unit id="c83b6f5034fbf175dad5e5be227bf0995311d4ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;einprogress&lt;/code&gt; - Operation now in progress</source>
          <target state="translated">&lt;code&gt;einprogress&lt;/code&gt; -진행중인 작업</target>
        </trans-unit>
        <trans-unit id="60eb0596371343d8ec3552422eb1e34f1b36f5a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eintr&lt;/code&gt; - Interrupted system call</source>
          <target state="translated">&lt;code&gt;eintr&lt;/code&gt; - 중단 된 시스템 호출</target>
        </trans-unit>
        <trans-unit id="089a96dc9bcb8bd0620721e7fb8a694b138afc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;einval&lt;/code&gt; - Invalid argument</source>
          <target state="translated">&lt;code&gt;einval&lt;/code&gt; - 유효하지 않은 인수</target>
        </trans-unit>
        <trans-unit id="44bfb9ae0f478b8485ecf3c9086e42e717fdc5a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eio&lt;/code&gt; - I/O error</source>
          <target state="translated">&lt;code&gt;eio&lt;/code&gt; -I / O 오류</target>
        </trans-unit>
        <trans-unit id="69f2935e8dc5ed0862669551b2a84e850d91a37e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eisconn&lt;/code&gt; - Socket is already connected</source>
          <target state="translated">&lt;code&gt;eisconn&lt;/code&gt; - 소켓이 이미 연결되었습니다</target>
        </trans-unit>
        <trans-unit id="ec13cd39a788418050c228cc6c985bb0287cbe7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eisdir&lt;/code&gt; - Illegal operation on a directory</source>
          <target state="translated">&lt;code&gt;eisdir&lt;/code&gt; - 디렉토리에서 잘못된 조작</target>
        </trans-unit>
        <trans-unit id="85e5e80b311605ed81269e38433a78231c243cda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eisnam&lt;/code&gt; - Is a named file</source>
          <target state="translated">&lt;code&gt;eisnam&lt;/code&gt; - 명명 된 파일입니다</target>
        </trans-unit>
        <trans-unit id="0e8947aa5bf1f600183d01c17b799dedea023825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el2hlt&lt;/code&gt; - Level 2 halted</source>
          <target state="translated">&lt;code&gt;el2hlt&lt;/code&gt; - 레벨 2 정지</target>
        </trans-unit>
        <trans-unit id="f4bb64c4510653aeb5bcf4358b3c523b6fb03c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el2nsync&lt;/code&gt; - Level 2 not synchronized</source>
          <target state="translated">&lt;code&gt;el2nsync&lt;/code&gt; - 레벨 2 동기화되지 않음</target>
        </trans-unit>
        <trans-unit id="b379560048c7b16c077af37a1f69690c4f351025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el3hlt&lt;/code&gt; - Level 3 halted</source>
          <target state="translated">&lt;code&gt;el3hlt&lt;/code&gt; - 레벨 3 정지</target>
        </trans-unit>
        <trans-unit id="7ab7bb692a6b3432357ba5a73cd34a83e0c73f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el3rst&lt;/code&gt; - Level 3 reset</source>
          <target state="translated">&lt;code&gt;el3rst&lt;/code&gt; - 레벨 3 리셋</target>
        </trans-unit>
        <trans-unit id="089ddb4594d97b9bd5c862b25c1247687f01825e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elbin&lt;/code&gt; - ELBIN</source>
          <target state="translated">&lt;code&gt;elbin&lt;/code&gt; -엘빈</target>
        </trans-unit>
        <trans-unit id="7893f5bf1e4c46bc941bcaa83534b3929acfdcbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibacc&lt;/code&gt; - Cannot access a needed shared library</source>
          <target state="translated">&lt;code&gt;elibacc&lt;/code&gt; - 필요한 공유 라이브러리에 액세스 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="357a0d86ed459bc468c8d677e6ff04d9d2040835" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibbad&lt;/code&gt; - Accessing a corrupted shared library</source>
          <target state="translated">&lt;code&gt;elibbad&lt;/code&gt; - 손상된 공유 라이브러리에 액세스</target>
        </trans-unit>
        <trans-unit id="480018e122be7dff83c1c18a0429df262ad75fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibexec&lt;/code&gt; - Cannot exec a shared library directly</source>
          <target state="translated">&lt;code&gt;elibexec&lt;/code&gt; - 공유 라이브러리를 직접 실행할 수 없음</target>
        </trans-unit>
        <trans-unit id="3e3ec25d0793f3f2912fb4fd28a414479e7dd127" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibmax&lt;/code&gt; - Attempting to link in more shared libraries than system limit</source>
          <target state="translated">&lt;code&gt;elibmax&lt;/code&gt; - 시스템 한계보다 더 많은 공유 라이브러리에서 링크를 시도</target>
        </trans-unit>
        <trans-unit id="3105e6fc8eecafc0b2847ad8cc45d60256cc4d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibscn&lt;/code&gt; - &lt;code&gt;.lib&lt;/code&gt; section in &lt;code&gt;a.out&lt;/code&gt; corrupted</source>
          <target state="translated">&lt;code&gt;elibscn&lt;/code&gt; - &lt;code&gt;a.out&lt;/code&gt; 의 &lt;code&gt;.lib&lt;/code&gt; 섹션이 손상되었습니다.</target>
        </trans-unit>
        <trans-unit id="3f0b20734661bcc8b565e3f90edaef1087de0de3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elnrng&lt;/code&gt; - Link number out of range</source>
          <target state="translated">&lt;code&gt;elnrng&lt;/code&gt; - 링크 번호가 범위를 벗어남</target>
        </trans-unit>
        <trans-unit id="9fb670ce931ef5c988ddc7fd596bb9cd1d21c77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eloop&lt;/code&gt; - Too many levels of symbolic links</source>
          <target state="translated">&lt;code&gt;eloop&lt;/code&gt; - 너무 많은 레벨의 기호 링크</target>
        </trans-unit>
        <trans-unit id="2fc1dce9eee780c04d77b3e8a50f5a25e8d2ff32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emfile&lt;/code&gt; - Too many open files</source>
          <target state="translated">&lt;code&gt;emfile&lt;/code&gt; - 파일이 너무 많습니다</target>
        </trans-unit>
        <trans-unit id="2a3b681741f87f0b7429e3b04d706f100ccf509d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emlink&lt;/code&gt; - Too many links</source>
          <target state="translated">&lt;code&gt;emlink&lt;/code&gt; - 너무 많은 링크</target>
        </trans-unit>
        <trans-unit id="8a1d37f90fe18af44c2a3274e64ac741146447d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;employees&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;employees&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="130bca2165b56dfb95f44ac6bc899a93d144d99e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; and &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; contain the pids of the sender and recipient of the link or unlink. &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; is not used.</source>
          <target state="translated">&lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; 및 &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; 에는 링크 발신자 및 수신자의 pid가 포함되어 있습니다. &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; 는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c4bbc97a72df14a53a10a400594a735a501ac68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emsg&lt;/code&gt; is a message containing the result of the function call.</source>
          <target state="translated">&lt;code&gt;emsg&lt;/code&gt; 는 함수 호출 결과를 포함하는 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="03a7f883653ee2b993695a1420dcbbaf32bda40b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emsgsize&lt;/code&gt; - Message too long</source>
          <target state="translated">&lt;code&gt;emsgsize&lt;/code&gt; - 메시지가 너무 깁니다</target>
        </trans-unit>
        <trans-unit id="102cae3d1e294580076f0c6f8592c5ebc0801b3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emultihop&lt;/code&gt; - Multihop attempted</source>
          <target state="translated">&lt;code&gt;emultihop&lt;/code&gt; - 멀티 홉 시도</target>
        </trans-unit>
        <trans-unit id="2556046b270169e44d74ac1fb288534230cb139a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enametoolong&lt;/code&gt; - Filename too long</source>
          <target state="translated">&lt;code&gt;enametoolong&lt;/code&gt; - 파일 이름이 너무 깁니다</target>
        </trans-unit>
        <trans-unit id="bcbd188eaa9772dd6612fedc594abf7a0a61490e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enavail&lt;/code&gt; - Unavailable</source>
          <target state="translated">&lt;code&gt;enavail&lt;/code&gt; - 사용할 수 없음</target>
        </trans-unit>
        <trans-unit id="6bbf5c89562882c073e0b94fa2ca48188ccc5cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; if translation modifier &lt;code&gt;t&lt;/code&gt; is present.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 변환 수정 자 &lt;code&gt;t&lt;/code&gt; 가 있으면 인코딩 이 &lt;code&gt;true&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="77ad1d68e180848defa5a42f1cfd114110c7021e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endOfTable&lt;/code&gt; if there are no accessible elements after this one.</source>
          <target state="translated">&lt;code&gt;endOfTable&lt;/code&gt; 이 요소 뒤에 액세스 가능한 요소가없는 경우</target>
        </trans-unit>
        <trans-unit id="8ebcf0b3d7ac6630fc3b9e901b85d8574f089344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_of_input&lt;/code&gt; or &lt;code&gt;{end_of_input, Value}}&lt;/code&gt; when there is no more input (&lt;code&gt;Value&lt;/code&gt; is explained below).</source>
          <target state="translated">&lt;code&gt;end_of_input&lt;/code&gt; 더 이상 입력이없는 경우 end_of_input 또는 &lt;code&gt;{end_of_input, Value}}&lt;/code&gt; ( &lt;code&gt;Value&lt;/code&gt; 은 아래에 설명되어 있음)</target>
        </trans-unit>
        <trans-unit id="24c71d34c36f947bf9e07bafbc7fd0128dc8ea25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_of_trace&lt;/code&gt; received once when all trace messages are processed</source>
          <target state="translated">&lt;code&gt;end_of_trace&lt;/code&gt; 모든 추적 메시지가 처리 될 때 end_of_trace 가 한 번 수신 됨</target>
        </trans-unit>
        <trans-unit id="2054f317a98e73dae658de2ba34699735cf4aae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_per_suite&lt;/code&gt; is called as the final stage of the test suite execution (after the last test case has finished). The function is meant to be used for cleaning up after &lt;code&gt;init_per_suite&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end_per_suite&lt;/code&gt; 는 테스트 스위트 실행의 마지막 단계 (마지막 테스트 사례가 완료된 후)로 호출됩니다. 이 함수는 &lt;code&gt;init_per_suite&lt;/code&gt; 이후 정리에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="95b3a9204cfbdde6851a387b796c8b1372e2cf81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_per_testcase/2&lt;/code&gt; is called after each test case has finished, enabling cleanup after &lt;code&gt;init_per_testcase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end_per_testcase/2&lt;/code&gt; 는 각 테스트 사례가 완료된 후 &lt;code&gt;init_per_testcase&lt;/code&gt; 이후 정리가 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="71141edd68217ecbf7ec91855ad9f0f114eec22c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_per_testcase&lt;/code&gt; can check if the test case was successful. (which in turn can determine how cleanup is to be performed). This is done by reading the value tagged with &lt;code&gt;tc_status&lt;/code&gt; from &lt;code&gt;Config&lt;/code&gt;. The value is one of the following:</source>
          <target state="translated">&lt;code&gt;end_per_testcase&lt;/code&gt; 는 테스트 사례가 성공적인지 확인할 수 있습니다. (그러면 정리 수행 방법을 결정할 수 있습니다). 이는 &lt;code&gt;Config&lt;/code&gt; 에서 &lt;code&gt;tc_status&lt;/code&gt; 로 태그 된 값을 읽어서 수행됩니다 . 값은 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="48bd9d18a9587e2a04f0df5a9be5f8de167faab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enet&lt;/code&gt; - ENET</source>
          <target state="translated">&lt;code&gt;enet&lt;/code&gt; -ENET</target>
        </trans-unit>
        <trans-unit id="d6f6cddb018e4c86ad70e55e121582d34b1ea0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enetdown&lt;/code&gt; - Network is down</source>
          <target state="translated">&lt;code&gt;enetdown&lt;/code&gt; - 네트워크가 다운되었습니다</target>
        </trans-unit>
        <trans-unit id="3190f061d30e04fb6a9271caec20dcc8cae8b1a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enetreset&lt;/code&gt; - Network dropped connection on reset</source>
          <target state="translated">&lt;code&gt;enetreset&lt;/code&gt; - 재설정시 네트워크 연결 끊김</target>
        </trans-unit>
        <trans-unit id="1a62bf7fb5581eaca549145ce947c94cfc5f3959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enetunreach&lt;/code&gt; - Network is unreachable</source>
          <target state="translated">&lt;code&gt;enetunreach&lt;/code&gt; - 네트워크에 도달 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="4f8785aeddbafa426e841211571332ba5939a806" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enfile&lt;/code&gt; - File table overflow</source>
          <target state="translated">&lt;code&gt;enfile&lt;/code&gt; - 파일 테이블 오버 플로우</target>
        </trans-unit>
        <trans-unit id="54a8b1a4b729abfb9356f547e7fdeff3d76af8b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;engine_id&lt;/code&gt; - The &lt;code&gt;SnmpEngineID&lt;/code&gt; as defined in SNMP-FRAMEWORK-MIB. &lt;strong&gt;Mandatory&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;engine_id&lt;/code&gt; - &lt;code&gt;SnmpEngineID&lt;/code&gt; SNMP 프레임 워크-MIB에 정의 된 바와 같다. &lt;strong&gt;필수&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="75550d802589c6c6b20bac1563529e207c77a98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoano&lt;/code&gt; - Anode table overflow</source>
          <target state="translated">&lt;code&gt;enoano&lt;/code&gt; - 양극 테이블 오버 플로우</target>
        </trans-unit>
        <trans-unit id="8b5d30d3536f96de39693eab21b683c9e068bb33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enobufs&lt;/code&gt; - No buffer space available</source>
          <target state="translated">&lt;code&gt;enobufs&lt;/code&gt; - 사용 가능한 버퍼 공간이 없습니다.</target>
        </trans-unit>
        <trans-unit id="9ade4c792c85383a29ecbaecd7d25e02675bd122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enocsi&lt;/code&gt; - No CSI structure available</source>
          <target state="translated">&lt;code&gt;enocsi&lt;/code&gt; - 사용 가능한 CSI 구조가 없음</target>
        </trans-unit>
        <trans-unit id="b51598a142f5adfd48865e15d2853468237f6904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enodata&lt;/code&gt; - No data available</source>
          <target state="translated">&lt;code&gt;enodata&lt;/code&gt; - 자료 없음</target>
        </trans-unit>
        <trans-unit id="639726d99f469fa0e2c3a27f02d5fe5c112c4bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enodev&lt;/code&gt; - No such device</source>
          <target state="translated">&lt;code&gt;enodev&lt;/code&gt; - 해당 장치 없음</target>
        </trans-unit>
        <trans-unit id="207e9dbcef7e01416cb292284f380209b08848a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoent&lt;/code&gt; - No such file or directory</source>
          <target state="translated">&lt;code&gt;enoent&lt;/code&gt; - 그러한 파일이나 디렉토리가 없습니다</target>
        </trans-unit>
        <trans-unit id="3cec8eb5ae7ddb7d7764f3372daa2d4639a9effb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoexec&lt;/code&gt; - Exec format error</source>
          <target state="translated">&lt;code&gt;enoexec&lt;/code&gt; - 실행 형식 오류</target>
        </trans-unit>
        <trans-unit id="f675251cb3c179443922755eedf43090c4515f53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enolck&lt;/code&gt; - No locks available</source>
          <target state="translated">&lt;code&gt;enolck&lt;/code&gt; - 사용 가능한 잠금 없음</target>
        </trans-unit>
        <trans-unit id="b27dbfa5ca362faa9bbad9c3f5a851ad95da1b11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enolink&lt;/code&gt; - Link has been severed</source>
          <target state="translated">&lt;code&gt;enolink&lt;/code&gt; - 링크가 끊어졌습니다</target>
        </trans-unit>
        <trans-unit id="18d5419c4c7dafc4ffba680f090c207753780a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enomem&lt;/code&gt; - Not enough memory</source>
          <target state="translated">&lt;code&gt;enomem&lt;/code&gt; - 메모리 부족</target>
        </trans-unit>
        <trans-unit id="cc5bf49e1ed5cac7ae5e4342347a7f1aeb8023f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enomsg&lt;/code&gt; - No message of desired type</source>
          <target state="translated">&lt;code&gt;enomsg&lt;/code&gt; - 원하는 유형의 메시지가 없습니다.</target>
        </trans-unit>
        <trans-unit id="267e3cc8e7d629bfb57dabde53f4cd944f66da79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enonet&lt;/code&gt; - Machine is not on the network</source>
          <target state="translated">&lt;code&gt;enonet&lt;/code&gt; - 컴퓨터가 네트워크에 없습니다</target>
        </trans-unit>
        <trans-unit id="c0d0064742538f0cc7b2aafaa47cd3b373913a8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enopkg&lt;/code&gt; - Package not installed</source>
          <target state="translated">&lt;code&gt;enopkg&lt;/code&gt; - 패키지가 설치되지 않았습니다</target>
        </trans-unit>
        <trans-unit id="dff3e3a7e09c55f7c822e50d7aeeef880bd851e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoprotoopt&lt;/code&gt; - Bad protocol option</source>
          <target state="translated">&lt;code&gt;enoprotoopt&lt;/code&gt; - 잘못된 프로토콜 옵션</target>
        </trans-unit>
        <trans-unit id="5275d397f6cd736b2edca9458f06aa57eb1cbd25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enospc&lt;/code&gt; - No space left on device</source>
          <target state="translated">&lt;code&gt;enospc&lt;/code&gt; - 장치에 남은 공간이 없습니다</target>
        </trans-unit>
        <trans-unit id="192bdec7e1688f7d63574f033a7eeffedbe06a6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enosr&lt;/code&gt; - Out of stream resources or not a stream device</source>
          <target state="translated">&lt;code&gt;enosr&lt;/code&gt; - 스트림 자원이 부족하거나 스트림 장치가 아님</target>
        </trans-unit>
        <trans-unit id="238a62098e5522c7e83140c8c5f6f2fdb2a04538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enosym&lt;/code&gt; - Unresolved symbol name</source>
          <target state="translated">&lt;code&gt;enosym&lt;/code&gt; -해석 되지 않은 심볼 이름</target>
        </trans-unit>
        <trans-unit id="c8da2ae1a896bcd38d3b6a9dcf887cdc34b28716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enosys&lt;/code&gt; - Function not implemented</source>
          <target state="translated">&lt;code&gt;enosys&lt;/code&gt; - 기능이 구현되지 않았습니다</target>
        </trans-unit>
        <trans-unit id="dec216448c3efc0faeb0edbea9314a0181d9bf35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotblk&lt;/code&gt; - Block device required</source>
          <target state="translated">&lt;code&gt;enotblk&lt;/code&gt; - 블록 장치 필요</target>
        </trans-unit>
        <trans-unit id="bbbcb6b3a0232b5c17cddb598ce5486d8330a32a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotconn&lt;/code&gt; - Socket is not connected</source>
          <target state="translated">&lt;code&gt;enotconn&lt;/code&gt; - 소켓이 연결되지 않았습니다</target>
        </trans-unit>
        <trans-unit id="3e856fac0948ae324d17302e6dcd8b7afdda165a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotdir&lt;/code&gt; - Not a directory</source>
          <target state="translated">&lt;code&gt;enotdir&lt;/code&gt; - 디렉토리가 아님</target>
        </trans-unit>
        <trans-unit id="aec13d9ecfaec761c963eb0401f932c6b4b9f938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotempty&lt;/code&gt; - Directory not empty</source>
          <target state="translated">&lt;code&gt;enotempty&lt;/code&gt; - 디렉토리가 비어 있지 않음</target>
        </trans-unit>
        <trans-unit id="36208f5ca80acaab61024d264f8e262047f77925" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotnam&lt;/code&gt; - Not a named file</source>
          <target state="translated">&lt;code&gt;enotnam&lt;/code&gt; - 명명 된 파일이 아님</target>
        </trans-unit>
        <trans-unit id="d7bf022427ba88027346245447278833a84b30f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotsock&lt;/code&gt; - Socket operation on non-socket</source>
          <target state="translated">&lt;code&gt;enotsock&lt;/code&gt; - 소켓이 아닌 소켓 작업</target>
        </trans-unit>
        <trans-unit id="975ae1e1fcad4609f74ccb56d18372b4b618e2be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotsup&lt;/code&gt; - Operation not supported</source>
          <target state="translated">&lt;code&gt;enotsup&lt;/code&gt; - 지원되지 않는 작업</target>
        </trans-unit>
        <trans-unit id="37baef27664f2f027f8596627a18fdd91eabac75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotty&lt;/code&gt; - Inappropriate device for &lt;code&gt;ioctl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;enotty&lt;/code&gt; - &lt;code&gt;ioctl&lt;/code&gt; 에 부적절한 장치</target>
        </trans-unit>
        <trans-unit id="c26af36618a187ea918910bd849a4767ee11c3ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotuniq&lt;/code&gt; - Name not unique on network</source>
          <target state="translated">&lt;code&gt;enotuniq&lt;/code&gt; - 네트워크에서 고유하지 않은 이름</target>
        </trans-unit>
        <trans-unit id="d99513c6779f948197a541bcc8422a406bc4f431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;entry : string&lt;/code&gt; :: Callback. Ex. &lt;code&gt;&quot;open&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;entry : string&lt;/code&gt; :: 콜백. 전의. &lt;code&gt;&quot;open&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb02e114e2c1fde43be0da07271a78e932961018" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;entry : string&lt;/code&gt; :: Code Location. Ex. &lt;code&gt;&quot;lists:sort/1&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;entry : string&lt;/code&gt; :: 코드 위치. 전의. &lt;code&gt;&quot;lists:sort/1&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50969a87c39c7067507ba1ec276755112123047b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt; is the environment to create the integer in.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; 는 정수를 생성하는 환경입니다.</target>
        </trans-unit>
        <trans-unit id="90fb6782bb3c397635cfbc2261e23050ca063522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enxio&lt;/code&gt; - No such device or address</source>
          <target state="translated">&lt;code&gt;enxio&lt;/code&gt; - 해당 장치 또는 주소가 없음</target>
        </trans-unit>
        <trans-unit id="d2f629d33624f31488b1207001514d888e268c43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eof&lt;/code&gt; is returned when input end is reached and no more data is available to the client process.</source>
          <target state="translated">&lt;code&gt;eof&lt;/code&gt; 입력 끝에 도달하면 클라이언트 프로세스에서 더 이상 데이터를 사용할 수 없으면 eof 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="e651310d843b6c7bd6e82b604450e074230f1a92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eopnotsupp&lt;/code&gt; - Operation not supported on socket</source>
          <target state="translated">&lt;code&gt;eopnotsupp&lt;/code&gt; - 소켓에서 지원되지 않는 작업</target>
        </trans-unit>
        <trans-unit id="24d7acce6b9b6b3034ac2fa3bd2e3167b56d7b30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eperm&lt;/code&gt; - Not owner</source>
          <target state="translated">&lt;code&gt;eperm&lt;/code&gt; - 소유자 아님</target>
        </trans-unit>
        <trans-unit id="83fe66c0d41d687f28d271224381581a51e4f4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epfnosupport&lt;/code&gt; - Protocol family not supported</source>
          <target state="translated">&lt;code&gt;epfnosupport&lt;/code&gt; - 지원되지 않는 프로토콜 제품군</target>
        </trans-unit>
        <trans-unit id="a5890a451bc7bc2396126616a34b508e37acee62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epipe&lt;/code&gt; - Broken pipe</source>
          <target state="translated">&lt;code&gt;epipe&lt;/code&gt; - 깨진 파이프</target>
        </trans-unit>
        <trans-unit id="3a3c9451329835184c27bda61d6c4f1db59493c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epp(3)&lt;/code&gt;, &lt;code&gt;erl_id_trans(3)&lt;/code&gt;, &lt;code&gt;erl_lint(3)&lt;/code&gt;, &lt;code&gt;beam_lib(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;epp(3)&lt;/code&gt; , &lt;code&gt;erl_id_trans(3)&lt;/code&gt; , &lt;code&gt;erl_lint(3)&lt;/code&gt; , &lt;code&gt;beam_lib(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9cc6dfb6663cdc6905981a6aad8775ee92c2f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epp_dodger&lt;/code&gt; - bypasses the Erlang preprocessor.</source>
          <target state="translated">&lt;code&gt;epp_dodger&lt;/code&gt; -Erlang 프리 프로세서를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="1bce7f5c9a030269923955a2f607ccb131557d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eproclim&lt;/code&gt; - Too many processes</source>
          <target state="translated">&lt;code&gt;eproclim&lt;/code&gt; - 너무 많은 프로세스</target>
        </trans-unit>
        <trans-unit id="ee317501a8917bf4010a5d1847674fd1b04f1d41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprocunavail&lt;/code&gt; - Bad procedure for program</source>
          <target state="translated">&lt;code&gt;eprocunavail&lt;/code&gt; - 프로그램에 대한 잘못된 절차</target>
        </trans-unit>
        <trans-unit id="2a6544d4bd7e297872f3fbfd89bf149778b4a8c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprof&lt;/code&gt; is based on the Erlang &lt;code&gt;trace_info&lt;/code&gt; BIFs. &lt;code&gt;eprof&lt;/code&gt; shows how much time has been used by each process, and in which function calls this time has been spent. Time is shown as percentage of total time and absolute time. For more information, see the &lt;code&gt;eprof&lt;/code&gt; manual page in Tools.</source>
          <target state="translated">&lt;code&gt;eprof&lt;/code&gt; 는 Erlang &lt;code&gt;trace_info&lt;/code&gt; BIF를 기반으로합니다 . &lt;code&gt;eprof&lt;/code&gt; 는 각 프로세스에서 얼마나 많은 시간이 사용되었으며 이번에는 어떤 함수 호출이 사용 되었는지 보여줍니다. 시간은 총 시간과 절대 시간의 백분율로 표시됩니다. 자세한 내용 은 도구 의 &lt;code&gt;eprof&lt;/code&gt; 매뉴얼 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="df8a0bfc19c4581b404979fadfe7bb7fe1af084e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprof&lt;/code&gt; provides time information of each function used in the program. No call graph is produced, but &lt;code&gt;eprof&lt;/code&gt; has considerable less impact on the program it profiles.</source>
          <target state="translated">&lt;code&gt;eprof&lt;/code&gt; 는 프로그램에서 사용 된 각 기능의 시간 정보를 제공합니다. 호출 그래프는 생성되지 않지만 &lt;code&gt;eprof&lt;/code&gt; 는 프로파일 링하는 프로그램에 미치는 영향이 훨씬 적습니다.</target>
        </trans-unit>
        <trans-unit id="118e7ea83469a9ed5135f96574380a30caa372d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprogmismatch&lt;/code&gt; - Wrong program version</source>
          <target state="translated">&lt;code&gt;eprogmismatch&lt;/code&gt; - 잘못된 프로그램 버전</target>
        </trans-unit>
        <trans-unit id="3bc26d2260fdf4375c7fd2b218c14427464bcfb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprogunavail&lt;/code&gt; - RPC program unavailable</source>
          <target state="translated">&lt;code&gt;eprogunavail&lt;/code&gt; -RPC 프로그램을 사용할 수 없음</target>
        </trans-unit>
        <trans-unit id="704e5e1b7cb8deb8b66028feb0898d97ca3b81df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eproto&lt;/code&gt; - Protocol error</source>
          <target state="translated">&lt;code&gt;eproto&lt;/code&gt; - 프로토콜 오류</target>
        </trans-unit>
        <trans-unit id="c0020dd6a856517b832382f8abd689c0c2eeed9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprotonosupport&lt;/code&gt; - Protocol not supported</source>
          <target state="translated">&lt;code&gt;eprotonosupport&lt;/code&gt; - 지원되지 않는 프로토콜</target>
        </trans-unit>
        <trans-unit id="4b8b4842c1185ca09dc81075ef61632061cf04b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprototype&lt;/code&gt; - Wrong protocol type for socket</source>
          <target state="translated">&lt;code&gt;eprototype&lt;/code&gt; - 소켓에 잘못된 프로토콜 유형</target>
        </trans-unit>
        <trans-unit id="46f7516e9a6f87ecce854e8fe14964d1676c262b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erange&lt;/code&gt; - Math result unrepresentable</source>
          <target state="translated">&lt;code&gt;erange&lt;/code&gt; -표현할 수없는 수학 결과</target>
        </trans-unit>
        <trans-unit id="2168cb87b30ae036d5a752f6631954b5bca507db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erefused&lt;/code&gt; - EREFUSED</source>
          <target state="translated">&lt;code&gt;erefused&lt;/code&gt; -EREFUSED</target>
        </trans-unit>
        <trans-unit id="fcbd5c16cd9f879ec603082074b2199d36e01aa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremchg&lt;/code&gt; - Remote address changed</source>
          <target state="translated">&lt;code&gt;eremchg&lt;/code&gt; - 원격 주소가 변경됨</target>
        </trans-unit>
        <trans-unit id="5c95010734339dc1d2a5d965eeb932f6d9de0ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremdev&lt;/code&gt; - Remote device</source>
          <target state="translated">&lt;code&gt;eremdev&lt;/code&gt; - 원격 장치</target>
        </trans-unit>
        <trans-unit id="b2f04df4c1e858750d480db0e44d49d24ea12173" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremote&lt;/code&gt; - Pathname hit remote filesystem</source>
          <target state="translated">&lt;code&gt;eremote&lt;/code&gt; - 경로명이 적중 된 원격 파일 시스템</target>
        </trans-unit>
        <trans-unit id="7e9563a352891721a204a1c6ba35db8d2eece943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremoteio&lt;/code&gt; - Remote I/O error</source>
          <target state="translated">&lt;code&gt;eremoteio&lt;/code&gt; - 원격 I / O 오류</target>
        </trans-unit>
        <trans-unit id="e0ac33ee9203cd0385e20aa9c0173c8736a05eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremoterelease&lt;/code&gt; - EREMOTERELEASE</source>
          <target state="translated">&lt;code&gt;eremoterelease&lt;/code&gt; -EREMOTERELEASE</target>
        </trans-unit>
        <trans-unit id="cc66bcb60fa11e17ee7a373b05b8b0426e827c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erfc(X)&lt;/code&gt; returns &lt;code&gt;1.0&lt;/code&gt; - &lt;code&gt;erf(X)&lt;/code&gt;, computed by methods that avoid cancellation for large &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erfc(X)&lt;/code&gt; 는 &lt;code&gt;1.0&lt;/code&gt; - &lt;code&gt;erf(X)&lt;/code&gt; (X)를 반환 하며, 큰 &lt;code&gt;X&lt;/code&gt; 에 대한 취소를 피하는 메소드로 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="a89b1c7135dfce3f2ec861c7930ee0cb688dc19a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl&lt;/code&gt; invokes the code for the Erlang emulator (virtual machine), which supports the following flags:</source>
          <target state="translated">&lt;code&gt;erl&lt;/code&gt; 은 다음 플래그를 지원하는 Erlang 에뮬레이터 (가상 머신)의 코드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="72c212cae138df8bbf42d46cba38fbb6050a107d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl&lt;/code&gt; understands a number of command-line arguments, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS. Some of them are also described in this chapter.</source>
          <target state="translated">&lt;code&gt;erl&lt;/code&gt; 은 많은 명령 행 인수를 이해합니다 . ERTS 의 &lt;code&gt;erl(1)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오. 이들 중 일부는이 장에서도 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7d5f44fb6c1012e9c0e060443ea59a1df2d043c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_connect&lt;/code&gt;: Communication with distributed Erlang, see &lt;code&gt;&lt;a href=&quot;#cnode&quot;&gt;C nodes&lt;/a&gt;&lt;/code&gt; below</source>
          <target state="translated">&lt;code&gt;erl_connect&lt;/code&gt; : 분산 Erlang과의 통신, 아래 &lt;code&gt;&lt;a href=&quot;#cnode&quot;&gt;C nodes&lt;/a&gt;&lt;/code&gt; 참조</target>
        </trans-unit>
        <trans-unit id="05e08ca32ae709584e9cf5968c63680192d4b3ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_connect_init()&lt;/code&gt; provides an alternative interface that does not require as much information from the caller. Instead, &lt;code&gt;erl_connect_init()&lt;/code&gt; uses &lt;code&gt;gethostbyname()&lt;/code&gt; to obtain default values.</source>
          <target state="translated">&lt;code&gt;erl_connect_init()&lt;/code&gt; 는 호출자로부터 많은 정보를 필요로하지 않는 대체 인터페이스를 제공합니다. 대신, &lt;code&gt;erl_connect_init()&lt;/code&gt; 는 &lt;code&gt;gethostbyname()&lt;/code&gt; 을 사용하여 기본값을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="5ed42cee4f0d59de8a0c21cbc5f26281d66a293b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_connect_xinit()&lt;/code&gt; stores for later use information about:</source>
          <target state="translated">&lt;code&gt;erl_connect_xinit()&lt;/code&gt; 는 나중에 사용하기위한 정보를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="eab23ac51e1e03f27475648663ab9f2fbebdee92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_decode()&lt;/code&gt; and &lt;code&gt;erl_decode_buf()&lt;/code&gt; decode the contents of a buffer and return the corresponding Erlang term. &lt;code&gt;erl_decode_buf()&lt;/code&gt; provides a simple mechanism for dealing with several encoded terms stored consecutively in the buffer.</source>
          <target state="translated">&lt;code&gt;erl_decode()&lt;/code&gt; 및 &lt;code&gt;erl_decode_buf()&lt;/code&gt; 는 버퍼의 내용을 디코딩하고 해당 Erlang 항을 반환합니다. &lt;code&gt;erl_decode_buf()&lt;/code&gt; 는 버퍼에 연속적으로 저장된 여러 인코딩 된 용어를 처리하기위한 간단한 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ba5ce02b66c6ebb8266816eb2a37f2798dcf9446" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_decode()&lt;/code&gt; returns an Erlang term corresponding to the contents of &lt;code&gt;bufp&lt;/code&gt; on success, otherwise &lt;code&gt;NULL&lt;/code&gt;. &lt;code&gt;erl_decode_buf()&lt;/code&gt; returns an Erlang term corresponding to the first of the consecutive terms in &lt;code&gt;bufpp&lt;/code&gt; and moves &lt;code&gt;bufpp&lt;/code&gt; forward to point to the next term in the buffer. On failure, each of the functions return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_decode()&lt;/code&gt; 는 성공시 &lt;code&gt;bufp&lt;/code&gt; 의 내용에 해당하는 Erlang 용어를 반환하고 , 그렇지 않으면 &lt;code&gt;NULL&lt;/code&gt; 입니다. &lt;code&gt;erl_decode_buf()&lt;/code&gt; 의 연속 된 측면의 첫 번째에 해당하는 용어 얼랑 반환 &lt;code&gt;bufpp&lt;/code&gt; 를 하고 이동 &lt;code&gt;bufpp&lt;/code&gt; 버퍼 내의 다음 용어 포인트 앞으로. 실패하면 각 함수는 &lt;code&gt;NULL&lt;/code&gt; 을 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="379b4dd10cbc4012f16c19966712684f66e8debd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_drv_cond_wait&lt;/code&gt; can return even if no one has signaled or broadcast on the condition variable. Code calling &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; is always to be prepared for &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; returning even if the condition that the thread was waiting for has not occurred. That is, when returning from &lt;code&gt;erl_drv_cond_wait&lt;/code&gt;, always check if the condition has occurred, and if not call &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; again.</source>
          <target state="translated">&lt;code&gt;erl_drv_cond_wait&lt;/code&gt; 는 조건 변수에서 신호를 보내거나 브로드 캐스트 한 사람이 없어도 반환 할 수 있습니다. 코드를 호출 &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; 가 준비 할 항상 &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; 는 스레드가 대기 한 상태가 발생되지 않은 경우에도 반환. 즉, &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; 에서 리턴 할 때 항상 조건이 발생했는지 확인하고 &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; 를 다시 호출하지 않는지 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="79e9b0e47149950882d7b60dc390797727177f33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_encode()&lt;/code&gt; and &lt;code&gt;erl_encode_buf()&lt;/code&gt; encode Erlang terms into external format for storage or transmission. &lt;code&gt;erl_encode_buf()&lt;/code&gt; provides a simple mechanism for encoding several terms consecutively in the same buffer.</source>
          <target state="translated">&lt;code&gt;erl_encode()&lt;/code&gt; 및 &lt;code&gt;erl_encode_buf()&lt;/code&gt; 는 Erlang 용어를 저장 또는 전송을 위해 외부 형식으로 인코딩합니다. &lt;code&gt;erl_encode_buf()&lt;/code&gt; 는 동일한 버퍼에서 여러 용어를 연속적으로 인코딩하는 간단한 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4baf900ef87e2e2fe298443cfb69dc4f01e7196b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_err_quit()&lt;/code&gt; prints the specified string and terminates the program. For more information, see the &lt;code&gt;&lt;a href=&quot;erl_error&quot;&gt;erl_error&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;erl_err_quit()&lt;/code&gt; 는 지정된 문자열을 인쇄하고 프로그램을 종료합니다. 자세한 정보는 &lt;code&gt;&lt;a href=&quot;erl_error&quot;&gt;erl_error&lt;/a&gt;&lt;/code&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e8ad05d64d240eb35447227773b5efeb35da3b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt; is a &quot;modifiable lvalue&quot; (just like ISO C defines &lt;code&gt;errno&lt;/code&gt; to be) rather than a variable. This means it can be implemented as a macro (expanding to, for example, &lt;code&gt;*_erl_errno()&lt;/code&gt;). For reasons of thread safety (or task safety), this is exactly what we do on most platforms.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt; 는 변수 가 아닌 &quot;수정 가능한 lvalue&quot;(ISO C가 &lt;code&gt;errno&lt;/code&gt; 를 정의한 것처럼 )입니다. 이는 매크로로 구현 될 수 있음을 의미합니다 (예 : &lt;code&gt;*_erl_errno()&lt;/code&gt; ). 스레드 안전성 (또는 작업 안전성)으로 인해 대부분의 플랫폼에서 수행하는 작업입니다.</target>
        </trans-unit>
        <trans-unit id="34bc77955b3edc6f1b005dd775d48e0ab7698cfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt; is initially (at program startup) zero and is then set by many &lt;code&gt;Erl_Interface&lt;/code&gt; functions on failure to a non-zero error code to indicate what kind of error it encountered. A successful function call can change &lt;code&gt;erl_errno&lt;/code&gt; (by calling some other function that fails), but no function does never set it to zero. This means that you cannot use &lt;code&gt;erl_errno&lt;/code&gt; to see &lt;strong&gt;if&lt;/strong&gt; a function call failed. Instead, each function reports failure in its own way (usually by returning a negative number or &lt;code&gt;NULL&lt;/code&gt;), in which case you can examine &lt;code&gt;erl_errno&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt; 는 초기에 (프로그램 시작시) 0이며 많은 &lt;code&gt;Erl_Interface&lt;/code&gt; 함수에 의해 실패시 0이 아닌 오류 코드로 설정되어 어떤 종류의 오류가 발생했는지 나타냅니다. 성공적인 함수 호출은 실패한 다른 함수를 호출하여 &lt;code&gt;erl_errno&lt;/code&gt; 를 변경할 수 있지만 어떤 함수도 절대 0으로 설정하지 않습니다. 이는 &lt;code&gt;erl_errno&lt;/code&gt; 를 사용 하여 함수 호출이 실패 &lt;strong&gt;했는지&lt;/strong&gt; 확인할 수 없음을 의미합니다 . 대신, 각 함수는 고유 한 방식으로 실패를보고합니다 (보통 음수 또는 &lt;code&gt;NULL&lt;/code&gt; 을 리턴 함 ).이 경우 세부 사항 은 &lt;code&gt;erl_errno&lt;/code&gt; 를 검사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5acd6abeba816006f87b24f69ff2b195240238f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt; uses the error codes defined in your system's &lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt; 는 시스템의 &lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt; 에 정의 된 오류 코드를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="c80f4ee4dd5d5e5944250455f8a4fb7e666fa984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d0255913a82bda8266c0f53fd482ec96e0c756fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_error&lt;/code&gt;: Error print routines</source>
          <target state="translated">&lt;code&gt;erl_error&lt;/code&gt; : 오류 인쇄 루틴</target>
        </trans-unit>
        <trans-unit id="49742a982f4b2c3d65ba0271a9f9167804fd4846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_free_compound()&lt;/code&gt; recursively frees all of the subterms associated with a specified Erlang term, regardless of whether we are still holding pointers to the subterms.</source>
          <target state="translated">&lt;code&gt;erl_free_compound()&lt;/code&gt; 는 하위 용어에 대한 포인터를 보유하고 있는지 여부에 관계없이 지정된 Erlang 용어와 관련된 모든 하위 용어를 재귀 적으로 해제합니다.</target>
        </trans-unit>
        <trans-unit id="350f05cc0384f5d9c9b0647d551ddc37ead71eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_global&lt;/code&gt;: Access globally registered names</source>
          <target state="translated">&lt;code&gt;erl_global&lt;/code&gt; : 전체적으로 등록 된 이름에 액세스</target>
        </trans-unit>
        <trans-unit id="490136f48685bc8e7f8c28eeeb4b753f9cc34900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_interface(3)&lt;/code&gt;, &lt;code&gt;mnesia(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erl_interface(3)&lt;/code&gt; , &lt;code&gt;mnesia(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd8d30fa75a8dd672597b51ad9c0775fc3e85859" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_marshal&lt;/code&gt;, &lt;code&gt;erl_eterm&lt;/code&gt;, &lt;code&gt;erl_format&lt;/code&gt;, and &lt;code&gt;erl_malloc&lt;/code&gt;: Handling of the Erlang external term format</source>
          <target state="translated">&lt;code&gt;erl_marshal&lt;/code&gt; , &lt;code&gt;erl_eterm&lt;/code&gt; , &lt;code&gt;erl_format&lt;/code&gt; 및 &lt;code&gt;erl_malloc&lt;/code&gt; : Erlang 외부 용어 형식 처리</target>
        </trans-unit>
        <trans-unit id="efb7d603ad2ca6fa5979574f628b6e1c162ab191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_match&lt;/code&gt; binds the contents of &lt;code&gt;Age&lt;/code&gt; to &lt;code&gt;21&lt;/code&gt; the first time it reaches the variable.</source>
          <target state="translated">&lt;code&gt;erl_match&lt;/code&gt; 는 변수에 처음 도달 할 때 &lt;code&gt;Age&lt;/code&gt; 의 컨텐츠 를 &lt;code&gt;21&lt;/code&gt; 에 바인딩합니다 .</target>
        </trans-unit>
        <trans-unit id="af3381bc3757ea5261200b0904f682283cefe98b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_msg_tracer.c&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;erl_msg_tracer.c&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="ea57a0603e747c503f3a87106e1a80f8b2912c6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_msg_tracer.erl&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;erl_msg_tracer.erl&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="89cb1a04729fbf36b9855226acaf9cc258a9716d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_parse:abstract(T)&lt;/code&gt; is equivalent to &lt;code&gt;erl_parse:abstract(T, 0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_parse:abstract(T)&lt;/code&gt; 는 &lt;code&gt;erl_parse:abstract(T, 0)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2093087b106d203fc3331e7c52e280825f272e4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_posix_msg&lt;/code&gt;, The Windows 95 Registry (book from O'Reilly), Win32 Programmer's Reference (from Microsoft)</source>
          <target state="translated">&lt;code&gt;erl_posix_msg&lt;/code&gt; , Windows 95 레지스트리 (O'Reilly의 책), Win32 Programmer 's Reference (Microsoft의)</target>
        </trans-unit>
        <trans-unit id="cc72680de9e578548629cdb44d689e02a1caf3c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_prim_loader&lt;/code&gt; knows about the environment and how to fetch modules.</source>
          <target state="translated">&lt;code&gt;erl_prim_loader&lt;/code&gt; 는 환경과 모듈을 가져 오는 방법에 대해 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="08fa747747934ae4281559134142942e7b3025fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_rcp_from()&lt;/code&gt; returns &lt;code&gt;ERL_MSG&lt;/code&gt; on success (with &lt;code&gt;Emsg&lt;/code&gt; now containing the reply tuple), otherwise one of &lt;code&gt;ERL_TICK&lt;/code&gt;, &lt;code&gt;ERL_TIMEOUT&lt;/code&gt;, or &lt;code&gt;ERL_ERROR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_rcp_from()&lt;/code&gt; 반환 &lt;code&gt;ERL_MSG&lt;/code&gt; 을 (함께 성공 &lt;code&gt;Emsg&lt;/code&gt; 는 , 달리 하나 지금 응답 튜플 포함) &lt;code&gt;ERL_TICK&lt;/code&gt; , &lt;code&gt;ERL_TIMEOUT&lt;/code&gt; , 또는 &lt;code&gt;ERL_ERROR&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="89c060673603e3855cc1a3582950f440f3246668" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_receive()&lt;/code&gt; receives the message into a buffer, while &lt;code&gt;erl_receive_msg()&lt;/code&gt; decodes the message into an Erlang term.</source>
          <target state="translated">&lt;code&gt;erl_receive()&lt;/code&gt; 는 메시지를 버퍼로 수신하는 반면 &lt;code&gt;erl_receive_msg()&lt;/code&gt; 는 메시지를 Erlang 용어로 디코딩합니다.</target>
        </trans-unit>
        <trans-unit id="d4ac18969a90445e9ba83fceb181b0b596248c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_rpc()&lt;/code&gt; returns the remote function's return value on success, otherwise &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_rpc()&lt;/code&gt; 는 성공시 원격 함수의 반환 값을 반환하고, 그렇지 않으면 &lt;code&gt;NULL&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3e044b0f96b07d741727eb619036b486758dba48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_rpc_to()&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; on success, otherwise a negative number.</source>
          <target state="translated">&lt;code&gt;erl_rpc_to()&lt;/code&gt; 는 성공하면 &lt;code&gt;0&lt;/code&gt; 을, 그렇지 않으면 음수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ca8e4d92e12ea7bf88d771549108973539edd2f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_var_content()&lt;/code&gt; can be used to retrieve the content of any variables bound as a result of a call to &lt;code&gt;erl_match()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_var_content()&lt;/code&gt; 에 대한 호출의 결과로서 결합 어떤 변수의 내용 검색하는 데 사용할 수 &lt;code&gt;erl_match()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffa2b16333b2357002f2b172891b3aeee189267a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_after_morecore_hook&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;__after_morecore_hook&lt;/code&gt; that can be used for tracking used &lt;code&gt;malloc()&lt;/code&gt; implementations core memory usage. This is currently only used by unsupported features.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_after_morecore_hook&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에 사용 된 &lt;code&gt;malloc()&lt;/code&gt; 구현 코어 메모리 사용량 을 추적하는 데 사용할 수 있는 작동 &lt;code&gt;__after_morecore_hook&lt;/code&gt; 이 있어야합니다 . 현재 지원되지 않는 기능에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="106ac2ae4f4d78615c4b22c9cdecd2ff5ea16abc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_bigendian&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. No default. If &lt;code&gt;yes&lt;/code&gt;, the target system must be big endian. If &lt;code&gt;no&lt;/code&gt;, little endian. This can often be automatically detected, but not always. If not automatically detected, &lt;code&gt;configure&lt;/code&gt; will fail unless this variable is set. Since no default value is used, &lt;code&gt;configure&lt;/code&gt; will try to figure this out automatically.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_bigendian&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 없습니다. 경우 &lt;code&gt;yes&lt;/code&gt; , 대상 시스템은 큰 엔디안해야합니다. 만약 &lt;code&gt;no&lt;/code&gt; , 리틀 엔디안. 이것은 종종 자동으로 감지 될 수 있지만 항상 그런 것은 아닙니다. 자동으로 감지 되지 않으면이 변수를 설정하지 않으면 &lt;code&gt;configure&lt;/code&gt; 이 실패합니다. 기본값이 사용되지 않으므로 &lt;code&gt;configure&lt;/code&gt; 는이를 자동으로 파악하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="fb0788951887b98a8dbe08eb03f7145f14563a31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_build&lt;/code&gt; - The build system used. This value will be passed as &lt;code&gt;--build=$erl_xcomp_build&lt;/code&gt; argument to the &lt;code&gt;configure&lt;/code&gt; script. It does not have to be a full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet, but can be. The full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet will be created by &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_build&lt;/code&gt;. If set to &lt;code&gt;guess&lt;/code&gt;, the build system will be guessed using &lt;code&gt;$ERL_TOP/erts/autoconf/config.guess&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_build&lt;/code&gt; - 사용 된 빌드 시스템. 이 값은 &lt;code&gt;--build=$erl_xcomp_build&lt;/code&gt; 인수로 &lt;code&gt;configure&lt;/code&gt; 스크립트에 전달됩니다 . 완전한 &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; 삼중 항일 필요는 없지만 가능합니다. 전체 &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; 삼중 항은 &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_build&lt;/code&gt; 의해 생성됩니다 . &lt;code&gt;guess&lt;/code&gt; 로 설정하면 &lt;code&gt;$ERL_TOP/erts/autoconf/config.guess&lt;/code&gt; 사용하여 빌드 시스템을 추측 합니다.</target>
        </trans-unit>
        <trans-unit id="0d2e7a09a0a046af724617716e923bd5dc46a979" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_clock_gettime_cpu_time&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;clock_gettime()&lt;/code&gt; implementation that can be used for retrieving process CPU time.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_clock_gettime_cpu_time&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에는 프로세스 CPU 시간을 검색하는 데 사용할 수 있는 작동중인 &lt;code&gt;clock_gettime()&lt;/code&gt; 구현이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="93989cef7ebb320f151ef5c78056c91b8be2ae50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_configure_flags&lt;/code&gt; - Extra configure flags to pass to the &lt;code&gt;configure&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_configure_flags&lt;/code&gt; - &lt;code&gt;configure&lt;/code&gt; 스크립트 에 전달할 추가 구성 플래그 .</target>
        </trans-unit>
        <trans-unit id="9fc611160841c3877cca40ed51cce51ec4d3a98f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_dlsym_brk_wrappers&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;dlsym(RTLD_NEXT, &amp;lt;S&amp;gt;)&lt;/code&gt; implementation that can be used on &lt;code&gt;brk&lt;/code&gt; and &lt;code&gt;sbrk&lt;/code&gt; symbols used by the &lt;code&gt;malloc()&lt;/code&gt; implementation in use, and by this track the &lt;code&gt;malloc()&lt;/code&gt; implementations core memory usage. This is currently only used by unsupported features.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_dlsym_brk_wrappers&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. 경우 &lt;code&gt;yes&lt;/code&gt; , 타겟 시스템은 작동 있어야 &lt;code&gt;dlsym(RTLD_NEXT, &amp;lt;S&amp;gt;)&lt;/code&gt; 에 사용할 수있는 구현 &lt;code&gt;brk&lt;/code&gt; 과 &lt;code&gt;sbrk&lt;/code&gt; 의해 사용 된 기호 &lt;code&gt;malloc()&lt;/code&gt; 사용 구현하고,이 트랙으로 &lt;code&gt;malloc()&lt;/code&gt; 구현 코어 메모리 사용량 . 이것은 현재 지원되지 않는 기능에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="88772d054eb8016bb1571c489deaadde7477ef0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_double_middle&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have doubles in &quot;middle-endian&quot; format. If &lt;code&gt;no&lt;/code&gt;, it has &quot;regular&quot; endianness.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_double_middle&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. 경우 &lt;code&gt;yes&lt;/code&gt; , 대상 시스템은 &quot;중간 엔디안&quot;형식의 복식이 있어야합니다. 그렇지 &lt;code&gt;no&lt;/code&gt; 경우 &quot;일반&quot;엔디안이 있습니다.</target>
        </trans-unit>
        <trans-unit id="062309279417fd3e6eea7ce95bfd1cb641ae88a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_getaddrinfo&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;getaddrinfo()&lt;/code&gt; implementation that can handle both IPv4 and IPv6.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_getaddrinfo&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에는 IPv4 및 IPv6을 모두 처리 할 수 있는 작동하는 &lt;code&gt;getaddrinfo()&lt;/code&gt; 구현이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="62ef40ba2e6666bf10a25e23fa6e022f5d43ccad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_gethrvtime_procfs_ioctl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;gethrvtime()&lt;/code&gt; implementation and is used with procfs &lt;code&gt;ioctl()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_gethrvtime_procfs_ioctl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. 경우 &lt;code&gt;yes&lt;/code&gt; , 대상 시스템이 작동해야합니다 &lt;code&gt;gethrvtime()&lt;/code&gt; 구현을하고 procfs의의와 함께 사용 &lt;code&gt;ioctl()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="de14cddf739b273dffb0ae8cd1c96f5b04ac40e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_host&lt;/code&gt; - Cross host/target system to build for. This value will be passed as &lt;code&gt;--host=$erl_xcomp_host&lt;/code&gt; argument to the &lt;code&gt;configure&lt;/code&gt; script. It does not have to be a full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet, but can be. The full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet will be created by &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_host&lt;/code&gt; - 빌드 할 교차 호스트 / 대상 시스템. 이 값은 &lt;code&gt;--host=$erl_xcomp_host&lt;/code&gt; 인수로 &lt;code&gt;configure&lt;/code&gt; 스크립트에 전달됩니다 . 완전한 &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; 삼중 항일 필요는 없지만 가능합니다. 전체 &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; 트리플렛은 &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_host&lt;/code&gt; 의해 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="d8a2469b397bddd3193a3cceadcdc867f41c4929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_isysroot&lt;/code&gt; - The absolute path to the system root for includes of the cross compilation environment. If not set, this value defaults to &lt;code&gt;$erl_xcomp_sysroot&lt;/code&gt;, i.e., only set this value if the include system root path is not the same as the system root path.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_isysroot&lt;/code&gt; - 크로스 컴파일 환경을 포함하기위한 시스템 루트의 절대 경로입니다. 설정되지 않은 경우이 값의 기본값은 &lt;code&gt;$erl_xcomp_sysroot&lt;/code&gt; . 즉, 포함 시스템 루트 경로가 시스템 루트 경로와 동일하지 않은 경우에만이 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a174542bd82e842d632bc9a19384e17908d3094d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_kqueue&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;kqueue()&lt;/code&gt; implementation that returns a file descriptor which can be used by &lt;code&gt;poll()&lt;/code&gt; and/or &lt;code&gt;select()&lt;/code&gt;. If &lt;code&gt;no&lt;/code&gt; and the target system has not got &lt;code&gt;epoll()&lt;/code&gt; or &lt;code&gt;/dev/poll&lt;/code&gt;, the kernel-poll feature will be disabled.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_kqueue&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에는 &lt;code&gt;poll()&lt;/code&gt; 및 / 또는 &lt;code&gt;select()&lt;/code&gt; 사용할 수있는 파일 디스크립터를 리턴 하는 작동 &lt;code&gt;kqueue()&lt;/code&gt; 구현이 있어야합니다 . 경우 &lt;code&gt;no&lt;/code&gt; 대상 시스템이 없어되지 &lt;code&gt;epoll()&lt;/code&gt; 또는 &lt;code&gt;/dev/poll&lt;/code&gt; , 커널 설문 조사 기능이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="b7613c86b3bd0e02cd1f155080c92d4b46295b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_clock_gettime_correction&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; on Linux; otherwise, &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;clock_gettime(CLOCK_MONOTONIC, _)&lt;/code&gt; on the target system must work. This variable is recommended to be set to &lt;code&gt;no&lt;/code&gt; on Linux systems with kernel versions less than 2.6.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_clock_gettime_correction&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . Linux에서는 기본값이 &lt;code&gt;yes&lt;/code&gt; 입니다. 그렇지 않으면 &lt;code&gt;no&lt;/code&gt; 입니다. 만약 &lt;code&gt;yes&lt;/code&gt; , &lt;code&gt;clock_gettime(CLOCK_MONOTONIC, _)&lt;/code&gt; 대상 시스템의 필수 작업에. 커널 버전이 2.6 미만인 Linux 시스템 에서는이 변수를 &lt;code&gt;no&lt;/code&gt; 로 설정하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="2d3e383de5424f1e5dee790ee61b3f671152983e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_nptl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; on Linux; otherwise, &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have NPTL (Native POSIX Thread Library). Older Linux systems have LinuxThreads instead of NPTL (Linux kernel versions typically less than 2.6).</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_nptl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . Linux에서는 기본값이 &lt;code&gt;yes&lt;/code&gt; 입니다. 그렇지 않으면 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에 NPTL (기본 POSIX 스레드 라이브러리)이 있어야합니다. 이전 Linux 시스템에는 NPTL (Linux 커널 버전은 일반적으로 2.6 미만) 대신 LinuxThreads가 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc0916eebc7a8310a6d4f48aed9731ce70a892fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_usable_sigaltstack&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; on Linux; otherwise, &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;sigaltstack()&lt;/code&gt; must be usable on the target system. &lt;code&gt;sigaltstack()&lt;/code&gt; on Linux kernel versions less than 2.4 are broken.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_usable_sigaltstack&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . Linux에서는 기본값이 &lt;code&gt;yes&lt;/code&gt; 입니다. 그렇지 않으면 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템 에서 &lt;code&gt;sigaltstack()&lt;/code&gt; 을 사용할 수 있어야합니다. 2.4 미만의 Linux 커널 버전에서 &lt;code&gt;sigaltstack()&lt;/code&gt; 이 손상되었습니다.</target>
        </trans-unit>
        <trans-unit id="c2acd0cc21779f12608e8b02afc45f6f35d3f129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_usable_sigusrx&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the &lt;code&gt;SIGUSR1&lt;/code&gt; and &lt;code&gt;SIGUSR2&lt;/code&gt; signals must be usable by the ERTS. Old LinuxThreads thread libraries (Linux kernel versions typically less than 2.2) used these signals and made them unusable by the ERTS.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_usable_sigusrx&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;yes&lt;/code&gt; 입니다. 경우 &lt;code&gt;yes&lt;/code&gt; 는 &lt;code&gt;SIGUSR1&lt;/code&gt; 과 &lt;code&gt;SIGUSR2&lt;/code&gt; 신호는 ERTS으로 사용할 수 있어야합니다. 이전 LinuxThreads 스레드 라이브러리 (일반적으로 Linux 커널 버전 2.2 미만)는 이러한 신호를 사용하여 ERTS에서 사용할 수 없게 만들었습니다.</target>
        </trans-unit>
        <trans-unit id="cfcf1f57f212db2dd52856094c1fc2c9722d44db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_poll&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt; on Darwin/MacOSX; otherwise, &lt;code&gt;yes&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;poll()&lt;/code&gt; implementation that also can handle devices. If &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt; will be used instead of &lt;code&gt;poll()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_poll&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . Darwin / MacOSX &lt;code&gt;no&lt;/code&gt; 기본값이 no 입니다. 그렇지 않으면 &lt;code&gt;yes&lt;/code&gt; . &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에는 장치를 처리 할 수 있는 작동중인 &lt;code&gt;poll()&lt;/code&gt; 구현이 있어야합니다 . 경우 &lt;code&gt;no&lt;/code&gt; , &lt;code&gt;select()&lt;/code&gt; 대신 사용됩니다 &lt;code&gt;poll()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4509c2e0afa469bdbca4de5f6467f7509e094da4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_posix_memalign&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; if &lt;code&gt;posix_memalign&lt;/code&gt; system call exists; otherwise &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a &lt;code&gt;posix_memalign&lt;/code&gt; implementation that accepts larger than page size alignment.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_posix_memalign&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . &lt;code&gt;posix_memalign&lt;/code&gt; 시스템 호출이 존재 하면 기본값은 &lt;code&gt;yes&lt;/code&gt; 입니다 . 그렇지 않으면 &lt;code&gt;no&lt;/code&gt; . 경우 &lt;code&gt;yes&lt;/code&gt; , 대상 시스템이 있어야합니다 &lt;code&gt;posix_memalign&lt;/code&gt; 페이지 크기 정렬보다 큰 받아 구현.</target>
        </trans-unit>
        <trans-unit id="269062cd25f17f7a80763e13e0627d10f6195d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_putenv_copy&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a &lt;code&gt;putenv()&lt;/code&gt; implementation that stores a copy of the key/value pair.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_putenv_copy&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템 에는 키 / 값 쌍의 사본을 저장하는 &lt;code&gt;putenv()&lt;/code&gt; 구현이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="ed767b8a3c4a99b707ed643536c651996e6dc1ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_reliable_fpe&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have reliable floating point exceptions.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_reliable_fpe&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다. &lt;code&gt;yes&lt;/code&gt; 경우 대상 시스템에 신뢰할 수있는 부동 소수점 예외가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="59e72f4c7e19b8159ea2181e2997a8a05d20d518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_sysroot&lt;/code&gt; - The absolute path to the system root of the cross compilation environment. Currently, the &lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;odbc&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt; applications need the system root. These applications will be skipped if the system root has not been set. The system root might be needed for other things too. If this is the case and the system root has not been set, &lt;code&gt;configure&lt;/code&gt; will fail and request you to set it.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_sysroot&lt;/code&gt; - 크로스 컴파일 환경의 시스템 루트에 대한 절대 경로입니다. 현재 &lt;code&gt;crypto&lt;/code&gt; , &lt;code&gt;odbc&lt;/code&gt; , &lt;code&gt;ssh&lt;/code&gt; 및 &lt;code&gt;ssl&lt;/code&gt; 애플리케이션에는 시스템 루트가 필요합니다. 시스템 루트가 설정되지 않은 경우 이러한 응용 프로그램을 건너 뜁니다. 다른 것에 대해서도 시스템 루트가 필요할 수 있습니다. 이 경우 시스템 루트가 설정되지 않은 경우, &lt;code&gt;configure&lt;/code&gt; 실패하고 설정을 요청합니다.</target>
        </trans-unit>
        <trans-unit id="3e6a8bf12dc9d18db013d9943a8ccd5cd0ddde1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xconnect()&lt;/code&gt; requires the IP address of the remote host and the alivename of the remote node to be specified. &lt;code&gt;erl_connect()&lt;/code&gt; provides an alternative interface, and determines the information from the node name provided.</source>
          <target state="translated">&lt;code&gt;erl_xconnect()&lt;/code&gt; 에는 원격 호스트의 IP 주소와 원격 노드의 활성 이름을 지정해야합니다. &lt;code&gt;erl_connect()&lt;/code&gt; 는 대체 인터페이스를 제공하고 제공된 노드 이름에서 정보를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="d03a004dcad6782a74f3ee2ad45aaa77ce5e8b9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; is deprecated and will stop working in a future release.</source>
          <target state="translated">&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; 은 더 이상 사용되지 않으며 향후 릴리스에서 작동이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="b541018cbc16f83926cf0aa53af10640840326d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; retrieves the call stack back-trace (&lt;strong&gt;stacktrace&lt;/strong&gt;) for an exception that has just been caught in the calling process as a list of &lt;code&gt;{Module,Function,Arity,Location}&lt;/code&gt; tuples. Field &lt;code&gt;Arity&lt;/code&gt; in the first tuple can be the argument list of that function call instead of an arity integer, depending on the exception.</source>
          <target state="translated">&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; 은 호출 프로세스에서 &lt;code&gt;{Module,Function,Arity,Location}&lt;/code&gt; 튜플 목록으로 방금 포착 된 예외에 대한 호출 스택 역 추적 ( &lt;strong&gt;stacktrace&lt;/strong&gt; )을 검색합니다 . 첫 번째 튜플의 필드 &lt;code&gt;Arity&lt;/code&gt; 는 예외에 따라 arity 정수 대신 해당 함수 호출의 인수 목록이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05fef3fa781d4e70da7ee356acf9e2ff1ed81a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:system_info(allocated_areas)&lt;/code&gt; is intended for debugging, and the content is highly implementation-dependent. The content of the results therefore changes when needed without prior notice.</source>
          <target state="translated">&lt;code&gt;erlang:system_info(allocated_areas)&lt;/code&gt; 는 디버깅을위한 것이며 내용은 구현에 따라 다릅니다. 따라서 결과의 내용은 사전 통지없이 필요할 때 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="830e05bfdcbac8e2927b778f03e4949758867586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:system_profile&lt;/code&gt; behavior can change in a future release.</source>
          <target state="translated">&lt;code&gt;erlang:system_profile&lt;/code&gt; 동작은 다음 릴리스에서 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ade3f5ef6d20dce54cf803b26b865572f5eadab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang&lt;/code&gt; manual page in ERTS (describes the BIFs)</source>
          <target state="translated">&lt;code&gt;erlang&lt;/code&gt; ERTS의 erlang 매뉴얼 페이지 (BIF 설명)</target>
        </trans-unit>
        <trans-unit id="fbf642775d24722a69d5fce0d0743d85adca8813" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlsrv&lt;/code&gt; also provides a command-line interface for registering, changing, starting, and stopping services.</source>
          <target state="translated">&lt;code&gt;erlsrv&lt;/code&gt; 는 서비스 등록, 변경, 시작 및 중지를위한 명령 행 인터페이스도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ffcc31c05996b61bdabb7b7e8aff7930a4d83bb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erofs&lt;/code&gt; - Read-only file system</source>
          <target state="translated">&lt;code&gt;erofs&lt;/code&gt; - 읽기 전용 파일 시스템</target>
        </trans-unit>
        <trans-unit id="b80c4112296dc76f5ba849a8a385bdf8af5edca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erofs&lt;/code&gt; - Read-only filesystem</source>
          <target state="translated">&lt;code&gt;erofs&lt;/code&gt; - 읽기 전용 파일 시스템</target>
        </trans-unit>
        <trans-unit id="20240f074145c249d4dd67a56257df5ecab46378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpcmismatch&lt;/code&gt; - Wrong RPC version</source>
          <target state="translated">&lt;code&gt;erpcmismatch&lt;/code&gt; - 잘못된 RPC 버전</target>
        </trans-unit>
        <trans-unit id="d1ff3aacd3633fcdf694fcdcba924da80f94fb62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erremote&lt;/code&gt; - Object is remote</source>
          <target state="translated">&lt;code&gt;erremote&lt;/code&gt; - 원격 객체</target>
        </trans-unit>
        <trans-unit id="da7a5cd48bf89d6d3e5afa1bd3d7b154e5ab549b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_handler:undefined_function(Module, Function, Args)&lt;/code&gt; is evaluated by the new process if &lt;code&gt;Module:Function/Arity&lt;/code&gt; does not exist (where &lt;code&gt;Arity&lt;/code&gt; is the length of &lt;code&gt;Args&lt;/code&gt;). The error handler can be redefined (see &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;). If &lt;code&gt;error_handler&lt;/code&gt; is undefined, or the user has redefined the default &lt;code&gt;error_handler&lt;/code&gt; and its replacement is undefined, a failure with reason &lt;code&gt;undef&lt;/code&gt; occurs.</source>
          <target state="translated">&lt;code&gt;error_handler:undefined_function(Module, Function, Args)&lt;/code&gt; 는 &lt;code&gt;Module:Function/Arity&lt;/code&gt; 가없는 경우 새 프로세스에서 평가 합니다 (여기서 &lt;code&gt;Arity&lt;/code&gt; 는 &lt;code&gt;Args&lt;/code&gt; 길이입니다 ). 오류 처리기를 재정의 할 수 있습니다 ( &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt; 참조 ). 경우 &lt;code&gt;error_handler&lt;/code&gt; 가 정의되지 않았거나 사용자가 기본 재정의 &lt;code&gt;error_handler&lt;/code&gt; 을 하고 교체가 정의되어 있지, 이유 실패는 &lt;code&gt;undef&lt;/code&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f3c883521cdee8e2481c0a180da1faa37dba1788" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_logger(3)&lt;/code&gt;, &lt;code&gt;gen_event(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;error_logger(3)&lt;/code&gt; , &lt;code&gt;gen_event(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d15e04a68c3e4f67bc4f5129d30fa1ef4d1ea0c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_logger(3)&lt;/code&gt;, &lt;code&gt;os_mon(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;error_logger(3)&lt;/code&gt; , &lt;code&gt;os_mon(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd36f251c6677faaaa0ae26d9f33603a67e12e26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_logger&lt;/code&gt; is no longer started by default, but is automatically started when an event handler is added with &lt;code&gt;error_logger:add_report_handler/1,2&lt;/code&gt;. The &lt;code&gt;error_logger&lt;/code&gt; module is then also added as a handler to the new logger.</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; 는 더 이상 기본적으로 시작되지 않지만 &lt;code&gt;error_logger:add_report_handler/1,2&lt;/code&gt; 와 함께 이벤트 핸들러가 추가되면 자동으로 시작됩니다 . &lt;code&gt;error_logger&lt;/code&gt; 의 모듈은 다음과 같은 새로운 로거 핸들러로서 추가된다.</target>
        </trans-unit>
        <trans-unit id="6de5fad938e46467ba29d2b5d7c334433a3dadc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_man&lt;/code&gt; is the name of the event manager and &lt;code&gt;no_reply&lt;/code&gt; is the event.</source>
          <target state="translated">&lt;code&gt;error_man&lt;/code&gt; 은 이벤트 관리자의 이름이고 &lt;code&gt;no_reply&lt;/code&gt; 는 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="9a7a600cb0b03c7fab63405b22d151fdd5e372af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts-EVsn/bin&lt;/code&gt; - Erlang runtime system executables</source>
          <target state="translated">&lt;code&gt;erts-EVsn/bin&lt;/code&gt; -Erlang 런타임 시스템 실행 파일</target>
        </trans-unit>
        <trans-unit id="b3cd589ffe1e4085965d3df7d06bb33b62969904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts:epmd&lt;/code&gt; is the Erlang Port Mapper Daemon. Distributed Erlang nodes register with &lt;code&gt;epmd&lt;/code&gt; on the local host to indicate to other nodes that they exist and can accept connections. &lt;code&gt;epmd&lt;/code&gt; maintains a register of node and port number information, and when a node wishes to connect to another node, it first contacts &lt;code&gt;epmd&lt;/code&gt; to find the correct port number to connect to.</source>
          <target state="translated">&lt;code&gt;erts:epmd&lt;/code&gt; 는 Erlang 포트 매퍼 데몬입니다. 분산 Erlang 노드 는 로컬 호스트에서 &lt;code&gt;epmd&lt;/code&gt; 에 등록 하여 다른 노드에 존재하고 연결을 수락 할 수 있음을 나타냅니다. &lt;code&gt;epmd&lt;/code&gt; 는 노드 및 포트 번호 정보의 등록을 유지하며, 노드가 다른 노드에 연결하려고 할 때 먼저 &lt;code&gt;epmd&lt;/code&gt; 에 접속하여 연결할 올바른 포트 번호를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="ae7b6b8838371f3daac96a3427a870a4e86c1b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts:erl_driver(4)&lt;/code&gt;, &lt;code&gt;erts:driver_entry(4)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts:erl_driver(4)&lt;/code&gt; , &lt;code&gt;erts:driver_entry(4)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9eb2668d0733b1a059266643087f67a7951fae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts:init(3)&lt;/code&gt;, &lt;code&gt;erts:erl_prim_loader(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts:init(3)&lt;/code&gt; , &lt;code&gt;erts:erl_prim_loader(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1115b36b9dcc89e47be8c97d9257688803ed8b28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc(3)&lt;/code&gt; is an Erlang Run-Time System internal memory allocator library. &lt;code&gt;erts_alloc_config&lt;/code&gt; is intended to be used to aid creation of an &lt;code&gt;erts_alloc(3)&lt;/code&gt; configuration that is suitable for a limited number of runtime scenarios. The configuration that &lt;code&gt;erts_alloc_config&lt;/code&gt; produce is intended as a suggestion, and may need to be adjusted manually.</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; 은 Erlang 런타임 시스템 내부 메모리 할당 자 라이브러리입니다. &lt;code&gt;erts_alloc_config&lt;/code&gt; 는 제한된 수의 런타임 시나리오에 적합한 &lt;code&gt;erts_alloc(3)&lt;/code&gt; 구성 작성을 지원하기 위해 사용됩니다 . &lt;code&gt;erts_alloc_config&lt;/code&gt; 가 생성 하는 구성 은 제안을위한 것으로 수동으로 조정해야합니다.</target>
        </trans-unit>
        <trans-unit id="95026c5f783035878205a90f4cb4555ca1c9fa28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc(3)&lt;/code&gt;, &lt;code&gt;erl(1)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; , &lt;code&gt;erl(1)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68e02d443e095b148ffff877159464806e11f021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc(3)&lt;/code&gt;, &lt;code&gt;erl(1)&lt;/code&gt;, &lt;code&gt;io(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; , &lt;code&gt;erl(1)&lt;/code&gt; , &lt;code&gt;io(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="658b0104deb072b5a8e17ebc4dd1534274ff60dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc&lt;/code&gt; is an Erlang runtime system internal memory allocator library. &lt;code&gt;erts_alloc&lt;/code&gt; provides the Erlang runtime system with a number of memory allocators.</source>
          <target state="translated">&lt;code&gt;erts_alloc&lt;/code&gt; 은 Erlang 런타임 시스템 내부 메모리 할당 자 라이브러리입니다. &lt;code&gt;erts_alloc&lt;/code&gt; 은 Erlang 런타임 시스템에 다수의 메모리 할당자를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="370d5868be6fac8c1b10ed1322a0d21f5022ecbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc&lt;/code&gt; is not obliged to strictly use the settings that have been passed to it (it can even ignore them).</source>
          <target state="translated">&lt;code&gt;erts_alloc&lt;/code&gt; 은 전달 된 설정을 엄격하게 사용해야 할 의무는 없습니다 (무시할 수도 있음).</target>
        </trans-unit>
        <trans-unit id="bbb376e06ce127dfb22a85316aa719e697c7b3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc_config&lt;/code&gt; is currently an experimental tool and might be subject to backward incompatible changes.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config&lt;/code&gt; 는 현재 실험적인 도구이며 이전 버전과 호환되지 않는 변경이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e5e5c670aa0173db46bdf3b49c89809166cfaa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc_config&lt;/code&gt; saves information about runtime scenarios and performs computations in a server that is automatically started. The server register itself under the name &lt;code&gt;'__erts_alloc_config__'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config&lt;/code&gt; 는 런타임 시나리오에 대한 정보를 저장하고 자동으로 시작되는 서버에서 계산을 수행합니다. 서버 자체는 &lt;code&gt;'__erts_alloc_config__'&lt;/code&gt; 이름으로 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="c6e621d5787597839455dcc92891d1cbff909ae1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;escript&lt;/code&gt; provides support for running short Erlang programs without having to compile them first, and an easy way to retrieve the command-line arguments.</source>
          <target state="translated">&lt;code&gt;escript&lt;/code&gt; 는 짧은 Erlang 프로그램을 먼저 컴파일하지 않고도 실행할 수 있으며 명령 행 인수를 쉽게 검색 할 수있는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="923c13835194b71ecffb751d0a9fc46ca90ebf18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;escript&lt;/code&gt; runs a script written in Erlang.</source>
          <target state="translated">&lt;code&gt;escript&lt;/code&gt; 는 Erlang으로 작성된 스크립트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="f3c95ecfec85bbad180888eae3642fcb4b398a54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eshutdown&lt;/code&gt; - Cannot send after socket shutdown</source>
          <target state="translated">&lt;code&gt;eshutdown&lt;/code&gt; - 소켓 종료 후 보낼 수 없습니다</target>
        </trans-unit>
        <trans-unit id="be442bbd7b626986bef7a3e9d34492da2887e492" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esocktnosupport&lt;/code&gt; - Socket type not supported</source>
          <target state="translated">&lt;code&gt;esocktnosupport&lt;/code&gt; - 소켓 유형이 지원되지 않습니다</target>
        </trans-unit>
        <trans-unit id="3da6e627fa5069bddcb047c9829a058f0cc9b92f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;espipe&lt;/code&gt; - Invalid seek</source>
          <target state="translated">&lt;code&gt;espipe&lt;/code&gt; - 유효하지 않은 탐색</target>
        </trans-unit>
        <trans-unit id="5d99cde7dd1bcef9ce2943aadb4ecbfe6e28f43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esrch&lt;/code&gt; - No such process</source>
          <target state="translated">&lt;code&gt;esrch&lt;/code&gt; - 해당 프로세스 없음</target>
        </trans-unit>
        <trans-unit id="43537a957d419bfe1cf591954ad9844fbb88e1ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esrmnt&lt;/code&gt; - Srmount error</source>
          <target state="translated">&lt;code&gt;esrmnt&lt;/code&gt; -스 마운트 오류</target>
        </trans-unit>
        <trans-unit id="d321374d4998327a70229d5b61947b76054c84b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;estale&lt;/code&gt; - Stale remote file handle</source>
          <target state="translated">&lt;code&gt;estale&lt;/code&gt; - 오래된 원격 파일 핸들</target>
        </trans-unit>
        <trans-unit id="84c3404f080f386a5f54b535e2881b13895740ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esuccess&lt;/code&gt; - Error 0</source>
          <target state="translated">&lt;code&gt;esuccess&lt;/code&gt; -오류 0</target>
        </trans-unit>
        <trans-unit id="d828893783957c44cc9a5374156eb809901283c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etags&lt;/code&gt; is a program that is part of the Emacs distribution. It is normally executed from a command line, like a unix shell or a DOS box.</source>
          <target state="translated">&lt;code&gt;etags&lt;/code&gt; 는 Emacs 배포판의 일부인 프로그램입니다. 일반적으로 유닉스 쉘이나 DOS 박스와 같은 명령 행에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="049235ae709c3c7df1621c487c02748d53a4c649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etime&lt;/code&gt; - Timer expired</source>
          <target state="translated">&lt;code&gt;etime&lt;/code&gt; - 타이머 만료</target>
        </trans-unit>
        <trans-unit id="6a7498e3491a6c3896e8f29e803459eaa6a5883b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etimedout&lt;/code&gt; - Connection timed out</source>
          <target state="translated">&lt;code&gt;etimedout&lt;/code&gt; - 연결 시간이 초과되었습니다</target>
        </trans-unit>
        <trans-unit id="2d425e09562b04579b949b00346af666eb229720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etoomanyrefs&lt;/code&gt; - Too many references</source>
          <target state="translated">&lt;code&gt;etoomanyrefs&lt;/code&gt; - 참조가 너무 많습니다</target>
        </trans-unit>
        <trans-unit id="7a995246edf0e806fcbf5ba45cc75e92eabb10f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etop&lt;/code&gt; is a command line tool that can connect to remote nodes and display information similar to what the UNIX tool top shows.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; 은 원격 노드에 연결하고 UNIX 도구 상단에 표시되는 것과 유사한 정보를 표시 할 수있는 명령 줄 도구입니다.</target>
        </trans-unit>
        <trans-unit id="42facdd428b4102c19724fc2bdc7a4d3a66c9b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etop&lt;/code&gt; uses the Erlang trace facility, and thus no other tracing is possible on the measured node while &lt;code&gt;etop&lt;/code&gt; is running, unless this option is set to &lt;code&gt;off&lt;/code&gt;. Also helpful if the &lt;code&gt;etop&lt;/code&gt; tracing causes too high load on the measured node. With tracing off, runtime is not measured.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; 은 Erlang 추적 기능을 사용 &lt;code&gt;etop&lt;/code&gt; 옵션이 &lt;code&gt;off&lt;/code&gt; 로 설정되어 있지 않으면 etop 이 실행중인 동안 측정 된 노드에서 다른 추적이 불가능 합니다 . &lt;code&gt;etop&lt;/code&gt; 추적이 측정 된 노드에서 너무 높은로드를 유발 하는 경우에도 유용 합니다. 추적을 해제하면 런타임이 측정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fc401f6cd9a2d36e07c3cf1d78783b78d1a3eed2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ets:match/2&lt;/code&gt; can be used:</source>
          <target state="translated">&lt;code&gt;ets:match/2&lt;/code&gt; 를 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b1b574263d8adbf3b35dace50b687638d4f62929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ets:match/2&lt;/code&gt; uses a simpler type of match specification, but it is still unreadable, and one has little control over the returned result. It is always a list of lists.</source>
          <target state="translated">&lt;code&gt;ets:match/2&lt;/code&gt; 는 더 간단한 유형의 일치 스펙을 사용하지만 여전히 읽을 수 없으며 리턴 된 결과를 거의 제어 할 수 없습니다. 항상 목록의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="ada7ea1adf9a7618d24851cc46af35f4d10c76c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etxtbsy&lt;/code&gt; - Text file or pseudo-device busy</source>
          <target state="translated">&lt;code&gt;etxtbsy&lt;/code&gt; - 텍스트 파일 또는 의사 장치 사용 중</target>
        </trans-unit>
        <trans-unit id="083cb827d71dd1a6114c058f15bd888df569133a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;euclean&lt;/code&gt; - Structure needs cleaning</source>
          <target state="translated">&lt;code&gt;euclean&lt;/code&gt; - 구조 청소가 필요합니다</target>
        </trans-unit>
        <trans-unit id="46f3f1bf6d759cafaec1d054c45a3fe6884ec756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eunatch&lt;/code&gt; - Protocol driver not attached</source>
          <target state="translated">&lt;code&gt;eunatch&lt;/code&gt; - 프로토콜 드라이버가 연결되지 않았습니다</target>
        </trans-unit>
        <trans-unit id="bf7c59b5877e3b8c7849fc033914477748ab7802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eusers&lt;/code&gt; - Too many users</source>
          <target state="translated">&lt;code&gt;eusers&lt;/code&gt; - 너무 많은 사용자</target>
        </trans-unit>
        <trans-unit id="f2801a73f510bc70a1b17da34cd3262897d9abd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval(QH)&lt;/code&gt; is equivalent to &lt;code&gt;eval(QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval(QH)&lt;/code&gt; 는 &lt;code&gt;eval(QH, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9fdd159f121d70ae36287cfa787183d9208f811" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event/4&lt;/code&gt; or &lt;code&gt;event/5&lt;/code&gt; is called whenever an event occurs in the &lt;code&gt;mod_security&lt;/code&gt; Erlang web server API module. (&lt;code&gt;event/4&lt;/code&gt; is called if &lt;code&gt;Address&lt;/code&gt; is undefined, otherwise &lt;code&gt;event/5&lt;/code&gt;. Argument &lt;code&gt;What&lt;/code&gt; specifies the type of event that has occurred and is one of the following reasons:</source>
          <target state="translated">&lt;code&gt;event/4&lt;/code&gt; 또는 &lt;code&gt;event/5&lt;/code&gt; 는 &lt;code&gt;mod_security&lt;/code&gt; Erlang 웹 서버 API 모듈 에서 이벤트가 발생할 때마다 호출 됩니다. ( &lt;code&gt;event/4&lt;/code&gt; 경우라고 &lt;code&gt;Address&lt;/code&gt; 정의되어 있지, 그렇지 않으면, &lt;code&gt;event/5&lt;/code&gt; . 인수 &lt;code&gt;What&lt;/code&gt; 발생하고 다음과 같은 이유 중 하나입니다 이벤트의 유형을 지정합니다 :</target>
        </trans-unit>
        <trans-unit id="d072a3b6d526de4f74b49703af037576bdfad4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event_module&lt;/code&gt;. Returns the name of the module that is the event handler callback module.</source>
          <target state="translated">&lt;code&gt;event_module&lt;/code&gt; . 이벤트 핸들러 콜백 모듈 인 모듈의 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="402ed55637d27b6db5c346a697b27c4e23aecf6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eversion&lt;/code&gt; - Version mismatch</source>
          <target state="translated">&lt;code&gt;eversion&lt;/code&gt; - 버전 불일치</target>
        </trans-unit>
        <trans-unit id="647d5575d47453143c12212c48433892a90fd193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ewouldblock&lt;/code&gt; - Operation would block</source>
          <target state="translated">&lt;code&gt;ewouldblock&lt;/code&gt; - 작업 차단</target>
        </trans-unit>
        <trans-unit id="602c2395d81920b3a86446adde96bb734365f744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exceeded_recv_pending_limit&lt;/code&gt; - the pending limit was exceeded for this request.</source>
          <target state="translated">&lt;code&gt;exceeded_recv_pending_limit&lt;/code&gt; - 이 요청에 대한 보류 제한이 초과되었습니다.</target>
        </trans-unit>
        <trans-unit id="6b268350b68fa90a8d331488111c0e0759b39f7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exdev&lt;/code&gt; - Cross-domain link</source>
          <target state="translated">&lt;code&gt;exdev&lt;/code&gt; - 도메인 간 링크</target>
        </trans-unit>
        <trans-unit id="f1ccd99602a56cc38a8aa304df9bea1e99ee891b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exfull&lt;/code&gt; - Message tables full</source>
          <target state="translated">&lt;code&gt;exfull&lt;/code&gt; - 메시지 테이블이 가득 참</target>
        </trans-unit>
        <trans-unit id="60af1af3777d71cfb1fd237bb62937ec1d06ed92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; - Attach when a process terminates.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; - 프로세스가 종료되면 첨부합니다.</target>
        </trans-unit>
        <trans-unit id="1c1059adcf3427060a2029651784203116bcc11d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; - The process is terminated. &lt;code&gt;Info=ExitReason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; - 프로세스가 종료되었습니다. &lt;code&gt;Info=ExitReason&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f3609f531c6a4767738d2bcd3db8440c4cc3ea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit_after/2&lt;/code&gt; is the same as &lt;code&gt;exit_after(Time, self(), Reason1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit_after/2&lt;/code&gt; 는 &lt;code&gt;exit_after(Time, self(), Reason1)&lt;/code&gt; )과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="118d8c64ed002fe7fab5312cc2217b8f07167d7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit_after/3&lt;/code&gt; sends an exit signal with reason &lt;code&gt;Reason1&lt;/code&gt; to pid &lt;code&gt;Pid&lt;/code&gt;. Returns &lt;code&gt;{ok, TRef}&lt;/code&gt; or &lt;code&gt;{error, Reason2}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit_after/3&lt;/code&gt; 이유와 이탈 신호 전송 &lt;code&gt;Reason1&lt;/code&gt; PID로 &lt;code&gt;Pid&lt;/code&gt; . &lt;code&gt;{ok, TRef}&lt;/code&gt; 또는 &lt;code&gt;{error, Reason2}&lt;/code&gt; 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="57a4da802d829e65d707a43afdecdefa889b176e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extra_db_nodes&lt;/code&gt;. Returns a list of extra &lt;code&gt;db_nodes&lt;/code&gt; to be contacted at startup.</source>
          <target state="translated">&lt;code&gt;extra_db_nodes&lt;/code&gt; . 시작할 때 연락 할 여분의 &lt;code&gt;db_nodes&lt;/code&gt; 목록을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f67bbcd2f5db6c737e1cdcaf62c45bea5806d3ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract/1&lt;/code&gt; and &lt;code&gt;extract/2&lt;/code&gt; are provided as synonyms to resemble module &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extract/1&lt;/code&gt; 및 &lt;code&gt;extract/2&lt;/code&gt; 는 모듈 &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; 와 유사한 동의어로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="bad8d8a74a2c1e67fba0103c4e0b9e8fc42f8bad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a value to be converted to an Erlang float.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 는 Erlang float로 변환 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="8abcbec2f75b3c23ae1c64ef59eb60038bca7348" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is the floating point value to assign.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 는 할당 할 부동 소수점 값입니다.</target>
        </trans-unit>
        <trans-unit id="710e9ee5a7d68edae919806d740836a6e6769825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;failure()&lt;/code&gt; indicates an local or external error and can be one of the following:</source>
          <target state="translated">&lt;code&gt;failure()&lt;/code&gt; 는 로컬 또는 외부 오류를 나타내며 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2469c8655cb917a2bb9031e6447254c2660c34c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fallback_activated&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if a fallback is activated, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fallback_activated&lt;/code&gt; . 폴 백이 활성화되면 &lt;code&gt;true&lt;/code&gt; 를 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="60075ae08f50200bea797fc51fb20fd327586f4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if a trace message is not to be emitted</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 추적 메시지가 생성되지 않으면 false</target>
        </trans-unit>
        <trans-unit id="691de5e0cb4604679c034ecba0f7307479b83501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the user or password is invalid</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 사용자 또는 비밀번호가 유효하지 않은 경우 false</target>
        </trans-unit>
        <trans-unit id="92bf1a588f04ff032c351f4a75c7475ff39b9c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; is returned if the object is not defined in any loaded MIB.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로드 된 MIB에 오브젝트가 정의되어 있지 않으면 false 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="8ab5542919b9a6acd08b698295fc02f6c85b9d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; is returned if the object or type is not defined in any loaded MIB, or if it does not define the symbolic value as enumerated.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로드 된 MIB에 오브젝트 또는 유형이 정의되지 않았거나 기호 값을 열거 된대로 정의하지 않으면 false 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="8cf27dbee3f5798e5fa468395970992d97c075a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;family_field(Family1)&lt;/code&gt; is equivalent to &lt;code&gt;family_union(family_domain(Family1), family_range(Family1))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;family_field(Family1)&lt;/code&gt; 은 &lt;code&gt;family_union(family_domain(Family1), family_range(Family1))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3854004da408f511ea42cc065efe9087aef81ab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;family_union(F)&lt;/code&gt; is equivalent to &lt;code&gt;family_projection(fun sofs:union/1,&amp;nbsp;F)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;family_union(F)&lt;/code&gt; 는 &lt;code&gt;family_projection(fun sofs:union/1,&amp;nbsp;F)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2e799cbff48f1a907111621ca53afcebf32efbdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fcgi&lt;/code&gt; - Fast CGI</source>
          <target state="translated">&lt;code&gt;fcgi&lt;/code&gt; - 빠른 CGI</target>
        </trans-unit>
        <trans-unit id="71f8b0c3fdcfff764a1aed30bb055ba063f18789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; is an open connection to Erlang. &lt;code&gt;Mnesia&lt;/code&gt; 3.0 or later must be running on the Erlang node.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; 는 Erlang에 대한 열린 연결입니다. Erlang 노드에서 &lt;code&gt;Mnesia&lt;/code&gt; 3.0 이상이 실행 중이어야합니다.</target>
        </trans-unit>
        <trans-unit id="c5ec650d9bc77e0e1686955a7fe9bc4c0e0189bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; is an open descriptor to an Erlang connection.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; 는 Erlang 연결에 대한 열린 설명자입니다.</target>
        </trans-unit>
        <trans-unit id="f656dcfaaac691553d45cbf7a151c9b166ddc18f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; is an open descriptor to an Erlang connection. It is obtained from a previous &lt;code&gt;ei_connect&lt;/code&gt; or &lt;code&gt;ei_accept&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; 는 Erlang 연결에 대한 열린 설명자입니다. 이전 &lt;code&gt;ei_connect&lt;/code&gt; 또는 &lt;code&gt;ei_accept&lt;/code&gt; 에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="3fa5627f362a188635bb87aa757264405865e18d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;field(R)&lt;/code&gt; is equivalent to &lt;code&gt;union(domain(R), range(R))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;field(R)&lt;/code&gt; 은 &lt;code&gt;union(domain(R), range(R))&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88a3db78fcb0a551e7d60442210a1053b3e2932b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file(3)&lt;/code&gt;&lt;code&gt;filename(3)&lt;/code&gt; and J. Postel and J. Reynolds: File Transfer Protocol (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;file(3)&lt;/code&gt; &lt;code&gt;filename(3)&lt;/code&gt; 및 J. Postel 및 J. Reynolds : 파일 전송 프로토콜 ( &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ae107562ea3ff90c303c98876ec07e8a82752603" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file&lt;/code&gt; (use host data retrieved from system configuration files and/or the user configuration file)</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; (시스템 구성 파일 및 / 또는 사용자 구성 파일에서 검색된 호스트 데이터 사용)</target>
        </trans-unit>
        <trans-unit id="e166683d3f6708ae36021cc46bb7886dd1a606ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;files/1,2&lt;/code&gt; does exactly the same thing as &lt;code&gt;all/0,1&lt;/code&gt; but for the specified &lt;code&gt;ModFiles&lt;/code&gt;, which is a list of module or file names. The file extension &lt;code&gt;.erl&lt;/code&gt; may be omitted.</source>
          <target state="translated">&lt;code&gt;files/1,2&lt;/code&gt; 는 &lt;code&gt;all/0,1&lt;/code&gt; 과 정확히 동일 하지만 모듈 또는 파일 이름 목록 인 지정된 &lt;code&gt;ModFiles&lt;/code&gt; 에 대해 동일합니다 . 파일 확장자 &lt;code&gt;.erl&lt;/code&gt; 은 생략 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5432ba00c886379b53d593a55e1fa224fcc98201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&lt;/code&gt; takes a predicate of one argument and a list and returns all elements in the list that satisfy the predicate:</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; 는 하나의 인수와 목록의 술어를 취하고 술어를 만족시키는 목록의 모든 요소를 ​​리턴합니다.</target>
        </trans-unit>
        <trans-unit id="a94764c4b442f372ab753c4167e78edef5fc2f32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filtered&lt;/code&gt; for data produced by a filter (or predictor)</source>
          <target state="translated">&lt;code&gt;filtered&lt;/code&gt; 필터에 의해 생성 된 데이터 (또는 예측)</target>
        </trans-unit>
        <trans-unit id="51bcc70ead8fb8bc2ab7ac0e1c47dccadf16d1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first_next&lt;/code&gt; - The table is traversed one key at a time by calling &lt;code&gt;dets:first/1&lt;/code&gt; and &lt;code&gt;dets:next/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;first_next&lt;/code&gt; - 테이블은 &lt;code&gt;dets:first/1&lt;/code&gt; 및 &lt;code&gt;dets:next/2&lt;/code&gt; 를 호출하여 한 번에 하나의 키를 통과 합니다.</target>
        </trans-unit>
        <trans-unit id="7974437ce9ad4bbc04754256eae30cd9612e597c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags : integer&lt;/code&gt; :: Flags. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;flags : integer&lt;/code&gt; :: 플래그. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf65ddbad42b1d629c4b6ca8ef8bcda3605fd18f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; can be used to indicate that the NIF is a &lt;code&gt;&lt;a href=&quot;#dirty_nifs&quot;&gt;dirty NIF&lt;/a&gt;&lt;/code&gt; that is to be executed on a dirty scheduler thread.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 NIF가 더티 스케줄러 스레드에서 실행 되는 &lt;code&gt;&lt;a href=&quot;#dirty_nifs&quot;&gt;dirty NIF&lt;/a&gt;&lt;/code&gt; 임을 나타내는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c858ca62bcf9034a74cbe5df92bfb1e723cebb8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; indicates the type of object that you are looking for. If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, any kind of object is returned. If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;EI_INT&lt;/code&gt;, &lt;code&gt;EI_FLT&lt;/code&gt;, &lt;code&gt;EI_STR&lt;/code&gt;, or &lt;code&gt;EI_BIN&lt;/code&gt;, then only values of that kind are returned.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 찾고있는 객체의 유형을 나타냅니다. 경우 &lt;code&gt;flags&lt;/code&gt; 입니다 &lt;code&gt;0&lt;/code&gt; , 모든 종류의 객체가 반환됩니다. 경우 &lt;code&gt;flags&lt;/code&gt; 입니다 &lt;code&gt;EI_INT&lt;/code&gt; , &lt;code&gt;EI_FLT&lt;/code&gt; , &lt;code&gt;EI_STR&lt;/code&gt; , 또는 &lt;code&gt;EI_BIN&lt;/code&gt; , 다음 종류의 값이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="7026828ff9a171c85e41a7ecb9f0d2892a14feae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; indicates the type of the object specified by &lt;code&gt;v&lt;/code&gt;. Flags must be one of &lt;code&gt;EI_INT&lt;/code&gt;, &lt;code&gt;EI_FLT&lt;/code&gt;, &lt;code&gt;EI_STR&lt;/code&gt;, and &lt;code&gt;EI_BIN&lt;/code&gt;, indicating whether &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;char*&lt;/code&gt;, or &lt;code&gt;void*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; 는 &lt;code&gt;v&lt;/code&gt; 로 지정된 객체의 유형을 나타냅니다 . 플래그는 &lt;code&gt;EI_INT&lt;/code&gt; , &lt;code&gt;EI_FLT&lt;/code&gt; , &lt;code&gt;EI_STR&lt;/code&gt; 및 &lt;code&gt;EI_BIN&lt;/code&gt; 중 하나 여야하며 , &lt;code&gt;v&lt;/code&gt; 가 &lt;code&gt;int&lt;/code&gt; , &lt;code&gt;double&lt;/code&gt; , &lt;code&gt;char*&lt;/code&gt; 또는 &lt;code&gt;void*&lt;/code&gt; 인지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="d1184739e754d1651142d3172c8ebc5daed12ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flatlength/1&lt;/code&gt; computes the size of the possibly nested list &lt;code&gt;NestedList&lt;/code&gt;, which can contain binaries.</source>
          <target state="translated">&lt;code&gt;flatlength/1&lt;/code&gt; 은 바이너리를 포함 할 수있는 중첩 가능 목록 &lt;code&gt;NestedList&lt;/code&gt; 의 크기를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="d74b4f2af562e2114e0b51bbff230bb4388dd991" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flex&lt;/code&gt; -- Headers and libraries are needed to build the flex scanner for the &lt;code&gt;megaco&lt;/code&gt; application on Unix/Linux.</source>
          <target state="translated">&lt;code&gt;flex&lt;/code&gt; - Unix / Linux 에서 &lt;code&gt;megaco&lt;/code&gt; 응용 프로그램 용 flex 스캐너를 빌드하려면 헤더와 라이브러리가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="74fcf3c78913fbf821758d89dc44c494d6454f23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flex&lt;/code&gt; will result in the start of the flex scanner with default options.</source>
          <target state="translated">&lt;code&gt;flex&lt;/code&gt; 는 기본 옵션으로 flex 스캐너를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="04d9e76a3083198e0e59eb9805b99dc252f52cde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;float&lt;/code&gt;&lt;code&gt;fun_type&lt;/code&gt;&lt;code&gt;integer&lt;/code&gt;&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;operator&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;float&lt;/code&gt;&lt;code&gt;fun_type&lt;/code&gt;&lt;code&gt;integer&lt;/code&gt;&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;operator&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a2dfdcae3e72af0b397272b11d334a775438639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold(Function, Acc0, QH)&lt;/code&gt; is equivalent to &lt;code&gt;fold(Function, Acc0, QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fold(Function, Acc0, QH)&lt;/code&gt; 는 &lt;code&gt;fold(Function, Acc0, QH, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1c9191670935d46aa880cfa8823a02f644b56726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl/3&lt;/code&gt; is tail recursive and is usually preferred to &lt;code&gt;foldr/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foldl/3&lt;/code&gt; 는 tail recursive이며 보통 &lt;code&gt;foldr/3&lt;/code&gt; 보다 선호됩니다 .</target>
        </trans-unit>
        <trans-unit id="04cf8d6f179bfc7ed5f275591a68540638d661bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl&lt;/code&gt; returns the same term as the last call to &lt;code&gt;Function&lt;/code&gt; returned.</source>
          <target state="translated">&lt;code&gt;foldl&lt;/code&gt; 은 반환 된 &lt;code&gt;Function&lt;/code&gt; 대한 마지막 호출과 동일한 용어를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d7383e57980283ddf219642ad6992f8786be273a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl&lt;/code&gt; takes a function of two arguments, an accumulator and a list:</source>
          <target state="translated">&lt;code&gt;foldl&lt;/code&gt; 은 accumulator와 list의 두 가지 인수를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="a980ecb6db0f72525911b3c138d4624899757f5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl&lt;/code&gt; works like a &lt;code&gt;while&lt;/code&gt; loop in an imperative language:</source>
          <target state="translated">&lt;code&gt;foldl&lt;/code&gt; 은 명령형 언어에서 &lt;code&gt;while&lt;/code&gt; 루프 처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="12ddc2a809fd7bd86fa64a14a9b0ed6d0aafdc5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fop&lt;/code&gt; -- Apache FOP print formatter (requires Java). Can be downloaded from &lt;code&gt;&lt;a href=&quot;http://xmlgraphics.apache.org/fop&quot;&gt;http://xmlgraphics.apache.org/fop&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fop&lt;/code&gt; -Apache FOP 인쇄 포맷터 (Java 필요) &lt;code&gt;&lt;a href=&quot;http://xmlgraphics.apache.org/fop&quot;&gt;http://xmlgraphics.apache.org/fop&lt;/a&gt;&lt;/code&gt; 에서 다운로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bedcbc2018e10c74468d728a87e55c720602281d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; is evaluated for its side-effect and not its value. &lt;code&gt;foreach(Fun ,L)&lt;/code&gt; calls &lt;code&gt;Fun(X)&lt;/code&gt; for each element &lt;code&gt;X&lt;/code&gt; in &lt;code&gt;L&lt;/code&gt; and the processing occurs in the order that the elements were defined in &lt;code&gt;L&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; does not define the order in which its elements are processed.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 는 그 가치가 아닌 부작용에 대해 평가됩니다. &lt;code&gt;foreach(Fun ,L)&lt;/code&gt; 호출 &lt;code&gt;Fun(X)&lt;/code&gt; 각각의 요소에 대한 &lt;code&gt;X&lt;/code&gt; 의 &lt;code&gt;L&lt;/code&gt; 및 처리 요소는 정의 된 순서로 발생 &lt;code&gt;L&lt;/code&gt; . &lt;code&gt;map&lt;/code&gt; 은 요소가 처리되는 순서를 정의하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d703eafa2f7859dc0a44a15d49ee91bb344ed005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; is used to set up a fixture and optionally tear it down afterwards, repeated for each single one of the specified test sets.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 는 조명기를 설치하고 선택적으로 지정된 테스트 세트 각각에 대해 반복하여 분해합니다.</target>
        </trans-unit>
        <trans-unit id="56fd27fe59112334feaeed6957c8dbff87298ad2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; takes a function of one argument and a list of terms:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; 는 하나의 인수와 용어 목록의 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="4fd5bd17516785e7ede0ee6695159118bb728df0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreachx&lt;/code&gt; is like &lt;code&gt;foreach&lt;/code&gt;, but uses a list of pairs, each containing an extra argument &lt;code&gt;X&lt;/code&gt; and an extended instantiator function.</source>
          <target state="translated">&lt;code&gt;foreachx&lt;/code&gt; 는 &lt;code&gt;foreach&lt;/code&gt; 와 비슷하지만 각각 추가 인수 &lt;code&gt;X&lt;/code&gt; 와 확장 된 인스턴스화 함수를 포함하는 쌍 목록을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="5c71dc112956ef23a5424e4aff313183bf49b551" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forget/1&lt;/code&gt; and &lt;code&gt;forget/2&lt;/code&gt; remove all or some of the &lt;code&gt;&lt;a href=&quot;#user_variable&quot;&gt;user variables&lt;/a&gt;&lt;/code&gt; of an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forget/1&lt;/code&gt; 과 &lt;code&gt;forget/2&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;xref server&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;#user_variable&quot;&gt;user variables&lt;/a&gt;&lt;/code&gt; 전부 또는 일부를 제거 합니다 .</target>
        </trans-unit>
        <trans-unit id="f00ae3ff9af5cc09d1f13d0f3746886336de4af2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;form_list&lt;/code&gt;&lt;code&gt;function&lt;/code&gt;&lt;code&gt;warning_marker&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;form_list&lt;/code&gt;&lt;code&gt;function&lt;/code&gt;&lt;code&gt;warning_marker&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="610ce2e022ce5a4fd6884f8f718789dd55a1503e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formatter =&amp;gt; {logger_formatter, DefaultFormatterConfig&lt;/code&gt;}</source>
          <target state="translated">&lt;code&gt;formatter =&amp;gt; {logger_formatter, DefaultFormatterConfig&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="efa356d7300f5cd22345e642cd285b2f01a4f7b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; can also skip the file step and trace to a tracer process that does the profiling in runtime.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 파일 단계를 건너 뛰고 런타임에서 프로파일 링을 수행하는 추적 프로그램 프로세스를 추적 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fe51a77f60d52398c4a8e87c24c7b8fa78fef7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; is a profiling tool that can be used to get a picture of how much processing time different functions consumes and in which processes.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 다른 기능이 얼마나 많은 처리 시간을 소비하고 어느 프로세스에서 처리하는지에 대한 그림을 얻는 데 사용할 수있는 프로파일 링 도구입니다.</target>
        </trans-unit>
        <trans-unit id="2380ad9f8becb6453300ae34891cf4b2cdc38957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; is based on trace to file to minimize runtime performance impact. Using &lt;code&gt;fprof&lt;/code&gt; is just a matter of calling a few library functions, see the &lt;code&gt;fprof&lt;/code&gt; manual page in Tools.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 추적 성능을 기반으로 파일 추적을 기반으로합니다. &lt;code&gt;fprof&lt;/code&gt; 를 사용 하는 것은 몇 가지 라이브러리 함수를 호출하는 것 입니다. 도구 의 &lt;code&gt;fprof&lt;/code&gt; 매뉴얼 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0651f71599e95f3f7558bb0b476db9a8cb6717d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; measures the execution time for each function, both own time, that is, how much time a function has used for its own execution, and accumulated time, that is, including called functions. The values are displayed per process. You also get to know how many times each function has been called.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 각 함수의 자체 시간, 즉 함수가 자체 실행에 사용한 시간 및 누적 된 시간, 즉 호출 된 함수를 포함하여 각 함수의 실행 시간을 측정합니다. 프로세스 당 값이 표시됩니다. 또한 각 함수가 호출 된 횟수를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac2c5cd2f94fa13cc2b4ab8dc8bf96fda7723eee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; presents both &lt;strong&gt;own time&lt;/strong&gt; i.e how much time a function has used for its own execution, and &lt;strong&gt;accumulated time&lt;/strong&gt; i.e including called functions. All presented times are collected using trace timestamps. &lt;code&gt;fprof&lt;/code&gt; tries to collect cpu time timestamps, if the host machine OS supports it. Therefore the times may be wallclock times and OS scheduling will randomly strike all called functions in a presumably fair way.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 &lt;strong&gt;자신의 시간,&lt;/strong&gt; 즉 함수가 자신의 실행에 사용한 &lt;strong&gt;시간&lt;/strong&gt; 과 호출 된 함수를 포함한 &lt;strong&gt;누적 된 시간을 모두 나타&lt;/strong&gt; 냅니다. 제시된 모든 시간은 추적 타임 스탬프를 사용하여 수집됩니다. 호스트 시스템 OS가 지원하는 경우 &lt;code&gt;fprof&lt;/code&gt; 는 CPU 시간 타임 스탬프를 수집하려고합니다. 따라서 시간은 벽시계 시간이 될 수 있으며 OS 스케줄링은 모든 공정한 기능을 임의로 공정하게 수행합니다.</target>
        </trans-unit>
        <trans-unit id="fe28aa0072f7e8bf4af0009cc2b0fb9c81ff3dde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; presents wall clock times from the host machine OS, with the assumption that OS scheduling will randomly load the profiled functions in a fair way. Both &lt;strong&gt;own time&lt;/strong&gt; i.e the time used by a function for its own execution, and &lt;strong&gt;accumulated time&lt;/strong&gt; i.e execution time including called functions.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 OS 스케줄링이 프로파일 링 된 기능을 공정하게 임의적으로로드한다는 가정하에 호스트 머신 OS에서 벽시계 시간을 나타냅니다. 모두 &lt;strong&gt;자신의 시간&lt;/strong&gt; 자체 실행을위한 기능에 의해 사용되는 시간, 즉 및 &lt;strong&gt;누적 시간&lt;/strong&gt; 이라는 기능을 포함 즉, 실행 시간.</target>
        </trans-unit>
        <trans-unit id="a92fbd44c76bf7c734ba1bee78aed13fedb670b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; provides the most detailed information about where the program time is spent, but it significantly slows down the program it profiles.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 프로그램 시간이 소비되는 위치에 대한 가장 자세한 정보를 제공하지만 프로파일 링하는 프로그램의 속도를 상당히 느리게합니다.</target>
        </trans-unit>
        <trans-unit id="5f19df80da559208071940bf6f95e75083056945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; uses tracing with timestamps to collect profiling data. Therfore there is no need for special compilation of any module to be profiled.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; 는 타임 스탬프와 함께 추적을 사용하여 프로파일 링 데이터를 수집합니다. 따라서 프로파일 링 할 모듈의 특수 컴파일이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e277f356c9acf9d949db5fc2d6cccc75c8f7d1e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;freed&lt;/code&gt; is the length of the freelist, where blocks are placed when they are released by &lt;code&gt;erl_free_term()&lt;/code&gt; and &lt;code&gt;erl_free_compound()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;freed&lt;/code&gt; 는 프리리스트의 길이이며, 블록이 &lt;code&gt;erl_free_term()&lt;/code&gt; 및 &lt;code&gt;erl_free_compound()&lt;/code&gt; 의해 해제 될 때 배치됩니다 .</target>
        </trans-unit>
        <trans-unit id="e1e8867e117c12deea9b78559ed6b7640546dad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from : string&lt;/code&gt; :: Process ID or Port ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from : string&lt;/code&gt; :: 프로세스 ID 또는 포트 ID. 전의. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a127c73f210bc87afb69376ea85cedf158139fee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from : string&lt;/code&gt; :: Process ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from : string&lt;/code&gt; :: 프로세스 ID. 전의. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cef5c56cbd60fbf9774a4484f7312c970e9fc9f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_term&lt;/code&gt; can be used for creating atomic or ordered sets. The only purpose of such a set is that of later building unordered sets, as all functions in this module that &lt;strong&gt;do&lt;/strong&gt; anything operate on unordered sets. Creating unordered sets from a collection of ordered sets can be the way to go if the ordered sets are big and one does not want to waste heap by rebuilding the elements of the unordered set. The following example shows that a set can be built &quot;layer by layer&quot;:</source>
          <target state="translated">&lt;code&gt;from_term&lt;/code&gt; 은 원자 집합 또는 순서 집합을 만드는 데 사용할 수 있습니다. 이러한 세트의 유일한 목적은 나중에이 모듈의 모든 기능으로, 정렬되지 않은 집합 건물의 &lt;strong&gt;할&lt;/strong&gt; 아무것도 정렬되지 않은 세트에서 작동합니다. 정렬 된 세트의 모음에서 정렬되지 않은 세트를 작성하는 것은 정렬 된 세트가 크고 정렬되지 않은 세트의 요소를 다시 작성하여 힙을 낭비하지 않으려는 경우 갈 수 있습니다. 다음 예제는 &quot;계층 별&quot;세트를 만들 수 있음을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5f43d0c2eeca9964a6809b3f352521aa472473ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun fresh_crl/2&lt;/code&gt; will be used as input option &lt;code&gt;update_crl&lt;/code&gt; to &lt;code&gt;public_key:pkix_crls_validate/3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fun fresh_crl/2&lt;/code&gt; 가 &lt;code&gt;public_key:pkix_crls_validate/3&lt;/code&gt; 에 대한 입력 옵션 &lt;code&gt;update_crl&lt;/code&gt; 로 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="9ddcb04653f095ae99c208679aa62928da9bbca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun&lt;/code&gt; is the name of the function to run.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 은 실행할 함수의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="bbead72e2d93c2b28399e3cd53d75a097b878521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcs&lt;/code&gt; is a static array of function descriptors for all the implemented NIFs in this library.</source>
          <target state="translated">&lt;code&gt;funcs&lt;/code&gt; 는이 라이브러리에서 구현 된 모든 NIF에 대한 함수 설명 자의 정적 배열입니다.</target>
        </trans-unit>
        <trans-unit id="caba8665f73b66e1d73b83a0e84d50c336b865da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genErr&lt;/code&gt;(SNMPv1)</source>
          <target state="translated">&lt;code&gt;genErr&lt;/code&gt;(SNMPv1)</target>
        </trans-unit>
        <trans-unit id="088bc3d713ad96f8f563cfc0d235b8f6b27c13b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genErr&lt;/code&gt;. Used if an error occurred. Note that this should be an internal processing error, e.g. a caused by a programing fault somewhere. If some column does not exist, use &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; or &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;genErr&lt;/code&gt; . 에러가 발생한 경우에 사용합니다. 이는 내부 처리 오류 여야합니다 (예 : 프로그래밍 오류로 인해 발생). 일부 열이 없으면 &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; 또는 &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c4b15564b3f657fea0a7a4683b8b9183417b2490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genErr&lt;/code&gt;. Used if an error occurred. Note, this should be an internal processing error, e.g. a caused by a programing fault somewhere. If the variable does not exist, use &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; or &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;genErr&lt;/code&gt; . 에러가 발생한 경우에 사용합니다. 이는 내부 처리 오류 여야합니다 (예 : 프로그래밍 오류로 인해 발생). 변수가 없으면 &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; 또는 &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="daa48225a7f95c221293572ba86a3622a59538be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_event(3)&lt;/code&gt;, &lt;code&gt;logger(3)&lt;/code&gt;, &lt;code&gt;log_mf_h(3)&lt;/code&gt;, &lt;code&gt;kernel(6)&lt;/code&gt;, &lt;code&gt;sasl(6)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;gen_event(3)&lt;/code&gt; , &lt;code&gt;logger(3)&lt;/code&gt; , &lt;code&gt;log_mf_h(3)&lt;/code&gt; , &lt;code&gt;kernel(6)&lt;/code&gt; , &lt;code&gt;sasl(6)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4c26a8d6d446889b7679693876dc59c6aa2cace" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_event:start_link&lt;/code&gt; must be used if the event manager is part of a supervision tree, that is, started by a supervisor. There is another function, &lt;code&gt;gen_event:start&lt;/code&gt;, to start a standalone event manager, that is, an event manager that is not part of a supervision tree.</source>
          <target state="translated">&lt;code&gt;gen_event:start_link&lt;/code&gt; 이벤트 관리자가 감독 트리의 일부인 경우, 즉 감독자가 시작한 경우 gen_event : start_link를 사용해야합니다. 독립형 이벤트 관리자, 즉 감독 트리의 일부가 아닌 이벤트 관리자를 시작하는 또 다른 기능인 &lt;code&gt;gen_event:start&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3326920226e31e863ef987e5e66516c9a795a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_server:start_link&lt;/code&gt; is synchronous. It does not return until the &lt;code&gt;gen_server&lt;/code&gt; has been initialized and is ready to receive requests.</source>
          <target state="translated">&lt;code&gt;gen_server:start_link&lt;/code&gt; 는 동기식입니다. &lt;code&gt;gen_server&lt;/code&gt; 가 초기화되고 요청을받을 준비가 될 때까지 리턴되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fec974a8ca4f720c2183784b14d9eeffe9f4c01b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_server:start_link&lt;/code&gt; must be used if the &lt;code&gt;gen_server&lt;/code&gt; is part of a supervision tree, that is, started by a supervisor. There is another function, &lt;code&gt;gen_server:start&lt;/code&gt;, to start a standalone &lt;code&gt;gen_server&lt;/code&gt;, that is, a &lt;code&gt;gen_server&lt;/code&gt; that is not part of a supervision tree.</source>
          <target state="translated">&lt;code&gt;gen_server:start_link&lt;/code&gt; 경우에 사용합니다 &lt;code&gt;gen_server&lt;/code&gt; 가 감독관에 의해 시작되는 감독 트리의 일부입니다. 독립형 &lt;code&gt;gen_server&lt;/code&gt; , 즉 감독 트리의 일부가 아닌 &lt;code&gt;gen_server&lt;/code&gt; 를 시작하는 또 다른 기능인 &lt;code&gt;gen_server:start&lt;/code&gt; 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="69c3808d97812c478604c1ee7338f86c0e5166ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_statem&lt;/code&gt; has got the same features that &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; had and adds some really useful:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 는 것과 같은 기능을 가지고있다 &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; 가 있었다를하고 정말 유용한 추가 :</target>
        </trans-unit>
        <trans-unit id="7b7677dfa28038792b14524f84d7e0b361703437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_statem&lt;/code&gt; provides a generic state machine behaviour and replaces its predecessor &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; since Erlang/OTP 20.0.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 은 일반적인 상태 시스템 동작을 제공하고 Erlang / OTP 20.0 이후 의 이전 &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; 을 대체합니다 .</target>
        </trans-unit>
        <trans-unit id="a66592831b022c6187fbf41f64b27f39b86141fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_user/2, get_user/3&lt;/code&gt;, and &lt;code&gt;get_user/4&lt;/code&gt; each returns an &lt;code&gt;httpd_user&lt;/code&gt; record containing the userdata for a specific user. If the user cannot be found, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;get_user/2&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;get_user/2, get_user/3&lt;/code&gt; 및 &lt;code&gt;get_user/4&lt;/code&gt; 는 각각 특정 사용자의 사용자 데이터를 포함 하는 &lt;code&gt;httpd_user&lt;/code&gt; 레코드를 리턴합니다 . 사용자를 찾을 수 없으면 &lt;code&gt;{error, Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;get_user/2&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="e27858e682235d2210b717885d84526ff21837cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getstat(Socket)&lt;/code&gt; is equivalent to &lt;code&gt;getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_dvi, send_max, send_oct])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getstat(Socket)&lt;/code&gt; 은 &lt;code&gt;getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_dvi, send_max, send_oct])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="982cff1d1cf0bd8b04cb3522a543b231f993a363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gf&lt;/code&gt; (good fit)</source>
          <target state="translated">&lt;code&gt;gf&lt;/code&gt; (적합)</target>
        </trans-unit>
        <trans-unit id="994c8be6a654ef85767135d61bce7835d49034dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; 커널의 글로벌 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="b2e6d5d11db36f7553eadc07fb64579b6abc300f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handle_connect/3&lt;/code&gt; (with &lt;code&gt;Extra&lt;/code&gt;) can also be called as a result of a call to the &lt;code&gt;&lt;a href=&quot;megaco#connect&quot;&gt;megaco:connect/5&lt;/a&gt;&lt;/code&gt; function (if that function is called with the &lt;code&gt;Extra&lt;/code&gt; argument different than &lt;code&gt;ignore_extra&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;handle_connect/3&lt;/code&gt; 또한 &lt;code&gt;&lt;a href=&quot;megaco#connect&quot;&gt;megaco:connect/5&lt;/a&gt;&lt;/code&gt; 함수를 호출 한 결과 handle_connect / 3 ( &lt;code&gt;Extra&lt;/code&gt; 가 있음 )를 호출 할 수도 있습니다 (이 함수가 &lt;code&gt;ignore_extra&lt;/code&gt; 와 다른 &lt;code&gt;Extra&lt;/code&gt; 인수로 호출 된 경우) .</target>
        </trans-unit>
        <trans-unit id="ae6028bcc62cde51d474be425c9dc7e8b6e3fcb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handle_debug&lt;/code&gt; returns an updated debug structure &lt;code&gt;Deb1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;handle_debug&lt;/code&gt; 는 업데이트 된 디버그 구조 &lt;code&gt;Deb1&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2644c967c0e4c82c2e1deca1624de9aa881599b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;head&lt;/code&gt; is the new term to be added.</source>
          <target state="translated">&lt;code&gt;head&lt;/code&gt; 는 추가 할 새 용어입니다.</target>
        </trans-unit>
        <trans-unit id="3a24a5b08e442f4a933596f4d876eec4e71ed413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heap : integer&lt;/code&gt; :: Young heap word size. Ex. &lt;code&gt;233&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;heap : integer&lt;/code&gt; :: 영 힙 워드 크기. 전의. &lt;code&gt;233&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68732f44924e2380dcf4ce13c8cf3802ce686c88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heart&lt;/code&gt; waits for &lt;code&gt;S&lt;/code&gt; seconds to let the crash dump file be written. After &lt;code&gt;S&lt;/code&gt; seconds, &lt;code&gt;heart&lt;/code&gt; reboots the runtime system, whether the crash dump file is written or not.</source>
          <target state="translated">&lt;code&gt;heart&lt;/code&gt; 는 충돌 덤프 파일이 작성 될 때까지 &lt;code&gt;S&lt;/code&gt; 초 동안 기다립니다 . &lt;code&gt;S&lt;/code&gt; 초 후 &lt;code&gt;heart&lt;/code&gt; 는 크래시 덤프 파일의 작성 여부에 관계없이 런타임 시스템을 재부팅합니다.</target>
        </trans-unit>
        <trans-unit id="b0d40b0219f08a0f10b7e507264f269367c19823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;held_locks&lt;/code&gt;. Returns a list of all locks held by the local Mnesia lock manager.</source>
          <target state="translated">&lt;code&gt;held_locks&lt;/code&gt; . 로컬 Mnesia 잠금 관리자가 보유한 모든 잠금 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9fad5755a99ed660ab018a9fff07227514ac9eb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hexlist_to_integer&lt;/code&gt; converts the hexadecimal value of &lt;code&gt;HexString&lt;/code&gt; to an integer.</source>
          <target state="translated">&lt;code&gt;hexlist_to_integer&lt;/code&gt; 은 16 진수 값 변환 &lt;code&gt;HexString&lt;/code&gt; 을 정수.</target>
        </trans-unit>
        <trans-unit id="2ea1441c110f6e78254e897aca6367ee86b423c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; is the name of the host on which the node is running.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; 는 노드가 실행중인 호스트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="6892bcdba176157478bff75149fde20c9a8386b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_conf_bsdos&lt;/code&gt; (BSDOS host.conf)</source>
          <target state="translated">&lt;code&gt;host_conf_bsdos&lt;/code&gt; (BSDOS host.conf)</target>
        </trans-unit>
        <trans-unit id="b4278631e51356e08db77d683e4b1a8b8c3dcc64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_conf_freebsd&lt;/code&gt; (FreeBSD host.conf)</source>
          <target state="translated">&lt;code&gt;host_conf_freebsd&lt;/code&gt; (FreeBSD host.conf)</target>
        </trans-unit>
        <trans-unit id="22bf7cfd92c8878929dd2ba3dbfc046fecfa77d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_conf_linux&lt;/code&gt; (Linux host.conf)</source>
          <target state="translated">&lt;code&gt;host_conf_linux&lt;/code&gt; (Linux host.conf)</target>
        </trans-unit>
        <trans-unit id="65041a647fe612fd0f8e59c072f652532fdd0022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hostname() = string()&lt;/code&gt; representing a host, for example, &quot;foo.bar.com&quot;</source>
          <target state="translated">&lt;code&gt;hostname() = string()&lt;/code&gt; 예 : &quot;foo.bar.com&quot; )를 나타내는 string ()</target>
        </trans-unit>
        <trans-unit id="288a4d5e846f07e37dc5f2adefbad2e128b52c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hosts&lt;/code&gt; (Unix hosts)</source>
          <target state="translated">&lt;code&gt;hosts&lt;/code&gt; (유닉스 호스트)</target>
        </trans-unit>
        <trans-unit id="00a3f3236838b7283ceee66027d32a5f53946422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_version() = string()&lt;/code&gt;, for example, &lt;code&gt;&quot;HTTP/1.1&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;http_version() = string()&lt;/code&gt; 예 : &lt;code&gt;&quot;HTTP/1.1&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be5d05c29412198b5aad22b78cfb2269d337b20e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;huffman_only&lt;/code&gt; to force Huffman encoding only (no string match)</source>
          <target state="translated">&lt;code&gt;huffman_only&lt;/code&gt; 허프만 인코딩 만 강제 실행 하는 huffman_only (문자열 일치 없음)</target>
        </trans-unit>
        <trans-unit id="c26f26d92be7aca623c0670870412d9071dfda8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i/0&lt;/code&gt; displays system information, listing information about all processes. &lt;code&gt;ni/0&lt;/code&gt; does the same, but for all nodes the network.</source>
          <target state="translated">&lt;code&gt;i/0&lt;/code&gt; 은 모든 프로세스에 대한 정보를 나열하는 시스템 정보를 표시합니다. &lt;code&gt;ni/0&lt;/code&gt; 는 동일하지만 모든 노드에 대해 네트워크를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="04504bb8a8501acb73e0a9c43df2d2573c8f8d4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; is the integer value to assign.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 는 할당 할 정수 값입니다.</target>
        </trans-unit>
        <trans-unit id="aeb4e82d784870d44776ba9fe6d7d59e24f25aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; means that those wrongly encoded filenames are silently ignored.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 잘못 인코딩 된 파일 이름은 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="49464c713cc0dfa648fc3b3996eac6de20e38891" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; means that wrongly encoded filenames are silently ignored.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 잘못 인코딩 된 파일 이름이 자동으로 무시됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="8b2c2514743abe13e9d9eb27f4df8d2b692d9190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; is used to identify the child specification internally by the supervisor.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; 는 감독자가 내부적으로 하위 사양을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5f4e88723c35f3efa703d12f4affbf36cd42c91e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_dsa&lt;/code&gt; and &lt;code&gt;id_dsa.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id_dsa&lt;/code&gt; 및 &lt;code&gt;id_dsa.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80ccb7cf09932459281c51978ce18d9ff93af219" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_ecdsa&lt;/code&gt; and &lt;code&gt;id_ecdsa.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id_ecdsa&lt;/code&gt; 및 &lt;code&gt;id_ecdsa.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="723683dd18200916f32eee524f5fbab106cc4413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_extensions()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#StdCertExt&quot;&gt;Standard Certificate Extensions&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#PrivIntExt&quot;&gt;Private Internet Extensions&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#CRLCertExt&quot;&gt;CRL Extensions&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#CRLEntryExt&quot;&gt;CRL Entry Extensions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id_extensions()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#StdCertExt&quot;&gt;Standard Certificate Extensions&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#PrivIntExt&quot;&gt;Private Internet Extensions&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#CRLCertExt&quot;&gt;CRL Extensions&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#CRLEntryExt&quot;&gt;CRL Entry Extensions&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4342ad081d7e782eb3338029656546ad8c13fd5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_rsa&lt;/code&gt; and &lt;code&gt;id_rsa.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id_rsa&lt;/code&gt; 및 &lt;code&gt;id_rsa.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d55a9218deae1e2f1a323296767e1091ef421a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;idle&lt;/code&gt; - The process is no longer executing interpreted code. &lt;code&gt;Info={}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;idle&lt;/code&gt; -프로세스가 더 이상 해석 된 코드를 실행하지 않습니다. &lt;code&gt;Info={}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="97edd1f6a72a731415e37a350ebe8714d5866342" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;illegal&lt;/code&gt;. Operation not supported on this record.</source>
          <target state="translated">&lt;code&gt;illegal&lt;/code&gt; 입니다. 이 레코드에서 지원되지 않는 작업입니다.</target>
        </trans-unit>
        <trans-unit id="e0d828be650dc009669d1246020f154926727ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in_proj&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;in_proj&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="39587b4554e60c1cfb91fac58c0e382b5990cc79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include&lt;/code&gt; - Optional. Used for public include files that must be reachable from other applications.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; -선택 사항. 다른 응용 프로그램에서 접근 할 수있는 공개 포함 파일에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ff81597bd53cf57baebbb47293e8636989951804" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include_lib&lt;/code&gt; is similar to &lt;code&gt;include&lt;/code&gt;, but is not to point out an absolute file. Instead, the first path component (possibly after variable substitution) is assumed to be the name of an application.</source>
          <target state="translated">&lt;code&gt;include_lib&lt;/code&gt; 는 &lt;code&gt;include&lt;/code&gt; 와 유사 하지만 절대 파일을 가리 키지 않습니다. 대신 첫 번째 경로 구성 요소 (변수 대체 후)는 응용 프로그램의 이름으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="9744fcb90bd27c49fdf4cfd20fe6418dbb84565a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; is a pointer to an index into the buffer. This parameter is incremented with the size of the term decoded/encoded.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 는 버퍼에 대한 인덱스를 가리키는 포인터입니다. 이 파라미터는 디코딩 / 인코딩 된 용어의 크기에 따라 증가합니다.</target>
        </trans-unit>
        <trans-unit id="07a79fcd5e7e859a1bfb106d04905bda27b10a72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; is updated to point right after the term in the buffer.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 버퍼의 용어 바로 뒤에 인덱스 가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="12a90a4197d89466d42f3702437e9477be000759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;. Returns the list of index position integers for the table.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; . 테이블의 인덱스 위치 정수 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5c289c0b66d867cf14ffd06f2af4e444ec7ce62b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;. This is a list of attribute names, or integers, which specify the tuple positions on which Mnesia is to build and maintain an extra index table.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; . Mnesia가 추가 인덱스 테이블을 빌드하고 유지 보수 할 튜플 위치를 지정하는 속성 이름 또는 정수 목록입니다.</target>
        </trans-unit>
        <trans-unit id="299804c67eba285bef67c03d6985c74f5637d6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index_exists&lt;/code&gt;. Some operations cannot be performed on tables with an index.</source>
          <target state="translated">&lt;code&gt;index_exists&lt;/code&gt; . 인덱스가있는 테이블에서 일부 작업을 수행 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="35288bdbfca9c20f1bac1d4269d301589fa492cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet(3)&lt;/code&gt; and &lt;code&gt;gen_tcp(3)&lt;/code&gt;&lt;code&gt;gen_udp(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inet(3)&lt;/code&gt; 및 &lt;code&gt;gen_tcp(3)&lt;/code&gt; &lt;code&gt;gen_udp(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5575a48905c6f63a11c7f5d59026e31b283a2521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet&lt;/code&gt;, which means use a boot server on another machine. The flags &lt;code&gt;-id&lt;/code&gt;, &lt;code&gt;-hosts&lt;/code&gt; and &lt;code&gt;-setcookie&lt;/code&gt; must also be specified.</source>
          <target state="translated">&lt;code&gt;inet&lt;/code&gt; 은 다른 머신에서 부트 서버를 사용함을 의미합니다. &lt;code&gt;-id&lt;/code&gt; , &lt;code&gt;-hosts&lt;/code&gt; 및 &lt;code&gt;-setcookie&lt;/code&gt; 플래그 도 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="c21f2b2d8202e01c49f29155f77d095834971b99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet_default_connect_options&lt;/code&gt; can contain a list of default options used for all sockets returned when doing &lt;code&gt;connect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_default_connect_options&lt;/code&gt; 에는 &lt;code&gt;connect&lt;/code&gt; 를 수행 할 때 반환 된 모든 소켓에 사용되는 기본 옵션 목록이 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="316be20dad523a52aa6cd2952f69c8c219b175d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet_default_listen_options&lt;/code&gt; can contain a list of default options used when issuing a &lt;code&gt;listen&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;inet_default_listen_options&lt;/code&gt; 에는 &lt;code&gt;listen&lt;/code&gt; 호출을 실행할 때 사용되는 기본 옵션 목록이 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea69b75cb33493fc4da8be9dffb968455023d48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;infinity | integer()&lt;/code&gt; in milliseconds</source>
          <target state="translated">&lt;code&gt;infinity | integer()&lt;/code&gt; 밀리 초 단위의 integer ()</target>
        </trans-unit>
        <trans-unit id="390aff2544ff87cbe26c86eedc5d59d2f18ed009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;infinity&lt;/code&gt; is the default setting and is used if no value is specified for &lt;code&gt;Retries&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;infinity&lt;/code&gt; 가 기본 설정이며 재 &lt;code&gt;Retries&lt;/code&gt; 값이 지정되지 않은 경우 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="7ac01f9afaec9772afec2df62e36b10d97bad25e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;info(QH)&lt;/code&gt; is equivalent to &lt;code&gt;info(QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;info(QH)&lt;/code&gt; 는 &lt;code&gt;info(QH, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4248d925e08b67df047ba4b4a75b159b2cf6fe92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;info/1&lt;/code&gt; returns information with the following tags (tags marked with (*) are available in &lt;code&gt;functions&lt;/code&gt; mode only):</source>
          <target state="translated">&lt;code&gt;info/1&lt;/code&gt; 은 다음 태그가있는 정보를 반환합니다 ((*)로 표시된 태그는 &lt;code&gt;functions&lt;/code&gt; 모드에서만 사용 가능).</target>
        </trans-unit>
        <trans-unit id="c38f7b349b67d95eb067d2b2e780bc5bba3e8947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;info/2&lt;/code&gt; and &lt;code&gt;info/3&lt;/code&gt; return information about all or some of the analyzed modules, applications, releases or library modules of an Xref server. The following information is returned for every analyzed module:</source>
          <target state="translated">&lt;code&gt;info/2&lt;/code&gt; 및 &lt;code&gt;info/3&lt;/code&gt; 는 Xref 서버의 분석 된 모듈, 응용 프로그램, 릴리스 또는 라이브러리 모듈 중 일부 또는 전부에 대한 정보를 반환합니다. 분석 된 모든 모듈에 대해 다음 정보가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="683651a15dcf311e9b19d04c85dc14a9f375a0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inform&lt;/code&gt; - &lt;code&gt;SnmpInformInfo&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#handle_inform&quot;&gt;handle_inform&lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;inform&lt;/code&gt; - &lt;code&gt;SnmpInformInfo&lt;/code&gt; ( 자세한 정보는 &lt;code&gt;&lt;a href=&quot;#handle_inform&quot;&gt;handle_inform&lt;/a&gt;&lt;/code&gt; 을 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="a9fa86f5d62c2a621fc4a7b799f474d4390f1874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; - Attach when a process for the first time calls an interpreted function.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; - 프로세스가 처음으로 해석 된 함수를 호출 할 때 첨부합니다.</target>
        </trans-unit>
        <trans-unit id="680e743ff4e349f082f22cdac8b3c1404575f222" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; also contains functions to restart, reboot, and stop the system.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 에는 시스템을 재시작, 재부팅 및 중지하는 기능도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="13bb39ed7c33de63e493e1ee19876051fea085ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; interprets some of the flags, see section &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;Command-Line Flags&lt;/a&gt;&lt;/code&gt; below. The remaining flags (&quot;user flags&quot;) and plain arguments are passed to the &lt;code&gt;init&lt;/code&gt; loop and can be retrieved by calling &lt;code&gt;&lt;a href=&quot;#get_arguments-0&quot;&gt;get_arguments/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 는 일부 플래그를 해석 합니다. 아래의 &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;Command-Line Flags&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 . 나머지 플래그 ( &quot;user flags&quot;) 및 일반 인수는 &lt;code&gt;init&lt;/code&gt; 루프에 전달되며 각각 &lt;code&gt;&lt;a href=&quot;#get_arguments-0&quot;&gt;get_arguments/0&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; 을 호출하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c38637dc28fce554e15219ccf24908263dea5b60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; is to be more relaxed and try to find a suitable directory if it can choose from a regular &lt;code&gt;ebin&lt;/code&gt; directory and an &lt;code&gt;ebin&lt;/code&gt; directory in an archive file.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 는보다 편안하고 아카이브 파일 의 일반 &lt;code&gt;ebin&lt;/code&gt; 디렉토리와 &lt;code&gt;ebin&lt;/code&gt; 디렉토리에서 선택할 수있는 경우 적합한 디렉토리를 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="2ee39a96a98454ce0a566fbbb59a17f31c9cbea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; reads the boot script, which contains instructions on how to initiate the system. For more information about boot scripts, see &lt;code&gt;script(4)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 는 시스템 시작 방법에 대한 지침이 들어있는 부팅 스크립트를 읽습니다. 부팅 스크립트에 대한 자세한 내용은 &lt;code&gt;script(4)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e45c87967eb337eebf81776beb7aaa4bfa06b39a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_per_suite&lt;/code&gt; and &lt;code&gt;end_per_suite&lt;/code&gt; execute on dedicated Erlang processes, just like the test cases do. The result of these functions is however not included in the test run statistics of successful, failed, and skipped cases.</source>
          <target state="translated">&lt;code&gt;init_per_suite&lt;/code&gt; 및 &lt;code&gt;end_per_suite&lt;/code&gt; 는 테스트 사례와 마찬가지로 전용 Erlang 프로세스에서 실행됩니다. 그러나 이러한 기능의 결과는 성공, 실패 및 건너 뛴 사례에 대한 테스트 실행 통계에 포함되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="509c1f98726ea5069dd4a7b20c1da24a315239b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_per_testcase/2&lt;/code&gt; and &lt;code&gt;end_per_testcase/2&lt;/code&gt; are always called for each individual test case, no matter if the case belongs to a group or not.</source>
          <target state="translated">&lt;code&gt;init_per_testcase/2&lt;/code&gt; 및 &lt;code&gt;end_per_testcase/2&lt;/code&gt; 는 사례가 그룹에 속하는지 여부에 관계없이 각 개별 테스트 사례에 대해 항상 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="70b146254b559ead89fe36b3a1611f87764c53ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance : integer&lt;/code&gt; :: Allocator instance. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;instance : integer&lt;/code&gt; :: 할당 자 인스턴스. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b79a730e545f8e3ff2db30fb944cc1b654c4bbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int driver_failure(ErlDrvPort port, int error)&lt;/code&gt;&lt;code&gt;int driver_failure_atom(ErlDrvPort port, char *string)&lt;/code&gt;&lt;code&gt;int driver_failure_posix(ErlDrvPort port, int error)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int driver_failure(ErlDrvPort port, int error)&lt;/code&gt; &lt;code&gt;int driver_failure_atom(ErlDrvPort port, char *string)&lt;/code&gt; &lt;code&gt;int driver_failure_posix(ErlDrvPort port, int error)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be1945883a0b8cbfcb490c14db372bb25d9db0b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_connect(ei_cnode* ec, char *nodename)&lt;/code&gt;&lt;code&gt;int ei_xconnect(ei_cnode* ec, Erl_IpAddr adr, char *alivename)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_connect(ei_cnode* ec, char *nodename)&lt;/code&gt; &lt;code&gt;int ei_xconnect(ei_cnode* ec, Erl_IpAddr adr, char *alivename)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ff7079026e8f25428ecfb521719ef3ecbd565b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_connect_init(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation)&lt;/code&gt;&lt;code&gt;int ei_connect_xinit(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_connect_init(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation)&lt;/code&gt; &lt;code&gt;int ei_connect_xinit(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd6698c77f48b2b51843711ba5f7c9f2f29fbe55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_connect_tmo(ei_cnode* ec, char *nodename, unsigned timeout_ms)&lt;/code&gt;&lt;code&gt;int ei_xconnect_tmo(ei_cnode* ec, Erl_IpAddr adr, char *alivename, unsigned timeout_ms)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_connect_tmo(ei_cnode* ec, char *nodename, unsigned timeout_ms)&lt;/code&gt; &lt;code&gt;int ei_xconnect_tmo(ei_cnode* ec, Erl_IpAddr adr, char *alivename, unsigned timeout_ms)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca6137afa29c562b89f3c439e6e82ddb851d06ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_decode_fun(const char *buf, int *index, erlang_fun *p)&lt;/code&gt;&lt;code&gt;void free_fun(erlang_fun* f)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_decode_fun(const char *buf, int *index, erlang_fun *p)&lt;/code&gt; &lt;code&gt;void free_fun(erlang_fun* f)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eacdedc6fed3d45e90327b3441131b4d5183df0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_atom(char *buf, int *index, const char *p)&lt;/code&gt;&lt;code&gt;int ei_encode_atom_len(char *buf, int *index, const char *p, int len)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom(ei_x_buff* x, const char *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom_len(ei_x_buff* x, const char *p, int len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_atom(char *buf, int *index, const char *p)&lt;/code&gt; &lt;code&gt;int ei_encode_atom_len(char *buf, int *index, const char *p, int len)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom(ei_x_buff* x, const char *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom_len(ei_x_buff* x, const char *p, int len)&lt;/code&gt; char * buf, int * index , const char * p) ei_x_buff * x, const char * p, int len)</target>
        </trans-unit>
        <trans-unit id="be30a51c472ad623c20f08691eaa3cb3b6a3fd49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_atom_as(char *buf, int *index, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;&lt;code&gt;int ei_encode_atom_len_as(char *buf, int *index, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom_as(ei_x_buff* x, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom_len_as(ei_x_buff* x, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_atom_as(char *buf, int *index, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt; &lt;code&gt;int ei_encode_atom_len_as(char *buf, int *index, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom_as(ei_x_buff* x, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom_len_as(ei_x_buff* x, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ea13f554194e5458f1b6b02dd68627201ffe404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_bignum(char *buf, int *index, mpz_t obj)&lt;/code&gt;&lt;code&gt;int ei_x_encode_bignum(ei_x_buff *x, mpz_t obj)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_bignum(char *buf, int *index, mpz_t obj)&lt;/code&gt; &lt;code&gt;int ei_x_encode_bignum(ei_x_buff *x, mpz_t obj)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48bf8d9396606ef33a48249f42efdab728cb1da7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_binary(char *buf, int *index, const void *p, long len)&lt;/code&gt;&lt;code&gt;int ei_x_encode_binary(ei_x_buff* x, const void *p, long len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_binary(char *buf, int *index, const void *p, long len)&lt;/code&gt; &lt;code&gt;int ei_x_encode_binary(ei_x_buff* x, const void *p, long len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2036bf25dd701ed737d16a5b650b8201a78fa88f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_boolean(char *buf, int *index, int p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_boolean(ei_x_buff* x, int p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_boolean(char *buf, int *index, int p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_boolean(ei_x_buff* x, int p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7bea77c7872775d24efe304b06dab54aafb9fe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_char(char *buf, int *index, char p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_char(ei_x_buff* x, char p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_char(char *buf, int *index, char p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_char(ei_x_buff* x, char p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7a307beceb96b6b11795cc5d766ff3b85d63f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_double(char *buf, int *index, double p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_double(ei_x_buff* x, double p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_double(char *buf, int *index, double p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_double(ei_x_buff* x, double p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46bb642408497ffc04bfcca020474f0aa1fecd11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_empty_list(char* buf, int* index)&lt;/code&gt;&lt;code&gt;int ei_x_encode_empty_list(ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_empty_list(char* buf, int* index)&lt;/code&gt; &lt;code&gt;int ei_x_encode_empty_list(ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d11f2b7062f3ff5a2ef7070264d5a23834561eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_fun(char *buf, int *index, const erlang_fun *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_fun(ei_x_buff* x, const erlang_fun* fun)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_fun(char *buf, int *index, const erlang_fun *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_fun(ei_x_buff* x, const erlang_fun* fun)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f94e9eeb3c7fa27d29242a807c7c2dcdc61aa93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_list_header(char *buf, int *index, int arity)&lt;/code&gt;&lt;code&gt;int ei_x_encode_list_header(ei_x_buff* x, int arity)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_list_header(char *buf, int *index, int arity)&lt;/code&gt; &lt;code&gt;int ei_x_encode_list_header(ei_x_buff* x, int arity)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="699de4bfe5a5c6b39bb40badc010d9377f47377f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_long(char *buf, int *index, long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_long(ei_x_buff* x, long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_long(char *buf, int *index, long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_long(ei_x_buff* x, long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d5ceb8605c9a0883944a415416a2c549942dbba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_longlong(char *buf, int *index, long long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_longlong(ei_x_buff* x, long long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_longlong(char *buf, int *index, long long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_longlong(ei_x_buff* x, long long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd56ee0ea342ac9f86cdfde930e73cae153464b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_map_header(char *buf, int *index, int arity)&lt;/code&gt;&lt;code&gt;int ei_x_encode_map_header(ei_x_buff* x, int arity)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_map_header(char *buf, int *index, int arity)&lt;/code&gt; &lt;code&gt;int ei_x_encode_map_header(ei_x_buff* x, int arity)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc14f613a1608fff8e0bf6ca396586b812bcd8cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_pid(char *buf, int *index, const erlang_pid *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_pid(ei_x_buff* x, const erlang_pid *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_pid(char *buf, int *index, const erlang_pid *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_pid(ei_x_buff* x, const erlang_pid *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e44f4b6b918ff2e63fef2cea2444b864243aeb86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_port(char *buf, int *index, const erlang_port *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_port(ei_x_buff* x, const erlang_port *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_port(char *buf, int *index, const erlang_port *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_port(ei_x_buff* x, const erlang_port *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="688c30a81e6d6b45df50fc30788fa09ac0e7f0d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_ref(char *buf, int *index, const erlang_ref *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_ref(ei_x_buff* x, const erlang_ref *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_ref(char *buf, int *index, const erlang_ref *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_ref(ei_x_buff* x, const erlang_ref *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f8310f88f6d74915d49b6ec786895f64af370f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_string(char *buf, int *index, const char *p)&lt;/code&gt;&lt;code&gt;int ei_encode_string_len(char *buf, int *index, const char *p, int len)&lt;/code&gt;&lt;code&gt;int ei_x_encode_string(ei_x_buff* x, const char *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_string_len(ei_x_buff* x, const char* s, int len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_string(char *buf, int *index, const char *p)&lt;/code&gt; &lt;code&gt;int ei_encode_string_len(char *buf, int *index, const char *p, int len)&lt;/code&gt; &lt;code&gt;int ei_x_encode_string(ei_x_buff* x, const char *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_string_len(ei_x_buff* x, const char* s, int len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="469a7cbf204d88ae986d22602c11633064a3c9c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_term(char *buf, int *index, void *t)&lt;/code&gt;&lt;code&gt;int ei_x_encode_term(ei_x_buff* x, void *t)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_term(char *buf, int *index, void *t)&lt;/code&gt; &lt;code&gt;int ei_x_encode_term(ei_x_buff* x, void *t)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14ed282e7e4dfaa0b843938fb67c0e25efaa762f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_trace(char *buf, int *index, const erlang_trace *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_trace(ei_x_buff* x, const erlang_trace *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_trace(char *buf, int *index, const erlang_trace *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_trace(ei_x_buff* x, const erlang_trace *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="112c190f71f80d6eaa400a3238d67dbb40922af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_tuple_header(char *buf, int *index, int arity)&lt;/code&gt;&lt;code&gt;int ei_x_encode_tuple_header(ei_x_buff* x, int arity)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_tuple_header(char *buf, int *index, int arity)&lt;/code&gt; &lt;code&gt;int ei_x_encode_tuple_header(ei_x_buff* x, int arity)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfb532bb3bb9ce2ee09e4eccf39e41e279f1006b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_ulong(char *buf, int *index, unsigned long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_ulong(ei_x_buff* x, unsigned long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_ulong(char *buf, int *index, unsigned long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_ulong(ei_x_buff* x, unsigned long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019fbefed5026bbc34c9e6979be2537cc256dedc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_ulonglong(char *buf, int *index, unsigned long long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_ulonglong(ei_x_buff* x, unsigned long long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_ulonglong(char *buf, int *index, unsigned long long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_ulonglong(ei_x_buff* x, unsigned long long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe8ceacaa74ce9f2c063d93033c64c5bbe89b4c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_version(char *buf, int *index)&lt;/code&gt;&lt;code&gt;int ei_x_encode_version(ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_version(char *buf, int *index)&lt;/code&gt; &lt;code&gt;int ei_x_encode_version(ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d45c8a894d11b0d401c9fdc952eed8c7dcbbe3ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_get_tracelevel(void)&lt;/code&gt;&lt;code&gt;void ei_set_tracelevel(int level)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_get_tracelevel(void)&lt;/code&gt; &lt;code&gt;void ei_set_tracelevel(int level)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7bdd2328e271f8df92925f8466c03928cd7c9ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_print_term(FILE* fp, const char* buf, int* index)&lt;/code&gt;&lt;code&gt;int ei_s_print_term(char** s, const char* buf, int* index)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_print_term(FILE* fp, const char* buf, int* index)&lt;/code&gt; &lt;code&gt;int ei_s_print_term(char** s, const char* buf, int* index)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8b0d3f6a8e08a1c738ae68ed805b1083c6c33ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_receive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt;&lt;code&gt;int ei_xreceive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_receive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt; &lt;code&gt;int ei_xreceive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="331943191dca2a990a6af07c55b4f10f92c87292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_receive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned imeout_ms)&lt;/code&gt;&lt;code&gt;int ei_xreceive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned timeout_ms)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_receive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned imeout_ms)&lt;/code&gt; &lt;code&gt;int ei_xreceive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned timeout_ms)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d91019c4a2f8ebf576c7bb98050381bb000e354b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_rpc(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, ei_x_buff *x)&lt;/code&gt;&lt;code&gt;int ei_rpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen)&lt;/code&gt;&lt;code&gt;int ei_rpc_from(ei_cnode *ec, int fd, int timeout, erlang_msg *msg, ei_x_buff *x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_rpc(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, ei_x_buff *x)&lt;/code&gt; &lt;code&gt;int ei_rpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen)&lt;/code&gt; &lt;code&gt;int ei_rpc_from(ei_cnode *ec, int fd, int timeout, erlang_msg *msg, ei_x_buff *x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="445fe207224c1f75197df7f04fb651ad9b3ba503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_x_append(ei_x_buff* x, const ei_x_buff* x2)&lt;/code&gt;&lt;code&gt;int ei_x_append_buf(ei_x_buff* x, const char* buf, int len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_x_append(ei_x_buff* x, const ei_x_buff* x2)&lt;/code&gt; &lt;code&gt;int ei_x_append_buf(ei_x_buff* x, const char* buf, int len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e10a620f8be39d23877b27b41dac3c2f350b5bd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_x_format(ei_x_buff* x, const char* fmt, ...)&lt;/code&gt;&lt;code&gt;int ei_x_format_wo_ver(ei_x_buff* x, const char *fmt, ... )&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_x_format(ei_x_buff* x, const char* fmt, ...)&lt;/code&gt; &lt;code&gt;int ei_x_format_wo_ver(ei_x_buff* x, const char *fmt, ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="018d33e014f50ed74ec24117fc37109e44069386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_x_new(ei_x_buff* x)&lt;/code&gt;&lt;code&gt;int ei_x_new_with_version(ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_x_new(ei_x_buff* x)&lt;/code&gt; &lt;code&gt;int ei_x_new_with_version(ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26837ab721255d45129355ee69a318ca6bc81fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erl_connect(node)&lt;/code&gt;&lt;code&gt;int erl_xconnect(addr, alive)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int erl_connect(node)&lt;/code&gt; &lt;code&gt;int erl_xconnect(addr, alive)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="588463869a047e0b1d0a80c0d79ae9d660ecdeed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erl_connect_init(number, cookie, creation)&lt;/code&gt;&lt;code&gt;int erl_connect_xinit(host, alive, node, addr, cookie, creation)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int erl_connect_init(number, cookie, creation)&lt;/code&gt; &lt;code&gt;int erl_connect_xinit(host, alive, node, addr, cookie, creation)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d16cf527dc908f09cd0db2c343fe6cb66a87d133" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erl_encode(term, bufp)&lt;/code&gt;&lt;code&gt;int erl_encode_buf(term, bufpp)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int erl_encode(term, bufp)&lt;/code&gt; &lt;code&gt;int erl_encode_buf(term, bufpp)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="393a2472afa0171614a18b904106ac786c500efc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;integer()&lt;/code&gt; - Number of one byte (8 bits) levels. N.B. This is currently converted into the previous config. Example: &lt;code&gt;3&lt;/code&gt; (&lt;code&gt;[8,8,8]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;integer()&lt;/code&gt; -1 바이트 (8 비트) 레벨의 수입니다. NB 이것은 현재 이전 구성으로 변환됩니다. 예 : &lt;code&gt;3&lt;/code&gt; ( &lt;code&gt;[8,8,8]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="e4e0259d3ce79d7297bd5ad1a52aae25ce5f1430" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;integer(X)&lt;/code&gt; detail level activates tracing of all calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt; whose detail level argument is lesser than &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;integer(X)&lt;/code&gt; 세부 사항 레벨 은 세부 사항 레벨 인수가 &lt;code&gt;X&lt;/code&gt; 보다 작은 &lt;code&gt;et:trace_me/4,5&lt;/code&gt; 에 대한 모든 호출의 추적을 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="519fcfd30d77b691b28ee08274f947ef51b3eb02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;integer_to_hexlist/1&lt;/code&gt; returns a string representing &lt;code&gt;Number&lt;/code&gt; in a hexadecimal form.</source>
          <target state="translated">&lt;code&gt;integer_to_hexlist/1&lt;/code&gt; 은 16 진수 형식의 &lt;code&gt;Number&lt;/code&gt; 를 나타내는 문자열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c0459dd21410bb32e2caa968faae901be29d26e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intensity&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; specify the &lt;code&gt;&lt;a href=&quot;#max_intensity&quot;&gt;maximum restart intensity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;intensity&lt;/code&gt; 와 &lt;code&gt;period&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#max_intensity&quot;&gt;maximum restart intensity&lt;/a&gt;&lt;/code&gt; 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="b9da6792d5381c0374b3b5c0b0e01146f242648e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;internal&lt;/code&gt; events can only be generated by the state machine itself through the state transition action &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;next_event&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; 이벤트는 상태 전이 조치 &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;next_event&lt;/a&gt;&lt;/code&gt; 를 통해 상태 머신 자체에서만 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="052da6b8c13b64c4de1be8693701070b4456a3d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ip_address()&lt;/code&gt; = See the &lt;code&gt;inet(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">&lt;code&gt;ip_address()&lt;/code&gt; = 커널 의 &lt;code&gt;inet(3)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d15106f06513f1512bae59b8a4c904bfbb4c82cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_map/1&lt;/code&gt; in the &lt;code&gt;erlang&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;is_map/1&lt;/code&gt; &lt;code&gt;erlang&lt;/code&gt; 모듈 의 is_map / 1</target>
        </trans-unit>
        <trans-unit id="eab25ca15c5ebd96d89c5f3cb640e10dfbf70da8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_running&lt;/code&gt;. Returns &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to indicate if Mnesia is running. It can also return &lt;code&gt;starting&lt;/code&gt; or &lt;code&gt;stopping&lt;/code&gt;. Can be called even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;is_running&lt;/code&gt; . Mnesia가 실행 중인지를 나타 내기 위해 &lt;code&gt;yes&lt;/code&gt; 또는 &lt;code&gt;no&lt;/code&gt; 를 반환 합니다 . 또한 &lt;code&gt;starting&lt;/code&gt; 또는 &lt;code&gt;stopping&lt;/code&gt; 반환 할 수도 있습니다 . Mnesia가 아직 실행 중이 아니더라도 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69fb27581ce389de2b4ec69e225d611abc764ffd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_alive&lt;/code&gt; can be specified per connection, if necessary. For details, see &lt;code&gt;&lt;a href=&quot;unix_telnet&quot;&gt;unix_telnet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keep_alive&lt;/code&gt; 필요한 경우 연결 당 keep_alive를 지정할 수 있습니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;unix_telnet&quot;&gt;unix_telnet&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="72bc07236831563c46426c5fd4ba3421fe698394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt;-terminated string containing the name of the environment variable.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 환경 변수의 이름을 포함 하는 &lt;code&gt;NULL&lt;/code&gt; 로 끝나는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="ab8db5d02ae63708074e0b1525ec52f65485b9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a pointer to a thread-specific data key variable.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 스레드 특정 데이터 키 변수에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="cf8d00475384e1c2d6c03e977342f7a4663a8b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a thread-specific data key to destroy.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 파괴 할 스레드 별 데이터 키입니다.</target>
        </trans-unit>
        <trans-unit id="49d61a7c51ab43fc47076647d598e74cb1b133fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a thread-specific data key.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 스레드 별 데이터 키입니다.</target>
        </trans-unit>
        <trans-unit id="51e80ce3f022ac7ddd37c33041f888f7a50e185f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the name of the object to look up.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 조회 할 오브젝트의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="66ac280c75c00617aac9e9816ad94d4f5a24d431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the name of the object to mark.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 표시 할 객체의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="726bf6575c9ae5d90f62fcec7dc7845829be36b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the object name.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 객체 이름입니다.</target>
        </trans-unit>
        <trans-unit id="76519f7a0036105d1631983a266c6debeb747f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the object to remove.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 는 제거 할 객체입니다.</target>
        </trans-unit>
        <trans-unit id="e8cd1655c5d738878c7393018e2810925863b821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keycheck(KeyPos, FileName)&lt;/code&gt; is equivalent to &lt;code&gt;keycheck(KeyPos, [FileName], [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keycheck(KeyPos, FileName)&lt;/code&gt; 은 &lt;code&gt;keycheck(KeyPos, [FileName], [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b153c6268ac50c18ffa73eb104aea23685d06fcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keymerge(KeyPos, FileNames, Output)&lt;/code&gt; is equivalent to &lt;code&gt;keymerge(KeyPos, FileNames, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keymerge(KeyPos, FileNames, Output)&lt;/code&gt; 은 &lt;code&gt;keymerge(KeyPos, FileNames, Output, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="83f036648bec0822f57409f769b8c88456b350cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keysort(KeyPos, QH1)&lt;/code&gt; is equivalent to &lt;code&gt;keysort(KeyPos, QH1, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keysort(KeyPos, QH1)&lt;/code&gt; 은 &lt;code&gt;keysort(KeyPos, QH1, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="77feb0f99a79d08708c49d907392d66a805a7e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keysort(N, FileName)&lt;/code&gt; is equivalent to &lt;code&gt;keysort(N, [FileName], FileName)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keysort(N, FileName)&lt;/code&gt; 은 &lt;code&gt;keysort(N, [FileName], FileName)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b8625b8ba314e33b76213d1ccfea99983f2ec845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keysort(N, Input, Output)&lt;/code&gt; is equivalent to &lt;code&gt;keysort(N, Input, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keysort(N, Input, Output)&lt;/code&gt; 은 &lt;code&gt;keysort(N, Input, Output, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0f07ab05f9a848556d1aad520ac884d2eed8199a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill_after/1&lt;/code&gt; is the same as &lt;code&gt;exit_after(Time, self(), kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill_after/1&lt;/code&gt; 은 &lt;code&gt;exit_after(Time, self(), kill)&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="72e34eb6858bc7ffa3f15fb1b75c7afcc44387d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill_after/2&lt;/code&gt; is the same as &lt;code&gt;exit_after(Time, Pid, kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill_after/2&lt;/code&gt; 는 &lt;code&gt;exit_after(Time, Pid, kill)&lt;/code&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="91e9db6ac63dd2f97d0bf7188e8fe47bd6f8a04f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kilo_byte/1&lt;/code&gt; creates a deep list. If &lt;code&gt;list_to_binary/1&lt;/code&gt; is called, the deep list can be converted to a binary of 1024 bytes:</source>
          <target state="translated">&lt;code&gt;kilo_byte/1&lt;/code&gt; 은 딥 목록을 만듭니다. 경우 &lt;code&gt;list_to_binary/1&lt;/code&gt; 이라고, 깊은 목록은 1024 바이트의 바이너리로 변환 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f538b0c5d5f89b037756df3ff6ce4f215129573b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lclose(Log)&lt;/code&gt; is equivalent to &lt;code&gt;lclose(Log,&amp;nbsp;node())&lt;/code&gt;. See also &lt;code&gt;&lt;a href=&quot;#close_1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lclose(Log)&lt;/code&gt; 는 &lt;code&gt;lclose(Log,&amp;nbsp;node())&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;#close_1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a67b1c8d7dbf4d841c943dc2946b4f7a2cdfea71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lclose/1&lt;/code&gt; closes a local log or an individual distributed log on the current node.</source>
          <target state="translated">&lt;code&gt;lclose/1&lt;/code&gt; 은 현재 노드에서 로컬 로그 또는 개별 분산 로그를 닫습니다.</target>
        </trans-unit>
        <trans-unit id="9b103b7c84a1c1813d67554045b1245a8aec0af6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lclose/2&lt;/code&gt; closes an individual distributed log on the specified node if the node is not the current one.</source>
          <target state="translated">&lt;code&gt;lclose/2&lt;/code&gt; 는 노드가 현재 노드가 아닌 경우 지정된 노드에서 개별 분산 로그를 닫습니다.</target>
        </trans-unit>
        <trans-unit id="fb237ae7bc4ddc5bd78c0bc0383db41484ff959d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lcnt&lt;/code&gt; is used to find contention points in the Erlang Run-Time System's internal locking mechanisms. It is useful when looking for bottlenecks in interaction between process, port, ets tables and other entities that can be run in parallel.</source>
          <target state="translated">&lt;code&gt;lcnt&lt;/code&gt; 는 Erlang Run-Time System의 내부 잠금 메커니즘에서 경합 지점을 찾는 데 사용됩니다. 프로세스, 포트, ets 테이블 및 병렬로 실행할 수있는 다른 엔티티 간의 상호 작용에서 병목 현상을 찾을 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="331dee2c2ee873ecad7db7a741ab79842dccabfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lcnt&lt;/code&gt; is used to profile interactions inbetween entities that run in parallel. For example if you have a process that all other processes in the system needs to interact with (maybe it has some global configuration), then &lt;code&gt;lcnt&lt;/code&gt; can be used to figure out if the interaction with that process is a problem.</source>
          <target state="translated">&lt;code&gt;lcnt&lt;/code&gt; 는 병렬로 실행되는 엔티티 간 상호 작용을 프로파일 링하는 데 사용됩니다. 예를 들어 시스템의 다른 모든 프로세스와 상호 작용해야하는 프로세스가있는 경우 (일부 글로벌 구성이 &lt;code&gt;lcnt&lt;/code&gt; 수 있음 ) lcnt 를 사용하여 해당 프로세스와의 상호 작용에 문제가 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25ce4f2b1f1e06d9949ea3fe11c52d35da9121ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;len&lt;/code&gt; is the length of &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; 은 &lt;code&gt;string&lt;/code&gt; 의 길이입니다 .</target>
        </trans-unit>
        <trans-unit id="de4624d2d9acec6c37f781ba7bd5df326bc8a4a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;len&lt;/code&gt; is the length of the message in bytes.</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; 은 메시지 길이 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="98f88a9115e57d8f3563b9d731c267d124cd7da9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length : integer&lt;/code&gt; :: Async queue length. Ex. &lt;code&gt;-1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;length : integer&lt;/code&gt; :: 비동기 대기열 길이. 전의. &lt;code&gt;-1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="afc5c6080141465fcafeeef615a30ef4d6eed1a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length : integer&lt;/code&gt; :: Async queue length. Ex. &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;length : integer&lt;/code&gt; :: 비동기 대기열 길이. 전의. &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="031b6f26da3f37178c8c4740ef267aec1a691654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib&lt;/code&gt; - Application directories</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; - 응용 프로그램 디렉토리</target>
        </trans-unit>
        <trans-unit id="2a4f8d53fb0ae82e919ce51996fe4ba629c04004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;library_path&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;library_path&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#library_path&quot;&gt;library path&lt;/a&gt;&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="eaef050de46766049525e30b626f851658013532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line&lt;/code&gt; - Line mode, a packet is a line-terminated with newline, lines longer than the receive buffer are truncated</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; - 회선 모드, 패킷은 개행으로 끝나는 행이며 수신 버퍼보다 ​​긴 행은 잘립니다.</target>
        </trans-unit>
        <trans-unit id="9790f41088482266e752413781e0ffe00199475f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list()&lt;/code&gt; - The one given as argument to function &lt;code&gt;subsystem_spec/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list()&lt;/code&gt; &lt;code&gt;subsystem_spec/1&lt;/code&gt; 함수에 인수로 제공된 것 입니다.</target>
        </trans-unit>
        <trans-unit id="8a7718bab464f8ceacbe2b50a1165970a64023b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing a list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 목록 을 포함하는 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="726a4da1d64ef4b3b69b2ea4714bcdd39c26c4b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing a proper list. In a proper list, all tails except the last point to another list cell, and the last tail points to an empty list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 적절한 목록을 포함하는 Erlang 용어입니다. 올바른 목록에서 마지막 꼬리를 제외한 모든 꼬리는 다른 목록 셀을 가리키고 마지막 꼬리는 빈 목록을 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="3a18e9029c5b8737849184d7fa1445abea54500c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing an I/O list.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 I / O 목록을 포함하는 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="be5f65fbdbd15a19650c5680eb95cc7ff30b8e07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list&lt;/code&gt; is an Erlang term containing an I/O list. The I/O list must not contain the integer 0, as C strings may not contain this value except as a terminating marker.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 는 I / O 목록을 포함하는 Erlang 용어입니다. I / O 목록에는 정수 0이 포함되어서는 안됩니다. C 문자열은 종료 표시 자로 제외하고이 값을 포함하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ff60fee6c0558227a68fafe4201fffd5289ccfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_auth_users/1&lt;/code&gt;, &lt;code&gt;list_auth_users/2&lt;/code&gt;, and &lt;code&gt;list_auth_users/3&lt;/code&gt; each returns a list of users that are currently authenticated. Authentications are stored for &lt;code&gt;SecurityAuthTimeout&lt;/code&gt; seconds, and then discarded.</source>
          <target state="translated">&lt;code&gt;list_auth_users/1&lt;/code&gt; , &lt;code&gt;list_auth_users/2&lt;/code&gt; 및 &lt;code&gt;list_auth_users/3&lt;/code&gt; 는 각각 현재 인증 된 사용자 목록을 리턴합니다. 인증은 &lt;code&gt;SecurityAuthTimeout&lt;/code&gt; 초 동안 저장된 후 폐기됩니다.</target>
        </trans-unit>
        <trans-unit id="5acfd7019e137b4cdc2774dc25661afca35ffbef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_blocked_users/1&lt;/code&gt;, &lt;code&gt;list_blocked_users/2&lt;/code&gt;, and &lt;code&gt;list_blocked_users/3&lt;/code&gt; each returns a list of users that are currently blocked from access.</source>
          <target state="translated">&lt;code&gt;list_blocked_users/1&lt;/code&gt; , &lt;code&gt;list_blocked_users/2&lt;/code&gt; 및 &lt;code&gt;list_blocked_users/3&lt;/code&gt; 는 각각 현재 액세스가 차단 된 사용자 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8fa5a48c1d351eb3391bd3d93f9d211ac75dc2d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_dir/1&lt;/code&gt; retrieves all filenames in the zip archive &lt;code&gt;Archive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list_dir/1&lt;/code&gt; 은 zip 아카이브 &lt;code&gt;Archive&lt;/code&gt; 에서 모든 파일 이름을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="a4ce3ce5745733f123cf322f55e9ef14e233b7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_dir/2&lt;/code&gt; provides options.</source>
          <target state="translated">&lt;code&gt;list_dir/2&lt;/code&gt; 는 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f53ab94d5ba9db56fa66c8232d30db5fa6547050" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_group_members/2, list_group_members/3&lt;/code&gt;, and &lt;code&gt;list_group_members/4&lt;/code&gt; each lists the members of a specified group. If the group does not exist or there is an error, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;list_group_members/2&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;list_group_members/2, list_group_members/3&lt;/code&gt; 및 &lt;code&gt;list_group_members/4&lt;/code&gt; 는 각각 지정된 그룹의 구성원을 나열합니다. 그룹이 존재하지 않거나 오류가 있으면 &lt;code&gt;{error, Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;list_group_members/2&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="18d59539d0fef19e0d714af933d9eefa77a0818d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_groups/1, list_groups/2&lt;/code&gt;, and &lt;code&gt;list_groups/3&lt;/code&gt; each lists all the groups available. If there is an error, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;list_groups/1&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;list_groups/1, list_groups/2&lt;/code&gt; 및 &lt;code&gt;list_groups/3&lt;/code&gt; 는 각각 사용 가능한 모든 그룹을 나열합니다. 오류가 있으면 &lt;code&gt;{error, Reason}&lt;/code&gt; 이 리턴됩니다. 때 &lt;code&gt;list_groups/1&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="7c79260e7f4c22a26aa9f665a18df6729efbe233" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;list_users/1, list_users/2&lt;/code&gt;, and &lt;code&gt;list_users/3&lt;/code&gt; each returns a list of users in the user database for a specific &lt;code&gt;Port/Dir&lt;/code&gt;. When &lt;code&gt;list_users/1&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;list_users/1, list_users/2&lt;/code&gt; 및 &lt;code&gt;list_users/3&lt;/code&gt; 는 각각 특정 &lt;code&gt;Port/Dir&lt;/code&gt; 에 대한 사용자 데이터베이스의 사용자 목록을 리턴합니다 . 때 &lt;code&gt;list_users/1&lt;/code&gt; 라고하며, 옵션 &lt;code&gt;Port&lt;/code&gt; 및 &lt;code&gt;Dir&lt;/code&gt; 필수입니다.</target>
        </trans-unit>
        <trans-unit id="7e6cad36a8a85579416bf1628b19e45d5eefb715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listen/1&lt;/code&gt; is called once in order to listen for incoming connection requests. The call is made when the distribution is brought up. The argument &lt;code&gt;Name&lt;/code&gt; is the part of the node name before the &lt;code&gt;@&lt;/code&gt; sign in the full node name. It can be either an atom or a string.</source>
          <target state="translated">&lt;code&gt;listen/1&lt;/code&gt; 수신 연결 요청을 청취하기 위해 listen / 1 이 한 번 호출됩니다. 분배가 이루어지면 호출이 이루어집니다. 인수 &lt;code&gt;Name&lt;/code&gt; 전과 노드 이름의 일부입니다 &lt;code&gt;@&lt;/code&gt; 의 전체 노드 이름에 로그인합니다. 원자 또는 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3390bea1740da3235aebc0537125e1e385dc069f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listensock&lt;/code&gt; is an open socket descriptor on which &lt;code&gt;listen()&lt;/code&gt; has previously been called.</source>
          <target state="translated">&lt;code&gt;listensock&lt;/code&gt; 은 &lt;code&gt;listen()&lt;/code&gt; 이 이전에 호출 된 개방 소켓 설명자입니다 .</target>
        </trans-unit>
        <trans-unit id="93ca30f0b36fd9439a8c607bf40abd0dde1401b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:append(A, B)&lt;/code&gt; is equivalent to &lt;code&gt;A ++ B&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lists:append(A, B)&lt;/code&gt; 는 &lt;code&gt;A ++ B&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="cd0e2167b19a98d558382b7069180326cf81741b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:flatten/1&lt;/code&gt; builds an entirely new list. It is therefore expensive, and even &lt;strong&gt;more&lt;/strong&gt; expensive than the &lt;code&gt;++&lt;/code&gt; operator (which copies its left argument, but not its right argument).</source>
          <target state="translated">&lt;code&gt;lists:flatten/1&lt;/code&gt; 은 완전히 새로운 목록을 만듭니다. 따라서 &lt;code&gt;++&lt;/code&gt; 연산자 &lt;strong&gt;보다&lt;/strong&gt; 값이 비싸고 훨씬 비쌉니다 (왼쪽 인수는 복사하지만 오른쪽 인수는 복사하지 않음).</target>
        </trans-unit>
        <trans-unit id="2fc30df23df0d4aae69fe65f114fd554b7fccaaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:keydelete&lt;/code&gt; works in the same way but deletes the first tuple found (if any) and returns the remaining list:</source>
          <target state="translated">&lt;code&gt;lists:keydelete&lt;/code&gt; 는 같은 방식으로 작동하지만 발견 된 첫 번째 튜플 (있는 경우)을 삭제하고 나머지 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f4eb825c0ab4a344284bd22859baffe203e6edc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:keysearch&lt;/code&gt; is like &lt;code&gt;lists:keymember&lt;/code&gt;, but it returns &lt;code&gt;{value,Tuple_Found}&lt;/code&gt; or the atom &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lists:keysearch&lt;/code&gt; 는 &lt;code&gt;lists:keymember&lt;/code&gt; 와 비슷하지만 &lt;code&gt;{value,Tuple_Found}&lt;/code&gt; 또는 atom &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e11c251dfb860431b23cc06d48025147f0ce53f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lists:subtract(A, B)&lt;/code&gt; is equivalent to &lt;code&gt;A -- B&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lists:subtract(A, B)&lt;/code&gt; 는 &lt;code&gt;A -- B&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="3e66636fc0a180beb50c9d8299fb3e8f7cda2095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;literal_alloc&lt;/code&gt; super carrier size (in MB). The amount of &lt;strong&gt;virtual&lt;/strong&gt; address space reserved for literal terms in Erlang code on 64-bit architectures. Defaults to &lt;code&gt;1024&lt;/code&gt; (that is, 1 GB), which is usually sufficient. The flag is ignored on 32-bit architectures.</source>
          <target state="translated">&lt;code&gt;literal_alloc&lt;/code&gt; 수퍼 캐리어 크기 (MB). 의 양을 &lt;strong&gt;가상&lt;/strong&gt; 주소 공간은 64 비트 아키텍처에 얼랑 코드에서 리터럴 용어를 소유. 기본값은 &lt;code&gt;1024&lt;/code&gt; (즉 1GB)로 충분합니다. 32 비트 아키텍처에서는 플래그가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d54c2beccdcdadf7b8b8e9e5d5d92fd60ac7d4ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt; is called when the NIF library is loaded and no previously loaded library exists for this module.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; NIF 라이브러리가로드되고이 모듈에 대해 이전에로드 된 라이브러리가 없을 때 load 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="99e9f90b11036e44681cbe3af66054d11205eaec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load&lt;/code&gt;, &lt;code&gt;upgrade&lt;/code&gt; and &lt;code&gt;unload&lt;/code&gt; are pointers to functions. One of &lt;code&gt;load&lt;/code&gt; or &lt;code&gt;upgrade&lt;/code&gt; is called to initialize the library. &lt;code&gt;unload&lt;/code&gt; is called to release the library. All are described individually below.</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; , &lt;code&gt;upgrade&lt;/code&gt; 및 &lt;code&gt;unload&lt;/code&gt; 는 함수를 가리키는 포인터입니다. 라이브러리를 초기화하기 위해 &lt;code&gt;load&lt;/code&gt; 또는 &lt;code&gt;upgrade&lt;/code&gt; 중 하나 가 호출됩니다. 라이브러리를 해제하기 위해 &lt;code&gt;unload&lt;/code&gt; 가 호출됩니다. 모두 아래에 개별적으로 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="04f795031c0a3191dc6833462193ff8535894cb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_info&lt;/code&gt; is the second argument to &lt;code&gt;&lt;a href=&quot;erlang#load_nif-2&quot;&gt;erlang:load_nif/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;load_info&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;erlang#load_nif-2&quot;&gt;erlang:load_nif/2&lt;/a&gt;&lt;/code&gt; 의 두 번째 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="aff9e8cdbf9e030064b2b7fe81a987f154b034d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_node&lt;/code&gt;. Returns the name of the node that Mnesia loaded the table from. The structure of the returned value is unspecified, but can be useful for debugging purposes.</source>
          <target state="translated">&lt;code&gt;load_node&lt;/code&gt; . Mnesia가 테이블을로드 한 노드의 이름을 리턴합니다. 반환 된 값의 구조는 지정되지 않았지만 디버깅 목적으로 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a643fb5182da0ca35ae74da8a11c5192585d1561" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_order&lt;/code&gt;. Returns the load order priority of the table. It is an integer and defaults to &lt;code&gt;0&lt;/code&gt; (zero).</source>
          <target state="translated">&lt;code&gt;load_order&lt;/code&gt; . 테이블의로드 순서 우선 순위를 리턴합니다. 정수이며 기본값은 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="24aaff6b3ceaf8f7959a64ecaf82f686d9c3c0fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;load_reason&lt;/code&gt;. Returns the reason of why Mnesia decided to load the table. The structure of the returned value is unspecified, but can be useful for debugging purposes.</source>
          <target state="translated">&lt;code&gt;load_reason&lt;/code&gt; . Mnesia가 테이블을로드하기로 결정한 이유를 리턴합니다. 반환 된 값의 구조는 지정되지 않았지만 디버깅 목적으로 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45ed93e5123c7e83801fb2528f0aa02733e06e2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; is an option that means that the directories where the applications are found are used in the boot script, instead of &lt;code&gt;$ROOT/lib&lt;/code&gt; (&lt;code&gt;$ROOT&lt;/code&gt; is the root directory of the installed release).</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; 은 응용 프로그램이있는 디렉토리가 &lt;code&gt;$ROOT/lib&lt;/code&gt; 대신 부트 스크립트에서 사용됨을 의미하는 옵션입니다 ( &lt;code&gt;$ROOT&lt;/code&gt; 는 설치된 릴리스의 루트 디렉토리입니다).</target>
        </trans-unit>
        <trans-unit id="182486b044d3d61e0e4eb3eba30d58307f59efbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; is returned if only parts of the application are restarted (by a supervisor), or if the function is called outside a startup.</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; 응용 프로그램의 일부만 (감독자에 의해) 다시 시작되거나 함수가 시작 외부에서 호출 된 경우 local 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="8803b8be9dd903808934ee41a2901394e37636cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_content&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate if the table is configured to have locally unique content on each node.</source>
          <target state="translated">&lt;code&gt;local_content&lt;/code&gt; . 테이블이 각 노드에 로컬로 고유 한 내용을 갖도록 구성되어 있는지 표시하려면 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="24e5e058c6b2dcae03991ec71d8aa2c47c7d3153" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_content&lt;/code&gt;. When an application requires tables whose contents are local to each node, &lt;code&gt;local_content&lt;/code&gt; tables can be used. The table name is known to all Mnesia nodes, but its content is unique on each node. This means that access to such a table must be done locally. Set field &lt;code&gt;local_content&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to enable the &lt;code&gt;local_content&lt;/code&gt; behavior. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;local_content&lt;/code&gt; . 어플리케이션이 각 노드에 대해 로컬 인 컨텐츠를 갖는 테이블이 필요한 경우 &lt;code&gt;local_content&lt;/code&gt; 테이블을 사용할 수 있습니다. 테이블 이름은 모든 Mnesia 노드에 알려져 있지만 그 내용은 각 노드에서 고유합니다. 이는 해당 테이블에 대한 액세스가 로컬로 수행되어야 함을 의미합니다. 설정 필드 &lt;code&gt;local_content&lt;/code&gt; 에 &lt;code&gt;true&lt;/code&gt; 에이블하는 &lt;code&gt;local_content&lt;/code&gt; 의 동작을. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3a5f52568d19693d798aaa7dde969e33e5993d63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local_tables&lt;/code&gt;. Returns a list of all tables that are configured to reside locally.</source>
          <target state="translated">&lt;code&gt;local_tables&lt;/code&gt; . 로컬로 상주하도록 구성된 모든 테이블의 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3105149e9ac8a04e76c7b0fb03db073b4ea51a3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock&lt;/code&gt; specifies whether &lt;code&gt;Mnesia&lt;/code&gt; is to acquire a read or write lock on the table.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 은 &lt;code&gt;Mnesia&lt;/code&gt; 가 테이블에서 읽기 또는 쓰기 잠금을 획득 할 것인지 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="47c000df4e030c56062201fa1e4645513ad3cf9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lock_queue&lt;/code&gt;. Returns a list of all transactions that are queued for execution by the local lock manager.</source>
          <target state="translated">&lt;code&gt;lock_queue&lt;/code&gt; . 로컬 잠금 관리자가 실행을 위해 대기중인 모든 트랜잭션 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="dfc11c648eda5a7d9fdd3f797b74aafa254dfc21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;blog/2&lt;/code&gt; for externally formatted logs. &lt;code&gt;blog/2&lt;/code&gt; can also be used for internally formatted logs if the binary is constructed with a call to &lt;code&gt;term_to_binary/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log/2&lt;/code&gt; 는 내부 형식의 로그에 사용되고 &lt;code&gt;blog/2&lt;/code&gt; 는 외부 형식의 로그에 사용됩니다. 바이너리가 &lt;code&gt;term_to_binary/1&lt;/code&gt; 에 대한 호출로 구성된 경우 &lt;code&gt;blog/2&lt;/code&gt; 는 내부 형식의 로그에도 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35f86282b4a84e4c8c3d37ec0a3d441cd2b85619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_dir&lt;/code&gt; is where the log files are written.</source>
          <target state="translated">&lt;code&gt;log_dir&lt;/code&gt; 은 로그 파일이 작성되는 위치입니다.</target>
        </trans-unit>
        <trans-unit id="995e2d2521421390d9a06c23bfa3a101cfb1b278" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_terms/2&lt;/code&gt; is used for internally formatted logs, and &lt;code&gt;blog_terms/2&lt;/code&gt; for externally formatted logs. &lt;code&gt;blog_terms/2&lt;/code&gt; can also be used for internally formatted logs if the binaries are constructed with calls to &lt;code&gt;term_to_binary/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log_terms/2&lt;/code&gt; 는 내부 형식의 로그에 사용되고 &lt;code&gt;blog_terms/2&lt;/code&gt; 는 외부 형식의 로그에 사용됩니다. 바이너리가 &lt;code&gt;term_to_binary/1&lt;/code&gt; 호출로 구성된 경우 내부 형식화 된 로그에 &lt;code&gt;blog_terms/2&lt;/code&gt; 를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="23529896ccb5d645b44d285439cb214a836bfc9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log_version&lt;/code&gt;. Returns the version number of the Mnesia transaction log format.</source>
          <target state="translated">&lt;code&gt;log_version&lt;/code&gt; . Mnesia 트랜잭션 로그 형식의 버전 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3dcb31be04290d5acce7d33cd9a0cee64c351d93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;logger_formatter&lt;/code&gt; is the default formatter used by Logger.</source>
          <target state="translated">&lt;code&gt;logger_formatter&lt;/code&gt; 는 로거에서 사용하는 기본 포맷터입니다.</target>
        </trans-unit>
        <trans-unit id="d273bde00c44f84e57b534c9ee265abf11e0eb98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup&lt;/code&gt; extracts &lt;code&gt;{Key,Value}&lt;/code&gt; tuples from &lt;code&gt;ETSTable&lt;/code&gt; and returns the &lt;code&gt;Value&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt;. If &lt;code&gt;ETSTable&lt;/code&gt; is of type &lt;code&gt;bag&lt;/code&gt;, only the first &lt;code&gt;Value&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt; is returned. &lt;code&gt;lookup/2&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;lookup/3&lt;/code&gt; returns &lt;code&gt;Undefined&lt;/code&gt; if no &lt;code&gt;Value&lt;/code&gt; is found.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; 추출물 &lt;code&gt;{Key,Value}&lt;/code&gt; 튜플에서 &lt;code&gt;ETSTable&lt;/code&gt; 및 반환 &lt;code&gt;Value&lt;/code&gt; 과 관련된 &lt;code&gt;Key&lt;/code&gt; . 경우 &lt;code&gt;ETSTable&lt;/code&gt; 는 타입입니다 &lt;code&gt;bag&lt;/code&gt; , 첫 번째 &lt;code&gt;Value&lt;/code&gt; 과 관련된 &lt;code&gt;Key&lt;/code&gt; 반환됩니다. &lt;code&gt;lookup/2&lt;/code&gt; 는 &lt;code&gt;undefined&lt;/code&gt; &lt;code&gt;Value&lt;/code&gt; 반환 하고 &lt;code&gt;lookup/3&lt;/code&gt; 는 값 이 없으면 &lt;code&gt;Undefined&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eb86b8f77b9b208e6a11d12b37271d4c192f67f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup_mime&lt;/code&gt; returns the MIME type associated with a specific file suffix as specified in the file &lt;code&gt;mime.types&lt;/code&gt; (located in the config directory).</source>
          <target state="translated">&lt;code&gt;lookup_mime&lt;/code&gt; 은 &lt;code&gt;mime.types&lt;/code&gt; 파일 (config 디렉토리에 있음)에 지정된 특정 파일 접미사와 관련된 MIME 유형을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c90fbcda6ae10bb657658395cb0d63bc3c4582c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lookup_mime_default&lt;/code&gt; returns the MIME type associated with a specific file suffix as specified in the &lt;code&gt;mime.types&lt;/code&gt; file (located in the config directory). If no appropriate association is found, the value of &lt;code&gt;DefaultType&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;lookup_mime_default&lt;/code&gt; 는 &lt;code&gt;mime.types&lt;/code&gt; 파일 (config 디렉토리에 있음)에 지정된 특정 파일 접미어와 연관된 MIME 유형을 리턴합니다 . 적절한 연관이 없으면 &lt;code&gt;DefaultType&lt;/code&gt; 값 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="3dfec20f4c61fd18fa24269ea42272c9fc181327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;low_entropy&lt;/code&gt;: the random generator failed due to lack of secure &quot;randomness&quot;,</source>
          <target state="translated">&lt;code&gt;low_entropy&lt;/code&gt; : 안전한 &quot;무작위성&quot;부족으로 인해 랜덤 생성기가 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="61f5cddd2234c71cd616f814453f29c2cac4203d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls/1&lt;/code&gt; implies the current remote directory of the user.</source>
          <target state="translated">&lt;code&gt;ls/1&lt;/code&gt; 은 사용자의 현재 원격 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="86263d48661c7d702923e5fea293faecb2b162c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m/1&lt;/code&gt; is also suitable for checking that the BEAM file of a module that is about to be loaded into a running a system does not call any undefined functions. In either case, the code path of the code server (see the module &lt;code&gt;code&lt;/code&gt;) is used for finding modules that export externally called functions not exported by the checked module itself, so called &lt;code&gt;&lt;a href=&quot;xref#library_module&quot;&gt;library modules&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;m/1&lt;/code&gt; 은 또한 실행중인 시스템에로드 될 모듈의 BEAM 파일이 정의되지 않은 함수를 호출하지 않는지 확인하는 데에도 적합합니다. 두 경우 모두, 코드 서버의 코드 경로 (모듈 &lt;code&gt;code&lt;/code&gt; 참조 )는 검사 된 모듈 자체에서 내 보내지 않은 외부 호출 함수 ( &lt;code&gt;&lt;a href=&quot;xref#library_module&quot;&gt;library modules&lt;/a&gt;&lt;/code&gt; 이라고 함)를 내보내는 모듈을 찾는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="df9537a65ebbc229094f9e153efaf34118a0a025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m1&lt;/code&gt; is dependent on &lt;code&gt;ch3&lt;/code&gt; also when downgrading. &lt;code&gt;systools&lt;/code&gt; knows the difference between up- and downgrading and generates a correct &lt;code&gt;relup&lt;/code&gt;, where &lt;code&gt;ch3&lt;/code&gt; is loaded before &lt;code&gt;m1&lt;/code&gt; when upgrading, but &lt;code&gt;m1&lt;/code&gt; is loaded before &lt;code&gt;ch3&lt;/code&gt; when downgrading.</source>
          <target state="translated">&lt;code&gt;m1&lt;/code&gt; 다운 그레이드 할 때 m1 은 &lt;code&gt;ch3&lt;/code&gt; 에 의존합니다 . &lt;code&gt;systools&lt;/code&gt; 상향 및 하향의 차이를 알고 정확한 생성 &lt;code&gt;relup&lt;/code&gt; , &lt;code&gt;ch3&lt;/code&gt; 전에로드 &lt;code&gt;m1&lt;/code&gt; 업그레이드하지만 때 &lt;code&gt;m1&lt;/code&gt; 전에로드 &lt;code&gt;ch3&lt;/code&gt; 때 하향 조정한다.</target>
        </trans-unit>
        <trans-unit id="be74c7b55753734ee046ceff4ef299316ae01ad4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;major : integer&lt;/code&gt; :: Major version. Ex. &lt;code&gt;3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;major : integer&lt;/code&gt; :: Major 버전. 전의. &lt;code&gt;3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e5f4e2011f683da4cdaf06fa133ff71c470850c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;majority&lt;/code&gt;. This attribute is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;; default is &lt;code&gt;false&lt;/code&gt;. When &lt;code&gt;true&lt;/code&gt;, a majority of the table replicas must be available for an update to succeed. Majority checking can be enabled on tables with mission-critical data, where it is vital to avoid inconsistencies because of network splits.</source>
          <target state="translated">&lt;code&gt;majority&lt;/code&gt; . 이 속성은 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 입니다 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 때 &lt;code&gt;true&lt;/code&gt; 업데이트가 성공하기 위해서는, 테이블 복제본의 대부분은 사용할 수 있어야합니다. 미션 크리티컬 한 데이터가있는 테이블에서 대다수 검사를 활성화 할 수 있으며, 네트워크 분할로 인한 불일치를 피하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="f325d85c7b8a9fe60e4ce65f1b1b9a5d59c1afcd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make install&lt;/code&gt; will install at a location specified when doing &lt;code&gt;configure&lt;/code&gt;. &lt;code&gt;configure&lt;/code&gt; arguments specifying where the installation should reside are for example: &lt;code&gt;--prefix&lt;/code&gt;, &lt;code&gt;--exec-prefix&lt;/code&gt;, &lt;code&gt;--libdir&lt;/code&gt;, &lt;code&gt;--bindir&lt;/code&gt;, etc. By default it will install under &lt;code&gt;/usr/local&lt;/code&gt;. You typically do not want to install your cross build under &lt;code&gt;/usr/local&lt;/code&gt; on your build machine. Using &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt; will cause the installation paths to be prefixed by &lt;code&gt;$DESTDIR&lt;/code&gt;. This makes it possible to install and package the installation on the build machine without having to place the installation in the same directory on the build machine as it should be executed from on the target machine.</source>
          <target state="translated">&lt;code&gt;make install&lt;/code&gt; 은 &lt;code&gt;configure&lt;/code&gt; 를 수행 할 때 지정된 위치에 설치 합니다 . 설치 위치를 지정하는 &lt;code&gt;configure&lt;/code&gt; 인수는 예를 들어 &lt;code&gt;--prefix&lt;/code&gt; , &lt;code&gt;--exec-prefix&lt;/code&gt; , &lt;code&gt;--libdir&lt;/code&gt; , &lt;code&gt;--bindir&lt;/code&gt; 등입니다. 기본적으로 &lt;code&gt;/usr/local&lt;/code&gt; 아래에 설치됩니다 . 일반적으로 빌드 시스템의 &lt;code&gt;/usr/local&lt;/code&gt; 아래에 크로스 빌드를 설치하지 않으려 고 합니다. &lt;code&gt;&lt;a href=&quot;http://www.gnu.org/prep/standards/html_node/DESTDIR.html&quot;&gt;DESTDIR&lt;/a&gt;&lt;/code&gt; 을 사용 하면 설치 경로 앞에 &lt;code&gt;$DESTDIR&lt;/code&gt; 이 붙습니다.. 따라서 대상 시스템에서 실행해야하는 것과 동일한 디렉토리에 설치를 배치하지 않고도 빌드 시스템에 설치를 설치하고 패키징 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f6c951c6749c15435d2980eb4aa791a53af9775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make release&lt;/code&gt; will copy what you have built for the target machine to &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt;. The &lt;code&gt;Install&lt;/code&gt; script will not be run. The content of &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; is what by default ends up in &lt;code&gt;/usr/local/lib/erlang&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make release&lt;/code&gt; 는 대상 머신을 위해 빌드 한 것을 &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; 에 복사합니다 . &lt;code&gt;Install&lt;/code&gt; 스크립트가 실행되지 않습니다. &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; 의 내용은 기본적으로 &lt;code&gt;/usr/local/lib/erlang&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9e66362068d2d90fa1b3b40af705bb7adc3fbdf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make:all/0,1&lt;/code&gt; and &lt;code&gt;make:files/1,2&lt;/code&gt; first looks for &lt;code&gt;{emake, Emake}&lt;/code&gt; in options, then in the current working directory for a file named &lt;code&gt;Emakefile&lt;/code&gt;. If present &lt;code&gt;Emake&lt;/code&gt; should contain elements like this:</source>
          <target state="translated">&lt;code&gt;make:all/0,1&lt;/code&gt; 및 &lt;code&gt;make:files/1,2&lt;/code&gt; 는 먼저 옵션에서 &lt;code&gt;{emake, Emake}&lt;/code&gt; 를 찾은 다음 현재 작업 디렉토리에서 &lt;code&gt;Emakefile&lt;/code&gt; 이라는 파일을 찾습니다 . 존재하는 경우 &lt;code&gt;Emake&lt;/code&gt; 는 다음과 같은 요소를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="270393b4583bd924998e84467ba7373cbe65d1f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make&lt;/code&gt; will verify that the Erlang/OTP system used when building is of the same release as the system being built, and will fail if this is not the case. It is possible, however not recommended, to force the cross compilation even though the wrong Erlang/OTP system is used. This by invoking &lt;code&gt;make&lt;/code&gt; like this: &lt;code&gt;make ERL_XCOMP_FORCE_DIFFERENT_OTP=yes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; 는 빌드 할 때 사용 된 Erlang / OTP 시스템이 빌드중인 시스템과 동일한 릴리스인지 확인하며, 그렇지 않은 경우 실패합니다. 그러나 잘못된 Erlang / OTP 시스템을 사용하더라도 강제로 크로스 컴파일을 수행 할 수 있습니다. &lt;code&gt;make ERL_XCOMP_FORCE_DIFFERENT_OTP=yes&lt;/code&gt; 와 같이 &lt;code&gt;make&lt;/code&gt; 를 호출 하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="840792aa7619bb306720f20c2ce63c67a313843f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;make_config/1&lt;/code&gt; uses the information previously saved by &lt;code&gt;&lt;a href=&quot;#save_scenario-0&quot;&gt;save_scenario/0&lt;/a&gt;&lt;/code&gt; in order to produce an &lt;code&gt;erts_alloc&lt;/code&gt; configuration. At least one scenario have had to be saved. All scenarios previously saved will be used when creating the configuration.</source>
          <target state="translated">&lt;code&gt;make_config/1&lt;/code&gt; 은 &lt;code&gt;erts_alloc&lt;/code&gt; 구성 을 생성하기 위해 &lt;code&gt;&lt;a href=&quot;#save_scenario-0&quot;&gt;save_scenario/0&lt;/a&gt;&lt;/code&gt; 에 의해 이전에 저장된 정보를 사용합니다 . 최소한 하나의 시나리오를 저장해야했습니다. 구성을 만들 때 이전에 저장된 모든 시나리오가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1c2f1daea4e34d2fedd33079cf5e22510ff82244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;malloc&lt;/code&gt; library to use. Only &lt;code&gt;libc&lt;/code&gt; is available. &lt;code&gt;libc&lt;/code&gt; enables the standard &lt;code&gt;libc&lt;/code&gt;&lt;code&gt;malloc&lt;/code&gt; implementation. By default &lt;code&gt;libc&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;malloc&lt;/code&gt; 사용할 malloc 라이브러리. &lt;code&gt;libc&lt;/code&gt; 만 사용할 수 있습니다. &lt;code&gt;libc&lt;/code&gt; 는 표준 &lt;code&gt;libc&lt;/code&gt; &lt;code&gt;malloc&lt;/code&gt; 구현을 가능하게합니다 . 기본적으로 &lt;code&gt;libc&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1ea55247b858a5b4454ad7ae65a30311cf2685ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;managed_agents&lt;/code&gt; is optional.</source>
          <target state="translated">&lt;code&gt;managed_agents&lt;/code&gt; 는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="5a1d0c4b1351ca6835e9615992a7cec1a2c9a3dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manager&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;manager&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="0b88984e46f4e980107b12a96398e4e130cc9eb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map(F, List)&lt;/code&gt; is a function that takes a function &lt;code&gt;F&lt;/code&gt; and a list &lt;code&gt;L&lt;/code&gt; as arguments and returns a new list, obtained by applying &lt;code&gt;F&lt;/code&gt; to each of the elements in &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map(F, List)&lt;/code&gt; 함수 취하는 함수 &lt;code&gt;F&lt;/code&gt; 및 목록 &lt;code&gt;L&lt;/code&gt; 인수로하고 도포하여 얻어진 새로운 목록을 반환 &lt;code&gt;F&lt;/code&gt; 가 있는 요소들의 각각에 &lt;code&gt;L&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="6c156a66d82d82f9cf513b470fba98bac2bda89f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map&lt;/code&gt; takes a function of one argument and a list of terms:</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; 은 하나의 인수와 용어 목록의 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="0d89ff44a50df5ef56c87f8de40fab752c012f38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map_size/1&lt;/code&gt; in the &lt;code&gt;erlang&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;map_size/1&lt;/code&gt; &lt;code&gt;erlang&lt;/code&gt; 모듈 의 map_size / 1</target>
        </trans-unit>
        <trans-unit id="b536a3850f767c913c875a0f2abcf64f84ffa387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapfoldl&lt;/code&gt; simultaneously maps and folds over a list:</source>
          <target state="translated">&lt;code&gt;mapfoldl&lt;/code&gt; 은 동시에 목록을 매핑하고 접습니다.</target>
        </trans-unit>
        <trans-unit id="28e4cb0b9a019365b62b7f7670f762f6307804f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master_node_tables&lt;/code&gt;. Returns a list of all tables with at least one master node.</source>
          <target state="translated">&lt;code&gt;master_node_tables&lt;/code&gt; . 하나 이상의 마스터 노드가있는 모든 테이블 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="320b3e2e69db81bdb1bce46253be76bbb16cbd8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;master_nodes&lt;/code&gt;. Returns the master nodes of a table.</source>
          <target state="translated">&lt;code&gt;master_nodes&lt;/code&gt; . 테이블의 마스터 노드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c7de2c527a233cc022f6da1c0a8ed25204d08b0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max&lt;/code&gt; detail level activates tracing of all calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;max&lt;/code&gt; 세부 사항 레벨은 &lt;code&gt;et:trace_me/4,5&lt;/code&gt; 에 대한 모든 호출 추적을 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="12cbb5e7aef12e76368e070ef17e62260df0b61b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_message_size&lt;/code&gt; - The &lt;code&gt;snmpEngineMaxMessageSize&lt;/code&gt; as defined in SNMP-FRAMEWORK-MIB. &lt;strong&gt;Mandatory&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;max_message_size&lt;/code&gt; - &lt;code&gt;snmpEngineMaxMessageSize&lt;/code&gt; 을 SNMP 프레임 워크-MIB에 정의 된 바와 같다. &lt;strong&gt;필수&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="26fa86b89f3755b53f687395b2ba2fe437b5c4d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_blocks : integer&lt;/code&gt; :: Number of multiblock blocks in instance. Ex. &lt;code&gt;122&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_blocks : integer&lt;/code&gt; :: 인스턴스의 멀티 블록 블록 수입니다. 전의. &lt;code&gt;122&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a20575c861819959a88555afdd99d04e48f52c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_blocks_size : integer&lt;/code&gt; :: Total size of all multiblock blocks in instance. Ex. &lt;code&gt;285296&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_blocks_size : integer&lt;/code&gt; :: 인스턴스의 모든 멀티 블록 블록의 전체 크기입니다. 전의. &lt;code&gt;285296&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f38ae9d9af5aeaf996199c066c1e1c011b303785" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_carriers : integer&lt;/code&gt; :: Number of multiblock carriers in instance. Ex. &lt;code&gt;3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_carriers : integer&lt;/code&gt; :: 인스턴스의 멀티 블록 캐리어 수입니다. 전의. &lt;code&gt;3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac2207eda8c89c866a3cc4bbd0c29488a23573ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mbc_carriers_size : integer&lt;/code&gt; :: Total size of multiblock blocks carriers in instance. Ex. &lt;code&gt;1343488&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mbc_carriers_size : integer&lt;/code&gt; :: 인스턴스에서 다중 블록 블록 반송파의 총 크기입니다. 전의. &lt;code&gt;1343488&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4a957db9d5d62748a8fe5b4b90936c5d5cd85161" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;megaco:conn_info(ConnHandle, protocol_version)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;megaco:conn_info(ConnHandle, protocol_version)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f743dbd63891f34f678b14fd5065b8728a4d1ce3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memory&lt;/code&gt;. Returns the number of words allocated to the table on this node.</source>
          <target state="translated">&lt;code&gt;memory&lt;/code&gt; . 이 노드의 테이블에 할당 된 단어 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ac55a1117d87b92c9643256061c0f84aef319452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memsup&lt;/code&gt; is a process which supervises the memory usage for the system and for individual processes. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix, Windows and VxWorks.</source>
          <target state="translated">&lt;code&gt;memsup&lt;/code&gt; 은 시스템 및 개별 프로세스의 메모리 사용을 감독하는 프로세스입니다. OS_Mon 응용 프로그램의 일부입니다 &lt;code&gt;os_mon(6)&lt;/code&gt; 참조 ) . Unix, Windows 및 VxWorks에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="50ed296aaff830f87c5d0ebf8ad050d27c8c72ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge(FileNames, Output)&lt;/code&gt; is equivalent to &lt;code&gt;merge(FileNames, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;merge(FileNames, Output)&lt;/code&gt; 은 &lt;code&gt;merge(FileNames, Output, [])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9d72ee5a4a1079ff1a0d9263eef7932f68891cc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message : string&lt;/code&gt; :: Message received. Ex. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;message : string&lt;/code&gt; :: 메시지가 수신되었습니다. 전의. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fadf469f5c070a369f6f352483d71d18c16afb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message : string&lt;/code&gt; :: Message sent. Ex. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;message : string&lt;/code&gt; :: 메시지를 보냈습니다. 전의. &lt;code&gt;&quot;{&amp;lt;0.162.0&amp;gt;,ok}&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="601216269fe1b6b0bfa4efef50ce0ac22a21a694" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message/3&lt;/code&gt; returns an informative HTTP 1.1 status string in HTML. Each &lt;code&gt;StatusCode&lt;/code&gt; requires a specific &lt;code&gt;PhraseArgs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;message/3&lt;/code&gt; 는 유익한 HTTP 1.1 상태 문자열을 HTML로 반환합니다. 각 &lt;code&gt;StatusCode&lt;/code&gt; 에는 특정 &lt;code&gt;PhraseArgs&lt;/code&gt; 가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="a1b80be3f4eccb9a5e62f9291cf18851ca762db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mime_decode/1&lt;/code&gt; and &lt;code&gt;mime_decode_to_string/1&lt;/code&gt; strip away illegal characters, while &lt;code&gt;decode/1&lt;/code&gt; and &lt;code&gt;decode_to_string/1&lt;/code&gt; only strip away whitespace characters.</source>
          <target state="translated">&lt;code&gt;mime_decode/1&lt;/code&gt; 및 &lt;code&gt;mime_decode_to_string/1&lt;/code&gt; 은 잘못된 문자를 제거하고, &lt;code&gt;decode/1&lt;/code&gt; 및 &lt;code&gt;decode_to_string/1&lt;/code&gt; 은 공백 문자 만 제거합니다.</target>
        </trans-unit>
        <trans-unit id="f16de9b44c98ce3bac0c21ea5706a65429350ead" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min&lt;/code&gt; detail level deactivates tracing of calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;min&lt;/code&gt; 세부 사항 레벨은 &lt;code&gt;et:trace_me/4,5&lt;/code&gt; 에 대한 호출 추적을 비활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="ba8ce7ebe8ebbc9b5d6407ac6c488b0c9adbeefa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minimum(NetTicktime, PreviousNetTicktime)*1000 div 4&lt;/code&gt; milliseconds.</source>
          <target state="translated">&lt;code&gt;minimum(NetTicktime, PreviousNetTicktime)*1000 div 4&lt;/code&gt; 밀리 초</target>
        </trans-unit>
        <trans-unit id="07be14c2aee6768816e2158303036823a4f263b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minor : integer&lt;/code&gt; :: Minor version. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;minor : integer&lt;/code&gt; :: 부 버전. 전의. &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c8f4454f124c597a614bdb6b3aaa486fa4b5803" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia:create_schema/1&lt;/code&gt; fails if any of the Erlang nodes given as &lt;code&gt;DiscNodes&lt;/code&gt; are not alive, if Mnesia is running on any of the nodes, or if any of the nodes already have a schema. Use &lt;code&gt;mnesia:delete_schema/1&lt;/code&gt; to get rid of old faulty schemas.</source>
          <target state="translated">&lt;code&gt;mnesia:create_schema/1&lt;/code&gt; 얼랭의는 다음과 같이 주어진 노드들이 경우에 실패 &lt;code&gt;DiscNodes&lt;/code&gt; 는 노드 중 하나가 이미 스키마가있는 경우 생존하지 Mnesia는 노드 중 하나에서 실행중인 경우, 또는. 오래된 결함있는 스키마를 제거 하려면 &lt;code&gt;mnesia:delete_schema/1&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="46f82c21c22d4616aecf7c8b1c56ec2a760ab03c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia:create_table/2&lt;/code&gt; writes records into the table &lt;code&gt;schema&lt;/code&gt;. This function, and all other schema manipulation functions, are implemented with the normal transaction management system. This guarantees that schema updates are performed on all nodes in an atomic manner.</source>
          <target state="translated">&lt;code&gt;mnesia:create_table/2&lt;/code&gt; 는 레코드를 테이블 &lt;code&gt;schema&lt;/code&gt; 씁니다 . 이 기능 및 기타 모든 스키마 조작 기능은 일반 트랜잭션 관리 시스템으로 구현됩니다. 이를 통해 모든 노드에서 원자 적 방식으로 스키마 업데이트가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="6674a440da17f45c124781667eb63ea358c2a30b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia:dirty_update_counter/3&lt;/code&gt; is performed as an atomic operation although it is not protected by a transaction.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_update_counter/3&lt;/code&gt; 는 트랜잭션에 의해 보호되지 않지만 원자 연산으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b38f14a2c660b4fcf832b846b6f767d27365af15" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia_down&lt;/code&gt; is returned from all other nodes that hold a disc resident replica of the table.</source>
          <target state="translated">&lt;code&gt;mnesia_down&lt;/code&gt; 은 테이블의 디스크 상주 복제본을 보유하는 다른 모든 노드에서 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="24fe5ec7d38e879b10d409aa6aba87736ab0122e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mnesia_down&lt;/code&gt;. A transaction involves records on a remote node, which became unavailable before the transaction was completed. Records are no longer available elsewhere in the network.</source>
          <target state="translated">&lt;code&gt;mnesia_down&lt;/code&gt; . 트랜잭션에는 원격 노드의 레코드가 포함되는데, 이는 트랜잭션이 완료되기 전에 사용할 수 없게되었습니다. 네트워크의 다른 곳에서는 더 이상 레코드를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="567e8d7f662b9af7f74d10c817224f15a1738818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mntab&lt;/code&gt; is the name of the &lt;code&gt;Mnesia&lt;/code&gt; table to read data from.</source>
          <target state="translated">&lt;code&gt;mntab&lt;/code&gt; 은 데이터를 읽을 &lt;code&gt;Mnesia&lt;/code&gt; 테이블 의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="d466aa59733b9c7afb864608aa50ab84e769dcc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mntab&lt;/code&gt; is the name of the &lt;code&gt;Mnesia&lt;/code&gt; table where the backed up data is to be placed. If the table does not exist, it is created automatically using configurable defaults. For information about configuring this behavior, see &lt;code&gt;Mnesia&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mntab&lt;/code&gt; 은 백업 된 데이터가 배치 될 &lt;code&gt;Mnesia&lt;/code&gt; 테이블 의 이름입니다 . 테이블이 존재하지 않으면 구성 가능한 기본값을 사용하여 자동으로 작성됩니다. 이 동작 구성에 대한 정보는 &lt;code&gt;Mnesia&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9079c9ee03a2fc36036aa585f9863836334d2c47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod&lt;/code&gt; is the name of the module containing the function to be run on the remote node.</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; 는 원격 노드에서 실행될 기능을 포함하는 모듈의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="7fe0cc57f51f2f563f5070318f42a0f60a10fb63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod_esi:deliver/2&lt;/code&gt; shall be used to generate the response to the client and &lt;code&gt;SessionID&lt;/code&gt; is an identifier that shall by used when calling this function, do not assume anything about the datatype. This function may be called several times to chunk the response data. Notice that the first chunk of data sent to the client must at least contain all HTTP header fields that the response will generate. If the first chunk does not contain the &lt;strong&gt;end of HTTP header&lt;/strong&gt;, that is, &lt;code&gt;&quot;\r\n\r\n&quot;,&lt;/code&gt; the server assumes that no HTTP header fields will be generated.</source>
          <target state="translated">&lt;code&gt;mod_esi:deliver/2&lt;/code&gt; 는 클라이언트에 대한 응답을 생성하는 데 사용되며 &lt;code&gt;SessionID&lt;/code&gt; 는이 함수를 호출 할 때 사용해야하는 식별자이며 데이터 유형에 대해 아무 것도 가정하지 않습니다. 이 함수는 응답 데이터를 청크하기 위해 여러 번 호출 될 수 있습니다. 클라이언트에 전송 된 첫 번째 데이터 청크에는 최소한 응답이 생성 할 모든 HTTP 헤더 필드가 포함되어야합니다. 첫 번째 청크 &lt;strong&gt;에 HTTP 헤더&lt;/strong&gt; 의 &lt;strong&gt;끝&lt;/strong&gt; , 즉 &lt;code&gt;&quot;\r\n\r\n&quot;,&lt;/code&gt; 이 없으면 서버는 HTTP 헤더 필드가 생성되지 않는다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="02e694fd8e5b2a45b9d55cc7b7826a876370412c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod_trace&lt;/code&gt; is responsible for handling of TRACE requests. Trace is a new request method in HTTP/1.1. The intended use of trace requests is for testing. The body of the trace response is the request message that the responding web server or proxy received.</source>
          <target state="translated">&lt;code&gt;mod_trace&lt;/code&gt; 는 TRACE 요청을 처리합니다. 추적은 HTTP / 1.1의 새로운 요청 방법입니다. 추적 요청의 용도는 테스트 용입니다. 추적 응답의 본문은 응답 웹 서버 또는 프록시가 수신 한 요청 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="cf62704361b32700ceed8b9c8103394aec1e8938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="2bc1b5285a427c281494717339716191820f816f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; - All modules &lt;strong&gt;introduced&lt;/strong&gt; by this application. &lt;code&gt;systools&lt;/code&gt; uses this list when generating boot scripts and tar files. A module must be defined in only one application. Defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; - 이 응용 프로그램에서 &lt;strong&gt;소개&lt;/strong&gt; 된 모든 모듈 . &lt;code&gt;systools&lt;/code&gt; 는 부팅 스크립트 및 tar 파일을 생성 할 때이 목록을 사용합니다. 모듈은 하나의 응용 프로그램에서만 정의해야합니다. 기본값은 &lt;code&gt;[]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="174a7f88b7a6eb2b8bf56c05ce0a6e77c48d7c50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; are to be a list with one element &lt;code&gt;[Module]&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the name of the callback module, if the child process is a supervisor, gen_server, gen_statem. If the child process is a gen_event, the value shall be &lt;code&gt;dynamic&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; 하나 개의 요소리스트하여야한다 &lt;code&gt;[Module]&lt;/code&gt; , &lt;code&gt;Module&lt;/code&gt; 자식 프로세스가 감독자 gen_server, gen_statem 경우 콜백 모듈의 이름이다. 자식 프로세스가 gen_event 인 경우 값은 &lt;code&gt;dynamic&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="da2a0d5417825c1c00e64aa8d17a85f6fc76ae13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modules&lt;/code&gt; is used by the release handler during code replacement to determine which processes are using a certain module. As a rule of thumb, if the child process is a &lt;code&gt;supervisor&lt;/code&gt;, &lt;code&gt;gen_server&lt;/code&gt; or, &lt;code&gt;gen_statem&lt;/code&gt;, this is to be a list with one element &lt;code&gt;[Module]&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the callback module. If the child process is an event manager (&lt;code&gt;gen_event&lt;/code&gt;) with a dynamic set of callback modules, value &lt;code&gt;dynamic&lt;/code&gt; must be used. For more information about release handling, see &lt;code&gt;Release Handling&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; 은 특정 모듈을 사용하는 프로세스를 판별하기 위해 코드 교체 중에 릴리스 핸들러에서 사용됩니다. 일반적으로 하위 프로세스가 &lt;code&gt;supervisor&lt;/code&gt; , &lt;code&gt;gen_server&lt;/code&gt; 또는 &lt;code&gt;gen_statem&lt;/code&gt; 인 경우 이는 하나의 요소 &lt;code&gt;[Module]&lt;/code&gt; 이있는 목록이어야합니다 . 여기서 &lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈입니다. 하위 프로세스가 동적 콜백 모듈 세트 가있는 이벤트 관리자 ( &lt;code&gt;gen_event&lt;/code&gt; ) 인 경우 &lt;code&gt;dynamic&lt;/code&gt; 값을 사용해야합니다. 릴리스 처리에 대한 자세한 내용은 OTP 디자인 원칙의 &lt;code&gt;Release Handling&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4876f5e9a1f661a63193eee3608f5279e00e9f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;month/1&lt;/code&gt; converts the month &lt;code&gt;NthMonth&lt;/code&gt; as an integer (1-12) to an abbreviated string, that is:</source>
          <target state="translated">&lt;code&gt;month/1&lt;/code&gt; 은 월 &lt;code&gt;NthMonth&lt;/code&gt; 를 정수 (1-12)로 축약 된 문자열 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="372b1faae3b4202378e772ec2ba948e196923700" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msacc&lt;/code&gt; allows the user to get a view of what the Erlang Run-Time system is spending its time doing. Has a very low overhead, which makes it useful to run in heavily loaded systems to get some idea of where to start doing more granular profiling.</source>
          <target state="translated">&lt;code&gt;msacc&lt;/code&gt; 를 사용하면 Erlang 런타임 시스템이 수행하는 작업을 볼 수 있습니다. 오버 헤드가 매우 낮아서로드가 많은 시스템에서 실행하여보다 세부적인 프로파일 링을 시작할 위치를 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6a46ad591043ab4ae0fea0e7f2898189d63d07a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg-&amp;gt;to&lt;/code&gt; and &lt;code&gt;msg-&amp;gt;from&lt;/code&gt; contain the pids of the sender and recipient of the link or unlink.</source>
          <target state="translated">&lt;code&gt;msg-&amp;gt;to&lt;/code&gt; 및 &lt;code&gt;msg-&amp;gt;from&lt;/code&gt; 은 발신자 및 수신자의 pid 를 포함하거나 링크를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="4cf8ae8a05e8bb032f0bf6cf2d8b798baa20d8c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is a pointer to an &lt;code&gt;erlang_msg&lt;/code&gt; structure and contains information on the message received.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 &lt;code&gt;erlang_msg&lt;/code&gt; 구조에 대한 포인터 이며 수신 된 메시지에 대한 정보를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="22c0db150f06272113cf3e563d8f9e1095dd87d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is invalid.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 가 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1147a6079cbd57aaa4dfbf2532b4f6db49e2c8eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is structure of type &lt;code&gt;erlang_msg&lt;/code&gt; and contains information on the message received. For a description of the &lt;code&gt;erlang_msg&lt;/code&gt; format, see &lt;code&gt;&lt;a href=&quot;#ei_receive_msg&quot;&gt;ei_receive_msg&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 &lt;code&gt;erlang_msg&lt;/code&gt; 유형의 구조이며 수신 된 메시지에 대한 정보를 포함합니다. 의 설명은 &lt;code&gt;erlang_msg&lt;/code&gt; 의 형식을 참조 &lt;code&gt;&lt;a href=&quot;#ei_receive_msg&quot;&gt;ei_receive_msg&lt;/a&gt;&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="20165fce6029f6b12357cbf628fa9de97c536db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt; is the Erlang term to be sent.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 는 전송 될 Erlang 용어입니다.</target>
        </trans-unit>
        <trans-unit id="bc5255648412b02a4f9b38e4d992a126891957fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msgtype&lt;/code&gt; identifies the type of message, and is one of the following:</source>
          <target state="translated">&lt;code&gt;msgtype&lt;/code&gt; 은 메시지 유형을 식별하며 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="dbfc40aa62adc558872dc112f3dcd085f1f3c0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to destroy.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 파괴 할 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="6d81444be058267cf4efbf703c68af2992a43a56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to lock.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 잠글 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="5936c828bb2d79c6205b045b38c650dc9143623b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to try to lock.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 잠금을 시도하는 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="3eb0e6be023472e5e5f0684561604b16264eeed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to unlock.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 잠금 해제 할 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="25674df362fe7127698044f736e6a5bccb2c4c1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mtx&lt;/code&gt; is a pointer to an initialized mutex.</source>
          <target state="translated">&lt;code&gt;mtx&lt;/code&gt; 는 초기화 된 뮤텍스에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="3c5b24424f7a846897e6dcfd9abec76c096523c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multi_lookup&lt;/code&gt; extracts all &lt;code&gt;{Key,Value}&lt;/code&gt; tuples from an &lt;code&gt;ETSTable&lt;/code&gt; and returns &lt;strong&gt;all&lt;/strong&gt;&lt;code&gt;Values&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt; in a list.</source>
          <target state="translated">&lt;code&gt;multi_lookup&lt;/code&gt; 는 모든 추출 &lt;code&gt;{Key,Value}&lt;/code&gt; 에서 튜플 &lt;code&gt;ETSTable&lt;/code&gt; 을 반환합니다 &lt;strong&gt;모든 &lt;/strong&gt; &lt;code&gt;Values&lt;/code&gt; 과 관련된 &lt;code&gt;Key&lt;/code&gt; 목록에 있습니다.</target>
        </trans-unit>
        <trans-unit id="d49b62334dd0db4dc2fedcbf91c9bb076556cc52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n1&lt;/code&gt;, &lt;code&gt;n2&lt;/code&gt;, and &lt;code&gt;n3&lt;/code&gt; can be seen as one big number &lt;code&gt;n1*2^64+n2*2^32+n3&lt;/code&gt;, which is to be chosen uniquely for each reference created for a given C-node.</source>
          <target state="translated">&lt;code&gt;n1&lt;/code&gt; , &lt;code&gt;n2&lt;/code&gt; 및 &lt;code&gt;n3&lt;/code&gt; 은 하나의 큰 숫자 &lt;code&gt;n1*2^64+n2*2^32+n3&lt;/code&gt; 으로 볼 수 있으며 , 이는 주어진 C- 노드에 대해 작성된 각 참조에 대해 고유하게 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="2fd292a665c7c30f1d00a7e90ee7c62733e8db29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is a value to be converted to an Erlang integer.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 은 Erlang 정수로 변환 할 값입니다.</target>
        </trans-unit>
        <trans-unit id="d099369481ceff3dd7587926a74ba6b8dc5743a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is a value to be converted to an Erlang unsigned integer.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 은 Erlang 부호없는 정수로 변환 될 값입니다.</target>
        </trans-unit>
        <trans-unit id="0f5ea2f8a335ce2ed24182b2525ae37a7cb70475" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n_fragments&lt;/code&gt; regulates how many fragments that the table currently has. This property can explicitly be set at table creation and later be changed with &lt;code&gt;{add_frag, NodesOrDist}&lt;/code&gt; or &lt;code&gt;del_frag&lt;/code&gt;. &lt;code&gt;n_fragments&lt;/code&gt; defaults to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n_fragments&lt;/code&gt; 는 현재 테이블에있는 조각 수를 조정합니다. 이 특성은 테이블 작성시 명시 적으로 설정 한 후 나중에 &lt;code&gt;{add_frag, NodesOrDist}&lt;/code&gt; 또는 &lt;code&gt;del_frag&lt;/code&gt; 로 변경할 수 있습니다. &lt;code&gt;n_fragments&lt;/code&gt; 의 기본값은 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1c5a457d41e6ae7e94e7e3d8c8a26bc2b3e9197c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n_objects&lt;/code&gt; specifies how many results are to be returned in each chunk to QLC.</source>
          <target state="translated">&lt;code&gt;n_objects&lt;/code&gt; 는 각 청크에서 QLC로 리턴되는 결과 수를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="3c6a49a98ce970577a69add0b2ce5dd0761ad6df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name : string&lt;/code&gt; :: Registered name. Ex. &lt;code&gt;&quot;logger&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name : string&lt;/code&gt; :: 등록 된 이름입니다. 전의. &lt;code&gt;&quot;logger&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f891725c21b2707440243c2bc9084bb45473388" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created condition variable. It is used to identify the condition variable in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 조건 변수를 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 조건 변수를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9005585938ef363159ea0e38ae100ad8b0083ce7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created key. It is used to identify the key in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 키를 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 키를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fee59da4861c233d62875099989d331d001a77da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created mutex. It is used to identify the mutex in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 뮤텍스를 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 뮤텍스를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0bc55479881a50f624c0787926ae8ec6c27e0224" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created rwlock. It is used to identify the rwlock in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 생성 된 rwlock을 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 rwlock을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="91885e35be8ed3cdfd57070017e0699b72001e5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is a string identifying the created thread options. It is used to identify the thread options in planned future debug functionality.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 작성된 스레드 옵션을 식별하는 문자열입니다. 계획된 향후 디버그 기능에서 스레드 옵션을 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4e31c0e3a151e7e9fd2582a1217ca703e8c6e0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name of an Erlang variable.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 Erlang 변수의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="8ba02d1316dffaa7b68ab37e7cabdfac2a3c0bb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name that is to be looked up in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;global&lt;/code&gt; 에서 조회 할 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="9d5f477a2f79558137ade0d9eae972259ebd80ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name to register in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;global&lt;/code&gt; 에 등록 할 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="c4b71ebb0fda30fdf6c7946ed1028e59dded179e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; is the name to unregister from &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 &lt;code&gt;global&lt;/code&gt; 에서 등록 취소 할 이름 입니다.</target>
        </trans-unit>
        <trans-unit id="d79ecca34f6c2aacf2c6870aed8fce76455f8934" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; specifies a name for the variable.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 은 변수의 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="769cceefe1f47133ec711e95ce5be764e5817ea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;native&lt;/code&gt; (use system calls)</source>
          <target state="translated">&lt;code&gt;native&lt;/code&gt; (시스템 호출 사용)</target>
        </trans-unit>
        <trans-unit id="c868fc11902a21e9495c0a11e40b16c7d9e8fd16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ncurses&lt;/code&gt;, &lt;code&gt;termcap&lt;/code&gt;, or &lt;code&gt;termlib&lt;/code&gt; -- The development headers and libraries are needed, often known as &lt;code&gt;ncurses-devel&lt;/code&gt;. Use &lt;code&gt;--without-termcap&lt;/code&gt; to build without any of these libraries. Note that in this case only the old shell (without any line editing) can be used.</source>
          <target state="translated">&lt;code&gt;ncurses&lt;/code&gt; , &lt;code&gt;termcap&lt;/code&gt; 또는 &lt;code&gt;termlib&lt;/code&gt; &amp;ndash; 종종 &lt;code&gt;ncurses-devel&lt;/code&gt; 이라고하는 개발 헤더와 라이브러리가 필요합니다 . 이러한 라이브러리없이 빌드 하려면 &lt;code&gt;--without-termcap&lt;/code&gt; 을 사용하십시오 . 이 경우 이전 셸 (행 편집없이) 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cb421db8786573c2d90d153eed83c0fd7c21add" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;need : integer&lt;/code&gt; :: Heap need. Ex. &lt;code&gt;2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;need : integer&lt;/code&gt; :: 힙이 필요합니다. 전의. &lt;code&gt;2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="04f4489712d3c89f2b4be69a6634b8131e4bd2d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nelem&lt;/code&gt; indicates the number of elements stored in the registry. It includes objects that are deleted but not purged.</source>
          <target state="translated">&lt;code&gt;nelem&lt;/code&gt; 은 레지스트리에 저장된 요소 수를 나타냅니다. 삭제되었지만 제거되지 않은 개체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="e7b6371a40fb9455fad414b3df774c818c7f3d0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nested_transaction&lt;/code&gt;. Nested transactions are not allowed in this context.</source>
          <target state="translated">&lt;code&gt;nested_transaction&lt;/code&gt; . 이 컨텍스트에서는 중첩 트랜잭션이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1fc2b6c244fff1fe70ace444e757507dced6c537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_adm&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;net_adm&lt;/code&gt; 커널의 net_adm 매뉴얼 페이지</target>
        </trans-unit>
        <trans-unit id="1d5426b369889eee7c87754160b79b56b7c18acd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_kernel&lt;/code&gt; initiated the change of &lt;code&gt;net_ticktime&lt;/code&gt; to &lt;code&gt;NetTicktime&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; 이 &lt;code&gt;net_ticktime&lt;/code&gt; 에서 &lt;code&gt;NetTicktime&lt;/code&gt; 초로 변경을 시작했습니다 .</target>
        </trans-unit>
        <trans-unit id="cdcc9a34292ef88c7a62f0501732e3ae263fd743" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_kernel&lt;/code&gt; is currently changing &lt;code&gt;net_ticktime&lt;/code&gt; to &lt;code&gt;NetTicktime&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; 이 현재 &lt;code&gt;net_ticktime&lt;/code&gt; 을 &lt;code&gt;NetTicktime&lt;/code&gt; 초로 변경 중 입니다.</target>
        </trans-unit>
        <trans-unit id="7fa27e0f8d4084ef0de130edbef970fc568ef473" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_ticktime&lt;/code&gt; already has the value of &lt;code&gt;NetTicktime&lt;/code&gt; and is left unchanged.</source>
          <target state="translated">&lt;code&gt;net_ticktime&lt;/code&gt; 의 값은 이미 &lt;code&gt;NetTicktime&lt;/code&gt; 이며 변경되지 않은 상태로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="760639fc9617306dbe2ce1727ab88ed2772d3eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;net_ticktime&lt;/code&gt; is &lt;code&gt;NetTicktime&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;net_ticktime&lt;/code&gt; 은 &lt;code&gt;NetTicktime&lt;/code&gt; 초입니다.</target>
        </trans-unit>
        <trans-unit id="4194f1bdbdb59175d9e98ce7bce52e4d06cc5f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newsize&lt;/code&gt; is the new size to make the registry. The number is increased to the nearest larger prime number.</source>
          <target state="translated">&lt;code&gt;newsize&lt;/code&gt; 는 레지스트리를 만드는 새로운 크기입니다. 숫자가 가장 큰 소수로 증가합니다.</target>
        </trans-unit>
        <trans-unit id="2d9ac12bfeb85194d6703f13ff62908d7dff3137" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nlist/1&lt;/code&gt; implies the current remote directory of the user.</source>
          <target state="translated">&lt;code&gt;nlist/1&lt;/code&gt; 은 사용자의 현재 원격 디렉토리를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="996bd783b3b0be1ac2fd7f1d1f7864a698f318a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noAccess | noCreation | inconsistentValue | resourceUnavailable | inconsistentName | genErr&lt;/code&gt;(SNMPv2)</source>
          <target state="translated">&lt;code&gt;noAccess | noCreation | inconsistentValue | resourceUnavailable | inconsistentName | genErr&lt;/code&gt; (SNMPv2)</target>
        </trans-unit>
        <trans-unit id="c14f29fb4ebe8bd8a2dcabf138abc103e734c572" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_analyzed_modules&lt;/code&gt;, number of analyzed modules;</source>
          <target state="translated">&lt;code&gt;no_analyzed_modules&lt;/code&gt; , 분석 된 모듈 수;</target>
        </trans-unit>
        <trans-unit id="36919705ab2ed85e787da97c4e019137e9726097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_analyzed_modules&lt;/code&gt;, total number of &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;no_analyzed_modules&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; 총 모듈 수 ;</target>
        </trans-unit>
        <trans-unit id="247daf07bfeb0cf313c1ab73c118bdd56a4373e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_applications&lt;/code&gt;, number of applications;</source>
          <target state="translated">&lt;code&gt;no_applications&lt;/code&gt; , 애플리케이션 수;</target>
        </trans-unit>
        <trans-unit id="855d76897472ff9db8a9ed317585bf67aa23b49b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_applications&lt;/code&gt;, total number of applications (of all releases);</source>
          <target state="translated">&lt;code&gt;no_applications&lt;/code&gt; , 총 릴리스 수 (모든 릴리스);</target>
        </trans-unit>
        <trans-unit id="4f0e51a4da187fedf95a7f531d9dfa0a174eb37d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), number of calls of the application's modules, regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 응용 프로그램 모듈의 호출 수, 다른 함수의 한 함수 호출 인스턴스를 별도의 호출로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="370301c631577eec18b5ccc7eaaa194046fdf349" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), number of calls of the release's modules, regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 릴리스 모듈의 호출 수, 다른 함수의 한 함수 호출 인스턴스를 별도의 호출로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="c93593df8ed4fcf1f94cc16ef3853f5868e322df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), number of calls, regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 호출 횟수, 한 줄의 함수 호출이 다른 라인에있는 별도의 호출 인 경우;</target>
        </trans-unit>
        <trans-unit id="1393436244f6630af5c0e5ff63ac5783ce91a856" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt; (*), total number of calls (in all modules), regarding instances of one function call in different lines as separate calls;</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; (*), 한 줄의 함수 호출 인스턴스를 별도의 호출로 다른 회선에 관련한 총 호출 수 (모든 모듈);</target>
        </trans-unit>
        <trans-unit id="d2d90de1c8b1a6e7443e04db5bab61e57e304f72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_calls&lt;/code&gt;. The sum of the number of resolved and unresolved calls:</source>
          <target state="translated">&lt;code&gt;no_calls&lt;/code&gt; . 해결 된 통화와 해결되지 않은 통화 수의 합 :</target>
        </trans-unit>
        <trans-unit id="af1e22dd263bf80de4de1df5f3df4fd3955182ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_conn&lt;/code&gt; - The connection is down to the node where the process is running. &lt;code&gt;Info={}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no_conn&lt;/code&gt; - 프로세스가 실행중인 노드로 연결이 끊어졌습니다. &lt;code&gt;Info={}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8c814217a417ac2d857d76edca4a5d41c91a647d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_dot_erlang.boot&lt;/code&gt; - Loads the code for and starts the applications Kernel and STDLIB. Skips loading the file &lt;code&gt;.erlang&lt;/code&gt;. Useful for scripts and other tools that are to behave the same irrespective of user preferences.</source>
          <target state="translated">&lt;code&gt;no_dot_erlang.boot&lt;/code&gt; - 응용 프로그램 커널 및 STDLIB에 대한 코드를로드하고 시작합니다. &lt;code&gt;.erlang&lt;/code&gt; 파일로드를 건너 뜁니다 . 사용자 기본 설정에 관계없이 동일하게 동작하는 스크립트 및 기타 도구에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f8159cf71197decb91bba2603f85ca3c5311257c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_exists&lt;/code&gt;. Tried to perform operation on non-existing (not-alive) item.</source>
          <target state="translated">&lt;code&gt;no_exists&lt;/code&gt; . 존재하지 않는 (생존하지 않는) 항목에서 작업을 수행하려고했습니다.</target>
        </trans-unit>
        <trans-unit id="82885b597712907220180d0456fef06dc2e5ad77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), number of local calls, resolved external calls and unresolved calls of the application's modules;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 로컬 호출 수, 확인 된 외부 호출 및 응용 프로그램 모듈의 확인되지 않은 호출;</target>
        </trans-unit>
        <trans-unit id="abad1ab806a090043a7399d16fc637d9d45bfa9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), number of local calls, resolved external calls and unresolved calls of the release's modules;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 로컬 호출 수, 확인 된 외부 호출 및 릴리스 모듈의 확인되지 않은 호출;</target>
        </trans-unit>
        <trans-unit id="927ea8a6ac92101eaeee49fc7759faa70479b07e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), number of local calls, resolved external calls and unresolved calls;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 로컬 전화 수, 확인 된 외부 전화 및 확인되지 않은 전화;</target>
        </trans-unit>
        <trans-unit id="dddc264cec4aa69635153ca10c089b48a0f915cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt; (*), total number of &lt;code&gt;&lt;a href=&quot;#local_call&quot;&gt;local calls&lt;/a&gt;&lt;/code&gt;, resolved &lt;code&gt;&lt;a href=&quot;#external_call&quot;&gt;external calls&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#unresolved_call&quot;&gt;unresolved calls&lt;/a&gt;&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; (*), 총 &lt;code&gt;&lt;a href=&quot;#local_call&quot;&gt;local calls&lt;/a&gt;&lt;/code&gt; , 확인 된 &lt;code&gt;&lt;a href=&quot;#external_call&quot;&gt;external calls&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#unresolved_call&quot;&gt;unresolved calls&lt;/a&gt;&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="3f93645c3a2ad16c4c220fb0f5903bb022c20d75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_function_calls&lt;/code&gt;. The sum of the number of local calls, resolved external calls and unresolved calls:</source>
          <target state="translated">&lt;code&gt;no_function_calls&lt;/code&gt; . 로컬 통화 수, 해결 된 외부 통화 및 해결되지 않은 통화 수의 합 :</target>
        </trans-unit>
        <trans-unit id="5d54535e458072031c144f3342d1a1d99b65bc88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), number of local and exported functions of the application's modules;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 응용 프로그램 모듈의 로컬 및 내 보낸 기능 수;</target>
        </trans-unit>
        <trans-unit id="6d9dd2a7d5654afbf1777e3b26dacb4c6829409f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), number of local and exported functions of the release's modules;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 릴리스 모듈의 로컬 및 내 보낸 기능 수;</target>
        </trans-unit>
        <trans-unit id="edef508993f68f5059132aaa9faba0b60b516a90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;no_functions&lt;/code&gt; (*), number of local and exported functions;</source>
          <target state="translated">&lt;code&gt;no_functions&lt;/code&gt; (*), 로컬 및 내 보낸 함수 수;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
