<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="ac9629aacf5a541205c4ec779ff11edb1576409e" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;context&lt;/code&gt; is specified, the default context, &lt;code&gt;&quot;&quot;&lt;/code&gt;, is used.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; 가 지정 되지 않으면 기본 컨텍스트 &lt;code&gt;&quot;&quot;&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ed97555002c32aa9440a97e73ca69137e2f1b0fe" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;epmd&lt;/code&gt; (TCP port mapper daemon) is used, also command-line option &lt;code&gt;-no_epmd&lt;/code&gt; is to be specified, which makes Erlang skip the &lt;code&gt;epmd&lt;/code&gt; startup, both as an OS process and as an Erlang ditto.</source>
          <target state="translated">&lt;code&gt;epmd&lt;/code&gt; (TCP 포트 매퍼 데몬)를 사용 하지 않으면 명령 행 옵션 &lt;code&gt;-no_epmd&lt;/code&gt; 도 지정해야하므로 Erlang 은 OS 프로세스 및 Erlang ditto로 &lt;code&gt;epmd&lt;/code&gt; 시작을 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="a8006619350a5226e5dc4b2683c9eea3a8bdbda4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;extended_info&lt;/code&gt; is present in the file and &lt;code&gt;{verify,true}&lt;/code&gt; is specified, the number of objects written is compared to the size of the original table when the dump was started. This can make verification fail if the table was &lt;code&gt;public&lt;/code&gt; and objects were added or removed while the table was dumped to file. To avoid this problem, either do not verify files dumped while updated simultaneously or use option &lt;code&gt;{extended_info, [object_count]}&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt;, which extends the information in the file with the number of objects written.</source>
          <target state="translated">파일에 &lt;code&gt;extended_info&lt;/code&gt; 가 없고 &lt;code&gt;{verify,true}&lt;/code&gt; 가 지정된 경우, 작성된 오브젝트 수는 덤프가 시작될 때 원래 테이블의 크기와 비교됩니다. 테이블이 &lt;code&gt;public&lt;/code&gt; 되고 테이블이 파일로 덤프되는 동안 오브젝트가 추가 또는 제거 된 경우 확인에 실패 할 수 있습니다 . 이 문제점을 방지하려면 동시에 업데이트되는 동안 덤프 된 파일을 확인하지 않거나 &lt;code&gt;{extended_info, [object_count]}&lt;/code&gt; 옵션 을 &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt; 으로 사용 하십시오. 이렇게하면 파일의 정보가 작성된 오브젝트 수로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="8a45ca5e05cc70fae2783d55cbff20b1f8725403" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;name&lt;/code&gt; is specified (or if it is &lt;code&gt;&quot;&quot;&lt;/code&gt;), the notification is sent to all management targets.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이 지정 되지 않은 경우 (또는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 이면 ) 모든 관리 대상으로 알림이 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="32886c8cd8eda5943ea7814b65ec8cd639317821" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;tracer&lt;/code&gt; is specified, the calling process receives all the trace messages.</source>
          <target state="translated">&lt;code&gt;tracer&lt;/code&gt; 이 지정 되지 않으면 호출 프로세스는 모든 추적 메시지를 수신합니다.</target>
        </trans-unit>
        <trans-unit id="8acb8279a4661a4f996c3af79ec9be1db1d63648" translate="yes" xml:space="preserve">
          <source>If no BEAM file contains debug information, then a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">BEAM 파일에 디버그 정보가 없으면 튜플 목록이 반환됩니다. 각 튜플의 첫 번째 요소는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="44e5f3c4af2c18aaf89a34918cf838e205862cec" translate="yes" xml:space="preserve">
          <source>If no BOM is found, the function returns &lt;code&gt;{latin1,0}&lt;/code&gt;.</source>
          <target state="translated">BOM이 없으면 함수는 &lt;code&gt;{latin1,0}&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="e07f0cc9e55f8b5cf0585baaee7cd300085bb99c" translate="yes" xml:space="preserve">
          <source>If no CPU topology is available when flag &lt;code&gt;+sbt&lt;/code&gt; is processed and &lt;code&gt;BindType&lt;/code&gt; is any other type than &lt;code&gt;u&lt;/code&gt;, the runtime system fails to start. CPU topology can be defined using flag &lt;code&gt;&lt;a href=&quot;#+sct&quot;&gt;+sct&lt;/a&gt;&lt;/code&gt;. Notice that flag &lt;code&gt;+sct&lt;/code&gt; can have to be passed before flag &lt;code&gt;+sbt&lt;/code&gt; on the command line (if no CPU topology has been automatically detected).</source>
          <target state="translated">플래그 &lt;code&gt;+sbt&lt;/code&gt; 가 처리되고 &lt;code&gt;BindType&lt;/code&gt; 이 &lt;code&gt;u&lt;/code&gt; 이외의 유형일 때 사용 가능한 CPU 토폴로지가 없으면 런타임 시스템이 시작되지 않습니다. CPU 토폴로지는 flag &lt;code&gt;&lt;a href=&quot;#+sct&quot;&gt;+sct&lt;/a&gt;&lt;/code&gt; 를 사용하여 정의 할 수 있습니다 . CPU 토폴로지가 자동으로 감지되지 않은 경우 명령 줄에서 플래그 &lt;code&gt;+sbt&lt;/code&gt; 전에 플래그 &lt;code&gt;+sct&lt;/code&gt; 를 전달해야 합니다.</target>
        </trans-unit>
        <trans-unit id="dccd7290f5c52ab540d1d1066d43a3aaf228c19a" translate="yes" xml:space="preserve">
          <source>If no argument is provided, Debugger starts in global mode.</source>
          <target state="translated">인수가 제공되지 않으면 디버거가 전역 모드에서 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="1fe7b07f514dd69941a31088b490f38f80374e4c" translate="yes" xml:space="preserve">
          <source>If no boot script is specified, it defaults to &lt;code&gt;ROOT/bin/start&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#default_boot_scripts&quot;&gt;Default Boot Scripts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">부팅 스크립트가 지정되지 않은 경우 기본값은 &lt;code&gt;ROOT/bin/start&lt;/code&gt; 입니다 ( &lt;code&gt;&lt;a href=&quot;#default_boot_scripts&quot;&gt;Default Boot Scripts&lt;/a&gt;&lt;/code&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="b11dd24d2508db0b969937d6f16c64e7e9a757da" translate="yes" xml:space="preserve">
          <source>If no command-line flag is entered, the &lt;code&gt;Mnesia&lt;/code&gt; directory becomes the current working directory on the node where the Erlang shell is started.</source>
          <target state="translated">명령 행 플래그를 입력하지 않으면 &lt;code&gt;Mnesia&lt;/code&gt; 디렉토리가 Erlang 쉘이 시작된 노드의 현재 작업 디렉토리가됩니다.</target>
        </trans-unit>
        <trans-unit id="19b61bf39702f61088362c4f3caf5fec39790a79" translate="yes" xml:space="preserve">
          <source>If no configuration exists for a server, use &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; instead, and specify all necessary options in the &lt;code&gt;Options&lt;/code&gt; parameter.</source>
          <target state="translated">서버에 대한 구성이없는 경우 &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; 을 대신 사용하고 &lt;code&gt;Options&lt;/code&gt; 매개 변수 에 필요한 모든 옵션을 지정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a0a2525519fce3b84f0628d21fec24d0d54a30b8" translate="yes" xml:space="preserve">
          <source>If no configuration file is specified with command &lt;code&gt;ct_run&lt;/code&gt;, a warning is displayed. If &lt;code&gt;Common Test&lt;/code&gt; has been run from the same directory earlier, the same configuration file(s) are used again. If &lt;code&gt;Common Test&lt;/code&gt; has not been run from this directory before, no configuration files are available.</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; 명령으로 구성 파일을 지정하지 않으면 경고가 표시됩니다. 경우 &lt;code&gt;Common Test&lt;/code&gt; 같은 디렉토리 이전에서 실행 된 같은 구성 파일 (들)을 다시 사용된다. 이전에이 디렉토리에서 &lt;code&gt;Common Test&lt;/code&gt; 를 실행하지 않은 경우 사용 가능한 구성 파일이 없습니다.</target>
        </trans-unit>
        <trans-unit id="905acdf151b0fff2093942d03e8fda7ba4d6ef97" translate="yes" xml:space="preserve">
          <source>If no connection reference is provided, a connection is set up, and the new connection is returned. An SSH channel process is started to handle the communication with the SFTP server. The returned &lt;code&gt;pid&lt;/code&gt; for this process is to be used as input to all other API functions in this module.</source>
          <target state="translated">연결 참조가 제공되지 않으면 연결이 설정되고 새 연결이 반환됩니다. SFTP 서버와의 통신을 처리하기 위해 SSH 채널 프로세스가 시작되었습니다. 이 프로세스에 대해 리턴 된 &lt;code&gt;pid&lt;/code&gt; 는이 모듈의 다른 모든 API 함수에 대한 입력으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a012950e61dc5d03cdb78960de0564c38b5541f9" translate="yes" xml:space="preserve">
          <source>If no encoder module is given, the default is used (which is pretty).</source>
          <target state="translated">엔코더 모듈이 제공되지 않으면 기본값이 사용됩니다 (꽤).</target>
        </trans-unit>
        <trans-unit id="9348a769518853e44d89b99ac342c57ff1b5e15b" translate="yes" xml:space="preserve">
          <source>If no error occurs, the second phase is performed. This phase calls the user defined &lt;code&gt;set&lt;/code&gt; function for all variables.</source>
          <target state="translated">오류가 발생하지 않으면 두 번째 단계가 수행됩니다. 이 단계 에서는 모든 변수에 대해 사용자 정의 &lt;code&gt;set&lt;/code&gt; 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="3b135a2849366f4513f0e061b53465a7e3a779a4" translate="yes" xml:space="preserve">
          <source>If no exports are listed by an &lt;code&gt;export&lt;/code&gt; option (see &lt;code&gt;merge_sources/3&lt;/code&gt; for details), then if &lt;code&gt;Name&lt;/code&gt; is also the name of one of the input modules, that module will be exported; otherwise, the first listed module will be exported. Cf. the examples under &lt;code&gt;merge/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 옵션 으로 내보내기 가 나열되지 않은 경우 (자세한 내용은 &lt;code&gt;merge_sources/3&lt;/code&gt; 참조) &lt;code&gt;Name&lt;/code&gt; 이 입력 모듈 중 하나의 이름 인 경우 해당 모듈이 내보내집니다. 그렇지 않으면 첫 번째로 나열된 모듈이 내보내집니다. Cf. 아래의 예는 &lt;code&gt;merge/3&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="186696412f510e31ad8ed3a38fb86c31cd6ca5ca" translate="yes" xml:space="preserve">
          <source>If no extra options are specified with flag/option &lt;code&gt;step&lt;/code&gt;, breakpoints are set automatically on the test cases that are to be executed by &lt;code&gt;Common Test&lt;/code&gt;, and those functions only. If step option &lt;code&gt;config&lt;/code&gt; is specified, breakpoints are also initially set on the configuration functions in the suite, that is, &lt;code&gt;init_per_suite/1&lt;/code&gt;, &lt;code&gt;end_per_suite/1&lt;/code&gt;, &lt;code&gt;init_per_group/2&lt;/code&gt;, &lt;code&gt;end_per_group/2&lt;/code&gt;, &lt;code&gt;init_per_testcase/2&lt;/code&gt; and &lt;code&gt;end_per_testcase/2&lt;/code&gt;.</source>
          <target state="translated">flag / option &lt;code&gt;step&lt;/code&gt; 으로 추가 옵션을 지정하지 않으면 &lt;code&gt;Common Test&lt;/code&gt; 가 실행하는 테스트 케이스 및 해당 기능에서만 브레이크 포인트가 자동으로 설정됩니다 . 단계 옵션 &lt;code&gt;config&lt;/code&gt; 가 지정되면 중단 점도 스위트의 구성 기능, 즉 &lt;code&gt;init_per_suite/1&lt;/code&gt; , &lt;code&gt;end_per_suite/1&lt;/code&gt; , &lt;code&gt;init_per_group/2&lt;/code&gt; , &lt;code&gt;end_per_group/2&lt;/code&gt; , &lt;code&gt;init_per_testcase/2&lt;/code&gt; 및 &lt;code&gt;end_per_testcase/2&lt;/code&gt; 에 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="49e1803a2624ccbd4e21f90db6095850fb9331a7" translate="yes" xml:space="preserve">
          <source>If no formatter information is specified for a handler, Logger uses &lt;code&gt;logger_formatter&lt;/code&gt; as default. See the &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter(3)&lt;/a&gt;&lt;/code&gt; manual page for more information about this module.</source>
          <target state="translated">핸들러에 지정된 포맷터 정보가 없으면 로거는 기본값으로 &lt;code&gt;logger_formatter&lt;/code&gt; 를 사용합니다 . 참고 항목 &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter(3)&lt;/a&gt;&lt;/code&gt; 이 모듈에 대한 자세한 내용은 설명서 페이지를.</target>
        </trans-unit>
        <trans-unit id="534f259af2115bebe106710668093e3ef6ffd155" translate="yes" xml:space="preserve">
          <source>If no graph type is specified, &lt;code&gt;&lt;a href=&quot;digraph#new-0&quot;&gt;digraph:new/0&lt;/a&gt;&lt;/code&gt; is used for creating the directed graph, otherwise argument &lt;code&gt;GraphType&lt;/code&gt; is passed on as second argument to &lt;code&gt;&lt;a href=&quot;digraph#new-1&quot;&gt;digraph:new/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">그래프 유형을 지정하지 않으면 &lt;code&gt;&lt;a href=&quot;digraph#new-0&quot;&gt;digraph:new/0&lt;/a&gt;&lt;/code&gt; 이 지정 그래프 를 작성하는 데 사용되며, 그렇지 않으면 &lt;code&gt;GraphType&lt;/code&gt; 인수가 &lt;code&gt;&lt;a href=&quot;digraph#new-1&quot;&gt;digraph:new/1&lt;/a&gt;&lt;/code&gt; 의 두 번째 인수로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="4eb03e181763fc340f89dd2fee8a41ea21ee5c23" translate="yes" xml:space="preserve">
          <source>If no guard sequence is evaluated as true, an &lt;code&gt;if_clause&lt;/code&gt; run-time error occurs. If necessary, the guard expression &lt;code&gt;true&lt;/code&gt; can be used in the last branch, as that guard sequence is always true.</source>
          <target state="translated">가드 시퀀스가 ​​true로 평가되지 않으면 &lt;code&gt;if_clause&lt;/code&gt; 런타임 오류가 발생합니다. 필요한 경우 가드 시퀀스가 ​​항상 true이므로 가드 표현식 &lt;code&gt;true&lt;/code&gt; 를 마지막 분기에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9f6b9adc1152f1b0fd0e1ed73ad8eec4e1f624e" translate="yes" xml:space="preserve">
          <source>If no log with the specified name exist on the specified node, &lt;code&gt;no_such_log&lt;/code&gt; is returned.</source>
          <target state="translated">지정된 이름의 로그가 지정된 노드에 존재하지 않으면 &lt;code&gt;no_such_log&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="8f6ab79d1d5e9e2cd8b43d5f286fe816764eabff" translate="yes" xml:space="preserve">
          <source>If no match is found for &lt;code&gt;Tag&lt;/code&gt;, &lt;code&gt;Result&lt;/code&gt; will be the empty string (&lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">일치하는 항목이에 대한 발견되지 않으면 &lt;code&gt;Tag&lt;/code&gt; , &lt;code&gt;Result&lt;/code&gt; 빈 문자열입니다 ( &lt;code&gt;[]&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="668861363db131d12510c671297ba7af08f41273" translate="yes" xml:space="preserve">
          <source>If no more event handlers exist after the deletion, &lt;code&gt;error_logger&lt;/code&gt; is removed as a Logger handler, and the &lt;code&gt;error_logger&lt;/code&gt; process is stopped.</source>
          <target state="translated">삭제 후 이벤트 핸들러가 더 이상 존재하지 않으면 &lt;code&gt;error_logger&lt;/code&gt; 가 로거 핸들러로 제거되고 &lt;code&gt;error_logger&lt;/code&gt; 프로세스가 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="97bba64e22bb5e3d712c27f199cd41bb5ed00da4" translate="yes" xml:space="preserve">
          <source>If no name is provided, the supervisor bridge is not registered.</source>
          <target state="translated">이름이 제공되지 않으면 감독자 브리지가 등록되지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="145b04378100b2af31635cfab7037e102fc50e14" translate="yes" xml:space="preserve">
          <source>If no name is provided, the supervisor is not registered.</source>
          <target state="translated">이름이 제공되지 않으면 수퍼바이저가 등록되지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="962cccbaba0fe2900b8b208ab74fd43b13540b3f" translate="yes" xml:space="preserve">
          <source>If no object with key &lt;code&gt;Key&lt;/code&gt; exists, the function exits with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 키 가있는 객체가 없으면 &lt;code&gt;badarg&lt;/code&gt; 이유와 함께 함수가 종료됩니다 .</target>
        </trans-unit>
        <trans-unit id="f3ace922192dd1a66ce93d65f216be69e6bdcfa0" translate="yes" xml:space="preserve">
          <source>If no options are specified, a read lock is acquired, 100 results are returned in each chunk, and &lt;code&gt;select&lt;/code&gt; is used to traverse the table, that is:</source>
          <target state="translated">옵션을 지정하지 않으면 읽기 잠금이 획득되고 각 청크에 100 개의 결과가 반환되며 &lt;code&gt;select&lt;/code&gt; 는 테이블을 탐색하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="be43c0999b074d475f47490047515316aff57a56" translate="yes" xml:space="preserve">
          <source>If no or an unknown version is given, the &lt;strong&gt;best&lt;/strong&gt; version is used (which is v3).</source>
          <target state="translated">알 수 없거나 알 수없는 버전이 제공되면 &lt;strong&gt;최상의&lt;/strong&gt; 버전 (v3)이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bc0db3920bc02374e1ab1e1eb3ced79753b79531" translate="yes" xml:space="preserve">
          <source>If no output comes from the Erlang shell, but the Erlang machine still seems to be alive, an &quot;ALIVE&quot; message is written to the log; it is a time stamp and is written, by default, after 15 minutes of inactivity. Also, if output from Erlang is logged, but more than 5 minutes (default) has passed since last time we got anything from Erlang, a time stamp is written in the log. The &quot;ALIVE&quot; messages look as follows:</source>
          <target state="translated">Erlang 쉘에서 출력이 나오지 않지만 Erlang 시스템이 여전히 활성 상태 인 것 같으면 &quot;ALIVE&quot;메시지가 로그에 기록됩니다. 타임 스탬프이며 기본적으로 15 분 동안 활동이 없으면 기록됩니다. 또한 Erlang의 출력이 기록되었지만 마지막으로 Erlang에서 가져온 것을 5 분 이상 지나면 (타임) 스탬프가 로그에 기록됩니다. &quot;ALIVE&quot;메시지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="609daf9d4941227cdd07f7a145c9f4b97a9dd23d" translate="yes" xml:space="preserve">
          <source>If no process metadata exists, the function behaves as &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">프로세스 메타 데이터가 없으면 함수는 &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt; 로 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="129f0fba3cda34f511f81ef498c5983a08b6fef4" translate="yes" xml:space="preserve">
          <source>If no service name is specified, a brief listing of all Erlang services is presented. If a service name is supplied, all options for that service are presented.</source>
          <target state="translated">서비스 이름을 지정하지 않으면 모든 Erlang 서비스의 간단한 목록이 표시됩니다. 서비스 이름이 제공되면 해당 서비스에 대한 모든 옵션이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="f74a0bc86a24e556d294700bf2367dba448274f4" translate="yes" xml:space="preserve">
          <source>If no specific browser start command is specified, Firefox is the default browser on Unix platforms, and Internet Explorer on Windows. If &lt;code&gt;Common Test&lt;/code&gt; fails to start a browser automatically, or &lt;code&gt;none&lt;/code&gt; is specified as the value for &lt;code&gt;-browser&lt;/code&gt; (that is, &lt;code&gt;-browser none&lt;/code&gt;), start your favourite browser manually and type the URL that &lt;code&gt;Common Test&lt;/code&gt; displays in the shell.</source>
          <target state="translated">특정 브라우저 시작 명령을 지정하지 않으면 Firefox는 Unix 플랫폼의 기본 브라우저이고 Windows의 Internet Explorer입니다. 경우 &lt;code&gt;Common Test&lt;/code&gt; 자동으로 브라우저를 시작하는 데 실패, 또는 &lt;code&gt;none&lt;/code&gt; 의 값으로 지정되지 않은 &lt;code&gt;-browser&lt;/code&gt; (이다, &lt;code&gt;-browser none&lt;/code&gt; ), 당신의 마음에 드는 브라우저를 수동으로 시작하고 URL을 입력하는 &lt;code&gt;Common Test&lt;/code&gt; 셸에서 표시.</target>
        </trans-unit>
        <trans-unit id="3bd56a176fb29e1e8248ad526f6f69316f9b58af" translate="yes" xml:space="preserve">
          <source>If no such fun is registered, &lt;code&gt;beam_lib&lt;/code&gt; instead searches for an &lt;code&gt;.erlang.crypt&lt;/code&gt; file, see the next section.</source>
          <target state="translated">그러한 재미가 등록되어 있지 않으면 &lt;code&gt;beam_lib&lt;/code&gt; 는 대신 &lt;code&gt;.erlang.crypt&lt;/code&gt; 파일을 검색합니다 . 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d1d762df86c391a1b492c91b19c8e6c06437bbda" translate="yes" xml:space="preserve">
          <source>If no user configuration file is specified and Erlang is started in non-distributed or short name distributed mode, Erlang uses default configuration settings and a native lookup method that works correctly under most circumstances. Erlang reads no information from system &lt;code&gt;inet&lt;/code&gt; configuration files (such as &lt;code&gt;/etc/host.conf&lt;/code&gt; and &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;) in these modes, except for &lt;code&gt;/etc/resolv.conf&lt;/code&gt; and &lt;code&gt;/etc/hosts&lt;/code&gt; that is read and monitored for changes on Unix platforms for the internal DNS client &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">사용자 구성 파일이 지정되지 않고 Erlang이 비 분배 또는 짧은 이름 분산 모드로 시작되면 Erlang은 기본 구성 설정과 대부분의 상황에서 올바르게 작동하는 기본 조회 방법을 사용합니다. Erlang은 이러한 모드 에서 시스템 &lt;code&gt;inet&lt;/code&gt; 구성 파일 (예 : &lt;code&gt;/etc/host.conf&lt;/code&gt; 및 &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; )에서 정보를 읽지 않으며 변경 사항을 읽고 모니터링하는 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 및 &lt;code&gt;/etc/hosts&lt;/code&gt; 를 제외하고 내부 DNS 클라이언트에 대한 유닉스 플랫폼에서 &lt;code&gt;inet_res(3)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13936c5aba4f403aada92256e268f1fefbc0b6d4" translate="yes" xml:space="preserve">
          <source>If no value for &lt;code&gt;Retries&lt;/code&gt; is specified, &lt;code&gt;infinity&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;Retries&lt;/code&gt; 도 값 이 지정 되지 않으면 &lt;code&gt;infinity&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="94c3223fb92528e085bdc89d88a03ccfd3c590d9" translate="yes" xml:space="preserve">
          <source>If none of the above are available for your architecture/compiler, you are recommended to build and install &lt;code&gt;&lt;a href=&quot;https://github.com/ivmai/libatomic_ops/&quot;&gt;libatomic_ops&lt;/a&gt;&lt;/code&gt; before building Erlang/OTP. The &lt;code&gt;libatomic_ops&lt;/code&gt; library provides native atomic memory operations for a variety of architectures and compilers. When building Erlang/OTP you need to inform the build system of where the &lt;code&gt;libatomic_ops&lt;/code&gt; library is installed using the &lt;code&gt;--with-libatomic_ops=PATH&lt;/code&gt;&lt;code&gt;configure&lt;/code&gt; switch.</source>
          <target state="translated">아키텍처 / 컴파일러에 대해 위의 사항을 사용할 수없는 경우 Erlang / OTP 를 빌드 하기 전에 &lt;code&gt;&lt;a href=&quot;https://github.com/ivmai/libatomic_ops/&quot;&gt;libatomic_ops&lt;/a&gt;&lt;/code&gt; 를 빌드하고 설치하는 것이 좋습니다 . &lt;code&gt;libatomic_ops&lt;/code&gt; 라이브러리는 아키텍처와 컴파일러의 다양한 원시 원자 메모리 작업을 제공합니다. Erlang / OTP를 빌드 할 때 &lt;code&gt;--with-libatomic_ops=PATH&lt;/code&gt; &lt;code&gt;configure&lt;/code&gt; 스위치를 사용하여 &lt;code&gt;libatomic_ops&lt;/code&gt; 라이브러리가 설치된 위치를 빌드 시스템에 알려야합니다 .</target>
        </trans-unit>
        <trans-unit id="9440ff5a97925b9c13d62c177e03518391502a24" translate="yes" xml:space="preserve">
          <source>If none of the first three clauses match, the fourth clause match as a variable always matches.</source>
          <target state="translated">처음 세 개의 절 중 어느 것도 일치하지 않으면 네 번째 절은 변수가 항상 일치하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f62e5b4dade736a66aa048e49499435f1f4d7fdc" translate="yes" xml:space="preserve">
          <source>If none of the strings in &lt;code&gt;Pattern&lt;/code&gt; is found, the atom &lt;code&gt;nomatch&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 문자열이 없으면 원자 &lt;code&gt;nomatch&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="aeb11b61b9cc24cd2031d9dda015e2462ccc0499" translate="yes" xml:space="preserve">
          <source>If none of the strings in a pattern is found, an empty list is returned.</source>
          <target state="translated">패턴의 문자열이 없으면 빈 목록이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="652472f45cf3561f5b3dd17763a17700dfcd88cc" translate="yes" xml:space="preserve">
          <source>If not empty, a scheduler internal auxiliary work is scheduled to be done.</source>
          <target state="translated">비어 있지 않으면 스케줄러 내부 보조 작업이 수행되도록 스케줄됩니다.</target>
        </trans-unit>
        <trans-unit id="9937b44a2ec57528d4de1534b4257202ba316ad9" translate="yes" xml:space="preserve">
          <source>If not implemented, the CTH acts as if this function returned a call to &lt;code&gt;make_ref/0&lt;/code&gt;.</source>
          <target state="translated">구현되지 않은 경우 CTH는이 함수가 &lt;code&gt;make_ref/0&lt;/code&gt; 에 대한 호출을 리턴 한 것처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="c288cca9f0fb59e5fd99ac4b40424bd7ecc21978" translate="yes" xml:space="preserve">
          <source>If not present, audit trail logging is not used.</source>
          <target state="translated">존재하지 않으면 감사 추적 로깅이 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="29e29374c41854c469f97e992cbb29625d1d3ef4" translate="yes" xml:space="preserve">
          <source>If not, this is the atom &lt;code&gt;all&lt;/code&gt; which implies that the &lt;code&gt;UtilDesc&lt;/code&gt; contains information about all CPUs.</source>
          <target state="translated">그렇지 않으면,이 원자는 &lt;code&gt;all&lt;/code&gt; 것을 의미하는 &lt;code&gt;UtilDesc&lt;/code&gt; 은 모든 CPU에 대한 정보가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f15293549ba601ce95a5307be4274cf3a235ee45" translate="yes" xml:space="preserve">
          <source>If not, this is the sum of the percentage shares of the CPU cycles spent in all states identified as busy.</source>
          <target state="translated">그렇지 않은 경우, 이는 사용 중으로 식별 된 모든 상태에서 소비 된 CPU주기의 백분율 공유의 합계입니다.</target>
        </trans-unit>
        <trans-unit id="a5425f5051ad47a7b173e5435c9b894080331b92" translate="yes" xml:space="preserve">
          <source>If nothing else is stated, it is presumed that the &lt;code&gt;otptest&lt;/code&gt; user has an entry in the &lt;strong&gt;authorized_keys&lt;/strong&gt; file of &lt;strong&gt;tarlop&lt;/strong&gt; (allowed to log in over &lt;code&gt;ssh&lt;/code&gt; without entering a password). Also, &lt;strong&gt;tarlop&lt;/strong&gt; is a known host in the &lt;code&gt;known_hosts&lt;/code&gt; file of the user &lt;code&gt;otptest&lt;/code&gt;. This means that host-verification can be done without user-interaction.</source>
          <target state="translated">다른 아무것도 언급하지 않으면, 것으로 추정된다 &lt;code&gt;otptest&lt;/code&gt; 사용자가있는 항목이 &lt;strong&gt;의 authorized_keys&lt;/strong&gt; 의 파일 &lt;strong&gt;tarlop을&lt;/strong&gt; (를 통해 로그인 할 수 &lt;code&gt;ssh&lt;/code&gt; 암호를 입력하지 않고). 또한 &lt;strong&gt;tarlop&lt;/strong&gt; 은 &lt;code&gt;otptest&lt;/code&gt; 사용자 의 &lt;code&gt;known_hosts&lt;/code&gt; 파일에 있는 알려진 호스트입니다 . 즉, 사용자 확인없이 호스트 확인을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85b52863c7b73a113224224b8a0c4d01a407b7d9" translate="yes" xml:space="preserve">
          <source>If objects have been added while the table was fixed, the hash list starts to grow when the table is released, which significantly slows down access to the table for a period of time.</source>
          <target state="translated">테이블을 수정하는 동안 개체가 추가 된 경우 테이블을 놓을 때 해시 목록이 커지기 시작하여 일정 시간 동안 테이블에 대한 액세스 속도가 크게 느려집니다.</target>
        </trans-unit>
        <trans-unit id="828acc15f06ea3d0ebf75bc3294946979fd85c6d" translate="yes" xml:space="preserve">
          <source>If on the other hand the Version argument is an integer, it means that this is the expected version of the message and the decoder for that version should be used.</source>
          <target state="translated">반면에 Version 인수가 정수인 경우 이는 메시지의 예상 버전이며 해당 버전의 디코더를 사용해야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7ee7ad00a53993074166a752357e3a491c2d6eb1" translate="yes" xml:space="preserve">
          <source>If one &lt;strong&gt;really&lt;/strong&gt; wants to monitor when the driver gets unloaded, this message distorts the picture, because no unloading was done. Option &lt;code&gt;unloaded_only&lt;/code&gt; creates a monitor similar to an &lt;code&gt;unloaded&lt;/code&gt; monitor, but never results in this message.</source>
          <target state="translated">드라이버가 언로드 될 때 &lt;strong&gt;실제로&lt;/strong&gt; 모니터링하려는 경우 언로드가 수행되지 않았기 때문에이 메시지는 그림을 왜곡시킵니다. 옵션 &lt;code&gt;unloaded_only&lt;/code&gt; 유사한 모니터 생성 &lt;code&gt;unloaded&lt;/code&gt; 모니터를하지만,이 메시지가 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c5ebea37f196f871b2a70d380f83941fc18ead49" translate="yes" xml:space="preserve">
          <source>If one UTF character is split over two consecutive binaries in the &lt;code&gt;Data&lt;/code&gt;, the conversion succeeds. This means that a character can be decoded from a range of binaries as long as the whole range is specified as input without errors occurring.</source>
          <target state="translated">하나의 UTF 문자가 &lt;code&gt;Data&lt;/code&gt; 에서 두 개의 연속 바이너리에 분할 되면 변환이 성공합니다. 이는 전체 범위가 오류없이 입력으로 지정되는 한 이진 범위에서 문자를 디코딩 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="90ed92af5805bd230adc121faf96993bce08b918" translate="yes" xml:space="preserve">
          <source>If one of the &lt;code&gt;ERL_NIF_DIRTY_JOB_*_BOUND&lt;/code&gt; flags is set, and the runtime system has no support for dirty schedulers, the runtime system refuses to load the NIF library.</source>
          <target state="translated">&lt;code&gt;ERL_NIF_DIRTY_JOB_*_BOUND&lt;/code&gt; 플래그 중 하나 가 설정되고 런타임 시스템이 더티 스케줄러를 지원하지 않으면 런타임 시스템은 NIF 라이브러리로드를 거부합니다.</target>
        </trans-unit>
        <trans-unit id="da2865f4d243741aece7d05e455898a782a870b4" translate="yes" xml:space="preserve">
          <source>If one of the nodes cannot process monitors, for example, C or Java nodes, and the &lt;code&gt;gen_server&lt;/code&gt; process is not started when the requests are sent, but starts within 2 seconds, this function waits the whole &lt;code&gt;Timeout&lt;/code&gt;, which may be infinity.</source>
          <target state="translated">노드 중 하나가 모니터를 처리 할 수없는 경우 (예 : C 또는 Java 노드) &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 요청이 전송 될 때 시작되지 않고 2 초 내에 시작되면이 함수는 전체 &lt;code&gt;Timeout&lt;/code&gt; 기다립니다 . 이는 무한대 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ff50154efe11e68e30a0801c8327e55b0714e5d" translate="yes" xml:space="preserve">
          <source>If one or more carriers could not be scanned in full without harming the responsiveness of the system, &lt;code&gt;UnscannedSize&lt;/code&gt; is the number of bytes that had to be skipped.</source>
          <target state="translated">시스템의 응답 성을 손상시키지 않고 하나 이상의 반송파를 전체적으로 스캔 할 수없는 경우 &lt;code&gt;UnscannedSize&lt;/code&gt; 는 건너 뛰어야하는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="9b3b6b44750cd929fb5194f2e7f17a52f91bfeb2" translate="yes" xml:space="preserve">
          <source>If only one access file exists, setting this parameter to &lt;code&gt;none&lt;/code&gt; can ease the burden on the server as the server then stops looking for access files.</source>
          <target state="translated">하나의 액세스 파일 만 존재하는 경우이 매개 변수를 &lt;code&gt;none&lt;/code&gt; 으로 설정 하면 서버가 액세스 파일 찾기를 중지 할 때 서버의 부담을 덜 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78efdbd37020ca2e2d25f04642dce2c0495aa809" translate="yes" xml:space="preserve">
          <source>If only one letter is specified with \p or \P, it includes all the general category properties that start with that letter. In this case, in the absence of negation, the curly brackets in the escape sequence are optional. The following two examples have the same effect:</source>
          <target state="translated">\ p 또는 \ P로 하나의 문자 만 지정하면 해당 문자로 시작하는 모든 일반 범주 속성이 포함됩니다. 이 경우, 부정이 없으면 이스케이프 시퀀스의 중괄호는 선택 사항입니다. 다음 두 예제는 동일한 효과를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="d1f740d3ae5b1c6572bd4172c4f16e8373ec6b45" translate="yes" xml:space="preserve">
          <source>If only one value is present, it is the current value. &lt;code&gt;fix_alloc&lt;/code&gt; memory block types are presented by two values. The first value is the memory pool size and the second value is the used memory size.</source>
          <target state="translated">값이 하나만 있으면 현재 값입니다. &lt;code&gt;fix_alloc&lt;/code&gt; 메모리 블록 유형은 두 가지 값으로 표시됩니다. 첫 번째 값은 메모리 풀 크기이고 두 번째 값은 사용 된 메모리 크기입니다.</target>
        </trans-unit>
        <trans-unit id="c5da55d1092af23b098acf7d69c8679113b881cd" translate="yes" xml:space="preserve">
          <source>If only the module name (i.e. not the full name of the &lt;code&gt;.beam&lt;/code&gt; file) is given to this function, the &lt;code&gt;.beam&lt;/code&gt; file is found by calling &lt;code&gt;code:which(Module)&lt;/code&gt;. If no &lt;code&gt;.beam&lt;/code&gt; file is found, the error reason &lt;code&gt;non_existing&lt;/code&gt; is returned. If the module is already cover compiled with &lt;code&gt;compile_beam/1&lt;/code&gt;, the &lt;code&gt;.beam&lt;/code&gt; file will be picked from the same location as the first time it was compiled. If the module is already cover compiled with &lt;code&gt;compile/1,2&lt;/code&gt;, there is no way to find the correct &lt;code&gt;.beam&lt;/code&gt; file, so the error reason &lt;code&gt;{already_cover_compiled,no_beam_found,Module}&lt;/code&gt; is returned.</source>
          <target state="translated">이 함수에 모듈 이름 (예 : &lt;code&gt;.beam&lt;/code&gt; 파일 의 전체 이름이 아님 ) 만 지정하면 &lt;code&gt;code:which(Module)&lt;/code&gt; 을 호출 하여 &lt;code&gt;.beam&lt;/code&gt; 파일을 찾습니다 . &lt;code&gt;.beam&lt;/code&gt; 파일이 없으면 &lt;code&gt;non_existing&lt;/code&gt; 오류 원인 이 반환됩니다. 모듈이 이미 &lt;code&gt;compile_beam/1&lt;/code&gt; 로 컴파일 된 경우 &lt;code&gt;.beam&lt;/code&gt; 파일은 처음 컴파일 할 때와 동일한 위치에서 선택됩니다. 모듈이 이미 &lt;code&gt;compile/1,2&lt;/code&gt; 로 컴파일 된 경우 올바른 &lt;code&gt;.beam&lt;/code&gt; 파일 을 찾을 수있는 방법이 없으므로 오류 이유 &lt;code&gt;{already_cover_compiled,no_beam_found,Module}&lt;/code&gt; 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="84bdcab65ed9e153d52722d8ccf698faa98c0614" translate="yes" xml:space="preserve">
          <source>If only undefined options are requested the resulting list can be empty.</source>
          <target state="translated">정의되지 않은 옵션 만 요청하면 결과 목록이 비어있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3d6b0c4be9ac174bfcec9988c3498fdbe5d2f55" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;&lt;a href=&quot;#type-debug_opt&quot;&gt;{debug,Dbgs}&lt;/a&gt;&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, debugging through &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; is activated.</source>
          <target state="translated">옵션 &lt;code&gt;&lt;a href=&quot;#type-debug_opt&quot;&gt;{debug,Dbgs}&lt;/a&gt;&lt;/code&gt; 가 &lt;code&gt;Opts&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; 통한 디버깅 이 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="769611976869b84c5779bcf180081ddcd9ad1bfa" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;c&lt;/code&gt; is used with &lt;code&gt;oldshell&lt;/code&gt; on Unix, &lt;code&gt;Ctrl-C&lt;/code&gt; will restart the shell process rather than interrupt it.</source>
          <target state="translated">옵션 &lt;code&gt;c&lt;/code&gt; 가 유닉스에서 &lt;code&gt;oldshell&lt;/code&gt; 과 함께 사용 되면 &lt;code&gt;Ctrl-C&lt;/code&gt; 는 쉘 프로세스를 중단하지 않고 다시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="096a0eaa955fff41e809fc817940102bc82e3b7a" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;compact&lt;/code&gt; is specified, the trailing zeros at the end of the list are truncated. This option is only meaningful together with option &lt;code&gt;decimals&lt;/code&gt;.</source>
          <target state="translated">옵션 &lt;code&gt;compact&lt;/code&gt; 가 지정되면 목록 끝의 후행 0이 잘립니다. 이 옵션은 옵션 10 &lt;code&gt;decimals&lt;/code&gt; 와 함께 만 의미가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e006a20906cf19e410666b42e37a9c3e19a3e41a" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;compressed&lt;/code&gt; is provided, the external term format is compressed. The compressed format is automatically recognized by &lt;code&gt;binary_to_term/1&lt;/code&gt; as from Erlang/OTP R7B.</source>
          <target state="translated">&lt;code&gt;compressed&lt;/code&gt; 옵션 이 제공되면 외부 용어 형식이 압축됩니다. 압축 형식은 &lt;code&gt;binary_to_term/1&lt;/code&gt; 에 의해 Erlang / OTP R7B에서 자동으로 인식됩니다 .</target>
        </trans-unit>
        <trans-unit id="5de3ee850f4f14cadbc9c1e776ec192b168f5ad1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;decimals&lt;/code&gt; is specified, the returned value contains at most &lt;code&gt;Decimals&lt;/code&gt; number of digits past the decimal point. If the number does not fit in the internal static buffer of 256 bytes, the function throws &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">옵션 10 &lt;code&gt;decimals&lt;/code&gt; 를 지정하면 반환 된 값에 &lt;code&gt;Decimals&lt;/code&gt; 지난 최대 10 진수 자릿수가 포함됩니다. 숫자가 256 바이트의 내부 정적 버퍼에 맞지 않으면 함수는 &lt;code&gt;badarg&lt;/code&gt; 를 던집니다 .</target>
        </trans-unit>
        <trans-unit id="4d32ea21453f7c1a1069cac8907bb379c47719c1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;eof&lt;/code&gt; is specified also, the messages &lt;code&gt;eof&lt;/code&gt; and &lt;code&gt;exit_status&lt;/code&gt; appear in an unspecified order.</source>
          <target state="translated">옵션 &lt;code&gt;eof&lt;/code&gt; 도 지정되면 메시지 &lt;code&gt;eof&lt;/code&gt; 및 &lt;code&gt;exit_status&lt;/code&gt; 가 지정되지 않은 순서로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="32ae7856c177425822832835b7fef1768d20a52e" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;force&lt;/code&gt; has been passed, but the driver of the port does not allow forcing through a busy port.</source>
          <target state="translated">옵션 &lt;code&gt;force&lt;/code&gt; 가 통과되었지만 포트 드라이버가 사용중인 포트를 강제로 허용하지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="441c9bb025fc2889c41f42aea8b90d9817c38b34" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;format&lt;/code&gt; is specified to &lt;code&gt;ttb:stop/1&lt;/code&gt;, the formatting is automatically done when stopping &lt;code&gt;ttb&lt;/code&gt;.</source>
          <target state="translated">옵션의 경우 &lt;code&gt;format&lt;/code&gt; 으로 지정 &lt;code&gt;ttb:stop/1&lt;/code&gt; 정지 할 때 서식이 자동으로 수행됩니다 &lt;code&gt;ttb&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d2376aceac49d07a344ae2362a017172221e3a6" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;format&lt;/code&gt; is specified to &lt;code&gt;ttb:stop/1&lt;/code&gt;, the trace logs are automatically formatted after tracing is stopped.</source>
          <target state="translated">옵션 &lt;code&gt;format&lt;/code&gt; 이 &lt;code&gt;ttb:stop/1&lt;/code&gt; 로 지정 되면 추적이 중지 된 후 추적 로그가 자동으로 형식화됩니다.</target>
        </trans-unit>
        <trans-unit id="06c4d5d9e31e528aa6774014ad6ec78d401b5e9f" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;info&lt;/code&gt; is combined with option &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; is returned if a flush was needed, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">옵션의 경우 &lt;code&gt;info&lt;/code&gt; 옵션과 결합 &lt;code&gt;flush&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 플러시가 필요한 경우, 그렇지 않으면 반환됩니다 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6c6534bbbe7210a2a4f9c6ad85ccdb4879fb04d3" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;kill_ports&lt;/code&gt; is used, monitor trigging is crucial, as the ports are not guaranteed to be killed until the driver is unloaded. Thus, a monitor must be triggered for at least the &lt;code&gt;pending_driver&lt;/code&gt; case.</source>
          <target state="translated">&lt;code&gt;kill_ports&lt;/code&gt; 옵션을 사용하면 드라이버가 언로드 될 때까지 포트가 강제 종료 되지 않으므로 모니터 트리 깅이 중요합니다. 따라서 최소한 &lt;code&gt;pending_driver&lt;/code&gt; 케이스 에 대해 모니터를 트리거해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6aa1db8f0800b8eada993c86c8a59c1d17dfb52c" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;linked_in_driver&lt;/code&gt; or &lt;code&gt;permanent&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, all other options return &lt;code&gt;linked_in_driver&lt;/code&gt; or &lt;code&gt;permanent&lt;/code&gt;, respectively.</source>
          <target state="translated">옵션의 경우 &lt;code&gt;linked_in_driver&lt;/code&gt; 또는 &lt;code&gt;permanent&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; , 다른 모든 옵션은 반환 &lt;code&gt;linked_in_driver&lt;/code&gt; 또는 &lt;code&gt;permanent&lt;/code&gt; 각각.</target>
        </trans-unit>
        <trans-unit id="c57ff6b7c6782f60fe59ca940f65912e4d479346" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;monitor&lt;/code&gt; is specified, the newly created process is monitored, and both the pid and reference for the monitor are returned.</source>
          <target state="translated">옵션 &lt;code&gt;monitor&lt;/code&gt; 가 지정되면 새로 작성된 프로세스가 모니터되고 모니터의 pid 및 참조가 모두 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="04d4436e947c7fe2bfe4be7b9ccd10a7ac2337af" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;no_dot_erlang&lt;/code&gt; is specified, the instruction to load the &lt;code&gt;.erlang&lt;/code&gt; file during boot is &lt;strong&gt;not&lt;/strong&gt; included.</source>
          <target state="translated">&lt;code&gt;no_dot_erlang&lt;/code&gt; 옵션을 지정하면 부팅 중에 &lt;code&gt;.erlang&lt;/code&gt; 파일 을로드하는 명령 이 포함 &lt;strong&gt;되지&lt;/strong&gt; 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd0a5200f0c674efc5a1ca9a83309cd9b7fe26b6" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;noexec&lt;/code&gt; is specified, the function returns the same values as for &lt;code&gt;silent&lt;/code&gt; but no &lt;code&gt;relup&lt;/code&gt; file is created.</source>
          <target state="translated">&lt;code&gt;noexec&lt;/code&gt; 옵션을 지정하면이 함수는 &lt;code&gt;silent&lt;/code&gt; 과 동일한 값을 반환 하지만 &lt;code&gt;relup&lt;/code&gt; 파일은 생성 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3c2f80ddb4accdf1246a3219780f43c13b4e27f2" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;purge&lt;/code&gt; is specified, all old code that can be soft-purged is purged after all other checks are successfully completed. This can be useful to reduce the time needed by &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션 &lt;code&gt;purge&lt;/code&gt; 가 지정되면 소프트 제거 할 수있는 모든 이전 코드가 다른 모든 검사가 성공적으로 완료된 후 제거됩니다. &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1&lt;/a&gt;&lt;/code&gt; 에 필요한 시간을 줄이는 데 유용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f207e9cbf62b31891d035fb3346f08b4121c927b" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;restart_emulator&lt;/code&gt; is specified, a low-level instruction to restart the emulator is appended to the &lt;code&gt;relup&lt;/code&gt; file. This ensures that a complete reboot of the system is done when the system is upgraded or downgraded.</source>
          <target state="translated">&lt;code&gt;restart_emulator&lt;/code&gt; 옵션을 지정하면 에뮬레이터를 다시 시작하기위한 하위 수준의 명령이 &lt;code&gt;relup&lt;/code&gt; 파일에 추가 됩니다. 이를 통해 시스템을 업그레이드하거나 다운 그레이드 할 때 시스템을 완전히 재부팅 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef31277dfcdd9b3fea33e70696e85cc6a58e6495" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;scientific&lt;/code&gt; is specified, the float is formatted using scientific notation with &lt;code&gt;Decimals&lt;/code&gt; digits of precision.</source>
          <target state="translated">&lt;code&gt;scientific&lt;/code&gt; 옵션 이 지정된 경우 부동 소수점은 &lt;code&gt;Decimals&lt;/code&gt; 자릿수의 공학 표기법을 사용하여 형식이 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="68354b12f57b501c10eb39d65b11549593ad808d" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;src_tests&lt;/code&gt; is specified, a warning is issued if the source code for a module is missing or is newer than the object code.</source>
          <target state="translated">&lt;code&gt;src_tests&lt;/code&gt; 옵션을 지정하면 모듈의 소스 코드가 없거나 오브젝트 코드보다 최신 인 경우 경고가 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="3b698628086185a232f3b1c8c64f2b5821c29478" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;sync&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, it ensures that the content of the file is written to the disk before &lt;code&gt;tab2file&lt;/code&gt; returns. Defaults to &lt;code&gt;{sync, false}&lt;/code&gt;.</source>
          <target state="translated">옵션의 경우 &lt;code&gt;sync&lt;/code&gt; 설정되어 &lt;code&gt;true&lt;/code&gt; , 파일의 내용이하기 전에 디스크에 기록되는 것을 보장 &lt;code&gt;tab2file&lt;/code&gt; 에 돌아갑니다. 기본값은 &lt;code&gt;{sync, false}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="16c1274c0980810787faf4c8323f084b49c5a2fa" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;ungreedy&lt;/code&gt; is set (an option that is not available in Perl), the quantifiers are not greedy by default, but individual ones can be made greedy by following them with a question mark. That is, it inverts the default behavior.</source>
          <target state="translated">옵션 &lt;code&gt;ungreedy&lt;/code&gt; 이 설정되면 (Perl에서 사용할 수없는 옵션) 수량자는 기본적으로 욕심이 없지만 물음표를 따라 개별 욕심을 만들 수 있습니다. 즉, 기본 동작을 반전시킵니다.</target>
        </trans-unit>
        <trans-unit id="6ebecfa9ef794349da407c48663db38e0205dfc1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;url_base&lt;/code&gt; is set, an extra attribute named &lt;code&gt;url&lt;/code&gt; is added to each &lt;code&gt;testsuite&lt;/code&gt; and &lt;code&gt;testcase&lt;/code&gt; XML element. The value is constructed from &lt;code&gt;url_base&lt;/code&gt; and a relative path to the test suite or test case log, respectively, for example:</source>
          <target state="translated">&lt;code&gt;url_base&lt;/code&gt; 옵션 이 설정되면 &lt;code&gt;url&lt;/code&gt; 이라는 추가 속성 이 각 &lt;code&gt;testsuite&lt;/code&gt; 및 &lt;code&gt;testcase&lt;/code&gt; XML 요소에 추가됩니다 . 이 값은 &lt;code&gt;url_base&lt;/code&gt; 및 테스트 스위트 또는 테스트 케이스 로그에 대한 상대 경로로 각각 구성됩니다 (예 :</target>
        </trans-unit>
        <trans-unit id="7a53503422cb0ac19329aceb31af878b5ec300e5" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;warnings_as_errors&lt;/code&gt; is specified, warnings are treated as errors.</source>
          <target state="translated">&lt;code&gt;warnings_as_errors&lt;/code&gt; 옵션 이 지정되면 경고는 오류로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="41ac36f3b8b38269747bee1634966538895f2ee4" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{debug,Dbgs}&lt;/code&gt; is present, the corresponding &lt;code&gt;sys&lt;/code&gt; function is called for each item in &lt;code&gt;Dbgs&lt;/code&gt;; see &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션이있는 경우 &lt;code&gt;{debug,Dbgs}&lt;/code&gt; 존재하는 해당 &lt;code&gt;sys&lt;/code&gt; 기능은 각 항목에 대해 호출됩니다 &lt;code&gt;Dbgs&lt;/code&gt; ; &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e804aab039286890448ffee48895432a1b352c17" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{handshake, hello}&lt;/code&gt; is specified the handshake is paused after receiving the client hello message and the success response is &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; instead of &lt;code&gt;{ok, SslSocket}&lt;/code&gt;. Thereafter the handshake is continued or canceled by calling &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{handshake, hello}&lt;/code&gt; 옵션을 지정하면 클라이언트 hello 메시지를 수신 한 후 핸드 쉐이크가 일시 중단되며 성공 응답은 &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; 대신 {ok, SslSocket, Ext &lt;code&gt;{ok, SslSocket}&lt;/code&gt; 입니다. 그런 다음 handshake_continue &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt; 을 호출하여 핸드 셰이크가 계속되거나 취소됩니다 .</target>
        </trans-unit>
        <trans-unit id="9802b121f3f842baa16ccec18f6827e8efefe976" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; is present, the &lt;code&gt;gen_event&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; 옵션 이 존재하면 &lt;code&gt;gen_event&lt;/code&gt; 프로세스는 &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; 밀리 초 동안 메시지를 기다립니다. 메시지가 수신되지 않으면 프로세스는 자동으로 최대 절전 모드로 전환됩니다 ( &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; 호출 ).</target>
        </trans-unit>
        <trans-unit id="80d6ad9348d486b54eb01008ea70fa22ab22a998" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; is present, the &lt;code&gt;gen_server&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; 옵션 이 존재하면 &lt;code&gt;gen_server&lt;/code&gt; 프로세스는 &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; 밀리 초 동안 메시지를 대기 하고 메시지가 수신되지 않으면 프로세스는 자동으로 최대 절전 모드로 전환됩니다 ( &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; 호출 ).</target>
        </trans-unit>
        <trans-unit id="1afccf80e87b972a02a03ba25b3fcfd4c6d492f1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{path,[Dir]}&lt;/code&gt; is specified, this path is appended to the current path. A directory in the path can be specified with a wildcard &lt;code&gt;*&lt;/code&gt;, this is expanded to all matching directories. Example: &lt;code&gt;&quot;lib/*/ebin&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{path,[Dir]}&lt;/code&gt; 옵션을 지정하면이 경로가 현재 경로에 추가됩니다. 경로의 디렉토리는 와일드 카드 &lt;code&gt;*&lt;/code&gt; 로 지정할 수 있으며 일치하는 모든 디렉토리로 확장됩니다. 예 : &lt;code&gt;&quot;lib/*/ebin&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="521a357383f837ccbed508cea165f5ba1a72a4ba" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{path,[Dir]}&lt;/code&gt; is specified, this path is appended to the current path. Wildcard &lt;code&gt;*&lt;/code&gt; is expanded to all matching directories, for example, &lt;code&gt;lib/*/ebin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{path,[Dir]}&lt;/code&gt; 옵션을 지정하면이 경로가 현재 경로에 추가됩니다. 와일드 카드 &lt;code&gt;*&lt;/code&gt; 는 일치하는 모든 디렉토리 (예 : &lt;code&gt;lib/*/ebin&lt;/code&gt; )로 확장 됩니다.</target>
        </trans-unit>
        <trans-unit id="319e803f0c4dc5797ff076e88abf3ae72c4731f8" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{spawn_opt,SOpts}&lt;/code&gt; is present, &lt;code&gt;SOpts&lt;/code&gt; is passed as option list to the &lt;code&gt;spawn_opt&lt;/code&gt; BIF, which is used to spawn the &lt;code&gt;gen_server&lt;/code&gt; process; see &lt;code&gt;spawn_opt/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{spawn_opt,SOpts}&lt;/code&gt; 옵션 이 존재하면, &lt;code&gt;SOpts&lt;/code&gt; 는 옵션 목록으로 &lt;code&gt;spawn_opt&lt;/code&gt; BIF에 전달되며 , 이는 &lt;code&gt;gen_server&lt;/code&gt; 프로세스 를 생성하는 데 사용됩니다 . &lt;code&gt;spawn_opt/2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f134a5284d4d1605e5d535d5f02614e7f9564b83" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{spawn_opt,SpawnOpts}&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, &lt;code&gt;SpawnOpts&lt;/code&gt; is passed as option list to &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt;, which is used to spawn the &lt;code&gt;gen_statem&lt;/code&gt; process.</source>
          <target state="translated">옵션 &lt;code&gt;{spawn_opt,SpawnOpts}&lt;/code&gt; 가 &lt;code&gt;Opts&lt;/code&gt; 에 존재 하면 &lt;code&gt;SpawnOpts&lt;/code&gt; 가 옵션 목록으로 &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt; 에 전달되어 &lt;code&gt;gen_statem&lt;/code&gt; 프로세스 를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="c971670358afb5846db5d77c2b0b19aad5a3c579" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{timeout,Time}&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, the &lt;code&gt;gen_statem&lt;/code&gt; is allowed to spend &lt;code&gt;Time&lt;/code&gt; milliseconds initializing or it terminates and the start function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,timeout}&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">옵션 &lt;code&gt;{timeout,Time}&lt;/code&gt; 이 &lt;code&gt;Opts&lt;/code&gt; 에 존재 하면 &lt;code&gt;gen_statem&lt;/code&gt; 은 초기화 하는 데 &lt;code&gt;Time&lt;/code&gt; 밀리 초) 을 소비 하거나 종료되며 시작 함수는 &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,timeout}&lt;/a&gt;&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="341a32ddba103c08ae86b78ec53524b7702998b8" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{timeout,Time}&lt;/code&gt; is present, the &lt;code&gt;gen_server&lt;/code&gt; process is allowed to spend &lt;code&gt;Time&lt;/code&gt; milliseconds initializing or it is terminated and the start function returns &lt;code&gt;{error,timeout}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{timeout,Time}&lt;/code&gt; 옵션 이 존재하면 &lt;code&gt;gen_server&lt;/code&gt; 프로세스가 초기화 하는 데 &lt;code&gt;Time&lt;/code&gt; 밀리 초) 을 소비 하거나 종료되고 시작 함수는 &lt;code&gt;{error,timeout}&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a928786d0e9ca7308ebc039e35ade6afdfb8bc1d" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{tls, tls_options()}&lt;/code&gt; is present, the FTP session is transported over &lt;code&gt;tls&lt;/code&gt; (&lt;code&gt;ftps&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;RFC 4217&lt;/a&gt;&lt;/code&gt;). The list &lt;code&gt;tls_options()&lt;/code&gt; can be empty. The function &lt;code&gt;ssl:connect/3&lt;/code&gt; is used for securing both the control connection and the data sessions.</source>
          <target state="translated">&lt;code&gt;{tls, tls_options()}&lt;/code&gt; 옵션 이 있으면 FTP 세션이 &lt;code&gt;tls&lt;/code&gt; 를 통해 전송됩니다 ( &lt;code&gt;ftps&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;RFC 4217&lt;/a&gt;&lt;/code&gt; 참조 ). &lt;code&gt;tls_options()&lt;/code&gt; 목록 은 비어있을 수 있습니다. &lt;code&gt;ssl:connect/3&lt;/code&gt; 기능 은 제어 연결과 데이터 세션을 모두 보호하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20a3a531905a20d30fd9f374cce827942989f5e9" translate="yes" xml:space="preserve">
          <source>If option&lt;code&gt;&lt;a href=&quot;#type-hibernate_after_opt&quot;&gt;{hibernate_after,HibernateAfterTimeout}&lt;/a&gt;&lt;/code&gt; is present, the &lt;code&gt;gen_statem&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-hibernate_after_opt&quot;&gt;{hibernate_after,HibernateAfterTimeout}&lt;/a&gt;&lt;/code&gt; 옵션 이 존재하면 &lt;code&gt;gen_statem&lt;/code&gt; 프로세스는 &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; 밀리 초 동안 메시지를 기다립니다. 메시지가 수신되지 않으면 프로세스는 자동으로 최대 절전 모드로 전환됩니다 ( &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; 호출 ).</target>
        </trans-unit>
        <trans-unit id="2fd0a104622064a3e02a4f4c3eca0f47d309b91b" translate="yes" xml:space="preserve">
          <source>If or when &lt;code&gt;monitor/2&lt;/code&gt; is extended, other possible values for &lt;code&gt;Tag&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;, and &lt;code&gt;Info&lt;/code&gt; in the monitor message will be introduced.</source>
          <target state="translated">만약하거나 &lt;code&gt;monitor/2&lt;/code&gt; 확장되어, 다른 가능한 값 &lt;code&gt;Tag&lt;/code&gt; , &lt;code&gt;Object&lt;/code&gt; 및 &lt;code&gt;Info&lt;/code&gt; 모니터 메시지에 소개한다.</target>
        </trans-unit>
        <trans-unit id="a47b00202aed4c182ff58ce236e280bf55db7d71" translate="yes" xml:space="preserve">
          <source>If other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; have the driver loaded, this option has no effect.</source>
          <target state="translated">다른 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; 가 드라이버를로드 한 경우이 옵션은 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="56b3ce2063e2924ca7e8faa87611f5b6c2819567" translate="yes" xml:space="preserve">
          <source>If parameter &lt;code&gt;Dates&lt;/code&gt; is specified, the reports are filtered according to the date when they occurred. If &lt;code&gt;Dates&lt;/code&gt; has the form &lt;code&gt;{DateFrom, from}&lt;/code&gt;, reports that occurred after &lt;code&gt;DateFrom&lt;/code&gt; are displayed.</source>
          <target state="translated">매개 변수 &lt;code&gt;Dates&lt;/code&gt; 를 지정하면 보고서는 발생한 날짜에 따라 필터링됩니다. 경우 &lt;code&gt;Dates&lt;/code&gt; 형태가 &lt;code&gt;{DateFrom, from}&lt;/code&gt; , 이후에 발생 보고서 &lt;code&gt;DateFrom&lt;/code&gt; 가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6511239690521e295477c51f44e7169510af0e54" translate="yes" xml:space="preserve">
          <source>If possible, avoid writing or deleting records in the same transaction before iterating over the table.</source>
          <target state="translated">가능하면 테이블을 반복하기 전에 동일한 트랜잭션에서 레코드를 쓰거나 삭제하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3eb1eeddf032eb186133fc7df8919fb2d11d384d" translate="yes" xml:space="preserve">
          <source>If possible, the client keeps its connections alive and uses persistent connections with or without pipeline depending on configuration and current circumstances. The HTTP/1.1 specification does not provide a guideline for how many requests that are ideal to be sent on a persistent connection. This depends much on the application.</source>
          <target state="translated">가능하면 클라이언트는 연결을 유지하고 구성 및 현재 환경에 따라 파이프 라인이 있거나없는 영구 연결을 사용합니다. HTTP / 1.1 사양은 지속적인 연결로 전송하기에 이상적인 요청 수에 대한 지침을 제공하지 않습니다. 응용 프로그램에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="6eb80024b1f8a5a58791d40e0d60ce7a9e24c7b7" translate="yes" xml:space="preserve">
          <source>If possible, the comment should be moved before any preceding separator characters on the same line. E.g.:</source>
          <target state="translated">가능한 경우 주석은 동일한 행에서 선행 분리 문자 앞에 이동해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="11f459fa45ff86ea26d4123b486b2667eb195a88" translate="yes" xml:space="preserve">
          <source>If possible, the comment should be moved past any following separator characters on the same line, rather than placing the separators on the following line. E.g.:</source>
          <target state="translated">가능하면 주석을 다음 행에 배치하지 말고 같은 행에서 다음 구분 문자를 지나서 주석을 이동해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="0e22a764d95b33db30751234a49a657e83e7510e" translate="yes" xml:space="preserve">
          <source>If possible, use the &lt;code&gt;&lt;a href=&quot;beam_lib&quot;&gt;beam_lib(3)&lt;/a&gt;&lt;/code&gt; module to extract the compiler options and the abstract code format from the Beam file and compile that instead.</source>
          <target state="translated">가능한 경우 &lt;code&gt;&lt;a href=&quot;beam_lib&quot;&gt;beam_lib(3)&lt;/a&gt;&lt;/code&gt; 모듈을 사용하여 Beam 파일에서 컴파일러 옵션 및 추상 코드 형식을 추출하고 대신 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="aede57d6ae41eb953c1c470da89fb0e057e8b902" translate="yes" xml:space="preserve">
          <source>If precedence is client, the negotiated protocol is the first protocol to be shown on the client preference list, which is also on the server advertised list.</source>
          <target state="translated">우선 순위가 클라이언트 인 경우 협상 된 프로토콜은 클라이언트 환경 설정 목록에 표시되는 첫 번째 프로토콜이며 서버 보급 목록에도 있습니다.</target>
        </trans-unit>
        <trans-unit id="51ff54d9c737f36da2074bfa07dabdd6029e6f8a" translate="yes" xml:space="preserve">
          <source>If precedence is server, the negotiated protocol is the first protocol to be shown on the server advertised list, which is also on the client preference list.</source>
          <target state="translated">우선 순위가 서버 인 경우 협상 된 프로토콜은 서버 보급 목록에 표시되는 첫 번째 프로토콜이며 클라이언트 기본 설정 목록에도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6739d735ae41522a99fdf3833670c2cb63d21a98" translate="yes" xml:space="preserve">
          <source>If present, this option specifies the options for the &lt;strong&gt;audit trail logging&lt;/strong&gt;. The &lt;code&gt;disk_log&lt;/code&gt; module is used to maintain a wrap log. If present, the &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; options are mandatory.</source>
          <target state="translated">있는 경우이 옵션은 &lt;strong&gt;감사 추적 로깅&lt;/strong&gt; 옵션을 지정합니다 . &lt;code&gt;disk_log&lt;/code&gt; 모듈은 랩 로그를 유지하는 데 사용됩니다. 있는 경우 &lt;code&gt;dir&lt;/code&gt; 및 &lt;code&gt;size&lt;/code&gt; 옵션은 필수입니다.</target>
        </trans-unit>
        <trans-unit id="c374078c3ce837fa7c145904897f0747ce0fa052" translate="yes" xml:space="preserve">
          <source>If process metadata exists for the current process, this function behaves as if it was implemented as follows:</source>
          <target state="translated">현재 프로세스에 대한 프로세스 메타 데이터가 존재하면이 함수는 다음과 같이 구현 된 것처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6453efa6a699c594656266a7d0d5934c8aa65586" translate="yes" xml:space="preserve">
          <source>If pseudo function triggering the translation is &lt;code&gt;ets:fun2ms/1&lt;/code&gt;, the head of the fun must contain a single variable or a single tuple. If the pseudo function is &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;, the head of the fun must contain a single variable or a single list.</source>
          <target state="translated">변환을 트리거하는 의사 함수가 &lt;code&gt;ets:fun2ms/1&lt;/code&gt; 인 경우, 재미의 머리 부분에는 단일 변수 또는 단일 튜플이 포함되어야합니다. 의사 함수가 &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; 인 경우, 재미의 머리에는 단일 변수 또는 단일 목록이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="3bbf5cb920ce0732e8a77fc0ab511fa8e53d27bc" translate="yes" xml:space="preserve">
          <source>If quantifier is {0,n}, where n &amp;gt; 0, it is treated as if it was {0,1}. At runtime, the remaining pattern match is tried with and without the assertion, the order depends on the greediness of the quantifier.</source>
          <target state="translated">수량자가 {0, n} (여기서 n&amp;gt; 0)이면 {0,1} 인 것처럼 처리됩니다. 런타임시, 나머지 패턴 일치는 어설 션이 있거나없는 상태에서 시도되며, 순서는 수량 자의 탐욕에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4e6534fccad96b9c365841e907e49b7cde2c28d" translate="yes" xml:space="preserve">
          <source>If records are written and deleted during the traversal, use the function &lt;code&gt;&lt;a href=&quot;mnesia#foldl&quot;&gt;mnesia:foldl/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mnesia#foldr&quot;&gt;mnesia:foldr/3&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;write&lt;/code&gt; lock. Or the function &lt;code&gt;&lt;a href=&quot;mnesia#write_lock_table-1&quot;&gt;mnesia:write_lock_table/1&lt;/a&gt;&lt;/code&gt; when using &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">레코드가 통과하는 동안 작성하고 삭제하는 경우, 함수 사용 &lt;code&gt;&lt;a href=&quot;mnesia#foldl&quot;&gt;mnesia:foldl/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;mnesia#foldr&quot;&gt;mnesia:foldr/3&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;write&lt;/code&gt; 잠금. 또는 &lt;code&gt;first&lt;/code&gt; 및 &lt;code&gt;next&lt;/code&gt; 를 사용할 때 &lt;code&gt;&lt;a href=&quot;mnesia#write_lock_table-1&quot;&gt;mnesia:write_lock_table/1&lt;/a&gt;&lt;/code&gt; 함수 입니다.</target>
        </trans-unit>
        <trans-unit id="169c4bd14dbb4d6e16657fce0c0a61cc8e3f8798" translate="yes" xml:space="preserve">
          <source>If reloading is not requested, it can still be useful to specify option &lt;code&gt;monitor&lt;/code&gt;, as forced unloads (driver option &lt;code&gt;kill_ports&lt;/code&gt; or option &lt;code&gt;kill_ports&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt;) trigger a transient state where driver loading cannot be performed until all closing ports are closed. Thus, as &lt;code&gt;try_unload&lt;/code&gt; can, in almost all situations, return &lt;code&gt;{ok, pending_driver}&lt;/code&gt;, always specify at least &lt;code&gt;{monitor, pending_driver}&lt;/code&gt; in production code (see the monitor discussion earlier).</source>
          <target state="translated">재로드가 요청되지 않은 경우 강제 언로드 (드라이버 옵션 &lt;code&gt;kill_ports&lt;/code&gt; 또는 옵션 &lt;code&gt;kill_ports&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; )가 모든 닫는 포트가 닫힐 때까지 드라이버로드를 수행 할 수없는 일시적인 상태를 트리거하므로 옵션 &lt;code&gt;monitor&lt;/code&gt; 를 지정하는 것이 여전히 유용 할 수 있습니다. 따라서 &lt;code&gt;try_unload&lt;/code&gt; 가 거의 모든 상황에서 &lt;code&gt;{ok, pending_driver}&lt;/code&gt; 리턴 할 수 있으므로 항상 프로덕션 코드에서 &lt;code&gt;{monitor, pending_driver}&lt;/code&gt; 이상을 지정 하십시오 ( 앞 의 모니터 설명 참조).</target>
        </trans-unit>
        <trans-unit id="55c076ea86b99a552c3ee63a0beaa5dfb25c1e33" translate="yes" xml:space="preserve">
          <source>If resolver option &lt;code&gt;inet6&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, an IPv6 address is looked up.</source>
          <target state="translated">리졸버 옵션 &lt;code&gt;inet6&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 이면 IPv6 주소가 조회됩니다.</target>
        </trans-unit>
        <trans-unit id="71218f752e39cbf302806385e7e620598fcd4560" translate="yes" xml:space="preserve">
          <source>If restricted mode has been enabled on a particular node, remote shells connecting to this node also run in restricted mode.</source>
          <target state="translated">특정 노드에서 제한 모드를 활성화 한 경우이 노드에 연결하는 원격 셸도 제한 모드로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="81be79c2e31a4efcff85293a46775d5d0aa9c619" translate="yes" xml:space="preserve">
          <source>If run with option &lt;code&gt;caseless&lt;/code&gt;, this pattern matches phrases such as &quot;A man, a plan, a canal: Panama!&quot; and it works well in both PCRE and Perl. Notice the use of the possessive quantifier *+ to avoid backtracking into sequences of non-word characters. Without this, PCRE takes much longer (10 times or more) to match typical phrases, and Perl takes so long that you think it has gone into a loop.</source>
          <target state="translated">&lt;code&gt;caseless&lt;/code&gt; 옵션으로 실행하면 이 패턴은 &quot;사람, 계획, 운하 : 파나마!&quot;와 같은 문구와 일치합니다. PCRE와 Perl 모두에서 잘 작동합니다. 단어가 아닌 문자 시퀀스로의 역 추적을 피하려면 소유 수량 자 * +를 사용하십시오. 이것이 없으면 PCRE가 일반적인 문구와 일치하는 데 훨씬 더 오래 걸리거나 (10 배 이상) Perl이 너무 오래 걸리기 때문에 루프에 빠졌다고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="56762a0f1f42178490b0db9862f2814f477e1842" translate="yes" xml:space="preserve">
          <source>If set before start, the &lt;code&gt;epmd&lt;/code&gt; daemon behaves as if option &lt;code&gt;-relaxed_command_check&lt;/code&gt; was specified at startup. Consequently, if this option is set before starting the Erlang virtual machine, the automatically started &lt;code&gt;epmd&lt;/code&gt; accepts the &lt;code&gt;-kill&lt;/code&gt; and &lt;code&gt;-stop&lt;/code&gt; commands without restrictions.</source>
          <target state="translated">시작하기 전에 설정하면 &lt;code&gt;epmd&lt;/code&gt; 데몬은 시작시 옵션 &lt;code&gt;-relaxed_command_check&lt;/code&gt; 가 지정된 것처럼 작동 합니다. 따라서 Erlang 가상 머신을 시작하기 전에이 옵션을 설정하면 자동으로 시작된 &lt;code&gt;epmd&lt;/code&gt; 가 제한없이 &lt;code&gt;-kill&lt;/code&gt; 및 &lt;code&gt;-stop&lt;/code&gt; 명령을 승인합니다 .</target>
        </trans-unit>
        <trans-unit id="9f59dad82faaa4c2914703b6f2eec0c0bd7bf03c" translate="yes" xml:space="preserve">
          <source>If set hibernate the &lt;code&gt;gen_statem&lt;/code&gt;, treated in section &lt;code&gt;&lt;a href=&quot;#Hibernation&quot;&gt;Hibernation&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">세트가 최대 절전 모드로하면 &lt;code&gt;gen_statem&lt;/code&gt; 을 , 섹션 처리 &lt;code&gt;&lt;a href=&quot;#Hibernation&quot;&gt;Hibernation&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60eef1c452cfc1dd1bd601c01baa121d5df8c903" translate="yes" xml:space="preserve">
          <source>If set in binary mode (&lt;code&gt;binary&lt;/code&gt; or &lt;code&gt;{binary, true}&lt;/code&gt;), the I/O server sends binary data (encoded in UTF-8) as answers to the &lt;code&gt;get_line&lt;/code&gt;, &lt;code&gt;get_chars&lt;/code&gt;, and, if possible, &lt;code&gt;get_until&lt;/code&gt; requests (for details, see section &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt;) in the User's Guide). The immediate effect is that &lt;code&gt;&lt;a href=&quot;#get_chars-2&quot;&gt;get_chars/2,3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; return UTF-8 binaries instead of lists of characters for the affected I/O device.</source>
          <target state="translated">이진 모드 ( &lt;code&gt;binary&lt;/code&gt; 또는 &lt;code&gt;{binary, true}&lt;/code&gt; )로 설정된 경우 I / O 서버는 이진 데이터 (UTF-8로 인코딩 됨)를 &lt;code&gt;get_line&lt;/code&gt; , &lt;code&gt;get_chars&lt;/code&gt; 및 가능한 경우 &lt;code&gt;get_until&lt;/code&gt; 요청에 대한 응답으로 이진 데이터를 보냅니다 (자세한 내용은 참조). 사용 설명서 &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt; ) 섹션을 참조하십시오. 즉각적인 효과는 &lt;code&gt;&lt;a href=&quot;#get_chars-2&quot;&gt;get_chars/2,3&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; 가 영향을받는 I / O 장치의 문자 목록 대신 UTF-8 바이너리를 반환한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="60e11f2d401fbb6a7bc13e95b2d0df9464865aea" translate="yes" xml:space="preserve">
          <source>If set postpone the current event, see section &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;Postponing Events&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">현재 이벤트 연기를 설정 한 경우 이벤트 &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;Postponing Events&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ff2642f766dbab3720562602e51b82a07e9e8906" translate="yes" xml:space="preserve">
          <source>If set the scheduler id is to be included by the tracer.</source>
          <target state="translated">설정된 경우 스케줄러 ID가 추적 프로그램에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b36ae2f0946222aa466ec9f357bec978063329ec" translate="yes" xml:space="preserve">
          <source>If set the tracepoint has included additional data about the trace event. What the additional data is depends on which &lt;code&gt;TraceTag&lt;/code&gt; has been triggered. The &lt;code&gt;extra&lt;/code&gt; trace data corresponds to the fifth element in the trace tuples described in &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">추적 점이 설정된 경우 추적 이벤트에 대한 추가 데이터가 포함됩니다. 추가 데이터는 트리거 된 &lt;code&gt;TraceTag&lt;/code&gt; 에 따라 다릅니다 . &lt;code&gt;extra&lt;/code&gt; 추적 튜플의 5 요소로 추적 데이터에 대응에 설명 &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="537421ac5bc876e1157770197d20f5be1d7bdfa8" translate="yes" xml:space="preserve">
          <source>If set the tracer has been requested to include a time stamp.</source>
          <target state="translated">설정된 경우 추적 프로그램에 타임 스탬프를 포함하도록 요청되었습니다.</target>
        </trans-unit>
        <trans-unit id="ebb92b7f506965bd75353ec4f02388501a5389c5" translate="yes" xml:space="preserve">
          <source>If set the tracer has been requested to include the output of a match specification that was run.</source>
          <target state="translated">설정된 경우 추적 프로그램이 실행 된 일치 스펙의 출력을 포함하도록 요청되었습니다.</target>
        </trans-unit>
        <trans-unit id="c658f8f2f205584d1fb8b1c5da7c1178ed36dd48" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt;, error reports are not displayed.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정하면 오류 보고서가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="310d96f77be1e1791ce6fea41e63aca706ddcee9" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt; a header field is added to logger_formatter's part of &lt;code&gt;Metadata&lt;/code&gt;. The value of this field is a string similar to the header created by the old &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; event handlers. It can be included in the log event by adding the list &lt;code&gt;[logger_formatter,header]&lt;/code&gt; to the template. See the description of the &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; type for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정 하면 헤더 필드가 logger_formatter의 &lt;code&gt;Metadata&lt;/code&gt; 부분에 추가됩니다 . 이 필드의 값은 이전 &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; 이벤트 핸들러에 의해 작성된 헤더와 유사한 문자열 입니다. &lt;code&gt;[logger_formatter,header]&lt;/code&gt; 목록 을 템플리트 에 추가하여 로그 이벤트에 포함시킬 수 있습니다 . 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; 유형에 대한 설명 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4ce4e9a3ec15985becd6d1fc4438e42ee9f02d87" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, all newlines in the message are replaced with &lt;code&gt;&quot;, &quot;&lt;/code&gt;, and white spaces following directly after newlines are removed. Notice that newlines added by the &lt;code&gt;template&lt;/code&gt; parameter are not replaced.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정 하면 메시지의 모든 줄 바꿈이 줄 바꿈이 제거 된 직후의 &lt;code&gt;&quot;, &quot;&lt;/code&gt; 및 공백 으로 바뀝니다 . &lt;code&gt;template&lt;/code&gt; 매개 변수로 추가 된 줄 바꿈 은 바뀌지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7bc2e449028a1b238287b1e7e1da57633ce0aa2" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;ct_master logs&lt;/code&gt; are written on a primitive HTML format, not using the &lt;code&gt;Common Test&lt;/code&gt; CSS style sheet.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정 되면 &lt;code&gt;ct_master logs&lt;/code&gt; 는 &lt;code&gt;Common Test&lt;/code&gt; CSS 스타일 시트를 사용하지 않고 기본 HTML 형식으로 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="c67db27336a237041f3f770706b8f2027a618516" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, this makes &lt;code&gt;epp_dodger&lt;/code&gt; try to repair the source code as it seems fit, in certain cases where parsing would otherwise fail. Currently, it inserts &lt;code&gt;++&lt;/code&gt;-operators between string literals and macros where it looks like concatenation was intended. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">로 설정하면 &lt;code&gt;true&lt;/code&gt; ,이 차종 &lt;code&gt;epp_dodger&lt;/code&gt; 는 적합한 것으로 분석하는 경우 어떤 경우에는, 소스 코드를 복구하려고 그렇지 않으면 실패합니다. 현재 문자열 리터럴과 매크로 사이에 &lt;code&gt;++&lt;/code&gt; 연산자를 삽입 하여 연결이 의도 된 것처럼 보입니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="553412c0540657c6dfbc0cf5ff30e8dae32d51db" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, use the server preference for cipher selection. If set to &lt;code&gt;false&lt;/code&gt; (the default), use the client preference.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정된 경우 암호 선택에 서버 환경 설정을 사용하십시오. 로 설정하면 &lt;code&gt;false&lt;/code&gt; (기본), 클라이언트 기본 설정을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="845d16e801c4d035d7da73e779db3b12f92e8193" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, workarounds for known server deviations from the HTTP-standard are enabled.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정 하면 HTTP 표준에서 알려진 서버 편차에 대한 해결 방법이 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="4e5151c0c30a4e7bb11fe24669fcb768cff8dff0" translate="yes" xml:space="preserve">
          <source>If set to anything else than &lt;code&gt;0&lt;/code&gt;, it makes all times displayed by &lt;code&gt;run_erl&lt;/code&gt; to be in UTC (GMT, CET, MET, without Daylight Saving Time), rather than in local time. This does not affect data coming from Erlang, only the logs output directly by &lt;code&gt;run_erl&lt;/code&gt;. Application SASL can be modified accordingly by setting the Erlang application variable &lt;code&gt;utc_log&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; 이외의 값으로 설정하면 &lt;code&gt;run_erl&lt;/code&gt; 에 의해 표시된 모든 시간 이 현지 시간이 아닌 UTC ( CMT , CET, MET, 일광 절약 시간 없음)로 표시됩니다. 이것은 Erlang에서 오는 데이터에는 영향을 미치지 않으며 &lt;code&gt;run_erl&lt;/code&gt; 에 의해 직접 출력되는 로그에만 영향을 미칩니다 . Erlang 애플리케이션 변수 &lt;code&gt;utc_log&lt;/code&gt; 를 &lt;code&gt;true&lt;/code&gt; 로 설정하여 애플리케이션 SASL을 적절히 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="54ecba8897a2d3cf6ca4714afe4059ed1a0bc69c" translate="yes" xml:space="preserve">
          <source>If set to false (the default value), only one login is handled at a time. If set to true, an unlimited number of login attempts are allowed simultaneously.</source>
          <target state="translated">false (기본값)로 설정하면 한 번에 하나의 로그인 만 처리됩니다. true로 설정하면 무제한의 로그인 시도가 동시에 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="f7e5e755a8f0aa4316d9b9f5d9dcea02be971e72" translate="yes" xml:space="preserve">
          <source>If set to other than &quot;NoPassword&quot;, the password is required for all API calls. If the password is set to &quot;DummyPassword&quot;, the password must be changed before any other API calls. To secure the authenticating data, the password must be changed after the web server is started. Otherwise it is written in clear text in the configuration file.</source>
          <target state="translated">&quot;NoPassword&quot;이외로 설정하면 모든 API 호출에 비밀번호가 필요합니다. 비밀번호가 &quot;DummyPassword&quot;로 설정된 경우 다른 API 호출 전에 비밀번호를 변경해야합니다. 인증 데이터를 보호하려면 웹 서버가 시작된 후 비밀번호를 변경해야합니다. 그렇지 않으면 구성 파일에 일반 텍스트로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="cbc8baf201837b9902d99d9c6ceeaafc45b233fd" translate="yes" xml:space="preserve">
          <source>If several fields are to be assigned the same value, the following construction can be used:</source>
          <target state="translated">여러 필드에 동일한 값을 할당하려면 다음 구성을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21ef3b935d35dcc97954564f91b02dc29963a181" translate="yes" xml:space="preserve">
          <source>If so, or if possibly needed in future versions, then you should consider using &lt;code&gt;gen_statem&lt;/code&gt; over &lt;code&gt;gen_server&lt;/code&gt;.</source>
          <target state="translated">그렇다면 향후 버전에서 필요할 경우 &lt;code&gt;gen_statem&lt;/code&gt; 보다 &lt;code&gt;gen_server&lt;/code&gt; 사용 을 고려해야 합니다.</target>
        </trans-unit>
        <trans-unit id="33f2cb0ac87e42cdbdf8827c536efd85bb8b5ca2" translate="yes" xml:space="preserve">
          <source>If some of the found BEAM files contain &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt;, then those modules are checked and a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">발견 된 BEAM 파일 중 일부에 &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; 포함 된 경우 해당 모듈을 검사하고 튜플 목록이 리턴됩니다. 각 튜플의 첫 번째 요소는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="6a5a8a25ced47d4519279df0ad60d300b9fdd3ac" translate="yes" xml:space="preserve">
          <source>If some variables were present in the configuration, but are not loaded using this function, they are removed from the configuration table together with their aliases.</source>
          <target state="translated">구성에 일부 변수가 있지만이 기능을 사용하여로드되지 않은 경우, 별명과 함께 구성 테이블에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="908c252e088323e888f147ff16d100c7706161d0" translate="yes" xml:space="preserve">
          <source>If something goes wrong, the function can also return an error tuple &lt;code&gt;{error,Error}&lt;/code&gt;.</source>
          <target state="translated">문제가 발생하면이 함수는 오류 튜플 &lt;code&gt;{error,Error}&lt;/code&gt; 도 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="70476ad38abe74628a91e231b10da869d250c572" translate="yes" xml:space="preserve">
          <source>If specified by its filename, the filename can include a path and the &lt;code&gt;.erl&lt;/code&gt; extension can be omitted. The object code &lt;code&gt;Module.beam&lt;/code&gt; is searched for first in the same directory as the source code, then in an &lt;code&gt;ebin&lt;/code&gt; directory next to it, and then in the current path.</source>
          <target state="translated">파일 이름으로 지정된 경우 파일 이름에 경로가 포함될 수 있으며 &lt;code&gt;.erl&lt;/code&gt; 확장자는 생략 할 수 있습니다. 먼저 소스 코드와 동일한 디렉토리에서 오브젝트 코드 &lt;code&gt;Module.beam&lt;/code&gt; 을 검색 한 다음 옆 에있는 &lt;code&gt;ebin&lt;/code&gt; 디렉토리에서 현재 경로를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="50b19f1c8b9a65cb742065615e51dec1da364a91" translate="yes" xml:space="preserve">
          <source>If specified by its module name, the object code &lt;code&gt;Module.beam&lt;/code&gt; is searched for in the current path. The source code &lt;code&gt;Module.erl&lt;/code&gt; is searched for first in the same directory as the object code, then in an &lt;code&gt;src&lt;/code&gt; directory next to it.</source>
          <target state="translated">모듈 이름으로 지정된 경우 현재 경로에서 오브젝트 코드 &lt;code&gt;Module.beam&lt;/code&gt; 을 검색합니다. 소스 코드 &lt;code&gt;Module.erl&lt;/code&gt; 은 먼저 오브젝트 코드와 동일한 디렉토리에서 검색된 후 그 옆 의 &lt;code&gt;src&lt;/code&gt; 디렉토리에서 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="a8d0b6cf013a5c0d8770719696ef065b65aefbe7" translate="yes" xml:space="preserve">
          <source>If starting the test with a general verbosity level of 50 (&lt;code&gt;?STD_VERBOSITY&lt;/code&gt;):</source>
          <target state="translated">일반 상세 레벨 50 ( &lt;code&gt;?STD_VERBOSITY&lt;/code&gt; ) 으로 테스트를 시작하는 경우 :</target>
        </trans-unit>
        <trans-unit id="bff20119788e7f9fcb0386bb0ba5f7207f1771ed" translate="yes" xml:space="preserve">
          <source>If starting the test with:</source>
          <target state="translated">다음으로 테스트를 시작하는 경우 :</target>
        </trans-unit>
        <trans-unit id="26a65a58a274c5e83de124292f3254f1ac090467" translate="yes" xml:space="preserve">
          <source>If status was &lt;code&gt;alive&lt;/code&gt;, node &lt;code&gt;A&lt;/code&gt; answers with another status message containing either &lt;code&gt;true&lt;/code&gt;, which means that the connection is to continue (the old connection from this node is broken), or &lt;code&gt;false&lt;/code&gt;, which means that the connection is to be closed (the connection attempt was a mistake.</source>
          <target state="translated">status가 &lt;code&gt;alive&lt;/code&gt; 상태 인 경우 노드 &lt;code&gt;A&lt;/code&gt; 는 &lt;code&gt;true&lt;/code&gt; 를 포함하는 다른 상태 메시지로 응답 합니다 . 이는 연결이 계속됨 (이 노드의 이전 연결이 끊어 졌음 을 의미 함 ) 또는 연결을 닫을 것임을 의미하는 &lt;code&gt;false&lt;/code&gt; 입니다 (연결 시도는 실수였다.</target>
        </trans-unit>
        <trans-unit id="7b9b70b7cbd405f4ef48bddbc33725b6c4cf3c30" translate="yes" xml:space="preserve">
          <source>If sticky locks are used, the code must first be changed as follows:</source>
          <target state="translated">고정 잠금 장치를 사용하는 경우 먼저 코드를 다음과 같이 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="c7eb71447bfe22582a45b3625c21c45102fb30a5" translate="yes" xml:space="preserve">
          <source>If subexpressions are specified in the regular expression, the matching subexpressions are returned in the resulting list as well. For example:</source>
          <target state="translated">하위 표현식이 정규 표현식에 지정된 경우 일치하는 하위 표현식도 결과 목록에 리턴됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0b8ddaa042ba6e6a6e6f3aa8c56ca060f0b33630" translate="yes" xml:space="preserve">
          <source>If successful</source>
          <target state="translated">성공하면</target>
        </trans-unit>
        <trans-unit id="211664819a4310bd77112b972f6e1afd6ef67b18" translate="yes" xml:space="preserve">
          <source>If successful, the function must return the updated internal state in an &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; tuple.</source>
          <target state="translated">성공하면 함수는 &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; 튜플 에서 업데이트 된 내부 상태를 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4e8c6ee9fde6d55757690d169dc69ff0e99e718e" translate="yes" xml:space="preserve">
          <source>If successful, the function must return the updated internal state.</source>
          <target state="translated">성공하면 함수는 업데이트 된 내부 상태를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="932989b7c1361152a0b0809cc73761645d677b31" translate="yes" xml:space="preserve">
          <source>If successful, the function returns &lt;code&gt;ok&lt;/code&gt;. If the child specification identified by &lt;code&gt;Id&lt;/code&gt; exists but the corresponding child process is running or is about to be restarted, the function returns &lt;code&gt;{error,running}&lt;/code&gt; or &lt;code&gt;{error,restarting}&lt;/code&gt;, respectively. If the child specification identified by &lt;code&gt;Id&lt;/code&gt; does not exist, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;.</source>
          <target state="translated">성공하면이 함수는 &lt;code&gt;ok&lt;/code&gt; 를 반환합니다 . &lt;code&gt;Id&lt;/code&gt; 로 식별 된 하위 스펙 이 존재하지만 해당 하위 프로세스가 실행 중이거나 다시 시작될 예정인 경우, 함수는 각각 &lt;code&gt;{error,running}&lt;/code&gt; 또는 &lt;code&gt;{error,restarting}&lt;/code&gt; 을 리턴합니다 . &lt;code&gt;Id&lt;/code&gt; 로 식별 된 하위 스펙 이 존재하지 않으면 함수는 &lt;code&gt;{error,not_found}&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2a7459c85147eae0af4289577e8d8cb1033070c0" translate="yes" xml:space="preserve">
          <source>If successful, the function returns &lt;code&gt;ok&lt;/code&gt;. If there is no child specification with the specified &lt;code&gt;Id&lt;/code&gt;, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;.</source>
          <target state="translated">성공하면이 함수는 &lt;code&gt;ok&lt;/code&gt; 를 반환합니다 . 지정된 &lt;code&gt;Id&lt;/code&gt; 의 하위 스펙이 없으면 함수는 &lt;code&gt;{error,not_found}&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="6c554336fd49d3d6148f3873055df50396396c91" translate="yes" xml:space="preserve">
          <source>If successful, the function returns &lt;code&gt;{ok,State}&lt;/code&gt; or &lt;code&gt;{ok,State,hibernate}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the initial internal state of the event handler.</source>
          <target state="translated">성공하면 함수는 &lt;code&gt;{ok,State}&lt;/code&gt; 또는 &lt;code&gt;{ok,State,hibernate}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;State&lt;/code&gt; 는 이벤트 핸들러의 초기 내부 상태입니다.</target>
        </trans-unit>
        <trans-unit id="2203259483f235e1b092ade2119d4c07d6241b2e" translate="yes" xml:space="preserve">
          <source>If successful, this function sets &lt;code&gt;*map_out&lt;/code&gt; to the new map and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;map_in&lt;/code&gt; is not a map or if it does not contain &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">성공하면이 함수는 &lt;code&gt;*map_out&lt;/code&gt; 을 새 맵으로 설정하고 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 반환 &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;map_in&lt;/code&gt; 가 그것을 포함하지 않는 경우지도가 아니거나 &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba18cbb490e9c8d2f3b6ef180516f04715f3defa" translate="yes" xml:space="preserve">
          <source>If successful, this function sets &lt;code&gt;*map_out&lt;/code&gt; to the new map and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;map_in&lt;/code&gt; is not a map.</source>
          <target state="translated">성공하면이 함수는 &lt;code&gt;*map_out&lt;/code&gt; 을 새 맵으로 설정하고 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . &lt;code&gt;map_in&lt;/code&gt; 이지도 가 아닌 경우 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c57bdf287994755b6e44fdfc60facab5a9f11a53" translate="yes" xml:space="preserve">
          <source>If successful, this function sets &lt;code&gt;*map_out&lt;/code&gt; to the new map and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; there are any duplicate keys.</source>
          <target state="translated">성공하면이 함수는 &lt;code&gt;*map_out&lt;/code&gt; 을 새 맵으로 설정하고 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 중복 키가 있으면 &lt;code&gt;false&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="235077c5f09d774b9f3db45cd19ec2e827847cd9" translate="yes" xml:space="preserve">
          <source>If such a clause cannot be found, a &lt;code&gt;function_clause&lt;/code&gt; runtime error occurs.</source>
          <target state="translated">이러한 절을 찾을 수 없으면 &lt;code&gt;function_clause&lt;/code&gt; 런타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="283f86d98b5d92d6ad1ce6bfc63055da78218576" translate="yes" xml:space="preserve">
          <source>If such a clause is found, the corresponding clause body is evaluated. That is, the expressions in the body are evaluated sequentially and the value of the last expression is returned.</source>
          <target state="translated">그러한 절이 발견되면 해당 절 본문이 평가됩니다. 즉, 본문의 표현식이 순차적으로 평가되고 마지막 표현식의 값이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="b2fcf16676aca666b69b183aa34b448a75829f94" translate="yes" xml:space="preserve">
          <source>If synchronization is not possible, an error report is sent to the error logger (see also &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">동기화가 불가능하면 오류 보고서가 오류 로거로 전송됩니다 ( &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt; 참조 ) .</target>
        </trans-unit>
        <trans-unit id="36f347d7b778b3a4f6fb90496e2acb23c2a7a864" translate="yes" xml:space="preserve">
          <source>If syntax errors are discovered in these files they are reported with the function &lt;code&gt;config_err/2&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;snmpa_error_report&quot;&gt;error report module&lt;/a&gt;&lt;/code&gt; at start-up.</source>
          <target state="translated">이러한 파일에서 구문 오류가 발견되면 시작시 &lt;code&gt;&lt;a href=&quot;snmpa_error_report&quot;&gt;error report module&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;config_err/2&lt;/code&gt; 기능으로보고 됩니다.</target>
        </trans-unit>
        <trans-unit id="e5db19b0c235be5b01f2325198c01dc60d89585f" translate="yes" xml:space="preserve">
          <source>If tagged allocations are not enabled on any of the specified allocator types, the call will fail with &lt;code&gt;{error, not_enabled}&lt;/code&gt;.</source>
          <target state="translated">지정된 할당 자 유형에서 태그 지정된 할당을 사용하지 않으면 &lt;code&gt;{error, not_enabled}&lt;/code&gt; 호출이 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="430e9485ed1c99e4dac7dca3da3dfa4aa8c39ab8" translate="yes" xml:space="preserve">
          <source>If term &lt;code&gt;MatchSpec&lt;/code&gt; cannot be compiled (does not represent a valid match specification), a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">용어 &lt;code&gt;MatchSpec&lt;/code&gt; 을 컴파일 할 수없는 경우 (유효한 일치 스펙을 나타내지 않음) &lt;code&gt;badarg&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b34a1091c99e6fe485396a9633ee9cf35b5e6022" translate="yes" xml:space="preserve">
          <source>If test suites or help modules include header files stored in other locations than the test directory, these include directories can be specified by using flag &lt;code&gt;-include&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;, or option &lt;code&gt;include&lt;/code&gt; with &lt;code&gt;ct:run_test/1&lt;/code&gt;. Also, an include path can be specified with an OS environment variable, &lt;code&gt;CT_INCLUDE_PATH&lt;/code&gt;.</source>
          <target state="translated">테스트 스위트 또는 도움말 모듈 테스트 디렉토리가 아닌 다른 위치에 저장된 헤더 파일을 포함하는 경우,이 플래그를 사용하여 지정할 수 있습니다 디렉토리 포함 &lt;code&gt;-include&lt;/code&gt; 을 함께 &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; , 또는 옵션 &lt;code&gt;include&lt;/code&gt; 으로 &lt;code&gt;ct:run_test/1&lt;/code&gt; . 또한 OS 환경 변수 &lt;code&gt;CT_INCLUDE_PATH&lt;/code&gt; 를 사용 하여 포함 경로를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c9279b9016abb718b19436b545788de84fa2134f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; of the Xref server is &lt;code&gt;functions&lt;/code&gt;, BEAM files that contain no &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; are ignored.</source>
          <target state="translated">외부 참조 서버 의 &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; 가 &lt;code&gt;functions&lt;/code&gt; 인 경우 &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; 가 없는 BEAM 파일 은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="c813a10d16024092b88cb717d0c880a3632b14a1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; of the Xref server is &lt;code&gt;functions&lt;/code&gt;, and the BEAM file contains no &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt;, the error message &lt;code&gt;no_debug_info&lt;/code&gt; is returned.</source>
          <target state="translated">외부 참조 서버 의 &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; 가 &lt;code&gt;functions&lt;/code&gt; 이고 BEAM 파일에 &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; 가 없으면 오류 메시지 &lt;code&gt;no_debug_info&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0b9197e338e3401c234d140df6601d7f0bd0de9f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;handle_event_function&lt;/code&gt;, the state can be any term. After a state change (&lt;code&gt;NextState =/= State&lt;/code&gt;), all postponed events are retried.</source>
          <target state="translated">경우 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 입니다 &lt;code&gt;handle_event_function&lt;/code&gt; , 상태는 어떤 용어가 될 수 있습니다. 상태 변경 ( &lt;code&gt;NextState =/= State&lt;/code&gt; ) 후에 연기 된 모든 이벤트가 재 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="74c7a5f40b37419e0dfdb9c000a09ebaefa7ede7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;state_functions&lt;/code&gt;, the state must be of this type. After a state change (&lt;code&gt;NextState =/= State&lt;/code&gt;), all postponed events are retried.</source>
          <target state="translated">경우 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 입니다 &lt;code&gt;state_functions&lt;/code&gt; , 상태는이 유형이어야합니다. 상태 변경 ( &lt;code&gt;NextState =/= State&lt;/code&gt; ) 후에 연기 된 모든 이벤트가 재 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="720d616c478f9b1d1e0e376e567468c7cbccb10c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt;ERL_DRV_FLAG_SOFT_BUSY&lt;/a&gt;&lt;/code&gt; has been set in the &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt;, data can be forced into the driver through &lt;code&gt;&lt;a href=&quot;erlang#port_command-3&quot;&gt;erlang:port_command(Port, Data, [force])&lt;/a&gt;&lt;/code&gt; even if the driver has signaled that it is busy.</source>
          <target state="translated">경우] &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt;ERL_DRV_FLAG_SOFT_BUSY&lt;/a&gt;&lt;/code&gt; 가 에 설정된 &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; 데이터를 통해 운전자에 강제 할 수 &lt;code&gt;&lt;a href=&quot;erlang#port_command-3&quot;&gt;erlang:port_command(Port, Data, [force])&lt;/a&gt;&lt;/code&gt; 드라이버가 중임 시그널링 되더라도.</target>
        </trans-unit>
        <trans-unit id="b5b8a260b0935e82c1c23c647ce2490c52e709f8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Data&lt;/code&gt; argument for &lt;code&gt;port_control/3&lt;/code&gt; is a binary, the driver will be passed a pointer to the contents of the binary and the binary will not be copied. If the &lt;code&gt;Data&lt;/code&gt; argument is an iolist (list of binaries and lists), all binaries in the iolist will be copied.</source>
          <target state="translated">&lt;code&gt;port_control/3&lt;/code&gt; 의 &lt;code&gt;Data&lt;/code&gt; 인수 가 2 진이면 드라이버는 2 진의 내용에 대한 포인터를 전달 받으며 2 진은 복사되지 않습니다. 경우 &lt;code&gt;Data&lt;/code&gt; 인수가 iolist (바이너리와리스트의 목록이)되면, iolist의 모든 바이너리가 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="9f73654015166f98aadbf7b3b123e17e68232e9b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;HEART_COMMAND&lt;/code&gt; environment variable is to be set in the &lt;code&gt;start&lt;/code&gt; script in &lt;strong&gt;Starting Erlang&lt;/strong&gt;, and if the value is to be set to the path of the Solaris &lt;code&gt;reboot&lt;/code&gt; command, that is:</source>
          <target state="translated">는 IF &lt;code&gt;HEART_COMMAND&lt;/code&gt; 의 환경 변수에 설정되는 &lt;code&gt;start&lt;/code&gt; 에 스크립트 &lt;strong&gt;얼랑을 시작&lt;/strong&gt; 하고, 값이 솔라리스의 경로로 설정하는 경우 &lt;code&gt;reboot&lt;/code&gt; 명령, 즉 :</target>
        </trans-unit>
        <trans-unit id="944e73a76d9846f1844b61fadd1ef6be5fa46f07" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Item&lt;/code&gt; is a string &quot;&amp;lt;X.Y.Z&amp;gt;&quot; as returned from &lt;code&gt;pid_to_list/1&lt;/code&gt;, the process &lt;code&gt;&amp;lt;X.Y.Z&amp;gt;&lt;/code&gt; is traced.</source>
          <target state="translated">경우] &lt;code&gt;Item&lt;/code&gt; 에서 반환 스트링 &quot;&amp;lt;XYZ&amp;gt;&quot;이다 &lt;code&gt;pid_to_list/1&lt;/code&gt; , 프로세스 &lt;code&gt;&amp;lt;X.Y.Z&amp;gt;&lt;/code&gt; 추적된다.</target>
        </trans-unit>
        <trans-unit id="61eca5d5aa872cbcbe9a56199f7268cf843102ce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Mod&lt;/code&gt; argument is given, the result contains a &lt;code&gt;ModAnalysis&lt;/code&gt; tuple for module &lt;code&gt;Mod&lt;/code&gt; only, otherwise the result contains one &lt;code&gt;ModAnalysis&lt;/code&gt; tuple for all modules returned from &lt;code&gt;code:all_loaded()&lt;/code&gt; except &lt;code&gt;cprof&lt;/code&gt; itself.</source>
          <target state="translated">는 IF &lt;code&gt;Mod&lt;/code&gt; 인수가 주어, 그 결과는 포함 &lt;code&gt;ModAnalysis&lt;/code&gt; 의 모듈에 대한 튜플 &lt;code&gt;Mod&lt;/code&gt; , 만, 그렇지 않으면 결과는 하나 포함 &lt;code&gt;ModAnalysis&lt;/code&gt; 의 에서 반환 된 모든 모듈에 대한 튜플 &lt;code&gt;code:all_loaded()&lt;/code&gt; 을 제외하고 &lt;code&gt;cprof&lt;/code&gt; 자체.</target>
        </trans-unit>
        <trans-unit id="692d7ddeb29364bd451d87d06edbd7eec80bea02" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; for the next &lt;code&gt;AtomCacheRef&lt;/code&gt; has been set, a &lt;code&gt;NewAtomCacheRef&lt;/code&gt; on the following format follows:</source>
          <target state="translated">는 IF &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; 다음에 대한 &lt;code&gt;AtomCacheRef&lt;/code&gt; 이 설정되어하는 &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 다음과 같은 형식에는 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="04c0254fa6d70d431ad5a486ddf123ee44618a15" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; for the next &lt;code&gt;AtomCacheRef&lt;/code&gt; has not been set, a &lt;code&gt;CachedAtomRef&lt;/code&gt; on the following format follows:</source>
          <target state="translated">는 IF &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; 다음에 대한 &lt;code&gt;AtomCacheRef&lt;/code&gt; 이 설정되어 있지 않은하는 &lt;code&gt;CachedAtomRef&lt;/code&gt; 다음과 같은 형식에는 다음과 같습니다 :</target>
        </trans-unit>
        <trans-unit id="5abbbca51e0d96970bfc6e932a6073fa6c1b8d91" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;WrapSize&lt;/code&gt; is specified as &lt;code&gt;{time, WrapTime}&lt;/code&gt;, the current file is closed when it has been open more than &lt;code&gt;WrapTime&lt;/code&gt; milliseconds, regardless of it being empty or not.</source>
          <target state="translated">경우 &lt;code&gt;WrapSize&lt;/code&gt; 가 로 지정된 &lt;code&gt;{time, WrapTime}&lt;/code&gt; 더 이상 열려 경우, 현재 파일이 닫히고 &lt;code&gt;WrapTime&lt;/code&gt; 의 밀리 초에 관계없이 그것의 빈 여부 것.</target>
        </trans-unit>
        <trans-unit id="3bce9200cd49c0302061751c509bff17706e1d1e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;collector_pid&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; a new &lt;code&gt;et_collector&lt;/code&gt; will be started with the following parameter settings: &lt;code&gt;parent_pid&lt;/code&gt;, &lt;code&gt;event_order&lt;/code&gt;, &lt;code&gt;trace_global&lt;/code&gt;, &lt;code&gt;trace_pattern&lt;/code&gt;, &lt;code&gt;trace_port&lt;/code&gt;, &lt;code&gt;trace_max_queue&lt;/code&gt;, &lt;code&gt;trace_client&lt;/code&gt;, &lt;code&gt;dict_insert&lt;/code&gt; and &lt;code&gt;dict_delete&lt;/code&gt;. The new &lt;code&gt;et_viewer&lt;/code&gt; will register itself as an &lt;code&gt;et_collector&lt;/code&gt; subscriber.</source>
          <target state="translated">&lt;code&gt;collector_pid&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 경우 &lt;code&gt;parent_pid&lt;/code&gt; , &lt;code&gt;event_order&lt;/code&gt; , &lt;code&gt;trace_global&lt;/code&gt; , &lt;code&gt;trace_pattern&lt;/code&gt; , &lt;code&gt;trace_port&lt;/code&gt; , &lt;code&gt;trace_max_queue&lt;/code&gt; , &lt;code&gt;trace_client&lt;/code&gt; , &lt;code&gt;dict_insert&lt;/code&gt; 및 &lt;code&gt;dict_delete&lt;/code&gt; 매개 변수 설정 으로 새 &lt;code&gt;et_collector&lt;/code&gt; 가 시작됩니다 . 새로운 &lt;code&gt;et_viewer&lt;/code&gt; 는 자신을 &lt;code&gt;et_collector&lt;/code&gt; 가입자 로 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="1705267e03ee01724d59b40bc5f0214567319c46" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;detailed&lt;/code&gt; and/or &lt;code&gt;per_cpu&lt;/code&gt; option is given, this is the CPU number, or a list of the CPU numbers.</source>
          <target state="translated">는 IF &lt;code&gt;detailed&lt;/code&gt; 및 / 또는 &lt;code&gt;per_cpu&lt;/code&gt; 의 옵션이 주어, 이것은 CPU 번호, 또는 CPU 번호의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e77d603a3001a1e9c1762cdeaacfe7bfa22a3f03" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;detailed&lt;/code&gt; option is given, this is a list of &lt;code&gt;{State, Share}&lt;/code&gt; tuples, where each tuple contains information about a processor state that has been identified as a busy processor state (see below). The atom &lt;code&gt;State&lt;/code&gt; is the name of the state, and the float &lt;code&gt;Share&lt;/code&gt; represents the percentage share of the CPU cycles spent in this state since the last call to &lt;code&gt;util/0&lt;/code&gt; or &lt;code&gt;util/1&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;detailed&lt;/code&gt; 옵션이 주어,이 목록입니다 &lt;code&gt;{State, Share}&lt;/code&gt; 각 튜플은 바쁜 프로세서 상태로 확인 된 프로세서 상태에 대한 정보를 포함 튜플 (아래 참조). atom &lt;code&gt;State&lt;/code&gt; 는 상태 의 이름이며 float &lt;code&gt;Share&lt;/code&gt; 는 &lt;code&gt;util/0&lt;/code&gt; 또는 &lt;code&gt;util/1&lt;/code&gt; 에 대한 마지막 호출 이후이 상태에서 소비 된 CPU주기의 백분율을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="01f6b148b35fa3a772ed4cf02b8f14d1a3fb663b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;excl_lib&lt;/code&gt; option is set to &lt;code&gt;otp_root&lt;/code&gt; then reltool will not copy anything from the Erlang/OTP installation ($OTP_ROOT) into the target structure. The goal is to create a &quot;slim&quot; release which can be used together with an existing Erlang/OTP installation. The target structure will therefore only contain a &lt;code&gt;lib&lt;/code&gt; directory with the applications that were found outside of $OTP_ROOT (typically your own applications), and a &lt;code&gt;releases&lt;/code&gt; directory with the generated &lt;code&gt;.rel,&lt;/code&gt;&lt;code&gt;.script&lt;/code&gt; and &lt;code&gt;.boot&lt;/code&gt; files.</source>
          <target state="translated">는 IF &lt;code&gt;excl_lib&lt;/code&gt; 의 옵션이 설정되어 &lt;code&gt;otp_root&lt;/code&gt; 다음 reltool 대상 구조로 얼랑 / OTP 설치 ($ OTP_ROOT)에서 아무것도를 복사하지 않습니다. 목표는 기존 Erlang / OTP 설치와 함께 사용할 수있는 &quot;슬림&quot;릴리스를 작성하는 것입니다. 따라서 대상 구조에는 $ OTP_ROOT 외부에서 발견 된 응용 프로그램 (일반적으로 자체 응용 프로그램)이 있는 &lt;code&gt;lib&lt;/code&gt; 디렉토리와 생성 된 &lt;code&gt;.rel,&lt;/code&gt; &lt;code&gt;.script&lt;/code&gt; 및 &lt;code&gt;.boot&lt;/code&gt; 파일이 있는 &lt;code&gt;releases&lt;/code&gt; 디렉토리 만 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="be47c608e84207db441f123dc3b022c3bdfe3832" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fprof&lt;/code&gt; server is not running, this function returns immediately with the same return value.</source>
          <target state="translated">는 IF &lt;code&gt;fprof&lt;/code&gt; 의 서버가 실행되지 않고,이 기능은 같은 반환 값을 즉시 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4cfc64c80cf0754288971ed2f55082185d9efbaf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_event&lt;/code&gt; is to be able to receive other messages than events, the callback function &lt;code&gt;handle_info(Info, StateName, StateData)&lt;/code&gt; must be implemented to handle them. Examples of other messages are exit messages, if the &lt;code&gt;gen_event&lt;/code&gt; is linked to other processes (than the supervisor) and trapping exit signals.</source>
          <target state="translated">는 IF &lt;code&gt;gen_event&lt;/code&gt; 이 이벤트가 아닌 다른 메시지를 수신 할 수있게하는 것입니다, 콜백 함수의 &lt;code&gt;handle_info(Info, StateName, StateData)&lt;/code&gt; 이를 처리하기 위해 구현해야합니다. &lt;code&gt;gen_event&lt;/code&gt; 가 다른 프로세스 (감독자보다)에 연결되고 종료 신호를 트래핑하는 경우 다른 메시지의 예는 종료 메시지 입니다.</target>
        </trans-unit>
        <trans-unit id="5aad944a4a47c5bc78a9273e949274df0e9ed557" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; is not part of a supervision tree, a stop function can be useful, for example:</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; 가 감독 트리의 일부가 아닌 경우 중지 기능이 유용 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4832a13c9684cb02c06fa828f9150cd6ab481d33" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; is part of a supervision tree, no stop function is needed. The &lt;code&gt;gen_server&lt;/code&gt; is automatically terminated by its supervisor. Exactly how this is done is defined by a &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; set in the supervisor.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; 가 감독 트리의 일부인 경우 중지 기능이 필요하지 않습니다. &lt;code&gt;gen_server&lt;/code&gt; 은 자동으로 관리자에 의해 종료됩니다. 정확하게이 작업을 수행하는 방법 은 수퍼바이저에 설정된 &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="3b4cc7e563bc4ab43d392728008910f94dfb10ae" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; is to be able to receive other messages than requests, the callback function &lt;code&gt;handle_info(Info, State)&lt;/code&gt; must be implemented to handle them. Examples of other messages are exit messages, if the &lt;code&gt;gen_server&lt;/code&gt; is linked to other processes (than the supervisor) and trapping exit signals.</source>
          <target state="translated">는 IF &lt;code&gt;gen_server&lt;/code&gt; 가 요청 이외의 메시지를 수신 할 수있게하는 것입니다, 콜백 함수의 &lt;code&gt;handle_info(Info, State)&lt;/code&gt; 를 처리하기 위해 구현해야합니다. &lt;code&gt;gen_server&lt;/code&gt; 가 다른 프로세스 (감독자보다)에 연결되고 종료 신호를 트래핑하는 경우 다른 메시지의 예는 종료 메시지 입니다.</target>
        </trans-unit>
        <trans-unit id="2f9738619fd7812022c1fdbad1b01a2e041bfacc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; process is part of a supervision tree and is ordered by its supervisor to terminate, this function is called with &lt;code&gt;Reason=shutdown&lt;/code&gt; if the following conditions apply:</source>
          <target state="translated">는 IF &lt;code&gt;gen_server&lt;/code&gt; 의 프로세스가 감독 트리의 일부이며, 종료의 감독자의 지시되고,이 함수로 호출 &lt;code&gt;Reason=shutdown&lt;/code&gt; 다음과 같은 조건이 적용되는 경우 :</target>
        </trans-unit>
        <trans-unit id="deb0cd9df07520473713789c264957ed22e0fd37" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; process is successfully created and initialized, the function returns &lt;code&gt;{ok,Pid}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the &lt;code&gt;gen_server&lt;/code&gt; process. If a process with the specified &lt;code&gt;ServerName&lt;/code&gt; exists already, the function returns &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of that process.</source>
          <target state="translated">는 IF &lt;code&gt;gen_server&lt;/code&gt; 의 과정이 성공적으로 생성 및 초기화, 함수가 반환 &lt;code&gt;{ok,Pid}&lt;/code&gt; 여기서 &lt;code&gt;Pid&lt;/code&gt; 의 PID를이다 &lt;code&gt;gen_server&lt;/code&gt; 의 과정. 지정된 &lt;code&gt;ServerName&lt;/code&gt; 을 가진 프로세스 가 이미 존재하면 함수는 &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 해당 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="7b56e5a9d7d5389ddf0dc35b8aa333d9d01bbefc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; process needs to perform an action immediately after initialization or to break the execution of a callback into multiple steps, it can return &lt;code&gt;{continue,Continue}&lt;/code&gt; in place of the time-out or hibernation value, which will immediately invoke the &lt;code&gt;handle_continue/2&lt;/code&gt; callback.</source>
          <target state="translated">는 IF &lt;code&gt;gen_server&lt;/code&gt; 의 프로세스가 즉시 초기화 후 또는 여러 단계로 콜백의 실행을 중단하는 작업을 수행 할 필요가, 그것을 반환 할 수 있습니다 &lt;code&gt;{continue,Continue}&lt;/code&gt; 하는 것입니다 즉시 호출 시간 제한 또는 최대 절전 모드 값 대신에 &lt;code&gt;handle_continue/2&lt;/code&gt; 콜백 2 개</target>
        </trans-unit>
        <trans-unit id="490e75ed674d410c271a45a56872f3c49ab0b58b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is not part of a supervision tree, it can be stopped using &lt;code&gt;gen_statem:stop&lt;/code&gt;, preferably through an API function:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 이 감독 트리의 일부가 아닌 경우 &lt;code&gt;gen_statem:stop&lt;/code&gt; 을 사용하여 , 바람직하게는 API 함수를 통해 중지 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="36f4edf0379e907c933af357c419f98ac2861c66" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is part of a supervision tree and is ordered by its supervisor to terminate, this function is called with &lt;code&gt;Reason = shutdown&lt;/code&gt; if both the following conditions apply:</source>
          <target state="translated">는 IF &lt;code&gt;gen_statem&lt;/code&gt; 이 감독 트리의 일부이며, 종료의 감독자의 지시되고,이 함수로 호출 &lt;code&gt;Reason = shutdown&lt;/code&gt; 다음 조건 모두에 적용되는 경우 :</target>
        </trans-unit>
        <trans-unit id="ac199e9236c5ed4f285d3986ed2287bb9a4c55ce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is part of a supervision tree, no stop function is needed. The &lt;code&gt;gen_statem&lt;/code&gt; is automatically terminated by its supervisor. Exactly how this is done is defined by a &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; set in the supervisor.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 이 감독 트리의 일부인 경우 중지 기능이 필요하지 않습니다. &lt;code&gt;gen_statem&lt;/code&gt; 은 자동으로 관리자에 의해 종료됩니다. 정확하게이 작업을 수행하는 방법 은 수퍼바이저에 설정된 &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="622dc023e6ca738739a4198b61e3fabf701c009b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is successfully created and initialized, this function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{ok,Pid}&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the &lt;code&gt;pid()&lt;/code&gt; of the &lt;code&gt;gen_statem&lt;/code&gt;. If a process with the specified &lt;code&gt;ServerName&lt;/code&gt; exists already, this function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,{already_started,Pid}}&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the &lt;code&gt;pid()&lt;/code&gt; of that process.</source>
          <target state="translated">경우 &lt;code&gt;gen_statem&lt;/code&gt; 가 성공적으로 생성 및 초기화,이 함수가 반환 &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{ok,Pid}&lt;/a&gt;&lt;/code&gt; 여기서 &lt;code&gt;Pid&lt;/code&gt; 이다 &lt;code&gt;pid()&lt;/code&gt; 의 &lt;code&gt;gen_statem&lt;/code&gt; . 지정된 &lt;code&gt;ServerName&lt;/code&gt; 을 가진 프로세스 가 이미 존재하면이 함수는 &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,{already_started,Pid}}&lt;/a&gt;&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 해당 프로세스 의 &lt;code&gt;pid()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b7d4b7b9947ceb2e1f75b847cb2c2cefc610ce87" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;inform request behaviour&lt;/code&gt; configuration option is set to &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;{user, integer()}&lt;/code&gt;, the response (acknowledgment) to this inform-request will be sent when this function returns.</source>
          <target state="translated">경우] &lt;code&gt;inform request behaviour&lt;/code&gt; 설정 옵션이 설정되어 &lt;code&gt;user&lt;/code&gt; 또는 &lt;code&gt;{user, integer()}&lt;/code&gt; 이 통보 요청에 대한 응답 (확인 응답)이 때 함수 리턴 전송한다.</target>
        </trans-unit>
        <trans-unit id="f12a4aa7db27654fb06f0356ee419770a3c5990d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;main/1&lt;/code&gt; function in the script returns successfully, the exit status for the script is &lt;code&gt;0&lt;/code&gt;. If an exception is generated during execution, a short message is printed and the script terminates with exit status &lt;code&gt;127&lt;/code&gt;.</source>
          <target state="translated">스크립트 의 &lt;code&gt;main/1&lt;/code&gt; 함수가 성공적으로 리턴되면 스크립트의 종료 상태는 &lt;code&gt;0&lt;/code&gt; 입니다. 실행 중에 예외가 발생하면 짧은 메시지가 인쇄되고 스크립트는 종료 상태 &lt;code&gt;127&lt;/code&gt; 로 종료 됩니다.</target>
        </trans-unit>
        <trans-unit id="6df86c1718762f44b04c0cb308484d1d6c310a34" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;max_sessions&lt;/code&gt; option is set to &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;parallel_login&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the maximum number of simultaneous login attempts at any time is limited to &lt;code&gt;N-K&lt;/code&gt;, where &lt;code&gt;K&lt;/code&gt; is the number of authenticated connections present at this daemon.</source>
          <target state="translated">는 IF &lt;code&gt;max_sessions&lt;/code&gt; 의 옵션이 설정되어 &lt;code&gt;N&lt;/code&gt; 과 &lt;code&gt;parallel_login&lt;/code&gt; 가 설정되어 &lt;code&gt;true&lt;/code&gt; , 언제든지 동시 로그인 시도의 최대 수는 제한됩니다 &lt;code&gt;N-K&lt;/code&gt; , &lt;code&gt;K&lt;/code&gt; 는 이 데몬에서 현재 인증 된 연결의 수입니다.</target>
        </trans-unit>
        <trans-unit id="279c740df4997832935268858ff97ba56a5fb972" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;parse_transform&lt;/code&gt; is not applied to a module that calls this pseudo function, the call fails in runtime (with a &lt;code&gt;badarg&lt;/code&gt;). The &lt;code&gt;ets&lt;/code&gt; module exports a function with this name, but it is never to be called except when using the function in the shell. If the &lt;code&gt;parse_transform&lt;/code&gt; is properly applied by including header file &lt;code&gt;ms_transform.hrl&lt;/code&gt;, compiled code never calls the function, but the function call is replaced by a literal match specification.</source>
          <target state="translated">경우] &lt;code&gt;parse_transform&lt;/code&gt; 은 이 의사 함수를 호출하는 모듈에 적용되지 않고, 호출은 (a와 런타임 실패 &lt;code&gt;badarg&lt;/code&gt; ). &lt;code&gt;ets&lt;/code&gt; 모듈은이 이름을 가진 함수를 수출하지만 쉘의 기능을 사용하는 경우를 제외하고 호출 할 수 결코. 경우 &lt;code&gt;parse_transform&lt;/code&gt; 가 제대로 헤더 파일을 포함하여 적용 &lt;code&gt;ms_transform.hrl&lt;/code&gt; 을 , 컴파일 된 코드는 함수를 호출하지 않지만 함수 호출은 문자 그대로 일치 사양으로 대체됩니다 않았다.</target>
        </trans-unit>
        <trans-unit id="91c8b62af5511bc181fbe7c0815f7318805644f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;per_cpu&lt;/code&gt; is not given, the value(s) presented are the average of all CPUs.</source>
          <target state="translated">경우 &lt;code&gt;per_cpu&lt;/code&gt; 가 주어지지 제시 값 (들) 모든 CPU의 평균입니다.</target>
        </trans-unit>
        <trans-unit id="2c4b5f09b562c0e8df5ab61a0939a3cca6eab6e5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;qlc&lt;/code&gt; module at compile time can determine that some constant is free of integers, it does not matter which one of &lt;code&gt;==/2&lt;/code&gt; or &lt;code&gt;=:=/2&lt;/code&gt; is used:</source>
          <target state="translated">컴파일시 &lt;code&gt;qlc&lt;/code&gt; 모듈이 일부 상수에 정수가없는 것으로 판별 할 수 있으면 &lt;code&gt;==/2&lt;/code&gt; 또는 &lt;code&gt;=:=/2&lt;/code&gt; 중 어느 것이 사용되는지는 중요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="345d6310f85895e6842a34eabfe92151229e6b95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;relup&lt;/code&gt; file is relatively simple, it can be created manually. It it only to contain low-level instructions.</source>
          <target state="translated">는 IF &lt;code&gt;relup&lt;/code&gt; 의 파일이 비교적 간단, 수동으로 만들 수 있습니다. 저수준 명령 만 포함합니다.</target>
        </trans-unit>
        <trans-unit id="c30c579f26aae9f62a722f68b38557366dc19832" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction is found in the script, &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt;. This because &lt;code&gt;restart_new_emulator&lt;/code&gt; requires a new version of the emulator to be started before the rest of the upgrade instructions can be executed, and this can only be done by &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;restart_new_emulator&lt;/code&gt; 의 명령은 스크립트에서 발견된다 &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt; 반환 &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt; . 이는 &lt;code&gt;restart_new_emulator&lt;/code&gt; 에서 나머지 업그레이드 명령을 실행하기 전에 새 버전의 에뮬레이터를 시작해야하기 때문에 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; 만 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a3734548d24c8fafceb3c3b7a48423c44c0a982c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction is found in the script, &lt;code&gt;&lt;a href=&quot;#upgrade_app-2&quot;&gt;upgrade_app/2&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt;. This because &lt;code&gt;restart_new_emulator&lt;/code&gt; requires a new version of the emulator to be started before the rest of the upgrade instructions can be executed, and this can only be done by &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">는 IF &lt;code&gt;restart_new_emulator&lt;/code&gt; 의 명령은 스크립트에서 발견된다 &lt;code&gt;&lt;a href=&quot;#upgrade_app-2&quot;&gt;upgrade_app/2&lt;/a&gt;&lt;/code&gt; 반환 &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt; . 이는 &lt;code&gt;restart_new_emulator&lt;/code&gt; 에서 나머지 업그레이드 명령을 실행하기 전에 새 버전의 에뮬레이터를 시작해야하기 때문에 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; 만 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52741bb5942e459f72dab152ca12b8b26eff70c9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;send_notification/3,4&lt;/code&gt; function is used, all management targets are selected, as defined in RFC2273. The &lt;code&gt;Receiver&lt;/code&gt; parameter defines where the agent should send information about the delivery of inform requests.</source>
          <target state="translated">경우] &lt;code&gt;send_notification/3,4&lt;/code&gt; - 기능을 사용하는 RFC2273에 정의 된 것처럼, 모든 관리 대상이 선택된다. &lt;code&gt;Receiver&lt;/code&gt; 에이전트의 전달에 대한 정보를 전송해야 매개 변수의 정의는 요청을 알립니다.</target>
        </trans-unit>
        <trans-unit id="4e603d462637bea7ebad3ed1b02ae3e6befcd5e2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;send_notification/5&lt;/code&gt; function is used, an &lt;code&gt;NotifyName&lt;/code&gt; must be provided. This parameter is used as an index in the &lt;code&gt;snmpNotifyTable&lt;/code&gt;, and the management targets defined by that single entry is used.</source>
          <target state="translated">경우] &lt;code&gt;send_notification/5&lt;/code&gt; 기능을 사용, &lt;code&gt;NotifyName&lt;/code&gt; 가 제공되어야한다. 이 매개 변수는 &lt;code&gt;snmpNotifyTable&lt;/code&gt; 에서 색인으로 사용 되며 해당 단일 항목으로 정의 된 관리 대상이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="13bd2cdf7f65d1258410067e1dbfa02e06ec92b4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;wxUSE_POSTSCRIPT&lt;/code&gt; isn't enabled in &lt;code&gt;&amp;lt;path\to\pgm&amp;gt;\wxMSW-3.0.3\include\wx\msw\setup.h&lt;/code&gt;, enable it.</source>
          <target state="translated">&lt;code&gt;&amp;lt;path\to\pgm&amp;gt;\wxMSW-3.0.3\include\wx\msw\setup.h&lt;/code&gt; 에서 &lt;code&gt;wxUSE_POSTSCRIPT&lt;/code&gt; 가 활성화되어 있지 않으면 활성화 하십시오.</target>
        </trans-unit>
        <trans-unit id="275e62491f49fb1a70d7127de6210ff8d9a19127" translate="yes" xml:space="preserve">
          <source>If the ASN.1 module has been compiled with option &lt;code&gt;maps&lt;/code&gt;, the types &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; are represented as maps.</source>
          <target state="translated">ASN.1 모듈이 옵션 &lt;code&gt;maps&lt;/code&gt; 으로 컴파일 된 경우 &lt;code&gt;SEQUENCE&lt;/code&gt; 및 &lt;code&gt;SET&lt;/code&gt; 유형 이 맵으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="722c5c772253cfa0375f5705288b0321c521aa8d" translate="yes" xml:space="preserve">
          <source>If the AckStatus is ok, it is indicating that this is a true acknowledgement of the transaction reply.</source>
          <target state="translated">AckStatus가 정상이면 이는 트랜잭션 응답에 대한 진정한 승인임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d0f84b01e010783659e66100fe954814d18e563f" translate="yes" xml:space="preserve">
          <source>If the AckStatus is {error, Reason}, it is an indication that the acknowledgement or even the reply (for which this is an acknowledgement) was not delivered, but there is no point in waiting any longer for it to arrive. This happens when:</source>
          <target state="translated">AckStatus가 {error, Reason} 인 경우, 승인 또는 응답 (이것이 승인 인 경우)이 전달되지 않았 음을 나타내지 만 더 이상 도착하기를 기다릴 필요는 없습니다. 다음과 같은 경우에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="88faac2c33abe1fdc3fc1b10f5136c262bb64e7a" translate="yes" xml:space="preserve">
          <source>If the BEAM file contains &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt;, then a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">BEAM 파일에 &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; 가 포함 된 경우 튜플 목록이 반환됩니다. 각 튜플의 첫 번째 요소는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="52ebbcd03e14972b092b8f0cc1bbe4c3dd868b59" translate="yes" xml:space="preserve">
          <source>If the BEAM file does not contain debug information, then a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">BEAM 파일에 디버그 정보가 없으면 튜플 목록이 반환됩니다. 각 튜플의 첫 번째 요소는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="5e318cbbe5a1c0ec48c8b2b2021ac1f10131570e" translate="yes" xml:space="preserve">
          <source>If the C node acts as a server, it must first create a socket (call &lt;code&gt;bind()&lt;/code&gt; and &lt;code&gt;listen()&lt;/code&gt;) listening to a certain port number &lt;code&gt;port&lt;/code&gt;. It then publishes its name and port number with &lt;code&gt;epmd&lt;/code&gt;, the Erlang port mapper daemon. For details, see the &lt;code&gt;epmd&lt;/code&gt; manual page in ERTS:</source>
          <target state="translated">C 노드가 서버 역할을하는 경우 먼저 특정 포트 번호 &lt;code&gt;port&lt;/code&gt; 를 &lt;code&gt;listen()&lt;/code&gt; 하는 소켓 (call &lt;code&gt;bind()&lt;/code&gt; 및 listen () )을 작성해야합니다 . 그런 다음 Erlang 포트 매퍼 데몬 인 &lt;code&gt;epmd&lt;/code&gt; 를 사용 하여 이름과 포트 번호를 게시합니다 . 자세한 내용 은 ERTS 의 &lt;code&gt;epmd&lt;/code&gt; 매뉴얼 페이지를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="82d38ec527a550307461604062c03b211a833f6c" translate="yes" xml:space="preserve">
          <source>If the COND1 pattern matches, FOO is tried (and possibly further items after the end of the group if FOO succeeds). On failure, the matcher skips to the second alternative and tries COND2, without backtracking into COND1. If that succeeds and BAR fails, COND3 is tried. If BAZ then fails, there are no more alternatives, so there is a backtrack to whatever came before the entire group. If (*THEN) is not inside an alternation, it acts like (*PRUNE).</source>
          <target state="translated">COND1 패턴이 일치하면 FOO가 시도됩니다 (FOO가 성공하면 그룹이 끝난 후 추가 항목이 가능함). 실패시, 매처는 두 번째 대안으로 건너 뛰고 COND1로 역 추적하지 않고 COND2를 시도합니다. 성공하고 BAR이 실패하면 COND3이 시도됩니다. BAZ가 실패하면 더 이상 대안이 없으므로 전체 그룹 이전에 발생한 내용에 대한 역 추적이 있습니다. (* THEN)이 대체 내부가 아닌 경우 (* PRUNE)처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ac5eaef6ff1820888de0ffa5ad9b4186d0234433" translate="yes" xml:space="preserve">
          <source>If the CPU information has changed since the last time it was read, the atom &lt;code&gt;changed&lt;/code&gt; is returned, otherwise the atom &lt;code&gt;unchanged&lt;/code&gt;. If the CPU information has changed, you probably want to &lt;code&gt;&lt;a href=&quot;#system_flag_schedulers_online&quot;&gt;adjust the number of schedulers online&lt;/a&gt;&lt;/code&gt;. You typically want to have as many schedulers online as &lt;code&gt;&lt;a href=&quot;#system_info_logical_processors_available&quot;&gt;logical processors available&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">정보는 CPU가 판독 된 마지막 시간 이후로 변경된 경우, 원자 &lt;code&gt;changed&lt;/code&gt; 달리 원자 반환 &lt;code&gt;unchanged&lt;/code&gt; . CPU 정보가 변경된 경우 &lt;code&gt;&lt;a href=&quot;#system_flag_schedulers_online&quot;&gt;adjust the number of schedulers online&lt;/a&gt;&lt;/code&gt; 를 조정 하려고합니다 . 일반적으로 &lt;code&gt;&lt;a href=&quot;#system_info_logical_processors_available&quot;&gt;logical processors available&lt;/a&gt;&lt;/code&gt; 만큼 많은 스케줄러를 온라인 상태로 유지하려고 합니다 .</target>
        </trans-unit>
        <trans-unit id="674a0c6bf29cc8c8f0b253946e997318f6046675" translate="yes" xml:space="preserve">
          <source>If the Dets storage method is used, the group database is maintained by Dets and must not be edited by hand. Use the API for module &lt;code&gt;mod_auth&lt;/code&gt; to create/edit the group database. This directive is ignored if the Mnesia storage method is used. For security reasons, ensure that the &lt;code&gt;auth_group_file&lt;/code&gt; is stored outside the document tree of the web server. If it is placed in the directory that it protects, clients can download it.</source>
          <target state="translated">Dets 저장 방법을 사용하는 경우 그룹 데이터베이스는 Dets에서 유지 관리하며 직접 편집해서는 안됩니다. &lt;code&gt;mod_auth&lt;/code&gt; 모듈의 API를 사용하여 그룹 데이터베이스를 작성 / 편집하십시오. Mnesia 저장 방법을 사용하는 경우이 지시문은 무시됩니다. 보안상의 이유로 &lt;code&gt;auth_group_file&lt;/code&gt; 이 웹 서버의 문서 트리 외부에 저장되어 있는지 확인하십시오 . 보호되는 디렉토리에 있으면 클라이언트가 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2690e1607b444fbdfb4354a7fc5e69fab4fc5a65" translate="yes" xml:space="preserve">
          <source>If the Dets storage method is used, the user database is maintained by Dets and must not be edited by hand. Use the API functions in module &lt;code&gt;mod_auth&lt;/code&gt; to create/edit the user database. This directive is ignored if the Mnesia storage method is used. For security reasons, ensure that &lt;code&gt;auth_user_file&lt;/code&gt; is stored outside the document tree of the web server. If it is placed in the directory that it protects, clients can download it.</source>
          <target state="translated">Dets 저장 방법을 사용하는 경우 사용자 데이터베이스는 Dets에 의해 유지 관리되며 직접 편집해서는 안됩니다. &lt;code&gt;mod_auth&lt;/code&gt; 모듈의 API 함수를 사용하여 사용자 데이터베이스를 작성 / 편집하십시오. Mnesia 저장 방법을 사용하는 경우이 지시문은 무시됩니다. 보안상의 이유로 &lt;code&gt;auth_user_file&lt;/code&gt; 이 웹 서버의 문서 트리 외부에 저장되어 있는지 확인 하십시오. 보호되는 디렉토리에 있으면 클라이언트가 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d6f0952016312ac237e99b15d9161adf55f700d" translate="yes" xml:space="preserve">
          <source>If the Erlang node was alive, that is, set up for communicating with other nodes, this section lists the connections that were active. The following fields can exist:</source>
          <target state="translated">Erlang 노드가 활성 상태 인 경우, 즉 다른 노드와 통신하도록 설정된 경우이 섹션에는 활성 상태 인 연결이 나열됩니다. 다음과 같은 필드가 존재할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18daf2db870215dd47d6849bc420623f1e0d4030" translate="yes" xml:space="preserve">
          <source>If the Erlang runtime system is the only OS process binding threads to logical processors, this improves the performance of the runtime system. However, if other OS processes (for example, another Erlang runtime system) also bind threads to logical processors, there can be a performance penalty instead. Sometimes this performance penalty can be severe. If so, it is recommended to not bind the schedulers.</source>
          <target state="translated">Erlang 런타임 시스템이 논리 프로세서에 스레드를 바인딩하는 유일한 OS 프로세스 인 경우 런타임 시스템의 성능이 향상됩니다. 그러나 다른 OS 프로세스 (예 : 다른 Erlang 런타임 시스템)도 스레드를 논리 프로세서에 바인드하면 성능이 저하 될 수 있습니다. 때때로이 성능 저하가 심각 할 수 있습니다. 그렇다면 스케줄러를 바인드하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3549c6b8d3c0426e098c164e7bd7160b6e4be362" translate="yes" xml:space="preserve">
          <source>If the Erlang runtime system is the only operating system process that binds threads to logical processors, this improves the performance of the runtime system. However, if other operating system processes (for example another Erlang runtime system) also bind threads to logical processors, there can be a performance penalty instead. This performance penalty can sometimes be severe. If so, you are advised not to bind the schedulers.</source>
          <target state="translated">Erlang 런타임 시스템이 스레드를 논리 프로세서에 바인드하는 유일한 운영 체제 프로세스 인 경우 런타임 시스템의 성능이 향상됩니다. 그러나 다른 운영 체제 프로세스 (예 : 다른 Erlang 런타임 시스템)도 스레드를 논리 프로세서에 바인드하면 성능이 저하 될 수 있습니다. 이 성능 저하는 때때로 심각 할 수 있습니다. 그렇다면 스케줄러를 바인드하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="78b8e3a5a6a0636736a794de9e5a1415d4c36fbf" translate="yes" xml:space="preserve">
          <source>If the Erlang shell buffer would be killed the command line history is saved to a file. The command line history is automatically retrieved when a new Erlang shell is started.</source>
          <target state="translated">Erlang 쉘 버퍼가 종료되면 명령 행 히스토리가 파일에 저장됩니다. 새 Erlang 쉘이 시작되면 명령 행 히스토리가 자동으로 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="5ad331d93d63bf83b44ef888cb4e43e94ea364bb" translate="yes" xml:space="preserve">
          <source>If the INDEX column is of type INTEGER, or derived from INTEGER, the corresponding type should be &lt;code&gt;integer&lt;/code&gt;. If it is a variable length type (e.g. OBJECT IDENTIFIER, OCTET STRING), the corresponding type should be &lt;code&gt;string&lt;/code&gt;. Finally, if the type is of variable length, but with a fixed size restriction (e.g. IpAddress), the corresponding type should be &lt;code&gt;fix_string&lt;/code&gt;.</source>
          <target state="translated">INDEX 컬럼이 INTEGER 유형이거나 INTEGER에서 파생 된 경우 해당 유형은 &lt;code&gt;integer&lt;/code&gt; 이어야합니다 . 가변 길이 유형 인 경우 (예 : OBJECT IDENTIFIER, OCTET STRING) 해당 유형은 &lt;code&gt;string&lt;/code&gt; 이어야 합니다 . 마지막으로, 유형이 가변 길이이지만 고정 크기 제한 (예 : IpAddress)이있는 경우 해당 유형은 &lt;code&gt;fix_string&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="27815f723f23d4e4cf3d912f3476eb64c838477e" translate="yes" xml:space="preserve">
          <source>If the MG cannot be provisioned with the MID of the MGC, the MG can use the atom 'preliminary_mid' as the RemoteMid parameter to megaco:connect/4 and the call flow will look like this:</source>
          <target state="translated">MGC의 MID로 MG를 프로비저닝 할 수없는 경우 MG는 원자 'preliminary_mid'를 RemoteMid 매개 변수로 megaco : connect / 4에 사용할 수 있으며 호출 플로우는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="291d17d4be116cb44759c41864d170474773407f" translate="yes" xml:space="preserve">
          <source>If the MG has been provisioned with the MID of the MGC it can be given as the RemoteMid parameter to megaco:connect/4 and the call flow will look like this:</source>
          <target state="translated">MGC의 MID로 MG가 프로비저닝 된 경우 megaco : connect / 4에 RemoteMid 매개 변수로 제공 될 수 있으며 호출 플로우는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3d3ec8b1bad21c29a9fcf6552b6d84ffcf7600b8" translate="yes" xml:space="preserve">
          <source>If the Mnesia database is used, this function calls &lt;code&gt;mnesia:write&lt;/code&gt; to store the values. This means that this function must be called from within a transaction (&lt;code&gt;mnesia:transaction/1&lt;/code&gt; or &lt;code&gt;mnesia:dirty/1&lt;/code&gt;).</source>
          <target state="translated">Mnesia 데이터베이스를 사용하는 경우이 함수는 &lt;code&gt;mnesia:write&lt;/code&gt; 를 호출 하여 값을 저장합니다. 이것은이 함수가 트랜잭션 내에서 호출되어야 함을 의미합니다 ( &lt;code&gt;mnesia:transaction/1&lt;/code&gt; 또는 &lt;code&gt;mnesia:dirty/1&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="40a56f15bd541bd82f926eed2c112eaac90f9e71" translate="yes" xml:space="preserve">
          <source>If the NIF call is too lengthy, this must be handled in one of the following ways to avoid degraded responsiveness, scheduler load balancing problems, and other strange behaviors:</source>
          <target state="translated">NIF 호출이 너무 길면 응답 속도 저하, 스케줄러로드 밸런싱 문제 및 기타 이상한 동작을 피하기 위해 다음 방법 중 하나로 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="436a83604c57a3e3475d1d2d6359ca37e137b110" translate="yes" xml:space="preserve">
          <source>If the OBJECT IDENTIFIER is longer than an OBJECT IDENTIFIER of an object type in the MIB, it refers to object instances. Because of this, it is possible to control whether or not particular rows in a table shall be visible.</source>
          <target state="translated">OBJECT IDENTIFIER가 MIB에서 오브젝트 유형의 OBJECT IDENTIFIER보다 길면 오브젝트 인스턴스를 참조합니다. 이 때문에 테이블의 특정 행을 표시할지 여부를 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1b26d2a72fe7f32dcd9c24e2f00608157279f71" translate="yes" xml:space="preserve">
          <source>If the OS used does not support non-blocking &lt;code&gt;sendfile&lt;/code&gt;, an Erlang fallback using &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;gen_tcp#send-2&quot;&gt;gen_tcp:send/2&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">사용 된 OS가 비 차단 &lt;code&gt;sendfile&lt;/code&gt; 을 지원하지 않으면 &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;gen_tcp#send-2&quot;&gt;gen_tcp:send/2&lt;/a&gt;&lt;/code&gt; 를 사용 하는 Erlang 폴 백이 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="b3598222fc1bb53b9989c1f5e6bfd02eed50487d" translate="yes" xml:space="preserve">
          <source>If the SNMP agent needs to interact with sub-agents constructed in another package, a special sub-agent should be used, which communicates through a protocol specified by the other package.</source>
          <target state="translated">SNMP 에이전트가 다른 패키지에 구성된 하위 에이전트와 상호 작용해야하는 경우 다른 하위 패키지에 지정된 프로토콜을 통해 통신하는 특수 하위 에이전트를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="1c500f599c51107a79c77a136f03f46d05fafc58" translate="yes" xml:space="preserve">
          <source>If the SNMP table has more than one INDEX column, the corresponding Mnesia row is a tuple, where the first element is a tuple with the INDEX columns. Generally, if the SNMP table has &lt;strong&gt;N&lt;/strong&gt; INDEX columns and &lt;strong&gt;C&lt;/strong&gt; data columns, the Mnesia table is of arity &lt;strong&gt;(C-N)+1&lt;/strong&gt;, where the key is a tuple of arity &lt;strong&gt;N&lt;/strong&gt; if &lt;strong&gt;N &amp;gt; 1&lt;/strong&gt;, or a single term if &lt;strong&gt;N = 1&lt;/strong&gt;.</source>
          <target state="translated">SNMP 테이블에 둘 이상의 INDEX 열이있는 경우 해당 Mnesia 행은 튜플이며 첫 번째 요소는 INDEX 열이있는 튜플입니다. 일반적으로 SNMP 테이블에 &lt;strong&gt;N&lt;/strong&gt; INDEX 열과 &lt;strong&gt;C&lt;/strong&gt; 데이터 열이있는 경우 Mnesia 테이블은 arity &lt;strong&gt;(CN) +1&lt;/strong&gt; 이며, 여기서 키는 &lt;strong&gt;N&amp;gt; 1&lt;/strong&gt; 이면 arity &lt;strong&gt;N&lt;/strong&gt; 튜플 이거나 &lt;strong&gt;N = 1&lt;/strong&gt; 이면 단일 &lt;strong&gt;항&lt;/strong&gt; 입니다.&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c217a2396ebcee146469f461600abdf337e010c" translate="yes" xml:space="preserve">
          <source>If the TFTP server receives yet another request from the same client (same host and port) while it already has an active connection to the client, it ignores the new request if the request is equal to the first one (same filename and options). This implies that the (new) client will be served by the already ongoing connection on the server side. By not setting up yet another connection, in parallel with the ongoing one, the server consumes less resources.</source>
          <target state="translated">TFTP 서버가 클라이언트에 이미 연결되어있는 동안 동일한 클라이언트 (같은 호스트 및 포트)로부터 또 다른 요청을받는 경우 요청이 첫 번째 요청 (동일한 파일 이름 및 옵션)과 동일한 경우 새 요청을 무시합니다. 이것은 (새로운) 클라이언트가 서버 측에서 이미 진행중인 연결에 의해 서비스 될 것임을 의미합니다. 다른 연결을 설정하지 않으면 진행중인 연결과 병행하여 서버가 더 적은 리소스를 소비합니다.</target>
        </trans-unit>
        <trans-unit id="89cbc4f7538c3f8a055eafb734ab8d43e17f7e9a" translate="yes" xml:space="preserve">
          <source>If the Unicode translation modifier (&lt;code&gt;t&lt;/code&gt;) is in effect, the integer argument can be any number representing a valid Unicode codepoint, otherwise it is to be an integer less than or equal to 255, otherwise it is masked with 16#FF:</source>
          <target state="translated">유니 코드 변환 수정 자 ( &lt;code&gt;t&lt;/code&gt; )가 유효한 경우 정수 인수는 유효한 유니 코드 코드 포인트를 나타내는 숫자 일 수 있으며, 그렇지 않으면 255 이하의 정수 여야합니다. 그렇지 않으면 16 # FF로 마스킹됩니다.</target>
        </trans-unit>
        <trans-unit id="cc5c86359b9d2f999369876543233d4ea822c7b0" translate="yes" xml:space="preserve">
          <source>If the Unicode translation modifier (&lt;code&gt;t&lt;/code&gt;) is used in the format string, all event handlers must ensure that the formatted output is correctly encoded for the I/O device.</source>
          <target state="translated">유니 코드 변환 수정 자 ( &lt;code&gt;t&lt;/code&gt; )가 형식 문자열에 사용되면 모든 이벤트 핸들러는 형식화 된 출력이 I / O 장치에 대해 올바르게 인코딩되었는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="9a64305e88f74d03f63e30e4aff9344ad3928f49" translate="yes" xml:space="preserve">
          <source>If the analysis is made on clause level, the result is given as a list of tuples &lt;code&gt;{Clause,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the number of calls to each function clause:</source>
          <target state="translated">절 레벨에서 분석이 수행되면 결과는 튜플 &lt;code&gt;{Clause,Calls}&lt;/code&gt; 목록으로 제공됩니다 . 여기에서 &lt;code&gt;Calls&lt;/code&gt; 은 각 함수 절에 대한 호출 수입니다.</target>
        </trans-unit>
        <trans-unit id="7bb518d0fd97d3152a60a637270e37af04b13222" translate="yes" xml:space="preserve">
          <source>If the analysis is made on clause level, the result is given as a list of tuples &lt;code&gt;{Clause,{Cov,NotCov}}&lt;/code&gt;, one for each function clause in the module. A clause is specified by its module name, function name, arity and position within the function definition:</source>
          <target state="translated">절 레벨에서 분석을 수행하면 결과는 모듈의 각 함수 절에 대해 하나씩 튜플 &lt;code&gt;{Clause,{Cov,NotCov}}&lt;/code&gt; 목록으로 제공됩니다 . 절은 함수 정의 내에서 모듈 이름, 함수 이름, 특성 및 위치로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="2478a8c8617596c655cc3da82b5c379b47e51b09" translate="yes" xml:space="preserve">
          <source>If the analysis is made on function level, the result is given as a list of tuples &lt;code&gt;{Function,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the number of calls to each function:</source>
          <target state="translated">함수 레벨에서 분석을 수행하면 결과는 튜플 &lt;code&gt;{Function,Calls}&lt;/code&gt; 목록으로 제공됩니다 . 여기에서 &lt;code&gt;Calls&lt;/code&gt; 은 각 기능에 대한 호출 수입니다.</target>
        </trans-unit>
        <trans-unit id="55b7df1c13246cf49b1f19e127c65003b3a10d37" translate="yes" xml:space="preserve">
          <source>If the analysis is made on function level, the result is given as a list of tuples &lt;code&gt;{Function,{Cov,NotCov}}&lt;/code&gt;, one for each function in the module. A function is specified by its module name, function name and arity:</source>
          <target state="translated">함수 레벨에서 분석을 수행하면 결과는 모듈의 각 함수에 대해 하나씩 튜플 &lt;code&gt;{Function,{Cov,NotCov}}&lt;/code&gt; 목록으로 제공됩니다 . 함수는 모듈 이름, 함수 이름 및 arity로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="77e592dc92d7ea0f9403bfb4d1e1860bc8a3fe5a" translate="yes" xml:space="preserve">
          <source>If the analysis is made on module level, the result is given as a tuple &lt;code&gt;{Module,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the total number of calls to functions in the module:</source>
          <target state="translated">모듈 레벨에서 분석을 수행하면 결과는 튜플 &lt;code&gt;{Module,Calls}&lt;/code&gt; 로 제공 됩니다. 여기에서 &lt;code&gt;Calls&lt;/code&gt; 은 모듈의 함수에 대한 총 호출 수입니다.</target>
        </trans-unit>
        <trans-unit id="5cba27c146502c3ec8e1044a59eca78a126f8832" translate="yes" xml:space="preserve">
          <source>If the analysis is made on module level, the result is given for the entire module as a tuple &lt;code&gt;{Module,{Cov,NotCov}}&lt;/code&gt;:</source>
          <target state="translated">모듈 레벨에서 분석을 수행하면 전체 모듈에 대한 결과가 튜플 &lt;code&gt;{Module,{Cov,NotCov}}&lt;/code&gt; 로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="cde9769f09668ea79529ce6edefab85a0899d6da" translate="yes" xml:space="preserve">
          <source>If the application detects a communication failure (in a potentially partitioned network) that can have caused an inconsistent database, it can use the function &lt;code&gt;mnesia:set_master_nodes(Tab, MasterNodes)&lt;/code&gt; to define from which nodes each table is to be loaded. At startup, the Mnesia normal table load algorithm is bypassed and the table is loaded from one of the master nodes defined for the table, regardless of when and if Mnesia terminated on other nodes. &lt;code&gt;MasterNodes&lt;/code&gt; can only contain nodes where the table has a replica. If the &lt;code&gt;MasterNodes&lt;/code&gt; list is empty, the master node recovery mechanism for the particular table is reset, and the normal load mechanism is used at the next restart.</source>
          <target state="translated">응용 프로그램이 불일치 한 데이터베이스를 야기 할 수있는 통신 실패 (잠재적으로 파티션 된 네트워크에서)를 발견하면 &lt;code&gt;mnesia:set_master_nodes(Tab, MasterNodes)&lt;/code&gt; 함수를 사용하여 각 테이블을로드 할 노드를 정의 할 수 있습니다. 시작시 Mnesia 정상 테이블로드 알고리즘은 무시되고 Mnesia가 다른 노드에서 종료 된시기 및 여부에 관계없이 테이블에 대해 정의 된 마스터 노드 중 하나에서 테이블이로드됩니다. &lt;code&gt;MasterNodes&lt;/code&gt; 노드는 테이블에 복제본이있는 노드 만 포함 할 수 있습니다. 는 IF &lt;code&gt;MasterNodes&lt;/code&gt; 의 목록이 비어, 특정 테이블에 대한 마스터 노드 복구 메커니즘이 재설정되고 정상적인 부하 메커니즘은 다음에 다시 시작할에서 사용된다.</target>
        </trans-unit>
        <trans-unit id="130ab90516f90ac945b3ebb327eb04a5eb66e021" translate="yes" xml:space="preserve">
          <source>If the application detects that there has been a communication failure that can have caused an inconsistent database, it can use the function &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-2&quot;&gt;mnesia:set_master_nodes(Tab, Nodes)&lt;/a&gt;&lt;/code&gt; to pinpoint from which nodes each table can be loaded.</source>
          <target state="translated">응용 프로그램이 불일치 한 데이터베이스를 야기 할 수있는 통신 실패가 있음을 감지하면 &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-2&quot;&gt;mnesia:set_master_nodes(Tab, Nodes)&lt;/a&gt;&lt;/code&gt; 함수를 사용하여 각 테이블을로드 할 수있는 노드를 정확히 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afc60992fdf5138ada7ac0487b61ff57acf63af0" translate="yes" xml:space="preserve">
          <source>If the application is distributed, setting the permission to &lt;code&gt;false&lt;/code&gt; means that the application will be started at, or moved to, another node according to how its distribution is configured (see &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">애플리케이션이 분배 된 경우, 권한을 &lt;code&gt;false&lt;/code&gt; 로 설정하면 분배 구성 방법에 따라 애플리케이션이 다른 노드에서 시작되거나 다른 노드로 이동 함을 의미합니다 ( &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="ff80acb30d9dab81e0a46a50c51388e4dd17f7a3" translate="yes" xml:space="preserve">
          <source>If the application is not already loaded, the application controller first loads it using &lt;code&gt;application:load/1&lt;/code&gt;. It checks the value of the &lt;code&gt;applications&lt;/code&gt; key, to ensure that all applications that are to be started before this application are running.</source>
          <target state="translated">애플리케이션이 아직로드되지 않은 경우 애플리케이션 컨트롤러는 먼저 &lt;code&gt;application:load/1&lt;/code&gt; 을 사용하여로드합니다 . 이 키 는 &lt;code&gt;applications&lt;/code&gt; 키 의 값 을 확인하여이 응용 프로그램이 실행되기 전에 시작될 모든 응용 프로그램을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="60e7f4b69d5dbe87fef4344be83c638457c7eec7" translate="yes" xml:space="preserve">
          <source>If the application needs to include the generated &lt;code&gt;.hrl&lt;/code&gt; file, it is to use the &lt;code&gt;-include_lib&lt;/code&gt; directive to the Erlang compiler:</source>
          <target state="translated">응용 프로그램에서 생성 된 &lt;code&gt;.hrl&lt;/code&gt; 파일 을 포함 해야하는 경우 Erlang 컴파일러에 &lt;code&gt;-include_lib&lt;/code&gt; 지시문을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="683ef606c81dc1c47b5d3b9c095a4243030bc6f8" translate="yes" xml:space="preserve">
          <source>If the argument is &lt;code&gt;Func&lt;/code&gt;, the timetrap is triggered when this function returns. &lt;code&gt;Func&lt;/code&gt; can also return a new &lt;code&gt;Time&lt;/code&gt; value, which in that case is the value for the new timetrap.</source>
          <target state="translated">인수가 &lt;code&gt;Func&lt;/code&gt; 인 경우이 함수가 반환 될 때 타임 트랩이 트리거됩니다. 또한 &lt;code&gt;Func&lt;/code&gt; 은 새로운 &lt;code&gt;Time&lt;/code&gt; 값을 반환 할 수 있으며 ,이 경우 새로운 Timetrap의 값입니다.</target>
        </trans-unit>
        <trans-unit id="0044e9d649274cc90388ee08844dd19dea89fffe" translate="yes" xml:space="preserve">
          <source>If the argument is &lt;code&gt;false&lt;/code&gt;, the call trace message mode for the current process is set to normal (non-silent) for this call and all later calls.</source>
          <target state="translated">인수가 &lt;code&gt;false&lt;/code&gt; 인 경우 현재 프로세스의 통화 추적 메시지 모드는이 통화 및 이후의 모든 통화에 대해 정상 (무음)으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="580f4ef0ac5467ad7d400143bdf178fbf747f519" translate="yes" xml:space="preserve">
          <source>If the argument is invalid</source>
          <target state="translated">인수가 유효하지 않은 경우</target>
        </trans-unit>
        <trans-unit id="c3def1ea3a84c13010f731140dbb829f22745007" translate="yes" xml:space="preserve">
          <source>If the argument is not &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the call trace message mode is unaffected.</source>
          <target state="translated">인수가 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 가 아닌 경우 , 호출 추적 메시지 모드는 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="259c1b3a1fe7d6190505c0293c344282223212ec" translate="yes" xml:space="preserve">
          <source>If the arguments or options are malformed, the function throws a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">인수 또는 옵션이 잘못된 경우, 함수는 발생 &lt;code&gt;badarg&lt;/code&gt; 의 예외.</target>
        </trans-unit>
        <trans-unit id="6b60aa2a26e0a24944e43c25dc549ab30b52857b" translate="yes" xml:space="preserve">
          <source>If the array does not have fixed size, and &lt;code&gt;I&lt;/code&gt; is greater than &lt;code&gt;size(Array)-1&lt;/code&gt;, the array grows to size &lt;code&gt;I+1&lt;/code&gt;.</source>
          <target state="translated">배열의 크기가 고정되어 있지 않고 &lt;code&gt;I&lt;/code&gt; 가 &lt;code&gt;size(Array)-1&lt;/code&gt; 보다 크면 배열의 크기가 &lt;code&gt;I+1&lt;/code&gt; 로 커집니다 .</target>
        </trans-unit>
        <trans-unit id="e97eb155a25d26096ef78fc2b67cf5447071cfc9" translate="yes" xml:space="preserve">
          <source>If the array does not have fixed size, the default value for any index &lt;code&gt;I&lt;/code&gt; greater than &lt;code&gt;size(Array)-1&lt;/code&gt; is returned.</source>
          <target state="translated">배열의 크기가 고정되어 있지 않으면 &lt;code&gt;size(Array)-1&lt;/code&gt; 보다 큰 인덱스 &lt;code&gt;I&lt;/code&gt; 의 기본값 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5552e65bff8e7b19a94e0b983a0ae9846e97b32b" translate="yes" xml:space="preserve">
          <source>If the atom already exists, this function stores the term in &lt;code&gt;*atom&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. Also returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;len&lt;/code&gt; exceeds the maximum length allowed for an atom (255 characters).</source>
          <target state="translated">아톰이 이미 존재하면이 함수는 용어를 &lt;code&gt;*atom&lt;/code&gt; 에 저장하고 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 . 또한 리턴 &lt;code&gt;false&lt;/code&gt; 경우 &lt;code&gt;len&lt;/code&gt; 원자 (255 개 문자)에 허용 된 최대 길이를 초과한다.</target>
        </trans-unit>
        <trans-unit id="0d657f088165dffa1fac0e9bbe37e81e0983227b" translate="yes" xml:space="preserve">
          <source>If the atom already exists, this function stores the term in &lt;code&gt;*atom&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. Also returns &lt;code&gt;false&lt;/code&gt; if the length of &lt;code&gt;name&lt;/code&gt; exceeds the maximum length allowed for an atom (255 characters).</source>
          <target state="translated">아톰이 이미 존재하면이 함수는 용어를 &lt;code&gt;*atom&lt;/code&gt; 에 저장하고 &lt;code&gt;true&lt;/code&gt; 를 반환 하고 , 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 . &lt;code&gt;name&lt;/code&gt; 의 길이가 원자에 허용 된 최대 길이 (255 자)를 초과하면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cbc8e0e10b7bf47bd128f48e3648baa81fc6271d" translate="yes" xml:space="preserve">
          <source>If the attempt to truncate the log fails, the disk log process terminates with the EXIT message &lt;code&gt;{{failed,Reason},[{disk_log,Fun,Arity}]}&lt;/code&gt;. Other processes having requests queued receive the message &lt;code&gt;{disk_log, Node, {error, disk_log_stopped}}&lt;/code&gt;.</source>
          <target state="translated">로그 자르기 시도가 실패하면 디스크 로그 프로세스가 종료 메시지 &lt;code&gt;{{failed,Reason},[{disk_log,Fun,Arity}]}&lt;/code&gt; 와 함께 종료됩니다 . 요청이 대기중인 다른 프로세스는 &lt;code&gt;{disk_log, Node, {error, disk_log_stopped}}&lt;/code&gt; 메시지를 수신합니다 .</target>
        </trans-unit>
        <trans-unit id="e7576e0423d861bfb48c83bfa3b5b0c281c96ce4" translate="yes" xml:space="preserve">
          <source>If the boot script contains a path variable &lt;code&gt;Var&lt;/code&gt; other than &lt;code&gt;$ROOT&lt;/code&gt;, this variable is expanded to &lt;code&gt;Dir&lt;/code&gt;. Used when applications are installed in another directory than &lt;code&gt;$ROOT/lib&lt;/code&gt;; see &lt;code&gt;systools:make_script/1,2&lt;/code&gt; in SASL.</source>
          <target state="translated">부트 스크립트에 &lt;code&gt;$ROOT&lt;/code&gt; 이외 의 경로 변수 &lt;code&gt;Var&lt;/code&gt; 이 포함 된 경우이 변수는 &lt;code&gt;Dir&lt;/code&gt; 로 확장됩니다 . &lt;code&gt;$ROOT/lib&lt;/code&gt; 이외의 다른 디렉토리에 응용 프로그램을 설치할 때 사용됩니다 . SASL의 &lt;code&gt;systools:make_script/1,2&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dc4746e92bb60b88599fe7a3e474a68b05603534" translate="yes" xml:space="preserve">
          <source>If the call times out, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">호출 시간이 초과되면 &lt;code&gt;timeout&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="55cc2b4bba08ca73afe9b3ccf29541b97304c864" translate="yes" xml:space="preserve">
          <source>If the call to &lt;code&gt;erlang:load_nif/2&lt;/code&gt; fails, the module is unloaded and a warning report is sent to the error loader.</source>
          <target state="translated">&lt;code&gt;erlang:load_nif/2&lt;/code&gt; 에 대한 호출이 실패하면 모듈이 언로드되고 경고 보고서가 오류 로더로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="4b48d532db57aebd987ac6820de7ad7436dd64ed" translate="yes" xml:space="preserve">
          <source>If the callback module cannot be loaded, an error tuple is returned. The &lt;code&gt;Reason&lt;/code&gt; in the error tuple is the one returned by the code loader when trying to load the code of the callback module.</source>
          <target state="translated">콜백 모듈을로드 할 수 없으면 오류 튜플이 반환됩니다. 오류 튜플 의 &lt;code&gt;Reason&lt;/code&gt; 는 콜백 모듈의 코드를로드하려고 할 때 코드 로더가 리턴 한 이유 입니다.</target>
        </trans-unit>
        <trans-unit id="8bf050fe2cb79b5d36a88eaed63edd7eed898889" translate="yes" xml:space="preserve">
          <source>If the callback module does not export a &lt;code&gt;system_get_state/1&lt;/code&gt; function, &lt;code&gt;get_state/1,2&lt;/code&gt; assumes that the &lt;code&gt;Misc&lt;/code&gt; value is the state of the callback module and returns it directly instead.</source>
          <target state="translated">콜백 모듈이 &lt;code&gt;system_get_state/1&lt;/code&gt; 함수를 내 보내지 않으면 &lt;code&gt;get_state/1,2&lt;/code&gt; 는 &lt;code&gt;Misc&lt;/code&gt; 값이 콜백 모듈의 상태 라고 가정하고 대신 직접 반환합니다.</target>
        </trans-unit>
        <trans-unit id="883a1351f7fb38c93f27abac246b139ddf314ded" translate="yes" xml:space="preserve">
          <source>If the callback module does not export a &lt;code&gt;system_replace_state/2&lt;/code&gt; function, &lt;code&gt;&lt;a href=&quot;#replace_state-2&quot;&gt;replace_state/2,3&lt;/a&gt;&lt;/code&gt; assumes that &lt;code&gt;Misc&lt;/code&gt; is the state of the callback module, passes it to &lt;code&gt;StateFun&lt;/code&gt; and uses the return value as both the new state and as the new value of &lt;code&gt;Misc&lt;/code&gt;.</source>
          <target state="translated">콜백 모듈이 &lt;code&gt;system_replace_state/2&lt;/code&gt; 함수를 내 보내지 않으면 &lt;code&gt;&lt;a href=&quot;#replace_state-2&quot;&gt;replace_state/2,3&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;Misc&lt;/code&gt; 가 콜백 모듈의 상태 라고 가정하고 이를 &lt;code&gt;StateFun&lt;/code&gt; 에 전달 하고 반환 값을 새로운 상태 및 새로운 &lt;code&gt;Misc&lt;/code&gt; 값으로 사용합니다. .</target>
        </trans-unit>
        <trans-unit id="6b0469d22f2398ad4902a9f0274d691cde96d200" translate="yes" xml:space="preserve">
          <source>If the callback module exports a &lt;code&gt;&lt;a href=&quot;#Module:system_replace_state-2&quot;&gt;system_replace_state/2&lt;/a&gt;&lt;/code&gt; function, it is called in the target process to replace its state using &lt;code&gt;StateFun&lt;/code&gt;. Its two arguments are &lt;code&gt;StateFun&lt;/code&gt; and &lt;code&gt;Misc&lt;/code&gt;, where &lt;code&gt;Misc&lt;/code&gt; is the same as the &lt;code&gt;Misc&lt;/code&gt; value returned by &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt;. A &lt;code&gt;system_replace_state/2&lt;/code&gt; function is expected to return &lt;code&gt;{ok, NewState, NewMisc}&lt;/code&gt;, where &lt;code&gt;NewState&lt;/code&gt; is the new state of the callback module, obtained by calling &lt;code&gt;StateFun&lt;/code&gt;, and &lt;code&gt;NewMisc&lt;/code&gt; is a possibly new value used to replace the original &lt;code&gt;Misc&lt;/code&gt; (required as &lt;code&gt;Misc&lt;/code&gt; often contains the state of the callback module within it).</source>
          <target state="translated">콜백 모듈이 &lt;code&gt;&lt;a href=&quot;#Module:system_replace_state-2&quot;&gt;system_replace_state/2&lt;/a&gt;&lt;/code&gt; 함수를 내 &lt;code&gt;StateFun&lt;/code&gt; 대상 프로세스에서 StateFun을 사용하여 상태를 바꾸기 위해 호출 됩니다. 두 개의 인수는 &lt;code&gt;StateFun&lt;/code&gt; 과 &lt;code&gt;Misc&lt;/code&gt; 입니다 . 여기서 &lt;code&gt;Misc&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt; 가 반환 한 &lt;code&gt;Misc&lt;/code&gt; 값 과 동일합니다 . &lt;code&gt;system_replace_state/2&lt;/code&gt; 함수 복귀 예상된다 &lt;code&gt;{ok, NewState, NewMisc}&lt;/code&gt; , &lt;code&gt;NewState&lt;/code&gt; 를 호출하여 얻은 콜백 모듈의 새로운 상태 &lt;code&gt;StateFun&lt;/code&gt; 을 하고 &lt;code&gt;NewMisc&lt;/code&gt; 는 원래 대체 할 가능성이 새로운 값 &lt;code&gt;Misc&lt;/code&gt; (AS 필요 &lt;code&gt;Misc&lt;/code&gt; 에는 종종 콜백 모듈의 상태가 포함됩니다).</target>
        </trans-unit>
        <trans-unit id="22c3eecf9345190c4251d4199b67e06fe9f176a1" translate="yes" xml:space="preserve">
          <source>If the callback module exports a function &lt;code&gt;system_get_state/1&lt;/code&gt;, it is called in the target process to get its state. Its argument is the same as the &lt;code&gt;Misc&lt;/code&gt; value returned by &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt;, and function &lt;code&gt;&lt;a href=&quot;#Module:system_get_state-1&quot;&gt;Module:system_get_state/1&lt;/a&gt;&lt;/code&gt; is expected to extract the state of the callback module from it. Function &lt;code&gt;system_get_state/1&lt;/code&gt; must return &lt;code&gt;{ok, State}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the state of the callback module.</source>
          <target state="translated">콜백 모듈이 &lt;code&gt;system_get_state/1&lt;/code&gt; 함수를 내 보내면 대상 프로세스에서 상태를 가져 오기 위해 호출됩니다. 인수는 &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt; 에 의해 반환 된 &lt;code&gt;Misc&lt;/code&gt; 값 과 동일하며, &lt;code&gt;&lt;a href=&quot;#Module:system_get_state-1&quot;&gt;Module:system_get_state/1&lt;/a&gt;&lt;/code&gt; 함수 는 콜백 모듈의 상태를 추출 할 것으로 예상됩니다. &lt;code&gt;system_get_state/1&lt;/code&gt; 함수 는 &lt;code&gt;{ok, State}&lt;/code&gt; 리턴해야합니다 . 여기서 &lt;code&gt;State&lt;/code&gt; 는 콜백 모듈의 상태입니다.</target>
        </trans-unit>
        <trans-unit id="01c2d9fbdbf4902fbd9ed598640b451a617bf5cc" translate="yes" xml:space="preserve">
          <source>If the callback module's &lt;code&gt;system_get_state/1&lt;/code&gt; function crashes or throws an exception, the caller exits with error &lt;code&gt;{callback_failed, {Module, system_get_state}, {Class, Reason}}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the name of the callback module and &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Reason&lt;/code&gt; indicate details of the exception.</source>
          <target state="translated">콜백 모듈의 &lt;code&gt;system_get_state/1&lt;/code&gt; 함수가 충돌하거나 예외를 throw하면 호출자는 오류 &lt;code&gt;{callback_failed, {Module, system_get_state}, {Class, Reason}}&lt;/code&gt; 과 함께 종료됩니다 . 여기서 &lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈의 이름이고 &lt;code&gt;Class&lt;/code&gt; 및 &lt;code&gt;Reason&lt;/code&gt; 는 세부 사항을 나타냅니다. 예외의.</target>
        </trans-unit>
        <trans-unit id="7986fc8d38f019b96fd636349aa5cfd63d9efc6a" translate="yes" xml:space="preserve">
          <source>If the callback module's function &lt;code&gt;system_replace_state/2&lt;/code&gt; crashes or throws an exception, the caller exits with error &lt;code&gt;{callback_failed, {Module, system_replace_state}, {Class, Reason}}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the name of the callback module and &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Reason&lt;/code&gt; indicate details of the exception. If the callback module does not provide a &lt;code&gt;system_replace_state/2&lt;/code&gt; function and &lt;code&gt;StateFun&lt;/code&gt; crashes or throws an exception, the caller exits with error &lt;code&gt;{callback_failed, StateFun, {Class, Reason}}&lt;/code&gt;.</source>
          <target state="translated">콜백 모듈의 함수 &lt;code&gt;system_replace_state/2&lt;/code&gt; 가 충돌하거나 예외를 throw하면 호출자는 오류 &lt;code&gt;{callback_failed, {Module, system_replace_state}, {Class, Reason}}&lt;/code&gt; 과 함께 종료됩니다 . 여기서 &lt;code&gt;Module&lt;/code&gt; 은 콜백 모듈의 이름이고 &lt;code&gt;Class&lt;/code&gt; 및 &lt;code&gt;Reason&lt;/code&gt; 는 세부 사항을 나타냅니다. 예외의. 콜백 모듈이 &lt;code&gt;system_replace_state/2&lt;/code&gt; 함수를 제공하지 않고 &lt;code&gt;StateFun&lt;/code&gt; 이 충돌하거나 예외를 발생시키는 경우 호출자는 오류 &lt;code&gt;{callback_failed, StateFun, {Class, Reason}}&lt;/code&gt; 과 함께 종료됩니다 .</target>
        </trans-unit>
        <trans-unit id="f20f590333f587ce4f158c6bd3d9e3042df378fe" translate="yes" xml:space="preserve">
          <source>If the caller of the function wants to know whether or not acknowledgments are received for a certain notification (provided it is sent as an inform), the &lt;code&gt;Receiver&lt;/code&gt; parameter can be specified as &lt;code&gt;{Tag, ProcessName}&lt;/code&gt; (refer to the Reference Manual, section snmp, module &lt;code&gt;snmp&lt;/code&gt; for more details). In this case, the agent send a message &lt;code&gt;{snmp_notification, Tag, {got_response, ManagerAddr}}&lt;/code&gt; or &lt;code&gt;{snmp_notification, Tag, {no_response, ManagerAddr}}&lt;/code&gt; for each management target.</source>
          <target state="translated">함수 호출자가 특정 알림에 대해 수신 확인을 수신했는지 여부를 알리고 자하는 경우 (알림으로 전송 된 경우) &lt;code&gt;Receiver&lt;/code&gt; 매개 변수를 &lt;code&gt;{Tag, ProcessName}&lt;/code&gt; ( 지정 매뉴얼, 섹션 snmp 참조) 으로 지정할 수 있습니다. 자세한 내용은 모듈 &lt;code&gt;snmp&lt;/code&gt; 를 참조하십시오. 이 경우 에이전트 는 각 관리 대상에 대해 &lt;code&gt;{snmp_notification, Tag, {got_response, ManagerAddr}}&lt;/code&gt; 또는 &lt;code&gt;{snmp_notification, Tag, {no_response, ManagerAddr}}&lt;/code&gt; 를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="74d99e3904aef3995d136af596a2f043101aa1f9" translate="yes" xml:space="preserve">
          <source>If the calling process is not trapping exits, and checking &lt;code&gt;PidOrPort&lt;/code&gt; is cheap (that is, if &lt;code&gt;PidOrPort&lt;/code&gt; is local), &lt;code&gt;link/1&lt;/code&gt; fails with reason &lt;code&gt;noproc&lt;/code&gt;.</source>
          <target state="translated">호출 프로세스가 종료를 트래핑하지 않고 &lt;code&gt;PidOrPort&lt;/code&gt; 를 검사 하는 것이 저렴한 경우 (즉, &lt;code&gt;PidOrPort&lt;/code&gt; 가 로컬 인 경우 ) &lt;code&gt;link/1&lt;/code&gt; 은 &lt;code&gt;noproc&lt;/code&gt; 이유로 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="49a8b4f21577fe3cc5ca8d0fd53bd3ee9424f7f7" translate="yes" xml:space="preserve">
          <source>If the calling process later terminates with &lt;code&gt;Reason&lt;/code&gt;, the event manager deletes the event handler by calling &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate/2&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;{stop,Reason}&lt;/code&gt; as argument.</source>
          <target state="translated">호출 프로세스가 나중에 &lt;code&gt;Reason&lt;/code&gt; 으로 종료 되면, 이벤트 관리자 는 &lt;code&gt;{stop,Reason}&lt;/code&gt; 을 인수로 사용 하여 &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate/2&lt;/a&gt;&lt;/code&gt; 를 호출하여 이벤트 핸들러를 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="f41eb527b8f8f2ec9a45659469012def9325921e" translate="yes" xml:space="preserve">
          <source>If the capture options describe that no substring capturing is to be done (&lt;code&gt;{capture, none}&lt;/code&gt;), the function returns the single atom &lt;code&gt;match&lt;/code&gt; upon successful matching, otherwise the tuple &lt;code&gt;{match, ValueList}&lt;/code&gt;. Disabling capturing can be done either by specifying &lt;code&gt;none&lt;/code&gt; or an empty list as &lt;code&gt;ValueSpec&lt;/code&gt;.</source>
          <target state="translated">캡처 옵션이 하위 문자열 캡처가 수행되지 않음을 설명하면 ( &lt;code&gt;{capture, none}&lt;/code&gt; ), 성공적인 일치시 단일 아톰 &lt;code&gt;match&lt;/code&gt; 를 리턴하고 그렇지 않으면 튜플 &lt;code&gt;{match, ValueList}&lt;/code&gt; 리턴합니다 . &lt;code&gt;none&lt;/code&gt; 또는 빈 목록을 &lt;code&gt;ValueSpec&lt;/code&gt; 로 지정하여 캡처 사용 안함을 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8dfe9740232e522c9dccf1bcdb49e9bacfa76b87" translate="yes" xml:space="preserve">
          <source>If the carrier could not be scanned in full without harming the responsiveness of the system, &lt;code&gt;UnscannedSize&lt;/code&gt; is the number of bytes that had to be skipped.</source>
          <target state="translated">시스템의 응답 성을 손상시키지 않고 반송파를 완전히 스캔 할 수없는 경우 &lt;code&gt;UnscannedSize&lt;/code&gt; 는 건너 뛰어야하는 바이트 수입니다.</target>
        </trans-unit>
        <trans-unit id="b3d882b62bc462be24a22c4ebd1a0b80e4bbf23e" translate="yes" xml:space="preserve">
          <source>If the character escaping feature needs to be disabled (typically for backwards compatibility reasons), use the &lt;code&gt;ct_run&lt;/code&gt; start flag &lt;code&gt;-no_esc_chars&lt;/code&gt;, or the &lt;code&gt;ct:run_test/1&lt;/code&gt; start option &lt;code&gt;{esc_chars,Bool}&lt;/code&gt; (this start option is also supported in test specifications).</source>
          <target state="translated">문자 이스케이프 기능을 비활성화해야하는 경우 (일반적으로 이전 버전과의 호환성을 위해) &lt;code&gt;ct_run&lt;/code&gt; 시작 플래그 &lt;code&gt;-no_esc_chars&lt;/code&gt; 또는 &lt;code&gt;ct:run_test/1&lt;/code&gt; 시작 옵션 &lt;code&gt;{esc_chars,Bool}&lt;/code&gt; 을 사용하십시오 (이 시작 옵션은 테스트 사양에서도 지원됨) .</target>
        </trans-unit>
        <trans-unit id="93733502359d2306f277753fcf5f39262e0db10b" translate="yes" xml:space="preserve">
          <source>If the child is temporary, the child specification is deleted as soon as the process terminates. This means that &lt;code&gt;delete_child/2&lt;/code&gt; has no meaning and &lt;code&gt;restart_child/2&lt;/code&gt; cannot be used for these children.</source>
          <target state="translated">자식이 일시적인 경우 프로세스가 종료 되 자마자 자식 사양이 삭제됩니다. 즉, &lt;code&gt;delete_child/2&lt;/code&gt; 에는 의미가 없으며이 하위에는 &lt;code&gt;restart_child/2&lt;/code&gt; 를 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="43bb63cf5661d4a237a06093eced5cd149d67b35" translate="yes" xml:space="preserve">
          <source>If the child process is another supervisor, it is to be set to &lt;code&gt;infinity&lt;/code&gt; to give the subtree enough time to shut down. It is also allowed to set it to &lt;code&gt;infinity&lt;/code&gt;, if the child process is a worker. See the warning below:</source>
          <target state="translated">하위 프로세스가 다른 수퍼바이저 인 경우 하위 트리를 종료 할 수있는 충분한 시간을주기 위해 &lt;code&gt;infinity&lt;/code&gt; 으로 설정해야 합니다. 하위 프로세스가 작업자 인 경우 &lt;code&gt;infinity&lt;/code&gt; 로 설정할 수도 있습니다 . 아래 경고를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="04ca616fb018a5f7ed9b1457ccf717eb545a0d6c" translate="yes" xml:space="preserve">
          <source>If the child process is another supervisor, the shutdown time is to be set to &lt;code&gt;infinity&lt;/code&gt; to give the subtree ample time to shut down. It is also allowed to set it to &lt;code&gt;infinity&lt;/code&gt;, if the child process is a worker.</source>
          <target state="translated">하위 프로세스가 다른 수퍼바이저 인 경우, 종료 시간을 &lt;code&gt;infinity&lt;/code&gt; 으로 설정 하여 서브 트리가 종료 할 시간을 충분히 제공해야합니다. 하위 프로세스가 작업자 인 경우 &lt;code&gt;infinity&lt;/code&gt; 로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6c8d2313d1867bff7ceabb992796a9dc2cb660e" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;ignore&lt;/code&gt;, the child specification is added to the supervisor (unless the supervisor is a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor, see below), the pid is set to &lt;code&gt;undefined&lt;/code&gt;, and the function returns &lt;code&gt;{ok,undefined}&lt;/code&gt;.</source>
          <target state="translated">하위 프로세스 시작 함수가 &lt;code&gt;ignore&lt;/code&gt; 를 리턴 하면 하위 스펙이 수퍼바이저에 추가됩니다 (감독자가 &lt;code&gt;simple_one_for_one&lt;/code&gt; 수퍼바이저 가 아닌 경우 아래 참조), pid는 &lt;code&gt;undefined&lt;/code&gt; 로 설정되고 함수는 &lt;code&gt;{ok,undefined}&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="5ef5502f7b080e1244d616694cf24b3ea2478505" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;ignore&lt;/code&gt;, the pid remains set to &lt;code&gt;undefined&lt;/code&gt; and the function returns &lt;code&gt;{ok,undefined}&lt;/code&gt;.</source>
          <target state="translated">하위 프로세스 시작 함수가 &lt;code&gt;ignore&lt;/code&gt; 를 리턴 하면 pid는 &lt;code&gt;undefined&lt;/code&gt; 상태로 유지 되고 함수는 &lt;code&gt;{ok,undefined}&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2f7a47396e2013d77055f46cf69011c8dbc710aa" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;{ok,Child}&lt;/code&gt; or &lt;code&gt;{ok,Child,Info}&lt;/code&gt;, the child specification and pid are added to the supervisor and the function returns the same value.</source>
          <target state="translated">하위 프로세스 시작 함수가 &lt;code&gt;{ok,Child}&lt;/code&gt; 또는 &lt;code&gt;{ok,Child,Info}&lt;/code&gt; 를 리턴하면 하위 스펙 및 pid가 수퍼바이저에 추가되고 함수는 동일한 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="48c5d696f2b0fd45c1b44f5e625a2accf1b0ea21" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;{ok,Child}&lt;/code&gt; or &lt;code&gt;{ok,Child,Info}&lt;/code&gt;, the pid is added to the supervisor and the function returns the same value.</source>
          <target state="translated">하위 프로세스 시작 함수가 &lt;code&gt;{ok,Child}&lt;/code&gt; 또는 &lt;code&gt;{ok,Child,Info}&lt;/code&gt; 를 리턴하면 pid가 수퍼바이저에 추가되고 함수는 동일한 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="6d773deb857a328ed14a9080339dfab940c8161a" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, the child specification is discarded, and the function returns &lt;code&gt;{error,Error}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is a term containing information about the error and child specification.</source>
          <target state="translated">하위 프로세스 시작 함수가 오류 튜플 또는 잘못된 값을 리턴하거나 실패하면 하위 스펙을 버리고 &lt;code&gt;{error,Error}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Error&lt;/code&gt; 는 오류 및 하위 스펙에 대한 정보를 포함하는 용어입니다.</target>
        </trans-unit>
        <trans-unit id="1b122e474c03f3cefc84e42bbf3408fd35e5bb5e" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, the function returns &lt;code&gt;{error,Error}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is a term containing information about the error.</source>
          <target state="translated">하위 프로세스 시작 함수가 오류 튜플 또는 잘못된 값을 리턴하거나 실패하면 &lt;code&gt;{error,Error}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Error&lt;/code&gt; 는 오류 에 대한 정보를 포함하는 용어입니다.</target>
        </trans-unit>
        <trans-unit id="4b1288099957500451c193cb8d9ad26569f30036" translate="yes" xml:space="preserve">
          <source>If the child specification identified by &lt;code&gt;Id&lt;/code&gt; does not exist, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;. If the child specification exists but the corresponding process is already running, the function returns &lt;code&gt;{error,running}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; 로 식별 된 하위 스펙 이 존재하지 않으면 함수는 &lt;code&gt;{error,not_found}&lt;/code&gt; 를 리턴합니다 . 하위 스펙이 존재하지만 해당 프로세스가 이미 실행중인 경우 함수는 &lt;code&gt;{error,running}&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="cdb0f0cbc98dc7d94d6b59162ff7e5e589d60364" translate="yes" xml:space="preserve">
          <source>If the client does not support any of the server advertised protocols or the server does not advertise any protocols, the client falls back to the first protocol in its list or to the default protocol (if a default is supplied). If the server does not support Next Protocol Negotiation, the connection terminates if no default protocol is supplied.</source>
          <target state="translated">클라이언트가 서버 보급 프로토콜을 지원하지 않거나 서버가 프로토콜을 보급하지 않으면 클라이언트는 목록의 첫 번째 프로토콜 또는 기본 프로토콜 (기본값이 제공된 경우)로 폴백합니다. 서버가 Next Protocol Negotiation을 지원하지 않으면 기본 프로토콜이 제공되지 않으면 연결이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="1eacb16ee64844ecf9771b5e95710813db228ddf" translate="yes" xml:space="preserve">
          <source>If the client earlier has acquired a lock through &lt;code&gt;&lt;a href=&quot;#lock-2&quot;&gt;lock/2,3&lt;/a&gt;&lt;/code&gt;, this operation releases the associated lock. To access another target than &lt;code&gt;running&lt;/code&gt;, the server must support &lt;code&gt;:candidate&lt;/code&gt; and/or &lt;code&gt;:startup&lt;/code&gt;.</source>
          <target state="translated">클라이언트가 이전에 &lt;code&gt;&lt;a href=&quot;#lock-2&quot;&gt;lock/2,3&lt;/a&gt;&lt;/code&gt; 을 통해 잠금을 획득 한 경우이 조작은 연관된 잠금을 해제합니다. &lt;code&gt;running&lt;/code&gt; 이외의 다른 대상에 액세스하려면 서버가 &lt;code&gt;:candidate&lt;/code&gt; 및 / 또는 &lt;code&gt;:startup&lt;/code&gt; 을 지원해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bc1ef493c0d6b60856faddf62e5c3f0669465abe" translate="yes" xml:space="preserve">
          <source>If the code cannot be structured as in the &lt;code&gt;multiple_setelement/1&lt;/code&gt; example, the best way to modify multiple elements in a large tuple is to convert the tuple to a list, modify the list, and convert it back to a tuple.</source>
          <target state="translated">&lt;code&gt;multiple_setelement/1&lt;/code&gt; 예제 에서와 같이 코드를 구성 할 수없는 경우 큰 튜플에서 여러 요소를 수정하는 가장 좋은 방법은 튜플을 목록으로 변환하고 목록을 수정 한 다음 다시 튜플로 변환하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f0b7ca0808d04f400f34111028c04d20133e9b2d" translate="yes" xml:space="preserve">
          <source>If the common event handler needs to know the current state a function &lt;code&gt;handle_common/4&lt;/code&gt; can be used instead:</source>
          <target state="translated">공통 이벤트 핸들러가 현재 상태를 알아야하는 경우 &lt;code&gt;handle_common/4&lt;/code&gt; 함수를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff5b1741be466acda153b10a36fc7487f2ca70d6" translate="yes" xml:space="preserve">
          <source>If the compiler is to warn for missing callback functions, as it does for the OTP behaviours, add &lt;code&gt;-callback&lt;/code&gt; attributes in the behaviour module to describe the expected callbacks:</source>
          <target state="translated">컴파일러가 누락 된 콜백 함수에 대해 경고 &lt;code&gt;-callback&lt;/code&gt; 경우 OTP 동작과 마찬가지로 동작 모듈에 -callback 속성을 추가 하여 예상되는 콜백을 설명하십시오.</target>
        </trans-unit>
        <trans-unit id="523bb4f391597ed38f62115f28e3a49961855867" translate="yes" xml:space="preserve">
          <source>If the complete history is to be stored in the configuration file, &lt;code&gt;Config&lt;/code&gt; must be &lt;code&gt;all&lt;/code&gt;. If only a selected number of entries from the history are to be stored, &lt;code&gt;Config&lt;/code&gt; must be a list of integers pointing out the entries to be stored.</source>
          <target state="translated">전체 히스토리가 구성 파일에 저장되는 경우 &lt;code&gt;Config&lt;/code&gt; 는 &lt;code&gt;all&lt;/code&gt; 이어야 합니다 . 히스토리에서 선택된 수의 항목 만 저장 하려면 &lt;code&gt;Config&lt;/code&gt; 는 저장할 항목을 가리키는 정수 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="21e0716b03f7aa9ffd13782b0d420ef9a664a3d2" translate="yes" xml:space="preserve">
          <source>If the condition is not in any of the above formats, it must be an assertion. This can be a positive or negative lookahead or lookbehind assertion. Consider the following pattern, containing non-significant whitespace, and with the two alternatives on the second line:</source>
          <target state="translated">조건이 위의 형식 중 하나가 아닌 경우 어설 션이어야합니다. 이것은 긍정적이거나 부정적인 전망 일 수도 있고이면 주장 일 수도 있습니다. 중요하지 않은 공백을 포함하고 두 번째 줄에 두 가지 대안이있는 다음 패턴을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="8a2fdb8b039278dbbab74f5b7bfb97af967770cd" translate="yes" xml:space="preserve">
          <source>If the condition is satisfied, the yes-pattern is used, otherwise the no-pattern (if present). If more than two alternatives exist in the subpattern, a compile-time error occurs. Each of the two alternatives can itself contain nested subpatterns of any form, including conditional subpatterns; the restriction to two alternatives applies only at the level of the condition. The following pattern fragment is an example where the alternatives are complex:</source>
          <target state="translated">조건이 만족되면 예 패턴이 사용되고, 그렇지 않으면 비 패턴이있는 경우입니다. 하위 패턴에 둘 이상의 대안이 존재하면 컴파일 타임 오류가 발생합니다. 두 가지 대안 각각은 조건부 하위 패턴을 포함하여 모든 형태의 중첩 하위 패턴을 포함 할 수 있습니다. 두 대안에 대한 제한은 조건 수준에서만 적용됩니다. 다음 패턴 조각은 대안이 복잡한 예입니다.</target>
        </trans-unit>
        <trans-unit id="fa304219623acf477a2744ed1bbab72da379738b" translate="yes" xml:space="preserve">
          <source>If the condition is the string (DEFINE), and there is no subpattern with the name DEFINE, the condition is always false. In this case, there can be only one alternative in the subpattern. It is always skipped if control reaches this point in the pattern. The idea of DEFINE is that it can be used to define &quot;subroutines&quot; that can be referenced from elsewhere. (The use of subroutines is described below.) For example, a pattern to match an IPv4 address, such as &quot;192.168.23.245&quot;, can be written like this (ignore whitespace and line breaks):</source>
          <target state="translated">조건이 문자열 (DEFINE)이고 이름이 DEFINE 인 하위 패턴이없는 경우 조건은 항상 false입니다. 이 경우 서브 패턴에는 하나의 대안 만있을 수 있습니다. 제어가 패턴에서이 지점에 도달하면 항상 건너 뜁니다. DEFINE의 아이디어는 다른 곳에서 참조 할 수있는 &quot;서브 루틴&quot;을 정의하는 데 사용될 수 있다는 것입니다. (서브 루틴 사용은 아래에 설명되어 있습니다.) 예를 들어 &quot;192.168.23.245&quot;와 같은 IPv4 주소와 일치하는 패턴은 다음과 같이 쓸 수 있습니다 (공백 및 줄 바꿈 무시).</target>
        </trans-unit>
        <trans-unit id="8e3f4e65a85b857108a35b24009e6fe7e2ac2084" translate="yes" xml:space="preserve">
          <source>If the condition is the string (R), and there is no subpattern with the name R, the condition is true if a recursive call to the whole pattern or any subpattern has been made. If digits or a name preceded by ampersand follow the letter R, for example:</source>
          <target state="translated">조건이 문자열 (R)이고 이름이 R 인 서브 패턴이없는 경우, 전체 패턴 또는 서브 패턴을 재귀 적으로 호출 한 경우 조건이 참입니다. 숫자 또는 이름 앞에 앰퍼 문자가 있고 문자 R 뒤에 오는 경우 (예 :</target>
        </trans-unit>
        <trans-unit id="95c431a360008991bb1b7759c9f06391d6e75043" translate="yes" xml:space="preserve">
          <source>If the configuration is faulty, or if the initiation fails, the callback function must return &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">구성에 결함이 있거나 초기화에 실패하면 콜백 함수는 &lt;code&gt;{error,Reason}&lt;/code&gt; 을 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="18a294113eb6042d9ad2a36514917a6dc077c344" translate="yes" xml:space="preserve">
          <source>If the configuration is faulty, the callback function must return &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">구성에 결함이있는 경우 콜백 함수는 &lt;code&gt;{error,Reason}&lt;/code&gt; 을 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6a82e12e149afd95e3ddf1bb75d52a9982f828ca" translate="yes" xml:space="preserve">
          <source>If the configuration parameter &lt;code&gt;os_sup_enable&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, this function is called automatically by &lt;code&gt;os_sup&lt;/code&gt;, using the same arguments as when &lt;code&gt;enable/2&lt;/code&gt; was called.</source>
          <target state="translated">구성 매개 변수 &lt;code&gt;os_sup_enable&lt;/code&gt; 이 &lt;code&gt;false&lt;/code&gt; 인 경우, &lt;code&gt;enable/2&lt;/code&gt; 가 호출 될 때와 동일한 인수를 사용하여 &lt;code&gt;os_sup&lt;/code&gt; 에 의해이 함수가 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="aedee7601f2ce3a18dc9a8c63054f54ca3093e3f" translate="yes" xml:space="preserve">
          <source>If the configuration parameter &lt;code&gt;os_sup_enable&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, this function is called automatically by &lt;code&gt;os_sup&lt;/code&gt;, using the values of &lt;code&gt;os_sup_own&lt;/code&gt; and &lt;code&gt;os_sup_syslogconf&lt;/code&gt; as arguments.</source>
          <target state="translated">구성 매개 변수 &lt;code&gt;os_sup_enable&lt;/code&gt; 이 &lt;code&gt;false&lt;/code&gt; 인 경우 , &lt;code&gt;os_sup_own&lt;/code&gt; 및 &lt;code&gt;os_sup_syslogconf&lt;/code&gt; 의 값을 인수로 사용하여 &lt;code&gt;os_sup&lt;/code&gt; 에 의해이 함수가 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="b2ffcf1c22e3ce76143a4b07b440007a5df05ea7" translate="yes" xml:space="preserve">
          <source>If the configuration parameter &lt;code&gt;relocatable&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt; there is no need to install the target system with &lt;code&gt;reltool:install/2&lt;/code&gt; before it can be started. In that case the file tree containing the target system can be moved without re-installation.</source>
          <target state="translated">&lt;code&gt;relocatable&lt;/code&gt; 구성 매개 변수 가 &lt;code&gt;true&lt;/code&gt; 로 설정된 경우 , 대상 시스템을 시작하기 전에 &lt;code&gt;reltool:install/2&lt;/code&gt; 로 대상 시스템을 설치할 필요가 없습니다 . 이 경우 대상 시스템이 포함 된 파일 트리를 다시 설치하지 않고 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90f42cb19285f317fb015c9fad2016cce36110ed" translate="yes" xml:space="preserve">
          <source>If the connection timeout option &lt;code&gt;connect_timeout&lt;/code&gt; is set, that value is used also for the negotiation timeout and this option (&lt;code&gt;timeout&lt;/code&gt;) is ignored.</source>
          <target state="translated">연결 시간 종료 옵션 &lt;code&gt;connect_timeout&lt;/code&gt; 이 설정되면 해당 값은 협상 시간 종료에도 사용 되며이 옵션 ( &lt;code&gt;timeout&lt;/code&gt; )은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="860a4598c1d1ec6a83570120e591b858d6e8f890" translate="yes" xml:space="preserve">
          <source>If the connection to a remote node goes down, the main node will mark it as lost. If the node comes back it will be added again. If the remote node was alive during the disconnected periode, cover data from before and during this periode will be included in the analysis.</source>
          <target state="translated">원격 노드와의 연결이 끊어지면 주 노드는 연결이 끊어진 것으로 표시합니다. 노드가 다시 오면 다시 추가됩니다. 연결이 끊어진 기간 동안 원격 노드가 활성 상태 인 경우이 기간 이전 및이 기간 동안의 커버 데이터가 분석에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c3b7535bf38d5e1053e0dcfad4dfa786c040f2e7" translate="yes" xml:space="preserve">
          <source>If the contents of &lt;code&gt;.erlang&lt;/code&gt; are changed and a private version of &lt;code&gt;user_default&lt;/code&gt; is defined, the Erlang/OTP environment can be customized. More powerful changes can be made by supplying command-line arguments in the startup script &lt;code&gt;erl&lt;/code&gt;. For more information, see &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.erlang&lt;/code&gt; 의 내용 이 변경되고 개인 버전의 &lt;code&gt;user_default&lt;/code&gt; 가 정의 된 경우 Erlang / OTP 환경을 사용자 정의 할 수 있습니다. 시작 스크립트 &lt;code&gt;erl&lt;/code&gt; 에 명령 행 인수를 제공하여보다 강력한 변경을 수행 할 수 있습니다 . 자세한 내용은 &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6279554b0d57c5f26b8ffa794daeaf8c67036750" translate="yes" xml:space="preserve">
          <source>If the context requires an integer rather than a variable, an atom, or a string, you cannot use the uppercase convention to mark an automatic metavariable. Instead, if the integer (without the &lt;code&gt;909&lt;/code&gt;-prefix and lift/glob markers) ends in a &lt;code&gt;9&lt;/code&gt;, the integer will become an Erlang-level variable prefixed with &lt;code&gt;Q&lt;/code&gt;, and if it ends with &lt;code&gt;99&lt;/code&gt; it will also be automatically abstracted. For example, the following will increment the arity of the exported function f:</source>
          <target state="translated">컨텍스트에 변수, 원자 또는 문자열이 아닌 정수가 필요한 경우 대문자 규칙을 사용하여 자동 메타 변수를 표시 할 수 없습니다. 대신, 정수 ( &lt;code&gt;909&lt;/code&gt; - 접두사 및 리프트 / 글로브 마커가없는)가 &lt;code&gt;9&lt;/code&gt; 로 끝나는 경우 정수는 &lt;code&gt;Q&lt;/code&gt; 로 시작하는 Erlang 수준 변수 가되고 &lt;code&gt;99&lt;/code&gt; 로 끝나는 경우 자동으로 추상화됩니다. 예를 들어, 다음은 내 보낸 함수 f의 arity를 ​​증가시킵니다.</target>
        </trans-unit>
        <trans-unit id="e14244783ffadbf99f1d872c65ba8477af77375e" translate="yes" xml:space="preserve">
          <source>If the converse of a function F is a function F', then F' is called the &lt;strong id=&quot;inverse&quot;&gt;inverse&lt;/strong&gt; of F.</source>
          <target state="translated">함수 F의 반대가 함수 F '이면 F'를 F의 &lt;strong id=&quot;inverse&quot;&gt;반대&lt;/strong&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="04e1722c7eed1557956908ac595866c524c53815" translate="yes" xml:space="preserve">
          <source>If the cross compilation tools are prefixed by &lt;code&gt;&amp;lt;HOST&amp;gt;-&lt;/code&gt; you probably do not need to set these variables (where &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; is what has been passed as &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt; argument to &lt;code&gt;configure&lt;/code&gt;).</source>
          <target state="translated">크로스 컴파일 도구 앞에 &lt;code&gt;&amp;lt;HOST&amp;gt;-&lt;/code&gt; 가 붙는 경우 이러한 변수를 설정하지 않아도됩니다 (여기서 &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; 는 &lt;code&gt;configure&lt;/code&gt; 하기 위해 &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt; 인수 로 전달 된 것임 ).</target>
        </trans-unit>
        <trans-unit id="693638c468a0a688aceae31ef9d5b589f67e3d3d" translate="yes" xml:space="preserve">
          <source>If the data cannot be converted, either because of illegal Unicode/ISO Latin-1 characters in the list, or because of invalid UTF encoding in any binaries, an error tuple is returned. The error tuple contains the tag &lt;code&gt;error&lt;/code&gt;, a list representing the characters that could be converted before the error occurred and a representation of the characters including and after the offending integer/bytes. The last part is mostly for debugging, as it still constitutes a possibly deep or mixed list, or both, not necessarily of the same depth as the original data. The error occurs when traversing the list and whatever is left to decode is returned &quot;as is&quot;.</source>
          <target state="translated">목록의 잘못된 유니 코드 / ISO 라틴 -1 문자 또는 바이너리의 잘못된 UTF 인코딩으로 인해 데이터를 변환 할 수없는 경우 오류 튜플이 반환됩니다. 오류 튜플 태그가 포함되어 &lt;code&gt;error&lt;/code&gt; , 오류가 발생하기 전에 변환 할 수있는 문자를 포함하고 기분을 상하게 정수 후 문자의 표현을 나타내는 목록 / 바이트. 마지막 부분은 원본 데이터와 깊이가 같지 않아도 깊거나 혼합 된 목록 또는 둘 다를 구성 할 수 있기 때문에 주로 디버깅에 사용됩니다. 목록을 탐색 할 때 오류가 발생하고 디코딩 할 항목이 &quot;있는 그대로&quot;반환됩니다.</target>
        </trans-unit>
        <trans-unit id="830c19e2812b5ad638344d6692b4a5d1c14189d2" translate="yes" xml:space="preserve">
          <source>If the data in the table is to be accessed so that the order of the keys in the table is significant, the table type &lt;code&gt;ordered_set&lt;/code&gt; can be used instead of the more usual &lt;code&gt;set&lt;/code&gt; table type. An &lt;code&gt;ordered_set&lt;/code&gt; is always traversed in Erlang term order regarding the key field so that the return values from functions such as &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;match_object&lt;/code&gt;, and &lt;code&gt;foldl&lt;/code&gt; are ordered by the key values. Traversing an &lt;code&gt;ordered_set&lt;/code&gt; with the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; operations also returns the keys ordered.</source>
          <target state="translated">테이블의 키 순서가 중요하도록 테이블의 데이터에 액세스 &lt;code&gt;ordered_set&lt;/code&gt; 경우 더 일반적인 &lt;code&gt;set&lt;/code&gt; 테이블 유형 대신 ordered_set 테이블 유형을 사용할 수 있습니다 . &lt;code&gt;ordered_set&lt;/code&gt; 항상 같은 기능의 반환 값 있도록 키 필드에 대한 얼랑 용어의 순서로 통과되어 &lt;code&gt;select&lt;/code&gt; , &lt;code&gt;match_object&lt;/code&gt; 이 , 그리고 &lt;code&gt;foldl&lt;/code&gt; 이 키 값에 의해 정렬됩니다. &lt;code&gt;first&lt;/code&gt; 작업 과 &lt;code&gt;next&lt;/code&gt; 작업으로 &lt;code&gt;ordered_set&lt;/code&gt; 을 순회하면 순서가 지정된 키도 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c7cef7dde804ec38da41a38a959068e58669e710" translate="yes" xml:space="preserve">
          <source>If the data is to be sent from the driver to the port owner process, it is faster to use &lt;code&gt;&lt;a href=&quot;#driver_outputv&quot;&gt;driver_outputv&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">드라이버에서 포트 소유자 프로세스로 데이터를 보내려면 &lt;code&gt;&lt;a href=&quot;#driver_outputv&quot;&gt;driver_outputv&lt;/a&gt;&lt;/code&gt; 를 사용하는 것이 더 빠릅니다 .</target>
        </trans-unit>
        <trans-unit id="d69f0718531a0dc4b5192097fe34a9a400874115" translate="yes" xml:space="preserve">
          <source>If the database is huge, it it not always possible to restore it online. In such cases, restore the old database by installing a fallback and then restart.</source>
          <target state="translated">데이터베이스가 큰 경우 항상 온라인으로 복원 할 수있는 것은 아닙니다. 이러한 경우 대체를 설치하여 이전 데이터베이스를 복원 한 후 다시 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="1a465de33f0929289f4ba867f52979d6f1b60be6" translate="yes" xml:space="preserve">
          <source>If the decoded message happens to be received before the connection is established, a new &quot;virtual&quot; connection is established. This is typically the case for the Media Gateway Controller (MGC) upon the first Service Change. When this occurs the following callback function will be invoked:</source>
          <target state="translated">연결이 설정되기 전에 디코딩 된 메시지가 수신되면 새로운 &quot;가상&quot;연결이 설정됩니다. 일반적으로 첫 번째 서비스 변경시 MCC (Media Gateway Controller)의 경우입니다. 이 경우 다음과 같은 콜백 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fbdce8830ddb42e0e285519e4fb52411ce2090fe" translate="yes" xml:space="preserve">
          <source>If the decoded message instead of transactions contains a message error, the following callback function will be invoked:</source>
          <target state="translated">트랜잭션 대신 디코딩 된 메시지에 메시지 오류가 포함 된 경우 다음 콜백 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e05877711912cb7abc7753f9ce969b4440e6bb55" translate="yes" xml:space="preserve">
          <source>If the definitions are identical, the output module keeps only one definition with the original name.</source>
          <target state="translated">정의가 동일하면 출력 모듈은 원래 이름을 가진 하나의 정의 만 유지합니다.</target>
        </trans-unit>
        <trans-unit id="709eb064721592f0145e0c9870df4b79e36f2fb2" translate="yes" xml:space="preserve">
          <source>If the definitions have the same name and differs in the definition, they are renamed. The new names are the definition name and the original module name concatenated.</source>
          <target state="translated">정의의 이름이 같고 정의가 다른 경우 이름이 바뀝니다. 새로운 이름은 정의 이름과 원래 모듈 이름이 연결되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3055c07c7bca6e36c452534d5a6de3daec9136a" translate="yes" xml:space="preserve">
          <source>If the deleted entry is a registered subscriber, it will imply that the subscriber process gets is unregistered as subscriber as well as it gets it final message.</source>
          <target state="translated">삭제 된 항목이 등록 된 구독자 인 경우 구독자 프로세스가 구독자로 등록되지 않고 최종 메시지를받는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="818e5bafa76101bf732fc51de14593ea48da629f" translate="yes" xml:space="preserve">
          <source>If the destination node would have to be auto-connected to do the send, &lt;code&gt;noconnect&lt;/code&gt; is returned instead.</source>
          <target state="translated">송신을 수행하기 위해 목적지 노드가 자동 연결되어야하는 경우, 대신 &lt;code&gt;noconnect&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="fa49b96a6e23a80a21210ac903528ecee8169a93" translate="yes" xml:space="preserve">
          <source>If the directory for the files &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; and &lt;code&gt;syslog.conf.OTP&lt;/code&gt; is &lt;code&gt;/etc&lt;/code&gt;, the line in &lt;code&gt;syslog.conf.OTP&lt;/code&gt; is as follows:</source>
          <target state="translated">&lt;code&gt;syslog.conf.ORIG&lt;/code&gt; 및 &lt;code&gt;syslog.conf.OTP&lt;/code&gt; 파일의 디렉토리 가 &lt;code&gt;/etc&lt;/code&gt; 인 경우 &lt;code&gt;syslog.conf.OTP&lt;/code&gt; 의 행 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1cfa13bd96270a398f97e146ebd653c8f1622e36" translate="yes" xml:space="preserve">
          <source>If the directory is not found</source>
          <target state="translated">디렉토리를 찾을 수없는 경우</target>
        </trans-unit>
        <trans-unit id="ee9c7c20028055c752f1006405fb6ac3dd62c654" translate="yes" xml:space="preserve">
          <source>If the directory refers to a directory in an archive, the archive name is stripped away before the path is returned. For example, if directory &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2.ez/mnesia-4.2.2/ebin&lt;/code&gt; is in the path, &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2/ebin&lt;/code&gt; is returned. This means that the library directory for an application is the same, regardless if the application resides in an archive or not.</source>
          <target state="translated">디렉토리가 아카이브의 디렉토리를 참조하는 경우 경로가 리턴되기 전에 아카이브 이름이 제거됩니다. 예를 들어, &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2.ez/mnesia-4.2.2/ebin&lt;/code&gt; 디렉토리 가 경로에 있으면 &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2/ebin&lt;/code&gt; 반환됩니다. 이는 애플리케이션이 아카이브에 있는지 여부에 관계없이 애플리케이션의 라이브러리 디렉토리가 동일 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f85643a441c622fdd2576beffc4873deda4e4256" translate="yes" xml:space="preserve">
          <source>If the dirty NIF is expected to be CPU-bound, its &lt;code&gt;flags&lt;/code&gt; field is to be set to &lt;code&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; or &lt;code&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt;.</source>
          <target state="translated">더티 NIF가 CPU에 바인드 될 것으로 예상되는 경우, &lt;code&gt;flags&lt;/code&gt; 필드는 &lt;code&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; 또는 &lt;code&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c2ddfd812a9a461d82c50bcdf565e3ca018a4da" translate="yes" xml:space="preserve">
          <source>If the driver for some reason wants to keep a driver binary around, for example in a static variable, the reference count is to be incremented, and the binary can later be freed in the &lt;code&gt;&lt;a href=&quot;driver_entry#stop&quot;&gt;stop&lt;/a&gt;&lt;/code&gt; callback, with &lt;code&gt;driver_free_binary&lt;/code&gt;.</source>
          <target state="translated">어떤 이유로 드라이버가 예를 들어 정적 변수와 같이 드라이버 바이너리를 유지하려는 경우 참조 카운트가 증가되고 나중에 바이너리를 &lt;code&gt;&lt;a href=&quot;driver_entry#stop&quot;&gt;stop&lt;/a&gt;&lt;/code&gt; 콜백에서 &lt;code&gt;driver_free_binary&lt;/code&gt; 로 해제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a12df4e4fa0309d2f4f4f74b51f81225f4bdeeaf" translate="yes" xml:space="preserve">
          <source>If the driver has option &lt;code&gt;kill_ports&lt;/code&gt; set, or if &lt;code&gt;kill_ports&lt;/code&gt; is specified as an option to this function, all pending ports using this driver are killed when unloading is done by the last &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt;. If no port-killing is involved and there are open ports, the unloading is delayed until no more open ports use the driver. If, in this case, another &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; (or even this user) loads the driver again before the driver is unloaded, the unloading never takes place.</source>
          <target state="translated">드라이버에 &lt;code&gt;kill_ports&lt;/code&gt; 옵션이 설정되어 있거나 &lt;code&gt;kill_ports&lt;/code&gt; 가이 기능에 대한 옵션으로 지정된 경우 , 마지막 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; 가 언로드 할 때이 드라이버를 사용하는 모든 보류 포트가 종료됩니다 . 포트 킬링이없고 열린 포트가있는 경우 더 이상 열린 포트가 드라이버를 사용하지 않을 때까지 언로드가 지연됩니다. 이 경우 다른 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; (또는이 사용자)가 드라이버를 언로드하기 전에 드라이버를 다시로드하면 언로드가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fcf785a336b2c213c45577e83eb09e396c7e3eab" translate="yes" xml:space="preserve">
          <source>If the driver is unloaded (not present in the system), error code &lt;code&gt;not_loaded&lt;/code&gt; is returned. Option &lt;code&gt;reload&lt;/code&gt; is intended for when the user has already loaded the driver in advance.</source>
          <target state="translated">드라이버가 언로드되면 (시스템에 없음) 오류 코드 &lt;code&gt;not_loaded&lt;/code&gt; 가 반환됩니다. 옵션 &lt;code&gt;reload&lt;/code&gt; 는 사용자가 이미 드라이버를 미리로드 한 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="af3e2b2e4d5d486f038ae4047d709485c51ebafd" translate="yes" xml:space="preserve">
          <source>If the driver wants to return data, it is to return it in &lt;code&gt;rbuf&lt;/code&gt;. When &lt;code&gt;control&lt;/code&gt; is called, &lt;code&gt;*rbuf&lt;/code&gt; points to a default buffer of &lt;code&gt;rlen&lt;/code&gt; bytes, which can be used to return data. Data is returned differently depending on the port control flags (those that are set with &lt;code&gt;&lt;a href=&quot;erl_driver#set_port_control_flags&quot;&gt;erl_driver:set_port_control_flags&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">드라이버가 데이터를 반환하려면 &lt;code&gt;rbuf&lt;/code&gt; 로 반환해야합니다 . 되면 &lt;code&gt;control&lt;/code&gt; , 호출 &lt;code&gt;*rbuf&lt;/code&gt; 의 디폴트 버퍼 포인트 &lt;code&gt;rlen&lt;/code&gt; 데이터를 반환하는 데 사용될 수있는 바이트. 포트 제어 플래그 ( &lt;code&gt;&lt;a href=&quot;erl_driver#set_port_control_flags&quot;&gt;erl_driver:set_port_control_flags&lt;/a&gt;&lt;/code&gt; 로 설정된 플래그)에 따라 데이터가 다르게 리턴 됩니다.</target>
        </trans-unit>
        <trans-unit id="f299a698f91b18144d2db6873d22e3355371e343" translate="yes" xml:space="preserve">
          <source>If the driver was previously unloaded, but is still present because of open ports to it, a call to &lt;code&gt;load/2&lt;/code&gt; stops the unloading and keeps the driver (as long as &lt;code&gt;Path&lt;/code&gt; is the same), and &lt;code&gt;ok&lt;/code&gt; is returned. If you really want the object code to be reloaded, use &lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt; or the low-level interface &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; instead. See also the description of &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;different scenarios&lt;/a&gt;&lt;/code&gt; for loading/unloading in the introduction.</source>
          <target state="translated">드라이버가 이전에 언로드되었지만 열린 포트로 인해 여전히 존재하는 경우 &lt;code&gt;load/2&lt;/code&gt; 를 호출 하면 언로드가 중지되고 드라이버가 유지됩니다 ( &lt;code&gt;Path&lt;/code&gt; 가 동일한 경우) . &lt;code&gt;ok&lt;/code&gt; 가 반환됩니다. 객체 코드를 실제로 다시로드하려면 &lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt; 또는 저수준 인터페이스 &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; 를 대신 사용하십시오. 소개에서로드 / 언로드에 대한 &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;different scenarios&lt;/a&gt;&lt;/code&gt; 대한 설명도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="73cd90e7e567fcfaa60abf0aba49564831915adf" translate="yes" xml:space="preserve">
          <source>If the edge would create a cycle in an &lt;code&gt;&lt;a href=&quot;#acyclic_digraph&quot;&gt;acyclic digraph&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;Path}}&lt;/code&gt; is returned. If &lt;code&gt;G&lt;/code&gt; already has an edge with value &lt;code&gt;E&lt;/code&gt; connecting a different pair of vertices, &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;[V1,&amp;nbsp;V2]}}&lt;/code&gt; is returned. If either of &lt;code&gt;V1&lt;/code&gt; or &lt;code&gt;V2&lt;/code&gt; is not a vertex of digraph &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;{error,&amp;nbsp;{bad_vertex,&amp;nbsp;&lt;/code&gt;V&lt;code&gt;}}&lt;/code&gt; is returned, V = &lt;code&gt;V1&lt;/code&gt; or V = &lt;code&gt;V2&lt;/code&gt;.</source>
          <target state="translated">가장자리가의 사이클을 만들 것입니다 경우 &lt;code&gt;&lt;a href=&quot;#acyclic_digraph&quot;&gt;acyclic digraph&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;Path}}&lt;/code&gt; 반환됩니다. &lt;code&gt;G&lt;/code&gt; 에 다른 정점 쌍을 연결하는 &lt;code&gt;E&lt;/code&gt; 값을 가진 모서리가 이미 있으면 &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;[V1,&amp;nbsp;V2]}}&lt;/code&gt; 가 반환됩니다. 어느 경우에는 &lt;code&gt;V1&lt;/code&gt; 또는 &lt;code&gt;V2&lt;/code&gt; 는 이중 음자의 정점 아니다 &lt;code&gt;G&lt;/code&gt; , &lt;code&gt;{error,&amp;nbsp;{bad_vertex,&amp;nbsp;&lt;/code&gt; V는 &lt;code&gt;}}&lt;/code&gt; 리턴된다 V = &lt;code&gt;V1&lt;/code&gt; 또는 V = &lt;code&gt;V2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="88548b0769c08599153c91bedffecba4076939a2" translate="yes" xml:space="preserve">
          <source>If the emulator detects an internal error (or runs out of memory), it, by default, generates both a crash dump and a core dump. The core dump is, however, not very useful as the content of process heaps is destroyed by the crash dump generation.</source>
          <target state="translated">에뮬레이터에서 내부 오류를 감지하거나 메모리가 부족하면 기본적으로 크래시 덤프와 코어 덤프가 모두 생성됩니다. 그러나 프로세스 덤프의 내용이 크래시 덤프 생성에 의해 파괴되므로 코어 덤프는 그다지 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1c268e0a4f924dc7fcacea261eaf98d33a0b39dd" translate="yes" xml:space="preserve">
          <source>If the emulator needs to be restarted after upgrading or downgrading, that is, if the ERTS version differs between &lt;code&gt;Name.rel&lt;/code&gt; and &lt;code&gt;Name2.rel&lt;/code&gt;</source>
          <target state="translated">업그레이드 또는 다운 그레이드 후 에뮬레이터를 다시 시작해야하는 경우, 즉 ERTS 버전이 &lt;code&gt;Name.rel&lt;/code&gt; 과 &lt;code&gt;Name2.rel&lt;/code&gt; 간에 다른 경우</target>
        </trans-unit>
        <trans-unit id="0e5cf3cf162417b51e0a5af24e5040b612349b1b" translate="yes" xml:space="preserve">
          <source>If the emulator needs to write a crash dump, the value of this variable is the filename of the crash dump file. If the variable is not set, the name of the crash dump file is &lt;code&gt;erl_crash.dump&lt;/code&gt; in the current directory.</source>
          <target state="translated">에뮬레이터에서 크래시 덤프를 작성해야하는 경우이 변수의 값은 크래시 덤프 파일의 파일 이름입니다. 변수가 설정되지 않은 경우 충돌 덤프 파일의 이름은 현재 디렉토리에서 &lt;code&gt;erl_crash.dump&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="40c61683ad15fa177c304fbdf476f8b2479cdc64" translate="yes" xml:space="preserve">
          <source>If the emulator was built with support for &lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt;dirty schedulers&lt;/a&gt;&lt;/code&gt;, changing the number of schedulers online can also change the number of dirty CPU schedulers online. For example, if 12 schedulers and 6 dirty CPU schedulers are online, and &lt;code&gt;system_flag/2&lt;/code&gt; is used to set the number of schedulers online to 6, then the number of dirty CPU schedulers online is automatically decreased by half as well, down to 3. Similarly, the number of dirty CPU schedulers online increases proportionally to increases in the number of schedulers online.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt;dirty schedulers&lt;/a&gt;&lt;/code&gt; 를 지원하도록 에뮬레이터를 빌드 한 경우 온라인으로 스케줄러 수를 변경하면 더티 CPU 스케줄러가 온라인으로 변경 될 수도 있습니다. 예를 들어, 12 개의 스케줄러와 6 개의 더티 CPU 스케줄러가 온라인이고 &lt;code&gt;system_flag/2&lt;/code&gt; 를 사용하여 스케줄러의 온라인 수를 6으로 설정하면 더티 CPU 스케줄러의 온라인 수는 자동으로 절반으로 3으로 줄어 듭니다. 마찬가지로 온라인 더티 CPU 스케줄러 수는 온라인 스케줄러 수 증가에 비례하여 증가합니다.</target>
        </trans-unit>
        <trans-unit id="b9353bd702a35793ac18305b8482171f21007231" translate="yes" xml:space="preserve">
          <source>If the end of the pattern is reached, the match succeeds and you can retrieve the contents of the variable.</source>
          <target state="translated">패턴의 끝에 도달하면 일치가 성공하고 변수의 내용을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec86b8e10359d9eb0c69eab5270c60f057cce319" translate="yes" xml:space="preserve">
          <source>If the engine is located in the OpenSSL/LibreSSL installation &lt;code&gt;engines&lt;/code&gt; directory.</source>
          <target state="translated">엔진이 OpenSSL / LibreSSL 설치 &lt;code&gt;engines&lt;/code&gt; 디렉토리에있는 경우</target>
        </trans-unit>
        <trans-unit id="17edef4a35e3cca0ca8935fe0f2de48f9e5dfe47" translate="yes" xml:space="preserve">
          <source>If the entry is a new subscriber, it will imply that the new subscriber process first will get one message for each already stored dictionary entry, before it and all old subscribers will get this particular entry. The collector process links to and then supervises the subscriber process. If the subscriber process dies it will imply that it gets unregistered as with a normal dict_delete/2.</source>
          <target state="translated">항목이 새로운 가입자 인 경우, 새로운 가입자 프로세스는 먼저 이미 저장된 각 사전 항목에 대해 하나의 메시지를 수신하고 모든 기존 가입자는이 특정 항목을 가져옵니다. 수집기 프로세스는 구독자 프로세스에 연결 한 다음이를 감독합니다. 구독자 프로세스가 종료되면 일반 dict_delete / 2와 같이 등록이 취소되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a094e54489c949e55e10b1bfd099675a9945d8d2" translate="yes" xml:space="preserve">
          <source>If the evaluation of &lt;code&gt;Exprs&lt;/code&gt; succeeds without an exception, the patterns &lt;code&gt;Pattern&lt;/code&gt; are sequentially matched against the result in the same way as for a &lt;code&gt;&lt;a href=&quot;#case&quot;&gt;case&lt;/a&gt;&lt;/code&gt; expression, except that if the matching fails, a &lt;code&gt;try_clause&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">평가하면 &lt;code&gt;Exprs&lt;/code&gt; 는 예외없이 성공할 무늬 &lt;code&gt;Pattern&lt;/code&gt; 순차적와 동일한 방식으로 한 결과에 대해 일치하는 &lt;code&gt;&lt;a href=&quot;#case&quot;&gt;case&lt;/a&gt;&lt;/code&gt; 일치가 실패하면 것 이외에는, 식 &lt;code&gt;try_clause&lt;/code&gt; 런타임 에러가 발생한다.</target>
        </trans-unit>
        <trans-unit id="631031b9e342940aba31e2236569e617b51e7128" translate="yes" xml:space="preserve">
          <source>If the event handler is added because of a call to &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#add_sup_handler-3&quot;&gt;add_sup_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;InitArgs&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument of these functions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#add_sup_handler-3&quot;&gt;add_sup_handler/3&lt;/a&gt;&lt;/code&gt; 호출로 인해 이벤트 핸들러가 추가 되면 &lt;code&gt;InitArgs&lt;/code&gt; 는 이 함수 의 &lt;code&gt;Args&lt;/code&gt; 인수입니다.</target>
        </trans-unit>
        <trans-unit id="3160cb662d43645579ff66ccf206017473a57cb3" translate="yes" xml:space="preserve">
          <source>If the event handler is deleted because of a call to &lt;code&gt;&lt;a href=&quot;#delete_handler-3&quot;&gt;delete_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Arg&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument of this function call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#delete_handler-3&quot;&gt;delete_handler/3&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 에 대한 호출로 인해 이벤트 핸들러가 삭제 되면 &lt;code&gt;Arg&lt;/code&gt; 는 이 함수 호출 의 &lt;code&gt;Args&lt;/code&gt; 인수입니다.</target>
        </trans-unit>
        <trans-unit id="89ab1aecc97fe6f0f9ffea8f0aa54544b441d79d" translate="yes" xml:space="preserve">
          <source>If the event handler is deleted later, the event manager sends a message &lt;code&gt;{gen_event_EXIT,Handler,Reason}&lt;/code&gt; to the calling process. &lt;code&gt;Reason&lt;/code&gt; is one of the following:</source>
          <target state="translated">이벤트 핸들러가 나중에 삭제되면, 이벤트 관리자는 &lt;code&gt;{gen_event_EXIT,Handler,Reason}&lt;/code&gt; 메시지 를 호출 프로세스로 보냅니다 . &lt;code&gt;Reason&lt;/code&gt; 는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="b6a4d7864917b404d52d14fae5596ac8786e5389" translate="yes" xml:space="preserve">
          <source>If the event handler replaces another event handler because of a call to &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;, or because of a &lt;code&gt;swap&lt;/code&gt; return tuple from one of the other callback functions, &lt;code&gt;InitArgs&lt;/code&gt; is a tuple &lt;code&gt;{Args,Term}&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; is the argument provided in the function call/return tuple and &lt;code&gt;Term&lt;/code&gt; is the result of terminating the old event handler, see &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이벤트 핸들러가 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 에 대한 호출 또는 다른 콜백 함수 중 하나의 &lt;code&gt;swap&lt;/code&gt; 리턴 튜플로 인해 다른 이벤트 핸들러를 대체하는 경우 &lt;code&gt;InitArgs&lt;/code&gt; 는 튜플 &lt;code&gt;{Args,Term}&lt;/code&gt; 입니다 . 여기서 &lt;code&gt;Args&lt;/code&gt; 는 함수 호출 / 반환 튜플에 제공된 인수 및 &lt;code&gt;Term&lt;/code&gt; 은 이전 이벤트 핸들러를 종료 한 결과입니다 ( &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="bd74a922c6e5b981bbc80b4da38fda2c75c0b1ea" translate="yes" xml:space="preserve">
          <source>If the event log is configured to wrap around automatically, records that have arrived to the log and been overwritten when &lt;code&gt;nteventlog&lt;/code&gt; was not running are lost. It however detects this state and loses no records that are not overwritten.</source>
          <target state="translated">이벤트 로그가 자동으로 랩핑되도록 구성된 경우, 로그에 도착하여 &lt;code&gt;nteventlog&lt;/code&gt; 가 실행 중이 지 않을 때 겹쳐 쓴 레코드 는 손실됩니다. 그러나이 상태를 감지하고 덮어 쓰지 않은 레코드는 손실되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1781a9137364e9b0633c2b37fb076419c90678b9" translate="yes" xml:space="preserve">
          <source>If the event manager is part of a supervision tree, no stop function is needed. The event manager is automatically terminated by its supervisor. Exactly how this is done is defined by a &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; set in the supervisor.</source>
          <target state="translated">이벤트 관리자가 감독 트리의 일부인 경우 중지 기능이 필요하지 않습니다. 이벤트 관리자는 감독자에 의해 자동으로 종료됩니다. 정확하게이 작업을 수행하는 방법 은 수퍼바이저에 설정된 &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="23a26a698f7576e3a5781ee1ace5ea565efded8a" translate="yes" xml:space="preserve">
          <source>If the event manager is successfully created, the function returns &lt;code&gt;{ok,Pid}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the event manager. If a process with the specified &lt;code&gt;EventMgrName&lt;/code&gt; exists already, the function returns &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of that process.</source>
          <target state="translated">이벤트 관리자가 작성되면 함수는 &lt;code&gt;{ok,Pid}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 이벤트 관리자의 pid입니다. 지정된 &lt;code&gt;EventMgrName&lt;/code&gt; 을 가진 프로세스 가 이미 존재하는 경우 함수는 &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 해당 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="85c7349696150a1895889e8faf7c4713894d022f" translate="yes" xml:space="preserve">
          <source>If the exclusive decode function has, for example, the name &lt;code&gt;decode_exclusive&lt;/code&gt; and an ASN.1 encoded message &lt;code&gt;Bin&lt;/code&gt; is to be exclusive decoded, the call is as follows:</source>
          <target state="translated">배타적 디코딩 기능이 예를 들어, 이름 &lt;code&gt;decode_exclusive&lt;/code&gt; 및 ASN.1로 인코딩 된 메시지 &lt;code&gt;Bin&lt;/code&gt; 이 배타적 디코딩되는 경우, 호출은 다음과 같다 :</target>
        </trans-unit>
        <trans-unit id="03f0f3b2eabafa60c9e9c721aa1cad9fcc5b78a3" translate="yes" xml:space="preserve">
          <source>If the failed test case belongs to a test case group, the first argument is a tuple &lt;code&gt;{FuncName,GroupName}&lt;/code&gt;, otherwise only the function name.</source>
          <target state="translated">실패한 테스트 케이스가 테스트 케이스 그룹에 속하는 경우 첫 번째 인수는 튜플 &lt;code&gt;{FuncName,GroupName}&lt;/code&gt; 이고 그렇지 않은 경우 함수 이름입니다.</target>
        </trans-unit>
        <trans-unit id="ae5596ad95475cf2f268aa093acd0a50a12f5551" translate="yes" xml:space="preserve">
          <source>If the file contains source code (as in the example above), it is processed by the &lt;code&gt;epp&lt;/code&gt; preprocessor. This means that you, for example, can use predefined macros (such as &lt;code&gt;?MODULE&lt;/code&gt;) and include directives like the &lt;code&gt;-include_lib&lt;/code&gt; directive. For example, use</source>
          <target state="translated">파일에 소스 코드가 포함 된 경우 (위의 예와 같이) &lt;code&gt;epp&lt;/code&gt; 전처리 기에 의해 처리됩니다 . 예를 들어 &lt;code&gt;?MODULE&lt;/code&gt; 과 같은 사전 정의 된 매크로를 사용 하고 &lt;code&gt;-include_lib&lt;/code&gt; 지시문 과 같은 지시문을 포함 할 수 있습니다 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="09f7b5f0081b8333cb37ae76ae1513548332cd8c" translate="yes" xml:space="preserve">
          <source>If the file is opened in binary mode, the read bytes are returned in a binary, otherwise in a list.</source>
          <target state="translated">파일이 이진 모드로 열린 경우 읽기 바이트는 이진으로, 그렇지 않으면 목록으로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d43d376c036cd6704fab6602e0a821d2fca0f536" translate="yes" xml:space="preserve">
          <source>If the file is opened with &lt;code&gt;encoding&lt;/code&gt; set to something else than &lt;code&gt;latin1&lt;/code&gt;, each byte written can result in many bytes being written to the file, as the byte range 0..255 can represent anything between one and four bytes depending on value and UTF encoding type.</source>
          <target state="translated">파일이 &lt;code&gt;latin1&lt;/code&gt; 이외의 &lt;code&gt;encoding&lt;/code&gt; 설정된 상태 에서 파일을 열면 바이트 범위 0..255는 값과 UTF 인코딩에 따라 1에서 4 바이트 사이를 나타낼 수 있으므로 각 바이트는 파일에 많은 바이트를 쓸 수 있습니다. 유형.</target>
        </trans-unit>
        <trans-unit id="3ff2942f4038fb71563badd19ea96ee04bc36590" translate="yes" xml:space="preserve">
          <source>If the file is read past &lt;code&gt;eof&lt;/code&gt;, only the remaining bytes are read and returned. If no bytes are read, &lt;code&gt;eof&lt;/code&gt; is returned.</source>
          <target state="translated">파일을 &lt;code&gt;eof&lt;/code&gt; 지나서 읽은 경우 나머지 바이트 만 읽고 리턴합니다. 읽은 바이트가 없으면 &lt;code&gt;eof&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="0301143503899c06f595e73d4da8e12a605f082d" translate="yes" xml:space="preserve">
          <source>If the file is specified as an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;, no file is read or monitored in the future. This emulates the old behavior of not configuring the DNS client when the node is started in short name distributed mode.</source>
          <target state="translated">파일이 빈 문자열 &lt;code&gt;&quot;&quot;&lt;/code&gt; 로 지정 되면 나중에 파일을 읽거나 모니터하지 않습니다. 이것은 짧은 이름 분산 모드에서 노드가 시작될 때 DNS 클라이언트를 구성하지 않는 이전 동작을 에뮬레이트합니다.</target>
        </trans-unit>
        <trans-unit id="f524572ea2342154f69f71b644500e15cc9901dc" translate="yes" xml:space="preserve">
          <source>If the file server of this node is not a slave, the file was opened by the file server of this node (this implies that &lt;code&gt;Pid&lt;/code&gt; must be a local pid) and the file is not closed. &lt;code&gt;Filename&lt;/code&gt; is the filename in flat string format.</source>
          <target state="translated">이 노드의 파일 서버가 슬레이브가 아닌 경우,이 노드의 파일 서버가 파일을 열어서 ( &lt;code&gt;Pid&lt;/code&gt; 가 로컬 pid 여야 함을 나타냄) 파일이 닫히지 않습니다. &lt;code&gt;Filename&lt;/code&gt; 은 플랫 문자열 형식의 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="19dad8b9ff6393c913546c9bff544a5e8d858493" translate="yes" xml:space="preserve">
          <source>If the file was opened in binary mode, the read bytes are returned in a binary, otherwise in a list. The list or binary is shorter than the number of bytes requested if end of file was reached.</source>
          <target state="translated">파일이 이진 모드로 열린 경우 읽기 바이트는 이진으로, 그렇지 않으면 목록으로 반환됩니다. 파일 끝에 도달 한 경우 요청 된 바이트 수보다 목록 또는 이진이 짧습니다.</target>
        </trans-unit>
        <trans-unit id="ead416d9e5e17b9f14938d13eb799b54c7ee7032" translate="yes" xml:space="preserve">
          <source>If the file write fails (for example, &lt;code&gt;enospc&lt;/code&gt;), the command is aborted and &lt;code&gt;{error, file_write_error_reason()}&lt;/code&gt; is returned. However, the file is &lt;strong&gt;not&lt;/strong&gt; removed.</source>
          <target state="translated">파일 쓰기에 실패하면 (예 : &lt;code&gt;enospc&lt;/code&gt; ) 명령이 중단되고 &lt;code&gt;{error, file_write_error_reason()}&lt;/code&gt; 이 리턴됩니다. 그러나 파일은 제거 &lt;strong&gt;되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3f0c09a69dc8ebf1e91578b9796f029369abc850" translate="yes" xml:space="preserve">
          <source>If the filename &lt;code&gt;File&lt;/code&gt; is absolute (possibly after variable substitution), the include file with that name is included. Otherwise, the specified file is searched for in the following directories, and in this order:</source>
          <target state="translated">파일 이름 &lt;code&gt;File&lt;/code&gt; 이 절대적 이면 (변수 대체 후) 해당 이름의 포함 파일이 포함됩니다. 그렇지 않으면, 지정된 파일이 다음 디렉토리에서 순서대로 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="f6fdb5791718e9cf14d2a9c0a809646872e636fd" translate="yes" xml:space="preserve">
          <source>If the filter does not match, it returns &lt;code&gt;ignore&lt;/code&gt;, meaning that other filters, or the value of the configuration parameter &lt;code&gt;filter_default&lt;/code&gt;, decide if the event is allowed or not.</source>
          <target state="translated">필터가 일치하지 않으면 다른 필터 또는 구성 매개 변수 &lt;code&gt;filter_default&lt;/code&gt; 의 값이 이벤트를 허용하는지 여부를 결정하는 &lt;code&gt;ignore&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="298fc01aae2302d31a30ab2828690b737a94df8b" translate="yes" xml:space="preserve">
          <source>If the filter does not match, it returns &lt;code&gt;ignore&lt;/code&gt;, meaning that other filters, or the value of the configuration parameter &lt;code&gt;filter_default&lt;/code&gt;, will decide if the event is allowed or not.</source>
          <target state="translated">필터가 일치하지 않으면 다른 필터 또는 구성 매개 변수 &lt;code&gt;filter_default&lt;/code&gt; 의 값이 이벤트의 허용 여부를 결정 함을 의미하는 &lt;code&gt;ignore&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="3e713bc836d6d924cbd200c2e55ce5f9136754b5" translate="yes" xml:space="preserve">
          <source>If the filter function returns &lt;code&gt;ignore&lt;/code&gt;, it means that it did not recognize the log event, and thus leaves to other filters to decide the event's destiny.</source>
          <target state="translated">필터 함수가 &lt;code&gt;ignore&lt;/code&gt; 를 반환 하면 로그 이벤트를 인식하지 못 했으므로 다른 필터를 사용하여 이벤트의 운명을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="957041343c23aa2d4654805ac48c48dc4fb915f8" translate="yes" xml:space="preserve">
          <source>If the filter has the form &lt;code&gt;{Key, RegExp, re}&lt;/code&gt;, the report must contain an element with key equal to &lt;code&gt;Key&lt;/code&gt; and the value must match the regular expression &lt;code&gt;RegExp&lt;/code&gt;.</source>
          <target state="translated">필터의 형식이 &lt;code&gt;{Key, RegExp, re}&lt;/code&gt; 인 경우 보고서에는 &lt;code&gt;Key&lt;/code&gt; 와 Key가 같은 요소가 포함 되어야하며 값은 정규식 &lt;code&gt;RegExp&lt;/code&gt; 와 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="6e1184361ce4e087a6b4dd8211b45d80ed4f9e48" translate="yes" xml:space="preserve">
          <source>If the filter matches and &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;log&lt;/code&gt;, the log event is allowed. If the filter matches and &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;stop&lt;/code&gt;, the log event is stopped.</source>
          <target state="translated">필터가 일치하고 &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;log&lt;/code&gt; 인 경우 로그 이벤트가 허용됩니다. 필터가 일치하고 &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;stop&lt;/code&gt; 인 경우 로그 이벤트가 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="32e9da768719e8b90b1faba156fc380cf35dffea" translate="yes" xml:space="preserve">
          <source>If the final string is too long, it is truncated according to the value of configuration parameter &lt;code&gt;&lt;a href=&quot;#max_size&quot;&gt;max_size&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">최종 문자열이 너무 길면 구성 매개 변수 &lt;code&gt;&lt;a href=&quot;#max_size&quot;&gt;max_size&lt;/a&gt;&lt;/code&gt; 의 값에 따라 잘립니다 .</target>
        </trans-unit>
        <trans-unit id="f6ebf0a745164970b389f3300cbccd27f4b3b5d3" translate="yes" xml:space="preserve">
          <source>If the flag is set to &lt;code&gt;0&lt;/code&gt;, data is returned as a list of integers. Either use the default buffer or set &lt;code&gt;*rbuf&lt;/code&gt; to point to a larger buffer allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt;erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt;. The buffer is freed automatically after &lt;code&gt;control&lt;/code&gt; has returned.</source>
          <target state="translated">플래그가 &lt;code&gt;0&lt;/code&gt; 으로 설정 되면 데이터는 정수 목록으로 리턴됩니다. 기본 버퍼를 사용하거나 &lt;code&gt;*rbuf&lt;/code&gt; 를 설정 하여 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt;erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt; 과 함께 할당 된 더 큰 버퍼를 가리 킵니다 . &lt;code&gt;control&lt;/code&gt; 가 리턴 된 후 버퍼가 자동으로 해제됩니다 .</target>
        </trans-unit>
        <trans-unit id="3fdf06cbeca702cf9635bd5a2282dbe52c9f9489" translate="yes" xml:space="preserve">
          <source>If the flag is set to &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt;, a binary is returned. Small binaries can be returned by writing the raw data into the default buffer. A binary can also be returned by setting &lt;code&gt;*rbuf&lt;/code&gt; to point to a binary allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc_binary&quot;&gt;erl_driver:driver_alloc_binary&lt;/a&gt;&lt;/code&gt;. This binary is freed automatically after &lt;code&gt;control&lt;/code&gt; has returned. The driver can retain the binary for &lt;strong&gt;read only&lt;/strong&gt; access with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_binary_inc_refc&quot;&gt;erl_driver:driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; to be freed later with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_free_binary&quot;&gt;erl_driver:driver_free_binary&lt;/a&gt;&lt;/code&gt;. It is never allowed to change the binary after &lt;code&gt;control&lt;/code&gt; has returned. If &lt;code&gt;*rbuf&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt;, an empty list is returned.</source>
          <target state="translated">플래그가 &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt; 로 설정 되면 이진이 반환됩니다. 원시 데이터를 기본 버퍼에 기록하여 작은 이진 파일을 반환 할 수 있습니다. &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc_binary&quot;&gt;erl_driver:driver_alloc_binary&lt;/a&gt;&lt;/code&gt; 로 할당 된 이진을 가리 키도록 &lt;code&gt;*rbuf&lt;/code&gt; 를 설정 하여 이진을 반환 할 수도 있습니다 . 이 바이너리는 &lt;code&gt;control&lt;/code&gt; 이 반환 된 후 자동으로 해제됩니다 . 드라이버는 나중에 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_free_binary&quot;&gt;erl_driver:driver_free_binary&lt;/a&gt;&lt;/code&gt; 로 해제되도록 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_binary_inc_refc&quot;&gt;erl_driver:driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; 를 사용하여 &lt;strong&gt;읽기 전용&lt;/strong&gt; 액세스를 위해 바이너리를 유지할 수 있습니다 . &lt;code&gt;control&lt;/code&gt; 가 리턴 된 후에는 2 진을 변경할 수 없습니다 . &lt;code&gt;*rbuf&lt;/code&gt; 가 &lt;code&gt;NULL&lt;/code&gt; 로 설정된 경우&lt;strong&gt;&lt;/strong&gt;빈 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ba4d8831063581aeb6c792a1b032f97e23a799b0" translate="yes" xml:space="preserve">
          <source>If the following pattern is applied to a string not beginning with &quot;a&quot; or &quot;b&quot;, it would normally match the empty string at the start of the subject:</source>
          <target state="translated">&quot;a&quot;또는 &quot;b&quot;로 시작하지 않는 문자열에 다음 패턴이 적용되는 경우 일반적으로 제목의 시작 부분에서 빈 문자열과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="2009a1faa40085a7c2fd996ec540bc12d65d8f07" translate="yes" xml:space="preserve">
          <source>If the formatter module exports the optional callback function &lt;code&gt;&lt;a href=&quot;logger#FModule:check_config-1&quot;&gt;check_config(FConfig)&lt;/a&gt;&lt;/code&gt;, Logger calls this function when the formatter information is set or modified, to verify the validity of the formatter configuration.</source>
          <target state="translated">포맷터 모듈이 선택적 콜백 함수 &lt;code&gt;&lt;a href=&quot;logger#FModule:check_config-1&quot;&gt;check_config(FConfig)&lt;/a&gt;&lt;/code&gt; 로거는 포맷터 정보가 설정되거나 수정 될 때이 함수를 호출하여 포맷터 구성의 유효성을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="05f7a6a810b002e4a0681949501258c2a927f78c" translate="yes" xml:space="preserve">
          <source>If the fragment option is &lt;code&gt;true&lt;/code&gt;, the URI fragment is returned as part of the parsing result, otherwise it is ignored.</source>
          <target state="translated">fragment 옵션이 &lt;code&gt;true&lt;/code&gt; 의 경우, URI fragment는 해석 결과의 일부로서 돌려 주어집니다. 그렇지 않은 경우는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a9f39219b3544f3ad6a57e7c4b45e2e83b08a49c" translate="yes" xml:space="preserve">
          <source>If the fully connected network is not set up properly, try first to increase the value of &lt;code&gt;net_setuptime&lt;/code&gt;.</source>
          <target state="translated">완전히 연결된 네트워크가 올바르게 설정되지 않은 경우 먼저 &lt;code&gt;net_setuptime&lt;/code&gt; 값을 늘리십시오 .</target>
        </trans-unit>
        <trans-unit id="e9be0c3ab255377067e7c9ca15639a8fa64c8dbb" translate="yes" xml:space="preserve">
          <source>If the fun/3 is used, it is called when the actual authentication occurs and may therefore return dynamic data like time, remote ip etc.</source>
          <target state="translated">fun / 3가 사용되는 경우 실제 인증이 발생할 때 호출되므로 시간, 원격 IP 등과 같은 동적 데이터를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a10d9917bf561ed6546055b4ad6ae668ede9a486" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;mnesia:table_info/2&lt;/code&gt; is started in the activity context of module &lt;code&gt;mnesia_frag&lt;/code&gt;, information of several new items can be obtained:</source>
          <target state="translated">함수 경우 &lt;code&gt;mnesia:table_info/2&lt;/code&gt; 모듈의 활성 컨텍스트에서 시작 &lt;code&gt;mnesia_frag&lt;/code&gt; 여러 새로운 항목 정보를 얻을 수있다 :</target>
        </trans-unit>
        <trans-unit id="b7b2e6d233f123be817d60a836703d289792c0af" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;print_name/1&lt;/code&gt;, and so on, had been interface functions, the situation would have been different, as you do not want the user of the interface to know about the internal data representation.</source>
          <target state="translated">&lt;code&gt;print_name/1&lt;/code&gt; 등 의 함수 가 인터페이스 함수 인 경우 인터페이스 사용자가 내부 데이터 표현에 대해 알지 못하게되므로 상황이 달라졌을 것입니다.</target>
        </trans-unit>
        <trans-unit id="ac91618962c7d06d3c9f00caac895bd89a410ca3" translate="yes" xml:space="preserve">
          <source>If the function is called, it will be called again with &lt;code&gt;undo&lt;/code&gt;, or with &lt;code&gt;set&lt;/code&gt; as first argument.</source>
          <target state="translated">함수가 호출되면 &lt;code&gt;undo&lt;/code&gt; 또는 첫 번째 인수 로 &lt;code&gt;set&lt;/code&gt; 하여 다시 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="40c262c2c2a844d0cf26a7433449f15feea3fd0e" translate="yes" xml:space="preserve">
          <source>If the function is found, the function clauses are scanned sequentially until a clause is found that fulfills both of the following two conditions:</source>
          <target state="translated">함수가 발견되면 다음 두 조건을 모두 충족하는 절이 발견 될 때까지 함수 절이 순차적으로 스캔됩니다.</target>
        </trans-unit>
        <trans-unit id="c5c83cab902e2b61262a72c526eeaa77228c4460" translate="yes" xml:space="preserve">
          <source>If the function is rewritten as follows, the compiler is free to rearrange the clauses:</source>
          <target state="translated">함수가 다음과 같이 다시 작성되면 컴파일러는 절을 자유롭게 재 배열 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b63119293c0f8660be248a19b2479210b58e3c5a" translate="yes" xml:space="preserve">
          <source>If the function returns &lt;code&gt;ignore&lt;/code&gt;, then it is assumed that either:</source>
          <target state="translated">함수가 &lt;code&gt;ignore&lt;/code&gt; 를 반환 하면 다음 중 하나를 가정합니다.</target>
        </trans-unit>
        <trans-unit id="d3d840a1e8e533a047b65414d5bcef0d60c4bcbd" translate="yes" xml:space="preserve">
          <source>If the function returns &lt;code&gt;{cancel, Reason}&lt;/code&gt;, this means the transport module decided not to send the message. This is &lt;strong&gt;not&lt;/strong&gt; an error. No error messages will be issued and no error counters incremented. What actions this will result in depends on what kind of message was sent.</source>
          <target state="translated">함수가 &lt;code&gt;{cancel, Reason}&lt;/code&gt; 리턴 하면 이는 전송 모듈이 메시지를 보내지 않기로 결정했음을 의미합니다. 이것은 오류 가 &lt;strong&gt;아닙니다&lt;/strong&gt; . 오류 메시지가 발행되지 않으며 오류 카운터가 증가하지 않습니다. 어떤 결과가 발생했는지는 어떤 종류의 메시지가 전송되었는지에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="7fa5ac3ae4df99fa5b9b2dd8db96506aecf3fefc" translate="yes" xml:space="preserve">
          <source>If the function returns &lt;code&gt;{error,Reason}&lt;/code&gt;, the ongoing upgrade fails and rolls back to the old release.</source>
          <target state="translated">함수가 &lt;code&gt;{error,Reason}&lt;/code&gt; 을 리턴 하면 진행중인 업그레이드가 실패하고 이전 릴리스로 롤백됩니다.</target>
        </trans-unit>
        <trans-unit id="cace8ed5fbcae8411e61d141c38b3af395942b38" translate="yes" xml:space="preserve">
          <source>If the function returns a failure &lt;code&gt;Reason&lt;/code&gt;, the ongoing upgrade fails and rolls back to the old release. Note that &lt;code&gt;Reason&lt;/code&gt; can not be an &lt;code&gt;{ok,_,_}&lt;/code&gt; tuple since that will be regarded as a &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; tuple, and that a tuple matching &lt;code&gt;{ok,_}&lt;/code&gt; is an also invalid failure &lt;code&gt;Reason&lt;/code&gt;. It is recommended to use an atom as &lt;code&gt;Reason&lt;/code&gt; since it will be wrapped in an &lt;code&gt;{error,Reason}&lt;/code&gt; tuple.</source>
          <target state="translated">함수가 실패 &lt;code&gt;Reason&lt;/code&gt; 리턴 하면 진행중인 업그레이드가 실패하고 이전 릴리스로 롤백됩니다. 참고 그 &lt;code&gt;Reason&lt;/code&gt; 수없는 &lt;code&gt;{ok,_,_}&lt;/code&gt; 이 보낸 튜플은 간주한다 &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; 튜플 및 튜플 일치가 &lt;code&gt;{ok,_}&lt;/code&gt; 무효 실패 인 &lt;code&gt;Reason&lt;/code&gt; . 원자 는 &lt;code&gt;{error,Reason}&lt;/code&gt; 튜플에 싸여 있기 때문에 &lt;code&gt;Reason&lt;/code&gt; 으로 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="23b279a0456aa090aac1cc8d9973e0efdd61b891" translate="yes" xml:space="preserve">
          <source>If the function returns anything else, the test case is considered successful. The return value always gets printed in the test case log file.</source>
          <target state="translated">함수가 다른 것을 반환하면 테스트 사례가 성공한 것으로 간주됩니다. 리턴 값은 항상 테스트 케이스 로그 파일에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="f7a01fb7804d1dc8b9d59f7e2487cb33130c4689" translate="yes" xml:space="preserve">
          <source>If the functionality of a long-running NIF can be split so that its work can be achieved through a series of shorter NIF calls, the application has two options:</source>
          <target state="translated">장기간 실행되는 NIF의 기능을 분할하여 일련의 더 짧은 NIF 호출을 통해 작업을 수행 할 수있는 경우, 응용 프로그램에는 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba5aec2652bfb4fd0698f0092b5faec8c5e7749c" translate="yes" xml:space="preserve">
          <source>If the given directory has a subdirectory named &lt;code&gt;ebin&lt;/code&gt;, modules (BEAM files) are searched for in that directory, otherwise modules are searched for in the given directory.</source>
          <target state="translated">지정된 디렉토리에 &lt;code&gt;ebin&lt;/code&gt; 이라는 서브 디렉토리가 있으면 해당 디렉토리 에서 모듈 (BEAM 파일)을 검색하고, 그렇지 않으면 지정된 디렉토리에서 모듈을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="206b9b6e0e97d510493a5ac088ad8e22427aae29" translate="yes" xml:space="preserve">
          <source>If the given directory has a subdirectory named &lt;code&gt;lib&lt;/code&gt;, the directories in that directory are assumed to be application directories, otherwise all subdirectories of the given directory are assumed to be application directories. If there are several versions of some application, the one with the highest version is chosen.</source>
          <target state="translated">제공된 디렉토리에 &lt;code&gt;lib&lt;/code&gt; 라는 서브 디렉토리가있는 경우 해당 디렉토리의 디렉토리는 응용 프로그램 디렉토리로 간주되며, 그렇지 않으면 주어진 디렉토리의 모든 서브 디렉토리는 응용 프로그램 디렉토리로 간주됩니다. 일부 응용 프로그램의 여러 버전이있는 경우 가장 높은 버전의 응용 프로그램이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="33fb4bc732c4bac52e2f3ecc8dc02b6458e5f64a" translate="yes" xml:space="preserve">
          <source>If the global name server fails to connect nodes (&lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N3&lt;/code&gt; in the example), a warning event is sent to the error logger. The presence of such an event does not exclude the nodes to connect later (you can, for example, try command &lt;code&gt;rpc:call(N1, net_adm, ping, [N2])&lt;/code&gt; in the Erlang shell), but it indicates a network problem.</source>
          <target state="translated">글로벌 이름 서버가 노드 연결에 실패하면 ( 예 : &lt;code&gt;N1&lt;/code&gt; 및 &lt;code&gt;N3&lt;/code&gt; ) 경고 이벤트가 오류 로거로 전송됩니다. 이러한 이벤트가 &lt;code&gt;rpc:call(N1, net_adm, ping, [N2])&lt;/code&gt; 나중에 연결할 노드를 제외하지는 않습니다 (예를 들어 Erlang 쉘에서 rpc : call (N1, net_adm, ping, [N2] 명령을 시도 할 수 있음). 네트워크 문제를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="90420c92850a1634589e73fa3152ae2df519947e" translate="yes" xml:space="preserve">
          <source>If the guard test &lt;code&gt;is_integer(Int)&lt;/code&gt; succeeds, the fourth clause is executed.</source>
          <target state="translated">가드 테스트 &lt;code&gt;is_integer(Int)&lt;/code&gt; 가 성공하면 네 번째 절이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="51156ed0f0b60bdec0db2a3c5c342e77e9337761" translate="yes" xml:space="preserve">
          <source>If the guard test fails, the input value is compared to &lt;code&gt;four&lt;/code&gt;, &lt;code&gt;five&lt;/code&gt;, and &lt;code&gt;six&lt;/code&gt;, and the appropriate clause is selected. (There is a &lt;code&gt;function_clause&lt;/code&gt; exception if none of the values matched.)</source>
          <target state="translated">가드 테스트가 실패하면 입력 값이 &lt;code&gt;four&lt;/code&gt; , &lt;code&gt;five&lt;/code&gt; 및 &lt;code&gt;six&lt;/code&gt; 과 비교되고 적절한 절이 선택됩니다. ( 값이 일치하지 않으면 &lt;code&gt;function_clause&lt;/code&gt; 예외 가 있습니다 .)</target>
        </trans-unit>
        <trans-unit id="042ae23e884f62c0355d18895948d09799091a5c" translate="yes" xml:space="preserve">
          <source>If the handler is meant to replace the default handler, the Kernel's default handler have to be disabled before the new handler is added. A &lt;code&gt;sys.config&lt;/code&gt; file that disables the Kernel handler and adds a custom handler could look like this:</source>
          <target state="translated">핸들러가 기본 핸들러를 대체하려는 경우 새 핸들러를 추가하기 전에 커널의 기본 핸들러를 비활성화해야합니다. &lt;code&gt;sys.config&lt;/code&gt; 커널 핸들러를 비활성화하고 같이 할 수있는 사용자 정의 핸들러를 추가 파일 :</target>
        </trans-unit>
        <trans-unit id="65f1827df55837b13a3b7ed59d4d8ea4a1983d32" translate="yes" xml:space="preserve">
          <source>If the handler is terminated, it restarts automatically after a delay specified in milliseconds. The value &lt;code&gt;infinity&lt;/code&gt; prevents restarts.</source>
          <target state="translated">핸들러가 종료되면 밀리 초 단위로 지정된 지연 후에 자동으로 다시 시작됩니다. &lt;code&gt;infinity&lt;/code&gt; 값은 재시작을 방지합니다.</target>
        </trans-unit>
        <trans-unit id="b7ef0ec4d5b98a48302f9d89b544d31dce7e98f5" translate="yes" xml:space="preserve">
          <source>If the handler process is terminated because of overload, it prints information about it in the log. It also prints information about when a restart has taken place, and the handler is back in action.</source>
          <target state="translated">과부하로 인해 처리기 프로세스가 종료되면 로그에 처리기 정보를 인쇄합니다. 또한 재시작이 발생한 시점에 대한 정보를 인쇄하고 핸들러가 다시 작동합니다.</target>
        </trans-unit>
        <trans-unit id="71ca4e1b2a57423c539bf11275ee92c1598c8e04" translate="yes" xml:space="preserve">
          <source>If the host has many network interfaces, this option specifies which one to listen on.</source>
          <target state="translated">호스트에 많은 네트워크 인터페이스가있는 경우이 옵션은 수신 할 네트워크 인터페이스를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="5938c2bcb45adfa6db096780d07c1f69ca15570f" translate="yes" xml:space="preserve">
          <source>If the host has many network interfaces, this option specifies which one to use.</source>
          <target state="translated">호스트에 많은 네트워크 인터페이스가있는 경우이 옵션은 사용할 인터페이스를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="7a3654ae9fae9da43a3b1501da91842a28524e6b" translate="yes" xml:space="preserve">
          <source>If the included application itself contains included applications, instead the &lt;code&gt;{mod, {application_starter, [Module,StartArgs]}}&lt;/code&gt; option must be included.</source>
          <target state="translated">포함 된 응용 프로그램 자체에 포함 된 응용 프로그램이 포함 된 경우 &lt;code&gt;{mod, {application_starter, [Module,StartArgs]}}&lt;/code&gt; 옵션을 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="93280124390abf78f821c80eb86f0bf50631ec9d" translate="yes" xml:space="preserve">
          <source>If the initial call is to one of the system-defined behaviors such as &lt;code&gt;gen_server&lt;/code&gt; or &lt;code&gt;gen_event&lt;/code&gt;, it is translated to more useful information. If a &lt;code&gt;gen_server&lt;/code&gt; is spawned, the returned &lt;code&gt;Module&lt;/code&gt; is the name of the callback module and &lt;code&gt;Function&lt;/code&gt; is &lt;code&gt;init&lt;/code&gt; (the function that initiates the new server).</source>
          <target state="translated">초기 호출이 &lt;code&gt;gen_server&lt;/code&gt; 또는 &lt;code&gt;gen_event&lt;/code&gt; 와 같은 시스템 정의 동작 중 하나에 대한 호출 인 경우 더 유용한 정보로 변환됩니다. 경우 &lt;code&gt;gen_server&lt;/code&gt; 는 스폰되어, 반환 &lt;code&gt;Module&lt;/code&gt; 콜백 모듈의 이름과 &lt;code&gt;Function&lt;/code&gt; 있다 &lt;code&gt;init&lt;/code&gt; (기능이 시작하는 새로운 서버).</target>
        </trans-unit>
        <trans-unit id="e36a8cae40a2ccda598cbf83afe268a5c720aa0e" translate="yes" xml:space="preserve">
          <source>If the initial encode of the outgoing request fails, then the request process fails and &lt;code&gt;{error,encode}&lt;/code&gt; is returned.</source>
          <target state="translated">발신 요청의 초기 인코딩이 실패하면 요청 프로세스가 실패하고 &lt;code&gt;{error,encode}&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="512a1cbc51d5459f85caaea2fd4bfade04f37668" translate="yes" xml:space="preserve">
          <source>If the initialization fails, the function is to return &lt;code&gt;{error,Error}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is any term, or &lt;code&gt;ignore&lt;/code&gt;.</source>
          <target state="translated">초기화에 실패하면 함수는 &lt;code&gt;{error,Error}&lt;/code&gt; 를 리턴 하며 여기서 &lt;code&gt;Error&lt;/code&gt; 는 임의의 용어이거나 &lt;code&gt;ignore&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="4efffcc1b527bd1b225e810cb600a2ae77401619" translate="yes" xml:space="preserve">
          <source>If the initialization fails, the function is to return &lt;code&gt;{stop,Reason}&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term, or &lt;code&gt;ignore&lt;/code&gt;.</source>
          <target state="translated">초기화에 실패하면 함수는 &lt;code&gt;{stop,Reason}&lt;/code&gt; 을 리턴 하며, 여기서 &lt;code&gt;Reason&lt;/code&gt; 은 임의의 용어이거나 &lt;code&gt;ignore&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="9346621e797dd1360944a672ab82ead28612c984" translate="yes" xml:space="preserve">
          <source>If the initialization is successful, the function is to return &lt;code&gt;{ok,State}&lt;/code&gt;, &lt;code&gt;{ok,State,Timeout}&lt;/code&gt;, or &lt;code&gt;{ok,State,hibernate}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the internal state of the &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">초기화에 성공하면이 함수는 &lt;code&gt;{ok,State}&lt;/code&gt; , &lt;code&gt;{ok,State,Timeout}&lt;/code&gt; 또는 &lt;code&gt;{ok,State,hibernate}&lt;/code&gt; 를 리턴 하며 여기서 &lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;gen_server&lt;/code&gt; 프로세스 의 내부 상태입니다 .</target>
        </trans-unit>
        <trans-unit id="eddc615bd88d8608ab31b9841323633dc12870aa" translate="yes" xml:space="preserve">
          <source>If the installation fails, the system can be rebooted. The old release version is then automatically used.</source>
          <target state="translated">설치가 실패하면 시스템을 재부팅 할 수 있습니다. 그러면 이전 릴리스 버전이 자동으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c0e9d4940ae270a2841d572606f563a099b85e09" translate="yes" xml:space="preserve">
          <source>If the installation succeeds, the new version is made the default version, which is to now be used if there is a system reboot.</source>
          <target state="translated">설치가 성공하면 새 버전이 기본 버전이되며 시스템 재부팅이있을 경우 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="08dbb0e86d47275a0a4e636be8892780b15448e3" translate="yes" xml:space="preserve">
          <source>If the instruction appears after instruction &lt;code&gt;point_of_no_return&lt;/code&gt; and the function call fails, the system is restarted.</source>
          <target state="translated">명령 &lt;code&gt;point_of_no_return&lt;/code&gt; 뒤에 명령이 나타나고 함수 호출이 실패하면 시스템이 다시 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="efab2c6cbaff99e6149cda9413164011c49b633d" translate="yes" xml:space="preserve">
          <source>If the instruction appears before instruction &lt;code&gt;point_of_no_return&lt;/code&gt;, a failure is caught. &lt;code&gt;&lt;a href=&quot;release_handler#install_release-1&quot;&gt;release_handler:install_release/1&lt;/a&gt;&lt;/code&gt; then returns &lt;code&gt;{error,{'EXIT',Reason}}&lt;/code&gt;, unless &lt;code&gt;{error,Error}&lt;/code&gt; is thrown or returned. Then it returns &lt;code&gt;{error,Error}&lt;/code&gt;.</source>
          <target state="translated">명령이 &lt;code&gt;point_of_no_return&lt;/code&gt; 명령 앞에 나타나면 실패가 포착됩니다. &lt;code&gt;&lt;a href=&quot;release_handler#install_release-1&quot;&gt;release_handler:install_release/1&lt;/a&gt;&lt;/code&gt; 은 &lt;code&gt;{error,Error}&lt;/code&gt; 가 발생하거나 리턴 되지 않는 한 {error, &lt;code&gt;{error,{'EXIT',Reason}}&lt;/code&gt; 리턴합니다. 그런 다음 &lt;code&gt;{error,Error}&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6accd78db997b4f0cc8c3eb17cc0cfe9969dd581" translate="yes" xml:space="preserve">
          <source>If the instrumentation functions communicate with UNIX processes, it might be a good idea to use a special sub-agent. This sub-agent sends the SNMP request to the other process in one packet in order to minimize context switches. For example, if a whole MIB is implemented on the C level in UNIX, but you still want to use the Erlang SNMP tool, then you may have one special sub-agent, which sends the variables in the request as a single operation down to C.</source>
          <target state="translated">인스 트루먼 테이션 기능이 UNIX 프로세스와 통신하는 경우 특수 서브 에이전트를 사용하는 것이 좋습니다. 이 서브 에이전트는 컨텍스트 전환을 최소화하기 위해 한 패킷의 다른 프로세스에 SNMP 요청을 보냅니다. 예를 들어, 전체 MIB가 UNIX의 C 레벨에서 구현되었지만 여전히 Erlang SNMP 도구를 사용하려는 경우 요청에 변수를 단일 조작으로 전송하는 하나의 특수 서브 에이전트가있을 수 있습니다. 씨.</target>
        </trans-unit>
        <trans-unit id="6073ddc2f6ff51455fef10943643ff33d4a41b31" translate="yes" xml:space="preserve">
          <source>If the key attribute is bound in a pattern, the match operation is efficient. However, if the key attribute in a pattern is given as &lt;code&gt;'_'&lt;/code&gt; or &lt;code&gt;'$1'&lt;/code&gt;, the whole &lt;code&gt;employee&lt;/code&gt; table must be searched for records that match. Hence if the table is large, this can become a time-consuming operation, but it can be remedied with indexes (see &lt;code&gt;&lt;a href=&quot;mnesia_chap5#indexing&quot;&gt;Indexing&lt;/a&gt;&lt;/code&gt;) if the function &lt;code&gt;&lt;a href=&quot;mnesia#match_object-1&quot;&gt;mnesia:match_object&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">키 속성이 패턴으로 바인드 된 경우 일치 조작이 효율적입니다. 그러나 패턴의 키 속성이 &lt;code&gt;'_'&lt;/code&gt; 또는 &lt;code&gt;'$1'&lt;/code&gt; 이면 전체 &lt;code&gt;employee&lt;/code&gt; 테이블에서 일치하는 레코드를 검색해야합니다. 따라서 테이블이 크면 시간이 많이 걸리는 작업이 될 수 있지만 &lt;code&gt;&lt;a href=&quot;mnesia#match_object-1&quot;&gt;mnesia:match_object&lt;/a&gt;&lt;/code&gt; 함수 가 사용되는 경우 인덱스 ( &lt;code&gt;&lt;a href=&quot;mnesia_chap5#indexing&quot;&gt;Indexing&lt;/a&gt;&lt;/code&gt; 참조 ) 로 해결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="702da889833ee1dc6797c2ff9a6559f2d21f93ff" translate="yes" xml:space="preserve">
          <source>If the key is specified in the pattern, the match is very efficient. If the key is not specified, that is, if it is a variable or an underscore, the entire table must be searched. The search time can be substantial if the table is very large.</source>
          <target state="translated">키가 패턴에 지정되면 일치가 매우 효율적입니다. 키가 지정되지 않은 경우, 즉 변수 또는 밑줄 인 경우 전체 테이블을 검색해야합니다. 테이블이 매우 큰 경우 검색 시간이 상당 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="006f97d543b8ad5e428fa64fac1606142a9e3339" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is bound, the match specification is applied to all objects of the table with the correct key(s). If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is unbound, the match specification is applied to all objects of the table, &lt;code&gt;N&lt;/code&gt; objects at a time, until at least one object matches or the end of the table is reached. The default, indicated by giving &lt;code&gt;N&lt;/code&gt; the value &lt;code&gt;default&lt;/code&gt;, is to let the number of objects vary depending on the sizes of the objects. All objects with the same key are always handled at the same time, which implies that the match specification can be applied to more than N objects.</source>
          <target state="translated">의 keypos'th 요소 경우 &lt;code&gt;MatchSpec&lt;/code&gt; 가 결합되어, 경기 사양은 정확한 키 (들) 테이블의 모든 객체에 적용됩니다. keypos'th 소자의 경우 &lt;code&gt;MatchSpec&lt;/code&gt; 가 언 바운드, 매치 사양은 테이블의 모든 물체에 적용되며, &lt;code&gt;N&lt;/code&gt; 은 적어도 하나의 오브젝트가 일치 테이블의 끝에 도달 할 때까지 한 번에 개체. 제공하여 표시된 기본, &lt;code&gt;N&lt;/code&gt; 에게 값의 &lt;code&gt;default&lt;/code&gt; , 객체의 수는 개체의 크기에 따라 달라집니다 수 있도록하는 것입니다. 동일한 키를 가진 모든 객체는 항상 동시에 처리되므로 일치 사양을 N 개 이상의 객체에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b16233e004fe373963364905dc9a2ad762556f0" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is bound, the match specification is applied to the objects with the correct key(s) only.</source>
          <target state="translated">의 keypos'th 요소 경우 &lt;code&gt;MatchSpec&lt;/code&gt; 가 결합되어, 경기 사양은 정확한 키 (들)을 가진 개체에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f90ff4fedc7cf136ced2894c42e307fbd5a5c73b" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is unbound, the match specification is applied to all objects of the table. If the keypos'th element is bound, the match specification is applied to the objects with the correct key(s) only.</source>
          <target state="translated">의 keypos'th 요소 경우 &lt;code&gt;MatchSpec&lt;/code&gt; 는 언 바운드, 경기 사양은 테이블의 모든 객체에 적용됩니다. keypos'th 요소가 바인드되면 일치 스펙이 올바른 키를 가진 오브젝트에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="c802fc2a3fde97f62fdbabfc7b66189e18b5dfc7" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, all table objects are matched. If the keypos'th element is unbound, all table objects are matched, &lt;code&gt;N&lt;/code&gt; objects at a time, until at least one object matches or the end of the table is reached. The default, indicated by giving &lt;code&gt;N&lt;/code&gt; the value &lt;code&gt;default&lt;/code&gt;, is to let the number of objects vary depending on the sizes of the objects. All matching objects with the same key are always returned in the same reply, which implies that more than N objects can sometimes be returned.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 의 키 포스 요소 가 바인드 된 경우 모든 테이블 오브젝트가 일치합니다. keypos'th 요소가 바인드되지 않은 경우, 하나 이상의 오브젝트가 일치하거나 테이블의 끝에 도달 할 때까지 한 번에 &lt;code&gt;N&lt;/code&gt; 개의 오브젝트가 모두 일치합니다. 제공하여 표시된 기본, &lt;code&gt;N&lt;/code&gt; 에게 값의 &lt;code&gt;default&lt;/code&gt; , 객체의 수는 개체의 크기에 따라 달라집니다 수 있도록하는 것입니다. 동일한 키를 가진 일치하는 모든 객체는 항상 동일한 응답으로 반환되므로 N 개 이상의 객체가 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee8399b71f2614d1c169eead97f1d70700fb4b6e" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, all table objects are matched. If the keypos'th element is unbound, all table objects are matched, &lt;code&gt;N&lt;/code&gt; objects at a time, until at least one object matches or the end of the table is reached. The default, indicated by giving &lt;code&gt;N&lt;/code&gt; the value &lt;code&gt;default&lt;/code&gt;, is to let the number of objects vary depending on the sizes of the objects. All objects with the same key are always matched at the same time, which implies that more than N objects can sometimes be matched.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 의 키 포스 요소 가 바인드 된 경우 모든 테이블 오브젝트가 일치합니다. keypos'th 요소가 바인드되지 않은 경우, 하나 이상의 오브젝트가 일치하거나 테이블의 끝에 도달 할 때까지 한 번에 &lt;code&gt;N&lt;/code&gt; 개의 오브젝트가 모두 일치합니다. 제공하여 표시된 기본, &lt;code&gt;N&lt;/code&gt; 에게 값의 &lt;code&gt;default&lt;/code&gt; , 객체의 수는 개체의 크기에 따라 달라집니다 수 있도록하는 것입니다. 동일한 키를 가진 모든 객체는 항상 동시에 일치하므로 N 개 이상의 객체를 일치시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81cd44a63c897e4a4fbbf303d633ae129d55b04f" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, only the objects with the correct key are matched.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 의 keypos'th 요소 가 바인드되면 올바른 키를 가진 오브젝트 만 일치합니다.</target>
        </trans-unit>
        <trans-unit id="519fdb3cbbeb8df2c304203d27f11912d501b21d" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is unbound, all table objects are matched. If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, only the objects with the correct key are matched.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 의 keypos'th 요소 가 바인드되지 않은 경우 모든 테이블 오브젝트가 일치합니다. &lt;code&gt;Pattern&lt;/code&gt; 의 keypos'th 요소 가 바인드되면 올바른 키를 가진 오브젝트 만 일치합니다.</target>
        </trans-unit>
        <trans-unit id="56e84a693998be360a017f2de3532689d94a7f87" translate="yes" xml:space="preserve">
          <source>If the last expression of a function body is a function call, a &lt;strong&gt;tail recursive&lt;/strong&gt; call is done. This is to ensure that no system resources, for example, call stack, are consumed. This means that an infinite loop can be done if it uses tail-recursive calls.</source>
          <target state="translated">함수 본문의 마지막 표현식이 함수 호출이면 &lt;strong&gt;꼬리 재귀&lt;/strong&gt; 호출이 수행됩니다. 이것은 호출 스택과 같은 시스템 자원이 소비되지 않도록하기위한 것입니다. 이는 꼬리 재귀 호출을 사용하는 경우 무한 루프를 수행 할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="9ae06ba70f228c8b154f39f0df23503609bcb3bd" translate="yes" xml:space="preserve">
          <source>If the length of the message queue grows larger than this threshold, a flush (delete) operation takes place. To flush events, the handler discards the messages in the message queue by receiving them in a loop without logging. Client processes waiting for a response from a synchronous log request receive a reply from the handler indicating that the request is dropped. The handler process increases its priority during the flush loop to make sure that no new events are received during the operation. Notice that after the flush operation is performed, the handler prints information in the log about how many events have been deleted.</source>
          <target state="translated">메시지 큐 길이가이 임계 값보다 커지면 플러시 (삭제) 작업이 수행됩니다. 이벤트를 플러시하기 위해 핸들러는 로깅없이 루프에서 메시지를 수신하여 메시지 큐의 메시지를 버립니다. 동기식 로그 요청으로부터 응답을 기다리는 클라이언트 프로세스는 요청이 삭제되었음을 나타내는 응답을 핸들러로부터 수신합니다. 처리 중에 새 이벤트가 수신되지 않도록 플러시 루프 동안 처리기 프로세스의 우선 순위가 높아집니다. 플러시 작업이 수행 된 후 처리기는 삭제 된 이벤트 수에 대한 정보를 로그에 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="d10dfdc12d1915667ccceb0a8869e7352174a1a5" translate="yes" xml:space="preserve">
          <source>If the level for &lt;code&gt;mymodule&lt;/code&gt; is now set to &lt;code&gt;debug&lt;/code&gt;, then debug events from this module will be logged by the handler &lt;code&gt;h2&lt;/code&gt;, but not by handler &lt;code&gt;h1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mymodule&lt;/code&gt; 의 레벨 이 이제 &lt;code&gt;debug&lt;/code&gt; 로 설정되면 이 모듈의 디버그 이벤트는 핸들러 &lt;code&gt;h1&lt;/code&gt; 이 아닌 핸들러 &lt;code&gt;h2&lt;/code&gt; 에 의해 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="57aa00c976a435bf8bda5a05ad6230ef4e15342c" translate="yes" xml:space="preserve">
          <source>If the library path is set to &lt;code&gt;code_path&lt;/code&gt;, the set of library modules is not determined, and the &lt;code&gt;info&lt;/code&gt; functions will return empty lists of library modules.</source>
          <target state="translated">라이브러리 경로가 &lt;code&gt;code_path&lt;/code&gt; 로 설정되면 라이브러리 모듈 세트가 결정되지 않고 &lt;code&gt;info&lt;/code&gt; 함수는 빈 라이브러리 모듈 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5a12290de86cdc8197c1cbb41227356d8ad7a7f4" translate="yes" xml:space="preserve">
          <source>If the list contains more than one object with &lt;strong&gt;matching&lt;/strong&gt; keys and the table type is &lt;code&gt;set&lt;/code&gt;, one is inserted, which one is not defined. The same holds for table type &lt;code&gt;ordered_set&lt;/code&gt; if the keys &lt;strong&gt;compare equal&lt;/strong&gt;.</source>
          <target state="translated">리스트에 &lt;strong&gt;일치하는&lt;/strong&gt; 키 가있는 둘 이상의 오브젝트가 있고 테이블 유형이 &lt;code&gt;set&lt;/code&gt; 되면 하나가 삽입되고 정의되지 않은 하나가 삽입됩니다. 키가 &lt;strong&gt;equal 비교하는&lt;/strong&gt; 경우 &lt;code&gt;ordered_set&lt;/code&gt; 테이블 유형도 마찬가지 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="306fdef74e5ed0763cd6967950f14b6cd849bc3e" translate="yes" xml:space="preserve">
          <source>If the list of applications contains core applications, i.e &lt;code&gt;erts&lt;/code&gt;, &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;stdlib&lt;/code&gt; or &lt;code&gt;sasl&lt;/code&gt;, the &lt;code&gt;Install&lt;/code&gt; script in the patched Erlang/OTP installation must be rerun.</source>
          <target state="translated">응용 프로그램 목록에 핵심 응용 프로그램 (예 : &lt;code&gt;erts&lt;/code&gt; , &lt;code&gt;kernel&lt;/code&gt; , &lt;code&gt;stdlib&lt;/code&gt; 또는 &lt;code&gt;sasl&lt;/code&gt; )이 포함 된 경우 패치 된 Erlang / OTP 설치 의 &lt;code&gt;Install&lt;/code&gt; 스크립트를 다시 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="8acd485e36998d865f417532aa218ed4f2b0d80e" translate="yes" xml:space="preserve">
          <source>If the local node is part of a global group, &lt;code&gt;State&lt;/code&gt; is equal to &lt;code&gt;synced&lt;/code&gt;. If no global groups are defined, &lt;code&gt;State&lt;/code&gt; is equal to &lt;code&gt;no_conf&lt;/code&gt;.</source>
          <target state="translated">로컬 노드가 글로벌 그룹의 일부인 경우, &lt;code&gt;State&lt;/code&gt; 동일 &lt;code&gt;synced&lt;/code&gt; . 글로벌 그룹이 정의되지 않은 경우 &lt;code&gt;State&lt;/code&gt; 는 &lt;code&gt;no_conf&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="b3dc78cf933189665aca88d0f65ce3644c34d9ac" translate="yes" xml:space="preserve">
          <source>If the log event is returned, the next filter function is called with the returned value as the first argument. That is, if a filter function modifies the log event, the next filter function receives the modified event. The value returned from the last filter function is the value that the handler callback receives.</source>
          <target state="translated">로그 이벤트가 반환되면 반환 된 값을 첫 번째 인수로 사용하여 다음 필터 함수가 호출됩니다. 즉, 필터 함수가 로그 이벤트를 수정하면 다음 필터 함수는 수정 된 이벤트를 수신합니다. 마지막 필터 함수에서 반환 된 값은 핸들러 콜백이받는 값입니다.</target>
        </trans-unit>
        <trans-unit id="d41baef54ef4b512298e69bbec24ae875c8c68a0" translate="yes" xml:space="preserve">
          <source>If the log is blocked by the closing process, the log is also unblocked.</source>
          <target state="translated">닫기 프로세스에 의해 로그가 차단되면 로그도 차단 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="8605585ed728deb58354312d2da402db9d75ef1c" translate="yes" xml:space="preserve">
          <source>If the log is local on the current node, &lt;code&gt;Dist&lt;/code&gt; has the value &lt;code&gt;local&lt;/code&gt;, otherwise all nodes where the log is distributed are returned as a list.</source>
          <target state="translated">로그가 현재 노드에서 &lt;code&gt;local&lt;/code&gt; 인 경우 &lt;code&gt;Dist&lt;/code&gt; 값은 local입니다 . 그렇지 않으면 로그가 분배 된 모든 노드가 목록으로 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="dafa7b7f2609edae55f58fdb8dad531885491f7e" translate="yes" xml:space="preserve">
          <source>If the log message is specified as a &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;report_cb&lt;/code&gt; key can be associated with a fun (report callback) that converts the report to a format string and arguments. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the User's Guide for more information about report callbacks.</source>
          <target state="translated">로그 메시지가 &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report()&lt;/a&gt;&lt;/code&gt; 로 지정된 경우 &lt;code&gt;report_cb&lt;/code&gt; 키는 보고서를 형식 문자열 및 인수로 변환하는 fun (보고서 콜백)과 연관 될 수 있습니다. 보고서 콜백에 대한 자세한 내용은 사용자 안내서의 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="de16ab6d2dd843eaf98a56613e46e210c0e2c90f" translate="yes" xml:space="preserve">
          <source>If the log size is decreased, for example, to save space, function &lt;code&gt;&lt;a href=&quot;#inc_wrap_file-1&quot;&gt;inc_wrap_file/1&lt;/a&gt;&lt;/code&gt; can be used to force the log to wrap.</source>
          <target state="translated">공간을 절약하기 위해 로그 크기를 줄이면 &lt;code&gt;&lt;a href=&quot;#inc_wrap_file-1&quot;&gt;inc_wrap_file/1&lt;/a&gt;&lt;/code&gt; 함수를 사용하여 로그를 강제로 감쌀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="720cb0ae706744e4ee9df32b00d37adc564581fe" translate="yes" xml:space="preserve">
          <source>If the macro &lt;code&gt;MERL_NO_TRANSFORM&lt;/code&gt; is defined before the &lt;code&gt;merl.hrl&lt;/code&gt; header file is included, the parse transform used by Merl will be disabled, and in that case, the match expressions &lt;code&gt;?Q(...) = ...&lt;/code&gt;, case switches using &lt;code&gt;?Q(...)&lt;/code&gt; patterns, and automatic metavariables like &lt;code&gt;_@Tuple&lt;/code&gt; cannot be used in your code, but the Merl macros and functions still work. To do metavariable substitution, you need to use the &lt;code&gt;?Q(Text, Map)&lt;/code&gt; macro, e.g.:</source>
          <target state="translated">&lt;code&gt;merl.hrl&lt;/code&gt; 헤더 파일이 포함 되기 전에 매크로 &lt;code&gt;MERL_NO_TRANSFORM&lt;/code&gt; 이 정의 되면 Merl에 의해 사용되는 구문 분석 변환이 사용 불가능하게되고,이 경우 일치 표현식 &lt;code&gt;?Q(...) = ...&lt;/code&gt; 은 &lt;code&gt;?Q(...)&lt;/code&gt; 패턴 및 &lt;code&gt;_@Tuple&lt;/code&gt; 과 같은 자동 메타 변수는 코드에서 사용할 수 없지만 Merl 매크로와 함수는 여전히 작동합니다. 메타 변수 대체를 수행하려면 &lt;code&gt;?Q(Text, Map)&lt;/code&gt; 매크로 를 사용해야합니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="2f7a0ebf63b23efbe71cc89202b72b358a0f129b" translate="yes" xml:space="preserve">
          <source>If the macro &lt;code&gt;NOASSERT&lt;/code&gt; is defined before the EUnit header file is included, these macros have no effect when testing is also disabled; see &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">EUnit 헤더 파일이 포함되기 전에 매크로 &lt;code&gt;NOASSERT&lt;/code&gt; 가 정의 된 경우 이러한 매크로는 테스트가 비활성화 된 경우에도 영향을 미치지 않습니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="146cb0ce4e92421175ea3746cf274e2455137df9" translate="yes" xml:space="preserve">
          <source>If the macro &lt;code&gt;NODEBUG&lt;/code&gt; is defined before the EUnit header file is included, these macros have no effect; see &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">EUnit 헤더 파일이 포함되기 전에 매크로 &lt;code&gt;NODEBUG&lt;/code&gt; 가 정의 된 경우 이러한 매크로는 효과가 없습니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9b5a901ceceb4e69c701bf0dc03c50b6bae11f7b" translate="yes" xml:space="preserve">
          <source>If the manager is not configured to use any particular transport domain, the behaviour &lt;code&gt;handle_agent/4&lt;/code&gt; will for backwards copmpatibility reasons be called with the old &lt;code&gt;IpAddr&lt;/code&gt; and &lt;code&gt;PortNumber&lt;/code&gt; arguments</source>
          <target state="translated">관리자가 특정 전송 도메인을 사용하도록 구성되지 않은 경우, 이전의 &lt;code&gt;IpAddr&lt;/code&gt; 및 &lt;code&gt;PortNumber&lt;/code&gt; 인수를 사용하여 거꾸로 copmpatibility을 위해 &lt;code&gt;handle_agent/4&lt;/code&gt; 동작 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f6efb33521a71965325da2bbd03e23ab8ae58659" translate="yes" xml:space="preserve">
          <source>If the manager tries to set the same variable many times in the same PDU, the agent is free to improvise. There is no definition which determines if the instrumentation will be called once or twice. If called once only, there is no definition that determines which of the new values is going to be supplied.</source>
          <target state="translated">관리자가 동일한 PDU에서 동일한 변수를 여러 번 설정하려고하면 에이전트가 즉흥적으로 처리 할 수 ​​있습니다. 계측이 한두 번 호출되는지 여부를 결정하는 정의는 없습니다. 한 번만 호출하면 어떤 값을 제공할지 결정하는 정의가 없습니다.</target>
        </trans-unit>
        <trans-unit id="74415b1346dd0ddc93d29cb9c0389734be028243" translate="yes" xml:space="preserve">
          <source>If the master node fails, the entire pool exits.</source>
          <target state="translated">마스터 노드가 실패하면 전체 풀이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="ada210019d5db3434b3a98372ed4ed0f124b6d6b" translate="yes" xml:space="preserve">
          <source>If the match specification contains errors, tuple &lt;code&gt;{error, Errors}&lt;/code&gt; is returned, where &lt;code&gt;Errors&lt;/code&gt; is a list of natural language descriptions of what was wrong with the match specification.</source>
          <target state="translated">일치 스펙에 오류가 포함 된 경우 tuple &lt;code&gt;{error, Errors}&lt;/code&gt; 가 리턴됩니다. 여기서 &lt;code&gt;Errors&lt;/code&gt; 는 일치 스펙의 문제점에 대한 자연어 설명 목록입니다.</target>
        </trans-unit>
        <trans-unit id="73520de0bbd30344138b28e89ae6e3ad45ab6a3d" translate="yes" xml:space="preserve">
          <source>If the match specification is executed when selecting objects from an ETS table:</source>
          <target state="translated">ETS 테이블에서 오브젝트를 선택할 때 일치 스펙이 실행되는 경우 :</target>
        </trans-unit>
        <trans-unit id="c4b956c127ba515516d186daa8a6509787e44051" translate="yes" xml:space="preserve">
          <source>If the match specification is executing when tracing:</source>
          <target state="translated">추적시 일치 스펙이 실행중인 경우 :</target>
        </trans-unit>
        <trans-unit id="8673441fb53d8c53d833ea8413d411b45f3c363b" translate="yes" xml:space="preserve">
          <source>If the match specification is syntactically correct, the function either returns &lt;code&gt;{ok,Result}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is what would have been the result in a real &lt;code&gt;select/2&lt;/code&gt; call, or &lt;code&gt;false&lt;/code&gt; if the match specification does not match object &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="translated">일치 스펙이 구문 상 올바른 경우, 함수는 &lt;code&gt;{ok,Result}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Result&lt;/code&gt; 는 실제 &lt;code&gt;select/2&lt;/code&gt; 호출 에서 결과가되었을 것입니다 . 일치 스펙이 오브젝트 &lt;code&gt;Tuple&lt;/code&gt; 과 일치하지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="760d740968a06c49ac007f36a245af2196bd1b34" translate="yes" xml:space="preserve">
          <source>If the matching conditions are not met, the match fails, either with:</source>
          <target state="translated">일치 조건이 충족되지 않으면 다음 중 하나를 사용하여 일치에 실패합니다.</target>
        </trans-unit>
        <trans-unit id="1935f33d435bd33bb34072fa05214583d09d6dc0" translate="yes" xml:space="preserve">
          <source>If the matching fails, a &lt;code&gt;badmatch&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">일치하지 않으면 &lt;code&gt;badmatch&lt;/code&gt; 런타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5e6c9dcffff87aa8aa658e5eae30b4366a1b2bb3" translate="yes" xml:space="preserve">
          <source>If the matching subpart of &lt;code&gt;Subject&lt;/code&gt; giving raise to the replacement is to be inserted in the result, option &lt;code&gt;{insert_replaced, InsPos}&lt;/code&gt; inserts the matching part into &lt;code&gt;Replacement&lt;/code&gt; at the specified position (or positions) before inserting &lt;code&gt;Replacement&lt;/code&gt; into &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">대체를 발생시키는 &lt;code&gt;Subject&lt;/code&gt; 의 일치하는 &lt;code&gt;{insert_replaced, InsPos}&lt;/code&gt; 가 결과에 삽입되는 경우, {insert_replaced, InsPos} 옵션 은 &lt;code&gt;Replacement&lt;/code&gt; 를 &lt;code&gt;Subject&lt;/code&gt; 에 삽입하기 전에 지정된 위치 (또는 위치)에서 일치하는 파트를 &lt;code&gt;Replacement&lt;/code&gt; 에 삽입 합니다.</target>
        </trans-unit>
        <trans-unit id="fdd041679c28a1dfb5c5129e21e191da62b2500c" translate="yes" xml:space="preserve">
          <source>If the matching succeeds, any unbound variable in the pattern becomes bound and the value of &lt;code&gt;Expr2&lt;/code&gt; is returned.</source>
          <target state="translated">일치하면 패턴의 바인딩되지 않은 변수가 바인딩되고 &lt;code&gt;Expr2&lt;/code&gt; 의 값 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="5059fa619d98d60a3d0f2e7f4484d57de08a27f3" translate="yes" xml:space="preserve">
          <source>If the maximum depth is reached, it cannot be read in the resultant output. Also, the &lt;code&gt;,...&lt;/code&gt; form in a tuple denotes that there are more elements in the tuple but these are below the print depth.</source>
          <target state="translated">최대 깊이에 도달하면 결과 출력에서 ​​읽을 수 없습니다. 또한 튜플 의 &lt;code&gt;,...&lt;/code&gt; 형식은 튜플에 더 많은 요소가 있지만 인쇄 깊이 아래에 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6c939753050268aea10f52760cad514608911137" translate="yes" xml:space="preserve">
          <source>If the message cannot be decoded the following callback function will be invoked:</source>
          <target state="translated">메시지를 디코딩 할 수없는 경우 다음 콜백 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="fa13ca2255dfd047e4217a3af88a01b044ce4d8d" translate="yes" xml:space="preserve">
          <source>If the message is on report form, it is converted to &lt;code&gt;{Format,Args}&lt;/code&gt; by calling the report callback. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide for more information about report callbacks and valid forms of log messages.</source>
          <target state="translated">메시지가 보고서 양식 인 경우 보고서 콜백을 호출하여 &lt;code&gt;{Format,Args}&lt;/code&gt; 로 변환됩니다 . 보고서 콜백 및 유효한 형식의 로그 메시지에 대한 자세한 내용은 커널 사용 설명서의 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c5713a5c2133c11304f85627e2ccde367a7ac635" translate="yes" xml:space="preserve">
          <source>If the minimum repetition is &amp;gt; 0, the quantifier is ignored. The assertion is obeyed only once when encountered during matching.</source>
          <target state="translated">최소 반복이&amp;gt; 0이면 수량자는 무시됩니다. 어설 션은 일치하는 동안 발생할 때 한 번만 준수됩니다.</target>
        </trans-unit>
        <trans-unit id="5f724a3bd58fe6f9ce42fc406728de7f89ce0ad1" translate="yes" xml:space="preserve">
          <source>If the module &lt;code&gt;m1&lt;/code&gt; is introduced in version &quot;2&quot; of &lt;code&gt;ch_app&lt;/code&gt;, it must also be loaded when upgrading and deleted when downgrading:</source>
          <target state="translated">&lt;code&gt;m1&lt;/code&gt; 모듈 이 &lt;code&gt;ch_app&lt;/code&gt; 의 &quot;2&quot;버전에 도입 된 경우, 업그레이드 할 때로드하고 다운 그레이드 할 때 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="7aff411ea6299d7bca7ad227ec0e1bc26a882a00" translate="yes" xml:space="preserve">
          <source>If the module cannot be found, &lt;code&gt;non_existing&lt;/code&gt; is returned.</source>
          <target state="translated">모듈을 찾을 수 없으면 &lt;code&gt;non_existing&lt;/code&gt; 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="5745afeece7b41ec1bfc061d3b5f18d8e8d1dfba" translate="yes" xml:space="preserve">
          <source>If the module is Cover-compiled, &lt;code&gt;cover_compiled&lt;/code&gt; is returned.</source>
          <target state="translated">모듈이 Cover-compiled이면 &lt;code&gt;cover_compiled&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="52f516f712d9242bfd152b08a6fd0f4a2793c3fd" translate="yes" xml:space="preserve">
          <source>If the module is loaded, it returns the name of the file containing the loaded object code.</source>
          <target state="translated">모듈이로드되면로드 된 오브젝트 코드가 포함 된 파일 이름을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="46dba590f6c1f6f800702e68508881918dc97bf9" translate="yes" xml:space="preserve">
          <source>If the module is not loaded, this function searches the code path for the first file containing object code for &lt;code&gt;Module&lt;/code&gt; and returns the absolute filename.</source>
          <target state="translated">모듈이로드되지 않은 경우이 함수는 &lt;code&gt;Module&lt;/code&gt; 객체 코드가 포함 된 첫 번째 파일의 코드 경로를 검색 하여 절대 파일 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="229acd9737c1671ac97dd505de45081f475b5a4e" translate="yes" xml:space="preserve">
          <source>If the module is preloaded, &lt;code&gt;preloaded&lt;/code&gt; is returned.</source>
          <target state="translated">모듈이 사전로드되면 &lt;code&gt;preloaded&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="ea6cb550bcdaadfe5116319b2dd6e7b241b066a1" translate="yes" xml:space="preserve">
          <source>If the module is successfully Cover compiled, the function returns &lt;code&gt;{ok,Module}&lt;/code&gt;. Otherwise the function returns &lt;code&gt;{error,File}&lt;/code&gt;. Errors and warnings are printed as they occur.</source>
          <target state="translated">모듈이 성공적으로 Cover 컴파일되면, 함수는 &lt;code&gt;{ok,Module}&lt;/code&gt; 을 반환합니다 . 그렇지 않으면 함수는 &lt;code&gt;{error,File}&lt;/code&gt; 을 리턴합니다 . 오류 및 경고가 발생하면 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="1e0a91a6b9e2e2cfbc8f28ae6d3d48928ca8ba21" translate="yes" xml:space="preserve">
          <source>If the modules used to implement the process change dynamically during runtime, the process must understand one more message. An example is the &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; processes. The message is &lt;code&gt;{_Label, {From, Ref}, get_modules}&lt;/code&gt;. The reply to this message is &lt;code&gt;From ! {Ref, Modules}&lt;/code&gt;, where &lt;code&gt;Modules&lt;/code&gt; is a list of the currently active modules in the process.</source>
          <target state="translated">프로세스를 구현하는 데 사용 된 모듈이 런타임 중에 동적으로 변경되면 프로세스는 하나 이상의 메시지를 이해해야합니다. 예는 &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; 프로세스입니다. 메시지는 &lt;code&gt;{_Label, {From, Ref}, get_modules}&lt;/code&gt; 입니다. 이 메시지에 대한 회신은 보낸 사람입니다 &lt;code&gt;From ! {Ref, Modules}&lt;/code&gt; . 여기서 &lt;code&gt;Modules&lt;/code&gt; 는 프로세스에서 현재 활성화 된 모듈의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="df61dd8b4c6d4d214b129a5077aaee5f7910b304" translate="yes" xml:space="preserve">
          <source>If the name after the prefix and any lift and glob markers is &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;, the variable is treated as an anonymous catch-all pattern in matches. For example, &lt;code&gt;_@_&lt;/code&gt;, &lt;code&gt;_@@_&lt;/code&gt;, &lt;code&gt;_@__&lt;/code&gt;, or even &lt;code&gt;_@__@_&lt;/code&gt;.</source>
          <target state="translated">접 두부 뒤의 이름과 리프트 및 글로브 마커가 &lt;code&gt;_&lt;/code&gt; 또는 &lt;code&gt;0&lt;/code&gt; 인 경우 변수는 일치하는 익명의 포괄 패턴으로 취급됩니다. 예를 들어, &lt;code&gt;_@_&lt;/code&gt; , &lt;code&gt;_@@_&lt;/code&gt; , &lt;code&gt;_@__&lt;/code&gt; 또는 &lt;code&gt;_@__@_&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8c34344ea584c9364120e1acb56d82e908a1af1b" translate="yes" xml:space="preserve">
          <source>If the name is omitted, the &lt;code&gt;gen_server&lt;/code&gt; is not registered. Instead its pid must be used. The name can also be given as &lt;code&gt;{global, Name}&lt;/code&gt;, in which case the &lt;code&gt;gen_server&lt;/code&gt; is registered using &lt;code&gt;global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">이름을 생략하면 &lt;code&gt;gen_server&lt;/code&gt; 가 등록되지 않습니다. 대신 pid를 사용해야합니다. 이름은 &lt;code&gt;{global, Name}&lt;/code&gt; 으로 지정할 수도 있습니다 .이 경우 &lt;code&gt;gen_server&lt;/code&gt; 는 &lt;code&gt;global:register_name/2&lt;/code&gt; 를 사용하여 등록 됩니다.</target>
        </trans-unit>
        <trans-unit id="5f90545e460868142094a7469ef7c519e7a99526" translate="yes" xml:space="preserve">
          <source>If the name is omitted, the &lt;code&gt;gen_statem&lt;/code&gt; is not registered. Instead its pid must be used. The name can also be specified as &lt;code&gt;{global,Name}&lt;/code&gt;, then the &lt;code&gt;gen_statem&lt;/code&gt; is registered using &lt;code&gt;global:register_name/2&lt;/code&gt; in Kernel.</source>
          <target state="translated">이름을 생략하면 &lt;code&gt;gen_statem&lt;/code&gt; 이 등록되지 않습니다. 대신 pid를 사용해야합니다. 이름은 &lt;code&gt;{global,Name}&lt;/code&gt; 으로 지정할 수 있으며 &lt;code&gt;gen_statem&lt;/code&gt; 은 커널에서 &lt;code&gt;global:register_name/2&lt;/code&gt; 를 사용하여 등록 됩니다.</target>
        </trans-unit>
        <trans-unit id="bce770e9e17197a693d6f9ec8afdca775fdac582" translate="yes" xml:space="preserve">
          <source>If the name is omitted, the event manager is not registered. Instead its pid must be used. The name can also be given as &lt;code&gt;{global, Name}&lt;/code&gt;, in which case the event manager is registered using &lt;code&gt;global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">이름을 생략하면 이벤트 관리자가 등록되지 않습니다. 대신 pid를 사용해야합니다. 이름은 &lt;code&gt;{global, Name}&lt;/code&gt; 으로 지정할 수도 있으며 ,이 경우 이벤트 관리자는 &lt;code&gt;global:register_name/2&lt;/code&gt; 를 사용하여 등록 됩니다.</target>
        </trans-unit>
        <trans-unit id="980ec5f2e4cbb3a6bcddf606d02e3f399d751b31" translate="yes" xml:space="preserve">
          <source>If the name used in a condition of this kind is a duplicate, the test is applied to all subpatterns of the same name, and is true if any one of them has matched.</source>
          <target state="translated">이러한 종류의 조건에 사용 된 이름이 중복 된 경우 테스트는 동일한 이름의 모든 하위 패턴에 적용되며, 둘 중 하나라도 일치하면 참입니다.</target>
        </trans-unit>
        <trans-unit id="49bffa909b81c50ee39e3329bfdea53c42d35846" translate="yes" xml:space="preserve">
          <source>If the node is distributed, all referenced nodes are visible. Column &lt;strong&gt;Connection type&lt;/strong&gt; shows if the node is visible, hidden, or not connected. Visible nodes are alive nodes with a living connection to the originating node. Hidden nodes are the same as visible nodes, except they are started with flag &lt;code&gt;-hidden&lt;/code&gt;. Not connected nodes are nodes that are not connected to the originating node anymore, but references (that is, process or port identifiers) exist.</source>
          <target state="translated">노드가 분배되면 모든 참조 된 노드가 표시됩니다. 열 &lt;strong&gt;연결 유형&lt;/strong&gt; 은 노드가 표시되는지, 숨겨져 있는지 또는 연결되어 있지 않은지를 보여줍니다. 표시 가능한 노드는 원래 노드와 연결되어있는 활성 노드입니다. 숨겨진 노드는 표시되는 노드와 동일하지만 플래그 &lt;code&gt;-hidden&lt;/code&gt; 으로 시작 한다는 점이 다릅니다 . 연결되지 않은 노드는 더 이상 원래 노드에 연결되지 않은 노드이지만 참조 (즉, 프로세스 또는 포트 식별자)가 존재합니다.</target>
        </trans-unit>
        <trans-unit id="9c56f0553bb17f48448269d8c3f6b6f7e5b7e66d" translate="yes" xml:space="preserve">
          <source>If the node is started with command-line flag &lt;code&gt;-sname&lt;/code&gt;, the node name is &lt;code&gt;foobar@Host&lt;/code&gt;, where &lt;code&gt;Host&lt;/code&gt; is the short name of the host (not the fully qualified domain name). If started with flag &lt;code&gt;-name&lt;/code&gt;, the node name is &lt;code&gt;foobar@Host&lt;/code&gt;, where &lt;code&gt;Host&lt;/code&gt; is the fully qualified domain name. For more information, see &lt;code&gt;erl&lt;/code&gt;.</source>
          <target state="translated">노드가 명령 행 플래그 &lt;code&gt;-sname&lt;/code&gt; 으로 시작된 경우 노드 이름은 &lt;code&gt;foobar@Host&lt;/code&gt; . 여기서 &lt;code&gt;Host&lt;/code&gt; 는 호스트 의 짧은 이름 (정규화 된 도메인 이름이 아님)입니다. flag &lt;code&gt;-name&lt;/code&gt; 으로 시작 하면 노드 이름은 &lt;code&gt;foobar@Host&lt;/code&gt; . 여기서 &lt;code&gt;Host&lt;/code&gt; 는 정규화 된 도메인 이름입니다. 자세한 정보는 &lt;code&gt;erl&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="95b56bcd18c923019bf4643e2b58f9471a6acfb9" translate="yes" xml:space="preserve">
          <source>If the node was not distributed.</source>
          <target state="translated">노드가 분배되지 않은 경우</target>
        </trans-unit>
        <trans-unit id="aedd11aac41ef6bf71a8b2c8d09b6e7316fb0ef3" translate="yes" xml:space="preserve">
          <source>If the node was successfully unregistered from EPMD, &lt;code&gt;0&lt;/code&gt; is returned, otherwise &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">노드가 EPMD에서 등록 해제 된 경우 &lt;code&gt;0&lt;/code&gt; 이 리턴되고, 그렇지 않으면 &lt;code&gt;-1&lt;/code&gt; 이 리턴되고 &lt;code&gt;erl_errno&lt;/code&gt; 가 &lt;code&gt;EIO&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="9460cf94d8c06eac24b50547fafb0d6e9b4fd6e1" translate="yes" xml:space="preserve">
          <source>If the node was successfully unregistered from EPMD, the function returns &lt;code&gt;0&lt;/code&gt;. Otherwise, &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">노드가 EPMD에서 등록 해제 된 경우 함수는 &lt;code&gt;0&lt;/code&gt; 을 리턴합니다 . 그렇지 않으면 &lt;code&gt;-1&lt;/code&gt; 이 리턴되고 &lt;code&gt;erl_errno&lt;/code&gt; 가 &lt;code&gt;EIO&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="0d5ac939fb10f304c0c8f3c91721403a64646c5e" translate="yes" xml:space="preserve">
          <source>If the node where the application is running goes down, the application is restarted (after the specified time-out) at the first operational node that is listed in the list of nodes in the &lt;code&gt;distributed&lt;/code&gt; configuration parameter. This is called a &lt;strong&gt;failover&lt;/strong&gt;.</source>
          <target state="translated">응용 프로그램이 실행중인 노드가 작동 중지되면, &lt;code&gt;distributed&lt;/code&gt; 구성 매개 변수 의 노드 목록에 나열된 첫 번째 작동 노드에서 응용 프로그램이 (지정된 시간 종료 후) 다시 시작 됩니다. 이것을 &lt;strong&gt;장애 조치&lt;/strong&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="a5d2b0ad4edfef4bb3e88a7ddeeff16d1de18813" translate="yes" xml:space="preserve">
          <source>If the number of arguments are known at compile time, the call is better written as &lt;code&gt;Module:Function(Arg1, Arg2, ..., ArgN)&lt;/code&gt;.</source>
          <target state="translated">컴파일 타임에 인수 수를 알고 있으면 호출은 &lt;code&gt;Module:Function(Arg1, Arg2, ..., ArgN)&lt;/code&gt; 작성하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="37c7a476d1b0b827d6493e10ef324cd201488a29" translate="yes" xml:space="preserve">
          <source>If the number of elements in the arguments are known at compile time, the call is better written as &lt;code&gt;Fun(Arg1, Arg2, ... ArgN)&lt;/code&gt;.</source>
          <target state="translated">인수에서 인수의 요소 수가 컴파일 타임에 알려진 경우 호출은 &lt;code&gt;Fun(Arg1, Arg2, ... ArgN)&lt;/code&gt; 작성하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="5f1678d016c144fe15d956c065fed8204d1f4e8c" translate="yes" xml:space="preserve">
          <source>If the old behaviour is preferred, the Kernel configuration parameter &lt;code&gt;logger_sasl_compatible&lt;/code&gt; can be set to &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;SASL configuration parameters&lt;/code&gt; can then be used as before, and the SASL reports will only be printed if the SASL application is running, through a second log handler named &lt;code&gt;sasl&lt;/code&gt;.</source>
          <target state="translated">이전 동작을 선호하는 경우 커널 구성 매개 변수 &lt;code&gt;logger_sasl_compatible&lt;/code&gt; 을 &lt;code&gt;true&lt;/code&gt; 로 설정할 수 있습니다 . &lt;code&gt;SASL configuration parameters&lt;/code&gt; 그 이전과 같이 사용될 수 있고 SASL 응용 프로그램이 실행되면 SASL 리포트은 제 로그 핸들러라는 통해 인쇄 될 &lt;code&gt;sasl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e5231cf8edc57a7fbd05d3b31ba66fb76e90acd0" translate="yes" xml:space="preserve">
          <source>If the operation fails, a bad match error occurs that terminates the test case.</source>
          <target state="translated">작업이 실패하면 테스트 케이스를 종료하는 잘못된 일치 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="965b40d04fea8544035ae2adb0a45bfab2ddc16f" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;raw&lt;/code&gt; is set, the file server is not called and only information about local files is returned.</source>
          <target state="translated">&lt;code&gt;raw&lt;/code&gt; 옵션 이 설정되면 파일 서버가 호출되지 않고 로컬 파일에 대한 정보 만 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="5e127046f0102151c6ef18467d6c0abf9dd2f077" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;raw&lt;/code&gt; is set, the file server is not called and only information about local files is returned. Note that this will break this module's atomicity guarantees as it can race with a concurrent call to &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;raw&lt;/code&gt; 옵션 이 설정되면 파일 서버가 호출되지 않고 로컬 파일에 대한 정보 만 리턴됩니다. &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2&lt;/a&gt;&lt;/code&gt; 에 대한 동시 호출과 경쟁 할 수 있으므로이 모듈의 원 자성 보증을 위반합니다.</target>
        </trans-unit>
        <trans-unit id="4d027da67948b3928fcb8c40cf4bee29a349c9ad" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;verify&lt;/code&gt; is set to &lt;code&gt;verify_peer&lt;/code&gt; the option &lt;code&gt;server_name_indication&lt;/code&gt; shall also be specified, if it is not no Server Name Indication extension will be sent, and &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; will be called with the IP-address of the connection as &lt;code&gt;ReferenceID&lt;/code&gt;, which is proably not what you want.</source>
          <target state="translated">옵션이있는 경우 &lt;code&gt;verify&lt;/code&gt; 로 설정 &lt;code&gt;verify_peer&lt;/code&gt; 옵션 &lt;code&gt;server_name_indication&lt;/code&gt; 가 더 서버 이름 표시 확장이 전송되지 않습니다 아니며, 경우도 규정되어야한다 &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; 로 연결의 IP 주소로 호출됩니다 &lt;code&gt;ReferenceID&lt;/code&gt; , 어떤 아마 당신이 원하는 것이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c3a18e0b35e87dbcf1a9dcdd4db312f82e11bde7" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;{handshake, hello}&lt;/code&gt; is used the handshake is paused after receiving the server hello message and the success response is &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; instead of &lt;code&gt;{ok, SslSocket}&lt;/code&gt;. Thereafter the handshake is continued or canceled by calling &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{handshake, hello}&lt;/code&gt; 옵션 이 사용되면 서버 hello 메시지를 수신 한 후 데이터 &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; 이 일시 중지되며 성공 응답은 {ok, SslSocket} 대신 {ok, SslSocket, Ext &lt;code&gt;{ok, SslSocket}&lt;/code&gt; 입니다. 그런 다음 handshake_continue &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt; 을 호출하여 핸드 셰이크가 계속되거나 취소됩니다 .</target>
        </trans-unit>
        <trans-unit id="06f7f3873edec45c49aeb8ad204a603fa73eff84" translate="yes" xml:space="preserve">
          <source>If the order is set to &lt;code&gt;allow deny&lt;/code&gt;, the users network address is first controlled to be in the allow subset. If the user network address is not in the allowed subset, the user is denied to get the asset. If the network address is in the allowed subset, a second control is performed. That is, the user network address is not in the subset of network addresses to be denied as specified by parameter &lt;code&gt;deny&lt;/code&gt;.</source>
          <target state="translated">순서가 &lt;code&gt;allow deny&lt;/code&gt; 로 설정 되면 사용자 네트워크 주소가 먼저 허용 하위 집합에 있도록 제어됩니다. 사용자 네트워크 주소가 허용 된 서브 세트에 없으면 사용자가 자산을 가져 오는 것이 거부됩니다. 네트워크 주소가 허용 된 하위 집합에 있으면 두 번째 제어가 수행됩니다. 즉, 사용자 네트워크 주소가 &lt;code&gt;deny&lt;/code&gt; 매개 변수에 의해 지정된대로 거부 될 네트워크 주소의 서브 세트에 있지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="48d8a47c543c2d39d92d2c1d202bacab80c1642d" translate="yes" xml:space="preserve">
          <source>If the order is set to &lt;code&gt;deny allow&lt;/code&gt;, only users from networks specified to be in the allowed subset succeeds to request assets in the limited area.</source>
          <target state="translated">주문이 &lt;code&gt;deny allow&lt;/code&gt; 로 설정된 경우 허용 된 서브 세트에 지정된 네트워크의 사용자 만 제한된 영역에서 자산을 요청합니다.</target>
        </trans-unit>
        <trans-unit id="5413791d17ed0b4814f8fb694ad1efb815f76c05" translate="yes" xml:space="preserve">
          <source>If the order of the answers is not important, there is an alternative to the &lt;code&gt;unique&lt;/code&gt; option, namely to sort the answers uniquely:</source>
          <target state="translated">답변의 순서가 중요하지 않은 경우, &lt;code&gt;unique&lt;/code&gt; 옵션에 대한 대안 , 즉 답변을 고유하게 정렬 하는 대안이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b054305581b7663ed91514b307669add31ca5b5b" translate="yes" xml:space="preserve">
          <source>If the packet does not conform to the protocol format, &lt;code&gt;{error,Reason}&lt;/code&gt; is returned.</source>
          <target state="translated">패킷이 프로토콜 형식을 준수하지 않으면 &lt;code&gt;{error,Reason}&lt;/code&gt; 이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="a2c9f15b9a918cfc529cc22dc69ae62a00c732a6" translate="yes" xml:space="preserve">
          <source>If the page is empty, it means either of the following:</source>
          <target state="translated">페이지가 비어 있으면 다음 중 하나를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f52fa558245396ce59f0c16eb282e09760e84891" translate="yes" xml:space="preserve">
          <source>If the parse_transform is not applied to a module which calls this pseudo function, the call will fail in runtime (with a &lt;code&gt;badarg&lt;/code&gt;). The module &lt;code&gt;dbg&lt;/code&gt; actually exports a function with this name, but it should never really be called except for when using the function in the shell. If the &lt;code&gt;parse_transform&lt;/code&gt; is properly applied by including the &lt;code&gt;ms_transform.hrl&lt;/code&gt; header file, compiled code will never call the function, but the function call is replaced by a literal match_spec.</source>
          <target state="translated">parse_transform이이 의사 함수를 호출하는 모듈에 적용되지 않으면 런타임에 호출이 실패합니다 ( &lt;code&gt;badarg&lt;/code&gt; 사용 ). 모듈 &lt;code&gt;dbg&lt;/code&gt; 는 실제로이 이름의 함수를 내보내 지만, 쉘에서 함수를 사용할 때를 제외하고는 실제로 호출해서는 안됩니다. &lt;code&gt;ms_transform.hrl&lt;/code&gt; 헤더 파일 을 포함 하여 &lt;code&gt;parse_transform&lt;/code&gt; 이 올바르게 적용 되면 컴파일 된 코드는 절대로 함수를 호출하지 않지만 함수 호출은 리터럴 match_spec로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="7c4c35e1fed61f85f87d7154c2244f967d2936c6" translate="yes" xml:space="preserve">
          <source>If the pattern is unanchored, the normal &quot;bumpalong&quot; advance to the next starting character then occurs. Backtracking can occur as usual to the left of (*PRUNE), before it is reached, or when matching to the right of (*PRUNE), but if there is no match to the right, backtracking cannot cross (*PRUNE). In simple cases, the use of (*PRUNE) is just an alternative to an atomic group or possessive quantifier, but there are some uses of (*PRUNE) that cannot be expressed in any other way. In an anchored pattern, (*PRUNE) has the same effect as (*COMMIT).</source>
          <target state="translated">패턴이 고정되어 있지 않으면 정상적인 &quot;bumpalong&quot;이 다음 시작 문자로 진행됩니다. 역 추적은 (* PRUNE) 왼쪽에 평소와 같이 도달하기 전에 또는 (* PRUNE) 오른쪽에 일치 할 때 발생할 수 있지만 오른쪽에 일치하지 않으면 역 추적을 교차 할 수 없습니다 (* PRUNE). 간단한 경우, (* PRUNE)의 사용은 원자 그룹 또는 소유 수량화의 대안 일 뿐이지 만 다른 방식으로는 표현할 수없는 (* PRUNE)의 일부 사용이 있습니다. 고정 패턴에서 (* PRUNE)은 (* COMMIT)과 동일한 효과를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="caf53e7076db6e332a206c64cff8afbb0ab34c47" translate="yes" xml:space="preserve">
          <source>If the permission of a loaded, but not started, application is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; returns &lt;code&gt;ok&lt;/code&gt; but the application is not started until the permission is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">로드되었지만 시작되지 않은 권한이 응용 프로그램은 &lt;code&gt;false&lt;/code&gt; 로 설정 되면 &lt;code&gt;start&lt;/code&gt; 는 &lt;code&gt;ok&lt;/code&gt; 를 반환 하지만 권한이 &lt;code&gt;true&lt;/code&gt; 로 설정 될 때까지 응용 프로그램은 시작되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fb5424927d13c1c2f8655ecb9fa4aea52eaa565c" translate="yes" xml:space="preserve">
          <source>If the permission of a running application is set to &lt;code&gt;false&lt;/code&gt;, the application is stopped. If the permission later is set to &lt;code&gt;true&lt;/code&gt;, it is restarted.</source>
          <target state="translated">실행중인 애플리케이션의 권한이 &lt;code&gt;false&lt;/code&gt; 로 설정 되면 애플리케이션이 중지됩니다. 나중에 권한이 &lt;code&gt;true&lt;/code&gt; 로 설정되면 다시 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="d4dfea1ce63878f9ba8f72e4692fc1e8aa917a62" translate="yes" xml:space="preserve">
          <source>If the port command is aborted, &lt;code&gt;false&lt;/code&gt; is returned, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">포트 명령이 중단되면 &lt;code&gt;false&lt;/code&gt; 가 반환되고 그렇지 않으면 &lt;code&gt;true&lt;/code&gt; 가 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="c1c15fb5c83bfc2a91269d248f12f67e81fee63b" translate="yes" xml:space="preserve">
          <source>If the port driver does not support synchronous control operations.</source>
          <target state="translated">포트 드라이버가 동기 제어 조작을 지원하지 않는 경우</target>
        </trans-unit>
        <trans-unit id="0d0817e3d68cbd798c7a2e44b1c69c87bcdb5eaf" translate="yes" xml:space="preserve">
          <source>If the port driver so decides for any reason (probably something wrong with &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Data&lt;/code&gt;).</source>
          <target state="translated">포트 드라이버가 어떤 이유로 든 결정한 경우 (아마도 &lt;code&gt;Operation&lt;/code&gt; 또는 &lt;code&gt;Data&lt;/code&gt; 에 문제가 있음 )</target>
        </trans-unit>
        <trans-unit id="6d151f89de14a3a981ce006759dc3e5172e69a5a" translate="yes" xml:space="preserve">
          <source>If the port has terminated for some reason.</source>
          <target state="translated">어떤 이유로 포트가 종료 된 경우.</target>
        </trans-unit>
        <trans-unit id="478c30ae507a35c9772a0df1cd3d96a72d57ca57" translate="yes" xml:space="preserve">
          <source>If the port identified by &lt;code&gt;Port&lt;/code&gt; is not open, &lt;code&gt;undefined&lt;/code&gt; is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before &lt;code&gt;port_info/2&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Port&lt;/code&gt; 로 식별 된 포트 가 열려 &lt;code&gt;undefined&lt;/code&gt; 않으면 undefined 가 반환됩니다. 포트가 닫히고 호출 프로세스가 이전에 포트에 링크 된 경우 &lt;code&gt;port_info/2&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 를 리턴 하기 전에 포트의 종료 신호가 전달되도록 보장됩니다 .</target>
        </trans-unit>
        <trans-unit id="853a76f0837b416b340a6bf46f68d0b7ffc26aa7" translate="yes" xml:space="preserve">
          <source>If the port is busy, the calling process is suspended until the port is not busy any more.</source>
          <target state="translated">포트가 사용중인 경우 포트가 더 이상 사용되지 않을 때까지 호출 프로세스가 일시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="8e93ad76f9dc1354beffe48343ad7231e136396f" translate="yes" xml:space="preserve">
          <source>If the port is busy, the calling process is suspended until the port is not busy anymore.</source>
          <target state="translated">포트가 사용중인 경우 포트가 더 이상 사용되지 않을 때까지 호출 프로세스가 일시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="6e75c78d0feb81a1196647eabb58d38723b98522" translate="yes" xml:space="preserve">
          <source>If the port program closes its &lt;code&gt;stdout&lt;/code&gt; without exiting, option &lt;code&gt;exit_status&lt;/code&gt; does not work.</source>
          <target state="translated">포트 프로그램이 종료 하지 않고 &lt;code&gt;stdout&lt;/code&gt; 을 닫으면 &lt;code&gt;exit_status&lt;/code&gt; 옵션 이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db113293208f7fe3c23990353c9eaabbd0d53db0" translate="yes" xml:space="preserve">
          <source>If the port program is to be updated, the code for the &lt;code&gt;gen_server&lt;/code&gt; can be extended with a &lt;code&gt;code_change&lt;/code&gt; function, which closes the old port and opens a new port. (If necessary, the &lt;code&gt;gen_server&lt;/code&gt; can first request data that must be saved from the port program and pass this data to the new port):</source>
          <target state="translated">포트 프로그램을 업데이트하려는 경우 &lt;code&gt;gen_server&lt;/code&gt; 코드를 &lt;code&gt;code_change&lt;/code&gt; 함수 로 확장 하여 이전 포트를 닫고 새 포트를 열 수 있습니다. (필요한 경우 &lt;code&gt;gen_server&lt;/code&gt; 는 먼저 포트 프로그램에서 저장해야하는 데이터를 요청하고이 데이터를 새 포트로 전달할 수 있습니다).</target>
        </trans-unit>
        <trans-unit id="38a0c5b075f7274afd3c7af203177b865a7ca3d6" translate="yes" xml:space="preserve">
          <source>If the process calling &lt;code&gt;erlang:resume_process/1&lt;/code&gt; had not previously increased the suspend count on the process identified by &lt;code&gt;Suspendee&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:resume_process/1&lt;/code&gt; 을 호출하는 프로세스 가 이전에 &lt;code&gt;Suspendee&lt;/code&gt; 로 식별 된 프로세스에서 일시 중단 수를 늘리지 않은 경우 .</target>
        </trans-unit>
        <trans-unit id="7dde4932a93f8e946ee90206f0656471a4679385" translate="yes" xml:space="preserve">
          <source>If the process does not exist, a &lt;code&gt;noproc&lt;/code&gt; exception is raised.</source>
          <target state="translated">프로세스가 존재하지 않으면 &lt;code&gt;noproc&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="20b1fa7364ea436067720e9fd90a1b6ba70feb9e" translate="yes" xml:space="preserve">
          <source>If the process executing the call does not belong to any application, the function returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">호출을 실행하는 프로세스가 응용 프로그램에 속하지 않으면 함수는 &lt;code&gt;undefined&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="581efb60de5599bb6f030da89d279c27e9892d5a" translate="yes" xml:space="preserve">
          <source>If the process has any message in its message queue, the process is awakened immediately in the same way as described earlier.</source>
          <target state="translated">프로세스가 메시지 큐에 메시지를 가지고 있으면 프로세스는 앞에서 설명한 것과 같은 방식으로 즉시 깨어납니다.</target>
        </trans-unit>
        <trans-unit id="084bfd0c081f4fee78443d764a32418d4196357e" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Pid&lt;/code&gt; has a registered name, also an &lt;code&gt;InfoTuple&lt;/code&gt; with item &lt;code&gt;registered_name&lt;/code&gt; is included.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 로 식별 된 프로세스 에 등록 된 이름이 &lt;code&gt;InfoTuple&lt;/code&gt; 항목이 &lt;code&gt;registered_name&lt;/code&gt; 인 InfoTuple 도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b81261e08e1610fbb4a750870cfa04d7610f65e5" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Pid&lt;/code&gt; is not an existing local process.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; 로 식별 된 프로세스 가 기존 로컬 프로세스가 아닌 경우</target>
        </trans-unit>
        <trans-unit id="6f56d002efe6106da3a84a3e2016c451482b68c7" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; has been suspended more times by the calling process than can be represented by the currently used internal data structures. The system limit is &amp;gt; 2,000,000,000 suspends and will never be lower.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; 가 식별 한 프로세스가 현재 사용중인 내부 데이터 구조로 표시 될 수있는 것보다 호출 프로세스에 의해 여러 번 일시 중단 된 경우 시스템 한도는 2,000,000,000 개 이상이며 중단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e6414a88b13aa6c8a9b8f6f5c8c66d946440583" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; is not alive.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; 가 식별 한 프로세스 가 아직 유효하지 않은 경우</target>
        </trans-unit>
        <trans-unit id="641aca5b56bf74307b3adf498b7c5e8e5c4b1259" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; is the same process as the process calling &lt;code&gt;erlang:suspend_process/2&lt;/code&gt;.</source>
          <target state="translated">로 식별되는 과정 경우 &lt;code&gt;Suspendee&lt;/code&gt; 는 프로세스 호출과 같은 과정 &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="651c23453333c69005cd277bbe1fcf8cf3b85f49" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; resides on another node.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; 가 식별 한 프로세스 가 다른 노드에있는 경우</target>
        </trans-unit>
        <trans-unit id="e4ca7dc0b151bb1f9cd8a2a4aff6bffd4a0444e4" translate="yes" xml:space="preserve">
          <source>If the process is alive and a single &lt;code&gt;Item&lt;/code&gt; is specified, the returned value is the corresponding &lt;code&gt;InfoTuple&lt;/code&gt;, unless &lt;code&gt;Item =:= registered_name&lt;/code&gt; and the process has no registered name. In this case, &lt;code&gt;[]&lt;/code&gt; is returned. This strange behavior is because of historical reasons, and is kept for backward compatibility.</source>
          <target state="translated">프로세스가 &lt;code&gt;InfoTuple&lt;/code&gt; 이고 단일 &lt;code&gt;Item&lt;/code&gt; 이 지정된 경우 &lt;code&gt;Item =:= registered_name&lt;/code&gt; 이고 프로세스에 등록 된 이름이없는 경우 반환되는 값은 해당 InfoTuple 입니다. 이 경우 &lt;code&gt;[]&lt;/code&gt; 가 반환됩니다. 이 이상한 동작은 역사적인 이유 때문이며 이전 버전과의 호환성을 위해 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="1a9a0fee2f5bd85201e0094b8e33070b42b45236" translate="yes" xml:space="preserve">
          <source>If the process is to replace its state using the fun &lt;code&gt;StateFun&lt;/code&gt;, &lt;code&gt;handle_system_msg&lt;/code&gt; calls:</source>
          <target state="translated">프로세스가 fun &lt;code&gt;StateFun&lt;/code&gt; 을 사용하여 상태를 바꾸는 경우 &lt;code&gt;handle_system_msg&lt;/code&gt; 는 다음을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="3df3174e4f4f8d76818b78c9db43318524d54225" translate="yes" xml:space="preserve">
          <source>If the process is to return its state, &lt;code&gt;handle_system_msg&lt;/code&gt; calls:</source>
          <target state="translated">프로세스가 상태를 리턴하는 경우 &lt;code&gt;handle_system_msg&lt;/code&gt; 는 다음을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="54575a5d04700d078536008be3d7a71568b2f2f0" translate="yes" xml:space="preserve">
          <source>If the process or port is already registered (already has a name).</source>
          <target state="translated">프로세스 또는 포트가 이미 등록되어있는 경우 (이미 이름이 있음)</target>
        </trans-unit>
        <trans-unit id="72499bc5509543fc3c3a1dc36c89e29a09a5bee5" translate="yes" xml:space="preserve">
          <source>If the process potentially can get many messages in its queue, you are advised to set the flag to &lt;code&gt;off_heap&lt;/code&gt;. This because a garbage collection with many messages placed on the heap can become extremely expensive and the process can consume large amounts of memory. Performance of the actual message passing is however generally better when not using flag &lt;code&gt;off_heap&lt;/code&gt;.</source>
          <target state="translated">프로세스가 큐에 많은 메시지를 가져올 수있는 경우 플래그를 &lt;code&gt;off_heap&lt;/code&gt; 으로 설정하는 것이 좋습니다 . 이는 많은 메시지가 힙에 배치 된 가비지 콜렉션이 매우 비싸고 프로세스가 많은 양의 메모리를 소비 할 수 있기 때문입니다. 그러나 실제 메시지 전달 성능은 일반적으로 플래그 &lt;code&gt;off_heap&lt;/code&gt; 을 사용하지 않을 때 더 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="2977b37e3f3fa2bacc4a55c85d9c30b69a4999c8" translate="yes" xml:space="preserve">
          <source>If the process terminates with another reason than &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;shutdown&lt;/code&gt;, a crash report is generated. For more information about the crash report, see the SASL User's Guide.</source>
          <target state="translated">프로세스가 &lt;code&gt;normal&lt;/code&gt; 또는 &lt;code&gt;shutdown&lt;/code&gt; 이외의 다른 이유로 종료 되면 충돌 보고서가 생성됩니다. 충돌 보고서에 대한 자세한 내용은 SASL 사용 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="24d7be87e875bc81d2fad8f3b3e621f25756c364" translate="yes" xml:space="preserve">
          <source>If the process was spawned using a fun, &lt;code&gt;initial_call/1&lt;/code&gt; no longer returns the fun, but the module, function for the local function implementing the fun, and the arity, for example, &lt;code&gt;{some_module,-work/3-fun-0-,0}&lt;/code&gt; (meaning that the fun was created in function &lt;code&gt;some_module:work/3&lt;/code&gt;). The reason is that keeping the fun would prevent code upgrade for the module, and that a significant amount of memory could be wasted.</source>
          <target state="translated">fun을 사용하여 프로세스가 생성 된 경우 &lt;code&gt;initial_call/1&lt;/code&gt; 은 더 이상 fun을 반환하지 않고 모듈, fun을 구현하는 로컬 함수에 대한 함수 및 &lt;code&gt;{some_module,-work/3-fun-0-,0}&lt;/code&gt; (재미가 &lt;code&gt;some_module:work/3&lt;/code&gt; 함수에서 생성되었음을 의미 ). 재미를 유지하면 모듈의 코드 업그레이드가 방해되고 많은 양의 메모리가 낭비 될 수 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="e063f0c97bd3b9f2ca10490b0726825eb1a13207" translate="yes" xml:space="preserve">
          <source>If the program is too large to be profiled by &lt;code&gt;fprof&lt;/code&gt; or &lt;code&gt;eprof&lt;/code&gt;, &lt;code&gt;cprof&lt;/code&gt; can be used to locate code parts that are to be more thoroughly profiled using &lt;code&gt;fprof&lt;/code&gt; or &lt;code&gt;eprof&lt;/code&gt;.</source>
          <target state="translated">프로그램이 너무 커서 &lt;code&gt;fprof&lt;/code&gt; 또는 &lt;code&gt;eprof&lt;/code&gt; 로 프로파일 링 할 수 없는 경우 &lt;code&gt;cprof&lt;/code&gt; 를 사용하여 &lt;code&gt;fprof&lt;/code&gt; 또는 &lt;code&gt;eprof&lt;/code&gt; 를 사용하여보다 철저하게 프로파일 링 할 코드 부분을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f62378f1f957382ee8a052b1c61d99645a009e49" translate="yes" xml:space="preserve">
          <source>If the pure encode/decode performance really is a serious issue, our erl_dist encoder could be used, as the encoding/decoding of the erlang distribution format is much faster than all the other alternatives. Its major drawback is that it is has not been approved as a valid Megaco/H.248 message encoding.</source>
          <target state="translated">순수한 인코딩 / 디코딩 성능이 실제로 심각한 문제인 경우, erlang 배포 형식의 인코딩 / 디코딩이 다른 모든 대안보다 훨씬 빠르기 때문에 erl_dist 인코더를 사용할 수 있습니다. 주요 단점은 유효한 Megaco / H.248 메시지 인코딩으로 승인되지 않았다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a4deb3a5f5f018b337b5754c6b3743ec42918472" translate="yes" xml:space="preserve">
          <source>If the quantifier is {0}, the assertion is never obeyed during matching. However, it can contain internal capturing parenthesized groups that are called from elsewhere through the subroutine mechanism.</source>
          <target state="translated">수량자가 {0}이면 일치하는 동안 어설 션이 준수되지 않습니다. 그러나 서브 루틴 메커니즘을 통해 다른 곳에서 호출되는 내부 캡처 괄호로 묶은 그룹을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15a112cbde0806d4bd82db516d60932759dd1e88" translate="yes" xml:space="preserve">
          <source>If the regular expression contains capturing subpatterns, like in:</source>
          <target state="translated">정규식에 다음과 같이 캡처 하위 패턴이 포함 된 경우</target>
        </trans-unit>
        <trans-unit id="53c05be9c33eb1a96dab74d00ca7378c333d60b5" translate="yes" xml:space="preserve">
          <source>If the regular expression is previously compiled, the option list can only contain the following options:</source>
          <target state="translated">정규식이 이전에 컴파일 된 경우 옵션 목록은 다음 옵션 만 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22619338e12940ef34ae589b0ca2c131b656f3a0" translate="yes" xml:space="preserve">
          <source>If the regular expression was previously compiled with option &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;Subject&lt;/code&gt; is to be provided as a valid Unicode &lt;code&gt;charlist()&lt;/code&gt;, otherwise any &lt;code&gt;iodata()&lt;/code&gt; will do. If compilation is involved and option &lt;code&gt;unicode&lt;/code&gt; is specified, both &lt;code&gt;Subject&lt;/code&gt; and the regular expression are to be specified as valid Unicode &lt;code&gt;charlists()&lt;/code&gt;.</source>
          <target state="translated">정규식이 이전에 옵션 &lt;code&gt;unicode&lt;/code&gt; 로 컴파일 된 경우 &lt;code&gt;Subject&lt;/code&gt; 는 유효한 유니 코드 &lt;code&gt;charlist()&lt;/code&gt; 로 제공되며 , 그렇지 않으면 &lt;code&gt;iodata()&lt;/code&gt; 가 수행됩니다. 컴파일이 포함되고 옵션 &lt;code&gt;unicode&lt;/code&gt; 가 지정된 경우 &lt;code&gt;Subject&lt;/code&gt; 및 정규식 모두 유효한 유니 코드 &lt;code&gt;charlists()&lt;/code&gt; 로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="95cb6c73038fea5d38c77487c266df25c09c2a93" translate="yes" xml:space="preserve">
          <source>If the release is to be upgraded, it must also include the SASL application.</source>
          <target state="translated">릴리스를 업그레이드하려면 SASL 응용 프로그램도 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="209b3e073d6604d9f31c31d6ea0d348f2a50c0c5" translate="yes" xml:space="preserve">
          <source>If the release package is to contain a new Erlang runtime system, the &lt;code&gt;bin&lt;/code&gt; directory of the specified runtime system &lt;code&gt;{erts,Dir}&lt;/code&gt; is copied to &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt;.</source>
          <target state="translated">릴리스 패키지가 새로운 Erlang 런타임 시스템을 포함하는 경우 지정된 런타임 시스템 &lt;code&gt;{erts,Dir}&lt;/code&gt; 의 &lt;code&gt;bin&lt;/code&gt; 디렉토리가 &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt; 에 복사됩니다 .</target>
        </trans-unit>
        <trans-unit id="f636f7002f64f569ae3d458b76d340d2355447e2" translate="yes" xml:space="preserve">
          <source>If the reply arrives after the call times out, no message contaminates the caller's message queue, as this function spawns off a middleman process to act as (a void) destination for such an orphan reply. This feature also makes this function more expensive than &lt;code&gt;call/4&lt;/code&gt; at the caller's end.</source>
          <target state="translated">호출 시간이 초과 된 후 응답이 도착하면이 기능은 중개자 프로세스에서 생성되어 고아 응답의 (빈 공간) 대상으로 작동하므로 발신자의 메시지 큐를 오염시키는 메시지가 없습니다. 이 기능을 사용 하면 발신자 쪽의 &lt;code&gt;call/4&lt;/code&gt; 보다이 기능이 더 비쌉니다 .</target>
        </trans-unit>
        <trans-unit id="72de28ff26e478c709ccef28f5ec9b72f45a4e23" translate="yes" xml:space="preserve">
          <source>If the report browser is used offline, the reports can be copied to another directory specified when starting the browser. If no such directory is specified, the browser reads reports from the SASL &lt;code&gt;error_logger_mf_dir&lt;/code&gt;.</source>
          <target state="translated">보고서 브라우저를 오프라인에서 사용하면 브라우저를 시작할 때 지정된 다른 디렉토리로 보고서를 복사 할 수 있습니다. 그러한 디렉토리를 지정하지 않으면 브라우저는 SASL &lt;code&gt;error_logger_mf_dir&lt;/code&gt; 에서 보고서를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="d403abf04385b59be919058fa57d3e12c76fe7b9" translate="yes" xml:space="preserve">
          <source>If the request functions for the SFTP channel return &lt;code&gt;{error, timeout}&lt;/code&gt;, no answer was received from the server within the expected time.</source>
          <target state="translated">SFTP 채널에 대한 요청 기능이 &lt;code&gt;{error, timeout}&lt;/code&gt; 리턴 하면 예상 시간 내에 서버로부터 응답을받지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="68fcf1aa779848125b39efeaf9b8566022844620" translate="yes" xml:space="preserve">
          <source>If the request is an HTTP/1.1 request, the URI can be in the absolute URI format. In that case, &lt;code&gt;httpd&lt;/code&gt; saves the absolute URI in this field. An Example of an absolute URI is &lt;code&gt;&quot;http://ServerName:Part/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt;</source>
          <target state="translated">요청이 HTTP / 1.1 요청 인 경우 URI는 절대 URI 형식 일 수 있습니다. 이 경우 &lt;code&gt;httpd&lt;/code&gt; 는이 필드에 절대 URI를 저장합니다. 절대 URI의 예는 &lt;code&gt;&quot;http://ServerName:Part/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf8c6e0e4e32eeefc924406bd2971a4ed6ef9777" translate="yes" xml:space="preserve">
          <source>If the request is successfully encoded and sent but the answer times out then a &lt;code&gt;handle_error/4&lt;/code&gt; callback takes place with &lt;code&gt;Reason = timeout&lt;/code&gt;.</source>
          <target state="translated">요청이 성공적으로 인코딩 및 전송되었지만 응답 시간이 &lt;code&gt;Reason = timeout&lt;/code&gt; 되면 Reason = timeout 으로 &lt;code&gt;handle_error/4&lt;/code&gt; 콜백이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="d362d3cf60cb0af09ab64c13d49db2cee633e8f5" translate="yes" xml:space="preserve">
          <source>If the request is successfully encoded and sent but the service in question is stopped before an answer is received then a &lt;code&gt;handle_error/4&lt;/code&gt; callback takes place with &lt;code&gt;Reason = cancel&lt;/code&gt;.</source>
          <target state="translated">요청이 성공적으로 인코딩되어 전송되었지만 응답을 받기 전에 해당 서비스가 중지 된 경우 &lt;code&gt;Reason = cancel&lt;/code&gt; 으로 &lt;code&gt;handle_error/4&lt;/code&gt; 콜백이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="9756cb158d71aee0a6ade83d17f9f5f0e83f232d" translate="yes" xml:space="preserve">
          <source>If the requested data is available, the subentry is associated with &lt;code&gt;Name&lt;/code&gt; so that the value of the element can be read with &lt;code&gt;&lt;a href=&quot;#get_config-1&quot;&gt;ct:get_config/1,2&lt;/a&gt;&lt;/code&gt; provided &lt;code&gt;Name&lt;/code&gt; is used instead of the whole &lt;code&gt;Required&lt;/code&gt; term.</source>
          <target state="translated">요청 된 데이터를 사용할 수있는 경우 하위 항목이와 관련된 &lt;code&gt;Name&lt;/code&gt; 때문에 요소의 값을 읽을 수 있다는 &lt;code&gt;&lt;a href=&quot;#get_config-1&quot;&gt;ct:get_config/1,2&lt;/a&gt;&lt;/code&gt; 제공 &lt;code&gt;Name&lt;/code&gt; 대신에 전체의 사용 &lt;code&gt;Required&lt;/code&gt; 용어.</target>
        </trans-unit>
        <trans-unit id="5e0bd29420b56350fa2aea428f5bb429a285d8aa" translate="yes" xml:space="preserve">
          <source>If the restricted shell is activated by setting the STDLIB variable during emulator startup, and the callback module cannot be loaded, a default restricted shell allowing only the commands &lt;code&gt;q()&lt;/code&gt; and &lt;code&gt;init:stop()&lt;/code&gt; is used as fallback.</source>
          <target state="translated">에뮬레이터 시작 중에 STDLIB 변수를 설정하여 제한 쉘이 활성화되고 콜백 모듈을로드 할 수없는 경우 명령 &lt;code&gt;q()&lt;/code&gt; 및 &lt;code&gt;init:stop()&lt;/code&gt; 만 허용하는 기본 제한 쉘 이 폴백으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ffe48dc12c1fe598f1a22c84e21f70cadbb61864" translate="yes" xml:space="preserve">
          <source>If the restricted shell is activated using &lt;code&gt;&lt;a href=&quot;#start_restricted-1&quot;&gt;start_restricted/1&lt;/a&gt;&lt;/code&gt; and the callback module cannot be loaded, an error report is sent to the error logger and the call returns &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_restricted-1&quot;&gt;start_restricted/1&lt;/a&gt;&lt;/code&gt; 을 사용하여 제한된 쉘이 활성화 되고 콜백 모듈을로드 할 수없는 경우 오류 보고서가 오류 로거로 전송되고 호출은 &lt;code&gt;{error,Reason}&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d723ff157f68fb866c4e720b4a0eacba9b30b870" translate="yes" xml:space="preserve">
          <source>If the result of the list comprehension will &lt;strong&gt;obviously&lt;/strong&gt; not be used, a list will not be constructed. For example, in this code:</source>
          <target state="translated">목록 이해의 결과가 &lt;strong&gt;분명히&lt;/strong&gt; 사용되지 않으면 목록이 구성되지 않습니다. 예를 들어,이 코드에서 :</target>
        </trans-unit>
        <trans-unit id="ef688930e9bc0a09ddfd80d412acb665d77d541c" translate="yes" xml:space="preserve">
          <source>If the runtime system is in &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi time warp mode&lt;/a&gt;&lt;/code&gt;, the time offset is changed when the runtime system detects that the &lt;code&gt;&lt;a href=&quot;time_correction#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; has changed. The runtime system does, however, not detect this immediately when it occurs. A task checking the time offset is scheduled to execute at least once a minute, so under normal operation this is to be detected within a minute, but during heavy load it can take longer time.</source>
          <target state="translated">런타임 시스템이 &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi time warp mode&lt;/a&gt;&lt;/code&gt; 인 경우 런타임 시스템이 &lt;code&gt;&lt;a href=&quot;time_correction#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; 이 변경된 것을 감지하면 시간 오프셋이 변경됩니다 . 그러나 런타임 시스템은 이것이 발생할 때이를 즉시 감지하지 않습니다. 시간 오프셋을 검사하는 작업은 최소 1 분에 한 번 실행되도록 예약되므로 정상 작동시 1 분 내에 감지되지만로드가 많은 경우 시간이 더 오래 걸릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ee5563a77256009bf8489bde46cade77b9f2b67" translate="yes" xml:space="preserve">
          <source>If the runtime system is in &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt;, the time offset is changed when the runtime system detects that the &lt;code&gt;&lt;a href=&quot;time_correction#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; has changed. The runtime system will, however, not detect this immediately when it occurs. A task checking the time offset is scheduled to execute at least once a minute; so, under normal operation this is to be detected within a minute, but during heavy load it can take longer time.</source>
          <target state="translated">런타임 시스템이 &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; 인 경우 런타임 시스템이 &lt;code&gt;&lt;a href=&quot;time_correction#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; 이 변경된 것을 감지하면 시간 오프셋이 변경됩니다 . 그러나 런타임 시스템은 이것이 발생할 때이를 즉시 감지하지 않습니다. 시간 오프셋을 검사하는 작업은 최소 1 분에 한 번 실행되도록 예약되어 있습니다. 따라서 정상 작동시 1 분 이내에 감지되지만로드가 많은 경우 시간이 더 오래 걸릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="554e754ec098db2cf4c76a2930674bed5aa17796" translate="yes" xml:space="preserve">
          <source>If the scheme &lt;code&gt;https&lt;/code&gt; is used, the &lt;code&gt;SSL&lt;/code&gt; application must be started. When &lt;code&gt;https&lt;/code&gt; links need to go through a proxy, the CONNECT method extension to HTTP-1.1 is used to establish a tunnel and then the connection is upgraded to TLS. However, &quot;TLS upgrade&quot; according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2817.txt&quot;&gt;RFC 2817&lt;/a&gt;&lt;/code&gt;is not supported.</source>
          <target state="translated">&lt;code&gt;https&lt;/code&gt; 체계 를 사용하는 경우 &lt;code&gt;SSL&lt;/code&gt; 애플리케이션을 시작해야합니다. 때 &lt;code&gt;https&lt;/code&gt; 링크가 프록시를 통해 갈 필요가, HTTP-1.1에 CONNECT 방법 확장 터널을 설정하는 데 사용 된 후 연결이 TLS로 업그레이드됩니다. 그러나 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2817.txt&quot;&gt;RFC 2817&lt;/a&gt;&lt;/code&gt; 에 따른 &quot;TLS 업그레이드&quot; 는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f8d199b5f396cd79b8cc290ec04cb85c9575f0f8" translate="yes" xml:space="preserve">
          <source>If the sender would have to be suspended to do the send, &lt;code&gt;nosuspend&lt;/code&gt; is returned instead.</source>
          <target state="translated">송신자가 송신을 수행하기 위해 일시 ​​중단되어야하는 경우, 대신 &lt;code&gt;nosuspend&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="7e6d3e8ae70c643b6deb59daac018ce037067a9f" translate="yes" xml:space="preserve">
          <source>If the server is not specified in a configuration file, use &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">서버가 구성 파일에 지정되지 않은 경우 &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1&lt;/a&gt;&lt;/code&gt; 을 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d8838b36f111de63a4782ef1a364bbbead7e4773" translate="yes" xml:space="preserve">
          <source>If the server is not specified in a configuration file, use &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">서버가 구성 파일에 지정되지 않은 경우 대신 &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; 을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="70355032eca4c9d76df601e10da3a7d335f3ed0d" translate="yes" xml:space="preserve">
          <source>If the server options are specified in a configuration file, or if a named client is needed for logging purposes (see section &lt;code&gt;&lt;a href=&quot;#Logging&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; in this module), use &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">서버 옵션이 구성 파일에 지정되거나 이름 지정된 클라이언트가 로깅 목적으로 필요한 경우 ( 이 모듈의 &lt;code&gt;&lt;a href=&quot;#Logging&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; 섹션 참조 ) 대신 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="57f23c3daad60ed51515d51367aea45626c02cd9" translate="yes" xml:space="preserve">
          <source>If the server options are specified in a configuration file, use &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">서버 옵션이 구성 파일에 지정된 경우 대신 &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2dcdba9665f7f05be3244027d112ec31bf32434c" translate="yes" xml:space="preserve">
          <source>If the server receives a SNI (Server Name Indication) from the client matching a host listed in the &lt;code&gt;sni_hosts&lt;/code&gt; option, the specific options for that host will override previously specified options. The option &lt;code&gt;sni_fun&lt;/code&gt;, and &lt;code&gt;sni_hosts&lt;/code&gt; are mutually exclusive.</source>
          <target state="translated">서버가 클라이언트로부터 &lt;code&gt;sni_hosts&lt;/code&gt; 옵션에 나열된 호스트와 일치하는 SNI (서버 이름 표시)를 수신하면 해당 호스트에 대한 특정 옵션이 이전에 지정된 옵션보다 우선합니다. &lt;code&gt;sni_fun&lt;/code&gt; 및 &lt;code&gt;sni_hosts&lt;/code&gt; 옵션 은 상호 배타적입니다.</target>
        </trans-unit>
        <trans-unit id="f88346e63ca31b635eaa59afabe4ac1246f3dd96" translate="yes" xml:space="preserve">
          <source>If the server receives a SNI (Server Name Indication) from the client, the given function will be called to retrieve &lt;code&gt;[ssl_option()]&lt;/code&gt; for the indicated server. These options will be merged into predefined &lt;code&gt;[ssl_option()]&lt;/code&gt;. The function should be defined as: &lt;code&gt;fun(ServerName :: string()) -&amp;gt; [ssl_option()]&lt;/code&gt; and can be specified as a fun or as named &lt;code&gt;fun module:function/1&lt;/code&gt; The option &lt;code&gt;sni_fun&lt;/code&gt;, and &lt;code&gt;sni_hosts&lt;/code&gt; are mutually exclusive.</source>
          <target state="translated">서버가 클라이언트로부터 SNI (Server Name Indication)를 수신하면 지정된 서버에 대해 &lt;code&gt;[ssl_option()]&lt;/code&gt; 을 검색하기 위해 지정된 함수가 호출됩니다 . 이러한 옵션은 사전 정의 된 &lt;code&gt;[ssl_option()]&lt;/code&gt; 병합됩니다 . 이 함수는 &lt;code&gt;fun(ServerName :: string()) -&amp;gt; [ssl_option()]&lt;/code&gt; 으로 정의해야하며 fun 또는 named &lt;code&gt;fun module:function/1&lt;/code&gt; 로 지정할 수 있습니다 . function / 1 옵션 &lt;code&gt;sni_fun&lt;/code&gt; 및 &lt;code&gt;sni_hosts&lt;/code&gt; 는 상호 배타적입니다.</target>
        </trans-unit>
        <trans-unit id="37d0a58e6098abfba1624874ecb647d5100c0c46" translate="yes" xml:space="preserve">
          <source>If the size of the files is decreased, the change immediately affects the current log. It does not change the size of log files already full until the next time they are used.</source>
          <target state="translated">파일 크기가 줄어들면 변경 내용이 현재 로그에 즉시 영향을줍니다. 다음에 사용할 때까지 이미 가득 찬 로그 파일의 크기는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48531719e2548f233ac5471f827038efdab7d452" translate="yes" xml:space="preserve">
          <source>If the size of the live data in the process is less than the minimum heap size, the first garbage collection occurring after the process is awakened ensures that the heap size is changed to a size not smaller than the minimum heap size.</source>
          <target state="translated">프로세스의 라이브 데이터 크기가 최소 힙 크기보다 작은 경우 프로세스가 깨어 난 후 발생하는 첫 번째 가비지 콜렉션은 힙 크기가 최소 힙 크기보다 작지 않은 크기로 변경되도록합니다.</target>
        </trans-unit>
        <trans-unit id="55a92bc9b80ccffb05ef0f4d2b0d2c00367ee298" translate="yes" xml:space="preserve">
          <source>If the skipped test case belongs to a test case group, the first argument is a tuple &lt;code&gt;{FuncName,GroupName}&lt;/code&gt;, otherwise only the function name.</source>
          <target state="translated">건너 뛴 테스트 케이스가 테스트 케이스 그룹에 속하는 경우 첫 번째 인수는 튜플 &lt;code&gt;{FuncName,GroupName}&lt;/code&gt; 이고 그렇지 않은 경우 함수 이름입니다.</target>
        </trans-unit>
        <trans-unit id="a70f753063df0478c5593d2eec5283aea16d43ef" translate="yes" xml:space="preserve">
          <source>If the snmp agent is configured as a distributed Erlang application, it will during takeover try to load the same MIBs that were loaded at the old node. It uses the same filenames as the old node. If the MIBs are not located in the same paths at the different nodes, the MIBs must be loaded explicitly after takeover.</source>
          <target state="translated">snmp 에이전트가 분산 Erlang 애플리케이션으로 구성된 경우 인계 중에 이전 노드에로드 된 동일한 MIB를로드하려고 시도합니다. 이전 노드와 동일한 파일 이름을 사용합니다. MIB가 다른 노드의 동일한 경로에 있지 않은 경우 MIB는 인계 후에 명시 적으로로드되어야합니다.</target>
        </trans-unit>
        <trans-unit id="512aa9feb42b459cd059aa3fe2168a1e5258567a" translate="yes" xml:space="preserve">
          <source>If the socket is a listen socket, we use a separate (regular) file for two purposes:</source>
          <target state="translated">소켓이 청취 소켓 인 경우 두 가지 목적을 위해 별도의 (일반) 파일을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="fc7067034e5330d9330814dab9d3d85a46c9af7c" translate="yes" xml:space="preserve">
          <source>If the socket is closed, the following message is delivered:</source>
          <target state="translated">소켓이 닫히면 다음 메시지가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="c734cf077ea6e84216c28020bf0dfe0c224786a4" translate="yes" xml:space="preserve">
          <source>If the socket is in &lt;code&gt;{active, N}&lt;/code&gt; mode (see &lt;code&gt;&lt;a href=&quot;inet#setopts-2&quot;&gt;inet:setopts/2&lt;/a&gt;&lt;/code&gt; for details) and its message counter drops to &lt;code&gt;0&lt;/code&gt;, the following message is delivered to indicate that the socket has transitioned to passive (&lt;code&gt;{active, false}&lt;/code&gt;) mode:</source>
          <target state="translated">소켓이 &lt;code&gt;{active, N}&lt;/code&gt; 모드에 있고 (자세한 내용은 &lt;code&gt;&lt;a href=&quot;inet#setopts-2&quot;&gt;inet:setopts/2&lt;/a&gt;&lt;/code&gt; 참조) 메시지 카운터가 &lt;code&gt;0&lt;/code&gt; 으로 떨어지면 소켓이 수동 ( &lt;code&gt;{active, false}&lt;/code&gt; )으로 전환되었음을 나타내는 다음 메시지가 전달됩니다. 방법:</target>
        </trans-unit>
        <trans-unit id="bb22ea2f6ffe71f664a8e18b7f47a0d62e0aa24d" translate="yes" xml:space="preserve">
          <source>If the socket is in a busy state, the socket is set in a not busy state when the amount of data queued internally by the ERTS socket implementation falls below this limit. Defaults to 4 kB.</source>
          <target state="translated">소켓이 사용 중 상태 인 경우, ERTS 소켓 구현에 의해 내부적으로 대기중인 데이터의 양이이 한계 아래로 떨어지면 소켓이 사용 중이 아닌 상태로 설정됩니다. 기본값은 4kB입니다.</target>
        </trans-unit>
        <trans-unit id="0860cb89a1cd48e8809f57a8b0f0cb44187efe24" translate="yes" xml:space="preserve">
          <source>If the socket is not in an active mode, data can be retrieved through the &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2,3&lt;/a&gt;&lt;/code&gt; calls. Notice that arriving UDP packets that are longer than the receive buffer option specifies can be truncated without warning.</source>
          <target state="translated">소켓이 활성 모드가 아닌 경우 &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2,3&lt;/a&gt;&lt;/code&gt; 호출을 통해 데이터를 검색 할 수 있습니다 . 수신 버퍼 옵션이 지정한 것보다 긴 도착 UDP 패킷은 경고없이 잘릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="886690ee1274e874585cd62a60964392f36c218d" translate="yes" xml:space="preserve">
          <source>If the socket is set in active mode, this function will transfer any messages in the mailbox of the caller to the new controlling process. If any other process is interacting with the socket while the transfer is happening, the transfer may not work correctly and messages may remain in the caller's mailbox. For instance changing the sockets active mode before the transfere is complete may cause this.</source>
          <target state="translated">소켓이 활성 모드로 설정된 경우이 기능은 발신자의 사서함에있는 모든 메시지를 새로운 제어 프로세스로 전송합니다. 전송이 진행되는 동안 다른 프로세스가 소켓과 상호 작용하는 경우 전송이 올바르게 작동하지 않고 메시지가 발신자의 사서함에 남아있을 수 있습니다. 예를 들어, 전송이 완료되기 전에 소켓 활성 모드를 변경하면이 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ef7d7003c6284dd13030d6ae0c0a5544dc8ae67" translate="yes" xml:space="preserve">
          <source>If the socket message queue is in a busy state, the socket message queue is set in a not busy state when the amount of data queued in the message queue falls below this limit. Notice that this limit only concerns data that has not yet reached the ERTS internal socket implementation. Defaults to 4 kB.</source>
          <target state="translated">소켓 메시지 큐가 사용 중 상태 인 경우, 메시지 큐에 대기중인 데이터의 양이이 한계 아래로 떨어지면 소켓 메시지 큐가 사용 중이 아닌 상태로 설정됩니다. 이 한계는 아직 ERTS 내부 소켓 구현에 도달하지 않은 데이터에만 적용됩니다. 기본값은 4kB입니다.</target>
        </trans-unit>
        <trans-unit id="0489cec8cde9abcfab25b3cd056616ee2153c497" translate="yes" xml:space="preserve">
          <source>If the source file and/or the output file cannot be opened using &lt;code&gt;file:open/2&lt;/code&gt;, the function returns &lt;code&gt;{error,{file,File,Reason}}&lt;/code&gt; where &lt;code&gt;File&lt;/code&gt; is the file name and &lt;code&gt;Reason&lt;/code&gt; is the error reason.</source>
          <target state="translated">&lt;code&gt;file:open/2&lt;/code&gt; 를 사용하여 소스 파일 및 / 또는 출력 파일을 열 수없는 경우 , 함수는 &lt;code&gt;{error,{file,File,Reason}}&lt;/code&gt; 을 리턴합니다. 여기서 &lt;code&gt;File&lt;/code&gt; 은 파일 이름이고 &lt;code&gt;Reason&lt;/code&gt; 은 오류 이유입니다.</target>
        </trans-unit>
        <trans-unit id="d585722d9492cc72567d38442d77e34fd8ab9264" translate="yes" xml:space="preserve">
          <source>If the special process is set to trap exits and if the parent process terminates, the expected behavior is to terminate with the same reason:</source>
          <target state="translated">특수 프로세스가 종료를 트랩하도록 설정되고 상위 프로세스가 종료되는 경우 동일한 동작으로 예상되는 동작입니다.</target>
        </trans-unit>
        <trans-unit id="7455375f6d9089c7881123f4a8458dbe542389f7" translate="yes" xml:space="preserve">
          <source>If the specified &lt;code&gt;SessionId&lt;/code&gt; is equal to the current session Id, an error is returned.</source>
          <target state="translated">지정된 &lt;code&gt;SessionId&lt;/code&gt; 가 현재 세션 ID와 같으면 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d619307390edd39ec2b02ca669e7b364961dec45" translate="yes" xml:space="preserve">
          <source>If the specified allocator types are not enabled, the call will fail with &lt;code&gt;{error, not_enabled}&lt;/code&gt;.</source>
          <target state="translated">지정된 할당 자 유형을 사용하지 않으면 &lt;code&gt;{error, not_enabled}&lt;/code&gt; 호출이 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="45c304ea9f8890bedad2957ce64c3d9052640688" translate="yes" xml:space="preserve">
          <source>If the specified application is not loaded, or if the process executing the call does not belong to any application, the function returns &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">지정된 응용 프로그램이로드되지 않았거나 호출을 실행하는 프로세스가 응용 프로그램에 속하지 않으면이 함수는 &lt;code&gt;[]&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="661935b4fcb704bdedb21cd7cd8d1037467c6a3a" translate="yes" xml:space="preserve">
          <source>If the specified application is not loaded, the function returns &lt;code&gt;undefined&lt;/code&gt;. If the process executing the call does not belong to any application, the function returns &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">지정된 애플리케이션이로드 &lt;code&gt;undefined&lt;/code&gt; 경우 함수는 undefined를 리턴합니다 . 호출을 실행하는 프로세스가 응용 프로그램에 속하지 않으면 함수는 &lt;code&gt;[]&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a926434bb6d9a3523835439ccc5767bd6572dff3" translate="yes" xml:space="preserve">
          <source>If the specified process does not belong to any application, or if the specified process or module does not exist, the function returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">지정된 프로세스가 애플리케이션에 속하지 않거나 지정된 프로세스 또는 모듈이 존재하지 않으면 함수는 &lt;code&gt;undefined&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2b16c97bb4dc09a19744a2eb9750dd2d9bb5ce54" translate="yes" xml:space="preserve">
          <source>If the startup procedure fails, the function &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; returns the cryptic tuple &lt;code&gt;{error,{shutdown, {mnesia_sup,start_link,[normal,[]]}}}&lt;/code&gt;. To get more information about the start failure, use command-line arguments &lt;code&gt;-boot start_sasl&lt;/code&gt; as argument to the &lt;code&gt;erl&lt;/code&gt; script.</source>
          <target state="translated">시작 절차가 실패하면 &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; 함수는 암호화 튜플 &lt;code&gt;{error,{shutdown, {mnesia_sup,start_link,[normal,[]]}}}&lt;/code&gt; 반환합니다 . 시작 실패에 대한 자세한 정보를 얻으려면 명령 행 인수 &lt;code&gt;-boot start_sasl&lt;/code&gt; 을 &lt;code&gt;erl&lt;/code&gt; 스크립트의 인수로 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0cbaf50d401e5c21095fb8f1fd28f9a45786128e" translate="yes" xml:space="preserve">
          <source>If the state changes, the queue of incoming events is reset to start with the oldest postponed.</source>
          <target state="translated">상태가 변경되면 들어오는 이벤트 큐가 가장 오래된 연기로 시작되도록 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="36cb412738e6e082151303db455deefb75f1506a" translate="yes" xml:space="preserve">
          <source>If the status was &lt;code&gt;ok&lt;/code&gt; or &lt;code&gt;ok_simultaneous&lt;/code&gt;, the handshake continues with &lt;code&gt;B&lt;/code&gt; sending &lt;code&gt;A&lt;/code&gt; another message, the challenge. The challenge contains the same type of information as the &quot;name&quot; message initially sent from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, plus a 32-bit challenge:</source>
          <target state="translated">상태가 &lt;code&gt;ok&lt;/code&gt; 또는 &lt;code&gt;ok_simultaneous&lt;/code&gt; 인 경우 핸드 셰이크는 &lt;code&gt;B&lt;/code&gt; 에게 &lt;code&gt;A&lt;/code&gt; 에게 다른 메시지 (도전)를 보내 면서 계속됩니다 . 이 챌린지는 처음에 &lt;code&gt;A&lt;/code&gt; 에서 &lt;code&gt;B&lt;/code&gt; 로 전송 된 &quot;name&quot;메시지와 동일한 유형의 정보와 32 비트 챌린지를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="beeeb7c98813879b37a7bf671f3521d70f7d4fcc" translate="yes" xml:space="preserve">
          <source>If the storage type of the schema is &lt;code&gt;ram_copies&lt;/code&gt;, that is, a disc-less node, &lt;code&gt;Mnesia&lt;/code&gt; does not use the disc on that particular node. The disc use is enabled by changing the storage type of table &lt;code&gt;schema&lt;/code&gt; to &lt;code&gt;disc_copies&lt;/code&gt;.</source>
          <target state="translated">스키마의 스토리지 유형이 &lt;code&gt;ram_copies&lt;/code&gt; 즉, 디스크가없는 노드 인 경우 &lt;code&gt;Mnesia&lt;/code&gt; 는 해당 특정 노드에서 디스크를 사용하지 않습니다. 디스크 사용은 테이블 &lt;code&gt;schema&lt;/code&gt; 의 스토리지 유형 을 &lt;code&gt;disc_copies&lt;/code&gt; 로 변경하여 사용 가능 합니다 .</target>
        </trans-unit>
        <trans-unit id="72c9602796f4ff2e2861a3fe314dbf863ef6f3fa" translate="yes" xml:space="preserve">
          <source>If the structured type has a component with an embedded &lt;code&gt;SEQUENCE OF&lt;/code&gt;/&lt;code&gt;SET OF&lt;/code&gt; which embedded type in turn is a &lt;code&gt;SEQUENCE&lt;/code&gt;/&lt;code&gt;SET&lt;/code&gt;, it gives a record with the &lt;code&gt;SEQUENCE OF&lt;/code&gt;/&lt;code&gt;SET OF&lt;/code&gt; addition as in the following example:</source>
          <target state="translated">구조화 된 유형에 임베디드 유형이 차례로 &lt;code&gt;SEQUENCE&lt;/code&gt; / &lt;code&gt;SET&lt;/code&gt; 인 &lt;code&gt;SEQUENCE OF&lt;/code&gt; / &lt;code&gt;SET OF&lt;/code&gt; 가 포함 된 컴포넌트가있는 경우 다음 예제 와 같이 &lt;code&gt;SEQUENCE OF&lt;/code&gt; / &lt;code&gt;SET OF&lt;/code&gt; 가 추가 된 레코드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="3f062c1144e1678c566106b319cf580ce31c88b8" translate="yes" xml:space="preserve">
          <source>If the style sheet is installed as in this example, the categories are private to the suite in question. They can be used by all test cases in the suite, but cannot be used by other suites. A suite private style sheet, if specified, is used in favor of a global style sheet (one specified with flag &lt;code&gt;-stylesheet&lt;/code&gt;). A stylesheet tuple (as returned by &lt;code&gt;suite/0&lt;/code&gt; above) can also be returned from a test case information function. In this case the categories specified in the style sheet can only be used in that particular test case. A test case private style sheet is used in favor of a suite or global level style sheet.</source>
          <target state="translated">이 예제에서와 같이 스타일 시트가 설치된 경우 카테고리는 해당 스위트 전용입니다. 스위트의 모든 테스트 케이스에서 사용할 수 있지만 다른 스위트에서는 사용할 수 없습니다. 지정된 경우 스위트 전용 스타일 시트는 글로벌 스타일 시트 (flag &lt;code&gt;-stylesheet&lt;/code&gt; 로 지정된 )를 위해 사용됩니다. 스타일 시트 튜플 ( 위의 &lt;code&gt;suite/0&lt;/code&gt; 에 의해 리턴 된)은 테스트 케이스 정보 함수에서 리턴 될 수도 있습니다. 이 경우 스타일 시트에 지정된 카테고리는 해당 특정 테스트 케이스에서만 사용할 수 있습니다. 테스트 케이스 전용 스타일 시트는 스위트 또는 글로벌 레벨 스타일 시트를 위해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5ef2b08f553195b967c4c1ec0d687b8410583635" translate="yes" xml:space="preserve">
          <source>If the subject is &quot;aaaac...&quot;, after the first match attempt fails (starting at the first character in the string), the starting point skips on to start the next attempt at &quot;c&quot;. Notice that a possessive quantifier does not have the same effect as this example; although it would suppress backtracking during the first match attempt, the second attempt would start at the second character instead of skipping on to &quot;c&quot;.</source>
          <target state="translated">제목이 &quot;aaaac ...&quot;인 경우 첫 번째 일치 시도가 실패한 후 (문자열의 첫 번째 문자에서 시작) 시작점은 &quot;c&quot;에서 다음 시도를 시작하기 위해 건너 뜁니다. 소유 수량 화기는이 예제와 동일한 효과를 갖지 않습니다. 첫 번째 일치 시도 중에 역 추적을 억제하지만 두 번째 시도는 &quot;c&quot;로 건너 뛰지 않고 두 번째 문자에서 시작합니다.</target>
        </trans-unit>
        <trans-unit id="325365b23f57e117a3a5f1be4ba75e874fad7352" translate="yes" xml:space="preserve">
          <source>If the subject is &quot;abac&quot;, Perl matches, but PCRE fails because the (*COMMIT) in the second repeat of the group acts.</source>
          <target state="translated">주제가 &quot;abac&quot;인 경우 Perl은 일치하지만 그룹의 두 번째 반복에서 (* COMMIT)이 작동하므로 PCRE가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="2a1b1d46006ae1cc02a5125b44f3a589d400f8b8" translate="yes" xml:space="preserve">
          <source>If the subject is &quot;ba&quot;, this pattern does not match. As .*? is ungreedy, it initially matches zero characters. The condition (?=a) then fails, the character &quot;b&quot; is matched, but &quot;c&quot; is not. At this point, matching does not backtrack to .*? as can perhaps be expected from the presence of the | character. The conditional subpattern is part of the single alternative that comprises the whole pattern, and so the match fails. (If there was a backtrack into .*?, allowing it to match &quot;b&quot;, the match would succeed.)</source>
          <target state="translated">피사체가 &quot;ba&quot;인 경우이 패턴이 일치하지 않습니다. 같이 .*? 이해가 안되며 처음에는 0 문자와 일치합니다. 그런 다음 조건 (? = a)이 실패하고 문자 &quot;b&quot;는 일치하지만 &quot;c&quot;는 일치하지 않습니다. 이 시점에서 일치는. *로 역 추적하지 않습니까? 의 존재에서 예상 할 수있는 | 캐릭터. 조건부 하위 패턴은 전체 패턴을 구성하는 단일 대안의 일부이므로 일치하지 않습니다. (. *?에 역 추적이있어 &quot;b&quot;와 일치하게되면 일치합니다.)</target>
        </trans-unit>
        <trans-unit id="61ab084c99ad2f6aacca28fcd587b3400e6c929a" translate="yes" xml:space="preserve">
          <source>If the subject is &quot;xyz123abc123&quot;, the match point is the fourth character. Therefore, such a pattern is not implicitly anchored.</source>
          <target state="translated">제목이 &quot;xyz123abc123&quot;인 경우 일치점은 네 번째 문자입니다. 따라서 이러한 패턴은 암시 적으로 고정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f58702e52fe311a5928a0c529284a25593f9a63b" translate="yes" xml:space="preserve">
          <source>If the subsystems option is not present, the value of &lt;code&gt;ssh_sftpd:subsystem_spec([])&lt;/code&gt; is used. This enables the sftp subsystem by default. The option can be set to the empty list if you do not want the daemon to run any subsystems.</source>
          <target state="translated">서브 시스템 옵션이 없으면 &lt;code&gt;ssh_sftpd:subsystem_spec([])&lt;/code&gt; 이 사용됩니다. 이것은 기본적으로 sftp 서브 시스템을 사용 가능하게합니다. 데몬이 서브 시스템을 실행하지 못하게하려면 옵션을 빈 목록으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="56f01b4c736d33d8a8e4b807a7321e237504b729" translate="yes" xml:space="preserve">
          <source>If the supervisor and its child processes are successfully created (that is, if all child process start functions return &lt;code&gt;{ok,Child}&lt;/code&gt;, &lt;code&gt;{ok,Child,Info}&lt;/code&gt;, or &lt;code&gt;ignore&lt;/code&gt;), the function returns &lt;code&gt;{ok,Pid}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the supervisor.</source>
          <target state="translated">수퍼바이저와 해당 하위 프로세스가 성공적으로 작성되면 (즉, 모든 하위 프로세스 시작 함수가 &lt;code&gt;{ok,Child}&lt;/code&gt; , &lt;code&gt;{ok,Child,Info}&lt;/code&gt; 를 리턴 하거나 &lt;code&gt;ignore&lt;/code&gt; ) 함수는 &lt;code&gt;{ok,Pid}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 감독자의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="ce27df4e7a72330922127644fc5b4154720386f2" translate="yes" xml:space="preserve">
          <source>If the supervisor bridge and the subsystem are successfully started, the function returns &lt;code&gt;{ok,Pid}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is is the pid of the supervisor bridge.</source>
          <target state="translated">수퍼바이저 브릿지와 서브 시스템이 성공적으로 시작되면이 함수는 &lt;code&gt;{ok,Pid}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 수퍼바이저 브릿지의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="ee5bca92e596da338cae7a1a6835c08aaca7ab2c" translate="yes" xml:space="preserve">
          <source>If the supervisor is &lt;code&gt;simple_one_for_one&lt;/code&gt;, &lt;code&gt;Id&lt;/code&gt; must be the &lt;code&gt;pid()&lt;/code&gt; of the child process. If the specified process is alive, but is not a child of the specified supervisor, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;. If the child specification identifier is specified instead of a &lt;code&gt;pid()&lt;/code&gt;, the function returns &lt;code&gt;{error,simple_one_for_one}&lt;/code&gt;.</source>
          <target state="translated">수퍼바이저가 &lt;code&gt;simple_one_for_one&lt;/code&gt; 인 경우 &lt;code&gt;Id&lt;/code&gt; 는 하위 프로세스 의 &lt;code&gt;pid()&lt;/code&gt; 여야합니다 . 지정된 프로세스가 활성 상태이지만 지정된 수퍼바이저의 자식이 아닌 &lt;code&gt;{error,not_found}&lt;/code&gt; 함수는 {error, not_found}를 반환합니다 . 자식 스펙 식별자가 &lt;code&gt;pid()&lt;/code&gt; 대신 지정된 경우, 함수는 &lt;code&gt;{error,simple_one_for_one}&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="fde2c4d92373b2df91d47d89bec456be3c098325" translate="yes" xml:space="preserve">
          <source>If the supervisor is not &lt;code&gt;simple_one_for_one&lt;/code&gt;, &lt;code&gt;Id&lt;/code&gt; must be the child specification identifier. The process, if any, is terminated and, unless it is a temporary child, the child specification is kept by the supervisor. The child process can later be restarted by the supervisor. The child process can also be restarted explicitly by calling &lt;code&gt;&lt;a href=&quot;#restart_child-2&quot;&gt;restart_child/2&lt;/a&gt;&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#delete_child-2&quot;&gt;delete_child/2&lt;/a&gt;&lt;/code&gt; to remove the child specification.</source>
          <target state="translated">수퍼바이저가되지 않으면 &lt;code&gt;simple_one_for_one&lt;/code&gt; , &lt;code&gt;Id&lt;/code&gt; 자식 사양 식별자 여야합니다. 프로세스가있는 경우 프로세스가 종료되며 임시 하위가 아닌 경우 하위 스펙은 감독자가 유지합니다. 하위 프로세스는 나중에 관리자가 다시 시작할 수 있습니다. 자식 프로세스는 &lt;code&gt;&lt;a href=&quot;#restart_child-2&quot;&gt;restart_child/2&lt;/a&gt;&lt;/code&gt; 를 호출하여 명시 적으로 다시 시작할 수도 있습니다 . 하위 스펙을 제거 하려면 &lt;code&gt;&lt;a href=&quot;#delete_child-2&quot;&gt;delete_child/2&lt;/a&gt;&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="22f9e859ab134b7ee555cf61c0b88a7c31c26892" translate="yes" xml:space="preserve">
          <source>If the supervisor is not running, the function fails with the reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">수퍼바이저가 실행 중이 &lt;code&gt;badarg&lt;/code&gt; 이유와 함께 함수가 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="5f1a06a02433874f4dbf2fb6692571bffc468e3a" translate="yes" xml:space="preserve">
          <source>If the suspend count on the process identified by &lt;code&gt;Suspendee&lt;/code&gt; is increased, &lt;code&gt;true&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; 가 식별 한 프로세스의 일시 중단 횟수 가 증가하면 &lt;code&gt;true&lt;/code&gt; 가 반환되고, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 가 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="2d5607c3dc66f8ee4fed4118cbb2c89a903f53e7" translate="yes" xml:space="preserve">
          <source>If the syntax for a recursive subpattern call (either by number or by name) is used outside the parentheses to which it refers, it operates like a subroutine in a programming language. The called subpattern can be defined before or after the reference. A numbered reference can be absolute or relative, as in the following examples:</source>
          <target state="translated">재귀 적 서브 패턴 호출 (번호 또는 이름)이 구문을 참조하는 괄호 밖에서 사용되는 경우 프로그래밍 언어의 서브 루틴처럼 작동합니다. 호출 된 서브 패턴은 참조 전후에 정의 될 수 있습니다. 다음 예와 같이 번호가 매겨진 참조는 절대적이거나 상대적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c95678de3724de5573a03d131e0386d7f73cde7" translate="yes" xml:space="preserve">
          <source>If the system consists of several Erlang nodes, each node can use its own version of the release. The release handler is a locally registered process and must be called at each node where an upgrade or downgrade is required. A release handling instruction, &lt;code&gt;sync_nodes&lt;/code&gt;, can be used to synchronize the release handler processes at a number of nodes, see the &lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="translated">시스템이 여러 Erlang 노드로 구성된 경우 각 노드는 고유 한 버전의 릴리스를 사용할 수 있습니다. 릴리스 핸들러는 로컬로 등록 된 프로세스이며 업그레이드 또는 다운 그레이드가 필요한 각 노드에서 호출해야합니다. 릴리스 처리 명령 &lt;code&gt;sync_nodes&lt;/code&gt; 를 사용하여 여러 노드에서 릴리스 핸들러 프로세스를 동기화 할 수 있습니다 . SASL 의 &lt;code&gt;appup(4)&lt;/code&gt; 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5a9dfa8802f7c28fb7268599a87d430596fb7e4c" translate="yes" xml:space="preserve">
          <source>If the system is halted by the BIF &lt;code&gt;erlang:halt/1&lt;/code&gt;, the slogan is the string parameter passed to the BIF, otherwise it is a description generated by the emulator or the (Erlang) kernel. Normally the message is enough to understand the problem, but some messages are described here. Notice that the suggested reasons for the crash are &lt;strong&gt;only suggestions&lt;/strong&gt;. The exact reasons for the errors can vary depending on the local applications and the underlying operating system.</source>
          <target state="translated">시스템이 BIF &lt;code&gt;erlang:halt/1&lt;/code&gt; 에 의해 정지 된 경우 슬로건은 BIF에 전달 된 문자열 매개 변수이며, 그렇지 않으면 에뮬레이터 또는 (Erlang) 커널에 의해 생성 된 설명입니다. 일반적으로 메시지는 문제를 이해하기에 충분하지만 여기에 일부 메시지가 설명되어 있습니다. 충돌에 대한 제안 된 이유는 &lt;strong&gt;단지 제안 일뿐&lt;/strong&gt; 입니다. 오류의 정확한 이유는 로컬 응용 프로그램 및 기본 운영 체제에 따라 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a757ef96ac1cd490bb1c008318b2e3635c8724c" translate="yes" xml:space="preserve">
          <source>If the system is to be rebooted because of missing heartbeats, or a terminated Erlang runtime system, environment variable &lt;code&gt;HEART_COMMAND&lt;/code&gt; must be set before the system is started. If this variable is not set, a warning text is printed but the system does not reboot.</source>
          <target state="translated">누락 된 하트 비트 또는 종료 된 Erlang 런타임 시스템으로 인해 시스템을 재부팅 하려면 시스템을 시작하기 전에 환경 변수 &lt;code&gt;HEART_COMMAND&lt;/code&gt; 를 설정해야합니다. 이 변수를 설정하지 않으면 경고 텍스트가 인쇄되지만 시스템은 재부팅되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7201254cce87e2757d3c2088109f6b9433e91391" translate="yes" xml:space="preserve">
          <source>If the system upgrade fails, &lt;code&gt;Mnesia&lt;/code&gt; must be restarted on all &lt;code&gt;db_nodes&lt;/code&gt; to restore the old database. The fallback is automatically deinstalled after a successful startup. The function &lt;code&gt;&lt;a href=&quot;mnesia#uninstall_fallback-0&quot;&gt;mnesia:uninstall_fallback()&lt;/a&gt;&lt;/code&gt; can also be used to deinstall the fallback after a successful system upgrade. Again, this is a distributed operation that is either performed on all &lt;code&gt;db_nodes&lt;/code&gt; or none. Both the installation and deinstallation of fallbacks require Erlang to be operational on all &lt;code&gt;db_nodes&lt;/code&gt;, but it does not matter if &lt;code&gt;Mnesia&lt;/code&gt; is running or not.</source>
          <target state="translated">시스템 업그레이드가 실패 할 경우, &lt;code&gt;Mnesia&lt;/code&gt; 는 모든에 다시 시작해야합니다 &lt;code&gt;db_nodes&lt;/code&gt; 이전 데이터베이스를 복원 할 수 있습니다. 폴백은 성공적인 시작 후 자동으로 설치 제거됩니다. &lt;code&gt;&lt;a href=&quot;mnesia#uninstall_fallback-0&quot;&gt;mnesia:uninstall_fallback()&lt;/a&gt;&lt;/code&gt; 함수를 사용하여 시스템 업그레이드에 성공한 후 폴백을 제거 할 수도 있습니다. 다시, 이것은 모든 &lt;code&gt;db_nodes&lt;/code&gt; 에서 수행 되거나 전혀 수행 되지 않는 분산 작업입니다 . 폴백 설치 및 제거 모두 Erlang이 모든 &lt;code&gt;db_nodes&lt;/code&gt; 에서 작동해야 하지만 &lt;code&gt;Mnesia&lt;/code&gt; 가 실행 중인지 여부 는 중요 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="820e07b72de8d7275e79b190e2ecc622e6ffa577" translate="yes" xml:space="preserve">
          <source>If the system uses release handling, this is to be set to a program similar to &lt;code&gt;start_erl.exe&lt;/code&gt;.</source>
          <target state="translated">시스템이 릴리스 처리를 사용하는 경우 &lt;code&gt;start_erl.exe&lt;/code&gt; 와 유사한 프로그램으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b0d7a8bf37699409a1736ff33b25beed75456c38" translate="yes" xml:space="preserve">
          <source>If the table has been fixed using &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt;safe_fixtable/2&lt;/a&gt;&lt;/code&gt;, the call returns a tuple where &lt;code&gt;FixationTime&lt;/code&gt; is the time when the table was first fixed by a process, which either is or is not one of the processes it is fixed by now.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt;safe_fixtable/2&lt;/a&gt;&lt;/code&gt; 를 사용하여 테이블을 수정 한 경우, 호출은 테이블이 프로세스에 의해 처음 수정 된 시간 인 &lt;code&gt;FixationTime&lt;/code&gt; 이며 현재 수정 된 프로세스 중 하나이거나 그렇지 않은 튜플을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="510048f902d277dbbdb552040e33a360934aad3f" translate="yes" xml:space="preserve">
          <source>If the table is a hash table, that is, if it is not an &lt;code&gt;ordered_set&lt;/code&gt;.</source>
          <target state="translated">테이블이 해시 테이블 인 경우, 즉 &lt;code&gt;ordered_set&lt;/code&gt; 이 아닌 경우 입니다.</target>
        </trans-unit>
        <trans-unit id="8586c3c8b193a91489791658c1ee464303da1bd1" translate="yes" xml:space="preserve">
          <source>If the table is a hash table. Contains statistics about the table, such as the maximum, minimum, and average chain length. Having a maximum much larger than the average, and a standard deviation much larger than the expected standard deviation is a sign that the hashing of the terms behaves badly for some reason.</source>
          <target state="translated">테이블이 해시 테이블 인 경우 최대, 최소 및 평균 체인 길이와 같은 테이블에 대한 통계를 포함합니다. 평균보다 최대 값이 훨씬 크고 표준 편차가 표준 편차보다 훨씬 크다는 것은 해싱이 어떤 이유로 든 나쁜 행동을한다는 ​​신호입니다.</target>
        </trans-unit>
        <trans-unit id="fcb4375c9095616a2c1fcb3c7937a674a11eced4" translate="yes" xml:space="preserve">
          <source>If the table is an &lt;code&gt;ordered_set&lt;/code&gt;. (The number of elements is the same as the number of objects in the table.)</source>
          <target state="translated">테이블은 경우 &lt;code&gt;ordered_set&lt;/code&gt; . (요소 수는 테이블의 개체 수와 동일합니다.)</target>
        </trans-unit>
        <trans-unit id="fe825b9dd24dc79930168b7d8e9410fc4ed428ff" translate="yes" xml:space="preserve">
          <source>If the table is deleted, the &lt;code&gt;tid()&lt;/code&gt; will be invalid even if another named table is created with the same name.</source>
          <target state="translated">테이블이 삭제되면 동일한 이름을 가진 다른 명명 된 테이블을 생성하더라도 &lt;code&gt;tid()&lt;/code&gt; 는 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8e50f5b3f9353a3565bdface1fd102e6a022cef3" translate="yes" xml:space="preserve">
          <source>If the table is empty, &lt;code&gt;'$end_of_table'&lt;/code&gt; is returned.</source>
          <target state="translated">테이블이 비어 있으면 &lt;code&gt;'$end_of_table'&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a3adb98d90a256345bb402384863d0ffa16d7d03" translate="yes" xml:space="preserve">
          <source>If the table is fixed using &lt;code&gt;ets:safe_fixtable/2&lt;/code&gt; or some internal mechanism.</source>
          <target state="translated">&lt;code&gt;ets:safe_fixtable/2&lt;/code&gt; 또는 일부 내부 메커니즘을 사용하여 테이블을 수정 한 경우</target>
        </trans-unit>
        <trans-unit id="a5a1ad070d201f061059ad07a51c09a4b677d0c7" translate="yes" xml:space="preserve">
          <source>If the table never has been fixed, the call returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">테이블이 수정되지 않은 경우 호출은 &lt;code&gt;false&lt;/code&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="1106f60b23247fd532e1f3435b3e146b85e02356" translate="yes" xml:space="preserve">
          <source>If the table type is &lt;code&gt;ordered_set&lt;/code&gt; and the key of the inserted object &lt;strong&gt;compares equal&lt;/strong&gt; to the key of any object in the table, the old object is replaced.</source>
          <target state="translated">테이블 유형이 &lt;code&gt;ordered_set&lt;/code&gt; 이고 삽입 된 오브젝트 의 키가 테이블에있는 오브젝트의 키와 &lt;strong&gt;동일한&lt;/strong&gt; 경우 이전 오브젝트가 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="4533fa2ede8fbfe73be80457c07b8f040691fe23" translate="yes" xml:space="preserve">
          <source>If the table type is &lt;code&gt;set&lt;/code&gt; and more than one object exists with a given key, one of the objects is chosen. This is not necessarily the last object with the given key in the sequence of objects returned by the input functions. Avoid duplicate keys, otherwise the file becomes unnecessarily fragmented. This holds also for duplicated objects stored in tables of type &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">테이블 유형이 &lt;code&gt;set&lt;/code&gt; 되고 주어진 키에 둘 이상의 오브젝트가 존재하면 오브젝트 중 하나가 선택됩니다. 입력 함수에 의해 리턴 된 오브젝트 순서에서 주어진 키를 갖는 마지막 오브젝트 일 필요는 없습니다. 중복 키를 피하십시오. 그렇지 않으면 파일이 불필요하게 조각화됩니다. 이것은 &lt;code&gt;bag&lt;/code&gt; 유형의 테이블에 저장된 복제 된 오브젝트에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="56d2753779e61ff48cb39b5aa4b2593e74eb1601" translate="yes" xml:space="preserve">
          <source>If the table type is &lt;code&gt;set&lt;/code&gt; and more than one object exists with a given key, one of the objects is chosen. This is not necessarily the last object with the given key in the sequence of objects returned by the input functions. This holds also for duplicated objects stored in tables of type &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">테이블 유형이 &lt;code&gt;set&lt;/code&gt; 되고 주어진 키에 둘 이상의 오브젝트가 존재하면 오브젝트 중 하나가 선택됩니다. 입력 함수에 의해 리턴 된 오브젝트 순서에서 주어진 키를 갖는 마지막 오브젝트 일 필요는 없습니다. 이것은 &lt;code&gt;bag&lt;/code&gt; 유형의 테이블에 저장된 복제 된 오브젝트에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="cae4c49d2565269908072cf718d1492a11aec56f" translate="yes" xml:space="preserve">
          <source>If the table type is &lt;code&gt;set&lt;/code&gt; and the key of the inserted objects &lt;strong&gt;matches&lt;/strong&gt; the key of any object in the table, the old object is replaced.</source>
          <target state="translated">테이블 유형이 &lt;code&gt;set&lt;/code&gt; 되고 삽입 된 오브젝트 의 키가 테이블에있는 오브젝트의 키 &lt;strong&gt;와 일치&lt;/strong&gt; 하면 이전 오브젝트가 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="a9fdebabfb947c83919e8f9a54708d4bc09db924" translate="yes" xml:space="preserve">
          <source>If the table type is &lt;code&gt;set&lt;/code&gt;, the function returns either the empty list or a list with one object, as there cannot be more than one object with a given key. If the table type is &lt;code&gt;bag&lt;/code&gt; or &lt;code&gt;duplicate_bag&lt;/code&gt;, the function returns a list of arbitrary length.</source>
          <target state="translated">테이블 유형이 &lt;code&gt;set&lt;/code&gt; 되면 지정된 키를 가진 오브젝트가 둘 이상있을 수 없으므로 함수는 비어있는 목록 또는 하나의 오브젝트가있는 목록을 리턴합니다. 테이블 유형이 &lt;code&gt;bag&lt;/code&gt; 또는 &lt;code&gt;duplicate_bag&lt;/code&gt; 인 경우, 함수는 임의 길이의 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="52326346a5221b9ea31e1cab3b15e1198497f8cc" translate="yes" xml:space="preserve">
          <source>If the table uses &lt;code&gt;==/2&lt;/code&gt; when comparing keys for equality, the &lt;code&gt;qlc&lt;/code&gt; module looks up the constant regardless of which operator is used in the QLC. However, &lt;code&gt;==/2&lt;/code&gt; is to be preferred:</source>
          <target state="translated">테이블 이 동등성을 비교할 때 &lt;code&gt;==/2&lt;/code&gt; 를 사용하는 경우, &lt;code&gt;qlc&lt;/code&gt; 모듈은 QLC에서 사용되는 연산자에 관계없이 상수를 찾습니다. 그러나 &lt;code&gt;==/2&lt;/code&gt; 가 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="c174173c48e462e86139389a0e63bdc440243b08" translate="yes" xml:space="preserve">
          <source>If the table was compressed.</source>
          <target state="translated">테이블이 압축 된 경우</target>
        </trans-unit>
        <trans-unit id="c18aa6aeb37dae91506c755f84a591f149b7a42e" translate="yes" xml:space="preserve">
          <source>If the target host is a &quot;special&quot; node, the FTP address must be specified in the configuration file as follows:</source>
          <target state="translated">대상 호스트가 &quot;특별한&quot;노드 인 경우 FTP 파일은 다음과 같이 구성 파일에 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="ba53604fe2dbaeba0c697aca59ebed25bdd01e29" translate="yes" xml:space="preserve">
          <source>If the target host is something else, for example, a UNIX host, the configuration file must also include the username and password (both strings):</source>
          <target state="translated">대상 호스트가 다른 호스트 (예 : UNIX 호스트) 인 경우 구성 파일에는 사용자 이름 및 비밀번호 (두 문자열 모두)도 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="df661b54e46a56f3d279f98bcc4be4b32bc0814f" translate="yes" xml:space="preserve">
          <source>If the test case function crashes or exits purposely, it is considered &lt;strong&gt;failed&lt;/strong&gt;. If it returns a value (no matter what value), it is considered successful. An exception to this rule is the return value &lt;code&gt;{skip,Reason}&lt;/code&gt;. If this tuple is returned, the test case is considered skipped and is logged as such.</source>
          <target state="translated">테스트 케이스 함수가 ​​충돌하거나 의도적으로 종료되면 &lt;strong&gt;실패한&lt;/strong&gt; 것으로 간주됩니다 . 값이 무엇이든 관계없이 값을 반환하면 성공한 것으로 간주됩니다. 이 규칙의 예외는 리턴 값 &lt;code&gt;{skip,Reason}&lt;/code&gt; 입니다. 이 튜플이 반환되면 테스트 사례는 건너 뛴 것으로 간주되어 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="4997e9150d0cf8e0e80015106a039f2b0f15d2c2" translate="yes" xml:space="preserve">
          <source>If the test case returns the tuple &lt;code&gt;{comment,Comment}&lt;/code&gt;, the case is considered successful and &lt;code&gt;Comment&lt;/code&gt; is printed in the overview log file. This is equal to calling &lt;code&gt;&lt;a href=&quot;ct#comment-1&quot;&gt;ct:comment(Comment)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">테스트 사례가 &lt;code&gt;{comment,Comment}&lt;/code&gt; 튜플을 반환하면 사례는 성공한 것으로 간주 되고 개요는 로그 파일에 &lt;code&gt;Comment&lt;/code&gt; 으로 인쇄됩니다. 이것은 &lt;code&gt;&lt;a href=&quot;ct#comment-1&quot;&gt;ct:comment(Comment)&lt;/a&gt;&lt;/code&gt; 를 호출하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="60f08b0f13ca3dba151d2fa93224be6770ab9243" translate="yes" xml:space="preserve">
          <source>If the test is started with option &lt;code&gt;create_priv_dir&lt;/code&gt; set to &lt;code&gt;manual_per_tc&lt;/code&gt;, in order for the test case to use the private directory, it must first create it by calling this function.</source>
          <target state="translated">&lt;code&gt;create_priv_dir&lt;/code&gt; 옵션 을 &lt;code&gt;manual_per_tc&lt;/code&gt; 로 설정 하여 테스트를 시작한 경우 테스트 케이스가 개인 디렉토리를 사용하려면 먼저이 함수를 호출하여 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="ff477a5e0193222aeda2ed720ed9cd26684dd49a" translate="yes" xml:space="preserve">
          <source>If the test session is instead started with a call to &lt;code&gt;ct_master:run(TestSpecName, [ct_node@host_z], [ct_node@host_x])&lt;/code&gt;, the result is that test &lt;code&gt;t1&lt;/code&gt; does not run on &lt;code&gt;ct_node@host_x&lt;/code&gt; (or any other node) while test &lt;code&gt;t3&lt;/code&gt; runs on both &lt;code&gt;ct_node@host_y&lt;/code&gt; and &lt;code&gt;ct_node@host_z&lt;/code&gt;.</source>
          <target state="translated">대신 &lt;code&gt;ct_master:run(TestSpecName, [ct_node@host_z], [ct_node@host_x])&lt;/code&gt; 호출하여 테스트 세션을 시작 하면 테스트 &lt;code&gt;t1&lt;/code&gt; 이 &lt;code&gt;ct_node@host_x&lt;/code&gt; (또는 다른 노드) 에서 실행되지 않습니다. 테스트 &lt;code&gt;t3&lt;/code&gt; 은 &lt;code&gt;ct_node@host_y&lt;/code&gt; 및 &lt;code&gt;ct_node@host_z&lt;/code&gt; 모두에서 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a10a6be714753d43b2d04e3f31a9e74da2fca330" translate="yes" xml:space="preserve">
          <source>If the text between the parentheses consists of a sequence of digits, the condition is true if a capturing subpattern of that number has previously matched. If more than one capturing subpattern with the same number exists (see section &lt;code&gt;&lt;a href=&quot;#sect12&quot;&gt;Duplicate Subpattern Numbers&lt;/a&gt;&lt;/code&gt; earlier), the condition is true if any of them have matched. An alternative notation is to precede the digits with a plus or minus sign. In this case, the subpattern number is relative rather than absolute. The most recently opened parentheses can be referenced by (?(-1), the next most recent by (?(-2), and so on. Inside loops, it can also make sense to refer to subsequent groups. The next parentheses to be opened can be referenced as (?(+1), and so on. (The value zero in any of these forms is not used; it provokes a compile-time error.)</source>
          <target state="translated">괄호 안의 텍스트가 일련의 숫자로 구성된 경우 해당 번호의 캡처 하위 패턴이 이전에 일치 한 경우 조건이 적용됩니다. 동일한 번호를 가진 캡처 서브 패턴이 둘 이상 존재하는 경우 ( 이전에 &lt;code&gt;&lt;a href=&quot;#sect12&quot;&gt;Duplicate Subpattern Numbers&lt;/a&gt;&lt;/code&gt; 서브 패턴 번호 섹션 참조 ) 조건이 일치하면 조건이 참입니다. 다른 표기법은 숫자 앞에 더하기 또는 빼기 부호를 붙이는 것입니다. 이 경우 하위 패턴 번호는 절대 값이 아니라 상대 값입니다. 가장 최근에 열린 괄호는 (? (-1), 다음으로 가장 최근의 (? (-2) 등)으로 참조 할 수 있습니다. 내부 루프에서도 후속 그룹을 참조하는 것이 좋습니다. 열림은 (? (+ 1) 등으로 참조 될 수 있습니다. (이러한 형식의 값 0은 사용되지 않으며 컴파일 타임 오류를 유발합니다.)</target>
        </trans-unit>
        <trans-unit id="6ca3d61691a2fc7b57ea4b8b07508db553495848" translate="yes" xml:space="preserve">
          <source>If the timer is of type &lt;code&gt;#megaco_incr_timer{}&lt;/code&gt;, then for each intermediate timout, the reply will be resent (this is valid until the ack is received or the timer expires).</source>
          <target state="translated">타이머가 &lt;code&gt;#megaco_incr_timer{}&lt;/code&gt; 유형 인 경우 각 중간 시간 초과에 대해 응답이 재전송됩니다 (ack가 수신되거나 타이머가 만료 될 때까지 유효 함).</target>
        </trans-unit>
        <trans-unit id="0e94483da50a1b3ed8b94f80ddcd411d6145f16b" translate="yes" xml:space="preserve">
          <source>If the trace tuple has five elements, the fifth element will be sent as the &lt;code&gt;extra&lt;/code&gt; value in the &lt;code&gt;Opts&lt;/code&gt; maps.</source>
          <target state="translated">추적 튜플에 5 개의 요소가 있으면 다섯 번째 요소가 &lt;code&gt;Opts&lt;/code&gt; 맵 에서 &lt;code&gt;extra&lt;/code&gt; 값 으로 전송됩니다 .</target>
        </trans-unit>
        <trans-unit id="1ce02e8f59bcb0c0b8b781eb7d69a7e655a35279" translate="yes" xml:space="preserve">
          <source>If the traced node is diskless, &lt;code&gt;ttb&lt;/code&gt; must be started from a trace control node with disk access, and option &lt;code&gt;file&lt;/code&gt; must be specified to function &lt;code&gt;tracer/2&lt;/code&gt; with value &lt;code&gt;{local, File}&lt;/code&gt;, for example:</source>
          <target state="translated">추적 된 노드에 디스크가없는 경우 디스크 액세스 권한이있는 추적 제어 노드에서 &lt;code&gt;ttb&lt;/code&gt; 를 시작해야하며 옵션 &lt;code&gt;file&lt;/code&gt; 은 &lt;code&gt;{local, File}&lt;/code&gt; 값으로 &lt;code&gt;tracer/2&lt;/code&gt; 기능을 수행하도록 지정해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="83ebb917b401f97bb196808428e528b58ff6d85f" translate="yes" xml:space="preserve">
          <source>If the tracing process/port dies or the tracer module returns &lt;code&gt;remove&lt;/code&gt;, the flags are silently removed.</source>
          <target state="translated">추적 프로세스 / 포트가 종료되거나 추적 프로그램 모듈이 &lt;code&gt;remove&lt;/code&gt; 를 리턴 하면 플래그가 자동으로 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="73568089bc427934a8063420408d7fe082af563e" translate="yes" xml:space="preserve">
          <source>If the tracing should continue after the function returns, for example if it is a start function that spawns processes to be profiled, you can use &lt;code&gt;fprof:apply(M, F, Args, [continue | OtherOpts])&lt;/code&gt;. The tracing has to be stopped at a suitable later time using &lt;code&gt;fprof:trace(stop)&lt;/code&gt;.</source>
          <target state="translated">함수가 리턴 된 후 추적을 계속해야하는 경우 (예 &lt;code&gt;fprof:apply(M, F, Args, [continue | OtherOpts])&lt;/code&gt; 프로파일 링 할 프로세스를 생성하는 시작 함수 인 경우) fprof : apply (M, F, Args, [continue | OtherOpts])를 사용할 수 있습니다. &lt;code&gt;fprof:trace(stop)&lt;/code&gt; 사용하여 적절한 나중에 추적을 중지해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1df5baebd9c38dac3e2f05812c6dc531db1c4b38" translate="yes" xml:space="preserve">
          <source>If the transport connection with the peer goes down after the request has been sent but before an answer has been received then an attempt is made to resend the request to an alternate peer. If no such peer is available, or if the subsequent &lt;code&gt;pick_peer/4&lt;/code&gt; callback rejects the candidates, then a &lt;code&gt;handle_error/4&lt;/code&gt; callback takes place with &lt;code&gt;Reason = failover&lt;/code&gt;. If a peer is selected then a &lt;code&gt;prepare_retransmit/3&lt;/code&gt; callback takes place, after which the semantics are the same as following an initial &lt;code&gt;prepare_request/3&lt;/code&gt; callback.</source>
          <target state="translated">요청이 전송 된 후 응답이 수신되기 전에 피어와의 전송 연결이 끊어지면 요청을 대체 피어로 다시 보내려고합니다. 그러한 피어를 사용할 수 없거나 후속 &lt;code&gt;pick_peer/4&lt;/code&gt; 콜백이 후보를 거부하면 &lt;code&gt;handle_error/4&lt;/code&gt; 콜백이 &lt;code&gt;Reason = failover&lt;/code&gt; 합니다. 피어가 선택된 경우, &lt;code&gt;prepare_retransmit/3&lt;/code&gt; 콜백이 발생하고, 그 후 시맨틱은 초기 &lt;code&gt;prepare_request/3&lt;/code&gt; 콜백 을 따르는 것과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="94a9657c264118b8bd17be6e7ec65d9a46f4bb3e" translate="yes" xml:space="preserve">
          <source>If the upgrade or downgrade fails, the application can end up in an inconsistent state.</source>
          <target state="translated">업그레이드 또는 다운 그레이드에 실패하면 응용 프로그램이 일관성이없는 상태가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcf53bce4100d9193f2229bae322274401770092" translate="yes" xml:space="preserve">
          <source>If the user for some reason wants to pass the trace token to a port, this must be done manually in the code of the port controlling process. The port controlling processes have to check the appropriate sequential trace settings (as obtained from &lt;code&gt;seq_trace:get_token/1&lt;/code&gt;) and include trace information in the message data sent to their respective ports.</source>
          <target state="translated">어떤 이유로 사용자가 추적 토큰을 포트로 전달하려면 포트 제어 프로세스 코드에서 수동으로 수행해야합니다. 포트 제어 프로세스는 &lt;code&gt;seq_trace:get_token/1&lt;/code&gt; 에서 얻은 순차 추적 설정을 확인하고 해당 포트로 전송 된 메시지 데이터에 추적 정보를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="99b23a58d8baa9de2a26d48114ccdc0aba9a7898" translate="yes" xml:space="preserve">
          <source>If the user specifies a whole directory of test suites for the test, the execution order of the suites depends on how the files are listed by the operating system, which varies between systems.</source>
          <target state="translated">사용자가 테스트를 위해 전체 테스트 스위트 디렉토리를 지정하는 경우 스위트의 실행 순서는 운영 체제별로 파일이 나열되는 방식에 따라 달라지며 시스템마다 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ec74a0aa34a3fff9b86b849a4c4f4303fc09ca09" translate="yes" xml:space="preserve">
          <source>If the user wants to run all test suites for a test object (or an OTP application) by specifying only the top directory (for example, with start flag/option &lt;code&gt;dir&lt;/code&gt;), &lt;code&gt;Common Test&lt;/code&gt; primarily looks for test suite modules in a subdirectory named &lt;code&gt;test&lt;/code&gt;. If this subdirectory does not exist, the specified top directory is assumed to be the test directory, and test suites are read from there instead.</source>
          <target state="translated">사용자가 (시작 플래그 / 옵션, 예를 들면 단지 상위 디렉토리를 지정하여 테스트 객체에 대한 모든 테스트 스위트 (또는 OTP 응용 프로그램)을 실행하고자 할 경우 &lt;code&gt;dir&lt;/code&gt; ), &lt;code&gt;Common Test&lt;/code&gt; 주로 하위 디렉토리 이름에서 테스트 스위트 모듈을 찾습니다 &lt;code&gt;test&lt;/code&gt; . 이 서브 디렉토리가 존재하지 않으면 지정된 최상위 디렉토리가 테스트 디렉토리 인 것으로 가정하고 대신 테스트 스위트를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="effd9156da460f544cefc46b3b70768d9f3c1b10" translate="yes" xml:space="preserve">
          <source>If the user wants to update the record, it is more efficient to use &lt;code&gt;write/sticky_write&lt;/code&gt; as the &lt;code&gt;LockKind&lt;/code&gt;. If majority checking is active on the table, it is checked as soon as a write lock is attempted. This can be used to end quickly if the majority condition is not met.</source>
          <target state="translated">사용자가 레코드를 업데이트하고자하는 경우, 사용하는 것이 더 효율적입니다 &lt;code&gt;write/sticky_write&lt;/code&gt; 은 AS &lt;code&gt;LockKind&lt;/code&gt; . 테이블에서 다수 점검이 활성화 된 경우 쓰기 잠금이 시도 되 자마자 점검됩니다. 대부분의 조건이 충족되지 않으면 빠르게 종료하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a0e7330d21e34b34dfa69e0d3eeb795d5ed2f32" translate="yes" xml:space="preserve">
          <source>If the user wants to view load values as percentage of machine capacity, then this way of measuring presents a problem, because the load values are not restricted to a fixed interval. In this case, the following simple mathematical transformation can produce the load value as a percentage:</source>
          <target state="translated">사용자가 부하 값을 기계 용량의 백분율로보고자하는 경우,이 측정 방법은 부하 값이 고정 된 간격으로 제한되지 않기 때문에 문제가됩니다. 이 경우 다음과 같은 간단한 수학적 변환으로 하중 값을 백분율로 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02fc968f89b25d7af28da18289c9216741ffd871" translate="yes" xml:space="preserve">
          <source>If the user's DSA, RSA or ECDSA key is protected by a passphrase, it can be supplied with thoose options.</source>
          <target state="translated">사용자의 DSA, RSA 또는 ECDSA 키가 암호 문구로 보호되는 경우 선택 옵션을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3cf4ed00376d14751e45211a8a3a5480eebc775a" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;false&lt;/code&gt; (passive mode), the process must explicitly receive incoming data by calling &lt;code&gt;&lt;a href=&quot;gen_tcp#recv-2&quot;&gt;gen_tcp:recv/2,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;gen_udp#recv-2&quot;&gt;gen_udp:recv/2,3&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;gen_sctp#recv-1&quot;&gt;gen_sctp:recv/1,2&lt;/a&gt;&lt;/code&gt; (depending on the type of socket).</source>
          <target state="translated">값이 &lt;code&gt;false&lt;/code&gt; (수동 모드) 인 경우 프로세스는 소켓의 유형에 따라 &lt;code&gt;&lt;a href=&quot;gen_tcp#recv-2&quot;&gt;gen_tcp:recv/2,3&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;gen_udp#recv-2&quot;&gt;gen_udp:recv/2,3&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;gen_sctp#recv-1&quot;&gt;gen_sctp:recv/1,2&lt;/a&gt;&lt;/code&gt; 를 호출하여 수신 데이터를 명시 적으로 수신해야합니다 . ).</target>
        </trans-unit>
        <trans-unit id="f8c0f324daf0fe9bcb732c8ba7fcf4c76dd808ad" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;false&lt;/code&gt;, Igor will read source files without passing them through the Erlang preprocessor (&lt;code&gt;epp&lt;/code&gt;), in order to avoid expansion of preprocessor directives such as &lt;code&gt;-include(...).&lt;/code&gt;, &lt;code&gt;-define(...).&lt;/code&gt; and &lt;code&gt;-ifdef(...)&lt;/code&gt;, and macro calls such as &lt;code&gt;?LINE&lt;/code&gt; and &lt;code&gt;?MY_MACRO(x, y)&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;, i.e., preprocessing is not done. (See the module &lt;code&gt;epp_dodger&lt;/code&gt; for details.)</source>
          <target state="translated">값이 &lt;code&gt;false&lt;/code&gt; 인 경우 Igor는 &lt;code&gt;-include(...).&lt;/code&gt; 와 같은 전 처리기 지시문의 확장을 피하기 위해 Erlang 전 처리기 ( &lt;code&gt;epp&lt;/code&gt; )를 통해 소스 파일을 전달하지 않고 소스 파일을 읽습니다 . , &lt;code&gt;-define(...).&lt;/code&gt; 및 &lt;code&gt;-ifdef(...)&lt;/code&gt; 와 같은 매크로 호출 &lt;code&gt;?LINE&lt;/code&gt; 와 &lt;code&gt;?MY_MACRO(x, y)&lt;/code&gt; . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다 . 즉, 전처리가 수행되지 않습니다. (자세한 내용은 &lt;code&gt;epp_dodger&lt;/code&gt; 모듈 을 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="c37d2b8a16c01a498b8f51d057c13420aaeecac6" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;once&lt;/code&gt; (&lt;code&gt;{active, once}&lt;/code&gt;), &lt;strong&gt;one&lt;/strong&gt; data message from the socket is sent to the process. To receive one more message, &lt;code&gt;setopts/2&lt;/code&gt; must be called again with option &lt;code&gt;{active, once}&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;once&lt;/code&gt; 이면 ( &lt;code&gt;{active, once}&lt;/code&gt; ) 소켓에서 &lt;strong&gt;하나의&lt;/strong&gt; 데이터 메시지가 프로세스로 전송됩니다. 하나 이상의 메시지를 수신하려면 &lt;code&gt;{active, once}&lt;/code&gt; 옵션으로 &lt;code&gt;setopts/2&lt;/code&gt; 를 다시 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0edabfc9ae44692cbce9f0269af3098b558ce7c2" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, all &lt;code&gt;-import(...)&lt;/code&gt; declarations in the original code will be expanded in the result; otherwise, as much as possible of the original import declarations will be preserved. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 원래 코드의 모든 &lt;code&gt;-import(...)&lt;/code&gt; 선언이 결과에서 확장됩니다. 그렇지 않으면 원래 수입 신고서의 최대한 많은 내용이 보존됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3ec9a61337586e188fec4ae4002aa86a696c3f2b" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, all import statements will be removed and calls to imported functions will be expanded to explicit remote calls. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 모든 가져 오기 문이 제거되고 가져온 함수에 대한 호출이 명시 적 원격 호출로 확장됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b8cea8ff6b46a563bc83a9fce55c5e6cf84c9e7" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, all information messages and warning messages will be suppressed. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 모든 정보 메시지 및 경고 메시지가 표시되지 않습니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3bccb9c8103eb8444c9724207cd93db68090eda5" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, all matches &quot;&lt;code&gt;{V1, ..., Vn} = E&lt;/code&gt;&quot; where &lt;code&gt;E&lt;/code&gt; is a case-, if- or receive-expression whose branches all return n-tuples (or explicitly throw exceptions) will be rewritten to bind and export the variables &lt;code&gt;V1&lt;/code&gt;, ..., &lt;code&gt;Vn&lt;/code&gt; directly. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 &quot; &lt;code&gt;{V1, ..., Vn} = E&lt;/code&gt; &quot; 와 일치합니다. 여기서 &lt;code&gt;E&lt;/code&gt; 는 브랜치가 모두 n- 튜플을 반환하는 (또는 명시 적으로 예외를 throw하는) 경우, if 또는 receive 표현입니다. 변수 &lt;code&gt;V1&lt;/code&gt; , ..., &lt;code&gt;Vn&lt;/code&gt; 을 직접 바인딩하고 내보내려면 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e252402ddfc7629809ad75d385749bf1c28429eb" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, all options that affect how the code is modified are set to &quot;no changes&quot;. For example, to only update guard tests, and nothing else, use the options &lt;code&gt;[new_guard_tests, idem]&lt;/code&gt;. (Recall that options closer to the beginning of the list have higher precedence.)</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 코드 수정 방법에 영향을주는 모든 옵션이 &quot;변경 사항 없음&quot;으로 설정됩니다. 예를 들어, 가드 테스트 만 업데이트하고 다른 업데이트는하지 않으려면 &lt;code&gt;[new_guard_tests, idem]&lt;/code&gt; 옵션을 사용하십시오 . (목록의 시작 부분에 가까울수록 우선 순위가 높다는 것을 기억하십시오.)</target>
        </trans-unit>
        <trans-unit id="661aadd35dfccaaf93a78302865c3cfe6ab3529d" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, calls to &lt;code&gt;lists:map/2&lt;/code&gt; and &lt;code&gt;lists:filter/2&lt;/code&gt; will be rewritten using list comprehensions. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 &lt;code&gt;lists:map/2&lt;/code&gt; 및 &lt;code&gt;lists:filter/2&lt;/code&gt; 호출 은 list comprehensions를 사용하여 다시 작성됩니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="db560d66c74e2b5edc2b415e1318b63374234171" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, existing files will be renamed before new files are opened for writing. The new names are formed by appending the string given by the &lt;code&gt;backup_suffix&lt;/code&gt; option to the original name. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 새 파일을 쓰기 전에 열기 전에 기존 파일의 이름이 바뀝니다. 새로운 이름은 &lt;code&gt;backup_suffix&lt;/code&gt; 옵션이 제공 한 문자열 을 원래 이름 에 추가하여 구성됩니다 . 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f45a2885644fae2f95e314f116a38cf230d32c75" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, guard tests will be changed to use the old names instead of the new ones, e.g. &quot;&lt;code&gt;integer(X)&lt;/code&gt;&quot; instead of &quot;&lt;code&gt;is_integer(X)&lt;/code&gt;&quot;. The default value is &lt;code&gt;false&lt;/code&gt;. This option overrides the &lt;code&gt;new_guard_tests&lt;/code&gt; option.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 가드 테스트는 새 이름 대신 이전 이름을 사용하도록 변경됩니다 &lt;code&gt;integer(X)&lt;/code&gt; 예 : &quot; &lt;code&gt;is_integer(X)&lt;/code&gt; &quot; 대신 &quot; integer (X) &quot; ) . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 이 옵션은 &lt;code&gt;new_guard_tests&lt;/code&gt; 옵션보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="fd7cd8fb5c207c507a51e1775733171389edb7af" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, guard tests will be updated to use the new names, e.g. &quot;&lt;code&gt;is_integer(X)&lt;/code&gt;&quot; instead of &quot;&lt;code&gt;integer(X)&lt;/code&gt;&quot;. The default value is &lt;code&gt;true&lt;/code&gt;. See also &lt;code&gt;old_guard_tests&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 새 &lt;code&gt;integer(X)&lt;/code&gt; 를 사용하도록 가드 테스트가 업데이트됩니다 &lt;code&gt;is_integer(X)&lt;/code&gt; 예 : &quot; integer (X) &quot; 대신 &quot; is_integer (X) &quot; ) . 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. &lt;code&gt;old_guard_tests&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3065ef5e6ab38f54db2ee2363766ab33259e9b9" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, instead of the file being written to disk it will be printed to stdout. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 파일을 디스크에 쓰는 대신 stdout으로 인쇄합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="54052ea83b3ce0b0af928cdbcc55b6fae8e4433d" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, no banner comment will be added at the top of the resulting module, even if the target module does not have the same name as any of the input modules. Instead, Igor will try to preserve the look of the module whose code is at the top of the output. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 대상 모듈의 이름이 입력 모듈과 같지 않아도 결과 모듈 상단에 배너 주석이 추가되지 않습니다. 대신 Igor는 코드가 출력의 맨 위에있는 모듈의 모양을 유지하려고합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7f87660fc4a181394247f96baa377c54c6755f37" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, no files will be modified. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 파일이 수정되지 않습니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="df3ab32bc54bd17610cc1947d346139f4464db6e" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, no files will be modified; this is typically most useful if the &lt;code&gt;verbose&lt;/code&gt; flag is enabled, to generate reports about the program files without affecting them. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 파일이 수정되지 않습니다. 이는 일반적으로 &lt;code&gt;verbose&lt;/code&gt; 플래그가 사용 가능한 경우 영향을주지 않고 프로그램 파일에 대한 보고서를 생성 하는 데 가장 유용 합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c857b2ddea91c4f1382dc10632fa790ebcc157d4" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, no header comments will be added to the resulting module at the beginning of each section of code that originates from a particular input module. The default value is &lt;code&gt;false&lt;/code&gt;, which means that section headers are normally added whenever more than two or more modules are merged.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 특정 입력 모듈에서 생성 된 각 코드 섹션 시작 부분에 결과 모듈에 헤더 주석이 추가되지 않습니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 이며, 둘 이상의 모듈이 병합 될 때마다 섹션 헤더가 일반적으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="f7502caa9d0a180e8b6ee5deb22eb2a7558a013b" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, preprocessing will be done when reading the source code. See &lt;code&gt;merge_files/4&lt;/code&gt; for details.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 소스 코드를 읽을 때 전처리가 수행됩니다. 자세한 내용은 &lt;code&gt;merge_files/4&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3ba203d3ce53c0ee7058adbf1504acdd24b9e757" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, progress messages will be output while the program is running, unless the &lt;code&gt;quiet&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 &lt;code&gt;quiet&lt;/code&gt; 옵션이 &lt;code&gt;true&lt;/code&gt; 가 아닌 한 프로그램이 실행되는 동안 진행 메시지가 출력됩니다 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="915746ee8197f7425e23cffea24b153e1f1e18c8" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, progress messages will be output while the program is running, unless the &lt;code&gt;quiet&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;. The default value when calling &lt;code&gt;&lt;a href=&quot;#dir-2&quot;&gt;dir/2&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 &lt;code&gt;quiet&lt;/code&gt; 옵션이 &lt;code&gt;true&lt;/code&gt; 가 아닌 한 프로그램이 실행되는 동안 진행 메시지가 출력됩니다 . &lt;code&gt;&lt;a href=&quot;#dir-2&quot;&gt;dir/2&lt;/a&gt;&lt;/code&gt; 를 호출 할 때의 기본값 은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b91774a83e666475650d9139217c76fff02c41ca" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, progress messages will be output while the program is running; the default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 프로그램이 실행되는 동안 진행 메시지가 출력됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="87c71038a7138f9d28b15166013d2ec5e72ecbcc" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, source code comments in the original files will be preserved in the output. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 원본 파일의 소스 코드 주석이 출력에 유지됩니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="40369b32150fd62bc05caf551bc811ec5c61e8d3" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, stub module files will be automatically generated for all exported modules that do not have the same name as the target module. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 대상 모듈과 이름이 같지 않은 내 보낸 모든 모듈에 대해 스텁 모듈 파일이 자동으로 생성됩니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1b9de1f4216e6f225a7647de788bed6302d6db97" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, subdirectories will be visited recursively. The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 서브 디렉토리가 재귀 적으로 방문됩니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8586c382194eee0170ba6e0221153350f302413e" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, symbolic directory links will be followed. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 기호 디렉토리 링크가 따라옵니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3143c0f4c2f0487a47c16bc04f718d7c6ca270ba" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, the resulting code will be processed using the &lt;code&gt;erl_tidy&lt;/code&gt; module, which removes unused functions and does general code cleanup. (See &lt;code&gt;erl_tidy:module/2&lt;/code&gt; for additional options.) The default value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 결과 코드는 &lt;code&gt;erl_tidy&lt;/code&gt; 모듈을 사용하여 처리됩니다.이 모듈은 사용되지 않는 함수를 제거하고 일반 코드 정리를 수행합니다. ( 추가 옵션 은 &lt;code&gt;erl_tidy:module/2&lt;/code&gt; 를 참조하십시오 .) 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2d698e4a7611a1338e29756a796838536c672223" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, this is equivalent to listing all of the input modules in the &lt;code&gt;export&lt;/code&gt; option. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 인 경우 이는 &lt;code&gt;export&lt;/code&gt; 옵션 에 모든 입력 모듈을 나열하는 것과 같습니다 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="365ed702372c3b3974abae9c5b1bac335c2e40e6" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, unused functions will not be removed from the code. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;true&lt;/code&gt; 이면 사용되지 않는 함수가 코드에서 제거되지 않습니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c43f17f91393f09fcaccf937fae28a97b0723f0d" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;true&lt;/code&gt;, which is the default, everything received from the socket is sent as messages to the receiving process.</source>
          <target state="translated">기본값 인 값이 &lt;code&gt;true&lt;/code&gt; 이면 소켓에서 수신 된 모든 것이 메시지로 수신 프로세스에 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="8c39732459bb5c7d2ede3da9e66866784c1270ea" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;yes&lt;/code&gt;, all file attributes &lt;code&gt;-file(...)&lt;/code&gt; in the input sources will be preserved in the resulting code. If the value is &lt;code&gt;comment&lt;/code&gt;, they will be turned into comments, but remain in their original positions in the code relative to the other source code forms. If the value is &lt;code&gt;no&lt;/code&gt;, all file attributes will be removed from the code, unless they have attached comments, in which case they will be handled as in the &lt;code&gt;comment&lt;/code&gt; case. The default value is &lt;code&gt;no&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;yes&lt;/code&gt; 이면 입력 소스의 모든 파일 속성 &lt;code&gt;-file(...)&lt;/code&gt; 이 결과 코드에 유지됩니다. 값이 &lt;code&gt;comment&lt;/code&gt; 인 경우 주석 으로 바뀌지 만 다른 소스 코드 형식과 비교하여 코드에서 원래 위치에 남아 있습니다. 값이 &lt;code&gt;no&lt;/code&gt; 이면 주석을 첨부하지 않은 경우 모든 파일 속성이 코드에서 제거되며,이 경우 &lt;code&gt;comment&lt;/code&gt; 에서와 같이 처리됩니다 . 기본값은 &lt;code&gt;no&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="adbcfdf4ba5a2347d9fb627ce201117dc5c0ef19" translate="yes" xml:space="preserve">
          <source>If the value is &lt;code&gt;yes&lt;/code&gt;, comments will be inserted where important changes have been made in the code. If the value is &lt;code&gt;always&lt;/code&gt;, &lt;strong&gt;all&lt;/strong&gt; changes to the code will be commented. If the value is &lt;code&gt;no&lt;/code&gt;, changes will be made without comments. The default value is &lt;code&gt;yes&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;yes&lt;/code&gt; 인 경우 코드에서 중요한 변경이 이루어진 곳에 주석이 삽입됩니다. 값이 &lt;code&gt;always&lt;/code&gt; 인 경우 코드에 대한 &lt;strong&gt;모든&lt;/strong&gt; 변경 사항에 주석이 달립니다. 값이 &lt;code&gt;no&lt;/code&gt; 이면 주석없이 변경됩니다. 기본값은 &lt;code&gt;yes&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1f6e4b8b19f612e8db0497538210759f4a802a7a" translate="yes" xml:space="preserve">
          <source>If the value is an integer &lt;code&gt;N&lt;/code&gt; in the range -32768 to 32767 (inclusive), the value is added to the socket's count of data messages sent to the controlling process. A socket's default message count is &lt;code&gt;0&lt;/code&gt;. If a negative value is specified, and its magnitude is equal to or greater than the socket's current message count, the socket's message count is set to &lt;code&gt;0&lt;/code&gt;. Once the socket's message count reaches &lt;code&gt;0&lt;/code&gt;, either because of sending received data messages to the process or by being explicitly set, the process is then notified by a special message, specific to the type of socket, that the socket has entered passive mode. Once the socket enters passive mode, to receive more messages &lt;code&gt;setopts/2&lt;/code&gt; must be called again to set the socket back into an active mode.</source>
          <target state="translated">값이 -32768 ~ 32767 (포함) 범위 의 정수 &lt;code&gt;N&lt;/code&gt; 인 경우 제어 프로세스로 전송 된 소켓의 데이터 메시지 수에 값이 추가됩니다. 소켓의 기본 메시지 수는 &lt;code&gt;0&lt;/code&gt; 입니다. 음수 값을 지정하고 해당 크기가 소켓의 현재 메시지 수 이상인 경우 소켓의 메시지 수는 &lt;code&gt;0&lt;/code&gt; 으로 설정됩니다 . 수신 된 메시지를 프로세스로 전송하거나 명시 적으로 설정 하여 소켓의 메시지 수가 &lt;code&gt;0&lt;/code&gt; 에 도달하면 소켓 유형에 따라 특수 메시지를 통해 프로세스에 소켓이 수동 모드로 들어갔다는 알림이 표시됩니다. 소켓이 수동 모드로 들어가면 더 많은 메시지를 수신하기 위해 &lt;code&gt;setopts/2&lt;/code&gt; 소켓을 다시 활성 모드로 설정하려면 다시 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="f27ae6e2444bd7a3381110a92ec6a09bd736a61c" translate="yes" xml:space="preserve">
          <source>If the value is unreached, the socket closes for that connection.</source>
          <target state="translated">값에 도달하지 않으면 해당 연결을 위해 소켓이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="f1873f4ce26bcbe85d55d9e02a463ab1ca24901c" translate="yes" xml:space="preserve">
          <source>If the value of option &lt;code&gt;keep_labels&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, which is the default, the &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;labels&lt;/a&gt;&lt;/code&gt; of vertices and edges of &lt;code&gt;Digraph&lt;/code&gt; are used for the subgraph as well. If the value is &lt;code&gt;false&lt;/code&gt;, default label &lt;code&gt;[]&lt;/code&gt; is used for the vertices and edges of the subgroup.</source>
          <target state="translated">옵션의 값 경우 &lt;code&gt;keep_labels&lt;/code&gt; 이 있다 &lt;code&gt;true&lt;/code&gt; 기본 인,의 &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;labels&lt;/a&gt;&lt;/code&gt; 정점과 가장자리의 &lt;code&gt;Digraph&lt;/code&gt; 뿐만 아니라 서브 그래프에 사용됩니다. 값이 &lt;code&gt;false&lt;/code&gt; 인 경우 하위 레이블 의 정점과 가장자리에 기본 레이블 &lt;code&gt;[]&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bcc67adc4c7849178ee3be6d998ddde43abc28f4" translate="yes" xml:space="preserve">
          <source>If the value of option &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;inherit&lt;/code&gt;, which is the default, the type of &lt;code&gt;Digraph&lt;/code&gt; is used for the subgraph as well. Otherwise the option value of &lt;code&gt;type&lt;/code&gt; is used as argument to &lt;code&gt;digraph:new/1&lt;/code&gt;.</source>
          <target state="translated">옵션 &lt;code&gt;type&lt;/code&gt; 의 값 이 &lt;code&gt;inherit&lt;/code&gt; 인 경우 (기본값) &lt;code&gt;Digraph&lt;/code&gt; 의 유형이 서브 그래프에도 사용됩니다. 그렇지 않으면 &lt;code&gt;type&lt;/code&gt; 의 옵션 값이 &lt;code&gt;digraph:new/1&lt;/code&gt; 의 인수로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="ba47bdc09cc087bab1feb6d4f337fa682850229e" translate="yes" xml:space="preserve">
          <source>If the values listed in &lt;code&gt;os_mon.app&lt;/code&gt; do not suit your needs, do &lt;strong&gt;not&lt;/strong&gt; edit that file. Instead &lt;strong&gt;override&lt;/strong&gt; the values in a &lt;strong&gt;system configuration file&lt;/strong&gt;, the full pathname of which is given on the command line to &lt;code&gt;erl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os_mon.app&lt;/code&gt; 에 나열된 값이 필요에 맞지 &lt;strong&gt;않으면&lt;/strong&gt; 해당 파일을 편집 하지 &lt;strong&gt;마십시오&lt;/strong&gt; . 대신 &lt;strong&gt;시스템 구성 파일&lt;/strong&gt; 의 값을 &lt;strong&gt;대체&lt;/strong&gt; 하십시오 . 전체 경로 이름은 명령 행에 &lt;code&gt;erl&lt;/code&gt; 로 지정되어 있습니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="637ddb8332f78117eadb8a8c376db3cd6652f59a" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;V&lt;/code&gt; is unbound, it becomes bound to the value associated with the key &lt;code&gt;K&lt;/code&gt;, which must exist in the map &lt;code&gt;M&lt;/code&gt;. If the variable &lt;code&gt;V&lt;/code&gt; is bound, it must match the value associated with &lt;code&gt;K&lt;/code&gt; in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">변수 경우 &lt;code&gt;V&lt;/code&gt; 가 언 바운드이며, 그것은 키와 연관된 값에 바인딩된다 &lt;code&gt;K&lt;/code&gt; 지도에 존재해야합니다, &lt;code&gt;M&lt;/code&gt; . 변수 경우 &lt;code&gt;V&lt;/code&gt; 가 결합되어, 그것과 관련된 값과 일치해야합니다 &lt;code&gt;K&lt;/code&gt; 에서 &lt;code&gt;M&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="e06ed1ef13287cb442c8f8b9883fc1684b5a4b49" translate="yes" xml:space="preserve">
          <source>If the variable is set to &lt;code&gt;0&lt;/code&gt; seconds, the runtime system does not even attempt to write the crash dump file. It only terminates. This is the default if option &lt;code&gt;-heart&lt;/code&gt; is passed to &lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; is not set.</source>
          <target state="translated">변수가 &lt;code&gt;0&lt;/code&gt; 초로 설정 되면 런타임 시스템은 크래시 덤프 파일 쓰기도 시도하지 않습니다. 종료 만됩니다. 이 옵션의 경우 기본입니다 &lt;code&gt;-heart&lt;/code&gt; 전달됩니다 &lt;code&gt;erl&lt;/code&gt; 과 &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; 가 설정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="259fac0804e610fe7290a6be7722e9d68bc70fed" translate="yes" xml:space="preserve">
          <source>If the variable is set to a positive value &lt;code&gt;S&lt;/code&gt;, wait for &lt;code&gt;S&lt;/code&gt; seconds to complete the crash dump file and then terminates the runtime system with a &lt;code&gt;SIGALRM&lt;/code&gt; signal.</source>
          <target state="translated">변수가 양의 값으로 설정되어 있으면 &lt;code&gt;S&lt;/code&gt; 에 대한 대기 &lt;code&gt;S&lt;/code&gt; 의 초 충돌 덤프 파일을 완료하고 다음으로 런타임 시스템을 종료하는 &lt;code&gt;SIGALRM&lt;/code&gt; 의 신호.</target>
        </trans-unit>
        <trans-unit id="f5ca06888e679b9ce4fb0be32462ee441fe3c9ca" translate="yes" xml:space="preserve">
          <source>If the verify callback fun always returns &lt;code&gt;{valid, UserState}&lt;/code&gt;, the TLS/DTLS handshake does not terminate regarding verification failures and the connection is established.</source>
          <target state="translated">콜백 확인 기능이 항상 &lt;code&gt;{valid, UserState}&lt;/code&gt; 반환 하면 TLS / DTLS 핸드 셰이크는 확인 실패와 관련하여 종료되지 않으며 연결이 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="719c8b9484d3005b5e9e676b6c959670afe78ad3" translate="yes" xml:space="preserve">
          <source>If the verify callback fun returns &lt;code&gt;{fail, Reason}&lt;/code&gt;, the verification process is immediately stopped, an alert is sent to the peer, and the TLS/DTLS handshake terminates.</source>
          <target state="translated">콜백 확인 기능이 &lt;code&gt;{fail, Reason}&lt;/code&gt; 반환 하면 확인 프로세스가 즉시 중지되고 경고가 피어에게 전송되고 TLS / DTLS 핸드 셰이크가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="cde2fb6c16d058822f25ed6337c5a200ce4ffc36" translate="yes" xml:space="preserve">
          <source>If the verify callback fun returns &lt;code&gt;{fail, Reason}&lt;/code&gt;, the verification process is immediately stopped. If the verify callback fun returns &lt;code&gt;{valid, UserState}&lt;/code&gt;, the verification process is continued. This can be used to accept specific path validation errors, such as &lt;code&gt;selfsigned_peer&lt;/code&gt;, as well as verifying application-specific extensions. If called with an extension unknown to the user application, the return value &lt;code&gt;{unknown, UserState}&lt;/code&gt; is to be used.</source>
          <target state="translated">콜백 확인 기능이 &lt;code&gt;{fail, Reason}&lt;/code&gt; 반환 하면 확인 프로세스가 즉시 중지됩니다. 콜백 확인 기능이 &lt;code&gt;{valid, UserState}&lt;/code&gt; 반환 하면 확인 프로세스가 계속됩니다. 이는 &lt;code&gt;selfsigned_peer&lt;/code&gt; 와 같은 특정 경로 유효성 검증 오류를 승인하고 애플리케이션 별 확장을 확인하는 데 사용될 수 있습니다 . 사용자 애플리케이션에 알려지지 않은 확장자로 호출 된 경우, 리턴 값 &lt;code&gt;{unknown, UserState}&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7ce417b1938b35d2181946cc1bbef96b4151dd19" translate="yes" xml:space="preserve">
          <source>If the verify callback fun returns &lt;code&gt;{valid, UserState}&lt;/code&gt;, the verification process continues.</source>
          <target state="translated">콜백 확인 기능이 &lt;code&gt;{valid, UserState}&lt;/code&gt; 반환 하면 확인 프로세스가 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="0df79b705a85e7a2500ba7951bd6d85a1ee9ec5b" translate="yes" xml:space="preserve">
          <source>If the version read from the &lt;code&gt;OTP_VERSION&lt;/code&gt; file in a development system has a &lt;code&gt;**&lt;/code&gt; suffix, the system has been patched using the &lt;code&gt;&lt;a href=&quot;../installation_guide/otp-patch-apply&quot;&gt;otp_patch_apply&lt;/a&gt;&lt;/code&gt; tool. In this case, the system consists of application versions from multiple OTP versions. The version preceding the &lt;code&gt;**&lt;/code&gt; suffix corresponds to the OTP version of the base system that has been patched. Notice that if a development system is updated by other means than &lt;code&gt;otp_patch_apply&lt;/code&gt;, the file &lt;code&gt;OTP_VERSION&lt;/code&gt; can identify an incorrect OTP version.</source>
          <target state="translated">개발 시스템 의 &lt;code&gt;OTP_VERSION&lt;/code&gt; 파일에서 읽은 버전 에 &lt;code&gt;**&lt;/code&gt; 접미사가 &lt;code&gt;&lt;a href=&quot;../installation_guide/otp-patch-apply&quot;&gt;otp_patch_apply&lt;/a&gt;&lt;/code&gt; 시스템은 otp_patch_apply 도구를 사용하여 패치 된 것 입니다. 이 경우 시스템은 여러 OTP 버전의 응용 프로그램 버전으로 구성됩니다. &lt;code&gt;**&lt;/code&gt; 접미사 앞의 버전은 패치 된 기본 시스템의 OTP 버전에 해당합니다. &lt;code&gt;otp_patch_apply&lt;/code&gt; 이외의 다른 방법으로 개발 시스템을 업데이트 하면 &lt;code&gt;OTP_VERSION&lt;/code&gt; 파일 이 잘못된 OTP 버전을 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f230a4391a7ac08d14e4fb4510c5ba298ff9d5d7" translate="yes" xml:space="preserve">
          <source>If the wrap log is not full because all files are not yet used, &lt;code&gt;{error, end_of_log}&lt;/code&gt; is returned if trying to step outside the log.</source>
          <target state="translated">모든 파일이 아직 사용되지 않아 랩 로그가 가득 &lt;code&gt;{error, end_of_log}&lt;/code&gt; 않은 경우 로그 외부로 나 가려고하면 {error, end_of_log} 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="f46b1e432470475ec50697579521d2c2bae67ee6" translate="yes" xml:space="preserve">
          <source>If then a new instance of the module is loaded (for example, because of error correction), the code of the previous instance becomes 'old', and all export entries referring to the previous instance are removed. After that, the new instance is loaded as for the first time, and becomes 'current'.</source>
          <target state="translated">오류 수정 등으로 인해 모듈의 새 인스턴스가로드되면 이전 인스턴스의 코드가 '이전'이되고 이전 인스턴스를 참조하는 모든 내보내기 항목이 제거됩니다. 그 후 새 인스턴스가 처음으로로드되고 '현재'가됩니다.</target>
        </trans-unit>
        <trans-unit id="a1c29be5cd8e91fa1db97518d47656645435250e" translate="yes" xml:space="preserve">
          <source>If there already exists a child specification with the specified identifier, &lt;code&gt;ChildSpec&lt;/code&gt; is discarded, and the function returns &lt;code&gt;{error,already_present}&lt;/code&gt; or &lt;code&gt;{error,{already_started,Child}}&lt;/code&gt;, depending on if the corresponding child process is running or not.</source>
          <target state="translated">지정된 식별자를 가진 하위 스펙이 이미있는 경우 &lt;code&gt;ChildSpec&lt;/code&gt; 은 삭제되고 해당 하위 프로세스가 실행 중인지 여부에 따라 &lt;code&gt;{error,already_present}&lt;/code&gt; 또는 &lt;code&gt;{error,{already_started,Child}}&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="29f67842a562c035ba90f5d1c233372af3669459" translate="yes" xml:space="preserve">
          <source>If there already exists a process with the specified &lt;code&gt;SupBridgeName&lt;/code&gt;, the function returns &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of that process.</source>
          <target state="translated">지정된 &lt;code&gt;SupBridgeName&lt;/code&gt; 을 가진 프로세스가 이미 존재하는 경우 , 함수는 &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 해당 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="b068d3b22b44bd5f6e7c211c147d05d61566b01d" translate="yes" xml:space="preserve">
          <source>If there already exists a process with the specified &lt;code&gt;SupName&lt;/code&gt;, the function returns &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of that process.</source>
          <target state="translated">지정된 &lt;code&gt;SupName&lt;/code&gt; 을 가진 프로세스가 이미 존재하는 경우 , 함수는 &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt; 를 리턴합니다 . 여기서 &lt;code&gt;Pid&lt;/code&gt; 는 해당 프로세스의 pid입니다.</target>
        </trans-unit>
        <trans-unit id="b8fb3b2e8b37c9a0306fd62b9b9f0fc3fa52b199" translate="yes" xml:space="preserve">
          <source>If there already is current code for the module, that code will remain current and can be called until the &lt;code&gt;on_load&lt;/code&gt; function has returned. If the &lt;code&gt;on_load&lt;/code&gt; function fails, the current code (if any) will remain current. If there is no current code for a module, any process that makes an external call to the module before the &lt;code&gt;on_load&lt;/code&gt; function has finished will be suspended until the &lt;code&gt;on_load&lt;/code&gt; function have finished.</source>
          <target state="translated">모듈에 대한 현재 코드가 이미있는 경우 해당 코드는 최신 상태로 유지되며 &lt;code&gt;on_load&lt;/code&gt; 함수가 반환 될 때까지 호출 할 수 있습니다 . 는 IF &lt;code&gt;on_load&lt;/code&gt; 의 함수가 실패, 현재 코드 (있는 경우) 현재 남아있게됩니다. 모듈에 대한 현재 코드의 전 모듈에 외부 호출하게 모든 프로세스가없는 경우 &lt;code&gt;on_load&lt;/code&gt; 의 때까지 정지됩니다 완료 기능 &lt;code&gt;on_load&lt;/code&gt; 의 기능을 완료합니다.</target>
        </trans-unit>
        <trans-unit id="828714b66dcf56b96deedb054ba47d438cc6af67" translate="yes" xml:space="preserve">
          <source>If there are enqueued events the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; for the possibly new state is called with the oldest enqueued event, and we start again from the top of this list.</source>
          <target state="translated">대기열에 포함 된 이벤트가있는 경우 가능한 가장 새로운 상태에 대한 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 이 가장 오래된 대기열에 포함 된 이벤트와 함께 호출되며이 목록의 맨 위에서 다시 시작합니다.</target>
        </trans-unit>
        <trans-unit id="44555dd341d5b0e52ff1661ee5eda131159416ee" translate="yes" xml:space="preserve">
          <source>If there are enqueued events to process when hibrnation is requested, this is optimized by not hibernating but instead calling &lt;code&gt;erlang:garbage_collect/0&lt;/code&gt; to simulate that the &lt;code&gt;gen_statem&lt;/code&gt; entered hibernation and immediately got awakened by an enqueued event.</source>
          <target state="translated">동면 요청이있을 때 처리 할 대기열에있는 이벤트가있는 경우, 동면하지 않고 &lt;code&gt;erlang:garbage_collect/0&lt;/code&gt; 을 호출 하여 &lt;code&gt;gen_statem&lt;/code&gt; 이 동면 상태에 들어가서 대기열에있는 이벤트에 의해 즉시 깨어 났음 을 시뮬레이션합니다 .</target>
        </trans-unit>
        <trans-unit id="8322fe14ba9a9426d69e7f2423c508cc09e9ca48" translate="yes" xml:space="preserve">
          <source>If there are more than one modify_algorithms options, the result is undefined.</source>
          <target state="translated">하나 이상의 modify_algorithms 옵션이 있으면 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3690ce212d6493d7841d406b4cec0802d81f2e96" translate="yes" xml:space="preserve">
          <source>If there are no more associations in the iterator, &lt;code&gt;none&lt;/code&gt; is returned.</source>
          <target state="translated">반복자에 더 이상 연관이 없으면 &lt;code&gt;none&lt;/code&gt; 리턴 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e9815b352e2d989c9ac48ca673c35c72745e841d" translate="yes" xml:space="preserve">
          <source>If there are no records in the table, this function returns the atom &lt;code&gt;'$end_of_table'&lt;/code&gt;. It is not recommended to use this atom as the key for any user records.</source>
          <target state="translated">테이블에 레코드가 없으면이 함수는 atom &lt;code&gt;'$end_of_table'&lt;/code&gt; 리턴합니다 . 이 원자를 사용자 레코드의 키로 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="45cad60d0486a292ed0c0af70654056064441d58" translate="yes" xml:space="preserve">
          <source>If there are no records in the table, this function returns the atom &lt;code&gt;'$end_of_table'&lt;/code&gt;. It is therefore highly undesirable, but not disallowed, to use this atom as the key for any user records.</source>
          <target state="translated">테이블에 레코드가 없으면이 함수는 atom &lt;code&gt;'$end_of_table'&lt;/code&gt; 리턴합니다 . 따라서이 원자를 사용자 레코드의 키로 사용하는 것은 바람직하지 않지만 허용되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="8503df3ac3ca7273d732e58802cad2a3a0dfc645" translate="yes" xml:space="preserve">
          <source>If there are no suitable peers, or if &lt;code&gt;pick_peer/4&lt;/code&gt; rejects them by returning &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;{error,no_connection}&lt;/code&gt; is returned. Otherwise &lt;code&gt;pick_peer/4&lt;/code&gt; is followed by a &lt;code&gt;prepare_request/3&lt;/code&gt; callback, the message is encoded and then sent.</source>
          <target state="translated">거기에 더 적합한 또래없는 경우 또는 경우 &lt;code&gt;pick_peer/4&lt;/code&gt; 반환하여 거부를 &lt;code&gt;false&lt;/code&gt; 한 후 &lt;code&gt;{error,no_connection}&lt;/code&gt; 반환됩니다. 그렇지 않으면 &lt;code&gt;pick_peer/4&lt;/code&gt; 다음에 준비 _ 요청 &lt;code&gt;prepare_request/3&lt;/code&gt; 콜백 이 이어지며 메시지가 인코딩 된 후 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="17bbd36158389d16f581ae00cabe7d0d4b0d0c37" translate="yes" xml:space="preserve">
          <source>If there are open NETCONF sessions on the connection, these will be brutally aborted. To avoid this, close each session with &lt;code&gt;&lt;a href=&quot;#close_session-1&quot;&gt;close_session/1,2&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">연결에 열린 NETCONF 세션이있는 경우 잔인하게 중단됩니다. 이를 피하려면 &lt;code&gt;&lt;a href=&quot;#close_session-1&quot;&gt;close_session/1,2&lt;/a&gt;&lt;/code&gt; 로 각 세션을 닫으십시오.</target>
        </trans-unit>
        <trans-unit id="744bfeb045fa800e48c24a368ddf960ab780e491" translate="yes" xml:space="preserve">
          <source>If there are other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; of the driver, the reference counts of the driver is merely decreased, so that the caller is no longer considered a &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver. For use scenarios, see the &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;description&lt;/a&gt;&lt;/code&gt; in the beginning of this module.</source>
          <target state="translated">운전자의 다른 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; 가있는 경우 , 운전자의 참조 카운트는 단지 감소되어, 발신자는 더 이상 운전자 의 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; 로 간주되지 않는다 . 사용 시나리오 는이 모듈의 시작 부분에 있는 &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;description&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad1eb612ef6dd4e45361d0987788045dfb4b5f75" translate="yes" xml:space="preserve">
          <source>If there are other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; of the driver, the reference counts of the driver is merely decreased, so that the caller is no longer considered a &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt;. For use scenarios, see the &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;description&lt;/a&gt;&lt;/code&gt; in the beginning of this module.</source>
          <target state="translated">운전자의 다른 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; 가있는 경우 , 운전자의 참조 횟수는 감소되어 발신자가 더 이상 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; 간주되지 않습니다 . 사용 시나리오 는이 모듈의 시작 부분에 있는 &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;description&lt;/a&gt;&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a3b63451c0aef92b5965292576792be22d886c0" translate="yes" xml:space="preserve">
          <source>If there are other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; of this driver, the function returns &lt;code&gt;{error, pending_process}&lt;/code&gt;, but if there are no other users, the function call hangs until all open ports are closed.</source>
          <target state="translated">이 드라이버의 다른 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; 가있는 경우 함수는 &lt;code&gt;{error, pending_process}&lt;/code&gt; 리턴 하지만 다른 사용자가없는 경우 열려있는 모든 포트가 닫힐 때까지 함수 호출이 정지됩니다.</target>
        </trans-unit>
        <trans-unit id="ddfc5d95528ec782f6cb446ae853ade32ce2c1f9" translate="yes" xml:space="preserve">
          <source>If there are two active table replicas, all information is still available if one replica fails. This can be an important property in many applications. Furthermore, if a table replica exists at two specific nodes, applications that execute at either of these nodes can read data from the table without accessing the network. Network operations are considerably slower and consume more resources than local operations.</source>
          <target state="translated">두 개의 활성 테이블 복제본이있는 경우 하나의 복제본이 실패해도 모든 정보를 계속 사용할 수 있습니다. 이것은 많은 응용 프로그램에서 중요한 속성이 될 수 있습니다. 또한 테이블 복제본이 두 개의 특정 노드에 존재하는 경우 이러한 노드 중 하나에서 실행되는 응용 프로그램은 네트워크에 액세스하지 않고도 테이블에서 데이터를 읽을 수 있습니다. 네트워크 작업은 로컬 작업보다 상당히 느리고 많은 리소스를 소비합니다.</target>
        </trans-unit>
        <trans-unit id="02a74b61b8a7a65ef993947d91f15d8fda49a9eb" translate="yes" xml:space="preserve">
          <source>If there has not been any exceptions in a process, the stacktrace is &lt;code&gt;[]&lt;/code&gt;. After a code change for the process, the stacktrace can also be reset to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">프로세스에 예외가없는 경우 스택 추적은 &lt;code&gt;[]&lt;/code&gt; 입니다. 프로세스의 코드 변경 후 stacktrace를 &lt;code&gt;[]&lt;/code&gt; 로 재설정 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="231307e5b86795ba02c3c7007a265d1b3815a9d6" translate="yes" xml:space="preserve">
          <source>If there is NO &lt;code&gt;Subject Alternate Name&lt;/code&gt; field, the &lt;code&gt;Subject&lt;/code&gt; field will be checked. All &lt;code&gt;CN&lt;/code&gt; names will be compared to all hostnames</source>
          <target state="translated">&lt;code&gt;Subject Alternate Name&lt;/code&gt; 필드 가 없으면 &lt;code&gt;Subject&lt;/code&gt; 필드가 확인됩니다. 모든 &lt;code&gt;CN&lt;/code&gt; 이름은 모든 호스트 이름과 비교됩니다</target>
        </trans-unit>
        <trans-unit id="68e6d1b8204d4e4cbe66b0a3f70bd3fdbea57001" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;Subject Alternate Name&lt;/code&gt; field, the &lt;code&gt;{uri_id,string()}&lt;/code&gt; in the function call will be compared to any &lt;code&gt;{uniformResourceIdentifier,string()}&lt;/code&gt; in the Certificate field. If the two &lt;code&gt;strings()&lt;/code&gt; are equal (case insensitive), there is a match. The same applies for any &lt;code&gt;{dns_id,string()}&lt;/code&gt; in the call which is compared with all &lt;code&gt;{dNSName,string()}&lt;/code&gt; in the Certificate field.</source>
          <target state="translated">가있는 경우 &lt;code&gt;Subject Alternate Name&lt;/code&gt; 필드의 &lt;code&gt;{uri_id,string()}&lt;/code&gt; 함수 호출에 어떤 비교됩니다 &lt;code&gt;{uniformResourceIdentifier,string()}&lt;/code&gt; 인증서 필드에 입력하십시오. 두 &lt;code&gt;strings()&lt;/code&gt; 이 같으면 (대 / 소문자를 구분하지 않음) 일치하는 것입니다. 인증서 필드의 모든 &lt;code&gt;{dNSName,string()}&lt;/code&gt; 과 비교되는 호출의 &lt;code&gt;{dns_id,string()}&lt;/code&gt; 에 대해서도 동일하게 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="7f945a017af252bdab418ccd24ce5005c146d8f7" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;Value&lt;/code&gt; in &lt;code&gt;List&lt;/code&gt; such that &lt;code&gt;Pred(Value)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, returns &lt;code&gt;{value, Value}&lt;/code&gt; for the first such &lt;code&gt;Value&lt;/code&gt;, otherwise returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 있으면 &lt;code&gt;Value&lt;/code&gt; 의 &lt;code&gt;List&lt;/code&gt; 있도록 &lt;code&gt;Pred(Value)&lt;/code&gt; 반환 &lt;code&gt;true&lt;/code&gt; , 반환 &lt;code&gt;{value, Value}&lt;/code&gt; 최초의에 대한 &lt;code&gt;Value&lt;/code&gt; , 그렇지 않으면 반환 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d37a03a5a10dfe3b584b5087ad2e3ee6b552e40a" translate="yes" xml:space="preserve">
          <source>If there is a matching failure to the right, backtracking onto (*PRUNE) causes it to be triggered, and its action is taken. There can never be a backtrack onto (*COMMIT).</source>
          <target state="translated">오른쪽에 일치하는 실패가 있으면 (* PRUNE)으로 역 추적하여 트리거되고 조치가 수행됩니다. (* COMMIT)에는 역 추적 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="772eaa5a9bb7c808e1d1ad944ded54de87cfcbf6" translate="yes" xml:space="preserve">
          <source>If there is a syntax error somewhere in the text (like the missing semicolon in the second clause above) this allows Merl to generate an error message pointing to the exact line in your source code. (Just remember to comma-separate the strings in the list, otherwise Erlang will concatenate the string fragments as if they were a single string.)</source>
          <target state="translated">텍스트 어딘가에 구문 오류가있는 경우 (위의 두 번째 절에서 누락 된 세미콜론과 같이) Merl은 소스 코드의 정확한 행을 가리키는 오류 메시지를 생성 할 수 있습니다. (목록에서 문자열을 쉼표로 구분해야합니다. 그렇지 않으면 Erlang은 문자열 조각을 마치 단일 문자열 인 것처럼 연결합니다.)</target>
        </trans-unit>
        <trans-unit id="f8de65cd10bf00bba2999acc7df58c16d7692021" translate="yes" xml:space="preserve">
          <source>If there is data buffered in the socket port, the attempt to shutdown the socket is postponed until that data is written to the kernel socket send buffer. If any errors are encountered, the socket is closed and &lt;code&gt;{error, closed}&lt;/code&gt; is returned on the next &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">소켓 포트에 버퍼링 된 데이터가있는 경우 해당 데이터가 커널 소켓 송신 버퍼에 기록 될 때까지 소켓 종료 시도가 연기됩니다. 오류가 발생하면 소켓이 닫히고 다음 &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2&lt;/a&gt;&lt;/code&gt; 에서 &lt;code&gt;{error, closed}&lt;/code&gt; 가 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="ab5c589483e29b598b39704e5336b70db6c69642" translate="yes" xml:space="preserve">
          <source>If there is more than one subpattern with the same name, the earliest one is used.</source>
          <target state="translated">이름이 같은 하위 패턴이 두 개 이상인 경우 가장 빠른 하위 패턴이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bbc551c6c725ba0dac8c61943a105b6a103c7e97" translate="yes" xml:space="preserve">
          <source>If there is no matching message in the mailbox, the timeout occurs immediately.</source>
          <target state="translated">사서함에 일치하는 메시지가 없으면 시간 초과가 즉시 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cc738995866b9be8195d9f8399cccd32d281ee8b" translate="yes" xml:space="preserve">
          <source>If there is no matching pattern with a true guard sequence, a &lt;code&gt;case_clause&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">실제 가드 시퀀스와 일치하는 패턴이 없으면 &lt;code&gt;case_clause&lt;/code&gt; 런타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f5a0ffa17cfe9167811739038f7d8ac026fb1794" translate="yes" xml:space="preserve">
          <source>If there is no public key of a specified type available, the corresponding entry is ignored. Note that the available set is dependent on the underlying cryptolib and current user's public keys.</source>
          <target state="translated">사용 가능한 지정된 유형의 공개 키가 없으면 해당 항목이 무시됩니다. 사용 가능한 세트는 기본 암호화 및 현재 사용자의 공개 키에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="8c43ed956f51818838543c55451a2fcd8d8fee88" translate="yes" xml:space="preserve">
          <source>If there was a supervised connection between &lt;code&gt;Handler1&lt;/code&gt; and a process &lt;code&gt;Pid&lt;/code&gt;, there is a supervised connection between &lt;code&gt;Handler2&lt;/code&gt; and &lt;code&gt;Pid&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;Handler1&lt;/code&gt; 과 프로세스 &lt;code&gt;Pid&lt;/code&gt; 사이에 감독 연결이있는 경우 , 대신 &lt;code&gt;Handler2&lt;/code&gt; 와 &lt;code&gt;Pid&lt;/code&gt; 사이에 감독 연결이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c67211fc881043f6c0597b9ecfceb976f47baf4" translate="yes" xml:space="preserve">
          <source>If there was some bug in &lt;code&gt;lists:reverse/1&lt;/code&gt; that made it return something other than &lt;code&gt;[2,1]&lt;/code&gt; when it got &lt;code&gt;[1,2]&lt;/code&gt; as input, then the last test above would throw a &lt;code&gt;badmatch&lt;/code&gt; error. The first two (we assume they do not get a &lt;code&gt;badmatch&lt;/code&gt;) would simply return &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;[1]&lt;/code&gt;, respectively, so both succeed. (Note that EUnit is not psychic: if you write a test that returns a value, even if it is the wrong value, EUnit will consider it a success. You must make sure that the test is written so that it causes a crash if the result is not what it should be.)</source>
          <target state="translated">&lt;code&gt;lists:reverse/1&lt;/code&gt; 에 입력으로 &lt;code&gt;[1,2]&lt;/code&gt; 를 받았을 때 &lt;code&gt;[2,1]&lt;/code&gt; 이외의 것을 반환하게하는 버그가 있으면 위의 마지막 테스트에서 &lt;code&gt;badmatch&lt;/code&gt; 오류가 발생합니다. 처음 두 개 ( &lt;code&gt;badmatch&lt;/code&gt; 가 없다고 가정 )는 단순히 각각 &lt;code&gt;[]&lt;/code&gt; 및 &lt;code&gt;[1]&lt;/code&gt; 을 반환 하므로 둘 다 성공합니다. (EUnit은 심령이 아닙니다. 잘못된 값이더라도 값을 반환하는 테스트를 작성하는 경우 EUnit은이를 성공으로 간주합니다. 테스트가 작성된 경우 충돌이 발생하도록 테스트를 작성해야합니다. 결과는 그렇지 않아야합니다.)</target>
        </trans-unit>
        <trans-unit id="ac4dc8c4f9cc87ef06af906dc31bb54276084fd9" translate="yes" xml:space="preserve">
          <source>If these requirements are not fulfilled, the system may behave very bad.</source>
          <target state="translated">이러한 요구 사항이 충족되지 않으면 시스템이 매우 잘못 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e69ed9e46453ec19298157c854f6a3eaec0abc5" translate="yes" xml:space="preserve">
          <source>If this attribute is not specified, the version defaults to the MD5 checksum of the module.</source>
          <target state="translated">이 속성을 지정하지 않으면 버전의 기본값은 모듈의 MD5 체크섬입니다.</target>
        </trans-unit>
        <trans-unit id="aa0c65a5a17658e764f89aa9eb9e0a1ff2afe4bb" translate="yes" xml:space="preserve">
          <source>If this callback is exported but fails, to hide possibly sensitive data, the default function will instead return &lt;code&gt;{State,Info}&lt;/code&gt;, where &lt;code&gt;Info&lt;/code&gt; says nothing but the fact that &lt;code&gt;format_status/2&lt;/code&gt; has crashed.</source>
          <target state="translated">이 콜백을 내보내지만 실패로 민감한 데이터를 숨길 수없는 경우 기본 함수는 &lt;code&gt;{State,Info}&lt;/code&gt; 를 대신 반환합니다 . 여기서 &lt;code&gt;Info&lt;/code&gt; 는 &lt;code&gt;format_status/2&lt;/code&gt; 가 충돌 했다는 사실 만 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="714e5e0a8e521c47efda0340fa656dbd50e5c01b" translate="yes" xml:space="preserve">
          <source>If this configuration parameter is set, it replaces both the default report callback, and any report callback found in metadata. That is, all reports are converted by this configured function.</source>
          <target state="translated">이 구성 매개 변수가 설정되면 기본 보고서 콜백과 메타 데이터에서 발견 된 모든 보고서 콜백을 모두 대체합니다. 즉, 모든 보고서는이 구성된 기능에 의해 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="1be583879f0eb7412bbdfda911217bb43a748c07" translate="yes" xml:space="preserve">
          <source>If this does not work on your system, the documentation is included as HTML in the Erlang/OTP release. You can also read the documentation as HTML or download it as PDF from either of the sites www.erlang.se (commercial Erlang) or www.erlang.org (open source). For example, for Erlang/OTP release R9B:</source>
          <target state="translated">이것이 시스템에서 작동하지 않으면, 문서는 Erlang / OTP 릴리스에서 HTML로 포함됩니다. www.erlang.se (상업용 Erlang) 또는 www.erlang.org (오픈 소스) 사이트에서 설명서를 HTML로 읽거나 PDF로 다운로드 할 수도 있습니다. 예를 들어 Erlang / OTP 릴리스 R9B의 경우 :</target>
        </trans-unit>
        <trans-unit id="a7ae399292df5e1214de0f1c430950be7c775936" translate="yes" xml:space="preserve">
          <source>If this flag is present, &lt;code&gt;global&lt;/code&gt; does not maintain a fully connected network of distributed Erlang nodes, and then global name registration cannot be used; see &lt;code&gt;global(3)&lt;/code&gt;.</source>
          <target state="translated">이 플래그가 있으면 &lt;code&gt;global&lt;/code&gt; 은 분산 된 Erlang 노드의 완전히 연결된 네트워크를 유지하지 않으므로 전역 이름 등록을 사용할 수 없습니다. &lt;code&gt;global(3)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f07b81995e2058716b31282ea839a19974f67348" translate="yes" xml:space="preserve">
          <source>If this flag is set, &lt;code&gt;{error, Errors, Warnings}&lt;/code&gt; is returned when there are errors. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 플래그가 설정되면 &lt;code&gt;{error, Errors, Warnings}&lt;/code&gt; 가있을 때 {error, Errors, Warnings} 가 리턴됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5398762fceee6e07d9e93fb018e02eda7d682593" translate="yes" xml:space="preserve">
          <source>If this flag is set, &lt;code&gt;{error,ErrorList,WarningList}&lt;/code&gt; is returned when there are errors.</source>
          <target state="translated">이 플래그가 설정되면 &lt;code&gt;{error,ErrorList,WarningList}&lt;/code&gt; 가있을 때 {error, ErrorList, WarningList} 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="6be13d0e071b42b8d41878615f2879c487393169" translate="yes" xml:space="preserve">
          <source>If this flag is set, an extra field containing &lt;code&gt;Warnings&lt;/code&gt; is added to the tuple returned upon success. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 플래그를 설정하면 &lt;code&gt;Warnings&lt;/code&gt; 가 포함 된 추가 필드가 성공시 반환 된 튜플에 추가됩니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3313bf48f0cdfa74884b1da2da53a7543532d3d4" translate="yes" xml:space="preserve">
          <source>If this flag is set, an extra field, containing &lt;code&gt;WarningList&lt;/code&gt;, is added to the tuples returned on success.</source>
          <target state="translated">이 플래그가 설정되면 &lt;code&gt;WarningList&lt;/code&gt; 를 포함하는 추가 필드 가 성공시 리턴 된 튜플에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="a4261f0fa61ea721311b8153168daa7bcae82ceb" translate="yes" xml:space="preserve">
          <source>If this function gets invoked or not is controlled by the reply from the preceding call to handle_trans_request/3. The handle_trans_request/3 function may decide to process the action requests itself or to delegate the processing to this function.</source>
          <target state="translated">이 함수가 호출되는지의 여부는 handle_trans_request / 3에 대한 이전 호출의 응답에 의해 제어됩니다. handle_trans_request / 3 함수는 조치 요청 자체를 처리하거나 처리를이 함수에 위임하기로 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="759c6aff89e36cb13b1929cdb56543f2723e5912" translate="yes" xml:space="preserve">
          <source>If this function gets invoked or not, is controlled by the reply from the preceding call to handle_trans_request/3. The handle_trans_request/3 function may decide to return {handle_ack, ack_data()} or {handle_sloppy_ack, ack_data()} meaning that you need an immediate acknowledgement of the reply and that this function should be invoked to handle the acknowledgement.</source>
          <target state="translated">이 함수가 호출되는지의 여부는 handle_trans_request / 3에 대한 이전 호출의 응답에 의해 제어됩니다. handle_trans_request / 3 함수는 {handle_ack, ack_data ()} 또는 {handle_sloppy_ack, ack_data ()}를 리턴하도록 결정할 수 있습니다. 즉, 응답을 즉시 승인해야하며 승인을 처리하기 위해이 함수를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="2db2202db664ddf13d01713aaa8bc9ba006f0ed4" translate="yes" xml:space="preserve">
          <source>If this function is called, it can only be called once and must be called before any other functions in the &lt;code&gt;ei&lt;/code&gt; library are called.</source>
          <target state="translated">이 함수가 호출되면 한 번만 호출 할 수 있으며 &lt;code&gt;ei&lt;/code&gt; 라이브러리의 다른 함수가 호출되기 전에 호출되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="63459ad5b8a5024794d9f8294a76e897d53d7890" translate="yes" xml:space="preserve">
          <source>If this function is called, it may only be called once directly after the call to function &lt;code&gt;&lt;a href=&quot;#erl_init&quot;&gt;erl_init()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이 함수가 호출되면 함수 &lt;code&gt;&lt;a href=&quot;#erl_init&quot;&gt;erl_init()&lt;/a&gt;&lt;/code&gt; 호출 직후에 한 번만 호출 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cdd06471c1b7c9a2e79736c5c3baade29102ed76" translate="yes" xml:space="preserve">
          <source>If this function is called, it will be called again, either with &lt;code&gt;undo&lt;/code&gt; or with &lt;code&gt;set&lt;/code&gt; as first argument.</source>
          <target state="translated">이 함수가 호출되면 &lt;code&gt;undo&lt;/code&gt; 또는 첫 번째 인수 로 &lt;code&gt;set&lt;/code&gt; 다시 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="57d5ad72a18485e89bafa2b5eeeeaab800a1356c" translate="yes" xml:space="preserve">
          <source>If this function is not called, the start function returns an error tuple (if a link and/or a time-out is used) or hang otherwise.</source>
          <target state="translated">이 함수가 호출되지 않으면 시작 함수는 오류 튜플을 반환하거나 (링크 및 / 또는 시간 초과가 사용 된 경우) 그렇지 않으면 정지합니다.</target>
        </trans-unit>
        <trans-unit id="8c7cb778dcaeb301678f8381c719400450da4a70" translate="yes" xml:space="preserve">
          <source>If this function returns with a next state that does not match equal (&lt;code&gt;=/=&lt;/code&gt;) to the current state, all postponed events are retried in the next state.</source>
          <target state="translated">이 함수가 현재 상태 와 같거나 ( &lt;code&gt;=/=&lt;/code&gt; ) 일치하지 않는 다음 상태로 리턴되면 연기 된 모든 이벤트가 다음 상태에서 재 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="3a0ed99dde48840d29c014e939552bc11b14d1d1" translate="yes" xml:space="preserve">
          <source>If this function's body does not return an inline constant value the callback module is doing something strange.</source>
          <target state="translated">이 함수의 본문이 인라인 상수 값을 반환하지 않으면 콜백 모듈이 이상한 일을합니다.</target>
        </trans-unit>
        <trans-unit id="82460753c54ada648d7c9b05b35bd78eae8d83fe" translate="yes" xml:space="preserve">
          <source>If this is a problem; to generate a boolean use something like this:</source>
          <target state="translated">이것이 문제라면; 부울을 생성하려면 다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3ac87d883ad765b014bd68fa86e8b2ac8f132c75" translate="yes" xml:space="preserve">
          <source>If this macro is defined, it overrides the NOASSERT macro, forcing the assert macros to always be enabled regardless of other settings.</source>
          <target state="translated">이 매크로가 정의되면 NOASSERT 매크로를 대체하여 다른 설정에 상관없이 어설 션 매크로를 항상 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="ef12b2a17adab036f91ae1c37a457dabe1673cb6" translate="yes" xml:space="preserve">
          <source>If this macro is defined, it overrides the NODEBUG macro, forcing the debugging macros to be enabled.</source>
          <target state="translated">이 매크로가 정의되면 NODEBUG 매크로를 대체하여 디버깅 매크로를 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="f89fd4ecae86929dc6deae32a5e245a30ab74c60" translate="yes" xml:space="preserve">
          <source>If this macro is defined, the assert macros will have no effect, when testing is also disabled. See &lt;code&gt;&lt;a href=&quot;#Assert_macros&quot;&gt;Assert macros&lt;/a&gt;&lt;/code&gt;. When testing is enabled, the assert macros are always enabled automatically and cannot be disabled.</source>
          <target state="translated">이 매크로가 정의되어 있으면 테스트를 사용하지 않도록 설정해도 어설 션 매크로가 적용되지 않습니다. &lt;code&gt;&lt;a href=&quot;#Assert_macros&quot;&gt;Assert macros&lt;/a&gt;&lt;/code&gt; 참조하십시오 . 테스트가 활성화되면 어설 션 매크로는 항상 자동으로 활성화되며 비활성화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="79358b57c58e42b823acfaf278614ec9c7ce54cc" translate="yes" xml:space="preserve">
          <source>If this macro is defined, the automatic exporting or stripping of test functions will be disabled.</source>
          <target state="translated">이 매크로가 정의되면 테스트 기능의 자동 내보내기 또는 스트리핑이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="6681ab5371316488374f8d3a60e956558c52d69e" translate="yes" xml:space="preserve">
          <source>If this macro is defined, the debugging macros will have no effect. See &lt;code&gt;&lt;a href=&quot;#Debugging_macros&quot;&gt;Debugging macros&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;NODEBUG&lt;/code&gt; also implies &lt;code&gt;NOASSERT&lt;/code&gt;, unless testing is enabled.</source>
          <target state="translated">이 매크로가 정의되어 있으면 디버깅 매크로가 적용되지 않습니다. &lt;code&gt;&lt;a href=&quot;#Debugging_macros&quot;&gt;Debugging macros&lt;/a&gt;&lt;/code&gt; 참조하십시오 . &lt;code&gt;NODEBUG&lt;/code&gt; 은 또한 의미 &lt;code&gt;NOASSERT&lt;/code&gt; 을 시험 사용하지 않으면.</target>
        </trans-unit>
        <trans-unit id="781581d91da20944d9d397cd0ddb27951b613d6e" translate="yes" xml:space="preserve">
          <source>If this option is present, the table data is stored in a more compact format to consume less memory. However, it will make table operations slower. Especially operations that need to inspect entire objects, such as &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt;, get much slower. The key element is not compressed.</source>
          <target state="translated">이 옵션이 존재하면, 테이블 데이터는 더 적은 메모리를 사용하기 위해보다 컴팩트 한 형식으로 저장됩니다. 그러나 테이블 작업 속도가 느려집니다. 특히 &lt;code&gt;match&lt;/code&gt; 및 &lt;code&gt;select&lt;/code&gt; 와 같은 전체 객체를 검사해야하는 작업이 훨씬 느려집니다. 키 요소가 압축되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="39baea08169404ce3fe44fe53586745d1c2f63db" translate="yes" xml:space="preserve">
          <source>If this option is present, the table is registered under its &lt;code&gt;Name&lt;/code&gt; which can then be used instead of the table identifier in subsequent operations.</source>
          <target state="translated">이 옵션이 존재하면 테이블은 &lt;code&gt;Name&lt;/code&gt; 아래에 등록 된 후 후속 조작에서 테이블 ID 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee4b6929098a40cbdbaf168a7fca6dd6bafa6ed5" translate="yes" xml:space="preserve">
          <source>If this option is set, most white space characters in the pattern are totally ignored except when escaped or inside a character class. However, white space is not allowed within sequences such as &lt;code&gt;(?&amp;gt;&lt;/code&gt; that introduce various parenthesized subpatterns, nor within a numerical quantifier such as &lt;code&gt;{1,3}&lt;/code&gt;. However, ignorable white space is permitted between an item and a following quantifier and between a quantifier and a following + that indicates possessiveness.</source>
          <target state="translated">이 옵션을 설정하면 이스케이프되거나 문자 클래스 내부를 제외하고 패턴의 대부분의 공백 문자가 완전히 무시됩니다. 그러나 &lt;code&gt;(?&amp;gt;&lt;/code&gt; 와 같이 다양한 괄호로 묶인 하위 패턴을 도입하는 시퀀스 나 &lt;code&gt;{1,3}&lt;/code&gt; 과 같은 숫자 한정자 내에 공백은 허용되지 않지만 무시할 수있는 공백은 항목과 다음 수량 자 사이 및 양도 및 소 유력을 나타내는 다음 +.</target>
        </trans-unit>
        <trans-unit id="fdc99f2839fcd867c278ae874f9e2a13c5e1d784" translate="yes" xml:space="preserve">
          <source>If this option is written in the source code, as a &lt;code&gt;-compile&lt;/code&gt; directive, the syntax &lt;code&gt;F/A&lt;/code&gt; can be used instead of &lt;code&gt;{F,A}&lt;/code&gt;, for example:</source>
          <target state="translated">이 옵션이 소스 코드에서 &lt;code&gt;-compile&lt;/code&gt; 지시문 으로 작성된 경우 &lt;code&gt;{F,A}&lt;/code&gt; 대신 구문 &lt;code&gt;F/A&lt;/code&gt; 를 사용할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bd13526ac2fef0e27a961572d9dc8a9a077d1b66" translate="yes" xml:space="preserve">
          <source>If this parameter is not specified, it defaults to &lt;code&gt;/etc/hosts&lt;/code&gt; unless environment variable &lt;code&gt;ERL_INET_ETC_DIR&lt;/code&gt; is set, which defines the directory for this file to some maybe other than &lt;code&gt;/etc&lt;/code&gt;.</source>
          <target state="translated">이 매개 변수가 지정 되지 않은 경우 환경 변수 &lt;code&gt;ERL_INET_ETC_DIR&lt;/code&gt; 이 설정 되지 않은 경우 기본값은 &lt;code&gt;/etc/hosts&lt;/code&gt; 이며,이 파일의 디렉토리를 &lt;code&gt;/etc&lt;/code&gt; 이외의 다른 디렉토리로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="fe1c08841ffeb7fe23cca25114d889442e8c01cb" translate="yes" xml:space="preserve">
          <source>If this parameter is not specified, it defaults to &lt;code&gt;/etc/resolv.conf&lt;/code&gt; unless environment variable &lt;code&gt;ERL_INET_ETC_DIR&lt;/code&gt; is set, which defines the directory for this file to some maybe other than &lt;code&gt;/etc&lt;/code&gt;.</source>
          <target state="translated">이 매개 변수가 지정 되지 않은 경우 환경 변수 &lt;code&gt;ERL_INET_ETC_DIR&lt;/code&gt; 이 설정 되지 않은 경우 기본값은 &lt;code&gt;/etc/resolv.conf&lt;/code&gt; 이며,이 파일의 디렉토리를 &lt;code&gt;/etc&lt;/code&gt; 이외의 다른 디렉토리로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="45ec4c57907492a2ec83d9fdbff265e2b0072af9" translate="yes" xml:space="preserve">
          <source>If this pattern is embedded in a larger one, a relative reference can be used:</source>
          <target state="translated">이 패턴이 더 큰 패턴에 포함 된 경우 상대 참조를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e8050ea746b1df5e9d9c36102bf42da460ef8d08" translate="yes" xml:space="preserve">
          <source>If this property is defined, &lt;code&gt;Inets&lt;/code&gt; expects to find all other properties defined in this file, which uses Apache-like syntax. The file must include all properties listed under mandatory properties. The Apache-like syntax is the property, written as one word where each new word begins with a capital, followed by a white-space, followed by the value, followed by a new line.</source>
          <target state="translated">이 속성이 정의되면 &lt;code&gt;Inets&lt;/code&gt; 는이 파일에 정의 된 다른 모든 속성을 찾을 것으로 예상합니다. 이 속성은 Apache와 유사한 구문을 사용합니다. 파일에는 필수 특성 아래에 나열된 모든 특성이 포함되어야합니다. Apache와 유사한 구문은 각각의 새 단어가 대문자로 시작하고 공백, 값, 줄 바꿈이 차례로 나오는 한 단어로 작성된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="09a2a375a69f2029267ac74ac850aabd642821a4" translate="yes" xml:space="preserve">
          <source>If this property is defined, &lt;code&gt;Inets&lt;/code&gt; expects to find all other properties defined in this file. The file must include all properties listed under mandatory properties.</source>
          <target state="translated">이 속성이 정의되면 &lt;code&gt;Inets&lt;/code&gt; 는이 파일에 정의 된 다른 모든 속성을 찾습니다. 파일에는 필수 특성 아래에 나열된 모든 특성이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="fd3402a2f2f441f42f83cdd07b86e7ab04f0ace1" translate="yes" xml:space="preserve">
          <source>If this situation is not acceptable, this function can be used to override the strategy of the Mnesia table load algorithm. This can lead to a situation where some transaction effects are lost with an inconsistent database as result, but for some applications high availability is more important than consistent data.</source>
          <target state="translated">이 상황이 수용 가능하지 않으면이 함수를 사용하여 Mnesia 테이블로드 알고리즘의 전략을 대체 할 수 있습니다. 결과적으로 불일치 한 데이터베이스로 인해 일부 트랜잭션 효과가 손실되는 상황이 발생할 수 있지만 일부 응용 프로그램의 경우 일관된 데이터보다 고 가용성이 더 중요합니다.</target>
        </trans-unit>
        <trans-unit id="059c4f891420c8ec95d1abb34b55edc8941662f6" translate="yes" xml:space="preserve">
          <source>If this value is false, then when loading a mib each mib- entry is checked prior to installation of the mib. The purpose of the check is to prevent that the same symbolic mibentry name is used for different oid's.</source>
          <target state="translated">이 값이 false이면 mib를로드 할 때 mib를 설치하기 전에 각 mib 항목을 검사합니다. 이 검사의 목적은 동일한 기호 이름의 이름이 다른 OID에 사용되지 않도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d5be0ef33ffc0742762d89cfb5dcdc57978e4cec" translate="yes" xml:space="preserve">
          <source>If this value is false, then when loading a mib each trap is checked prior to installation of the mib. The purpose of the check is to prevent that the same symbolic trap name is used for different trap's.</source>
          <target state="translated">이 값이 false이면 mib를로드 할 때 mib를 설치하기 전에 각 트랩을 검사합니다. 점검의 목적은 동일한 트랩 이름이 다른 트랩에 사용되지 않도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d93bdc2ebb6849c84f900f395d346a1101af31f5" translate="yes" xml:space="preserve">
          <source>If this was part of a larger pattern, you would not want to recurse the entire pattern, so instead you can use:</source>
          <target state="translated">이것이 더 큰 패턴의 일부인 경우 전체 패턴을 되풀이하고 싶지 않으므로 대신 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="739efd088e9bee0d304554cfa5fdd5c4e61ba305" translate="yes" xml:space="preserve">
          <source>If time correction is disabled, Erlang monotonic time can warp forwards or stop, or even freeze for extended periods of time. There are then no guarantees that the frequency of the Erlang monotonic clock is accurate or stable.</source>
          <target state="translated">시간 수정이 비활성화 된 경우 Erlang 단조 시간은 앞으로 이동하거나 중지하거나 장시간 정지 할 수 있습니다. Erlang 모노 토닉 클록의 주파수가 정확하거나 안정적이라는 보장은 없습니다.</target>
        </trans-unit>
        <trans-unit id="ffd673f8288d651f4732e547bc38b22a211807fc" translate="yes" xml:space="preserve">
          <source>If time correction is disabled, Erlang monotonic time leaps forward if OS system time leaps forward. If OS system time leaps backwards, Erlang monotonic time stops briefly, but it does not freeze for extended periods of time. This as the time offset is changed to align Erlang system time with OS system time.</source>
          <target state="translated">시간 수정이 비활성화 된 경우, OS 시스템 시간이 도약하면 Erlang 단조 시간이 도약합니다. OS 시스템 시간이 거꾸로 증가하면 Erlang 단조 시간이 잠깐 멈추지 만 오랜 시간 동안 멈추지 않습니다. Erlang 시스템 시간을 OS 시스템 시간에 맞추기 위해 시간 오프셋이 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="e95c3e3e415f307880ab62a824dbb61d407166b0" translate="yes" xml:space="preserve">
          <source>If time correction is disabled, changes in OS system time affects the monotonic clock the same way as when the &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">시간 수정이 비활성화 된 경우 OS 시스템 시간의 변경은 &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; 를 사용할 때와 같은 방식으로 단조로운 시계에 영향을줍니다 .</target>
        </trans-unit>
        <trans-unit id="d01b0a13b53f09d09cc8091e67871a996e4027e2" translate="yes" xml:space="preserve">
          <source>If time correction is enabled, adjustments to the Erlang monotonic clock are made to keep its frequency as correct as possible. However, &lt;strong&gt;no&lt;/strong&gt; adjustments are made trying to align Erlang system time and OS system time. That is, during the preliminary phase Erlang system time and OS system time can diverge from each other, and no attempt is made to prevent this.</source>
          <target state="translated">시간 수정이 활성화 된 경우 Erlang 모노 토닉 클록을 조정하여 주파수를 최대한 정확하게 유지합니다. 그러나 Erlang 시스템 시간과 OS 시스템 시간을 조정하려고 조정 &lt;strong&gt;하지 않습니다&lt;/strong&gt; . 즉, 예비 단계에서 Erlang 시스템 시간과 OS 시스템 시간이 서로 다를 수 있으며이를 방지하려는 시도는 없습니다.</target>
        </trans-unit>
        <trans-unit id="d5d7906513f874fdde48593a22b63bd033c683a3" translate="yes" xml:space="preserve">
          <source>If time correction is enabled, the Erlang runtime system makes use of both &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#OS_Monotonic_Time&quot;&gt;OS monotonic time&lt;/a&gt;&lt;/code&gt;, to adjust the frequency of the Erlang monotonic clock. Time correction ensures that &lt;code&gt;&lt;a href=&quot;#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; does not warp and that the frequency is relatively accurate. The type of frequency adjustments depends on the time warp mode used. Section &lt;code&gt;&lt;a href=&quot;#Time_Warp_Modes&quot;&gt;Time Warp Modes&lt;/a&gt;&lt;/code&gt; provides more details.</source>
          <target state="translated">시간 수정이 사용 가능한 경우, Erlang 런타임 시스템은 &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;#OS_Monotonic_Time&quot;&gt;OS monotonic time&lt;/a&gt;&lt;/code&gt; 을 모두 사용 하여 Erlang 단조 클록의 주파수를 조정합니다. 시간 보정을 통해 &lt;code&gt;&lt;a href=&quot;#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; 이 왜곡되지 않고 주파수가 상대적으로 정확합니다. 주파수 조정 유형은 사용 된 타임 워프 모드에 따라 다릅니다. 섹션 &lt;code&gt;&lt;a href=&quot;#Time_Warp_Modes&quot;&gt;Time Warp Modes&lt;/a&gt;&lt;/code&gt; 는 자세한 내용을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="86c57207a0af2011d419b53ca97897d73a612495" translate="yes" xml:space="preserve">
          <source>If time correction is not enabled, Erlang monotonic time freezes when OS system time leaps backwards. The freeze of monotonic time continues until OS system time catches up. The freeze can continue for a long time. When OS system time leaps forwards, Erlang monotonic time also leaps forward.</source>
          <target state="translated">시간 수정을 사용하지 않으면 OS 시스템 시간이 거꾸로 증가하면 Erlang 단조 시간이 정지됩니다. 단조로운 시간의 동결은 OS 시스템 시간이 따라갈 때까지 계속됩니다. 동결은 오랫동안 계속 될 수 있습니다. OS 시스템 시간이 도약 할 때 Erlang 단조 시간도 도약합니다.</target>
        </trans-unit>
        <trans-unit id="ef091f899ba472aeda63ed1965cfed9d0bedc0a4" translate="yes" xml:space="preserve">
          <source>If trace mode is turned on this tells the ODBC driver to write a trace log to the file SQL.LOG that is placed in the current directory of the erlang emulator. This information may be useful if you suspect there might be a bug in the erlang ODBC application, and it might be relevant for you to send this file to our support. Otherwise you will probably not have much use of this.</source>
          <target state="translated">추적 모드가 켜져 있으면 ODBC 드라이버가 erlang 에뮬레이터의 현재 디렉토리에있는 SQL.LOG 파일에 추적 로그를 쓰도록 지시합니다. 이 정보는 erlang ODBC 응용 프로그램에 버그가 있다고 생각되는 경우 유용 할 수 있으며이 파일을 지원 부서에 보내는 것이 관련 될 수 있습니다. 그렇지 않으면 아마도 이것을 많이 사용하지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="06cb7989133609c0050ffc5dbb44bd39095de5a4" translate="yes" xml:space="preserve">
          <source>If tracing could be enabled for &lt;code&gt;P&lt;/code&gt; and all processes in &lt;code&gt;Rootset&lt;/code&gt;, the function returns &lt;code&gt;{ok,Value}&lt;/code&gt; when &lt;code&gt;Fun()&lt;/code&gt;/&lt;code&gt;apply&lt;/code&gt; returns with the value &lt;code&gt;Value&lt;/code&gt;, or &lt;code&gt;{error,Reason}&lt;/code&gt; if &lt;code&gt;Fun()&lt;/code&gt;/&lt;code&gt;apply&lt;/code&gt; fails with exit reason &lt;code&gt;Reason&lt;/code&gt;. Otherwise it returns &lt;code&gt;{error, Reason}&lt;/code&gt; immediately.</source>
          <target state="translated">추적하는 것이 가능하게 할 수있는 경우 &lt;code&gt;P&lt;/code&gt; 와의 모든 프로세스 &lt;code&gt;Rootset&lt;/code&gt; 는 , 함수가 반환 &lt;code&gt;{ok,Value}&lt;/code&gt; &lt;code&gt;Fun()&lt;/code&gt; / &lt;code&gt;apply&lt;/code&gt; 값으로 반환 &lt;code&gt;Value&lt;/code&gt; , 또는 &lt;code&gt;{error,Reason}&lt;/code&gt; 하면 &lt;code&gt;Fun()&lt;/code&gt; / &lt;code&gt;apply&lt;/code&gt; 종료 이유 실패 &lt;code&gt;Reason&lt;/code&gt; . 그렇지 않으면 즉시 &lt;code&gt;{error, Reason}&lt;/code&gt; 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="171abc361e25e3e1820951c40db50f386bc4e18d" translate="yes" xml:space="preserve">
          <source>If true, use the server's preference for ECC curve selection. If false (the default), use the client's preference.</source>
          <target state="translated">true 인 경우 ECC 곡선 선택에 서버의 환경 설정을 사용하십시오. false (기본값) 인 경우 클라이언트 환경 설정을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f6448c429179ffe9a0559b10e022f36f7d57c48b" translate="yes" xml:space="preserve">
          <source>If true, use the server's preference for cipher selection. If false (the default), use the client's preference.</source>
          <target state="translated">true이면 암호 선택에 서버의 환경 설정을 사용하십시오. false (기본값) 인 경우 클라이언트 환경 설정을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="93560debed8026dcf2a2983b09444126fc93994e" translate="yes" xml:space="preserve">
          <source>If two &lt;code&gt;Dates&lt;/code&gt; are specified, reports that occurred between those dates are returned.</source>
          <target state="translated">두 개의 &lt;code&gt;Dates&lt;/code&gt; 를 지정하면 해당 날짜 사이에 발생한 보고서가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="33b891be28a40228827989eecbc682bd1e8b9bf9" translate="yes" xml:space="preserve">
          <source>If two matching keys are declared, the latter key takes precedence.</source>
          <target state="translated">두 개의 일치하는 키가 선언되면 후자의 키가 우선합니다.</target>
        </trans-unit>
        <trans-unit id="67258d8af06879035a6caf89796f47f253a79805" translate="yes" xml:space="preserve">
          <source>If two processes open the same table by giving the same name and arguments, the table has two users. If one user closes the table, it remains open until the second user closes it.</source>
          <target state="translated">두 개의 프로세스가 동일한 이름과 인수를 제공하여 동일한 테이블을 열면 테이블에 두 명의 사용자가 있습니다. 한 사용자가 테이블을 닫으면 두 번째 사용자가 닫을 때까지 테이블이 열린 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="2c7260077a6430e57fb912e3299409f44a7a3f23" translate="yes" xml:space="preserve">
          <source>If two processes perform &lt;code&gt;mnesia:dirty_update_counter/3&lt;/code&gt; simultaneously, both updates take effect without the risk of losing one of the updates. The new value &lt;code&gt;NewVal&lt;/code&gt; of the counter is returned.</source>
          <target state="translated">두 프로세스가 &lt;code&gt;mnesia:dirty_update_counter/3&lt;/code&gt; 를 동시에 수행하는 경우 두 업데이트는 업데이트 중 하나를 잃을 위험없이 적용됩니다. 카운터 의 새로운 값 &lt;code&gt;NewVal&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b5c7e523459e9f766dca300b6ab1c5e2e9c17d90" translate="yes" xml:space="preserve">
          <source>If used on the top level in a guard, it tests whether the argument is a floating point number; for clarity, use &lt;code&gt;&lt;a href=&quot;#is_float-1&quot;&gt;is_float/1&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">가드의 최상위 레벨에서 사용되는 경우 인수가 부동 소수점 숫자인지 여부를 테스트합니다. 명확성을 위해 &lt;code&gt;&lt;a href=&quot;#is_float-1&quot;&gt;is_float/1&lt;/a&gt;&lt;/code&gt; 을 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c1158bf11097606b6592798bf3682a97d2961056" translate="yes" xml:space="preserve">
          <source>If verification is turned on and the file was written with option &lt;code&gt;{extended_info, [md5sum]}&lt;/code&gt;, reading the file is slower and consumes radically more CPU time than otherwise.</source>
          <target state="translated">확인이 설정되어 있고 파일이 &lt;code&gt;{extended_info, [md5sum]}&lt;/code&gt; 옵션으로 작성된 경우, 파일 읽기 속도가 느리고 그렇지 않은 경우보다 훨씬 많은 CPU 시간을 소비합니다.</target>
        </trans-unit>
        <trans-unit id="79df61d77a356cef20daff35817557c31ea1feae" translate="yes" xml:space="preserve">
          <source>If warnings are turned on (option &lt;code&gt;report_warnings&lt;/code&gt; described earlier), the following options control what type of warnings that are generated.  Except from &lt;code id=&quot;erl_lint_options&quot;&gt;{warn_format,Verbosity}&lt;/code&gt;, the following options have two forms:</source>
          <target state="translated">경고가 설정되어있는 경우 ( &lt;code&gt;report_warnings&lt;/code&gt; 설명한 옵션 report_warnings ) 다음 옵션은 생성되는 경고 유형을 제어합니다. &lt;code id=&quot;erl_lint_options&quot;&gt;{warn_format,Verbosity}&lt;/code&gt; 를 제외하고 다음 옵션에는 두 가지 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="46f6514af342c03660ff3a127d8c0abce6e94d29" translate="yes" xml:space="preserve">
          <source>If we are connected (and if the connection handle is not &lt;code&gt;NULL&lt;/code&gt;), we log out from the database. We need to check if we should encode an &lt;code&gt;'ok'&lt;/code&gt;, as we can get here from function &lt;code&gt;stop&lt;/code&gt;, which does not return data to the emulator:</source>
          <target state="translated">연결되어 있고 연결 핸들이 &lt;code&gt;NULL&lt;/code&gt; 이 아닌 경우 데이터베이스에서 로그 아웃합니다. 에뮬레이터에 데이터를 반환하지 않는 함수 &lt;code&gt;stop&lt;/code&gt; 에서 얻을 수 있으므로 &lt;code&gt;'ok'&lt;/code&gt; 인코딩해야하는지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3e3531248524d3e767663c5b51a2a6884e4678a8" translate="yes" xml:space="preserve">
          <source>If we are not at security-level &lt;code&gt;noAuthNoPriv&lt;/code&gt;, this could be complicated, since the agent will then continue with stage 2, before which the usm-related updates must be done.</source>
          <target state="translated">보안 레벨 &lt;code&gt;noAuthNoPriv&lt;/code&gt; 에 있지 않으면 에이전트가 2 단계를 계속 수행하기 전에 usm 관련 업데이트를 수행해야하기 때문에 복잡 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d4840bdbaaa7e01cbfc9ee43e1a031173374de2" translate="yes" xml:space="preserve">
          <source>If we are not connecting, we wait for results from a &lt;code&gt;PQsendQuery&lt;/code&gt;, so we get the result and return it. The encoding is done with the same functions as in the earlier example.</source>
          <target state="translated">연결하지 않으면 &lt;code&gt;PQsendQuery&lt;/code&gt; 에서 결과를 기다리 므로 결과를 가져 와서 반환합니다. 인코딩은 이전 예제와 동일한 기능으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="337a2fc4e3a2d30ff212f197ed2e62e6a68516c6" translate="yes" xml:space="preserve">
          <source>If we are sure that this kind of situation cannot ensue, we may specify the involved modules as &quot;safe&quot;, and all calls between them will become local. Note that if the target module itself is specified as safe, &quot;remote&quot; calls to itself will be turned into local calls. This would destroy the code replacement properties of e.g. a typical server loop.</source>
          <target state="translated">이러한 상황이 발생할 수 없다고 확신하는 경우 관련 모듈을 &quot;안전한&quot;것으로 지정할 수 있으며 이들 사이의 모든 호출은 로컬이됩니다. 대상 모듈 자체가 안전한 것으로 지정되면 &quot;원격&quot;자체 호출이 로컬 호출로 바뀝니다. 이것은 전형적인 서버 루프의 코드 대체 속성을 파괴합니다.</target>
        </trans-unit>
        <trans-unit id="ea9c359ef122e371e6ca40c1302512863ec587e1" translate="yes" xml:space="preserve">
          <source>If we have a result from a connect, indicated by having data in the &lt;code&gt;x&lt;/code&gt; buffer, we no longer need to select on output (&lt;code&gt;ready_output&lt;/code&gt;), so we remove this by calling &lt;code&gt;driver_select&lt;/code&gt;.</source>
          <target state="translated">우리는 커넥트 결과가있는 경우에 데이터를 표시함으로써 &lt;code&gt;x&lt;/code&gt; 버퍼 출력 (우리의 선택이 더 이상 필요 &lt;code&gt;ready_output&lt;/code&gt; 우리는 호출이 제거되도록) &lt;code&gt;driver_select&lt;/code&gt; 를 .</target>
        </trans-unit>
        <trans-unit id="dce67181f9dec94f63a49d2d4f68889369954004" translate="yes" xml:space="preserve">
          <source>If we now add the filter to the running &lt;code&gt;Collector&lt;/code&gt;:</source>
          <target state="translated">이제 필터를 실행중인 &lt;code&gt;Collector&lt;/code&gt; 추가하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f3ffad68dd3aaa3ee27c0008bb99580f0a57f8f2" translate="yes" xml:space="preserve">
          <source>If we now send a message from the shell on the node &lt;code&gt;ant@stack&lt;/code&gt;, where all sends from the shell are traced:</source>
          <target state="translated">&lt;code&gt;ant@stack&lt;/code&gt; 노드의 쉘에서 메시지를 보내면 쉘에서 보내는 모든 메시지가 추적됩니다.</target>
        </trans-unit>
        <trans-unit id="71461022e8b1964785f01d0fea411534999fdbfe" translate="yes" xml:space="preserve">
          <source>If we run it like this: &lt;code&gt;motorcycles2html:process_to_file('result_xs.html', 'motorcycles2.xml').&lt;/code&gt; The result will be &lt;code&gt;result_xs.html&lt;/code&gt;. When the input file is of the same structure as the previous &quot;motorcycles&quot; XML files but it has a little more 'bike' elements and the 'manufacturer' elements are not in order.</source>
          <target state="translated">다음과 같이 실행하면 &lt;code&gt;motorcycles2html:process_to_file('result_xs.html', 'motorcycles2.xml').&lt;/code&gt; 결과는 &lt;code&gt;result_xs.html&lt;/code&gt; 입니다. 입력 파일이 이전 &quot;오토바이&quot;XML 파일과 동일한 구조이지만 '자전거'요소가 더 많고 '제조업체'요소가 순서가 아닌 경우</target>
        </trans-unit>
        <trans-unit id="8b8886cb75b357ed32d80a6eee9f949abb29be57" translate="yes" xml:space="preserve">
          <source>If x &lt;code&gt;F&lt;/code&gt; y and y &lt;code&gt;F&lt;/code&gt; x, then x = y (&lt;code&gt;F&lt;/code&gt; is antisymmetric).</source>
          <target state="translated">x &lt;code&gt;F&lt;/code&gt; y 및 y &lt;code&gt;F&lt;/code&gt; x이면 x = y ( &lt;code&gt;F&lt;/code&gt; 는 비대칭 임)</target>
        </trans-unit>
        <trans-unit id="6b92816031334184272820ee86857aab64402f87" translate="yes" xml:space="preserve">
          <source>If x &lt;code&gt;F&lt;/code&gt; y and y &lt;code&gt;F&lt;/code&gt; z, then x &lt;code&gt;F&lt;/code&gt; z (&lt;code&gt;F&lt;/code&gt; is transitive).</source>
          <target state="translated">x &lt;code&gt;F&lt;/code&gt; y 및 y &lt;code&gt;F&lt;/code&gt; z 인 경우 x &lt;code&gt;F&lt;/code&gt; z ( &lt;code&gt;F&lt;/code&gt; 는 전이).</target>
        </trans-unit>
        <trans-unit id="efd0edc2f934fb0989fdc0ef3a93bc0dc5861448" translate="yes" xml:space="preserve">
          <source>If x is a family from I to X, then x[i] denotes the value of the function at index i. The notation &quot;a family in X&quot; is used for such a family.</source>
          <target state="translated">x가 I에서 X까지의 패밀리 인 경우 x [i]는 인덱스 i의 함수 값을 나타냅니다. &quot;X의 패밀리&quot;라는 표기법은 이러한 패밀리에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0460fccf75563cd103af603f5ff0df7bee5d29db" translate="yes" xml:space="preserve">
          <source>If x is a family of subsets of X, the union of the range of x is called the &lt;strong&gt;union of the family&lt;/strong&gt; x.</source>
          <target state="translated">x가 X의 부분 집합 계열 인 경우 x 범위의 합집합을 x의 &lt;strong&gt;합집합&lt;/strong&gt; 이라고합니다 .</target>
        </trans-unit>
        <trans-unit id="7f8b7662a485e830efd5dc24b42b4f66a23c755f" translate="yes" xml:space="preserve">
          <source>If x is non-empty (the index set is non-empty), the &lt;strong&gt;intersection of the family&lt;/strong&gt; x is the intersection of the range of x.</source>
          <target state="translated">x가 비어 있지 않은 경우 (인덱스 세트가 비어 있지 않은 경우) x의 &lt;strong&gt;교집합은&lt;/strong&gt; x 범위의 교집합입니다.</target>
        </trans-unit>
        <trans-unit id="a742ef9245b7658b6ec0801964c4c0ea9a5eb508" translate="yes" xml:space="preserve">
          <source>If you &lt;strong&gt;must&lt;/strong&gt; return all data stored in the Ets table, you can use &lt;code&gt;ets:tab2list/1&lt;/code&gt;. However, usually you are only interested in a subset of the information in which case &lt;code&gt;ets:tab2list/1&lt;/code&gt; is expensive. If you only want to extract one field from each record, for example, the age of every person, then:</source>
          <target state="translated">Ets 테이블에 저장된 모든 데이터 &lt;strong&gt;를&lt;/strong&gt; 반환 &lt;strong&gt;해야하는&lt;/strong&gt; 경우 &lt;code&gt;ets:tab2list/1&lt;/code&gt; 을 사용할 수 있습니다 . 그러나 일반적으로 &lt;code&gt;ets:tab2list/1&lt;/code&gt; 이 비싼 정보의 하위 집합에만 관심 이 있습니다. 각 레코드에서 하나의 필드 (예 : 모든 사람의 나이) 만 추출하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="6695ce447118dd0e7ea4d4f74aa540c19c250112" translate="yes" xml:space="preserve">
          <source>If you are building Erlang/OTP from git you will need to run &lt;code&gt;./otp_build autoconf&lt;/code&gt; to generate the configure scripts.</source>
          <target state="translated">git에서 Erlang / OTP를 빌드하는 경우 &lt;code&gt;./otp_build autoconf&lt;/code&gt; 를 실행 하여 구성 스크립트를 생성해야합니다.</target>
        </trans-unit>
        <trans-unit id="da52602929c7fc0635b8326b6c38bbbd66979f5f" translate="yes" xml:space="preserve">
          <source>If you are building a 64 bit version of Erlang, you should set up PATHs etc a little differently. We have two templates to make things work in both Cygwin and MSYS but needs editing to work with MSYS2 (see the comments in the script). The following one is for 32 bits:</source>
          <target state="translated">Erlang의 64 비트 버전을 빌드하는 경우 PATH 등을 조금 다르게 설정해야합니다. Cygwin과 MSYS에서 작동하도록 두 가지 템플릿이 있지만 MSYS2와 작동하려면 편집해야합니다 (스크립트의 주석 참조). 다음은 32 비트 용입니다.</target>
        </trans-unit>
        <trans-unit id="28fd7cee740e8f1e008d545c9af326623f6f2da9" translate="yes" xml:space="preserve">
          <source>If you are building a 64 bit version, you supply &lt;code&gt;otp_build&lt;/code&gt; with an architecture parameter:</source>
          <target state="translated">64 비트 버전을 빌드하는 경우 아키텍처 매개 변수와 함께 &lt;code&gt;otp_build&lt;/code&gt; 를 제공 하십시오 .</target>
        </trans-unit>
        <trans-unit id="11d01d76312a6e1beca90d30f576e8ba920e3045" translate="yes" xml:space="preserve">
          <source>If you are building in &lt;code&gt;git&lt;/code&gt; you first need to generate the &lt;code&gt;configure&lt;/code&gt; scripts:</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; 에서 빌드하는 경우 먼저 &lt;code&gt;configure&lt;/code&gt; 스크립트 를 생성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="08ca29e8fc627bd8865e44b098a309f0c218de8e" translate="yes" xml:space="preserve">
          <source>If you are building in Git, you want to read the &lt;code&gt;&lt;a href=&quot;install#How-to-Build-and-Install-ErlangOTP&quot;&gt;Building in Git&lt;/a&gt;&lt;/code&gt; section of &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; before proceeding.</source>
          <target state="translated">Git에서 빌드하는 경우 계속하기 전에 &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; 의 &lt;code&gt;&lt;a href=&quot;install#How-to-Build-and-Install-ErlangOTP&quot;&gt;Building in Git&lt;/a&gt;&lt;/code&gt; 에서 빌드 섹션 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="059356cb46cb61018f3078a8c089ba933432567b" translate="yes" xml:space="preserve">
          <source>If you are distributing the source code for your application for other people to compile and run, you probably want to ensure that the code compiles even if EUnit is not available. Like the example in the previous section, you can put the following lines in a common header file:</source>
          <target state="translated">다른 사람들이 컴파일하고 실행할 수 있도록 응용 프로그램의 소스 코드를 배포하는 경우 EUnit을 사용할 수없는 경우에도 코드가 컴파일되도록해야합니다. 이전 섹션의 예와 같이 공통 헤더 파일에 다음 줄을 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f548e035d4acfc541b42547c9972c54765ffd2c" translate="yes" xml:space="preserve">
          <source>If you are executing in a mode where time offset can change, and you want to get the actual Erlang system time when the event occurred, you can save the time offset as a third element in the tuple (the least significant element when comparing three-tuples).</source>
          <target state="translated">시간 오프셋이 변경 될 수있는 모드에서 실행 중이고 이벤트가 발생할 때 실제 Erlang 시스템 시간을 얻으려면 시간 오프셋을 튜플의 세 번째 요소 (세 가지 요소를 비교할 때 가장 중요하지 않은 요소)로 저장할 수 있습니다 튜플).</target>
        </trans-unit>
        <trans-unit id="65eab1decf1d5f02b76e57b9a0f013425229d73c" translate="yes" xml:space="preserve">
          <source>If you are going to build a 64bit Windows version, you should make sure to get MinGW's 64bit gcc installed with Cygwin. It's in one of the development packages.</source>
          <target state="translated">64 비트 Windows 버전을 구축하려는 경우 Cygwin과 함께 MinGW의 64 비트 gcc를 설치해야합니다. 개발 패키지 중 하나에 있습니다.</target>
        </trans-unit>
        <trans-unit id="abcce25aa490a7895d515f9ea238920455b90682" translate="yes" xml:space="preserve">
          <source>If you are interested in Erlang system time at the time when the event occurred, you can also save the time offset before or after saving the events using &lt;code&gt;&lt;a href=&quot;erlang#time_offset-0&quot;&gt;erlang:time_offset/0&lt;/a&gt;&lt;/code&gt;. Erlang monotonic time added with the time offset corresponds to Erlang system time.</source>
          <target state="translated">이벤트가 발생한 시점의 Erlang 시스템 시간에 관심이있는 경우 &lt;code&gt;&lt;a href=&quot;erlang#time_offset-0&quot;&gt;erlang:time_offset/0&lt;/a&gt;&lt;/code&gt; 을 사용하여 이벤트를 저장하기 전후에 시간 오프셋을 저장할 수도 있습니다 . 시간 오프셋과 함께 추가 된 Erlang 단조 시간은 Erlang 시스템 시간에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="6ec4906363d7f3a0f656197645460eb641bfd86b" translate="yes" xml:space="preserve">
          <source>If you are not familiar with Cygwin, MSYS, MSYS2 or a Unix environment, you&amp;rsquo;ll probably need to read up a bit on how that works. There are plenty of documentation about this online.</source>
          <target state="translated">Cygwin, MSYS, MSYS2 또는 Unix 환경에 익숙하지 않은 경우 작동 방식에 대해 약간 읽어 봐야합니다. 이 온라인에 대한 많은 문서가 있습니다.</target>
        </trans-unit>
        <trans-unit id="79e81e9c6f10164072a2c4df28a3214be53b197f" translate="yes" xml:space="preserve">
          <source>If you are not sure that OS system time is correct, set it to a time that is guaranteed to be earlier than actual POSIX time before starting the Erlang runtime system, just to be safe.</source>
          <target state="translated">OS 시스템 시간이 정확한지 확실하지 않으면 Erlang 런타임 시스템을 시작하기 전에 실제 POSIX 시간보다 빠른 시간으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="139e4db82ce537b7ca402bb5648cb80768493b2d" translate="yes" xml:space="preserve">
          <source>If you are only interested in the age of all persons named &quot;Bryan&quot;, then:</source>
          <target state="translated">&quot;Bryan&quot;이라는 모든 사람의 나이에만 관심이 있다면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="a4b3fb25184745a8c5de1f41ef693f7c3d65a1fb" translate="yes" xml:space="preserve">
          <source>If you are running on a platform supporting HiPE and if you have not disabled HiPE, you can compile a module into native code like this from the Erlang shell:</source>
          <target state="translated">HiPE를 지원하는 플랫폼에서 실행 중이고 HiPE를 비활성화하지 않은 경우 Erlang 셸에서 다음과 같은 모듈을 네이티브 코드로 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12bada1e7a2afb8d739c0b1c4888bc6d1de99967" translate="yes" xml:space="preserve">
          <source>If you are testing a distributed Erlang application, it is likely that code you want included in the code coverage analysis gets executed on another Erlang node than the one &lt;code&gt;Common Test&lt;/code&gt; is running on. If so, you must specify these other nodes in the cover specification file or add them dynamically to the code coverage set of nodes. For details on the latter, see module &lt;code&gt;&lt;a href=&quot;ct_cover&quot;&gt;ct_cover&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">분산 Erlang 애플리케이션을 테스트하는 경우 코드 적용 범위 분석에 포함하려는 코드가 &lt;code&gt;Common Test&lt;/code&gt; 가 실행되는 것과 다른 Erlang 노드에서 실행될 수 있습니다. 그렇다면 표지 스펙 파일에서 이러한 다른 노드를 지정하거나 노드를 코드 적용 범위 세트에 동적으로 추가해야합니다. 후자에 대한 자세한 내용은 &lt;code&gt;&lt;a href=&quot;ct_cover&quot;&gt;ct_cover&lt;/a&gt;&lt;/code&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c864b6e67ea1285ed3a001c19cfbf05fe7b8b75d" translate="yes" xml:space="preserve">
          <source>If you are unsure whether you have freed the terms properly, you can use the following function to see the status of the fixed term allocator:</source>
          <target state="translated">용어를 올바르게 해제했는지 확실하지 않은 경우 다음 기능을 사용하여 고정 용어 할당 자의 상태를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="785964c082f500e973ee23af1227a47d2e13719e" translate="yes" xml:space="preserve">
          <source>If you can edit and recompile the source code, it is convenient to insert &lt;code&gt;fprof:trace(start)&lt;/code&gt; and &lt;code&gt;fprof:trace(stop)&lt;/code&gt; before and after the code to be profiled. All spawned processes are also traced. If you want some other filename than the default try &lt;code&gt;fprof:trace(start, &quot;my_fprof.trace&quot;)&lt;/code&gt;.</source>
          <target state="translated">소스 코드를 편집하고 다시 컴파일 할 수 있으면 프로파일 링 할 코드 전후에 &lt;code&gt;fprof:trace(start)&lt;/code&gt; 및 &lt;code&gt;fprof:trace(stop)&lt;/code&gt; 을 삽입하는 것이 편리합니다 . 생성 된 모든 프로세스도 추적됩니다. 기본값 이외의 다른 파일 이름을 원하면 &lt;code&gt;fprof:trace(start, &quot;my_fprof.trace&quot;)&lt;/code&gt; 시도 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5adefb435e12cfcf7b44d388cd53353f9f445a0" translate="yes" xml:space="preserve">
          <source>If you combine catching exceptions from this function with &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; to avoid that the calling process dies when the call times out, you will have to be prepared to handle a late reply. Note that there is an odd chance to get a late reply even with &lt;code&gt;{dirty_timeout,infinity}&lt;/code&gt; or &lt;code&gt;infinity&lt;/code&gt; for example in the event of network problems. So why not just let the calling process die by not catching the exception?</source>
          <target state="translated">호출이 시간 종료 될 때 호출 프로세스가 종료되는 것을 피하기 &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; 함수의 예외 포착을 {dirty_timeout, T} 와 결합 하면 늦은 응답을 처리 할 준비가되어 있어야합니다. 예를 들어 네트워크 문제가 발생하는 경우 &lt;code&gt;{dirty_timeout,infinity}&lt;/code&gt; 또는 &lt;code&gt;infinity&lt;/code&gt; 를 사용 하더라도 응답이 늦어 질 가능성이 있습니다. 그렇다면 예외를 포착하지 않고 호출 프로세스를 죽이는 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="926494dd9305a4cb191069b2570f8e16c82b75b1" translate="yes" xml:space="preserve">
          <source>If you compare with the code you will see there also that &lt;code&gt;foo:create_file_slow/3&lt;/code&gt; was called only from &lt;code&gt;foo:create_file_slow/2&lt;/code&gt; and itself, and called only &lt;code&gt;file:write/2&lt;/code&gt;, note the number of calls to &lt;code&gt;file:write/2&lt;/code&gt;. But here we see that &lt;code&gt;suspend&lt;/code&gt; was called a few times. This is a pseudo function that indicates that the process was suspended while executing in &lt;code&gt;foo:create_file_slow/3&lt;/code&gt;, and since there is no &lt;code&gt;receive&lt;/code&gt; or &lt;code&gt;erlang:yield/0&lt;/code&gt; in the code, it must be Erlang scheduling suspensions, or the trace file driver compensating for large file write operations (these are regarded as a schedule out followed by a schedule in to the same process).</source>
          <target state="translated">코드와 비교하면 &lt;code&gt;foo:create_file_slow/3&lt;/code&gt; 가 &lt;code&gt;foo:create_file_slow/2&lt;/code&gt; 에서 자체적 으로 호출되고 &lt;code&gt;file:write/2&lt;/code&gt; 만 호출 된 경우 &lt;code&gt;file:write/2&lt;/code&gt; 에 대한 호출 수를 확인 하십시오 . 그러나 여기서는 &lt;code&gt;suspend&lt;/code&gt; 이 몇 번 호출 되었다는 것을 알 수 있습니다. 에서 실행하는 동안이 프로세스가 중단되었음을 나타냅니다 유사 기능입니다 &lt;code&gt;foo:create_file_slow/3&lt;/code&gt; 와 있기 때문에 더 &lt;code&gt;receive&lt;/code&gt; 또는 &lt;code&gt;erlang:yield/0&lt;/code&gt; 코드에서, 그것은 얼랑 스케줄링 현탁액, 또는 추적 파일 드라이버 보상해야 대용량 파일 쓰기 작업의 경우 (이는 동일한 프로세스의 일정이 뒤 따르는 일정으로 간주 됨).</target>
        </trans-unit>
        <trans-unit id="4da979d104276d1b284d0d0ed5628a6c4ba8264c" translate="yes" xml:space="preserve">
          <source>If you compile with the following, the result is one merged module &lt;code&gt;MyModule.erl&lt;/code&gt; with the generated code from the three ASN.1 specs:</source>
          <target state="translated">다음을 사용하여 컴파일 하면 세 개의 ASN.1 사양에서 생성 된 코드 가 포함 된 하나의 병합 된 모듈 &lt;code&gt;MyModule.erl&lt;/code&gt; 이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="34553151842c57d51c700a2176df03643a8e288f" translate="yes" xml:space="preserve">
          <source>If you decide not to run the test case after all, return &lt;code&gt;{skip,Reason}&lt;/code&gt;. &lt;code&gt;Reason&lt;/code&gt; is then printed in field &lt;code&gt;Comment&lt;/code&gt; on the HTML result page.</source>
          <target state="translated">테스트 케이스를 실행하지 않기로 결정한 경우 &lt;code&gt;{skip,Reason}&lt;/code&gt; 을 리턴하십시오 . 그런 다음 HTML 결과 페이지의 &lt;code&gt;Comment&lt;/code&gt; 필드에 &lt;code&gt;Reason&lt;/code&gt; 가 인쇄됩니다 .</target>
        </trans-unit>
        <trans-unit id="32b5510ec0b67d605ceab6963978d04cd1ab40d6" translate="yes" xml:space="preserve">
          <source>If you develop linked-in drivers (shared library) you need to link using &lt;code&gt;gcc&lt;/code&gt; and the flags &lt;code&gt;-bundle -flat_namespace -undefined suppress&lt;/code&gt;. You also include &lt;code&gt;-fno-common&lt;/code&gt; in &lt;code&gt;CFLAGS&lt;/code&gt; when compiling. Use &lt;code&gt;.so&lt;/code&gt; as the library suffix.</source>
          <target state="translated">링크 된 드라이버 (공유 라이브러리)를 개발하는 경우 &lt;code&gt;gcc&lt;/code&gt; 및 &lt;code&gt;-bundle -flat_namespace -undefined suppress&lt;/code&gt; 플래그를 사용하여 링크해야합니다 . 또한 컴파일 할 때 &lt;code&gt;CFLAGS&lt;/code&gt; 에 &lt;code&gt;-fno-common&lt;/code&gt; 을 포함 시킵니다. 라이브러리 접미사로 &lt;code&gt;.so&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="9af22866bc3303d3e5e15bb7da268298a32e5b69" translate="yes" xml:space="preserve">
          <source>If you do not have a complete binary of the file content, you can instead chunk through the file and check part by part. The return-tuple &lt;code&gt;{incomplete,Decoded,Rest}&lt;/code&gt; from function &lt;code&gt;unicode:characters_to_binary/1,2,3&lt;/code&gt; comes in handy. The incomplete rest from one chunk of data read from the file is prepended to the next chunk and we therefore avoid the problem of character boundaries when reading chunks of bytes in UTF-8 encoding:</source>
          <target state="translated">파일 내용의 완전한 이진 파일이없는 경우 대신 파일을 청크하고 부분적으로 확인할 수 있습니다. 함수 &lt;code&gt;unicode:characters_to_binary/1,2,3&lt;/code&gt; 의 리턴 튜플 &lt;code&gt;{incomplete,Decoded,Rest}&lt;/code&gt; 이 편리합니다. 파일에서 읽은 하나의 데이터 청크에서 불완전한 휴식은 다음 청크 앞에 추가되므로 UTF-8 인코딩으로 바이트 청크를 읽을 때 문자 경계 문제를 피합니다.</target>
        </trans-unit>
        <trans-unit id="45fdd3948b5b8d018a253264434e3fdb3b1f2c9e" translate="yes" xml:space="preserve">
          <source>If you do not need to reallocate or keep the data alive across NIF calls, consider using &lt;code&gt;&lt;a href=&quot;#enif_make_new_binary&quot;&gt;enif_make_new_binary&lt;/a&gt;&lt;/code&gt; instead as it will allocate small binaries on the process heap when possible.</source>
          <target state="translated">NIF 호출에서 데이터를 재 할당하거나 유지할 필요가없는 경우 가능한 경우 프로세스 힙에 작은 바이너리를 할당하므로 &lt;code&gt;&lt;a href=&quot;#enif_make_new_binary&quot;&gt;enif_make_new_binary&lt;/a&gt;&lt;/code&gt; 를 대신 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="5226c0c04d7fd8e63c97c31f497edc30ae0498fc" translate="yes" xml:space="preserve">
          <source>If you don't use X-windows, you might want to setup the Windows console window by selecting properties in the console system menu (upper left corner of the window, the Cygwin icon in the title bar). Especially setting a larger screen buffer size (lines) is useful as it gets you a scrollbar so you can see whatever error messages that might appear.</source>
          <target state="translated">X-windows를 사용하지 않는 경우, 콘솔 시스템 메뉴 (창 왼쪽 상단, 제목 표시 줄의 Cygwin 아이콘)에서 특성을 선택하여 Windows 콘솔 창을 설정할 수 있습니다. 특히 더 큰 화면 버퍼 크기 (라인)를 설정하면 스크롤 막대가 표시되어 나타날 수있는 오류 메시지를 볼 수 있으므로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="c1c77e78076b1c45254b83e1685877227a58e370" translate="yes" xml:space="preserve">
          <source>If you explicitly want to set the program name in the argument vector, option &lt;code&gt;arg0&lt;/code&gt; can be used.</source>
          <target state="translated">인수 벡터에서 프로그램 이름을 명시 적으로 설정하려면 옵션 &lt;code&gt;arg0&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f75fbec32c4686a4e8aec99dc351f8983616950b" translate="yes" xml:space="preserve">
          <source>If you fail to clear thread-specific data in an emulator thread before letting it out of your control, you might never be able to clear this data with later unexpected errors in other parts of the system as a result.</source>
          <target state="translated">제어에서 벗어나기 전에 에뮬레이터 스레드에서 스레드 특정 데이터를 지우지 못하면 결과적으로 시스템의 다른 부분에서 예기치 않은 오류로이 데이터를 지우지 못할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="09268e829b124cfcf4bd5de6e9875906ac8513d6" translate="yes" xml:space="preserve">
          <source>If you feel comfortable with the environment and build system, and have all the necessary tools, you have a great opportunity to make the Erlang/OTP distribution for Windows better. Please submit any suggestions to our &lt;code&gt;&lt;a href=&quot;http://bugs.erlang.org&quot;&gt;JIRA&lt;/a&gt;&lt;/code&gt; and patches to our &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp&quot;&gt;git project&lt;/a&gt;&lt;/code&gt; to let them find their way into the next version of Erlang. If making changes to the build system (like makefiles etc) please bear in mind that the same makefiles are used on Unix/VxWorks, so that your changes don't break other platforms. That of course goes for C-code too; system specific code resides in the &lt;code&gt;$ERL_TOP/erts/emulator/sys/win32&lt;/code&gt; and &lt;code&gt;$ERL_TOP/erts/etc/win32&lt;/code&gt; directories mostly. The &lt;code&gt;$ERL_TOP/erts/emulator/beam&lt;/code&gt; directory is for common code.</source>
          <target state="translated">환경에 익숙하고 시스템을 구축하고 필요한 모든 도구를 갖추었다면 Windows 용 Erlang / OTP 배포를 개선 할 수있는 좋은 기회입니다. &lt;code&gt;&lt;a href=&quot;http://bugs.erlang.org&quot;&gt;JIRA&lt;/a&gt;&lt;/code&gt; 에 대한 제안 사항 과 &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp&quot;&gt;git project&lt;/a&gt;&lt;/code&gt; 에 대한 패치를 제출 하여 다음 버전의 Erlang으로 안내하십시오. makefile과 같은 빌드 시스템을 변경하는 경우 Unix / VxWorks에서 동일한 makefile이 사용되므로 변경 사항으로 인해 다른 플랫폼이 손상되지 않습니다. 물론 C 코드도 마찬가지입니다. 시스템 특정 코드는 주로 &lt;code&gt;$ERL_TOP/erts/emulator/sys/win32&lt;/code&gt; 및 &lt;code&gt;$ERL_TOP/erts/etc/win32&lt;/code&gt; 디렉토리에 있습니다. &lt;code&gt;$ERL_TOP/erts/emulator/beam&lt;/code&gt; 디렉토리는 공통 코드입니다.</target>
        </trans-unit>
        <trans-unit id="6c7e44c265926484064ef3996081db76eb5b3893" translate="yes" xml:space="preserve">
          <source>If you frequently do a lookup on a field that is not the key of the table, you lose performance using &quot;mnesia:select/match_object&quot; as this function traverses the whole table. You can create a secondary index instead and use &quot;mnesia:index_read&quot; to get faster access, however this requires more memory.</source>
          <target state="translated">테이블의 키가 아닌 필드를 자주 조회하는 경우이 함수가 전체 테이블을 통과하므로 &quot;mnesia : select / match_object&quot;를 사용하면 성능이 저하됩니다. 대신 보조 인덱스를 만들고 &quot;mnesia : index_read&quot;를 사용하여 더 빠르게 액세스 할 수 있지만 더 많은 메모리가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d250cbc8ce8f103748e70e8012ae4812e69e6b6e" translate="yes" xml:space="preserve">
          <source>If you got a public key &lt;code&gt;PubKey&lt;/code&gt; and a related list of attributes &lt;code&gt;Attributes&lt;/code&gt; as returned by &lt;code&gt;ssh_decode/2&lt;/code&gt;, you can create a new SSH file, for example:</source>
          <target state="translated">공개 키 &lt;code&gt;PubKey&lt;/code&gt; 및 &lt;code&gt;ssh_decode/2&lt;/code&gt; 에서 리턴 한 속성 &lt;code&gt;Attributes&lt;/code&gt; 관련 목록이 있는 경우 새 SSH 파일을 작성할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d64558ffe085d81fb4c2a7370d51643970e9b47a" translate="yes" xml:space="preserve">
          <source>If you hack the emulator, you can build the emulator executable by standing in &lt;code&gt;$ERL_TOP/erts/emulator&lt;/code&gt; and do a simple</source>
          <target state="translated">에뮬레이터를 해킹하면 &lt;code&gt;$ERL_TOP/erts/emulator&lt;/code&gt; emulator에 서서 에뮬레이터 실행 파일을 빌드하고 간단한 작업을 수행 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="57dee92dc02000c0c82e5fb9e2da62997a25dbd7" translate="yes" xml:space="preserve">
          <source>If you have Xcode 4.3, or later, you will also need to download &quot;Command Line Tools&quot; via the Downloads preference pane in Xcode.</source>
          <target state="translated">Xcode 4.3 이상이있는 경우 Xcode의 다운로드 환경 설정 창을 통해 &quot;명령 줄 도구&quot;를 다운로드해야합니다.</target>
        </trans-unit>
        <trans-unit id="709a85ba273f4493deb19337d8dab86c17b51b44" translate="yes" xml:space="preserve">
          <source>If you have a list of lists &lt;code&gt;L = [&quot;I&quot;,&quot;like&quot;,&quot;Erlang&quot;]&lt;/code&gt;, then you can sum the lengths of all the strings in &lt;code&gt;L&lt;/code&gt; as follows:</source>
          <target state="translated">당신은리스트의 목록이있는 경우 &lt;code&gt;L = [&quot;I&quot;,&quot;like&quot;,&quot;Erlang&quot;]&lt;/code&gt; , 당신은 모든 문자열의 길이의 합 수 &lt;code&gt;L&lt;/code&gt; 다음을 :</target>
        </trans-unit>
        <trans-unit id="06562602ec1a77035c75bd6f06f61c39f1543c77" translate="yes" xml:space="preserve">
          <source>If you have added the declaration &lt;code&gt;-include_lib(&quot;eunit/include/eunit.hrl&quot;)&lt;/code&gt; to your module, as described above, you only need to compile the module, and run the automatically exported function &lt;code&gt;test()&lt;/code&gt;. For example, if your module was named &lt;code&gt;m&lt;/code&gt;, then calling &lt;code&gt;m:test()&lt;/code&gt; will run EUnit on all the tests defined in the module. You do not need to write &lt;code&gt;-export&lt;/code&gt; declarations for the test functions. This is all done by magic.</source>
          <target state="translated">위에서 설명한대로 &lt;code&gt;-include_lib(&quot;eunit/include/eunit.hrl&quot;)&lt;/code&gt; 선언 을 모듈에 추가 한 경우 모듈을 컴파일하고 자동으로 내 보낸 함수 &lt;code&gt;test()&lt;/code&gt; 실행하면됩니다 . 예를 들어, 모듈 이름이 &lt;code&gt;m&lt;/code&gt; 인 경우 &lt;code&gt;m:test()&lt;/code&gt; 를 호출 하면 모듈에 정의 된 모든 테스트에서 EUnit이 실행됩니다. 테스트 함수에 대해 &lt;code&gt;-export&lt;/code&gt; 선언 을 작성할 필요가 없습니다 . 이것은 모두 마술에 의해 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="144f513a5aa39876b81ef2c80a71c2be4b26f4ef" translate="yes" xml:space="preserve">
          <source>If you have installed Erlang/OTP using the &lt;code&gt;install&lt;/code&gt; target, install the documentation using the &lt;code&gt;install-docs&lt;/code&gt; target. Install locations determined by &lt;code&gt;configure&lt;/code&gt; will be used. &lt;code&gt;$DESTDIR&lt;/code&gt; can be used the same way as when doing &lt;code&gt;make install&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; 대상을 사용하여 Erlang / OTP를 설치 한 경우 &lt;code&gt;install-docs&lt;/code&gt; 대상을 사용하여 문서를 설치하십시오 . &lt;code&gt;configure&lt;/code&gt; 에 의해 결정된 설치 위치 가 사용됩니다. &lt;code&gt;$DESTDIR&lt;/code&gt; 은 make install 을 수행 &lt;code&gt;make install&lt;/code&gt; 때와 같은 방식으로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f15d88801e622a2cdd2d2c7fe2a4a670f216ed9a" translate="yes" xml:space="preserve">
          <source>If you have installed Erlang/OTP using the &lt;code&gt;release&lt;/code&gt; target, install the documentation using the &lt;code&gt;release_docs&lt;/code&gt; target. You typically want to use the same &lt;code&gt;RELEASE_ROOT&lt;/code&gt; as when invoking &lt;code&gt;make release&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;release&lt;/code&gt; 대상을 사용하여 Erlang / OTP를 설치 한 경우 &lt;code&gt;release_docs&lt;/code&gt; 대상을 사용하여 문서를 설치하십시오 . 일반적으로 &lt;code&gt;make release&lt;/code&gt; 를 호출 할 때 와 동일한 &lt;code&gt;RELEASE_ROOT&lt;/code&gt; 를 사용하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="56c20a2d676e8cfb31affcccb02e9255a03aa95c" translate="yes" xml:space="preserve">
          <source>If you have installed documentation in the OTP installation, also build the documentation:</source>
          <target state="translated">OTP 설치에 문서를 설치 한 경우 문서도 빌드하십시오.</target>
        </trans-unit>
        <trans-unit id="e2d1684e846a6a2121920a90b95e7857c8b4feb5" translate="yes" xml:space="preserve">
          <source>If you have just built Erlang/OTP in the current source tree, you have already ran &lt;code&gt;configure&lt;/code&gt; and do not need to do this again; otherwise, run &lt;code&gt;configure&lt;/code&gt;.</source>
          <target state="translated">현재 소스 트리에서 Erlang / OTP를 방금 구축 한 경우 이미 &lt;code&gt;configure&lt;/code&gt; 실행 했으므로 다시 수행 할 필요가 없습니다. 그렇지 않으면 &lt;code&gt;configure&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="636ce5c9d1bb03f9748b5bbe5ec2f545e4d839b3" translate="yes" xml:space="preserve">
          <source>If you have many servers in one node and they have some state(s) in their lifetime in which the servers can be expected to idle for a while, and the amount of heap memory all these servers need is a problem, then the memory footprint of a server can be mimimized by hibernating it through &lt;code&gt;proc_lib:hibernate/3&lt;/code&gt;.</source>
          <target state="translated">하나의 노드에 많은 서버가 있고 수명 기간 동안 서버가 잠시 유휴 상태가 될 것으로 예상되는 상태가 있고 이러한 서버에 필요한 힙 메모리의 양에 문제가있는 경우 메모리 풋 프린트 서버의 &lt;code&gt;proc_lib:hibernate/3&lt;/code&gt; 를 통해 최대 절전 모드로 설정하면 서버를 최소화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9cf69c3d3514b68c365fa229d8d36e057061c7ae" translate="yes" xml:space="preserve">
          <source>If you have one function that does the task that you want to profile, and the function returns when the profiling should stop, it is convenient to use &lt;code&gt;fprof:apply(Module, Function, Args)&lt;/code&gt; and related for the tracing step.</source>
          <target state="translated">프로파일 링하려는 작업을 수행하는 하나의 함수가 있고 프로파일 링이 중지 될 때 함수가 반환되는 경우 &lt;code&gt;fprof:apply(Module, Function, Args)&lt;/code&gt; 를 사용하고 추적 단계와 관련된 함수 를 사용하는 것이 편리합니다 .</target>
        </trans-unit>
        <trans-unit id="4add882c433457afa2edf542bb650cc29a895ccb" translate="yes" xml:space="preserve">
          <source>If you have public-key data and want to create a PEM file this can be done by calling functions &lt;code&gt;public_key:pem_entry_encode/2&lt;/code&gt; and &lt;code&gt;pem_encode/1&lt;/code&gt; and saving the result to a file. For example, assume that you have &lt;code&gt;PubKey = 'RSAPublicKey'{}&lt;/code&gt;. Then you can create a PEM-&quot;RSA PUBLIC KEY&quot; file (ASN.1 type &lt;code&gt;'RSAPublicKey'&lt;/code&gt;) or a PEM-&quot;PUBLIC KEY&quot; file (&lt;code&gt;'SubjectPublicKeyInfo'&lt;/code&gt; ASN.1 type).</source>
          <target state="translated">공개 키 데이터가 있고 PEM 파일을 작성하려는 경우 &lt;code&gt;public_key:pem_entry_encode/2&lt;/code&gt; 및 &lt;code&gt;pem_encode/1&lt;/code&gt; 함수를 호출 하고 결과를 파일에 저장하여 수행 할 수 있습니다 . 예를 들어 &lt;code&gt;PubKey = 'RSAPublicKey'{}&lt;/code&gt; 이 있다고 가정하십시오 . 그런 다음 PEM- &quot;RSA PUBLIC KEY&quot;파일 (ASN.1 유형 &lt;code&gt;'RSAPublicKey'&lt;/code&gt; ) 또는 PEM- &quot;PUBLIC KEY&quot;파일 ( &lt;code&gt;'SubjectPublicKeyInfo'&lt;/code&gt; ASN.1 유형)을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bff364d7b744c7c80f16da3e2585cd7454157cd3" translate="yes" xml:space="preserve">
          <source>If you have system configuration data that is neither file-location-dependent nor site-dependent, it can be convenient to create &lt;code&gt;sys.config&lt;/code&gt; early, so it becomes part of the target system tar file created by &lt;code&gt;target_system:create/1&lt;/code&gt;. In fact, if you in the current directory create not only the file &lt;code&gt;mysystem.rel&lt;/code&gt;, but also file &lt;code&gt;sys.config&lt;/code&gt;, the latter file is tacitly put in the appropriate directory.</source>
          <target state="translated">파일 위치 또는 사이트에 의존하지 않는 시스템 구성 데이터가있는 경우 &lt;code&gt;sys.config&lt;/code&gt; 를 일찍 작성하는 것이 편리 하므로 &lt;code&gt;target_system:create/1&lt;/code&gt; 에 의해 작성된 대상 시스템 tar 파일의 일부가됩니다 . 실제로 현재 디렉토리에 &lt;code&gt;mysystem.rel&lt;/code&gt; 파일 뿐만 아니라 &lt;code&gt;sys.config&lt;/code&gt; 파일도 작성 하면 후자의 파일이 암묵적으로 적절한 디렉토리에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="dd12871aeecfcf251ad76c0f1867361b2f02e152" translate="yes" xml:space="preserve">
          <source>If you have your cross compilation configuration in a file, pass it using the &lt;code&gt;--xcomp-conf=&amp;lt;FILE&amp;gt;&lt;/code&gt; command line argument. If not, pass &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt;, &lt;code&gt;--build=&amp;lt;BUILD&amp;gt;&lt;/code&gt;, and the configuration variables using a &lt;code&gt;&amp;lt;VARIABLE&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt; syntax on the command line (same as in (3)). Note that &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;BUILD&amp;gt;&lt;/code&gt; have to be passed one way or the other; either by using &lt;code&gt;erl_xcomp_host=&amp;lt;HOST&amp;gt;&lt;/code&gt; and &lt;code&gt;erl_xcomp_build=&amp;lt;BUILD&amp;gt;&lt;/code&gt; in the configuration file, or by using the &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt;, and &lt;code&gt;--build=&amp;lt;BUILD&amp;gt;&lt;/code&gt; command line arguments.</source>
          <target state="translated">파일에 크로스 컴파일 구성이있는 경우 &lt;code&gt;--xcomp-conf=&amp;lt;FILE&amp;gt;&lt;/code&gt; 명령 줄 인수를 사용하여 전달하십시오 . 그렇지 않은 경우 명령 줄 에서 &lt;code&gt;&amp;lt;VARIABLE&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt; 구문을 사용하여 &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt; , &lt;code&gt;--build=&amp;lt;BUILD&amp;gt;&lt;/code&gt; 및 구성 변수를 전달하십시오 ((3)과 동일). 참고 &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; 와 &lt;code&gt;&amp;lt;BUILD&amp;gt;&lt;/code&gt; 방법은 하나 또는 다른을 전달하는 한, 어느 이용한 &lt;code&gt;erl_xcomp_host=&amp;lt;HOST&amp;gt;&lt;/code&gt; 과 &lt;code&gt;erl_xcomp_build=&amp;lt;BUILD&amp;gt;&lt;/code&gt; 구성 파일, 또는 사용하여 &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt; 및 &lt;code&gt;--build=&amp;lt;BUILD&amp;gt;&lt;/code&gt; 명령 행 인수.</target>
        </trans-unit>
        <trans-unit id="a130450837fa7de4006e06dfdf6e7651f3519c93" translate="yes" xml:space="preserve">
          <source>If you in &lt;code&gt;gen_statem&lt;/code&gt;, for example, postpone an event in one state and then call another state callback of yours, you have not changed states and hence the postponed event is not retried, which is logical but can be confusing.</source>
          <target state="translated">당신이 경우 &lt;code&gt;gen_statem&lt;/code&gt; , 예를 들어, 당신의 다른 상태 콜백을 한 상태에서 이벤트를 연기하고 전화, 당신은 상태를 변경하지 않은 따라서 연기 이벤트는 논리적이지만 혼동 될 수있는 시도되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0b9dac884f6e658e0d27a929573db5f362853b18" translate="yes" xml:space="preserve">
          <source>If you instead receives the XML doc as a string you can parse it by &lt;code&gt;xmerl_scan:string/1&lt;/code&gt;. Both file/2 and string/2 exists where the second argument is a list of options to the parser, see the &lt;code&gt;&lt;a href=&quot;xmerl_scan&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">대신 XML 문서를 문자열로 받으면 &lt;code&gt;xmerl_scan:string/1&lt;/code&gt; 로 구문 분석 할 수 있습니다 . file / 2와 string / 2는 두 번째 인수가 구문 분석기에 대한 옵션 목록 인 경우에 &lt;code&gt;&lt;a href=&quot;xmerl_scan&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt; 하십시오 ( 참조 매뉴얼 참조) .</target>
        </trans-unit>
        <trans-unit id="3677b7b2be331958bb1cd558066c15e2ccbebc50" translate="yes" xml:space="preserve">
          <source>If you know that the binaries you return are always small, you are advised to use driver API calls that do not require a pre-allocated binary, for example, &lt;code&gt;driver_output()&lt;/code&gt; or &lt;code&gt;erl_drv_output_term()&lt;/code&gt;, using the &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; format, to allow the runtime to construct a heap binary.</source>
          <target state="translated">반환하는 바이너리가 항상 작다는 것을 알고 있으면 &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; 형식을 사용하여 사전 할당 된 바이너리가 필요하지 않은 드라이버 API 호출 &lt;code&gt;driver_output()&lt;/code&gt; 예 : driver_output () 또는 &lt;code&gt;erl_drv_output_term()&lt;/code&gt; 을 사용하여 런타임을 허용하는 것이 좋습니다 힙 바이너리를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="ec9a6635ce4a0b540125a17cac3147d60753ebe4" translate="yes" xml:space="preserve">
          <source>If you know the location of the &lt;code&gt;escript&lt;/code&gt; executable, the first line can directly give the path to &lt;code&gt;escript&lt;/code&gt;, for example:</source>
          <target state="translated">당신의 위치를 알고있는 경우 &lt;code&gt;escript&lt;/code&gt; 의 실행을 첫 번째 줄에 직접 경로를 제공 할 수 있습니다 &lt;code&gt;escript&lt;/code&gt; 예를 :</target>
        </trans-unit>
        <trans-unit id="b659d556ba001a4273a3f6f58c5f3fae0a2ecf0c" translate="yes" xml:space="preserve">
          <source>If you leave a mutex locked in an emulator thread when you let the thread out of your control, you will &lt;strong&gt;very likely&lt;/strong&gt; deadlock the whole emulator.</source>
          <target state="translated">당신은 당신이 당신의 통제의 스레드를 할 때 에뮬레이터 스레드에 잠겨 뮤텍스를두면, 당신은 할 &lt;strong&gt;가능성이 높다&lt;/strong&gt; 전체 에뮬레이터를 교착 상태.</target>
        </trans-unit>
        <trans-unit id="1b0a6367d887c72eef350e1e461ed2440088fd89" translate="yes" xml:space="preserve">
          <source>If you leave an rwlock locked in an emulator thread when you let the thread out of your control, you will &lt;strong&gt;very likely&lt;/strong&gt; deadlock the whole emulator.</source>
          <target state="translated">당신은 당신이 당신의 통제의 스레드를 할 때 에뮬레이터 스레드에 잠겨으로 rwlock을두면, 당신은 할 &lt;strong&gt;가능성이 높다&lt;/strong&gt; 전체 에뮬레이터를 교착 상태.</target>
        </trans-unit>
        <trans-unit id="2051d057687b13e60280ea15afa70933db6bc2e6" translate="yes" xml:space="preserve">
          <source>If you must remain compatible with the USTAR tar format, you must ensure file paths being stored are less than 255 bytes in total, with a maximum filename component length of 100 bytes. USTAR uses a header field (prefix) in addition to the name field, and splits file paths longer than 100 bytes into two parts. This split is done on a directory boundary, and is done in such a way to make the best use of the space available in those two fields, but in practice this will often mean that you have less than 255 bytes for a path. &lt;code&gt;erl_tar&lt;/code&gt; will automatically upgrade the format to PAX to handle longer filenames, so this is only an issue if you need to extract the archive with an older implementation of &lt;code&gt;erl_tar&lt;/code&gt; or &lt;code&gt;tar&lt;/code&gt; which does not support PAX. In this case, the PAX headers will be extracted as regular files, and you will need to apply them manually.</source>
          <target state="translated">USTAR tar 형식과의 호환성을 유지해야하는 경우 저장되는 파일 경로가 총 255 바이트 미만이어야하며 최대 파일 이름 구성 요소 길이는 100 바이트입니다. USTAR는 이름 필드 외에 헤더 필드 (접두사)를 사용하고 100 바이트보다 긴 파일 경로를 두 부분으로 분할합니다. 이 분할은 디렉토리 경계에서 수행되며이 두 필드에서 사용 가능한 공간을 최대한 활용하는 방식으로 수행되지만 실제로는 경로에 대해 255 바이트 미만을 의미합니다. &lt;code&gt;erl_tar&lt;/code&gt; 는 더 긴 파일 이름을 처리하기 위해 형식을 PAX로 자동 업그레이드하므로 &lt;code&gt;erl_tar&lt;/code&gt; 또는 &lt;code&gt;tar&lt;/code&gt; 의 이전 구현으로 아카이브를 추출해야하는 경우에만 문제가됩니다.PAX를 지원하지 않는 이 경우 PAX 헤더는 일반 파일로 추출되므로 수동으로 적용해야합니다.</target>
        </trans-unit>
        <trans-unit id="25dcb500f427185c223988b86fbacdec9413c19c" translate="yes" xml:space="preserve">
          <source>If you need all information stored in the Ets table about persons named &quot;Bryan&quot;, then:</source>
          <target state="translated">이름이 &quot;Bryan&quot;인 사람에 대해 Ets 테이블에 저장된 모든 정보가 필요하면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="0103403298226ace2d2d7dda7dc0c9b1cec0d2bd" translate="yes" xml:space="preserve">
          <source>If you need to access a relational database such as &lt;code&gt;sqlserver&lt;/code&gt;, &lt;code&gt;mysql&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt;, &lt;code&gt;oracle&lt;/code&gt;, &lt;code&gt;cybase&lt;/code&gt; etc. from your erlang application using the Erlang ODBC interface is a good way to go about it.</source>
          <target state="translated">Erlang ODBC 인터페이스를 사용하여 erlang 응용 프로그램에서 &lt;code&gt;sqlserver&lt;/code&gt; , &lt;code&gt;mysql&lt;/code&gt; , &lt;code&gt;postgres&lt;/code&gt; , &lt;code&gt;oracle&lt;/code&gt; , &lt;code&gt;cybase&lt;/code&gt; 등과 같은 관계형 데이터베이스에 액세스해야하는 경우이 방법을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="e9153977b046897dff8af7e0a644f81df1265049" translate="yes" xml:space="preserve">
          <source>If you need to cancel a timer because of some other event, you can use &lt;code&gt;erlang:cancel_timer(Tref)&lt;/code&gt;. Note that a time-out message cannot arrive after this, unless you have postponed it before (see the next section), so ensure that you do not accidentally postpone such messages. Also note that a time-out message may have arrived just before you cancelling it, so you may have to read out such a message from the process mailbox depending on the return value from &lt;code&gt;erlang:cancel_timer(Tref)&lt;/code&gt;.</source>
          <target state="translated">다른 이벤트로 인해 타이머를 취소해야하는 경우 &lt;code&gt;erlang:cancel_timer(Tref)&lt;/code&gt; 사용할 수 있습니다 . 시간 초과 메시지는 이전에 연기하지 않은 한 (다음 섹션 참조) 이후에 도착할 수 없으므로 실수로 그러한 메시지를 연기하지 않도록하십시오. 또한 시간 종료 메시지는 취소하기 직전에 도착했을 수 있으므로 &lt;code&gt;erlang:cancel_timer(Tref)&lt;/code&gt; 의 리턴 값에 따라 프로세스 메일 함에서 해당 메시지를 읽어야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="05af26e95eb9bb5371b21575710d131d97fecf50" translate="yes" xml:space="preserve">
          <source>If you need to perform configuration operations to run your test, you can implement configuration functions in your suite. The result from a configuration function is configuration data, or &lt;code&gt;Config&lt;/code&gt;. This is a list of key-value tuples that get passed from the configuration function to the test cases (possibly through configuration functions on &quot;lower level&quot;). The data flow looks as follows:</source>
          <target state="translated">테스트를 실행하기 위해 구성 작업을 수행해야하는 경우 제품군에서 구성 기능을 구현할 수 있습니다. 구성 함수의 결과는 구성 데이터 또는 &lt;code&gt;Config&lt;/code&gt; 입니다. 이것은 구성 함수에서 테스트 케이스로 전달되는 키-값 튜플의 목록입니다 ( &quot;낮은 레벨&quot;의 구성 함수를 통해). 데이터 흐름은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1580293999144403cc43337470ad032b5154d650" translate="yes" xml:space="preserve">
          <source>If you need to use Erlang code that is not &lt;code&gt;&lt;a href=&quot;#Time_Warp_Safe_Code&quot;&gt;time warp safe&lt;/a&gt;&lt;/code&gt;, and you need to start the Erlang runtime system before OS system time has been corrected, you may want to use the single time warp mode.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Time_Warp_Safe_Code&quot;&gt;time warp safe&lt;/a&gt;&lt;/code&gt; 하지 않은 Erlang 코드를 사용해야 하고 OS 시스템 시간이 수정되기 전에 Erlang 런타임 시스템을 시작해야하는 경우 단일 시간 왜곡 모드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e3af53f2c07526824c69b1abdb7517239318228" translate="yes" xml:space="preserve">
          <source>If you need to use thread-specific data in an emulator thread, only have the thread-specific data set while the thread is under your control, and clear the thread-specific data before you let the thread out of your control.</source>
          <target state="translated">에뮬레이터 스레드에서 스레드 특정 데이터를 사용해야하는 경우 스레드가 제어하는 ​​동안 스레드 특정 데이터 만 설정하고 스레드에서 제어를 해제하기 전에 스레드 특정 데이터를 지우십시오.</target>
        </trans-unit>
        <trans-unit id="4f32b6b35644f5b16edce6c4d78753a25d38ebfb" translate="yes" xml:space="preserve">
          <source>If you need to verify the bootstrap beam files match the provided source files, use &lt;code&gt;./otp_build update_primary&lt;/code&gt; to create a new commit that contains differences, if any exist.</source>
          <target state="translated">부트 스트랩 빔 파일이 제공된 소스 파일과 일치하는지 확인해야하는 경우, &lt;code&gt;./otp_build update_primary&lt;/code&gt; 를 사용하여 차이가있는 새 커밋을 작성하십시오 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="a564a81cdbcd1f7df3fcca09ff995949d4ddcb79" translate="yes" xml:space="preserve">
          <source>If you or your system has special requirements please read the &lt;code&gt;Makefile&lt;/code&gt; for additional configuration information.</source>
          <target state="translated">사용자 또는 시스템에 특별한 요구 사항이있는 경우 추가 구성 정보 는 &lt;code&gt;Makefile&lt;/code&gt; 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="c9741cf8a267768b2bd92351adecbc979f0aa0dd" translate="yes" xml:space="preserve">
          <source>If you plan to change code without restarting your system, you must use an external fun (&lt;code&gt;fun Module:Function/Arity&lt;/code&gt;) as function &lt;code&gt;Resolve&lt;/code&gt;. If you use a local fun, you can never replace the code for the module that the fun belongs to.</source>
          <target state="translated">시스템을 다시 시작하지 않고 코드를 변경하려면 &lt;code&gt;Resolve&lt;/code&gt; 함수로 외부 &lt;code&gt;fun Module:Function/Arity&lt;/code&gt; ( fun Module : Function / Arity )을 사용해야 합니다. 로컬 재미를 사용하는 경우 재미가 속한 모듈의 코드를 대체 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3d19108a84a5eb3bb48cef4ccb2f6536e5feabf9" translate="yes" xml:space="preserve">
          <source>If you read back the option value using &lt;code&gt;&lt;a href=&quot;#getopts-2&quot;&gt;getopts/2&lt;/a&gt;&lt;/code&gt; and get no value, the option does not exist in the host operating system. The behavior of both an IPv6 and an IPv4 socket listening on the same port, and for an IPv6 socket getting IPv4 traffic is then no longer predictable.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#getopts-2&quot;&gt;getopts/2&lt;/a&gt;&lt;/code&gt; 를 사용하여 옵션 값을 다시 읽고 값을 가져 오지 않으면 호스트 운영 체제에 옵션이 없습니다. 동일한 포트에서 수신 대기하는 IPv6 및 IPv4 소켓과 IPv4 트래픽을 가져 오는 IPv6 소켓의 동작을 더 이상 예측할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="85b82b7060fb8d9f6ed2cb286e33072d08347f0f" translate="yes" xml:space="preserve">
          <source>If you really, really want to, you may call it &quot;Inga&quot;.</source>
          <target state="translated">정말로, 정말로 원한다면, &quot;Inga&quot;라고 부를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ad8b8f8006dc094fc060a805431e5051049c527" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;call&lt;/code&gt; trace flag, you also have to set a &lt;strong&gt;trace pattern&lt;/strong&gt; for the functions you want to trace:</source>
          <target state="translated">당신은 설정하면 &lt;code&gt;call&lt;/code&gt; 추적 플래그를, 당신은 또한 설정해야 &lt;strong&gt;추적 패턴을&lt;/strong&gt; 추적 할 기능을 :</target>
        </trans-unit>
        <trans-unit id="593fb6e309e5d0f221339df106e191b090ca84ba" translate="yes" xml:space="preserve">
          <source>If you simply want to format a paragraph of plain text, you probably want to use the &lt;code&gt;&lt;a href=&quot;#text_par-2&quot;&gt;text_par/2&lt;/a&gt;&lt;/code&gt; function, as in the following example:</source>
          <target state="translated">단순히 일반 텍스트의 단락을 형식화 하려면 다음 예제와 같이 &lt;code&gt;&lt;a href=&quot;#text_par-2&quot;&gt;text_par/2&lt;/a&gt;&lt;/code&gt; 함수 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="da6562fe0a7c0b54c043b4d0278072613df57ef3" translate="yes" xml:space="preserve">
          <source>If you start this program with &lt;code&gt;code_lock:start([17])&lt;/code&gt; you can unlock with &lt;code&gt;code_lock:down(17), code_lock:up(17).&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;code_lock:start([17])&lt;/code&gt; 로이 프로그램을 시작하면 &lt;code&gt;code_lock:down(17), code_lock:up(17).&lt;/code&gt; 잠금을 해제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cace6db1c9825fe249b9c220bf578982c6ffbbda" translate="yes" xml:space="preserve">
          <source>If you successfully parse the XML file with the validation on as in: &lt;code&gt;xmerl_scan:file('motorcycles.xml',[{validation,true}])&lt;/code&gt; you know that the XML document is valid and has the structure according to the DTD.</source>
          <target state="translated">&lt;code&gt;xmerl_scan:file('motorcycles.xml',[{validation,true}])&lt;/code&gt; 에서와 같이 유효성 검증을 사용하여 XML 파일을 구문 분석하면 XML 문서가 유효하며 DTD에 따른 구조를가집니다.</target>
        </trans-unit>
        <trans-unit id="d59053b915a39ff162dae55e7504e339f09a4e42" translate="yes" xml:space="preserve">
          <source>If you try to do the same again with another city, an error is returned:</source>
          <target state="translated">다른 도시와 동일한 작업을 다시 시도하면 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a798d01202205d436563f3b0bd17d64f51325641" translate="yes" xml:space="preserve">
          <source>If you try to store an object in the registry and there is an existing object with the same key, the new value replaces the old one. This is done regardless of whether the new object and the old one have the same type, so you can, for example, replace a string with an integer. If the existing value is a string or binary, it is freed before the new value is assigned.</source>
          <target state="translated">레지스트리에 개체를 저장하려고 할 때 같은 키를 가진 기존 개체가 있으면 새 값이 이전 값을 대체합니다. 이 작업은 새 객체와 기존 객체의 유형이 같은지 여부에 관계없이 수행되므로 문자열을 정수로 바꿀 수 있습니다. 기존 값이 문자열 또는 이진 인 경우 새 값이 할당되기 전에 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="515a151c90cdd13d9e4906d959838a101ec214d6" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;erl_connect_init()&lt;/code&gt;, your node will have a short name, that is, it will not be fully qualified. If you need to use fully qualified (long) names, use &lt;code&gt;erl_connect_xinit()&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;erl_connect_init()&lt;/code&gt; 를 사용하면 노드의 이름이 짧습니다. 즉, 정규화 된 이름이 아닙니다. 정규화 된 (긴) 이름을 사용해야하는 경우 &lt;code&gt;erl_connect_xinit()&lt;/code&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0d834de6c7b4bcac9902d0548059107a16f86a8b" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;systools&lt;/code&gt;, the Erlang/OTP tools for packaging code (see &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt;), the code for each application is placed in a separate directory following a pre-defined &lt;code&gt;&lt;a href=&quot;#app_dir&quot;&gt;directory structure&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">코드 패키징을 위해 Erlang / OTP 도구 인 &lt;code&gt;systools&lt;/code&gt; 를 사용하는 경우 ( &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt; 참조 ) 각 응용 프로그램의 코드는 사전 정의 된 &lt;code&gt;&lt;a href=&quot;#app_dir&quot;&gt;directory structure&lt;/a&gt;&lt;/code&gt; 에 따라 별도의 디렉토리에 배치됩니다 .</target>
        </trans-unit>
        <trans-unit id="8dfdc592f173581c774f93af24400d86f856a5e1" translate="yes" xml:space="preserve">
          <source>If you use an old apace-like configuration file.</source>
          <target state="translated">오래된 apace와 같은 구성 파일을 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="16a79b696fe4d902f78f4a9ec278a5c8cacbb001" translate="yes" xml:space="preserve">
          <source>If you use multiple CTHs, the first part of the return tuple is used as input for the next CTH. So in the previous example the next CTH can get &lt;code&gt;{fail,Reason}&lt;/code&gt; as the second parameter. If you have many CTHs interacting, do not let each CTH return &lt;code&gt;fail&lt;/code&gt; or &lt;code&gt;skip&lt;/code&gt;. Instead, return that an action is to be taken through the &lt;code&gt;Config&lt;/code&gt; list and implement a CTH that, at the end, takes the correct action.</source>
          <target state="translated">여러 CTH를 사용하는 경우 리턴 튜플의 첫 번째 부분이 다음 CTH에 대한 입력으로 사용됩니다. 따라서 이전 예에서 다음 CTH는 두 번째 매개 변수로 &lt;code&gt;{fail,Reason}&lt;/code&gt; 을 얻을 수 있습니다 . 상호 작용하는 CTH가 많은 경우 각 CTH 리턴이 &lt;code&gt;fail&lt;/code&gt; 하거나 &lt;code&gt;skip&lt;/code&gt; 않도록하십시오 . 대신, &lt;code&gt;Config&lt;/code&gt; 목록을 통해 조치가 취해 지도록 리턴 하고 마지막에 올바른 조치를 취하는 CTH를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="930cef54ac87bd2c1ca6f2387bf6edcd93ce9313" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;Erl_Interface&lt;/code&gt; functions in a threaded application based on POSIX threads or Solaris threads, then &lt;code&gt;Erl_Interface&lt;/code&gt; needs access to some of the synchronization facilities in your threads package. You must specify extra compiler flags to indicate which of the packages you use. Define &lt;code&gt;_REENTRANT&lt;/code&gt; and either &lt;code&gt;STHREADS&lt;/code&gt; or &lt;code&gt;PTHREADS&lt;/code&gt;. The default is to use POSIX threads if &lt;code&gt;_REENTRANT&lt;/code&gt; is specified.</source>
          <target state="translated">POSIX 스레드 또는 Solaris 스레드를 기반으로하는 스레드 응용 프로그램에서 &lt;code&gt;Erl_Interface&lt;/code&gt; 함수 를 사용하는 경우 &lt;code&gt;Erl_Interface&lt;/code&gt; 는 스레드 패키지의 일부 동기화 기능에 액세스해야합니다. 사용하는 패키지를 나타내려면 추가 컴파일러 플래그를 지정해야합니다. &lt;code&gt;_REENTRANT&lt;/code&gt; 및 &lt;code&gt;STHREADS&lt;/code&gt; 또는 &lt;code&gt;PTHREADS&lt;/code&gt; 를 정의하십시오 . &lt;code&gt;_REENTRANT&lt;/code&gt; 가 지정된 경우 기본값은 POSIX 스레드를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="918394c05671a0235e153985bd2840211574395e" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;ct_run&lt;/code&gt; program, you can start the Erlang shell and &lt;code&gt;Common Test&lt;/code&gt; in one go by using the flag &lt;code&gt;-shell&lt;/code&gt; and, optionally, flag &lt;code&gt;-config&lt;/code&gt; and/or &lt;code&gt;-userconfig&lt;/code&gt;.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;ct_run&lt;/code&gt; 의 프로그램을, 당신은 얼랑 쉘 및 시작할 수 있습니다 &lt;code&gt;Common Test&lt;/code&gt; 플래그를 사용하여 한 번에 &lt;code&gt;-shell&lt;/code&gt; , 선택적 플래그 및 &lt;code&gt;-config&lt;/code&gt; 및 / 또는 &lt;code&gt;-userconfig&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="2153b220590bbe864e1f5e224d987fcb64330153" translate="yes" xml:space="preserve">
          <source>If you want an Erlang node to have a remote job active from the start (rather than the default local job), start Erlang with flag &lt;code&gt;-remsh&lt;/code&gt;, for example, &lt;code&gt;erl -sname this_node -remsh other_node@other_host&lt;/code&gt;</source>
          <target state="translated">Erlang 노드가 기본 로컬 작업 대신 시작부터 원격 작업을 활성화하도록하려면 플래그 &lt;code&gt;-remsh&lt;/code&gt; 로 Erlang을 시작하십시오 ( 예 : &lt;code&gt;erl -sname this_node -remsh other_node@other_host&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4038140d6bff952f2f9f5f48acf2d27c3f6092b" translate="yes" xml:space="preserve">
          <source>If you want the connection to be associated with &lt;code&gt;Handle&lt;/code&gt; only (if you, for example, need to open multiple connections to a host), use &lt;code&gt;Key&lt;/code&gt;, the configuration variable name, to specify the target. Notice that a connection without an associated target name can only be closed with the &lt;code&gt;Handle&lt;/code&gt; value.</source>
          <target state="translated">연결 만 &lt;code&gt;Handle&lt;/code&gt; 와 연관 시키려면 (예를 들어, 호스트에 대한 여러 연결을 열어야하는 경우) 구성 변수 이름 인 &lt;code&gt;Key&lt;/code&gt; 를 사용하여 대상을 지정하십시오. 연관된 대상 이름이없는 연결은 &lt;code&gt;Handle&lt;/code&gt; 값으로 만 닫을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="92c8c9a37ae2934ad0217ae03b7ce8edb49f913c" translate="yes" xml:space="preserve">
          <source>If you want the same format as returned by &lt;code&gt;erlang:now/0&lt;/code&gt;, use &lt;code&gt;&lt;a href=&quot;erlang#timestamp-0&quot;&gt;erlang:timestamp/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:now/0&lt;/code&gt; 에서 리턴 한 것과 동일한 형식을 원하면 &lt;code&gt;&lt;a href=&quot;erlang#timestamp-0&quot;&gt;erlang:timestamp/0&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="340edf748ea085618e9e02efc24d38acd583eead" translate="yes" xml:space="preserve">
          <source>If you want to add the information about a black Harley Davidsson 1200 cc Sportster motorcycle from 2003 that is in shape as new in the motorcycles.xml document you can put the data in a simple-form data structure like:</source>
          <target state="translated">motorcycles.xml 문서의 새로운 모양 인 2003 년의 검은 색 Harley Davidsson 1200 cc Sportster 오토바이에 대한 정보를 추가하려면 다음과 같은 간단한 형식의 데이터 구조에 데이터를 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76e13e233caef4d78d7dc7bb7c518cb87cbe184c" translate="yes" xml:space="preserve">
          <source>If you want to apply patches of multiple OTP applications that resides in different OTP versions, you have to apply these patches in multiple steps. It is only possible to apply multiple OTP applications from the same OTP version at once.</source>
          <target state="translated">다른 OTP 버전에있는 여러 OTP 응용 프로그램의 패치를 적용하려면이 패치를 여러 단계로 적용해야합니다. 동일한 OTP 버전의 여러 OTP 응용 프로그램을 한 번에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42438cc3a906ec708300aa20929e7d2e6e66a173" translate="yes" xml:space="preserve">
          <source>If you want to build the &lt;code&gt;wx&lt;/code&gt; application, you will need to get wxWidgets-3.0 (&lt;code&gt;wxWidgets-3.0.3.tar.bz2&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.3/wxWidgets-3.0.3.tar.bz2&quot;&gt;https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.3/wxWidgets-3.0.3.tar.bz2&lt;/a&gt;&lt;/code&gt;) or get it from github with bug fixes:</source>
          <target state="translated">&lt;code&gt;wx&lt;/code&gt; 애플리케이션 을 빌드하려면 &lt;code&gt;&lt;a href=&quot;https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.3/wxWidgets-3.0.3.tar.bz2&quot;&gt;https://github.com/wxWidgets/wxWidgets/releases/download/v3.0.3/wxWidgets-3.0.3.tar.bz2&lt;/a&gt;&lt;/code&gt; 에서 wxWidgets-3.0 ( &lt;code&gt;wxWidgets-3.0.3.tar.bz2&lt;/code&gt; ) 을 가져와야합니다. 3.0.3.tar.bz2 ) 또는 버그 수정으로 github에서 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="60d473a6aa433acfb9c1c6ca737fe13eaf0848c9" translate="yes" xml:space="preserve">
          <source>If you want to build using a compatible Erlang/OTP system in the &lt;code&gt;$PATH&lt;/code&gt;, jump to (3).</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; 에서 호환 가능한 Erlang / OTP 시스템을 사용하여 빌드 하려면 (3)으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="c541b95485f056deb59b7660fe1bc3263ea0c2c7" translate="yes" xml:space="preserve">
          <source>If you want to copy a library (an application) newly built, to a release area, you do like with the emulator:</source>
          <target state="translated">새로 빌드 한 라이브러리 (응용 프로그램)를 릴리스 영역으로 복사하려면 에뮬레이터를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="af39ab464f4c4ad6184b7312f8ff3491ab00be0a" translate="yes" xml:space="preserve">
          <source>If you want to force a matching failure at some point in a pattern, the most convenient way to do it is with (?!), as an empty string always matches. So, an assertion that requires there is not to be an empty string must always fail. The backtracking control verb (*FAIL) or (*F) is a synonym for (?!).</source>
          <target state="translated">패턴의 특정 지점에서 일치 실패를 강제하려면 빈 문자열이 항상 일치하므로 가장 편리한 방법은 (?!)입니다. 따라서 빈 문자열이 없어야하는 어설 션은 항상 실패해야합니다. 역 추적 제어 동사 (* FAIL) 또는 (* F)는 (?!)의 동의어입니다.</target>
        </trans-unit>
        <trans-unit id="1d95e36a6d42c79b8d9f3cbb7ca6b72d1dfb12b0" translate="yes" xml:space="preserve">
          <source>If you want to ignore a particular event in the current state and handle it in a future state, you can postpone the event. A postponed event is retried after the state has changed, that is, &lt;code&gt;OldState =/= NewState&lt;/code&gt;.</source>
          <target state="translated">현재 상태의 특정 이벤트를 무시하고 향후 상태에서 처리하려는 경우 이벤트를 연기 할 수 있습니다. 연기 된 이벤트는 상태가 변경된 후 다시 시도됩니다 (즉, &lt;code&gt;OldState =/= NewState&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b637ab1ccef72c8ef19f9dd28f47f58deee1a99" translate="yes" xml:space="preserve">
          <source>If you want to limit the size of the trace logs, you can use wrap logs. This works almost like a circular buffer. You can specify the maximum number of binary logs and the maximum size of each log. &lt;code&gt;ttb&lt;/code&gt; then creates a new binary log each time a log reaches the maximum size. When the maximum number of logs are reached, the oldest log is deleted before a new one is created.</source>
          <target state="translated">추적 로그의 크기를 제한하려면 랩 로그를 사용할 수 있습니다. 이것은 거의 원형 버퍼처럼 작동합니다. 최대 이진 로그 수와 각 로그의 최대 크기를 지정할 수 있습니다. &lt;code&gt;ttb&lt;/code&gt; 다음 ttb 는 로그가 최대 크기에 도달 할 때마다 새로운 이진 로그를 만듭니다. 최대 로그 수에 도달하면 새 로그를 만들기 전에 가장 오래된 로그가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="3ba20665ef257abe2a78ab66aec5b8422b06c770" translate="yes" xml:space="preserve">
          <source>If you want to match typical palindromic phrases, the pattern must ignore all non-word characters, which can be done as follows:</source>
          <target state="translated">전형적인 회문 구문을 일치 시키려면 패턴은 다음과 같이 수행 할 수있는 단어가 아닌 모든 문자를 무시해야합니다.</target>
        </trans-unit>
        <trans-unit id="ecc0e9164bc34f28d81e7ffb4afcab4e5c0c14b8" translate="yes" xml:space="preserve">
          <source>If you want to only print run-time per thread type you can do:</source>
          <target state="translated">스레드 유형별로 런타임 만 인쇄하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="be41c980691226fb7b2d6a9c0782adc2d56de58a" translate="yes" xml:space="preserve">
          <source>If you want to output the content of an XML element or an attribute you will get the value as a string by the &lt;code&gt;value_of&lt;/code&gt; function:</source>
          <target state="translated">XML 요소 또는 속성의 내용을 출력하려면 &lt;code&gt;value_of&lt;/code&gt; 함수를 통해 값을 문자열로 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="e7aef053601a6ea882918cfebb175091d4d52943" translate="yes" xml:space="preserve">
          <source>If you want to parse the XML file motorcycles.xml you run it in the Erlang shell like:</source>
          <target state="translated">XML 파일 motorcycles.xml을 구문 분석하려면 다음과 같이 Erlang 쉘에서 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="c0f0b294d62ab97983874294bfe640932bf22f5a" translate="yes" xml:space="preserve">
          <source>If you want to pass a binary and do not already have the content of the binary in an &lt;code&gt;ErlDrvBinary&lt;/code&gt;, you can benefit from using &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; instead of creating an &lt;code&gt;ErlDrvBinary&lt;/code&gt; through &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt;driver_alloc_binary&lt;/a&gt;&lt;/code&gt; and then pass the binary through &lt;code&gt;ERL_DRV_BINARY&lt;/code&gt;. The runtime system often allocates binaries smarter if &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; is used. However, if the content of the binary to pass already resides in an &lt;code&gt;ErlDrvBinary&lt;/code&gt;, it is normally better to pass the binary using &lt;code&gt;ERL_DRV_BINARY&lt;/code&gt; and the &lt;code&gt;ErlDrvBinary&lt;/code&gt; in question.</source>
          <target state="translated">바이너리를 전달하고 &lt;code&gt;ErlDrvBinary&lt;/code&gt; 에 바이너리의 내용이없는 경우 &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt;driver_alloc_binary&lt;/a&gt;&lt;/code&gt; 를 통해 &lt;code&gt;ErlDrvBinary&lt;/code&gt; 를 생성하는 대신 &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; 를 사용하여 ERL_DRV_BINARY 를 통해 바이너리를 &lt;code&gt;ERL_DRV_BINARY&lt;/code&gt; 있습니다. &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; 가 사용되는 경우 런타임 시스템은 종종 바이너리를 더 똑똑하게 할당합니다 . 그러나 전달할 이진 컨텐츠가 이미 &lt;code&gt;ErlDrvBinary&lt;/code&gt; 에있는 경우 일반적으로 &lt;code&gt;ERL_DRV_BINARY&lt;/code&gt; 및 해당 &lt;code&gt;ErlDrvBinary&lt;/code&gt; 를 사용하여 이진을 전달하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="480d25bad4b8ee292973eb9f4a96b57aec47c435" translate="yes" xml:space="preserve">
          <source>If you want to separate your test code from your normal code (at least for testing the exported functions), you can simply write the test functions in a module named &lt;code&gt;m_tests&lt;/code&gt; (note: not &lt;code&gt;m_test&lt;/code&gt;), if your module is named &lt;code&gt;m&lt;/code&gt;. Then, whenever you ask EUnit to test the module &lt;code&gt;m&lt;/code&gt;, it will also look for the module &lt;code&gt;m_tests&lt;/code&gt; and run those tests as well. See &lt;code&gt;ModuleName&lt;/code&gt; in the section &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">당신이 당신의 정상적인 코드에서 테스트 코드를 구분합니다 (내 보낸 함수를 테스트하기 위해 적어도), 당신은 단순히 모듈 이름의 테스트 기능을 쓸 수 있습니다 &lt;code&gt;m_tests&lt;/code&gt; (주 : &lt;code&gt;m_test&lt;/code&gt; ), 모듈의 이름은 경우 &lt;code&gt;m&lt;/code&gt; 을 . 그런 다음 EUnit에 모듈 &lt;code&gt;m&lt;/code&gt; 테스트를 요청할 때마다 &lt;code&gt;m_tests&lt;/code&gt; 모듈을 찾고 해당 테스트도 실행합니다. 자세한 내용은 &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt; 요소 섹션에서 &lt;code&gt;ModuleName&lt;/code&gt; 을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="7febab41e67d722699474affa70aca83861a7f64" translate="yes" xml:space="preserve">
          <source>If you want to tailor your Erlang/OTP build and installation, please read on for detailed information about the individual steps.</source>
          <target state="translated">Erlang / OTP 빌드 및 설치를 조정하려면 개별 단계에 대한 자세한 정보를 계속 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="5c51074011b9826995f35f468d11eff897ad5c37" translate="yes" xml:space="preserve">
          <source>If you want to trace function calls (that is, if you have trace flag &lt;code&gt;call&lt;/code&gt; set on any process), you must also set trace patterns on the required function(s) with &lt;code&gt;&lt;a href=&quot;ttb#-0&quot;&gt;ttb:tp/2,3,4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ttb#-0&quot;&gt;ttb:tpl/2,3,4&lt;/a&gt;&lt;/code&gt;. A function is only traced if it has a trace pattern. The trace pattern specifies how to trace the function by using match specifications. Match specifications are described in the &lt;code&gt;ERTS User's Guide&lt;/code&gt;.</source>
          <target state="translated">함수 호출을 추적하려면 (즉, 프로세스에 추적 플래그 &lt;code&gt;call&lt;/code&gt; 설정된 경우 ) &lt;code&gt;&lt;a href=&quot;ttb#-0&quot;&gt;ttb:tp/2,3,4&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;ttb#-0&quot;&gt;ttb:tpl/2,3,4&lt;/a&gt;&lt;/code&gt; 을 사용하여 필요한 함수에 추적 패턴을 설정해야합니다 . / 2,3,4 . 함수는 추적 패턴이있는 경우에만 추적됩니다. 추적 패턴은 일치 스펙을 사용하여 함수를 추적하는 방법을 지정합니다. 일치 스펙은 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="4204e5cb6bf67f77002e41cae41377b945558f43" translate="yes" xml:space="preserve">
          <source>If you want your systems logs to be printed to a file instead, you must configure the default handler to do so. The simplest way is to include the following in your &lt;code&gt;&lt;a href=&quot;config&quot;&gt;sys.config&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">시스템 로그를 파일로 인쇄하려면 기본 처리기를 구성해야합니다. 가장 간단한 방법은 &lt;code&gt;&lt;a href=&quot;config&quot;&gt;sys.config&lt;/a&gt;&lt;/code&gt; 에 다음을 포함시키는 것 입니다 .</target>
        </trans-unit>
        <trans-unit id="bc1242f30c23d446d1188a6ac120aa5dbc4659e1" translate="yes" xml:space="preserve">
          <source>If you wish to exit the interactive mode (for example, to start an automated test run with &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;), call function &lt;code&gt;&lt;a href=&quot;ct#stop_interactive-0&quot;&gt;ct:stop_interactive/0&lt;/a&gt;&lt;/code&gt;. This shuts down the running &lt;code&gt;ct&lt;/code&gt; application. Associations between configuration names and data created with &lt;code&gt;require&lt;/code&gt; are consequently deleted. Function &lt;code&gt;&lt;a href=&quot;ct#start_interactive-0&quot;&gt;ct:start_interactive/0&lt;/a&gt;&lt;/code&gt; takes you back into interactive mode, but the previous state is not restored.</source>
          <target state="translated">대화식 모드를 종료하려면 (예 &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; 로 자동 테스트 실행을 시작하려면 ) &lt;code&gt;&lt;a href=&quot;ct#stop_interactive-0&quot;&gt;ct:stop_interactive/0&lt;/a&gt;&lt;/code&gt; 함수를 호출하십시오 . 실행중인 &lt;code&gt;ct&lt;/code&gt; 응용 프로그램 이 종료됩니다 . 구성 이름과 &lt;code&gt;require&lt;/code&gt; 로 작성된 데이터 간의 연관 은 결과적으로 삭제됩니다. &lt;code&gt;&lt;a href=&quot;ct#start_interactive-0&quot;&gt;ct:start_interactive/0&lt;/a&gt;&lt;/code&gt; 함수 는 대화식 모드로 되돌아 가지만 이전 상태는 복원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e10f84ca92ffa048cba38c4e906ca1f626ae3a34" translate="yes" xml:space="preserve">
          <source>If you wish to store an arbitrary pointer in the registry, specify a &lt;code&gt;size&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt;. In this case, the object itself is not transferred by an &lt;code&gt;ei_reg_dump()&lt;/code&gt; operation, only the pointer value.</source>
          <target state="translated">레지스트리에 임의의 포인터를 저장하려면 &lt;code&gt;size&lt;/code&gt; 를 &lt;code&gt;0&lt;/code&gt; 으로 지정하십시오 . 이 경우 객체 자체는 포인터 값만으로 &lt;code&gt;ei_reg_dump()&lt;/code&gt; 연산으로 전송되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ebce7ca5b1598f3fc834609ac79ed9ef57b76a9b" translate="yes" xml:space="preserve">
          <source>If you're unable to produce back-ticks on your keyboard, you can use the ksh variant:</source>
          <target state="translated">키보드에서 백틱을 생성 할 수없는 경우 ksh 변형을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="898016192f939b5abb6e665e68d4a556cad78625" translate="yes" xml:space="preserve">
          <source>If you're using MinGW's MSYS instead, you need to change the &lt;code&gt;C_DRV&lt;/code&gt; setting, which would read:</source>
          <target state="translated">MinGW의 MSYS를 대신 사용하는 경우 &lt;code&gt;C_DRV&lt;/code&gt; 설정 을 변경해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b80191fd2f2a93c0231ee04e580f333dbbc4b2c1" translate="yes" xml:space="preserve">
          <source>If you've upgraded the source with a patch you may need to clean up from previous builds before the new build. Make sure to read the &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Building_Prebuilt-Source-Release&quot;&gt;Pre-built Source Release&lt;/a&gt;&lt;/code&gt; section below before doing a &lt;code&gt;make clean&lt;/code&gt;.</source>
          <target state="translated">패치로 소스를 업그레이드 한 경우 새 빌드 전에 이전 빌드에서 정리해야합니다. &lt;code&gt;make clean&lt;/code&gt; 하기 전에 아래 의 &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Building_Prebuilt-Source-Release&quot;&gt;Pre-built Source Release&lt;/a&gt;&lt;/code&gt; 섹션을 반드시 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="94d3d2824c70cd2f197cb4a4e891f6adbf0d6555" translate="yes" xml:space="preserve">
          <source>If your application has multiple levels of supervision, then do not simply set the restart intensities to the same values on all levels. Keep in mind that the total number of restarts (before the top level supervisor gives up and terminates the application) will be the product of the intensity values of all the supervisors above the failing child process.</source>
          <target state="translated">응용 프로그램에 여러 수준의 감독이있는 경우 모든 수준에서 다시 시작 강도를 동일한 값으로 설정하지 마십시오. 총 다시 시작 횟수 (최상위 수퍼바이저가 응용 프로그램을 포기하고 종료하기 전)는 실패한 하위 프로세스 위의 모든 수퍼바이저의 강도 값의 곱이됩니다.</target>
        </trans-unit>
        <trans-unit id="8bdaa0464a895b83db580413a1dfb239d0cea7a3" translate="yes" xml:space="preserve">
          <source>If your driver supports scrollable cursors you have a little more freedom, and can do things like this.</source>
          <target state="translated">드라이버가 스크롤 가능한 커서를 지원하면 약간 더 자유롭고 이와 같은 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4baf8bf70284fc593a0f0c3da52f4c0847c8447" translate="yes" xml:space="preserve">
          <source>If your process logic is convenient to describe as a state machine, and you want any of these &lt;code&gt;gen_statem&lt;/code&gt; key features:</source>
          <target state="translated">프로세스 로직이 상태 머신으로 설명하기 편리하고 다음과 같은 &lt;code&gt;gen_statem&lt;/code&gt; 주요 기능 중 하나를 원하는 경우 :</target>
        </trans-unit>
        <trans-unit id="3a769c81046d5475e30518ad57d42d8c20c63372" translate="yes" xml:space="preserve">
          <source>If your test code writes to the standard output, you may be surprised to see that the text does not appear on the console when the tests are running. This is because EUnit captures all standard output from test functions (this also includes setup and cleanup functions, but not generator functions), so that it can be included in the test report if errors occur. To bypass EUnit and print text directly to the console while testing, you can write to the &lt;code&gt;user&lt;/code&gt; output stream, as in &lt;code&gt;io:format(user, &quot;~w&quot;, [Term])&lt;/code&gt;. The recommended way of doing this is to use the EUnit &lt;code&gt;&lt;a href=&quot;#Debugging_macros&quot;&gt;Debugging macros&lt;/a&gt;&lt;/code&gt;, which make it much simpler.</source>
          <target state="translated">테스트 코드가 표준 출력에 쓰면 테스트가 실행될 때 콘솔에 텍스트가 나타나지 않는 것에 놀랄 수 있습니다. EUnit은 테스트 기능 (설정 및 정리 기능은 포함하지만 생성기 기능은 포함하지 않음)의 모든 표준 출력을 캡처하므로 오류가 발생할 경우 테스트 보고서에 포함 할 수 있습니다. 테스트하는 동안 EUnit을 무시하고 텍스트를 콘솔에 직접 인쇄하려면 &lt;code&gt;io:format(user, &quot;~w&quot;, [Term])&lt;/code&gt; 과 같이 &lt;code&gt;user&lt;/code&gt; 출력 스트림에 쓸 수 있습니다 . 이 작업을 수행하는 데 권장되는 방법은 EUnit &lt;code&gt;&lt;a href=&quot;#Debugging_macros&quot;&gt;Debugging macros&lt;/a&gt;&lt;/code&gt; 를 사용하여 훨씬 간단하게 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7e46e774253b8a01c9e57b4a236314fe7c6f0933" translate="yes" xml:space="preserve">
          <source>If, for example, only information originating from the UNIX kernel is to be supervised, the line is to begin with &lt;code&gt;kern.LEVEL&lt;/code&gt;. For the possible values of &lt;code&gt;LEVEL&lt;/code&gt;, see &lt;code&gt;syslog.conf(5)&lt;/code&gt;.</source>
          <target state="translated">예를 들어, UNIX 커널에서 시작된 정보 만 감독 &lt;code&gt;kern.LEVEL&lt;/code&gt; 경우, 행은 kern.LEVEL 로 시작해야합니다 . 가능한 &lt;code&gt;LEVEL&lt;/code&gt; 값 은 &lt;code&gt;syslog.conf(5)&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d5e15af770ad74c816f0b9bed18089dc4b7b6949" translate="yes" xml:space="preserve">
          <source>If, however, the more brutal variant is preferred, the the release upgrade file can be handwritten using only the single upgrade instruction &lt;code&gt;restart_emulator&lt;/code&gt;. This instruction, in contrast to &lt;code&gt;restart_new_emulator&lt;/code&gt;, causes the emulator to restart with the new versions of &lt;strong&gt;all&lt;/strong&gt; applications.</source>
          <target state="translated">그러나보다 잔인한 변형이 선호되는 경우 릴리스 업그레이드 파일은 단일 업그레이드 명령 &lt;code&gt;restart_emulator&lt;/code&gt; 만 사용하여 손으로 작성할 수 있습니다 . &lt;code&gt;restart_new_emulator&lt;/code&gt; 와 달리이 명령어 는 에뮬레이터가 &lt;strong&gt;모든&lt;/strong&gt; 응용 프로그램 의 새 버전으로 다시 시작되도록합니다 .</target>
        </trans-unit>
        <trans-unit id="8767a6609841ad161f8c8ba70fce614ffbb6d735" translate="yes" xml:space="preserve">
          <source>If, however, the profiling time is short, and the host machine OS does not support high resolution cpu time measurements, some few OS schedulings may show up as ridiculously long execution times for functions doing practically nothing. An example of a function more or less just composing a tuple in about 100 times the normal execution time has been seen, and when the tracing was repeated, the execution time became normal.</source>
          <target state="translated">그러나 프로파일 링 시간이 짧고 호스트 시스템 OS가 고해상도 CPU 시간 측정을 지원하지 않는 경우, 일부 OS 스케줄링은 실제로 아무 것도 수행하지 않는 기능에 대해 엄청나게 긴 실행 시간으로 표시 될 수 있습니다. 정상 실행 시간의 약 100 배로 튜플을 구성하는 함수의 예가 보였고 추적이 반복되면 실행 시간이 정상이되었습니다.</target>
        </trans-unit>
        <trans-unit id="28ab139e8caa6336e1a75280870aaa88d194b8f0" translate="yes" xml:space="preserve">
          <source>Ignores the next term.</source>
          <target state="translated">다음 용어를 무시합니다.</target>
        </trans-unit>
        <trans-unit id="556c1293becdd2112a2dbef3ccdc8818c38e5526" translate="yes" xml:space="preserve">
          <source>Igor will look for terms &lt;code&gt;{igor, List}&lt;/code&gt; in the compile options, where &lt;code&gt;List&lt;/code&gt; is a list of Igor-specific options, as follows:</source>
          <target state="translated">Igor는 컴파일 옵션에서 &lt;code&gt;{igor, List}&lt;/code&gt; 라는 용어를 찾습니다 . 여기서 &lt;code&gt;List&lt;/code&gt; 는 다음과 같이 Igor 관련 옵션의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="12b0ac37014df125334c7cd0aa5d1e3fd4b2112b" translate="yes" xml:space="preserve">
          <source>Igor: the Module Merger and Renamer.</source>
          <target state="translated">Igor : 모듈 합병 및 Renamer.</target>
        </trans-unit>
        <trans-unit id="434e93d1be37385e2cb586a90949b6d54ba9fb45" translate="yes" xml:space="preserve">
          <source>Illegal record use</source>
          <target state="translated">불법 기록 사용</target>
        </trans-unit>
        <trans-unit id="3e2e754eaf99ea7ee3f9e02b703f2ea22dce19f1" translate="yes" xml:space="preserve">
          <source>Imagine two nodes, &lt;code&gt;A&lt;/code&gt; that initiates the handshake and &lt;code&gt;B&lt;/code&gt; that accepts the connection.</source>
          <target state="translated">핸드 셰이크를 시작하는 &lt;code&gt;A&lt;/code&gt; 와 연결을 수락하는 &lt;code&gt;B&lt;/code&gt; 의 두 노드를 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="8170de3694759bfa15c0e42d75a0e2dbd2eae04c" translate="yes" xml:space="preserve">
          <source>Immediately after &lt;code&gt;{addr,_}&lt;/code&gt; follows &lt;code&gt;{netmask,_}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{addr,_}&lt;/code&gt; 직후에 &lt;code&gt;{netmask,_}&lt;/code&gt; 뒤에옵니다 .</target>
        </trans-unit>
        <trans-unit id="e1bf55aaa279dcec7c69afe67e49a23edfac3d7b" translate="yes" xml:space="preserve">
          <source>Immediately closes a socket in one or two directions.</source>
          <target state="translated">소켓을 한 방향 또는 두 방향으로 즉시 닫습니다.</target>
        </trans-unit>
        <trans-unit id="0146e3e7271e73fd4397519ed5ac080aa4266f79" translate="yes" xml:space="preserve">
          <source>Immediately thereafter follows &lt;code&gt;{broadaddr,_}&lt;/code&gt; if flag &lt;code&gt;broadcast&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; set and flag &lt;code&gt;pointtopoint&lt;/code&gt;&lt;strong&gt;is&lt;/strong&gt; set.</source>
          <target state="translated">그 직후에 다음 &lt;code&gt;{broadaddr,_}&lt;/code&gt; 플래그 경우 &lt;code&gt;broadcast&lt;/code&gt; 되어 &lt;strong&gt;있지&lt;/strong&gt; 설정하고 플래그 &lt;code&gt;pointtopoint&lt;/code&gt; 가&lt;strong&gt;되어&lt;/strong&gt; 설정합니다.</target>
        </trans-unit>
        <trans-unit id="f115c5f2dd3a1366bda08a49baad63fd02afde98" translate="yes" xml:space="preserve">
          <source>Imperial_Aramaic</source>
          <target state="translated">Imperial_Aramaic</target>
        </trans-unit>
        <trans-unit id="3848d63613aeeb25bb34384b1787a4b8da6d6ff9" translate="yes" xml:space="preserve">
          <source>Implement an &lt;code&gt;outputv&lt;/code&gt; callback (instead of an &lt;code&gt;output&lt;/code&gt; callback) in the driver. If a driver has an &lt;code&gt;outputv&lt;/code&gt; callback, refc binaries passed in an iolist in the &lt;code&gt;Data&lt;/code&gt; argument for &lt;code&gt;port_command/2&lt;/code&gt; will be passed as references to the driver.</source>
          <target state="translated">드라이버에서 &lt;code&gt;outputv&lt;/code&gt; 콜백 ( &lt;code&gt;output&lt;/code&gt; 콜백 대신)을 구현 하십시오. 드라이버에 &lt;code&gt;outputv&lt;/code&gt; 콜백 이있는 경우 &lt;code&gt;port_command/2&lt;/code&gt; 의 &lt;code&gt;Data&lt;/code&gt; 인수 에서 iolist로 전달 된 refc 이진이 드라이버에 대한 참조로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="2550fab1130c47b29d0bf324dcd951c87cbd4c20" translate="yes" xml:space="preserve">
          <source>Implement the user(s).</source>
          <target state="translated">사용자를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="48c5877ca241f34b3f104510084da2e3f17d9449" translate="yes" xml:space="preserve">
          <source>Implementation: A balanced binary search tree is used. The time complexity is proportional to log N, where N is the number of free blocks.</source>
          <target state="translated">구현 : 균형 이진 검색 트리가 사용됩니다. 시간 복잡도는 log N에 비례하며, 여기서 N은 사용 가능한 블록 수입니다.</target>
        </trans-unit>
        <trans-unit id="986bf772c885393163838b577762f2d1f9c7f455" translate="yes" xml:space="preserve">
          <source>Implementation: A balanced binary search tree is used. The time complexity is proportional to log N, where N is the number of sizes of free blocks.</source>
          <target state="translated">구현 : 균형 이진 검색 트리가 사용됩니다. 시간 복잡도는 log N에 비례하며, 여기서 N은 사용 가능한 블록의 크기 수입니다.</target>
        </trans-unit>
        <trans-unit id="bd869e893b5f7a40f0a166908e0bc628120afba1" translate="yes" xml:space="preserve">
          <source>Implementation: Balanced binary search trees are used. The time complexity is proportional to log N, where N is the number of free blocks.</source>
          <target state="translated">구현 : 균형 이진 검색 트리가 사용됩니다. 시간 복잡도는 log N에 비례하며, 여기서 N은 사용 가능한 블록 수입니다.</target>
        </trans-unit>
        <trans-unit id="46bfb88bf9e53e73f8388ee9ed0d26c11b02304f" translate="yes" xml:space="preserve">
          <source>Implementation: Inspect the first block in a free-list. If it satisfies the request, it is used, otherwise a new carrier is created. The implementation has a time complexity that is constant.</source>
          <target state="translated">구현 : 자유 목록의 첫 번째 블록을 검사하십시오. 요청을 충족하면 요청이 사용되며, 그렇지 않으면 새 이동 통신사가 작성됩니다. 구현은 일정한 시간 복잡성을 갖는다.</target>
        </trans-unit>
        <trans-unit id="c6a2194bfaf5e060ecf03c5376d35a554cce3c35" translate="yes" xml:space="preserve">
          <source>Implementation: The implementation uses segregated free lists with a maximum block search depth (in each list) to find a good fit fast. When the maximum block search depth is small (by default 3), this implementation has a time complexity that is constant. The maximum block search depth can be configured using parameter &lt;code&gt;&lt;a href=&quot;#M_mbsd&quot;&gt;mbsd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">구현 : 구현시 최대 블록 검색 깊이 (각 목록에서)와 함께 분리 된 자유 목록을 사용하여 적절한 결과를 신속하게 찾습니다. 최대 블록 검색 깊이가 작 으면 (기본적으로 3)이 구현은 일정한 시간 복잡성을 갖습니다. 최대 블록 검색 깊이는 &lt;code&gt;&lt;a href=&quot;#M_mbsd&quot;&gt;mbsd&lt;/a&gt;&lt;/code&gt; 매개 변수를 사용하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8aa4a22b5053f3e953012b88774f1658cf1eb84b" translate="yes" xml:space="preserve">
          <source>Implementing a Manager Application.</source>
          <target state="translated">관리자 응용 프로그램 구현</target>
        </trans-unit>
        <trans-unit id="d1d356a99f2a68bb32f56a5afc4fc7243ac4c122" translate="yes" xml:space="preserve">
          <source>Implementing an MIB can be a tedious task. Most probably, there is a need to test the agent before all tables and variables are implemented. In this case, the default instrumentation functions are useful. The toolkit can generate default instrumentation functions for variables as well as for tables. Consequently, a running prototype agent, which can handle &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;get-next&lt;/code&gt; and table operations, is generated without any programming.</source>
          <target state="translated">MIB 구현은 지루한 작업이 될 수 있습니다. 모든 테이블과 변수가 구현되기 전에 에이전트를 테스트해야 할 수도 있습니다. 이 경우 기본 계측 기능이 유용합니다. 툴킷은 변수는 물론 테이블에 대한 기본 계측 기능을 생성 할 수 있습니다. 결과적으로 &lt;code&gt;set&lt;/code&gt; , &lt;code&gt;get&lt;/code&gt; , &lt;code&gt;get-next&lt;/code&gt; 및 table 작업을 처리 할 수있는 실행중인 프로토 타입 에이전트 가 프로그래밍없이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="5089bf216d6ab81557737c36828f21a117ecd8d4" translate="yes" xml:space="preserve">
          <source>Implementing support for Unicode character sets is an ongoing process. The Erlang Enhancement Proposal (EEP) 10 outlined the basics of Unicode support and specified a default encoding in binaries that all Unicode-aware modules are to handle in the future.</source>
          <target state="translated">유니 코드 문자 집합에 대한 지원을 구현하는 과정은 진행 중입니다. EEP (Erlang Enhancement Proposal) 10은 유니 코드 지원의 기본 사항을 설명하고 향후 모든 유니 코드 인식 모듈이 처리 할 바이너리의 기본 인코딩을 지정했습니다.</target>
        </trans-unit>
        <trans-unit id="afb6d8666156732e31fdfd33a4e37fa8e0ff12b1" translate="yes" xml:space="preserve">
          <source>Implementing the MIB</source>
          <target state="translated">MIB 구현</target>
        </trans-unit>
        <trans-unit id="3598443bca8912627263e77be152abb2f8fea1d8" translate="yes" xml:space="preserve">
          <source>Implements &lt;strong&gt;call streams with promises&lt;/strong&gt;, a type of RPC that does not suspend the caller until the result is finished. Instead, a key is returned, which can be used later to collect the value. The key can be viewed as a promise to deliver the answer.</source>
          <target state="translated">결과가 끝날 때까지 호출자를 일시 중단하지 않는 RPC 유형 인 &lt;strong&gt;promise으로 호출 스트림을&lt;/strong&gt; 구현 &lt;strong&gt;합니다&lt;/strong&gt; . 대신에 키를 반환하여 나중에 값을 수집하는 데 사용할 수 있습니다. 열쇠는 답을 전하겠다는 약속으로 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5852555552878975a45593281d37fefa3026933d" translate="yes" xml:space="preserve">
          <source>Implements an internal CRL (Certificate Revocation List) cache. In addition to implementing the &lt;code&gt;&lt;a href=&quot;ssl_crl_cache_api&quot;&gt;ssl_crl_cache_api&lt;/a&gt;&lt;/code&gt; behaviour the following functions are available.</source>
          <target state="translated">내부 CRL (인증서 해지 목록) 캐시를 구현합니다. &lt;code&gt;&lt;a href=&quot;ssl_crl_cache_api&quot;&gt;ssl_crl_cache_api&lt;/a&gt;&lt;/code&gt; 동작 을 구현하는 것 외에도 다음 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b29c8d309278d1184cdf0686f160a939ff31d257" translate="yes" xml:space="preserve">
          <source>Implements global (repetitive) search (flag &lt;code&gt;g&lt;/code&gt; in Perl). Each match is returned as a separate &lt;code&gt;list()&lt;/code&gt; containing the specific match and any matching subexpressions (or as specified by option &lt;code&gt;capture&lt;/code&gt;. The &lt;code&gt;Captured&lt;/code&gt; part of the return value is hence a &lt;code&gt;list()&lt;/code&gt; of &lt;code&gt;list()&lt;/code&gt;s when this option is specified.</source>
          <target state="translated">전역 (반복) 검색을 구현합니다 ( Perl의 플래그 &lt;code&gt;g&lt;/code&gt; ). 각 일치 항목은 특정 일치 항목과 일치하는 하위 표현식이 포함 된 별도의 &lt;code&gt;list()&lt;/code&gt; (또는 옵션 &lt;code&gt;capture&lt;/code&gt; 에 의해 지정된대로)로 리턴됩니다. 따라서 리턴 값 의 &lt;code&gt;Captured&lt;/code&gt; 부분은 이 옵션이 지정된 경우 &lt;code&gt;list()&lt;/code&gt; 의 &lt;code&gt;list()&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d0d6b7b06bc0717a09a0609e9b93d5b110576e74" translate="yes" xml:space="preserve">
          <source>Implements the transformation at compile time. This function is called by the compiler to do the source code transformation if and when header file &lt;code&gt;ms_transform.hrl&lt;/code&gt; is included in the source code.</source>
          <target state="translated">컴파일 타임에 변환을 구현합니다. 이 함수는 헤더 파일 &lt;code&gt;ms_transform.hrl&lt;/code&gt; 이 소스 코드에 포함되어있는 경우와 소스 코드 변환을 수행하기 위해 컴파일러에서 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="6edd4a0551006932a13f07152c0a0aa13d34aeb3" translate="yes" xml:space="preserve">
          <source>Implements the transformation when the &lt;code&gt;fun2ms/1&lt;/code&gt; functions are called from the shell. In this case, the abstract form is for one single fun (parsed by the Erlang shell). All imported variables are to be in the key-value list passed as &lt;code&gt;BoundEnvironment&lt;/code&gt;. The result is a term, normalized, that is, not in abstract format.</source>
          <target state="translated">&lt;code&gt;fun2ms/1&lt;/code&gt; 함수가 쉘에서 호출 될 때 변환을 구현합니다 . 이 경우 추상 형식은 하나의 단일 재미를위한 것입니다 (Erlang 쉘로 구문 분석 됨). 가져온 모든 변수는 &lt;code&gt;BoundEnvironment&lt;/code&gt; 로 전달 된 키-값 목록에 있어야 합니다. 결과는 정규화 된 용어, 즉 추상적 형식이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="d6fbc9d2bdd580e18ed0bc5805dc26db323d6f5f" translate="yes" xml:space="preserve">
          <source>Import</source>
          <target state="translated">Import</target>
        </trans-unit>
        <trans-unit id="b7c113ae3f8b579e4a0169b23cb527018f3cd218" translate="yes" xml:space="preserve">
          <source>Import configuration data (similar to &lt;code&gt;ct_run -config/-userconfig&lt;/code&gt;).</source>
          <target state="translated">구성 데이터를 가져 오십시오 ( &lt;code&gt;ct_run -config/-userconfig&lt;/code&gt; 와 유사 ).</target>
        </trans-unit>
        <trans-unit id="64200c8515980ead3d6f6d1c54b72c0df1647038" translate="yes" xml:space="preserve">
          <source>Imported functions. Can be called the same way as local functions, that is, without any module prefix.</source>
          <target state="translated">가져온 함수. 로컬 함수와 같은 방식으로, 즉 모듈 접두사없이 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e96159a0570df1d76f4d6b6b63ad56985185ffc2" translate="yes" xml:space="preserve">
          <source>Imports coverage data from the file &lt;code&gt;ExportFile&lt;/code&gt; created with &lt;code&gt;cover:export/1,2&lt;/code&gt;. Any analysis performed after this will include the imported data.</source>
          <target state="translated">&lt;code&gt;cover:export/1,2&lt;/code&gt; 로 작성된 &lt;code&gt;ExportFile&lt;/code&gt; 파일에서 적용 범위 데이터를 가져 옵니다 . 이후에 수행 된 모든 분석에는 가져온 데이터가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="6293ff4a8408c9b4904b5c4c8135a7dbb83fe606" translate="yes" xml:space="preserve">
          <source>Improper use can seriously degrade system performance.</source>
          <target state="translated">잘못 사용하면 시스템 성능이 심각하게 저하 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68545fd32c1a3f37a53bcab05bb6a3c24b6ca95e" translate="yes" xml:space="preserve">
          <source>In .emacs, the slash character &quot;/&quot; can be used as path separator. But if you decide to use the backslash character &quot;\&quot;, please not that you must use double backslashes, since they are treated as escape characters by Emacs.</source>
          <target state="translated">.emacs에서는 슬래시 문자 &quot;/&quot;를 경로 구분 기호로 사용할 수 있습니다. 그러나 백 슬래시 문자 &quot;\&quot;를 사용하기로 결정한 경우 이중 백 슬래시는 Emacs에서 이스케이프 문자로 취급되므로 이중 백 슬래시를 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="0f7795a31a2f6e68385e615d1e0b39534a4a427f" translate="yes" xml:space="preserve">
          <source>In 1994 the global tagging mode &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt; was introduced. By putting &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt; in the module header, the ASN.1 compiler automatically adds tags when needed. The following is the same specification in &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt; mode:</source>
          <target state="translated">1994 년에 글로벌 태깅 모드 인 &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt; 가 도입되었습니다. 모듈 헤더 에 &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt; 를 넣으면 ASN.1 컴파일러는 필요할 때 자동으로 태그를 추가합니다. 다음은 &lt;code&gt;AUTOMATIC TAGS&lt;/code&gt; 모드 에서 동일한 사양입니다 .</target>
        </trans-unit>
        <trans-unit id="b2eae1b23e89f4b197bf1ba45908178d3aa172d8" translate="yes" xml:space="preserve">
          <source>In 8-bit, non-UTF-8 mode, only the characters with code points &amp;lt; 256 are relevant.</source>
          <target state="translated">8 비트 비 UTF-8 모드에서는 코드 포인트가 &amp;lt;256 인 문자 만 관련됩니다.</target>
        </trans-unit>
        <trans-unit id="fcb066c655ce1aa010477f09bef3fac0ead37f56" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;$ERL_TOP&lt;/code&gt;, there is a script called &lt;code&gt;otp_build&lt;/code&gt;. That script handles the hassle of giving all the right parameters to &lt;code&gt;configure&lt;/code&gt;/&lt;code&gt;make&lt;/code&gt; and also helps you set up the correct environment variables to work with the Erlang source under Cygwin/MSYS/MSYS2.</source>
          <target state="translated">에서 &lt;code&gt;$ERL_TOP&lt;/code&gt; ,라는 스크립트가 &lt;code&gt;otp_build&lt;/code&gt; . 즉, 스크립트 핸들에 대한 모든 권리 매개 변수를 제공하는 번거 로움 &lt;code&gt;configure&lt;/code&gt; / &lt;code&gt;make&lt;/code&gt; 하고 또한 Cygwin에서 / MSYS / MSYS2에서 얼랑 소스와 작업에 올바른 환경 변수를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1e4870154b4a5f3a6bba7d020678f1436a7aad2" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ID&lt;/code&gt;, only 18 bits are significant; the rest are to be 0. In &lt;code&gt;Creation&lt;/code&gt;, only two bits are significant; the rest are to be 0. See &lt;code&gt;&lt;a href=&quot;#NEW_REFERENCE_EXT&quot;&gt;NEW_REFERENCE_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">에서는 &lt;code&gt;ID&lt;/code&gt; , 18 비트 만이 중요하다; 나머지는 0이어야합니다. &lt;code&gt;Creation&lt;/code&gt; 에서는 두 비트 만 중요합니다. 나머지는 0 입니다. &lt;code&gt;&lt;a href=&quot;#NEW_REFERENCE_EXT&quot;&gt;NEW_REFERENCE_EXT&lt;/a&gt;&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d0025e78fbaf5c3757dcab01eedc653609a16493" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Mnesia&lt;/code&gt;, all records in a table must have the same name. All the records must be instances of the same record type. The record name, however, does not necessarily have to be the same as the table name, although this is the case in most of the examples in this User's Guide. If a table is created without property &lt;code&gt;record_name&lt;/code&gt;, the following code ensures that all records in the tables have the same name as the table:</source>
          <target state="translated">에서 &lt;code&gt;Mnesia&lt;/code&gt; 테이블의 모든 레코드는 같은 이름이 있어야합니다. 모든 레코드는 동일한 레코드 유형의 인스턴스 여야합니다. 그러나이 사용자 안내서에있는 대부분의 예에서 레코드 이름이 반드시 테이블 이름과 같을 필요는 없습니다. &lt;code&gt;record_name&lt;/code&gt; 특성없이 테이블을 작성하는 경우 다음 코드는 테이블의 모든 레코드가 테이블과 동일한 이름을 갖도록합니다.</target>
        </trans-unit>
        <trans-unit id="770b380d53bce026d82e5f70351df3a234e00dd1" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Module:Name/Arity&lt;/code&gt;, &lt;code&gt;Module&lt;/code&gt;, and &lt;code&gt;Name&lt;/code&gt; are atoms and &lt;code&gt;Arity&lt;/code&gt; is an integer. Starting from Erlang/OTP R15, &lt;code&gt;Module&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt;, and &lt;code&gt;Arity&lt;/code&gt; can also be variables. A fun defined in this way refers to the function &lt;code&gt;Name&lt;/code&gt; with arity &lt;code&gt;Arity&lt;/code&gt; in the &lt;strong&gt;latest&lt;/strong&gt; version of module &lt;code&gt;Module&lt;/code&gt;. A fun defined in this way is not dependent on the code for the module in which it is defined.</source>
          <target state="translated">에서 &lt;code&gt;Module:Name/Arity&lt;/code&gt; , &lt;code&gt;Module&lt;/code&gt; , 그리고 &lt;code&gt;Name&lt;/code&gt; 원자와 &lt;code&gt;Arity&lt;/code&gt; 정수입니다. Erlang / OTP R15부터 &lt;code&gt;Module&lt;/code&gt; , &lt;code&gt;Name&lt;/code&gt; 및 &lt;code&gt;Arity&lt;/code&gt; 도 변수가 될 수 있습니다. 이런 방식으로 정의 된 재미 는 &lt;strong&gt;최신&lt;/strong&gt; 버전의 모듈 &lt;code&gt;Module&lt;/code&gt; 에서 arity &lt;code&gt;Arity&lt;/code&gt; 를 가진 &lt;code&gt;Name&lt;/code&gt; 함수를 참조합니다 . 이러한 방식으로 정의 된 재미는 그것이 정의 된 모듈의 코드에 의존하지 않습니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e5df66c12eaa68ca0a48283d550d16d991720df0" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Name/Arity&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt; is an atom and &lt;code&gt;Arity&lt;/code&gt; is an integer. &lt;code&gt;Name/Arity&lt;/code&gt; must specify an existing local function. The expression is syntactic sugar for:</source>
          <target state="translated">에서 &lt;code&gt;Name/Arity&lt;/code&gt; , &lt;code&gt;Name&lt;/code&gt; 원자이며, &lt;code&gt;Arity&lt;/code&gt; 정수입니다. &lt;code&gt;Name/Arity&lt;/code&gt; 은 기존 로컬 기능을 지정해야합니다. 이 표현은 다음에 대한 구문 설탕입니다.</target>
        </trans-unit>
        <trans-unit id="a472768ac00c2b862480bf36de83581f96978047" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;Type_List&lt;/code&gt; the &quot;path&quot; from the top type to each undecoded subcomponents is described. The top type of the path is an atom, the name of it. The action on each component/type that follows is described by one of &lt;code&gt;{Name,parts}, {Name,undecoded}, {Name,Element_List}&lt;/code&gt;.</source>
          <target state="translated">에서는 &lt;code&gt;Type_List&lt;/code&gt; 각 디코드되지 않은 부성분 상부 형에서 &quot;경로&quot;를 설명한다. 경로의 최상위 유형은 원자 이름입니다. 다음에 나오는 각 구성 요소 / 유형에 대한 조치는 &lt;code&gt;{Name,parts}, {Name,undecoded}, {Name,Element_List}&lt;/code&gt; 중 하나로 설명됩니다 .</target>
        </trans-unit>
        <trans-unit id="9c54988a1f913bda4c57ecea3e6f820b07cee1aa" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;attr&lt;/code&gt; the attributes of the object are stored as the logical &lt;strong&gt;OR&lt;/strong&gt; of its type (one of &lt;code&gt;EI_INT&lt;/code&gt;, &lt;code&gt;EI_FLT&lt;/code&gt;, &lt;code&gt;EI_BIN&lt;/code&gt;, and &lt;code&gt;EI_STR&lt;/code&gt;), whether it is marked for deletion (&lt;code&gt;EI_DELET&lt;/code&gt;), and whether it has been modified since the last backup to &lt;code&gt;Mnesia&lt;/code&gt; (&lt;code&gt;EI_DIRTY&lt;/code&gt;).</source>
          <target state="translated">에서는 &lt;code&gt;attr&lt;/code&gt; 객체의 속성 논리적으로 저장된다 &lt;strong&gt;OR&lt;/strong&gt; 의 타입 (하나의 &lt;code&gt;EI_INT&lt;/code&gt; , &lt;code&gt;EI_FLT&lt;/code&gt; , &lt;code&gt;EI_BIN&lt;/code&gt; 및 &lt;code&gt;EI_STR&lt;/code&gt; 가 삭제 (표시되어 있는지 여부) &lt;code&gt;EI_DELET&lt;/code&gt; ), 그리고 마지막 백업 이후 수정되었는지 &lt;code&gt;Mnesia&lt;/code&gt; ( &lt;code&gt;EI_DIRTY&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9643419e6aee2e17ffb863a8ef01b8323b347a6e" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ch1.erl&lt;/code&gt; and &lt;code&gt;ch2.erl&lt;/code&gt; above, the implementation of &lt;code&gt;channels/0&lt;/code&gt;, &lt;code&gt;alloc/1&lt;/code&gt;, and &lt;code&gt;free/2&lt;/code&gt; has been intentionally left out, as it is not relevant to the example. For completeness, one way to write these functions are given below. This is an example only, a realistic implementation must be able to handle situations like running out of channels to allocate, and so on.</source>
          <target state="translated">위의 &lt;code&gt;ch1.erl&lt;/code&gt; 및 &lt;code&gt;ch2.erl&lt;/code&gt; 에서 &lt;code&gt;channels/0&lt;/code&gt; , &lt;code&gt;alloc/1&lt;/code&gt; 및 &lt;code&gt;free/2&lt;/code&gt; 의 구현은 예제와 관련이 없으므로 의도적으로 생략되었습니다. 완성도를 높이기 위해 이러한 기능을 작성하는 한 가지 방법이 아래에 나와 있습니다. 이것은 단지 예일 뿐이며 현실적인 구현은 할당 할 채널 부족과 같은 상황을 처리 할 수 ​​있어야합니다.</target>
        </trans-unit>
        <trans-unit id="ab0d5c626ce8dc42f39e1abeabf7105631919c54" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;ei_s_print_term()&lt;/code&gt;, parameter &lt;code&gt;s&lt;/code&gt; is to point to a dynamically (malloc) allocated string of &lt;code&gt;BUFSIZ&lt;/code&gt; bytes or a &lt;code&gt;NULL&lt;/code&gt; pointer. The string can be reallocated (and &lt;code&gt;*s&lt;/code&gt; can be updated) by this function if the result is more than &lt;code&gt;BUFSIZ&lt;/code&gt; characters. The string returned is &lt;code&gt;NULL&lt;/code&gt;-terminated.</source>
          <target state="translated">에서 &lt;code&gt;ei_s_print_term()&lt;/code&gt; , 매개 변수 &lt;code&gt;s&lt;/code&gt; 동적으로 (의 malloc)의 할당 된 문자열에 점입니다 &lt;code&gt;BUFSIZ&lt;/code&gt; 가 바이트 또는 &lt;code&gt;NULL&lt;/code&gt; 의 포인터. 결과가 &lt;code&gt;BUFSIZ&lt;/code&gt; 문자 보다 많은 경우이 함수로 문자열을 재 할당 할 수 있으며 &lt;code&gt;*s&lt;/code&gt; 를 업데이트 할 수 있습니다 . 리턴 된 문자열은 &lt;code&gt;NULL&lt;/code&gt; 로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="0a141cc5ac15d20e41285b60b7e1dbadddb212ee" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;file_logger&lt;/code&gt;:</source>
          <target state="translated">에서 &lt;code&gt;file_logger&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c6953b7249dfd9871d1537ea03ef11de631fd526" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;latin1&lt;/code&gt; mode, filenames are bytewise encoded. This allows for list representation of all filenames in the system. However, a a file named &quot;&amp;Ouml;stersund.txt&quot;, appears in &lt;code&gt;file:list_dir/1&lt;/code&gt; either as &quot;&amp;Ouml;stersund.txt&quot; (if the filename was encoded in bytewise ISO Latin-1 by the program creating the file) or more probably as &lt;code&gt;[195,150,115,116,101,114,115,117,110,100]&lt;/code&gt;, which is a list containing UTF-8 bytes (not what you want). If you use Unicode filename translation on such a system, non-UTF-8 filenames are ignored by functions like &lt;code&gt;file:list_dir/1&lt;/code&gt;. They can be retrieved with function &lt;code&gt;file:list_dir_all/1&lt;/code&gt;, but wrongly encoded filenames appear as &quot;raw filenames&quot;.</source>
          <target state="translated">에서는 &lt;code&gt;latin1&lt;/code&gt; 모드 파일명은 바이트 단위로 인코딩된다. 이를 통해 시스템의 모든 파일 이름을 목록으로 표시 할 수 있습니다. 그러나 &quot;&amp;Ouml;stersund.txt&quot;라는 파일은 &lt;code&gt;file:list_dir/1&lt;/code&gt; 에 &quot;&amp;Ouml;stersund.txt&quot;(파일을 만드는 프로그램에 의해 파일 이름이 바이트 단위 ISO Latin-1로 인코딩 된 경우) 또는 &lt;code&gt;[195,150,115,116,101,114,115,117,110,100]&lt;/code&gt; -UTF-8 바이트를 포함하는 목록입니다 (원하는 것은 아님). 이러한 시스템에서 유니 코드 파일 이름 변환을 사용하는 경우 UTF-8이 아닌 파일 이름은 &lt;code&gt;file:list_dir/1&lt;/code&gt; 과 같은 함수에서 무시됩니다 . 함수 &lt;code&gt;file:list_dir_all/1&lt;/code&gt; 로 검색 할 수 있지만 잘못 인코딩 된 파일 이름은 &quot;원시 파일 이름&quot;으로 나타납니다.</target>
        </trans-unit>
        <trans-unit id="116bd7f6b497e889e6e51bc1f52782d94cab61ab" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;latin1&lt;/code&gt; mode, the Erlang VM does not change the encoding of filenames. In &lt;code&gt;utf8&lt;/code&gt; mode, filenames can contain Unicode characters greater than 255 and the VM converts filenames back and forth to the native filename encoding (usually UTF-8, but UTF-16 on Windows).</source>
          <target state="translated">에서 &lt;code&gt;latin1&lt;/code&gt; 모드에서 얼랑 VM은 파일 이름의 인코딩을 변경하지 않습니다. 에서 &lt;code&gt;utf8&lt;/code&gt; 모드, 파일 이름은 앞뒤로 기본 파일 이름 인코딩 (Windows에서 일반적으로 UTF-8,하지만 UTF-16) 255보다 큰 유니 코드 문자와 VM의 변환 파일 이름을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efaf4d06886c110e8f2a1c0d7f556c6c220cdc32" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;list_max/2&lt;/code&gt;, you walk down the list and use &lt;code&gt;Head&lt;/code&gt; instead of &lt;code&gt;Result_so_far&lt;/code&gt; when &lt;code&gt;Head&lt;/code&gt; &amp;gt; &lt;code&gt;Result_so_far&lt;/code&gt;. &lt;code&gt;when&lt;/code&gt; is a special word used before the -&amp;gt; in the function to say that you only use this part of the function if the test that follows is true. A test of this type is called &lt;strong&gt;guard&lt;/strong&gt;. If the guard is false (that is, the guard fails), the next part of the function is tried. In this case, if &lt;code&gt;Head&lt;/code&gt; is not greater than &lt;code&gt;Result_so_far&lt;/code&gt;, then it must be smaller or equal to it. This means that a guard on the next part of the function is not needed.</source>
          <target state="translated">에서 &lt;code&gt;list_max/2&lt;/code&gt; , 당신은 목록을 아래로 걸어 사용하는 &lt;code&gt;Head&lt;/code&gt; 대신 &lt;code&gt;Result_so_far&lt;/code&gt; &lt;code&gt;Head&lt;/code&gt; &amp;gt; &lt;code&gt;Result_so_far&lt;/code&gt; . &lt;code&gt;when&lt;/code&gt; 는 함수에서-&amp;gt; 앞에 사용되는 특수 단어로, 다음 테스트가 참인 경우 함수의이 부분 만 사용한다고 말합니다. 이 유형의 테스트를 &lt;strong&gt;guard&lt;/strong&gt; 라고 합니다. 가드가 거짓이면 (즉, 가드가 실패한 경우) 기능의 다음 부분이 시도됩니다. 이 경우 &lt;code&gt;Head&lt;/code&gt; 가 &lt;code&gt;Result_so_far&lt;/code&gt; 보다 크지 않으면 더 작거나 같아야합니다. 이것은 기능의 다음 부분에 가드가 필요하지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="02cb096eaff82424f4a89dbad61cc6a39bc0e575" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;sort&lt;/code&gt; the fun is used:</source>
          <target state="translated">에서 &lt;code&gt;sort&lt;/code&gt; 재미가 사용됩니다 :</target>
        </trans-unit>
        <trans-unit id="12c27e7f6632f170be6359162707f4b8a39d1d9c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;terminal_logger&lt;/code&gt;:</source>
          <target state="translated">에서 &lt;code&gt;terminal_logger&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bbd6fe570f64e2ea4d9df82e02a34c966281d919" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;unicode&lt;/code&gt; mode, only ASCII numbers and letters have any special meaning after a backslash. All other characters (in particular, those whose code points are &amp;gt; 127) are treated as literals.</source>
          <target state="translated">에서 &lt;code&gt;unicode&lt;/code&gt; 모드 만 ASCII 숫자와 문자는 백 슬래시 후 특별한 의미를 가지고있다. 다른 모든 문자 (특히 코드 포인트가 127보다 큰 문자)는 리터럴로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="3192c3cf3b67f79505ca334fb569ea62ed1d48cb" translate="yes" xml:space="preserve">
          <source>In AEAD (Authenticated Encryption with Associated Data) mode, decrypt &lt;code&gt;CipherText&lt;/code&gt;according to &lt;code&gt;Type&lt;/code&gt; block cipher and check the authenticity the &lt;code&gt;PlainText&lt;/code&gt; and &lt;code&gt;AAD&lt;/code&gt; (Associated Authenticated Data) using the &lt;code&gt;CipherTag&lt;/code&gt;. May return &lt;code&gt;error&lt;/code&gt; if the decryption or validation fail's</source>
          <target state="translated">AEAD (관련 데이터로 인증 된 암호화) 모드에서 &lt;code&gt;Type&lt;/code&gt; 블록 암호 에 따라 &lt;code&gt;CipherText&lt;/code&gt; 를 해독하고 CipherTag 를 사용 하여 &lt;code&gt;PlainText&lt;/code&gt; 및 &lt;code&gt;AAD&lt;/code&gt; (Associated Authenticated Data)의 &lt;code&gt;CipherTag&lt;/code&gt; . 암호 해독 또는 유효성 검사에 실패하면 &lt;code&gt;error&lt;/code&gt; 반환 할 수 있음</target>
        </trans-unit>
        <trans-unit id="11cacd0985503ba6b7aa7e02c729d4cf5d9ec8c0" translate="yes" xml:space="preserve">
          <source>In AEAD (Authenticated Encryption with Associated Data) mode, encrypt &lt;code&gt;PlainText&lt;/code&gt;according to &lt;code&gt;Type&lt;/code&gt; block cipher and calculate &lt;code&gt;CipherTag&lt;/code&gt; that also authenticates the &lt;code&gt;AAD&lt;/code&gt; (Associated Authenticated Data).</source>
          <target state="translated">AEAD (관련 데이터를 사용한 인증 된 암호화) 모드에서 &lt;code&gt;Type&lt;/code&gt; 블록 암호 에 따라 &lt;code&gt;PlainText&lt;/code&gt; 를 암호화하고 &lt;code&gt;AAD&lt;/code&gt; (Associated Authenticated Data) 도 인증하는 &lt;code&gt;CipherTag&lt;/code&gt; 를 계산 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c038f0a7011f32aa3c2253ea59f81adb573ae04f" translate="yes" xml:space="preserve">
          <source>In ASN.1 it is also possible to have components that are themselves structured types. For example, it is possible to have the following:</source>
          <target state="translated">ASN.1에서는 자체 구조화 된 유형의 구성 요소를 가질 수도 있습니다. 예를 들어, 다음을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fd6892220150bfbf692aea6c817cdbc6b525af4" translate="yes" xml:space="preserve">
          <source>In ASN.1 it is possible to have:</source>
          <target state="translated">ASN.1에서는 다음이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="ac981922e3d2be3099b7dd819f976f8cd431aa5c" translate="yes" xml:space="preserve">
          <source>In ASN.1, &lt;code&gt;BIT STRING&lt;/code&gt; definitions can look as follows:</source>
          <target state="translated">ASN.1에서 &lt;code&gt;BIT STRING&lt;/code&gt; 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e4c809e7fa181f22943bb3998e2675cc28fadeb7" translate="yes" xml:space="preserve">
          <source>In Appendix A of the Megaco/H.248 specification (RFC 3525), there are about 30 messages that shows a representative call flow. We have also added a few extra version 1, version 2 and version 3 messages. We have used these messages as basis for our measurements. Our figures have not been weighted in regard to how frequent the different kinds of messages that are sent between the media gateway and its controller.</source>
          <target state="translated">Megaco / H.248 사양 (RFC 3525)의 부록 A에는 대표적인 통화 흐름을 나타내는 약 30 개의 메시지가 있습니다. 또한 버전 1, 버전 2 및 버전 3 메시지가 추가되었습니다. 이 메시지를 측정의 기초로 사용했습니다. 우리의 수치는 미디어 게이트웨이와 컨트롤러간에 서로 다른 종류의 메시지가 얼마나 자주 전송되는지에 대해서는 가중치를 두지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="a6d6cb54546267c7ab63766eec09cee649711a31" translate="yes" xml:space="preserve">
          <source>In Erlang code it can look as follows:</source>
          <target state="translated">Erlang 코드에서는 다음과 같이 보일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e5807093e6d87fdc7a49890d975be36f4a0da6c" translate="yes" xml:space="preserve">
          <source>In Erlang the BIF &lt;code&gt;erlang:term_to_binary/1,2&lt;/code&gt; is used to convert a term into the external format. To convert binary data encoding to a term, the BIF &lt;code&gt;erlang:binary_to_term/1&lt;/code&gt; is used.</source>
          <target state="translated">Erlang에서 BIF &lt;code&gt;erlang:term_to_binary/1,2&lt;/code&gt; 는 용어를 외부 형식으로 변환하는 데 사용됩니다. 이진 데이터 인코딩을 용어로 변환하기 위해 BIF &lt;code&gt;erlang:binary_to_term/1&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cfeed77756208eb4d9dfb0d9a3e58ff900cc5da1" translate="yes" xml:space="preserve">
          <source>In Erlang the following can apply:</source>
          <target state="translated">Erlang에서는 다음이 적용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55425998bade0d03c70bf896550329d58b5b495b" translate="yes" xml:space="preserve">
          <source>In Erlang, a Bin is used for constructing binaries and matching binary patterns. A Bin is written with the following syntax:</source>
          <target state="translated">Erlang에서 Bin은 바이너리를 구성하고 바이너리 패턴을 일치시키는 데 사용됩니다. Bin은 다음 구문으로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="27260c403bb29fda2001d4a6be0835230872a64b" translate="yes" xml:space="preserve">
          <source>In Erlang, strings are lists of integers. A string was until Erlang/OTP R13 defined to be encoded in the ISO Latin-1 (ISO 8859-1) character set, which is, code point by code point, a subrange of the Unicode character set.</source>
          <target state="translated">Erlang에서 문자열은 정수 목록입니다. 문자열은 Erlang / OTP R13이 ISO Latin-1 (ISO 8859-1) 문자 세트, 즉 코드 포인트 별, 유니 코드 문자 세트의 하위 범위로 인코딩되도록 정의 될 때까지있었습니다.</target>
        </trans-unit>
        <trans-unit id="000d471cb67467678d1ade49d91a91cbdff773ac" translate="yes" xml:space="preserve">
          <source>In Erlang, the &lt;code&gt;SET&lt;/code&gt; type is used exactly as &lt;code&gt;SEQUENCE&lt;/code&gt;. Notice that if BER or DER encoding rules are used, decoding a &lt;code&gt;SET&lt;/code&gt; is slower than decoding a &lt;code&gt;SEQUENCE&lt;/code&gt; because the components must be sorted.</source>
          <target state="translated">Erlang에서 &lt;code&gt;SET&lt;/code&gt; 유형은 &lt;code&gt;SEQUENCE&lt;/code&gt; 로 정확하게 사용됩니다 . BER 또는 DER 인코딩 규칙을 사용 하는 경우 구성 요소를 정렬해야하므로 &lt;code&gt;SET&lt;/code&gt; 디코딩은 &lt;code&gt;SEQUENCE&lt;/code&gt; 디코딩보다 속도가 느립니다 .</target>
        </trans-unit>
        <trans-unit id="111866cd1ba49a2b43af4850505bc155722873f8" translate="yes" xml:space="preserve">
          <source>In Erlang, the full UTF-16 range is supported when applicable, like in the &lt;code&gt;unicode&lt;/code&gt; module and in the bit syntax.</source>
          <target state="translated">Erlang에서는 &lt;code&gt;unicode&lt;/code&gt; 모듈 및 비트 구문과 같이 적용 가능한 경우 전체 UTF-16 범위가 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="2a7efb592ded3e962f361d6c4ea93e492befd66f" translate="yes" xml:space="preserve">
          <source>In Erlang, there is no interface to retrieve a mark with &lt;code&gt;&lt;a href=&quot;#run-2&quot;&gt;run/2,3&lt;/a&gt;&lt;/code&gt;, so only the secondary purpose is relevant to the Erlang programmer.</source>
          <target state="translated">Erlang에는 &lt;code&gt;&lt;a href=&quot;#run-2&quot;&gt;run/2,3&lt;/a&gt;&lt;/code&gt; 으로 마크를 검색하기위한 인터페이스가 없으므로 2 차 목적 만 Erlang 프로그래머와 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c60f9a05486134b501e5953f76c349e506d6f0f" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP 17.0, the encoding default for Erlang source files was switched to UTF-8.</source>
          <target state="translated">Erlang / OTP 17.0에서 Erlang 소스 파일의 인코딩 기본값이 UTF-8로 전환되었습니다.</target>
        </trans-unit>
        <trans-unit id="6916e39092e66107b55f61baa3016b3f04cf8426" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP 20.0, atoms and function can contain Unicode characters. Module names, application names, and node names are still restricted to the ISO Latin-1 range.</source>
          <target state="translated">Erlang / OTP 20.0에서 원자와 함수는 유니 코드 문자를 포함 할 수 있습니다. 모듈 이름, 응용 프로그램 이름 및 노드 이름은 여전히 ​​ISO Latin-1 범위로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="198d0d1078d6039827840866a4f6899fdbe8d43c" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP 21.0, a new API for logging was added. The old &lt;code&gt;error_logger&lt;/code&gt; module can still be used by legacy code, but log events are redirected to the new Logger API. New code should use the Logger API directly.</source>
          <target state="translated">Erlang / OTP 21.0에는 로깅을위한 새로운 API가 추가되었습니다. 기존 &lt;code&gt;error_logger&lt;/code&gt; 모듈은 여전히 ​​레거시 코드에서 사용할 수 있지만 로그 이벤트는 새로운 Logger API로 리디렉션됩니다. 새 코드는 로거 API를 직접 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e0d8b8d2cdbb6065786dcebb0086f01cf068b155" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP R16B the syntax of Erlang tokens was extended to handle Unicode. The support was limited to string literals and comments. More about the usage of Unicode in Erlang source files can be found in &lt;code&gt;STDLIB's User's Guide&lt;/code&gt;.</source>
          <target state="translated">Erlang / OTP R16B에서 Erlang 토큰의 구문은 유니 코드를 처리하도록 확장되었습니다. 지원은 문자열 리터럴 및 주석으로 제한되었습니다. Erlang 소스 파일에서의 유니 코드 사용법에 대한 자세한 내용은 &lt;code&gt;STDLIB's User's Guide&lt;/code&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24ca06e1e4890e17adbf7557eee37d1f56256f49" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP R5B and later versions of OTP, the &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; directories are situated under &lt;code&gt;OTPROOT/lib/erl_interface-VSN&lt;/code&gt;, where &lt;code&gt;OTPROOT&lt;/code&gt; is the root directory of the OTP installation (&lt;code&gt;/usr/local/otp&lt;/code&gt; in the recent example) and &lt;code&gt;VSN&lt;/code&gt; is the version of the Erl_Interface application (3.2.1 in the recent example).</source>
          <target state="translated">Erlang / OTP R5B 및 이후 버전의 OTP에서 &lt;code&gt;include&lt;/code&gt; 및 &lt;code&gt;lib&lt;/code&gt; 디렉토리는 &lt;code&gt;OTPROOT/lib/erl_interface-VSN&lt;/code&gt; 아래에 있습니다 . 여기서 &lt;code&gt;OTPROOT&lt;/code&gt; 는 OTP 설치의 루트 디렉토리입니다 ( 최근 예에서는 &lt;code&gt;/usr/local/otp&lt;/code&gt; ). &lt;code&gt;VSN&lt;/code&gt; 은 Erl_Interface 애플리케이션의 버전입니다 (최근 예에서는 3.2.1).</target>
        </trans-unit>
        <trans-unit id="36bdb9cf8a7d0b24c3ea497881807594aa4ad9c3" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP R5B and later versions of OTP, the &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; directories are situated under &lt;code&gt;OTPROOT/lib/erl_interface-VSN&lt;/code&gt;, where &lt;code&gt;OTPROOT&lt;/code&gt; is the root directory of the OTP installation (&lt;code&gt;/usr/local/otp&lt;/code&gt; in the recent example) and &lt;code&gt;VSN&lt;/code&gt; is the version of the Erl_interface application (3.2.1 in the recent example).</source>
          <target state="translated">Erlang / OTP R5B 및 이후 버전의 OTP에서 &lt;code&gt;include&lt;/code&gt; 및 &lt;code&gt;lib&lt;/code&gt; 디렉토리는 &lt;code&gt;OTPROOT/lib/erl_interface-VSN&lt;/code&gt; 아래에 있습니다 . 여기서 &lt;code&gt;OTPROOT&lt;/code&gt; 는 OTP 설치의 루트 디렉토리입니다 ( 최근 예에서는 &lt;code&gt;/usr/local/otp&lt;/code&gt; ). &lt;code&gt;VSN&lt;/code&gt; 은 Erl_interface 애플리케이션의 버전입니다 (최근 예에서는 3.2.1).</target>
        </trans-unit>
        <trans-unit id="e2c46173457c64237f426cb5d2c876573b902705" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP R6B, a library similar to Erl_Interface for Java was added called &lt;strong&gt;jinterface&lt;/strong&gt;. It provides a tool for Java programs to communicate with Erlang nodes.</source>
          <target state="translated">얼랑 / OTP R6B에서, Java 용 Erl_Interface에 도서관 유사한라고 하였다 &lt;strong&gt;jinterface을&lt;/strong&gt; . Java 프로그램이 Erlang 노드와 통신 할 수있는 도구를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f9e5f8580820830244cd23f79a16074f3a89cc2a" translate="yes" xml:space="preserve">
          <source>In Erlang/OTP, access to TCP/IP and UDP sockets is provided by the modules &lt;code&gt;gen_tcp&lt;/code&gt; and &lt;code&gt;gen_udp&lt;/code&gt; in Kernel. Both are easy to use and do not require detailed knowledge about the socket concept.</source>
          <target state="translated">Erlang / OTP에서 TCP / IP 및 UDP 소켓에 대한 액세스 는 커널의 &lt;code&gt;gen_tcp&lt;/code&gt; 및 &lt;code&gt;gen_udp&lt;/code&gt; 모듈에 의해 제공됩니다 . 둘 다 사용하기 쉽고 소켓 개념에 대한 자세한 지식이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a321356801dc3e599cf50b6af4d5dd7265663386" translate="yes" xml:space="preserve">
          <source>In FIPS mode all non-FIPS compliant algorithms are disabled and throw exception &lt;code&gt;not_supported&lt;/code&gt;. Check &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports&lt;/a&gt;&lt;/code&gt; that in FIPS mode returns the restricted list of available algorithms.</source>
          <target state="translated">FIPS 모드에서는 모든 비 FIPS 호환 알고리즘이 비활성화되고 예외 &lt;code&gt;not_supported&lt;/code&gt; 가 발생 합니다 . Check &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports&lt;/a&gt;&lt;/code&gt; FIPS 모드에서 사용 가능한 제한된 알고리즘 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9654a53fa988a8beebddaefffba6dff20182607b" translate="yes" xml:space="preserve">
          <source>In FIPS mode non-validated algorithms are disabled. This may cause some unexpected problems in application relying on crypto.</source>
          <target state="translated">FIPS 모드에서는 유효성이 검증되지 않은 알고리즘이 비활성화됩니다. 이로 인해 암호화에 의존하는 응용 프로그램에서 예기치 않은 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfd282a1087eca416799317762a7b472853e3b7b" translate="yes" xml:space="preserve">
          <source>In German, the letter &quot;&amp;szlig;&quot; (sharp s) is in lower case, but the uppercase equivalent is &quot;SS&quot;.</source>
          <target state="translated">독일어에서 문자 &quot;&amp;szlig;&quot;(sharp s)는 소문자이지만 대문자는 &quot;SS&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="b43a09972d3f89ca539f6f835ed50cfae17cb115" translate="yes" xml:space="preserve">
          <source>In Greek, the letter &quot;&amp;Sigma;&quot; has two different lowercase forms, &quot;&amp;sigmaf;&quot; in word-final position and &quot;&amp;sigma;&quot; elsewhere.</source>
          <target state="translated">그리스어에서 문자 &quot;&amp;Sigma;&quot;는 단어 최종 위치에 &quot;&amp;sigmaf;&quot;와 다른 곳에 &quot;&amp;sigma;&quot;의 두 가지 소문자 형태가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e33a7d9a961a4a7fa95fde9918750cd7d701cd7" translate="yes" xml:space="preserve">
          <source>In OTP 20 it is desirable to remove all cipher suites that uses rsa kexchange (removed from default in 21)</source>
          <target state="translated">OTP 20에서는 rsa kexchange를 사용하는 모든 암호 제품군을 제거하는 것이 바람직합니다 (21에서 기본값에서 제거됨).</target>
        </trans-unit>
        <trans-unit id="6c8d7cdc42675f7eb3ae5329539c1c0357e28904" translate="yes" xml:space="preserve">
          <source>In OTP R16, the options were simplified. The back end is chosen using one of the options &lt;code&gt;ber&lt;/code&gt;, &lt;code&gt;per&lt;/code&gt;, or &lt;code&gt;uper&lt;/code&gt;. Options &lt;code&gt;optimize&lt;/code&gt;, &lt;code&gt;nif&lt;/code&gt;, and &lt;code&gt;driver&lt;/code&gt; options are no longer necessary (and the ASN.1 compiler generates a warning if they are used). Options &lt;code&gt;ber_bin&lt;/code&gt;, &lt;code&gt;per_bin&lt;/code&gt;, and &lt;code&gt;uper_bin&lt;/code&gt; options still work, but generates a warning.</source>
          <target state="translated">OTP R16에서는 옵션이 단순화되었습니다. 백엔드는 &lt;code&gt;ber&lt;/code&gt; , &lt;code&gt;per&lt;/code&gt; 또는 &lt;code&gt;uper&lt;/code&gt; 옵션 중 하나를 사용하여 선택됩니다 . 옵션 &lt;code&gt;optimize&lt;/code&gt; , &lt;code&gt;nif&lt;/code&gt; 및 &lt;code&gt;driver&lt;/code&gt; 옵션은 더 이상 필요하지 않습니다 (그리고 ASN.1 컴파일러는 사용되는 경우 경고를 생성 함). 옵션 &lt;code&gt;ber_bin&lt;/code&gt; , &lt;code&gt;per_bin&lt;/code&gt; 및 &lt;code&gt;uper_bin&lt;/code&gt; 옵션 여전히 작동하지만 경고를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="d070e27ec63b672cbbc0cd22453c8a0bbd814f44" translate="yes" xml:space="preserve">
          <source>In OTP releases before R9C, the abstract code after some more processing was stored in the Beam file. The first element of the tuple would be either &lt;code&gt;abstract_v1&lt;/code&gt; (in OTP R7B) or &lt;code&gt;abstract_v2&lt;/code&gt; (in OTP R8B).</source>
          <target state="translated">R9C 이전의 OTP 릴리스에서 일부 추가 처리 후 추상 코드가 Beam 파일에 저장되었습니다. 튜플의 첫 번째 요소는 &lt;code&gt;abstract_v1&lt;/code&gt; (OTP R7B) 또는 &lt;code&gt;abstract_v2&lt;/code&gt; (OTP R8B)입니다.</target>
        </trans-unit>
        <trans-unit id="921af396e8f5461445f280e270dd2b5414708d3b" translate="yes" xml:space="preserve">
          <source>In OTP, &lt;strong&gt;application&lt;/strong&gt; denotes a component implementing some specific functionality, that can be started and stopped as a unit, and that can be reused in other systems. This module interacts with &lt;strong&gt;application controller&lt;/strong&gt;, a process started at every Erlang runtime system. This module contains functions for controlling applications (for example, starting and stopping applications), and functions to access information about applications (for example, configuration parameters).</source>
          <target state="translated">OTP에서 &lt;strong&gt;응용 프로그램&lt;/strong&gt; 은 특정 기능을 구현하는 구성 요소로, 장치로 시작하고 중지 할 수 있으며 다른 시스템에서 재사용 할 수 있습니다. 이 모듈 은 모든 Erlang 런타임 시스템에서 시작된 프로세스 인 &lt;strong&gt;application controller&lt;/strong&gt; 와 상호 작용 합니다. 이 모듈에는 응용 프로그램 제어 (예 : 응용 프로그램 시작 및 중지) 기능과 응용 프로그램에 대한 정보 (예 : 구성 매개 변수)에 액세스하는 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="eca3632f8a0f156b49e9fa89891e0ee96a189926" translate="yes" xml:space="preserve">
          <source>In OTP, an &lt;strong&gt;event manager&lt;/strong&gt; is a named object to which events can be sent. An &lt;strong&gt;event&lt;/strong&gt; can be, for example, an error, an alarm, or some information that is to be logged.</source>
          <target state="translated">OTP에서 &lt;strong&gt;이벤트 관리자&lt;/strong&gt; 는 이벤트를 전송할 수있는 명명 된 오브젝트입니다. &lt;strong&gt;이벤트는&lt;/strong&gt; , 예를 들어, 오류, 알람, 또는 기록 될 것입니다 몇 가지 정보가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a90aedd16eab7e90ca5158413abefdf208107564" translate="yes" xml:space="preserve">
          <source>In PCRE, a subpattern can be named in one of three ways: &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; or &lt;code&gt;(?'name'...)&lt;/code&gt; as in Perl, or &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; as in Python. References to capturing parentheses from other parts of the pattern, such as back references, recursion, and conditions, can be made by name and by number.</source>
          <target state="translated">: PCRE에서 서브 패턴은 세 가지 방법 중 하나로 이름을 지정할 수 있습니다 &lt;code&gt;(?&amp;lt;name&amp;gt;...)&lt;/code&gt; 또는 &lt;code&gt;(?'name'...)&lt;/code&gt; 펄처럼, 또는 &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; 에서와 같이 파이썬. 역 참조, 재귀 및 조건과 같은 패턴의 다른 부분에서 괄호를 캡처하는 것에 대한 참조는 이름 및 번호로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="256aeea3c9968f0c93cc31456d90fd25ae389948" translate="yes" xml:space="preserve">
          <source>In PCRE, it matches &quot;bab&quot;. The first capturing parentheses match &quot;b&quot;, then in the second group, when the back reference \1 fails to match &quot;b&quot;, the second alternative matches &quot;a&quot;, and then recurses. In the recursion, \1 does now match &quot;b&quot; and so the whole match succeeds. In Perl, the pattern fails to match because inside the recursive call \1 cannot access the externally set value.</source>
          <target state="translated">PCRE에서는 &quot;bab&quot;와 일치합니다. 첫 번째 캡처 괄호는 &quot;b&quot;와 일치하고, 두 번째 그룹에서 역 참조 \ 1이 &quot;b&quot;와 일치하지 않으면 두 번째 대체는 &quot;a&quot;와 일치 한 다음 되풀이됩니다. 재귀에서 \ 1은 이제 &quot;b&quot;와 일치하므로 전체 일치가 성공합니다. Perl에서는 재귀 호출 내부에서 \ 1 외부 설정 값에 액세스 할 수 없으므로 패턴이 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1bdbe179924ece7a6399c61e126213e1ec2fdb03" translate="yes" xml:space="preserve">
          <source>In Perl, the sequences \l, \L, \u, and \U are recognized by its string handler and used to modify the case of following characters. PCRE does not support these escape sequences.</source>
          <target state="translated">Perl에서 \ l, \ L, \ u 및 \ U 시퀀스는 문자열 처리기에서 인식되어 다음 문자의 대소 문자를 수정하는 데 사용됩니다. PCRE는 이러한 이스케이프 시퀀스를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6c9f67deea2c96d4c87a2b517cca3a419aaafb51" translate="yes" xml:space="preserve">
          <source>In R4B and earlier versions of OTP, &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;lib&lt;/code&gt; are situated under &lt;code&gt;OTPROOT/usr&lt;/code&gt;.</source>
          <target state="translated">R4B 및 이전 버전의 OTP에서 &lt;code&gt;include&lt;/code&gt; 및 &lt;code&gt;lib&lt;/code&gt; 는 &lt;code&gt;OTPROOT/usr&lt;/code&gt; 아래에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a3afab8c285c30f15c650612a9e9a18aec7d293" translate="yes" xml:space="preserve">
          <source>In SNMP, the &lt;code&gt;set&lt;/code&gt; operation is atomic. Either all variables which are specified in a &lt;code&gt;set&lt;/code&gt; operation are changed, or none are changed. Therefore, the &lt;code&gt;set&lt;/code&gt; operation is divided into two phases. In the first phase, the new value of each variable is checked against the definition of the variable in the MIB. The following definitions are checked:</source>
          <target state="translated">SNMP에서 &lt;code&gt;set&lt;/code&gt; 작업은 원 자성입니다. &lt;code&gt;set&lt;/code&gt; 조작에 지정된 모든 변수 가 변경되거나 변경되지 않습니다. 따라서, &lt;code&gt;set&lt;/code&gt; 동작은 2 단계로 나누어진다. 첫 번째 단계에서 각 변수의 새 값은 MIB의 변수 정의와 비교하여 확인됩니다. 다음 정의가 점검됩니다.</target>
        </trans-unit>
        <trans-unit id="021a1af44ce27aa9f05d1c38410af20ca7b60806" translate="yes" xml:space="preserve">
          <source>In SNMPv1 and SNMPv2c, the community string in the message was used for (at least) three different purposes:</source>
          <target state="translated">SNMPv1 및 SNMPv2c에서 메시지의 커뮤니티 문자열은 적어도 세 가지 다른 목적으로 사용되었습니다.</target>
        </trans-unit>
        <trans-unit id="02cb323587a2984dde2a87bd71f9d85e1a736a34" translate="yes" xml:space="preserve">
          <source>In SNMPv3, each of these usage areas has its own unique mechanism. A context is identified by the name of the SNMP entity, &lt;code&gt;contextEngineID&lt;/code&gt;, and the name of the context, &lt;code&gt;contextName&lt;/code&gt;. Each SNMPv3 message contains values for these two parameters.</source>
          <target state="translated">SNMPv3에서 이러한 각 사용 영역에는 고유 한 메커니즘이 있습니다. 컨텍스트는 SNMP 엔티티 이름 &lt;code&gt;contextEngineID&lt;/code&gt; 및 컨텍스트 이름 &lt;code&gt;contextName&lt;/code&gt; 으로 식별 됩니다. 각 SNMPv3 메시지에는이 두 매개 변수의 값이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="5895f59f593a11e2ddc456b6ee6229093c87afb4" translate="yes" xml:space="preserve">
          <source>In Turkish, both dotted and dotless &quot;i&quot; exist in lower case and upper case forms.</source>
          <target state="translated">터키어에서는 점과 점이없는 &quot;i&quot;가 모두 소문자와 대문자로 존재합니다.</target>
        </trans-unit>
        <trans-unit id="878884e2dc7ceb0c8586c874280425307fca0f37" translate="yes" xml:space="preserve">
          <source>In UTF-8 mode, characters with values &amp;gt; 255 (0xffff) can be included in a class as a literal string of data units, or by using the \x{ escaping mechanism.</source>
          <target state="translated">UTF-8 모드에서 값이 255 (0xffff) 인 문자는 리터럴 데이터 단위 문자열로 또는 \ x {이스케이프 메커니즘을 사용하여 클래스에 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0723db02fb1375caa6de0f6695a31f67e99a568d" translate="yes" xml:space="preserve">
          <source>In Unicode filename mode, filenames given to BIF &lt;code&gt;open_port/2&lt;/code&gt; with option &lt;code&gt;{spawn_executable,...}&lt;/code&gt; are also interpreted as Unicode. So is the parameter list specified in option &lt;code&gt;args&lt;/code&gt; available when using &lt;code&gt;spawn_executable&lt;/code&gt;. The UTF-8 translation of arguments can be avoided using binaries, see section &lt;code&gt;&lt;a href=&quot;#notes-about-raw-filenames&quot;&gt;Notes About Raw Filenames&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">유니 코드 파일 이름 모드에서 옵션 &lt;code&gt;{spawn_executable,...}&lt;/code&gt; 을 사용하여 BIF &lt;code&gt;open_port/2&lt;/code&gt; 에 지정된 파일 이름 도 유니 코드로 해석됩니다. &lt;code&gt;spawn_executable&lt;/code&gt; 을 사용할 때 옵션 &lt;code&gt;args&lt;/code&gt; 에 지정된 매개 변수 목록도 있습니다 . 바이너리를 사용하여 인수의 UTF-8 변환을 피할 수 있습니다 . &lt;code&gt;&lt;a href=&quot;#notes-about-raw-filenames&quot;&gt;Notes About Raw Filenames&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="19f2c130abf603c133bbd0f5a1747bb0969bbb8c" translate="yes" xml:space="preserve">
          <source>In Unicode mode, quantifiers apply to characters rather than to individual data units. Thus, for example, \x{100}{2} matches two characters, each of which is represented by a 2-byte sequence in a UTF-8 string. Similarly, \X{3} matches three Unicode extended grapheme clusters, each of which can be many data units long (and they can be of different lengths).</source>
          <target state="translated">유니 코드 모드에서 한정자는 개별 데이터 단위가 아닌 문자에 적용됩니다. 따라서 예를 들어, \ x {100} {2}는 두 문자와 일치하며 각 문자는 UTF-8 문자열에서 2 바이트 시퀀스로 표시됩니다. 마찬가지로, \ X {3}은 3 개의 유니 코드 확장 그래 핀 클러스터와 일치하며, 각 클러스터는 여러 데이터 단위 길이 일 수 있으며 길이가 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a58382bb2f1e4ec5560be47f72bd53dd8fd73e07" translate="yes" xml:space="preserve">
          <source>In Unicode mode, two more characters whose code points are &amp;gt; 255 are added: LS (line separator, U+2028) and PS (paragraph separator, U+2029). Unicode character property support is not needed for these characters to be recognized.</source>
          <target state="translated">유니 코드 모드에서는 LS (줄 구분 기호, U + 2028)와 PS (문단 구분 기호, U + 2029)보다 코드 포인트가 255보다 큰 문자가 두 개 더 추가됩니다. 이러한 문자를 인식하기 위해 유니 코드 문자 속성 지원이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b9bcf8117b716659d525a533ec0fd6a684678ba1" translate="yes" xml:space="preserve">
          <source>In Windows, all directory separators are forward slashes and the drive letter is in lower case.</source>
          <target state="translated">Windows에서 모든 디렉토리 구분 기호는 슬래시이며 드라이브 문자는 소문자입니다.</target>
        </trans-unit>
        <trans-unit id="ad12d1518ecf9a65e8a75f2907c07a876915311c" translate="yes" xml:space="preserve">
          <source>In Windows, all functions return filenames with forward slashes only, even if the arguments contain backslashes. To normalize a filename by removing redundant directory separators, use &lt;code&gt;&lt;a href=&quot;#join-1&quot;&gt;join/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Windows에서 인수에 백 슬래시가 포함되어 있어도 모든 함수는 슬래시 만있는 파일 이름을 반환합니다. 중복 디렉토리 분리자를 제거하여 파일 이름을 정규화하려면 &lt;code&gt;&lt;a href=&quot;#join-1&quot;&gt;join/1&lt;/a&gt;&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fd45d713b47049d2ce36151c1dc290fc396f5a95" translate="yes" xml:space="preserve">
          <source>In a CTH, behavior can be hooked in after the following functions:</source>
          <target state="translated">CTH에서 다음 기능 후에 동작을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a4189b805358c6e1539d1f92304f2c6381b6deb" translate="yes" xml:space="preserve">
          <source>In a CTH, the behavior can be hooked in before the following functions:</source>
          <target state="translated">CTH에서 다음 기능 전에 동작을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="effbd836389d7d8b463c9fd530b435aef42b51ae" translate="yes" xml:space="preserve">
          <source>In a KDE environment, select &lt;strong&gt;KDE Control Center (Personal Settings)&lt;/strong&gt; &amp;gt; &lt;strong&gt;Regional and Accessibility&lt;/strong&gt; &amp;gt; &lt;strong&gt;Keyboard Layout&lt;/strong&gt;.</source>
          <target state="translated">KDE 환경에서 &lt;strong&gt;KDE 제어 센터 (개인 설정)&lt;/strong&gt; &amp;gt; &lt;strong&gt;지역 및 접근성&lt;/strong&gt; &amp;gt; &lt;strong&gt;키보드 레이아웃을 선택하십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="33bc2d5f0d660142d0d63fc0df9ecd908613840a" translate="yes" xml:space="preserve">
          <source>In a UTF mode, PCRE does not allow the \C escape (which matches a single data unit even in a UTF mode) to appear in lookbehind assertions, as it makes it impossible to calculate the length of the lookbehind. The \X and \R escapes, which can match different numbers of data units, are not permitted either.</source>
          <target state="translated">UTF 모드에서 PCRE는 \ C 이스케이프 (UTF 모드에서도 단일 데이터 단위와 일치)를 lookbehind 어설 션에 표시 할 수 없으므로 lookbehind의 길이를 계산할 수 없습니다. 다른 수의 데이터 단위와 일치 할 수있는 \ X 및 \ R 이스케이프도 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c87d0f65600acbab54733adb07b3f71b63b4920" translate="yes" xml:space="preserve">
          <source>In a Unix (Bourne) shell, it can look as follows (line breaks are for readability, they are not to be there when typed):</source>
          <target state="translated">유닉스 (Bourne) 셸에서는 다음과 같이 보일 수 있습니다 (줄 바꿈은 읽기 쉽게하기 위해 입력 할 때 없어야 함).</target>
        </trans-unit>
        <trans-unit id="9d1062a9134da719f643aea0a4d7fbb853ab2580" translate="yes" xml:space="preserve">
          <source>In a black-box testing scenario, &lt;code&gt;Common Test&lt;/code&gt;-based test programs connect to the target system(s) through standard O&amp;amp;M and CLI protocols. &lt;code&gt;Common Test&lt;/code&gt; provides implementations of, and wrapper interfaces to, some of these protocols (most of which exist as standalone components and applications in OTP). The wrappers simplify configuration and add verbosity for logging purposes. &lt;code&gt;Common Test&lt;/code&gt; is continously extended with useful support modules. However, notice that it is a straightforward task to use any Erlang/OTP component for testing purposes with &lt;code&gt;Common Test&lt;/code&gt;, without needing a &lt;code&gt;Common Test&lt;/code&gt; wrapper for it. It is as simple as calling Erlang functions. A number of target-independent interfaces are supported in &lt;code&gt;Common Test&lt;/code&gt;, such as Generic Telnet and FTP. These can be specialized or used directly for controlling instruments, traffic load generators, and so on.</source>
          <target state="translated">블랙 박스 테스트 시나리오에서 &lt;code&gt;Common Test&lt;/code&gt; 기반 테스트 프로그램은 표준 O &amp;amp; M 및 CLI 프로토콜을 통해 대상 시스템에 연결됩니다. &lt;code&gt;Common Test&lt;/code&gt; 는 이러한 프로토콜 중 일부에 대한 구현 및 랩퍼 인터페이스를 제공합니다 (대부분 OTP에서 독립형 구성 요소 및 애플리케이션으로 존재 함). 래퍼는 로깅을 위해 구성을 단순화하고 세부 정보를 추가합니다. 유용한 &lt;code&gt;Common Test&lt;/code&gt; 모듈로 공통 테스트 가 지속적으로 확장됩니다. 그러나 &lt;code&gt;Common Test&lt;/code&gt; 랩퍼 가 없어도 &lt;code&gt;Common Test&lt;/code&gt; Erlang / OTP 구성 요소를 테스트 목적으로 사용하는 것은 간단한 작업 입니다. Erlang 함수를 호출하는 것만 큼 간단합니다. 다양한 대상 독립 인터페이스가 지원됩니다. &lt;code&gt;Common Test&lt;/code&gt; 일반 Telnet 및 FTP와 같은 공통 테스트 계측기, 교통 부하 발생기 등을 제어하기 위해 특수화하거나 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1500508d272e3e1ef6dd2792fe28503800aeebb" translate="yes" xml:space="preserve">
          <source>In a callback module:</source>
          <target state="translated">콜백 모듈에서 :</target>
        </trans-unit>
        <trans-unit id="f3b8b640abb829ff4cbfb271a5e40f88ec8ec137" translate="yes" xml:space="preserve">
          <source>In a distributed Erlang system, it is sometimes useful to connect to a node without also connecting to all other nodes. An example is some kind of O&amp;amp;M functionality used to inspect the status of a system, without disturbing it. For this purpose, a &lt;strong&gt;hidden node&lt;/strong&gt; can be used.</source>
          <target state="translated">분산 Erlang 시스템에서는 때때로 다른 모든 노드에 연결하지 않고 노드에 연결하는 것이 유용합니다. 시스템 상태를 방해하지 않고 검사하는 데 사용되는 일종의 O &amp;amp; M 기능이 그 예입니다. 이를 위해 &lt;strong&gt;숨겨진 노드를&lt;/strong&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4aec9cfbd2b5a5b825d96878372130aac2263b76" translate="yes" xml:space="preserve">
          <source>In a distributed system with several Erlang nodes, it can be necessary to control applications in a distributed manner. If the node, where a certain application is running, goes down, the application is to be restarted at another node.</source>
          <target state="translated">여러 Erlang 노드가있는 분산 시스템에서는 분산 방식으로 애플리케이션을 제어해야 할 수 있습니다. 특정 응용 프로그램이 실행중인 노드가 다운되면 다른 노드에서 응용 프로그램을 다시 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="23225511bfc3875384d2792bd043f1c701a2c0ca" translate="yes" xml:space="preserve">
          <source>In a future Erlang/OTP release, it might be implemented a way to (optionally) preserve sharing.</source>
          <target state="translated">향후 Erlang / OTP 릴리스에서는 공유를 선택적으로 유지하는 방법으로 구현 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a6305081dfcb5f7cad2ca28aa531435457c8383" translate="yes" xml:space="preserve">
          <source>In a future release, a bad type for argument &lt;code&gt;Dir&lt;/code&gt; will probably generate an exception.</source>
          <target state="translated">향후 릴리스에서 &lt;code&gt;Dir&lt;/code&gt; 인수에 잘못된 유형 이있을 경우 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1a6542a84ddb6812f9a19d1cc7c1b8efff7c3a54" translate="yes" xml:space="preserve">
          <source>In a future release, a bad type for argument &lt;code&gt;Filename&lt;/code&gt; will probably generate an exception.</source>
          <target state="translated">다음 릴리스에서 &lt;code&gt;Filename&lt;/code&gt; 인수의 유형이 잘못 되면 예외가 생성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9e2eab173886fa1c16faadaf18c5a216f901d1c" translate="yes" xml:space="preserve">
          <source>In a future release, this function may return more values and ranges. To avoid compatibility problems, it is recommended to use function &lt;code&gt;&lt;a href=&quot;io_lib#printable_list-1&quot;&gt;io_lib:printable_list/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">다음 릴리스에서이 함수는 더 많은 값과 범위를 반환 할 수 있습니다. 호환성 문제를 피하려면 &lt;code&gt;&lt;a href=&quot;io_lib#printable_list-1&quot;&gt;io_lib:printable_list/1&lt;/a&gt;&lt;/code&gt; 함수를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="ab65a5239391014eb913ce30baf2efae7d72ed7b" translate="yes" xml:space="preserve">
          <source>In a larger pattern, keeping track of parenthesis numbers can be tricky. This is made easier by the use of relative references. Instead of (?1) in the pattern above, you can write (?-2) to refer to the second most recently opened parentheses preceding the recursion. That is, a negative number counts capturing parentheses leftwards from the point at which it is encountered.</source>
          <target state="translated">더 큰 패턴에서는 괄호 숫자를 추적하는 것이 까다로울 수 있습니다. 상대 참조를 사용하면이 작업이 쉬워집니다. 위 패턴에서 (? 1) 대신 (? -2)를 쓰면 재귀 앞에 가장 최근에 열린 두 번째 괄호를 나타낼 수 있습니다. 즉, 음수는 캡처 된 괄호를 마주 치는 지점부터 왼쪽으로 셉니다.</target>
        </trans-unit>
        <trans-unit id="521f7cdd5ab3fc62df36d3dfb682c92be20244f3" translate="yes" xml:space="preserve">
          <source>In a larger system with a user (in this case an MGC) distributed over several Erlang nodes, it looks a little bit different. Here the encoding is performed on the originating Erlang node (1) and the binary is forwarded to the node (2) with the physical network interface. When the potential message reply is received on the interface on node (2), it is decoded there and then different actions will be taken for each transaction in the message. The transaction reply will be forwarded in its decoded form to the originating node (1) while the other types of transactions will be handled locally on node (2).</source>
          <target state="translated">여러 Erlang 노드에 분산 된 사용자 (이 경우 MGC)가있는 더 큰 시스템에서는 약간 다르게 보입니다. 여기서 인코딩은 원래 Erlang 노드 (1)에서 수행되고 바이너리는 물리적 네트워크 인터페이스를 통해 노드 (2)로 전달됩니다. 잠재적 인 메시지 응답이 노드 (2)의 인터페이스에서 수신되면, 거기에서 디코딩되고 메시지의 각 트랜잭션에 대해 다른 조치가 수행됩니다. 트랜잭션 응답은 디코딩 된 형식으로 발신 노드 (1)로 전달되는 반면 다른 유형의 트랜잭션은 노드 (2)에서 로컬로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="976ebf70f5a3964ad2dc1b919f7c060f1cb37e38" translate="yes" xml:space="preserve">
          <source>In a manner similar to the function &lt;code&gt;mnesia:index_read/3&lt;/code&gt;, any index information can be used when trying to match records. This function takes a pattern that obeys the same rules as the function &lt;code&gt;mnesia:match_object/3&lt;/code&gt;, except that this function requires the following conditions:</source>
          <target state="translated">&lt;code&gt;mnesia:index_read/3&lt;/code&gt; 함수와 유사한 방식으로 , 레코드를 일치 시키려고 할 때 모든 인덱스 정보를 사용할 수 있습니다. 이 함수는 다음 조건이 필요하다는 점을 제외하고 &lt;code&gt;mnesia:match_object/3&lt;/code&gt; 함수와 동일한 규칙을 따르는 패턴을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="4c4bc3edae976085e9a0d189975eeda0ad921051" translate="yes" xml:space="preserve">
          <source>In a monotonically increasing sequence of values, all values that have a predecessor are either larger than or equal to its predecessor.</source>
          <target state="translated">단조 증가하는 값 시퀀스에서 선행 작업이있는 모든 값은 이전 작업보다 크거나 같습니다.</target>
        </trans-unit>
        <trans-unit id="1ab70776fb35c924c17c1cd7488da7d1d0d285f9" translate="yes" xml:space="preserve">
          <source>In a new version of the release, the application &lt;code&gt;ch_app&lt;/code&gt; is to be included in &lt;code&gt;prim_app&lt;/code&gt;. That is, its topmost supervisor &lt;code&gt;ch_sup&lt;/code&gt; is to be started as a child process to &lt;code&gt;prim_sup&lt;/code&gt;.</source>
          <target state="translated">릴리스의 새 버전에서 응용 프로그램 &lt;code&gt;ch_app&lt;/code&gt; 이 포함되어야한다 &lt;code&gt;prim_app&lt;/code&gt; . 즉 자사의 최상위 감독자 인 &lt;code&gt;ch_sup&lt;/code&gt; 가 할 수있는 자식 프로세스로 시작되어야한다 &lt;code&gt;prim_sup&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="274b316a1d6a226ddaa81a91a28524b871d26fde" translate="yes" xml:space="preserve">
          <source>In a pattern matching, a left-hand side &lt;code&gt;&lt;a href=&quot;expressions#pattern&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; is matched against a right-hand side &lt;code&gt;&lt;a href=&quot;expressions#term&quot;&gt;term&lt;/a&gt;&lt;/code&gt;. If the matching succeeds, any unbound variables in the pattern become bound. If the matching fails, a run-time error occurs.</source>
          <target state="translated">패턴 매칭에서, 좌측 사이드 &lt;code&gt;&lt;a href=&quot;expressions#pattern&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 우측면 대해 일치 &lt;code&gt;&lt;a href=&quot;expressions#term&quot;&gt;term&lt;/a&gt;&lt;/code&gt; . 일치가 성공하면 패턴의 바인딩되지 않은 변수가 바인딩됩니다. 일치하지 않으면 런타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a946839a1f3091d7ba3fdcd58b538b74992aa355" translate="yes" xml:space="preserve">
          <source>In a strictly monotonically increasing sequence of values, all values that have a predecessor are larger than its predecessor.</source>
          <target state="translated">엄격하게 단조 증가하는 값 시퀀스에서 선행 작업이있는 모든 값은 이전 작업보다 큽니다.</target>
        </trans-unit>
        <trans-unit id="31ff33f4c7a5907d10bf958b213e55ba1dc343c7" translate="yes" xml:space="preserve">
          <source>In a supervision tree, many of the processes have similar structures, they follow similar patterns. For example, the supervisors are similar in structure. The only difference between them is which child processes they supervise. Many of the workers are servers in a server-client relation, finite-state machines, or event handlers such as error loggers.</source>
          <target state="translated">감독 트리에서 많은 프로세스는 유사한 구조를 가지며 유사한 패턴을 따릅니다. 예를 들어, 수퍼바이저의 구조는 비슷합니다. 그들 사이의 유일한 차이점은 그들이 감독하는 자식 프로세스입니다. 많은 작업자가 서버-클라이언트 관계, 유한 상태 시스템 또는 오류 로거와 같은 이벤트 핸들러의 서버입니다.</target>
        </trans-unit>
        <trans-unit id="bd210cc6dd528624657860bc47c1121fbe29a1ff" translate="yes" xml:space="preserve">
          <source>In a system implemented according to the OTP design principles, all processes, except system processes and special processes, reside in one of the behaviours &lt;code&gt;supervisor&lt;/code&gt;, &lt;code&gt;gen_server&lt;/code&gt;, &lt;code&gt;gen_fsm&lt;/code&gt;, &lt;code&gt;gen_statem&lt;/code&gt; or &lt;code&gt;gen_event&lt;/code&gt;. These belong to the STDLIB application and upgrading/downgrading normally requires an emulator restart.</source>
          <target state="translated">OTP 설계 원칙에 따라 구현 된 시스템에서 시스템 프로세스 및 특수 프로세스를 제외한 모든 프로세스는 동작 &lt;code&gt;supervisor&lt;/code&gt; , &lt;code&gt;gen_server&lt;/code&gt; , &lt;code&gt;gen_fsm&lt;/code&gt; , &lt;code&gt;gen_statem&lt;/code&gt; 또는 &lt;code&gt;gen_event&lt;/code&gt; 중 하나에 있습니다. 이들은 STDLIB 애플리케이션에 속하며 일반적으로 업그레이드 / 다운 그레이드에는 에뮬레이터를 다시 시작해야합니다.</target>
        </trans-unit>
        <trans-unit id="554c457d1fb565b9a6393985044814faed4608a5" translate="yes" xml:space="preserve">
          <source>In a system of &lt;code&gt;Mnesia&lt;/code&gt; nodes, every node is aware of the current location of all tables. In this example, data is replicated on both nodes and functions that manipulate the data in the tables can be executed on either of the two nodes. Code that manipulate &lt;code&gt;Mnesia&lt;/code&gt; data behaves identically regardless of where the data resides.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; 노드 시스템 에서 모든 노드는 모든 테이블의 현재 위치를 알고 있습니다. 이 예에서 데이터는 두 노드 모두에 복제되며 테이블의 데이터를 조작하는 함수는 두 노드 중 하나에서 실행될 수 있습니다. &lt;code&gt;Mnesia&lt;/code&gt; 데이터 를 조작하는 코드는 데이터가있는 위치에 관계없이 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="8b48851f5568a382a621cc92c48317c0fa23d6e3" translate="yes" xml:space="preserve">
          <source>In a system structured according to the OTP design principles, any process would be a child process belonging to a supervisor, see &lt;code&gt;&lt;a href=&quot;#sup_add&quot;&gt;Adding and Deleting Child Processes&lt;/a&gt;&lt;/code&gt; in Changing a Supervisor.</source>
          <target state="translated">OTP 설계 원칙에 따라 구성된 시스템에서 모든 프로세스는 수퍼바이저에 속하는 &lt;code&gt;&lt;a href=&quot;#sup_add&quot;&gt;Adding and Deleting Child Processes&lt;/a&gt;&lt;/code&gt; 입니다. 수퍼바이저 변경에서 하위 프로세스 추가 및 삭제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="44ba56c896fa716f74253d95bcea0e44a23d8f58" translate="yes" xml:space="preserve">
          <source>In a system that use comparatively few processes, performance &lt;strong&gt;might&lt;/strong&gt; be improved by increasing the minimum heap size using either the &lt;code&gt;+h&lt;/code&gt; option for &lt;code&gt;erl&lt;/code&gt; or on a process-per-process basis using the &lt;code&gt;min_heap_size&lt;/code&gt; option for &lt;code&gt;spawn_opt/4&lt;/code&gt;.</source>
          <target state="translated">비교적 소수의 프로세스를 사용하는 시스템에서 성능이 &lt;strong&gt;있습니다&lt;/strong&gt; 중 하나를 사용하여 최소 힙 크기를 증가시킴으로써 향상 될 수 &lt;code&gt;+h&lt;/code&gt; 에 대한 옵션 &lt;code&gt;erl&lt;/code&gt; 또는 사용하여 프로세스 프로세스 당 기준으로 &lt;code&gt;min_heap_size&lt;/code&gt; 에 대한 옵션 &lt;code&gt;spawn_opt/4&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="43f12319f42fd8dda78673d0ca45eab01cc78900" translate="yes" xml:space="preserve">
          <source>In a system with TCP-based distribution, this data is kept in the &lt;strong&gt;Erlang port mapper daemon&lt;/strong&gt; (&lt;code&gt;epmd&lt;/code&gt;), which is contacted when a distributed node starts. The lock file and a convention for the UDS listen socket's name remove the need for &lt;code&gt;epmd&lt;/code&gt; when using this distribution module. UDS is always restricted to one host, why avoiding a port mapper is easy.</source>
          <target state="translated">TCP 기반 배포가있는 시스템에서이 데이터는 &lt;strong&gt;Erlang 포트 매퍼 데몬&lt;/strong&gt; ( &lt;code&gt;epmd&lt;/code&gt; )에 보관되며 분산 노드가 시작될 때 연결됩니다. UDS 청취 소켓 이름에 대한 잠금 파일 및 규칙은 이 배포 모듈 을 &lt;code&gt;epmd&lt;/code&gt; 때 epmd 가 필요하지 않습니다 . UDS는 항상 하나의 호스트로 제한되므로 포트 매퍼를 피하는 것이 쉬운 이유는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="5ccaddcd0c823bd477d387b9058aa0fc21906850" translate="yes" xml:space="preserve">
          <source>In a table monitored by SNMP, all elements must be integers, strings, or lists of integers.</source>
          <target state="translated">SNMP가 모니터하는 테이블에서 모든 요소는 정수, 문자열 또는 정수 목록이어야합니다.</target>
        </trans-unit>
        <trans-unit id="f62f7aaa3c520340c959fbaf0d8e529944b88886" translate="yes" xml:space="preserve">
          <source>In a target system, the release upgrade file is to be located in directory &lt;code&gt;$ROOT/releases/Vsn&lt;/code&gt;.</source>
          <target state="translated">대상 시스템에서 릴리스 업그레이드 파일은 &lt;code&gt;$ROOT/releases/Vsn&lt;/code&gt; 디렉토리에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ac283a89487dcb253786b8bd6bb529084d29ffc" translate="yes" xml:space="preserve">
          <source>In a test suite, one must &lt;strong&gt;require&lt;/strong&gt; that a configuration variable (&lt;code&gt;CfgVarName&lt;/code&gt; in the previous definition) exists before attempting to read the associated value in a test case or configuration function.</source>
          <target state="translated">테스트 스위트 번 수행해야 &lt;strong&gt;요구&lt;/strong&gt; (구성 변수 것을 &lt;code&gt;CfgVarName&lt;/code&gt; 이전 정의)는 테스트 케이스 구성 또는 기능에 관련된 값을 판독하기 전에 존재한다.</target>
        </trans-unit>
        <trans-unit id="4fb9fe0e283f20ff6583d865477e2f5797757ef1" translate="yes" xml:space="preserve">
          <source>In a tuple &lt;code&gt;{stylesheet,CSSFile}&lt;/code&gt;, if &lt;code&gt;CSSFile&lt;/code&gt; is specified with a path, for example, &lt;code&gt;&quot;$TEST/styles/categories.css&quot;&lt;/code&gt;, this full name is used to locate the file. However, if only the file name is specified, for example, &lt;code&gt;categories.css&lt;/code&gt;, the CSS file is assumed to be located in the data directory, &lt;code&gt;data_dir&lt;/code&gt;, of the suite. The latter use is recommended, as it is portable compared to hard coding path names in the suite.</source>
          <target state="translated">튜플 &lt;code&gt;{stylesheet,CSSFile}&lt;/code&gt; 에서 &lt;code&gt;CSSFile&lt;/code&gt; 이 경로와 함께 지정된 경우 ( 예 : &lt;code&gt;&quot;$TEST/styles/categories.css&quot;&lt;/code&gt; )이 전체 이름은 파일을 찾는 데 사용됩니다. 그러나 파일 이름 만 지정하면 (예 : &lt;code&gt;categories.css&lt;/code&gt; ) CSS 파일은 스위트 의 데이터 디렉토리 &lt;code&gt;data_dir&lt;/code&gt; 에 있다고 가정합니다 . 후자의 사용은 제품군의 하드 코딩 경로 이름과 비교하여 이식성이 있으므로 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="1c5578dc50a0864bd8d9d5138f6fed8f654dd2af" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;{Item,Value}&lt;/code&gt; pairs defined for &lt;code&gt;&lt;a href=&quot;#info-1&quot;&gt;info/1&lt;/a&gt;&lt;/code&gt;, the following items are allowed:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#info-1&quot;&gt;info/1&lt;/a&gt;&lt;/code&gt; 에 대해 정의 된 &lt;code&gt;{Item,Value}&lt;/code&gt; 쌍 외에도 다음 항목이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="1a79ac5033930298cd0d6e70aec5390fc42e348e" translate="yes" xml:space="preserve">
          <source>In addition to the Call Graph there is a graph called the  &lt;strong id=&quot;inter_call_graph&quot;&gt;Inter Call Graph&lt;/strong&gt;. This is a graph of calls (From, To) such that there is a chain of calls from From to To in the Call Graph, and every From and To is an exported function or an unused local function. The vertices are the same as for the Call Graph.</source>
          <target state="translated">Call Graph 외에도 &lt;strong id=&quot;inter_call_graph&quot;&gt;Inter Call Graph&lt;/strong&gt; 라는 &lt;strong id=&quot;inter_call_graph&quot;&gt;그래프가&lt;/strong&gt; 있습니다. 이것은 호출 그래프 (From, To)로서 호출 그래프에 From에서 To까지의 호출 체인이 있으며 모든 From 및 To는 내 보낸 함수 또는 사용되지 않는 로컬 함수입니다. 꼭짓점은 호출 그래프와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="5ea131aa8ce39e0fad64d7f37053c449509534e3" translate="yes" xml:space="preserve">
          <source>In addition to the algorithms negotiated by the cipher suite used for key exchange, payload encryption, message authentication and pseudo random calculation, the TLS signature algorithm extension &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5246.txt&quot;&gt;Section 7.4.1.4.1 in RFC 5246&lt;/a&gt;&lt;/code&gt; may be used, from TLS 1.2, to negotiate which signature algorithm to use during the TLS handshake. If no lower TLS versions than 1.2 are supported, the client will send a TLS signature algorithm extension with the algorithms specified by this option. Defaults to</source>
          <target state="translated">키 교환, 페이로드 암호화, 메시지 인증 및 의사 난수 계산에 사용되는 암호 제품군에 의해 협상 된 알고리즘 외에도 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5246.txt&quot;&gt;Section 7.4.1.4.1 in RFC 5246&lt;/a&gt;&lt;/code&gt; 의 TLS 서명 알고리즘 확장 섹션 7.4.1.4.1이 TLS 1.2부터 사용될 수 있습니다. TLS 핸드 셰이크 중에 사용할 서명 알고리즘. 1.2보다 낮은 TLS 버전이 지원되지 않으면 클라이언트는이 옵션으로 지정된 알고리즘과 함께 TLS 서명 알고리즘 확장을 보냅니다. 기본값은</target>
        </trans-unit>
        <trans-unit id="cfba226beccd4a1427fc9d1c6106071bf62f4d15" translate="yes" xml:space="preserve">
          <source>In addition to the documentation here Erlang is described in several recent books like:</source>
          <target state="translated">여기에 문서 외에도 Erlang은 다음과 같은 몇 가지 최신 책에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="88d44d718b6e7d7989a95592c66be31f11e98097" translate="yes" xml:space="preserve">
          <source>In addition to the earlier:</source>
          <target state="translated">이전 이외에 :</target>
        </trans-unit>
        <trans-unit id="890bb829697d00b41e1b4a5c52b5061881f7d784" translate="yes" xml:space="preserve">
          <source>In addition to the mandatory callback function &lt;code&gt;log/2&lt;/code&gt;, a handler module can export the optional callback functions &lt;code&gt;adding_handler/1&lt;/code&gt;, &lt;code&gt;changing_config/2&lt;/code&gt; and &lt;code&gt;removing_handler/1&lt;/code&gt;. See section &lt;code&gt;&lt;a href=&quot;logger#handler_callback_functions&quot;&gt;Handler Callback Functions&lt;/a&gt;&lt;/code&gt; in the logger(3) manual page for more information about these function.</source>
          <target state="translated">필수 콜백 함수에 더하여 &lt;code&gt;log/2&lt;/code&gt; , 처리기 모듈은 선택적 콜백 함수 내보낼 수 &lt;code&gt;adding_handler/1&lt;/code&gt; , &lt;code&gt;changing_config/2&lt;/code&gt; 및 &lt;code&gt;removing_handler/1&lt;/code&gt; . 이 함수에 대한 자세한 내용은 logger (3) 매뉴얼 페이지의 &lt;code&gt;&lt;a href=&quot;logger#handler_callback_functions&quot;&gt;Handler Callback Functions&lt;/a&gt;&lt;/code&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="45082fc3acc3b9bc0e8feada04ef6474816b9ee7" translate="yes" xml:space="preserve">
          <source>In addition to the ordinary functions for receiving and sending files (see &lt;code&gt;recv/2&lt;/code&gt;, &lt;code&gt;recv/3&lt;/code&gt;, &lt;code&gt;send/2&lt;/code&gt;, and &lt;code&gt;send/3&lt;/code&gt;) there are functions for receiving remote files as binaries (see &lt;code&gt;recv_bin/2&lt;/code&gt;) and for sending binaries to be stored as remote files (see &lt;code&gt;send_bin/3&lt;/code&gt;).</source>
          <target state="translated">파일 수신 및 전송을위한 일반 기능 ( &lt;code&gt;recv/2&lt;/code&gt; , &lt;code&gt;recv/3&lt;/code&gt; , &lt;code&gt;send/2&lt;/code&gt; 및 &lt;code&gt;send/3&lt;/code&gt; 참조 ) 외에도 원격 파일을 바이너리로 수신하고 ( &lt;code&gt;recv_bin/2&lt;/code&gt; 참조 ) 바이너리를 원격 파일로 저장됩니다 ( &lt;code&gt;send_bin/3&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="af29f18311535fbae0f8e4ae58bbff8300a8115f" translate="yes" xml:space="preserve">
          <source>In addition to the representations described earlier, the following deprecated representations are available if the specification has been compiled with option &lt;code&gt;legacy_erlang_types&lt;/code&gt;:</source>
          <target state="translated">사양이 &lt;code&gt;legacy_erlang_types&lt;/code&gt; 옵션으로 컴파일 된 경우 앞에서 설명한 표현 외에도 다음과 같은 더 이상 사용되지 않는 표현을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="86f6f7e492ba3b7949f4b38c0a7d47daec6054a6" translate="yes" xml:space="preserve">
          <source>In addition to the representations of forms, the list that represents a module declaration (as returned by functions in &lt;code&gt;epp(3)&lt;/code&gt; and &lt;code&gt;erl_parse(3)&lt;/code&gt;) can contain the following:</source>
          <target state="translated">양식 표현 외에도 모듈 선언을 나타내는 목록 ( &lt;code&gt;epp(3)&lt;/code&gt; 및 &lt;code&gt;erl_parse(3)&lt;/code&gt; 함수에 의해 리턴 됨 )은 다음을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ad8f4e74819a6f7578284e9cf32df82a24e4ca4" translate="yes" xml:space="preserve">
          <source>In addition to the standard Unicode properties described earlier, PCRE supports four more that make it possible to convert traditional escape sequences, such as \w and \s to use Unicode properties. PCRE uses these non-standard, non-Perl properties internally when the &lt;code&gt;ucp&lt;/code&gt; option is passed. However, they can also be used explicitly. The properties are as follows:</source>
          <target state="translated">앞에서 설명한 표준 유니 코드 속성 외에도 PCRE는 유니 코드 속성을 사용하도록 \ w 및 \ s와 같은 기존 이스케이프 시퀀스를 변환 할 수있는 네 가지를 더 지원합니다. PCRE는 &lt;code&gt;ucp&lt;/code&gt; 옵션이 전달 될 때 이러한 비표준 비 Perl 특성을 내부적으로 사용합니다 . 그러나 명시 적으로 사용할 수도 있습니다. 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="698d80c93fc7667e3d673153ab193877506b308a" translate="yes" xml:space="preserve">
          <source>In addition to the static supervision tree, dynamic child processes can be added to an existing supervisor with the following call:</source>
          <target state="translated">정적 감독 트리 외에도 다음과 같은 호출을 통해 동적 자식 프로세스를 기존 감독자에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58454c75737b607a068b4e77b1a88fd258a15b57" translate="yes" xml:space="preserve">
          <source>In addition to the trace log file(s), a file with extension &lt;code&gt;.ti&lt;/code&gt; is created when Trace Tool Builder is started. This is the trace information file. It is a binary file, which contains the process information, trace flags used, the name of the node to which it belongs, and all information written with function &lt;code&gt;&lt;a href=&quot;ttb#write_trace_info-2&quot;&gt;ttb:write_trace_info/2&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;.ti&lt;/code&gt; files are always fetched with other logs when the trace is stopped.</source>
          <target state="translated">추적 도구 파일 이 시작되면 Trace Tool Builder가 시작될 때 확장자가 &lt;code&gt;.ti&lt;/code&gt; 인 파일 이 생성됩니다. 이것은 추적 정보 파일입니다. 이 파일은 프로세스 정보, 사용 된 추적 플래그, 속해있는 노드 이름 및 &lt;code&gt;&lt;a href=&quot;ttb#write_trace_info-2&quot;&gt;ttb:write_trace_info/2&lt;/a&gt;&lt;/code&gt; 함수로 작성된 모든 정보를 포함하는 2 진 파일 입니다. 추적이 중지되면 &lt;code&gt;.ti&lt;/code&gt; 파일은 항상 다른 로그와 함께 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ead83cfe423b6f87966ff81fd05657fc8c719fd4" translate="yes" xml:space="preserve">
          <source>In addition to these options, &lt;strong&gt;raw&lt;/strong&gt; option specifications can be used. The raw options are specified as a tuple of arity four, beginning with tag &lt;code&gt;raw&lt;/code&gt;, followed by the protocol level, the option number, and the option value specified as a binary. This corresponds to the second, third, and fourth arguments to the &lt;code&gt;setsockopt&lt;/code&gt; call in the C socket API. The option value must be coded in the native endianess of the platform and, if a structure is required, must follow the structure alignment conventions on the specific platform.</source>
          <target state="translated">이러한 옵션 외에도 &lt;strong&gt;원시&lt;/strong&gt; 옵션 사양을 사용할 수 있습니다. 원시 옵션은 태그 &lt;code&gt;raw&lt;/code&gt; 로 시작 하여 프로토콜 레벨, 옵션 번호 및 2 진으로 지정된 옵션 값이 뒤 따르는 arity 4의 튜플로 지정됩니다. 이는 C 소켓 API 의 &lt;code&gt;setsockopt&lt;/code&gt; 호출에 대한 두 번째, 세 번째 및 네 번째 인수에 해당 합니다. 옵션 값은 플랫폼의 고유 엔디안으로 코딩되어야하며 구조가 필요한 경우 특정 플랫폼의 구조 정렬 규칙을 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="ae1cf5f2bfcd3b60ef15c86d1e7f135dfc63d587" translate="yes" xml:space="preserve">
          <source>In addition to these, the following fields are automatically inserted by Logger, values taken from the two first parameters to &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">이 외에도 다음 필드가 Logger에 의해 자동으로 삽입되며, 두 개의 첫 번째 매개 변수에서 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; 로 가져온 값입니다 .</target>
        </trans-unit>
        <trans-unit id="e583d04eef0dfd18104660d17dcc9b07446e62d3" translate="yes" xml:space="preserve">
          <source>In addition to this introductory chapter, the &lt;code&gt;Event Tracers&lt;/code&gt; User's Guide contains the following chapters:</source>
          <target state="translated">이 소개 장 외에도 &lt;code&gt;Event Tracers&lt;/code&gt; 사용 설명서에는 다음 장이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd1509d104b7597ab782042099faae460d5ff6b5" translate="yes" xml:space="preserve">
          <source>In addition to this introductory chapter, the Megaco User's Guide contains the following chapters:</source>
          <target state="translated">이 소개 장 외에도 Megaco 사용 설명서에는 다음 장이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ad3911ee58ff673506ee22db5a2de1ed84850c6" translate="yes" xml:space="preserve">
          <source>In addition to this introductory chapter, the Reltool User's Guide contains the following chapters:</source>
          <target state="translated">이 소개 장 외에도 Reltool 사용자 안내서에는 다음 장이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f5fdf190092c245c6414244e40560909cfcd608" translate="yes" xml:space="preserve">
          <source>In addition to this introductory chapter, the SNMP User's Guide contains the following chapters:</source>
          <target state="translated">이 소개 장 외에도 SNMP 사용 설명서에는 다음 장이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb294dab84ef10ba93b7376a3a5eeb757826cec4" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;#Record.Name&lt;/code&gt; returns the index in the tuple representation of &lt;code&gt;Name&lt;/code&gt; of the record &lt;code&gt;Record&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;#Record.Name&lt;/code&gt; 은 레코드 &lt;code&gt;Record&lt;/code&gt; 의 &lt;code&gt;Name&lt;/code&gt; 튜플 표현으로 인덱스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="eec4f051098dd6dcb667d9032abc1d31d3cca680" translate="yes" xml:space="preserve">
          <source>In addition, EUnit will also look for another module whose name is &lt;code&gt;ModuleName&lt;/code&gt; plus the suffix &lt;code&gt;_tests&lt;/code&gt;, and if it exists, all the tests from that module will also be added. (If &lt;code&gt;ModuleName&lt;/code&gt; already contains the suffix &lt;code&gt;_tests&lt;/code&gt;, this is not done.) E.g., the specification &lt;code&gt;{module, mymodule}&lt;/code&gt; will run all tests in the modules &lt;code&gt;mymodule&lt;/code&gt; and &lt;code&gt;mymodule_tests&lt;/code&gt;. Typically, the &lt;code&gt;_tests&lt;/code&gt; module should only contain test cases that use the public interface of the main module (and no other code).</source>
          <target state="translated">또한 EUnit은 이름이 &lt;code&gt;ModuleName&lt;/code&gt; 에 접미사 &lt;code&gt;_tests&lt;/code&gt; 를 더한 다른 모듈을 찾고 해당되는 경우 해당 모듈의 모든 테스트도 추가됩니다. (경우 &lt;code&gt;ModuleName&lt;/code&gt; 이미 접미사 포함 &lt;code&gt;_tests&lt;/code&gt; 를 ,이 작업이 완료되지 않습니다.) 예를 들면, 사양 &lt;code&gt;{module, mymodule}&lt;/code&gt; 모든 모듈에서 테스트를 실행 &lt;code&gt;mymodule&lt;/code&gt; 과 &lt;code&gt;mymodule_tests&lt;/code&gt; 을 . 일반적으로 &lt;code&gt;_tests&lt;/code&gt; 모듈에는 주 모듈의 공용 인터페이스를 사용하고 다른 코드는 사용하지 않는 테스트 사례 만 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="ec506ee3c0304b67799c67e512b132d1927abb1c" translate="yes" xml:space="preserve">
          <source>In addition, table properties can be set and changed. For details, see &lt;code&gt;&lt;a href=&quot;mnesia_chap3#def_schema&quot;&gt;Define a Schema&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">또한 테이블 속성을 설정하고 변경할 수 있습니다. 자세한 내용 &lt;code&gt;&lt;a href=&quot;mnesia_chap3#def_schema&quot;&gt;Define a Schema&lt;/a&gt;&lt;/code&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="dfbb12ad016ab1664756254ead2ae4c40b6031b7" translate="yes" xml:space="preserve">
          <source>In addition, the following three built-in types exist and can be thought as defined below, though strictly their &quot;type definition&quot; is not valid syntax according to the type language defined above.</source>
          <target state="translated">또한 다음 세 가지 기본 제공 유형이 존재하며 아래에 정의 된대로 생각할 수 있지만 &quot;유형 정의&quot;는 위에서 정의한 유형 언어에 따라 유효한 구문이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="2ba8529808e3d5d63f2c2cd138891fddd10121b3" translate="yes" xml:space="preserve">
          <source>In addition, the record fields can be further specified when using a record type by adding type information about the field as follows:</source>
          <target state="translated">또한 레코드 유형을 사용할 때 다음과 같이 필드에 대한 유형 정보를 추가하여 레코드 필드를 추가로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c6af5a9419b35f362c885bc58714fd954a7c605" translate="yes" xml:space="preserve">
          <source>In addition, you'll probably want to familiarize yourself with the &lt;code&gt;dbg&lt;/code&gt; module and possibly &lt;code&gt;seq_trace&lt;/code&gt; module as well.</source>
          <target state="translated">또한 &lt;code&gt;dbg&lt;/code&gt; 모듈 및 가능하면 &lt;code&gt;seq_trace&lt;/code&gt; 모듈 에 익숙해지기를 원할 것입니다 .</target>
        </trans-unit>
        <trans-unit id="fb5db34bbd4674c5c25f061b695fba808bb59735" translate="yes" xml:space="preserve">
          <source>In all functions errors, &lt;code&gt;{'EXIT',{Reason,Backtrace}}&lt;/code&gt;, can be thrown, where &lt;code&gt;Reason&lt;/code&gt; describes the error.</source>
          <target state="translated">모든 함수 오류에서 &lt;code&gt;{'EXIT',{Reason,Backtrace}}&lt;/code&gt; 가 발생할 수 있으며 여기서 &lt;code&gt;Reason&lt;/code&gt; 은 오류를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="fe9689d5a6e2657c5f322d20399fbd839acfe486" translate="yes" xml:space="preserve">
          <source>In all of these cases, &lt;code&gt;ReplyInfo&lt;/code&gt; has the following structure:</source>
          <target state="translated">이 모든 경우에 &lt;code&gt;ReplyInfo&lt;/code&gt; 의 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e5f12a8e126b9f100f177dad18ae6f54278d47be" translate="yes" xml:space="preserve">
          <source>In all other cases.</source>
          <target state="translated">다른 모든 경우에.</target>
        </trans-unit>
        <trans-unit id="44ae32a10f43de59e7c1339560b615fa6de7f95e" translate="yes" xml:space="preserve">
          <source>In all other senses, the &lt;code&gt;_tmo&lt;/code&gt; functions inherit all the return values and the semantics from the functions without the &lt;code&gt;_tmo&lt;/code&gt; suffix.</source>
          <target state="translated">다른 모든 감각에서 &lt;code&gt;_tmo&lt;/code&gt; 의 기능이없이 모두에게 함수의 리턴 값을 의미 상속 &lt;code&gt;_tmo&lt;/code&gt; 의 접미사.</target>
        </trans-unit>
        <trans-unit id="fd966c15dbde5c1d758c9f9740c69468c511589a" translate="yes" xml:space="preserve">
          <source>In all the above examples, the object must exist and it must be of the right type for the specified operation. If you do not know the type of an object, you can ask:</source>
          <target state="translated">위의 모든 예에서 객체는 반드시 존재해야하며 지정된 작업에 적합한 유형이어야합니다. 객체의 유형을 모르는 경우 다음을 요청할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9216f7534e9c31fef68910373cd1fdb3e3fbdb95" translate="yes" xml:space="preserve">
          <source>In an OTP source code tree, the OTP version can be read from the text file &lt;code&gt;&amp;lt;OTP source root&amp;gt;/OTP_VERSION&lt;/code&gt;. The absolute path to the file can be constructed by calling &lt;code&gt;filename:join([&lt;/code&gt;&lt;code&gt;code:root_dir()&lt;/code&gt;&lt;code&gt;, &quot;OTP_VERSION&quot;])&lt;/code&gt;.</source>
          <target state="translated">OTP 소스 코드 트리에서 텍스트 파일 &lt;code&gt;&amp;lt;OTP source root&amp;gt;/OTP_VERSION&lt;/code&gt; 에서 OTP 버전을 읽을 수 있습니다 . &lt;code&gt;filename:join([&lt;/code&gt; &lt;code&gt;code:root_dir()&lt;/code&gt; &lt;code&gt;, &quot;OTP_VERSION&quot;])&lt;/code&gt; 을 호출하여 파일의 절대 경로를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a595d061787336fdc6e9d2d4c2dc217d3ec6e25" translate="yes" xml:space="preserve">
          <source>In an earlier version of this API, the &lt;code&gt;lookup&lt;/code&gt; function received two arguments, omitting &lt;code&gt;Issuer&lt;/code&gt;. For compatibility, this is still supported: if there is no &lt;code&gt;lookup/3&lt;/code&gt; function in the callback module, &lt;code&gt;lookup/2&lt;/code&gt; is called instead.</source>
          <target state="translated">이 API의 이전 버전에서 &lt;code&gt;lookup&lt;/code&gt; 함수는 &lt;code&gt;Issuer&lt;/code&gt; 를 생략하고 두 개의 인수를 받았습니다 . 호환성을 위해이 기능은 계속 지원됩니다. 콜백 모듈에 &lt;code&gt;lookup/3&lt;/code&gt; 기능 이 없으면 &lt;code&gt;lookup/2&lt;/code&gt; 가 대신 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b323e21a2ec47acd1da236b19d4a2d70f45bb77d" translate="yes" xml:space="preserve">
          <source>In an embedded system, there is usually no interactive shell. However, an operator can attach to the Erlang system by command &lt;code&gt;to_erl&lt;/code&gt;. The operator is then connected to the Erlang shell and can give ordinary Erlang commands. All interaction with the system through this shell is logged in a special directory.</source>
          <target state="translated">임베디드 시스템에는 일반적으로 대화식 쉘이 없습니다. 그러나 운영자는 &lt;code&gt;to_erl&lt;/code&gt; 명령으로 Erlang 시스템에 연결할 수 있습니다 . 그런 다음 작업자가 Erlang 셸에 연결되고 일반적인 Erlang 명령을 제공 할 수 있습니다. 이 쉘을 통한 시스템과의 모든 상호 작용은 특수 디렉토리에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="6affeed9ea78db2ead1d48cc4e80d6afbfafb4eb" translate="yes" xml:space="preserve">
          <source>In an installed OTP development system, the OTP version can be read from the text file &lt;code&gt;&amp;lt;OTP installation root&amp;gt;/releases/&amp;lt;OTP release number&amp;gt;/OTP_VERSION&lt;/code&gt;. The absolute path to the file can by constructed by calling &lt;code&gt;filename:join([&lt;/code&gt;&lt;code&gt;code:root_dir()&lt;/code&gt;&lt;code&gt;, &quot;releases&quot;,&lt;/code&gt;&lt;code&gt;erlang:system_info(otp_release)&lt;/code&gt;&lt;code&gt;, &quot;OTP_VERSION&quot;]).&lt;/code&gt;</source>
          <target state="translated">설치된 OTP 개발 시스템에서 텍스트 파일 &lt;code&gt;&amp;lt;OTP installation root&amp;gt;/releases/&amp;lt;OTP release number&amp;gt;/OTP_VERSION&lt;/code&gt; 에서 OTP 버전을 읽을 수 있습니다 . 파일의 절대 경로는 &lt;code&gt;filename:join([&lt;/code&gt; &lt;code&gt;code:root_dir()&lt;/code&gt; &lt;code&gt;, &quot;releases&quot;,&lt;/code&gt; &lt;code&gt;erlang:system_info(otp_release)&lt;/code&gt; &lt;code&gt;, &quot;OTP_VERSION&quot;]).&lt;/code&gt; 을 호출하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4061d8e63786063b3eeabb1b52df7fa369545be" translate="yes" xml:space="preserve">
          <source>In an interactive system, the code loader provides demand-driven code loading, but in an embedded system the code loader loads all code immediately. The same version of &lt;code&gt;code&lt;/code&gt; is used in both cases. The code server calls &lt;code&gt;init:get_argument(mode)&lt;/code&gt; to determine if it is to run in demand mode or non-demand driven mode.</source>
          <target state="translated">대화식 시스템에서 코드 로더는 수요 중심 코드로드를 제공하지만 임베디드 시스템에서 코드 로더는 모든 코드를 즉시로드합니다. 두 경우 모두 동일한 버전의 &lt;code&gt;code&lt;/code&gt; 가 사용됩니다. 코드 서버는 &lt;code&gt;init:get_argument(mode)&lt;/code&gt; 를 호출 하여 수요 모드 또는 비 요구 구동 모드에서 실행할지 여부를 판별합니다.</target>
        </trans-unit>
        <trans-unit id="40c287b596d5b896af6235aa0ac1f4766bfd7a16" translate="yes" xml:space="preserve">
          <source>In both cases, the current token is set. In particular, if the token of a received message is empty, the current token of the process is set to empty.</source>
          <target state="translated">두 경우 모두 현재 토큰이 설정됩니다. 특히, 수신 된 메시지의 토큰이 비어 있으면 프로세스의 현재 토큰이 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cb81d52aa37dc7833d69efc8ceea8d49076b214" translate="yes" xml:space="preserve">
          <source>In both cases, the first accessible element in the table should be returned. As the key columns are not accessible, this means that the third column is the first row.</source>
          <target state="translated">두 경우 모두 테이블의 첫 번째 액세스 가능 요소가 리턴되어야합니다. 키 열에 액세스 할 수 없으므로 세 번째 열이 첫 번째 행임을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="c8bcfe99dfb6ce58aa580ed57d8b7b2260bf8c45" translate="yes" xml:space="preserve">
          <source>In both previous examples, &lt;code&gt;seq_trace:reset_trace/0&lt;/code&gt; resets the trace token immediately after the traced function to avoid many trace messages because of the printouts in the Erlang shell.</source>
          <target state="translated">이전의 두 예제에서 &lt;code&gt;seq_trace:reset_trace/0&lt;/code&gt; 은 추적 된 함수 바로 다음에 추적 토큰을 재설정하여 Erlang 셸의 출력으로 인해 많은 추적 메시지를 피합니다.</target>
        </trans-unit>
        <trans-unit id="1e9979f7dc9c90d9448aea9a33897846d951ecc0" translate="yes" xml:space="preserve">
          <source>In brief, &lt;code&gt;Common Test&lt;/code&gt; supports:</source>
          <target state="translated">간단히, &lt;code&gt;Common Test&lt;/code&gt; 는 다음을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="219af38196dae5e5cf8e3928cdad6f56580aeb9d" translate="yes" xml:space="preserve">
          <source>In brief, CTH allows you to do the following:</source>
          <target state="translated">간단히 말해 CTH를 사용하면 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7808f617380ab0dd07679578966aad4ed29b5be3" translate="yes" xml:space="preserve">
          <source>In brief, CTH allows you to:</source>
          <target state="translated">간단히 말해 CTH를 통해 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="515fe8110084161af1176bfde998dc3668536ede" translate="yes" xml:space="preserve">
          <source>In brief, a simple test object consists of a single function that takes no arguments (possibly annotated with some additional metadata, i.e., a line number). Evaluation of the function either &lt;strong&gt;succeeds&lt;/strong&gt;, by returning some value (which is ignored), or &lt;strong&gt;fails&lt;/strong&gt;, by throwing an exception.</source>
          <target state="translated">간단히 말해서 간단한 테스트 개체는 인수를 사용하지 않는 단일 함수로 구성됩니다 (일부 추가 메타 데이터 (예 : 줄 번호)로 주석 달기 가능). 함수의 평가는 일부 값을 리턴 하여 &lt;strong&gt;성공&lt;/strong&gt; 하거나 (무시 됨) 예외를 발생시켜 &lt;strong&gt;실패합니다&lt;/strong&gt; .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
