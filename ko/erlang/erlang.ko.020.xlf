<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="daa6b275bed633d91e59851dec0490f3f8639737" translate="yes" xml:space="preserve">
          <source>For Windows NT running on standard PCs with ISA and/or PCI bus, an extension card with a hardware watchdog can be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa4ad80dc4dd7367f2ce6a7e23a488861cdfe40" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is a list of tuples, where each tuple corresponds to an event handler registered in the process and contains &lt;code&gt;{Module, Id, HandlerState}&lt;/code&gt;, as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a3de7d09707f7530bf77047e594ba957594152" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the tuple &lt;code&gt;{Module, Id, HandlerState}&lt;/code&gt; as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e11514fb1210ec8a13b39e187446d0f855cfe50" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the state of the callback module and &lt;code&gt;NewState&lt;/code&gt; is a new instance of that state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee667887f657795967b516568a5588f71ef7dbb1" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; process, the returned &lt;code&gt;State&lt;/code&gt; is the state of the callback module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf13c53f5ba819c65c1ef27ea673837724a64fe" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the tuple &lt;code&gt;{CurrentState,CurrentData}&lt;/code&gt;, and &lt;code&gt;NewState&lt;/code&gt; is a similar tuple, which can contain a new current state, new state data, or both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44cd6815c9e0e97b4a85fd5bdf8e6b3796b629ae" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the tuple &lt;code&gt;{CurrentState,CurrentData}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1348dba6d54a83a9152e4914382188ef991652bb" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;negations&lt;/code&gt; operation, &lt;code&gt;substitute_negations/2&lt;/code&gt; is applied using the specified negation list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ac5f3a37177c36456ef3599ab122e2f7a03944" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;record_expr&lt;/code&gt; node, &lt;code&gt;Info&lt;/code&gt; represents the record name and the list of descriptors for the involved fields, listed in the order they appear. A field descriptor is a pair &lt;code&gt;{Label, Value}&lt;/code&gt;, if &lt;code&gt;Node&lt;/code&gt; represents &quot;&lt;code&gt;Label = &amp;lt;em&amp;gt;Value&amp;lt;/em&amp;gt;&lt;/code&gt;&quot;. For a &lt;code&gt;record_access&lt;/code&gt; node, &lt;code&gt;Info&lt;/code&gt; represents the record name and the field name. For a &lt;code&gt;record_index_expr&lt;/code&gt; node, &lt;code&gt;Info&lt;/code&gt; represents the record name and the name field name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b15523ad283b7823b5f85b98edeec8cc75bb7e" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor, the child specification defined in &lt;code&gt;Module:init/1&lt;/code&gt; is used, and &lt;code&gt;ChildSpec&lt;/code&gt; must instead be an arbitrary list of terms &lt;code&gt;List&lt;/code&gt;. The child process is then started by appending &lt;code&gt;List&lt;/code&gt; to the existing start function arguments, that is, by calling &lt;code&gt;apply(M, F, A++List)&lt;/code&gt;, where &lt;code&gt;{M,F,A}&lt;/code&gt; is the start function defined in the child specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e270983e8335179100d9fe3c596f856db2dac6e7" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor, when a child process start function returns &lt;code&gt;ignore&lt;/code&gt;, the functions returns &lt;code&gt;{ok,undefined}&lt;/code&gt; and no child is added to the supervisor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab42467cd15c337816dce46f68ae5fa0526b7a1" translate="yes" xml:space="preserve">
          <source>For a complete description of &lt;code&gt;erlc&lt;/code&gt;, see ERTS Reference Manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cfb13f0cad02138ad2b995c017356309c3fb172" translate="yes" xml:space="preserve">
          <source>For a complete description of &lt;code&gt;select&lt;/code&gt;, see the &lt;code&gt;ERTS&lt;/code&gt; User's Guide and the &lt;code&gt;ets&lt;/code&gt; manual page in STDLIB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b29807f5108ee246627d87dc631fd94fef1892" translate="yes" xml:space="preserve">
          <source>For a complete description of the different format directives, see the &lt;code&gt;&lt;a href=&quot;erl_format&quot;&gt;erl_format&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02401677ec9fdd73c5cc9895475609266601522" translate="yes" xml:space="preserve">
          <source>For a complete description, see the following modules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2296648869178ab00c551a675766a922862800d8" translate="yes" xml:space="preserve">
          <source>For a complete list of BIFs, their arguments and return values, see &lt;code&gt;erlang(3)&lt;/code&gt; manual page in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b96f9c5fc0fa8fe1d9f6339dc15a2d5f9fb472a" translate="yes" xml:space="preserve">
          <source>For a connecting transport, the RFC 6733 Tc timer, in milliseconds. This timer determines the frequency with which a transport attempts to establish an initial connection with its peer following transport configuration. Once an initial connection has been established, &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; determines the frequency of reconnection attempts, as required by RFC 3539.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac741d1f7ac505dae5ea4596ab971a0359b710e" translate="yes" xml:space="preserve">
          <source>For a definition of valid regular expressions and options, see the &lt;code&gt;re&lt;/code&gt; module in STDLIB and in particular function &lt;code&gt;re:run/3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1778d91027288e89fb9f378857f0ab18d8b8254" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;EventMgrRef&lt;/code&gt; and &lt;code&gt;Handler&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab206fd61e2b9fddc5eafc5fc27d1c15a0c8fad2" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;EventMgrRef&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61b9134ab4d9675f20b8e73cc84fde0dfc684f51" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Pattern&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96cefa5fc6c0be89204e4398ffcd7b6e931bcbc7" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Pattern&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt;. For a description of available options, see &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="490301d361c897e86bb808406dd04f853292db16" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Pattern&lt;/code&gt;, see function &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a575b08f9d7b4ad4d20d737daccceca9585ee829" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;PrePurge&lt;/code&gt; and &lt;code&gt;PostPurge&lt;/code&gt;, see &lt;code&gt;update&lt;/code&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a65c4f68025c3ad1dd6315d55707a52bb482efc" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;ServerRef&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1c30168853014829ac98827419201235616034" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;StartType&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#start_type&quot;&gt;Module:start/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5def873d87cd980e931392839b5cf6d17842f538" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;StartType&lt;/code&gt;, see &lt;code&gt;Module:start/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af5f0c5a703d05ffb3c28deb45bb383f51975e7" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;State&lt;/code&gt; and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt;Module:handle_event/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7a9480404a774f2e01c502c092dc97fed34b5c" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;SupRef&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#SupRef&quot;&gt;start_child/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb94f820b1ff3aee729f5fbaecbcc295c79001a" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Timeout&lt;/code&gt; and &lt;code&gt;hibernate&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c3e1f1906955603f566457e63cdaa98a428468" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Type&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607ab8601660e33550a0e7aea5d949075b3313a3" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;select&lt;/code&gt; and its syntax, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972aacd0a31b572c0e72a100331a00176bde225a" translate="yes" xml:space="preserve">
          <source>For a description of arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a1fca3021cb71786aaf6bcae62ca1f3e1b7f33" translate="yes" xml:space="preserve">
          <source>For a description of arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e36c35175840d023a6cf460ade2c4f7beb8f53f1" translate="yes" xml:space="preserve">
          <source>For a description of function declarations, see &lt;code&gt;&lt;a href=&quot;functions&quot;&gt;Function Declaration Syntax&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d7cec709f4329f7673af15c7c4c2a2a6bb46704" translate="yes" xml:space="preserve">
          <source>For a description of match specifications, see section &lt;code&gt;Match Specification in Erlang&lt;/code&gt; in ERTS User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9769bda1585e895e9d31f5c92f3fe2c06aebf820" translate="yes" xml:space="preserve">
          <source>For a description of patterns, see &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0eb276490a2f309e043ffe87e763b33c3a8466d" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;match_spec()&lt;/code&gt; syntax, please turn to the &lt;strong&gt;User's guide&lt;/strong&gt; part of the online documentation for the runtime system (&lt;strong&gt;erts&lt;/strong&gt;). The chapter &lt;code&gt;&lt;strong&gt;Match Specifications in Erlang&lt;/strong&gt;&lt;/code&gt; explains the general match specification &quot;language&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7703173998c17ea83511dfa5283d14f4d69fe0c5" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;match_spec()&lt;/code&gt; syntax, please turn to the &lt;strong&gt;User's guide&lt;/strong&gt; part of the online documentation for the runtime system (&lt;strong&gt;erts&lt;/strong&gt;). The chapter &lt;code&gt;&lt;strong&gt;Match Specifications in Erlang&lt;/strong&gt;&lt;/code&gt; explains the general match specification &quot;language&quot;. The most common generic match specifications used can be found as &lt;code&gt;Built-inAlias&lt;/code&gt;', see &lt;code&gt;&lt;a href=&quot;#ltp-0&quot;&gt;ltp/0&lt;/a&gt;&lt;/code&gt; below for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4bddbc34a3831351a2641d9658cdebad17c2b8" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;match_spec()&lt;/code&gt; syntax, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in ERTS, which explains the general match specification &quot;language&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4152e6278bbf99749c38b17f7fbc9597385ea1" translate="yes" xml:space="preserve">
          <source>For a description of the I/O protocols, see section &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07949123961391c2673de11e4076e2d60eced05c" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896f509d9ccaf0cce925a58ea47de82220089a35" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e988f83f81897f6b908cee83257a2be0f550e7ef" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-0&quot;&gt;start_link/0,1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fac05683ef2609d5029a0a282d6ee27b3ebc206" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62815d91e2c677755f354f11587d1bad01d8fe59" translate="yes" xml:space="preserve">
          <source>For a description of the arguments, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97370f5d5dec45b9c04d099eb22590151d2dac21" translate="yes" xml:space="preserve">
          <source>For a description of the arguments, see &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dd5ebe7e70167c0dac796ad7a71ee15f6ab2e3" translate="yes" xml:space="preserve">
          <source>For a description of the options, see &lt;code&gt;&lt;a href=&quot;#string-3&quot;&gt;string/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe71815d4a82343fc19a1dc26d416bd852b070ef" translate="yes" xml:space="preserve">
          <source>For a description of the options, see &lt;code&gt;&lt;a href=&quot;#type-client_options&quot;&gt;Client Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fba08ca1d36f58f8a668532aa3bde0a2c58961" translate="yes" xml:space="preserve">
          <source>For a description of the options, see &lt;code&gt;&lt;a href=&quot;#type-daemon_options&quot;&gt;Daemon Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a38cab08ea388ea4ff5f4107faa8cfc6f6bc618" translate="yes" xml:space="preserve">
          <source>For a description of the other arguments and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf80ebecef8b5d265aeaf5990098c7c291e8b9fd" translate="yes" xml:space="preserve">
          <source>For a descriptions of options only affecting the compilation step, see &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55898fdd413ae4d5b8d090755b3edd98ed573b98" translate="yes" xml:space="preserve">
          <source>For a detailed description of each value, see &lt;code&gt;&lt;a href=&quot;#info-2&quot;&gt;info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbac230b9c5ed374fb96bffe873ff96a1cc7a4d" translate="yes" xml:space="preserve">
          <source>For a detailed description of the socket concept, refer to a suitable book about network programming. A suggestion is &lt;strong&gt;UNIX Network Programming, Volume 1: Networking APIs - Sockets and XTI&lt;/strong&gt; by W. Richard Stevens, ISBN: 013490012X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844b24c946259dad373327e8abcce2b8c9f7a56f" translate="yes" xml:space="preserve">
          <source>For a detailed description of the syntax and contents of the boot script, see the &lt;code&gt;script(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c3a2ec1b41b2886a58c2dac9a1dc1fff6b51340" translate="yes" xml:space="preserve">
          <source>For a different way to partition a list, see &lt;code&gt;&lt;a href=&quot;#partition-2&quot;&gt;partition/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720327204417f93293a4c16e172e1d77d48d7e8d" translate="yes" xml:space="preserve">
          <source>For a different way to partition a list, see &lt;code&gt;&lt;a href=&quot;#splitwith-2&quot;&gt;splitwith/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a9170ca3d20cb888339d1d64eb47f269c521e2" translate="yes" xml:space="preserve">
          <source>For a disk log process to close its file properly and terminate, it must be closed by its owners and once by some non-owner process for each time the log was used anonymously. The users are counted and there must not be any users left when the disk log process terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82511680a1722261769bc6b102aa6073a9d0792" translate="yes" xml:space="preserve">
          <source>For a given hash value, this module finds all consecutive &lt;code&gt;.r*&lt;/code&gt; files starting from zero, and those files taken together make up the revocation list. CRL files whose &lt;code&gt;nextUpdate&lt;/code&gt; fields are in the past, or that are issued by a different CA that happens to have the same name hash, are excluded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e6867ea0feea22eb209cd61b4c7cf73e7dc73a" translate="yes" xml:space="preserve">
          <source>For a given notification, the variables, which are referred to in the notification specification, must be implemented by the agent that has the MIB loaded, or by some parent to this agent. If not, the application must provide values for the unknown variables. The application must also provide values for all elements in tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6d7029778221af0b6b051348c91d7d4a1ea8e5" translate="yes" xml:space="preserve">
          <source>For a large system, it can be interesting to run profiling on a simulated and limited scenario to start with. But bottlenecks have a tendency to appear or cause problems only when many things are going on at the same time, and when many nodes are involved. Therefore, it is also desirable to run profiling in a system test plant on a real target system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49a8a95bc0737d649b2fbd2bd4b9d035a5443d7" translate="yes" xml:space="preserve">
          <source>For a large system, you do not want to run the profiling tools on the whole system. Instead you want to concentrate on central processes and modules, which contribute for a big part of the execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714a3eaa378f818eb6703af10da760265164f5b3" translate="yes" xml:space="preserve">
          <source>For a listening transport, the timer specifies the time after which a previously connected peer will be forgotten: a connection after this time is regarded as an initial connection rather than reestablishment, causing the RFC 3539 state machine to pass to state OKAY rather than REOPEN. Note that these semantics are not governed by the RFC and that a listening transport's &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; should be greater than its peer's Tw plus jitter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f930f2bafc05d5efc3129ac198c5a95bbf17ec" translate="yes" xml:space="preserve">
          <source>For a local &lt;code&gt;{Date1, Time1}&lt;/code&gt; during the period that is repeated when switching &lt;strong&gt;from&lt;/strong&gt; daylight saving time, two corresponding UTCs exist; one for the first instance of the period when daylight saving time is still active, and one for the second instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5c9a40a6d0b1abd670f673641a58092a5e01f3" translate="yes" xml:space="preserve">
          <source>For a local &lt;code&gt;{Date1, Time1}&lt;/code&gt; during the period that is skipped when switching &lt;strong&gt;to&lt;/strong&gt; daylight saving time, there is no corresponding UTC, as the local time is illegal (it has never occured).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5900b948715e847445a40b1e46335c73dfd2bc1" translate="yes" xml:space="preserve">
          <source>For a local fun, &lt;code&gt;Item&lt;/code&gt; can also be any of the atoms &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;new_index&lt;/code&gt;, &lt;code&gt;new_uniq&lt;/code&gt;, &lt;code&gt;uniq&lt;/code&gt;, and &lt;code&gt;pid&lt;/code&gt;. For an external fun, the value of any of these items is always the atom &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59175d553d5ac9f663c073d3457b0f82f1a14e36" translate="yes" xml:space="preserve">
          <source>For a minimal example of a CTH, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#example&quot;&gt;Example CTH&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508a1c392b487cf9efc079e769ab1469c2d35cd4" translate="yes" xml:space="preserve">
          <source>For a more thorough discussion about tail and body recursion, see &lt;code&gt;&lt;a href=&quot;http://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html&quot;&gt;Erlang's Tail Recursion is Not a Silver Bullet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b63bb15258354b69beaeb88cbfaea97e07f895" translate="yes" xml:space="preserve">
          <source>For a node &lt;code&gt;Node1&lt;/code&gt; with magic cookie &lt;code&gt;Cookie&lt;/code&gt; to be able to connect to, or accept a connection from, another node &lt;code&gt;Node2&lt;/code&gt; with a different cookie &lt;code&gt;DiffCookie&lt;/code&gt;, the function &lt;code&gt;erlang:set_cookie(Node2, DiffCookie)&lt;/code&gt; must first be called at &lt;code&gt;Node1&lt;/code&gt;. Distributed systems with multiple user IDs can be handled in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a5458d9b5f593066a94861701589b5365d3c63" translate="yes" xml:space="preserve">
          <source>For a process implemented using an OTP behaviour, the behaviour module is the residence module for that process. The callback module is a functional module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6994e723b6ac8455473acb09217de4e1771ef454" translate="yes" xml:space="preserve">
          <source>For a short demonstration of parsing and pretty-printing, simply compile the included module &lt;code&gt;demo.erl&lt;/code&gt;, and execute &lt;code&gt;demo:run()&lt;/code&gt; from the Erlang shell. It will compile the remaining modules and give you further instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ef8f7ce8a23a6ffa821ec5eea74f8f32b8bf77" translate="yes" xml:space="preserve">
          <source>For a simple example of an FTP session, see &lt;code&gt;&lt;a href=&quot;ftp_client&quot;&gt;FTP User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40382adf0258f7ee25b19fc64547696bb518803" translate="yes" xml:space="preserve">
          <source>For a specified error returned by any function in this module, this function returns a descriptive string of the error in English. For file errors, function &lt;code&gt;file:format_error(Posix)&lt;/code&gt; is to be called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0592b86931ce428f467579270fb03a409e53a596" translate="yes" xml:space="preserve">
          <source>For a succesful initialization, &lt;code&gt;State&lt;/code&gt; is the initial &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Data&lt;/code&gt; the initial server &lt;code&gt;&lt;a href=&quot;#type-data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4764a0fdb2a7a233cc9fc1526a0311e2a392d00" translate="yes" xml:space="preserve">
          <source>For a table &lt;code&gt;Tab&lt;/code&gt; of type &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;ordered_set&lt;/code&gt;, the function returns the &lt;code&gt;Pos&lt;/code&gt;:th element of the object with key &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a7d5095d8b2a32c7db55d348db8fd529dc24c2" translate="yes" xml:space="preserve">
          <source>For a wrap log, both the size and the number of files can always be increased, as long as the number of files does not exceed 65000. If the maximum number of files is decreased, the change is not valid until the current file is full and the log wraps to the next file. The redundant files are removed the next time the log wraps around, that is, starts to log to file number 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51ff20f17c1a36f5a582229120660a7039e260a" translate="yes" xml:space="preserve">
          <source>For accessing individual attributes, see &lt;code&gt;&lt;a href=&quot;#get_pos-1&quot;&gt;get_pos/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#get_precomments-1&quot;&gt;get_precomments/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_postcomments-1&quot;&gt;get_postcomments/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b8dd1f30ea0f0135327cf538ef37349ea2caf3" translate="yes" xml:space="preserve">
          <source>For all 2-tuples with a list in second position, add atom &lt;code&gt;'marker'&lt;/code&gt; first in the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1ae2321382cf8ef9bdb6fad30d2f45ee293afb" translate="yes" xml:space="preserve">
          <source>For all OAM components, SNMP adaptations are provided. Other adaptations might be defined in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5882391bad4058944412eec531e59f1f05d7f423" translate="yes" xml:space="preserve">
          <source>For all other employees, return &lt;code&gt;{newbie, &amp;lt;employee number&amp;gt;}&lt;/code&gt;, except for those named &lt;code&gt;Smith&lt;/code&gt; as they would be affronted by anything other than the tag &lt;code&gt;guru&lt;/code&gt; and that is also what is returned for their numbers: &lt;code&gt;{guru, &amp;lt;employee number&amp;gt;}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f60cd921fc7b5654e104794b14acebabcd91a23" translate="yes" xml:space="preserve">
          <source>For all other local times only one corresponding UTC exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f473bbb9d26d1a082e9ad8ad3bf78394942ee789" translate="yes" xml:space="preserve">
          <source>For all other values of &lt;code&gt;HandlerId&lt;/code&gt;, this entry adds a new handler, equivalent to calling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366217efd377ef7f12b1d12edb859398720ebe56" translate="yes" xml:space="preserve">
          <source>For all these generators the lowest bit(s) has got a slightly less random behaviour than all other bits. 1 bit for &lt;code&gt;exrop&lt;/code&gt; (and &lt;code&gt;exsp&lt;/code&gt;), and 3 bits for &lt;code&gt;exs1024s&lt;/code&gt;. See for example the explanation in the &lt;code&gt;&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt; Xoroshiro128+ &lt;/a&gt;&lt;/code&gt; generator source code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4ace9d1ca2981a9cd18df10d87d29953a8e657" translate="yes" xml:space="preserve">
          <source>For an &lt;code&gt;expand&lt;/code&gt; operation, function &lt;code&gt;&lt;a href=&quot;#expand-2&quot;&gt;expand/2&lt;/a&gt;&lt;/code&gt; is applied using the specified list of expansions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f082714253155e9e4b9c287e894c6d37047edc6" translate="yes" xml:space="preserve">
          <source>For an Event-Driven State Machine, the input is an event that triggers a state transition and the output is actions executed during the state transition. It can analogously to the mathematical model of a Finite-State Machine be described as a set of relations of the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f6690bd9624d886cabaea6bbcd06b6000537e0" translate="yes" xml:space="preserve">
          <source>For an agent, the &lt;code&gt;contextEngineID&lt;/code&gt; identified by a received message, is always equal to the &lt;code&gt;snmpEngineID&lt;/code&gt; of the agent. Otherwise, the message was not intended for the agent. If the agent is configured with more than one context, the instrumentation code must be able to figure out for which context the request was intended. There is a function &lt;code&gt;snmpa:current_context/0&lt;/code&gt; provided for this purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bc2b7de21e05f7d405b9e6a6fb885b43fd40ef" translate="yes" xml:space="preserve">
          <source>For an embedded type of type &lt;code&gt;SEQUENCE&lt;/code&gt;/&lt;code&gt;SET&lt;/code&gt; in a &lt;code&gt;SEQUENCE&lt;/code&gt;/&lt;code&gt;SET&lt;/code&gt;, the record name is extended with an underscore and the component name. If the embedded structure is deeper with the &lt;code&gt;SEQUENCE&lt;/code&gt;, &lt;code&gt;SET&lt;/code&gt;, or &lt;code&gt;CHOICE&lt;/code&gt; types in the line, each component name/alternative name is added to the record name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9b914a50ea213eeaadf7abbf256885b0534520" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;code&gt;&lt;a href=&quot;using_public_key#hostname_extraction&quot;&gt;Hostname extraction&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f26ee9e370b307d43358104c78a349a182c793" translate="yes" xml:space="preserve">
          <source>For an example, see section &lt;code&gt;&lt;a href=&quot;ei_users_guide#building_terms_and_patterns&quot;&gt;Building Terms and Patterns&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73be3dbd6a651b582070d2f47a87461d0211b0c" translate="yes" xml:space="preserve">
          <source>For an inbound message from a transport process, a &lt;code&gt;&lt;a href=&quot;diameter_codec#packet&quot;&gt;diameter_codec:packet()&lt;/a&gt;&lt;/code&gt; must contain the received message in its &lt;code&gt;bin&lt;/code&gt; field. In the case of an inbound request, any value set in the &lt;code&gt;transport_data&lt;/code&gt; field will passed back to the transport module in the corresponding answer message, unless the sender supplies another value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90013faa2fae344a51e123e0b2ceb88a7231695" translate="yes" xml:space="preserve">
          <source>For an outbound message to a transport process, a &lt;code&gt;&lt;a href=&quot;diameter_codec#packet&quot;&gt;diameter_codec:packet()&lt;/a&gt;&lt;/code&gt; has a value other than &lt;code&gt;undefined&lt;/code&gt; in its &lt;code&gt;transport_data&lt;/code&gt; field and has the binary() to send in its &lt;code&gt;bin&lt;/code&gt; field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb877ebc99bd1d46e3d1419f5e9e84b1039b246" translate="yes" xml:space="preserve">
          <source>For an unsuccesful initialization, &lt;code&gt;{stop,Reason}&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt; should be used; see &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e3b642659d0707266516623692c824f1087717" translate="yes" xml:space="preserve">
          <source>For an upgrade, &lt;code&gt;OldVsn&lt;/code&gt; is &lt;code&gt;Vsn&lt;/code&gt;, and for a downgrade, &lt;code&gt;OldVsn&lt;/code&gt; is &lt;code&gt;{down,Vsn}&lt;/code&gt;. &lt;code&gt;Vsn&lt;/code&gt; is defined by the &lt;code&gt;vsn&lt;/code&gt; attribute(s) of the old version of the callback module &lt;code&gt;Module&lt;/code&gt;. If no such attribute is defined, the version is the checksum of the Beam file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df78f85e8f5b913c9d946f7e5ed39f8ec980c09a" translate="yes" xml:space="preserve">
          <source>For any fun, &lt;code&gt;Item&lt;/code&gt; can be any of the atoms &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;arity&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt;, or &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7413767989a803baaf4f577dc5831fc7b5d5d52a" translate="yes" xml:space="preserve">
          <source>For auto-imported BIFs added in Erlang/OTP R14A and thereafter, overriding the name with a local function or explicit import is always allowed. However, if the &lt;code&gt;-compile({no_auto_import,[F/A])&lt;/code&gt; directive is not used, the compiler issues a warning whenever the function is called in the module using the implicitly qualified function name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ea74c138e3739dc00ed9db86f1e66db5ff4786a" translate="yes" xml:space="preserve">
          <source>For available options see &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt;cert_opt()&lt;/a&gt;&lt;/code&gt; under &lt;code&gt;&lt;a href=&quot;#pkix_test_data-1&quot;&gt;pkix_test_data/1&lt;/a&gt;&lt;/code&gt;.    A root certificate and key. The &lt;code&gt;Key&lt;/code&gt; is generated by &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e1d64e3d4cecd57f95679cb154ce8f95c46160" translate="yes" xml:space="preserve">
          <source>For background and more examples see the &lt;code&gt;&lt;a href=&quot;configure_algos#introduction&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a65da47a406741061fb683aede365c2f1b59abf" translate="yes" xml:space="preserve">
          <source>For backward compatibility, &lt;code&gt;Name&lt;/code&gt; is also allowed to be a string. That will probably change in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b953997abe73e9a1c1d8354acb5eafa9e412a2f" translate="yes" xml:space="preserve">
          <source>For backward compatibility, the boolean value can be omitted. This is interpreted as &lt;code&gt;+c false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9e83fe8bcfbb510ae158f2707a9e573aaa100f" translate="yes" xml:space="preserve">
          <source>For backward compatibility, the following &lt;code&gt;Request&lt;/code&gt;s are also to be handled by an I/O server (they are not to be present after Erlang/OTP R15B):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e389de08f79fe5234fdab6f60b2f669f116e8ec6" translate="yes" xml:space="preserve">
          <source>For bitstrings, the number of whole bytes is returned. That is, if the number of bits in the bitstring is not divisible by 8, the resulting number of bytes is rounded &lt;strong&gt;down&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71028790787c422947eea95aebe6249e1ae6659d" translate="yes" xml:space="preserve">
          <source>For both &lt;code&gt;CallAt&lt;/code&gt; and &lt;code&gt;AllLines&lt;/code&gt; it holds that for no list element is &lt;code&gt;LineNumbers&lt;/code&gt; an empty list; such elements have been removed. The constants of &lt;code&gt;component&lt;/code&gt; and the integers of &lt;code&gt;LineNumbers&lt;/code&gt; are sorted and without duplicates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42247570854a0a4fbff11ae10d3e87ed6ee6224e" translate="yes" xml:space="preserve">
          <source>For calls such as &lt;code&gt;erlang:apply(Fun, Args)&lt;/code&gt; or &lt;code&gt;erlang:apply(Module, Function, Args)&lt;/code&gt;, the call of the non-local function handler corresponding to the call to &lt;code&gt;erlang:apply/2,3&lt;/code&gt; itself (&lt;code&gt;Func({erlang, apply}, [Fun, Args])&lt;/code&gt; or &lt;code&gt;Func({erlang, apply}, [Module, Function, Args])&lt;/code&gt;) never takes place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b1c1d74d7705d44d8883846b238a873f5c24da" translate="yes" xml:space="preserve">
          <source>For capturing named subpatterns which names are not unique, the first matching occurrence (counted from left to right in the subject) is returned from &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt;, if the name is specified in the &lt;code&gt;values&lt;/code&gt; part of the &lt;code&gt;capture&lt;/code&gt; statement. The &lt;code&gt;all_names&lt;/code&gt; capturing value matches all the names in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9721880d332d89550edc6bc669f5220f714bfab9" translate="yes" xml:space="preserve">
          <source>For clarity, it is recommended not to change the unit size for binaries. Instead, use &lt;code&gt;binary&lt;/code&gt; when you need byte alignment and &lt;code&gt;bitstring&lt;/code&gt; when you need bit alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d4ed76f96b53451b0ec5a9dc6cdbd5c986c27f4" translate="yes" xml:space="preserve">
          <source>For code exampel see Section &lt;code&gt;&lt;a href=&quot;using_ssh&quot;&gt;SFTP Client with TAR Compression and Encryption&lt;/a&gt;&lt;/code&gt; in the ssh Users Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164a850440659e98268b78770e042b4cc1b2c7f2" translate="yes" xml:space="preserve">
          <source>For code replacement of funs to work, use the syntax &lt;code&gt;fun Module:FunctionName/Arity&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="040bd7743b8323cea447646a8b8ebfc747df6b6d" translate="yes" xml:space="preserve">
          <source>For codecs that does not support partial decode of the version, currently &lt;code&gt;megaco_ber_encoder&lt;/code&gt;, &lt;code&gt;megaco_per_encoder&lt;/code&gt; and &lt;code&gt;megaco_per_bin_encoder&lt;/code&gt;, &lt;code&gt;dynamic&lt;/code&gt; will revert to version 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6cc781d76a09324b78748dbba382aa38f2839fa" translate="yes" xml:space="preserve">
          <source>For comparison, also included are first, performance figures with megaco (including the measurement software) and asn1 applications hipe-compiled (second figure in the time columns, note that per bin decode had some issues so those figures are not included), and second, performance figures where the flex driver was built as &lt;code&gt;non-reentrant&lt;/code&gt; flex (third figure in the time columns, only valid for text codecs using the flex-scanner, figures within parenthesis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a0ee34e8c29099c4fb0879e19d24fed73970b7" translate="yes" xml:space="preserve">
          <source>For comparison: &lt;code&gt;Port ! {PortOwner, {command, Data}}&lt;/code&gt; only fails with &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Port&lt;/code&gt; does not refer to a port or a process. If &lt;code&gt;Port&lt;/code&gt; is a closed port, the data message disappears without a sound. If &lt;code&gt;Port&lt;/code&gt; is open and the calling process is not the port owner, the &lt;strong&gt;port owner&lt;/strong&gt; fails with &lt;code&gt;badsig&lt;/code&gt;. The port owner fails with &lt;code&gt;badsig&lt;/code&gt; also if &lt;code&gt;Data&lt;/code&gt; is an invalid I/O list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebee5051c3e76d9bdf2a6f4bd81612186d082560" translate="yes" xml:space="preserve">
          <source>For comparison: &lt;code&gt;Port ! {self(), close}&lt;/code&gt; only fails with &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Port&lt;/code&gt; does not refer to a port or a process. If &lt;code&gt;Port&lt;/code&gt; is a closed port, nothing happens. If &lt;code&gt;Port&lt;/code&gt; is an open port and the calling process is the port owner, the port replies with &lt;code&gt;{Port, closed}&lt;/code&gt; when all buffers have been flushed and the port really closes. If the calling process is not the port owner, the &lt;strong&gt;port owner&lt;/strong&gt; fails with &lt;code&gt;badsig&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593299d920ab192679bcc7cd62080bf590d02469" translate="yes" xml:space="preserve">
          <source>For comparison: &lt;code&gt;Port ! {self(), {connect, Pid}}&lt;/code&gt; only fails with &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Port&lt;/code&gt; does not refer to a port or a process. If &lt;code&gt;Port&lt;/code&gt; is a closed port, nothing happens. If &lt;code&gt;Port&lt;/code&gt; is an open port and the calling process is the port owner, the port replies with &lt;code&gt;{Port, connected}&lt;/code&gt; to the old port owner. Notice that the old port owner is still linked to the port, while the new is not. If &lt;code&gt;Port&lt;/code&gt; is an open port and the calling process is not the port owner, the &lt;strong&gt;port owner&lt;/strong&gt; fails with &lt;code&gt;badsig&lt;/code&gt;. The port owner fails with &lt;code&gt;badsig&lt;/code&gt; also if &lt;code&gt;Pid&lt;/code&gt; is not an existing local process identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5640f436fd5793d6f6da287d907560cc3be4c959" translate="yes" xml:space="preserve">
          <source>For compatibility with Oniguruma, the non-Perl syntax \g followed by a name or a number enclosed either in angle brackets or single quotes, is alternative syntax for referencing a subpattern as a &quot;subroutine&quot;. Details are discussed later. Notice that \g{...} (Perl syntax) and \g&amp;lt;...&amp;gt; (Oniguruma syntax) are &lt;strong&gt;not&lt;/strong&gt; synonymous. The former is a back reference and the latter is a subroutine call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730e9890488d0080f62997b20ac443c001d638f7" translate="yes" xml:space="preserve">
          <source>For compatibility with Oniguruma, the non-Perl syntax \g followed by a name or a number enclosed either in angle brackets or single quotes, is alternative syntax for referencing a subpattern as a subroutine, possibly recursively. Here follows two of the examples used above, rewritten using this syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05946ce4f5901b22991c9a3266a8a48f5df2c030" translate="yes" xml:space="preserve">
          <source>For compatibility with Perl, \s did not used to match the VT character (code 11), which made it different from the the POSIX &quot;space&quot; class. However, Perl added VT at release 5.18, and PCRE followed suit at release 8.34. The default \s characters are now HT (9), LF (10), VT (11), FF (12), CR (13), and space (32), which are defined as white space in the &quot;C&quot; locale. This list may vary if locale-specific matching is taking place. For example, in some locales the &quot;non-breaking space&quot; character (\xA0) is recognized as white space, and in others the VT character is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bf306536e2266a9909d8ea82da455b3654db17" translate="yes" xml:space="preserve">
          <source>For compatibility with Perl, assertion subpatterns can be repeated. However, it makes no sense to assert the same thing many times, the side effect of capturing parentheses can occasionally be useful. In practice, there are only three cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c32914ac516701dff1644ddf1e404b501ef3b4" translate="yes" xml:space="preserve">
          <source>For computing differences between epochs in time, use the functions counting gregorian days or seconds. If epochs are specified as local time, they must be converted to universal time to get the correct value of the elapsed time between epochs. Use of function &lt;code&gt;time_difference/2&lt;/code&gt; is discouraged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2051eedd71ed7f48b0213673d174c80adbf4be82" translate="yes" xml:space="preserve">
          <source>For controlling the ContinuationState, to be used in a continuation function, and called when the parser encounters the end of the byte stream. See &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd04746a63654bd5b3e666b910cea750ac2240a" translate="yes" xml:space="preserve">
          <source>For controlling the EventState, to be used in an event function, and called at the beginning and at the end of a parsed entity. See &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf9a3644bd2d324573b977d7a3cd2d43f28bc90" translate="yes" xml:space="preserve">
          <source>For controlling the FetchState, to be used in a fetch function, and called when the parser fetch an external resource (eg. a DTD). See &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11115a821441ce48dc3cde3d7963736dc9cfff4c" translate="yes" xml:space="preserve">
          <source>For controlling the HookState, to be used in a hook function, and called when the parser has parsed a complete entity. See &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e350b69e432539e75adaa6e167427c26d83ea4" translate="yes" xml:space="preserve">
          <source>For controlling the RulesState, to be used in a rules function, and called when the parser store scanner information in a rules database. See &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b24c6b9268c87873c4a952d997c2a09dd9bd75" translate="yes" xml:space="preserve">
          <source>For controlling the UserState, to be used in a user function. See &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403ce6e0468b93b5e90535d63bd768d01a874b4f" translate="yes" xml:space="preserve">
          <source>For convenience, literal strings can be encoded with a Unicode encoding in binaries using the following (or similar) syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348689c67897de282639bc01fb0f4311f7c4287d" translate="yes" xml:space="preserve">
          <source>For convenience, the following built-in filters exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf5d81272f5d2e9d792a3211e345876676fe903" translate="yes" xml:space="preserve">
          <source>For convenience, the following types are also built-in. They can be thought as predefined aliases for the type unions also shown in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="336510eba587b0d9b86302dc9a46d0b19a8db293" translate="yes" xml:space="preserve">
          <source>For convenience, the three most common quantifiers have single-character abbreviations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a117eab25cf2bd2ed989a4762a9d03d0e8bd2e" translate="yes" xml:space="preserve">
          <source>For conversion functions between character encodings, see the &lt;code&gt;unicode&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c574e2ccd773c4e5cd07e86d3df45d28fa13c78" translate="yes" xml:space="preserve">
          <source>For debugging of the compiler, or for pure curiosity, the intermediate code generated by each compiler pass can be inspected. To print a complete list of the options to produce list files, type &lt;code&gt;compile:options()&lt;/code&gt; at the Erlang shell prompt. The options are printed in the order that the passes are executed. If more than one listing option is used, the one representing the earliest pass takes effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="083d869a1217519260e609e64608ee932fb600ec" translate="yes" xml:space="preserve">
          <source>For debugging purposes only. Displays the single argument as an Erlang term on &lt;code&gt;stdout&lt;/code&gt;, which is seldom what is wanted. Returns &lt;code&gt;true&lt;/code&gt; and can only be used in the &lt;code&gt;MatchBody&lt;/code&gt; part when tracing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b790a4fb3bed40f6af193c3f73758ef2ee0ea410" translate="yes" xml:space="preserve">
          <source>For declaring test case groups. (Optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3222a88e9d91cf61acd6a4739d98cfcfb34276" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;agent_config_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84861df3ca723a34b99d72fbfae9f8b7b241cc7d" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;agent_discovery_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d40bd68714a5aaca703a2748e02ad1469d6aca8" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;agent_net_if_filter_option()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92981402ebc90d5688d2afdab5e725056da346a" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;agent_net_if_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45267774dbe0b5930e228e12059552f25154a0e" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;agent_net_if_option()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db50831261c3c48c71c29d508af07a29aff37599" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;local_db_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dccaa9f35fb5f6175cb2ec8c77a35dcb47a1ea55" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;manager_config_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea7c21272ecb28368b763cf0d5ac86e0f5e87a3" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;manager_net_if_filter_option()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bbbd2cc919d5e6ada231a945754598ed854354e" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;manager_net_if_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f2ba0512d041ff4b3ab3504aba4ef825648055" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;manager_net_if_option()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb391d806d1a6b81968a3f8031a26e219be00242" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;mib_server_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f01d90f4b18b174f0f3f4aec98eeb3f08c147d" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;mibs_cache_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a20ae37267ce423aee1e8a02ee385ec4af4b083" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;note_store_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0314e200cbd632937d3c97fc2a06a0662df95b58" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;symbolic_store_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebd31564644639b47dd25de80a9f4a68e96dc5c" translate="yes" xml:space="preserve">
          <source>For defaults see the options in &lt;code&gt;target_cache_opt()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6445c6affc4bffb24e4424ab077f430365c17f6e" translate="yes" xml:space="preserve">
          <source>For detailed information about the Event Tracer, see the &lt;code&gt;ET&lt;/code&gt; application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="171152cb78f05ee26524cebb400639d4987b47a0" translate="yes" xml:space="preserve">
          <source>For detailed information about the SSH protocol, refer to the following Request for Comments(RFCs):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b875f8f78dba0756377d341a130c0b2a7e6e33c" translate="yes" xml:space="preserve">
          <source>For details about Erlang Top, see the &lt;code&gt;&lt;a href=&quot;etop_ug&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bac6068a1ebbf8e436d9bd86561e70e6d60b4ea6" translate="yes" xml:space="preserve">
          <source>For details about applications and behaviours, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f29ef606397e10efc288884155eb4305852446" translate="yes" xml:space="preserve">
          <source>For details about data type &lt;code&gt;datetime()&lt;/code&gt;, see &lt;code&gt;calendar:datetime()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32bcd9f127fdfd1f15f412e5f2daba79d320c1fb" translate="yes" xml:space="preserve">
          <source>For details about data type &lt;code&gt;mp()&lt;/code&gt;, see &lt;code&gt;re:mp()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5e276102c50f005ae1c3a533ecacc466922af1" translate="yes" xml:space="preserve">
          <source>For details about how to get started with the Crashdump Viewer, see the &lt;code&gt;&lt;a href=&quot;crashdump_ug&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899357a1eae00db099216e28c17f515790cf90eb" translate="yes" xml:space="preserve">
          <source>For details about how to get started, see the &lt;code&gt;&lt;a href=&quot;observer_ug&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e6ca59ea547899bda9996ce27d3452632b9148" translate="yes" xml:space="preserve">
          <source>For details about parameter &lt;code&gt;RegExp&lt;/code&gt;, see &lt;code&gt;rb:grep/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa1bc1e0bc17840dc036fc4f1aea9cfdce586da" translate="yes" xml:space="preserve">
          <source>For details about test case groups, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a48e8807029cdac866ab40035364cb9a3d6a8ce" translate="yes" xml:space="preserve">
          <source>For details about test case implementation, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_cases&quot;&gt;Test Cases&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a0b727ab589bf313ea117ebdd948eb5c1ca42c" translate="yes" xml:space="preserve">
          <source>For details about the &lt;code&gt;Common Test&lt;/code&gt; Master API, see module &lt;code&gt;&lt;a href=&quot;ct_master&quot;&gt;ct_master&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1887bded0de50577321581a4a431854ae7b61bd9" translate="yes" xml:space="preserve">
          <source>For details about the &lt;code&gt;PosLen&lt;/code&gt; semantics, see &lt;code&gt;binary(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33fb72fc001570559079ceb38a7c5266857a489" translate="yes" xml:space="preserve">
          <source>For details about the data format for the string values, see &quot;XML Schema for Event Notifications&quot; in RFC 5277.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be68a23f740892cf4e122902d4f90a8f17de5c15" translate="yes" xml:space="preserve">
          <source>For details about the match specifications, see &quot;Match Specifications in Erlang&quot; in &lt;code&gt;ERTS&lt;/code&gt; User's Guide. For more information, see the &lt;code&gt;ets&lt;/code&gt; and &lt;code&gt;dets&lt;/code&gt; manual pages in &lt;code&gt;STDLIB&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a271fcda41f6b4218e112f779f05687200d0f3a8" translate="yes" xml:space="preserve">
          <source>For details about the stack trace, see section &lt;code&gt;Errors and Error Handling&lt;/code&gt; in the Erlang Reference Manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138e437947e159dc0add79e29583c52042a9c821" translate="yes" xml:space="preserve">
          <source>For details about the syntax and contents of the application resource file, see the &lt;code&gt;app&lt;/code&gt; manual page in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44c14d9703bf23430f40c01259d719e683e69c28" translate="yes" xml:space="preserve">
          <source>For details about the syntax and contents of the release upgrade file, see the &lt;code&gt;relup(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d21d98d7cce6ef6ee373d7ce6c34ff4ae40d8a06" translate="yes" xml:space="preserve">
          <source>For details about the test case group information function, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#group_info&quot;&gt;Group Information Function&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b818faace89153ebe81c60589d23227618e0df0" translate="yes" xml:space="preserve">
          <source>For details about the test case information function, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f6593fe8b2cf2a8e87bbafd4cce9c1ba477881" translate="yes" xml:space="preserve">
          <source>For details about the test suite information function, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c31fa8671127a3c1821402e47f31541f3754c9e" translate="yes" xml:space="preserve">
          <source>For details about these functions, see module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3bbf08c8f35a6b7f8ee774406dbca46718861f" translate="yes" xml:space="preserve">
          <source>For details about tracing, see module &lt;code&gt;dbg&lt;/code&gt; in application Runtime_Tools and in section &quot;Match specifications in Erlang&quot; in &lt;code&gt;ERTS User's Guide&lt;/code&gt; and in module &lt;code&gt;ms_transform&lt;/code&gt; in application STDLIB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89973f9ed6ee290a1842b2801fae8a951d38f10b" translate="yes" xml:space="preserve">
          <source>For details about when &lt;code&gt;init&lt;/code&gt; is called, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#scope&quot;&gt;CTH Scope&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4636f139120afd63566c050f91d451e4b6b2a8ad" translate="yes" xml:space="preserve">
          <source>For details of what to put in the list of configured services, see the documentation for the services to be configured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23d3bcfaed6b2dccdffa572458e10e3096121a9" translate="yes" xml:space="preserve">
          <source>For details on &lt;code&gt;Category&lt;/code&gt; and &lt;code&gt;Importance&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;Logging - Categories and Verbosity Levels&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2546ece3029f5c5194a86bac3c5af22c2e186c6b" translate="yes" xml:space="preserve">
          <source>For details on &lt;code&gt;Category&lt;/code&gt;, &lt;code&gt;Importance&lt;/code&gt; and the &lt;code&gt;no_css&lt;/code&gt; option, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;Logging - Categories and Verbosity Levels&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be3e9eabd37a487f0994459fc3cbf4909093f7b" translate="yes" xml:space="preserve">
          <source>For details on DES3 encryption/decryption, see application &lt;code&gt;Crypto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19790c66eac8b8149373170ffe626274d7a0faef" translate="yes" xml:space="preserve">
          <source>For details on argument &lt;code&gt;End&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#receive_response-4&quot;&gt;ct_ssh:receive_response/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0968b3521edeec578b507a5df8d3e79632c467" translate="yes" xml:space="preserve">
          <source>For details on groups, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e603320cc709cc0de73d15ed298405a2e712a6" translate="yes" xml:space="preserve">
          <source>For details on the &lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Column&lt;/code&gt; and &lt;code&gt;Indentation&lt;/code&gt; fields, and the behaviour in case of errors, see &lt;code&gt;recomment_forms/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469124f715f9b683fa6d3c5219b91598fa947fcc" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a8a35743195f9f850427480c9d3d4d5c06b5590" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;&lt;a href=&quot;#cmd-3&quot;&gt;ct_telnet:cmd/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c509baf68f401ccca39a1b877c719a2b63cea81" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;&lt;a href=&quot;#scan_format-2&quot;&gt;scan_format/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cc6739ccc2ce48172408162457a00398636369" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15514fdb059fd0494f5aea2d8386e88c47fcdbb6" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; manual page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298eca0f5140b702a4589aa73123f3f98bccf5bb" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;&lt;a href=&quot;run_test_chapter#group_execution&quot;&gt;Test Case Group Execution&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0755e0b6f69f3dd473c8740d2b85f8ca8ff8de86" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Atoms&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8097d968e43a05f326314e542635f3763063bab2" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Distribution Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e088ed43d5389ee2ecbe565decec6d377352f12c" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;ETS Tables&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9da2623d4fbf8ac586cd0307efb4d7f2fa6a77cc" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Fun Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca372597b55827ea091211926eb36c9070a6224" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;General Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="766cfda9d1e6665eb2759dcc5bd8619505dc1140" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Internal Table Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="804edff11886f59f823c352b1e6052a674eadab0" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Loaded Module Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c8e519136950826aa647d43495dc248a115351" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Port Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ffdf9b398c0155d2ea00e87f1329daeacfa33cb" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Process Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502d2ab1d7b882002266fa4fac42580118bf535c" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Scheduler Information&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168521a46eb670fe3b053521501868055c70fe61" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;Timers&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202d3baeeca05fcc60605dc66b98bc0b67e71947" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;beam_lib(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072abc661bf08afe2db5496eab9a5cfcb83563f4" translate="yes" xml:space="preserve">
          <source>For details, see &lt;code&gt;erlang:phash2/1&lt;/code&gt;, &lt;code&gt;erlang:node/0&lt;/code&gt;, &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt;, and &lt;code&gt;erlang:unique_integer/0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b374bd0455a8d791c2bea5ddbeb1eaf4f21223" translate="yes" xml:space="preserve">
          <source>For details, see Section &lt;code&gt;&lt;a href=&quot;asn1_getting_started#BIT%20STRING&quot;&gt;BIT STRING&lt;/a&gt;&lt;/code&gt; and Section &lt;code&gt;&lt;a href=&quot;asn1_getting_started#OCTET%20STRING&quot;&gt;OCTET STRING&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217c4f1cfc030c7dfa1dbe5e383263094b81f05e" translate="yes" xml:space="preserve">
          <source>For details, see Section &lt;code&gt;&lt;a href=&quot;asn1_getting_started#BIT%20STRING&quot;&gt;BIT STRING&lt;/a&gt;&lt;/code&gt; in the User's Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d250b898a18bfc5f0fad367a1f9e70809563e6" translate="yes" xml:space="preserve">
          <source>For details, see Section &lt;code&gt;&lt;a href=&quot;asn1_getting_started#BIT%20STRING&quot;&gt;BIT STRING&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbc4d42aba9774465d68eb335a767d2773b5cf9" translate="yes" xml:space="preserve">
          <source>For details, see Section &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt;Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b2948ad6c81efc53305d33dd65730ac1180ae1" translate="yes" xml:space="preserve">
          <source>For details, see section &lt;code&gt;&lt;a href=&quot;run_test_chapter#silent_connections&quot;&gt;Silent Connections&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b370dd745b456b7e88f83739b27a0b35c4b24e00" translate="yes" xml:space="preserve">
          <source>For details, see the &lt;code&gt;&lt;a href=&quot;#+S&quot;&gt;+S&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#+SP&quot;&gt;+SP&lt;/a&gt;&lt;/code&gt;. By default, the number of dirty CPU scheduler threads created equals the number of normal scheduler threads created, and the number of dirty CPU scheduler threads online equals the number of normal scheduler threads online. &lt;code&gt;DirtyCPUSchedulers&lt;/code&gt; can be omitted if &lt;code&gt;:DirtyCPUSchedulersOnline&lt;/code&gt; is not and conversely. The number of dirty CPU schedulers online can be changed at runtime through &lt;code&gt;&lt;a href=&quot;erlang#system_flag_dirty_cpu_schedulers_online&quot;&gt;erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2619396b11706b1a73c4c9ddbc396b10ac82c85c" translate="yes" xml:space="preserve">
          <source>For details, see the &lt;code&gt;erlc(1)&lt;/code&gt; manual page in ERTS and &lt;code&gt;compile(3)&lt;/code&gt; manual page in Compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc866dea1657840af5a547bdf04bc412f9ef2299" translate="yes" xml:space="preserve">
          <source>For details, see the &lt;code&gt;gen_statem(3)&lt;/code&gt; manual page for type &lt;code&gt;action()&lt;/code&gt;. You can, for example, reply to many callers, generate multiple next events, and set a time-out to use absolute instead of relative time (using the &lt;code&gt;Opts&lt;/code&gt; field).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382cebeda02a4d2bac976684cc0874fe69825df7" translate="yes" xml:space="preserve">
          <source>For details, see the &lt;code&gt;ic&lt;/code&gt; manual page in IC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b50080589932fc3d03c17dea519f0c0eda9b55" translate="yes" xml:space="preserve">
          <source>For details, see the &lt;code&gt;init(3)&lt;/code&gt; manual page in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6448e1f1923abc28bd9f8e6f6307f6bf662429dc" translate="yes" xml:space="preserve">
          <source>For details, see the &lt;code&gt;unicode&lt;/code&gt; module in STDLIB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35adc1f25ee898043c979d16ceb1a2560e66dcae" translate="yes" xml:space="preserve">
          <source>For disk files, the encoding can be set to various UTF variants. This has the effect that data is expected to be read as the specified encoding from the file, and the data is written in the specified encoding to the disk file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5212c20e4e3eae0d6d9a7923cd2762aafa081944" translate="yes" xml:space="preserve">
          <source>For distribution of application control to work properly, the nodes where a distributed application can run must contact each other and negotiate where to start the application. This is done using the following configuration parameters in Kernel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1725e8adc899a0a736d649f24a5d0e212c3b6ec" translate="yes" xml:space="preserve">
          <source>For each &lt;strong&gt;manager user&lt;/strong&gt;, the manager needs some information. This information is either added in the &lt;code&gt;users.conf&lt;/code&gt; config file or by calling the &lt;code&gt;&lt;a href=&quot;snmpm#register_user&quot;&gt;register_user&lt;/a&gt;&lt;/code&gt; function in run-time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6fe3d3ebcae21a711822eaf5ee2951e6cc4014" translate="yes" xml:space="preserve">
          <source>For each breakpoint, a corresponding entry is added to the &lt;strong&gt;Break&lt;/strong&gt; menu, from which it is possible to disable, enable, or delete the breakpoint, and to change its trigger action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353d2ecaa3c9e74aa975c6aaba599f667bb48cdc" translate="yes" xml:space="preserve">
          <source>For each chunk, the identifier (string) and the position and size of the chunk data, in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb1841bba20b2787d833e01f30b179b87709384" translate="yes" xml:space="preserve">
          <source>For each directory on the second level in the application archive (&lt;code&gt;ebin&lt;/code&gt;, &lt;code&gt;priv&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, and so on), the code server first chooses the regular directory if it exists and second from the archive. Function &lt;code&gt;code:lib_dir/2&lt;/code&gt; returns the path to the subdirectory. For example, &lt;code&gt;code:lib_dir(megaco,ebin)&lt;/code&gt; can return &lt;code&gt;/otp/root/lib/megaco-3.9.1.1.ez/megaco-3.9.1.1/ebin&lt;/code&gt; while &lt;code&gt;code:lib_dir(megaco,priv)&lt;/code&gt; can return &lt;code&gt;/otp/root/lib/megaco-3.9.1.1/priv&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e62edc53d1f26c666b800f9d3034fd4444e9e6" translate="yes" xml:space="preserve">
          <source>For each format specifier included in &lt;code&gt;FormatStr&lt;/code&gt;, there must be a corresponding argument following &lt;code&gt;FormatStr&lt;/code&gt;. An Erlang term is built according to &lt;code&gt;FormatStr&lt;/code&gt; with values and Erlang terms substituted from the corresponding arguments, and according to the individual format specifiers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17fe47c370a4a63c0a391449d8c5bc39c7358f2" translate="yes" xml:space="preserve">
          <source>For each host, where a distributed Erlang node is running, also an EPMD is to be running. The EPMD can be started explicitly or automatically as a result of the Erlang node startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f5bdd45cb5d9da808946db4bef38e2db2f6fdb" translate="yes" xml:space="preserve">
          <source>For each interpreted module, a corresponding entry is added to the &lt;strong&gt;Module&lt;/strong&gt; menu, with the following submenu:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee76ca52512d4731b6ffdf983417e21a70aaa4e8" translate="yes" xml:space="preserve">
          <source>For each new process we create, we insert an item in an &lt;code&gt;snmp_index&lt;/code&gt; structure:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943f5ab22017cf24f7aafd70dc074d284b653b23" translate="yes" xml:space="preserve">
          <source>For each open disk log, one process handles requests made to the disk log. This process is created when &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; is called, provided there exists no process handling the disk log. A process that opens a disk log can be an &lt;strong&gt;owner&lt;/strong&gt; or an anonymous &lt;strong&gt;user&lt;/strong&gt; of the disk log. Each owner is linked to the disk log process, and an owner can close the disk log either explicitly (by calling &lt;code&gt;close/1&lt;/code&gt; or &lt;code&gt;lclose/1,2&lt;/code&gt;) or by terminating.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2e1cc830a9ada17b4a310c0c6473e0526e6d43" translate="yes" xml:space="preserve">
          <source>For each possible MIB object instance, the instance belongs to a sub-tree if:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ef5272c1ecd2b405c70939e17801cccea63022" translate="yes" xml:space="preserve">
          <source>For each process the following information is presented:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ce6b3ce4eb71e3325a1f74abea89f68af0ca3c" translate="yes" xml:space="preserve">
          <source>For each process there is also a &lt;strong&gt;=proc_messages&lt;/strong&gt; tag if the process message queue is non-empty, and a &lt;strong&gt;=proc_dictionary&lt;/strong&gt; tag if the process dictionary (the &lt;code&gt;put/2&lt;/code&gt; and &lt;code&gt;get/1&lt;/code&gt; thing) is non-empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc5d011eda792d7ee1d0b9e92be8edf514df379" translate="yes" xml:space="preserve">
          <source>For each process there is at least one &lt;strong&gt;=proc_stack&lt;/strong&gt; and one &lt;strong&gt;=proc_heap&lt;/strong&gt; tag, followed by the raw memory information for the stack and heap of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f437759ab5b32aadc7a986e7a7cdc3d7eb3f68b" translate="yes" xml:space="preserve">
          <source>For each server to test against, the following entry can be added to a configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b4e71e5bc40d040741fc71f0253ada2ecf94f6" translate="yes" xml:space="preserve">
          <source>For each table Mnesia determines its replica nodes (&lt;code&gt;TabNodes&lt;/code&gt;) and starts &lt;code&gt;mnesia:set_master_nodes(Tab, TabMasterNodes)&lt;/code&gt;. where &lt;code&gt;TabMasterNodes&lt;/code&gt; is the intersection of &lt;code&gt;MasterNodes&lt;/code&gt; and &lt;code&gt;TabNodes&lt;/code&gt;. For semantics, see &lt;code&gt;mnesia:set_master_nodes/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cf7d38da20a081c53e616fee20b088da09e54b" translate="yes" xml:space="preserve">
          <source>For each table, it is possible to choose if there is to be one checkpoint retainer attached to all replicas of the table, or if it is enough to have only one checkpoint retainer attached to a single replica. With a single checkpoint retainer per table, the checkpoint consumes less memory, but it is vulnerable to node crashes. With several redundant checkpoint retainers, the checkpoint survives as long as there is at least one active checkpoint retainer attached to each table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc69c48101750feed24f2a11046bddb8dcf9465" translate="yes" xml:space="preserve">
          <source>For each test case function there can be an extra function with the same name but without arguments. This is the test case information function. It is expected to return a list of tagged tuples that specifies various properties regarding the test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98134757dd58181588097c721844b2d454db5710" translate="yes" xml:space="preserve">
          <source>For each test case that &lt;code&gt;Common Test&lt;/code&gt; is ordered to execute, it spawns a dedicated process on which the test case function starts running. (In parallel to the test case process, an idle waiting timer process is started, which is linked to the test case process. If the timer process runs out of waiting time, it sends an exit signal to terminate the test case process. This is called a &lt;strong&gt;timetrap&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59d1296656858ac8ad6f5cb31934c34210f4647" translate="yes" xml:space="preserve">
          <source>For each test case, the &lt;code&gt;Common Test&lt;/code&gt; test server expects the following functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af6b32175cb259e12d558357e46d8f34dd02064" translate="yes" xml:space="preserve">
          <source>For each test run that is part of a repeated session, information about the particular test run is printed in the &lt;code&gt;Common Test&lt;/code&gt; Framework Log. The information includes the repetition number, remaining time, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a89185398b447a696063e8f8639e2f59dd06d8" translate="yes" xml:space="preserve">
          <source>For each test, a &lt;code&gt;{Specs,Tests}&lt;/code&gt; element is returned, where &lt;code&gt;Specs&lt;/code&gt; is a list of all included test specifications, and &lt;code&gt;Tests&lt;/code&gt; specifies actual tests to run/skip per node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3ddda019d70e43f1cd037a636007edb7a56d46" translate="yes" xml:space="preserve">
          <source>For each transaction reply in the decoded message the reply is returned to the user. Either the originating function megaco:call/3 will return. Or in case the originating function was megaco:case/3 the following callback function will be invoked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41d81fbeba21b3303f7be973d896632dd36dff6" translate="yes" xml:space="preserve">
          <source>For each transaction request in the decoded message the following callback function will be invoked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f54ca986575862ce2634f50b5065e5effc58f3" translate="yes" xml:space="preserve">
          <source>For each tuple in the &lt;code&gt;MatchExpression&lt;/code&gt; list and while no match has succeeded:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c8ae95c4f8448c4091219d8b47f3b1af3a5621" translate="yes" xml:space="preserve">
          <source>For efficiency reasons, items are always written to files as binaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1ad00ab0e2de19f26f8739d72d89700c9c341b" translate="yes" xml:space="preserve">
          <source>For every atom T, except '_', and for every term X, (T, X) belongs to Sets (&lt;strong&gt;atomic sets&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1055e987c54c28f4d6405a65d5154d69cd590c4b" translate="yes" xml:space="preserve">
          <source>For every entry in &lt;code&gt;Dbgs&lt;/code&gt;, the corresponding function in &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4125d4ed3d1ed87e6bdfa6be17e2fdff9e44e7af" translate="yes" xml:space="preserve">
          <source>For every number of calls, functions etc. returned by the &lt;code&gt;no_&lt;/code&gt; tags, there is a query returning the same number. Listed below are examples of such queries. Some of the queries return the sum of a two or more of the &lt;code&gt;no_&lt;/code&gt; tags numbers. &lt;code&gt;mod&lt;/code&gt; (&lt;code&gt;app&lt;/code&gt;, &lt;code&gt;rel&lt;/code&gt;) refers to any module (application, release).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeabbfbcbba369ba734fd2c26cf0b31bfcd4b814" translate="yes" xml:space="preserve">
          <source>For every term T, if X is the empty list or a non-empty sorted list [X[1], ..., X[n]] without duplicates such that (T, X[i]) belongs to Sets for every 1 &amp;lt;= i &amp;lt;= n, then ([T], X) belongs to Sets (&lt;strong&gt;typed unordered sets&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665bf10fa162bfddf8298d7b400de176ae8fab90" translate="yes" xml:space="preserve">
          <source>For every tuple T = {T[1], ..., T[n]} and for every tuple X = {X[1], ..., X[n]}, if (T[i], X[i]) belongs to Sets for every 1 &amp;lt;= i &amp;lt;= n, then (T, X) belongs to Sets (&lt;strong&gt;ordered sets&lt;/strong&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406a119cd5c435adc0db7b55f84dc0973accc194" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;&quot;\\hkey_local_machine\\software\\Ericsson\\Erlang\\5.0&quot;&lt;/code&gt; is the key for the installation data for the latest Erlang release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf7e81c681142621f0d97442fd39a0248c2b1de" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;(?im)&lt;/code&gt; sets caseless, multiline matching. These options can also be unset by preceding the letter with a hyphen. A combined setting and unsetting such as &lt;code&gt;(?im-sx)&lt;/code&gt;, which sets &lt;code&gt;caseless&lt;/code&gt; and &lt;code&gt;multiline&lt;/code&gt;, while unsetting &lt;code&gt;dotall&lt;/code&gt; and &lt;code&gt;extended&lt;/code&gt;, is also permitted. If a letter appears both before and after the hyphen, the option is unset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40339f5dd88af4dcf02bfaa1ba8a398628bcc7ee" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;rup&lt;/code&gt; displays a load of 128 as 0.50, and 512 as 2.00.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a093c13175526991ab21ee86bed10186dee592" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;substitute_aliases([{color, colour}], L)&lt;/code&gt; replaces all tuples &lt;code&gt;{color, ...}&lt;/code&gt; in &lt;code&gt;L&lt;/code&gt; with &lt;code&gt;{colour, ...}&lt;/code&gt;, and all atoms &lt;code&gt;color&lt;/code&gt; with &lt;code&gt;colour&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3defa479f547bf0d14fa8deeab9fd748f99e8e6d" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;substitute_negations([{no_foo, foo}], L)&lt;/code&gt; replaces any atom &lt;code&gt;no_foo&lt;/code&gt; or tuple &lt;code&gt;{no_foo, true}&lt;/code&gt; in &lt;code&gt;L&lt;/code&gt; with &lt;code&gt;{foo, false}&lt;/code&gt;, and any other tuple &lt;code&gt;{no_foo, ...}&lt;/code&gt; with &lt;code&gt;{foo, true}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399958481b0ec1af5510c4541719cd0d1a0d129c" translate="yes" xml:space="preserve">
          <source>For example, a document &lt;code&gt;sep([text(&quot;foo&quot;), text(&quot;bar&quot;)])&lt;/code&gt; represents the two layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efe621514640ef383da15908c07a1f546479a07" translate="yes" xml:space="preserve">
          <source>For example, a function that sums a list of integers, is &lt;strong&gt;not&lt;/strong&gt; to be written as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a8efe8a78f4367f28577c4a2128d80c3fce93e" translate="yes" xml:space="preserve">
          <source>For example, a system that is managed with SNMP and HTTP can be structured as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66df4022d93fcdfd3eeae6ff79d90149f7de7f2" translate="yes" xml:space="preserve">
          <source>For example, adding a child to &lt;code&gt;simple_sup&lt;/code&gt; above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e46490d9ac799092b0805463ffae65dfc53bf250" translate="yes" xml:space="preserve">
          <source>For example, assume your GNU make program is called &lt;code&gt;make&lt;/code&gt; and you want to rebuild the application &lt;code&gt;STDLIB&lt;/code&gt;, then you could do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b80a69d1e82c803c64ac36bc28e2be969845e1b" translate="yes" xml:space="preserve">
          <source>For example, consider the following domains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb0941b4d3fdca891f6dc85c2ed48e69e6f152c" translate="yes" xml:space="preserve">
          <source>For example, finding all the employees who have a salary less than 10 can look as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da54cda1d0f63875a5e43bf0123631a6cbd22a92" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;hlen&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;ev&lt;/code&gt; points to an array of three binaries, the port owner process receives &lt;code&gt;[H1, H2, &amp;lt;&amp;lt;B1&amp;gt;&amp;gt;, &amp;lt;&amp;lt;B2&amp;gt;&amp;gt; | &amp;lt;&amp;lt;B3&amp;gt;&amp;gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5e7f2efee25ac9e96ea55cc4c92026b57b64ae9" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;hlen&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, the port owner process receives &lt;code&gt;[H1, H2 | &amp;lt;&amp;lt;T&amp;gt;&amp;gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f03db84fe8d7da23adcee865ea314ff295f8a0" translate="yes" xml:space="preserve">
          <source>For example, if a defined type is to be a VideotexString and an octet is received with the unsigned integer value &lt;code&gt;X&lt;/code&gt;, the octet is to be interpreted as specified in standard ITU-T T.100, T.101.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1519a79b3872a0f3447a4710f02289677d229d7b" translate="yes" xml:space="preserve">
          <source>For example, if a test is started with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a3e092d5166c38df0af903761ad08b5bc1e44d" translate="yes" xml:space="preserve">
          <source>For example, if the SNMP table has two INDEX columns, the first one an OCTET STRING with size 2, and the second one an OBJECT IDENTIFER, the corresponding &lt;code&gt;key_types&lt;/code&gt; parameter would be &lt;code&gt;{fix_string, string}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af02b4862ccd3f2849f0f14b3b8616281af231d2" translate="yes" xml:space="preserve">
          <source>For example, if the configuration file includes the specification &lt;code&gt;{selective_decode,{'ModuleName',[{selected_decode_Window,TypeList}]}}&lt;/code&gt; do the selective decode by &lt;code&gt;{ok,Result}='ModuleName':selected_decode_Window(EncodedBinary).&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc0ddfd4f8a179f2d89a9e1a6c662490027e7d09" translate="yes" xml:space="preserve">
          <source>For example, if the top level allows 10 restarts, and the next level also allows 10, a crashing child below that level will be restarted 100 times, which is probably excessive. Allowing at most 3 restarts for the top level supervisor might be a better choice in this case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6250de169e1838d636223901923d45da5cf24ca9" translate="yes" xml:space="preserve">
          <source>For example, if the user wants to install patched versions of &lt;code&gt;mnesia&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt; built in &lt;code&gt;/home/me/git/otp&lt;/code&gt; into the OTP installation located in &lt;code&gt;/opt/erlang/my_otp&lt;/code&gt; type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd373f75b5583f012cbf3cb7359b03f58a4c6b6e" translate="yes" xml:space="preserve">
          <source>For example, if you have started a slave node &lt;code&gt;N&lt;/code&gt; and want to execute &lt;code&gt;pxw&lt;/code&gt; graphics code on this node, you can start server &lt;code&gt;pxw_server&lt;/code&gt; as a pseudo server at the slave node. This is illustrated as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafc397a9ca472d5fefe961c0db1dc1300da12dd" translate="yes" xml:space="preserve">
          <source>For example, if you have the following module:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b5f9c8b648d6384440598bba89e3a61045cbea" translate="yes" xml:space="preserve">
          <source>For example, if you want to match a * character, you write \* in the pattern. This escaping action applies if the following character would otherwise be interpreted as a metacharacter, so it is always safe to precede a non-alphanumeric with backslash to specify that it stands for itself. In particular, if you want to match a backslash, write \\.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773614802c2cc887cba1a22a7e0a6a82b403137c" translate="yes" xml:space="preserve">
          <source>For example, in the test specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0681458148c7cc4ffd0c700b16bf6c11b231f848" translate="yes" xml:space="preserve">
          <source>For example, suppose there is an SNMP table, which is best implemented in Erlang as one process per SNMP table row. Suppose further that the INDEX in the SNMP table is an OCTET STRING. The index structure would be created as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8cbbd048c4adae440f3ff0c92db804cac5e614" translate="yes" xml:space="preserve">
          <source>For example, the call &lt;code&gt;mnesia:match_object(person, {person, '_', 36, '_', '_'}, read)&lt;/code&gt; returns a list of all person records with an &lt;code&gt;age&lt;/code&gt; field of 36.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167a9c5c1fce4843525ba6b25a842ff6faa835ce" translate="yes" xml:space="preserve">
          <source>For example, the character class &lt;code&gt;[aeiou]&lt;/code&gt; matches any lowercase vowel, while &lt;code&gt;[^aeiou]&lt;/code&gt; matches any character that is not a lowercase vowel. Notice that a circumflex is just a convenient notation for specifying the characters that are in the class by enumerating those that are not. A class that starts with a circumflex is not an assertion; it still consumes a character from the subject string, and therefore it fails if the current pointer is at the end of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1180f1b377b587660c05d49fde99a5a5ed03357c" translate="yes" xml:space="preserve">
          <source>For example, the following call creates the &lt;code&gt;person&lt;/code&gt; table (defined earlier) and replicates it on two nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="309bcb0a91370a60964dcbfa98331992024826d4" translate="yes" xml:space="preserve">
          <source>For example, the following causes table &lt;code&gt;person&lt;/code&gt; to be ordered as an SNMP table:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7229496f8100e8f3961e3930c5be59c0d8a603" translate="yes" xml:space="preserve">
          <source>For example, the following expressions all return &lt;code&gt;[fie, bar, baz, fum]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5bf5de7cde2e9615747a1a49cb28306407e822" translate="yes" xml:space="preserve">
          <source>For example, the managed object type &lt;code&gt;ifDescr&lt;/code&gt; from RFC1573, is defined as the description of a network interface. To identify the description of device-X's first network interface, four pieces of information are needed: the snmpEngineID of the SNMP entity which provides access to the management information at device-X, the &lt;code&gt;contextName&lt;/code&gt; (device-X), the managed object type (&lt;code&gt;ifDescr&lt;/code&gt;), and the instance (&quot;1&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f988f74cffc188ca0078e7863b71654141bcbe1" translate="yes" xml:space="preserve">
          <source>For example, the pattern /^abc$/ matches the subject string &quot;def\nabc&quot; (where \n represents a newline) in multiline mode, but not otherwise. So, patterns that are anchored in single-line mode because all branches start with ^ are not anchored in multiline mode, and a match for circumflex is possible when argument &lt;strong&gt;startoffset&lt;/strong&gt; of &lt;code&gt;run/3&lt;/code&gt; is non-zero. Option &lt;code&gt;dollar_endonly&lt;/code&gt; is ignored if &lt;code&gt;multiline&lt;/code&gt; is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325a177e2579ced68c303791d9bfb48868f2a46b" translate="yes" xml:space="preserve">
          <source>For example, the result of &lt;code&gt;string(&quot;x\ny&quot;)&lt;/code&gt; represents any and all of &lt;code&gt;&quot;x\ny&quot;&lt;/code&gt;, &lt;code&gt;&quot;x\12y&quot;&lt;/code&gt;, &lt;code&gt;&quot;x\012y&quot;&lt;/code&gt; and &lt;code&gt;&quot;x\^Jy&quot;&lt;/code&gt;; see &lt;code&gt;&lt;a href=&quot;#char-1&quot;&gt;char/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93d14fb10f81e7e524658053c68e5144704f1cd" translate="yes" xml:space="preserve">
          <source>For example, the result of &lt;code&gt;to_comment(erl_syntax:abstract([a,b,c]))&lt;/code&gt; represents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a264f4e1e12c6183814b27b5cfc6320ffc9d0ce9" translate="yes" xml:space="preserve">
          <source>For example, the table for employees is created with the function &lt;code&gt;mnesia:create_table(employee, [{attributes, record_info(fields, employee)}])&lt;/code&gt;. The table name &lt;code&gt;employee&lt;/code&gt; matches the name for records specified in &lt;code&gt;ArgList&lt;/code&gt;. The expression &lt;code&gt;record_info(fields, RecordName)&lt;/code&gt; is processed by the Erlang preprocessor and evaluates to a list containing the names of the different fields for a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c5c86c5b451913cc578568aa27276f3bff7bb5" translate="yes" xml:space="preserve">
          <source>For example, this function can show the counters &lt;code&gt;snmpInPkts&lt;/code&gt; and &lt;code&gt;snmpOutPkts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb158ed1e90b656f9b3e55aeae62562ba2fdbb8" translate="yes" xml:space="preserve">
          <source>For example, to assign a weekday value in Erlang, use the same atom as in the &lt;code&gt;Enumerations&lt;/code&gt; of the type definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec286472cf455f60d336948ac5fbc7b9ec99b9f" translate="yes" xml:space="preserve">
          <source>For example, to encode a tuple with some stuff:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4312a1335ee7b87dcc19f8f9eaf04939994b9b13" translate="yes" xml:space="preserve">
          <source>For example, to encode the list &lt;code&gt;[c, d, [e | f]]&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63863fb032c8edf85c23451afe9b754a4ffcd8dc" translate="yes" xml:space="preserve">
          <source>For example, to encode the map &lt;code&gt;#{a =&amp;gt; &quot;Apple&quot;, b =&amp;gt; &quot;Banana&quot;}&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34d4ca9cc9fa31e2f8fdf5e1133bcb441acc7c3" translate="yes" xml:space="preserve">
          <source>For example, to encode the tuple &lt;code&gt;{a, {b, {}}}&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02485851570e7845f1d5cd591ef9981c3952685a" translate="yes" xml:space="preserve">
          <source>For example, to ensure that if &lt;code&gt;allocate&lt;/code&gt; in &lt;code&gt;server_b_SUITE&lt;/code&gt; crashes, &lt;code&gt;deallocate&lt;/code&gt; is skipped, the following sequence can be defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9076e6e4b089ebf20cf9a540d7f1aee997885493" translate="yes" xml:space="preserve">
          <source>For example, to extract data from a variable &lt;code&gt;P&lt;/code&gt; that contains such a tuple, you can write the following code and then use pattern matching to extract the relevant fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="165d1726a6a8449fd11c523cb6173ce408d1b215" translate="yes" xml:space="preserve">
          <source>For example, to find the names of all male persons older than 30 in table &lt;code&gt;Tab&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c980a03b328542b1ed7ac72f423252763a50c75" translate="yes" xml:space="preserve">
          <source>For example, to specify that &lt;code&gt;sysLocation&lt;/code&gt; should have the value &lt;code&gt;&quot;upstairs&quot;&lt;/code&gt; in the notification, we could use one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34e72668c068932f81110e8db333f392f8c4c12" translate="yes" xml:space="preserve">
          <source>For example, to start playing with a small database for healthy foods, enter the following data into file &lt;code&gt;FRUITS&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79cece284c7a574f8b24e74fd28b2103fee53f7" translate="yes" xml:space="preserve">
          <source>For example, to start up IPv6 distributed nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3c834a54d1f9ce57bef8f778331a10a4d219b1" translate="yes" xml:space="preserve">
          <source>For example, when &lt;code&gt;delayed_write&lt;/code&gt; is used, after a number of &lt;code&gt;write/2&lt;/code&gt; calls, &lt;code&gt;close/1&lt;/code&gt; can return &lt;code&gt;{error, enospc}&lt;/code&gt;, as there is not enough space on the disc for previously written data. &lt;code&gt;close/1&lt;/code&gt; must probably be called again, as the file is still open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f2d3c2e0d281e11be02d6ce5a96d59d0e62d83a" translate="yes" xml:space="preserve">
          <source>For example: Assume that the primary log level for Logger is &lt;code&gt;info&lt;/code&gt;, and there is one handler, &lt;code&gt;h1&lt;/code&gt;, with level &lt;code&gt;info&lt;/code&gt; and one handler, &lt;code&gt;h2&lt;/code&gt;, with level &lt;code&gt;debug&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7226ad43063f4fb11a46a3647e3690e700002c5f" translate="yes" xml:space="preserve">
          <source>For example; for all sub ranges &lt;code&gt;N*2.0^(-53) =&amp;lt; X &amp;lt; (N+1)*2.0^(-53)&lt;/code&gt; where &lt;code&gt;0 =&amp;lt; integer(N) &amp;lt; 2.0^53&lt;/code&gt; the probability is the same. Compare that with the form of the numbers generated by &lt;code&gt;&lt;a href=&quot;#uniform_s-1&quot;&gt;uniform_s/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d768014f58f081c22826e708cc2d34357086d4a" translate="yes" xml:space="preserve">
          <source>For exceptional, non-cryptographic use cases one may consider switching to &lt;code&gt;erlang:md5/1&lt;/code&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c4c9f42d8482bd833058b7899b278b34ed3b86" translate="yes" xml:space="preserve">
          <source>For exceptions of class &lt;code&gt;error&lt;/code&gt;, that is, run-time errors, &lt;code&gt;{'EXIT',{Reason,Stack}}&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d75fd7045c1f6c9e87c9b2629f7a20bce214805" translate="yes" xml:space="preserve">
          <source>For exceptions of class &lt;code&gt;exit&lt;/code&gt;, that is, the code called &lt;code&gt;exit(Term)&lt;/code&gt;, &lt;code&gt;{'EXIT',Term}&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dec13e2e32d6e803a1b91bb785adf5664bf9800" translate="yes" xml:space="preserve">
          <source>For exceptions of class &lt;code&gt;throw&lt;/code&gt;, that is the code called &lt;code&gt;throw(Term)&lt;/code&gt;, &lt;code&gt;Term&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2604653c559a78a66ea1e95ea2f6257c4c455d34" translate="yes" xml:space="preserve">
          <source>For external programs, &lt;code&gt;PATH&lt;/code&gt; is searched (or an equivalent method is used to find programs, depending on the OS). This is done by invoking the shell on certain platforms. The first space-separated token of the command is considered as the name of the executable (or driver). This (among other things) makes this option unsuitable for running programs with spaces in filenames or directory names. If spaces in executable filenames are desired, use &lt;code&gt;{spawn_executable, Command}&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1891dce3e65d7a0c3e460d2a9502d403373cbec5" translate="yes" xml:space="preserve">
          <source>For fields without type annotations, their type defaults to any(). That is, the previous example is a shorthand for the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67da59da0e06fe0812ccbbd7ea7860719c3945ad" translate="yes" xml:space="preserve">
          <source>For files where &lt;code&gt;encoding&lt;/code&gt; is set to something else than &lt;code&gt;latin1&lt;/code&gt;, one character can be represented by more than one byte on the file. The parameter &lt;code&gt;Number&lt;/code&gt; always denotes the number of &lt;strong&gt;characters&lt;/strong&gt; read from the file, while the position in the file can be moved much more than this number when reading a Unicode file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8a8bf8fac124586b0d20cb5a01443247557b0a" translate="yes" xml:space="preserve">
          <source>For forward compatibility, a subscriber should be prepared to receive info fields of forms other than the above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67aae87112a9193f42f2dd1a41c03cde10aefdf7" translate="yes" xml:space="preserve">
          <source>For further information on Igors in general, see e.g. &quot;Young Frankenstein&quot;, Mel Brooks, 1974, and &quot;The Fifth Elephant&quot;, Terry Pratchett, 1999.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbc4c06324b93dcc086156449e3db80e1ff44ad" translate="yes" xml:space="preserve">
          <source>For further information see the &lt;code&gt;&lt;a href=&quot;#process_received_message&quot;&gt;process_received_message/4&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce92c6361747136bae6e813bf4e3da4a14ace014" translate="yes" xml:space="preserve">
          <source>For greater clarity and unambiguity, it is best to avoid following \ by a digit greater than zero. Instead, use \o{} or \x{} to specify character numbers, and \g{} to specify back references. The following paragraphs describe the old, ambiguous syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faa9506c39d676c9343e878dec62621a44a8773" translate="yes" xml:space="preserve">
          <source>For halt logs &lt;code&gt;File&lt;/code&gt; is the filename, and for wrap logs &lt;code&gt;File&lt;/code&gt; is the base name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d824ac8b77aeeac255e5a3f60baad39e84eff882" translate="yes" xml:space="preserve">
          <source>For help on the warning options, use &lt;code&gt;dialyzer -Whelp&lt;/code&gt;. The options are also enumerated, see function &lt;code&gt;&lt;a href=&quot;#gui-1&quot;&gt;gui/1&lt;/a&gt;&lt;/code&gt; below (&lt;code&gt;WarnOpts&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76bb57654667e86b344857b26a9452d8fd8b746" translate="yes" xml:space="preserve">
          <source>For implementing a supervisor in a supervision tree</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc01c00724b3f42e64d79847c50fb8953aff50c3" translate="yes" xml:space="preserve">
          <source>For implementing event handling functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2930686a66b9fb8f7bf3588e61b71723ababbefc" translate="yes" xml:space="preserve">
          <source>For implementing state machines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efad4998fb01460fa6e8b34bf1b3e028f517060" translate="yes" xml:space="preserve">
          <source>For implementing the server of a client-server relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39effd3837ccb93c4fbb4c1a2210f6e6d181e6be" translate="yes" xml:space="preserve">
          <source>For incoming messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0351f75d8032cdd9f14984b6e4a439bffa6af520" translate="yes" xml:space="preserve">
          <source>For increased performance, raw files are recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33350338a7d8309e7ede8329c65d751bf44f2ca" translate="yes" xml:space="preserve">
          <source>For information about &lt;code&gt;File = name()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;filename&quot;&gt;filename(3)&lt;/a&gt;&lt;/code&gt;. For information about &lt;code&gt;Options&lt;/code&gt; and &lt;code&gt;YeccRet&lt;/code&gt;, see &lt;code&gt;yecc:file/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e10183a8a3ba351835560916c59038a5ccba072" translate="yes" xml:space="preserve">
          <source>For information about &lt;code&gt;File = name()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;filename&quot;&gt;filename(3)&lt;/a&gt;&lt;/code&gt;. For information about &lt;code&gt;YeccRet&lt;/code&gt;, see &lt;code&gt;yecc:file/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75e99467f6d507524f88ca5756496e8907d98c5" translate="yes" xml:space="preserve">
          <source>For information about &lt;code&gt;File&lt;/code&gt;, see &lt;code&gt;file:filename()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d814fe7b2ac52e63947b9c3515d52567531c5b27" translate="yes" xml:space="preserve">
          <source>For information about Funs, see &quot;Fun Expressions&quot; in section &lt;code&gt;Erlang Reference Manual&lt;/code&gt; in System Documentation..</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41c6e80873e7cdcfede11fc729172cad8090733" translate="yes" xml:space="preserve">
          <source>For information about Logger and its user interface, see the &lt;code&gt;logger(3)&lt;/code&gt; manual page and the &lt;code&gt;Logging&lt;/code&gt; section in the Kernel User's Guide. The system can be configured so that log events are written to file or to tty, or both. In addition, user-defined applications can send and format log events using Logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91229de80a58d983d668739cc8e252f38b0f3d5" translate="yes" xml:space="preserve">
          <source>For information about QLC, see the &lt;code&gt;qlc&lt;/code&gt; manual page in STDLIB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43875c76cb51ac9e3ce88d0c97a427df262d1eac" translate="yes" xml:space="preserve">
          <source>For information about busy port functionality, see &lt;code&gt;&lt;a href=&quot;#set_busy_port&quot;&gt;set_busy_port&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27fff486a2d61c6ae6bef6fa2abb95ae3fa79860" translate="yes" xml:space="preserve">
          <source>For information about busy port message queue functionality, see &lt;code&gt;&lt;a href=&quot;#erl_drv_busy_msgq_limits&quot;&gt;erl_drv_busy_msgq_limits&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f1f2721e7c0570e64539e37aaeb1a809a1b6ab" translate="yes" xml:space="preserve">
          <source>For information about encoding requirements, see documentation of the types for &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Val&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8faf99b329fd2cc71377120a2c05350e31daef0" translate="yes" xml:space="preserve">
          <source>For information about how to add a CTH to your suite, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Installing a CTH&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8e9b5c30f413b33d875d9035e049c9f9bdf35f" translate="yes" xml:space="preserve">
          <source>For information about how to change the stack trace option, see section &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb0a1432a75af787cead1c6984e8221c83da3c1" translate="yes" xml:space="preserve">
          <source>For information about how to use this parse transformation, see &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ets&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850b45d7cfa22af60f9fb3a83cee35b0efe89e5f" translate="yes" xml:space="preserve">
          <source>For information about port drivers, see the &lt;code&gt;erl_driver(4)&lt;/code&gt; manual page in ERTS, &lt;code&gt;driver_entry(1)&lt;/code&gt; manual page in ERTS, and &lt;code&gt;erl_ddll(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ea796bd679310cad2a8c019f2fd120b956863e" translate="yes" xml:space="preserve">
          <source>For information about specific &lt;code&gt;InfoTuple&lt;/code&gt;s, see &lt;code&gt;&lt;a href=&quot;#process_info-2&quot;&gt;process_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f7c80f04ac198a99b61b54fa252498361eb700" translate="yes" xml:space="preserve">
          <source>For information about specific fields, see &lt;code&gt;&lt;a href=&quot;#ErlDrvSysInfo&quot;&gt;ErlDrvSysInfo&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b964cfa491aaf9b17e62e3f97e9366930cc853" translate="yes" xml:space="preserve">
          <source>For information about test case groups, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa3bb5e7ad6bb510175e8e09c4259cba8d9ac6e" translate="yes" xml:space="preserve">
          <source>For information about the complete set of table properties and their details, see &lt;code&gt;mnesia:create_table/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e65315dfa47e3a65534569f12fe34b43632f6cf" translate="yes" xml:space="preserve">
          <source>For information about the current agent config (&lt;code&gt;AgentConfig&lt;/code&gt;), see either the &lt;code&gt;SNMP application&lt;/code&gt; part of the reference manual or the &lt;code&gt;&lt;a href=&quot;snmp_config&quot;&gt;Configuring the application&lt;/a&gt;&lt;/code&gt; chapter of the SNMP user's guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396b2c0312dce3946fa12e503260cb07fdd975d1" translate="yes" xml:space="preserve">
          <source>For information about the old config (&lt;code&gt;OldConfig&lt;/code&gt;) see the OTP R9C documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486b6efd455568eabc4284b79f23c4a39170ea3a" translate="yes" xml:space="preserve">
          <source>For information about the release upgrade file, see the &lt;code&gt;relup(4)&lt;/code&gt; manual page in SASL. For more information about upgrade instructions, see the &lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f04abbce46aeb36b2ced6befa16cd5e9c2fd97" translate="yes" xml:space="preserve">
          <source>For information about the start flags, see section &lt;code&gt;&lt;a href=&quot;run_test_chapter&quot;&gt;Running Tests and Analyzing Results&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fa203add7b096a7ebff9c87af90825a01dabd3" translate="yes" xml:space="preserve">
          <source>For information about the syntax and contents of the &lt;code&gt;.appup&lt;/code&gt; file, see the &lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0350f9dd73730b552f7190550fb86e2ce7184b" translate="yes" xml:space="preserve">
          <source>For information about using encrypted configuration files when running tests, see section &lt;code&gt;&lt;a href=&quot;config_file_chapter#encrypted_config_files&quot;&gt;Encrypted Configuration Files&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5949891d8cbb51d1f63fd38796d07983e70ba884" translate="yes" xml:space="preserve">
          <source>For information and examples of overload protection, please refer to section &lt;code&gt;&lt;a href=&quot;#overload_protection&quot;&gt;Protecting the Handler from Overload&lt;/a&gt;&lt;/code&gt;, and the implementation of &lt;code&gt;&lt;a href=&quot;logger_std_h&quot;&gt;logger_std_h&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger_disk_log_h&quot;&gt;logger_disk_log_h&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac91fa29a8e3871804e923c0db3ad0a884cba2d9" translate="yes" xml:space="preserve">
          <source>For information and other types, see &lt;code&gt;ssh_sftp(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91bd4a7cd9be59fe70fa527b1d7151d26b5ed5c" translate="yes" xml:space="preserve">
          <source>For information on &lt;code&gt;save_config&lt;/code&gt; and &lt;code&gt;skip_and_save&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;dependencies_chapter#save_config&quot;&gt;Saving Configuration Data&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ae2243ea6b11c9af62392821b47de37c111a1e" translate="yes" xml:space="preserve">
          <source>For information on &lt;code&gt;save_config&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;dependencies_chapter#save_config&quot;&gt;Saving Configuration Data&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7060c1d91ea87a723dd0701daebda8b882de1e3" translate="yes" xml:space="preserve">
          <source>For information on how to communicate with Erlang/OTP components from earlier releases, see the documentation of system flag &lt;code&gt;&lt;a href=&quot;erl#compat_rel&quot;&gt;+R&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a403ce7c5ca0b75c3d3ccd6407eddb1d8910439e" translate="yes" xml:space="preserve">
          <source>For information on how to create a new &lt;code&gt;Name&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;ct#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb790298eedcb9410a73df18d439e2c13d02801e" translate="yes" xml:space="preserve">
          <source>For information on how to install the first target system, using a release package, see System Principles. For information on how to install a new release package in an existing system, see &lt;code&gt;&lt;a href=&quot;release_handling&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c568ae3018be99aeb9c329db9822c86fd2744e5" translate="yes" xml:space="preserve">
          <source>For information on how to run the emulator with instrumentation, see &lt;code&gt;instrument(3)&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc9e033c8d8b0dad26dfd10cd968656821cde8b" translate="yes" xml:space="preserve">
          <source>For information on type &lt;code&gt;CpuTopology&lt;/code&gt; and more, see &lt;code&gt;&lt;a href=&quot;#system_info_cpu_topology&quot;&gt;erlang:system_info(cpu_topology)&lt;/a&gt;&lt;/code&gt; as well as command-line flags &lt;code&gt;+sct&lt;/code&gt; and &lt;code&gt;+sbt&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af1f718a2b3725bae31f2443e86a82dffb9dda2" translate="yes" xml:space="preserve">
          <source>For instance, to use EUnit in your application, but with testing turned off by default, put the following lines in a header file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28229934c08458f4e38e6f6b7422908a2aa6202e" translate="yes" xml:space="preserve">
          <source>For instructions for exclusive decode, see Section &lt;code&gt;&lt;a href=&quot;asn1_spec#Exclusive%20Instruction&quot;&gt;Exclusive Decode&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc6cf4e0ae923b4a0f8ded5ba2083f7c11b4420" translate="yes" xml:space="preserve">
          <source>For instructions for selective decode, see Section &lt;code&gt;&lt;a href=&quot;asn1_spec#Selective%20Instruction&quot;&gt;Selective Decode&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065155fd6683566506228cf65b82061dd7ff9f36" translate="yes" xml:space="preserve">
          <source>For integer &lt;code&gt;Status&lt;/code&gt;, the Erlang runtime system closes all ports and allows async threads to finish their operations before exiting. To exit without such flushing, use &lt;code&gt;Option&lt;/code&gt; as &lt;code&gt;{flush,false}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fa260d9adabb8da5b25261cc7af0d3faaea668" translate="yes" xml:space="preserve">
          <source>For integers and atoms, it is allowed for singleton types; for example, the integers &lt;code&gt;-1&lt;/code&gt; and &lt;code&gt;42&lt;/code&gt;, or the atoms &lt;code&gt;'foo'&lt;/code&gt; and &lt;code&gt;'bar'&lt;/code&gt;. All other types are built using unions of either predefined types or singleton types. In a type union between a type and one of its subtypes, the subtype is absorbed by the supertype. Thus, the union is then treated as if the subtype was not a constituent of the union. For example, the type union:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d1b7d945d6ff08705ea0ad400e1e13dee9cf69" translate="yes" xml:space="preserve">
          <source>For investigation of locks in the emulator we use an internal tool called &lt;code&gt;lcnt&lt;/code&gt; (short for lock-count). The VM needs to be compiled with this option enabled. To compile a lock-counting VM along with a normal VM, use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa24a4ab3c3b9e5f2e9a7f0e20d3afbe8c8078d" translate="yes" xml:space="preserve">
          <source>For line-oriented protocols (&lt;code&gt;line&lt;/code&gt;, &lt;code&gt;http*&lt;/code&gt;), option &lt;code&gt;packet_size&lt;/code&gt; also guarantees that lines up to the indicated length are accepted and not considered invalid because of internal buffer limitations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38b75c05ac3884d26120299b6facf57ffce1372" translate="yes" xml:space="preserve">
          <source>For linked-in drivers, the programmer needs to read the &lt;code&gt;erl_ddll&lt;/code&gt; manual page in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa965799221d110e2155b47752cebe6e62504a8" translate="yes" xml:space="preserve">
          <source>For module-local types, the restriction that their definition exists in the module is enforced by the compiler and results in a compilation error. (A similar restriction currently exists for records.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac058b62db8c8383f25b9c9e684207320ed7e09" translate="yes" xml:space="preserve">
          <source>For modules compiled with OTP 20 onwards, the &lt;code&gt;abst_code&lt;/code&gt; chunk is automatically computed from the &lt;code&gt;debug_info&lt;/code&gt; chunk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747f76962640cb75c0b07fdf2558c1f95cc82d06" translate="yes" xml:space="preserve">
          <source>For modules that have native code loaded (see &lt;code&gt;&lt;a href=&quot;#is_module_native-1&quot;&gt;is_module_native/1&lt;/a&gt;&lt;/code&gt;), the MD5 sum of the native code in the object file is used for the comparison, if it exists; the Beam code in the file is ignored. Reversely, for modules that do not currently have native code loaded, any native code in the file will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a638687974cb0ce829af38e640e4d19908921db5" translate="yes" xml:space="preserve">
          <source>For more control over the error handling, use the &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; interface instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe4a57106ddcad024177e6a4f89c184b2daa3be" translate="yes" xml:space="preserve">
          <source>For more detail, see the &lt;code&gt;&lt;a href=&quot;megaco_transport&quot;&gt;megaco_transport&lt;/a&gt;&lt;/code&gt; behaviour definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f514c6b3d73fec390c14af34f1764416467804" translate="yes" xml:space="preserve">
          <source>For more detailed information on time-outs, see Section &lt;code&gt;&lt;a href=&quot;#cb_timeouts&quot;&gt;Callback timeouts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7acfe7142eb7bcfb648d6265914c5eee5dd2fd3" translate="yes" xml:space="preserve">
          <source>For more detailed information on time-outs,, see Section &lt;code&gt;&lt;a href=&quot;#cb_timeouts&quot;&gt;Callback timeouts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="169498bb75a141fa3fd9c2f4ec48c571d942c6d8" translate="yes" xml:space="preserve">
          <source>For more details about the event notification mechanism, see RFC 5277.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7536188245d09c6ee6775a0d9b510b3d321a3523" translate="yes" xml:space="preserve">
          <source>For more details about the operation of Dialyzer, see section &lt;code&gt;&lt;a href=&quot;dialyzer_chapter#dialyzer_gui&quot;&gt;Using Dialyzer from the GUI&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ec302ce765790abf4dda344221a24243474e5a" translate="yes" xml:space="preserve">
          <source>For more details on initialization (and termination) scripts, and naming thereof, see the Solaris documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccbe349500b4552decd7cd7dcf4743530af21fb" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenarios&lt;/a&gt;&lt;/code&gt; in this module description and the function description for &lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98eb0da50ffc164e6eccf87225f7bbeb159149e" translate="yes" xml:space="preserve">
          <source>For more details, see the &lt;code&gt;sasl(6)&lt;/code&gt; application in the Reference Manual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5d6245dd57c7b9c93dd31b45b597ba4fa75f58b" translate="yes" xml:space="preserve">
          <source>For more examples of functions as input and output, see the end of the &lt;code&gt;file_sorter&lt;/code&gt; module; the &lt;code&gt;term&lt;/code&gt; format is implemented with functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef524b3177ca33b84f0ee9b52b6accd95f5c4fa6" translate="yes" xml:space="preserve">
          <source>For more examples of how to use &lt;code&gt;dbg&lt;/code&gt; from the Erlang shell, see the &lt;code&gt;&lt;a href=&quot;#simple_example&quot;&gt;simple example&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5c7e6d5de73ab10dc4489adbb78e2a8ca8daa6" translate="yes" xml:space="preserve">
          <source>For more examples, see &lt;code&gt;Programming Examples&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a52fcb0116489b8a173f045b3b1f564556cc89a" translate="yes" xml:space="preserve">
          <source>For more examples, see section &lt;code&gt;&lt;a href=&quot;#examples&quot;&gt;Examples&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0b5afce92d6a55afc08b046f441f3f879430c0a" translate="yes" xml:space="preserve">
          <source>For more info about the &lt;code&gt;agent_config()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;snmpm#register_agent&quot;&gt;register_agent&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f088af6049109e4d8acc3ce72dcf771e957dd605" translate="yes" xml:space="preserve">
          <source>For more info about the &lt;code&gt;agent_config()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;snmpm#register_agent&quot;&gt;register_agent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f6e50ff4f0c8d7b764c77a1977eb021c25d865" translate="yes" xml:space="preserve">
          <source>For more info about the &lt;code&gt;extra()&lt;/code&gt; part of the result, see the &lt;code&gt;&lt;a href=&quot;megaco_user#extra_argument&quot;&gt;note&lt;/a&gt;&lt;/code&gt; in the user callback module documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5d087fb16d371a12a974dd1cb575eca4420763" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;.rel&lt;/code&gt; files, see &lt;code&gt;OTP Design Principles&lt;/code&gt; and the &lt;code&gt;rel(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa846f444dff1c8c4f5c49cd96d810d1dda22dd1" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;erl_rpc()&lt;/code&gt; and its companions &lt;code&gt;erl_rpc_to()&lt;/code&gt; and &lt;code&gt;erl_rpc_from()&lt;/code&gt;, see the &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fac4875def55d8ec5d0ea5eb62f57da0dd6548" translate="yes" xml:space="preserve">
          <source>For more information about &lt;code&gt;require&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;config_file_chapter#require_config_data&quot;&gt;Requiring and Reading Configuration Data&lt;/a&gt;&lt;/code&gt; in section External Configuration Data and function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33dd247174864987183d128273b044aa101c9fda" translate="yes" xml:space="preserve">
          <source>For more information about HTTP, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a3696455371f0e947d2e85763026043010b15d" translate="yes" xml:space="preserve">
          <source>For more information about MD5, see &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1321.txt&quot;&gt; RFC 1321 - The MD5 Message-Digest Algorithm&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42d54a02835c2bbc40d7f7f9fadc45cf48ecd9cd" translate="yes" xml:space="preserve">
          <source>For more information about URI, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb88d2a2665211fc7dd6e971447eb21f7a44216c" translate="yes" xml:space="preserve">
          <source>For more information about Unicode filenames, see section &lt;code&gt;Unicode Filenames&lt;/code&gt; in the STDLIB User's Guide. Notice that this value also applies to command-line parameters and environment variables (see section &lt;code&gt;Unicode in Environment and Parameters&lt;/code&gt; in the STDLIB User's Guide).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764bebd984844f32dcecfd0e6ec4ca0c6ff016f5" translate="yes" xml:space="preserve">
          <source>For more information about a process, including its state, see &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_status-2&quot;&gt;get_status/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d310770ffe5bc367d7b62a90f97b76f29a0764" translate="yes" xml:space="preserve">
          <source>For more information about drivers, see &lt;code&gt;&lt;a href=&quot;#info-0&quot;&gt;info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e97657eba9f1c5aee61b0f0dec074a2b448cc33" translate="yes" xml:space="preserve">
          <source>For more information about log files, see section &lt;code&gt;&lt;a href=&quot;run_test_chapter#log_files&quot;&gt;Log Files&lt;/a&gt;&lt;/code&gt; in section Running Tests and Analyzing Results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba92bcd5753ab089b28291b7becc5d74ba67764e" translate="yes" xml:space="preserve">
          <source>For more information about match specifications, see the &lt;code&gt;Match specifications in Erlang&lt;/code&gt; in ERTS User's Guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b60cdf129bb6677cdf6f7ec2c7fd64ed777348" translate="yes" xml:space="preserve">
          <source>For more information about old and current code, and how to make a process switch from old to current code, see section Compilation and Code Loading in the &lt;code&gt;Erlang Reference Manual&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8eca93d254abcc66f440084b141d80e366aaf3e" translate="yes" xml:space="preserve">
          <source>For more information about raw filenames, see the &lt;code&gt;file&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fca3803f1f8f5044ab3bc25daec826535ee8aaa2" translate="yes" xml:space="preserve">
          <source>For more information about the &lt;code&gt;ConnectStr&lt;/code&gt; see description of the function SQLDriverConnect in [1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31abf55c44089795af6280e24c4e95df2226c848" translate="yes" xml:space="preserve">
          <source>For more information about the &lt;code&gt;ct_run&lt;/code&gt; program, see module &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; and section &lt;code&gt;&lt;a href=&quot;install_chapter#general&quot;&gt;Installation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cbaa9cf473d89e42055b1bbb7e6507935e0a53a" translate="yes" xml:space="preserve">
          <source>For more information about the different &lt;code&gt;Item&lt;/code&gt;s, see &lt;code&gt;&lt;a href=&quot;#port_info-2&quot;&gt;port_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bd735883ea0f98ee08b60daea1f362e215d874" translate="yes" xml:space="preserve">
          <source>For more information about the record &lt;code&gt;file_info&lt;/code&gt;, see &lt;code&gt;file(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c73aec4083d6315fbc407ffdf5353fc43070c2" translate="yes" xml:space="preserve">
          <source>For more information about the use, see the &lt;code&gt;Embedded System User's Guide&lt;/code&gt; in System Documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f7ae32a59053777da4a62b613bd396fb10eab6" translate="yes" xml:space="preserve">
          <source>For more information about:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733fa53d730c3c70214570c994d0fb15bbe4732e" translate="yes" xml:space="preserve">
          <source>For more information and examples, see the &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ets(3)&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265148f4cb1ca1f818c7d295cf6f004e9d5dabda" translate="yes" xml:space="preserve">
          <source>For more information on encoding of atoms, see the &lt;code&gt;&lt;a href=&quot;#utf8_atoms&quot;&gt;note on UTF-8 encoded atoms&lt;/a&gt;&lt;/code&gt; in the beginning of this section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54b5982f6c86570d5820eb571bbb35b72a9169d" translate="yes" xml:space="preserve">
          <source>For more information on the Windows registry, see consult the Win32 Programmer's Reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c28ad8207093ece94435f1334afbba9f96d62b" translate="yes" xml:space="preserve">
          <source>For more information on what &lt;code&gt;Label&lt;/code&gt; and &lt;code&gt;SeqTraceInfo&lt;/code&gt; can be, see &lt;code&gt;seq_trace(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="178503f5c66f3e891bf9ca2599a1b3f436014878" translate="yes" xml:space="preserve">
          <source>For more information see &lt;code&gt;&lt;a href=&quot;#statistics_microstate_accounting&quot;&gt;statistics(microstate_accounting)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be956fe68ffab094a52171ea292818d45bc1835" translate="yes" xml:space="preserve">
          <source>For more information, please visit &lt;code&gt;&lt;a href=&quot;http://lttng.org&quot;&gt;http://lttng.org&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473b0e8211e713a82db6380dda13b95cc53a099a" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#statistics_scheduler_wall_time&quot;&gt;statistics(scheduler_wall_time)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bded01c9c9f389da4e6d08addaaa2b1177c1a9" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers_online&quot;&gt;erlang:system_info(dirty_cpu_schedulers_online)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380a5941b071e2ec448897e01e07395fd810d761" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers_online&quot;&gt;erlang:system_info(dirty_cpu_schedulers_online)&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt;erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1162f494dd93315417812405dad30e1c61cf1f6d" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#system_info_dirty_io_schedulers&quot;&gt;erlang:system_info(dirty_io_schedulers)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#system_info_schedulers_online&quot;&gt;erlang:system_info(schedulers_online)&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt;erlang:system_flag(dirty_cpu_schedulers_online, DirtyCPUSchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fe72df9e425ed2d4018ed349ebb6b5e03076cd" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bind_type&quot;&gt;erlang:system_info(scheduler_bind_type)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;, as well as command-line flags &lt;code&gt;+sbt&lt;/code&gt; and &lt;code&gt;+sct&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014589015f8dde70e962d0f094fa32ad5135e22c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#system_flag_schedulers_online&quot;&gt;erlang:system_flag(schedulers_online, SchedulersOnline)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc27bbf378595a8b6e1d6bf5b7a7b807c556fb0" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#system_info_schedulers_online&quot;&gt;erlang:system_info(schedulers_online)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fab608a56b7dec21d1e3763e23775c2c2fc3325" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;erlang#system_info_cpu_topology&quot;&gt;erlang:system_info(cpu_topology)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6581c922cd62ce82ede81eda2ade30f1f15c0505" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;&lt;a href=&quot;ms_transform#top&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a1b2d616aa350eb3a899850c8a7fa54a784eaf" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;code&gt;Distributed Programming.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e1832ba6f4231fcaf91ed5142c506b3a533002" translate="yes" xml:space="preserve">
          <source>For more information, see argument &lt;code&gt;&lt;a href=&quot;#system_info_cpu_topology&quot;&gt;cpu_topology&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d529ced804e4a358a5dcd0148a8da964c70f58a" translate="yes" xml:space="preserve">
          <source>For more information, see command-line argument &lt;code&gt;+sbt&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159107c6ac64a8f44183355a7dfb95f35f8696e9" translate="yes" xml:space="preserve">
          <source>For more information, see command-line argument &lt;code&gt;+sbt&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#system_info_schedulers_online&quot;&gt;erlang:system_info(schedulers_online)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1743c60e30009fe5225d629a4c153a187e1867d" translate="yes" xml:space="preserve">
          <source>For more information, see directive &lt;code&gt;require&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccfc2c4251b52e3207a11777d792de57d04afb8e" translate="yes" xml:space="preserve">
          <source>For more information, see options &lt;code&gt;high_msgq_watermark&lt;/code&gt;, &lt;code&gt;high_watermark&lt;/code&gt;, and &lt;code&gt;low_watermark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b88bfa78a188047e14083bb7ec1ea287894210" translate="yes" xml:space="preserve">
          <source>For more information, see options &lt;code&gt;high_watermark&lt;/code&gt;, &lt;code&gt;high_msgq_watermark&lt;/code&gt;, and &lt;code&gt;low_msgq_watermark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035e7b3fac73cbedee358a489cec0fd761e4d78a" translate="yes" xml:space="preserve">
          <source>For more information, see options &lt;code&gt;low_msgq_watermark&lt;/code&gt;, &lt;code&gt;high_watermark&lt;/code&gt;, and &lt;code&gt;low_watermark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef26641a395da761b5f620fe49d7c2685db13fc9" translate="yes" xml:space="preserve">
          <source>For more information, see options &lt;code&gt;low_watermark&lt;/code&gt;, &lt;code&gt;high_msgq_watermark&lt;/code&gt;, and &lt;code&gt;low_msqg_watermark&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec1787aa866249389a69906a9f6b0c7bb15cbd8" translate="yes" xml:space="preserve">
          <source>For more information, see section &lt;code&gt;&lt;a href=&quot;time_correction&quot;&gt;Time and Time Correction&lt;/a&gt;&lt;/code&gt; in the User's Guide. Specifically, section &lt;code&gt;&lt;a href=&quot;time_correction#Dos_and_Donts&quot;&gt;Dos and Dont's&lt;/a&gt;&lt;/code&gt; describes what to use instead of &lt;code&gt;erlang:now/0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e91de62528b6db201c62425282903676ac998d" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;erl_eterm&quot;&gt;erl_eterm&lt;/a&gt;&lt;/code&gt; modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102125a0f8cb50cdf9c0819dee6ea88669ed5764" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f5fcc5f31eac399a6a83e62089ded1b3dd5682" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;&lt;a href=&quot;erl_format#erl_match&quot;&gt;erl_format:erl_match&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da13fe8e00e8b5e956157fccb636c37e51dadaf" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;&lt;a href=&quot;erl_malloc&quot;&gt;erl_malloc&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e149a19e50e2f20f90e0de3966d91628bbe2df9c" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;erlsrv&lt;/code&gt; manual page in ERTS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d6f5b18f09a083b12a1f60cbd74531ec6f629a5" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;heart(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffca142f5bd919346f2747fd61f52e77b3331514" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;code&gt;lcnt&lt;/code&gt; manual page in Tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35570bba5cea192afdadd5576987d0a42581d0f7" translate="yes" xml:space="preserve">
          <source>For most systems, turning on Unicode filename translation is no problem even if it uses transparent file naming. Very few systems have mixed filename encodings. A consistent UTF-8 named system works perfectly in Unicode filename mode. It was still, however, considered experimental in Erlang/OTP R14B01 and is still not the default on such systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b03f64c09a103223279b4e8963687c7384e746" translate="yes" xml:space="preserve">
          <source>For non-persistent database storage, prefer Ets tables over Mnesia &lt;code&gt;local_content&lt;/code&gt; tables. Even the Mnesia &lt;code&gt;dirty_write&lt;/code&gt; operations carry a fixed overhead compared to Ets writes. Mnesia must check if the table is replicated or has indices, this involves at least one Ets lookup for each &lt;code&gt;dirty_write&lt;/code&gt;. Thus, Ets writes is always faster than Mnesia writes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fbb382e36fc39656778009ef9ad7dd96a25e6b" translate="yes" xml:space="preserve">
          <source>For on-the-fly exporting during parsing (SAX style) of the XML document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40de4a27a3fb5e7e11c313556f0e063cde535a42" translate="yes" xml:space="preserve">
          <source>For option description, see &lt;code&gt;&lt;a href=&quot;#inspect-2&quot;&gt;lcnt:inspect/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfed2d5e1aa56187fdfaf0c6a7756c79562fb80a" translate="yes" xml:space="preserve">
          <source>For options that can be set and actions that can be done by &lt;code&gt;gen_statem&lt;/code&gt; after returning from this function, see &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76325a1a54fa830d07f62d49501832ffd495417" translate="yes" xml:space="preserve">
          <source>For other types of forms, only the node type is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9fa94737b7a3e3e152d2ad843f4dc903b74a65" translate="yes" xml:space="preserve">
          <source>For other types, see &lt;code&gt;ssh(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca9b594158e7d365934bd459e6bec5ea6fc56a0a" translate="yes" xml:space="preserve">
          <source>For outgoing messages:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e4899182c8e70f4b7882b04b6005650811a0e4" translate="yes" xml:space="preserve">
          <source>For packet type &lt;code&gt;line&lt;/code&gt;, lines longer than the indicated length are truncated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49528c417eb663b411155dc046e113e236ef8403" translate="yes" xml:space="preserve">
          <source>For packet type &lt;code&gt;line&lt;/code&gt;, sets the delimiting byte. Default is the latin-1 character &lt;code&gt;$\n&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3782a8e2979a34dfb6e69d9e71c1321887d5c29a" translate="yes" xml:space="preserve">
          <source>For possible reasons, see &lt;code&gt;public_key:pkix_path_validation/3&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75104900d9fa722ba16b6b5ba4b920af0be23a40" translate="yes" xml:space="preserve">
          <source>For proper functioning of flushing file system data to disk on Solaris 2.5.1, the version-specific patch with number 103640-02 must be added to the operating system. Other patches might be needed, see the release README file &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/README&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656e2959d09b9ebe0abb3be0c9c559e174df92bd" translate="yes" xml:space="preserve">
          <source>For queries not using the &lt;code&gt;search&lt;/code&gt; list, if the query to all &lt;code&gt;nameservers&lt;/code&gt; results in &lt;code&gt;{error,nxdomain}&lt;/code&gt; or an empty answer, the same query is tried for &lt;code&gt;alt_nameservers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b8957d8020eb9e87981c178f14ff34b35485d9" translate="yes" xml:space="preserve">
          <source>For readability, the example code is kept as simple as possible. For example, it does not include error handling, which might be vital in a real-life system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38e8a331158bbaca6e2984a9c03a8fde4916b93" translate="yes" xml:space="preserve">
          <source>For release handling to work properly, the runtime system must have knowledge about which release it is running. It must also be able to change (in runtime) which boot script and system configuration file to use if the system is rebooted, for example, by &lt;code&gt;heart&lt;/code&gt; after a failure. Thus, Erlang must be started as an embedded system; for information on how to do this, see Embedded System.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60058bb76ac1d7e649d379e983fee2d6d58bdc6" translate="yes" xml:space="preserve">
          <source>For release handling to work properly, the runtime system must know which release it is running. It must also be able to change (in runtime) which boot script and system configuration file are to be used if the system is restarted. This is taken care of automatically if Erlang is started as an embedded system. Read about this in &lt;code&gt;Embedded System&lt;/code&gt; in &lt;strong&gt;System Documentation&lt;/strong&gt;. In this case, the system configuration file &lt;code&gt;sys.config&lt;/code&gt; is mandatory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733aa680cc0ce48217dd03dedb5182519c541887" translate="yes" xml:space="preserve">
          <source>For release handling to work, use &lt;code&gt;start_erl&lt;/code&gt; as the Erlang machine. As stated &lt;code&gt;&lt;a href=&quot;#001&quot;&gt;above&lt;/a&gt;&lt;/code&gt;, the service name is significant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50e14cf83a064b14e5263159a02b7161dafa2f3" translate="yes" xml:space="preserve">
          <source>For remote files, &lt;code&gt;ftp&lt;/code&gt; cannot determine the file size in a platform independent way. In this case the size becomes &lt;code&gt;unknown&lt;/code&gt; and it is left to the application to determine the size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f955c275027f2f36c96742dcda8971cd255c6fb7" translate="yes" xml:space="preserve">
          <source>For scalar variables, a function &lt;code&gt;f(Operation, ...)&lt;/code&gt; must be defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6dd51d7eaa4e872f24ed13800a1ba3ffb38ecd" translate="yes" xml:space="preserve">
          <source>For scalar variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5200604f64729ed3a8c1c90ce7cee93d5e706fa7" translate="yes" xml:space="preserve">
          <source>For security reasons, this directory is normally accessible only to the root user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b3cc8f09d0f687a26732e4562872589388f8ed" translate="yes" xml:space="preserve">
          <source>For similar dependency on the md5 and des algorithms most encrypted private keys in PEM format do not work either. However, the PBES2 encryption scheme allows the use of stronger FIPS verified algorithms which is a viable alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7fd11af306aa0787eb221d59b5a550d8011f49" translate="yes" xml:space="preserve">
          <source>For simple state machines not needing these features &lt;code&gt;gen_server&lt;/code&gt; works just fine. It also has got smaller call overhead, but we are talking about something like 2 vs 3.3 microseconds call roundtrip time here, so if the server callback does just a little bit more than just replying, or if the call is not extremely frequent, that difference will be hard to notice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65f3ace59a4bffafeeff8ff2baaf061eb590f52" translate="yes" xml:space="preserve">
          <source>For simplicity, the &lt;code&gt;Guard&lt;/code&gt; argument may also be any of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfd0d5590df543f0cc546f95d2278f8b46ca4969" translate="yes" xml:space="preserve">
          <source>For some 30X-result codes, automatic redirect is not allowed. In these cases the 30X-result is always returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699b1be8237bfcbf9485bcb546b581b5163095d7" translate="yes" xml:space="preserve">
          <source>For some algorithms, jump functions are provided for generating non-overlapping sequences for parallel computations. The jump functions perform calculations equivalent to perform a large number of repeated calls for calculating new states.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350ef578f76518f00d7c6b44066f734a85c4f9ac" translate="yes" xml:space="preserve">
          <source>For some errors, for example, file system full, it is necessary to call &lt;code&gt;append_chunk_end&lt;/code&gt; to get the proper reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24daba9e08780d1101f66c1b1b5b2a5ff192de81" translate="yes" xml:space="preserve">
          <source>For some errors, for example, file system full, it is necessary to to call &lt;code&gt;send_chunk_end&lt;/code&gt; to get the proper reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398ccb01ae03029aa5d524510c11d616ec30a34b" translate="yes" xml:space="preserve">
          <source>For some of &lt;strong&gt;our&lt;/strong&gt; codecs (not binary), it is also possible to pre-encode the actions, in which case &lt;code&gt;Actions&lt;/code&gt; will be either a &lt;code&gt;binary()&lt;/code&gt; or &lt;code&gt;[binary()]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de480a7da54e5f56c4412fc5c65ca6129148716" translate="yes" xml:space="preserve">
          <source>For some time, Perl has provided a facility that allows regular expressions to recurse (among other things). It does this by interpolating Perl code in the expression at runtime, and the code can refer to the expression itself. A Perl pattern using code interpolation to solve the parentheses problem can be created like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b580202559c4b8bb5d21613c730a13a6d07eda5" translate="yes" xml:space="preserve">
          <source>For source code, there is an extension to syntax &lt;code&gt;\&lt;/code&gt;OOO (backslash followed by three octal numbers) and &lt;code&gt;\x&lt;/code&gt;HH (backslash followed by &lt;code&gt;x&lt;/code&gt;, followed by two hexadecimal characters), namely &lt;code&gt;\x{&lt;/code&gt;H ...&lt;code&gt;}&lt;/code&gt; (backslash followed by &lt;code&gt;x&lt;/code&gt;, followed by left curly bracket, any number of hexadecimal digits, and a terminating right curly bracket). This allows for entering characters of any code point literally in a string even when the encoding of the source file is bytewise (&lt;code&gt;latin1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec104cd777412980211468aadaec4af92c37fa9" translate="yes" xml:space="preserve">
          <source>For statuses &lt;code&gt;string()&lt;/code&gt; and &lt;code&gt;abort&lt;/code&gt;, option &lt;code&gt;flush&lt;/code&gt; is ignored and flushing is &lt;strong&gt;not&lt;/strong&gt; done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f41f536c797f19fa1495fe43641d95e8f6802c0a" translate="yes" xml:space="preserve">
          <source>For such functions, it is recommended to use the special &lt;code&gt;no_return()&lt;/code&gt; type for their &quot;return&quot;, through a contract of the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa91aef9a76ec0ef9ab846570f6a068b92ff2f74" translate="yes" xml:space="preserve">
          <source>For system reboots to work properly, it is also required that the system is started with heartbeat monitoring, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS and the &lt;code&gt;heart(3)&lt;/code&gt; manual page in Kernel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56036cbdb276fedc737c5fb413f3dab9e7e4af38" translate="yes" xml:space="preserve">
          <source>For tables of type &lt;code&gt;bag&lt;/code&gt; or &lt;code&gt;duplicate_bag&lt;/code&gt;, the functions returns a list with the &lt;code&gt;Pos&lt;/code&gt;:th element of every object with key &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b022cb216c27ac5d7bfe54004e9fb8ee6f1f91d0" translate="yes" xml:space="preserve">
          <source>For tables of type &lt;code&gt;ordered_set&lt;/code&gt;, an object is returned if the specified key &lt;strong&gt;compares equal&lt;/strong&gt; to the key of an object in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233db6fa166e9a39b932c3d8a0b2cd0810af3920" translate="yes" xml:space="preserve">
          <source>For tables of type &lt;code&gt;ordered_set&lt;/code&gt;, objects are visited in the same order as in a &lt;code&gt;first&lt;/code&gt;/&lt;code&gt;next&lt;/code&gt; traversal. This means that the match specification is executed against objects with keys in the &lt;code&gt;first&lt;/code&gt;/&lt;code&gt;next&lt;/code&gt; order and the corresponding result list is in the order of that execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6c4d1ea79ea30047e3cda2a99993d140d14faa" translate="yes" xml:space="preserve">
          <source>For tables of type &lt;code&gt;ordered_set&lt;/code&gt;, the result is in the same order as in a &lt;code&gt;first&lt;/code&gt;/&lt;code&gt;next&lt;/code&gt; traversal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="715ab04cd100183a8c5ea8e6f632d5aa5bc16ef5" translate="yes" xml:space="preserve">
          <source>For tables of type &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;ordered_set&lt;/code&gt;, the function returns either the empty list or a list with one element, as there cannot be more than one object with the same key. For tables of type &lt;code&gt;bag&lt;/code&gt; or &lt;code&gt;duplicate_bag&lt;/code&gt;, the function returns a list of arbitrary length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c978b754e8c5d3bf488c2adbe59d11ce586acd" translate="yes" xml:space="preserve">
          <source>For tables of type &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt;, or &lt;code&gt;duplicate_bag&lt;/code&gt;, an object is returned only if the specified key &lt;strong&gt;matches&lt;/strong&gt; the key of the object in the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc193107e3ea191d41964e87dd054615f12309c6" translate="yes" xml:space="preserve">
          <source>For tables, a &lt;code&gt;f(Operation, ...)&lt;/code&gt; function should be defined (the function shown is exemplified with &lt;code&gt;f&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25740fde6714ee3452b2fe921ceac6c3a2af245b" translate="yes" xml:space="preserve">
          <source>For tables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e855e5f781e499b0d767d066a5aaccd4a38c33" translate="yes" xml:space="preserve">
          <source>For testing code that is strictly dependent on EUnit, it may be preferable to use the &lt;code&gt;EUNIT&lt;/code&gt; macro for this purpose, while for code that uses more generic testing conventions, using the &lt;code&gt;TEST&lt;/code&gt; macro may be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eaa3134cf1e4897b941600d7b8333c58d1a5540" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;FlagList&lt;/code&gt; options &lt;code&gt;call_count&lt;/code&gt; and &lt;code&gt;call_time&lt;/code&gt;: pauses the existing counters. The behavior is undefined for other &lt;code&gt;FlagList&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657913bfbbdb66eaa8be5bd6013033898317bc92" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;FlagList&lt;/code&gt; options &lt;code&gt;call_count&lt;/code&gt; and &lt;code&gt;call_time&lt;/code&gt;: restarts the existing counters. The behavior is undefined for other &lt;code&gt;FlagList&lt;/code&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781e9d09f9973d8076eb89148eef39f2df02d216" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;GUI&lt;/code&gt; specification the configuration was as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded40a6ea919b1bb6aca350aeb1fc0ce18927fdc" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;rename&lt;/code&gt; function, this option is &lt;code&gt;false&lt;/code&gt; by default. See &lt;code&gt;merge_sources/3&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a770afcc514e6b5f1d3afe741dc12c03c259661" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;rename&lt;/code&gt; function, this option is &lt;code&gt;true&lt;/code&gt; by default. See &lt;code&gt;merge_sources/3&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="976e9cfe5a571d99dbdc27999274cc6918176331" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;try&lt;/code&gt; expression variable scoping is limited so that variables bound in the expression are always 'unsafe' outside the expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c3e31f089354c2ea70e7b1dcd3b7e266aa74d0" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;utf8&lt;/code&gt;, &lt;code&gt;utf16&lt;/code&gt;, and &lt;code&gt;utf32&lt;/code&gt; types, &lt;code&gt;Size&lt;/code&gt; must not be given. The size of the segment is implicitly determined by the type and value itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415eb0303d79a7dd6da66613a75dd0fcadf8fba7" translate="yes" xml:space="preserve">
          <source>For the FOP print formatter, two steps must be taken:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1aa91b87b9fdd76b914a60411a084784480e0d" translate="yes" xml:space="preserve">
          <source>For the agent, a &lt;code&gt;write&lt;/code&gt;, means that all &lt;code&gt;set&lt;/code&gt; requests and their responses are stored. No &lt;code&gt;get&lt;/code&gt; requests or traps are stored in a &lt;code&gt;write&lt;/code&gt;. A &lt;code&gt;read_write&lt;/code&gt;, all requests, responses and traps are stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20126d6bc96d2526a0ea66d88e1dcca82c7307e0" translate="yes" xml:space="preserve">
          <source>For the agent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc8ab69f4e9554ac3c8401a966d5bbd79939033" translate="yes" xml:space="preserve">
          <source>For the application controller, all keys are optional. The respective default values are used for any omitted keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd38b1851fe2e244143b2e1792d15a3819fffc8" translate="yes" xml:space="preserve">
          <source>For the association specified by &lt;code&gt;assoc_id&lt;/code&gt;, &lt;code&gt;{IP,Port}&lt;/code&gt; must be one of the peer addresses. This option determines that the specified address is treated by the local SCTP stack as the primary address of the peer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c963bc2c695c51299e3bd0caee4278c5b8ef8e50" translate="yes" xml:space="preserve">
          <source>For the case where the release to upgrade from includes an earlier emulator version, &lt;code&gt;systools:make_relup&lt;/code&gt; creates a backwards compatible relup file. This means that all upgrade instructions are executed before the emulator is restarted. The new application code is therefore loaded into the old emulator. If the new code is compiled with the new emulator, there can be cases where the beam format has changed and beam files cannot be loaded. To overcome this problem, compile the new code with the old emulator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b5049972e1cb403743015932e9e76731e6317e" translate="yes" xml:space="preserve">
          <source>For the client, the option &lt;code&gt;{server_name_indication, atom_to_list(TargetNode)}&lt;/code&gt; is added when connecting. This makes it possible to use the client option &lt;code&gt;{verify, verify_peer}&lt;/code&gt;, and the client will verify that the certificate matches the node name you are connecting to. This only works if the the server certificate is issued to the name &lt;code&gt;atom_to_list(TargetNode)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf4babe249d804829c08eff9b506c2117402317f" translate="yes" xml:space="preserve">
          <source>For the definition of an I/O list, see &lt;code&gt;&lt;a href=&quot;#erl_iolist_to_binary&quot;&gt;erl_iolist_to_binary&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cec65c811aa56d1a69a7530bf3735b60a848393e" translate="yes" xml:space="preserve">
          <source>For the details of a state transition, see type &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74cb1e8336cdd1203d604b857e0c3d64d3dcd58" translate="yes" xml:space="preserve">
          <source>For the distribution to be started, give the emulator a name as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b04b529c4c47ecfdad5e9816546f9bfe4dbd018" translate="yes" xml:space="preserve">
          <source>For the employee table, the wild pattern looks as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6705039a1ae73b193bad5db51845c9d0529071" translate="yes" xml:space="preserve">
          <source>For the manager, a &lt;code&gt;write&lt;/code&gt;, means that all requests (&lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt;) and their responses are stored. No traps are stored in a &lt;code&gt;write&lt;/code&gt;. A &lt;code&gt;read_write&lt;/code&gt;, all requests, responses and traps are stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1fb0c931ba2b62d8db4b02922030a6e77f8a35" translate="yes" xml:space="preserve">
          <source>For the manager:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de91bb14893af33be8acff68c2671f153387239" translate="yes" xml:space="preserve">
          <source>For the message to be discarded all together, the function &lt;strong&gt;must&lt;/strong&gt; return &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f161aa1fc228360f225cc3ebe3f502657e04e96a" translate="yes" xml:space="preserve">
          <source>For the message to be discarded, the function &lt;strong&gt;must&lt;/strong&gt; return &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04a61b520d24ab5bfc2c769cbe978c234fd58eb" translate="yes" xml:space="preserve">
          <source>For the message to be rejected, the function &lt;strong&gt;must&lt;/strong&gt; return &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f3ba527ea67657133a671fe7e672ab532dc74a" translate="yes" xml:space="preserve">
          <source>For the moment, due to performance and semantic constraints, tables of type &lt;code&gt;bag&lt;/code&gt; are not yet supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40547b43d1437579f7f2fbfb9ec372b4477fb0f9" translate="yes" xml:space="preserve">
          <source>For the next command, it is assumed that &lt;code&gt;test1:loop(N)&lt;/code&gt; is defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1d37df1fe0ebea3267dd8b52d9c5721dbaeed2" translate="yes" xml:space="preserve">
          <source>For the optimization to be applied, &lt;strong&gt;all&lt;/strong&gt; the followings conditions must be true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3c58be690db85c80e97017d7e8fe7d15740947" translate="yes" xml:space="preserve">
          <source>For the overload protection algorithm to work properly, it is required that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3359a492abc19fe43648a6496640354c954d3fee" translate="yes" xml:space="preserve">
          <source>For the pdu to be discarded, the function &lt;strong&gt;must&lt;/strong&gt; return &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a0cc70782e01142bf96c2c85a9682267fa756a" translate="yes" xml:space="preserve">
          <source>For the pdu to be rejected, the function &lt;strong&gt;must&lt;/strong&gt; return &lt;strong&gt;false&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf817fa70ab975dd98ad08846fa5f2e0e3e1b7c" translate="yes" xml:space="preserve">
          <source>For the processes and nodes to run smoothly using the global group functionality, the following criteria must be met:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b9da61cf948a0fadddac960989480829c1fed7" translate="yes" xml:space="preserve">
          <source>For the purpose of managing &quot;virtual MG's&quot;, one Erlang node may host any number of MG's. In fact it may host a mix of MG's and MGC's. You may say that an Erlang node may host any number of &quot;users&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d6067db5ba4b9fc1718869f73b795bb80ec92a" translate="yes" xml:space="preserve">
          <source>For the sake of completeness, sticky write locks are also described here even if a sticky write lock is not supported by this function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f350ba1cda401eef3b8fd9dc64783a8a4dfc58" translate="yes" xml:space="preserve">
          <source>For the sake of readability, the name of the constant must always begin with an uppercase letter, or a &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, or &lt;code&gt;_&lt;/code&gt;. This means that it must always be single quoted (as the constant name is an atom, not text).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b40fa543a2baf51d80fc5dd6df775bcb9b18f8" translate="yes" xml:space="preserve">
          <source>For the server it is also possible to use the option &lt;code&gt;{verify, verify_peer}&lt;/code&gt; and the server will only accept client connections with certificates that are trusted by a root certificate that the server knows. A client that presents an untrusted certificate will be rejected. This option is preferably combined with &lt;code&gt;{fail_if_no_peer_cert, true}&lt;/code&gt; or a client will still be accepted if it does not present any certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c6a9a17f935a5963b2898b2ff66fee46f6f80f" translate="yes" xml:space="preserve">
          <source>For the tag commands to work it requires that you have generated a tag file. See &lt;code&gt;&lt;a href=&quot;erlang_mode_chapter#tags&quot;&gt;Erlang mode users guide&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837cf5b6f7b3dccbdb8e5961e46e7a100ffbcad7" translate="yes" xml:space="preserve">
          <source>For the tracing functionality, &lt;code&gt;dbg&lt;/code&gt; can be used instead of &lt;code&gt;ttb&lt;/code&gt; for setting trace flags on processes and trace patterns for call trace, that is, the functions &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;tp&lt;/code&gt;, &lt;code&gt;tpl&lt;/code&gt;, &lt;code&gt;ctp&lt;/code&gt;, &lt;code&gt;ctpl&lt;/code&gt;, and &lt;code&gt;ctpg&lt;/code&gt;. Only the following two things are added by &lt;code&gt;ttb&lt;/code&gt; for these functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c0d9c2d311ad55b5af2b645784a779be5c00e75" translate="yes" xml:space="preserve">
          <source>For the various options recognized by &lt;code&gt;table/1,2&lt;/code&gt; in respective module, see &lt;code&gt;&lt;a href=&quot;ets#table-1&quot;&gt;ets(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;dets#table-1&quot;&gt;dets(3)&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;mnesia(3)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b7737618ea804d2be5510c9255eff2cd6ce909" translate="yes" xml:space="preserve">
          <source>For this pattern, PCRE knows that any match must start with &quot;a&quot;, so the optimization skips along the subject to &quot;a&quot; before applying the pattern to the first set of data. The match attempt then succeeds. In the second call the &lt;code&gt;no_start_optimize&lt;/code&gt; disables the optimization that skips along to the first character. The pattern is now applied starting at &quot;x&quot;, and so the (*COMMIT) causes the match to fail without trying any other starting points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfcbf84449a65d4720ddd42fb6431e970ef4aea" translate="yes" xml:space="preserve">
          <source>For this reason, both built-in handlers offer the possibility to specify the maximum number of events to be handled within a certain time frame. With this burst control feature enabled, the handler can avoid choking the log with massive amounts of printouts. The configuration parameters are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2db23f2a353539845fba9c2a17d2e37195c29cf" translate="yes" xml:space="preserve">
          <source>For this task there are more than one way to go. The &quot;brute force&quot; method is to create the records you need and feed your data in the content and attribute fields of the appropriate element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb85af40e993dbf85d078383d75ba2ce59dd5da" translate="yes" xml:space="preserve">
          <source>For this to work, the configuration file must at least contain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0a9d32a308f37da96ee8803de971799715a2ff" translate="yes" xml:space="preserve">
          <source>For those people who want to do general tracing, consult the &lt;code&gt;dbg&lt;/code&gt; module on how to trace whatever you're interested in and let it work its magic. If you just want &lt;code&gt;et:trace_me/5&lt;/code&gt; to work, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5638eec9e2bcdb89a7f95debb9559d23cd39e26" translate="yes" xml:space="preserve">
          <source>For trace type &lt;code&gt;file&lt;/code&gt;, the pseudo trace message &lt;code&gt;end_of_trace&lt;/code&gt; will appear at the end of the trace. The return value from the handler function is in this case ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2d66796b6d2cdd73f0947660b9a91b008b4526" translate="yes" xml:space="preserve">
          <source>For tuple literals in the match specification, double tuple parentheses can also be used, that is, construct them as a tuple of arity one containing a single tuple, which is the one to be constructed. The &quot;double tuple parenthesis&quot; syntax is useful to construct tuples from already bound variables, like in &lt;code&gt;{{'$1', [a,b,'$2']}}&lt;/code&gt;. Examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454d5ff25287ab1005f049a17a00fd893227fb6e" translate="yes" xml:space="preserve">
          <source>For type &lt;code&gt;seqpacket&lt;/code&gt;, sockets (the default) &lt;code&gt;IsServer&lt;/code&gt; must be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. In contrast to TCP, there is no listening queue length in SCTP. If &lt;code&gt;IsServer&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the socket accepts new associations, that is, it becomes an SCTP server socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e6004f54351e38274f9c33d54d73067f0291d8" translate="yes" xml:space="preserve">
          <source>For type &lt;code&gt;stream&lt;/code&gt;, sockets Backlog define the backlog queue length just like in TCP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778da3033a79d782fe8e9249e11113bf441f60b1" translate="yes" xml:space="preserve">
          <source>For valid options, see the &lt;code&gt;inet(3)&lt;/code&gt;, &lt;code&gt;gen_tcp(3)&lt;/code&gt; and &lt;code&gt;gen_udp(3)&lt;/code&gt; manual pages in Kernel. Note that stream oriented options such as packet are only relevant for SSL/TLS and not DTLS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439152868f6e813df4d4032de89b734385859b69" translate="yes" xml:space="preserve">
          <source>For valid properties, see &lt;code&gt;&lt;a href=&quot;httpc&quot;&gt;httpc(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70731c98dc1b2ae27b5e8671226f55ff51f34843" translate="yes" xml:space="preserve">
          <source>For various reasons, you can sometimes have a list of UTF-8 bytes. This is not a regular string of Unicode characters, as each list element does not contain one character. Instead you get the &quot;raw&quot; UTF-8 encoding that you have in binaries. This is easily converted to a proper Unicode string by first converting byte per byte into a binary, and then converting the binary of UTF-8 encoded characters back to a Unicode string:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234d715a096a1944d8ef43e9f1115b8486c999fe" translate="yes" xml:space="preserve">
          <source>For wrap logs, parameter &lt;code&gt;Size&lt;/code&gt; can be a pair &lt;code&gt;{MaxNoBytes, MaxNoFiles}&lt;/code&gt; or &lt;code&gt;infinity&lt;/code&gt;. In the latter case, if the files of an existing wrap log with the same name can be found, the size is read from the existing wrap log, otherwise an error is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9608fcc3166fa9c80f89643b6c29eeca02b40c2" translate="yes" xml:space="preserve">
          <source>For wrap logs, this is the base name of the files. Each file in a wrap log is called &lt;code&gt;&amp;lt;base_name&amp;gt;.N&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer. Each wrap log also has two files called &lt;code&gt;&amp;lt;base_name&amp;gt;.idx&lt;/code&gt; and &lt;code&gt;&amp;lt;base_name&amp;gt;.siz&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17fb1dbfe582d300c8f15233c31311e8015bfd18" translate="yes" xml:space="preserve">
          <source>Forces &lt;code&gt;ct_telnet&lt;/code&gt; to wait until the prompt string is received before returning (even if a pattern has already been matched). This is equal to calling &lt;code&gt;expect(Conn, Patterns++[{prompt,Prompt}], [sequence|Opts])&lt;/code&gt;. Notice that option &lt;code&gt;idle_timeout&lt;/code&gt; and &lt;code&gt;total_timeout&lt;/code&gt; can abort the operation of waiting for prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05d9650fe96b8e82a1df796cd9f1a273ddfedb3" translate="yes" xml:space="preserve">
          <source>Forces ETS memory block to be moved on realloc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5989f0289b313b87aa33baad990569eddc04e7a" translate="yes" xml:space="preserve">
          <source>Forces a line break at the end of the given document. This is a utility function; see &lt;code&gt;&lt;a href=&quot;#empty-0&quot;&gt;empty/0&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07489631804ddf1c6e703df18a8ea8eb7dd49f75" translate="yes" xml:space="preserve">
          <source>Forces an immediate garbage collection of the executing process. The function is not to be used unless it has been noticed (or there are good reasons to suspect) that the spontaneous garbage collection will occur too late or not at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ef43775eadbd78db9d57c7aa7588aaf87e32163" translate="yes" xml:space="preserve">
          <source>Forces killing of all ports opened using this driver, with exit reason &lt;code&gt;driver_unloaded&lt;/code&gt;, if you are the &lt;strong&gt;last&lt;/strong&gt;&lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82bc9f6b32e4c73986170b63502045291178523" translate="yes" xml:space="preserve">
          <source>Forces option &lt;code&gt;compressed&lt;/code&gt; on all ETS tables. Only intended for test and evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2259927426e13c75dcdd2c6b84edf53f57b1ecb" translate="yes" xml:space="preserve">
          <source>Forces termination of the session associated with the supplied session Id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5bf5789dde7373724874c65a12c156bc9c3ab1f" translate="yes" xml:space="preserve">
          <source>Forces the disconnection of a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa138ca78ba6a2505a4eae3ae3ac47eabfa7ed8" translate="yes" xml:space="preserve">
          <source>Forces the disconnection of a node. This appears to the node &lt;code&gt;Node&lt;/code&gt; as if the local node has crashed. This BIF is mainly used in the Erlang network authentication protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a562b54231032065ba2fd83d2ae82d45491b7c7" translate="yes" xml:space="preserve">
          <source>Forces the internally formatted disk log to start logging to the next log file. It can be used, for example, with &lt;code&gt;change_size/2&lt;/code&gt; to reduce the amount of disk space allocated by the disk log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcc08658132f64e737bfe39a8d559ce53626671" translate="yes" xml:space="preserve">
          <source>Forcibly unregisters a live node from the &lt;code&gt;epmd&lt;/code&gt; database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55550d89e7ca43740394fa9c2e706f8405aa15d0" translate="yes" xml:space="preserve">
          <source>Form feed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4202e6026040a279c41beb16cb2d4677f9c00539" translate="yes" xml:space="preserve">
          <source>Form feed (FF)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5b48ee938123a220cee3edcb714468080ac410" translate="yes" xml:space="preserve">
          <source>Form feed (hex 0C)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e800377664e95efa94b81ef0de4f9fd99206ba" translate="yes" xml:space="preserve">
          <source>Form feed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f7f36aed74fc7676ed5e5501a47f8ed45f74c8" translate="yes" xml:space="preserve">
          <source>Formally, a list is either the empty list &lt;code&gt;[]&lt;/code&gt; or consists of a &lt;strong&gt;head&lt;/strong&gt; (first element) and a &lt;strong&gt;tail&lt;/strong&gt; (remainder of the list). The &lt;strong&gt;tail&lt;/strong&gt; is also a list. The latter can be expressed as &lt;code&gt;[H|T]&lt;/code&gt;. The notation &lt;code&gt;[Term1,...,TermN]&lt;/code&gt; above is equivalent with the list &lt;code&gt;[Term1|[...|[TermN|[]]]]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec67bbeae1e569f244aa6e9df47405dcb8af714" translate="yes" xml:space="preserve">
          <source>Format binary trace logs and merge logs from multiple nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d30c70d406dca19904c1095384cda4603ef029" translate="yes" xml:space="preserve">
          <source>Format only the first log:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fceea87237d34f61d2d5f7eea107f3c324a39f1c" translate="yes" xml:space="preserve">
          <source>Format the whole set of logs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae04efcbb41bb316ecf323dedc96a05a656591e1" translate="yes" xml:space="preserve">
          <source>Formats a term, given as a string, to a buffer. Works like a sprintf for Erlang terms. &lt;code&gt;fmt&lt;/code&gt; contains a format string, with arguments like &lt;code&gt;~d&lt;/code&gt;, to insert terms from variables. The following formats are supported (with the C types given):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f29dab50e0bda3d6a11c8c1622b14910c979e6" translate="yes" xml:space="preserve">
          <source>Formats error descriptions to human readable strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0412830585ef462f09e9b96d72b97a2134aa9e34" translate="yes" xml:space="preserve">
          <source>Formatted exactly as it would be in the NT eventlog viewer. Binary data is not imported into Erlang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f50ef30631433a9a987cfecc913b3083f582ea9" translate="yes" xml:space="preserve">
          <source>Formatting can be done automatically when stopping &lt;code&gt;ttb&lt;/code&gt; (see section &lt;code&gt;&lt;a href=&quot;#fetch_format&quot;&gt;Automatically Collect and Format Logs from All Nodes&lt;/a&gt;&lt;/code&gt;), or explicitly by calling function &lt;code&gt;ttb:format/1,2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ed2d91e52cb42e64465488ff1368b51116d2f4" translate="yes" xml:space="preserve">
          <source>Formatting means to read a binary log and present it in a readable format. You can use the default format handler in &lt;code&gt;ttb&lt;/code&gt; to present each trace message as a line of text, or write your own handler to make more complex interpretations of the trace information. You can also use application ET to present the trace log graphically (see section &lt;code&gt;&lt;a href=&quot;#et_viewer&quot;&gt;Presenting Trace Logs with Event Tracer&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bb1c669abc5a91fef17e14af397d67340b7fa0" translate="yes" xml:space="preserve">
          <source>Fortunately most of the new API can easily be implemented using existing primitives, except for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c3f22873ad566ce1d8e72dd2687b70c4871f70" translate="yes" xml:space="preserve">
          <source>Fortunately, most textual data has been stored in lists and range checking has been sparse, so modules like &lt;code&gt;string&lt;/code&gt; work well for Unicode strings with little need for conversion or extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8642908d39e02e8b23307335fe8b4dfcaea7764d" translate="yes" xml:space="preserve">
          <source>Forward character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9ec7d20792f55279f3e159c62fa6e1bce4b477" translate="yes" xml:space="preserve">
          <source>Forward word</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01646d029f193757589bf0940cc3fc2ce52665f8" translate="yes" xml:space="preserve">
          <source>Four Erlang nodes are started up: messenger@super, c1@bilbo, c2@kosken, c3@gollum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d07ea7048ebd1bcdc09a12834b5f914b717add" translate="yes" xml:space="preserve">
          <source>Four predefined system events are used when a process receives or sends a message. The process can also define its own system events. It is always up to the process itself to format these events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1a2920ed984bae4697f6608e05fb16c897210f" translate="yes" xml:space="preserve">
          <source>Four types of binary objects are available internally:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59abfa012ca3487335f585929141f8c51a5b0937" translate="yes" xml:space="preserve">
          <source>Four-per-em space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476edba26218dffb640454b86f2f568c99a42f2c" translate="yes" xml:space="preserve">
          <source>Fprof can also skip the file step and trace to a tracer process of its own that does the profiling in runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21910465569417c930792d44773042faa4425053" translate="yes" xml:space="preserve">
          <source>Fred receives the message and sends a message to Peter and logs off:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c871a32dd4438727d0ae0aa1bebc57c8fcd0acf9" translate="yes" xml:space="preserve">
          <source>Fred's client receives the message and prints it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231386071f70fc028ff8d982625c940665bdcc43" translate="yes" xml:space="preserve">
          <source>FreeBSD 8.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78b1db612cb29c31f363b7aaeabcea296320d46" translate="yes" xml:space="preserve">
          <source>FreeBSD 9.0 and 10.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b413800cf536ea4d944699aaf5cdb33c983c61e4" translate="yes" xml:space="preserve">
          <source>FreeBSD: FreeBSD 6.1 and 6.2 in 32-bit and 64-bit modes should work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9c4f713cd566ead2b669dd7ef17d51fc4fc061" translate="yes" xml:space="preserve">
          <source>Frees a driver binary &lt;code&gt;bin&lt;/code&gt;, allocated previously with &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt;driver_alloc_binary&lt;/a&gt;&lt;/code&gt;. As binaries in Erlang are reference counted, the binary can still be around.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11ae97911f918f9512480c476768dcf762a425f" translate="yes" xml:space="preserve">
          <source>Frees all terms in an environment and clears it for reuse. The environment must have been allocated with &lt;code&gt;&lt;a href=&quot;#enif_alloc_env&quot;&gt;enif_alloc_env&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae9d343f591774c0e5cdb22c7f5dc5b7629dc82" translate="yes" xml:space="preserve">
          <source>Frees an &lt;code&gt;ei_x_buff&lt;/code&gt; buffer. The memory used by the buffer is returned to the OS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a43e1e88866cd0fb113d41ed1f043cc7c962e4" translate="yes" xml:space="preserve">
          <source>Frees an Erlang term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4dc64d30da551c50aad4eab3508625e110b6ba" translate="yes" xml:space="preserve">
          <source>Frees an array of Erlang terms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cbc489b317adf34485b1638390917aa92e5c42" translate="yes" xml:space="preserve">
          <source>Frees an environment allocated with &lt;code&gt;&lt;a href=&quot;#enif_alloc_env&quot;&gt;enif_alloc_env&lt;/a&gt;&lt;/code&gt;. All terms created in the environment are freed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9462b1162db2b6f0ae0d8f2ec712a6111abc1f9f" translate="yes" xml:space="preserve">
          <source>Frees an io vector returned from &lt;code&gt;&lt;a href=&quot;#enif_inspect_iovec&quot;&gt;enif_inspect_iovec&lt;/a&gt;&lt;/code&gt;. This is needed only if a &lt;code&gt;NULL&lt;/code&gt; environment is passed to &lt;code&gt;&lt;a href=&quot;#enif_inspect_iovec&quot;&gt;enif_inspect_iovec&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183833dab199e50758b72d97aea87af8dc575d81" translate="yes" xml:space="preserve">
          <source>Frees memory allocated by &lt;code&gt;&lt;a href=&quot;#enif_alloc&quot;&gt;enif_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90a2eaf071a91919ce2047270c91bc93404a4d9" translate="yes" xml:space="preserve">
          <source>Frees the memory pointed to by &lt;code&gt;ptr&lt;/code&gt;. The memory is to have been allocated with &lt;code&gt;driver_alloc&lt;/code&gt;. All allocated memory is to be deallocated, only once. There is no garbage collection in drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbdd5a13354246abed62ad0de119285b6ef8494" translate="yes" xml:space="preserve">
          <source>From Erlang 5.1/OTP R8B, a value to all fields in a record can be set with the special field &lt;code&gt;_&lt;/code&gt;. &lt;code&gt;_&lt;/code&gt; means &quot;all fields not explicitly specified&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf9e0c347a66f4008a8123cba4cd72f36435dae" translate="yes" xml:space="preserve">
          <source>From Erlang's point of view, the C node is treated like a normal Erlang node. Thus, calling the functions &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; only involves sending a message to the C node asking for the function to be called, and receiving the result. Sending a message requires a recipient, that is, a process that can be defined using either a pid or a tuple, consisting of a registered name and a node name. In this case, a tuple is the only alternative as no pid is known:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a062b6a69dba0792c50eecd50eb57b05c124959" translate="yes" xml:space="preserve">
          <source>From Erlang/OTP 20, atoms and function names are also allowed to contain Unicode characters outside the ISO-Latin-1 range. Module names, application names, and node names are still restricted to the ISO-Latin-1 range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e70df4c9b90f0920489959ddf830cb66d704b8a" translate="yes" xml:space="preserve">
          <source>From Erlang/OTP R13A, &lt;code&gt;Expr2&lt;/code&gt; is no longer required to evaluate to a Boolean value. As a consequence, &lt;code&gt;andalso&lt;/code&gt; and &lt;code&gt;orelse&lt;/code&gt; are now tail-recursive. For instance, the following function is tail-recursive in Erlang/OTP R13A and later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fbca6926b89cb364d57ee5f0655f87ef264741b" translate="yes" xml:space="preserve">
          <source>From OTP R15, an emulator upgrade is performed by restarting the emulator with new versions of the core applications (Kernel, STDLIB, and SASL) before loading code and running upgrade instruction for other applications. For this to work, the release to upgrade from must include OTP R15 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6038a26dc2018c9a1f7a524e8e3edad7002c75d5" translate="yes" xml:space="preserve">
          <source>From OTP R16 the &lt;strong&gt;numeric version&lt;/strong&gt; represents the version of the OpenSSL &lt;strong&gt;header files&lt;/strong&gt; (&lt;code&gt;openssl/opensslv.h&lt;/code&gt;) used when crypto was compiled. The text variant represents the OpenSSL library used at runtime. In earlier OTP versions both numeric and text was taken from the library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5355e1fbcc2277e9d9898f3f71616845e052b1c" translate="yes" xml:space="preserve">
          <source>From a normal shell session, call function &lt;code&gt;&lt;a href=&quot;#start_restricted-1&quot;&gt;start_restricted/1&lt;/a&gt;&lt;/code&gt;. This exits the current evaluator and starts a new one in restricted mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43a832e8f19ed35666bd1d6fa07c023a93ab99a" translate="yes" xml:space="preserve">
          <source>From a security perspective this option makes the server very vulnerable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01dbce866b260b16436733033704645b12eaba0a" translate="yes" xml:space="preserve">
          <source>From a set of candidate nodes determines which of them is running the application &lt;code&gt;App&lt;/code&gt;. If none of the candidate nodes is running &lt;code&gt;App&lt;/code&gt;, the function makes the test case calling this function to fail. This function is the same as calling &lt;code&gt;app_node(App, Candidates, true)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d92444c0f7f28dc5fef0f132ab38eda622eaff" translate="yes" xml:space="preserve">
          <source>From actor, such as sender of a message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18821dcf229cd6f32fd467b59121c70ca7d35c00" translate="yes" xml:space="preserve">
          <source>From an Attach Process window, you can interact with a debugged process. One window is opened for each process that has been attached to. Notice that when attaching to a process, its execution is automatically stopped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0b17199160488872f436fe5e499ca3811182e8" translate="yes" xml:space="preserve">
          <source>From an Erlang perspective, it is preferable to be able to call &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; without having to bother about that they are C functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2385dbad2d7198673d6a88bf76009a866e55b6" translate="yes" xml:space="preserve">
          <source>From tabs displaying lists of items, for example, the &lt;strong&gt;Processes&lt;/strong&gt; tab or the &lt;strong&gt;Ports&lt;/strong&gt; tab, a new window with more information can be opened by double-clicking a row or by right- clicking the row and selecting an item from the drop-down menu. The new window is called a detail window. Detail windows can be opened for processes, ports, nodes, and modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88695221d9d45a1075dad00213edf3f87c9a63f7" translate="yes" xml:space="preserve">
          <source>From the &lt;code&gt;control&lt;/code&gt; callback, a binary can be returned if &lt;code&gt;set_port_control_flags()&lt;/code&gt; has been called with the flag value &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7539bbfabae228fb6338a3f0c6b2635a1af58307" translate="yes" xml:space="preserve">
          <source>From the Erlang shell:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ec971914f4bcb68239243db5e4052187d7c575" translate="yes" xml:space="preserve">
          <source>From the GUI you can run tests and view the result and the logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c113fd88f06e2b1fd02eea5fdf5c2705d151308" translate="yes" xml:space="preserve">
          <source>From the TLS RFC: &quot;A TLS session is an association between a client and a server. Sessions are created by the handshake protocol. Sessions define a set of cryptographic security parameters, which can be shared among multiple connections. Sessions are used to avoid the expensive negotiation of new security parameters for each connection.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0954694c6cc16fddb2598af944517c2eacf11e60" translate="yes" xml:space="preserve">
          <source>From the files &lt;code&gt;mysystem.rel&lt;/code&gt; and &lt;code&gt;plain.rel&lt;/code&gt; creates the files &lt;code&gt;mysystem.script&lt;/code&gt;, &lt;code&gt;mysystem.boot&lt;/code&gt;, &lt;code&gt;plain.script&lt;/code&gt;, and &lt;code&gt;plain.boot&lt;/code&gt; through a call to &lt;code&gt;systools:make_script/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef571ccc537e0ebcf5abc08d5fcbc4354cd2e13" translate="yes" xml:space="preserve">
          <source>From this mode, all test case support functions can be executed directly from the Erlang shell. The interactive mode can also be started from the OS command line with &lt;code&gt;ct_run -shell [-config File...]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85ede8c374fad93c75b87cf1d0ab93277813131" translate="yes" xml:space="preserve">
          <source>From this, the following annotation is derived:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9084657a780dcb6630711e210f20a9abf03abf2b" translate="yes" xml:space="preserve">
          <source>Ftp client service start/stop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e57658a5434ee2c00cbb68e3cf586c6c01ffb4" translate="yes" xml:space="preserve">
          <source>Full Headers: Small (minimum requirement), Medium (with fields for basic information about the module), and Large Header (medium header with some extra layout structure).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3823712b80ea0cb75ff26b117d7d6397ec16c0" translate="yes" xml:space="preserve">
          <source>Full file table (for the entire OS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b9338d219fffeb7572389130870db385983296" translate="yes" xml:space="preserve">
          <source>Full version 3. Including segmentation. This is the default version 3 variant (i.e. if a version 3 messages is to be encoded/decoded and no version3 encoding config is found, then v3 is assumed).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f941ab65fbabe87f41cd73c9136f5a4c97087e8" translate="yes" xml:space="preserve">
          <source>Fun</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd99e39840d406c91493e0d976f070cc2ea920d" translate="yes" xml:space="preserve">
          <source>FunSpec ::= Module &lt;code&gt;:&lt;/code&gt; Function &lt;code&gt;/&lt;/code&gt; Arity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de23577bf9223f4f9d36ec83aac022759ad7dcf" translate="yes" xml:space="preserve">
          <source>Function ::= Atom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a891615f603dde0aef5b9bdd72f46ffd7baad89" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;&lt;a href=&quot;#parse_address-1&quot;&gt;parse_address/1&lt;/a&gt;&lt;/code&gt; can be useful:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01645428a290cbcd64336c3ca8a77b7808481ca2" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2,3&lt;/a&gt;&lt;/code&gt; is not secure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0338fc0994b143d0358d58d40a62ab77365e6bfd" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;&lt;a href=&quot;#terminate_child-2&quot;&gt;terminate_child/2&lt;/a&gt;&lt;/code&gt; can be used for children under &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisors by specifying the child's &lt;code&gt;pid()&lt;/code&gt; as the second argument. If instead the child specification identifier is used, &lt;code&gt;terminate_child/2&lt;/code&gt; return &lt;code&gt;{error,simple_one_for_one}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a007558a83328311a21f6b34b7f1ca919c07b71f" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;&lt;a href=&quot;common_test#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; can, for example, be used in a test suite module to set a default &lt;code&gt;timetrap&lt;/code&gt; value and to &lt;code&gt;require&lt;/code&gt; external configuration data. If a test case, or a group information function also specifies any of the information tags, it overrides the default values set by &lt;code&gt;suite/0&lt;/code&gt;. For details, see &lt;code&gt;&lt;a href=&quot;#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce26c23629bc083f209e69729eb13221165e9e1" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;Module:callback_mode/0&lt;/code&gt; selects the &lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt;CallbackMode&lt;/a&gt;&lt;/code&gt; for the callback module, in this case &lt;code&gt;state_functions&lt;/code&gt;. That is, each state has got its own handler function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dab0298c1fa2b8ffd8494a08a5d6ee970c3f344" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;Resolve&lt;/code&gt; has the same behavior as in &lt;code&gt;&lt;a href=&quot;#register_name-2&quot;&gt;register_name/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6eb2e463fb3a93e8b68600ab9bdb3f58ee57038" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;StateFun&lt;/code&gt; provides a new state for the process. Argument &lt;code&gt;State&lt;/code&gt; and the &lt;code&gt;NewState&lt;/code&gt; return value of &lt;code&gt;StateFun&lt;/code&gt; vary for different types of processes as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2dd189083208643c31c579ccb4b516ebe6e004e" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;end_per_testcase/2&lt;/code&gt; is even called if a test case terminates because of a call to &lt;code&gt;&lt;a href=&quot;ct#abort_current_testcase-1&quot;&gt;ct:abort_current_testcase/1&lt;/a&gt;&lt;/code&gt;, or after a timetrap time-out. However, &lt;code&gt;end_per_testcase&lt;/code&gt; then executes on a different process than the test case function. In this situation, &lt;code&gt;end_per_testcase&lt;/code&gt; cannot change the reason for test case termination by returning &lt;code&gt;{fail,Reason}&lt;/code&gt; or save data with &lt;code&gt;{save_config,Data}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fa0ff2fa5c392a119333455ce4fde95868a0d2" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;etop:config/2&lt;/code&gt; is called to change the number of showed lines to 5:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96d74b9f50eda503e654615637404d94ff14834b" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;ets:test_ms/2&amp;gt;&lt;/code&gt; can be useful for testing complicated ETS matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6896bef646f61519a407bad611289975237ebd17" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;fetch/2&lt;/code&gt; is to be used if the key is known to be in the dictionary, otherwise function &lt;code&gt;find/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a868331f4dff2e443947e63a74b30a9d1a2bddb1" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;fetch&lt;/code&gt; is to be used if the key is known to be in the dictionary, otherwise function &lt;code&gt;find&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606f437fcbd896955cc7ddfd14d16259728a0dcb" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;gen_statem:start_link&lt;/code&gt; is synchronous. It does not return until the &lt;code&gt;gen_statem&lt;/code&gt; is initialized and is ready to receive events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bd7b9952ee3b690f5d31b6df403e0eaaef70c7" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;gen_statem:start_link&lt;/code&gt; must be used if the &lt;code&gt;gen_statem&lt;/code&gt; is part of a supervision tree, that is, started by a supervisor. Another function, &lt;code&gt;gen_statem:start&lt;/code&gt; can be used to start a standalone &lt;code&gt;gen_statem&lt;/code&gt;, that is, a &lt;code&gt;gen_statem&lt;/code&gt; that is not part of a supervision tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfde5a6eefc23664041d29bc2692d0dff420113" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;init_ack/1&lt;/code&gt; uses the parent value previously stored by the start function used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f5d11f2493bedb5e9334005015885767ba9d82" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;io_lib:format/2&lt;/code&gt; behaves similarly. It is defined to return a deep list of characters and the output can easily be converted to binary data for outputting on any device by a simple &lt;code&gt;erlang:list_to_binary/1&lt;/code&gt;. When the translation modifier is used, the list can, however, contain characters that cannot be stored in one byte. The call to &lt;code&gt;erlang:list_to_binary/1&lt;/code&gt; then fails. However, if the I/O server you want to communicate with is Unicode-aware, the returned list can still be used directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9176c91e340ff5559d2242d48821467cbef3e269" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;start/1&lt;/code&gt; starts &lt;code&gt;rb_server&lt;/code&gt; with the specified options, whereas function &lt;code&gt;start/0&lt;/code&gt; starts with default options. &lt;code&gt;rb_server&lt;/code&gt; must be started before reports can be browsed. When &lt;code&gt;rb_server&lt;/code&gt; is started, the files in the specified directory are scanned. The other functions assume that the server has started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94cd3c7d5c960a10a42b0c6c6403863b5286d3d4" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;system_get_state/1&lt;/code&gt; is primarily useful for user-defined behaviors and modules that implement OTP &lt;code&gt;&lt;a href=&quot;#special_process&quot;&gt;special processes&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;gen_server&lt;/code&gt;, &lt;code&gt;gen_statem&lt;/code&gt;, and &lt;code&gt;gen_event&lt;/code&gt; OTP behavior modules export this function, so callback modules for those behaviors need not to supply their own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd647b7bf68817f403e375540ab6dd93b4caf1fb" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;system_replace_state/2&lt;/code&gt; is primarily useful for user-defined behaviors and modules that implement OTP &lt;code&gt;&lt;a href=&quot;#special_process&quot;&gt;special processes&lt;/a&gt;&lt;/code&gt;. The OTP behavior modules &lt;code&gt;gen_server&lt;/code&gt;, &lt;code&gt;gen_statem&lt;/code&gt;, and &lt;code&gt;gen_event&lt;/code&gt; export this function, so callback modules for those behaviors need not to supply their own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1886a4885b84597d03d7ef29613557edf6c711" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;unicode:bom_to_encoding/1&lt;/code&gt; identifies the encoding from a binary of at least four bytes. It returns, along with a term suitable for setting the encoding of the file, the byte length of the BOM, so that the file position can be set accordingly. Notice that function &lt;code&gt;file:position/2&lt;/code&gt; always works on byte-offsets, so that the byte length of the BOM is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a605a56e2cdcdebd5e329a93e319622341b36f7" translate="yes" xml:space="preserve">
          <source>Function arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dd4d7e60b7d18a4680a9c3791a955ac7d5eab38" translate="yes" xml:space="preserve">
          <source>Function arguments and return values are represented as values of type &lt;code&gt;ERL_NIF_TERM&lt;/code&gt;. Here, functions like &lt;code&gt;enif_get_int&lt;/code&gt; and &lt;code&gt;enif_make_int&lt;/code&gt; are used to convert between Erlang term and C-type. If the function argument &lt;code&gt;argv[0]&lt;/code&gt; is not an integer, &lt;code&gt;enif_get_int&lt;/code&gt; returns false, in which case it returns by throwing a &lt;code&gt;badarg&lt;/code&gt;-exception with &lt;code&gt;enif_make_badarg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae6f0da074db8970663a47d359b621f357a61764" translate="yes" xml:space="preserve">
          <source>Function call, where &lt;code&gt;N&lt;/code&gt; is the call level and &lt;code&gt;L&lt;/code&gt; the line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1473376a390a40a1bb5f714ce2df4b0c5a2ef9eb" translate="yes" xml:space="preserve">
          <source>Function for adding comments to the HTML overview page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcca31f003471c15216d10a16a200af2eb90d880" translate="yes" xml:space="preserve">
          <source>Function for terminating a test case with error reason</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379761cf02656733d9f5d2cac656258178fdc884" translate="yes" xml:space="preserve">
          <source>Function return value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a73fe745fcee9e3cdb003e43fad2cf2e88e5e4c" translate="yes" xml:space="preserve">
          <source>Function to accumulate and normalize whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae7560f662307c5af73c32d5a45cc140de180ad1" translate="yes" xml:space="preserve">
          <source>Function to control applications in a distributed manner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349710e0cbd339836d9dd15ef76164abfe20f4c5" translate="yes" xml:space="preserve">
          <source>FunctionName = {atom(), integer()}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9027a434a1ae83e69e062692cc1fc4a7bc846c" translate="yes" xml:space="preserve">
          <source>Functional, extendible arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765683b35251bb41817c5d8a33261b028fd5cbe7" translate="yes" xml:space="preserve">
          <source>Functional, extendible arrays. Arrays can have fixed size, or can grow automatically as needed. A default value is used for entries that have not been explicitly set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae06688b7a9f92238bd18a3741ca7adc4fb86072" translate="yes" xml:space="preserve">
          <source>Functionality common for many test case functions can be implemented in common help functions. If these functions are useful for test cases across suites, put the help functions into common help modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61e71940eb6aae664b22906ce497f7ad68a0bca" translate="yes" xml:space="preserve">
          <source>Functionality in this module generally assumes valid input and does not necessarily fail on input that does not use a valid encoding, but may instead very likely produce invalid output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d843049d24fea44feaf347c9c7ef28933fcfeb5" translate="yes" xml:space="preserve">
          <source>Functionality is deprecated when new functionality is introduced that is preferred to be used instead of the old functionality that is being deprecated. The deprecation does &lt;strong&gt;not&lt;/strong&gt; imply removal of the functionality unless an upcoming removal is explicitly stated in the deprecation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8592cef0a9eb94448b3abaabfc5effd65afb5210" translate="yes" xml:space="preserve">
          <source>Functions (*).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="914e8e5deccb7e7258c5729347280fdcd3ec611d" translate="yes" xml:space="preserve">
          <source>Functions &lt;code&gt;&lt;a href=&quot;#delete_child-2&quot;&gt;delete_child/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#restart_child-2&quot;&gt;restart_child/2&lt;/a&gt;&lt;/code&gt; are invalid for &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisors and return &lt;code&gt;{error,simple_one_for_one}&lt;/code&gt; if the specified supervisor uses this restart strategy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9d4c0ae746fec81fe95971708ec71a3f1f0f56b" translate="yes" xml:space="preserve">
          <source>Functions &lt;code&gt;append/3&lt;/code&gt; and &lt;code&gt;append_list/3&lt;/code&gt; are included so that keyed values can be stored in a list &lt;strong&gt;accumulator&lt;/strong&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5919d40bc6f8760ddfdadec5c826f96db49bccf0" translate="yes" xml:space="preserve">
          <source>Functions &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;append_list&lt;/code&gt; are included so that keyed values can be stored in a list &lt;strong&gt;accumulator&lt;/strong&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8018594d7bf82df5fe0b72237035ac8100b5a47d" translate="yes" xml:space="preserve">
          <source>Functions = [{FunctionName, {ModuleName, FunctionName}}]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7877b54dc579881cc402d2e36ffecd20f0c00ce1" translate="yes" xml:space="preserve">
          <source>Functions are provided for using another file structure than the structure defined in OTP. These functions can be used to test a release upgrade locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb4df55b69f714685bc601a52089cb538566e9e" translate="yes" xml:space="preserve">
          <source>Functions are provided to set and clear alarms. The alarm format is defined by the user. For example, an event handler for SNMP can be defined, together with an alarm Management Information Base (MIB).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601a62e44013ea4cc9f163af52dcb57edeca6af3" translate="yes" xml:space="preserve">
          <source>Functions can be specified as either all in the system, all in one module, all arities of one function, one function, or all functions in all modules not yet loaded. As for now, BIFs cannot be call count traced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c4aaccbbc318df480e8b7e892de066b9e78a295" translate="yes" xml:space="preserve">
          <source>Functions for Erlang term construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9734847357d6c57d3b8a47c1476d6e25b9babc93" translate="yes" xml:space="preserve">
          <source>Functions for Reporting SNMP Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597e4923b2bf20f58219c48cd231ad778cb3f8b4" translate="yes" xml:space="preserve">
          <source>Functions for Reporting SNMP Errors on stdio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc43f40fec9367985ba28eb42680d87f31491eb" translate="yes" xml:space="preserve">
          <source>Functions for Reporting SNMP Errors through the error_logger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41e664df0c80b47478291a0a4125139f728d60b" translate="yes" xml:space="preserve">
          <source>Functions for asynchronous and synchronous start of processes adhering to the OTP design principles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699267b03ae0cf471fbaedce463a147af4ec15ff" translate="yes" xml:space="preserve">
          <source>Functions for communicating with sockets using the SCTP protocol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a25fe4869c1bfaaa1258115ab8561dbfbc601b" translate="yes" xml:space="preserve">
          <source>Functions for converting Unicode characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365aff387339bbd957187d48f5338867261bcde0" translate="yes" xml:space="preserve">
          <source>Functions for exporting XML data to an external format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd05358ab19f34abded06c41194def3d16feb53f" translate="yes" xml:space="preserve">
          <source>Functions for loading and unloading the OTP-OS-MON-MIB into/from an SNMP agent. The instrumentation of the OTP-OS-MON-MIB uses Mnesia, hence Mnesia must be started prior to loading the OTP-OS-MON-MIB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7917583d40e71377fa5719f8037c9ede1c2480" translate="yes" xml:space="preserve">
          <source>Functions for manipulating sets as ordered lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b7ba0ad2196e2794f74664d08addd6e1364d78" translate="yes" xml:space="preserve">
          <source>Functions for manipulating sets of sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aad44ca7670e0df98ff019dba705cdf4c0c814" translate="yes" xml:space="preserve">
          <source>Functions for printing and logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a78df0a41921110836d1ab81b9a751ad6669a0a" translate="yes" xml:space="preserve">
          <source>Functions for reading comment lines from Erlang source code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1981262d962dbafc467ad0d596a8317803f57309" translate="yes" xml:space="preserve">
          <source>Functions for reading configuration data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5b30a64eeeba73330937b8552d5a9c17ed7c2b" translate="yes" xml:space="preserve">
          <source>Functions for set manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e391083e0fbf22ea561927d115cdc3b6d736c11" translate="yes" xml:space="preserve">
          <source>Functions for starting and controlling slave nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5dafbde03c1a13b88745b35196edc9afede123" translate="yes" xml:space="preserve">
          <source>Functions for the client side of the messenger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e027782aa57645e3a6b01cb23b7685c8fdd3a647" translate="yes" xml:space="preserve">
          <source>Functions for the server of a client-server relation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ba87f19e7d7ebb8632d047639cdce509275bc2" translate="yes" xml:space="preserve">
          <source>Functions for the server side of the messenger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024a4a0a04b0c6922ba47c2bb9b2955b3572b8b1" translate="yes" xml:space="preserve">
          <source>Functions for the user interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a7f44f3717d4b7ca243ccf7ace6256c62ee8c5" translate="yes" xml:space="preserve">
          <source>Functions in the &lt;code&gt;lists&lt;/code&gt; module are used. This is a very useful module and a study of the manual page is recommended (&lt;code&gt;erl -man lists&lt;/code&gt;). &lt;code&gt;lists:keymember(Key,Position,Lists)&lt;/code&gt; looks through a list of tuples and looks at &lt;code&gt;Position&lt;/code&gt; in each tuple to see if it is the same as &lt;code&gt;Key&lt;/code&gt;. The first element is position 1. If it finds a tuple where the element at &lt;code&gt;Position&lt;/code&gt; is the same as &lt;code&gt;Key&lt;/code&gt;, it returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8878100f101dc3c81231edee6430330183656e2a" translate="yes" xml:space="preserve">
          <source>Functions in the shell that are not prefixed by a module name are assumed to be functional objects (funs), built-in functions (BIFs), or belong to the module &lt;code&gt;user_default&lt;/code&gt; or &lt;code&gt;shell_default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59634689b7646956915d9637a99348e60d088320" translate="yes" xml:space="preserve">
          <source>Functions in this module are not supposed to be called outside a module implementing this behaviour!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064d58d23f91c2cb5d7fb520d11d7b0e642892d9" translate="yes" xml:space="preserve">
          <source>Functions in this module generally fail with an exception if they are passed an incorrect type (for example, an integer or a tuple where an atom is expected). An error tuple is returned if the argument type is correct, but there are some other errors (for example, a non-existing directory is specified to &lt;code&gt;set_path/1&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7745eb90664842af3a1bafbccd43688f4577d81c" translate="yes" xml:space="preserve">
          <source>Functions not explicitly documented as thread-safe are &lt;strong&gt;not&lt;/strong&gt; thread safe. Also notice that some functions are &lt;strong&gt;only&lt;/strong&gt; thread-safe when used in a runtime system with SMP support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac6ff6e259dc58edc6fc08b5f15157730e6ff3b" translate="yes" xml:space="preserve">
          <source>Functions reading Erlang syntax from files recognize the &lt;code&gt;coding:&lt;/code&gt; comment and can therefore handle Unicode data on input. When writing Erlang terms to a file, you are advised to insert such comments when applicable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05509452c1560e192ccd1cf0d92fdfa75ef78544" translate="yes" xml:space="preserve">
          <source>Functions that load code (such as &lt;code&gt;load_file/1&lt;/code&gt;) will return &lt;code&gt;{error,Reason}&lt;/code&gt; if the load operation fails. Here follows a description of the common reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4eed8b03ca8e06e2516c73679f123e0994b5a7" translate="yes" xml:space="preserve">
          <source>Functions used for implementation of processes are also expected to understand system messages, such as debug messages and code change. These functions must be used to implement the use of system messages for a process; either directly, or through standard behaviors, such as &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dc2b1e727ebeb7efb94dab85e24d8d5f1b495a7" translate="yes" xml:space="preserve">
          <source>Functions with &lt;code&gt;uri_string()&lt;/code&gt; argument accept lists, binaries and mixed lists (lists with binary elements) as input type. All of the functions but &lt;code&gt;transcode/2&lt;/code&gt; expects input as lists of unicode codepoints, UTF-8 encoded binaries and UTF-8 percent-encoded URI parts (&quot;%C3%B6&quot; corresponds to the unicode character &quot;&amp;ouml;&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e6e818cdcd190d77f7205421932767583ae649" translate="yes" xml:space="preserve">
          <source>Functions with an attribute tag &lt;code&gt;on_load&lt;/code&gt; (*).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60377ffda30f2e72376989357f855a342bec4b7" translate="yes" xml:space="preserve">
          <source>Functions written in Erlang cannot be called, neither can local functions, global functions, or real funs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c39ed584b9e9103a473ee2f51b67c6e7ad46b2e6" translate="yes" xml:space="preserve">
          <source>Funs are a distinct type. The BIFs &lt;code&gt;erlang:fun_info/1,2&lt;/code&gt; can be used to retrieve information about a fun, and the BIF &lt;code&gt;erlang:fun_to_list/1&lt;/code&gt; returns a textual representation of a fun. The &lt;code&gt;check_process_code/2&lt;/code&gt; BIF returns &lt;code&gt;true&lt;/code&gt; if the process contains funs that depend on the old version of a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d413857ab5033e0eef090e9b8927e37908c05632" translate="yes" xml:space="preserve">
          <source>Funs are written with the following syntax (see &lt;code&gt;Fun Expressions&lt;/code&gt; for full description):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2659ee555bf6a973fb9cd75b3319eb3b017e5de6" translate="yes" xml:space="preserve">
          <source>Funs used to be very slow, slower than &lt;code&gt;apply/3&lt;/code&gt;. Originally, funs were implemented using nothing more than compiler trickery, ordinary tuples, &lt;code&gt;apply/3&lt;/code&gt;, and a great deal of ingenuity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b83d509493beb968be386b13f4e41bf56205caa" translate="yes" xml:space="preserve">
          <source>Further described in section &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ee4f321ee6d2f4c84538e5e31627ce17db2724" translate="yes" xml:space="preserve">
          <source>Further described in section &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt;Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e524888256b17aad4c6133397b299f8e094dd7a" translate="yes" xml:space="preserve">
          <source>Further instructions on wxWidgets, read &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Building_Building-with-wxErlang&quot;&gt;Building with wxErlang&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77589dfbbc0f5947cbeaa3d546cae20b49b57759" translate="yes" xml:space="preserve">
          <source>Further, the following applies:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7fb162716990969d17a23f6df750f7d1d7e5c6" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; has the following behavior on &lt;code&gt;heart&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a8809ef4dff50e3d97820c47f8fdb921b992c2f" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;Line&lt;/code&gt; is the line number and &lt;code&gt;Column&lt;/code&gt; the left column of the comment (i.e., the column of the comment-introducing &lt;code&gt;%&lt;/code&gt; character). &lt;code&gt;Indent&lt;/code&gt; is the indentation (or padding), measured in character positions between the last non-whitespace character before the comment (or the left margin), and the left column of the comment. &lt;code&gt;Line&lt;/code&gt; and &lt;code&gt;Column&lt;/code&gt; are always positive integers, and &lt;code&gt;Indentation&lt;/code&gt; is a nonnegative integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="469762538f21b9cc9a88c071979878064b827afe" translate="yes" xml:space="preserve">
          <source>Furthermore, if the option &lt;code&gt;maps&lt;/code&gt; is not used, a macro is generated for each value in the &lt;code&gt;.hrl&lt;/code&gt; file. So, the defined value &lt;code&gt;tt&lt;/code&gt; can also be extracted by &lt;code&gt;?tt&lt;/code&gt; in application code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed714075ce794e7df77e5f0254d83a4a27b17b0" translate="yes" xml:space="preserve">
          <source>Furthermore, it is possible to make use of a linked in driver that performs some of the decode/encode, decode for ber and encode for per (the 'driver' encoding config).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b1320817767dd45c3d6f6ef7a6148a7b2002b0" translate="yes" xml:space="preserve">
          <source>Furthermore, values can be set for &lt;code&gt;SNMP&lt;/code&gt; application configuration parameters, &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;net_if&lt;/code&gt;, and so on (for a list of valid parameters and types, see the &lt;code&gt;User's Guide for the SNMP application&lt;/code&gt;). This is done by defining a configuration data variable on the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d24c78a1cdfd704c478bc9c43c9bf62198f2f29" translate="yes" xml:space="preserve">
          <source>Furthermore, when the table is initialized at startup, the table is only initialized locally, and the table content is not copied from another node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdbfafa64b12e16b633678892631f235ad532da" translate="yes" xml:space="preserve">
          <source>G' is &lt;strong&gt;maximal&lt;/strong&gt; with respect to a property P if all other subgraphs that include the vertices of G' do not have property P.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ab42e8da9ccb8ede5124dbcc2a1e3c41c10a61" translate="yes" xml:space="preserve">
          <source>GNU &lt;code&gt;autoconf&lt;/code&gt; of at least version 2.59. Note that &lt;code&gt;autoconf&lt;/code&gt; is not needed when building an unmodified version of the released source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a0c8a2c97b57ab7cc86dc85d89e23586272cab" translate="yes" xml:space="preserve">
          <source>GNU &lt;code&gt;m4&lt;/code&gt; -- If HiPE (native code) support is enabled. HiPE can be disabled using &lt;code&gt;--disable-hipe&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f78aac645eb0a5b955d3f398a3bb843076eb092" translate="yes" xml:space="preserve">
          <source>GNU &lt;code&gt;make&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbb31ba5844dbb43051a17aa4eef493d6450469" translate="yes" xml:space="preserve">
          <source>GNU unzip, or a modern uncompress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed19f9e8ce69cee6a484fedc207b6ef4bd4f2be" translate="yes" xml:space="preserve">
          <source>Garbage collect often occurs while a process is suspended, but &lt;code&gt;fprof&lt;/code&gt; hides this fact by pretending that the suspended function was first unsuspended and then garbage collected. Otherwise the printout would show &lt;code&gt;garbage_collect&lt;/code&gt; being called from &lt;code&gt;suspend&lt;/code&gt; but not which function that might have caused the garbage collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6d4ceefcfddd0112c2ab313c4f6918a7857e5b" translate="yes" xml:space="preserve">
          <source>Garbage collecting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a110093601908a8f0fc5889b462ebaea0f2413" translate="yes" xml:space="preserve">
          <source>Garbage collects the node local process identified by &lt;code&gt;Pid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4547393dd5afee84bd99a2d2f9b303462c7a8942" translate="yes" xml:space="preserve">
          <source>General balanced trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cad327e13deb77473f4faa47dff15c65ab4a85f" translate="yes" xml:space="preserve">
          <source>General error, no error code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccacd5f1fc437f7025d7f8ff7dd88c854fb0c1c5" translate="yes" xml:space="preserve">
          <source>General escape character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5f389f686fb545e1bef504ec1d603ee6a5971f" translate="yes" xml:space="preserve">
          <source>General escape character with many uses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6052be1b46c02c7b4fd0f005af72c23b5963ea00" translate="yes" xml:space="preserve">
          <source>General information on how to submit patches can be found at: &lt;code&gt;&lt;a href=&quot;http://wiki.github.com/erlang/otp/submitting-patches&quot;&gt;http://wiki.github.com/erlang/otp/submitting-patches&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7e6f96f5f33a6e580a51b9d7466b6d0ecd72ee" translate="yes" xml:space="preserve">
          <source>Generate Emacs TAGS file from Erlang source files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67326e8a2b78fce59f4855ebe9725718783824e1" translate="yes" xml:space="preserve">
          <source>Generate a random number &lt;code&gt;N, Lo =&amp;lt; N &amp;lt; Hi.&lt;/code&gt; Uses the &lt;code&gt;crypto&lt;/code&gt; library pseudo-random number generator. &lt;code&gt;Hi&lt;/code&gt; must be larger than &lt;code&gt;Lo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb8442fd49268483173f29995c233f170aeb7d1" translate="yes" xml:space="preserve">
          <source>Generate a trace message only if the function is of arity 3 and the first argument is &lt;code&gt;'trace'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d314429acaecad973a4b6e56689d4d759355517" translate="yes" xml:space="preserve">
          <source>Generate a trace message only if the trace control word is set to 1:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f99b460d6288639f703cff3256f68c8c80fa0ea" translate="yes" xml:space="preserve">
          <source>Generate a trace message only if there is a &lt;code&gt;seq_trace&lt;/code&gt; token:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30b9d16026b43bcc42f57110b025c26de87c38c" translate="yes" xml:space="preserve">
          <source>Generate dependencies as a side-effect. The object file will be produced as normal. This option overrides the option &lt;code&gt;-M&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51870baafc34db7d5b0d6e1aa78a53d86d2abcec" translate="yes" xml:space="preserve">
          <source>Generate the next event to handle, see section &lt;code&gt;&lt;a href=&quot;#Inserted%20Events&quot;&gt;Inserted Events&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aa03fe4079b7755dadfe3fc1dd7ce57c8d7b6ad" translate="yes" xml:space="preserve">
          <source>Generated by &lt;code&gt;gen_statem:call&lt;/code&gt;, where &lt;code&gt;From&lt;/code&gt; is the reply address to use when replying either through the state transition action &lt;code&gt;{reply,From,Msg}&lt;/code&gt; or by calling &lt;code&gt;gen_statem:reply&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140aebe6e99b5e48ef7e35e5c12ad46d075a6b6a" translate="yes" xml:space="preserve">
          <source>Generated by &lt;code&gt;gen_statem:cast&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af5bbcd3b57e31411578bcd53065af74175c3ec" translate="yes" xml:space="preserve">
          <source>Generated by any regular process message sent to the &lt;code&gt;gen_statem&lt;/code&gt; process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103a0e9113dff22c9946ce970123f86f4cadcd98" translate="yes" xml:space="preserve">
          <source>Generated by state transition &lt;code&gt;action&lt;/code&gt;&lt;code&gt;{next_event,internal,EventContent}&lt;/code&gt;. All event types above can also be generated using &lt;code&gt;{next_event,EventType,EventContent}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28ee11a6f6d8acfe3563aa18bb88deb79193039" translate="yes" xml:space="preserve">
          <source>Generated by state transition action &lt;code&gt;{state_timeout,Time,EventContent}&lt;/code&gt; state timer timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33947e0cdccab0897246bc8326524d255bcdb951" translate="yes" xml:space="preserve">
          <source>Generated by state transition action &lt;code&gt;{timeout,Time,EventContent}&lt;/code&gt; (or its short form &lt;code&gt;Time&lt;/code&gt;) event timer timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf68bc1e578efd9f745f5654f1bb04fca1b8172d" translate="yes" xml:space="preserve">
          <source>Generated by state transition action &lt;code&gt;{{timeout,Name},Time,EventContent}&lt;/code&gt; generic timer timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8f713c2f5a01ae4307ee4af795dfb48e325231" translate="yes" xml:space="preserve">
          <source>Generated errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6304f61f63103783262383abc1d548c2f82d48a8" translate="yes" xml:space="preserve">
          <source>Generated errors are exceptions of classes &lt;code&gt;exit&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b4d7f33d10fe15861ba38b574b96dede5d941c" translate="yes" xml:space="preserve">
          <source>Generated scanner exports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7438254a72da9498645dc66869c3762dccb6ad36" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;error_msg/1,2&lt;/code&gt; or &lt;code&gt;format&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed0457b8c7f8c798e150baaaf9878e890b28a95" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;error_report/1&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246e13d3b78a6e22fe007bf469c7f9ec8bf3a25c" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;error_report/2&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a44a0280ed5f45ae51edf5a56a50ed4bbf5af4" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;info_msg/1,2&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e100f93aabf63324af2f993d73f3aa0abac21e8c" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;info_report/1&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1918e67feff749d231304bfad32b90063bfc7e7" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;info_report/2&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86388ebe7cb62d7d83d223ea5a1c1cb37a67ed89" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;warning_msg/1,2&lt;/code&gt; is called if warnings are set to be tagged as warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a346eb9245cc37f5a8400fed3ebb107e24e7f8d" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;warning_report/1&lt;/code&gt; is called if warnings are set to be tagged as warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d441932639eeba1b0954c883bf4b79c603bf3a" translate="yes" xml:space="preserve">
          <source>Generated when &lt;code&gt;warning_report/2&lt;/code&gt; is called if warnings are set to be tagged as warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2f260fb196096e42d8d4ca710a025ee84e71ff" translate="yes" xml:space="preserve">
          <source>Generates N bytes randomly uniform 0..255, and returns the result in a binary. Uses a cryptographically secure prng seeded and periodically mixed with operating system provided entropy. By default this is the &lt;code&gt;RAND_bytes&lt;/code&gt; method from OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad19e74ad58d2c8fff49b7eac11b9a08a5905c7e" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;.dot&lt;/code&gt; file which contains a description of the DFA in a format which can be viewed with Graphviz, &lt;code&gt;www.graphviz.com&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca0ff21c1a0314b3e06fa6f9c3f287d4f7113e52" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;.hrl&lt;/code&gt; file with definitions of Erlang constants for the objects in the MIB. The &lt;code&gt;.hrl&lt;/code&gt; file is called &lt;code&gt;&amp;lt;MibName&amp;gt;.hrl&lt;/code&gt;. The MIB must be compiled, and present in the current directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1875f1bac4292cbc2af11c45f521a76e97aa4f" translate="yes" xml:space="preserve">
          <source>Generates a boot script &lt;code&gt;Name.script&lt;/code&gt; and its binary version, the boot file &lt;code&gt;Name.boot&lt;/code&gt;. The boot file specifies which code to be loaded and which applications to be started when the Erlang runtime system is started. See &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="422975d3b587c91fe2efb1cb60696e8d04c0c09b" translate="yes" xml:space="preserve">
          <source>Generates a key that can be used as an authentication or privacy key using MD5 och SHA. The key is localized for EngineID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55d11bfe6ece5c7f1c862a556cd50ba4ff493936" translate="yes" xml:space="preserve">
          <source>Generates a lexical analyzer from the definition in the input file. The input file has the extension &lt;code&gt;.xrl&lt;/code&gt;. This is added to the filename if it is not given. The resulting module is the Xrl filename without the &lt;code&gt;.xrl&lt;/code&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1e66b23073da5916988abc561183114b8f8a58" translate="yes" xml:space="preserve">
          <source>Generates a list of tokens representing the abstract form &lt;code&gt;AbsTerm&lt;/code&gt; of an expression. Optionally, &lt;code&gt;MoreTokens&lt;/code&gt; is appended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7417ff2e92512a2a39d19eafd9ecb8d83be9ce" translate="yes" xml:space="preserve">
          <source>Generates a new keypair. Note that except for Diffie-Hellman the public key is included in the private key structure. See also &lt;code&gt;crypto:generate_key/2&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb459207e361448b067435ed3d4d2142ea424a11" translate="yes" xml:space="preserve">
          <source>Generates a possibly encrypted packet to be sent to the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b52ba7f3812c7a8f518bc55c543862c6ccf19ed" translate="yes" xml:space="preserve">
          <source>Generates a possibly encrypted request packet to be sent to the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57841ad28abe0477b1f1bef55c10a38b1fb45319" translate="yes" xml:space="preserve">
          <source>Generates a possibly encrypted response packet to be sent to the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03374d9b7b176646b850918de0d746107b3c70c2" translate="yes" xml:space="preserve">
          <source>Generates a possibly encrypted response packet to be sent to the network. &lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;#pdu.type&lt;/code&gt; of the original request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8555bf3396a44fb6e7c7410b6a8c89cce2c65af" translate="yes" xml:space="preserve">
          <source>Generates a public key of type &lt;code&gt;Type&lt;/code&gt;. See also &lt;code&gt;public_key:generate_key/1&lt;/code&gt;. May throw exception an exception of class &lt;code&gt;error&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b58bc16628ace55c2da50a2ca4ca8a535feaf2" translate="yes" xml:space="preserve">
          <source>Generates a release upgrade file &lt;code&gt;relup&lt;/code&gt; containing instructions for upgrading from or downgrading to one or more previous releases. The instructions are used by &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler&lt;/a&gt;&lt;/code&gt; when installing a new version of a release in runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0abaac951d1e391844ca56d6e45b837f4353b42" translate="yes" xml:space="preserve">
          <source>Generates a root certificate that can be used in multiple calls to &lt;code&gt;&lt;a href=&quot;#pkix_test_data-1&quot;&gt;pkix_test_data/1&lt;/a&gt;&lt;/code&gt; when you want the same root certificate for several generated certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da7ea51c89adab7fc3ae352f3f23a39b5fb5e3c" translate="yes" xml:space="preserve">
          <source>Generates a short hash of an issuer name. The hash is returned as a string containing eight hexadecimal digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36218cb889dc7ccdd07a2fe2f9eb3178ca205275" translate="yes" xml:space="preserve">
          <source>Generates a string corresponding to the given token sequence. The string can be re-tokenized to yield the same token list again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32fa96c10b8819e41a5d07145bcf7839a9a434be" translate="yes" xml:space="preserve">
          <source>Generates an LALR-1 parser. Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b64199a14f2397c8faf913c617e8d68b0b89c4f" translate="yes" xml:space="preserve">
          <source>Generates and returns an &lt;code&gt;integer unique on current runtime system instance&lt;/code&gt;. The integer is unique in the sense that this BIF, using the same set of modifiers, does not return the same integer more than once on the current runtime system instance. Each integer value can of course be constructed by other means.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268fefc2b50ee1a7470399079b4a7845550a5ba3" translate="yes" xml:space="preserve">
          <source>Generates and returns an &lt;code&gt;integer unique on current runtime system instance&lt;/code&gt;. The same as calling &lt;code&gt;&lt;a href=&quot;#unique_integer-1&quot;&gt;erlang:unique_integer([])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e69aba2673902a14ce141c6322df702b93486e2" translate="yes" xml:space="preserve">
          <source>Generators can be combined. For example, the Cartesian product of two lists can be written as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be5894ca760ef2f22e7f2cb9e6e2a6647f444cd" translate="yes" xml:space="preserve">
          <source>Generic Functions for Implementing SNMP Objects in a Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdf16c9bb96e5bb1b42095c4533cc66053f22d95" translate="yes" xml:space="preserve">
          <source>Generic OTP application functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab73920daef432e4f4be5771444d086a447d5633" translate="yes" xml:space="preserve">
          <source>Generic event handling behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf0bb986fc2f5ae8e7d4ff5cea8c3a25129e3a9" translate="yes" xml:space="preserve">
          <source>Generic server behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6385e8e3bcfe288120ffc1f47f82d34e0905942a" translate="yes" xml:space="preserve">
          <source>Generic state machine behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31b68dd5b8c5ae479fb0219039ae7c6bf8a6aa4b" translate="yes" xml:space="preserve">
          <source>Generic supervisor behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40031ae8fde0b0202a13ef8fc34c0f8901eef1ef" translate="yes" xml:space="preserve">
          <source>Generic supervisor bridge behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca441ddd2e8d07643b87c1b24a828fa5b4b3e42" translate="yes" xml:space="preserve">
          <source>Georgian</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9195705bac6b7ff9a481d4be2e84fa47709e055a" translate="yes" xml:space="preserve">
          <source>Get a list of all registered agents or all agents registered by a specific user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640b0b98b73b42a2d6a9b30dd7091c14c1631e7e" translate="yes" xml:space="preserve">
          <source>Get a list of all registered usm users with engine-id &lt;code&gt;EngineID&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04131ecf450115268a3493bdadb31575d6e7732" translate="yes" xml:space="preserve">
          <source>Get a list of all registered usm users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f0b1a2f6c8afa05abd2447df75a0aeeb3aa70d" translate="yes" xml:space="preserve">
          <source>Get a list of all the mib's loaded into the manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2cd4fc2dacac3512e20b32aec886924d3392b3" translate="yes" xml:space="preserve">
          <source>Get a list of the identities of all registered users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c8a4beaed65b58ccb1aaf755584baf21b32177" translate="yes" xml:space="preserve">
          <source>Get a specific table info item or, if &lt;code&gt;Item&lt;/code&gt; has the value &lt;code&gt;all&lt;/code&gt;, a two tuple list (property list) is instead returned with all the items and their respctive values of the given table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5755314d3c3553871c6d977e3d3f1be20a8148" translate="yes" xml:space="preserve">
          <source>Get a string from warnings as returned by &lt;code&gt;&lt;a href=&quot;#run-1&quot;&gt;run/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5f14b2bb4700816fccb69b951d45a4a20d4d9f" translate="yes" xml:space="preserve">
          <source>Get and install NSIS 2.01 or later (up to 2.46 tried and working)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b5730a895e07f4673bc0a58387876778e539fa" translate="yes" xml:space="preserve">
          <source>Get and install Sun's JDK 1.6.0 or later</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54e794c32224765acef3d1c2c71f3efa8f1bbfd" translate="yes" xml:space="preserve">
          <source>Get and install complete Cygwin (latest), complete MinGW with MSYS or complete MSYS2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="493d76f7f2ee88f0e9b6c49de64048ec6299274e" translate="yes" xml:space="preserve">
          <source>Get contents of a boot script file. See &lt;code&gt;script(4)&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316a2796cd4f9dfbfb6bb002c22e90ab51580fc0" translate="yes" xml:space="preserve">
          <source>Get contents of a release file. See &lt;code&gt;rel(4)&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856c2d8d28b39917d9df57e7997e5b0a9cdd75c0" translate="yes" xml:space="preserve">
          <source>Get distribution channel data from the local node that is to be passed to the remote node. The distribution channel is identified by &lt;code&gt;DHandle&lt;/code&gt;. If no data is available, the atom &lt;code&gt;none&lt;/code&gt; is returned. One can request to be informed by a message when more data is available by calling &lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_get_data_notification-1&quot;&gt;erlang:dist_ctrl_get_data_notification(DHandle)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efa55918241de6745f3ea5ad2044a159778d8e9" translate="yes" xml:space="preserve">
          <source>Get one or more options for the distribution socket connected to &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b18758b000b3e1de8e817965004906858b20c8" translate="yes" xml:space="preserve">
          <source>Get reltool configuration. Normally, only the explicit configuration parameters with values that differ from their defaults are interesting. But the builtin default values can be returned by setting &lt;code&gt;InclDefaults&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. The derived configuration can be returned by setting &lt;code&gt;InclDerived&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c9c139066a5de0aad43e27577179d02b140489" translate="yes" xml:space="preserve">
          <source>Get reltool configuration. Shorthand for &lt;code&gt;reltool:get_config(Server,false,false)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a3370628f49f284972b00bdc13cad5204bbbb03" translate="yes" xml:space="preserve">
          <source>Get status about the configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04589953eeaffedb8140078910133b12237025f8" translate="yes" xml:space="preserve">
          <source>Get the Erlang Debugger started automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3548b3564a499c27cfc05660402530e97978ac0" translate="yes" xml:space="preserve">
          <source>Get the Erlang source distribution (from &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download.html&quot;&gt;http://www.erlang.org/download.html&lt;/a&gt;&lt;/code&gt;) and unpack with Cygwin's/MSYS's/MSYS2's &lt;code&gt;tar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01cb21609b8338338a0e0b0681ae8a48fd9d025" translate="yes" xml:space="preserve">
          <source>Get the Erlang source distribution (from &lt;code&gt;&lt;a href=&quot;http://www.erlang.org/download.html&quot;&gt;http://www.erlang.org/download.html&lt;/a&gt;&lt;/code&gt;). The same as for Unix platforms. Preferably use tar from within Cygwin, MSYS or MSYS2 to unpack the source tar.gz (&lt;code&gt;tar zxf otp_src_21.tar.gz&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447be6983f16691011440760f4004601c60af400" translate="yes" xml:space="preserve">
          <source>Get the I/O queue as a pointer to an array of &lt;code&gt;SysIOVec&lt;/code&gt;s. It also returns the number of elements in &lt;code&gt;iovlen&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baebc8812d533996da815505e87a41aec712f7e1" translate="yes" xml:space="preserve">
          <source>Get the full path to the (compiled) mib-file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d209d8a7bba55a3056e04b1cf5ac82a91241c11c" translate="yes" xml:space="preserve">
          <source>Get the head of the IO Queue as a binary term.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060c39116371929c4a5e376fe4e231ff64413bde" translate="yes" xml:space="preserve">
          <source>Get the installer from the website and use it to install Cygwin. Be sure to have fair privileges. If you're on an NT domain you should consider running &lt;code&gt;mkpasswd -d&lt;/code&gt; and &lt;code&gt;mkgroup -d&lt;/code&gt; after the installation to get the user databases correct. See their respective manual pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967a2c970e8c2158b43e2cb2ea49793a436b100c" translate="yes" xml:space="preserve">
          <source>Get the request-id, context, community and address of the request currently being processed by the agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a37d5c8e236c8555ae3433956ad3f27ce808748" translate="yes" xml:space="preserve">
          <source>Get the size of &lt;code&gt;q&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3315394b23b17688f79ec98ea5a822c4e605d85" translate="yes" xml:space="preserve">
          <source>Get the validation callback. If the callback is cleared, &lt;code&gt;none&lt;/code&gt; will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdda97b4a40d658b21777ac802ed42f3200f6c4b" translate="yes" xml:space="preserve">
          <source>Get, build and install OpenSSL 0.9.8r or later (up to 1.0.2d tried &amp;amp; working) with static libs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d611a26a990a0b09006bd41a9709a2c64f9918c5" translate="yes" xml:space="preserve">
          <source>GetNext Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8bee95e077aaca69dd5eb6fa3cfe38c1be0638" translate="yes" xml:space="preserve">
          <source>Gets &lt;code&gt;net_ticktime&lt;/code&gt; (see &lt;code&gt;kernel(6)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583c472bb74e99d6011084604173b1ce662ed072" translate="yes" xml:space="preserve">
          <source>Gets a list of all test specification terms used to configure and run this test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c16a798989b09bdc8b0f54a77a0d7639480175" translate="yes" xml:space="preserve">
          <source>Gets a reference to the &lt;code&gt;Common Test&lt;/code&gt; event manager. The reference can be used to, for example, add a user-specific event handler while tests are running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea634afc0f261ea22bf01d18d8a19246f8afe306" translate="yes" xml:space="preserve">
          <source>Gets a reference to the &lt;code&gt;Common Test&lt;/code&gt; master event manager. The reference can be used to, for example, add a user-specific event handler while tests are running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d93d1aacda994f652a83c126f344e39d8ac9ad4" translate="yes" xml:space="preserve">
          <source>Gets all breakpoints, or all breakpoints in &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7e194c15a8a3a84637f2a65e0757d4aa12cc0e4" translate="yes" xml:space="preserve">
          <source>Gets all data received by the Telnet client since the last command was sent. Only newline-terminated strings are returned. If the last received string has not yet been terminated, the connection can be polled automatically until the string is complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b637ff770762faba2572a6679e684786564e1e" translate="yes" xml:space="preserve">
          <source>Gets and sets how to save call frames in the stack. Saving call frames makes it possible to inspect the call chain of a process, and is also used to emulate the stack trace if an error (an exception of class error) occurs. The following flags can be specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae25ab1d48d49a274aa7622799189868fb723a6" translate="yes" xml:space="preserve">
          <source>Gets and sets when and how to attach automatically to a process executing code in interpreted modules. &lt;code&gt;false&lt;/code&gt; means never attach automatically, this is the default. Otherwise automatic attach is defined by a list of flags and a function. The following flags can be specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d09b0c13918059727dad45200adfcb45e3e38c" translate="yes" xml:space="preserve">
          <source>Gets configuration data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3b6db1782fd96f345a74f1d3549826e70a5124" translate="yes" xml:space="preserve">
          <source>Gets creation number of a listen socket, which is used to dig out the number stored in the lock file to differentiate between invocations of Erlang nodes with the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71bad6aa5ee68ee6324ac78c4e38dbf19122205" translate="yes" xml:space="preserve">
          <source>Gets data from Telnet and waits for the expected pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecad260ceb302e641cd91423d07332533c9a1c52" translate="yes" xml:space="preserve">
          <source>Gets data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e38d96b6aa822d3e0908696a9336c9f1c193294" translate="yes" xml:space="preserve">
          <source>Gets identification number for listen port. This identification number is used in an accept command to the driver. It is returned as a big-endian 32-bit integer, which is the file identifier for the listen socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823f8df2637a191abc2de928f58e11ad5952c005" translate="yes" xml:space="preserve">
          <source>Gets information about all processes executing interpreted code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dde451b6722cad5a900ffacf620fb650e53659" translate="yes" xml:space="preserve">
          <source>Gets key and value terms at the current map iterator position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cd446726a77fafbe6018d9e729bfffe1ecc04c" translate="yes" xml:space="preserve">
          <source>Gets one or more options for a socket. For a list of available options, see &lt;code&gt;&lt;a href=&quot;#setopts-2&quot;&gt;setopts/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f806a893b727334cb3cc6527d6110344f616a7a" translate="yes" xml:space="preserve">
          <source>Gets one or more statistic options for a socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc33095b51657cfa1cab71146bc0f2e9dff59db0" translate="yes" xml:space="preserve">
          <source>Gets one or more statistic options for the underlying TCP socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dec32fa3291d50d4b9bd0369b422b9847354be" translate="yes" xml:space="preserve">
          <source>Gets statistics, which is the number of bytes received, the number of bytes sent, and the number of bytes pending in the output queue. This data is used when the distribution checks that a connection is alive (ticking). The statistics is returned as three 32-bit big-endian integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173939a752af31ffc4e8d8622995aa859cd9ba28" translate="yes" xml:space="preserve">
          <source>Gets the byte size of resource object &lt;code&gt;obj&lt;/code&gt; obtained by &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d8405f9e2f6276bd2b6fb5ef072d5f6fc7f493" translate="yes" xml:space="preserve">
          <source>Gets the current calculated CRC checksum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b931c30a9d4c1f60f2b0abc876c6f8126f350439" translate="yes" xml:space="preserve">
          <source>Gets the data associated with a debug option. &lt;code&gt;Default&lt;/code&gt; is returned if &lt;code&gt;Item&lt;/code&gt; is not found. Can be used by the process to retrieve debug data for printing before it terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4381436401c9fe92bbc236fd5301c462dc1220" translate="yes" xml:space="preserve">
          <source>Gets the identity of the boot script used to boot the system. &lt;code&gt;Id&lt;/code&gt; can be any Erlang term. In the delivered boot scripts, &lt;code&gt;Id&lt;/code&gt; is &lt;code&gt;{Name, Vsn}&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Vsn&lt;/code&gt; are strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702e2b4a0d2d030f6a8d731983cc9aec9571bd82" translate="yes" xml:space="preserve">
          <source>Gets the index types of &lt;code&gt;Name&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadf7e0b74efe5ff56301a05ecded81e0ab4c8f6" translate="yes" xml:space="preserve">
          <source>Gets the item with key &lt;code&gt;KeyOid&lt;/code&gt;. Could be used from within an SNMP instrumentation function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4818efbf504f3ec3947fed162d384d445fa46d" translate="yes" xml:space="preserve">
          <source>Gets the last item in the index structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9335e006f9ecd9c25f7dd865ee344b1e9e62fb99" translate="yes" xml:space="preserve">
          <source>Gets the next item in the SNMP lexicographic ordering, after &lt;code&gt;KeyOid&lt;/code&gt; in the index structure. &lt;code&gt;KeyOid&lt;/code&gt; does not have to refer to an existing item in the index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853fcc81499b6d2611ce672cb8162da2513cf149" translate="yes" xml:space="preserve">
          <source>Gets the number of entries in the array up until the last non-default-valued entry. That is, returns &lt;code&gt;I+1&lt;/code&gt; if &lt;code&gt;I&lt;/code&gt; is the last non-default-valued entry in the array, or zero if no such entry exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f4b09e49befa52ef0cd2b8b65ff2ade3ac7038" translate="yes" xml:space="preserve">
          <source>Gets the number of entries in the array. Entries are numbered from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;size(Array)-1&lt;/code&gt;. Hence, this is also the index of the first entry that is guaranteed to not have been previously set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e742037cddd9d14b141ef8367d4920444ccba03d" translate="yes" xml:space="preserve">
          <source>Gets the path set in the loader. The path is set by the &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; process according to information found in the start script.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1d1a5f1f4817df4a2722853b149ecb3c5676f5" translate="yes" xml:space="preserve">
          <source>Gets the size of the intermediate buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecaa48a0a56d9339e54bb6a0add8f6f945826e7a" translate="yes" xml:space="preserve">
          <source>Gets the state of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="711c860a6e82424068f190b00970484dc5135435" translate="yes" xml:space="preserve">
          <source>Gets the status of the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a68efff5d7044bf08b799fc8bcb8b6492b90c72" translate="yes" xml:space="preserve">
          <source>Gets the system up time in hundredth of a second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1c8454deba9c8b3f728fa0b561966f6fc6c272" translate="yes" xml:space="preserve">
          <source>Gets the temporary reboot command. If the command is cleared, the empty string is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5a84efcba378f341cb2bc657767b0d92208b8f" translate="yes" xml:space="preserve">
          <source>Gets the value associated with &lt;code&gt;key&lt;/code&gt; in the registry. The value must be a binary (pointer) type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31decd1bbc108caba1718eb525228cde1687de2" translate="yes" xml:space="preserve">
          <source>Gets the value associated with &lt;code&gt;key&lt;/code&gt; in the registry. The value must be a floating point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="805e50b6fcefa615cd4e56e07d288631bdb10817" translate="yes" xml:space="preserve">
          <source>Gets the value associated with &lt;code&gt;key&lt;/code&gt; in the registry. The value must be a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ed0b9f095e752434f568472f51e190b8e1e225" translate="yes" xml:space="preserve">
          <source>Gets the value associated with &lt;code&gt;key&lt;/code&gt; in the registry. The value must be an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cb5f06338279a815d3636ca9f973cda74add69" translate="yes" xml:space="preserve">
          <source>Gets the value of a variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f68d5aed058755553686a2b48d6636c07c110d" translate="yes" xml:space="preserve">
          <source>Gets the value of entry &lt;code&gt;I&lt;/code&gt;. If &lt;code&gt;I&lt;/code&gt; is not a non-negative integer, or if the array has fixed size and &lt;code&gt;I&lt;/code&gt; is larger than the maximum index, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50ab19d778954bb2ec4217e1ecffdadb48001f26" translate="yes" xml:space="preserve">
          <source>Gets the value of the status column from &lt;code&gt;Cols&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ae2205af3170a4d8b97ea29be9c9bc9504c25b" translate="yes" xml:space="preserve">
          <source>Gets the value used for uninitialized entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8f9ec542a78a0567894a787bed8841f44f1f6a" translate="yes" xml:space="preserve">
          <source>Gets the values of the specified socket options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019f8f6c681682e49a0330b7e885c9019f7b93f1" translate="yes" xml:space="preserve">
          <source>Getting correct values out of cpu_time can be difficult. The best way to get correct values is to run using a single scheduler and bind that scheduler to a specific CPU, i.e. &lt;code&gt;erl +S 1 +sbt db&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480af2276d8ed7dc038e53a0471f267a56260af9" translate="yes" xml:space="preserve">
          <source>Given a group name, say &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;Common Test&lt;/code&gt; searches for all paths leading to &lt;code&gt;g&lt;/code&gt;. By path is meant a sequence of nested groups, which must be followed to get from the top-level group to &lt;code&gt;g&lt;/code&gt;. To execute the test cases in group &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;Common Test&lt;/code&gt; must call the &lt;code&gt;init_per_group/2&lt;/code&gt; function for each group in the path to &lt;code&gt;g&lt;/code&gt;, and all corresponding &lt;code&gt;end_per_group/2&lt;/code&gt; functions afterwards. This is because the configuration of a test case in &lt;code&gt;g&lt;/code&gt; (and its &lt;code&gt;Config&lt;/code&gt; input data) depends on &lt;code&gt;init_per_testcase(TestCase, Config)&lt;/code&gt; and its return value, which in turn depends on &lt;code&gt;init_per_group(g, Config)&lt;/code&gt; and its return value, which in turn depends on &lt;code&gt;init_per_group/2&lt;/code&gt; of the group above &lt;code&gt;g&lt;/code&gt;, and so on, all the way up to the top-level group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0906ff1f747a564752f0d7a563c5494d0210eabc" translate="yes" xml:space="preserve">
          <source>Given a parser &lt;code&gt;P1&lt;/code&gt; for grammar &lt;code&gt;G1&lt;/code&gt;, and a parser &lt;code&gt;P2&lt;/code&gt; for grammar &lt;code&gt;G2&lt;/code&gt;, &lt;code&gt;pand(P1, P2)&lt;/code&gt; returns a parser for the grammar, which consists of sequences of tokens that satisfy &lt;code&gt;G1&lt;/code&gt;, followed by sequences of tokens that satisfy &lt;code&gt;G2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2367ed7b14b8398232495f4a605666d4cfc6fef0" translate="yes" xml:space="preserve">
          <source>Given a set A and a sentence S(x), where x is a free variable, a new set B whose elements are exactly those elements of A for which S(x) holds can be formed, this is denoted B = {x in A : S(x)}. Sentences are expressed using the logical operators &quot;for some&quot; (or &quot;there exists&quot;), &quot;for all&quot;, &quot;and&quot;, &quot;or&quot;, &quot;not&quot;. If the existence of a set containing all the specified elements is known (as is always the case in this module), this is denoted B = {x : S(x)}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36f411aeec558802f79e91b5db4a572a5398ef7" translate="yes" xml:space="preserve">
          <source>Given an error return value &lt;code&gt;{error, AtomReason}&lt;/code&gt;, this function returns a readable string describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781843f1c1301f611a0691aec36fe17c5bf3e0e2" translate="yes" xml:space="preserve">
          <source>Given as UserData argument to UserMod:handle_trans_reply/4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="530013e90fa309cacbc3e641eb818d74c4e00873" translate="yes" xml:space="preserve">
          <source>Given that the file &lt;code&gt;relup&lt;/code&gt; generated in Step 4 is now located in the current directory, it is automatically included in the release package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc2effb180a677270a24a3fa700f370aa8754e6d" translate="yes" xml:space="preserve">
          <source>Given the error reason returned by any function in this module, returns a descriptive string of the error in English.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d290b94bf301ec616a86d801ea1a63c63128ba75" translate="yes" xml:space="preserve">
          <source>Given the error returned by any function in this module, this function returns a descriptive string of the error in English. For file errors, function &lt;code&gt;format_error/1&lt;/code&gt; in module &lt;code&gt;&lt;a href=&quot;file#format_error-1&quot;&gt;file&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="627dc59ec96d4003a1f884835672e5ca211d209d" translate="yes" xml:space="preserve">
          <source>Given the error returned by any function of this module, the function &lt;code&gt;format_error&lt;/code&gt; returns a descriptive string of the error in English. For file errors, the function &lt;code&gt;format_error/1&lt;/code&gt; in the &lt;code&gt;file&lt;/code&gt; module is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14cbb80dc04222a2b327e9ea1c1d0d59bbeb536" translate="yes" xml:space="preserve">
          <source>Given the following configuration file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7857c6c6d4cc0ba068bc5c9b5b10e7a6d33c6c42" translate="yes" xml:space="preserve">
          <source>Given this index table, a lookup of the &lt;code&gt;age&lt;/code&gt; fields for all persons named &quot;Bryan&quot; can be done as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da93ffddda7f75e1acf12d527ae88ab0e0491a1" translate="yes" xml:space="preserve">
          <source>Gives a brief help text for functions in the dbg module. The available items can be listed with &lt;code&gt;dbg:h/0&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59802ff5f85299eed9ae3d0bb3814529b5783007" translate="yes" xml:space="preserve">
          <source>Gives a list of items for brief online help.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd32c6014b82e5e4bcb63130db8329b8b41e4f2" translate="yes" xml:space="preserve">
          <source>Gives a minimum binary virtual heap size, in words. Setting this value higher than the system default can speed up some processes because less garbage collection is done. However, setting a too high value can waste memory. Therefore, use this option only for fine-tuning an application and to measure the execution time with various &lt;code&gt;VSize&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5cb1653868ef0aeb3101648e75759bdc1bdd906" translate="yes" xml:space="preserve">
          <source>Gives a minimum heap size, in words. Setting this value higher than the system default can speed up some processes because less garbage collection is done. However, setting a too high value can waste memory and slow down the system because of worse data locality. Therefore, use this option only for fine-tuning an application and to measure the execution time with various &lt;code&gt;Size&lt;/code&gt; values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810d9b70bc070340a07b3c2e79ccbba48f2552d5" translate="yes" xml:space="preserve">
          <source>Gives better control of the error handling in &lt;code&gt;run/3&lt;/code&gt;. When specified, compilation errors (if the regular expression is not already compiled) and runtime errors are explicitly returned as an error tuple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b8c5669ba8e381042bef34e911c83fd5ed1d60" translate="yes" xml:space="preserve">
          <source>Gives the &lt;code&gt;inode&lt;/code&gt; number. On non-Unix file systems, this field is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f8f24d79734bd4ae82e0aac3f26f32697c6c77" translate="yes" xml:space="preserve">
          <source>Gives the group that the file owner belongs to. Ignored for non-Unix file systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4737d13f39092ef05df03ffa9addafe40611d6ea" translate="yes" xml:space="preserve">
          <source>Gives the group that the owner of the file belongs to. On non-Unix file systems, this field is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f39e6cc46ea77e37c60e596058773946bae35e5" translate="yes" xml:space="preserve">
          <source>Gives the runtime system a hint about how much CPU time the current NIF call has consumed since the last hint, or since the start of the NIF if no previous hint has been specified. The time is specified as a percent of the timeslice that a process is allowed to execute Erlang code until it can be suspended to give time for other runnable processes. The scheduling timeslice is not an exact entity, but can usually be approximated to about 1 millisecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c9b985fae1b1978c9a8847bd814127a83a2a7f" translate="yes" xml:space="preserve">
          <source>Gives the runtime system a hint about how much CPU time the current driver callback call has consumed since the last hint, or since the the start of the callback if no previous hint has been given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe40132df9803a579f2616316fd9f36e8b76b6f5" translate="yes" xml:space="preserve">
          <source>Glagolitic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cab7e44a13eca6ba11be96b9620bac95342b107" translate="yes" xml:space="preserve">
          <source>Global locks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663aec7048c1025584fcbe13e39c7f862523fb26" translate="yes" xml:space="preserve">
          <source>Global locks have lock identities and are set on a specific resource. For example, the specified resource can be a pid. When a global lock is set, access to the locked resource is denied for all resources other than the lock requester.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e719b75191f0f8870f4cce49fe4bb2d1431c35" translate="yes" xml:space="preserve">
          <source>Global name service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe75420118d16720ea0871af2657f848e3a5561c" translate="yes" xml:space="preserve">
          <source>Global state variable accessible from all customization functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85184147587bb515c2a0d6dc494783d563e6af3" translate="yes" xml:space="preserve">
          <source>Globally associates name &lt;code&gt;Name&lt;/code&gt; with a pid, that is, globally notifies all nodes of a new global name in a network of Erlang nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ade1b21a977379d19f55c7430c96711a051cde" translate="yes" xml:space="preserve">
          <source>Go back to a previous configuration after stopping Trace Tool Builder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1136a302b770ce20d2455693cdce4ae4061f3348" translate="yes" xml:space="preserve">
          <source>Goes to a specified line number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cc20ddddd5df91dbeeeac20e28069cdc6d35d5" translate="yes" xml:space="preserve">
          <source>Gothic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae58fcfe2e802bba4f96a489b26af5bbeb7e8f3" translate="yes" xml:space="preserve">
          <source>Gracefully shuts down the current association, with flushing of unsent data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d20d631ea24e704853e412250cfe58e90638ca0" translate="yes" xml:space="preserve">
          <source>Gracefully terminates the association specified by &lt;code&gt;Assoc&lt;/code&gt;, with flushing of all unsent data. The socket itself remains open. Other associations opened on this socket are still valid. The socket can be used in new associations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8e7595a0614d214719e6cde55163eed6ae1e77" translate="yes" xml:space="preserve">
          <source>Grantha</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e236765e608d7779ac1e896f6e76341ac7b6350f" translate="yes" xml:space="preserve">
          <source>Graph &lt;code&gt;IO Usage&lt;/code&gt; shows the current I/O load on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca196499b4debe7b6713e67d500604ee3bbf167" translate="yes" xml:space="preserve">
          <source>Graph &lt;code&gt;Memory Usage&lt;/code&gt; shows the total memory use and per memory category use, where each category has a unique color. The categories are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781fa1780dd9a4a0db726f7b318d799494937c7e" translate="yes" xml:space="preserve">
          <source>Graph &lt;code&gt;Scheduler Utilization&lt;/code&gt; shows scheduler use per scheduler, where each scheduler use has a unique color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba97d05596043efeaa9072d06d3ec7c375a0548" translate="yes" xml:space="preserve">
          <source>Grapheme clusters for codepoints of class &lt;code&gt;prepend&lt;/code&gt; and non-modern (or decomposed) Hangul is not handled for performance reasons in &lt;code&gt;&lt;a href=&quot;#find-3&quot;&gt;find/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#replace-3&quot;&gt;replace/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#split-2&quot;&gt;split/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#lexemes-2&quot;&gt;split/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trim-3&quot;&gt;trim/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599294f23ef04a992bc69ba465066344c3c7cf34" translate="yes" xml:space="preserve">
          <source>Greater than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2919540599e9df0beb579ca8d46bdc142657611" translate="yes" xml:space="preserve">
          <source>Greater than or equal to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d5f5b13f13f6d5e8e88a5a92e137f7d64b2954" translate="yes" xml:space="preserve">
          <source>Greek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a408bee4037e5b54d5ac7fa1dfcb676ce34e90" translate="yes" xml:space="preserve">
          <source>Group names and group paths can be combined with parameter &lt;code&gt;group_names_or_paths&lt;/code&gt;. Each element is treated as an individual specification in combination with parameter &lt;code&gt;cases&lt;/code&gt;. The following examples illustrates this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671f6eabcfd9d7d866a94b98585382c0fa691811" translate="yes" xml:space="preserve">
          <source>Grouped AVP Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc06822ce31dfe9b98c8d0e28531bc71f925952e" translate="yes" xml:space="preserve">
          <source>Grouped AVPs are defined as CCF specifications in dictionary files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c33959995ae100dbef22f41f1c91b43b054b80f" translate="yes" xml:space="preserve">
          <source>Grouping nodes to global name registration groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe99f0eb0a4fea6ebc617b5e4a2937fcbc745bb4" translate="yes" xml:space="preserve">
          <source>Grouping of SQL queries can be desirable in order to reduce network traffic. Another benefit can be that the data source sometimes can optimize execution of a batch of SQL queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00525383d9d58422c948ae43bf89fd05e4f983f1" translate="yes" xml:space="preserve">
          <source>Grouping. It matches &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a121fa06623a2cf82b642092526102dbfe1e92e" translate="yes" xml:space="preserve">
          <source>Groups together the part of the string with the parts of the string matching the subexpressions of the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f5854029d7445b6d33c8e8357f38846f74074b" translate="yes" xml:space="preserve">
          <source>GuardFunction ::= BoolFunction | &lt;code&gt;abs&lt;/code&gt; | &lt;code&gt;element&lt;/code&gt; | &lt;code&gt;hd&lt;/code&gt; | &lt;code&gt;length&lt;/code&gt; | &lt;code&gt;map_get&lt;/code&gt; | &lt;code&gt;map_size&lt;/code&gt; | &lt;code&gt;node&lt;/code&gt; | &lt;code&gt;round&lt;/code&gt; | &lt;code&gt;size&lt;/code&gt; | &lt;code&gt;tl&lt;/code&gt; | &lt;code&gt;trunc&lt;/code&gt; | &lt;code&gt;'+'&lt;/code&gt; | &lt;code&gt;'-'&lt;/code&gt; | &lt;code&gt;'*'&lt;/code&gt; | &lt;code&gt;'div'&lt;/code&gt; | &lt;code&gt;'rem'&lt;/code&gt; | &lt;code&gt;'band'&lt;/code&gt; | &lt;code&gt;'bor'&lt;/code&gt; | &lt;code&gt;'bxor'&lt;/code&gt; | &lt;code&gt;'bnot'&lt;/code&gt; | &lt;code&gt;'bsl'&lt;/code&gt; | &lt;code&gt;'bsr'&lt;/code&gt; | &lt;code&gt;'&amp;gt;'&lt;/code&gt; | &lt;code&gt;'&amp;gt;='&lt;/code&gt; | &lt;code&gt;'&amp;lt;'&lt;/code&gt; | &lt;code&gt;'=&amp;lt;'&lt;/code&gt; | &lt;code&gt;'=:='&lt;/code&gt; | &lt;code&gt;'=='&lt;/code&gt; | &lt;code&gt;'=/='&lt;/code&gt; | &lt;code&gt;'/='&lt;/code&gt; | &lt;code&gt;self&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ab9f4a7563027538eea5c8069b4656a1e5e814" translate="yes" xml:space="preserve">
          <source>GuardFunction ::= BoolFunction | &lt;code&gt;abs&lt;/code&gt; | &lt;code&gt;element&lt;/code&gt; | &lt;code&gt;hd&lt;/code&gt; | &lt;code&gt;length&lt;/code&gt; | &lt;code&gt;map_get&lt;/code&gt; | &lt;code&gt;map_size&lt;/code&gt; | &lt;code&gt;node&lt;/code&gt; | &lt;code&gt;round&lt;/code&gt; | &lt;code&gt;size&lt;/code&gt; | &lt;code&gt;tl&lt;/code&gt; | &lt;code&gt;trunc&lt;/code&gt; | &lt;code&gt;'+'&lt;/code&gt; | &lt;code&gt;'-'&lt;/code&gt; | &lt;code&gt;'*'&lt;/code&gt; | &lt;code&gt;'div'&lt;/code&gt; | &lt;code&gt;'rem'&lt;/code&gt; | &lt;code&gt;'band'&lt;/code&gt; | &lt;code&gt;'bor'&lt;/code&gt; | &lt;code&gt;'bxor'&lt;/code&gt; | &lt;code&gt;'bnot'&lt;/code&gt; | &lt;code&gt;'bsl'&lt;/code&gt; | &lt;code&gt;'bsr'&lt;/code&gt; | &lt;code&gt;'&amp;gt;'&lt;/code&gt; | &lt;code&gt;'&amp;gt;='&lt;/code&gt; | &lt;code&gt;'&amp;lt;'&lt;/code&gt; | &lt;code&gt;'=&amp;lt;'&lt;/code&gt; | &lt;code&gt;'=:='&lt;/code&gt; | &lt;code&gt;'=='&lt;/code&gt; | &lt;code&gt;'=/='&lt;/code&gt; | &lt;code&gt;'/='&lt;/code&gt; | &lt;code&gt;self&lt;/code&gt; | &lt;code&gt;get_tcw&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce8571c4897351cf59857c7ecbf1e4a1a421968" translate="yes" xml:space="preserve">
          <source>Guide: Design principles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdf80231713b1d4e801ca0c584a421f5e8f439b" translate="yes" xml:space="preserve">
          <source>Guide: ERTS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665e5b30bae9bb0925493ecb48fee34c2fef01e1" translate="yes" xml:space="preserve">
          <source>Guide: Efficiency guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758e398526fc027576517b8abb810d97bc7d1a3e" translate="yes" xml:space="preserve">
          <source>Guide: Embedded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0581c94431aa05c2eb8472879c7cc801044559b" translate="yes" xml:space="preserve">
          <source>Guide: Getting started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f240a19e5c8b7cc00f916b707fbdf32023e21d53" translate="yes" xml:space="preserve">
          <source>Guide: Installation guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d502df217602b5fdaf2f55dc2c547ef0fbf862f7" translate="yes" xml:space="preserve">
          <source>Guide: OAM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e2bf177d1d38ced2ec568d128c1257de3a75f5f" translate="yes" xml:space="preserve">
          <source>Guide: Programming examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e72627945ab63186b7656050547019c49d74d8" translate="yes" xml:space="preserve">
          <source>Guide: Reference manual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a69b32cf3986c2b7ac7acbcdbda8e61534fb840" translate="yes" xml:space="preserve">
          <source>Guide: System principles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2c2ebdd60572423288c669f8e6a4bab450c3df" translate="yes" xml:space="preserve">
          <source>Guide: Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06c55a5bcd005bf56c5234eb953099ffc1de3f1" translate="yes" xml:space="preserve">
          <source>Gujarati</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="265e1c23debf982bad1eb28dbf1fb86580b82eab" translate="yes" xml:space="preserve">
          <source>Gurmukhi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a82c464d40e8920d0a12d5e2c7fa455ce1ecf101" translate="yes" xml:space="preserve">
          <source>HTML presentation of test suite code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4994badab8d9e0b3f67ec8c58caac837b4abe642" translate="yes" xml:space="preserve">
          <source>HTML presentation of test suite results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes" xml:space="preserve">
          <source>HTTP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20305aa9587f9aff479101ecd817e441076f14af" translate="yes" xml:space="preserve">
          <source>HTTP option (&lt;code&gt;http_option()&lt;/code&gt;) details:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f1936f4eab83709aee013d0385ff1c94b37fcb" translate="yes" xml:space="preserve">
          <source>HTTP request method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfac1cc550ec5fe8503b865623fd3395d7a477a" translate="yes" xml:space="preserve">
          <source>HTTP server API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b6a9832e57f59fa9ba1970b4197664e77906ed" translate="yes" xml:space="preserve">
          <source>HTTP version, currently &quot;HTTP/1.1&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415221bf4b248b264aa84fda2df240cd373a09c7" translate="yes" xml:space="preserve">
          <source>Hair space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15710324ddc14a3ddc719e414d041bb782d93764" translate="yes" xml:space="preserve">
          <source>Han</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c85e2b16d60ea1dcaab2f9e4e25d96c53123be" translate="yes" xml:space="preserve">
          <source>Handle a inform message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c78d25f102ef8eda10b5a75012e8b64805bd431" translate="yes" xml:space="preserve">
          <source>Handle a notification to be sent. The filter can either accept the notification as is, return &lt;code&gt;send&lt;/code&gt;, modify the notification, return &lt;code&gt;{send, NewNotif}&lt;/code&gt; or suppress the notification, return &lt;code&gt;dont_send&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0760030c5c3f38e40c1b890da4d533b3c3fc8c" translate="yes" xml:space="preserve">
          <source>Handle a report message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fa6cc9728ceb60ac0a051db0f488d3202736ce" translate="yes" xml:space="preserve">
          <source>Handle a trap/notification message from an agent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c7fc7481552d6aff278b1c974d55353318d9fe" translate="yes" xml:space="preserve">
          <source>Handle for a specific FTP connection, see module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbda4bcf7ac58978c155de552f386a7cabd7519e" translate="yes" xml:space="preserve">
          <source>Handle for a specific SSH/SFTP connection, see module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e91cbb42fd0e3d90b67be347008953368d932a" translate="yes" xml:space="preserve">
          <source>Handle for a specific Telnet connection, see module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bec71f169580069c04eb366b2e7edd0709fd66" translate="yes" xml:space="preserve">
          <source>Handle the reply to an asynchronous request, such as &lt;code&gt;&lt;a href=&quot;snmpm#async_get&quot;&gt;async_get&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;snmpm#async_get_next&quot;&gt;async_get_next&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;snmpm#async_set&quot;&gt;async_set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b5cbd72ade701ab78a0c66eea3cc365bc59eac" translate="yes" xml:space="preserve">
          <source>Handle to the &lt;code&gt;epp&lt;/code&gt; server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200f27a9fd62c17ba568575a28f8cc78a29e0aa9" translate="yes" xml:space="preserve">
          <source>Handler configuration data for Logger. The following default values apply:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e4e5ac3ff721d07867e9b05c8337ed55ee393d3" translate="yes" xml:space="preserve">
          <source>Handler filters are added with &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; and removed with &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;. They can also be specified directly in the configuration when adding a handler with &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt; or via the Kernel configuration parameter &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa2c83d2d8b95dd0f46137f7539ec6164e318e2" translate="yes" xml:space="preserve">
          <source>Handler filters are specified when adding the handler, or added or removed during runtime with &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0065b00d67594d8a62cb8fb9796876e1d8da5ac" translate="yes" xml:space="preserve">
          <source>Handler specific configuration data is inserted by the handler callback itself, in a sub structure associated with the field named &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a11f027cd6db3a106cb106c781e7e6546c3308" translate="yes" xml:space="preserve">
          <source>Handler specific configuration, that is, configuration data related to a specific handler implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd3565abe30287cdd82dbf04dfe72c3a01322cc" translate="yes" xml:space="preserve">
          <source>Handles SSH Connection Protocol messages that may need service-specific attention. For details, see &lt;code&gt;&lt;a href=&quot;ssh_connection&quot;&gt;ssh_connection:event()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c94d64476ed5597f8322dfbff2cf130463d724" translate="yes" xml:space="preserve">
          <source>Handles messages from Erlang. The messages can either be plain data to be sent or more subtle instructions to the driver. This function is here mostly for data pumping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921a347faf64cd8a16325d957876e1c04d6d75e2" translate="yes" xml:space="preserve">
          <source>Handles messages sent by calling &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/[2,3]&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b9f0ea31717ef2e1c8cb50a77717454cf70a8b" translate="yes" xml:space="preserve">
          <source>Handles messages sent by calling &lt;code&gt;cast/2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b904f520d22bb388f5046965390b894bfa3594" translate="yes" xml:space="preserve">
          <source>Handles other messages than SSH Connection Protocol, call, or cast messages sent to the channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd2edfd14e358bb3197eb296e3226354fa0bcbd" translate="yes" xml:space="preserve">
          <source>Handles storing of scanner information when parsing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9787eca8b55e04c46475fed50a4b8ca6fa155b36" translate="yes" xml:space="preserve">
          <source>Handles the OTP-MIB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c4fd9a67f6ff85d671fb367281d35a7948d754" translate="yes" xml:space="preserve">
          <source>Handling any other memory management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b341e45d0db6d71ec15e4a0de6c3934aeec4ccd4" translate="yes" xml:space="preserve">
          <source>Handling of binary data (binaries / bit syntax).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2823aadf112ce5f5e68f202feabf8215b84b288" translate="yes" xml:space="preserve">
          <source>Handling of configuration files specifying data related to the System Under Test (SUT) (and any other variable data)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fefddaf63d1b186bf16cc5d6c16046d15037f4" translate="yes" xml:space="preserve">
          <source>Handshake, interchange node name, and authenticate (2)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51f6db8fb76d17c47c7e717ca4c6c5f2b5b4133" translate="yes" xml:space="preserve">
          <source>Handy shortcuts for common tracing settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7d4b95fcd93ad906141f781368bc43c7c7f10a" translate="yes" xml:space="preserve">
          <source>Hangul</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed413af43425a39818253cc0c5de7394d4a39735" translate="yes" xml:space="preserve">
          <source>Hanunoo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7ed76e4bc7658794475e0cb1788bf730fb9c21" translate="yes" xml:space="preserve">
          <source>Hard links are not supported on this platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7bcf0ff0ecf672bee67708eac571eebae762e22" translate="yes" xml:space="preserve">
          <source>Hard real-time systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66d0faec5f252a3b8add8ab78a2b77dfef38ca3" translate="yes" xml:space="preserve">
          <source>Hash algorithm to be used for signing the certificate together with the key option. Defaults to sha that is sha1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1abd7377d4f44f416003defcad46c11c4076434" translate="yes" xml:space="preserve">
          <source>Hash functions - &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf&quot;&gt; Secure Hash Standard&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1321.txt&quot;&gt; The MD5 Message Digest Algorithm (RFC 1321)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1320.txt&quot;&gt;The MD4 Message Digest Algorithm (RFC 1320)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36646a9df5be6ffe4361209dc14cd9eabb8a54c1" translate="yes" xml:space="preserve">
          <source>Hash tables for Erlang terms (ETS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d9fc0e303c1db9ac127804366374bdb8ad808d" translate="yes" xml:space="preserve">
          <source>Hashes &lt;code&gt;term&lt;/code&gt; according to the specified &lt;code&gt;&lt;a href=&quot;#ErlNifHash&quot;&gt;ErlNifHash&lt;/a&gt;&lt;/code&gt;&lt;code&gt;type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e30adaf0176847ba666855ceca8fa26f1db0ad" translate="yes" xml:space="preserve">
          <source>Having the source code in UTF-8 also allows you to write string literals, function names, and atoms containing Unicode characters with code points &amp;gt; 255. Module names, application names, and node names are still restricted to the ISO Latin-1 range. Binary literals, where you use type &lt;code&gt;/utf8&lt;/code&gt;, can also be expressed using Unicode characters &amp;gt; 255. Having module names or application names using characters other than 7-bit ASCII can cause trouble on operating systems with inconsistent file naming schemes, and can hurt portability, so it is not recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f670bf76875dd0a7bbc3b0854cf6973e8fd4fce" translate="yes" xml:space="preserve">
          <source>Having to generate extra random bits for small numbers costs a little performance. This function is about 20% slower than the regular &lt;code&gt;&lt;a href=&quot;#uniform_s-1&quot;&gt;uniform_s/1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4449e9b5eb52175eb4e08b8a7330653b852def9" translate="yes" xml:space="preserve">
          <source>Header elements: Module, Author - These commands insert lines on the form &lt;code&gt;-module(&lt;/code&gt;xxx&lt;code&gt;).&lt;/code&gt; and &lt;code&gt;-author('my@home').&lt;/code&gt;. They can be used directly, but are also used as part of the full headers described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fe09edcf76c414cb39902b06a907d362c636fc" translate="yes" xml:space="preserve">
          <source>Header file for configuration data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a12c4113e1bb8f1f4886664bda35d4aa27d7be74" translate="yes" xml:space="preserve">
          <source>Heading for a hidden node. A hidden node is the same as a visible node, except that it is started with the &lt;code&gt;&quot;-hidden&quot;&lt;/code&gt; flag. States the channel number for the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed55dc039cca5dcc6f8b46a4f4ace2200d528da" translate="yes" xml:space="preserve">
          <source>Heading for a node that was connected to the crashed node earlier. References (that is, process or port identifiers) to the not connected node existed at the time of the crash. States the channel number for the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952129998156402241d678235a6162ddb355874b" translate="yes" xml:space="preserve">
          <source>Heading for a visible node, that is, an alive node with a connection to the node that crashed. States the channel number for the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c243e47447e24ffdd605f179f0a2cab8a40d6b7a" translate="yes" xml:space="preserve">
          <source>Heading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa5946d7c0314c7ba622549aa822d84deddf1a7" translate="yes" xml:space="preserve">
          <source>Heading. States the module name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150c7cf2786a06b4ea8a7aed067ae6ad9d638983" translate="yes" xml:space="preserve">
          <source>Heading. States the process identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7145dfcf409c4e094b7363fa76ac09665f29cbd7" translate="yes" xml:space="preserve">
          <source>Heading. States the scheduler identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a03b6ce3444cc92f49fde9b3239e70eade9242" translate="yes" xml:space="preserve">
          <source>Heading. States the table owner (a process identifier).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410899dc76f34f1fabf6ebe98f9e99757d1588a0" translate="yes" xml:space="preserve">
          <source>Heading. States the timer owner (a process identifier), that is, the process to receive the message when the timer expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d66ec52324213cab485604b51c2b78378fa0a7" translate="yes" xml:space="preserve">
          <source>Heap binaries are small binaries, up to 64 bytes, and are stored directly on the process heap. They are copied when the process is garbage-collected and when they are sent as a message. They do not require any special handling by the garbage collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e21ed9381d58c024ca753fbeee40b36f3a6b32" translate="yes" xml:space="preserve">
          <source>Heartbeat interval, in milliseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4106d21c7ff6614f8b1f5e63e9c6e5e9cdc9e04e" translate="yes" xml:space="preserve">
          <source>Heartbeat monitoring of an Erlang runtime system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62999fd30064fd05e82c60b2a94d7ce3e73892c" translate="yes" xml:space="preserve">
          <source>Hence, 1996 is a leap year, 1900 is not, but 2000 is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e085c6d848b4c5dcb06ae3d79bc98bb5ed8aaaab" translate="yes" xml:space="preserve">
          <source>Hence, the argument entered as input is doubled as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42595144f616321737f8b5e7f141df36f0ea93d3" translate="yes" xml:space="preserve">
          <source>Hence, the previous list comprehension demonstrates the formation of the list &lt;code&gt;E#employee.name&lt;/code&gt; such that &lt;code&gt;E&lt;/code&gt; is taken from the table of employees, and attribute &lt;code&gt;sex&lt;/code&gt; of each record is equal to the atom &lt;code&gt;female&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0305883084fd7655771a803404eb6b396bb82e43" translate="yes" xml:space="preserve">
          <source>Hence, when a disc-less node needs to find the schema definitions from a remote node on the network, this information must be supplied through application parameter &lt;code&gt;-mnesia extra_db_nodes NodeList&lt;/code&gt;. Without this configuration parameter set, &lt;code&gt;Mnesia&lt;/code&gt; starts as a single node system. Also, the function &lt;code&gt;&lt;a href=&quot;mnesia#change_config-2&quot;&gt;mnesia:change_config/2&lt;/a&gt;&lt;/code&gt; can be used to assign a value to &lt;code&gt;extra_db_nodes&lt;/code&gt; and force a connection after &lt;code&gt;Mnesia&lt;/code&gt; has been started, that is, &lt;code&gt;mnesia:change_config(extra_db_nodes, NodeList)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9a6ade28837bafcd59b3b5f9e9096aa0c39c5a" translate="yes" xml:space="preserve">
          <source>Here (?(R) is the start of a conditional subpattern, with two different alternatives for the recursive and non-recursive cases. Item (?R) is the actual recursive call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95eada3e2f0063def4189cbe7e1ac07f33e51ad4" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;&quot;mysystem&quot;&lt;/code&gt; is the base release and &lt;code&gt;&quot;mysystem2&quot;&lt;/code&gt; is the release to upgrade to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ae7fc887a9fc509a0c94f1f548abf5e88538b2" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;+W w&lt;/code&gt; and &lt;code&gt;+R 9&lt;/code&gt; are emulator flags. &lt;code&gt;-s my_init&lt;/code&gt; is an init flag, interpreted by &lt;code&gt;init&lt;/code&gt;. &lt;code&gt;-sname arnie&lt;/code&gt; is a user flag, stored by &lt;code&gt;init&lt;/code&gt;. It is read by Kernel and causes the Erlang runtime system to become distributed. Finally, everything after &lt;code&gt;-extra&lt;/code&gt; (that is, &lt;code&gt;+bertie&lt;/code&gt;) is considered as plain arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18878a7a47d8170e6d38bdbab2ec1dd97fe93f48" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Binary&lt;/code&gt; is an Erlang binary that contains the encoded data. (If option &lt;code&gt;legacy_erlang_types&lt;/code&gt; has been given, only the binary is returned.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37df4c092f43bb499bc403c1f4e4f375ce537f8f" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;BytesForOpenType&lt;/code&gt; is a list of bytes constituting the encoding of the &quot;unknown&quot; &lt;code&gt;CHOICE&lt;/code&gt; alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f5f684a77da256af5aa4d76e5b9497068275f5" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Fd&lt;/code&gt; was specified to function &lt;code&gt;init/3&lt;/code&gt; as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d075fd5d42e82f879a36d53b74d7b98bbbfc33" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M0&lt;/code&gt; is any map. It follows that &lt;code&gt;M1 .. M4&lt;/code&gt; are maps as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5980443888fa1217e79c3bb79e1e66f80464dd29" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is a term of type map and &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are any expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f20246edf736a721e4d108cf1124970da81a07" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is a term of type map, &lt;code&gt;V&lt;/code&gt; is an expression and &lt;code&gt;K&lt;/code&gt; is an expression that evaluates to an existing key in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6105a70c4b87b25ae269fb373351faa4cb7f203" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is any map. The key &lt;code&gt;K&lt;/code&gt; must be an expression with bound variables or literals. &lt;code&gt;V&lt;/code&gt; can be any pattern with either bound or unbound variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa51aff5e200195c56f9fac50cfa48993ce7499" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Node&lt;/code&gt; is the old node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40663b6a0bc17a6c5bb5be7fc0a8ec85eb9e5df4" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Node&lt;/code&gt; is the terminated node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa26917569777b811a459c8edac3b1f6928d1a9" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;X&lt;/code&gt; gets the value &lt;code&gt;paris&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;&lt;code&gt;{f,28}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0491a2d3210236bc79073f011f175603cf95e651" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;bin&lt;/code&gt; is a driver binary of length at least 50 and &lt;code&gt;drvport&lt;/code&gt; is a port handle. Notice that &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; comes after the elements of the list, likewise &lt;code&gt;ERL_DRV_TUPLE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03614fcdf5fd8628354c2dc566e6863e0b8468ca" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;format_temps/1&lt;/code&gt; calls &lt;code&gt;convert_list_to_c/1&lt;/code&gt;. &lt;code&gt;convert_list_to_c/1&lt;/code&gt; takes off the head of the &lt;code&gt;List_of_cities&lt;/code&gt;, converts it to Celsius if needed. The | operator is used to add the (maybe) converted to the converted rest of the list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d41f0b5f278025a79f179eb50cbcf1d17def2de" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;kb.example.org&lt;/code&gt; serves any protocol while &lt;code&gt;www.example.org&lt;/code&gt; presents a secure web server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36f1eb025a53a1dc6cfb7f8014034366d975093" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;pipe_name&lt;/code&gt; defaults to &lt;code&gt;/tmp/erlang.pipe.N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="445ee2128dde70c3cdab895146aba251b7587bf5" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;ref&lt;/code&gt; is a &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; the corresponding &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_opt&quot;&gt;transport_opt()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; list passed to &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;watchdog&lt;/code&gt; entry shows the state of a connection's RFC 3539 watchdog state machine. The &lt;code&gt;peer&lt;/code&gt; entry identifies the &lt;code&gt;&lt;code&gt;diameter_app:peer_ref()&lt;/code&gt;&lt;/code&gt; for which there will have been &lt;code&gt;peer_up/3&lt;/code&gt; callbacks for the Diameter applications identified by the &lt;code&gt;apps&lt;/code&gt; entry, &lt;code&gt;common&lt;/code&gt; being the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#application_alias&quot;&gt;application_alias()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;. The &lt;code&gt;caps&lt;/code&gt; entry identifies the capabilities sent by the local node and received from the peer during capabilities exchange. The &lt;code&gt;port&lt;/code&gt; entry displays socket-level information about the transport connection. The &lt;code&gt;statistics&lt;/code&gt; entry presents Diameter-level counters, an entry like &lt;code&gt;{{{0,280,1},recv},2}&lt;/code&gt; saying that the client has received 2 DWR messages: &lt;code&gt;{0,280,1} = {Application_Id, Command_Code, R_Flag}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff06bab188b6989420caf73f4bedde0091d8f752" translate="yes" xml:space="preserve">
          <source>Here a &lt;code&gt;TestDir&lt;/code&gt; can be used to point out the path to a &lt;code&gt;Suite&lt;/code&gt;. Option &lt;code&gt;testcase&lt;/code&gt; corresponds to option &lt;code&gt;-case&lt;/code&gt; in program &lt;code&gt;ct_run&lt;/code&gt;. Configuration files specified in &lt;code&gt;Opts&lt;/code&gt; are installed automatically at startup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d215e0a4d1f50aa10db8d5770d81f093532091e" translate="yes" xml:space="preserve">
          <source>Here a system configuration with an MG and MGC residing in one Erlang node each is outlined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f9cd42bd3f2f651c624dd6456d93b42bb7d908" translate="yes" xml:space="preserve">
          <source>Here also the path to the &lt;code&gt;pea-1.0&lt;/code&gt; ebin directory is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37285c244117c11d8428f0cbdceb6d27dd880c01" translate="yes" xml:space="preserve">
          <source>Here are a few suggestions for how to avoid deadlock:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64246a03dadd5871d19e3c38c5d243139b6de281" translate="yes" xml:space="preserve">
          <source>Here d is any number of decimal digits. However, the value of the setting must be less than the value set by the caller of &lt;code&gt;run/3&lt;/code&gt; for it to have any effect. That is, the pattern writer can lower the limit set by the programmer, but not raise it. If there is more than one setting of one of these limits, the lower value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c6e27284216f0fe5f85c8a2e068c1f3dc4d9db" translate="yes" xml:space="preserve">
          <source>Here each &lt;code&gt;ValueI&lt;/code&gt; is the default value for &lt;code&gt;FieldI&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4292ce9c08f629230d2ca9c9a4b58e4451d521bd" translate="yes" xml:space="preserve">
          <source>Here follows a series of examples ranging from simple to more complex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de541520f50013aebeb6484b87ccc69628a3a4f" translate="yes" xml:space="preserve">
          <source>Here follows a simple example of turning a gen_fsm into a &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt;. The example comes from the previous Users Guide for &lt;code&gt;gen_fsm&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056d3b9258e32cd2a4368560fe9287c17631f021" translate="yes" xml:space="preserve">
          <source>Here follows a simple test specification example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a5f798f4fca1457852fb5ded06b31390f422db" translate="yes" xml:space="preserve">
          <source>Here follows a summary of the settings affecting Unicode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36f3b865fe0de9bfe34af31066b4e1fd4775070c" translate="yes" xml:space="preserve">
          <source>Here follows an example of a text message to give a feeling of the difference between the pretty and compact versions of text messages. First the pretty printed, well indented version with long keywords:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f638f5d7f0c6d062a7666cb5822d5e70a90f9fb" translate="yes" xml:space="preserve">
          <source>Here follows an example of a text message to give a feeling of the difference between the pretty and compact versions of text messages. First the pretty, well indented version with long keywords:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d190124d61370d24019073f53f96c2b39b3a1c" translate="yes" xml:space="preserve">
          <source>Here follows some questions that you might have after reading this section with corresponding tips and links to the answers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5e0247c5bebffe1acdce6f9b2820393133d959" translate="yes" xml:space="preserve">
          <source>Here follows the function of the old API. These functions only work on a list of Latin-1 characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3bb36613c3cfade2e1099d8162ab6ab7c75926" translate="yes" xml:space="preserve">
          <source>Here follows type definitions that are used by more than one function in the ODBC API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdd0b6622fc9da41960fdfdea1968c18c462ed7" translate="yes" xml:space="preserve">
          <source>Here is a bit more complex calculation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d349cc2e55bbdec82aca8231149986fa8cec97cd" translate="yes" xml:space="preserve">
          <source>Here is a function call as &lt;code&gt;convert_to_celsius({moscow,{c,-10}})&lt;/code&gt; as the argument to the function &lt;code&gt;print_temp&lt;/code&gt;. When function calls are &lt;strong&gt;nested&lt;/strong&gt; like this, they execute (evaluate) from the inside out. That is, first &lt;code&gt;convert_to_celsius({moscow,{c,-10}})&lt;/code&gt; is evaluated, which gives the value &lt;code&gt;{moscow,{c,-10}}&lt;/code&gt; as the temperature is already in Celsius. Then &lt;code&gt;print_temp({moscow,{c,-10}})&lt;/code&gt; is evaluated. The function &lt;code&gt;convert_to_celsius&lt;/code&gt; works in a similar way to the &lt;code&gt;convert_length&lt;/code&gt; function in the previous example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00e38b026becd87996568d41fcc3b8f1d79752be" translate="yes" xml:space="preserve">
          <source>Here is an example of this option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82a08ca8184b592a01eaaa55a20f8527f4cca1b8" translate="yes" xml:space="preserve">
          <source>Here is an overview what has been done so far:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368746ba7f8d7397bdc8b79dac1f30fb770a5d1c" translate="yes" xml:space="preserve">
          <source>Here is defined a function that doubles the value of a number and assigned this function to a variable. Thus &lt;code&gt;Xf(5)&lt;/code&gt; returns value 10. Two useful functions when working with lists are &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;, which are defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce731a790a4205763d05d03b9cf196ef4e9261e" translate="yes" xml:space="preserve">
          <source>Here is how to accomplish the state time-out in the previous example by instead using a generic time-out named for example &lt;code&gt;open&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d2cc3be9345b9bae90d4c70bae158e4ffa9f78" translate="yes" xml:space="preserve">
          <source>Here is how to accomplish the state time-out in the previous example by instead using an Erlang Timer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaf5ed4c0dabc7f41cc89c5f4a3aa5a863561e75" translate="yes" xml:space="preserve">
          <source>Here is only considered the case when Erlang/OTP is running on a UNIX system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f17fc708829cfc6fb00458e5b09fdb85b5ef940" translate="yes" xml:space="preserve">
          <source>Here is the ping pong example modified to run on two separate nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274b953d352c36df895d0e17f80b41429f1a2865" translate="yes" xml:space="preserve">
          <source>Here keys &lt;code&gt;K1 .. Kn&lt;/code&gt; are any expressions with literals or bound variables. If all keys exist in map &lt;code&gt;M&lt;/code&gt;, all variables in &lt;code&gt;V1 .. Vn&lt;/code&gt; is matched to the associated values of their respective keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f329541992e8d01a4e5a912d3401c2919e27cf" translate="yes" xml:space="preserve">
          <source>Here more than one list is built. In each iteration step a new list is created that is one element longer than the new previous list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4207694f60edbd73e98081488a51ba1699a0f859" translate="yes" xml:space="preserve">
          <source>Here only the Kernel and STDLIB applications are started, that is, the system is started as an ordinary development system. Only two files are needed for all this to work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a01cbab019a5244984e7111de8ade2f66f53c2f" translate="yes" xml:space="preserve">
          <source>Here some initialization is done, &lt;code&gt;start&lt;/code&gt; is called from &lt;code&gt;open_port&lt;/code&gt;. The data will be passed to &lt;code&gt;control&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8285a3adddfb3c22982d47841765517ced8bef67" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;start/0&lt;/code&gt; function,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1513bbb3276cbd3a38ec95089202ddef094a3d" translate="yes" xml:space="preserve">
          <source>Here the Ti's are atoms (the name of the type) and the Ai's are their arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b79b4c75297735efc429805d3857e3fd989ff1f" translate="yes" xml:space="preserve">
          <source>Here the concept of an &lt;strong&gt;anonymous variable&lt;/strong&gt; &quot;_&quot; is introduced. This is simply shorthand for a variable that gets a value, but the value is ignored. This can be used anywhere suitable, not just in funs. &lt;code&gt;Temp1 &amp;lt; Temp2&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Temp1&lt;/code&gt; is less than &lt;code&gt;Temp2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3c6eb665702670ccab0184a2424627dfa000a9" translate="yes" xml:space="preserve">
          <source>Here the empty binary (&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;) represents the unassigned subpattern. In the &lt;code&gt;binary&lt;/code&gt; case, some information about the matching is therefore lost, as &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; can also be an empty string captured.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abd874c2e02ed54ed46fd6eb351fd6b4434ff43" translate="yes" xml:space="preserve">
          <source>Here the file I/O server returns all available options for a file, which are the expected ones, &lt;code&gt;encoding&lt;/code&gt; and &lt;code&gt;binary&lt;/code&gt;. However, the standard shell has some more options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b28a4e54bbbd54cef63a1e3115ada96bc39316" translate="yes" xml:space="preserve">
          <source>Here the function &lt;code&gt;fac&amp;gt;&lt;/code&gt; in module &lt;code&gt;tut1&lt;/code&gt; is called with argument &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e0ad7418ef3374cc17d038856a722ae97d8a0c" translate="yes" xml:space="preserve">
          <source>Here the regular expression first matched the &quot;l&quot;, causing &quot;Er&quot; to be the first part in the result. When the regular expression matched, the (only) subexpression was bound to the &quot;l&quot;, so the &quot;l&quot; is inserted in the group together with &quot;Er&quot;. The next match is of the &quot;n&quot;, making &quot;a&quot; the next part to be returned. As the subexpression is bound to substring &quot;n&quot; in this case, the &quot;n&quot; is inserted into this group. The last group consists of the remaining string, as no more matches are found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da2c5952d714e65a29c19457fda0a08e5b2194a" translate="yes" xml:space="preserve">
          <source>Here the return value correspondingly points out all of the string, beginning at index 0, and it is 10 characters long:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8588926d91ef055e0e752b5cc02d17b611653864" translate="yes" xml:space="preserve">
          <source>Here the shell detects lists containing printable characters or binaries containing printable characters in bytewise or UTF-8 encoding. But what is a printable character? One view is that anything the Unicode standard thinks is printable, is also printable according to the heuristic detection. The result is then that almost any list of integers are deemed a string, and all sorts of characters are printed, maybe also characters that your terminal lacks in its font set (resulting in some unappreciated generic output). Another way is to keep it backward compatible so that only the ISO Latin-1 character set is used to detect a string. A third way is to let the user decide exactly what Unicode ranges that are to be viewed as characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74160bc743886e5a3198a381b4d2136a5e539152" translate="yes" xml:space="preserve">
          <source>Here the signature and message in the last example is verifyed using the public key. The public key is stored in an engine, only to exemplify that it is possible. The public key could of course be handled openly as usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2d4f1fdcedde1498c2f363b018c87e4697de1db" translate="yes" xml:space="preserve">
          <source>Here the user flag &lt;code&gt;-myflag 1&lt;/code&gt; is passed to and stored by the &lt;code&gt;init&lt;/code&gt; process. It is a user-defined flag, presumably used by some user-defined application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="402b80a6663c605b1c8ebefde4ea19bbe39ddf28" translate="yes" xml:space="preserve">
          <source>Here we also handle the mode (&lt;code&gt;binary&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt;) that can be set by request &lt;code&gt;setopts&lt;/code&gt;. By default, all OTP I/O servers send data back to the client as lists, but switching mode to &lt;code&gt;binary&lt;/code&gt; can increase efficiency if the I/O server handles it in an appropriate way. The implementation of &lt;code&gt;get_until&lt;/code&gt; is difficult to get efficient, as the supplied function is defined to take lists as arguments, but &lt;code&gt;get_chars&lt;/code&gt; and &lt;code&gt;get_line&lt;/code&gt; can be optimized for binary mode. However, this example does not optimize anything.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
