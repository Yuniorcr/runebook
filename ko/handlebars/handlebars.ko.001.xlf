<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="handlebars">
    <body>
      <group id="handlebars">
        <trans-unit id="82fdc59d6d8b81fa332805fb61d7b416700fe5c7" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2011&amp;ndash;2017 by Yehuda Katz</source>
          <target state="translated">&amp;copy; 2011&amp;ndash;2017 예후 다 카츠</target>
        </trans-unit>
        <trans-unit id="9ee9b17d6527b2bac964452ccd984c32c62f3730" translate="yes" xml:space="preserve">
          <source>**Note**: The S3 builds page is provided as a convenience for the community, but you should not use it for hosting Handlebars in production.</source>
          <target state="translated">** 참고 ** : S3 빌드 페이지는 커뮤니티의 편의를 위해 제공되지만 프로덕션 환경에서 핸들 바를 호스팅하는 데 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="81dd05638d04bf6624f401d1573a3f5c21074f2e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.jsdelivr.com/#!handlebarsjs&quot;&gt;jsDelivr&lt;/a&gt;. Advanced usage, such as &lt;a href=&quot;https://github.com/jsdelivr/jsdelivr#usage&quot;&gt;version aliasing &amp;amp; concocting&lt;/a&gt;, is available.</source>
          <target state="translated">&lt;a href=&quot;http://www.jsdelivr.com/#!handlebarsjs&quot;&gt;jsDelivr&lt;/a&gt; . &lt;a href=&quot;https://github.com/jsdelivr/jsdelivr#usage&quot;&gt;버전 앨리어싱 및 Concocting&lt;/a&gt; 과 같은 고급 사용법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85a72ea2ce26d16b7647bf32e6b9f35e699de829" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assumeObjects&lt;/code&gt;: Removes object existence checks when traversing paths. This is a subset of &lt;code&gt;strict&lt;/code&gt; mode that generates optimized templates when the data inputs are known to be safe.</source>
          <target state="translated">&lt;code&gt;assumeObjects&lt;/code&gt; : 경로를 통과 할 때 객체 존재 확인을 제거합니다. 데이터 입력이 안전한 것으로 알려진 경우 최적화 된 템플릿을 생성 하는 &lt;code&gt;strict&lt;/code&gt; 모드 의 하위 집합입니다 .</target>
        </trans-unit>
        <trans-unit id="0611bd4ca193d69ecc39d4942c30dcf6841dcd00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compat&lt;/code&gt;: Set to true to enable recursive field lookup.</source>
          <target state="translated">&lt;code&gt;compat&lt;/code&gt; : 재귀 필드 조회를 사용하려면 true로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="2d1eff59f12ae2669be42e847921bfcd70ca5792" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; Pass in an object to define custom &lt;code&gt;@variable&lt;/code&gt; private variables.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 사용자 정의 &lt;code&gt;@variable&lt;/code&gt; 개인 변수 를 정의하기 위해 객체를 전달 합니다.</target>
        </trans-unit>
        <trans-unit id="9dc6b3a74952a73292d3f3bb17d78a526a678503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt;: Set to false to disable &lt;code&gt;@data&lt;/code&gt; tracking.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; : &lt;code&gt;@data&lt;/code&gt; 추적 을 비활성화하려면 false로 설정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7efd81c5fa5089441dd6ffcdbef0e8b0b2eb3b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destName&lt;/code&gt;: Optional parameter used in conjunction with &lt;code&gt;srcName&lt;/code&gt; to provide a destination file name when generating source maps.</source>
          <target state="translated">&lt;code&gt;destName&lt;/code&gt; : 소스 맵을 생성 할 때 대상 파일 이름을 제공하기 위해 &lt;code&gt;srcName&lt;/code&gt; 과 함께 사용되는 선택적 매개 변수 입니다.</target>
        </trans-unit>
        <trans-unit id="402440740a49ec0f332c955093773055dc65861a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;explicitPartialContext&lt;/code&gt;: Disables implicit context for partials. When enabled, partials that are not passed a context value will execute against an empty object.</source>
          <target state="translated">&lt;code&gt;explicitPartialContext&lt;/code&gt; : 부분에 대한 암시 적 컨텍스트를 비활성화합니다. 활성화하면 컨텍스트 값이 전달되지 않은 부분이 빈 객체에 대해 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="8f6d46c422bece4851a3097e2e1cf6fbf7620ec8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;helpers&lt;/code&gt; Pass in to provide custom helpers in addition to the globally defined helpers.</source>
          <target state="translated">&lt;code&gt;helpers&lt;/code&gt; 세계적으로 정의 된 헬퍼 외에도 사용자 정의 헬퍼를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="869f1745c6c34890f74da6d7f723b237bf9a6d04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignoreStandalone&lt;/code&gt;: Disables standalone tag removal when set to &lt;code&gt;true&lt;/code&gt;. When set, blocks and partials that are on their own line will not remove the whitespace on that line.</source>
          <target state="translated">&lt;code&gt;ignoreStandalone&lt;/code&gt; : &lt;code&gt;true&lt;/code&gt; 로 설정하면 독립형 태그 제거를 사용하지 않습니다 . 설정하면 자체 행에있는 블록 및 부분은 해당 행의 공백을 제거하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="665732b07536bafd6b4d5f750f0383518c01b909" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;knownHelpers&lt;/code&gt;: Hash containing list of helpers that are known to exist (truthy) at template execution time. Passing this allows the compiler to optimize a number of cases. Builtin helpers are automatically included in this list and may be omitted by setting that value to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;knownHelpers&lt;/code&gt; : 템플릿 실행시 존재하는 것으로 알려진 도우미 목록을 포함하는 해시. 이것을 전달하면 컴파일러가 여러 경우를 최적화 할 수 있습니다. 내장 헬퍼는이 목록에 자동으로 포함되며 해당 값을 &lt;code&gt;false&lt;/code&gt; 로 설정하여 생략 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="221ce2ab4586ba5e058dcc317afe4f10591a21c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;knownHelpersOnly&lt;/code&gt;: Set to true to allow further optimzations based on the known helpers list.</source>
          <target state="translated">&lt;code&gt;knownHelpersOnly&lt;/code&gt; : 알려진 도우미 목록을 기반으로 추가 최적화를 허용하려면 true로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="47acf8127d725cb9195e60c85ba9b82621783eca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noEscape&lt;/code&gt;: Set to true to not HTML escape any content.</source>
          <target state="translated">&lt;code&gt;noEscape&lt;/code&gt; : 내용을 HTML 이스케이프하지 않으려면 true로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="2db8fa4baea0c180a4f3ec80bdc67d47cca1e3fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;partials&lt;/code&gt; Pass in to provide custom partials in addition to the globally defined partials.</source>
          <target state="translated">&lt;code&gt;partials&lt;/code&gt; 전역 적으로 정의 된 부분 외에도 사용자 지정 부분을 제공하려면 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="23a544dd3bb859aac40ee1bc603d46524d68901d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;preventIndent&lt;/code&gt;: By default, an indented partial-call causes the output of the whole partial being indented by the same amount. This can lead to unexpected behavior when the partial writes &lt;code&gt;pre&lt;/code&gt;-tags. Setting this option to &lt;code&gt;true&lt;/code&gt; will disable the auto-indent feature.</source>
          <target state="translated">&lt;code&gt;preventIndent&lt;/code&gt; : 기본적으로 들여 쓰기 된 부분 호출은 전체 부분의 출력이 같은 양만큼 들여 쓰기되도록합니다. 이로 인해 부분 쓰기가 &lt;code&gt;pre&lt;/code&gt; 태그를 작성할 때 예기치 않은 동작이 발생할 수 있습니다 . 이 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하면 자동 들여 쓰기 기능이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="225f68cadb039abc8f93fd3edf95ca60326a0b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;srcName&lt;/code&gt;: Passed to generate the source map for the input file. When run in this manner, the return structure is &lt;code&gt;{code, map}&lt;/code&gt; with &lt;code&gt;code&lt;/code&gt; containing the template definition and &lt;code&gt;map&lt;/code&gt; containing the source map.</source>
          <target state="translated">&lt;code&gt;srcName&lt;/code&gt; : 입력 파일의 소스 맵을 생성하기 위해 전달됩니다. 이러한 방식으로 실행될 때 리턴 구조는 템플리트 정의를 포함하는 &lt;code&gt;code&lt;/code&gt; 와 소스 맵을 포함하는 &lt;code&gt;map&lt;/code&gt; 이있는 &lt;code&gt;{code, map}&lt;/code&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="c0e754080692fed3a5a21bd0b4f1f450aa5e3668" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strict&lt;/code&gt;: Run in strict mode. In this mode, templates will throw rather than silently ignore missing fields. This has the side effect of disabling inverse operations such as &lt;code&gt;{{^foo}}{{/foo}}&lt;/code&gt; unless fields are explicitly included in the source object.</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; : 엄격 모드에서 실행합니다. 이 모드에서 템플릿은 누락 된 필드를 자동으로 무시하지 않고 발생합니다. 이는 필드가 소스 오브젝트에 명시 적으로 포함되지 않는 한 &lt;code&gt;{{^foo}}{{/foo}}&lt;/code&gt; 와 같은 역 연산을 사용 불가능하게하는 부작용이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="249283d699bcff99a3912e577c10b57ce3494f5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;with&lt;/code&gt; can also be used with block parameters to define known references in the current block. The example above can be converted to</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 를 블록 매개 변수와 함께 사용하여 현재 블록에서 알려진 참조를 정의 할 수 있습니다. 위의 예는</target>
        </trans-unit>
        <trans-unit id="d26c226ad7c181e255fb0d8a829352ed98c4cee9" translate="yes" xml:space="preserve">
          <source>@data Variables</source>
          <target state="translated">@data 변수</target>
        </trans-unit>
        <trans-unit id="20e5673536c2f675ba59e6bedd4bf0a8bdcd4f91" translate="yes" xml:space="preserve">
          <source>@first</source>
          <target state="translated">@first</target>
        </trans-unit>
        <trans-unit id="3471c2205065424098cd91917acaccc55160350b" translate="yes" xml:space="preserve">
          <source>@index</source>
          <target state="translated">@index</target>
        </trans-unit>
        <trans-unit id="12e2bb44e82236dffdb45df6078f72b194a96076" translate="yes" xml:space="preserve">
          <source>@key</source>
          <target state="translated">@key</target>
        </trans-unit>
        <trans-unit id="db5f5b00cc64b717558fdc19a09d4f529f885c4b" translate="yes" xml:space="preserve">
          <source>@last</source>
          <target state="translated">@last</target>
        </trans-unit>
        <trans-unit id="059ef802fb4e0ce2471515933f12e6564de94a5e" translate="yes" xml:space="preserve">
          <source>@level</source>
          <target state="translated">@level</target>
        </trans-unit>
        <trans-unit id="b22d9eba7cf2fc0d655c5e41b6b5d4c104ac7526" translate="yes" xml:space="preserve">
          <source>@root</source>
          <target state="translated">@root</target>
        </trans-unit>
        <trans-unit id="18f2d732ff8c810749d8c6d9ed341db8ff7358f4" translate="yes" xml:space="preserve">
          <source>A Handlebars helper call is a simple identifier, followed by zero or more parameters (separated by space). Each parameter is a Handlebars expression.</source>
          <target state="translated">Handlebars 도우미 호출은 간단한 식별자이며 0 개 이상의 매개 변수 (공백으로 구분)가 뒤에옵니다. 각 매개 변수는 Handlebars 표현식입니다.</target>
        </trans-unit>
        <trans-unit id="29488c6a4b7acfff1bf5f7c234f950a7158741f4" translate="yes" xml:space="preserve">
          <source>A common use-case for block helpers is using them to define custom iterators. In fact, all Handlebars built-in helpers are defined as regular Handlebars block helpers. Let's take a look at how the built-in &lt;code&gt;each&lt;/code&gt; helper works.</source>
          <target state="translated">블록 헬퍼의 일반적인 사용 사례는이를 사용하여 사용자 정의 반복자를 정의하는 것입니다. 실제로 모든 핸들 바 내장 헬퍼는 일반 핸들 바 블록 헬퍼로 정의됩니다. 내장 된 &lt;code&gt;each&lt;/code&gt; 도우미의 작동 방식을 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="79e9bdcd9f2a456a729334893ae6be4ae56462ae" translate="yes" xml:space="preserve">
          <source>A handlebars expression is a &lt;code&gt;{{&lt;/code&gt;, some contents, followed by a &lt;code&gt;}}&lt;/code&gt;</source>
          <target state="translated">핸들 바 표현식은 &lt;code&gt;{{&lt;/code&gt; , 일부 내용, &lt;code&gt;}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b3b687e61195cb7cf586277c5dc8c848b0c1758" translate="yes" xml:space="preserve">
          <source>A number of &lt;a href=&quot;builtin_helpers&quot;&gt;builtin helpers&lt;/a&gt; support block parameters and any custom helper may provide them through the &lt;code&gt;blockParams&lt;/code&gt; options field.</source>
          <target state="translated">다수의 &lt;a href=&quot;builtin_helpers&quot;&gt;내장 헬퍼가&lt;/a&gt; 블록 매개 변수를 지원하며 모든 사용자 정의 헬퍼는 &lt;code&gt;blockParams&lt;/code&gt; 옵션 필드를 통해이를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API 참조</target>
        </trans-unit>
        <trans-unit id="ad2a25db1763c0f8d35fecb15f64452c9a6c56e6" translate="yes" xml:space="preserve">
          <source>Actually, it means &quot;look for a helper named &lt;code&gt;title&lt;/code&gt;, then do the above&quot;, but we'll get to that soon enough.</source>
          <target state="translated">실제로 &quot; &lt;code&gt;title&lt;/code&gt; 이라는 도우미 를 찾은 다음 위와 같이하십시오&quot;를 의미하지만 곧 그렇게 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="a61032cc99aba0cd5f421767b2de45610dd4ddd6" translate="yes" xml:space="preserve">
          <source>Additionally for object iteration, &lt;code&gt;{{@key}}&lt;/code&gt; references the current key name:</source>
          <target state="translated">또한 객체 반복의 경우 &lt;code&gt;{{@key}}&lt;/code&gt; 는 현재 키 이름을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="123a2eb0c17a609bdd99f61184013f931d803a86" translate="yes" xml:space="preserve">
          <source>All of Handlebar's released versions and CI builds are available for download on S3 in our &lt;a href=&quot;http://builds.handlebarsjs.com.s3.amazonaws.com/bucket-listing.html?sort=lastmod&amp;amp;sortdir=desc&quot;&gt;builds page&lt;/a&gt;.</source>
          <target state="translated">모든 핸들 바의 출시 버전 및 CI 빌드는 &lt;a href=&quot;http://builds.handlebarsjs.com.s3.amazonaws.com/bucket-listing.html?sort=lastmod&amp;amp;sortdir=desc&quot;&gt;빌드 페이지&lt;/a&gt; 에서 S3로 다운로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d0506e284173af3f53df4c75a8d2c0de53383fa" translate="yes" xml:space="preserve">
          <source>Also ensure that the &lt;code&gt;data&lt;/code&gt; field is defined prior to attempting to interact with an existing data object. The private variable behavior is condtionally compiled and some templates might not create this field.</source>
          <target state="translated">또한 기존 데이터 개체와 상호 작용하기 전에 &lt;code&gt;data&lt;/code&gt; 필드가 정의되어 있는지 확인하십시오 . 전용 변수 동작은 조건부로 컴파일되며 일부 템플릿은이 필드를 생성하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e47ad463543df46857670d50a1afde4fd3ebb655" translate="yes" xml:space="preserve">
          <source>Also supports registering multiple decorators at once.</source>
          <target state="translated">한 번에 여러 데코레이터 등록을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ca6d1ac34d3739c174edfb102b845e2748eff308" translate="yes" xml:space="preserve">
          <source>Also supports registering multiple helpers at once.</source>
          <target state="translated">한 번에 여러 헬퍼 등록을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="01e8f5c1b4e46acbf62d36d47d8d0189be5f15d5" translate="yes" xml:space="preserve">
          <source>Also supports registering multiple partials at once.</source>
          <target state="translated">한 번에 여러 부분 등록을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="07f793ce9d9d243e47ba520185fd6de4da9bf3a1" translate="yes" xml:space="preserve">
          <source>Another common use-case for block helpers is to evaluate conditional statements. As with the iterators, Handlebars' built-in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;unless&lt;/code&gt; control structures are implemented as regular Handlebars helpers.</source>
          <target state="translated">블록 헬퍼의 또 다른 일반적인 사용 사례는 조건문을 평가하는 것입니다. 반복자와 마찬가지로, 핸들 바 '내장 된 &lt;code&gt;if&lt;/code&gt; 와 &lt;code&gt;unless&lt;/code&gt; 제어 구조는 일반 핸들 바 헬퍼로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="8e9d904e29db8e67076d93a94d792a671d03ef79" translate="yes" xml:space="preserve">
          <source>Any comments that must contain &lt;code&gt;}}&lt;/code&gt; or other handlebars tokens should use the &lt;code&gt;{{!-- --}}&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;code&gt;}}&lt;/code&gt; 또는 다른 핸들 바 토큰을 포함해야하는 주석은 &lt;code&gt;{{!-- --}}&lt;/code&gt; 구문을 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="504aeb3d81e863333863b1a56ef6371f1d5a9b27" translate="yes" xml:space="preserve">
          <source>Any helpers defined in this manner will take precedence over fields defined in the context. To access a field that is masked by a helper, a path reference may be used. In the example above a field named &lt;code&gt;noop&lt;/code&gt; on the context object would be referenced using:</source>
          <target state="translated">이러한 방식으로 정의 된 모든 도우미는 컨텍스트에 정의 된 필드보다 우선합니다. 헬퍼가 마스킹 한 필드에 액세스하기 위해 경로 참조를 사용할 수 있습니다. 위의 예제 에서 컨텍스트 객체의 &lt;code&gt;noop&lt;/code&gt; 필드 는 다음을 사용하여 참조됩니다.</target>
        </trans-unit>
        <trans-unit id="1e4a7c773cbfbbabf7d482442a1b4b9710452b02" translate="yes" xml:space="preserve">
          <source>Any number of arguments may be passed to this method and all will be forwarded to the logger.</source>
          <target state="translated">이 메소드에는 여러 개의 인수가 전달 될 수 있으며 모든 인수는 로거로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="6368def1364f5515885d45ae04ff46b8bec457d2" translate="yes" xml:space="preserve">
          <source>Any of the above would cause the &lt;code&gt;name&lt;/code&gt; field on the current context to be used rather than a helper of the same name.</source>
          <target state="translated">위의 어떤 것도 현재 컨텍스트 의 &lt;code&gt;name&lt;/code&gt; 필드가 같은 이름의 도우미가 아닌 사용되도록합니다.</target>
        </trans-unit>
        <trans-unit id="2d9d75038917fb2a77568c5b9472540937114e4b" translate="yes" xml:space="preserve">
          <source>Array with length 0</source>
          <target state="translated">길이가 0 인 배열</target>
        </trans-unit>
        <trans-unit id="e8fe6bd6aef0924d816f84cd8e07bba62d45b62c" translate="yes" xml:space="preserve">
          <source>Assigned log level.</source>
          <target state="translated">할당 된 로그 수준.</target>
        </trans-unit>
        <trans-unit id="077fe9c54ed5ed26fa547f4ded3ef9a9bb066d65" translate="yes" xml:space="preserve">
          <source>Base</source>
          <target state="translated">Base</target>
        </trans-unit>
        <trans-unit id="59aa7aafc2e3934fea3910384b6b920193627acd" translate="yes" xml:space="preserve">
          <source>Basic Block Variation</source>
          <target state="translated">기본 블록 변형</target>
        </trans-unit>
        <trans-unit id="743e027fa71a0214383d1f5e75142bb68e29a167" translate="yes" xml:space="preserve">
          <source>Basic Blocks</source>
          <target state="translated">기본 블록</target>
        </trans-unit>
        <trans-unit id="f3ddb0c3c7c9bda3dc23bab65f23c421fc9f535c" translate="yes" xml:space="preserve">
          <source>Basic Partials</source>
          <target state="translated">기본 부분</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="2f325784cbcac9c57f508bcb6ea54e88c7fbe5ad" translate="yes" xml:space="preserve">
          <source>Because you are precompiling templates, you can also apply several optimization to the compiler. The first allows you to specify a list of the known helpers to the compiler</source>
          <target state="translated">템플릿을 사전 컴파일하고 있으므로 컴파일러에 여러 최적화를 적용 할 수도 있습니다. 첫 번째는 알려진 도우미 목록을 컴파일러에 지정할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="21ec0262d032949d39464afc40f43b365e9e11f7" translate="yes" xml:space="preserve">
          <source>Block Expressions</source>
          <target state="translated">블록 표현</target>
        </trans-unit>
        <trans-unit id="b8f3d75f343c38c102bfdb5a199a3f4b2dfc9be8" translate="yes" xml:space="preserve">
          <source>Block Helpers</source>
          <target state="translated">도우미 차단</target>
        </trans-unit>
        <trans-unit id="557758c8174336d6369c72e1c97a88e6c9ef1fba" translate="yes" xml:space="preserve">
          <source>Block Parameters</source>
          <target state="translated">블록 매개 변수</target>
        </trans-unit>
        <trans-unit id="632e84959eaf7d099b8d652fa01fd577a662ca53" translate="yes" xml:space="preserve">
          <source>Block expressions allow you to define helpers that will invoke a section of your template with a different context than the current. These block helpers are identified by a &lt;code&gt;#&lt;/code&gt; preceeding the helper name and require a matching closing mustache, &lt;code&gt;/&lt;/code&gt;, of the same name.</source>
          <target state="translated">블록 표현식을 사용하면 현재와 다른 컨텍스트를 사용하여 템플리트의 섹션을 호출 할 헬퍼를 정의 할 수 있습니다. 이 블록 도우미는 &lt;code&gt;#&lt;/code&gt; 앞에 나오는 도우미 이름 으로 식별되며 동일한 이름 의 일치하는 닫는 콧수염 &lt;code&gt;/&lt;/code&gt; 이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="13b30056a8fa40e5750173dfe75f03db19575e3f" translate="yes" xml:space="preserve">
          <source>Block helpers can also inject private variables into their child templates. This can be useful to add extra information that is not in the original context data.</source>
          <target state="translated">블록 도우미는 개인 변수를 자식 템플릿에 삽입 할 수도 있습니다. 원본 컨텍스트 데이터에없는 추가 정보를 추가하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cc7eedcbf17c5ebc0f06c023350f997d7a4505e" translate="yes" xml:space="preserve">
          <source>Block helpers have more features, such as the ability to create an &lt;code&gt;else&lt;/code&gt; section (used, for instance, by the built-in &lt;code&gt;if&lt;/code&gt; helper).</source>
          <target state="translated">블록 도우미에는 &lt;code&gt;else&lt;/code&gt; 섹션 을 만드는 기능 (예 : 내장 &lt;code&gt;if&lt;/code&gt; 도우미가 사용) 과 같은 더 많은 기능이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="907b30b1cb47376276872e9a61849dc1a4f1783f" translate="yes" xml:space="preserve">
          <source>Block helpers make it possible to define custom iterators and other functionality that can invoke the passed block with a new context.</source>
          <target state="translated">블록 헬퍼는 전달 된 블록을 새로운 컨텍스트로 호출 할 수있는 사용자 정의 반복자와 기타 기능을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f688a06e547b5c3a43787858bd62f64749948d7" translate="yes" xml:space="preserve">
          <source>Bower</source>
          <target state="translated">Bower</target>
        </trans-unit>
        <trans-unit id="9b3f2cf6e8b11836992cdaed77876a6e91880c64" translate="yes" xml:space="preserve">
          <source>Built-In Helpers</source>
          <target state="translated">내장 헬퍼</target>
        </trans-unit>
        <trans-unit id="3b90e1c842bdf0a999d06a79613bbaac5fa8c1e6" translate="yes" xml:space="preserve">
          <source>Builtin Helpers</source>
          <target state="translated">내장 헬퍼</target>
        </trans-unit>
        <trans-unit id="3437afd36f4442b9e8cd1507b7915d934b960f93" translate="yes" xml:space="preserve">
          <source>CDNs</source>
          <target state="translated">CDNs</target>
        </trans-unit>
        <trans-unit id="0e24a0fabaabec5581d8476869c87792dfa403bb" translate="yes" xml:space="preserve">
          <source>Calling the partial is done through the partial call syntax:</source>
          <target state="translated">부분 호출은 부분 호출 구문을 통해 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="42e22304d6a98ff243e53d8839919fc4ae073f83" translate="yes" xml:space="preserve">
          <source>Compile a template in JavaScript by using &lt;code&gt;Handlebars.compile&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Handlebars.compile&lt;/code&gt; 을 사용하여 JavaScript로 템플릿을 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="f469ae3dfdce5c6f1f3e9bc6b9b482773d8c8ce9" translate="yes" xml:space="preserve">
          <source>Compiles a template so it can be executed immediately.</source>
          <target state="translated">템플릿을 컴파일하여 즉시 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6a56385d0729f6ff4bf27671cc845cb6f2cfde5" translate="yes" xml:space="preserve">
          <source>Conditionals</source>
          <target state="translated">Conditionals</target>
        </trans-unit>
        <trans-unit id="e1682cbfa3bbed3eb0961435510b179ec1b17c98" translate="yes" xml:space="preserve">
          <source>Conditionals may also be chained by including the subsequent helper call within the else mustache.</source>
          <target state="translated">else 콧수염에 후속 도우미 호출을 포함시켜 조건을 연결할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="97ba36c9f7f6097c4b978f1918c8c786940bf8fa" translate="yes" xml:space="preserve">
          <source>Control structures typically do not change the current context, instead they decide whether or not to invoke the block based upon some variable.</source>
          <target state="translated">제어 구조는 일반적으로 현재 컨텍스트를 변경하지 않고 대신 일부 변수를 기반으로 블록을 호출할지 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="92eb2ebde2449345868bc84517630149e0455120" translate="yes" xml:space="preserve">
          <source>Creates an isolated Handlebars environment.</source>
          <target state="translated">격리 된 핸들 바 환경을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c73ec999378436bb6153ab2d06b765cfcdd06c8e" translate="yes" xml:space="preserve">
          <source>Custom data can be passed to partials through hash parameters.</source>
          <target state="translated">해시 매개 변수를 통해 사용자 정의 데이터를 부분으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ce22238cbf17f57e942b7c33ba1b92f3a64ad33" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;code&gt;Handlebars.logger.log&lt;/code&gt; which may be overriden to perform custom logging.</source>
          <target state="translated">사용자 지정 로깅을 수행하기 위해 재정의 될 수있는 &lt;code&gt;Handlebars.logger.log&lt;/code&gt; 에 위임합니다 .</target>
        </trans-unit>
        <trans-unit id="f1ab3986795b33dadd1209c71b227c8afcc51db1" translate="yes" xml:space="preserve">
          <source>Determines if a given value is empty.</source>
          <target state="translated">주어진 값이 비어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9134f06bb5b44f2fbe6a30bf1812cb9e4a31123d" translate="yes" xml:space="preserve">
          <source>Determines if an object is a function.</source>
          <target state="translated">객체가 함수인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b21e1ae9e9cb21affd338dc352f155e4bd84899d" translate="yes" xml:space="preserve">
          <source>Determines if an object is an array.</source>
          <target state="translated">객체가 배열인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="88febb6cb64949aefb86fa8d07e90e7e899c9c86" translate="yes" xml:space="preserve">
          <source>Dynamic Partials</source>
          <target state="translated">동적 부분</target>
        </trans-unit>
        <trans-unit id="316a67af96f9a2fa192c7cd9a84fec31cc6dd1c2" translate="yes" xml:space="preserve">
          <source>Each environment has its own helpers and partials. This is only necessary for use cases that demand distinct helpers or partials. Most use cases can use the root &lt;code&gt;Handlebars&lt;/code&gt; environment directly.</source>
          <target state="translated">각 환경에는 자체 도우미와 부분이 있습니다. 이것은 별도의 도우미 또는 부분이 필요한 사용 사례에만 필요합니다. 대부분의 사용 사례는 루트 &lt;code&gt;Handlebars&lt;/code&gt; 환경을 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2c48b777b1fe1c3b337164ffd2dd452f642b136" translate="yes" xml:space="preserve">
          <source>Each inline partial is available to the current block and all children, including execution of other partials. This allows for layout templates and similar functionality:</source>
          <target state="translated">각 인라인 부분은 다른 부분의 실행을 포함하여 현재 블록과 모든 자식에 사용할 수 있습니다. 이를 통해 레이아웃 템플릿 및 유사한 기능이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="2779ea444cb47200f1b0085d04662b33c09fc23f" translate="yes" xml:space="preserve">
          <source>Escaping</source>
          <target state="translated">Escaping</target>
        </trans-unit>
        <trans-unit id="d79be91b9b68c134a962510f7584635a461c913f" translate="yes" xml:space="preserve">
          <source>Even though the link is printed while in the context of a comment, it can still go back to the main context (the post) to retrieve its permalink.</source>
          <target state="translated">주석 컨텍스트에서 링크가 인쇄 되더라도 여전히 기본 컨텍스트 (게시물)로 돌아가서 영구 링크를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d525b71568c2d982f46feb96b332bedcdc6e4a0" translate="yes" xml:space="preserve">
          <source>Execution</source>
          <target state="translated">Execution</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="fa8852cf29b1e84feef652c1927c2b52e0eb780a" translate="yes" xml:space="preserve">
          <source>Finally, you can reference these templates dynamically in your Javascript.</source>
          <target state="translated">마지막으로 Javascript에서 이러한 템플릿을 동적으로 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ad04d2e32c79a047f97d61d4548ac6c4c1f41ac" translate="yes" xml:space="preserve">
          <source>First, you will need to install node and npm. On OS X:</source>
          <target state="translated">먼저 node와 npm을 설치해야합니다. OS X에서 :</target>
        </trans-unit>
        <trans-unit id="ab9b3133b73250cf4474ca29f2caa6e3f98dde91" translate="yes" xml:space="preserve">
          <source>For demonstration purposes, let's define a block helper that invokes the block as though no helper existed.</source>
          <target state="translated">데모 목적으로, 도우미가없는 것처럼 블록을 호출하는 블록 도우미를 정의 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="4b55976d0d0895231090da2aca5a065e930a8c8a" translate="yes" xml:space="preserve">
          <source>For example, when iterating over a list, you may provide the current index as a private variable.</source>
          <target state="translated">예를 들어, 목록을 반복 할 때 현재 색인을 개인 변수로 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d1aa717f1e58d6ce85428c71803d7f5c27e19b3" translate="yes" xml:space="preserve">
          <source>Generic &lt;code&gt;toString&lt;/code&gt; method.</source>
          <target state="translated">일반 &lt;code&gt;toString&lt;/code&gt; 메소드</target>
        </trans-unit>
        <trans-unit id="6a5a534ed2dce25ff61f923fb48cde9d02ca2b08" translate="yes" xml:space="preserve">
          <source>Get the HTML result of evaluating a Handlebars template by executing the template with a context.</source>
          <target state="translated">컨텍스트와 함께 템플릿을 실행하여 핸들 바 템플릿을 평가 한 HTML 결과를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="24612093a73d54eb6853f0fcb0bdb396d8b5d87d" translate="yes" xml:space="preserve">
          <source>HTML Escaping</source>
          <target state="translated">HTML 이스케이프</target>
        </trans-unit>
        <trans-unit id="46ac3e7f471263c1a2d07841c5d5cf1b0fe5e1b6" translate="yes" xml:space="preserve">
          <source>HTML escapes the passed string, making it safe for rendering as text within HTML content.</source>
          <target state="translated">HTML은 전달 된 문자열을 이스케이프하여 HTML 내용 내에서 텍스트로 렌더링하기에 안전합니다.</target>
        </trans-unit>
        <trans-unit id="25d28d0d9a5149d08a56f7c4771a57310d0ff3c9" translate="yes" xml:space="preserve">
          <source>Handlebar's npm package includes both libraries suitable for CommonJS aware systems and built browser libraries that can be consumed direct browser mechanisms.</source>
          <target state="translated">Handlebar의 npm 패키지에는 CommonJS 인식 시스템에 적합한 라이브러리와 직접 브라우저 메커니즘을 사용할 수있는 빌드 된 브라우저 라이브러리가 모두 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="434939b97441416bf98960f71bcbf6d5041c1b69" translate="yes" xml:space="preserve">
          <source>Handlebars HTML-escapes values returned by a &lt;code&gt;{{expression}}&lt;/code&gt;. If you don't want Handlebars to escape a value, use the &quot;triple-stash&quot;, &lt;code&gt;{{{&lt;/code&gt;</source>
          <target state="translated">핸들 바 &lt;code&gt;{{expression}}&lt;/code&gt; 에 의해 반환 된 HTML 이스케이프 값 . 핸들 바가 값을 이스케이프하지 않게하려면 &quot;triple-stash&quot; &lt;code&gt;{{{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="316a14869c41455d9c0e9a17a2b7113c792367b9" translate="yes" xml:space="preserve">
          <source>Handlebars HTML-escapes values returned by a &lt;code&gt;{{expression}}&lt;/code&gt;. If you don't want Handlebars to escape a value, use the &quot;triple-stash&quot;, &lt;code&gt;{{{&lt;/code&gt;.</source>
          <target state="translated">핸들 바 &lt;code&gt;{{expression}}&lt;/code&gt; 에 의해 반환 된 HTML 이스케이프 값 . 핸들 바가 값을 이스케이프하지 않게하려면 &quot;triple-stash&quot; &lt;code&gt;{{{&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="da93abfca40c5ed0dae53f3b45a4ed0e287d34e6" translate="yes" xml:space="preserve">
          <source>Handlebars Paths</source>
          <target state="translated">핸들 바 경로</target>
        </trans-unit>
        <trans-unit id="fd355da4c13b4f833948a9678515eacaa71308b2" translate="yes" xml:space="preserve">
          <source>Handlebars allows for template reuse through partials. Partials are normal Handlebars templates that may be called directly by other templates.</source>
          <target state="translated">핸들 바를 사용하면 부분을 통해 템플릿을 재사용 할 수 있습니다. 부분은 다른 템플릿에서 직접 호출 할 수있는 일반 핸들 바 템플릿입니다.</target>
        </trans-unit>
        <trans-unit id="d5e77dd8c04d0f983258bb19184fb5c0366b2a98" translate="yes" xml:space="preserve">
          <source>Handlebars also allows for name conflict resolution between helpers and data fields via a &lt;code&gt;this&lt;/code&gt; reference:</source>
          <target state="translated">또한 핸들 바는 &lt;code&gt;this&lt;/code&gt; 참조 를 통해 헬퍼와 데이터 필드 사이의 이름 충돌 해결을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="58610ef9ee115927ea9509eed3872b2f7fab6ff5" translate="yes" xml:space="preserve">
          <source>Handlebars also offers a mechanism for invoking a helper with a block of the template. Block helpers can then invoke that block zero or more times with any context it chooses.</source>
          <target state="translated">또한 핸들 바는 템플릿 블록으로 도우미를 호출하기위한 메커니즘을 제공합니다. 그런 다음 블록 도우미는 선택한 컨텍스트와 함께 해당 블록을 0 번 이상 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a70c74d78e3af38e127f955b6d9e33c706cc7b10" translate="yes" xml:space="preserve">
          <source>Handlebars also supports a deprecated &lt;code&gt;/&lt;/code&gt; syntax, so you could write the above template as:</source>
          <target state="translated">핸들도되지 않는 지원 &lt;code&gt;/&lt;/code&gt; 당신 같은 위의 템플릿을 작성할 수 있도록 구문 :</target>
        </trans-unit>
        <trans-unit id="2ac1a3ea201e72809419a8b518290b48bb7bee35" translate="yes" xml:space="preserve">
          <source>Handlebars also supports nested paths, making it possible to look up properties nested below the current context.</source>
          <target state="translated">또한 핸들 바는 중첩 경로를 지원하므로 현재 컨텍스트 아래에 중첩 된 속성을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcb0f1b85829a0c40756ae514a48099e5e5156f3" translate="yes" xml:space="preserve">
          <source>Handlebars always invokes helpers with the current context as &lt;code&gt;this&lt;/code&gt;, so you can invoke the block with &lt;code&gt;this&lt;/code&gt; to evaluate the block in the current context.</source>
          <target state="translated">핸들은 항상 현재 컨텍스트와 헬퍼를 호출 &lt;code&gt;this&lt;/code&gt; 당신이 블록을 호출 할 수 있도록 &lt;code&gt;this&lt;/code&gt; 현재 컨텍스트의 블록을 평가.</target>
        </trans-unit>
        <trans-unit id="507f2b5dc1d359ceabaca6e0c85fc1ddf11d7e09" translate="yes" xml:space="preserve">
          <source>Handlebars content may be escaped in one of two ways, inline escapes or raw block helpers. Inline escapes created by prefixing a mustache block with &lt;code&gt;\&lt;/code&gt;. Raw blocks are created using &lt;code&gt;{{{{&lt;/code&gt; mustache braces.</source>
          <target state="translated">핸들 바 내용은 인라인 이스케이프 또는 원시 블록 도우미의 두 가지 방법 중 하나로 이스케이프 될 수 있습니다. 콧수염 블록 앞에 &lt;code&gt;\&lt;/code&gt; 를 붙여 인라인 이스케이프를 생성했습니다 . 원시 블록은 &lt;code&gt;{{{{&lt;/code&gt; 수염 괄호를 사용하여 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="5a44031043e8fd4130964c245fdac32011d05985" translate="yes" xml:space="preserve">
          <source>Handlebars expressions are the basic unit of a Handlebars template. You can use them alone in a &lt;code&gt;{{mustache}}&lt;/code&gt;, pass them to a Handlebars helper, or use them as values in hash arguments.</source>
          <target state="translated">핸들 바 표현식은 핸들 바 템플릿의 기본 단위입니다. &lt;code&gt;{{mustache}}&lt;/code&gt; 에서 단독으로 사용하거나 Handlebars 도우미에 전달하거나 해시 인수의 값으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6e7a375f7d36b5d2023c58a5ad9ed2094855a22" translate="yes" xml:space="preserve">
          <source>Handlebars expressions can also be dot-separated paths.</source>
          <target state="translated">핸들 식은 점으로 구분 된 경로 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="323deb3edab366fe27019019e7768cb11e2a32f3" translate="yes" xml:space="preserve">
          <source>Handlebars helpers can also receive an optional sequence of key-value pairs as their final parameter (referred to as hash arguments in the documentation):</source>
          <target state="translated">핸들 바 도우미는 최종 매개 변수로 키-값 쌍의 선택적 시퀀스를받을 수도 있습니다 (문서에서 해시 인수라고 함).</target>
        </trans-unit>
        <trans-unit id="0f181e5186e161e12a386e3e2b2919b031768789" translate="yes" xml:space="preserve">
          <source>Handlebars helpers can be accessed from any context in a template. You can register a helper with the &lt;code&gt;Handlebars.registerHelper&lt;/code&gt; method.</source>
          <target state="translated">핸들 바 도우미는 템플릿의 모든 컨텍스트에서 액세스 할 수 있습니다. &lt;code&gt;Handlebars.registerHelper&lt;/code&gt; 메소드 로 헬퍼를 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c849fa5808e21eeda4cbf08a2587008e214e78a3" translate="yes" xml:space="preserve">
          <source>Handlebars is hosted on a number of free CDNs as well.</source>
          <target state="translated">핸들 바는 여러 무료 CDN에서도 호스팅됩니다.</target>
        </trans-unit>
        <trans-unit id="b4d9292d3c783a908719f9c6b8d2d6e5018783a9" translate="yes" xml:space="preserve">
          <source>Handlebars is largely compatible with Mustache templates. In most cases it is possible to swap out Mustache with Handlebars and continue using your current templates. Complete details can be found &lt;a href=&quot;https://github.com/wycats/handlebars.js#differences-between-handlebarsjs-and-mustache&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">핸들 바는 콧수염 템플릿과 대부분 호환됩니다. 대부분의 경우 콧수염을 핸들 바로 교체하고 현재 템플릿을 계속 사용할 수 있습니다. 자세한 내용은 &lt;a href=&quot;https://github.com/wycats/handlebars.js#differences-between-handlebarsjs-and-mustache&quot;&gt;여기를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="cedd8573c1ecce58975773faff0de071254f7c7a" translate="yes" xml:space="preserve">
          <source>Handlebars maintains a &lt;a href=&quot;https://github.com/components/handlebars.js&quot;&gt;bower component&lt;/a&gt; as well that is available for &lt;a href=&quot;http://bower.io/&quot;&gt;bower&lt;/a&gt; users. This can be installed in a project like so.</source>
          <target state="translated">핸들 바는 &lt;a href=&quot;http://bower.io/&quot;&gt;바우어&lt;/a&gt; 사용자 가 사용할 수 있는 &lt;a href=&quot;https://github.com/components/handlebars.js&quot;&gt;바우어 구성 요소&lt;/a&gt; 를 유지 관리 합니다. 이것은 프로젝트에 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="285801baca88dc98cc80bd790143dc62aff6860d" translate="yes" xml:space="preserve">
          <source>Handlebars offers a variety of APIs and utility methods for applications and helpers.</source>
          <target state="translated">핸들 바는 응용 프로그램 및 도우미를위한 다양한 API 및 유틸리티 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ed4afef7bef292eb6efd3a6adbdaca4a8af380f9" translate="yes" xml:space="preserve">
          <source>Handlebars offers a variety of built-in helpers such as the &lt;code&gt;if&lt;/code&gt; conditional and &lt;code&gt;each&lt;/code&gt; iterator.</source>
          <target state="translated">핸들 바는 &lt;code&gt;if&lt;/code&gt; 조건부 및 &lt;code&gt;each&lt;/code&gt; 반복자 와 같은 다양한 내장 도우미를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="fb3baf5c01def233f1a4342631d6203fdb517198" translate="yes" xml:space="preserve">
          <source>Handlebars offers a variety of utility methods that are exposed through the &lt;code&gt;Handlebars.Utils&lt;/code&gt; object.</source>
          <target state="translated">Handlebars는 &lt;code&gt;Handlebars.Utils&lt;/code&gt; 객체를 통해 노출되는 다양한 유틸리티 메소드를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="d7b7161639acc4ff05d54434befa2a396086f1a8" translate="yes" xml:space="preserve">
          <source>Handlebars offers support for subexpressions, which allows you to invoke multiple helpers within a single mustache, and pass in the results of inner helper invocations as arguments to outer helpers. Subexpressions are delimited by parentheses.</source>
          <target state="translated">핸들 바는 하위 표현식을 지원하여 단일 콧수염 내에서 여러 헬퍼를 호출하고 내부 헬퍼 호출 결과를 외부 헬퍼에 대한 인수로 전달할 수 있습니다. 하위 표현식은 괄호로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="21641288ecf6323e86aef2ae90e124f20f5c5b4b" translate="yes" xml:space="preserve">
          <source>Handlebars partials allow for code reuse by creating shared templates. Rendering this template</source>
          <target state="translated">핸들 바 부분은 공유 템플릿을 생성하여 코드 재사용을 허용합니다. 이 템플릿 렌더링</target>
        </trans-unit>
        <trans-unit id="c1f2f9cbc9f1473f4e74890806bb9f59afebe292" translate="yes" xml:space="preserve">
          <source>Handlebars provides additional metadata to block helpers by attaching them as properties of the options hash. Keep reading for more examples.</source>
          <target state="translated">핸들은 도우미를 옵션 해시의 속성으로 연결하여 도우미를 차단하는 추가 메타 데이터를 제공합니다. 더 많은 예를 보려면 계속 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="e07a6e9ef585f5fdf979d2d7706e61a7ca2d5538" translate="yes" xml:space="preserve">
          <source>Handlebars provides additional metadata, such as Hash arguments, to helpers as a final parameter.</source>
          <target state="translated">핸들 바는 도우미에게 최종 매개 변수로 해시 인수와 같은 추가 메타 데이터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eb9c92d1b33efd5ffcb270313ee42c4a7237dd35" translate="yes" xml:space="preserve">
          <source>Handlebars provides the block for the &lt;code&gt;else&lt;/code&gt; fragment as &lt;code&gt;options.inverse&lt;/code&gt;. You do not need to check for the existence of the &lt;code&gt;else&lt;/code&gt; fragment: Handlebars will detect it automatically and register a &quot;noop&quot; function.</source>
          <target state="translated">핸들은 &lt;code&gt;else&lt;/code&gt; 조각에 대한 블록을 &lt;code&gt;options.inverse&lt;/code&gt; 로 제공합니다 . &lt;code&gt;else&lt;/code&gt; 프래그먼트 가 있는지 확인하지 않아도됩니다 . 핸들 바가 자동으로이를 감지하고 &quot;noop&quot;기능을 등록합니다.</target>
        </trans-unit>
        <trans-unit id="277dcaea360a3197fade3e2c44a863f57ad9b0a8" translate="yes" xml:space="preserve">
          <source>Handlebars provides the final hash as &lt;code&gt;options.hash&lt;/code&gt;. This makes it easier to accept a variable number of parameters, while also accepting an optional Hash. If the template provides no hash arguments, Handlebars will automatically pass an empty object (&lt;code&gt;{}&lt;/code&gt;), so you don't need to check for the existence of hash arguments.</source>
          <target state="translated">핸들은 최종 해시를 &lt;code&gt;options.hash&lt;/code&gt; 로 제공합니다 . 이를 통해 가변 개수의 매개 변수를 더 쉽게 수용 할 수 있으며 해시 (선택 사항)도 허용합니다. 템플릿이 해시 인수를 제공하지 않으면 핸들 바는 빈 객체 ( &lt;code&gt;{}&lt;/code&gt; )를 자동으로 전달 하므로 해시 인수가 있는지 확인할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="80039beff7e9e83c7e792d2a338f98ee1552fc20" translate="yes" xml:space="preserve">
          <source>Handlebars provides the power necessary to let you build &lt;strong&gt;semantic templates&lt;/strong&gt; effectively with no frustration.</source>
          <target state="translated">핸들 바는 좌절하지 않고 &lt;strong&gt;시맨틱 템플릿을&lt;/strong&gt; 효과적으로 구축하는 데 필요한 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="407cbea5181a9a287523be906a37b7e80cf38cfa" translate="yes" xml:space="preserve">
          <source>Handlebars supports simple paths, just like Mustache.</source>
          <target state="translated">핸들 바는 콧수염처럼 간단한 경로를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="6a7bc96549991696d41d4875075f746e4522bfef" translate="yes" xml:space="preserve">
          <source>Handlebars templates look like regular HTML, with embedded handlebars expressions.</source>
          <target state="translated">핸들 바 템플릿은 포함 된 핸들 바 표현식이있는 일반 HTML처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="3c230923e6b2c5621b32dd300f8fb331546553bc" translate="yes" xml:space="preserve">
          <source>Handlebars will not escape a &lt;code&gt;Handlebars.SafeString&lt;/code&gt;. If you write a helper that generates its own HTML, you will usually want to return a &lt;code&gt;new Handlebars.SafeString(result)&lt;/code&gt;. In such a circumstance, you will want to manually escape parameters.</source>
          <target state="translated">핸들은 탈출하지 않습니다 &lt;code&gt;Handlebars.SafeString&lt;/code&gt; 을 . 자체 HTML을 생성하는 도우미를 작성하는 경우 일반적으로 &lt;code&gt;new Handlebars.SafeString(result)&lt;/code&gt; 을 반환하려고합니다 . 이러한 상황에서는 매개 변수를 수동으로 이스케이프 처리하려고합니다.</target>
        </trans-unit>
        <trans-unit id="72ca62c55eba3cd5984fa52ea58fb09c1c0bdae7" translate="yes" xml:space="preserve">
          <source>Handlebars.SafeString(string)</source>
          <target state="translated">Handlebars.SafeString(string)</target>
        </trans-unit>
        <trans-unit id="1dac5f037fd4856c03f3cc0158fe7c3d1dd84380" translate="yes" xml:space="preserve">
          <source>Handlebars.Utils.extend(obj, value)</source>
          <target state="translated">Handlebars.Utils.extend (obj, value)</target>
        </trans-unit>
        <trans-unit id="19d8329e8d34f9555af6f7980796ba34c87be820" translate="yes" xml:space="preserve">
          <source>Handlebars.Utils.isArray(obj)</source>
          <target state="translated">Handlebars.Utils.isArray(obj)</target>
        </trans-unit>
        <trans-unit id="f4a106fb453af3587269addda1b1240072d64cc8" translate="yes" xml:space="preserve">
          <source>Handlebars.Utils.isEmpty(value)</source>
          <target state="translated">Handlebars.Utils.isEmpty(value)</target>
        </trans-unit>
        <trans-unit id="9ba86257e53631545401146e78822076281b9a35" translate="yes" xml:space="preserve">
          <source>Handlebars.Utils.isFunction(obj)</source>
          <target state="translated">Handlebars.Utils.isFunction(obj)</target>
        </trans-unit>
        <trans-unit id="58ae08480683c08ad186ae055d3c15d654ccdcfa" translate="yes" xml:space="preserve">
          <source>Handlebars.Utils.toString(obj)</source>
          <target state="translated">Handlebars.Utils.toString(obj)</target>
        </trans-unit>
        <trans-unit id="5cca1854e8d2d0feed38eadbdb18a18f3076dc23" translate="yes" xml:space="preserve">
          <source>Handlebars.compile(template, options)</source>
          <target state="translated">Handlebars.compile (템플릿, 옵션)</target>
        </trans-unit>
        <trans-unit id="c4454b76349221c875d753f7dd9723b5464b50a5" translate="yes" xml:space="preserve">
          <source>Handlebars.create()</source>
          <target state="translated">Handlebars.create()</target>
        </trans-unit>
        <trans-unit id="c5c659220a293871b4766dbb13c2e69e18808ca1" translate="yes" xml:space="preserve">
          <source>Handlebars.createFrame(data)</source>
          <target state="translated">Handlebars.createFrame(data)</target>
        </trans-unit>
        <trans-unit id="e1ab972a95b63c64d649b3f73ba14b37df0f3917" translate="yes" xml:space="preserve">
          <source>Handlebars.escapeExpression(string)</source>
          <target state="translated">Handlebars.escapeExpression(string)</target>
        </trans-unit>
        <trans-unit id="372b1d3c7603da1035f5ffd7498c12d1c2580b4b" translate="yes" xml:space="preserve">
          <source>Handlebars.js</source>
          <target state="translated">Handlebars.js</target>
        </trans-unit>
        <trans-unit id="d12fdfc185e2e067ef259efdf6f7775950d99583" translate="yes" xml:space="preserve">
          <source>Handlebars.log(level, message)</source>
          <target state="translated">Handlebars.log (레벨, 메시지)</target>
        </trans-unit>
        <trans-unit id="1ef59e8c9a8a39d29d8740d6479bcb4ad830e3d5" translate="yes" xml:space="preserve">
          <source>Handlebars.noConflict()</source>
          <target state="translated">Handlebars.noConflict()</target>
        </trans-unit>
        <trans-unit id="8401921af8694b4bbcb59568f1e5d65366091306" translate="yes" xml:space="preserve">
          <source>Handlebars.precompile(template, options)</source>
          <target state="translated">Handlebars.precompile (템플릿, 옵션)</target>
        </trans-unit>
        <trans-unit id="99a4cb8894c8f7ad2e12eb75896a8cad7f0d4449" translate="yes" xml:space="preserve">
          <source>Handlebars.registerDecorator(name, helper)</source>
          <target state="translated">Handlebars.registerDecorator (이름, 도우미)</target>
        </trans-unit>
        <trans-unit id="5c4d377d5b9626be4da29208a626a5a0cb996e30" translate="yes" xml:space="preserve">
          <source>Handlebars.registerHelper(name, helper)</source>
          <target state="translated">HandleBars.registerHelper (이름, 도우미)</target>
        </trans-unit>
        <trans-unit id="8040078d0bd299098d2fe5b9993ef8ea20d19207" translate="yes" xml:space="preserve">
          <source>Handlebars.registerPartial(name, partial)</source>
          <target state="translated">핸들 부분 .registerPartial (이름, 부분)</target>
        </trans-unit>
        <trans-unit id="19d16f25570f7006575abbb6551f923dfe08b145" translate="yes" xml:space="preserve">
          <source>Handlebars.template(templateSpec)</source>
          <target state="translated">Handlebars.template(templateSpec)</target>
        </trans-unit>
        <trans-unit id="4fcee0da383f6da69f11c6b7c8a3168e1ab7b3c0" translate="yes" xml:space="preserve">
          <source>Handlebars.unregisterDecorator(name)</source>
          <target state="translated">Handlebars.unregisterDecorator(name)</target>
        </trans-unit>
        <trans-unit id="13cf5db25ea0190a5ae067546abbe0fb6e326a2c" translate="yes" xml:space="preserve">
          <source>Handlebars.unregisterHelper(name)</source>
          <target state="translated">Handlebars.unregisterHelper(name)</target>
        </trans-unit>
        <trans-unit id="74c22341aa195865dd675970d950490cca56be35" translate="yes" xml:space="preserve">
          <source>Handlebars.unregisterPartial(name)</source>
          <target state="translated">Handlebars.unregisterPartial(name)</target>
        </trans-unit>
        <trans-unit id="535141163ce0663d92276e920f5f3a9fe8b9f42b" translate="yes" xml:space="preserve">
          <source>Hash Arguments</source>
          <target state="translated">해시 인수</target>
        </trans-unit>
        <trans-unit id="7f850dac2167ed6b055e7b930a3545e7d55049ba" translate="yes" xml:space="preserve">
          <source>Hash arguments provide a powerful way to offer a number of optional parameters to a block helper without the complexity caused by positional arguments.</source>
          <target state="translated">해시 인수는 위치 인수로 인한 복잡성없이 블록 도우미에 여러 선택적 매개 변수를 제공하는 강력한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5d5c820dd5b06613f0f3bea70291035e5cb959f7" translate="yes" xml:space="preserve">
          <source>Helper calls may also have literal values passed to them either as parameter arguments or hash arguments. Supported literals include numbers, strings, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">도우미 호출에는 매개 변수 인수 또는 해시 인수로 리터럴 값이 전달 될 수도 있습니다. 지원되는 리터럴에는 숫자, 문자열, &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; 및 &lt;code&gt;undefined&lt;/code&gt; 가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="5b2dd9c561ece7f9a04b15cb6543cf8b69c3e9bf" translate="yes" xml:space="preserve">
          <source>Helpers can determine the number of block parameters referenced by the template via the &lt;code&gt;options.fn.blockParams&lt;/code&gt; field, which is an integer count. This value represents the number of block parameters that could be referenced by the child template. Parameters beyond this count will never be referenced and can safely be omitted by the helper if desired. This is optional and any additional parameters passed to the template will be silently ignored.</source>
          <target state="translated">도우미 는 정수 개수 인 &lt;code&gt;options.fn.blockParams&lt;/code&gt; 필드 를 통해 템플릿이 참조하는 블록 매개 변수 수를 결정할 수 있습니다. 이 값은 하위 템플릿이 참조 할 수있는 블록 매개 변수 수를 나타냅니다. 이 수를 초과하는 매개 변수는 참조되지 않으며 원하는 경우 도우미가 안전하게 생략 할 수 있습니다. 이것은 선택 사항이며 템플릿에 전달 된 추가 매개 변수는 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="0ce0fa5c36f81ca30339449946662e24dbd42c5e" translate="yes" xml:space="preserve">
          <source>Helpers receive the current context as the &lt;code&gt;this&lt;/code&gt; context of the function.</source>
          <target state="translated">헬퍼는 현재 컨텍스트를 함수 &lt;code&gt;this&lt;/code&gt; 컨텍스트 로받습니다 .</target>
        </trans-unit>
        <trans-unit id="d4137cae2bd932d12c9c3a64c802e2d8c928da59" translate="yes" xml:space="preserve">
          <source>Helpers that modify the data state should create a new frame when doing so, to isolate themselves and avoid corrupting the state of any parents. Generally, only one frame needs to be created per helper execution. For example, the &lt;code&gt;each&lt;/code&gt; iterator creates a single frame which is reused for all child execution.</source>
          <target state="translated">데이터 상태를 수정하는 도우미는 자신을 격리하고 부모의 상태가 손상되지 않도록 새 프레임을 만들어야합니다. 일반적으로 도우미 실행 당 하나의 프레임 만 만들면됩니다. 예를 들어, &lt;code&gt;each&lt;/code&gt; 반복자는 모든 자식 실행에 재사용되는 단일 프레임을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="e7b156851271f137d11e8b7b0672325b5f3484d0" translate="yes" xml:space="preserve">
          <source>Identifiers may be any unicode character except for the following:</source>
          <target state="translated">식별자는 다음을 제외한 모든 유니 코드 문자 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1883d60be2171a250f0124f3de8b08216f9af46" translate="yes" xml:space="preserve">
          <source>If loading the whole library, the partials may be string values which will be compiled on demand. If only loading the runtime, the partials must be a precompiled template that has been set up properly using the &lt;code&gt;Handlebars.template&lt;/code&gt; method.</source>
          <target state="translated">전체 라이브러리를로드하는 경우 부분 값은 요청시 컴파일 될 문자열 값일 수 있습니다. 런타임 만로드하는 경우 부분은 &lt;code&gt;Handlebars.template&lt;/code&gt; 메소드를 사용하여 올바르게 설정된 사전 컴파일 된 템플릿이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="b63b2e3b540c20f17a5794b44a16635d149e37a8" translate="yes" xml:space="preserve">
          <source>If looking up &lt;code&gt;license&lt;/code&gt; under the current context returns a falsy value, Handlebars will render the warning. Otherwise, it will render nothing.</source>
          <target state="translated">찾는 경우 &lt;code&gt;license&lt;/code&gt; 현재 컨텍스트에서 것은 falsy 값을 반환, 핸들 바는 경고를 렌더링합니다. 그렇지 않으면 아무것도 렌더링되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3f1accc0d15ef812885a22e5b4e70c557655003" translate="yes" xml:space="preserve">
          <source>If using the precompiler's normal mode, the resulting templates will be stored to the &lt;code&gt;Handlebars.templates&lt;/code&gt; object using the relative template name sans the extension. These templates may be executed in the same manner as templates.</source>
          <target state="translated">프리 컴파일러의 일반 모드를 사용하는 경우 결과 템플릿은 상대 템플릿 이름으로 확장명을 사용하여 &lt;code&gt;Handlebars.templates&lt;/code&gt; 객체에 저장됩니다 . 이러한 템플릿은 템플릿과 동일한 방식으로 실행될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01af85d1846ea25e9ef88c807effce987bdb03ef" translate="yes" xml:space="preserve">
          <source>If using the simple mode the precompiler will generate a single javascript method. To execute this method it must be passed to the &lt;code&gt;Handlebars.template&lt;/code&gt; method and the resulting object may be used as normal.</source>
          <target state="translated">단순 모드를 사용하는 경우 사전 컴파일러는 단일 Javascript 메소드를 생성합니다. 이 메소드를 실행하려면 &lt;code&gt;Handlebars.template&lt;/code&gt; 메소드 로 전달되어야하며 결과 오브젝트가 정상적으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45c865e47805a0392909ddd18339fe6b9ec67d08" translate="yes" xml:space="preserve">
          <source>If we have the following context:</source>
          <target state="translated">우리가 다음과 같은 맥락을 가지고 있다면 :</target>
        </trans-unit>
        <trans-unit id="64c5496e942b95ae3d40c56c2faf94061ad7a26f" translate="yes" xml:space="preserve">
          <source>If you wish to precompile templates from inside NodeJS--without invoking &quot;handlebars&quot; from the command line--that can be done with Handlebars.precompile. Transmit the string result of this function to your clients, and they can in turn parse that with Handlebars.template.</source>
          <target state="translated">명령 줄에서 &quot;핸들 바&quot;를 호출하지 않고 NodeJS 내부에서 템플릿을 사전 컴파일하려면 Handlebars.precompile을 사용하여 수행 할 수 있습니다. 이 함수의 문자열 결과를 클라이언트에게 전송하면 Handlebars.template을 사용하여 구문 분석 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1f824d087d64271211cc91fb3a3569a4dffc655b" translate="yes" xml:space="preserve">
          <source>If you're working with precompiled templates, you don't need to ship the compiler with your deployed application. Instead, you can use the smaller &quot;runtime&quot; build.</source>
          <target state="translated">사전 컴파일 된 템플릿으로 작업하는 경우 배포 된 응용 프로그램과 함께 컴파일러를 제공 할 필요가 없습니다. 대신, 더 작은 &quot;런타임&quot;빌드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bffc5780455640392dd622cde4c3caaca83c69ea" translate="yes" xml:space="preserve">
          <source>If your helper returns HTML that you do not want escaped, make sure to return a new &lt;code&gt;Handlebars.SafeString&lt;/code&gt;.</source>
          <target state="translated">도우미가 이스케이프하지 않으려는 HTML을 반환하면 새로운 &lt;code&gt;Handlebars.SafeString&lt;/code&gt; 을 반환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ee6455bf13c0877907a4211cf55037410ccb068e" translate="yes" xml:space="preserve">
          <source>Implementing a helper like this is a lot like implementing the &lt;code&gt;noop&lt;/code&gt; helper. Helpers can take parameters, and parameters are evaluated just like expressions used directly inside &lt;code&gt;{{mustache}}&lt;/code&gt; blocks.</source>
          <target state="translated">이와 같은 도우미를 구현하는 것은 &lt;code&gt;noop&lt;/code&gt; 도우미를 구현하는 것과 매우 비슷합니다 . 도우미는 매개 변수를 사용할 수 있으며 매개 변수는 &lt;code&gt;{{mustache}}&lt;/code&gt; 블록 내에서 직접 사용되는 식과 같이 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="0a3fe3ca3fb1aa45e9f6acbc0f59f3b558536388" translate="yes" xml:space="preserve">
          <source>Implements a helper that allows for named variable declarations within a given block. This example would output &lt;code&gt;1 2 3&lt;/code&gt; on render.</source>
          <target state="translated">주어진 블록 내에서 명명 된 변수 선언을 허용하는 도우미를 구현합니다. 이 예제는 렌더링시 &lt;code&gt;1 2 3&lt;/code&gt; 을 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="8177eed4b66c19e29135ecdb91cf1877f77f4aa6" translate="yes" xml:space="preserve">
          <source>Implicitly called when a helper can not be directly resolved in the environment's helpers hash.</source>
          <target state="translated">환경의 도우미 해시에서 도우미를 직접 확인할 수 없을 때 암시 적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="61058d419fe25a24e6868249ca967ca8a15abb4a" translate="yes" xml:space="preserve">
          <source>In addition to reducing the download size, eliminating client-side compilation will significantly speed up boot time, as compilation is the most expensive part of Handlebars.</source>
          <target state="translated">핸들링에서 컴파일이 가장 비싸기 때문에 다운로드 크기를 줄이는 것 외에도 클라이언트 측 컴파일을 제거하면 부팅 시간이 크게 단축됩니다.</target>
        </trans-unit>
        <trans-unit id="45a9a3f5b707a053eec24275d98ce8fa2d1513a2" translate="yes" xml:space="preserve">
          <source>In order to use a partial, it must be registered via &lt;code&gt;Handlebars.registerPartial&lt;/code&gt;.</source>
          <target state="translated">부분을 ​​사용하려면 &lt;code&gt;Handlebars.registerPartial&lt;/code&gt; 을 통해 부분을 등록해야합니다 .</target>
        </trans-unit>
        <trans-unit id="aa5460448bf728a51a763b85831142a389e10085" translate="yes" xml:space="preserve">
          <source>In the example above, the template will treat the &lt;code&gt;each&lt;/code&gt; parameter roughly equivalent to this javascript: &lt;code&gt;articles[10]['#comments']&lt;/code&gt;</source>
          <target state="translated">위의 예에서 템플릿은 &lt;code&gt;each&lt;/code&gt; 매개 변수를이 자바 스크립트와 대략 동등한 것으로 처리합니다 . &lt;code&gt;articles[10]['#comments']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ed2ec98fdd9341616c266a355df34afbee0d9d03" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;inner-helper&lt;/code&gt; will get invoked with the string argument &lt;code&gt;'abc'&lt;/code&gt;, and whatever the &lt;code&gt;inner-helper&lt;/code&gt; function returns will get passed in as the first argument to &lt;code&gt;outer-helper&lt;/code&gt; (and &lt;code&gt;'def'&lt;/code&gt; will get passed in as the second argument to &lt;code&gt;outer-helper&lt;/code&gt;).</source>
          <target state="translated">이 경우, &lt;code&gt;inner-helper&lt;/code&gt; 문자열 인수로 호출 얻을 것이다 &lt;code&gt;'abc'&lt;/code&gt; 어떤 및 &lt;code&gt;inner-helper&lt;/code&gt; 함수가 리턴에 첫 번째 인수로 전달 얻을 것이다 &lt;code&gt;outer-helper&lt;/code&gt; (및 &lt;code&gt;'def'&lt;/code&gt; 두 번째로 전달 얻을 것이다 &lt;code&gt;outer-helper&lt;/code&gt; 에 대한 인수 ).</target>
        </trans-unit>
        <trans-unit id="1d35ad35629a2a006bbe9b2db6efe085d1f637ba" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;link&lt;/code&gt; is the name of a Handlebars helper, and story is a parameter to the helper. Handlebars evaluates parameters in exactly the same way described above in &quot;Basic Usage&quot;.</source>
          <target state="translated">이 경우 &lt;code&gt;link&lt;/code&gt; 는 Handlebars 도우미의 이름이며 story는 도우미에 대한 매개 변수입니다. 핸들 바는 위에서 &quot;기본 사용법&quot;에서 설명한 것과 동일한 방식으로 매개 변수를 평가합니다.</target>
        </trans-unit>
        <trans-unit id="83dd2250a2564b8e3c7ba753c428cad0410e9c25" translate="yes" xml:space="preserve">
          <source>In this case, Handlebars will pass the link helper two parameters: the String &lt;code&gt;&quot;See more...&quot;&lt;/code&gt; and the result of evaluating &lt;code&gt;story.url&lt;/code&gt; in the current context.</source>
          <target state="translated">이 경우, 핸들 바는 링크 헬퍼의 두 매개 변수를 전달합니다 : String &lt;code&gt;&quot;See more...&quot;&lt;/code&gt; 및 현재 컨텍스트에서 &lt;code&gt;story.url&lt;/code&gt; 을 평가 한 결과 .</target>
        </trans-unit>
        <trans-unit id="5a64ac10da3b52869b298957f2673c6a1de46cf6" translate="yes" xml:space="preserve">
          <source>In this case, we iterate over the items in the passed parameter, invoking the block once with each item. As we iterate, we build up a String result, and then return it.</source>
          <target state="translated">이 경우 전달 된 매개 변수의 항목을 반복하여 각 항목마다 블록을 한 번 호출합니다. 반복 할 때 문자열 결과를 작성한 다음 반환합니다.</target>
        </trans-unit>
        <trans-unit id="45e5e39e383e6bd2207014133d274306d3564a22" translate="yes" xml:space="preserve">
          <source>In this case, we want to invoke the block passed to &lt;code&gt;each&lt;/code&gt; once for each element in the comments Array.</source>
          <target state="translated">이 경우, 주석 배열의 각 요소 &lt;code&gt;each&lt;/code&gt; 한 번에 전달 된 블록을 호출하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="e4180a2148850bfb1fcb06a88832aa85fc181af0" translate="yes" xml:space="preserve">
          <source>In this example all of the above reference the same &lt;code&gt;permalink&lt;/code&gt; value even though they are located within different blocks. This behavior is new as of Handlebars 4, the &lt;a href=&quot;https://github.com/wycats/handlebars.js/blob/master/release-notes.md&quot;&gt;release notes&lt;/a&gt; discuss the prior behavior as well as the migration plan.</source>
          <target state="translated">이 예에서, 상기의 모든 것은 비록 상이한 블록 내에 위치하더라도 동일한 &lt;code&gt;permalink&lt;/code&gt; 값을 참조한다 . 이 동작은 핸들 바 4에서 새로 도입 된 것으로, &lt;a href=&quot;https://github.com/wycats/handlebars.js/blob/master/release-notes.md&quot;&gt;릴리스 노트&lt;/a&gt; 는 이전 동작과 마이그레이션 계획에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="7f544d68834a03bb27aa668ccad896995c3f3fc7" translate="yes" xml:space="preserve">
          <source>In this particular example, &lt;code&gt;user&lt;/code&gt; will have the same value as the current context and &lt;code&gt;userId&lt;/code&gt; will have the index value for the iteration.</source>
          <target state="translated">이 특정 예제에서 &lt;code&gt;user&lt;/code&gt; 는 현재 컨텍스트와 동일한 값을 가지며 &lt;code&gt;userId&lt;/code&gt; 는 반복에 대한 색인 값을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="585eb1fbc68efa3532b0980721134ff9d97734c0" translate="yes" xml:space="preserve">
          <source>Initial context with which the template was executed.</source>
          <target state="translated">템플릿이 실행 된 초기 컨텍스트</target>
        </trans-unit>
        <trans-unit id="b0d46da3ba87670573761106145bd25b310f8f7c" translate="yes" xml:space="preserve">
          <source>Inline Partials</source>
          <target state="translated">인라인 부분</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="7a595cfda789eeb4d44d185a3089caf3264aa4b0" translate="yes" xml:space="preserve">
          <source>Internal helper that is called when a potential helper expression was not found in either the environment helpers or the current context. For cases where both are run, this is run prior to the &lt;code&gt;blockHelperMissing&lt;/code&gt; helper.</source>
          <target state="translated">환경 헬퍼 또는 현재 컨텍스트에서 잠재적 헬퍼 표현식을 찾을 수 없을 때 호출되는 내부 헬퍼. 둘 다 실행되는 경우 &lt;code&gt;blockHelperMissing&lt;/code&gt; 도우미 보다 먼저 실행 됩니다.</target>
        </trans-unit>
        <trans-unit id="c2edb8cd4d8ce5348f3e48d2ca8d2949e3a77c28" translate="yes" xml:space="preserve">
          <source>It is important that you put the template inside a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. Do not put it into the HTML directly or the HTML-parser might modify it (for example, if it &lt;a href=&quot;https://html.spec.whatwg.org/multipage/parsing.html#unexpected-markup-in-tables&quot;&gt;contains a table&lt;/a&gt;).</source>
          <target state="translated">템플릿을 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 안에 넣는 것이 중요합니다 . HTML에 직접 넣지 마십시오. 그렇지 않으면 HTML 파서가이를 수정할 수 있습니다 (예 &lt;a href=&quot;https://html.spec.whatwg.org/multipage/parsing.html#unexpected-markup-in-tables&quot;&gt;: 테이블&lt;/a&gt; 이 포함 된 경우 ).</target>
        </trans-unit>
        <trans-unit id="29935b86a726ac3532955e1d1165f67e7a54ebc3" translate="yes" xml:space="preserve">
          <source>It is not necessary to use the same helper in subsequent calls, the &lt;code&gt;unless&lt;/code&gt; helper could be used in the else portion as with any other helper. When the helper values are different, the closing mustache should match the opening helper name.</source>
          <target state="translated">다른 헬퍼와 마찬가지로 else 헬퍼를 사용할 수 &lt;code&gt;unless&lt;/code&gt; 후속 호출에서 동일한 헬퍼를 사용할 필요는 없습니다 . 도우미 값이 다르면 닫는 콧수염이 여는 도우미 이름과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="85c4637f4fee019affe389e076c560fa5d8cba8e" translate="yes" xml:space="preserve">
          <source>It's possible to dynamically select the partial to be executed by using sub expression syntax.</source>
          <target state="translated">하위 표현식 구문을 사용하여 실행할 부분을 동적으로 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4403f14e13b82d9069b83c5e03341a598d39dc07" translate="yes" xml:space="preserve">
          <source>It's possible to execute partials on a custom context by passing in the context to the partial call.</source>
          <target state="translated">컨텍스트를 부분 호출에 전달하여 사용자 정의 컨텍스트에서 부분을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa5fb001b54fdabf18fbeda524b11d14d2702b15" translate="yes" xml:space="preserve">
          <source>JavaScript-style strings, &lt;code&gt;&quot;&lt;/code&gt; and &lt;code&gt;'&lt;/code&gt;, may also be used vs. &lt;code&gt;[&lt;/code&gt; pairs.</source>
          <target state="translated">자바 스크립트 스타일의 문자열 &lt;code&gt;&quot;&lt;/code&gt; 과 &lt;code&gt;'&lt;/code&gt; 도 사용 대 할 수있다 &lt;code&gt;[&lt;/code&gt; 쌍.</target>
        </trans-unit>
        <trans-unit id="6ccab6aad3e86f3228c9585bf23d003543135781" translate="yes" xml:space="preserve">
          <source>Key name for the current iteration step. Set by the &lt;code&gt;each&lt;/code&gt; helper when iterating over objects.</source>
          <target state="translated">현재 반복 단계의 키 이름입니다. 객체를 반복 할 때 &lt;code&gt;each&lt;/code&gt; 도우미가 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="4ca9f10bd9a75d5b52643ba5f09d2e52af456ae8" translate="yes" xml:space="preserve">
          <source>Learn More: API Reference</source>
          <target state="translated">자세히 알아보기 : API 참조</target>
        </trans-unit>
        <trans-unit id="50413dd84ea058d9644d0efcf66c53025e13024e" translate="yes" xml:space="preserve">
          <source>Learn More: Block Helpers</source>
          <target state="translated">자세히 알아보기 : 도우미 차단</target>
        </trans-unit>
        <trans-unit id="34579bfcfa7d553d27b14624fba437ed49e61456" translate="yes" xml:space="preserve">
          <source>Learn More: Built-In Helpers</source>
          <target state="translated">자세히 알아보기 : 내장 헬퍼</target>
        </trans-unit>
        <trans-unit id="79f9e02e42e98dccb17582c2c2b0233da681677d" translate="yes" xml:space="preserve">
          <source>Learn More: Execution</source>
          <target state="translated">자세히 알아보기 : 실행</target>
        </trans-unit>
        <trans-unit id="23b7c265ba4299a72f62ddc6fee5364b17a854ce" translate="yes" xml:space="preserve">
          <source>Learn More: Expressions</source>
          <target state="translated">더 알아보기 : 표현</target>
        </trans-unit>
        <trans-unit id="f1a768e74e3a9128715e81ac43cf206633e828db" translate="yes" xml:space="preserve">
          <source>Learn More: Partials</source>
          <target state="translated">자세히 알아보기 : 부분</target>
        </trans-unit>
        <trans-unit id="fccc45b0c2b42b60f58f75b540dc57071ac8d808" translate="yes" xml:space="preserve">
          <source>Learn More: Precompilation</source>
          <target state="translated">자세히 알아보기 : 사전 컴파일</target>
        </trans-unit>
        <trans-unit id="9a8122a9dc2b83de0510b3075f6a3f3ec2f51fd4" translate="yes" xml:space="preserve">
          <source>Let's consider a helper that will generate an HTML list:</source>
          <target state="translated">HTML리스트를 생성 할 헬퍼를 생각해 보자.</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="ea31c53f57e43b1b81bd81582ed1ac8ba2885601" translate="yes" xml:space="preserve">
          <source>Like regular helpers, block helpers can accept an optional Hash as its final argument. Let's revisit the &lt;code&gt;list&lt;/code&gt; helper and make it possible for us to add any number of optional attributes to the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element we will create.</source>
          <target state="translated">일반 도우미와 마찬가지로 블록 도우미는 옵션 해시를 최종 인수로 받아 들일 수 있습니다. &lt;code&gt;list&lt;/code&gt; 헬퍼를 다시 방문하여 우리가 만들 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 요소에 여러 개의 선택적 속성을 추가 할 수있게 하자 .</target>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="aa0c5a806066cd28727705415f386e00dba5043b" translate="yes" xml:space="preserve">
          <source>Logger used by the &lt;code&gt;log&lt;/code&gt; helper.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 헬퍼가 사용하는 로거 .</target>
        </trans-unit>
        <trans-unit id="eed4ae1e7c6da16d6b8570bee451068d72c6c6c0" translate="yes" xml:space="preserve">
          <source>Logging is conditional based on the level and to value set in &lt;code&gt;Handlebars.logger.level&lt;/code&gt;, which defaults to &lt;code&gt;info&lt;/code&gt;. All log statements at or above the current level will be output.</source>
          <target state="translated">로깅은 레벨과 &lt;code&gt;Handlebars.logger.level&lt;/code&gt; 설정된 값에 따라 조건부로 설정되며 기본값은 &lt;code&gt;info&lt;/code&gt; 입니다. 현재 레벨 이상의 모든 로그 문이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="5a8cce0a8f47a21799b8ff80ef86fe74ab7bb019" translate="yes" xml:space="preserve">
          <source>Make sure you create a new data frame in each helper that assigns its own data. Otherwise, downstream helpers might unexpectedly mutate upstream variables.</source>
          <target state="translated">자체 데이터를 할당하는 각 도우미에서 새 데이터 프레임을 작성하십시오. 그렇지 않으면 다운 스트림 헬퍼가 예기치 않게 업스트림 변수를 변경시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="84ceb14dac044e414dc2eea4e7af4ef4f8c8fed9" translate="yes" xml:space="preserve">
          <source>Manual Download</source>
          <target state="translated">수동 다운로드</target>
        </trans-unit>
        <trans-unit id="c28b4806f0404d7911a084151c3e84bafcf91fc0" translate="yes" xml:space="preserve">
          <source>May be overriden if desired.</source>
          <target state="translated">원하는 경우 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0b0f6681cd5b1e3218d12cba090ad59edb4dbac" translate="yes" xml:space="preserve">
          <source>May be set to one of &lt;code&gt;Handlebars.logger.DEBUG&lt;/code&gt; , &lt;code&gt;Handlebars.logger.INFO&lt;/code&gt; , &lt;code&gt;Handlebars.logger.WARN&lt;/code&gt; , or &lt;code&gt;Handlebars.logger.ERROR&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Handlebars.logger.DEBUG&lt;/code&gt; , &lt;code&gt;Handlebars.logger.INFO&lt;/code&gt; , &lt;code&gt;Handlebars.logger.WARN&lt;/code&gt; 또는 &lt;code&gt;Handlebars.logger.ERROR&lt;/code&gt; 중 하나로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d94ebbf07f5417771d7c7fd06f208703494bf50" translate="yes" xml:space="preserve">
          <source>NPM</source>
          <target state="translated">NPM</target>
        </trans-unit>
        <trans-unit id="dfd36c74d7d9f7fab066d7e9ccc5bfcbe6b12baf" translate="yes" xml:space="preserve">
          <source>Nested &lt;code&gt;each&lt;/code&gt; blocks may access the iteration variables via depth based paths. To access the parent index, for example, &lt;code&gt;{{@../index}}&lt;/code&gt; can be used.</source>
          <target state="translated">중첩 된 &lt;code&gt;each&lt;/code&gt; 블록은 깊이 기반 경로를 통해 반복 변수에 액세스 할 수 있습니다. 예를 들어 부모 인덱스에 액세스하려면 &lt;code&gt;{{@../index}}&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0f4a5bcb8b183d02b0bcb077c16272a234471d4" translate="yes" xml:space="preserve">
          <source>Nested handlebars paths can also include &lt;code&gt;../&lt;/code&gt; segments, which evaluate their paths against a parent context.</source>
          <target state="translated">중첩 된 핸들 바 경로에는 &lt;code&gt;../&lt;/code&gt; 세그먼트가 포함될 수 있으며 , 이는 부모 컨텍스트에 대한 경로를 평가합니다.</target>
        </trans-unit>
        <trans-unit id="74746e7831f52bcf238b08f32fd7a3f948cc1833" translate="yes" xml:space="preserve">
          <source>New in Handlebars 3.0, it's possible to receive named parameters from supporting helpers.</source>
          <target state="translated">Handlebars 3.0의 새로운 기능으로, 지원되는 도우미로부터 명명 된 매개 변수를받을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a523ce88e45b22a5203cc646d72c441178cdc53a" translate="yes" xml:space="preserve">
          <source>Next, install the Handlebars npm package.</source>
          <target state="translated">그런 다음 Handlebars npm 패키지를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="56a247ca57e36d44837718fa7825acac2699b245" translate="yes" xml:space="preserve">
          <source>Normally, Handlebars templates are evaluated against the context passed into the compiled method.</source>
          <target state="translated">일반적으로 Handlebars 템플릿은 컴파일 된 메서드에 전달 된 컨텍스트에 대해 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="de0d9ff3142d8785ebe694ca9c368e060c6e5e11" translate="yes" xml:space="preserve">
          <source>Now, you're ready to use the precompiler:</source>
          <target state="translated">이제 프리 컴파일러를 사용할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="008d7314ace9ce594727fc581f6294d172775a80" translate="yes" xml:space="preserve">
          <source>On the client side you have Javascript along the lines of the following.</source>
          <target state="translated">클라이언트쪽에는 다음 줄에 따라 Javascript가 있습니다.</target>
        </trans-unit>
        <trans-unit id="66bdfd204469d2e3186766fc9966aa4616ba82b6" translate="yes" xml:space="preserve">
          <source>Optimizations</source>
          <target state="translated">Optimizations</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="2912b4092cafaa78429a24ed892d6833fefb3e18" translate="yes" xml:space="preserve">
          <source>Parameters are passed to helpers in the order that they are passed, followed by the options hash.</source>
          <target state="translated">매개 변수는 전달 된 순서대로 헬퍼에게 전달되고 그 뒤에 옵션 해시가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="bfdb208634bf4d2e512f0f6971aa95841beebdcc" translate="yes" xml:space="preserve">
          <source>Partial Blocks</source>
          <target state="translated">부분 블록</target>
        </trans-unit>
        <trans-unit id="afddc687bce1e25dd2658e54f2835df0fd188215" translate="yes" xml:space="preserve">
          <source>Partial Contexts</source>
          <target state="translated">부분 문맥</target>
        </trans-unit>
        <trans-unit id="0d4e1dbfb137fd9437a4a383011a6b8061aaf96b" translate="yes" xml:space="preserve">
          <source>Partial Parameters</source>
          <target state="translated">부분 매개 변수</target>
        </trans-unit>
        <trans-unit id="e1aae818953eb8ca4053c4ff30bde9bc13d7517f" translate="yes" xml:space="preserve">
          <source>Partials</source>
          <target state="translated">Partials</target>
        </trans-unit>
        <trans-unit id="a11b479f57d77a12d70fd4de53074b05eae4c50e" translate="yes" xml:space="preserve">
          <source>Please note that this approach is not recommended for production applications. A better way is to precompile your templates. This will result in a smaller required runtime library and significant savings from not having to compile the template in the browser. This can be especially important when working with mobile devices.</source>
          <target state="translated">이 방법은 프로덕션 응용 프로그램에는 권장되지 않습니다. 더 좋은 방법은 템플릿을 미리 컴파일하는 것입니다. 이로 인해 필요한 런타임 라이브러리가 줄어들고 브라우저에서 템플릿을 컴파일하지 않아도 크게 절약됩니다. 이것은 모바일 장치로 작업 할 때 특히 중요 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d2dd642b809a9afa37c5b34ef9ccae95e253485" translate="yes" xml:space="preserve">
          <source>Precompilation</source>
          <target state="translated">Precompilation</target>
        </trans-unit>
        <trans-unit id="140bf4324d857e87435a3ac782c13faf3ee0e255" translate="yes" xml:space="preserve">
          <source>Precompiles a given template so it can be sent to the client and executed without compilation.</source>
          <target state="translated">주어진 템플릿을 미리 컴파일하여 클라이언트로 전송하고 컴파일없이 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5de570bccbeed2a12ce2dd63cfe1ef4f5ec7791" translate="yes" xml:space="preserve">
          <source>Precompiling Templates Inside NodeJS</source>
          <target state="translated">NodeJS 내부의 사전 컴파일 템플리트</target>
        </trans-unit>
        <trans-unit id="c65acf0de11f67da7f204cf3de2da3b293a21201" translate="yes" xml:space="preserve">
          <source>Prevents &lt;code&gt;string&lt;/code&gt; from being escaped when the template is rendered.</source>
          <target state="translated">템플릿을 렌더링 할 때 &lt;code&gt;string&lt;/code&gt; 이 이스케이프되지 않도록 합니다 .</target>
        </trans-unit>
        <trans-unit id="43baedbe5fba00db0e1c4eb470b45006428d75df" translate="yes" xml:space="preserve">
          <source>Private variables defined in parent scopes may be accessed via pathed queries. To access the &lt;code&gt;index&lt;/code&gt; field of the parent iterator, &lt;code&gt;@../index&lt;/code&gt; may be used.</source>
          <target state="translated">부모 범위에 정의 된 개인 변수는 경로 쿼리를 통해 액세스 할 수 있습니다. 부모 반복자 의 &lt;code&gt;index&lt;/code&gt; 필드에 액세스하기 위해 &lt;code&gt;@../index&lt;/code&gt; 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="169b54f4e94cc03115316ce38148f3af97af4af2" translate="yes" xml:space="preserve">
          <source>Private variables provided via the &lt;code&gt;data&lt;/code&gt; option are available in all descendent scopes.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 옵션을 통해 제공된 개인 변수 는 모든 하위 범위에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b361862abccd8a0f1097c73458c75b844594b08" translate="yes" xml:space="preserve">
          <source>Raw Blocks</source>
          <target state="translated">원시 블록</target>
        </trans-unit>
        <trans-unit id="9079e24305ee7015fa3709770c312b56c5e668f5" translate="yes" xml:space="preserve">
          <source>Raw blocks are available for templates needing to handle unprocessed mustache blocks.</source>
          <target state="translated">처리되지 않은 콧수염 블록을 처리해야하는 템플릿에 원시 블록을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da01042c8ff5d84e5d8fc5496d0ece4b54a4a5da" translate="yes" xml:space="preserve">
          <source>Raw blocks operate in the same manner as other &lt;a href=&quot;block_helpers&quot;&gt;block helpers&lt;/a&gt; with the distinction of the child content is treated as a literal string.</source>
          <target state="translated">원시 블록 은 하위 내용이 구별 되는 다른 &lt;a href=&quot;block_helpers&quot;&gt;블록 도우미&lt;/a&gt; 와 동일한 방식으로 작동 하며 리터럴 문자열로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="654b2a7ca91938bcf52baae5cdd457416dc0ab70" translate="yes" xml:space="preserve">
          <source>Registers a decorator accessible by any template in the environment.</source>
          <target state="translated">환경의 모든 템플릿으로 액세스 할 수있는 데코레이터를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="9614c52913ae536bce44548c59e226fa8b74aa4d" translate="yes" xml:space="preserve">
          <source>Registers helpers accessible by any template in the environment.</source>
          <target state="translated">환경의 모든 템플릿이 액세스 할 수있는 도우미를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="00dbd9ddd92a1df900e2abdfdff8665ca74f0fff" translate="yes" xml:space="preserve">
          <source>Registers partials accessible by any template in the environment.</source>
          <target state="translated">환경의 모든 템플릿이 액세스 할 수있는 부분을 등록합니다.</target>
        </trans-unit>
        <trans-unit id="c350411d6e07254e582cc14d34d5e846595508bd" translate="yes" xml:space="preserve">
          <source>Removes this Handlebars instance from the global namespace, restoring the global `Handlebars` variable to its previous value.</source>
          <target state="translated">전역 'Handlebars'변수를 이전 값으로 복원하여 전역 네임 스페이스에서이 Handlebars 인스턴스를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="60b40270c9aa39e477a05bfffd51a95ebc299c63" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&quot;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;`&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt; with the HTML entity equivalent value for string values. &lt;code&gt;SafeString&lt;/code&gt; values are left untouched.</source>
          <target state="translated">본 절의 &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&quot;&lt;/code&gt; , &lt;code&gt;'&lt;/code&gt; , &lt;code&gt;`&lt;/code&gt; , &lt;code&gt;=&lt;/code&gt; 문자열 값의 HTML 엔티티 동등한 값. &lt;code&gt;SafeString&lt;/code&gt; 의 값은 그대로 남아있다.</target>
        </trans-unit>
        <trans-unit id="abe6bf0c6240c25d903680d73c03bcdc65b8f11c" translate="yes" xml:space="preserve">
          <source>Require-aware systems such as Node and Webpack can then load via:</source>
          <target state="translated">Node 및 Webpack과 같은 필수 시스템은 다음을 통해로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bff68ddcfffc60143c6dfa7278a010bbc6e4f825" translate="yes" xml:space="preserve">
          <source>Set to true by the &lt;code&gt;each&lt;/code&gt; helper for the first step of iteration.</source>
          <target state="translated">첫 번째 반복 단계 에서 &lt;code&gt;each&lt;/code&gt; 헬퍼 가 true로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="d795fc32656cbc090fa932a7d23a5e98d36dfa0e" translate="yes" xml:space="preserve">
          <source>Set to true by the &lt;code&gt;each&lt;/code&gt; helper for the last step of iteration.</source>
          <target state="translated">마지막 반복 단계에 &lt;code&gt;each&lt;/code&gt; 헬퍼 가 true로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a60bfa1e1f18063009d3a26224b680d62bf9821" translate="yes" xml:space="preserve">
          <source>Sets up a template that was precompiled with &lt;code&gt;Handlebars.precompile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Handlebars.precompile&lt;/code&gt; 로 사전 컴파일 된 템플릿을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="7eb642c90f2765a5fd6d12c8f9b5f441e369599d" translate="yes" xml:space="preserve">
          <source>Simple Iterators</source>
          <target state="translated">간단한 반복자</target>
        </trans-unit>
        <trans-unit id="bbbbdc8dcf3623a7cdfe9c9b80ded67395212890" translate="yes" xml:space="preserve">
          <source>Simple utility method to augment &lt;code&gt;obj&lt;/code&gt; with all keys defined on &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 에 정의 된 모든 키를 사용하여 &lt;code&gt;obj&lt;/code&gt; 를 확장하는 간단한 유틸리티 방법 입니다.</target>
        </trans-unit>
        <trans-unit id="3d169257007f66317114bfabfb8287b150658bb9" translate="yes" xml:space="preserve">
          <source>Since the contents of a block helper are escaped when you call &lt;code&gt;options.fn(context)&lt;/code&gt;, Handlebars does not escape the results of a block helper. If it did, inner content would be double-escaped!</source>
          <target state="translated">&lt;code&gt;options.fn(context)&lt;/code&gt; 를 호출하면 블록 도우미의 내용이 이스케이프되므로 핸들 막대는 블록 도우미의 결과를 이스케이프하지 않습니다. 그렇다면 내부 내용이 두 번 이스케이프됩니다!</target>
        </trans-unit>
        <trans-unit id="97c37cb2c91c33f2f89d5394c056172966e8abdb" translate="yes" xml:space="preserve">
          <source>Subexpressions</source>
          <target state="translated">Subexpressions</target>
        </trans-unit>
        <trans-unit id="4a1d9a4b2439c7cea5d33f7d9758952cbbac7212" translate="yes" xml:space="preserve">
          <source>Subexpressions do not resolve variables so &lt;code&gt;whichPartial&lt;/code&gt; must be a function. If a simple variable has the partial name, it's possible to resolve it via the &lt;code&gt;lookup&lt;/code&gt; helper.</source>
          <target state="translated">하위 표현식은 변수를 분석하지 않으므로 &lt;code&gt;whichPartial&lt;/code&gt; 는 함수 여야합니다. 단순 변수에 부분 이름이 있으면 &lt;code&gt;lookup&lt;/code&gt; 도우미 를 통해 변수를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c28f791f8df067fd53e105277abd0078a088333" translate="yes" xml:space="preserve">
          <source>Supports a variety of options that alter how the template executes.</source>
          <target state="translated">템플릿 실행 방법을 변경하는 다양한 옵션을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="a798c2a15de7a9dbbef813f9f412fa639e614f65" translate="yes" xml:space="preserve">
          <source>Supports all of the same options parameters as the &lt;code&gt;Handlebars.compile&lt;/code&gt; method. Additionally may pass:</source>
          <target state="translated">&lt;code&gt;Handlebars.compile&lt;/code&gt; 메소드 와 동일한 옵션 매개 변수를 모두 지원합니다 . 또한 다음을 통과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="677122f377aad7d981d924a67e7c8cbed0790a43" translate="yes" xml:space="preserve">
          <source>Template comments with &lt;code&gt;{{!-- --}}&lt;/code&gt; or &lt;code&gt;{{! }}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{!-- --}}&lt;/code&gt; 또는 &lt;code&gt;{{! }}&lt;/code&gt; 템플릿 주석 }} .</target>
        </trans-unit>
        <trans-unit id="3f593da220af59624316bb02e4a7f62992ad4f58" translate="yes" xml:space="preserve">
          <source>Template comments with {{!-- --}} or {{! }}.</source>
          <target state="translated">{{!--}} 또는 {{!로 템플릿 주석 }}.</target>
        </trans-unit>
        <trans-unit id="da3b46a582f3646b13f6156f179fb6a0834d2545" translate="yes" xml:space="preserve">
          <source>Template whitespace may be omitted from either side of any mustache statement by adding a &lt;code&gt;~&lt;/code&gt; character by the braces. When applied all whitespace on that side will be removed up to the first handlebars expression or non-whitespace character on that side.</source>
          <target state="translated">중괄호 로 &lt;code&gt;~&lt;/code&gt; 문자를 추가하여 콧수염 문장의 양쪽에서 템플릿 공백을 생략 할 수 있습니다 . 해당 측면의 모든 공백은 첫 번째 핸들 바 표현식 또는 해당 측면의 공백이 아닌 문자까지 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ae494788ca30b460b6e6783e042344b5550b642d" translate="yes" xml:space="preserve">
          <source>Templates created for a given environment are bound to that environment. This means that templates that need to run in multiple environments will need to be recompiled or reconstructed via &lt;code&gt;Handlebars.template&lt;/code&gt; for each environment. This applies to partials as well.</source>
          <target state="translated">주어진 환경을 위해 생성 된 템플릿은 해당 환경에 바인딩됩니다. 즉, 여러 환경에서 실행해야하는 템플릿 은 각 환경에 대해 &lt;code&gt;Handlebars.template&lt;/code&gt; 을 통해 다시 컴파일하거나 재구성해야 합니다. 이것은 부분에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8c17fd7692ecb0216114b5f28c0ada8ab8239fbb" translate="yes" xml:space="preserve">
          <source>Templates may define block scoped partials via the &lt;code&gt;inline&lt;/code&gt; decorator.</source>
          <target state="translated">템플릿은 &lt;code&gt;inline&lt;/code&gt; 데코레이터 를 통해 블록 범위 부분을 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2fbdae4231282a33358a465e1bab2f7d365d00b6" translate="yes" xml:space="preserve">
          <source>That template works with this context</source>
          <target state="translated">해당 템플릿은이 컨텍스트에서 작동합니다</target>
        </trans-unit>
        <trans-unit id="51a866e74615ab1fcda0d78ce2bcbd57bfe15aac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blockHelperMissing&lt;/code&gt; helper</source>
          <target state="translated">&lt;code&gt;blockHelperMissing&lt;/code&gt; 의 도우미</target>
        </trans-unit>
        <trans-unit id="e1b620c29436d687350410d5e429fc9cccdbf8f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bold&lt;/code&gt; helper will add markup to make its text bold. As before, the function will take a context as input and return a String.</source>
          <target state="translated">&lt;code&gt;bold&lt;/code&gt; 도우미는 텍스트를 굵게 만들기 위해 마크 업을 추가합니다. 이전과 마찬가지로 함수는 컨텍스트를 입력으로 받아 String을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="48c1fdab418fd16b96b82b2c0fa52e143d30b51b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;each&lt;/code&gt; block helper</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 블록 도우미</target>
        </trans-unit>
        <trans-unit id="d48932b2eb7e61a867da978291bca1d4516ef36c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;each&lt;/code&gt; helper also supports &lt;a href=&quot;block_helpers#block-params&quot;&gt;block parameters&lt;/a&gt;, allowing for named references anywhere in the block.</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 도우미도 지원 &lt;a href=&quot;block_helpers#block-params&quot;&gt;블록 매개 변수를&lt;/a&gt; 어디서나 블록의 이름을 참조 허용.</target>
        </trans-unit>
        <trans-unit id="f7851d15f896b93c5b60fa4cc7f4ba451379f10f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;helperMissing&lt;/code&gt; helper</source>
          <target state="translated">&lt;code&gt;helperMissing&lt;/code&gt; 도우미</target>
        </trans-unit>
        <trans-unit id="adff189112e5deafc46d351e7ae2a30d20f31df8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; block helper</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 블록 도우미</target>
        </trans-unit>
        <trans-unit id="ca2b06ae497be7f33478a6ee5e3229947b2f01d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; block helper</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 블록 도우미</target>
        </trans-unit>
        <trans-unit id="8ae917699969851c139dc430bc4ed90cdc1e99a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log&lt;/code&gt; helper allows for logging of context state while executing a template.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 헬퍼 템플릿을 실행하는 동안 컨텍스트 상태에 로그인 할 수있다.</target>
        </trans-unit>
        <trans-unit id="aeb7335da41634f172b68f3443d586b45cc28fbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; helper</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; 도우미</target>
        </trans-unit>
        <trans-unit id="c44eccf469f3bd8e3026c851553c744eeae93731" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookup&lt;/code&gt; helper allows for dynamic parameter resolution using Handlebars variables. This is useful for resolving values for array indexes.</source>
          <target state="translated">&lt;code&gt;lookup&lt;/code&gt; 헬퍼 핸들 바 변수를 사용하여 동적 변수 분해능을 허용한다. 이는 배열 인덱스의 값을 확인하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="050706d623ada34a5205a06afb0725ec5ce0d0a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;noop&lt;/code&gt; helper (short for &quot;no operation&quot;) will receive an options hash. This options hash contains a function (&lt;code&gt;options.fn&lt;/code&gt;) that behaves like a normal compiled Handlebars template. Specifically, the function will take a context and return a String.</source>
          <target state="translated">&lt;code&gt;noop&lt;/code&gt; 도우미 ( &quot;아니오 작업&quot;의 줄임말)는 옵션 해시를 받게됩니다. 이 옵션 해시 는 일반 컴파일 된 핸들 바 템플릿처럼 동작 하는 함수 ( &lt;code&gt;options.fn&lt;/code&gt; )를 포함합니다 . 특히 함수는 컨텍스트를 가져 와서 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="10be7abeab093030b70a78d8e95d0a2daf714cb0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unless&lt;/code&gt; block helper</source>
          <target state="translated">&lt;code&gt;unless&lt;/code&gt; 블록 도우미</target>
        </trans-unit>
        <trans-unit id="8d015e153a7cb460a3df8b91bf1d41937c2bf6d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; Block Helper</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 블록 도우미</target>
        </trans-unit>
        <trans-unit id="a9e6be8090236a0a676f723b35022d6d46b9c12d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; helper</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 도우미</target>
        </trans-unit>
        <trans-unit id="b6cb0e668095690123cac7ea1a044fc34ea8e8dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with&lt;/code&gt; helper demonstrates how to pass a parameter to your helper. When a helper is called with a parameter, it is invoked with whatever context the template passed in.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 도우미는 도우미에 매개 변수를 전달하는 방법을 보여줍니다. 도우미가 매개 변수와 함께 호출되면 템플릿이 전달 된 컨텍스트와 상관없이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="eae1f1586182478fcc28797c1595c187420d6c55" translate="yes" xml:space="preserve">
          <source>The Handlebars compiler will optimize accesses to those helpers for performance.</source>
          <target state="translated">Handlebars 컴파일러는 성능을 위해 해당 도우미에 대한 액세스를 최적화합니다.</target>
        </trans-unit>
        <trans-unit id="d55428710199018ad40a8b12bc2e3f5e44e66ec9" translate="yes" xml:space="preserve">
          <source>The blockHelperMissing helper</source>
          <target state="translated">blockHelperMissing 도우미</target>
        </trans-unit>
        <trans-unit id="79996ae5e3087c2694f9cb349a665eddbbe37691" translate="yes" xml:space="preserve">
          <source>The browser builds are located in the &lt;code&gt;node_modules/handlebars/dist/&lt;/code&gt; directory. Making these accessible to the browser will depend on what build system you are using but this may be as simple as copying the files to an acessible place.</source>
          <target state="translated">브라우저 빌드는 &lt;code&gt;node_modules/handlebars/dist/&lt;/code&gt; 디렉토리에 있습니다. 브라우저에서 액세스 할 수있게하는 것은 사용중인 빌드 시스템에 따라 다르지만 파일을 적절한 위치에 복사하는 것만 큼 간단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5dab3b1a6ee343ad9239fed46f742f9d248e8841" translate="yes" xml:space="preserve">
          <source>The comments will not be in the resulting output. If you'd like the comments to show up. Just use html comments, and they will be output.</source>
          <target state="translated">주석은 결과 출력에 포함되지 않습니다. 의견을 표시하려면 html 주석 만 사용하면 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="d94365002ad9c3df40e3b0454d0977aa01fcf6b3" translate="yes" xml:space="preserve">
          <source>The compiler will insert templates in &lt;code&gt;Handlebars.templates&lt;/code&gt;. If your input file is &lt;code&gt;person.handlebars&lt;/code&gt;, the compiler will insert it at &lt;code&gt;Handlebars.templates.person&lt;/code&gt;. This template will be a function that may be directly executed in the same manner as templates compiled locally. I.e.</source>
          <target state="translated">컴파일러는 &lt;code&gt;Handlebars.templates&lt;/code&gt; 에 템플릿을 삽입 합니다. 당신의 입력 파일 인 경우 &lt;code&gt;person.handlebars&lt;/code&gt; , 컴파일러는 그것을 삽입합니다 &lt;code&gt;Handlebars.templates.person&lt;/code&gt; . 이 템플릿은 로컬에서 컴파일 된 템플릿과 같은 방식으로 직접 실행될 수있는 기능입니다. 즉</target>
        </trans-unit>
        <trans-unit id="88f96fc1edc8da4236ef4f14690edcc83a4a2a01" translate="yes" xml:space="preserve">
          <source>The default bower library is UMD-style so this should work properly with global, CJS, and AMD module systems. &lt;code&gt;handlebars.js&lt;/code&gt; and &lt;code&gt;handlebars.runtime.js&lt;/code&gt; are the primary source files but a number of other options exist in this component. We recommend looking at them and selecting the best one for your needs.</source>
          <target state="translated">기본 bower 라이브러리는 UMD 스타일이므로 글로벌, CJS 및 AMD 모듈 시스템에서 제대로 작동합니다. &lt;code&gt;handlebars.js&lt;/code&gt; 및 &lt;code&gt;handlebars.runtime.js&lt;/code&gt; 는 기본 소스 파일이지만이 구성 요소에는 여러 가지 다른 옵션이 있습니다. 우리는 그것들을보고 당신의 필요에 가장 적합한 것을 선택하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2adc796a562b541c3e4bf02b9dd7e3f14c94e304" translate="yes" xml:space="preserve">
          <source>The each block helper</source>
          <target state="translated">각 블록 도우미</target>
        </trans-unit>
        <trans-unit id="b8b0aca3bc79a83b97f4c80f1ea0abe197d4c822" translate="yes" xml:space="preserve">
          <source>The exact value that &lt;code&gt;../&lt;/code&gt; will resolve to varies based on the helper that is calling the block. Using &lt;code&gt;../&lt;/code&gt; is only necessary when context changes, so children of helpers such as &lt;code&gt;each&lt;/code&gt; would require the use of &lt;code&gt;../&lt;/code&gt; while children of helpers such as &lt;code&gt;if&lt;/code&gt; do not.</source>
          <target state="translated">&lt;code&gt;../&lt;/code&gt; 가 해결 하는 정확한 값 은 블록을 호출하는 도우미에 따라 다릅니다. 사용 &lt;code&gt;../&lt;/code&gt; 컨텍스트 변경과 같은 헬퍼의 아이들 있도록하는 경우에만 필요합니다 &lt;code&gt;each&lt;/code&gt; 의 사용을 필요로 &lt;code&gt;../&lt;/code&gt; 동안 같은 헬퍼의 자녀 &lt;code&gt;if&lt;/code&gt; 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="88a13c3081cd695d5587732faa31ffda481980e4" translate="yes" xml:space="preserve">
          <source>The fastest route is to manually download the package and copy into your project but a number of other systems are available. &lt;a href=&quot;http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v4.0.12.js&quot;&gt;Download: 4.0.12&lt;/a&gt;&lt;a href=&quot;http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.runtime-v4.0.12.js&quot;&gt;Download: runtime-4.0.12&lt;/a&gt;</source>
          <target state="translated">가장 빠른 경로는 패키지를 수동으로 다운로드하여 프로젝트에 복사하는 것이지만 다른 여러 시스템을 사용할 수 있습니다. &lt;a href=&quot;http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v4.0.12.js&quot;&gt;다운로드 : 4.0.12 &lt;/a&gt;&lt;a href=&quot;http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.runtime-v4.0.12.js&quot;&gt;다운로드 : runtime-4.0.12&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="37a6baa9e3f8cf5968dd7f4e7d386e8b17ca8b23" translate="yes" xml:space="preserve">
          <source>The first and last steps of iteration are noted via the &lt;code&gt;@first&lt;/code&gt; and &lt;code&gt;@last&lt;/code&gt; variables when iterating over an array. When iterating over an object only the &lt;code&gt;@first&lt;/code&gt; is available.</source>
          <target state="translated">반복의 첫 번째 단계와 마지막 단계 는 배열을 반복 할 때 &lt;code&gt;@first&lt;/code&gt; 및 &lt;code&gt;@last&lt;/code&gt; 변수를 통해 표시됩니다. 객체를 반복 할 때는 &lt;code&gt;@first&lt;/code&gt; 만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c81190ef7197527c0283bb023349ac00d8e353c1" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;@data&lt;/code&gt; variables are implemented by Handlebars and its builtin helpers.</source>
          <target state="translated">다음 &lt;code&gt;@data&lt;/code&gt; 변수는 Handlebar 및 내장 도우미에 의해 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="76ced5816dfb2a6f409fb1a133c3f10b3c99f820" translate="yes" xml:space="preserve">
          <source>The helper is similar to the original &lt;code&gt;each&lt;/code&gt; helper.</source>
          <target state="translated">도우미는 원래의 &lt;code&gt;each&lt;/code&gt; 도우미 와 비슷합니다 .</target>
        </trans-unit>
        <trans-unit id="947dabff074d82f15ec1e63c5b70625760aac962" translate="yes" xml:space="preserve">
          <source>The helperMissing helper</source>
          <target state="translated">도우미</target>
        </trans-unit>
        <trans-unit id="28134f409acc4b9311d2e573e5e5238c07e313a1" translate="yes" xml:space="preserve">
          <source>The if block helper</source>
          <target state="translated">if 블록 도우미</target>
        </trans-unit>
        <trans-unit id="bc85793ea9932167cb65566f534159bc427804d3" translate="yes" xml:space="preserve">
          <source>The keys in hash arguments must each be simple identifiers, and the values are Handlebars expressions. This means that values can be simple identifiers, paths, or Strings.</source>
          <target state="translated">해시 인수의 키는 각각 간단한 식별자 여야하며 값은 핸들 식입니다. 이는 값이 간단한 식별자, 경로 또는 문자열 일 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="ab94c8cd2e78ea00f126552544d3d675134f2e7b" translate="yes" xml:space="preserve">
          <source>The latest passing master build is named &lt;code&gt;handlebars-latest.js&lt;/code&gt; and each passing SHA on master will create a &lt;code&gt;handlebars-gitSHA.js&lt;/code&gt; file. While these all pass the CI, it's preferrable to use one of the tagged releases.</source>
          <target state="translated">최신 전달 마스터 빌드의 이름은 &lt;code&gt;handlebars-latest.js&lt;/code&gt; 이며 마스터에서 전달하는 각 SHA는 &lt;code&gt;handlebars-gitSHA.js&lt;/code&gt; 파일을 만듭니다 . 이들은 모두 CI를 통과하지만 태그가 지정된 릴리스 중 하나를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9c340fd90e574cc26291fb5d89f25689e417ee6b" translate="yes" xml:space="preserve">
          <source>The log block helper</source>
          <target state="translated">로그 블록 도우미</target>
        </trans-unit>
        <trans-unit id="cbeaa3a5290f3d920a9143ac493a13fa8de3065c" translate="yes" xml:space="preserve">
          <source>The log level may be set using the &lt;code&gt;level&lt;/code&gt; hash parameter. Supported values are &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, and &lt;code&gt;error&lt;/code&gt;. When omitted, &lt;code&gt;info&lt;/code&gt; is the default value,</source>
          <target state="translated">로그 레벨은 &lt;code&gt;level&lt;/code&gt; 해시 매개 변수를 사용하여 설정할 수 있습니다 . 지원되는 값은 &lt;code&gt;debug&lt;/code&gt; , &lt;code&gt;info&lt;/code&gt; , &lt;code&gt;warn&lt;/code&gt; 및 &lt;code&gt;error&lt;/code&gt; 입니다. 생략하면 &lt;code&gt;info&lt;/code&gt; 가 기본값이며</target>
        </trans-unit>
        <trans-unit id="f64cf55fb1cc16004e1dcaf39495b66f8d154ddc" translate="yes" xml:space="preserve">
          <source>The lookup helper</source>
          <target state="translated">조회 도우미</target>
        </trans-unit>
        <trans-unit id="1ce00178349406abf95abf159dd759bb1343f8aa" translate="yes" xml:space="preserve">
          <source>The normal behavior when attempting to render a partial that is not found is for the implementation to throw an error. If failover is desired instead, partials may be called using the block syntax.</source>
          <target state="translated">찾을 수없는 부분을 렌더링하려고 할 때 정상적인 동작은 구현에서 오류를 발생시키는 것입니다. 장애 조치가 대신 필요한 경우 블록 구문을 사용하여 부분을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9b8fba69cc9e4516787999dc0e11e69ce23f239" translate="yes" xml:space="preserve">
          <source>The output of all expressions except for triple-braced expressions are passed through this method. Helpers should also use this method when returning HTML content via a &lt;code&gt;SafeString&lt;/code&gt; instance, to prevent possible code injection.</source>
          <target state="translated">삼중 괄호 표현식을 제외한 모든 표현식의 출력은이 메소드를 통해 전달됩니다. 또한 도우미는 코드 삽입을 막기 위해 &lt;code&gt;SafeString&lt;/code&gt; 인스턴스 를 통해 HTML 내용을 반환 할 때이 방법을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b3086985030ecc73f554e4df1e591cbce84c5f7b" translate="yes" xml:space="preserve">
          <source>The simplest Handlebars expression is a simple identifier:</source>
          <target state="translated">가장 간단한 핸들 바 표현식은 간단한 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="6a6683f0f219fdd01d9769039a4d40aa3e4340b3" translate="yes" xml:space="preserve">
          <source>The template function can be passed an options object as the second parameter which allows for customization:</source>
          <target state="translated">템플릿 함수는 옵션 객체를 두 번째 매개 변수로 전달하여 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d5db5062eb9f0e0d74c08802bf9ba2a869216923" translate="yes" xml:space="preserve">
          <source>The unless block helper</source>
          <target state="translated">그렇지 않은 블록 도우미</target>
        </trans-unit>
        <trans-unit id="958fdbadd00c4b4fea3830d5740ac7760dae7a9f" translate="yes" xml:space="preserve">
          <source>The with Block Helper</source>
          <target state="translated">with 블록 도우미</target>
        </trans-unit>
        <trans-unit id="48f1a9946ea3eced5a6861c7adce95afb95f6a5a" translate="yes" xml:space="preserve">
          <source>The with helper</source>
          <target state="translated">와 도우미</target>
        </trans-unit>
        <trans-unit id="58dc73d318a38d8f039675cb037d1faede8b2bab" translate="yes" xml:space="preserve">
          <source>There are many different ways to install and use Handlebars, the following are some of the more popular. Please send &lt;a href=&quot;https://github.com/wycats/handlebars-site/blob/master/src/pages/installation.haml&quot;&gt;pull requests&lt;/a&gt; if we are missing one!</source>
          <target state="translated">핸들 바를 설치하고 사용하는 방법은 여러 가지가 있으며, 다음은 가장 널리 사용되는 방법입니다. &lt;a href=&quot;https://github.com/wycats/handlebars-site/blob/master/src/pages/installation.haml&quot;&gt;풀 요청&lt;/a&gt; 이없는 경우 보내십시오 !</target>
        </trans-unit>
        <trans-unit id="126daa79cffb9d3be4bf9597d2e7e5c2df9b5911" translate="yes" xml:space="preserve">
          <source>This allows for distinct versions of the library to be used simultaneously without concern for version conflicts.</source>
          <target state="translated">따라서 버전 충돌에 대한 우려없이 라이브러리의 개별 버전을 동시에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd08a7bafbe8722bdcd93683ec6c80815b5b8fa3" translate="yes" xml:space="preserve">
          <source>This allows for nested helpers to avoid name conflicts that can occur with private variables.</source>
          <target state="translated">이를 통해 중첩 된 헬퍼는 개인 변수에서 발생할 수있는 이름 충돌을 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="476f2f1c23c926322829b2df66017caf71b192e4" translate="yes" xml:space="preserve">
          <source>This assumes you already have Homebrew installed. If not, &lt;a href=&quot;http://brew.sh/&quot;&gt;install it&lt;/a&gt; first.</source>
          <target state="translated">이미 Homebrew가 설치되어 있다고 가정합니다. 그렇지 않은 경우 먼저 &lt;a href=&quot;http://brew.sh/&quot;&gt;설치하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="181adfc4f839b007c0e6340c080a33ae992bcdc9" translate="yes" xml:space="preserve">
          <source>This block syntax may also be used to pass templates to the partial, which can be executed by the specially named partial, &lt;code&gt;@partial-block&lt;/code&gt;. A template of</source>
          <target state="translated">이 블록 구문은 템플릿을 partial에 전달하는 데 사용될 수 있으며,이 이름은 특별히 명명 된 partial &lt;code&gt;@partial-block&lt;/code&gt; 의해 실행될 수 있습니다 . 템플릿</target>
        </trans-unit>
        <trans-unit id="a5def34127721210d882877a3d60e2fc7ffed1a5" translate="yes" xml:space="preserve">
          <source>This call will register the &lt;code&gt;myPartial&lt;/code&gt; partial. Partials may be precompiled and the precompiled template passed into the second parameter.</source>
          <target state="translated">이 호출은 &lt;code&gt;myPartial&lt;/code&gt; 부분 을 등록합니다 . 부분적으로 미리 컴파일되고 미리 컴파일 된 템플릿이 두 번째 매개 변수로 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="438627823762d6b58549d9ce5cfa446c303a0983" translate="yes" xml:space="preserve">
          <source>This component should also work with other packagers such as &lt;a href=&quot;https://github.com/componentjs/component&quot;&gt;component&lt;/a&gt; but these have not been tested as throughly.</source>
          <target state="translated">이 구성 요소는 또한 다른 배포자와 함께 작업해야 &lt;a href=&quot;https://github.com/componentjs/component&quot;&gt;요소&lt;/a&gt; 그러나 이들은 철저로 테스트되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="1a070d10a48e73056702ac811351ed8db8730e16" translate="yes" xml:space="preserve">
          <source>This expands the default behavior of stripping lines that are &quot;standalone&quot; helpers (only a block helper, comment, or partial and whitespace).</source>
          <target state="translated">이렇게하면 &quot;독립형&quot;헬퍼 (블록 헬퍼, 주석 또는 부분 및 공백 만) 인 탈선의 기본 동작이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="c23fbdafa85a86e8e5ae8ed5c12580c50d91d8d2" translate="yes" xml:space="preserve">
          <source>This expression means &quot;look up the &lt;code&gt;article&lt;/code&gt; property in the current context. Then look up the &lt;code&gt;title&lt;/code&gt; property in the result&quot;.</source>
          <target state="translated">이 표현은 &quot; 현재 컨텍스트에서 &lt;code&gt;article&lt;/code&gt; 속성을 찾은 다음 결과에서 &lt;code&gt;title&lt;/code&gt; 속성을 찾습니다 &quot;를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="e3b402e01b0c077d04bd52876b8834ae2c696bc8" translate="yes" xml:space="preserve">
          <source>This expression means &quot;look up the &lt;code&gt;title&lt;/code&gt; property in the current context&quot;. Block helpers may manipulate the current context, but they do not change the basic meaning of an expression.</source>
          <target state="translated">이 표현은 &quot; 현재 컨텍스트에서 &lt;code&gt;title&lt;/code&gt; 속성을 찾습니다&quot;를 의미 합니다. 블록 도우미는 현재 컨텍스트를 조작 할 수 있지만 표현식의 기본 의미는 변경하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3d439c331018d2231adcaaf5db81670708e6b647" translate="yes" xml:space="preserve">
          <source>This is intended to match the &lt;a href=&quot;http://mustache.github.io/mustache.5.html#Sections&quot;&gt;Mustache behavior&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;http://mustache.github.io/mustache.5.html#Sections&quot;&gt;콧수염 동작&lt;/a&gt; 과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="64203be707fdf5b0bd9a45cbcc79953e55ce7631" translate="yes" xml:space="preserve">
          <source>This is particularly useful for exposing data from parent contexts to the partial:</source>
          <target state="translated">이것은 부모 컨텍스트에서 부분적으로 데이터를 노출 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="5d74a351c3aeb23e7680c9822cba7236a0f01466" translate="yes" xml:space="preserve">
          <source>This is the preferred method of installation when using the precompiler as it ensures that your precompiled templates always run against the same version of the runtime.</source>
          <target state="translated">사전 컴파일러를 사용할 때 사전 컴파일 된 템플리트가 항상 동일한 버전의 런타임에 대해 실행되도록하는 것이 선호되는 설치 방법입니다.</target>
        </trans-unit>
        <trans-unit id="6670b51ad37e00c02398afe62443d63c9982b57b" translate="yes" xml:space="preserve">
          <source>This is used by the built-in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;with&lt;/code&gt; helpers to control their execution flow. The Handlebars definition of empty is any of:</source>
          <target state="translated">이것은 사용하는 내장 된 &lt;code&gt;if&lt;/code&gt; 와 &lt;code&gt;with&lt;/code&gt; 자신의 실행 흐름을 제어하는 도우미. empty의 Handlebars 정의는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="1e9fc8b343a0f263fea4fa7e344566037f779b5e" translate="yes" xml:space="preserve">
          <source>This makes it possible to use Handlebars templates with more raw JSON objects.</source>
          <target state="translated">따라서 더 많은 원시 JSON 객체와 함께 핸들 바 템플릿을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8af32c2823a2b293307bafdf6b967ce4a7a79217" translate="yes" xml:space="preserve">
          <source>This may be overriden by applications. To force the existence of the field, the following may be used:</source>
          <target state="translated">이것은 응용 프로그램에 의해 대체 될 수 있습니다. 필드의 존재를 강제하기 위해 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ac978225560b8019bc3dd7e6637efd8fa984ba4" translate="yes" xml:space="preserve">
          <source>This may be overriden by users that wish to change the behavior of block evaluation. For example</source>
          <target state="translated">블록 평가 동작을 변경하려는 사용자가이를 대체 할 수 있습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="2b2f294dfc8e4086ada434a265f7a2144e2e2459" translate="yes" xml:space="preserve">
          <source>This method is aliased at &lt;code&gt;Handlebars.Utils.escapeExpression&lt;/code&gt;.</source>
          <target state="translated">이 메소드는 &lt;code&gt;Handlebars.Utils.escapeExpression&lt;/code&gt; 에서 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="f0f05236984f5fbf2838d8abbc8d8d910eb990cc" translate="yes" xml:space="preserve">
          <source>This pattern can be used to implement more advanced iterators. For instance, let's create an iterator that creates a &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; wrapper, and wraps each resulting element in an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이 패턴은 고급 반복자를 구현하는 데 사용할 수 있습니다. 예를 들어 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 래퍼 를 만드는 반복자를 만들고 각 결과 요소를 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 에 래핑합니다 .</target>
        </trans-unit>
        <trans-unit id="d09d3bd9a7746920100ed80ad16558a5a0a39f29" translate="yes" xml:space="preserve">
          <source>This will escape the passed in parameters, but mark the response as safe, so Handlebars will not try to escape it even if the &quot;triple-stash&quot; is not used.</source>
          <target state="translated">전달 된 매개 변수는 빠져 나가지 만 응답을 안전한 것으로 표시하므로 &quot;삼중 줄&quot;을 사용하지 않더라도 핸들 바는 이스케이프를 시도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e862a6d46371f296e8331f038a8f64752b8208e0" translate="yes" xml:space="preserve">
          <source>To better illustrate the syntax, let's define another block helper that adds some markup to the wrapped text.</source>
          <target state="translated">구문을 더 잘 설명하기 위해 줄 바꿈 된 텍스트에 마크 업을 추가하는 다른 블록 도우미를 정의 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="bd997a4723750e77215138f930593dffe32dce8e" translate="yes" xml:space="preserve">
          <source>To reference a property that is not a valid identifier, you can use segment-literal notation, &lt;code&gt;[&lt;/code&gt;:</source>
          <target state="translated">유효한 식별자가 아닌 속성을 참조하려면 세그먼트 리터럴 표기법 &lt;code&gt;[&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="4fbc5839e0595002eeec6eef8a6d29ab7c36bbd0" translate="yes" xml:space="preserve">
          <source>Unless explicitly modified, this value is consistent across all portions of the page rendering, meaning it can be used within partials where depthed parameters are unable to reference their parent templates.</source>
          <target state="translated">명시 적으로 수정하지 않는 한,이 값은 페이지 렌더링의 모든 부분에서 일관되므로 깊이있는 매개 변수가 부모 템플릿을 참조 할 수없는 부분에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5b03975c3d0ba931e7d5cd28011304f390e9e36" translate="yes" xml:space="preserve">
          <source>Unregisters a previously registered decorator.</source>
          <target state="translated">이전에 등록한 데코레이터를 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="1df523f877c31b136425ab258a4eb86df77ed5f4" translate="yes" xml:space="preserve">
          <source>Unregisters a previously registered helper.</source>
          <target state="translated">이전에 등록 된 도우미를 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="68a2d96d869c7def2b71a08bc5b79e00577ce0fc" translate="yes" xml:space="preserve">
          <source>Unregisters a previously registered partial.</source>
          <target state="translated">이전에 등록 된 부분을 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="0c9dcfd37180fbb7f94284fe9e1163db1a9dadf3" translate="yes" xml:space="preserve">
          <source>Used by block helpers to create child data objects.</source>
          <target state="translated">블록 도우미가 자식 데이터 개체를 생성하는 데 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0b34b1ba976495371f53151646e69af6d460bf09" translate="yes" xml:space="preserve">
          <source>Using a library like underscore.js or SproutCore's runtime library could make this a bit prettier. For example, here's what it might look like using SproutCore's runtime library:</source>
          <target state="translated">underscore.js 또는 SproutCore의 런타임 라이브러리와 같은 라이브러리를 사용하면 조금 더 예쁘게 만들 수 있습니다. 예를 들어, SproutCore의 런타임 라이브러리를 사용하는 모습은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6d1e93c8156928b9629c22ee9e60d21acfcbb5b1" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;-g&lt;/code&gt; flag installs the package globally, so it can be used in any project.</source>
          <target state="translated">&lt;code&gt;-g&lt;/code&gt; 플래그를 사용하면 패키지를 전체적으로 설치하므로 모든 프로젝트에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c3b5e1874888958747c13bf2a275e78f0391103" translate="yes" xml:space="preserve">
          <source>Using the Handlebars precompiler, you can precompile your Handlebars templates to save time on the client and reduce the required runtime size of the handlebars library.</source>
          <target state="translated">Handlebars 프리 컴파일러를 사용하여 Handlebars 템플리트를 사전 컴파일하여 클라이언트의 시간을 절약하고 핸들 바 라이브러리의 필요한 런타임 크기를 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="81df9772ede32e8618aef1d773ac1f74aa3b9f32" translate="yes" xml:space="preserve">
          <source>Values defined in this object will replace any values defined in the global object for the duration of the template execution.</source>
          <target state="translated">이 개체에 정의 된 값은 템플릿 실행 기간 동안 전역 개체에 정의 된 모든 값을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="8b630de5235003c088251fb6dc5eec82dbc9ba4f" translate="yes" xml:space="preserve">
          <source>When all helpers are known at compile time, the &lt;code&gt;--knownOnly&lt;/code&gt; option provides the smallest generated code that also provides the fastest execution.</source>
          <target state="translated">컴파일시에 모든 헬퍼가 알려지면 &lt;code&gt;--knownOnly&lt;/code&gt; 옵션은 가장 빠른 실행을 제공하는 가장 작은 생성 코드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f2a19621a995bf7ba7ba5dad385d4acf144946c1" translate="yes" xml:space="preserve">
          <source>When called in this manner, the block will execute under the context of the partial at the time of the call. Depthed paths and block parameters operate relative to the partial block rather than the partial template.</source>
          <target state="translated">이러한 방식으로 호출 될 때, 블록은 호출시에 부분의 컨텍스트 하에서 실행될 것이다. 깊이있는 경로 및 블록 매개 변수는 부분 템플릿이 아닌 부분 블록을 기준으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="83c1be9c148ece70c5e62885cc891468b36414cc" translate="yes" xml:space="preserve">
          <source>When constructing the string that will be marked as safe, any external content should be properly escaped using the &lt;code&gt;Handlebars.escapeExpression&lt;/code&gt; method to avoid potential security concerns.</source>
          <target state="translated">안전한 것으로 표시 될 문자열을 구성 할 때 잠재적 인 보안 문제를 피하기 위해 &lt;code&gt;Handlebars.escapeExpression&lt;/code&gt; 메소드를 사용하여 외부 컨텐츠를 올바르게 이스케이프해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a6389480aac8eb1021b159c9dbe0bd4ea2770d78" translate="yes" xml:space="preserve">
          <source>When executed, the template will render:</source>
          <target state="translated">실행되면 템플릿이 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="18a9f6547c1f9a983f1cdf8725ec87dbfcf44593" translate="yes" xml:space="preserve">
          <source>When looping through items in &lt;code&gt;each&lt;/code&gt;, you can optionally reference the current loop index via &lt;code&gt;{{@index}}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;each&lt;/code&gt; 항목을 반복 할 때 &lt;code&gt;{{@index}}&lt;/code&gt; 를 통해 현재 루프 색인을 선택적으로 참조 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="1f1d0ac1d64a7a1a172c025fd09bcfd6791edbca" translate="yes" xml:space="preserve">
          <source>When returning HTML from a helper, you should return a Handlebars SafeString if you don't want it to be escaped by default. When using SafeString all unknown or unsafe data should be manually escaped with the &lt;code&gt;escapeExpression&lt;/code&gt; method.</source>
          <target state="translated">도우미에서 HTML을 반환 할 때 기본적으로 이스케이프하지 않으려면 Handlebars SafeString을 반환해야합니다. SafeString을 사용하는 경우 &lt;code&gt;escapeExpression&lt;/code&gt; 메소드를 사용하여 알 수 없거나 안전하지 않은 모든 데이터를 수동으로 이스케이프해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2eca365b057d1b56de954f4babd150abad1ddc32" translate="yes" xml:space="preserve">
          <source>When set, the logger will include in its output only messages with a log level of &lt;code&gt;Handlebars.logger.level&lt;/code&gt; or higher. The default value is &lt;code&gt;Handlebars.logger.ERROR&lt;/code&gt;.</source>
          <target state="translated">설정된 로거는 로그 레벨이 &lt;code&gt;Handlebars.logger.level&lt;/code&gt; 이상인 메시지 만 출력에 포함 합니다. 기본값은 &lt;code&gt;Handlebars.logger.ERROR&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bc2188c30858a8d01c14b687f39b128ae89f4eef" translate="yes" xml:space="preserve">
          <source>When using a block expression, you can specify a template section to run if the expression returns a falsy value. The section, marked by &lt;code&gt;{{else}}&lt;/code&gt; is called an &quot;else section&quot;.</source>
          <target state="translated">블록 표현식을 사용할 때 표현식이 잘못된 값을 반환하는 경우 실행할 템플릿 섹션을 지정할 수 있습니다. &lt;code&gt;{{else}}&lt;/code&gt; 로 표시된 섹션을 &quot;else 섹션&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="8c3eda41aedf57dd51674bea6d2988bf3470a243" translate="yes" xml:space="preserve">
          <source>When writing a conditional, you will often want to make it possible for templates to provide a block of HTML that your helper should insert if the conditional evaluates to false. Handlebars handles this problem by providing generic &lt;code&gt;else&lt;/code&gt; functionality to block helpers.</source>
          <target state="translated">조건부를 작성할 때 조건부가 거짓으로 평가되는 경우 도우미가 삽입해야하는 HTML 블록을 템플릿에서 제공 할 수 있도록하는 경우가 종종 있습니다. 핸들 바는 도우미를 차단 하는 일반적인 &lt;code&gt;else&lt;/code&gt; 기능을 제공하여이 문제를 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="abf741d0d64e780d0eb63623f3d70a82db1c81b5" translate="yes" xml:space="preserve">
          <source>Where the &lt;code&gt;layout&lt;/code&gt; partial may be:</source>
          <target state="translated">어디 &lt;code&gt;layout&lt;/code&gt; 부분이있을 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="ec8d0d2a0e46d47e53389001635002012651263a" translate="yes" xml:space="preserve">
          <source>Which allows for complex templates to potentially provide clearer code than &lt;code&gt;../&lt;/code&gt; depthed references allow for.</source>
          <target state="translated">복잡한 템플릿이 &lt;code&gt;../&lt;/code&gt; 심층 참조가 허용하는 것보다 명확한 코드를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67f5d2c7dfc77a0161bf0e77e7ac98ee22d08514" translate="yes" xml:space="preserve">
          <source>Which will render &lt;code&gt;Failover content&lt;/code&gt; if the &lt;code&gt;myPartial&lt;/code&gt; partial is not registered.</source>
          <target state="translated">&lt;code&gt;myPartial&lt;/code&gt; 부분이 등록되지 않은 경우 &lt;code&gt;Failover content&lt;/code&gt; 를 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="a70ce75b6f3754d3f9999c836e9b39c7b042d379" translate="yes" xml:space="preserve">
          <source>Which will render the &lt;code&gt;myPartial&lt;/code&gt; partial for each child.</source>
          <target state="translated">각 하위에 대해 &lt;code&gt;myPartial&lt;/code&gt; 을 부분적으로 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="d063496b8d15a7f046e5f4a0e53b42d37ae6a81f" translate="yes" xml:space="preserve">
          <source>Whitespace &lt;code&gt;!&lt;/code&gt;&lt;code&gt;&quot;&lt;/code&gt;&lt;code&gt;#&lt;/code&gt;&lt;code&gt;%&lt;/code&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;code&gt;'&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;code&gt;*&lt;/code&gt;&lt;code&gt;+&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;.&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;&lt;code&gt;;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;@&lt;/code&gt;&lt;code&gt;[&lt;/code&gt;&lt;code&gt;\&lt;/code&gt;&lt;code&gt;]&lt;/code&gt;&lt;code&gt;^&lt;/code&gt;&lt;code&gt;`&lt;/code&gt;&lt;code&gt;{&lt;/code&gt;&lt;code&gt;|&lt;/code&gt;&lt;code&gt;}&lt;/code&gt;&lt;code&gt;~&lt;/code&gt;</source>
          <target state="translated">공백 &lt;code&gt;!&lt;/code&gt; &lt;code&gt;&quot;&lt;/code&gt; &lt;code&gt;#&lt;/code&gt; 의 &lt;code&gt;%&lt;/code&gt; &lt;code&gt;&amp;amp;&lt;/code&gt; &lt;code&gt;'&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; &lt;code&gt;.&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;=&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;@&lt;/code&gt; &lt;code&gt;[&lt;/code&gt; &lt;code&gt;\&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; &lt;code&gt;`&lt;/code&gt; &lt;code&gt;{&lt;/code&gt; &lt;code&gt;|&lt;/code&gt; &lt;code&gt;}&lt;/code&gt; &lt;code&gt;~&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="translated">공백 제어</target>
        </trans-unit>
        <trans-unit id="c91b76168ea83cfa26282086282d8b9f78edf52b" translate="yes" xml:space="preserve">
          <source>Will create a &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; variable that children may access without the need for depthed variable references. In the example above, &lt;code&gt;{{key}}&lt;/code&gt; is identical to &lt;code&gt;{{@../key}}&lt;/code&gt; but in many cases is more readable.</source>
          <target state="translated">심층 변수 참조없이 어린이가 액세스 할 수 있는 &lt;code&gt;key&lt;/code&gt; 및 &lt;code&gt;value&lt;/code&gt; 변수를 작성합니다 . 위의 예에서 &lt;code&gt;{{key}}&lt;/code&gt; 는 &lt;code&gt;{{@../key}}&lt;/code&gt; 하지만 대부분의 경우 더 읽기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="7668b8677711dd519ede650b9c483c44c4713465" translate="yes" xml:space="preserve">
          <source>Will each call this helper, passing any arguments that would have been otherwise passed to a helper of the same name. This helper is not called when using &lt;code&gt;knownHelpersOnly&lt;/code&gt; mode.</source>
          <target state="translated">같은 이름의 도우미에게 전달 된 인수를 전달하여 각각이 도우미를 호출합니다. &lt;code&gt;knownHelpersOnly&lt;/code&gt; 모드를 사용할 때는이 도우미가 호출되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="c36205b6a91282a9ea18477a85f6bd5d03f01858" translate="yes" xml:space="preserve">
          <source>Will evaluate &lt;code&gt;whichPartial&lt;/code&gt; and then render the partial whose name is returned by this function.</source>
          <target state="translated">&lt;code&gt;whichPartial&lt;/code&gt; 을 평가 한 다음이 함수가 이름을 반환하는 부분을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="d191bda94856ed536ddd33641abb60955067a4ab" translate="yes" xml:space="preserve">
          <source>Will render &lt;code&gt;child.value&lt;/code&gt; from this template, not the partial.</source>
          <target state="translated">부분이 아닌이 템플릿에서 &lt;code&gt;child.value&lt;/code&gt; 를 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="7a9e2ff6b3e2be52977a2364d06ffab14fe99e6d" translate="yes" xml:space="preserve">
          <source>Will render the partial named &lt;code&gt;myPartial&lt;/code&gt;. When the partial executes, it will be run under the current execution context.</source>
          <target state="translated">이름이 &lt;code&gt;myPartial&lt;/code&gt; 인 부분을 ​​렌더링합니다 . 부분 실행시 현재 실행 컨텍스트에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="8a28fb1d2dcdd3bf30bcfc13c3a0c9e1d1a1080a" translate="yes" xml:space="preserve">
          <source>Will set &lt;code&gt;parameter&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; when the partial runs.</source>
          <target state="translated">부분 실행시 &lt;code&gt;parameter&lt;/code&gt; 를 &lt;code&gt;value&lt;/code&gt; 설정 합니다.</target>
        </trans-unit>
        <trans-unit id="a49520d205c9963c25d934658a553e92440fd6b8" translate="yes" xml:space="preserve">
          <source>Will set the key &lt;code&gt;bar&lt;/code&gt; on object &lt;code&gt;foo&lt;/code&gt; with the value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">객체 &lt;code&gt;foo&lt;/code&gt; 의 키 &lt;code&gt;bar&lt;/code&gt; &lt;code&gt;true&lt;/code&gt; 값으로 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="d0511d7ca854c47f1ce6c3ec96f77088907bd6eb" translate="yes" xml:space="preserve">
          <source>Would render</source>
          <target state="translated">렌더링</target>
        </trans-unit>
        <trans-unit id="59ca815780ddb64e3f4849d09aa12b6ced6db1ee" translate="yes" xml:space="preserve">
          <source>You can also pass a simple String, number, or boolean as a parameter to Handlebars helpers.</source>
          <target state="translated">또한 핸들 바 도우미에 간단한 문자열, 숫자 또는 부울을 매개 변수로 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e33e154d8aa57020a4dfca5ee66713128ed054de" translate="yes" xml:space="preserve">
          <source>You can deliver a template to the browser by including it in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그에 템플릿을 포함시켜 템플릿을 브라우저에 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="740f9efbf2ea30dfcc41131cefcae6fca48022f2" translate="yes" xml:space="preserve">
          <source>You can iterate over a list using the built-in &lt;code&gt;each&lt;/code&gt; helper. Inside the block, you can use &lt;code&gt;this&lt;/code&gt; to reference the element being iterated over.</source>
          <target state="translated">내장 된 &lt;code&gt;each&lt;/code&gt; 도우미를 사용하여 목록을 반복 할 수 있습니다 . 블록 내부 &lt;code&gt;this&lt;/code&gt; 요소를 사용 하여 반복되는 요소를 참조 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e54246d615374db4563a51dfa5b971c7ac2186e2" translate="yes" xml:space="preserve">
          <source>You can optionally provide an &lt;code&gt;{{else}}&lt;/code&gt; section which will display only when the list is empty.</source>
          <target state="translated">선택적으로 목록이 비어있을 때만 표시되는 &lt;code&gt;{{else}}&lt;/code&gt; 섹션을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9c79b3fbdd1e27d38a859ba1166ff3127e6ec7a9" translate="yes" xml:space="preserve">
          <source>You can optionally provide an &lt;code&gt;{{else}}&lt;/code&gt; section which will display only when the passed value is empty.</source>
          <target state="translated">전달 된 값이 비어있는 경우에만 표시되는 &lt;code&gt;{{else}}&lt;/code&gt; 섹션을 선택적으로 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2dc656be204cbaef53065dbd51adbb4e1cb1dc60" translate="yes" xml:space="preserve">
          <source>You can shift the context for a section of a template by using the built-in &lt;code&gt;with&lt;/code&gt; block helper.</source>
          <target state="translated">기본 제공 &lt;code&gt;with&lt;/code&gt; block helper 를 사용하여 템플릿 섹션의 컨텍스트를 이동할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d556a4fd36bf07390810b3212a5ebb64ce3a799" translate="yes" xml:space="preserve">
          <source>You can use comments in your handlebars code just as you would in your code. Since there is generally some level of logic, this is a good practice.</source>
          <target state="translated">코드에서와 마찬가지로 핸들 바 코드에서 주석을 사용할 수 있습니다. 일반적으로 몇 가지 수준의 논리가 있기 때문에이 방법이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="931e33ef122671dbbc30b9b83063955ed4e96f36" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;if&lt;/code&gt; helper to conditionally render a block. If its argument returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;[]&lt;/code&gt;, Handlebars will not render the block.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 도우미를 사용하여 조건부로 블록을 렌더링 할 수 있습니다 . 인수가 &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;undefined&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; , &lt;code&gt;&quot;&quot;&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; 또는 &lt;code&gt;[]&lt;/code&gt; 를 반환 하면 핸들 바는 블록을 렌더링하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="62dfb874377958abbfda84e717a8f413002c04df" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;this&lt;/code&gt; expression in any context to reference the current context.</source>
          <target state="translated">모든 컨텍스트 &lt;code&gt;this&lt;/code&gt; 표현식을 사용 하여 현재 컨텍스트를 참조 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6d08ca10f430707d6c454dccbb3e31a08d47b1b4" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;unless&lt;/code&gt; helper as the inverse of the &lt;code&gt;if&lt;/code&gt; helper. Its block will be rendered if the expression returns a falsy value.</source>
          <target state="translated">당신은 사용 &lt;code&gt;unless&lt;/code&gt; 의 역으로 도우미를 &lt;code&gt;if&lt;/code&gt; 도우미. 식이 잘못된 값을 반환하면 블록이 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="ab1f762f9f56033322b077a091a0ca88ea94366d" translate="yes" xml:space="preserve">
          <source>You could use the exact same helper with dynamic text based on the value of &lt;code&gt;story.text&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;story.text&lt;/code&gt; 의 값을 기반으로 동적 텍스트와 동일한 도우미를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c63f18275acec3ccdc6c540aea37e0499f159ea" translate="yes" xml:space="preserve">
          <source>You may not include a closing &lt;code&gt;]&lt;/code&gt; in a path-literal, but all other characters are fair game.</source>
          <target state="translated">경로 리터럴에 닫는 &lt;code&gt;]&lt;/code&gt; 을 포함 할 수는 없지만 다른 모든 캐릭터는 공정한 게임입니다.</target>
        </trans-unit>
        <trans-unit id="8cc7b5d014d431dc357b0e34c495210db20799e2" translate="yes" xml:space="preserve">
          <source>You might find a helper like this useful if a section of your JSON object contains deeply nested properties, and you want to avoid repeating the parent name. The above template could be useful with a JSON like:</source>
          <target state="translated">JSON 객체의 섹션에 중첩 된 속성이 포함되어 있고 부모 이름을 반복하지 않으려는 경우 이와 같은 도우미가 유용 할 수 있습니다. 위 템플릿은 다음과 같은 JSON에서 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17060c4f4f4a67f8f6a42a7b9b5e705090d03820" translate="yes" xml:space="preserve">
          <source>You would evaluate this template using something like this as the context:</source>
          <target state="translated">이 템플릿을 컨텍스트로 사용하여이 템플릿을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="cc240c7c2939b82e01a9dd8fc60a02aad5a9c71c" translate="yes" xml:space="preserve">
          <source>Zero-based index for the current iteration step. Set by the &lt;code&gt;each&lt;/code&gt; helper.</source>
          <target state="translated">현재 반복 단계의 인덱스 (0부터 시작)입니다. &lt;code&gt;each&lt;/code&gt; 도우미가 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="7c2e0f788e9ba3d0dd59ef605862016d60039380" translate="yes" xml:space="preserve">
          <source>cdnjs</source>
          <target state="translated">cdnjs</target>
        </trans-unit>
        <trans-unit id="e7bacd2b612da6640e7a47f3e925715f23cdf271" translate="yes" xml:space="preserve">
          <source>could be used to prevent the use of mustache-style block evaluation in favor of the more efficent &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;each&lt;/code&gt; helpers.</source>
          <target state="translated">보다 효율적인 &lt;code&gt;if&lt;/code&gt; 및 &lt;code&gt;each&lt;/code&gt; 도우미 를 위해 콧수염 스타일의 블록 평가를 사용하지 못하게하는 데 사용될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53ab47ee081952040a472a22395a8613da1381fe" translate="yes" xml:space="preserve">
          <source>falsy values other than 0</source>
          <target state="translated">0 이외의 잘못된 값</target>
        </trans-unit>
        <trans-unit id="b9083ebae4d86f53856fb248d3083ac7669b384f" translate="yes" xml:space="preserve">
          <source>or for the runtime only:</source>
          <target state="translated">또는 런타임 전용 :</target>
        </trans-unit>
        <trans-unit id="ea0d137fa0077ce0c7953f0dceb93af4ba0cb4fa" translate="yes" xml:space="preserve">
          <source>results in</source>
          <target state="translated">결과</target>
        </trans-unit>
        <trans-unit id="43c71798608cdac127fa5f83c7419f1cfd220052" translate="yes" xml:space="preserve">
          <source>results in output sans newlines and formatting whitespace:</source>
          <target state="translated">출력 새 줄 바꿈 및 공백 서식 지정 :</target>
        </trans-unit>
        <trans-unit id="26b6c5749772d64c63b81c8b45bd59ad3f8e291a" translate="yes" xml:space="preserve">
          <source>results in:</source>
          <target state="translated">결과 :</target>
        </trans-unit>
        <trans-unit id="143e97e95e86471c355e52b5476c29fcfd70c382" translate="yes" xml:space="preserve">
          <source>we would create a helper named &lt;code&gt;list&lt;/code&gt; to generate our HTML list. The helper receives the &lt;code&gt;people&lt;/code&gt; as its first parameter, and an options hash as its second parameter. The options hash contains a property named &lt;code&gt;fn&lt;/code&gt;, which you can invoke with a context just as you would invoke a normal Handlebars template.</source>
          <target state="translated">HTML 목록을 생성하기 위해 &lt;code&gt;list&lt;/code&gt; 라는 도우미를 만들 것 입니다. 도우미는 &lt;code&gt;people&lt;/code&gt; 을 첫 번째 매개 변수로 받고 옵션 해시를 두 번째 매개 변수로받습니다. 옵션 해시는 &lt;code&gt;fn&lt;/code&gt; 이라는 속성을 포함하며 , 일반 핸들 바 템플릿을 호출하는 것과 같이 컨텍스트를 사용하여 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c9ce1800fd1898836fac416b653ecffb2ef5295" translate="yes" xml:space="preserve">
          <source>when used with an empty (&lt;code&gt;{}&lt;/code&gt;) context, &lt;code&gt;author&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt;, resulting in:</source>
          <target state="translated">비어있는 ( &lt;code&gt;{}&lt;/code&gt; ) 컨텍스트 와 함께 사용 하면 &lt;code&gt;author&lt;/code&gt; 가 &lt;code&gt;undefined&lt;/code&gt; 않아 다음과 같은 결과가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="30d30b508f2d0fc33747deb3f3afcb0ae9c71333" translate="yes" xml:space="preserve">
          <source>when used with this context:</source>
          <target state="translated">이 문맥과 함께 사용될 때 :</target>
        </trans-unit>
        <trans-unit id="a0ceb3f2d9edb025ec553201397431d2554abb89" translate="yes" xml:space="preserve">
          <source>when using this context and helpers:</source>
          <target state="translated">이 문맥과 도우미를 사용할 때 :</target>
        </trans-unit>
        <trans-unit id="fde6ab5c887d7497613c494c0a9a2c586334870f" translate="yes" xml:space="preserve">
          <source>when using this partial and context:</source>
          <target state="translated">이 부분 및 컨텍스트를 사용할 때 :</target>
        </trans-unit>
        <trans-unit id="b745e3f53d1c2c04dff9df4243f72721f6fda9f9" translate="yes" xml:space="preserve">
          <source>will call this helper with the resolved value of &lt;code&gt;foo&lt;/code&gt; on the current context and the &lt;code&gt;options.name&lt;/code&gt; field set to &lt;code&gt;&quot;foo&quot;&lt;/code&gt;. For instances where there is no registered helper named &lt;code&gt;foo&lt;/code&gt;.</source>
          <target state="translated">현재 컨텍스트 에서 해결 된 &lt;code&gt;foo&lt;/code&gt; 값 과 &lt;code&gt;options.name&lt;/code&gt; 필드가 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 로 설정된 이 헬퍼를 호출합니다 . &lt;code&gt;foo&lt;/code&gt; 라는 등록 된 헬퍼가없는 경우 .</target>
        </trans-unit>
        <trans-unit id="50520ceb5eae3cf6ac53d9a6d73937f799bc30d6" translate="yes" xml:space="preserve">
          <source>will execute the helper &lt;code&gt;raw-helper&lt;/code&gt; without interpreting the content.</source>
          <target state="translated">도우미 실행됩니다 &lt;code&gt;raw-helper&lt;/code&gt; 의 내용을 해석하지 않고.</target>
        </trans-unit>
        <trans-unit id="05a96f5a1e4cd6898c709a87379229729e1b32ee" translate="yes" xml:space="preserve">
          <source>will render</source>
          <target state="translated">렌더링합니다</target>
        </trans-unit>
        <trans-unit id="12f69b768fbdb877106cba3b6d6afbd305a42b1c" translate="yes" xml:space="preserve">
          <source>will result in:</source>
          <target state="translated">결과 :</target>
        </trans-unit>
        <trans-unit id="aec763673dbe5fee9c6b294b383764e344b9778d" translate="yes" xml:space="preserve">
          <source>with the &lt;code&gt;layout&lt;/code&gt; partial containing</source>
          <target state="translated">와 &lt;code&gt;layout&lt;/code&gt; 부분이 포함</target>
        </trans-unit>
        <trans-unit id="f7e940da3f78ad1b9e2480e6aa8bc686ab719ad8" translate="yes" xml:space="preserve">
          <source>with this context:</source>
          <target state="translated">이 맥락에서 :</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
